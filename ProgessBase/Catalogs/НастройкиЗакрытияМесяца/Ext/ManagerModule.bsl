
///////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ НАСТРОЕК РАСПРЕДЕЛЕНИЯ ЗАТРАТ

// Проверяет правильность заполнения списка СпособыРаспределения
// 
// Параметры: 
//  СпособыРаспределения - таблица значений, содержащая данные табличной части СпособыРаспределения
// 
// Возвращаемое значение:
//  Истина - список заполнен корректно
//  Ложь - список заполнен некорректно
//
Функция ПроверитьЗаполнениеСпособовРаспределения(СпособыРаспределения) Экспорт
	
	Отказ = Ложь;
	
	Если СпособыРаспределения.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заданы настройки распределения затрат'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
		Возврат НЕ Отказ;
		
	КонецЕсли;
	
	СпособыДляПростогоРаспределения =
		УчетЗатрат.СпособыТребующиеИспользоватьПростоеРаспределение(
			СпособыРаспределения.ВыгрузитьКолонку("СпособРаспределения"));
	
	ОтборПоНоменклатурнойГруппе = Новый Массив;
	Для каждого Строка из СпособыРаспределения Цикл
		Если ЗначениеЗаполнено(Строка.НоменклатурнаяГруппа) Тогда
			ОтборПоНоменклатурнойГруппе.Добавить(Строка.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	// Настройка ИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат не совместима 
	// - с "упрощенными" способами распределения
	// - с отбором по номенклатурной группе
	Если УчетЗатрат.ИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат() Тогда
		
		Если СпособыДляПростогоРаспределения.Количество() > 0 ИЛИ ОтборПоНоменклатурнойГруппе.Количество() > 0 Тогда
			 
			ТекстСообщения = НСтр("ru = 'Если способы распределения затрат разрешено изменять, то
				|'");
			
			Если СпособыДляПростогоРаспределения.Количество() > 0 Тогда
				
				ТекстСообщения = ТекстСообщения + НСтр("ru = '- нельзя выбирать %СпособыРаспределения1 %ПереченьСпособов (cейчас %СпособыРаспределения2 в %Строках %НомераСтрок)
					|'");
			
				МассивНомеров = Новый Массив;
				Для Каждого Строка Из СпособыРаспределения Цикл
					Если СпособыДляПростогоРаспределения.Найти(Строка.СпособРаспределения) <> Неопределено Тогда
						МассивНомеров.Добавить(Строка.НомерСтроки);
					КонецЕсли;
				КонецЦикла;
				
				УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеров);
				
				ТекстСообщения = СтрЗаменить(
					ТекстСообщения,
					"%СпособыРаспределения1",
					?(СпособыДляПростогоРаспределения.Количество() = 1,
						"способ распределения",
						"способы распределения"));
				ТекстСообщения = СтрЗаменить(
					ТекстСообщения,
					"%СпособыРаспределения2",
					?(СпособыДляПростогоРаспределения.Количество() = 1,
						"такой способ выбран",
						"такие способы выбраны"));
				ТекстСообщения = СтрЗаменить(
					ТекстСообщения,
					"%ПереченьСпособов",
					СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(СпособыДляПростогоРаспределения, ", "));
				
			КонецЕсли;
			
			Если ОтборПоНоменклатурнойГруппе.Количество() > 0 Тогда
				
				ТекстСообщения = ТекстСообщения + НСтр("ru = '- нельзя использовать отбор по номенклатурной группе (cейчас такой отбор используется в %Строках %НомераСтрок)
					|'");
				
				УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, ОтборПоНоменклатурнойГруппе);
				
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Изменение способов распределения затрат разрешено в форме ""Настройка параметров учета"", раздел ""Способы распределения затрат""'");
				
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецЕсли;
		
		Возврат НЕ Отказ;
		
	КонецЕсли;
	
	// "Гибкая настройка способов распределения затрат" не используется.
	
	// Недопустимо наличие в настройках распределения затрат незаполненных характеров затрат при использовании
	// - "упрощенных" способов распределения
	// - отбора по номенклатурной группе
	СтрокиСПустымХарактеромЗатрат = СпособыРаспределения.НайтиСтроки(
		Новый Структура(
			"ХарактерЗатрат",
			Перечисления.ХарактерЗатрат.ПустаяСсылка()));
	
	Если СтрокиСПустымХарактеромЗатрат.Количество() > 0
		 И (СпособыДляПростогоРаспределения.Количество() > 0 ИЛИ ОтборПоНоменклатурнойГруппе.Количество() > 0) Тогда
		
		Если СпособыДляПростогоРаспределения.Количество() > 0 И ОтборПоНоменклатурнойГруппе.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Если %ПрименяютсяСпособы распределения %ПереченьСпособов или используется отбор по номенклатурной группе, то во всех строках следует указать конкретный характер затрат.
				|'");
		ИначеЕсли СпособыДляПростогоРаспределения.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Если %ПрименяютсяСпособы распределения %ПереченьСпособов, то во всех строках следует указать конкретный характер затрат.
				|'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Если используется отбор по номенклатурной группе, то во всех строках следует указать конкретный характер затрат.
				|'");
		КонецЕсли;
		
		Если СпособыДляПростогоРаспределения.Количество() > 0 Тогда
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%ПрименяютсяСпособы",
				?(СпособыДляПростогоРаспределения.Количество() = 1,
					"применяется способ",
					"применяются способы"));
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%ПереченьСпособов",
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(СпособыДляПростогоРаспределения, ", "));
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Сейчас настройка <По всем характерам затрат> выбрана в %Строках %НомераСтрок.'");
		
		МассивНомеров = Новый Массив;
		Для Каждого Строка Из СтрокиСПустымХарактеромЗатрат Цикл
			МассивНомеров.Добавить(Строка.НомерСтроки);
		КонецЦикла;
		
		УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеров);
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
	КонецЕсли;
	
	// Убедимся, что в строках указаны подходящие базы распределения
	
	// Ключ - номер строки ТЧ СпособыРаспределения
	// Значение - СпособРаспределения
	БазыКоторыеНельзяИспользовать = Новый Соответствие;
	
	// Ключ - ХарактерЗатрат
	// Значение - Массив, элементы массива - номера строк ТЧ СпособыРаспределения
	БазыКоторыеНеПрименимы = Новый Соответствие;
	
	Для Каждого Настройка Из СпособыРаспределения Цикл
		
		База = Настройка.СпособРаспределения;
		
		Если НЕ ЗначениеЗаполнено(База) Тогда
			// Пустая база означает, что расходы распределять не требуется
			Продолжить;
		КонецЕсли;
		
		// "Старые" способы не "сработают" совместно с "новыми" способами:
		// если в настройке закрытия указаны "новые" способы, то распределение затрат будет выполняться "новым" механизмом
		Если НЕ ЗначениеЗаполнено(База.ТипБазыРаспределения) Тогда
			БазыКоторыеНельзяИспользовать.Вставить(Настройка.НомерСтроки, База);
		КонецЕсли;
		
		// Проверим, что база применима в данном контексте
		Контекст = Настройка.ХарактерЗатрат;
		Если НЕ БазаПрименима(База, Контекст) Тогда
			МассивСтрокЭтогоКонтекста = БазыКоторыеНеПрименимы[Контекст];
			Если МассивСтрокЭтогоКонтекста = Неопределено Тогда
				МассивСтрокЭтогоКонтекста = Новый Массив;
			КонецЕсли;
			МассивСтрокЭтогоКонтекста.Добавить(Настройка.НомерСтроки);
		   	БазыКоторыеНеПрименимы.Вставить(Контекст, МассивСтрокЭтогоКонтекста);
		КонецЕсли;
		
	КонецЦикла;
	
	Если БазыКоторыеНельзяИспользовать.Количество() = 0 
	 И БазыКоторыеНеПрименимы.Количество() = 0 Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// Сообщим о проблемах
	
	// "Старые" базы и номенклатурные группы
	СтрокиСПустойНоменклатурнойГруппой = СпособыРаспределения.НайтиСтроки(
		Новый Структура(
			"НоменклатурнаяГруппа",
			Справочники.НоменклатурныеГруппы.ПустаяСсылка()));
	
	Если СтрокиСПустойНоменклатурнойГруппой.Количество() <> СпособыРаспределения.Количество()
	 И БазыКоторыеНельзяИспользовать.Количество() > 0 Тогда
		
		МассивНомеров = Новый Массив;
		Для Каждого ОписаниеБазы Из БазыКоторыеНельзяИспользовать Цикл
			МассивНомеров.Добавить(ОписаниеБазы.Ключ);
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'В %Строках %НомераСтрок %СпособыРаспределения, так как в настройке указаны номенклатурные группы.'");
		
		УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеров);							
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%СпособыРаспределения",
			?(МассивНомеров.Количество() = 1,
				"указан способ распределения, который не сработает",
				"указаны способы распределения, которые не сработают"));
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
	 	
 	КонецЕсли;
	
	// Несовместимые базы
	Если СпособыДляПростогоРаспределения.Количество() > 0
	 И БазыКоторыеНельзяИспользовать.Количество() > 0 Тогда
		
		МассивНомеров = Новый Массив;
		Для Каждого ОписаниеБазы Из БазыКоторыеНельзяИспользовать Цикл
			МассивНомеров.Добавить(ОписаниеБазы.Ключ);
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'В %Строках %НомераСтрок %СпособыРаспределения совместно со %Способами %ПереченьСпособов.'");
		
		УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеров);							
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%СпособыРаспределения",
			?(МассивНомеров.Количество() = 1,
				"указан способ распределения, который не сработает",
				"указаны способы распределения, которые не сработают"));
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%Способами",
			?(СпособыДляПростогоРаспределения.Количество() = 1,
				"способом",
				"способами"));
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ПереченьСпособов",
			СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(СпособыДляПростогоРаспределения, ", "));
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
	КонецЕсли;
	
	// Соответствие контекста и баз
	ОписаниеКонтекста = Новый Соответствие;
	ОписаниеКонтекста.Вставить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы,     НСтр("ru = 'производственных расходов'"));
	ОписаниеКонтекста.Вставить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы, НСтр("ru = 'общепроизводственных расходов'"));
	ОписаниеКонтекста.Вставить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы,    НСтр("ru = 'общехозяйственных расходов'"));
	ОписаниеКонтекста.Вставить(Перечисления.ХарактерЗатрат.БракВПроизводстве,           НСтр("ru = 'потерь от брака в производстве'"));
	ОписаниеКонтекста.Вставить(Перечисления.ХарактерЗатрат.КоммерческиеРасходы,         НСтр("ru = 'расходов на продажу'"));
	ОписаниеКонтекста.Вставить(Перечисления.ХарактерЗатрат.ИздержкиОбращения,           НСтр("ru = 'издержек обращения'"));
	
	Для Каждого Контекст Из БазыКоторыеНеПрименимы Цикл
		
		МассивНомеров = Контекст.Значение; // Базы, неприменимые в этом контексте
		
		ТекстОписанияКонтекста = ОписаниеКонтекста[Контекст.Ключ];
		Если НЕ ЗначениеЗаполнено(ТекстОписанияКонтекста) Тогда
			ТекстОписанияКонтекста = Нстр("ru = 'затрат с характером ""%Контекст""'");
			ТекстОписанияКонтекста = СтрЗаменить(ТекстОписанияКонтекста, "%Контекст", Контекст.Ключ);
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В %Строках %НомераСтрок %СпособыРаспределения нельзя использовать для распределения %Контекст.'");
		
		УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеров);							
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%СпособыРаспределения",
			?(МассивНомеров.Количество() = 1,
				"указан способ распределения, который",
				"указаны способы распределения, которые"));
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%Контекст",
			ТекстОписанияКонтекста);
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
	КонецЦикла;
	
	Возврат НЕ Отказ;
	
КонецФункции

///////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает перечень полей табличной части Правила,
// которые описывают затраты, подлежащие распределению.
Функция ПоляОтбора() Экспорт
	
	// Поля в массиве упорядочены - от более общих к частным, детальным.
	// Самую первую колонку - счет - обрабатываем по особому.
	//
	ИменаПолейОтбора = Новый Массив; 
	ИменаПолейОтбора.Добавить("ХарактерЗатрат");
	ИменаПолейОтбора.Добавить("ВидПодразделения");
	ИменаПолейОтбора.Добавить("Подразделение");
	ИменаПолейОтбора.Добавить("СтатьяЗатрат");
	ИменаПолейОтбора.Добавить("НоменклатурнаяГруппа");
	
	Возврат ИменаПолейОтбора;
	
КонецФункции

// Процедура дополнит настройку колонками, которые позволят задать отбор затрат.
//
// Настройка может содержать пустые значения.
// Это обозначает "Все, для которых не указано особе правило".
// Чтобы задать отбор, нужно эти пустые значения сделать более детерминированными, привести к виду:
// - либо "НЕ <список значений>" (где список - это те значения, для которых задано особое правило)
// - либо "на отбор не влияет" (если ни для кого не задано особое правило)
//
// Добавим колонки:
// - ВидыОтбора     - структура, имена которой - имена полей отбора, а значения - виды отбора компоновки
// - ЗначенияОтбора - структура, имена которой - имена полей отбора, а значения - значения отбора
Процедура ДобавитьКолонкиОтбораЗатрат(Настройка) Экспорт
	
	// Добавим колонки
	Настройка.Колонки.Добавить("ВидыОтбора",     Новый ОписаниеТипов("Соответствие"));
	Настройка.Колонки.Добавить("ЗначенияОтбора", Новый ОписаниеТипов("Соответствие"));
	
	// Проиндексируем колонки отбора - по ним придется отбирать строки
	МассивИндексов = Новый Массив;
	Для Каждого ИмяПоля Из ПоляОтбора() Цикл
		МассивИндексов.Добавить(ИмяПоля);
		СтрокаИндекса = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивИндексов);
		Настройка.Индексы.Добавить(СтрокаИндекса);
	КонецЦикла;
	
	// Обойдем колонки (поля отбора), начиная с последней (правой).
	// При этом нам важны значения всех колонок,
	// которые находятся слева от текущей.
	
	ПоляОтбора = Новый Массив; // Хранит поля, которые нам важны
	Для Каждого ИмяПоля Из ПоляОтбора() Цикл
		ПоляОтбора.Вставить(0, ИмяПоля); // В результате в ПоляОтбора колонки в обратном порядке, по сравнению с ПоляОтбора()
	КонецЦикла;
	
	Пока ПоляОтбора.Количество() > 1 Цикл // Обрабатываем все колонки кроме самой левой (ХарактерЗатрат)
		
		ИмяОбрабатываемойКолонки = ПоляОтбора[0];
		
		СтруктураОтбора = Новый Структура(); // Содержит значения колонок, слева от обрабатываемой
		Для Каждого ИмяКолонки Из ПоляОтбора Цикл
			Если ИмяКолонки <> ИмяОбрабатываемойКолонки Тогда
				СтруктураОтбора.Вставить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		
		// Заполним структуры отбора (добавим в них ключи, соответствующие текущей колонке)
		Для Каждого Строка Из Настройка Цикл
			
			ЗначениеОтбора = Строка[ИмяОбрабатываемойКолонки];
			
			Если ЗначениеЗаполнено(Строка[ИмяОбрабатываемойКолонки]) Тогда
				
				// Всё просто - отбор на равенство
				
				Строка.ВидыОтбора.Вставить(ИмяОбрабатываемойКолонки, ВидСравненияКомпоновкиДанных.Равно);
				Строка.ЗначенияОтбора.Вставить(ИмяОбрабатываемойКолонки, ЗначениеОтбора);
				
			Иначе
				
				// Преобразуем пустое значение поля отбора
				// 1. Найдем строки, которые детализируют текущую строку.
				//    В этих строках значения колонок, которые слева от обрабатываемой - такие же, как и у обрабатываемой
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
				ДетальныеСтроки = Настройка.НайтиСтроки(СтруктураОтбора);
				
				// 2. Составим массив "особых значений", т.е. значений, для которых заданы особые правила
				ОсобыеЗначения = Новый Массив;
				Для Каждого ДетальнаяСтрока Из ДетальныеСтроки Цикл
					ОсобоеЗначение = ДетальнаяСтрока[ИмяОбрабатываемойКолонки];
					Если ЗначениеЗаполнено(ОсобоеЗначение) 
					   И ОсобыеЗначения.Найти(ОсобоеЗначение) = Неопределено Тогда
						ОсобыеЗначения.Добавить(ОсобоеЗначение);
					КонецЕсли;
				КонецЦикла;
				
				// 3. Запишем в колонки для отбора
				Если ОсобыеЗначения.Количество() = 0 Тогда
					// Отбор не нужен
				Иначе
					Строка.ВидыОтбора.Вставить(ИмяОбрабатываемойКолонки, ВидСравненияКомпоновкиДанных.НеВСписке);
					Строка.ЗначенияОтбора.Вставить(ИмяОбрабатываемойКолонки, ОсобыеЗначения);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		ПоляОтбора.Удалить(0); // Колонку обработали
		
	КонецЦикла;
	
	
	Если ПоляОтбора.Количество() = 1 И ПоляОтбора[0] = "ХарактерЗатрат" Тогда
		
		// Обработаем характер затрат по особому:
		// - он всегда должен быть заполнен
		// - настрока для "коммерческих расходов" действует и для "издержек обращения"
	
		Для Каждого Строка Из Настройка Цикл
			
			Если Строка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы Тогда
				
				РасходыНаПродажу = Новый Массив();
				РасходыНаПродажу.Добавить(Перечисления.ХарактерЗатрат.КоммерческиеРасходы);
				РасходыНаПродажу.Добавить(Перечисления.ХарактерЗатрат.ИздержкиОбращения);
				
				Строка.ВидыОтбора.Вставить("ХарактерЗатрат",     ВидСравненияКомпоновкиДанных.ВСписке);
				Строка.ЗначенияОтбора.Вставить("ХарактерЗатрат", РасходыНаПродажу);
				
			Иначе
				
				Строка.ВидыОтбора.Вставить("ХарактерЗатрат",     ВидСравненияКомпоновкиДанных.Равно);
				Строка.ЗначенияОтбора.Вставить("ХарактерЗатрат", Строка.ХарактерЗатрат);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаем применимость баз для данного контекста
//
// Параметры
//  Контекст - ПеречислениеСсылка.ХарактерЗатрат
//
// Возвращаемое значение:
//  Массив, содержащий применяемость баз в данном контексте
//
Функция ПолучитьПрименимостьБаз(Контекст) Экспорт
	
	ПрименимостьБаз = Новый Массив;
	
	Если Контекст = Перечисления.ХарактерЗатрат.ПустаяСсылка() Тогда
		// Применяемые базы:
		// - "Для всех, кроме расходов на продажу"
		
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ПустаяСсылка());
		
	ИначеЕсли Контекст = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		// Применяемые базы:
		// - "Для производственных расходов"
		// - "Для всех, кроме расходов на продажу"
		
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ПустаяСсылка());
		
	ИначеЕсли Контекст = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		// Применяемые базы:
		// - "Для косвенных расходов"
		// - "Для всех, кроме расходов на продажу"
		
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ПустаяСсылка());
		

	ИначеЕсли Контекст = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
		// Применяемые базы:
		// - "Для общехозяйственных расходов"
		// - "Для косвенных расходов"
		// - "Для всех, кроме расходов на продажу" 
		
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ПустаяСсылка());
		
	ИначеЕсли Контекст = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
		        ИЛИ Контекст = Перечисления.ХарактерЗатрат.ИздержкиОбращения Тогда
		// Применяемые базы:
		// - "Для расходов на продажу"
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.КоммерческиеРасходы);
		
	ИначеЕсли Контекст = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		// Применяемые базы:
		// - "Для косвенных расходов"
		// - "Для всех, кроме расходов на продажу"
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
		ПрименимостьБаз.Добавить(Перечисления.ХарактерЗатрат.ПустаяСсылка());
		
	КонецЕсли;
	
	Возврат ПрименимостьБаз;
	
КонецФункции 

// Возвращает список баз, применимых в данном контексте
//
// Параметры
//  Контекст - ПеречислениеСсылка.ХарактерЗатрат
//  Отбор 
//         - массив ссылок на справочник СпособыРаспределенияЗатратНаВыпуск,
//           среди которых нужно найти применимые
//         - ссылка на базу, применимость которой следует проверить
//         - Неопределено, если следует найти все применимые базы
//
// Возвращаемое значение:
//  Массив, содержит ссылки на справочник СпособыРаспределенияЗатратНаВыпуск
Функция ПрименимыеБазы(Контекст, Отбор = Неопределено) Экспорт
	
	// Выберем базы из справочника с учетом контекста и отбора.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпособыРаспределенияЗатратНаВыпуск.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыРаспределенияЗатратНаВыпуск КАК СпособыРаспределенияЗатратНаВыпуск
	|ГДЕ
	|	СпособыРаспределенияЗатратНаВыпуск.Применимость В (&ПрименимостьБаз)
	|	И (&ОтборНеУстановлен
	|			ИЛИ СпособыРаспределенияЗатратНаВыпуск.Ссылка В (&Отбор)
	|			ИЛИ СпособыРаспределенияЗатратНаВыпуск.Ссылка = &Отбор)";
	Запрос.УстановитьПараметр("ПрименимостьБаз",   ПолучитьПрименимостьБаз(Контекст));
	Запрос.УстановитьПараметр("Отбор",             Отбор);
	Запрос.УстановитьПараметр("ОтборНеУстановлен", Отбор = Неопределено);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Проверяет, применима ли база в данном контексте
//  База - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск, проверяемая база
//  Контекст - ПеречислениеСсылка.ХарактерЗатрат
//
// Возвращаемое значение:
//  Истина - база применима
//  Ложь - база не применима
Функция БазаПрименима(База, Контекст) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контекст) Тогда
		Возврат Истина;
	Иначе
		Возврат ПрименимыеБазы(Контекст, База).Количество() > 0;
	КонецЕсли;
	
КонецФункции

