////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Функция формирует табличный документ с печатной формой 
// данных физ. лица
//
// Параметры: 
//  ДатаАктуальности - дата, на которую будут получены значения периодических параметров физ. лица, таких как паспортные данные или ФИО.
//                     Если не задана, то значения периодических параметров будут получены на рабочую дату.
//
// Возвращаемое значение:
//  ТабличныйДокумент
//
Функция ПечатьДанныхФизЛица(ДатаАктуальности = Неопределено, ТабДокумент = Неопределено) Экспорт

	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура; 
	СтруктураДанныхОрганизации = Новый Структура; 
		
	Подробно = Истина;
		
	Запрос = Новый Запрос;

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ФизЛицо" ,	Ссылка);
	Если ДатаАктуальности = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаАктуальности" ,	КонецДня(ОбщегоНазначенияЗК.ПолучитьРабочуюДату()));
	Иначе
		Запрос.УстановитьПараметр("ДатаАктуальности" ,	КонецДня(ДатаАктуальности));
	КонецЕсли;
	Запрос.УстановитьПараметр("Изображение" ,Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение);
	Запрос.УстановитьПараметр("ПустаяСтрока" ,"");
	
	Если Подробно Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.ДатаРождения,
		|	ФизическиеЛица.МестоРождения,
		|	ФизическиеЛица.ИНН,
		|	ФизическиеЛица.Код,
		|	ФизическиеЛица.КодИМНС,
		|	ФизическиеЛица.Пол,
		|	ФизическиеЛица.СтраховойНомерПФР,
		|	ФизическиеЛица.ОсновноеИзображение.Хранилище КАК Данные,
		|	ФизическиеЛица.ОсновноеИзображение.Наименование КАК ОписаниеИзображения,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Представление КАК ДокументВид,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		|
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &ФизЛицо";
		
		Результат = Запрос.Выполнить(); 
		ВыборкаДляПроверок = Результат.Выбрать();
		ВыборкаДляПроверок.Следующий();
		СтруктураДанных.Вставить("ФизическиеЛица", Результат.Выбрать());
		Если ВыборкаДляПроверок.ДокументВид <> Null Тогда
			СтруктураДанных.Вставить("ПаспортныеДанныеФизЛиц", Результат.Выбрать());
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	ВЫБОР КОГДА КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации ТОГДА
		|		КонтактнаяИнформация.Вид.Представление
		|	ИНАЧЕ
		|		КонтактнаяИнформация.Вид
		|	КОНЕЦ КАК ВидКИ,
		|	КонтактнаяИнформация.Представление КАК ПредставлениеКИ
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &ФизЛицо
		|УПОРЯДОЧИТЬ ПО
		|	Тип
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		СтруктураДанных.Вставить("КонтактнаяИнформация", Запрос.Выполнить().Выбрать());
		
		// разделы информации о физлице из табличных частей справочника
		Для каждого ТЧ Из Метаданные.Справочники.ФизическиеЛица.ТабличныеЧасти Цикл
			ИмяРегистра = "ФизическиеЛица_" + ТЧ.Имя;
			Если ТЧ.Имя = "СоставСемьи" Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица_СоставСемьи.НомерСтроки КАК НомерСтроки,
				|	ФизическиеЛица_СоставСемьи.СтепеньРодства.Представление КАК СтепеньРодства,
				|	ФизическиеЛица_СоставСемьи.Имя КАК Имя,
				|	ФизическиеЛица_СоставСемьи.ДатаРождения КАК ДатаРождения,
				|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Представление КАК СемейноеПоложение
				|ИЗ
				|	Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛица_СоставСемьи
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СемейноеПоложениеФизЛицСрезПоследних
				|		ПО ФизическиеЛица_СоставСемьи.Ссылка = СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо
				|ГДЕ
				|	ФизическиеЛица_СоставСемьи.Ссылка = &ФизЛицо
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	0,
				|	NULL,
				|	NULL,
				|	ЕСТЬNULL(КОЛИЧЕСТВО(ФизическиеЛица_СоставСемьи.ДатаРождения), 0),
				|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Представление
				|ИЗ
				|	РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СемейноеПоложениеФизЛицСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛица_СоставСемьи
				|		ПО (ФизическиеЛица_СоставСемьи.Ссылка = СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо)
				|
				|СГРУППИРОВАТЬ ПО
				|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение,
				|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Представление
				|
				|ИМЕЮЩИЕ
				|	ЕСТЬNULL(КОЛИЧЕСТВО(ФизическиеЛица_СоставСемьи.ДатаРождения), 0) = 0
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
				
			ИначеЕсли ТЧ.Имя = "Награды" Тогда
				Продолжить;
			Иначе
				
				ТекстПолей = "";
				Для каждого Реквизит Из ТЧ.Реквизиты Цикл
					ЕстьПолеПредставление = Ложь;
					// Определим принадлежность к ссылочным типам (т.е. возможность использования поля Представление)
					Для Каждого ЭлементТипа Из Реквизит.Тип.Типы() Цикл
						// Нет у примитивных
						Если ЭлементТипа = Тип("Число")
							ИЛИ ЭлементТипа = Тип("Строка")
							ИЛИ ЭлементТипа = Тип("Дата")
							ИЛИ ЭлементТипа = Тип("Булево") Тогда
							
							ЕстьПолеПредставление = Ложь;
							Прервать;
						Иначе
							
							// Нет у перечисления
							ПустоеЗначениеТипа = Новый(ЭлементТипа);
							
							Если Метаданные.Перечисления.Найти(ПустоеЗначениеТипа.Метаданные().Имя) <> Неопределено Тогда
								ЕстьПолеПредставление = Ложь;
								Прервать;
							Иначе
								ЕстьПолеПредставление = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					ТекстПолей = ТекстПолей + "," + Символы.ПС + Символы.Таб + ИмяРегистра + "." + Реквизит.Имя + ?(ЕстьПолеПредставление,".Представление","") + " КАК " + Реквизит.Имя
				КонецЦикла;
				
				Запрос.Текст = "ВЫБРАТЬ" + Сред(ТекстПолей,2) + Символы.ПС
				+ "ИЗ" + Символы.ПС + Символы.Таб + "Справочник." + СтрЗаменить(ИмяРегистра,"_",".") + " КАК " + ИмяРегистра + Символы.ПС 
				+ "ГДЕ" + Символы.ПС + Символы.Таб + ИмяРегистра + ".Ссылка = &ФизЛицо" + Символы.ПС
				+ "УПОРЯДОЧИТЬ ПО" + Символы.ПС + Символы.Таб + "НомерСтроки";
				
			КонецЕсли;
			
			СтруктураДанных.Вставить(ИмяРегистра, Запрос.Выполнить().Выбрать());
		КонецЦикла;
		
		ФизическиеЛицаПереопределяемый.ДополнитьСтруктуруДанныхЗапросом(Запрос, СтруктураДанных);		
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛицаНаграды.Награда,
		|	ФизическиеЛицаНаграды.НомерПриказа,
		|	ФизическиеЛицаНаграды.ДатаПриказа,
		|	ФизическиеЛицаНаграды.ЧейПриказ
		|ИЗ
		|	Справочник.ФизическиеЛица.Награды КАК ФизическиеЛицаНаграды
		|ГДЕ
		|	ФизическиеЛицаНаграды.Ссылка = &ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛицаНаграды.НомерСтроки";
		
		СтруктураДанных.Вставить("ФизическиеЛица_Награды", Запрос.Выполнить().Выбрать());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение,
		|	ЗначенияСвойствОбъектов.Свойство
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &ФизЛицо";
		
		СтруктураДанных.Вставить("ДополнительныеДанные", Запрос.Выполнить().Выбрать());
		
	КонецЕсли;
	Если НастройкаПравДоступаПереопределяемый.ДоступнаРольМенеджераПоНабору() Тогда
		
		Запрос.Текст = ФизическиеЛицаПереопределяемый.ТекстЗапросаРезультатыАнкетирования();
		
		СтруктураДанных.Вставить("Опросы", Запрос.Выполнить().Выбрать());
		
	КонецЕсли;

	ФизическиеЛицаПереопределяемый.ДополнитьДанныеКадровогоУчета(Запрос, СтруктураДанных);
	
	Если НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл() Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавокЗавершения
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок
		|	КОНЕЦ КАК ЗанимаемыхСтавок,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Представление
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Представление
		|	КОНЕЦ КАК Должность,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения.Представление
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Представление
		|	КОНЕЦ КАК Подразделение,
		|	РаботникиОрганизацииСрезПоследних.Организация.Представление КАК Организация,
		|	РаботникиОрганизацииСрезПоследних.Организация КАК ОрганизацияСсылка,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВЫБОР
		|					КОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|						ТОГДА ""Не работает (уволен)""
		|					ИНАЧЕ ""Работает""
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					ТОГДА ""Не работает (уволен)""
		|				ИНАЧЕ ""Работает""
		|			КОНЕЦ
		|	КОНЕЦ КАК Состояние,
		|	РаботникиОрганизацииСрезПоследних.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаАктуальности,
		|			Сотрудник.ФизЛицо = &ФизЛицо
		|				И (НЕ Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))) КАК РаботникиОрганизацииСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	РаботникиОрганизацииСрезПоследних.Период УБЫВ,
		|	РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния.Порядок";
		
		РезультатПоОрганизациям = Запрос.Выполнить(); 
		
		Если Не РезультатПоОрганизациям.Пустой() Тогда
			
			СтруктураДанных.Вставить("Организация", РезультатПоОрганизациям.Выбрать());
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка КАК Документ,
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка.Представление,
			|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Владелец КАК Организация,
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка.Дата КАК Дата,
			|	ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаС,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПо,
			|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Представление КАК Подразделение,
			|	ПриемНаРаботуВОрганизациюРаботники.Должность.Представление КАК Должность,
			|	ПриемНаРаботуВОрганизациюРаботники.ЗанимаемыхСтавок,
			|	ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК Примечание
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
			|ГДЕ
			|	ПриемНаРаботуВОрганизациюРаботники.Сотрудник.Физлицо = &ФизЛицо
			|	И ПриемНаРаботуВОрганизациюРаботники.Ссылка.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка,
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Владелец,
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка.Дата,
			|	КадровоеПеремещениеОрганизацииРаботники.ДатаНачала,
			|	ВЫБОР
			|		КОГДА НЕ КадровоеПеремещениеОрганизацииРаботники.НапомнитьПоЗавершении
			|			ТОГДА КадровоеПеремещениеОрганизацииРаботники.ДатаОкончания
			|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	КОНЕЦ,
			|	КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.Должность.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.ЗанимаемыхСтавок,
			|	NULL
			|ИЗ
			|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботники
			|ГДЕ
			|	КадровоеПеремещениеОрганизацииРаботники.Сотрудник.Физлицо = &ФизЛицо
			|	И КадровоеПеремещениеОрганизацииРаботники.Ссылка.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УвольнениеИзОрганизацииРаботники.Ссылка,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Представление,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Организация,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Дата,
			|	УвольнениеИзОрганизацииРаботники.ДатаУвольнения,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	УвольнениеИзОрганизацииРаботники.СтатьяТКРФ.Наименование
			|ИЗ
			|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
			|ГДЕ
			|	УвольнениеИзОрганизацииРаботники.Сотрудник.Физлицо = &ФизЛицо
			|	И УвольнениеИзОрганизацииРаботники.Ссылка.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата
			|ИТОГИ ПО
			|	Организация";
			
			СтруктураДанныхОрганизации.Вставить("ПеремещенияВОрганизации", Запрос.Выполнить());
			
		КонецЕсли;
		
	КонецЕсли; 
	Если Подробно Тогда	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранилищеДополнительнойИнформации.Наименование КАК ОписаниеДанных,
		|	ХранилищеДополнительнойИнформации.Хранилище КАК Данные
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|
		|ГДЕ
		|	((ВЫРАЗИТЬ(ХранилищеДополнительнойИнформации.Объект КАК Справочник.ФизическиеЛица)) = &ФизЛицо) И
		|	ХранилищеДополнительнойИнформации.ВидДанных = &Изображение";
		
		ВыборкаИзображений = Запрос.Выполнить().Выбрать();
    КонецЕсли;
    
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ФизическиеЛица_ДанныеПоФизлицу";
	Макет = ПолучитьМакет("ДанныеПоФизлицу");
	Если Подробно Тогда
		ВыборкаОсновноеФото = Результат.Выбрать();
		Если ВыборкаОсновноеФото.Следующий() Тогда
			ДанныеДляФото = ВыборкаОсновноеФото.Данные;
			Если ДанныеДляФото <> Null Тогда
				ФотоНаПропуск = ДанныеДляФото.Получить();
				Если ФотоНаПропуск <> Неопределено Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ОсновноеФото_Заголовок");
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
					ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
					ОбластьМакета = Макет.ПолучитьОбласть("ОсновноеФото");
					ОбластьМакета.Рисунки.ФотоНаПропуск.Картинка = ФотоНаПропуск;
					ОбластьМакета.Рисунки.ФотоНаПропуск.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
					ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаОсновноеФото.ОписаниеИзображения;
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Для Каждого СекцияДанных Из СтруктураДанных Цикл

		ИмяСекции = СекцияДанных.Ключ;
		Если Не Подробно Тогда
			УсловиеВыводаРаскрытойГруппы = Истина
		Иначе
			УсловиеВыводаРаскрытойГруппы = ИмяСекции = "ФизическиеЛица";
		КонецЕсли;
		Выборка = СекцияДанных.Значение;
		Если ИмяСекции = "КонтактнаяИнформация" и НЕ Выборка.Количество() = 0 Тогда

			СекцияЗаголовка = Макет.ПолучитьОбласть("КонтактнаяИнформация_Заголовок");
			ТабДокумент.Вывести(СекцияЗаголовка);
			ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			ТабДокумент.НачатьГруппуСтрок("",Не Подробно);
			Отбивка = Макет.ПолучитьОбласть("Отбивка");
			
			СекцияТипаКИ = Макет.ПолучитьОбласть("КонтактнаяИнформация_Тип");
			Пока Выборка.СледующийПоЗначениюПоля("Тип") цикл

				ТабДокумент.Вывести(Отбивка);
				СекцияТипаКИ.Параметры.ТипКИ = Строка(Выборка.Тип) + ":";
				ТабДокумент.Вывести(СекцияТипаКИ);

				СекцияКИ = Макет.ПолучитьОбласть("КонтактнаяИнформация_Данные");
				Пока Выборка.СледующийПоЗначениюПоля("ВидКИ") цикл
					СекцияКИ.Параметры.Заполнить(Выборка);
					ТабДокумент.Вывести(СекцияКИ);
				КонецЦикла;

			КонецЦикла; 

			ТабДокумент.Вывести(Отбивка);
			ТабДокумент.ЗакончитьГруппуСтрок();
			
		ИначеЕсли ИмяСекции = "Организация"  Тогда

			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл

				Отбивка = Макет.ПолучитьОбласть("Отбивка");
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Вывести(Отбивка);

				Для Каждого СекцияДанныхОрганизации Из СтруктураДанныхОрганизации Цикл
					ИмяСекцииОрганизации = СекцияДанныхОрганизации.Ключ;

					Если Макет.Области.Найти(ИмяСекцииОрганизации + "_Заголовок") <> Неопределено Тогда

						// Спозиционируемся в выборке "ПеремещенияВОрганизации" на нужной организации
						ВыборкаПеремещенийПоВсемОрганизациям = СекцияДанныхОрганизации.Значение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						ВыборкаПеремещенийПоВсемОрганизациям.Сбросить();
						СтруктураПоиска = Новый Структура("Организация");
						СтруктураПоиска.Организация = Выборка.ОрганизацияСсылка;
						Если ВыборкаПеремещенийПоВсемОрганизациям.НайтиСледующий(СтруктураПоиска) Тогда

							// Выберем кадровые перемещения в рамках организации
							ВыборкаОрганизации = ВыборкаПеремещенийПоВсемОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Отбивка = ?(Макет.Области.Найти(ИмяСекцииОрганизации + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
							ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок");
							Если ОбластьМакета.Области.Количество() = 1 Тогда
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
								ТабДокумент.Вывести(Отбивка);
							Иначе
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_ПерваяСтрока");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_Остальное");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
							КонецЕсли;
							ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Данные");
							Пока ВыборкаОрганизации.Следующий() Цикл
								ОбластьМакета.Параметры.Заполнить(ВыборкаОрганизации);
								ТабДокумент.Вывести(ОбластьМакета);
							КонецЦикла;
							ТабДокумент.Вывести(Отбивка);
							ТабДокумент.ЗакончитьГруппуСтрок();
						
						КонецЕсли; 

					КонецЕсли;
					
				КонецЦикла;
				
				ТабДокумент.ЗакончитьГруппуСтрок();

			КонецЦикла;

		ИначеЕсли Макет.Области.Найти(ИмяСекции + "_Заголовок") <> Неопределено и Выборка.Следующий() Тогда

			Отбивка = ?(Макет.Области.Найти(ИмяСекции + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекции + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок");
			Если ОбластьМакета.Области.Количество() = 1 Тогда
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_ПерваяСтрока");
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_Остальное");
				Если ОбластьМакета.Параметры.Количество() = 0 Тогда // раскрашиваем заголовок без выведенных данных
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				Иначе	
					ОбластьМакета.Параметры.Заполнить(Выборка);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
				Если ОбластьМакета.Параметры.Количество() = 0 Тогда // раскрашиваем заголовок без выведенных данных
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			Если ИмяСекции = "ФизическиеЛица" Тогда
				ОбластьМакета.Параметры.МестоРожденияРаботника = РегламентированнаяОтчетность.ПредставлениеМестаРождения(Выборка.МестоРождения);
				Если НЕ ЗначениеЗаполнено(Выборка.Фамилия) Тогда
					Фамилия = " "; Имя = " "; Отчество = " ";
					ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ЭтотОбъект, Фамилия, Имя, Отчество);
					ОбластьМакета.Параметры.Фамилия = Фамилия;
					ОбластьМакета.Параметры.Имя = Имя;
					ОбластьМакета.Параметры.Отчество = Отчество;
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ТабДокумент.Вывести(Отбивка);
			ТабДокумент.ЗакончитьГруппуСтрок();

		КонецЕсли;	
	КонецЦикла;

	Если Подробно Тогда	
		Если ВыборкаИзображений.Следующий() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Фотогалерея_Заголовок");
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
			ОбластьМакета = Макет.ПолучитьОбласть("Фотогалерея");
			ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаИзображений.ОписаниеДанных;
			Фото = ВыборкаИзображений.Данные.Получить();
			Если Фото <> Неопределено Тогда
				ОбластьМакета.Рисунки.Фото.Картинка = Фото;
				ОбластьМакета.Рисунки.Фото.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			Пока ВыборкаИзображений.Следующий() Цикл
				ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаИзображений.ОписаниеДанных;
				Фото = ВыборкаИзображений.Данные.Получить();
				ОбластьМакета.Рисунки.Фото.Картинка = ?(Фото <> Неопределено,Фото,Новый Картинка());
				ОбластьМакета.Рисунки.Фото.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // Печать

// Процедура осуществляет печать справочника. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	// Код добавлен для совместимости с объектами "Зарплата и управление персоналом"
	Если (ТипЗнч(ИмяМакета) = Тип("ПолеТабличногоДокумента") ИЛИ ТипЗнч(ИмяМакета) = Тип("ТабличныйДокумент"))
		 И (ТипЗнч(КоличествоЭкземпляров) = Тип("Дата") ИЛИ КоличествоЭкземпляров = Неопределено)Тогда
		ПечатьДанныхФизЛица(КоличествоЭкземпляров, ИмяМакета);
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПечатьДанныхФизЛица" Тогда
		
		ТабДокумент = ПечатьДанныхФизЛица();
		Заголовок = "Данные по: " + Наименование;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, Заголовок, Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьДанныхФизЛица","Данные физ. лица");

КонецФункции // ПолучитьТаблицуПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Раскладывает срок в днях на годы, месяцы, дни
Процедура РазложитьСрокВДнях(СрокВДнях,Лет, Месяцев, Дней) 

	ДнейВГоду 		= 12 * 30;
    Лет 			= Цел(СрокВДнях / ДнейВГоду);
	ОстатокДней 	= СрокВДнях - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ формы СЗВ-К

// По т.ч. Трудовая деятельность
//
// Параметры
//  ЗаписиОСтаже - набор записей для заполнения
//
Процедура ЗаполнитьСЗВКПоТрудовойДеятельности(ЗаписиОСтаже) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо",Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛицаТрудоваяДеятельность.Организация,
	|	ФизическиеЛицаТрудоваяДеятельность.Должность,
	|	ФизическиеЛицаТрудоваяДеятельность.ДатаНачала КАК НачалоРаботы,
	|	ФизическиеЛицаТрудоваяДеятельность.ДатаОкончания КАК ОкончаниеРаботы,
	|	ФизическиеЛицаТрудоваяДеятельность.НомерСтроки,
	|	ФизическиеЛицаТрудоваяДеятельность.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.ТрудоваяДеятельность КАК ФизическиеЛицаТрудоваяДеятельность
	|ГДЕ
	|	ФизическиеЛицаТрудоваяДеятельность.Ссылка = &ФизЛицо
	|	И ФизическиеЛицаТрудоваяДеятельность.ДатаНачала < ДАТАВРЕМЯ(2002, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоРаботы";

	Выборка = Запрос.Выполнить().Выбрать();

    Сч = 0;
	Пока Выборка.Следующий() цикл
		НоваяСтрока = ЗаписиОСтаже.Добавить();
        Сч = Сч + 1;
		НоваяСтрока.НомерПериодаТрудовойДеятельности = Сч;
		НоваяСтрока.НомерОсновнойЗаписи		= Сч;
		НоваяСтрока.ФизЛицо					= Ссылка;
		НоваяСтрока.Организация				= Выборка.Организация;
		НоваяСтрока.ВидДеятельности 		= Справочники.ВидыОбщественноПолезнойДеятельности.РАБОТА;
		НоваяСтрока.Должность 				= Выборка.Должность;
		НоваяСтрока.ДатаНачалаПериода 	 	= Выборка.НачалоРаботы;
		НоваяСтрока.ДатаОкончанияПериода 	= Мин(Выборка.ОкончаниеРаботы,'20011231');
	КонецЦикла;	
	

КонецПроцедуры // ЗаполнитьСЗВКПоТрудовойДеятельности()

//Выполняет автоматическое заполнение итоговых данных о стаже
Процедура ВыполнитьРасчетИтоговСтажа(ЗаписиОСтаже,СуммированныйСтаж) Экспорт

	ТаблицаЗаписейОСтаже = ЗаписиОСтаже.Выгрузить();

    //РАСЧЕТ ОБЩЕГО ТРУДОВОГО СТАЖА С УЧЕТОМ ПЕРЕСЕЧЕНИЯ ПЕРИОДОВ

	//Выполним расширение записей с кодом исчисляемого стажа СЕЗОН
	Для Каждого Запись из ТаблицаЗаписейОСтаже цикл
		//Пропустим льготные записи
		Если Запись.НомерДополнительнойЗаписи <> 0 тогда
			Продолжить;
		КонецЕсли;	 
		Если Запись.ОснованиеИсчисляемогоСтажа	=	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН	тогда	
			//Расширение периода до календарного года
			Запись.ДатаНачалаПериода = НачалоГода(Запись.ДатаНачалаПериода);
			Запись.ДатаОкончанияПериода = КонецГода(Запись.ДатаОкончанияПериода);
		КонецЕсли;
	КонецЦикла;	

	//Выполним календарное поглащение в 2 прохода:
	// 1 проход - поглащение записями ЛЕПРО всех остальных записей
	// 2 проход - поглащение записями СЕЗОН всех оставшихся записей
	Для П = 1 по 2 цикл

		Если П = 1 тогда
			ПриоритетноеОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ЛЕПРО;
		Иначе	
			ПриоритетноеОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН;
		КонецЕсли;	 

		ВсегоЗаписей = ТаблицаЗаписейОСтаже.Количество(); 
		Для Н =0 по ВсегоЗаписей-1 цикл
			Запись = ТаблицаЗаписейОСтаже[Н];

			Если Запись.ОснованиеИсчисляемогоСтажа = ПриоритетноеОснованиеИсчисляемогоСтажа тогда

				Для К =0 по ВсегоЗаписей-1 цикл
					Запись2 = ТаблицаЗаписейОСтаже[К];

					Если Запись = Запись2 тогда//Запись не может поглатить саму себя
						Продолжить;
					КонецЕсли;	 
					
					Если (Запись2.ДатаНачалаПериода > Запись.ДатаОкончанияПериода) или
						(Запись2.ДатаОкончанияПериода < Запись.ДатаНачалаПериода)тогда
						//Периоды не пересекаются
						Продолжить;
					Иначе	
						Если (Запись2.ДатаНачалаПериода >= Запись.ДатаНачалаПериода) тогда
							Если (Запись2.ДатаОкончанияПериода <= Запись.ДатаОкончанияПериода) тогда
								//Полное поглощение периода - удаляем запись2 с помощью задания отрицательного интервала
								Запись2.ДатаНачалаПериода = Дата('00010102');
								Запись2.ДатаОкончанияПериода = Дата('00010101');
							Иначе//Запись 2 начинается позднее и окончивается позднее записи 1 - обрежем голову
								Запись2.ДатаНачалаПериода = Запись.ДатаОкончанияПериода + мДлинаСуток;
							КонецЕсли;	
						Иначе
							Если (Запись2.ДатаОкончанияПериода <= Запись.ДатаОкончанияПериода) тогда
								//Запись2 начиначется раньше и окончивается раньше Записи1 - обрежем хвост
								Запись2.ДатаОкончанияПериода = Запись.ДатаНачалаПериода - мДлинаСуток;
							Иначе//Запись 2 начинается раньше и окончивается позднее записи 1 - разбиение интервала на 2 части
								//породим вторую часть копирование исходной записи
								НоваяСтрока = ТаблицаЗаписейОСтаже.Добавить();
								Для НомерКолонки=0 по ТаблицаЗаписейОСтаже.Колонки.Количество()-1 цикл
									ИмяКолонки = ТаблицаЗаписейОСтаже.Колонки[НомерКолонки].Имя;
									НоваяСтрока[ИмяКолонки] = Запись2[ИмяКолонки];
								КонецЦикла;	
								//обрежем хвост у первой части
								Запись2.ДатаОкончанияПериода = Запись.ДатаНачалаПериода - мДлинаСуток;
								//обрежем голову у второй части
								НоваяСтрока.ДатаНачалаПериода = Запись.ДатаОкончанияПериода + мДлинаСуток;
							КонецЕсли;	
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;	

			КонецЕсли;	
		КонецЦикла;	
		
	КонецЦикла;	
	

	//Расчет общего стажа по оставшимся записям
	ОбщийСтажЛет				=	0;
	ОбщийСтажМесяцев			=	0;
	ОбщийСтажДней				=	0;

	Для Каждого Запись из ТаблицаЗаписейОСтаже цикл

		//Пропустим поглощенные и дополнительные записи
		Если  Запись.ДатаОкончанияПериода = Дата('00010101') тогда
			Продолжить;
		КонецЕсли;	
		
		ЛетПоПериоду = 0;
		МесяцевПоПериоду = 0;
		ДнейПоПериоду = 0;
		ПроцедурыПерсонифицированногоУчета.ПолучитьСтажЗаПериод(Запись.ДатаОкончанияПериода,	Запись.ДатаНачалаПериода, ЛетПоПериоду,	МесяцевПоПериоду, ДнейПоПериоду);

		//Для видов деятельности, отличных от РАБОТА, день на увольнение не предоставляется
		Если Запись.ВидДеятельности <> Справочники.ВидыОбщественноПолезнойДеятельности.РАБОТА тогда
			ДнейПоПериоду = ДнейПоПериоду - 1;
		КонецЕсли;	 

		Если Запись.ОснованиеИсчисляемогоСтажа	=	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ЛЕПРО	тогда
			//Стаж удваивается
			ЛетПоПериоду = ЛетПоПериоду * 2;
			МесяцевПоПериоду = МесяцевПоПериоду * 2;
			ДнейПоПериоду = ДнейПоПериоду * 2;
		ИначеЕсли Запись.ОснованиеИсчисляемогоСтажа	=	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104	тогда	
			//Стаж берется из ФОВ
			ЛетПоПериоду = Запись.НулевойПараметрИсчисляемогоСтажа;
			МесяцевПоПериоду = Запись.ПервыйПараметрИсчисляемогоСтажа;
			ДнейПоПериоду = Запись.ВторойПараметрИсчисляемогоСтажа;
		КонецЕсли;	
		
		ОбщийСтажЛет		=	ОбщийСтажЛет		+	ЛетПоПериоду;
		ОбщийСтажМесяцев	=	ОбщийСтажМесяцев	+	МесяцевПоПериоду;
		ОбщийСтажДней		=	ОбщийСтажДней		+	ДнейПоПериоду;
	КонецЦикла;	
	

    //РАСЧЕТ СТАЖА ТЕРР,ОСОБ,ВЫСЛ

	ТаблицаЗаписейОСтаже = ЗаписиОСтаже.Выгрузить();

	ТаблицаТЕРР = Новый ТаблицаЗначений;
	ТаблицаТЕРР.Колонки.Добавить("КодСтажа");
	ТаблицаТЕРР.Колонки.Добавить("Лет");
	ТаблицаТЕРР.Колонки.Добавить("Месяцев");
	ТаблицаТЕРР.Колонки.Добавить("Дней");

	ТаблицаОСОБ = ТаблицаТЕРР.Скопировать();
	ТаблицаВЫСЛ = ТаблицаТЕРР.Скопировать();

	ТекущаяОсновнаяЗапись = Неопределено;

	Для Каждого Запись из ТаблицаЗаписейОСтаже цикл

		Если Запись.НомерДополнительнойЗаписи = 0 тогда
			ТекущаяОсновнаяЗапись = Запись;
			ЭтоОсновнаяЗапись = ИСТИНА;
			//Счетчики терр стажа по коду МКС и РКС в рамках основной записи
			НакопленныйСтажМКС = 0;
			НакопленныйСтажРКС = 0;
		Иначе
			ЭтоОсновнаяЗапись = ЛОЖЬ;
		КонецЕсли;	 
		
		ЛетПоПериоду = 0;
		МесяцевПоПериоду = 0;
		ДнейПоПериоду = 0;
		ПроцедурыПерсонифицированногоУчета.ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, ЛетПоПериоду,	МесяцевПоПериоду, ДнейПоПериоду);

		ФОВ_Лет = Запись.НулевойПараметрИсчисляемогоСтажа;		
		ФОВ_Месяцев = Запись.ПервыйПараметрИсчисляемогоСтажа;
		ФОВ_Дней = Запись.ВторойПараметрИсчисляемогоСтажа;

		//Признак указания фактически-отработанного времени
		ФОВУказан = (ФОВ_Лет + ФОВ_Месяцев + ФОВ_Дней)  <> 0;
        УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
		
		//Расчет стажа по территориальным условиям
		Если ЗначениеЗаполнено(Запись.ТерриториальныеУсловия) тогда
			НоваяСтрока = ТаблицаТЕРР.Добавить();
			НоваяСтрока.КодСтажа = Запись.ТерриториальныеУсловия;

			//При не указании ФОВ, для ВОДОЛАЗОВ, при указании условий труда стаж берем по периоду
			Если (НЕ ФОВУказан)
				ИЛИ (Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ)
				ИЛИ (УказаныОсобыеУсловияТруда) тогда
				СтажДляЗаписи = ЛетПоПериоду*12*30 + МесяцевПоПериоду*30 + ДнейПоПериоду;
			Иначе	
				СтажДляЗаписи = ФОВ_Лет*12*30 + ФОВ_Месяцев*30 + ФОВ_Дней;
			КонецЕсли;	  

			//Для кодов МКС и РКС надо выполнить контроль стажа на непревышение всего периода основной записи
			СтажПоПериодуОсновнойЗаписи = ЛетПоПериоду*12*30 + МесяцевПоПериоду*30 + ДнейПоПериоду;
			Если Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС тогда
				СтажДляЗаписи = Мин(СтажПоПериодуОсновнойЗаписи - НакопленныйСтажМКС, СтажДляЗаписи);
				НакопленныйСтажМКС = НакопленныйСтажМКС + СтажДляЗаписи;
			ИначеЕсли Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС тогда
				СтажДляЗаписи = Мин(СтажПоПериодуОсновнойЗаписи - НакопленныйСтажРКС, СтажДляЗаписи);
				НакопленныйСтажРКС = НакопленныйСтажРКС + СтажДляЗаписи;
			КонецЕсли;	 

			РазложитьСрокВДнях(СтажДляЗаписи, НоваяСтрока.Лет, НоваяСтрока.Месяцев, НоваяСтрока.Дней);
		КонецЕсли;	

		//Расчет стажа за особые условия труда
		Если УказаныОсобыеУсловияТруда тогда
			НоваяСтрока = ТаблицаОСОБ.Добавить();
			НоваяСтрока.КодСтажа = Запись.ОсобыеУсловияТруда;
			НоваяСтрока.Лет = ФОВ_Лет; 
			НоваяСтрока.Месяцев = ФОВ_Месяцев;
			НоваяСтрока.Дней = ФОВ_Дней;

			//При не указании ФОВ и ВОДОЛАЗОВ стаж берем по периоду
			Если (НЕ ФОВУказан)или(Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ) тогда
				НоваяСтрока.Лет = ЛетПоПериоду; 
				НоваяСтрока.Месяцев = МесяцевПоПериоду;
				НоваяСтрока.Дней = ДнейПоПериоду;
			Иначе	
				НоваяСтрока.Лет = ФОВ_Лет; 
				НоваяСтрока.Месяцев = ФОВ_Месяцев;
				НоваяСтрока.Дней = ФОВ_Дней;
			КонецЕсли;	  
		КонецЕсли;	

		//Расчет стажа за выслугу лет
		Если ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет) тогда
			НоваяСтрока = ТаблицаВЫСЛ.Добавить();
			НоваяСтрока.КодСтажа = Запись.ОснованиеВыслугиЛет;

			ВЫСЛпоПериоду = Истина;

			Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.УВД)
				или(Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТС) тогда
				Если Запись.ПервыйПараметрВыслугиЛет + Запись.ВторойПараметрВыслугиЛет <> 0 тогда
					НоваяСтрока.Лет = 0; 
					НоваяСтрока.Месяцев = Запись.ПервыйПараметрВыслугиЛет;
					НоваяСтрока.Дней = Запись.ВторойПараметрВыслугиЛет;
					ВЫСЛпоПериоду = Ложь;
				КонецЕсли;	
			КонецЕсли;	

			Если ВЫСЛпоПериоду тогда	
				НоваяСтрока.Лет = ЛетПоПериоду; 
				НоваяСтрока.Месяцев = МесяцевПоПериоду;
				НоваяСтрока.Дней = ДнейПоПериоду;
			КонецЕсли;	 
		КонецЕсли;	

	КонецЦикла;	

	//Заносим в таблицу итогового стажа данные об общем стаже

	ПроцедурыПерсонифицированногоУчета.ПолучитьПриведенныйСтаж(ОбщийСтажЛет,ОбщийСтажМесяцев,ОбщийСтажДней);
	Если ОбщийСтажЛет + ОбщийСтажМесяцев + ОбщийСтажДней <> 0 тогда
		СтрокаИтоговоСтажа = СуммированныйСтаж.Добавить();
		СтрокаИтоговоСтажа.ФизЛицо = Ссылка;
		СтрокаИтоговоСтажа.НомерЗаписи = 1;
		СтрокаИтоговоСтажа.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж;
		СтрокаИтоговоСтажа.Лет = ОбщийСтажЛет;
		СтрокаИтоговоСтажа.Месяцев = ОбщийСтажМесяцев;
		СтрокаИтоговоСтажа.Дней = ОбщийСтажДней;
	КонецЕсли;	 

	ТаблицаТЕРР.Свернуть("КодСтажа","Лет,Месяцев,Дней");
	ТаблицаОСОБ.Свернуть("КодСтажа","Лет,Месяцев,Дней");
	ТаблицаВЫСЛ.Свернуть("КодСтажа","Лет,Месяцев,Дней");

	//Заносим в итоговую таблицу данные о территориальных условиях
    Сч = 1;
	Для Каждого Строка из ТаблицаТЕРР цикл
		ПроцедурыПерсонифицированногоУчета.ПолучитьПриведенныйСтаж(Строка.Лет,Строка.Месяцев,Строка.Дней);
		Если Строка.Лет + Строка.Месяцев + Строка.Дней <> 0 тогда
			СтрокаИтоговоСтажа = СуммированныйСтаж.Добавить();
	        Сч = Сч + 1;
			СтрокаИтоговоСтажа.НомерЗаписи = Сч;
			СтрокаИтоговоСтажа.ФизЛицо = Ссылка;
			СтрокаИтоговоСтажа.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия;
			СтрокаИтоговоСтажа.КодСтажа = Строка.КодСтажа;
			СтрокаИтоговоСтажа.Лет = Строка.Лет;
			СтрокаИтоговоСтажа.Месяцев = Строка.Месяцев;
			СтрокаИтоговоСтажа.Дней = Строка.Дней;
		КонецЕсли;	 
	КонецЦикла;	

	//Заносим в итоговую таблицу данные об особых условиях труда
	Для Каждого Строка из ТаблицаОСОБ цикл
		ПроцедурыПерсонифицированногоУчета.ПолучитьПриведенныйСтаж(Строка.Лет,Строка.Месяцев,Строка.Дней);
		Если Строка.Лет + Строка.Месяцев + Строка.Дней <> 0 тогда
			СтрокаИтоговоСтажа = СуммированныйСтаж.Добавить();
	        Сч = Сч + 1;
			СтрокаИтоговоСтажа.НомерЗаписи = Сч;
			СтрокаИтоговоСтажа.ФизЛицо = Ссылка;
			СтрокаИтоговоСтажа.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда;
			СтрокаИтоговоСтажа.КодСтажа = Строка.КодСтажа;
			СтрокаИтоговоСтажа.Лет = Строка.Лет;
			СтрокаИтоговоСтажа.Месяцев = Строка.Месяцев;
			СтрокаИтоговоСтажа.Дней = Строка.Дней;
		КонецЕсли;	 
	КонецЦикла;	

	//Заносим в итоговую таблицу данные о выслуге лет
	Для Каждого Строка из ТаблицаВЫСЛ цикл
		ПроцедурыПерсонифицированногоУчета.ПолучитьПриведенныйСтаж(Строка.Лет,Строка.Месяцев,Строка.Дней);
		Если Строка.Лет + Строка.Месяцев + Строка.Дней <> 0 тогда
			СтрокаИтоговоСтажа = СуммированныйСтаж.Добавить();
	        Сч = Сч + 1;
			СтрокаИтоговоСтажа.НомерЗаписи = Сч;
			СтрокаИтоговоСтажа.ФизЛицо = Ссылка;
			СтрокаИтоговоСтажа.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет;
			СтрокаИтоговоСтажа.КодСтажа = Строка.КодСтажа;
			СтрокаИтоговоСтажа.Лет = Строка.Лет;
			СтрокаИтоговоСтажа.Месяцев = Строка.Месяцев;
			СтрокаИтоговоСтажа.Дней = Строка.Дней;
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	ФизическиеЛицаПереопределяемый.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	Если Не ЭтоГруппа Тогда
		ОсновноеИзображение = Неопределено;
		ИНН = "";
		КодИМНС = "";
		СтраховойНомерПФР = "";
		МестоРождения = ""; МестоРожденияКодПоОКАТО = "";
		СоставСемьи.Очистить();
		Образование.Очистить();
		ТрудоваяДеятельность.Очистить();
		ЗнаниеЯзыков.Очистить();
		Профессии.Очистить();
		Стажи.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	ФизическиеЛицаПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
	#КонецЕсли
	
	// проверим дубли строк в таблице Стажи
	СписокДублейСтажа = Новый СписокЗначений;
	СписокСтажа = Новый СписокЗначений;
	Для каждого СтрокаСтажа Из Стажи Цикл
		Если СписокСтажа.НайтиПоЗначению(СтрокаСтажа.ВидСтажа) = Неопределено Тогда
			СписокСтажа.Добавить(СтрокаСтажа.ВидСтажа);
		Иначе
			СписокДублейСтажа.Добавить(СтрокаСтажа.ВидСтажа);
		КонецЕсли;	
	КонецЦикла;
	
	Если СписокДублейСтажа.Количество() <> 0 Тогда
		
		Отказ = Истина;
		СрокаСообщенияОбОшибке = "В списке ""Стажи общего характера"" обнаружены записи с повторяющимся видом стажа: " + СписокДублейСтажа;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОбработкаКомментариев.ДобавитьСообщение(СрокаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ПоказатьСообщения();
		#Иначе
			Сообщить(СрокаСообщенияОбОшибке, СтатусСообщения.Важное);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;