///////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Заполняет по умолчанию значения реквизитов ТипБазыРаспределения и НаправлениеРаспределения
// у способов распределения, введенных пользователями (не предопределенных)
//
Процедура ЗаполнитьЗначенияРеквизитовПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпособыРаспределенияЗатратНаВыпуск.Ссылка,
	|	СпособыРаспределенияЗатратНаВыпуск.ТипБазыРаспределения,
	|	СпособыРаспределенияЗатратНаВыпуск.ИспользоватьПростоеРаспределение,
	|	СпособыРаспределенияЗатратНаВыпуск.СхемаКомпоновкиДанных,
	|	СпособыРаспределенияЗатратНаВыпуск.НаправлениеРаспределения
	|ИЗ
	|	Справочник.СпособыРаспределенияЗатратНаВыпуск КАК СпособыРаспределенияЗатратНаВыпуск
	|ГДЕ
	|	(СпособыРаспределенияЗатратНаВыпуск.ТипБазыРаспределения <> ЗНАЧЕНИЕ(Перечисление.ТипыБазРаспределения.Предопределенный)
	|			ИЛИ СпособыРаспределенияЗатратНаВыпуск.НаправлениеРаспределения = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспределенияЗатрат.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТипыБазРаспределения = Перечисления.ТипыБазРаспределения.ПустаяСсылка();
		СКДЗаполнена 		 = (Выборка.СхемаКомпоновкиДанных.Получить() <> Неопределено);
		
		Если Выборка.ТипБазыРаспределения = Перечисления.ТипыБазРаспределения.Предопределенный Тогда // предопределенные способы
			ТипыБазРаспределения = Перечисления.ТипыБазРаспределения.Предопределенный; // не меняем
		ИначеЕсли Выборка.ИспользоватьПростоеРаспределение Тогда // "новые" способы
			Если СКДЗаполнена Тогда
				ТипыБазРаспределения = Перечисления.ТипыБазРаспределения.СКД;
			Иначе
				ТипыБазРаспределения = Перечисления.ТипыБазРаспределения.Табличный;
			КонецЕсли;
		Иначе // "старые" способы
			ТипыБазРаспределения = Перечисления.ТипыБазРаспределения.ПустаяСсылка();
		КонецЕсли;
		
		Если Выборка.ТипБазыРаспределения <> ТипыБазРаспределения
		 ИЛИ НЕ ЗначениеЗаполнено(Выборка.НаправлениеРаспределения) Тогда // если хоть один из 2х реквизитов заполнен неправильно (не заполнен)
		 
		 	Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Выборка.ТипБазыРаспределения <> ТипыБазРаспределения Тогда
				Объект.ТипБазыРаспределения = ТипыБазРаспределения;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Выборка.НаправлениеРаспределения) Тогда
				Объект.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Выпуск;
			КонецЕсли;
			
			Объект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет по умолчанию способы распределения на основании описания баз распределения,
// хранящегося в макетах справочника СпособыРаспределенияЗатратНаВыпуск
//
Процедура ЗаполнитьСпособыРаспределенияПоУмолчанию() Экспорт
	
	// Эти способы можно использовать только в упрощенном режиме
	
	ДобавитьПредопределенныйСпособРаспределения(
		"ВыручкаОтРеализацииУслуг",
		"По выручке от реализации услуг",
		"Себестоимость каждой услуги рассчитывать не требуется",
		Перечисления.ХарактерЗатрат.ПроизводственныеРасходы,
		Перечисления.НаправленияРаспределенияЗатрат.Результат,
		Истина);
		
	ДобавитьПредопределенныйСпособРаспределения(
		"РасходыНаПродажу",
		"Расходы на продажу",
		"Необходимо списать расходы на продажу без учета номенклатурных групп, по которым они отражены",
		Перечисления.ХарактерЗатрат.КоммерческиеРасходы,
		Перечисления.НаправленияРаспределенияЗатрат.Результат,
		Истина);
		
	ДобавитьПредопределенныйСпособРаспределения(
		"ПереносНаПроизводственныеРасходы",
		"Перенести на производственные расходы",
		"Нет подходящей базы распределения. Достаточно перенести расходы ""как есть""",
		Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы,
		Перечисления.НаправленияРаспределенияЗатрат.Затраты,
		Истина);
	
	ДобавитьПредопределенныйСпособРаспределения(
		"ДиректКостинг",
		"Директ-костинг",
		"Необходимо списать управленческие расходы без учета номенклатурных групп, по которым они отражены",
		Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы,
		Перечисления.НаправленияРаспределенияЗатрат.Результат,
		Истина);
	
	// Эти способы могут использоваться в обоих режимах
	
	ДобавитьПредопределенныйСпособРаспределения(
		"МатериальныеЗатраты",
		"По материальным затратам",
		"До расчета себестоимости материальные затраты имеют суммовую оценку",
		Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы,
		Перечисления.НаправленияРаспределенияЗатрат.Затраты,
		Ложь,
		Перечисления.БазыРаспределенияЗатрат.ПоСтоимостиЗатрат,
		, // Показатель базы распределения
		, // Тип цен
		Перечисления.ВидыЗатрат.Материальные);
		
	ДобавитьПредопределенныйСпособРаспределения(
		"ОплатаТруда",
		"По оплате труда",
		"Нет возможности использовать другую базу (основанную на объеме выпуска)",
		Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы,
		Перечисления.НаправленияРаспределенияЗатрат.Затраты,
		Ложь,
		Перечисления.БазыРаспределенияЗатрат.ПоСтоимостиЗатрат,
		, // Показатель базы распределения
		, // Тип цен
		Перечисления.ВидыЗатрат.ОплатаТруда);
		
	ДобавитьПредопределенныйСпособРаспределения(
		"ПлановаяСебестоимость",
		"По плановой себестоимости",
		"Приемлемым является распределение пропорционально плановой себестоимости",
		Перечисления.ХарактерЗатрат.ПустаяСсылка(),
		Перечисления.НаправленияРаспределенияЗатрат.Выпуск,
		Ложь,
		Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска, 
		Перечисления.ВидыПоказателейБазыРаспределения.ЦеныНоменклатуры,
		глЗначениеПеременной("ТипЦенПлановойСебестоимостиНоменклатуры"));
		
	ДобавитьПредопределенныйСпособРаспределения(
		"Нормативы",
		"По нормативам",
		"Есть возможность определить (установить) нормативы затрат на продукцию в разрезе статей",
		Перечисления.ХарактерЗатрат.ПустаяСсылка(),
		Перечисления.НаправленияРаспределенияЗатрат.Выпуск,
		Ложь,
		Перечисления.БазыРаспределенияЗатрат.ПоНормативам);
		
	ДобавитьПредопределенныйСпособРаспределения(
		"ОбъемВыпуска",
		"По объему выпуска",
		"Продукция (услуги) измеряется в одинаковых единицах",
		Перечисления.ХарактерЗатрат.ПустаяСсылка(),
		Перечисления.НаправленияРаспределенияЗатрат.Выпуск,
		Ложь,
		Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска, 
		Перечисления.ВидыПоказателейБазыРаспределения.НатуральныеЕдиницыИзмерения);
		
	ДобавитьПредопределенныйСпособРаспределения(
		"Выручка",
		"По выручке",
		"Продается всё, что производится. Продукция (услуги) могут быть неоднородными (измеряться в разных единицах измерения)",
		Перечисления.ХарактерЗатрат.ПустаяСсылка(),
		Перечисления.НаправленияРаспределенияЗатрат.Выпуск,
		Ложь,
		Перечисления.БазыРаспределенияЗатрат.ПоОбъемуПродаж, 
		Перечисления.ВидыПоказателейБазыРаспределения.ФактическаяЦенаРеализации);
		
	ДобавитьПредопределенныйСпособРаспределения(
		"ОбъемПродаж",
		"По объему продаж",
		"Продается всё, что производится. Продукция (услуги) измеряется в одинаковых единицах измерения",
		Перечисления.ХарактерЗатрат.ПустаяСсылка(),
		Перечисления.НаправленияРаспределенияЗатрат.Выпуск,
		Ложь,
		Перечисления.БазыРаспределенияЗатрат.ПоОбъемуПродаж, 
		Перечисления.ВидыПоказателейБазыРаспределения.НатуральныеЕдиницыИзмерения);
	
КонецПроцедуры

// Добавляет предопределенный способ распределения
// При этом
//  - либо создается новый элемент справочника
//  - либо заполняются необходимые реквизиты существующего элемента
//
// Данные для заполнения - макеты справочника
//
// Параметры:
//  ИмяМакета - Строка, имя макета справочника СпособыРаспределенияЗатратНаВыпуск,
//               который содержит описание базы распределения в виде схемы компоновки данных
//	Наименование - Строка - наименование элемента справочника
//  КогдаПрименять - Строка - Область, условия применения
//  Применимость - ПеречисленияСсылка.ХарактерЗатрат - характер затрат, для распределения
//               которых используется эта база
//	НаправлениеРаспределения - ПеречислениеСсылка.НаправленияРаспределенияЗатрат - куда распределять расходы
//  ТолькоУпрощенный - Булево, если Истина, то применение этого способа распределения приведет к тому,
//               что распределение расходов будет выполняться механизмом упрощенного распределения
//  БазаРаспределенияЗатрат - ПеречислениеСсылка.БазыРаспределенияЗатрат
//  ПоказательБазыРаспределения - ПеречислениеСсылка.ВидыПоказателейБазыРаспределения
//  ТипЦен - СправочникСсылка.ТипыЦенНоменклатуры
//  ВидЗатрат - ПеречислениеСсылка.ВидыЗатрат
//
Процедура ДобавитьПредопределенныйСпособРаспределения(
			ИмяМакета,
	        Наименование,
			КогдаПрименять,
			Применимость,
			НаправлениеРаспределения, 
			ТолькоУпрощенный,
			БазаРаспределенияЗатрат = Неопределено,
			ПоказательБазыРаспределения = Неопределено,
			ТипЦен = Неопределено,
			ВидЗатрат = Неопределено)
	
	// Получим макет справочника "Способы распределения затрат" по его имени
	СхемаКомпоновкиДанных = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет(ИмяМакета);
	
	// Попытаемся найти элемент справочника "Способы распределения затрат"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыРаспределенияЗатратНаВыпуск.Ссылка
	|ИЗ
	|	Справочник.СпособыРаспределенияЗатратНаВыпуск КАК СпособыРаспределенияЗатратНаВыпуск
	|ГДЕ
	|	(СпособыРаспределенияЗатратНаВыпуск.ТипБазыРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазРаспределения.Предопределенный)
	|			ИЛИ СпособыРаспределенияЗатратНаВыпуск.Предопределенный)
	|	И СпособыРаспределенияЗатратНаВыпуск.Наименование = &Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда // способ найден
		Объект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе // способ не найден
		Объект = Справочники.СпособыРаспределенияЗатратНаВыпуск.СоздатьЭлемент();
		Объект.Наименование = Наименование;
	КонецЕсли;
	
	// Заполним общие реквизиты для всех способов распределения
	Объект.ИспользоватьПростоеРаспределение = ТолькоУпрощенный;
	Объект.НаправлениеРаспределения 		= НаправлениеРаспределения;
	Объект.Применимость             		= Применимость;
	Объект.СхемаКомпоновкиДанных			= Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Объект.КогдаПрименять					= КогдаПрименять;
	Объект.ТипБазыРаспределения				= Перечисления.ТипыБазРаспределения.Предопределенный;
	
	// Заполним необходимые реквизиты способов, которые можно использовать в обоих режимах
	Если НЕ ТолькоУпрощенный И НЕ ЗначениеЗаполнено(Объект.БазаРаспределенияЗатрат) Тогда
		
		Объект.БазаРаспределенияЗатрат 				= БазаРаспределенияЗатрат;
		Объект.ПоказательБазыРаспределения 			= ПоказательБазыРаспределения;
		Объект.ТипЦен 								= ТипЦен;
		
		Объект.РаспределятьНаСобственнуюПродукцию 	          = Истина;
		Объект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		Объект.РаспределятьНаПродукциюИзДавальческогоСырья    = Истина;
		
		Если ВидЗатрат <> Неопределено Тогда
			
			// Вид затрат должен быть сохранен в настройках построителя отчета
			ПостроительОтчета = Новый ПостроительОтчета;
			Объект.ЗаполнитьНачальныеНастройки(ПостроительОтчета);
			
			ОтборВидЗатрат = ПостроительОтчета.Отбор.Найти("ВидЗатрат");
			Если ОтборВидЗатрат <> Неопределено Тогда
				ОтборВидЗатрат.Установить(ВидЗатрат);
			КонецЕсли;
			
			СтруктураНастроек = Новый Структура;
			СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь));
			СтруктураНастроек.Вставить("Отбор",                ПостроительОтчета.Отбор);
			
			Объект.НастройкиПостроителя = Новый ХранилищеЗначения(СтруктураНастроек);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запишем способ распределения
	Объект.Записать();
	
КонецПроцедуры


// Обновляет способ распределения "По материальным затратам"
//
Процедура ОбновитьСпособМатериальныеЗатраты() Экспорт
	
	ДобавитьПредопределенныйСпособРаспределения(
		"МатериальныеЗатраты",
		"По материальным затратам",
		"До расчета себестоимости материальные затраты имеют суммовую оценку",
		Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы,
		Перечисления.НаправленияРаспределенияЗатрат.Затраты,
		Ложь,
		Перечисления.БазыРаспределенияЗатрат.ПоСтоимостиЗатрат,
		, // Показатель базы распределения
		, // Тип цен
		Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ЗАПОЛНЕНИЯ СПОСОБОВ РАСПРЕДЕЛЕНИЯ ЗАТРАТ

// Проверяет правильность заполнения указанного способа распределения с табличной базой распределения
// 
// Параметры: 
//  СпособРаспределения - СправочникОбъект.СпособыРаспределенияЗатратНаВыпуск
//
// Возвращаемое значение:
//  Истина 	- база заполнена корректно
//  Ложь 	- база заполнена некорректно
//
Функция ПроверитьЗаполнениеБазыРаспределения(СпособРаспределения) Экспорт
	
	Отказ = Ложь;
	
	// Получим базу распределения из соответствующей табличной части способа распределения
	ИмяТабличнойЧасти = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьИмяИспользуемойТабличнойЧасти(СпособРаспределения);
	БазаРаспределения = СпособРаспределения[ИмяТабличнойЧасти].Выгрузить();
	
	// Проверим наличие строк в базе распределения
	Если БазаРаспределения.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо указать базу распределения затрат'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
		Возврат НЕ Отказ;
		
	КонецЕсли;
	
	// Проверка заполнения обязательных реквизитов базы распределения
	Если НЕ СпособРаспределения.ПроверитьЗаполнение() Тогда
		// Для дальнейшей проверки должны быть заполнены все обязательные реквизиты табличной части
		Возврат Ложь;
	КонецЕсли;
	
	// Общие проверки для всех направлений распределения
	
	// Проверим наличие дублей строк в табличной части
	ИменаКолонок = "";
	Для Каждого Колонка Из БазаРаспределения.Колонки Цикл
		Если Колонка.Имя <> "База" И Найти(Колонка.Имя, "НомерСтроки") = 0 Тогда
			ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ",") + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	КопияБазы = БазаРаспределения.Скопировать(, ИменаКолонок);
	КопияБазы.Свернуть(ИменаКолонок, "");
	
	Если КопияБазы.Количество() < БазаРаспределения.Количество() Тогда // есть одинаковые строки
		
		ТекстСообщения = НСтр("ru = 'В базе распределения нельзя указывать дублирующиеся строки'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		
	КонецЕсли;
	
	// Проверим нулевые коэффициенты базы распределения
	СтрокиСНулевымКоэффициентом = БазаРаспределения.НайтиСтроки(Новый Структура("База", 0));
	Если СтрокиСНулевымКоэффициентом.Количество() > 0 Тогда
		
		МассивНомеров = Новый Массив;
		Для Каждого Строка Из СтрокиСНулевымКоэффициентом Цикл
			МассивНомеров.Добавить(Строка.НомерСтроки);
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'В %Строках %НомераСтрок не указан коэффициент базы распределения'");
		УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеров);
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
	КонецЕсли;
	
	// Проверки для направления распределения "На выпуск"
	Если СпособРаспределения.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Выпуск Тогда
		
		// Проверим корректность заполнения счета
		МассивСчетовУчета = Новый Массив;
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваНеОблагаемоеЕНВД);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД);
		
		МассивНомеровСчета = Новый Массив;
		
		Для Каждого Строка Из БазаРаспределения Цикл
			Если МассивСчетовУчета.Найти(Строка.СчетУчета) = Неопределено Тогда
				МассивНомеровСчета.Добавить(Строка.НомерСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивНомеровСчета.Количество() > 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'В %Строках %НомераСтрок указан недопустимый счет'");
			УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеровСчета);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецЕсли;
		
		// Проверим соответствие вида подразделения и счета
		// Основное производство - 20.01, вспомогательное производство - 23
		МассивНомеровНесоответствия = Новый Массив;
		
		Для Каждого Строка Из БазаРаспределения Цикл
			
		 	// Если в строке указан некорректный счет, то незачем проверять несоответствие вида подразделения и счета
			Если МассивНомеровСчета.Найти(Строка.НомерСтроки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВидПодразделения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Подразделение, "ВидПодразделения");
			
			Если (ВидПодразделения = Перечисления.ВидыПодразделений.ОсновноеПроизводство
			 И НЕ Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство))
			 ИЛИ (ВидПодразделения = Перечисления.ВидыПодразделений.ВспомогательноеПроизводство
			 И НЕ Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства)) Тогда
			 
				МассивНомеровНесоответствия.Добавить(Строка.НомерСтроки);
				
			КонецЕсли;
			
			Если МассивНомеровНесоответствия.Количество() > 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'В %Строках %НомераСтрок счет не соответствует виду подразделения'");
				УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеровНесоответствия);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	// Проверки для направления распределения "На затраты"
	ИначеЕсли СпособРаспределения.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Затраты Тогда
		
		// В табличной части не должно быть строк, которые отличают только статьей затрат
		ИменаКолонок = "СчетУчета, Подразделение, НоменклатурнаяГруппа";
		
		КопияБазы = БазаРаспределения.Скопировать(, ИменаКолонок);
		КопияБазы.Свернуть(ИменаКолонок, "");
		
		Если КопияБазы.Количество() < БазаРаспределения.Количество() Тогда // есть строки, отличающиеся только статьей затрат
			
			ТекстСообщения = НСтр("ru = 'В базе распределения нельзя указывать строки, отличающиеся только статьей затрат'");
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецЕсли;
		
		// Проверим корректность заполнения счета
		МассивНомеровСчета = Новый Массив;
		
		Для Каждого Строка Из БазаРаспределения Цикл
			Если НЕ УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(Строка.СчетУчета) Тогда
				МассивНомеровСчета.Добавить(Строка.НомерСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивНомеровСчета.Количество() > 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'В %Строках %НомераСтрок указан недопустимый счет'");
			УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеровСчета);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецЕсли;
		
		// Проверим соответствие счета и вида подразделения
		// 20.01 - Основное производство
		// 23 - Вспомогательное производство
		// 25 - Основное производство, вспомогательное производство
		// 26 - Прочие
		МассивНомеровНесоответствия = Новый Массив;
		
		Для Каждого Строка Из БазаРаспределения Цикл
			
		 	// Если в строке указан некорректный счет, то незачем проверять несоответствие счета и вида подразделения
			Если МассивНомеровСчета.Найти(Строка.НомерСтроки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВидПодразделения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Подразделение, "ВидПодразделения");
			
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство) Тогда
				Если ВидПодразделения <> Перечисления.ВидыПодразделений.ОсновноеПроизводство Тогда
					МассивНомеровНесоответствия.Добавить(Строка.НомерСтроки);
				КонецЕсли;
			ИначеЕсли Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства) Тогда
				Если ВидПодразделения <> Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
					МассивНомеровНесоответствия.Добавить(Строка.НомерСтроки);
				КонецЕсли;
			ИначеЕсли Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Тогда
				Если ВидПодразделения <> Перечисления.ВидыПодразделений.ОсновноеПроизводство
				 И ВидПодразделения <> Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
					МассивНомеровНесоответствия.Добавить(Строка.НомерСтроки);
				КонецЕсли;
			ИначеЕсли Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда
				Если ВидПодразделения <> Перечисления.ВидыПодразделений.Прочее Тогда
					МассивНомеровНесоответствия.Добавить(Строка.НомерСтроки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивНомеровНесоответствия.Количество() > 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'В %Строках %НомераСтрок счет не соответствует виду подразделения'");
			УчетЗатрат.ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеровНесоответствия);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат НЕ Отказ;
	
КонецФункции


///////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С РЕКВИЗИТАМИ СПОСОБОВ РАСПРЕДЕЛЕНИЯ

// Возвращает схему компоновки данных для указанного способа распределения
//
// Параметры: 
//  СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных
//
Функция ПолучитьСхемуКомпоновкиДанныхБазы(СпособРаспределения) Экспорт
	Перем СхемаКомпоновки;
	
	// Прочитаем только нужные реквизиты способа распределения, не будем читать лишние реквизиты и табличные части
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		СпособРаспределения,
		"СхемаКомпоновкиДанных, НаправлениеРаспределения, ТипБазыРаспределения");
	
	Если Реквизиты.ТипБазыРаспределения = Перечисления.ТипыБазРаспределения.Табличный Тогда
		// Для способа распределения с табличной базой получим СКД из макета справочника
		Если Реквизиты.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Выпуск Тогда
			СхемаКомпоновки = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ТабличнаяБазаНаВыпуск");
		ИначеЕсли Реквизиты.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Затраты Тогда
			СхемаКомпоновки = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ТабличнаяБазаНаЗатраты");
		ИначеЕсли Реквизиты.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Результат Тогда
			СхемаКомпоновки = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ТабличнаяБазаНаРезультат");
		КонецЕсли;
	Иначе
		// Получим СКД из реквизита способа распределения
		СхемаКомпоновки = Реквизиты.СхемаКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновки = Неопределено Тогда
		СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Возврат СхемаКомпоновки;
	
КонецФункции

// Функция возвращает имея используемой табличной части для указанного способа распределения
//
// Параметры: 
//  СпособРаспределения - СправочникОбъект.СпособыРаспределенияЗатратНаВыпуск
//						  или СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск
//
Функция ПолучитьИмяИспользуемойТабличнойЧасти(СпособРаспределения) Экспорт
	
	ИмяТабличнойЧасти = "";
	
	Если СпособРаспределения.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Выпуск Тогда
		ИмяТабличнойЧасти = "БазаРаспределенияНаВыпуск";
	ИначеЕсли СпособРаспределения.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Затраты Тогда
		ИмяТабличнойЧасти = "БазаРаспределенияНаЗатраты";
	ИначеЕсли СпособРаспределения.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Результат Тогда
		ИмяТабличнойЧасти = "БазаРаспределенияНаРезультат";
	КонецЕсли;
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции

// Функция возвращает имена неиспользуемых табличных частей для указанного способа распределения
//
// Параметры: 
//  СпособРаспределения - СправочникОбъект.СпособыРаспределенияЗатратНаВыпуск
//						  или СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск
//
Функция ПолучитьИменаНеиспользуемыхТабличныхЧастей(СпособРаспределения) Экспорт
	
	ИменаНеиспользуемыхТЧ = "";
	
	Если СпособРаспределения.ТипБазыРаспределения <> Перечисления.ТипыБазРаспределения.Табличный Тогда
		ИменаНеиспользуемыхТЧ = "БазаРаспределенияНаВыпуск, БазаРаспределенияНаЗатраты, БазаРаспределенияНаРезультат";
	Иначе
		Если СпособРаспределения.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Выпуск Тогда
			ИменаНеиспользуемыхТЧ = "БазаРаспределенияНаЗатраты, БазаРаспределенияНаРезультат";
		ИначеЕсли СпособРаспределения.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Затраты Тогда
			ИменаНеиспользуемыхТЧ = "БазаРаспределенияНаВыпуск, БазаРаспределенияНаРезультат";
		ИначеЕсли СпособРаспределения.НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Результат Тогда
			ИменаНеиспользуемыхТЧ = "БазаРаспределенияНаВыпуск, БазаРаспределенияНаЗатраты";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИменаНеиспользуемыхТЧ;
	
КонецФункции
