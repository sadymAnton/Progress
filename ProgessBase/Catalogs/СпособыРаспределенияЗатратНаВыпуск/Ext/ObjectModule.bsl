
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет начальные настройки построителя отчетов.
//
Процедура ЗаполнитьНачальныеНастройки(ПостроительОтчета) Экспорт
	
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	
	МассивОтбора.Добавить("Подразделение");
	МассивОтбора.Добавить("ПодразделениеОрганизации");
	
	Если БазаРаспределенияЗатрат = Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска
	 ИЛИ БазаРаспределенияЗатрат = Перечисления.БазыРаспределенияЗатрат.ПоОбъемуПродаж Тогда
	 
	 Текст = " 
		|ВЫБРАТЬ
		|	Подразделения.Ссылка 					КАК Подразделение
		|{ВЫБРАТЬ
		|	Подразделения.Ссылка.* 					КАК Подразделение,
		|	ПодразделенияОрганизаций.Ссылка.* 		КАК ПодразделениеОрганизации
		|}
		|ИЗ 
		|	Справочник.Подразделения 			КАК Подразделения,
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|{ГДЕ
		|	Подразделения.Ссылка.* 					КАК Подразделение,
		|	ПодразделенияОрганизаций.Ссылка.* 		КАК ПодразделениеОрганизации
		|}
		|";
	 
	Иначе

		Текст = " 
		|ВЫБРАТЬ
		|	СтатьиЗатрат.ВидЗатрат 					КАК ВидЗатрат,
		|	СтатьиЗатрат.СтатусМатериальныхЗатрат 	КАК СтатусМатериальныхЗатрат,
		|	СтатьиЗатрат.ХарактерЗатрат 			КАК ХарактерЗатрат,
		|	СтатьиЗатрат.Ссылка 					КАК СтатьяЗатрат,
		|	Подразделения.Ссылка 					КАК Подразделение
		|{ВЫБРАТЬ
		|	СтатьиЗатрат.ВидЗатрат.* 				КАК ВидЗатрат,
		|	СтатьиЗатрат.СтатусМатериальныхЗатрат.* КАК СтатусМатериальныхЗатрат,
		|	СтатьиЗатрат.ХарактерЗатрат.* 			КАК ХарактерЗатрат,
		|	СтатьиЗатрат.Ссылка.* 					КАК СтатьяЗатрат,
		|	Подразделения.Ссылка.* 					КАК Подразделение,
		|	ПодразделенияОрганизаций.Ссылка.* 		КАК ПодразделениеОрганизации
		|}
		|ИЗ 
		|	Справочник.СтатьиЗатрат 			КАК СтатьиЗатрат,
		|	Справочник.Подразделения 			КАК Подразделения,
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|{ГДЕ
		|	СтатьиЗатрат.ВидЗатрат.* 				КАК ВидЗатрат,
		|	СтатьиЗатрат.СтатусМатериальныхЗатрат.* КАК СтатусМатериальныхЗатрат,
		|	СтатьиЗатрат.ХарактерЗатрат.* 			КАК ХарактерЗатрат,
		|	СтатьиЗатрат.Ссылка.* 					КАК СтатьяЗатрат,
		|	Подразделения.Ссылка.* 					КАК Подразделение,
		|	ПодразделенияОрганизаций.Ссылка.* 		КАК ПодразделениеОрганизации
		|}
		|";
		
		МассивОтбора.Добавить("ВидЗатрат");
		МассивОтбора.Добавить("СтатусМатериальныхЗатрат");
		МассивОтбора.Добавить("ХарактерЗатрат");
		МассивОтбора.Добавить("СтатьяЗатрат");
	КонецЕсли;
	
	// Соответствие имен полей в запросе и их представлений в отчете.
	СтруктураПредставлениеПолей = Новый Структура;
	СтруктураПредставлениеПолей.Вставить("Подразделение", 			"Подразделение");
	СтруктураПредставлениеПолей.Вставить("ПодразделениеОрганизации", "Подразделение организации");
	
	Если БазаРаспределенияЗатрат <> Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска
	   И БазаРаспределенияЗатрат <> Перечисления.БазыРаспределенияЗатрат.ПоОбъемуПродаж Тогда
		СтруктураПредставлениеПолей.Вставить("ВидЗатрат",        		"Вид затрат");
		СтруктураПредставлениеПолей.Вставить("СтатусМатериальныхЗатрат","Статус мат. затрат");
		СтруктураПредставлениеПолей.Вставить("ХарактерЗатрат", 			"Характер затрат");
		СтруктураПредставлениеПолей.Вставить("СтатьяЗатрат", 			"Статья затрат");
	КонецЕсли;
	
	ПостроительОтчета.Текст = Текст;
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	
	Если (БазаРаспределенияЗатрат = Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска
		ИЛИ БазаРаспределенияЗатрат = Перечисления.БазыРаспределенияЗатрат.ПоОбъемуПродаж)
		И ПостроительОтчета.Отбор.Количество() > 0 Тогда
		
		КолвоЭлементов = ПостроительОтчета.Отбор.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ЭлементОтбора = ПостроительОтчета.Отбор[КолвоЭлементов - ОбратныйИндекс];
			
			Если ЭлементОтбора.Имя = "ВидЗатрат"
				ИЛИ ЭлементОтбора.Имя = "СтатусМатериальныхЗатрат"
				ИЛИ ЭлементОтбора.Имя = "ХарактерЗатрат"
				ИЛИ ЭлементОтбора.Имя = "СтатьяЗатрат" Тогда
				ПостроительОтчета.Отбор.Удалить(КолвоЭлементов - ОбратныйИндекс);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	 
	Для Каждого Элемент Из МассивОтбора Цикл
		Если ПостроительОтчета.Отбор.Найти(Элемент) = Неопределено Тогда
			ПолеОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбъектКопирования.ТипБазыРаспределения = Перечисления.ТипыБазРаспределения.Предопределенный Тогда
		ТипБазыРаспределения = Перечисления.ТипыБазРаспределения.СКД; // тип базы Предопределенный преобразуем в СКД
	ИначеЕсли ОбъектКопирования.ТипБазыРаспределения = Перечисления.ТипыБазРаспределения.ПустаяСсылка() Тогда
		ТипБазыРаспределения = Перечисления.ТипыБазРаспределения.Табличный; // пустой тип базы преобразуем в Табличный
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события "ОбработкаПроверкиЗаполнения"
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	// Исключим из проверки реквизиты табличных частей, не используемых для указанного направления распределения
	ТабличныеЧасти 			  = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьИменаНеиспользуемыхТабличныхЧастей(ЭтотОбъект);
	СтруктураНеиспользуемыхТЧ = Новый Структура(ТабличныеЧасти);
	НепроверяемыеРеквизиты 	  = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		
		// Разложим полное имя реквизита на имя табличной части и имя самого реквизита
		МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяРеквизита, ".");
		
		// Если это реквизит неиспользуемой табличной части, то его надо удалить из массива проверяемых реквизитов
		Если СтруктураНеиспользуемыхТЧ.Свойство(МассивСтрок[0]) Тогда
			НепроверяемыеРеквизиты.Вставить(0, ПроверяемыеРеквизиты.Найти(ИмяРеквизита));
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим реквизиты, которые не надо проверять, из массива проверяемых реквизитов
	Для Каждого НомерРеквизита Из НепроверяемыеРеквизиты Цикл
		ПроверяемыеРеквизиты.Удалить(НомерРеквизита);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим неиспользуемые табличные части
	ТабличныеЧасти 		 = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьИменаНеиспользуемыхТабличныхЧастей(ЭтотОбъект);
	СтруктураОчищаемыхТЧ = Новый Структура(ТабличныеЧасти);
	
	Для Каждого КлючИЗначение Из СтруктураОчищаемыхТЧ Цикл
		
		ТабличнаяЧасть = ЭтотОбъект[КлючИЗначение.Ключ];
		Если ТабличнаяЧасть.Количество() > 0 Тогда
			ТабличнаяЧасть.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	// Очистим СКД если она не используется в текущем способе распределения
	Если ТипБазыРаспределения <> Перечисления.ТипыБазРаспределения.Предопределенный
	 И ТипБазыРаспределения <> Перечисления.ТипыБазРаспределения.СКД
	 И СхемаКомпоновкиДанных.Получить() <> Неопределено Тогда
		СхемаКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
 	КонецЕсли;
	
	// Очистим настройки построителя отчета если они не используются в текущем способе распределения
	Если ИспользоватьПростоеРаспределение
	 И НастройкиПостроителя.Получить() <> Неопределено Тогда
		НастройкиПостроителя = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
КонецПроцедуры
