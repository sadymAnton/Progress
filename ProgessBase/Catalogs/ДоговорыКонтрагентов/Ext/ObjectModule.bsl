////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет, существуют ли ссылки на договор в движениях регистров накопления.
// Если есть - нельзя менять:
//  - Валюту взаиморасчетов
//  - Ведение взаиморасчетов.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция СуществуютСсылки() Экспорт

	Возврат ПолныеПрава.ПроверитьНаличиеСсылокНаДоговорКонтрагента(Ссылка);

КонецФункции //  СуществуютСсылки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью элемента справочника.
//
Процедура ПередЗаписью(Отказ)
	
	//начало изменений Ожиганов 14.07.2015 создание базы МСФО
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;  
	//конец изменений	

	// Проверим можно ли изменять реквизиты договора.
	// Проверка осуществляется только если записывается уже существующий договор
	Если НЕ ОбменДанными.Загрузка И НЕ ЭтоНовый() Тогда

		Если ЭтоГруппа Тогда

			// Для группы владельца менять нельзя
			Если Владелец <> Ссылка.Владелец Тогда

				Сообщить("Нельзя изменять контрагента для группы договоров.", СтатусСообщения.Важное);
				Отказ = Истина;

			КонецЕсли; 

		Иначе

			// Проверим возможность смены владельца для договора
			Если Владелец <> Ссылка.Владелец Тогда

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДокументыПоДоговоруКонтрагента.Ссылка
				|ИЗ
				|	КритерийОтбора.ДокументыПоДоговоруКонтрагента(&Договор) КАК ДокументыПоДоговоруКонтрагента";
				
				Запрос.УстановитьПараметр("Договор", Ссылка);
				
				Результат = Запрос.Выполнить();
				ЕстьДокументыПоДоговору = НЕ Результат.Пустой();
				
				Если ЕстьДокументыПоДоговору Тогда
					Сообщить("Существуют документы, оформленные по договору """ + Наименование + """.
							 |Контрагент договора не может быть изменен, элемент не записан.", 
							 СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли; 

			КонецЕсли; 

			// Проверим возможность смены способа ведения взаиморасчетов и валюты взаиморасчетов
			Если ВедениеВзаиморасчетов <> Ссылка.ВедениеВзаиморасчетов
			 ИЛИ ВалютаВзаиморасчетов <> Ссылка.ВалютаВзаиморасчетов 
			 ИЛИ ВидДоговора <> Ссылка.ВидДоговора
			 ИЛИ Организация <> Ссылка.Организация
			 ИЛИ РасчетыВУсловныхЕдиницах <> Ссылка.РасчетыВУсловныхЕдиницах
			 ИЛИ ВидУсловийДоговора <> Ссылка.ВидУсловийДоговора 
			 ИЛИ ВестиПоДокументамРасчетовСКонтрагентом <> Ссылка.ВестиПоДокументамРасчетовСКонтрагентом Тогда

				Если ЭтотОбъект.СуществуютСсылки() Тогда

					Сообщить("Существуют документы, проведенные по договору """ + Наименование + """.
							 |Реквизиты ""Организация"", ""Ведение взаиморасчетов"", ""Валюта взаиморасчетов"", ""Вид договора"", 
							 |""По документам расчетов с контрагентом"", ""Расчеты в условных единицах"" и ""Условия выполнения договора"" не могут быть изменены, элемент не записан.", 
							 СтатусСообщения.Важное);
					Отказ = Истина;

				КонецЕсли;

			КонецЕсли;
			Если  ОбособленныйУчетТоваровПоЗаказамПокупателей<>Ссылка.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				Если ПолныеПрава.ПроверитьНаличиеСсылокНаДоговорКонтрагентаВЗаказахПокупателей(Ссылка) Тогда
					Сообщить("Существуют заказы покупателей, проведенные по договору """ + Наименование + """.
					|Реквизит ""Обособленный учет товаров по заказам покупателей"" не может быть изменен, элемент не записан.", 
					СтатусСообщения.Важное);
					Отказ = Истина;

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	// Проверим заполнение и очистим неиспользуемые реквизиты элемента договора.
	Если Не ЭтоГруппа Тогда

		// Проверим, заполнена ли валюта.
		Если НЕ ОбменДанными.Загрузка И НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			Сообщить("Не указана валюта договора.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;

		// Проверим, заполнена ли организация.
		Если НЕ ОбменДанными.Загрузка И НЕ ЗначениеЗаполнено(Организация) Тогда
			Сообщить("Не указана организация, от которой заключен договор.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;

		// Проверим, заполнен ли способ ведения взаиморасчетов.
		Если НЕ ОбменДанными.Загрузка И НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетов) Тогда
			Сообщить("Не указан способ ведения взаиморасчетов по договору.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;

		// Проверим, заполнен ли вид договора.
		Если НЕ ОбменДанными.Загрузка Тогда
		
			Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
				Сообщить("Не указан вид договора.", СтатусСообщения.Важное);
				Отказ = Истина;
			Иначе
				// Проверим, правильно ли заполнен вид договора
				Если (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И НЕ Владелец.Покупатель Тогда
					Сообщить("Вид договора ""С покупателем"" может устанавливаться только когда у контрагента указано что он является покупателем.", СтатусСообщения.Важное);
					Отказ = Истина;
				ИначеЕсли (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
					И НЕ Владелец.Поставщик Тогда
					Сообщить("Вид договора ""С поставщиком"" может устанавливаться только когда у контрагента указано что он является поставщиком.", СтатусСообщения.Важное);
					Отказ = Истина;
				ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее
					И ВестиПоДокументамРасчетовСКонтрагентом Тогда
					Сообщить("Флажок ""По документам расчетов с контрагентами"" не может устанавливаться у договоров с видом ""Прочее"".", СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли;
		
		КонецЕсли; 

	КонецЕсли;
	
	//начало изменений 
	БылОтказ = Отказ;
    //конец изменений
	// is ЯннуровВФ нач 20140610 ЗР-0И-001397 
	Если ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.ЛизингМашин 
	 Или ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.ЛизингОборудования Тогда 
		// Проверка для лизинга
		Если Не ЗначениеЗаполнено(ДС_ОбъектДоговора) Тогда 
			//Отказ = Истина; // Шевченков закомментировал строку
			Сообщить("Не заполнено поле <Объект договора>", СтатусСообщения.Внимание);
		КонецЕсли;
		// Проверка на единственность
		/// Кунов О.В., 17.12.2014 - 34657
		Если ЗначениеЗаполнено(ДС_ОбъектДоговора) И (ЭтоНовый() Или Ссылка.ДС_ОбъектДоговора <> ДС_ОбъектДоговора) Тогда // проверяем только при изменившемся объекте и у новых
		///
			лЗапрос = Новый Запрос;
			лЗапрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
			|	ДоговорыКонтрагентов.Ссылка КАК Договор
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|	И ДоговорыКонтрагентов.ДС_ОбъектДоговора = &ОбъектДоговора
			|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Контрагент,
			|	Договор
			|АВТОУПОРЯДОЧИВАНИЕ";
			лЗапрос.УстановитьПараметр("Ссылка", Ссылка);
			лЗапрос.УстановитьПараметр("ОбъектДоговора", ДС_ОбъектДоговора);
			лВыборка = лЗапрос.Выполнить().Выбрать();
			Пока лВыборка.Следующий() Цикл 
				Отказ = Истина;
				Сообщить("Объект договора <"+ДС_ОбъектДоговора+"> уже используется в <"+лВыборка.Контрагент+">/<"+лВыборка.Договор+">", СтатусСообщения.Внимание);
			КонецЦикла;
		КонецЕсли;
		// Проверка для продленных договоров
	 	Если ис_Продлен Тогда 
			Если Не ЗначениеЗаполнено(ис_ДатаПродления) Тогда 
				Отказ = Истина;
				Сообщить("Не заполнено поле <Дата продления>", СтатусСообщения.Внимание);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ис_СтоимостьПродления) Тогда 
				Отказ = Истина;
				Сообщить("Не заполнено поле <Стоимость продления>", СтатусСообщения.Внимание);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ис_СрокПродления) Тогда 
				Отказ = Истина;
				Сообщить("Не заполнено поле <Срок продления>", СтатусСообщения.Внимание);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ис_КурсНаДатуПринятияКУчетуПоПродлению) Тогда 
				Отказ = Истина;
				Сообщить("Не заполнено поле <Курс на дату принятия к учету>", СтатусСообщения.Внимание);
			КонецЕсли;
			лЗапрос = Новый Запрос;
			лЗапрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ДС_ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа
			|ИЗ
			|	РегистрСведений.ДС_ГрафикПлатежей КАК ДС_ГрафикПлатежей
			|ГДЕ
			|	ДС_ГрафикПлатежей.Договор = &Договор
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаПлатежа";
			лЗапрос.УстановитьПараметр("Договор", Ссылка);
			Если лЗапрос.Выполнить().Пустой() И (ЭтоНовый() Или Ссылка.ис_Продлен <> ис_Продлен) Тогда
				Отказ = Истина;
				Сообщить("Не найден график платежей по основному договору", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
		//начало изменений
		Если Не БылОтказ и Отказ Тогда
			Если РольДоступна("ПолныеПрава") Тогда
				Отказ = Ложь;
			КонецЕсли;	
		КонецЕсли;	
		//конец измененйи
	КонецЕсли;
	// is ЯннуровВФ кон 20140610
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Перем Контрагент;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	Контрагент = Владелец;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Владелец") Тогда
		Контрагент = ДанныеЗаполнения.Владелец;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		Иначе
			Если Контрагент.Покупатель Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ИначеЕсли Контрагент.Поставщик Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Иначе
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Иначе
		Если НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетов) Тогда
			ВедениеВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеВедениеВзаиморасчетовПоДоговорам");
			Если НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетов) Тогда
				ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Контрагент.НеЯвляетсяРезидентом И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		РеализацияНаЭкспорт = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если НЕ (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Организация")) Тогда
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидУсловийДоговора) Тогда
		ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	КонецЕсли;

	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ВестиПоДокументамРасчетовСКонтрагентом = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДокументамСКонтрагентами");
	КонецЕсли;

	Если (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
	 ИЛИ  ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
	   И ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
	КонецЕсли;

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
	КонецЕсли;

	Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
	 ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
	КонецЕсли;
КонецПроцедуры

//менеджер Blik 200214   н
Процедура ПроверитьЗаписатьИзмененияМенеджера() Экспорт
	 //записать менеджера
	 //проверим не изменилась ли доверенность и подписант
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МенеджерРег.Значение КАК МенеджерРегл,
	                      |	ДоговорыКонтрагентов.Менеджер КАК МенеджерДог
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СрезПоследних(&ДатаПроверки, ) КАК МенеджерРег
	                      |		ПО ДоговорыКонтрагентов.Ссылка = МенеджерРег.Объект
	                      |			И (МенеджерРег.Реквизит = ""Менеджер"")
	                      |ГДЕ
	                      |	ДоговорыКонтрагентов.Ссылка = &ТекДог");
	
	 
	Запрос.УстановитьПараметр("ТекДог",Ссылка);
	Запрос.УстановитьПараметр("ДатаПроверки",ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если выборка.МенеджерРегл=Null Тогда
			НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СоздатьНаборЗаписей(); 
			
			НаборЗаписей.Отбор.Объект.Установить(Ссылка);
			НаборЗаписей.Отбор.Реквизит.Установить("Менеджер");
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
			
			НовЗапись = НаборЗаписей.Добавить(); 
			НовЗапись.Объект = Ссылка;
			НовЗапись.Реквизит = "Менеджер"; 
			НовЗапись.Период = ТекущаяДата(); 
			НовЗапись.Значение = выборка.МенеджерДог; 
			НаборЗаписей.Записать(Истина); 
		ИначеЕсли не выборка.МенеджерДог = выборка.МенеджерРегл Тогда
			 НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СоздатьНаборЗаписей(); 
			
			НаборЗаписей.Отбор.Объект.Установить(Ссылка);
			НаборЗаписей.Отбор.Реквизит.Установить("Менеджер");
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
			
			НовЗапись = НаборЗаписей.Добавить(); 
			НовЗапись.Объект = Ссылка;
			НовЗапись.Реквизит = "Менеджер"; 
			НовЗапись.Период = ТекущаяДата(); 
			НовЗапись.Значение = выборка.МенеджерДог; 
			НаборЗаписей.Записать(Истина); 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
//менеджер Blik 200214  к
//закладка ЭТК Blik 150214 н
Процедура ПроверитьЗаписатьИзмененияТерриторий_ДанныеЭТК() Экспорт
	//проверим изменились ли значения по территориям
	Если РольДоступна("ЭТК") Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДоговорыКонтрагентовПРГ_Этк.НомерСтроки,
		|	ДоговорыКонтрагентовПРГ_Этк.ПРГ_Территория,
		|	ДоговорыКонтрагентовПРГ_Этк.ПРГ_ТП,
		|	ДоговорыКонтрагентовПРГ_Этк.ЭТК_Мерч,
		|	ПРГ_ТерриторииЭТКСрезПоследних.ТерриторияЭТК,
		|	ПРГ_ТерриторииЭТКСрезПоследних.СтоимостьТП,
		|	ПРГ_ТерриторииЭТКСрезПоследних.СтоимостьМерч,
		|	ДоговорыКонтрагентовПРГ_Этк.ЭТК_Мен,
		|	ПРГ_ТерриторииЭТКСрезПоследних.СтоимостьМен
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.ПРГ_Этк КАК ДоговорыКонтрагентовПРГ_Этк
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ТерриторииЭТК.СрезПоследних(&ДатаПроверки, ) КАК ПРГ_ТерриторииЭТКСрезПоследних
		|		ПО ДоговорыКонтрагентовПРГ_Этк.Ссылка = ПРГ_ТерриторииЭТКСрезПоследних.ДоговорКонтрагента
		|			И ДоговорыКонтрагентовПРГ_Этк.Ссылка.Владелец = ПРГ_ТерриторииЭТКСрезПоследних.Контрагент
		|			И ДоговорыКонтрагентовПРГ_Этк.ПРГ_Территория = ПРГ_ТерриторииЭТКСрезПоследних.ТерриторияЭТК
		|ГДЕ
		|	ДоговорыКонтрагентовПРГ_Этк.Ссылка.Владелец = &ТекКонтр
		|	И ДоговорыКонтрагентовПРГ_Этк.Ссылка.Ссылка = &ТекДог");
		
		Запрос.УстановитьПараметр("ТекКонтр",Ссылка.Владелец); 
		Запрос.УстановитьПараметр("ТекДог",Ссылка);
		Запрос.УстановитьПараметр("ДатаПроверки",ТекущаяДата());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если выборка.ТерриторияЭТК=Null Тогда
				НаборЗаписей = РегистрыСведений.ПРГ_ТерриторииЭТК.СоздатьНаборЗаписей(); 
				
				НаборЗаписей.Отбор.Контрагент.Установить(Ссылка.Владелец);
				НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(Ссылка);
				НаборЗаписей.Отбор.ТерриторияЭТК.Установить(выборка.ПРГ_Территория);
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
				
				НовЗапись = НаборЗаписей.Добавить(); 
				НовЗапись.Контрагент = Ссылка.Владелец; 
				НовЗапись.ДоговорКонтрагента = Ссылка; 
				НовЗапись.Период = ТекущаяДата(); 
				НовЗапись.ТерриторияЭТК = выборка.ПРГ_Территория; 
				НовЗапись.СтоимостьТП = выборка.ПРГ_ТП; 
				НовЗапись.СтоимостьМерч = выборка.ЭТК_Мерч;
				НовЗапись.СтоимостьМен = выборка.ЭТК_Мен; //Blik 43824 210915
				НаборЗаписей.Записать(Истина); 
			Иначе
				Если не выборка.СтоимостьТП = выборка.ПРГ_ТП или не выборка.СтоимостьМерч = выборка.ЭТК_Мерч или не выборка.СтоимостьМен = выборка.ЭТК_Мен Тогда
					НаборЗаписей = РегистрыСведений.ПРГ_ТерриторииЭТК.СоздатьНаборЗаписей(); 
					
					НаборЗаписей.Отбор.Контрагент.Установить(Ссылка.Владелец);
					НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(Ссылка);
					НаборЗаписей.Отбор.ТерриторияЭТК.Установить(выборка.ПРГ_Территория);
					НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
					
					НовЗапись = НаборЗаписей.Добавить(); 
					НовЗапись.Контрагент = Ссылка.Владелец; 
					НовЗапись.ДоговорКонтрагента = Ссылка; 
					НовЗапись.Период = ТекущаяДата(); 
					НовЗапись.ТерриторияЭТК = выборка.ПРГ_Территория; 
					НовЗапись.СтоимостьТП = выборка.ПРГ_ТП; 
					НовЗапись.СтоимостьМерч = выборка.ЭТК_Мерч;
					НовЗапись.СтоимостьМен = выборка.ЭТК_Мен;  //Blik 43824 210915
					НаборЗаписей.Записать(Истина); 
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//проверим не изменилась ли доверенность и подписант
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоговорыКонтрагентов.ПРГ_ПодписантЭТК.Ссылка КАК ПодписантДог,
	                      |	ДоговорыКонтрагентов.ПРГ_ДоверенностьЭТКНомер КАК ДоверенностьДог,
	                      |	Подписант.Значение КАК ПодписантРег,
	                      |	Доверенность.Значение КАК ДоверенностьРег
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СрезПоследних(&ДатаПроверки, ) КАК Подписант
	                      |		ПО ДоговорыКонтрагентов.Ссылка = Подписант.Объект
	                      |			И (Подписант.Реквизит = ""ПРГ_ПодписантЭТК"")
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СрезПоследних КАК Доверенность
	                      |		ПО ДоговорыКонтрагентов.Ссылка = Доверенность.Объект
	                      |			И (Доверенность.Реквизит = ""ПРГ_ДоверенностьЭТК"")
	                      |ГДЕ
	                      |	ДоговорыКонтрагентов.Ссылка = &ТекДог");
	
	 
	Запрос.УстановитьПараметр("ТекДог",Ссылка);
	Запрос.УстановитьПараметр("ДатаПроверки",ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если выборка.ПодписантРег=Null Тогда
			НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СоздатьНаборЗаписей(); 
			
			НаборЗаписей.Отбор.Объект.Установить(Ссылка);
			НаборЗаписей.Отбор.Реквизит.Установить("ПРГ_ПодписантЭТК");
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
			
			НовЗапись = НаборЗаписей.Добавить(); 
			НовЗапись.Объект = Ссылка;
			НовЗапись.Реквизит = "ПРГ_ПодписантЭТК"; 
			НовЗапись.Период = ТекущаяДата(); 
			НовЗапись.Значение = выборка.ПодписантДог; 
			НаборЗаписей.Записать(Истина); 
		ИначеЕсли не выборка.ПодписантДог = выборка.ПодписантРег Тогда
			 НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СоздатьНаборЗаписей(); 
			
			НаборЗаписей.Отбор.Объект.Установить(Ссылка);
			НаборЗаписей.Отбор.Реквизит.Установить("ПРГ_ПодписантЭТК");
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
			
			НовЗапись = НаборЗаписей.Добавить(); 
			НовЗапись.Объект = Ссылка;
			НовЗапись.Реквизит = "ПРГ_ПодписантЭТК"; 
			НовЗапись.Период = ТекущаяДата(); 
			НовЗапись.Значение = выборка.ПодписантДог; 
			НаборЗаписей.Записать(Истина); 
		КонецЕсли;
		Если выборка.ДоверенностьРег=Null Тогда
			НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СоздатьНаборЗаписей(); 
			
			НаборЗаписей.Отбор.Объект.Установить(Ссылка);
			НаборЗаписей.Отбор.Реквизит.Установить("ПРГ_ДоверенностьЭТК");
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
			
			НовЗапись = НаборЗаписей.Добавить(); 
			НовЗапись.Объект = Ссылка;
			НовЗапись.Реквизит = "ПРГ_ДоверенностьЭТК"; 
			НовЗапись.Период = ТекущаяДата(); 
			НовЗапись.Значение = выборка.ДоверенностьДог; 
			НаборЗаписей.Записать(Истина); 
		ИначеЕсли не выборка.ДоверенностьДог = выборка.ДоверенностьРег Тогда
			 НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СоздатьНаборЗаписей(); 
			
			НаборЗаписей.Отбор.Объект.Установить(Ссылка);
			НаборЗаписей.Отбор.Реквизит.Установить("ПРГ_ДоверенностьЭТК");
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
			
			НовЗапись = НаборЗаписей.Добавить(); 
			НовЗапись.Объект = Ссылка;
			НовЗапись.Реквизит = "ПРГ_ДоверенностьЭТК"; 
			НовЗапись.Период = ТекущаяДата(); 
			НовЗапись.Значение = выборка.ДоверенностьДог; 
			НаборЗаписей.Записать(Истина); 
		КонецЕсли;

	КонецЦикла;
    
КонецПроцедуры
Процедура ЗаполнитьТерриторий_ДанныеЭТК() Экспорт
	//проверим изменились ли значения по территориям
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_ТерриторииЭТКСрезПоследних.ТерриторияЭТК,
	                      |	ПРГ_ТерриторииЭТКСрезПоследних.СтоимостьТП,
	                      |	ПРГ_ТерриторииЭТКСрезПоследних.СтоимостьМерч,
	                      |	ПРГ_ТерриторииЭТКСрезПоследних.СтоимостьМен
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_ТерриторииЭТК.СрезПоследних(&ДатаПроверки, ) КАК ПРГ_ТерриторииЭТКСрезПоследних
	                      |ГДЕ
	                      |	ПРГ_ТерриторииЭТКСрезПоследних.Контрагент = &ТекКонтр
	                      |	И ПРГ_ТерриторииЭТКСрезПоследних.ДоговорКонтрагента = &ТекДог");
	
	Запрос.УстановитьПараметр("ТекКонтр",Ссылка.Владелец); 
	Запрос.УстановитьПараметр("ТекДог",Ссылка);
	Запрос.УстановитьПараметр("ДатаПроверки",ТекущаяДата());
	ПРГ_Этк.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//если территории с стоимостью 0 (ранее убрали) тогда пропускаем
		Если выборка.СтоимостьТП = 0 и выборка.СтоимостьМерч = 0 Тогда
			Продолжить;
		КонецЕсли;
		НовасстрЭТК =  ПРГ_Этк.Добавить();
		 НовасстрЭТК.ПРГ_Территория = выборка.ТерриторияЭТК;
		 НовасстрЭТК.ПРГ_ТП = выборка.СтоимостьТП;
		 НовасстрЭТК.ЭТК_Мерч = выборка.СтоимостьМерч;
		  НовасстрЭТК.ЭТК_Мен = выборка.СтоимостьМен;  //Blik 43824 210915
	 КонецЦикла;
	 //подписант и доверенность
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	ДоговорыКонтрагентов.ПРГ_ПодписантЭТК.Ссылка КАК ПодписантДог,
	                       |	ДоговорыКонтрагентов.ПРГ_ДоверенностьЭТКНомер КАК ДоверенностьДог,
	                       |	Подписант.Значение КАК ПодписантРег,
	                       |	Доверенность.Значение КАК ДоверенностьРег
	                       |ИЗ
	                       |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СрезПоследних(&ДатаПроверки, ) КАК Подписант
	                       |		ПО ДоговорыКонтрагентов.Ссылка = Подписант.Объект
	                       |			И (Подписант.Реквизит = ""ПРГ_ПодписантЭТК"")
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СрезПоследних КАК Доверенность
	                       |		ПО ДоговорыКонтрагентов.Ссылка = Доверенность.Объект
	                       |			И (Доверенность.Реквизит = ""ПРГ_ДоверенностьЭТК"")
	                       |ГДЕ
	                       |	ДоговорыКонтрагентов.Ссылка = &ТекДог");
	
	 
	Запрос.УстановитьПараметр("ТекДог",Ссылка);
	Запрос.УстановитьПараметр("ДатаПроверки",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		ПРГ_ДоверенностьЭТК = выборка.ДоверенностьРег;
		ПРГ_ПодписантЭТК = выборка.ПодписантРег;
	 КонецЕсли;
	 //проверить менеджера
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	МенеджерРег.Значение КАК МенеджерРегл,
	                       |	ДоговорыКонтрагентов.Менеджер КАК МенеджерДог
	                       |ИЗ
	                       |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СрезПоследних(&ДатаПроверки, ) КАК МенеджерРег
	                       |		ПО ДоговорыКонтрагентов.Ссылка = МенеджерРег.Объект
	                       |			И (МенеджерРег.Реквизит = ""Менеджер"")
	                       |ГДЕ
	                       |	ДоговорыКонтрагентов.Ссылка = &ТекДог");
	 
	 
	 Запрос.УстановитьПараметр("ТекДог",Ссылка);
	 Запрос.УстановитьПараметр("ДатаПроверки",ТекущаяДата());
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если  Выборка.Следующий() Тогда
		 Менеджер = выборка.МенеджерРегл;
	 КонецЕсли;


КонецПроцедуры

//закладка ЭТК Blik 150214 к


Процедура ПриЗаписи(Отказ)
	
	//начало изменений Ожиганов 14.07.2015 создание базы МСФО
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;  
	//конец изменений	
	
	// is ЯннуровВФ нач 20140623 0И-001233
	Если Не ДополнительныеСвойства.Свойство("НеПереноситьРыночнуюСтоимостьМСФО") Тогда 
		лЗапрос = Новый Запрос;
		лЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентовДС_СпецификацияДоговора.Объект КАК ОсновноеСредство,
		|	ДоговорыКонтрагентовДС_СпецификацияДоговора.СуммаВал КАК РыночнаяСтоимость
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.ДС_СпецификацияДоговора КАК ДоговорыКонтрагентовДС_СпецификацияДоговора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
		|		ПО ДоговорыКонтрагентовДС_СпецификацияДоговора.Объект = ОсновныеСредства.Ссылка
		|ГДЕ
		|	ДоговорыКонтрагентовДС_СпецификацияДоговора.Ссылка = &Ссылка
		|	И ДоговорыКонтрагентовДС_СпецификацияДоговора.Объект <> ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
		|	И ДоговорыКонтрагентовДС_СпецификацияДоговора.СуммаВал <> ОсновныеСредства.ДС_РыночнаяСтоимость";
		лЗапрос.УстановитьПараметр("Ссылка", Ссылка);
		лВыборка = лЗапрос.Выполнить().Выбрать();
		Пока лВыборка.Следующий() Цикл 
			лОсновноеСредство = лВыборка.ОсновноеСредство.ПолучитьОбъект();
			лОсновноеСредство.ДС_РыночнаяСтоимость = лВыборка.РыночнаяСтоимость;
			лОсновноеСредство.ДополнительныеСвойства.Вставить("НеПереноситьРыночнуюСтоимостьМСФО", Истина);
			лОсновноеСредство.Записать();
		КонецЦикла;
	КонецЕсли;
	// is ЯннуровВФ кон 20140623
	
	//m.ionov@a-prof.ru 20.11.2014
	Если Не ЭтоГруппа И Не Отказ Тогда
		ЗаписатьИзменениеОтсрочки(Отказ);
	КонецЕсли;
    //----m.ionov@a-prof.ru---
	
КонецПроцедуры

//m.ionov@a-prof.ru 20.11.2014
Процедура ЗаписатьИзменениеОтсрочки(Отказ)
	
	Если Не ПравоДоступа("Изменение",Метаданные.РегистрыСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоРегистру = РегистрыСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних(ТекущаяДата(), Новый Структура("Объект", Ссылка));
	
	Если ДанныеПоРегистру.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструОтсрочка(Отказ);
	ИначеЕсли НЕ ДанныеПоРегистру[0].ДопустимоеЧислоДнейЗадолженности = ДопустимоеЧислоДнейЗадолженности Тогда
	    СформируемЗаписьПоРегиструОтсрочка(Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструОтсрочка(Отказ)
			
	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяСтрока = НаборЗаписей.Добавить();
	Иначе
		НоваяСтрока = НаборЗаписей.Получить(0);
	КонецЕсли;
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Объект = Ссылка;
	
	НоваяСтрока.ДопустимоеЧислоДнейЗадолженности = ДопустимоеЧислоДнейЗадолженности;
		
	НоваяСтрока.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;

КонецПроцедуры
//----m.ionov@a-prof.ru---


