Перем мДатаСведений Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой инвентарной карточки ОС (форма ОС-6)
// Утверждена постановлением Госкомстата России от 21.01.2003 № 7
// Возвращаемое значение:
// Табличный документ - печатная форма инвентарной карточки ОС
Функция ПечатьОС6_2003(ДатаСведений,ПечатьПоДаннымУпрУчета = Истина) 
	
	Макет = ПолучитьМакет("ОС6_2003");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаРазделов1и2  = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
	ШапкаРаздела3     = Макет.ПолучитьОбласть("ШапкаРаздела3");
	СтрокиРаздела3    = Макет.ПолучитьОбласть("СтрокиРаздела3");
	ШапкаРаздела4     = Макет.ПолучитьОбласть("ШапкаРаздела4");
	СтрокаРаздела4    = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ПодвалСтраницы1   = Макет.ПолучитьОбласть("ПодвалСтраницы1");
	ШапкаРазделов5и6  = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
	СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
	ШапкаРаздела7_1   = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
	ШапкаРаздела7_2   = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
	ПодвалСтраницы2   = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
	ТабДок = Новый ТабличныйДокумент();
	
	НазваниеРегистраСтоимость = "СтоимостьОС";
	НазваниеРегистраСобытия   = "СобытияОС";
	НазваниеСуммыЗатрат		  = "СуммаЗатрат";	
	Организация = Неопределено;

	Если ПечатьПоДаннымУпрУчета тогда
		кВидуУчета   = "управленческому";
		cВидаУчета   = "управленческого";
		ВалютаПечати = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
		ВидУчета 	 = "Упр" ;
	Иначе
		кВидуУчета   = "бухгалтерскому";
		cВидаУчета   = "бухгалтерского";
		ВалютаПечати = глЗначениеПеременной("ВалютаРегламентированногоУчета").Наименование;
		НазваниеРегистраСтоимость = НазваниеРегистраСтоимость + "БухгалтерскийУчет";
		НазваниеРегистраСобытия   = НазваниеРегистраСобытия   + "Организаций";
		НазваниеСуммыЗатрат		  = НазваниеСуммыЗатрат +"БУ";
		ВидУчета 	 = "Бух";
		ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
		Организация    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Организация,Справочники.Организации.ПустаяСсылка());
	КонецЕсли;	
	
	СведенияОбОС = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОбОС(Ссылка,ДатаСведений,Организация,ВидУчета); 
	Если СведенияОбОС <> Неопределено тогда
		 Если Не ПечатьПоДаннымУпрУчета и НЕ ЗначениеЗаполнено(СведенияОбОС.ОсновноеСредство) Тогда
			Сообщить("На момент печати основное средство не принималось к учету в указанной организации."+Символы.ПС+
			"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
			Возврат Неопределено;
		 КонецЕсли;
    	Шапка.Параметры.Заполнить(СведенияОбОС);
		//Шапка.Параметры.ДатаДок        = Лев(Строка(ДатаСведений),10);         // Шевченков 20170127 №61598
		Шапка.Параметры.ДатаДок        = Лев(Строка(СведенияОбОС.Период),10);    // Шевченков 20170127 №61598
		Шапка.Параметры.НомерДок       = Шапка.Параметры.ИнвентарныйНомер;
		Шапка.Параметры.НаименованиеОС = ? (НЕ ЗначениеЗаполнено(СведенияОбОС.НаименованиеПолное),
										    СведенияОбОС.Наименование,СведенияОбОС.НаименованиеПолное);
	Иначе
		Сообщить("На момент печати основное средство не принималось к учету."+Символы.ПС+
		"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ (Организация = Неопределено) Тогда
		Шапка.Параметры.КодПоОКПО = Организация.КодПоОКПО;
	КонецЕсли;
	
	// получим даты  и документы изменения состояний ос
	СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ПринятоКУчету,ПечатьПоДаннымУпрУчета,Организация);
	ДокументПринятия = СтруктПараметров["ИмяДок"];
	ДатаПринятия     = СтруктПараметров["Дата"];
	
	СтруктПараметров   = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,ПечатьПоДаннымУпрУчета,Организация);
	ДатаВвода          = СтруктПараметров["Дата"];
	ДокументВвода      = СтруктПараметров["ИмяДок"];
	ДокументВводаНомер = СтруктПараметров["НомерДок"];
	
	СтруктПараметров    = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.СнятоСУчета,ПечатьПоДаннымУпрУчета,Организация);
	ДатаСписания        = СтруктПараметров["Дата"];
	ДокументСписания    = СтруктПараметров["ИмяДок"];
	РегистраторСписания = СтруктПараметров["Регистратор"];
	
	//	получим дату и документ последней модернизации
	Если ПечатьПоДаннымУпрУчета тогда
		ВыборкаЗаписей = РегистрыСведений.СобытияОС.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	Иначе
		ВыборкаЗаписей = РегистрыСведений.СобытияОСОрганизаций.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	КонецЕсли;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ВыборкаЗаписей.Событие.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация Тогда
			ДатаПоследнейМодернизации     = Лев(Строка(ВыборкаЗаписей.Период),10);
			ДокументПоследнейМодернизации = ВыборкаЗаписей.НазваниеДокумента;
		КонецЕсли;
	КонецЦикла;
	
	Шапка.Параметры.ДатаВвода    = ДатаПринятия;	
	Шапка.Параметры.ДатаСписания = ДатаСписания;
	Шапка.Параметры.кВидуУчета 	 = кВидуУчета;
	Шапка.Параметры.cВидаУчета 	 = cВидаУчета;
	
	Шапка.Параметры.КодПоОКОФ    = КодПоОКОФ;
	
	ТабДок.Вывести(Шапка);
	
	ШапкаРазделов1и2.Параметры.кВидуУчета = кВидуУчета;
	
	// Балансовая стоимость ОС на момент поступления
	ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость    = СведенияОбОС.ПервоначальнаяСтоимость;
	ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = СведенияОбОС.СрокПолезногоИспользования;
	ШапкаРазделов1и2.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов1и2);
	
	ШапкаРаздела3.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРаздела3);
	ТабДок.Вывести(СтрокиРаздела3);
	
	// Сведения о приемке, внутренних перемещениях и выбытии	
	ШапкаРаздела4.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРаздела4);
	
	СписокСобытийОС = Новый Массив();
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.ВнутреннееПеремещение);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.Списание);
	СписокСобытийОС.Добавить(Перечисления.ВидыСобытийОС.Передача);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСобытийОС",  СписокСобытийОС);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("Период",           ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Событие) КАК СобытиеПредставление,
	|	ВложенныйЗапрос.Событие КАК Событие,
	|	ВложенныйЗапрос.ВидСобытияОС КАК ВидСобытияОС,
	|	ВложенныйЗапрос.СобытиеОСРегистратор КАК Регистратор,
	|	ВложенныйЗапрос.НазваниеДокумента КАК НазваниеДокумента,
	|	ВложенныйЗапрос.НомерДокумента КАК НомерДокумента,
	|	ВложенныйЗапрос.СобытиеОСПериод КАК Период,
	|	ПРЕДСТАВЛЕНИЕ(МестонахождениеОС.МОЛ) КАК МОЛПредставление,
	|	ПРЕДСТАВЛЕНИЕ(МестонахождениеОС.Местонахождение) КАК МестонахождениеПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		СобытияОС.ОсновноеСредство КАК ОсновноеСредство,
	|		СобытияОС.Период КАК СобытиеОСПериод,
	|		СобытияОС.Регистратор КАК СобытиеОСРегистратор,
	|		СобытияОС.Событие КАК Событие,
	|		СобытияОС.Событие.ВидСобытияОС КАК ВидСобытияОС, 
	|		СобытияОС.НазваниеДокумента КАК НазваниеДокумента,
	|		СобытияОС.НомерДокумента КАК НомерДокумента,
	|		МАКСИМУМ(МестонахождениеОС.Период) КАК МестонахождениеОСПериод
	|	ИЗ
	|		РегистрСведений.СобытияОС" + ?(ПечатьПоДаннымУпрУчета, "", "Организаций") + " КАК СобытияОС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС" + ?(ПечатьПоДаннымУпрУчета, "", "БухгалтерскийУчет") + " КАК МестонахождениеОС
	|			ПО СобытияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|				И СобытияОС.Период >= МестонахождениеОС.Период
	|	ГДЕ
	|		СобытияОС.ОсновноеСредство = &ОсновноеСредство
	|		И СобытияОС.Период <= &Период
	|		И СобытияОС.Событие.ВидСобытияОС В(&СписокСобытийОС)
	|		" + ?(ПечатьПоДаннымУпрУчета, "", "И СобытияОС.Организация = &Организация") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СобытияОС.ОсновноеСредство,
	|		СобытияОС.Период,
	|		СобытияОС.Регистратор,
	|		СобытияОС.Событие,
	|		СобытияОС.Событие.ВидСобытияОС,
	|		СобытияОС.НазваниеДокумента,
	|		СобытияОС.НомерДокумента) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС" + ?(ПечатьПоДаннымУпрУчета, "", "БухгалтерскийУчет") + " КАК МестонахождениеОС
	|		ПО ВложенныйЗапрос.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|			И ВложенныйЗапрос.МестонахождениеОСПериод = МестонахождениеОС.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		СтрокаРаздела4.Параметры.ДатаНомерДокумента = ВыборкаЗаписей.НазваниеДокумента 
		                                            + " № " + ВыборкаЗаписей.НомерДокумента
		                                            + " от " + Формат(ВыборкаЗаписей.Период, "ДФ=dd.MM.yyyy");
		СтрокаРаздела4.Параметры.ВидОперации        = ВыборкаЗаписей.СобытиеПредставление;
		СтрокаРаздела4.Параметры.ФИОМОЛДвижения     = ВыборкаЗаписей.МОЛПредставление;
		СтрокаРаздела4.Параметры.Подразделение      = ВыборкаЗаписей.МестонахождениеПредставление;

		// Остаточная стоимость ОС на момент события
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		
		Если ВыборкаЗаписей.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание 
		 ИЛИ ВыборкаЗаписей.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача	Тогда
		 
			Запрос.УстановитьПараметр("МоментСобытия", Новый МоментВремени(ВыборкаЗаписей.Период, ВыборкаЗаписей.Регистратор));
			
			Запрос.Текст =  "
			|	ВЫБРАТЬ
			|	ЕСТЬNULL(СтоимостьОС.СтоимостьРасход, 0) - ЕСТЬNULL(СтоимостьОС.АмортизацияРасход, 0) КАК ОстаточнаяСтоимость
			|ИЗ
			|	РегистрНакопления." + НазваниеРегистраСтоимость + ".Обороты(&МоментСобытия, &МоментСобытия, , ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОС
			|";
			РезультатЗапроса = Запрос.Выполнить();
		
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = РезультатЗапроса.Выгрузить()[0].ОстаточнаяСтоимость;
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(ВыборкаЗаписей.Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатковОС") Тогда
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = СведенияОбОС.ПервоначальнаяСтоимость;
				
			Иначе
				
				Запрос.УстановитьПараметр("МоментСобытия", Новый Граница(Новый МоментВремени(ВыборкаЗаписей.Период, ВыборкаЗаписей.Регистратор)));
				Запрос.Текст =  "
				|	ВЫБРАТЬ
				|	ЕСТЬNULL(СтоимостьОС.СтоимостьОстаток, 0) - ЕСТЬNULL(СтоимостьОС.АмортизацияОстаток, 0) КАК ОстаточнаяСтоимость
				|ИЗ
				|	РегистрНакопления." + НазваниеРегистраСтоимость + ".Остатки(&МоментСобытия, ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОС
				|";
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = РезультатЗапроса.Выгрузить()[0].ОстаточнаяСтоимость;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДок.Вывести(СтрокаРаздела4);
		
	КонецЦикла;	
	
	ТабДок.Вывести(ПодвалСтраницы1);
	
	// модернизация ос и ремонт
	ТаблицаМодернизаций = Новый ТаблицаЗначений;
	ТаблицаМодернизаций.Колонки.Добавить("ВидОперации");
	ТаблицаМодернизаций.Колонки.Добавить("Название");
	ТаблицаМодернизаций.Колонки.Добавить("Дата");
	ТаблицаМодернизаций.Колонки.Добавить("Номер");
	ТаблицаМодернизаций.Колонки.Добавить("Сумма");
	
	ТаблицаРемонтов = Новый ТаблицаЗначений;
	ТаблицаРемонтов.Колонки.Добавить("ВидОперации");
	ТаблицаРемонтов.Колонки.Добавить("Название");
	ТаблицаРемонтов.Колонки.Добавить("Дата");
	ТаблицаРемонтов.Колонки.Добавить("Номер");
	ТаблицаРемонтов.Колонки.Добавить("Сумма");
	
	ШапкаРазделов5и6.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов5и6);
	
	СписокМодернизаций = Новый Массив;
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
	
	СписокРемонтов = Новый Массив;
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);

	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ОсновноеСредство",    Ссылка);
	Запрос.УстановитьПараметр("УсловиеМодернизаций", СписокМодернизаций);
	Запрос.УстановитьПараметр("УсловиеРемонтов",	 СписокРемонтов);
	Запрос.УстановитьПараметр("ВидОперацииОС",       Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС В (&УсловиеМодернизаций) 
	|		  ТОГДА ОперацииОС."+НазваниеСуммыЗатрат+" ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратМодернизаций,
	|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС В (&УсловиеРемонтов) 
	|		  ТОГДА ОперацииОС."+НазваниеСуммыЗатрат+" ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратРемонтов,
	|	ОперацииОС.Регистратор КАК Регистратор,
	|	ОперацииОС.Период КАК Период,
	|	ОперацииОС.Событие КАК Операция,
	|	ОперацииОС.НомерДокумента КАК НомерДокумента,
	|	ОперацииОС.НазваниеДокумента КАК НазваниеДокумента
	|ИЗ
	|	РегистрСведений."+НазваниеРегистраСобытия+" КАК ОперацииОС
	|
	|ГДЕ
	|	ОперацииОС.Событие.ВидСобытияОС <> &ВидОперацииОС И
	|	ОперацииОС.ОсновноеСредство = &ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииОС.Период,
	|	ОперацииОС.Регистратор,
	|	ОперацииОС.Событие,
	|	ОперацииОС.НомерДокумента,
	|	ОперацииОС.НазваниеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	ВыборкаРегистраторов = Результат.Выбрать(СпособВыборки);
	
	// все ремонты, модернизации и т.д. произведенные документом модернизация размещаем в 5 разделе
	// до тех пор, пока не доказано обратное 
	// все действия проведенные документом модернизация
	// могут влиять на первоначальную стоимость и таким образом должны отражаться в 5 разделе
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		СуммаМодернизаций = ?(ВыборкаРегистраторов.СуммаЗатратМодернизаций = NULL, 0, ВыборкаРегистраторов.СуммаЗатратМодернизаций);
		СуммаРемонтов = ?(ВыборкаРегистраторов.СуммаЗатратРемонтов = NULL, 0, ВыборкаРегистраторов.СуммаЗатратРемонтов);
		
		Если СуммаМодернизаций+СуммаРемонтов<> 0 Тогда		
			СтрокаТаблицыМодернизаций = ТаблицаМодернизаций.Добавить();
			СтрокаТаблицыМодернизаций.ВидОперации = ВыборкаРегистраторов.Операция;
			СтрокаТаблицыМодернизаций.Название    = ВыборкаРегистраторов.НазваниеДокумента;
			СтрокаТаблицыМодернизаций.Номер       = ВыборкаРегистраторов.НомерДокумента;
			СтрокаТаблицыМодернизаций.Дата        = ВыборкаРегистраторов.Период;
			СтрокаТаблицыМодернизаций.Сумма       = СуммаМодернизаций + СуммаРемонтов;
		КонецЕсли;
		//Если СуммаРемонтов <> 0 Тогда		
		//	СтрокаТаблицыРемонтов = ТаблицаРемонтов.Добавить();
		//	СтрокаТаблицыРемонтов.ВидОперации = ВыборкаРегистраторов.Операция;
		//	СтрокаТаблицыРемонтов.Название    = ВыборкаРегистраторов.НазваниеДокумента;
		//	СтрокаТаблицыРемонтов.Номер       = ВыборкаРегистраторов.НомерДокумента;
		//	СтрокаТаблицыРемонтов.Дата        = ВыборкаРегистраторов.Период;
		//	СтрокаТаблицыРемонтов.Сумма       = СуммаРемонтов;
		//КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = Макс(ТаблицаМодернизаций.Количество(),ТаблицаРемонтов.Количество()); 
	Для СчетСтрок = 1 По КоличествоСтрок Цикл
		Если СчетСтрок <= ТаблицаМодернизаций.Количество() Тогда
			СтрокаТаблицы = ТаблицаМодернизаций.Получить(СчетСтрок-1);
			СтрокаРазделов5и6.Параметры.Модернизация          = СтрокаТаблицы.ВидОперации;
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = СтрокаТаблицы.Название;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = СтрокаТаблицы.Дата;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = СтрокаТаблицы.Номер;
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = СтрокаТаблицы.Сумма; 
		Иначе
			СтрокаРазделов5и6.Параметры.Модернизация          = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = ""; 
		КонецЕсли;
		
		//Если СчетСтрок <= ТаблицаРемонтов.Количество() Тогда
		//	СтрокаТаблицы = ТаблицаРемонтов.Получить(СчетСтрок-1);
		//	СтрокаРазделов5и6.Параметры.Ремонт          = СтрокаТаблицы.ВидОперации;
		//	СтрокаРазделов5и6.Параметры.ДокРемонта      = СтрокаТаблицы.Название;
		//	СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = СтрокаТаблицы.Дата;
		//	СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = СтрокаТаблицы.Номер;
		//	СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = СтрокаТаблицы.Сумма;
		//Иначе
			СтрокаРазделов5и6.Параметры.Ремонт          = "";
			СтрокаРазделов5и6.Параметры.ДокРемонта		= "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = ""; 
		//КонецЕсли;
		
		ТабДок.Вывести(СтрокаРазделов5и6);		
	КонецЦикла;
	
	// <- Шевченков 20170127 №61598
	ШапкаРаздела7_1.Параметры.Наименование = "Наименование" + ?(ПустаяСтрока(СтарыйКодПоОКОФ),"", Символы.ПС + СтарыйКодПоОКОФ);
	ПодвалСтраницы2.Параметры.ДолжностьОтветственного = "старший бухгалтер";
	ПодвалСтраницы2.Параметры.ФИООтветственного       = "Рыжкова И.А.";
	// ->
	
	ТабДок.Вывести(ШапкаРаздела7_1);
	ТабДок.Вывести(ШапкаРаздела7_2);
	ТабДок.Вывести(ПодвалСтраницы2);
	
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ОС6_2003";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьОС6_2003() 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать справочника. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
// Параметры:
//  НазваниеМакета - строка, название макета.
// Возвращаемое значение:
//  Нет.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ФормаЭлемента = Неопределено) Экспорт

	ДатаСведений = ?(мДатаСведений = Неопределено, КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()), мДатаСведений);
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС6_2003упр" Тогда
		ТабДокумент = ПечатьОС6_2003(ДатаСведений);
	ИначеЕсли ИмяМакета = "ОС6_2003бух" Тогда
		ТабДокумент = ПечатьОС6_2003(ДатаСведений, Ложь);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Инвентарная карточка ОС (Форма ОС-6)", Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС6_2003упр,ОС6_2003бух","Форма ОС-6 (упр. учет)","Форма ОС-6 (бух. учет)");

КонецФункции // ПолучитьТаблицуПечатныхФорм()

#КонецЕсли
Процедура ПриЗаписи(Отказ)
	//начало изменений Ожиганов 14.07.2015 создание базы МСФО
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;  
	//конец изменений 	
	
	// is ЯннуровВФ нач 20140623 0И-001233
	Если Не ДополнительныеСвойства.Свойство("НеПереноситьРыночнуюСтоимостьМСФО") Тогда 
		лЗапрос = Новый Запрос;
		лЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.ис_Продлен КАК ис_Продлен,
		|	ДоговорыКонтрагентов.ис_КурсНаДатуПринятияКУчетуПоПродлению КАК ис_КурсНаДатуПринятияКУчетуПоПродлению,
		|	ДоговорыКонтрагентов.ДС_КурсНаДатуПринятияКУчету КАК ДС_КурсНаДатуПринятияКУчету,
		|	ДоговорыКонтрагентовДС_СпецификацияДоговора.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДС_СпецификацияДоговора КАК ДоговорыКонтрагентовДС_СпецификацияДоговора
		|		ПО ДоговорыКонтрагентов.Ссылка = ДоговорыКонтрагентовДС_СпецификацияДоговора.Ссылка
		|			И ДоговорыКонтрагентов.ДС_ОбъектДоговора = ДоговорыКонтрагентовДС_СпецификацияДоговора.Объект
		|ГДЕ
		|	ДоговорыКонтрагентов.ДС_ОбъектДоговора = &ОсновноеСредство
		|	И ЕСТЬNULL(ДоговорыКонтрагентовДС_СпецификацияДоговора.СуммаВал, 0) <> &РыночнаяСтоимость";
		лЗапрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		лЗапрос.УстановитьПараметр("РыночнаяСтоимость", ДС_РыночнаяСтоимость);
		лВыборка = лЗапрос.Выполнить().Выбрать();
		Пока лВыборка.Следующий() Цикл 
			Если лВыборка.ис_Продлен Тогда 
				лКурс = лВыборка.ис_КурсНаДатуПринятияКУчетуПоПродлению;
			Иначе
				лКурс = лВыборка.ДС_КурсНаДатуПринятияКУчету;
			КонецЕсли;
			лДоговор = лВыборка.Договор.ПолучитьОбъект();
			Если Не ЗначениеЗаполнено(лВыборка.НомерСтроки) Тогда 
				лСтрокаСпецификации = лДоговор.ДС_СпецификацияДоговора.Добавить();
				лСтрокаСпецификации.Объект = Ссылка;
			Иначе
				лСтрокаСпецификации = лДоговор.ДС_СпецификацияДоговора[лВыборка.НомерСтроки-1];
			КонецЕсли;
			лСтрокаСпецификации.СуммаВал = ДС_РыночнаяСтоимость;
			лСтрокаСпецификации.Сумма = ДС_РыночнаяСтоимость * лКурс;
			лДоговор.ДополнительныеСвойства.Вставить("НеПереноситьРыночнуюСтоимостьМСФО", Истина);
			лДоговор.Записать();
		КонецЦикла;
	КонецЕсли;
	// is ЯннуровВФ кон 20140623
	
КонецПроцедуры



