////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Только для внутреннего использования
Функция СоглашениеУникально() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СоглашенияЭДСертификаты.Ссылка КАК СоглашениеЭД,
		|	СоглашенияЭДСертификаты.Сертификат
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|ГДЕ
		|	СоглашенияЭДСертификаты.Ссылка <> &Ссылка
		|	И (СоглашенияЭДСертификаты.Ссылка.Организация = &Организация
		|				И СоглашенияЭДСертификаты.Ссылка.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|			ИЛИ СоглашенияЭДСертификаты.Сертификат.Отпечаток В (&МассивОтпечатков))
		|	И СоглашенияЭДСертификаты.Ссылка.СтатусСоглашения = &СтатусСоглашения";

	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ЭтотОбъект.ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("Организация",              ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Ссылка",                   ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СтатусСоглашения",         Перечисления.СтатусыСоглашенийЭД.Действует);
	Запрос.УстановитьПараметр("МассивОтпечатков", ЭтотОбъект.СертификатыПодписейОрганизации.Выгрузить(, "Сертификат"));
	Результат = Запрос.Выполнить();
	ТекущееСоглашениеУникально = Результат.Пустой();

	Если НЕ ТекущееСоглашениеУникально Тогда
		ТекстОшибки = НСтр("ru = 'В информационной базе уже существует действующее соглашение (%4) с реквизитами:
		|Организация - %1;
		|Идентификатор организации - %2;
		|Сертификат абонента - %3.
		|'");
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ТекстОшибки,
														ЭтотОбъект.Организация,
														ЭтотОбъект.ИдентификаторОрганизации,
														Выборка.Сертификат,
														Выборка.СоглашениеЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекущееСоглашениеУникально;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует
		ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоИнтеркампани Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация-отправитель"),
				ЭтотОбъект,
				"Организация",
				,
				Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Идентификатор отправителя"),
				ЭтотОбъект,
				"ИдентификаторОрганизации",
				,
				Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация-получатель"),
				ЭтотОбъект,
				"Контрагент",
				,
				Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Идентификатор получателя"),
				ЭтотОбъект,
				"ИдентификаторКонтрагента",
				,
				Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация"),
			ЭтотОбъект,
			"Организация",
			,
			Отказ);
	КонецЕсли;

	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		Если СертификатыПодписейОрганизации.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Список", "Заполнение", , , "Сертификаты организации"),
				ЭтотОбъект,
				"СертификатыПодписейОрганизации",
				,
				Отказ);
		КонецЕсли;
		ДлинаИдентификатора = СтрДлина(ИдентификаторОрганизации);
		Если ЗначениеЗаполнено(ИдентификаторОрганизации) И ДлинаИдентификатора <> 46 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "КОРРЕКТНОСТЬ", "Идентификатор организации", , , "Длина поля не равна 46."),
				ЭтотОбъект,
				"ИдентификаторОрганизации",
				,
				Отказ);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Банк"),
				ЭтотОбъект,
				"Контрагент",
				,
				Отказ);
		КонецЕсли;
		
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			Если НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Идентификатор организации"),
						ЭтотОбъект,
						"ИдентификаторОрганизации",
						,
						Отказ);
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(АдресСервера) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Адрес сервера банка"),
					ЭтотОбъект,
					"АдресСервера",
					,
					Отказ);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РесурсИсходящихДокументов) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Ресурс для отправки"),
					ЭтотОбъект,
					"РесурсИсходящихДокументов",
					,
					Отказ);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(РесурсВходящихДокументов) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Ресурс для получения"),
					ЭтотОбъект,
					"РесурсВходящихДокументов",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если СертификатыПодписейОрганизации.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Список", "Заполнение", , , "Подписи платежных поручений"),
				ЭтотОбъект,
				"СертификатыПодписейОрганизации",
				,
				Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Идентификатор организации"),
			ЭтотОбъект,
			"ИдентификаторОрганизации",
			,
			Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Контрагент"),
			ЭтотОбъект,
			"Контрагент",
			,
			Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Идентификатор контрагента"),
			ЭтотОбъект,
			"ИдентификаторКонтрагента",
			,
			Отказ);
	КонецЕсли;
	
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		Если НЕ ЗначениеЗаполнено(АдресСервера) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Адрес сервера"),
				ЭтотОбъект,
				"АдресСервера",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
