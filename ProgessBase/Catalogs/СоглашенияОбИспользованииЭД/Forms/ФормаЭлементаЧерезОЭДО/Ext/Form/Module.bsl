////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция СоглашениеУникально()
	
	СпрОбъект = РеквизитФормыВЗначение("Объект");
	Возврат СпрОбъект.СоглашениеУникально();
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПриглашенияУчастникам(МассивЗаписей = Неопределено)
	
	Маркер = Маркер();
	
	Если ЗначениеЗаполнено(Маркер) Тогда
		ОчиститьСообщения();
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений участникам обмена ЭД'");
		
		ОтправленоПриглашений = 0;
		ОтправитьПриглашенияНаСервере(МассивЗаписей, ОтправленоПриглашений, Маркер);
		ЭтаФорма.Элементы.УчастникиОбменаЭД.Обновить();
		
		ШаблонСообщения = НСтр("ru = 'Отправлено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОтправленоПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоглашениеДействует()
	
	ФлагСоглашениеДействует = (Объект.Ссылка.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.Действует);
	Если НЕ ФлагСоглашениеДействует Тогда 
		ТекстСообщения = НСтр("ru='Операция возможна только для действующего соглашения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ФлагСоглашениеДействует;
	
КонецФункции

&НаКлиенте
Функция ДанныеФормыСохранены()
	
	ОчиститьСообщения();
	ДанныеСохранены = Истина;
	Если ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Изменены настройки соглашения.
		|Записать соглашение?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да И ОбъектЗаполнен() Тогда
			ЭтаФорма.Записать();
		Иначе
			ТекстСообщения = Нстр("ru='Действие не выполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ДанныеСохранены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеСохранены;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКомандыПолученияКонтактов(АдресРесурса)
	
	Маркер = Маркер();
	
	Если ЗначениеЗаполнено(Маркер) Тогда
		ТекстЗаголовка = НСтр("ru = 'Обновление статусов участников обмена ЭД'");
		
		ДобавленоНовыхЗаписей = 0;
		ПолучитьПриглашенияНаСервере(АдресРесурса, ДобавленоНовыхЗаписей, Маркер);
		
		ШаблонСообщения = НСтр("ru = 'Обновлено записей: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДобавленоНовыхЗаписей);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
	КонецЕсли;
	
	ЭтаФорма.Элементы.УчастникиОбменаЭД.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУчастникаОбменаЭД(СоглашениеОбИспользованииЭД, Участник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СоглашениеОбИспользованииЭД.Установить(СоглашениеОбИспользованииЭД);
	НаборЗаписей.Отбор.Участник.Установить(Участник);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СоглашениеОбИспользованииЭД = СоглашениеОбИспользованииЭД;
		НоваяЗаписьНабора.Участник                    = Участник;
		НоваяЗаписьНабора.Идентификатор               = "";
		НоваяЗаписьНабора.ФорматФайловОбменаЭД        = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат;
		НоваяЗаписьНабора.Статус                      = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
		НоваяЗаписьНабора.ДатаИзмененияСтатуса        = ТекущаяДатаСеанса();
		НоваяЗаписьНабора.АдресЭП                     = ЭлектронныеДокументыПереопределяемый.АдресЭлектроннойПочтыКонтрагента(
			Участник);
		НоваяЗаписьНабора.ВерсияРегламентаЭДО            = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФайлПриглашенияКОбменуЭД(ТЗ)
	
	ИмяФайла = "";
	ДопПараметры = Новый Структура;
	ИмяФайла = ЭлектронныеДокументыВнутренний.ИсходящийЗапросПриглашенияОператораЭДО(ТЗ, ДопПараметры);
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ОтправитьФайлПриглашение(ТЗ, Маркер)
	
	ИмяФайла = ФайлПриглашенияКОбменуЭД(ТЗ);
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат 0;
	КонецЕсли;

	ПутьДляПриглашений = ЭлектронныеДокументыСлужебный.РабочийКаталог("Invite");
	ИмяФайлаПриглашения = ПутьДляПриглашений + "SendContacts.xml";
	КопироватьФайл(ИмяФайла, ИмяФайлаПриглашения);
	РезультатОтправки = ЭлектронныеДокументыВнутренний.ОтправитьЧерезОператораЭДО(Маркер, ПутьДляПриглашений, "SendContacts");
	Возврат РезультатОтправки;
	
КонецФункции

&НаСервере
Процедура ОтправитьПриглашенияНаСервере(МассивЗаписей, ОтправленоПриглашений, Маркер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(МассивЗаписей) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник
		|ИЗ
		|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
		|ГДЕ
		|	УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеОбИспользованииЭД
		|	И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить)";
		Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", Объект.Ссылка);
		МассивУчастников = Запрос.Выполнить().Выгрузить();
	Иначе
		МассивУчастников = Новый Массив;
		Для Каждого ТекущаяЗапись Из МассивЗаписей Цикл
			МассивУчастников.Добавить(ТекущаяЗапись.Участник);
		КонецЦикла;
	КонецЕсли;
	
	// Готовим таблицу с реквизитами контрагентов
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Участник");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("НаименованиеДляСообщенияПользователю");
	ТЗ.Колонки.Добавить("ИНН");
	ТЗ.Колонки.Добавить("КПП");
	ТЗ.Колонки.Добавить("АдресЭП");
	ТЗ.Колонки.Добавить("ВнешнийКод");
	
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТЗ, МассивУчастников, Объект.Ссылка);
	Для Каждого ТекущаяСтрока Из ТЗ Цикл
		ФлагОтправки = Истина;
		КлючевойПараметр = "";
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.АдресЭП) Тогда
			ФлагОтправки = Ложь;
			КлючевойПараметр = "Адрес электронной почты";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИНН) Тогда
			ФлагОтправки = Ложь;
			КлючевойПараметр = "ИНН";
		КонецЕсли;
		Если НЕ ФлагОтправки Тогда
			ШаблонСообщения = НСтр("ru = 'Необходимо заполнить ""%1"" участника ""%2"". Отправка приглашения не выполнена.'");
			НаименованиеУчастника = СокрЛП(?(ЗначениеЗаполнено(ТекущаяСтрока.НаименованиеДляСообщенияПользователю),
				ТекущаяСтрока.НаименованиеДляСообщенияПользователю, ТекущаяСтрока.Наименование));
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КлючевойПараметр, НаименованиеУчастника);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТЗ.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если ТЗ.Количество() > 0 И ОтправитьФайлПриглашение(ТЗ, Маркер) <> 0 Тогда
		НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СоглашениеОбИспользованииЭД.Установить(Объект.Ссылка);
		Для Каждого ТекущаяСтрока Из ТЗ Цикл
			НаборЗаписей.Отбор.Участник.Установить(ТекущаяСтрока.Участник);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ТекущаяЗаписьНабора = НаборЗаписей[0];
				ТекущаяЗаписьНабора.Статус               = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия;
				ТекущаяЗаписьНабора.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			КонецЕсли;
			
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	// Определим сколько отправлено приглашений.
	ОтправленоПриглашений = ТЗ.Количество();
	
КонецПроцедуры

&НаСервере
Функция СтатусУчастникаПоСтроке(Состояние)
	
	Если Состояние = "Присоединен" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
	ИначеЕсли Состояние = "Входящий запрос" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ЖдетСогласия;
	ИначеЕсли Состояние = "Отсоединен" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен;
	ИначеЕсли Состояние = "Sent" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия;
	ИначеЕсли Найти(Состояние, "Ошибка") > 0 Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюОбУчастниках(ТЗ)
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СоглашениеОбИспользованииЭД.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	ЗаписатьНабор = Ложь;
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если ЗначениеЗаполнено(Запись.Идентификатор) Тогда
			Строка = ТЗ.Найти(Запись.Идентификатор, "Идентификатор");
		Иначе
			СтруктураДанных = ЭлектронныеДокументыСлужебный.СтруктураЗначенийРеквизитов(Запись.Участник, "ИНН");
			ИНН = "";
			СтруктураДанных.Свойство("ИНН", ИНН);
			Строка = ТЗ.Найти(ИНН, "ИНН");
		КонецЕсли;
		
		Если Строка <> Неопределено Тогда
			Если Запись.Идентификатор <> Строка.Идентификатор
				ИЛИ Запись.Статус <> СтатусУчастникаПоСтроке(Строка.Состояние) Тогда
				
				Запись.Идентификатор        = Строка.Идентификатор;
				Запись.Статус               = СтатусУчастникаПоСтроке(Строка.Состояние);
				Запись.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
				ЗаписатьНабор               = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписатьНабор Тогда
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаписьВРегистре(СтруктураПараметров)
	
	ТЗ = ЭлектронныеДокументыВнутренний.ИнициализироватьТаблицуДанныхУчастниковОбмена();
	Строка = ТЗ.Добавить();
	Строка.Идентификатор = СтруктураПараметров.Идентификатор;
	Строка.Состояние     = ?(СтруктураПараметров.Принять, "Присоединен", "Отсоединен");
	ОбновитьИнформациюОбУчастниках(ТЗ);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПриглашенияНаСервере(АдресРесурса, ДобавленоНовыхЗаписей, Маркер)
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		
		ТЗ = ЭлектронныеДокументыВнутренний.ТаблицаДанныхУчастниковОбмена(Объект.Ссылка, АдресРесурса, Маркер);
			
		Если ТЗ.Количество() > 0 Тогда
			
			СохранитьПриглашения(ТЗ, ДобавленоНовыхЗаписей);
			ОбновитьИнформациюОбУчастниках(ТЗ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПриглашения(ТЗ, ДобавленоНовыхЗаписей)
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|ГДЕ
	|	Приглашения.Состояние <> ""Отсоединен""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование
	|ИЗ
	|	Приглашения КАК Приглашения
	|ГДЕ
	|	НЕ Приглашения.Идентификатор В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор КАК Идентификатор
	|				ИЗ
	|					РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|				ГДЕ
	|					УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеОбИспользованииЭД)";
	Запрос.УстановитьПараметр("Приглашения", ТЗ);
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		НовыеПриглашения = Результат.Выбрать();
		
		НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СоглашениеОбИспользованииЭД.Установить(Объект.Ссылка);
		
		НайденыВсеКонтрагенты = Истина;
		Пока НовыеПриглашения.Следующий() Цикл
			Контрагент = Неопределено;
			Если Найти(НовыеПриглашения.Состояние, "Ошибка") = 0 Тогда
				Контрагент = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", НовыеПриглашения.ИНН,
					НовыеПриглашения.КПП, Объект.Организация);
			КонецЕсли;
			
			Если Контрагент = Неопределено Тогда
				НайденыВсеКонтрагенты = Ложь;
				Текст = НСтр("ru = 'Ошибка обработки приглашения для участника:
				|Наименование: %1
				|ИНН: %2
				|КПП: %3
				|Статус: %4'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.Наименование,
					НовыеПриглашения.ИНН, НовыеПриглашения.КПП, НовыеПриглашения.Состояние);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей.Отбор.Участник.Установить(Контрагент);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ТекущаяЗаписьНабора = НаборЗаписей[0];
			Иначе
				ТекущаяЗаписьНабора = НаборЗаписей.Добавить();
				ТекущаяЗаписьНабора.Участник = Контрагент;
				ТекущаяЗаписьНабора.СоглашениеОбИспользованииЭД = Объект.Ссылка;
				ТекущаяЗаписьНабора.ВерсияРегламентаЭДО         = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			
			ТекущаяЗаписьНабора.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			ТекущаяЗаписьНабора.Идентификатор        = НовыеПриглашения.Идентификатор;
			ТекущаяЗаписьНабора.Статус               = Перечисления.СтатусыУчастниковОбменаЭД.ЖдетСогласия;
			ТекущаяЗаписьНабора.ФорматФайловОбменаЭД = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат;
			
			ДобавленоНовыхЗаписей = ДобавленоНовыхЗаписей + 1;
			
		КонецЦикла;
		
		Если ДобавленоНовыхЗаписей > 0 Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		Если НайденыВсеКонтрагенты Тогда
			ЗафиксироватьДатуОбработкиПриглашений();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьДатуОбработкиПриглашений()
	
	Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
	Запись.СоглашениеОбИспользованииЭД = Объект.Ссылка;
	Запись.Прочитать();
	Запись.ДатаПоследнегоПолученияПриглашений = ТекущаяДатаСеанса();
	Запись.Записать();
	
КонецПроцедуры

&НаСервере
Функция УдалитьУчастниковОбмена(МассивЗаписей)
	
	ВозвращаемоеЗначение = Истина;
	Для Каждого Запись Из МассивЗаписей Цикл
		
		ЗаписьРегистра = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Участник                    = Запись.Участник;
		ЗаписьРегистра.СоглашениеОбИспользованииЭД = Запись.СоглашениеОбИспользованииЭД;
		ЗаписьРегистра.Прочитать();
		
		Если ЗаписьРегистра.Статус = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить
			ИЛИ ЗаписьРегистра.Статус = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
			ЗаписьРегистра.Удалить();
		Иначе
			ВозвращаемоеЗначение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ОбъектЗаполнен()
	
	Возврат РеквизитФормыВЗначение("Объект").ПроверитьЗаполнение();
	
КонецФункции

&НаКлиенте
Функция СоглашениеЗаписано()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Выполнить действие можно только в записанном соглашении.
		|Записать соглашение?'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да И ОбъектЗаполнен() Тогда
		ЭтаФорма.Записать();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru='Соглашение с контрагентами об использовании электронных документов (через оператора ЭДО)'");
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ТекстЗаголовка + НСтр("ru=' (создание)'");
	Иначе
		ЭтаФорма.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(Идентификатор, ПриглашениеПринято, Маркер)
	
	Возврат ЭлектронныеДокументыВнутренний.ПринятьОтклонитьКонтактЧерезОператораЭДО(Идентификатор, ПриглашениеПринято, Маркер);
	
КонецФункции

&НаКлиенте
Функция Маркер()
	
	Маркер = Неопределено;
	Массив = Новый Массив;
	Массив.Добавить(Объект.Ссылка);
	Соответствие = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(Массив);
	СтСертификата = Соответствие.Получить(Объект.Ссылка);
	
	Если ТипЗнч(СтСертификата) = Тип("Структура") Тогда
		СтСертификата.Свойство("МаркерРасшифрованный", Маркер);
	КонецЕсли;
	
	Возврат Маркер;
	
КонецФункции

&НаСервере
Процедура ДобавитьСертификатПодписиВСписок(СертификатЭЦП)
	
	Строка = Объект.СертификатыПодписейОрганизации.Добавить();
	Строка.Сертификат = СертификатЭЦП;
	Модифицированность = Истина;
	ПометитьНеДействующиеСертификатыВСписке();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьЗаписиИзмененийНаСервере(Отказ)
	
	Если Объект.Организация <> ОрганизацияВБД Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УчастникиОбменовЭД.Участник
			|ИЗ
			|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭД
			|ГДЕ
			|	УчастникиОбменовЭД.СоглашениеОбИспользованииЭД = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	СоглашенияЭДСертификаты.Сертификат
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
			|ГДЕ
			|	НЕ СоглашенияЭДСертификаты.Ссылка.ПометкаУдаления
			|	И СоглашенияЭДСертификаты.Ссылка.СтатусСоглашения = &СтатусСоглашения
			|	И СоглашенияЭДСертификаты.Ссылка <> &Ссылка
			|	И СоглашенияЭДСертификаты.Сертификат В(&СертификатыЭП)
			|	И СоглашенияЭДСертификаты.Ссылка.СпособОбменаЭД = &СпособОбменаОЭДО";

		Запрос.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийЭД.Действует);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("СертификатыЭП", Объект.СертификатыПодписейОрганизации.Выгрузить(, "Сертификат"));
		Запрос.УстановитьПараметр("СпособОбменаОЭДО", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);

		МассивРезультатов = Запрос.ВыполнитьПакет();
		Для Каждого Результат Из МассивРезультатов Цикл
			Если НЕ Результат.Пустой() Тогда
				Индекс = МассивРезультатов.Найти(Результат);
				Если Индекс = 0 Тогда
					ТекстСообщения = НСтр("ru='По данному соглашению есть записи в регистрах сведений.
						|Запись изменений невозможна.'");
				Иначе
					ТекстСообщения = НСтр("ru='В соглашении есть сертификаты подписи, зарегистрированные на другую организацию.
						|Запись изменений невозможна.'");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
																  Объект.Организация,
																  "Организация",
																  "Объект.Организация",
																  Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьЗаписиИзменений(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВозможностьЗаписиИзмененийНаСервере(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокОтпечатковИсключения()
	
	МассивОтпечатковИсключения = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|		ПО СертификатыЭЦП.Ссылка = СоглашенияЭДСертификаты.Сертификат
		|ГДЕ
		|	НЕ СоглашенияЭДСертификаты.Ссылка.ПометкаУдаления
		|	И СоглашенияЭДСертификаты.Ссылка.СтатусСоглашения = &СтатусСоглашения
		|	И СоглашенияЭДСертификаты.Ссылка.СпособОбменаЭД = &СпособОбменаОЭДО
		|	И СоглашенияЭДСертификаты.Ссылка <> &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|ГДЕ
		|	(СертификатыЭЦП.ПометкаУдаления
		|			ИЛИ СертификатыЭЦП.Отозван)";
		
	Запрос.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийЭД.Действует);
	Запрос.УстановитьПараметр("СпособОбменаОЭДО", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		МассивОтпечатковИсключения = Результат.ВыгрузитьКолонку("Отпечаток");
	КонецЕсли;
	ТЗ = Объект.СертификатыПодписейОрганизации.Выгрузить(, "Сертификат");
	МассивСертификатов = ТЗ.ВыгрузитьКолонку("Сертификат");
	Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСертификатов, "Отпечаток");
	Для Каждого Элемент Из Соответствие Цикл
		МассивОтпечатковИсключения.Добавить(Элемент.Значение.Отпечаток);
	КонецЦикла;
	
	Возврат МассивОтпечатковИсключения;
	
КонецФункции

&НаСервере
Процедура ПометитьНеДействующиеСертификатыВСписке()
	
	Для Каждого Строка Из Объект.СертификатыПодписейОрганизации Цикл
		Строка.Действует = НЕ (Строка.Сертификат.ПометкаУдаления ИЛИ Строка.Сертификат.Отозван);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСертификатаЭП()
	
	Если Объект.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru='Для выполнения действия необходимо снять пометку удаления.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВключенаИПП = Ложь;
	ЭлектронныеДокументыКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(ВключенаИПП);
	
	Если ВключенаИПП Тогда
		// Обработчик библиотеки ИПП
		
		Если ПустаяСтрока(Объект.ИдентификаторОрганизации)
			И Объект.СертификатыПодписейОрганизации.Количество() > 0 Тогда
			// Эта операция запрещена. Так как в соглашении уже имеется хотя бы один
			// сертификат, но еще не получен идентификатор
			ТекстПредупреждения = НСтр("ru = 'Перед добавлением новых сертификатов в соглашение
				|необходимо получить идентификатор участника обмена ЭДО'");
			Предупреждение(ТекстПредупреждения, 30);
			Возврат;
			
			// Иначе
			// Остались случаи, когда добавляется первый сертификат
			// и когда добавляемый сертификат нужно зарегистрировать в 1С-Такском
			// оба этих случая отрабатываются в обработчике события формы ОбработкаВыбора 
			
		КонецЕсли;
	КонецЕсли;
	// Конец обработчика библиотеки ИПП
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокОтпечатковИсключения", СписокОтпечатковИсключения());
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.СертификатыЭЦП.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// Механизм ИПП

&НаКлиенте
Процедура НадписьИдентификаторУчастникаОбменаЭДНажатие(Элемент)
	
	// Регистрация выполняется по первому сертификату
	
	// Если соглашение содержит более одного сертификата, то считается,
	// что все сертификаты были зарегистрированы у оператора ЭДО ранее
	
	Если Объект.СертификатыПодписейОрганизации.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru = 'Для получения уникального идентификатора участника ЭДО
								  |необходимо добавить сертификат в список ""Сертификаты организации"".
								  |Открыть форму выбора сертификатов?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Элементы.ГруппаСписки.ТекущаяСтраница = Элементы.ЗарегистрированныеСертификаты;
			ОткрытьФормуВыбораСертификатаЭП();
		КонецЕсли;
	Иначе
		ПервыйСертификат = Объект.СертификатыПодписейОрганизации[0].Сертификат;
		ЗарегистрироватьСертификат(ПервыйСертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	// Если соглашение содержит более одного сертификата, то считается,
	// что все сертификаты были зарегистрированы у оператора ЭДО ранее
	// Обращение в личный кабинет выполняется по текущему или по первому сертификату
	
	Если Объект.СертификатыПодписейОрганизации.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для входа в личный кабинет должен быть зарегистрирован хотя бы один сертификат'");
		Предупреждение(ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Выполнить действие можно только в записанном соглашении.
			|Записать соглашение?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да И ОбъектЗаполнен() Тогда
			ЭтаФорма.Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Объект.Ссылка);
	Соответствие = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(Массив);
	СертификатПодписи = Неопределено;
	ПарольПользователя= Неопределено;
	Если Соответствие.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет доступных сертификатов, среди зарегистрированных по данному соглашению.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
														  ,
														  "СертификатыПодписейОрганизации",
														  "Объект.СертификатыПодписейОрганизации",
														  );
	Иначе
		Для Каждого ЭлементСтруктуры Из Соответствие Цикл
			СтруктураСертификата = ЭлементСтруктуры.Значение;
			Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
				СтруктураСертификата.Свойство("СертификатПодписи", СертификатПодписи);
				СтруктураСертификата.Свойство("ПарольПользователя", ПарольПользователя);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(СертификатПодписи,
																						  Объект.Организация,
																						  "taxcomPrivat",
																						  Объект.ИдентификаторОрганизации,
																						  ПарольПользователя,
																						  ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЛичногоКабинета()
	
	Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Доступность = НЕ ПустаяСтрока(Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиИдентификатора()
	
	Объект.ИдентификаторОрганизации = "";
	Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = НСтр("ru = 'Получить уникальный идентификатор участника обмена ЭД.'");
	ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
	Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Ложь);
	Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Истина;
	УправлениеДоступностьюЛичногоКабинета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат(СертификатЭЦП)
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СертификатЭЦП) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Сертификат"),
											Объект.Ссылка,
											"СертификатыПодписейОрганизации",
											,
											Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация"),
											Объект.Ссылка,
											"Организация",
											,
											Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПарольПользователя = Неопределено;
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
		Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере");
	Иначе
		Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте");
	КонецЕсли;
	
	ПарольПользователя = Неопределено;
	ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСертификата(СертификатЭЦП,
																Контекст,
																ПарольПользователя,
																Истина,
																Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(СертификатЭЦП,
																					  Объект.Организация,
																					  "taxcomGetID",
																					  Объект.ИдентификаторОрганизации,
																					  ПарольПользователя,
																					  ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОтправитьПриглашенияВыделеннымУчастникам(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		МассивЗаписей = Элементы.УчастникиОбменаЭД.ВыделенныеСтроки;
		ОтправитьПриглашенияУчастникам(МассивЗаписей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашенияВсемУчастникам(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		ОтправитьПриглашенияУчастникам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоСтатусамУчастниковССервиса(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		ОбработатьКомандыПолученияКонтактов("GetContactListUpdates");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		ТекущиеДанные = Элементы.УчастникиОбменаЭД.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ЖдетСогласия") Тогда
				ТекстСообщения = НСтр("ru = 'Действие доступно только для участников со статусом ""Ждет согласия""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе
				Маркер = Маркер();
				
				Если ЗначениеЗаполнено(Маркер) Тогда
					Результат = ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(ТекущиеДанные.Идентификатор, Истина, Маркер);
					Если Результат Тогда
						
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
						СтруктураПараметров.Вставить("Принять",       Истина);
						
						ОбновитьЗаписьВРегистре(СтруктураПараметров);
						ЭтаФорма.Элементы.УчастникиОбменаЭД.Обновить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУчастника(Команда)
	
	ОчиститьСообщения();
	МассивЗаписей = Элементы.УчастникиОбменаЭД.ВыделенныеСтроки;
	Если НЕ УдалитьУчастниковОбмена(МассивЗаписей) Тогда
		ТекстСообщения = НСтр(
			"ru = 'Удалять можно участников, находящихся в статусе ""Требуется пригласить"" или ""Отсоединен"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Элементы.УчастникиОбменаЭД.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		ТекущиеДанные = Элементы.УчастникиОбменаЭД.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен")
				ИЛИ ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяОтсоединить") Тогда
				Маркер = Маркер();
				
				Если ЗначениеЗаполнено(Маркер) Тогда
					Результат = ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(ТекущиеДанные.Идентификатор, Ложь, Маркер);
					Если Результат Тогда
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
						СтруктураПараметров.Вставить("Принять",       Ложь);
						
						ОбновитьЗаписьВРегистре(СтруктураПараметров);
						ЭтаФорма.Элементы.УчастникиОбменаЭД.Обновить();
					КонецЕсли;
				КонецЕсли;
			Иначе
				ШаблонСообщения = НСтр("ru = 'Участника со статусом ""%1"" отключить от обмена невозможно.
				|Необходимо дождаться ответа от участника.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекущиеДанные.Статус);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанныхУОператора(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму(
			"РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО.Форма.ФормаРедактирования",
			ПараметрыФормы,
			ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчастника(Команда)
	
	Если НЕ СоглашениеЗаписано() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ОткрытьФормуВыбораСертификатаЭП();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация <> ОрганизацияВБД Тогда
		УстановитьНастройкиИдентификатора();
		Объект.СертификатыПодписейОрганизации.Очистить();
		Элементы.СертификатыПодписейОрганизации.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОрганизацияВБД = Объект.Организация;
	Если Объект.СертификатыПодписейОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'При изменении организации будет очищен список сертификатов.
			|Продолжить?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПриИзменении(Элемент)
	
	Объект.ИдентификаторОрганизации = СокрЛП(Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейОрганизацииСертификатОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейОрганизацииПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФорму("Справочник.СертификатыЭЦП.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Сертификат));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.НеСогласовано;
		Объект.СпособОбменаЭД   = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
	КонецЕсли;
	УчастникиОбменаЭД.Параметры.УстановитьЗначениеПараметра("СоглашениеОбИспользованииЭД", Объект.Ссылка);
	ОрганизацияВБД = Объект.Организация;
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПометитьНеДействующиеСертификатыВСписке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	Если Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		Если НЕ СоглашениеУникально() Тогда
			Отказ = Истина
		КонецЕсли;
		ПроверитьВозможностьЗаписиИзменений(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УчастникиОбменаЭД.Параметры.УстановитьЗначениеПараметра("СоглашениеОбИспользованииЭД", ТекущийОбъект.Ссылка);
	ОрганизацияВБД = ТекущийОбъект.Организация;
	ПометитьНеДействующиеСертификатыВСписке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей
	
	// Механизм получения уникального идентификатора передает уникальный идентификатор
	// в виде строки в параметре оповещения с именем события
	// "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД"
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД" Тогда
		
		Если ЗначениеЗаполнено(Источник) И Источник <> ЭтаФорма.УникальныйИдентификатор Тогда
			// Это не та форма
			Возврат;
		КонецЕсли;
		
		ДанныеИзменены = Ложь;
		ИдОрганизации = СокрЛП(Параметр);
		Если СокрЛП(Объект.ИдентификаторОрганизации) <> ИдОрганизации Тогда
			ДанныеИзменены = Истина;
			Объект.ИдентификаторОрганизации = ИдОрганизации;
			ШаблонСообщения = НСтр("ru = 'Идентификатор: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр);
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = ТекстСообщения;
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Ложь;
			ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Истина);
		КонецЕсли;
		
		СтатусДействует = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует");
		Если Объект.СтатусСоглашения <> СтатусДействует Тогда // по умолчанию сразу "включаем" соглашение
			Объект.СтатусСоглашения = СтатусДействует;
			ДанныеИзменены = Истина;
		КонецЕсли;
		
		// ДобавляемыйСертификат инициализируется в ОбработкаВыбора(...)
		Если ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
			ДобавитьСертификатПодписиВСписок(ДобавляемыйСертификат);
			Элементы.СертификатыПодписейОрганизации.Обновить();
			ДобавляемыйСертификат = Неопределено;
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = ДанныеИзменены;
		УправлениеДоступностьюЛичногоКабинета();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СогласенСУсловиями = Истина;
		ЭлектронныеДокументыКлиентПереопределяемый.ЗапроситьСогласиеСУсловиямиЛицензионногоСоглашения(СогласенСУсловиями);
		Если СогласенСУсловиями <> Истина Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей
	Если ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей() Тогда
		Элементы.ИдентификаторОрганизации.Видимость = Ложь;
		
		Если ЗначениеЗаполнено(Объект.ИдентификаторОрганизации) Тогда
			ШаблонСообщения = НСтр("ru = 'Идентификатор: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Объект.ИдентификаторОрганизации);
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = ТекстСообщения;
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Ложь;
			ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Истина);
		КонецЕсли;
	Иначе
		Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Видимость = Ложь;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей
	
	УправлениеДоступностьюЛичногоКабинета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТипВыбЗначения = ТипЗнч(ВыбранноеЗначение);
		Если ТипВыбЗначения = Тип("СправочникСсылка.Контрагенты") Тогда
			ДобавитьУчастникаОбменаЭД(Объект.Ссылка, ВыбранноеЗначение);
			Элементы.УчастникиОбменаЭД.Обновить();
		ИначеЕсли ТипВыбЗначения = Тип("СправочникСсылка.СертификатыЭЦП") Тогда
			
			// Сначала нужно проверить, что выбранный сертификат уже не содержится в списке
			МассивСтрок = Объект.СертификатыПодписейОрганизации.НайтиСтроки(Новый Структура("Сертификат", ВыбранноеЗначение));
			Если МассивСтрок.Количество() > 0 Тогда
				ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже зарегистрирован в соглашении'");
				Предупреждение(ТекстПредупреждения, 30);
				Возврат;
			КонецЕсли;
			
			ВключенаИПП = Ложь;
			ЭлектронныеДокументыКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(ВключенаИПП);
			Если ВключенаИПП Тогда
				ДобавляемыйСертификат = ВыбранноеЗначение;
				ЗарегистрироватьСертификат(ДобавляемыйСертификат);
				// Добавление сертификата срабатывает в обработчике оповещения
			Иначе
				ДобавитьСертификатПодписиВСписок(ВыбранноеЗначение);
				Элементы.СертификатыПодписейОрганизации.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
