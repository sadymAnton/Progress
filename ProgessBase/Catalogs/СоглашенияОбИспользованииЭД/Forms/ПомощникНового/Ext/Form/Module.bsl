////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.СтраницыПодвал.ОтображениеСтраниц    = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ПредставлениеСертификата                      = Нстр("ru = '<Выбрать из хранилища>'");
	ВариантВыбораСертификата                      = "Добавить новый";
	
	// Скроем не разделенные константы в разделенном режиме сервиса
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Элементы.ГруппаКонтекст.Видимость = Ложь;
	КонецЕсли;
	
	КонтекстАвторизации  = Константы.КонтекстАвторизации.Получить();
	КонтекстКриптографии = Константы.КонтекстКриптографии.Получить();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СогласенСУсловиями = Истина;
	ЭлектронныеДокументыКлиентПереопределяемый.ЗапроситьСогласиеСУсловиямиЛицензионногоСоглашения(СогласенСУсловиями);
	Если СогласенСУсловиями <> Истина Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если (КонтекстАвторизации = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте")
			ИЛИ КонтекстКриптографии = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте")) 
		И НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			Предупреждение(НСтр("ru = 'Для работы с помощником ввода соглашения через оператора Такском
		                              |необходимо установить расширение работы с криптографией,
									  |или указать в настройках криптографии выполнение операций ""На сервере"".'"));
			Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПерсональныеНастройкиРаботыСЭЦП = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП();
	
	ЗаполнитьЗначенияСвойств(
		ЭтаФорма,
		ПерсональныеНастройкиРаботыСЭЦП, 
		"ПровайдерЭЦП, ТипПровайдераЭЦП, АлгоритмПодписи, АлгоритмХеширования, АлгоритмШифрования"
	);
		
	ДобавитьМенеджераКриптографииВСписок("Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider", "", 75);
	ДобавитьМенеджераКриптографииВСписок("Signal-COM CPGOST Cryptographic Provider", "", 75);
	ДобавитьМенеджераКриптографииВСписок("Infotecs Cryptographic Service Provider", "", 2);
	ДобавитьМенеджераКриптографииВСписок("Microsoft Enhanced Cryptographic Provider v1.0", "", 1);
	ДобавитьМенеджераКриптографииВСписок("Microsoft Strong Cryptographic Provider", "", 1);
	ДобавитьМенеджераКриптографииВСписок("", "", 75);
	
	Если КонтекстАвторизации = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере") Тогда
		ЗаполнитьСпискиВыбораНаСервере();
	Иначе
		ЗаполнитьСпискиВыбораНаКлиенте();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПровайдерЭЦП) И ЗначениеЗаполнено(АлгоритмПодписи)
			И ЗначениеЗаполнено(АлгоритмХеширования) И ЗначениеЗаполнено(АлгоритмШифрования) Тогда
		ОшибкаТеста = Ложь;
		Если КонтекстАвторизации = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере") Тогда
			ТестНастроекКриптографииНаСервере(ОшибкаТеста);
		Иначе
			ТестНастроекКриптографииНаКлиенте(ОшибкаТеста);
		КонецЕсли;
		Если Не ОшибкаТеста Тогда
			Элементы.Далее2.КнопкаПоУмолчанию = Истина;
			УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДобавленияСертификата;
			Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиНазадДалее;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей() Тогда
		Элементы.ИдентификаторОрганизации.Видимость = Ложь;
		Элементы.ПояснениеИдентификатора.Видимость  = Ложь;
	Иначе
		Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Видимость = Ложь;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьПараметрыНастройкиКриптографииПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
		ТекстВопроса = НСтр("ru = 'При закрытии помощника данные не будут сохранены'");
	
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Закрыть");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Продолжить");
		Ответ = Вопрос(ТекстВопроса, СписокКнопок, 30, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
		УдалитьИзВременногоХранилища(СсылкаНаСертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = ВыбранноеЗначение;
		ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей
	
	// Механизм получения уникального идентификатора передает уникальный идентификатор
	// в виде строки в параметре оповещения с именем события
	// "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД"
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД" Тогда
		ИдентификаторОрганизации = СокрЛП(Параметр);
		
		ШаблонСообщения = НСтр("ru = 'Идентификатор: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр);
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = ТекстСообщения;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Ложь;
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Истина);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" И ВариантВыбораСертификата = "Выбрать из справочника" Тогда
		
		Если Параметр = СертификатКриптографии Тогда
			ЗаполнитьРеквизитыСертификатаНаСервере(СертификатКриптографии);
			ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата();
			УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
		КонецЕсли;

	КонецЕсли

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СсылкаНаСертификатНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПредставлениеСертификата = "<Выбрать из хранилища>" Тогда
		ЗагрузитьСертификат();
		Возврат;
	КонецЕсли;
	#Если НЕ ВебКлиент Тогда
		Если ЗначениеЗаполнено(СсылкаНаСертификат) И НЕ ПредставлениеСертификата = "<Выбрать из хранилища>" Тогда
			ВремФайл = ПолучитьИмяВременногоФайла("cer");
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СсылкаНаСертификат);
			ДвоичныеДанныеСертификата.Записать(ВремФайл);
			ЗапуститьПриложение(ВремФайл);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПриИзменении(Элемент)
	
	СброситьНастройкиСертификата();
	Если ЗначениеЗаполнено(СертификатКриптографии) Тогда
		ЗаполнитьРеквизитыСертификатаНаСервере(СертификатКриптографии);
	КонецЕсли;
	ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата();
	УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();

КонецПроцедуры

&НаКлиенте
Процедура ПровайдерЭЦППриИзменении(Элемент)
		
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
		ЗаполнитьСпискиВыбораНаСервере();
	Иначе
		ЗаполнитьСпискиВыбораНаКлиенте();
	КонецЕсли;
	
	ЗаполнитьАлгоритмыПоУмолчанию();
		
КонецПроцедуры

&НаКлиенте
Процедура ПровайдерЭЦПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТипаПровайдера = "";
	Пока Прав(ВыбранноеЗначение, 1) <> "/" Цикл
		СтрокаТипаПровайдера = Прав(ВыбранноеЗначение, 1) + СтрокаТипаПровайдера;
		ВыбранноеЗначение = Лев(ВыбранноеЗначение, СтрДлина(ВыбранноеЗначение) - 1);
	КонецЦикла;
	ВыбранноеЗначение = Лев(ВыбранноеЗначение, СтрДлина(ВыбранноеЗначение) - 1);
	
	ТипПровайдераЭЦП = Число(СтрокаТипаПровайдера);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПровайдераЭЦППриИзменении(Элемент)
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
		ЗаполнитьСпискиВыбораНаСервере();
	Иначе
		ЗаполнитьСпискиВыбораНаКлиенте();
	КонецЕсли;

	ЗаполнитьАлгоритмыПоУмолчанию();
		
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьДоступКСертификатуПриИзменении(Элемент)
	
	Если НЕ ОграничитьДоступКСертификату И ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли ОграничитьДоступКСертификату Тогда
		ВыбратьПользователя(Элемент);
	КонецЕсли;
	
	УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьПарольКСертификатуПриИзменении(Элемент)

	Если НЕ ЗапомнитьПарольКСертификату Тогда
		ПарольПользователя = "";
		УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
	Иначе
		ЗапомнитьПарольКСертификату = УстановитьПароль(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СброситьДанныеПоИдентификаторуОрганизации();
	НаименованиеСоглашения = Элементы.Организация.ТекстРедактирования;
	Если ВариантВыбораСертификата = "Выбрать из справочника" Тогда
		СброситьНастройкиСертификата();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьИдентификаторУчастникаОбменаЭДНажатие(Элемент)
	
	ДанныеСохранены = Истина;
	СохранитьНастройкиКриптосредстваИСертификата(ДанныеСохранены);
	Если Не ДанныеСохранены Тогда
		Возврат;
	КонецЕсли;
	Если ВариантВыбораСертификата = "Добавить новый" Тогда
		ТекСертификат = НовыйСертификатСсылка;
	Иначе
		ТекСертификат = СертификатКриптографии;
	КонецЕсли;
	ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(ТекСертификат,
																					  Организация,
																					  "taxcomGetID",
																					  ИдентификаторОрганизации,
																					  ПарольПользователя,
																					  ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	Если ВариантВыбораСертификата = "Добавить новый" Тогда
		ТекСертификат = НовыйСертификатСсылка;
	Иначе
		ТекСертификат = СертификатКриптографии;
	КонецЕсли;

	ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(ТекСертификат,
																					  Организация,
																					  "taxcomPrivat",
																					  ИдентификаторОрганизации,
																					  ПарольПользователя,
																					  ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ВариантВыбораСертификатаПриИзменении(Элемент)
	
	СброситьНастройкиСертификата();
	СертификатКриптографии = ПредопределенноеЗначение("Справочник.СертификатыЭЦП.ПустаяСсылка");
	ПредставлениеСертификата = "<Выбрать из хранилища>";
	Если ВариантВыбораСертификата = "Добавить новый" Тогда
		Элементы.Сертификат.Доступность         = Ложь;
		Элементы.СсылкаНаСертификат.Доступность = Истина;
	Иначе
		Элементы.СсылкаНаСертификат.Доступность = Ложь;
		Элементы.Сертификат.Доступность         = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстКриптографииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстАвторизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Назад(Команда)
	
	ОчиститьСообщения();
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДобавленияСертификата Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиКриптографии;
		Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиДалее;
		Элементы.Далее.КнопкаПоУмолчанию           = Истина;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиСоглашения Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДобавленияСертификата;
		Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиНазадДалее;
		Элементы.Далее2.КнопкаПоУмолчанию          = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиКриптографии Тогда
		
		ОшибкаТеста = Ложь;
		ТестНастроекКриптографии(ОшибкаТеста);
		Если ОшибкаТеста Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.Далее2.КнопкаПоУмолчанию = Истина;
		УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДобавленияСертификата;
		Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиНазадДалее;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДобавленияСертификата Тогда
		
		ТестВыполненУспешно = ТестСертификата();
		Если НЕ ТестВыполненУспешно Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиСоглашения;
		Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиГотово;
		Элементы.Готово.КнопкаПоУмолчанию          = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователя(Команда)
	
	ЭлектронныеДокументыКлиентПереопределяемый.ОткрытьФормуВыбораПользователей(ЭтаФорма, Пользователь);
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьПароль(Команда)
	
	ПараметрыФормы = Новый Структура("ПредставлениеСертификата, ВидОперации", ПредставлениеСертификата,
		НСтр("ru = 'Установка пароля в сертификате'"));
	КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
	ПарольУстановлен = Ложь;
	Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
		Если КодВозврата = "" Тогда
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Сохранить");
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Не сохранять");
			Ответ = Вопрос(НСтр("ru = 'Задан пустой пароль. Сохранить его?'"),
						   СписокКнопок,
						   30,
						   КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ПарольПользователя = "";
				ПарольУстановлен   = Истина;
			КонецЕсли;
		Иначе
			ПарольПользователя = КодВозврата;
			ПарольУстановлен   = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
	
	Возврат ПарольУстановлен;
	
КонецФункции

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Для Каждого ЭлементТаблицы ИЗ ВидыДокументов Цикл
		ЭлементТаблицы.ИспользоватьДляПодписи = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого ЭлементТаблицы Из ВидыДокументов Цикл
		ЭлементТаблицы.ИспользоватьДляПодписи = Ложь;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	Если ТестСоглашения() Тогда
		ДанныеСохранены = Истина;
		СохранитьПараметры(ДанныеСохранены);
		Если ДанныеСохранены Тогда
			Если ВариантВыбораСертификата = "Добавить новый" Тогда
				ПоказатьОповещениеПользователя("Создание",
											   ПолучитьНавигационнуюСсылку(НовыйСертификатСсылка),
											   НовыйСертификатСсылка);
			КонецЕсли;
			ПоказатьОповещениеПользователя("Создание",
										   ПолучитьНавигационнуюСсылку(СсылкаНаСоглашение),
										   СсылкаНаСоглашение);
			Оповестить("ОбновитьСостояниеЭД");
			ОткрытьЗначение(СсылкаНаСоглашение);
			Закрыть();
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНаКлиенте()
	
	ОчиститьСообщения();
	
	Элементы.АлгоритмПодписи.СписокВыбора.Очистить();
	Элементы.АлгоритмХеширования.СписокВыбора.Очистить();
	Элементы.АлгоритмШифрования.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(ПровайдерЭЦП) Тогда
		ИнформацияМенеджера = СкомпоноватьИнформациюМенеджераКриптографииНаКлиенте(
									ПровайдерЭЦП,
									Неопределено,
									ТипПровайдераЭЦП);
	Иначе
		ИнформацияМенеджера = Неопределено;
	КонецЕсли;
	
	Если ИнформацияМенеджера = Неопределено Тогда
		
		СпискиАлгоритмовУспешноЗаполнены = Ложь;
		
	Иначе
		
		СпискиАлгоритмовУспешноЗаполнены = Истина;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыПодписи Цикл
			Элементы.АлгоритмПодписи.СписокВыбора.Добавить(Строка);
		КонецЦикла;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыХеширования Цикл
			Элементы.АлгоритмХеширования.СписокВыбора.Добавить(Строка);
		КонецЦикла;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыШифрования Цикл
			Элементы.АлгоритмШифрования.СписокВыбора.Добавить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.АлгоритмПодписи.Доступность     = СпискиАлгоритмовУспешноЗаполнены;
	Элементы.АлгоритмХеширования.Доступность = СпискиАлгоритмовУспешноЗаполнены;
	Элементы.АлгоритмШифрования.Доступность  = СпискиАлгоритмовУспешноЗаполнены;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораНаСервере()
		
	Элементы.АлгоритмПодписи.СписокВыбора.Очистить();
	Элементы.АлгоритмХеширования.СписокВыбора.Очистить();
	Элементы.АлгоритмШифрования.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(ПровайдерЭЦП) Тогда
		ИнформацияМенеджера = СкомпоноватьИнформациюМенеджераКриптографииНаСервере(
										ПровайдерЭЦП,
										Неопределено,
										ТипПровайдераЭЦП);
	Иначе
		ИнформацияМенеджера = Неопределено;
	КонецЕсли;
	
	Если ИнформацияМенеджера = Неопределено Тогда
		
		СпискиАлгоритмовУспешноЗаполнены = Ложь;
		
	Иначе
		
		СпискиАлгоритмовУспешноЗаполнены = Истина;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыПодписи Цикл
			Элементы.АлгоритмПодписи.СписокВыбора.Добавить(Строка);
		КонецЦикла;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыХеширования Цикл
			Элементы.АлгоритмХеширования.СписокВыбора.Добавить(Строка);
		КонецЦикла;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыШифрования Цикл
			Элементы.АлгоритмШифрования.СписокВыбора.Добавить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.АлгоритмПодписи.Доступность     = СпискиАлгоритмовУспешноЗаполнены;
	Элементы.АлгоритмХеширования.Доступность = СпискиАлгоритмовУспешноЗаполнены;
	Элементы.АлгоритмШифрования.Доступность  = СпискиАлгоритмовУспешноЗаполнены;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМенеджераКриптографииВСписок(ИмяМодуляКриптографии, ПутьМодуляКриптографии, ТипМодуляКриптографии)
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
		ДобавитьМенеджераКриптографииВСписокНаСервере(
				ИмяМодуляКриптографии,
				ПутьМодуляКриптографии,
				ТипМодуляКриптографии);
	Иначе
		 СкомпоноватьИнформациюМенеджераКриптографииНаКлиенте(
				ИмяМодуляКриптографии,
				ПутьМодуляКриптографии,
				ТипМодуляКриптографии,
				Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМенеджераКриптографииВСписокНаСервере(ИмяМодуляКриптографии,
														ПутьМодуляКриптографии,
														ТипМодуляКриптографии)
	
	СкомпоноватьИнформациюМенеджераКриптографииНаСервере(
			ИмяМодуляКриптографии,
			ПутьМодуляКриптографии,
			ТипМодуляКриптографии,
			Ложь);
		
КонецПроцедуры

&НаСервере
Функция СкомпоноватьИнформациюМенеджераКриптографииНаСервере(ИмяМодуляКриптографии,
															ПутьМодуляКриптографии,
															ТипМодуляКриптографии,
															СообщатьОшибки = Истина)
	
	Если ПутьМодуляКриптографии = Неопределено Тогда
		ПутьМодуляКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер().ПутьМодуляКриптографии;
	КонецЕсли;
	
	ИнформацияМенеджера = Неопределено;
	
	Попытка
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ИмяМодуляКриптографии,
														  ПутьМодуляКриптографии,
														  ТипМодуляКриптографии);
		ИнформацияМенеджера = МенеджерКриптографии.ПолучитьИнформациюМодуляКриптографии();
		
	Исключение
		
		Если СообщатьОшибки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
	КонецПопытки;
	
	Если ИнформацияМенеджера <> Неопределено Тогда
		
		ЗначениеСпискаВыбора = ИнформацияМенеджера.Имя + "/" + ТипМодуляКриптографии;
		
		Если Элементы.ПровайдерЭЦП.СписокВыбора.НайтиПоЗначению(ЗначениеСпискаВыбора) = Неопределено Тогда
			Элементы.ПровайдерЭЦП.СписокВыбора.Добавить(ЗначениеСпискаВыбора, ИнформацияМенеджера.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнформацияМенеджера;
	
КонецФункции

&НаКлиенте
Функция СкомпоноватьИнформациюМенеджераКриптографииНаКлиенте(ИмяМодуляКриптографии,
															ПутьМодуляКриптографии,
															ТипМодуляКриптографии,
															СообщатьОшибки = Истина)
	
	Если ПутьМодуляКриптографии = Неопределено Тогда
		ПутьМодуляКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ПутьМодуляКриптографии;
	КонецЕсли;
	
	ИнформацияМенеджера = Неопределено;
		
	Попытка
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ИмяМодуляКриптографии,
														  ПутьМодуляКриптографии,
														  ТипМодуляКриптографии);
		ИнформацияМенеджера = МенеджерКриптографии.ПолучитьИнформациюМодуляКриптографии();
		
	Исключение
		
		Если СообщатьОшибки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
	КонецПопытки;
	
	Если ИнформацияМенеджера <> Неопределено Тогда
		
		ЗначениеСпискаВыбора = ИнформацияМенеджера.Имя + "/" + ТипМодуляКриптографии;
		
		Если Элементы.ПровайдерЭЦП.СписокВыбора.НайтиПоЗначению(ЗначениеСпискаВыбора) = Неопределено Тогда
			Элементы.ПровайдерЭЦП.СписокВыбора.Добавить(ЗначениеСпискаВыбора, ИнформацияМенеджера.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнформацияМенеджера;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыНастройкиКриптографииПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(КонтекстАвторизации) Тогда
		КонтекстАвторизации = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтекстКриптографии) Тогда
		КонтекстКриптографии = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПровайдерЭЦП) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееКоличествоКриптосредствНаКомпьютере = Элементы.ПровайдерЭЦП.СписокВыбора.Количество();
	ЕстьИсключаемоеКриптосредство = НЕ Элементы.ПровайдерЭЦП.СписокВыбора.НайтиПоЗначению("Microsoft Enhanced Cryptographic Provider v1.0/1")=Неопределено;
	ОжидаемоеКоличествоКриптосредств = ?(ЕстьИсключаемоеКриптосредство, 2, 1);
	Если ОбщееКоличествоКриптосредствНаКомпьютере = ОжидаемоеКоличествоКриптосредств Тогда
		Для Каждого Криптосредство ИЗ Элементы.ПровайдерЭЦП.СписокВыбора Цикл
			Если НЕ Криптосредство.Значение = "Microsoft Enhanced Cryptographic Provider v1.0/1" Тогда
				ПровайдерЭЦП = Криптосредство.Представление;
				СтрокаТипаПровайдера = "";
				ВыбранноеЗначение = Криптосредство.Значение;
				Пока Прав(ВыбранноеЗначение, 1) <> "/" Цикл
					СтрокаТипаПровайдера = Прав(ВыбранноеЗначение, 1) + СтрокаТипаПровайдера;
					ВыбранноеЗначение = Лев(ВыбранноеЗначение, СтрДлина(ВыбранноеЗначение) - 1);
				КонецЦикла;
				ТипПровайдераЭЦП = Число(СтрокаТипаПровайдера);
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
					ЗаполнитьСпискиВыбораНаСервере();
				Иначе
					ЗаполнитьСпискиВыбораНаКлиенте();
				КонецЕсли;
				ЗаполнитьАлгоритмыПоУмолчанию();
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАлгоритмыПоУмолчанию()
	
	Если Элементы.АлгоритмПодписи.СписокВыбора.Количество() = 1 Тогда
		АлгоритмПодписи = Элементы.АлгоритмПодписи.СписокВыбора[0].Значение;
	Иначе
		МассивАлгоритмов = Новый Массив;
		Для Каждого ЭлементСписка ИЗ Элементы.АлгоритмПодписи.СписокВыбора Цикл
			Если Сред(ЭлементСписка.Значение, 1, 4) = "GOST" Тогда
				МассивАлгоритмов.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		Если МассивАлгоритмов.Количество() = 1 Тогда
			АлгоритмПодписи = МассивАлгоритмов[0];
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.АлгоритмХеширования.СписокВыбора.Количество()=1 Тогда
		АлгоритмХеширования = Элементы.АлгоритмХеширования.СписокВыбора[0].Значение;
	Иначе
		МассивАлгоритмов = Новый Массив;
		Для Каждого ЭлементСписка ИЗ Элементы.АлгоритмХеширования.СписокВыбора Цикл
			Если Сред(ЭлементСписка.Значение, 1, 4) = "GOST" Тогда
				МассивАлгоритмов.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		Если МассивАлгоритмов.Количество() = 1 Тогда
			АлгоритмХеширования = МассивАлгоритмов[0];
		КонецЕсли;
	КонецЕсли;
		
	Если Элементы.АлгоритмШифрования.СписокВыбора.Количество()=1 Тогда
		АлгоритмШифрования = Элементы.АлгоритмШифрования.СписокВыбора[0].Значение;
	Иначе
		МассивАлгоритмов = Новый Массив;
		Для Каждого ЭлементСписка ИЗ Элементы.АлгоритмШифрования.СписокВыбора Цикл
			Если Сред(ЭлементСписка.Значение, 1, 4) = "GOST" Тогда
				МассивАлгоритмов.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		Если МассивАлгоритмов.Количество() = 1 Тогда
			АлгоритмШифрования = МассивАлгоритмов[0];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроекКриптографии(ЕстьОшибка)
	
	ПроверитьЗаполнениеРеквизитовНастройкиКриптографии(ЕстьОшибка);
	
	Если ЕстьОшибка Тогда 
		Возврат;
	КонецЕсли;
	
	Если КонтекстАвторизации = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере") Тогда
		ТестНастроекКриптографииНаСервере(ЕстьОшибка);
	Иначе
		ТестНастроекКриптографииНаКлиенте(ЕстьОшибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТестНастроекКриптографииНаСервере(ЕстьОшибка)
	
	Попытка
		Менеджер = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроекКриптографииНаКлиенте(ЕстьОшибка)
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если НЕ ЭлектронныеДокументыСлужебныйКлиент.УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
			ЕстьОшибка = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Менеджер = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитовНастройкиКриптографии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ПровайдерЭЦП) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Провайдер ЭЦП"),
			,
			"ПровайдерЭЦП",
			,
			Отказ);
	КонецЕсли;
		
	Если ТипПровайдераЭЦП = 0 Тогда
		ТекстСообщения = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле",
																	 "Корректность",
																	 "Тип провайдера ЭЦП",
																	 ,
																	 ,
																	 "Тип провайдера ЭЦП должен быть больше 0");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТипПровайдераЭЦП", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АлгоритмПодписи) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Алгоритм подписи"),
			,
			"АлгоритмПодписи",
			,
			Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(АлгоритмПодписи) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Алгоритм хеширования"),
			,
			"АлгоритмХеширования",
			,
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АлгоритмПодписи) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Алгоритм шифрования"),
			,
			"АлгоритмШифрования",
			,
			Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(КонтекстАвторизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Выполнять авторизацию"),
			,
			"КонтекстАвторизации",
			,
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтекстКриптографии) Тогда
		ТекстСообщения = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения(
																"Поле",
																"Заполнение",
																"Выполнять криптографические операции");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтекстКриптографии", , Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификат()
	
	ВыполнятьАвторизациюНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
	
	Если ВыполнятьАвторизациюНаСервере Тогда
		МассивСтруктурЛичныхСертификатов = ПолучитьМассивСтруктурСертификатовНаСервере();
	Иначе
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			Если НЕ ЭлектронныеДокументыСлужебныйКлиент.УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		МассивСтруктурЛичныхСертификатов = ПолучитьМассивСтруктурСертификатовНаКлиенте();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);
	ПараметрыФормы.Вставить("ЗагрузкаСертификата", Истина);
	СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификата", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		
		СброситьНастройкиСертификата();
		
		Отпечаток = СтруктураВозврата.Отпечаток;
		
		Если ВыполнятьАвторизациюНаСервере Тогда
			СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечаткуНаСервере(Отпечаток);
		Иначе
			СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечаткуНаКлиенте(Отпечаток);
		КонецЕсли;
		
		ПредставлениеСертификата = СтруктураСертификата.КомуВыдан;
		НаименованиеСертификата  = СтруктураСертификата.КомуВыдан;
		ДатаОкончания            = СтруктураСертификата.ДействителенДо;
		
		СтрокаОписания = "Кому выдан: " + СтруктураСертификата.КомуВыдан + Символы.ПС;
		СтрокаОписания = СтрокаОписания + "Кем выдан: " + СтруктураСертификата.КемВыдан + Символы.ПС;
		СтрокаОписания = СтрокаОписания + "Действителен: " + СтруктураСертификата.ДействителенДо + Символы.ПС;
		НовоеНазначение = "";
		ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
		СтрокаОписания = СтрокаОписания + НовоеНазначение;
		НазначениеСертификата = СтрокаОписания;
		
		Если ВыполнятьАвторизациюНаСервере Тогда
			ПолучитьСертификатПоОтпечаткуНаСервере(Отпечаток);
		Иначе
			ПолучитьСертификатПоОтпечаткуНаКлиенте(Отпечаток);
		КонецЕсли;
		
		ЗаполнитьТабличнуюЧастьПоВидамДокументов();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтруктурСертификатовНаСервере()
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Отказ = Ложь;
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	Если Отказ Тогда
		Возврат МассивСтруктурСертификатов;
	КонецЕсли;
	
	// здесь ТекущаяДата() используется для проверки на истечение срока сертификатов на клиентском компьютере - перенести ее на сервер в принципе невозможно
	ТекущаяДата = ТекущаяДата();
	
	// для подписи
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
			Продолжить; // отфильтровываем истекшие сертификаты
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат МассивСтруктурСертификатов;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивСтруктурСертификатовНаКлиенте()
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Отказ = Ложь;
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	Если Отказ Тогда
		Возврат МассивСтруктурСертификатов;
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	// для подписи
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
			Продолжить; // отфильтровываем истекшие сертификаты
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат МассивСтруктурСертификатов;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьСтруктуруСертификатаПоОтпечаткуНаКлиенте(Отпечаток)
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруСертификатаПоОтпечаткуНаСервере(Отпечаток)
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Сертификат не найден'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСертификатПоОтпечаткуНаКлиенте(Отпечаток)
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
	СсылкаНаСертификат = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСертификатПоОтпечаткуНаСервере(Отпечаток)
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
	СсылкаНаСертификат = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВидимостьЭлементовСтраницыСертификата()
	
	Элементы.КнопкаПользователь.Доступность = ОграничитьДоступКСертификату;
	Элементы.КнопкаПароль.Доступность       = ЗапомнитьПарольКСертификату;
	ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата();
	Если ВариантВыбораСертификата = "Выбрать из справочника" Тогда
		Элементы.КнопкаПользователь.Доступность           = Ложь;
		Элементы.КнопкаПароль.Доступность                 = Ложь;
		Элементы.ОграничитьДоступКСертификату.Доступность = Ложь;
		Элементы.ЗапомнитьПарольКСертификату.Доступность  = Ложь;
		Элементы.НаименованиеСертификата.ТолькоПросмотр   = Истина;
		Элементы.ВидыДокументов.ТолькоПросмотр            = Истина;
		Элементы.ВидыДокументовВыделитьВсе.Доступность    = Ложь;
		Элементы.ВидыДокументовСнятьВсе.Доступность       = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата()
	
	Если НЕ ОграничитьДоступКСертификату Тогда
		ТекстГиперссылкиПользователя = Нстр("ru = 'Доступен всем пользователям.'");
	Иначе
		ТекстГиперссылкиПользователя = Нстр("ru = 'Доступен пользователю:'") + " "
									+ ?(ЗначениеЗаполнено(Пользователь), Пользователь, Нстр("ru = '<Выбрать пользователя>'"));
	КонецЕсли;
	
	Если НЕ ЗапомнитьПарольКСертификату Тогда
		ТекстГиперссылкиПароля = Нстр("ru = 'Пароль не сохранен.'");
	Иначе
		ТекстГиперссылкиПароля = Нстр("ru = 'Изменить пароль.'");
	КонецЕсли;
	
	Элементы.КнопкаПользователь.Заголовок = ТекстГиперссылкиПользователя;
	Элементы.КнопкаПароль.Заголовок       = ТекстГиперссылкиПароля;
	
КонецПроцедуры

&НаКлиенте
Функция ТестСертификата()
	
	Результат = Истина;
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация"),
			,
			"Организация",
			,
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаименованиеСертификата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Наименование сертификата"),
			,
			"НаименованиеСертификата",
			,
			Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВариантВыбораСертификата = "Выбрать из справочника" И НЕ ЗначениеЗаполнено(СертификатКриптографии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Сертификат"),
			,
			"СертификатКриптографии",
			,
			Отказ);
	КонецЕсли;
	
	Если ВариантВыбораСертификата = "Добавить новый" И ПредставлениеСертификата = "<Выбрать из хранилища>" Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо добавить сертификат из хранилища'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСертификата", , Отказ);
	КонецЕсли;
	
	ВыбранВидЭД = Ложь;
	Для каждого Строка из ВидыДокументов Цикл
		Если Строка.ИспользоватьДляПодписи Тогда
			ВыбранВидЭД = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВыбранВидЭД Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать виды документов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВидыДокументов", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ложь;
	КонецЕсли;
	
	ТекПарольПользователя = Неопределено;
	// Для дальнейших операций необходим пароль сертификата.
	Если НЕ ЗапомнитьПарольКСертификату Тогда
		Если ВариантВыбораСертификата = "Добавить новый" Тогда
			Представление = ПредставлениеСертификата;
		Иначе
			Представление = СертификатКриптографии;
		КонецЕсли;
		ПараметрыФормы = Новый Структура("ПредставлениеСертификата, ВидОперации", Представление,
			НСтр("ru = 'Установка пароля в сертификате'"));
		КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
		
		Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
			ТекПарольПользователя = КодВозврата;
			ПарольПользователя = ТекПарольПользователя;
		КонецЕсли;
	Иначе
		ТекПарольПользователя = ПарольПользователя;
	КонецЕсли;
	
	Если ТекПарольПользователя = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КонтекстАвторизации = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере") Тогда
		Результат = ТестСертификатаНаСервере(ТекПарольПользователя);
	Иначе
		Результат = ТестСертификатаНаКлиенте(ТекПарольПользователя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Отпечаток(СсылкаНаСертификат)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаСертификат, "Отпечаток");
	
КонецФункции

&НаКлиенте
Функция ТестСертификатаНаКлиенте(ТекущийПароль)
			
	ШаблонСообщения = НСтр("ru = '%1
								 |%2'");
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на клиенте.'");

	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ТекущийПароль;
	
	Если ВариантВыбораСертификата = "Выбрать из справочника" Тогда
	
		Отпечаток = Отпечаток(СертификатКриптографии);
		ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
		Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
		
		Если Сертификат = Неопределено Тогда
			РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("101");
		КонецЕсли;
		Если ЗначениеЗаполнено(РезультатТеста) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																					 ОписаниеТеста,
																					 РезультатТеста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
		Если Сертификат = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СсылкаНаСертификат);
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		
	КонецЕсли;
	
	Результат = Истина;
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата на клиенте.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(Сертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, 
																				 ТекстОшибки,
																				 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																				 ОписаниеТеста,
																				 РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭЦП.
	РезультатТеста = "";
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭЦП на клиенте.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(Сертификат.Отпечаток, Сертификат);
		ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, Сертификат.Отпечаток, ДвоичныеДанные);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																				 ОписаниеТеста,
																				 РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ТестСертификатаНаСервере(ТекущийПароль)
			
	ШаблонСообщения = НСтр("ru = '%1
								 |%2'");
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на сервере.'");

	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, "", ТипПровайдераЭЦП);
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ТекущийПароль;
	
	Если ВариантВыбораСертификата = "Выбрать из справочника" Тогда
	
		Отпечаток = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СертификатКриптографии, "Отпечаток");
		ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
		Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
		
		Если Сертификат = Неопределено Тогда
			РезультатТеста = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("111");
		КонецЕсли;
		Если ЗначениеЗаполнено(РезультатТеста) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																					 ОписаниеТеста,
																					 РезультатТеста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
		Если Сертификат = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СсылкаНаСертификат);
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		
	КонецЕсли;
	
	Результат = Истина;
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата на сервере.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(Сертификат,
												 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("112");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата,
																				 ТекстОшибки,
																				 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																				 ОписаниеТеста,
																				 РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭЦП.
	РезультатТеста = "";
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭЦП на сервере.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(Сертификат.Отпечаток, Сертификат);
		ЭлектронныеДокументыСлужебный.ПроверитьПодпись(МенеджерКриптографии, Сертификат.Отпечаток, ДвоичныеДанные);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("114");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата,
																				 ТекстОшибки,
																				 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																				 ОписаниеТеста,
																				 РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Процедура СброситьДанныеПоИдентификаторуОрганизации()
	
	Если Элементы.ИдентификаторОрганизации.Видимость = Ложь Тогда
		ИдентификаторОрганизации = "";
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = НСтр("ru = 'Получить уникальный идентификатор участника обмена ЭД.'");
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Ложь);
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиСертификата()
	
	НазначениеСертификата                             = "";
	НаименованиеСертификата                           = "";
	ОграничитьДоступКСертификату                      = Ложь;
	Пользователь                                      = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ЗапомнитьПарольКСертификату                       = Ложь;
	ПарольПользователя                                = "";
	ДатаОкончания                                     = Дата(1,1,1);
	Элементы.НаименованиеСертификата.ТолькоПросмотр   = Ложь;
	Элементы.ОграничитьДоступКСертификату.Доступность = Истина;
	Элементы.ОграничитьДоступКСертификату.Доступность = Истина;
	Элементы.ЗапомнитьПарольКСертификату.Доступность  = Истина;
	Элементы.ВидыДокументов.ТолькоПросмотр            = Ложь;
	Элементы.ВидыДокументовВыделитьВсе.Доступность    = Истина;
	Элементы.ВидыДокументовСнятьВсе.Доступность       = Истина;
	ВидыДокументов.Очистить();
	
	УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
	
КонецПроцедуры

&НаКлиенте
Функция ТестСоглашения()
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(НаименованиеСоглашения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Наименование соглашения"),
			,
			"НаименованиеСоглашения",
			,
			Отказ);
	КонецЕсли;
	
	Если Элементы.ИдентификаторОрганизации.Видимость И НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Идентификатор организации"),
			,
			"ИдентификаторОрганизации",
			,
			Отказ);
	ИначеЕсли Элементы.ИдентификаторОрганизации.Видимость И ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ИдентификаторОрганизации = СокрЛП(ИдентификаторОрганизации);
		ДлинаИдентификатора = СтрДлина(ИдентификаторОрганизации);
		Если ДлинаИдентификатора <> 46 Тогда
			ТекстСообщения = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения(
																	"Поле",
																	"КОРРЕКТНОСТЬ",
																	"Идентификатор организации",
																	,
																	,
																	Нстр("ru = 'Длина поля не равна 46.'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
		
	Если Элементы.ИдентификаторОрганизации.Видимость = Ложь И НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо получить уникальный идентификатор участника обмена ЭД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , ,Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТестСвязиПройден = Истина;
	ТестСвязиСТакском(ТестСвязиПройден);
	
	Если НЕ ТестСвязиПройден Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНазначениеСертификата(Назначение, НовоеНазначение, ДобавлятьКодНазначения = Ложь)
	
	ЭлектроннаяЦифроваяПодпись.ЗаполнитьНазначениеСертификата(Назначение, НовоеНазначение, ДобавлятьКодНазначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоВидамДокументов()
	
	ВидыДокументов.Очистить();
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыЭД Цикл
		Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.Ошибка
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.Подтверждение
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ДопДанные
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ПлатежноеПоручение
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросВыписки
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.АктВыполненныхРабот
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КаталогТоваров
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ВыпискаБанка Тогда
				Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТЧ = ВидыДокументов.Добавить();
		НоваяСтрокаТЧ.ВидДокумента = ЗначениеПеречисления;
		НоваяСтрокаТЧ.ИспользоватьДляПодписи = ЗначениеПеречисления = Перечисления.ВидыЭД.ИзвещениеОПолучении;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСертификатаНаСервере(СертификатСсылка)
	
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СертификатСсылка,
		"ЗапомнитьПарольКСертификату, Назначение, ОграничитьДоступКСертификату, Организация,
		|ПарольПользователя, ВидыДокументов, Наименование, ФайлСертификата, Пользователь, ДатаОкончания");
	ЗапомнитьПарольКСертификату  = РеквизитыСертификата.ЗапомнитьПарольКСертификату;
	НазначениеСертификата        = РеквизитыСертификата.Назначение;
	ОграничитьДоступКСертификату = РеквизитыСертификата.ОграничитьДоступКСертификату;
	ОрганизацияПоСертификату     = РеквизитыСертификата.Организация;
	ПарольПользователя           = РеквизитыСертификата.ПарольПользователя;
	НаименованиеСертификата      = РеквизитыСертификата.Наименование;
	Пользователь                 = РеквизитыСертификата.Пользователь;
	ДатаОкончания                = РеквизитыСертификата.ДатаОкончания;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ОрганизацияПоСертификату;
	конецЕсли;
	ВидыДокументов.Загрузить(РеквизитыСертификата.ВидыДокументов.Выгрузить());
	ВидыДокументов.Сортировать("ВидДокумента");
	СсылкаНаСертификат = ПоместитьВоВременноеХранилище(РеквизитыСертификата.ФайлСертификата.Получить(),
													   УникальныйИдентификатор);
	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметры(ДанныеСохранены)
	
	Попытка
		СохранитьНастройкиКриптосредстваИСертификата(ДанныеСохранены);
		НачатьТранзакцию();
		НовоеСоглашение = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
		НовоеСоглашение.ИдентификаторОрганизации = ИдентификаторОрганизации;
		НовоеСоглашение.Наименование             = НаименованиеСоглашения;
		НовоеСоглашение.Организация              = Организация;
		НоваяСтрока = НовоеСоглашение.СертификатыПодписейОрганизации.Добавить();
		Если ВариантВыбораСертификата = "Добавить новый" Тогда
			НоваяСтрока.Сертификат = НовыйСертификатСсылка;
		Иначе
			НоваяСтрока.Сертификат = СертификатКриптографии;
		КонецЕсли;
		НовоеСоглашение.СпособОбменаЭД           = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
		НовоеСоглашение.СтатусСоглашения         = Перечисления.СтатусыСоглашенийЭД.Действует;
		Если НовоеСоглашение.СоглашениеУникально() Тогда
			НовоеСоглашение.Записать();
		Иначе
			ОтменитьТранзакцию();
			ДанныеСохранены = Ложь;
			Возврат;
		КонецЕсли;
		СсылкаНаСоглашение = НовоеСоглашение.Ссылка;
		ЗафиксироватьТранзакцию();
		ОбновитьПовторноИспользуемыеЗначения();
	Исключение
		ОтменитьТранзакцию();
		ДанныеСохранены = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСТакском(ТестПройден)
	
	Если ВариантВыбораСертификата = "Добавить новый" Тогда
		СтруктураПараметровЗапросаМаркера = Новый Структура(
								"ЗапомнитьПарольКСертификату, ПарольПользователя, ФайлСертификата, СертификатПодписи",
								Ложь,
								ПарольПользователя,
								ПолучитьИзВременногоХранилища(СсылкаНаСертификат),
								НаименованиеСертификата);
	Иначе
		ЭлектронныеДокументыСлужебныйКлиент.ПроверитьСрокДействияСертификата(СертификатКриптографии);
		СтруктураПараметровЗапросаМаркера = СтруктураПараметровЗапросаМаркера(СертификатКриптографии);
	КонецЕсли;
	
	Если КонтекстАвторизации = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере") Тогда
		ТестПройден = ЭлектронныеДокументыСлужебныйВызовСервера.ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, Ложь);
	Иначе
		ТестПройден = ЭлектронныеДокументыСлужебныйКлиент.ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураПараметровЗапросаМаркера(Сертификат)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатПодписи.ЗапомнитьПарольКСертификату КАК ЗапомнитьПарольКСертификату,
		|	СертификатПодписи.ПарольПользователя КАК ПарольПользователя,
		|	СертификатПодписи.ФайлСертификата КАК ФайлСертификата,
		|	СертификатПодписи.Ссылка КАК СертификатПодписи
		|ИЗ
		|	Справочник.СертификатыЭЦП КАК СертификатПодписи
		|ГДЕ
		|	СертификатПодписи.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Сертификат);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗапомнитьПарольКСертификату", Выборка.ЗапомнитьПарольКСертификату);
	СтруктураВозврата.Вставить("ПарольПользователя",          Выборка.ПарольПользователя);
	СтруктураВозврата.Вставить("СертификатПодписи",           Выборка.СертификатПодписи);
	СтруктураВозврата.Вставить("ФайлСертификата",             Выборка.ФайлСертификата.Получить());
	
	Возврат СтруктураВозврата;

КонецФункции

&НаСервере
Процедура СохранитьНастройкиКриптосредстваИСертификата(ДанныеСохранены)
	
	Попытка
		НачатьТранзакцию();
		Константы.ПровайдерЭЦП.Установить(ПровайдерЭЦП);
		Константы.АлгоритмПодписи.Установить(АлгоритмПодписи);
		Константы.ТипПровайдераЭЦП.Установить(ТипПровайдераЭЦП);
		Константы.АлгоритмШифрования.Установить(АлгоритмШифрования);
		Константы.АлгоритмХеширования.Установить(АлгоритмХеширования);
		Константы.КонтекстАвторизации.Установить(КонтекстАвторизации);
		Константы.КонтекстКриптографии.Установить(КонтекстКриптографии);
		
		Если ВариантВыбораСертификата = "Добавить новый" Тогда
			Если ЗначениеЗаполнено(НовыйСертификатСсылка) Тогда
				НовыйСертификат = НовыйСертификатСсылка.ПолучитьОбъект();
			Иначе
				НовыйСертификат = Справочники.СертификатыЭЦП.СоздатьЭлемент();
			КонецЕсли;
			НовыйСертификат.ВидыДокументов.Загрузить(ВидыДокументов.Выгрузить());
			НовыйСертификат.Отпечаток                    = Отпечаток;
			НовыйСертификат.Организация                  = Организация;
			НовыйСертификат.Пользователь                 = Пользователь;
			НовыйСертификат.ДатаОкончания                = ДатаОкончания;
			НовыйСертификат.ПарольПользователя           = ПарольПользователя;
			НовыйСертификат.Назначение                   = НазначениеСертификата;
			НовыйСертификат.Наименование                 = НаименованиеСертификата;
			НовыйСертификат.ЗапомнитьПарольКСертификату  = ЗапомнитьПарольКСертификату;
			НовыйСертификат.ОграничитьДоступКСертификату = ОграничитьДоступКСертификату;
			НовыйСертификат.ФайлСертификата = Новый ХранилищеЗначения(
														ПолучитьИзВременногоХранилища(СсылкаНаСертификат),
														Новый СжатиеДанных(9));
			НовыйСертификат.Записать();
			НовыйСертификатСсылка = НовыйСертификат.Ссылка;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		ОбновитьПовторноИспользуемыеЗначения();
	Исключение
		ОтменитьТранзакцию();
		ДанныеСохранены = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки

КонецПроцедуры

