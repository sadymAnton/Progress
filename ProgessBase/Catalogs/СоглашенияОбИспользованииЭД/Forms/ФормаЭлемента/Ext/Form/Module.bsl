
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ОбъектЗаполнен()
	
	Возврат РеквизитФормыВЗначение("Объект").ПроверитьЗаполнение();
	
КонецФункции

&НаСервере
Процедура УстановитьИдентификатор(ИсточникИдентификатора, Данные)
	
	ЗначенияРеквизитов = ЭлектронныеДокументыСлужебный.СтруктураЗначенийРеквизитов(Данные, "ИНН, КПП");
	ИНН = "";
	КПП = "";
	ЗначенияРеквизитов.Свойство("ИНН", ИНН);
	ЗначенияРеквизитов.Свойство("КПП", КПП);
	Если ИсточникИдентификатора = "Организация" Тогда
		СтрокаЗаполнения = Строка(ИНН)+"_"+Строка(КПП);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		Объект.ИдентификаторОрганизации = СокрЛП(СтрокаЗаполнения);
	Иначе
		СтрокаЗаполнения = Строка(ИНН)+"_"+Строка(КПП);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		Объект.ИдентификаторКонтрагента = СокрЛП(СтрокаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорматыФайловДоступнымиЗначениями()
	
	Для Каждого ЗначениеПеречисления Из Перечисления.ФорматыФайловОбменаЭД Цикл
		Если ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрок = Объект.ФорматыФайловОбмена.НайтиСтроки(Новый Структура("ФорматФайла", ЗначениеПеречисления));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = Объект.ФорматыФайловОбмена.Добавить();
			НоваяСтрока.ФорматФайла  = ЗначениеПеречисления;
			// Значение по умолчанию для новых
			Если ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.XML И Объект.Ссылка.Пустая() Тогда
				НоваяСтрока.Использовать = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями()
	
	АктуальныеВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	
	Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
		Если ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.СчетФактура
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.КорректировочныйСчетФактура
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.УведомлениеОбУточнении
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.Ошибка
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.ИзвещениеОПолучении
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПлатежноеПоручение
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.ЗапросВыписки
			И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВыпискаБанка Тогда
			МассивСтрок = Объект.ВходящиеДокументы.НайтиСтроки(Новый Структура("ВходящийДокумент", ЗначениеПеречисления));
			Если МассивСтрок.Количество() = 0
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.ТОРГ12Покупатель
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.ТОРГ12Продавец
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.АктИсполнитель
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.АктЗаказчик
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				НоваяСтрока = Объект.ВходящиеДокументы.Добавить();
				НоваяСтрока.ВходящийДокумент = ЗначениеПеречисления;
			КонецЕсли;
			МассивСтрок = Объект.ИсходящиеДокументы.НайтиСтроки(Новый Структура("ИсходящийДокумент", ЗначениеПеречисления));
			Если МассивСтрок.Количество() = 0 Тогда 
				НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
				
				// Проставим в новые соглашения прямого обмена версию формата обмена.
				ВерсияФормата = "CML 4.02";
				Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					ВерсияФормата = "";
				ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					ВерсияФормата = "ФНС 5.01";
				ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
					ВерсияФормата = "CML 2.06";
				КонецЕсли;
				
				НоваяСтрока.ВерсияФормата = ВерсияФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
	Объект.ВходящиеДокументы.Сортировать("ВходящийДокумент");
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьСертификатовПодписей()
	
	Элементы.СертификатыПодписейКонтрагента.Доступность = Объект.ПроверятьСертификатыПодписей;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиВидимостиДоступностиФормы()
	
	УстановитьВидимостьДоступностьКоманд();
	УстановитьВидимостьСтраниц();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраниц()
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		Элементы.ГруппаСпособовОбмена.ТекущаяСтраница = Элементы.ГруппаЧерезFTP;
	ИначеЕсли Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		Элементы.ГруппаСпособовОбмена.ТекущаяСтраница = Элементы.ГруппаЧерезКаталог;
	ИначеЕсли Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		Элементы.ГруппаСпособовОбмена.ТекущаяСтраница = Элементы.ГруппаЧерезПочту;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
		И НЕ ЗначениеЗаполнено(ЭлектроннаяПочтаОрганизации) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			ЭлектроннаяПочтаОрганизации = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбмена(ПутьККаталогу)
	
	РежимВыбора = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимВыбора);
	ДиалогКаталога.Заголовок = НСтр("ru = 'Выберите сетевой каталог для обмена'");
	ДиалогКаталога.Каталог   = ПутьККаталогу;
	Если ДиалогКаталога.Выбрать() Тогда
		ПутьККаталогу = ДиалогКаталога.Каталог;
		ЭлектронныеДокументыСлужебныйКлиент.ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоглашениеПоТиповому()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТиповоеСоглашение) Тогда
		ТекстСообщения = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Типовое соглашение");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	СправочникСоглашение = РеквизитФормыВЗначение("Объект");
	
	СписокСвойств = "Организация, СпособОбменаЭД, РесурсВходящихДокументов, СертификатОрганизацииДляРасшифровки,
	|ИдентификаторОрганизации, АдресСервера, ПользовательFTP, ПарольFTP, ПортFTP, ПассивноеСоединениеFTP";
	ЗаполнитьЗначенияСвойств(СправочникСоглашение, Объект.ТиповоеСоглашение.ПолучитьОбъект(),
		СписокСвойств ,"Родитель, Владелец, Код, Наименование");
		
	ЗаполнитьТабличнуюЧасть(СправочникСоглашение.ИсходящиеДокументы,  Объект.ТиповоеСоглашение.ИсходящиеДокументы);
	ЗаполнитьТабличнуюЧасть(СправочникСоглашение.ФорматыФайловОбмена, Объект.ТиповоеСоглашение.ФорматыФайловОбмена);
	ЗаполнитьТабличнуюЧасть(СправочникСоглашение.ВходящиеДокументы,   Объект.ТиповоеСоглашение.ВходящиеДокументы);
	
	ЗначениеВРеквизитФормы(СправочникСоглашение, "Объект");
	ЭтаФорма.Модифицированность = Истина;
	ЗаполнитьРеквизитыФормы();
	ИзменитьНастройкиВидимостиДоступностиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧасть(ТЧПриемник, ТЧИсточник)
	
	ТЧПриемник.Очистить();
	Для Каждого СтрокаИсточник Из ТЧИсточник Цикл
		НоваяСтрокаПриемника = ТЧПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, СтрокаИсточник);
	КонецЦикла;
	
КонецПРоцедуры

&НаСервере
Процедура УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров, ФлагИсходящие)
	
	МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(СтруктураПараметров);
	ТаблицаЗаполнения = ?(ФлагИсходящие, ТаблицаЭтаповИсходящие, ТаблицаЭтаповВходящие);
	Если ТаблицаЗаполнения <> Неопределено Тогда
		ТаблицаЗаполнения.Очистить();
		
		Для Каждого Элемент Из МассивСтатусов Цикл
			ТаблицаЗаполнения.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураПараметровВидаЭД()
	
	СтруктураВозврата = Новый Структура("СпособОбмена, Направление, ВидЭД, ИспользоватьПодпись, ИспользоватьКвитанции");
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруПараметров(СтруктураДанных, ФлагИсходящие)
	
	СтруктураПараметров = СтруктураПараметровВидаЭД();
	Если СтруктураДанных.Формировать Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураДанных);
		СтруктураПараметров.СпособОбмена = Объект.СпособОбменаЭД;
		Если ФлагИсходящие Тогда
			СтруктураПараметров.Направление = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			СтруктураПараметров.Направление = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
	КонецЕсли;
	УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров, ФлагИсходящие);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатыТабличнойЧасти(АдресВХранилище, ИндексСтроки, ПараметрыСертификата)
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДобавитьДанныеПоТабЧасти(ИндексСтроки,  ДанныеФайла, ПараметрыСертификата);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСертификата()
	
	СтруктураВозврата =  Новый Структура("Представление, Отпечаток","","");
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ДобавитьДанныеПоТабЧасти(ИндексСтроки, ДвоичныеДанные, СтруктураПараметровРезультата)
	
	Если ИндексСтроки < 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДвоичныеДанные <> Неопределено Тогда
		СертификатПодписи = Новый СертификатКриптографии(ДвоичныеДанные);
		ПредставлениеСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
			СертификатПодписи.Субъект);
		Отпечаток = Base64Строка(СертификатПодписи.Отпечаток);
		
		ХранилищеЗначения  = Новый ХранилищеЗначения(ДвоичныеДанные);
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		СправочникОбъект.СертификатыПодписейКонтрагента[ИндексСтроки].Сертификат = ХранилищеЗначения;
		СправочникОбъект.СертификатыПодписейКонтрагента[ИндексСтроки].Отпечаток  = Отпечаток;
		СправочникОбъект.Записать();
		
		ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
		ЭтаФорма.Прочитать();
		ПеречитатьДанныеПоСертификатам(СправочникОбъект);
		
		СтруктураПараметровРезультата.Представление=ПредставлениеСертификата; 
		СтруктураПараметровРезультата.Отпечаток = Отпечаток;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеПоСертификатам(ДокументОбъект)
	
	Для Каждого ЭлементСтрока Из ДокументОбъект.СертификатыПодписейКонтрагента Цикл
		ДвоичныеДанныеСертификата = ЭлементСтрока.Сертификат.Получить();
		Если  ДвоичныеДанныеСертификата <> Неопределено Тогда
			Попытка
				СертификатПодписи = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				ПредставлениеСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
					СертификатПодписи.Субъект);
				Объект.СертификатыПодписейКонтрагента[ДокументОбъект.СертификатыПодписейКонтрагента.Индекс(ЭлементСтрока)].ПредставлениеСертификатаКонтрагента = ПредставлениеСертификата;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокумента()
	
	Документ = РеквизитФормыВЗначение("Объект");
	ПеречитатьДанныеПоСертификатам(Документ);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьСертификатВСоглашение(АдресВХранилище)
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	ПредставлениеСертификата = Неопределено;
	ПоместитьВХранилищеСертификат(ДанныеФайла, ПредставлениеСертификата);
	
	ФормаСертификатКонтрагентаДляШифрования = ПредставлениеСертификата;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеСертификат(ДвоичныеДанные = Неопределено, ПредставлениеСертификата = Неопределено)
	
	Если Не ДвоичныеДанные = Неопределено Тогда
		
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		ПредставлениеСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
			СертификатКриптографии.Субъект);
	КонецЕсли;
	
	ХранилищеЗначения  = Новый ХранилищеЗначения(ДвоичныеДанные);
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.СертификатКонтрагентаДляШифрования = ХранилищеЗначения;
	СправочникОбъект.Записать();
	
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	ЭтаФорма.Прочитать();
	
	ПеречитатьДанныеПоСертификатам(СправочникОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАктуальностьДанныхСоглашения(ТекстОшибкиАктуальности)
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.УстановитьПараметр("СтатусСоглашения",  Перечисления.СтатусыСоглашенийЭД.Действует);
	ЗапросПоСоглашениям.УстановитьПараметр("ТекущееСоглашение", Объект.Ссылка);
	ЗапросПоСоглашениям.УстановитьПараметр("Организация",       Объект.Организация);
	ЗапросПоСоглашениям.УстановитьПараметр("Контрагент",        Объект.Контрагент);
	ЗапросПоСоглашениям.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ТипДокумента,
	|	ИСТИНА КАК Входящий,
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|ГДЕ
	|	&ПартнерВходящие
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ЭтоТиповое = ЛОЖЬ
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать = ИСТИНА
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка <> &ТекущееСоглашение
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	|	ЛОЖЬ,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	&ПартнерИсходящие
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать = ИСТИНА
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ЭтоТиповое = ЛОЖЬ
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка <> &ТекущееСоглашение
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент";
	
	ТекстЗапросаПартнерыВходящие =  "ИСТИНА";
	ТекстЗапросаПартнерыИсходящие = "ИСТИНА";
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		
		ТекстЗапросаПартнерыВходящие = "СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент.Партнер = &Партнер";
		ТекстЗапросаПартнерыИсходящие = "СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент.Партнер = &Партнер";
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер");
		ЗапросПоСоглашениям.УстановитьПараметр("Партнер", Партнер);
	КонецЕсли;
	ЗапросПоСоглашениям.Текст = СтрЗаменить(ЗапросПоСоглашениям.Текст, "&ПартнерВходящие", ТекстЗапросаПартнерыВходящие);
	ЗапросПоСоглашениям.Текст = СтрЗаменить(ЗапросПоСоглашениям.Текст, "&ПартнерИсходящие", ТекстЗапросаПартнерыИсходящие);
	
	Результат = ЗапросПоСоглашениям.Выполнить().Выгрузить();
	
	ТекстОшибкиИсходящие = "";
	ТекстОшибкиВходящие = "";
	ПроверитьУникальностьДокументов(Объект.ИсходящиеДокументы, Результат, ТекстОшибкиИсходящие);
	ПроверитьУникальностьДокументов(Объект.ВходящиеДокументы, Результат, ТекстОшибкиВходящие, Истина);
	
	ТекстОшибкиАктуальности = ТекстОшибкиИсходящие + ТекстОшибкиВходящие;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьДокументов(ТабличнаяЧастьДокументов, РезультатПроверки, ТекстОшибки, ПроверятьВходящиеДокументы = Ложь)
	
	ОтборСуществующихДокументов = Новый Структура("Входящий", ПроверятьВходящиеДокументы);
	ВидыДокументовДругихСоглашений = РезультатПроверки.НайтиСтроки(ОтборСуществующихДокументов);
	Если ВидыДокументовДругихСоглашений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийДокументСоглашения Из ТабличнаяЧастьДокументов Цикл
		Если ТекущийДокументСоглашения.Формировать Тогда
			Для Каждого ДокументВДругихСоглашениях Из ВидыДокументовДругихСоглашений Цикл
				Если ТекущийДокументСоглашения[?(ПроверятьВходящиеДокументы, "ВходящийДокумент", "ИсходящийДокумент")] = ДокументВДругихСоглашениях.ТипДокумента Тогда
					ТекстОшибки = НСтр("ru = 'По виду электронных документов %1 %2 
					|уже существует действующее соглашение между участниками %3 - %4:
					|%5.
					|'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ДокументВДругихСоглашениях.ТипДокумента, ?(ПроверятьВходящиеДокументы, "Входящий", "Исходящий"),
						Объект.Организация, Объект.Контрагент, ДокументВДругихСоглашениях.Соглашение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СоглашениеЗаписано()
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоТиповое Тогда
		ТекстВопроса = НСтр("ru = 'Внешние сертификаты можно выбирать только в записанном соглашении.
							|Записать соглашение?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Возврат Ответ = КодВозвратаДиалога.Да И ОбъектЗаполнен();
	
КонецФункции

&НаКлиенте
Процедура ИзменитьНадписьНаправлениеДокументов()
	
	Если Объект.ЭтоТиповое Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Кому: %1'"), Объект.Организация);
		Элементы.НадписьНаправлениеДокументовВх.Заголовок  = ТекстЗаголовка;
		
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='От кого: %1'"), Объект.Организация);
		Элементы.НадписьНаправлениеДокументовИсх.Заголовок = ТекстЗаголовка;
	Иначе
		
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='От кого: %1, кому: %2'"),
			Объект.Контрагент, Объект.Организация);
		Элементы.НадписьНаправлениеДокументовВх.Заголовок  = ТекстЗаголовка;
		
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='От кого: %1, кому: %2'"),
			Объект.Организация, Объект.Контрагент);
		Элементы.НадписьНаправлениеДокументовИсх.Заголовок = ТекстЗаголовка;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьКоманд()
	
	АктуальныеЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	Если АктуальныеЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		Если НЕ КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.Найти(
				"ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению") = Неопределено Тогда
			КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Видимость = Ложь;
		КонецЕсли;
		Если НЕ КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.Найти(
				"ФормаОбработкаЭлектронныеДокументыПереотправитьЭД") = Неопределено Тогда
			КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаОбработкаЭлектронныеДокументыПереотправитьЭД.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИсходящийДокумент, Формировать", Перечисления.ВидыЭД.КаталогТоваров, Истина);
	Если Объект.Ссылка.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
		Если НЕ КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.Найти(
				"ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению") = Неопределено Тогда
			КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Доступность = Истина;
		КонецЕсли;
		Если НЕ КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.Найти(
				"ФормаОбработкаЭлектронныеДокументыПереотправитьЭД") = Неопределено Тогда
			КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаОбработкаЭлектронныеДокументыПереотправитьЭД.Доступность = Истина;
		КонецЕсли;
	Иначе
		Если НЕ КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.Найти(
				"ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению") = Неопределено Тогда
			КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Доступность = Ложь;
		КонецЕсли;
		Если НЕ КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.найти(
				"ФормаОбработкаЭлектронныеДокументыПереотправитьЭД") = Неопределено Тогда
			КоманднаяПанель.ПодчиненныеЭлементы.ФормаЭД.ПодчиненныеЭлементы.ФормаОбработкаЭлектронныеДокументыПереотправитьЭД.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ЭтоТиповое Тогда
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСправочникСоглашенияОбИспользованииЭДТестНастроекСоглашения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуЭтапов(ТекущиеДанные, ФлагИсходящие)
	
	СтруктураДанных = Новый Структура("ИспользоватьПодпись, ИспользоватьКвитанции, Формировать, ВидЭД");
	СтруктураДанных.ИспользоватьПодпись = ТекущиеДанные.ИспользоватьЭЦП;
	СтруктураДанных.ИспользоватьКвитанции = ТекущиеДанные.ОжидатьКвитанциюОДоставке;
	СтруктураДанных.Формировать = ТекущиеДанные.Формировать;
	СтруктураДанных.ВидЭД = ?(ФлагИсходящие, ТекущиеДанные.ИсходящийДокумент, ТекущиеДанные.ВходящийДокумент);
	ЗаполнитьСтруктуруПараметров(СтруктураДанных, ФлагИсходящие);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Объект.ЭтоТиповое Тогда
		ТекстЗаголовка = НСтр("ru='Типовое соглашение об использовании электронных документов'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Соглашение с контрагентом об использовании электронных документов (прямой обмен)'");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ТекстЗаголовка + НСтр("ru=' (создание)'");
	Иначе
		ЭтаФорма.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКаталога(ЗначениеРеквизита)
	
	КаталогОбмена(ЗначениеРеквизита);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()

	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		FTPКаталогИсходящихДокументов = Объект.РесурсИсходящихДокументов;
		FTPКаталогВходящихДокументов  = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		КаталогИсходящихДокументов    = Объект.РесурсИсходящихДокументов;
		КаталогВходящихДокументов     = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ЭлектроннаяПочтаКонтрагента   = Объект.РесурсИсходящихДокументов;
		ЭлектроннаяПочтаОрганизации   = Объект.РесурсВходящихДокументов;
	КонецЕсли;
	
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер");
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			ШаблонСообщения = НСтр("ru = 'Партнер: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Партнер);
			Элементы.ДекорацияПартнер.Заголовок = ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерезаполнитьПоТиповому(Команда)
	
	ЗаполнитьСоглашениеПоТиповому();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовПриИзменении(Элемент)
	
	Если СокрЛП(Объект.РесурсВходящихДокументов) <> СокрЛП(КаталогВходящихДокументов) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовПриИзменении(Элемент)
	
	Если СокрЛП(Объект.РесурсИсходящихДокументов) <> СокрЛП(КаталогИсходящихДокументов) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменитьНадписьНаправлениеДокументов();
	ЗаполнитьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбменаЭДПриИзменении(Элемент)
	
	УстановитьЗначенияПоУмолчанию();
	ИзменитьНастройкиВидимостиДоступностиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторКонтрагента) Тогда
		Если ВыбранноеЗначение <> Объект.Контрагент Тогда
			ТекстВопроса = НСтр("ru = 'Был изменен контрагент. Изменить идентификатор обмена контрагента?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				УстановитьИдентификатор("Контрагент", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	Иначе
		УстановитьИдентификатор("Контрагент", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторОрганизации) Тогда
		Если ВыбранноеЗначение <> Объект.Организация Тогда
			ТекстВопроса = НСтр("ru = 'Была изменена организация. Изменить идентификатор обмена организации?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				УстановитьИдентификатор("Организация", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	Иначе
		УстановитьИдентификатор("Организация", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповоеСоглашениеПриИзменении(Элемент)
	
	Если НЕ Объект.ТиповоеСоглашение.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить соглашение по типовому?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСоглашениеПоТиповому();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСертификатыПодписейПриИзменении(Элемент)
	
	ОпределитьДоступностьСертификатовПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ПоместитьВХранилищеСертификат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияОчистка(Элемент, СтандартнаяОбработка)
	
	ПоместитьВХранилищеСертификат();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ СоглашениеЗаписано() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеФайл   = "";
	АдресВХранилище = Неопределено;
	Если ПоместитьФайл(АдресВХранилище, "", ВыбранныеФайл, Истина, УникальныйИдентификатор) Тогда
		ПоместитьСертификатВСоглашение(АдресВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительПриИзменении(Элемент)
	
	ИзменитьНадписьНаправлениеДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПриИзменении(Элемент)
	
	Объект.ИдентификаторОрганизации = СокрЛП(Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторКонтрагентаПриИзменении(Элемент)
	
	Объект.ИдентификаторКонтрагента = СокрЛП(Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповоеСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.ФормаВыбора", Новый Структура("Типовое", Истина),
		Элементы.ТиповоеСоглашение);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(КаталогВходящихДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(КаталогИсходящихДокументов);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ИСХОДЯЩИЕ ДОКУМЕНТЫ

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные.ИспользоватьЭЦП И НЕ Элемент.ТекущиеДанные.Формировать Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭЦП" Тогда
			Элемент.ТекущиеДанные.Формировать = Истина;
		Иначе
			Элемент.ТекущиеДанные.ИспользоватьЭЦП = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		
		Элемент.ТекущиеДанные.ОжидатьКвитанциюОДоставке = Элемент.ТекущиеДанные.Формировать;
		Элемент.ТекущиеДанные.ИспользоватьЭЦП           = Элемент.ТекущиеДанные.Формировать;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	ЗаполнитьТаблицуЭтапов(ТекущиеДанные, Истина);
	
	УстановитьВидимостьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыИспользоватьОбменПриИзменении(Элемент)
	
	ЗначениеЭлемента = Элемент.Родитель.ТекущиеДанные.Формировать;
	Если НЕ ЗначениеЭлемента Тогда
		
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = ЗначениеЭлемента;
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП           = ЗначениеЭлемента;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	ЗаполнитьТаблицуЭтапов(ТекущиеДанные, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ВХОДЯЩИЕ ДОКУМЕНТЫ

&НаКлиенте
Процедура ВходящиеДокументыПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные.ИспользоватьЭЦП И НЕ Элемент.ТекущиеДанные.Формировать Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ВходящиеДокументыИспользоватьЭЦП" Тогда
			Элемент.ТекущиеДанные.Формировать = Истина;
		Иначе
			Элемент.ТекущиеДанные.ИспользоватьЭЦП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ВходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		
		Элемент.ТекущиеДанные.ОжидатьКвитанциюОДоставке = Элемент.ТекущиеДанные.Формировать;
		Элемент.ТекущиеДанные.ИспользоватьЭЦП           = Элемент.ТекущиеДанные.Формировать;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ВходящиеДокументы.ТекущиеДанные;
	ЗаполнитьТаблицуЭтапов(ТекущиеДанные, Ложь);
	
	УстановитьВидимостьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыИспользоватьЭЦППриИзменении(Элемент)
	
	Если НЕ Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП  Тогда
		
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыОжидатьКвитанциюОДоставкеПриИзменении(Элемент)
	
	Если Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке Тогда
		
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыИспользоватьОбменПриИзменении(Элемент)
	
	ЗначениеЭлемента = Элемент.Родитель.ТекущиеДанные.Формировать;
	Если НЕ ЗначениеЭлемента Тогда
		
		Элемент.Родитель.ТекущиеДанные.ОжидатьКвитанциюОДоставке = ЗначениеЭлемента;
		Элемент.Родитель.ТекущиеДанные.ИспользоватьЭЦП           = ЗначениеЭлемента;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВходящиеДокументы.ТекущиеДанные;
	ЗаполнитьТаблицуЭтапов(ТекущиеДанные, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ СЕРТИФИКАТЫ ПОДПИСЕЙ КОНТРАГЕНТА

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаПриИзменении(Элемент)
	
	Если НЕ СоглашениеЗаписано() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		СтруктураПараметров = СтруктураСертификата();
		ДобавитьДанныеПоТабЧасти(
			Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные),
			Неопределено,
			СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ СоглашениеЗаписано() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеФайл   = "";
	АдресВХранилище = Неопределено;
	Если ПоместитьФайл(АдресВХранилище, "", ВыбранныеФайл, Истина, УникальныйИдентификатор) Тогда
		
		ИндексСтроки = Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные);
		ПараметрыДобавленногоСертификата = СтруктураСертификата();
		
		ДобавитьСертификатыТабличнойЧасти(АдресВХранилище, ИндексСтроки, ПараметрыДобавленногоСертификата);
		Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.ПредставлениеСертификатаКонтрагента = ПараметрыДобавленногоСертификата.Представление;
		Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.Отпечаток = ПараметрыДобавленногоСертификата.Отпечаток;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтруктураПараметров = СтруктураСертификата();
	ДобавитьДанныеПоТабЧасти(
		Объект.СертификатыПодписейКонтрагента.Индекс(Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные), 
		Неопределено,
		СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПослеУдаления(Элемент)
	
	ОбновитьДанныеДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Если объект - является соглашением-Интеркампани, то ничего
	// не выполняем на сервере и при переходе процедуру при открытии, откроем нужную форму.
	Если Объект.ЭтоИнтеркампани ИЛИ Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
		Возврат;
	Иначе
		ЭтоСоглашениеПрямогоОбменаЭД = ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(Объект.СпособОбменаЭД);
		Если НЕ ЭтоСоглашениеПрямогоОбменаЭД Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.Свойство("Типовое") И Параметры.Типовое Тогда
			Объект.ЭтоТиповое = Истина;
		КонецЕсли;
		Объект.ЭтоИнтеркампани  = Ложь;
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.НеСогласовано;
		Объект.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия20;
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда // не копирование
			Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог;
			Объект.Контрагент     = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
		Иначе
			// При копировании не переносим настройки шифрования и эталонные сертификаты контрагента
			Объект.ПроверятьСертификатыПодписей = Ложь;
			Объект.СертификатыПодписейКонтрагента.Очистить();
		КонецЕсли;
	Иначе
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		Попытка
			ДвоичныеДанныеСертификата  = ДокументОбъект.СертификатКонтрагентаДляШифрования.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				ПредставлениеСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
					СертификатКриптографии.Субъект);
				ФормаСертификатКонтрагентаДляШифрования = ПредставлениеСертификата;
			КонецЕсли;
			ОпределитьДоступностьСертификатовПодписей();
			ПеречитатьДанныеПоСертификатам(ДокументОбъект);
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'открытие формы соглашения'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	ЗаполнитьФорматыФайловДоступнымиЗначениями();
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	
	ИспользуютсяЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
	Если НЕ ИспользуютсяЭЦП Тогда
		Элементы.СертификатКонтрагентаДляШифрования.Видимость  = Ложь;
		Элементы.СертификатОрганизацииДляРасшифровки.Видимость = Ложь;
		Элементы.ИсходящиеДокументыИспользоватьЭЦП.Видимость   = Ложь;
		Элементы.ВходящиеДокументыИспользоватьЭЦП.Видимость    = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаШапкаПраво.Видимость              = НЕ Объект.ЭтоТиповое;
	Элементы.ТиповоеСоглашение.Видимость             = НЕ Объект.ЭтоТиповое;
	Элементы.СертификатыЭЦП.Видимость                = НЕ Объект.ЭтоТиповое
		И ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
	Элементы.ФормаЭД.Видимость                       = НЕ Объект.ЭтоТиповое;
	Элементы.ЗаполнитьПоТиповомуСоглашению.Видимость = НЕ Объект.ЭтоТиповое;
	Элементы.FTPКаталогИсходящихДокументов.Видимость = НЕ Объект.ЭтоТиповое;
	Элементы.КаталогИсходящихДокументов.Видимость    = НЕ Объект.ЭтоТиповое;
	Элементы.ЭлектроннаяПочтаКонтрагента.Видимость   = НЕ Объект.ЭтоТиповое;
	
	Если Объект.ЭтоТиповое Тогда
		Для Каждого Элемент Из Элементы.ГруппаШапкаПраво.ПодчиненныеЭлементы Цикл
			Элемент.РастягиватьПоГоризонтали = Истина;
		КонецЦикла;
	КонецЕсли;
	ИзменитьНастройкиВидимостиДоступностиФормы();
	ОбновитьЗаголовокФормы();
	ЗаполнитьРеквизитыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Если объект - является соглашением-Интеркампани, то ничего
	// не выполняем на сервере и при переходе процедуру при открытии, откроем нужную форму.
	Если Объект.ЭтоИнтеркампани ИЛИ Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
		Возврат;
	Иначе
		ЭтоСоглашениеПрямогоОбменаЭД = ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(Объект.СпособОбменаЭД);
		Если НЕ ЭтоСоглашениеПрямогоОбменаЭД Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьДоступностьСертификатовПодписей();
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВходящиеДокументы Тогда
		
		Если НЕ Элементы.ВходящиеДокументы.ТекущаяСтрока = Неопределено  Тогда
			
			СтруктураПараметров = СтруктураПараметровВидаЭД();
			СтруктураПараметров.СпособОбмена          = Объект.СпособОбменаЭД;
			СтруктураПараметров.Направление           = Перечисления.НаправленияЭД.Входящий;
			СтруктураПараметров.ИспользоватьПодпись   = Объект.ВходящиеДокументы[Элементы.ВходящиеДокументы.ТекущаяСтрока].ИспользоватьЭЦП;
			СтруктураПараметров.ИспользоватьКвитанции = Объект.ВходящиеДокументы[Элементы.ВходящиеДокументы.ТекущаяСтрока].ОжидатьКвитанциюОДоставке;
			
			Если НЕ Объект.ВходящиеДокументы[Элементы.ВходящиеДокументы.ТекущаяСтрока].Формировать Тогда
				СтруктураПараметров = Неопределено;
			КонецЕсли;
			
			УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров, Ложь);
			
		КонецЕсли;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаИсходящиеДокументы Тогда
		
		Если НЕ Элементы.ИсходящиеДокументы.ТекущаяСтрока = Неопределено Тогда
			
			СтруктураПараметров = СтруктураПараметровВидаЭД();
			СтруктураПараметров.СпособОбмена          = Объект.СпособОбменаЭД;
			СтруктураПараметров.Направление           = Перечисления.НаправленияЭД.Исходящий;
			СтруктураПараметров.ИспользоватьПодпись   = Объект.ИсходящиеДокументы[Элементы.ИсходящиеДокументы.ТекущаяСтрока].ИспользоватьЭЦП;
			СтруктураПараметров.ИспользоватьКвитанции = Объект.ИсходящиеДокументы[Элементы.ИсходящиеДокументы.ТекущаяСтрока].ОжидатьКвитанциюОДоставке;
			
			Если НЕ Объект.ИсходящиеДокументы[Элементы.ИсходящиеДокументы.ТекущаяСтрока].Формировать Тогда
				СтруктураПараметров = Неопределено;
			КонецЕсли;
			
			УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров, Истина);
			
		КонецЕсли;
	КонецЕсли;
	ОбновитьЗаголовокФормы();
	
	ИзменитьНастройкиВидимостиДоступностиФормы();
	ЗаполнитьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ЭтоИнтеркампани Тогда
		
		Отказ = Истина;
		Параметр = Новый Структура("Ключ", Объект.Ссылка);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлементаИнтеркампани", Параметр);
		
	ИначеЕсли Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		Отказ = Истина;
		Параметр = Новый Структура("Ключ", Объект.Ссылка);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлементаЧерезОЭДО", Параметр);
		
	ИначеЕсли Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка") Тогда
		
		Отказ = Истина;
		Параметр = Новый Структура("Ключ", Объект.Ссылка);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлементаБанк", Параметр);
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
		Элементы.КаталогИсходящихДокументов.КнопкаВыбора = Ложь;
	#КонецЕсли
	
	ИзменитьНадписьНаправлениеДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	МассивСтрок = Объект.ФорматыФайловОбмена.НайтиСтроки(Новый Структура("Использовать, ФорматФайла",
		Истина, ПредопределенноеЗначение("Перечисление.ФорматыФайловОбменаЭД.XML")));
		
	ОчиститьСообщения();
	Если МассивСтрок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Формат исходящего документа ""ДокументХML(*.xml)"" обязателен к использованию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
			"ФорматыФайловОбменаФорматФайла", , Отказ);
	КонецЕсли;
	
	Если НЕ Объект.ЭтоТиповое Тогда
		Если (Объект.СертификатОрганизацииДляРасшифровки.Пустая()
			И НЕ ПустаяСтрока(Элементы.СертификатКонтрагентаДляШифрования.ТекстРедактирования))
			ИЛИ (НЕ Объект.СертификатОрганизацииДляРасшифровки.Пустая()
			И ПустаяСтрока(Элементы.СертификатКонтрагентаДляШифрования.ТекстРедактирования)) Тогда
			
			ТекстСообщения = НСтр("ru='Для корректной работы шифрования необходимо
			|одновременно указывать сертификаты шифрования для организации и контрагента.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		
		Если Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
			ТекстОшибкиАктуальности = "";
			ПроверитьАктуальностьДанныхСоглашения(ТекстОшибкиАктуальности);
			Если НЕ ПустаяСтрока(ТекстОшибкиАктуальности) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиАктуальности, , , , Отказ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КаталогВходящихДокументов) И ЗначениеЗаполнено(КаталогИсходящихДокументов)
				И НЕ (ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогВходящихДокументов)
				И ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогИсходящихДокументов)) Тогда
				
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СпособОбменаЭД) Тогда
			ТекстСообщения = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Способ обмена");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СписокСтрокКУдалению = Новый СписокЗначений;
	Для каждого СтрокаСертификата ИЗ ТекущийОбъект.СертификатыПодписейКонтрагента Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСертификата.Отпечаток) Тогда
			СписокСтрокКУдалению.Добавить(СтрокаСертификата.НомерСтроки);
		КонецЕсли;
	КонецЦикла;

	СписокСтрокКУдалению.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого Запись ИЗ СписокСтрокКУдалению Цикл
		ТекущийОбъект.СертификатыПодписейКонтрагента.Удалить(Запись.Значение-1);
	КонецЦикла;
	
	Если ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = FTPКаталогВходящихДокументов;
		ТекущийОбъект.РесурсИсходящихДокументов = FTPКаталогИсходящихДокументов;
	ИначеЕсли ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = КаталогВходящихДокументов;
		ТекущийОбъект.РесурсИсходящихДокументов = КаталогИсходящихДокументов;
	ИначеЕсли ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = ЭлектроннаяПочтаОрганизации;
		ТекущийОбъект.РесурсИсходящихДокументов = ЭлектроннаяПочтаКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ПеречитатьДанныеПоСертификатам(ДокументОбъект);
	УстановитьВидимостьДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.Действует Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		ПроверяемыеРеквизиты.Добавить("FTPКаталогВходящихДокументов");
		ПроверяемыеРеквизиты.Добавить("FTPКаталогИсходящихДокументов");
	ИначеЕсли Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		ПроверяемыеРеквизиты.Добавить("КаталогВходящихДокументов");
		ПроверяемыеРеквизиты.Добавить("КаталогИсходящихДокументов");
	ИначеЕсли Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ПроверяемыеРеквизиты.Добавить("ЭлектроннаяПочтаОрганизации");
		ПроверяемыеРеквизиты.Добавить("ЭлектроннаяПочтаКонтрагента");
	КонецЕсли;
	
КонецПроцедуры
