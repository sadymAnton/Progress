////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры, функции

Процедура ВыполнитьАлгоритмУправленческогоУчета(Строка, ПараметрыОтбора, СписокДокументов) Экспорт
	
	Если Строка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение 
	 ИЛИ Строка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока Тогда
		ПараметрыОтбора.Вставить("ИмяДокумента",	"Увольнение");
		ПараметрыОтбора.Вставить("Организация",		Строка.Организация);
		НайденныеСтроки = СписокДокументов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Док = СписокДокументов.Добавить();
			Док.ИмяДокумента	= "Увольнение";
			Док.Организация		= Строка.Организация;
			Док.ИмяТЧ			= "Работники";
		Иначе
			Док = НайденныеСтроки[0];
		КонецЕсли;
			
		Если Док.ТЧ = Неопределено Тогда
			ТЧ = Новый ТаблицаЗначений;
			Для Каждого Реквизит Из Метаданные.Документы.Увольнение.ТабличныеЧасти.Работники.Реквизиты Цикл
				ТЧ.Колонки.Добавить(Реквизит.Имя);
			КонецЦикла;
			Док.ТЧ = ТЧ;
		Иначе
			ТЧ = Док.ТЧ;
		КонецЕсли;
		
		СтрокаТаб = ТЧ.Добавить();
		СтрокаТаб.Сотрудник			= Строка.Сотрудник;
		СтрокаТаб.ДатаУвольнения	= Строка.ДатаИзменения;
		СтрокаТаб.ПричинаУвольнения	= Строка.ПланируемоеСобытие;
		
	ИначеЕсли Строка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение Тогда
		ПараметрыОтбора.Вставить("ИмяДокумента",	"КадровоеПеремещение");
		ПараметрыОтбора.Вставить("Организация",		Строка.Организация);
		НайденныеСтроки = СписокДокументов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Док = СписокДокументов.Добавить();
			Док.ИмяДокумента	= "КадровоеПеремещение";
			Док.Организация		= Строка.Организация;
			Док.ИмяТЧ			= "Работники";
		Иначе
			Док = НайденныеСтроки[0];
		КонецЕсли;
			
		Если Док.ТЧ = Неопределено Тогда
			ТЧ = Новый ТаблицаЗначений;
			Для Каждого Реквизит Из Метаданные.Документы.КадровоеПеремещение.ТабличныеЧасти.Работники.Реквизиты Цикл
				ТЧ.Колонки.Добавить(Реквизит.Имя);
			КонецЦикла;
			Док.ТЧ = ТЧ;
		Иначе
			ТЧ = Док.ТЧ;
		КонецЕсли;
		
		СтрокаТаб = ТЧ.Добавить();
		СтрокаТаб.Сотрудник				= Строка.Сотрудник;
		СтрокаТаб.ДатаНачала			= Строка.ДатаИзменения;
		СтрокаТаб.НовоеПодразделение	= Строка.Подразделение;
		СтрокаТаб.НоваяДолжность		= Строка.Должность;
		СтрокаТаб.ЗанимаемыхСтавок		= Строка.ЗанимаемыхСтавок;
		СтрокаТаб.ГрафикРаботы			= Строка.ГрафикРаботы;
		
	ИначеЕсли Строка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока Тогда
		ПараметрыОтбора.Вставить("ИмяДокумента",	"РезультатИспытательногоСрока");
		ПараметрыОтбора.Вставить("Организация",		Строка.Организация);
		НайденныеСтроки = СписокДокументов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Док = СписокДокументов.Добавить();
			Док.ИмяДокумента	= "РезультатИспытательногоСрока";
		Иначе
			Док = НайденныеСтроки[0];
		КонецЕсли;
			
		Если Док.ТЧ = Неопределено Тогда
			ТЧ = Новый ТаблицаЗначений;
			Для Каждого Реквизит Из Метаданные.Документы.РезультатИспытательногоСрока.Реквизиты Цикл
				ТЧ.Колонки.Добавить(Реквизит.Имя);
			КонецЦикла;
			Док.ТЧ = ТЧ;
		Иначе
			ТЧ = Док.ТЧ;
		КонецЕсли;
		
		СтрокаТаб = ТЧ.Добавить();
		СтрокаТаб.Сотрудник				= Строка.Сотрудник;
		СтрокаТаб.Физлицо				= Строка.Физлицо;
		СтрокаТаб.ДатаИзменения			= Строка.ДатаИзменения;
		СтрокаТаб.Результат				= Перечисления.РезультатыИспытательногоСрока.Положительный;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции объекта

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы 

