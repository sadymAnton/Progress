////////////////////////////////////////////////////////////////////////////////
// Содержит процедуры для заполнения форм отчетности по НДС:
//- налоговой декларации по НДС с 1 квартала 2015 года
//
////////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьОтчетНДСФормаОтчета2015Кв1(ПараметрыЗаполненияОтчета) Экспорт
	
	ПараметрыЗаполненияОтчета.Вставить("ПравилаЗаполнения", "2015Кв1");
	ЗаполнитьДекларациюНДС(ПараметрыЗаполненияОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетНДСФормаОтчета2017Кв1(ПараметрыЗаполненияОтчета) Экспорт
	
	ПараметрыЗаполненияОтчета.Вставить("ПравилаЗаполнения", "2017Кв1");
	ЗаполнитьДекларациюНДС(ПараметрыЗаполненияОтчета);
	
КонецПроцедуры

// Заполняет контейнер с показателями декларации по НДС
// Для версии отчета ФормаОтчета2015Кв1
Процедура ЗаполнитьДекларациюНДС(ПараметрыЗаполненияОтчета)
	
	АдресХранилищаЗаполненияОтчета = ПараметрыЗаполненияОтчета.АдресХранилища;
	
	ПараметрыОтчета = ПолучитьИзВременногоХранилища(АдресХранилищаЗаполненияОтчета);
	Контейнер = ПараметрыОтчета.Контейнер;

	Если ПараметрыОтчета.Свойство("Декларация")
		И ЗначениеЗаполнено(ПараметрыОтчета.Декларация) Тогда
		СсылкаНаДекларацию = ПараметрыОтчета.Декларация;
		РегламентированнаяОтчетность.УдалитьДополнительныеФайлыДекларацииНДС(СсылкаНаДекларацию);
	Иначе
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилищаЗаполненияОтчета);
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(
		ПараметрыОтчета.мДатаКонцаПериодаОтчета, Отказ, ПараметрыОтчета.Организация, "регл", Ложь);

	Если Отказ Тогда
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилищаЗаполненияОтчета);
		Возврат;
	Иначе
		ОрганизацияНеПлательшикНДС = УчетнаяПолитика.СистемаНалогообложения <> Перечисления.СистемыНалогообложения.Общая;
		ОрганизацияОсвобожденаОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение декларации по НДС'"),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Формирование разделов 1-7'"));

	ОбщиеПараметрыЗапросов = Новый Структура;
	ОбщиеПараметрыЗапросов.Вставить("Организация", СписокОрганизаций);
	ОбщиеПараметрыЗапросов.Вставить("НачалоПериода", НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	ОбщиеПараметрыЗапросов.Вставить("КонецПериода",  КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	ОбщиеПараметрыЗапросов.Вставить("КонецПериодаУчитываемыхКорректировок", 
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи),
		ПараметрыОтчета.ДатаПодписи, КонецДня(ПараметрыОтчета.ДатаПодписи)));
	ОбщиеПараметрыЗапросов.Вставить("СУчетомКорректировок", НЕ ПараметрыОтчета.ВидДокумента = 0);
		
	Запрос = Новый Запрос;
	УстановитьОбщиеПараметрыЗапроса(Запрос, ОбщиеПараметрыЗапросов);
	Запрос.УстановитьПараметр("ВесьОборотЗаПериод", 
		?(ПараметрыОтчета.Свойство("ВесьОборотЗаПериод"),ПараметрыОтчета.ВесьОборотЗаПериод, Ложь));
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОтчета.Организация, "ИностраннаяОрганизация,КПП");
	Запрос.УстановитьПараметр("КППИностраннойОрганизации", 
		?(РеквизитыОрганизации.ИностраннаяОрганизация, РеквизитыОрганизации.КПП, ""));
		
	// События
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	// Суммы связанные с расчетами по оплате включаются в общий объем реализации.
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеРеализацияРаздел2 = Новый СписокЗначений;
	СобытиеРеализацияРаздел2.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализацияРаздел2.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	Запрос.УстановитьПараметр("СобытиеРеализацияРаздел2", СобытиеРеализацияРаздел2);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеВосстановлениеНДС", СобытиеВосстановлениеНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);

	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	// Виды ценностей
	ВидыЦенностейНеРеализация = Новый СписокЗначений;
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностейСтр010_040 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейНеРеализация.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр010_040.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр010_040", ВидыЦенностейСтр010_040);
	
	ВидыЦенностейСтр060 = Новый СписокЗначений;
	ВидыЦенностейСтр060.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр060", ВидыЦенностейСтр060);
	
	ВидыЦенностейСтр070 = Новый СписокЗначений;
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр070", ВидыЦенностейСтр070);
	
	ВидыЦенностейСтр090 = Новый СписокЗначений;
	ВидыЦенностейСтр090.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр090", ВидыЦенностейСтр090);
	
	ВидыЦенностейСтр130 =  Новый СписокЗначений;
	ВидыЦенностейСтр130.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр130", ВидыЦенностейСтр130);
	
	ВидыЦенностейСтр140 =  Новый СписокЗначений;
	ВидыЦенностейСтр140.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр140", ВидыЦенностейСтр140);
	
	ВидыЦенностейСтр150 =  Новый СписокЗначений;
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр150", ВидыЦенностейСтр150);
	
	ВидыЦенностейСтр170 =  Новый СписокЗначений;
	ВидыЦенностейСтр170.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр170", ВидыЦенностейСтр170);
	
	ВидыЦенностейСтр180 =  Новый СписокЗначений;
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр180", ВидыЦенностейСтр180);
	
	ВидыЦенностейСтр120 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейСтр130.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр140.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр150.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр170.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр180.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр120.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр120", ВидыЦенностейСтр120);
	
	ВидыЦенностей_1011703 =  Новый СписокЗначений;
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_1011712", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011703", ВидыЦенностей_1011703);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011707", Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностиНА =  Новый СписокЗначений;
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностиНА);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС18",	 Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаОбщиеДанные();
	Запрос.Выполнить();

	Если Контейнер.Свойство("Раздел2") Тогда
		
		Раздел2 = Контейнер.Раздел2;
		
		Запрос.Текст = ТекстЗапросаРаздел2();
		ТаблицаРаздел2 = Запрос.Выполнить().Выгрузить();
		Раздел2.Вставить("ТаблицаРаздел2", ТаблицаРаздел2);
		
	КонецЕсли;

	Если Контейнер.Свойство("Раздел3")
		И НЕ ОрганизацияНеПлательшикНДС 
		И НЕ ОрганизацияОсвобожденаОтУплатыНДС Тогда
		
		Раздел3 = Контейнер.Раздел3;
		
		Запрос.Текст = ТекстЗапросаРаздел3Начисления();
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапросаРаздел3Вычеты();
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3, ЗначенияДляЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел3_Прил1") Тогда
		
		Раздел3_Прил1 = Контейнер.Раздел3_Прил1;
	
		Если КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости КАК ОбъектНедвижимости,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
			|			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
			|		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
			|	КОНЕЦ КАК П000310001000,
			|	ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.АдресМестонахождения, 1, 250) КАК АдресМестонахождения,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.КодРегиона КАК П000310002000_02,
			|	ВЫБОР
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
			|			ТОГДА ""1011803""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
			|			ТОГДА ""1011801""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
			|			ТОГДА ""1011802""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК П000310003000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ КАК П000310004000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ КАК П000310005000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости КАК П000310006000,
			|	СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДС) КАК П000310007000,
			|	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата) КАК П000310008001_,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций КАК П000310008002_,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС КАК П000310008003_,
			|	СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДСВосстановлен) КАК П000310008004_
			|ИЗ
			|	Документ.ВосстановлениеНДСПоОбъектамНедвижимости.ОбъектыНедвижимости КАК ВосстановлениеНДСпоОбъектамНедвижимости
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНДСПоОбъектамНедвижимости.СчетаФактуры КАК ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры
			|		ПО ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка
			|			И ВосстановлениеНДСпоОбъектамНедвижимости.КлючСтроки = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КлючСтроки
			|ГДЕ
			|	ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Организация В(&Организация)
			|	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата <= &КонецПериода
			|	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости,
			|	ВЫБОР
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
			|			ТОГДА ""1011803""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
			|			ТОГДА ""1011801""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
			|			ТОГДА ""1011802""
			|		ИНАЧЕ """"
			|	КОНЕЦ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций,
			|	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата),
			|	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС,
			|	ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.АдресМестонахождения, 1, 250),
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.КодРегиона,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
			|			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
			|		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
			|	КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	П000310008001_
			|ИТОГИ
			|	СУММА(П000310006000),
			|	СУММА(П000310007000),
			|	СУММА(П000310008001_),
			|	СУММА(П000310008003_),
			|	СУММА(П000310008004_)
			|ПО
			|	ОбъектНедвижимости,
			|	П000310003000
			|АВТОУПОРЯДОЧИВАНИЕ";
			
			ЗапросРаздел3_Прил1 = Запрос.Выполнить();
			Раздел3_Прил1.Вставить("Выборка", ЗапросРаздел3_Прил1);
			
		КонецЕсли;
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел4") 
		И НЕ ОрганизацияНеПлательшикНДС Тогда
		
		Раздел4 = Контейнер.Раздел4;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	""1011410"" КАК П000400001003_1,
		|	""1011410"" КАК П0004М1001003_1,
		|	""1011410"" КАК П000400001003,
		|	""1011410"" КАК П0004М1001003,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400002003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0004М1002003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400002003,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0004М1002003
		|ПОМЕСТИТЬ ВТ_Раздел4Начисления
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеПодтвержденаСтавка0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Раздел4Начисления.П000400001003_1,
		|	ВТ_Раздел4Начисления.П0004М1001003_1,
		|	ВТ_Раздел4Начисления.П000400001003,
		|	ВТ_Раздел4Начисления.П0004М1001003,
		|	ВТ_Раздел4Начисления.П000400002003_1,
		|	ВТ_Раздел4Начисления.П0004М1002003_1,
		|	ВТ_Раздел4Начисления.П000400002003,
		|	ВТ_Раздел4Начисления.П0004М1002003
		|ИЗ
		|	ВТ_Раздел4Начисления КАК ВТ_Раздел4Начисления
		|ГДЕ
		|	ВТ_Раздел4Начисления.П000400002003 <> 0";
		
		Раздел4Начисления = Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400003003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0004М1003003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400003003,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0004М1003003
		|ПОМЕСТИТЬ ВТ_Раздел4Вычеты
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПокупокОбороты.Событие В(&СобытиеПредъявленКВычетуНДС0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Раздел4Вычеты.П000400003003_1,
		|	ВТ_Раздел4Вычеты.П0004М1003003_1,
		|	ВТ_Раздел4Вычеты.П000400003003,
		|	ВТ_Раздел4Вычеты.П0004М1003003
		|ИЗ
		|	ВТ_Раздел4Вычеты КАК ВТ_Раздел4Вычеты
		|ГДЕ
		|	ВТ_Раздел4Вычеты.П000400003003 <> 0";
		
		Раздел4Вычеты = Запрос.Выполнить();
		
		ЗначенияДляЗаполнения = Раздел4Начисления.Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел4, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		ЗначенияДляЗаполнения = Раздел4Вычеты.Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел4, ЗначенияДляЗаполнения);
		КонецЕсли;
		
	КонецЕсли;

	Если Контейнер.Свойство("Раздел6")
		И НЕ ОрганизацияНеПлательшикНДС Тогда
		
		Раздел6 = Контейнер.Раздел6;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""1011410"" КАК П000600001003_1,
		|	""1011410"" КАК П0006М1001003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600002003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0006М1002003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600003003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0006М1003003_1,
		|	""1011410"" КАК П000600001003,
		|	""1011410"" КАК П0006М1001003,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600002003,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0006М1002003,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600003003,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0006М1003003
		|ПОМЕСТИТЬ ВТ_Раздел6Начисления
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеНеПодтвержденаСтавка0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Раздел6Начисления.П000600001003_1,
		|	ВТ_Раздел6Начисления.П0006М1001003_1,
		|	ВТ_Раздел6Начисления.П000600002003_1,
		|	ВТ_Раздел6Начисления.П0006М1002003_1,
		|	ВТ_Раздел6Начисления.П000600003003_1,
		|	ВТ_Раздел6Начисления.П0006М1003003_1,
		|	ВТ_Раздел6Начисления.П000600001003,
		|	ВТ_Раздел6Начисления.П0006М1001003,
		|	ВТ_Раздел6Начисления.П000600002003,
		|	ВТ_Раздел6Начисления.П0006М1002003,
		|	ВТ_Раздел6Начисления.П000600003003,
		|	ВТ_Раздел6Начисления.П0006М1003003
		|ИЗ
		|	ВТ_Раздел6Начисления КАК ВТ_Раздел6Начисления
		|ГДЕ
		|	(ВТ_Раздел6Начисления.П000600002003 <> 0
		|			ИЛИ ВТ_Раздел6Начисления.П000600003003 <> 0)";
		
		Раздел6Начисления = Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600004003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0006М1004003_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600004003,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П0006М1004003
		|ПОМЕСТИТЬ ВТ_Раздел6Вычеты
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПокупокОбороты.Событие В(&СобытиеПредъявленКВычетуНеПодтвержденНДС0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Раздел6Вычеты.П000600004003_1,
		|	ВТ_Раздел6Вычеты.П0006М1004003_1,
		|	ВТ_Раздел6Вычеты.П000600004003,
		|	ВТ_Раздел6Вычеты.П0006М1004003
		|ИЗ
		|	ВТ_Раздел6Вычеты КАК ВТ_Раздел6Вычеты
		|ГДЕ
		|	ВТ_Раздел6Вычеты.П000600004003 <> 0";
		
		Раздел6Вычеты = Запрос.Выполнить();
		
		ЗначенияДляЗаполнения = Раздел6Начисления.Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел6, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		ЗначенияДляЗаполнения = Раздел6Вычеты.Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел6, ЗначенияДляЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = Новый Структура;
	ДанныеДляПроверкиКонтрагентов.Вставить("ИспользованиеПроверкиВозможно", Ложь);
	
	ОбщиеПараметры = Новый Структура();
	ОбщиеПараметры.Вставить("Организация",                         ПараметрыОтчета.Организация);
	ОбщиеПараметры.Вставить("НачалоПериода",                       ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ОбщиеПараметры.Вставить("КонецПериода",                        ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ОбщиеПараметры.Вставить("ГруппироватьПоКонтрагентам",          Ложь);
	ОбщиеПараметры.Вставить("КонтрагентДляОтбора",                 Справочники.Контрагенты.ПустаяСсылка());
	ОбщиеПараметры.Вставить("ВыводитьПокупателейПоАвансам",        Ложь);
	ОбщиеПараметры.Вставить("ВыводитьПродавцовПоАвансам",          Ложь);
	ОбщиеПараметры.Вставить("ВключатьОбособленныеПодразделения",   Истина);
	ОбщиеПараметры.Вставить("СписокСформированныхЛистов",          Новый СписокЗначений());
	ОбщиеПараметры.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
	ОбщиеПараметры.Вставить("ОтбиратьПоКонтрагенту",               Ложь);
	ОбщиеПараметры.Вставить("СписокОрганизаций",                   СписокОрганизаций);
	ОбщиеПараметры.Вставить("СсылкаНаДекларацию",                  СсылкаНаДекларацию);
	ОбщиеПараметры.Вставить("ЗаполнениеДокумента",                 Ложь);
	ОбщиеПараметры.Вставить("ЗаполнениеДекларации",                Истина);
	ОбщиеПараметры.Вставить("ДанныеДляПроверкиКонтрагентов",       ДанныеДляПроверкиКонтрагентов);
	ОбщиеПараметры.Вставить("ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС", 100000);
	//ОбщиеПараметры.Вставить("ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС", 
	//	?(Константы.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС.Получить() <> 0, 
	//	Константы.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС.Получить(), 10000));
	ОбщиеПараметры.Вставить("ДатаФормированияДопЛиста");
	ОбщиеПараметры.Вставить("ПравилаЗаполнения",                   ПараметрыЗаполненияОтчета.ПравилаЗаполнения);
	
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение декларации по НДС'"),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнены разделы 1-7'"));
	
	Если Контейнер.Свойство("Раздел8") Тогда
		
		// Сведения из книги покупок об операциях, отражаемых за истекший налоговый период
		
		ПараметрыРаздел8 = ОбщиеПараметры;
		ПараметрыРаздел8.Вставить("НачалоПериода",                      ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел8.Вставить("КонецПериода",                       ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел8.Вставить("ФормироватьДополнительныеЛисты",     Ложь);
		ПараметрыРаздел8.Вставить("ДополнительныеЛистыЗаТекущийПериод", Ложь);
		ПараметрыРаздел8.Вставить("ВыводитьТолькоДопЛисты",             Ложь);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.КнигаПокупок1137.СформироватьОтчет(ПараметрыРаздел8, АдресХранилища);
			
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение декларации по НДС'"),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 8'"));
	
	Если Контейнер.Свойство("Раздел8_Прил1")
		И НЕ ПараметрыОтчета.ВидДокумента = 0 Тогда
		
		// Сведения из дополнительных листов книги покупок
		
		ПараметрыРаздел81 = ОбщиеПараметры;
		ПараметрыРаздел81.Вставить("КонецПериода",
			?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), 
			ПараметрыОтчета.ДатаПодписи, 
			КонецДня(ПараметрыОтчета.ДатаПодписи)));
		ПараметрыРаздел81.Вставить("НачалоНалоговогоПериода",            ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел81.Вставить("КонецНалоговогоПериода",             ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел81.Вставить("ФормироватьДополнительныеЛисты",     Истина);
		ПараметрыРаздел81.Вставить("ДополнительныеЛистыЗаТекущийПериод", Истина);
		ПараметрыРаздел81.Вставить("ВыводитьТолькоДопЛисты",             Истина);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.КнигаПокупок1137.СформироватьОтчет(ПараметрыРаздел81, АдресХранилища);
			
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение декларации по НДС'"),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 8 прил. 1'"));
	
	Если Контейнер.Свойство("Раздел9") Тогда
		
		// Сведения из книги продаж об операциях, отражаемых за истекший налоговый период
		
		ПараметрыРаздел9 = ОбщиеПараметры;
		ПараметрыРаздел9.Вставить("НачалоПериода",                      ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел9.Вставить("КонецПериода",                       ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел9.Вставить("ФормироватьДополнительныеЛисты",     Ложь);
		ПараметрыРаздел9.Вставить("ДополнительныеЛистыЗаТекущийПериод", Ложь);
		ПараметрыРаздел9.Вставить("ВыводитьТолькоДопЛисты",             Ложь);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.КнигаПродаж1137.СформироватьОтчет(ПараметрыРаздел9, АдресХранилища);
			
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение декларации по НДС'"),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 9'"));
		
	Если Контейнер.Свойство("Раздел9_Прил1")
		И НЕ ПараметрыОтчета.ВидДокумента = 0 Тогда
		
		// Сведения из дополнительных листов книги продаж
		
		ПараметрыРаздел91 = ОбщиеПараметры;
		
		ПараметрыРаздел91.Вставить("КонецПериода",
			?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), 
			ПараметрыОтчета.ДатаПодписи, 
			КонецДня(ПараметрыОтчета.ДатаПодписи)));
		ПараметрыРаздел91.Вставить("НачалоНалоговогоПериода",            ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел91.Вставить("КонецНалоговогоПериода",             ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел91.Вставить("ФормироватьДополнительныеЛисты",     Истина);
		ПараметрыРаздел91.Вставить("ДополнительныеЛистыЗаТекущийПериод", Истина);
		ПараметрыРаздел91.Вставить("ВыводитьТолькоДопЛисты",             Истина);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.КнигаПродаж1137.СформироватьОтчет(ПараметрыРаздел91, АдресХранилища);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение декларации по НДС'"),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 9 прил. 1'"));
		
	Если Контейнер.Свойство("Раздел10")
		И Контейнер.Свойство("Раздел11") Тогда
	
		ПараметрыРаздела = ОбщиеПараметры;
		ПараметрыРаздела.Вставить("НалоговыйПериод", НачалоКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.ЖурналУчетаСчетовФактур1137.СформироватьОтчет(ПараметрыРаздела, АдресХранилища);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение декларации по НДС'"),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнены разделы 10 и 11'"));
		
	Если Контейнер.Свойство("Раздел12") Тогда
		
		Раздел12 = Контейнер.Раздел12;
		ТаблицаРаздел12 = ПустаяТаблицаРаздел12();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Номер КАК НомерСчетаФактуры,
		|	СчетФактураВыданный.Дата КАК ДатаСчетаФактуры,
		|	СчетФактураВыданный.Контрагент.ИНН КАК ИННпокупателя,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.КППКонтрагента ПОДОБНО """"
		|			ТОГДА СчетФактураВыданный.Контрагент.КПП
		|		ИНАЧЕ СчетФактураВыданный.КППКонтрагента
		|	КОНЕЦ КАК КППпокупателя,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СчетФактураВыданный.Контрагент.НаименованиеПолное, 1, 250) ПОДОБНО """"
		|			ТОГДА СчетФактураВыданный.Контрагент.Наименование
		|		ИНАЧЕ ПОДСТРОКА(СчетФактураВыданный.Контрагент.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК КонтрагентНаименование,
		|	СчетФактураВыданный.СуммаНДСДокумента КАК СумНалПокуп,
		|	СчетФактураВыданный.СуммаДокумента КАК СтоимТовСНалВс,
		|	СчетФактураВыданный.СуммаДокумента - СчетФактураВыданный.СуммаНДСДокумента КАК СтоимТовБНалВс,
		|	СчетФактураВыданный.ВалютаДокумента.Код КАК ОКВ,
		|	СчетФактураВыданный.Ссылка КАК СчетФактураРасшифровка,
		|	СчетФактураВыданный.ВалютаДокумента.НаименованиеПолное КАК НаименованиеВалюты
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	НЕ СчетФактураВыданный.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
		|	И СчетФактураВыданный.СуммаНДСДокумента - СчетФактураВыданный.СуммаНДСДокументаКомиссия > 0
		|	И СчетФактураВыданный.Организация В(&Организация)
		|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (&ОрганизацияНеПлательшикНДС
		|			ИЛИ &ОрганизацияОсвобожденаОтУплатыНДС)
		|	И СчетФактураВыданный.Проведен
		|	И НЕ СчетФактураВыданный.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОрганизацияНеПлательшикНДС",        ОрганизацияНеПлательшикНДС);
		Запрос.УстановитьПараметр("ОрганизацияОсвобожденаОтУплатыНДС", ОрганизацияОсвобожденаОтУплатыНДС); 
		Запрос.УстановитьПараметр("Организация",                       СписокОрганизаций);
		Запрос.УстановитьПараметр("НачалоПериода",                     НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода",                      КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			ТаблицаСчетовФактур = Результат.Выгрузить();
			
			МакетРаздел12 = ПолучитьОбщийМакет("СведенияИзСчетовФактур");
			ТабличныйДокументРаздел12 = Новый ТабличныйДокумент;
			
			ОбластьШапка = МакетРаздел12.ПолучитьОбласть("Шапка");
			ТабличныйДокументРаздел12.Вывести(ОбластьШапка);
			
			ОбластьСтрока = МакетРаздел12.ПолучитьОбласть("Строка");
			
			НомерСтроки = 0;
			СчетчикСтрокТекущегоСегмента = 0;
			ИтогПоРазделу12 = 0;
			
			Для Каждого СтрокаВыборки Из ТаблицаСчетовФактур Цикл
				
				НомерСтроки = НомерСтроки + 1;
				СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;
				
				СтрокаРаздела12 = ТаблицаРаздел12.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаздела12, СтрокаВыборки);
				
				Если НЕ ПустаяСтрока(СтрокаВыборки.ИННпокупателя) Тогда
					
					СтруктураСвПок = Новый Структура();
					Если СтрДлина(СокрЛП(СтрокаВыборки.ИННпокупателя)) > 10 Тогда
						СтруктураСвПок.Вставить("ИННФЛ", СтрокаВыборки.ИННпокупателя);
					Иначе
						СтруктураСвПок.Вставить("ИННЮЛ", СтрокаВыборки.ИННпокупателя);
						СтруктураСвПок.Вставить("КПП", СтрокаВыборки.КППпокупателя);
					КонецЕсли;
					
					СтрокаРаздела12.СвПокуп = СтруктураСвПок;
					
				КонецЕсли;
				
				СтрокаРаздела12.НомСчФ   = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаВыборки.СчетФактураРасшифровка);
				СтрокаРаздела12.ДатаСчФ  = Формат(СтрокаВыборки.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаРаздела12.НомерПор = НомерСтроки;
				
				ОбластьСтрока.Параметры.Ном                    = НомерСтроки;
				ОбластьСтрока.Параметры.НомерДата              = "" + СтрокаРаздела12.НомСчФ + ";" +  СтрокаРаздела12.ДатаСчФ;
				ОбластьСтрока.Параметры.Валюта                 = СокрЛП(СтрокаВыборки.НаименованиеВалюты) + ", " + СтрокаВыборки.ОКВ;
				ОбластьСтрока.Параметры.СуммаДокумента         = СтрокаВыборки.СтоимТовСНалВс;
				ОбластьСтрока.Параметры.СуммаНДС               = СтрокаВыборки.СумНалПокуп;
				ОбластьСтрока.Параметры.СчетФактураРасшифровка = СтрокаВыборки.СчетФактураРасшифровка;
				ОбластьСтрока.Параметры.КонтрагентНаименование = СтрокаВыборки.КонтрагентНаименование;
				ОбластьСтрока.Параметры.КонтрагентИННКПП       = "" + СтрокаВыборки.ИННпокупателя 
					+ ?(ЗначениеЗаполнено(СтрокаВыборки.КППпокупателя), "/" + Строка(СтрокаВыборки.КППпокупателя), "");
					
				ОбластьСтрока.Область(1, , ОбластьСтрока.ВысотаТаблицы).Имя = "Строка_" + Формат(НомерСтроки, "ЧГ=");
				ТабличныйДокументРаздел12.Вывести(ОбластьСтрока);
				
				ИтогПоРазделу12 = ИтогПоРазделу12 + СтрокаВыборки.СумНалПокуп;
				
				Если СчетчикСтрокТекущегоСегмента = ОбщиеПараметры.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
					
					// Запишем сегмент
					ПерваяСтрокаСегмента = НомерСтроки - СчетчикСтрокТекущегоСегмента + 1;
					
					РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
						ОбщиеПараметры.СсылкаНаДекларацию,
						"Раздел12",
						ПерваяСтрокаСегмента,
						ТаблицаРаздел12);
					
					РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
						ОбщиеПараметры.СсылкаНаДекларацию,
						"Раздел12",
						ПерваяСтрокаСегмента,
						ТабличныйДокументРаздел12);
					
					// Очистим табличный документ и таблицу
					ТабличныйДокументРаздел12.Очистить();
					ТабличныйДокументРаздел12.Вывести(ОбластьШапка);
					ТаблицаРаздел12.Очистить();
					
					// Обнулим счетчик текущего сегмента
					СчетчикСтрокТекущегоСегмента = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СчетчикСтрокТекущегоСегмента <> 0
				И СчетчикСтрокТекущегоСегмента <> ОбщиеПараметры.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
				
				ПерваяСтрокаСегмента = НомерСтроки - СчетчикСтрокТекущегоСегмента + 1;
					
				РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
					ОбщиеПараметры.СсылкаНаДекларацию,
					"Раздел12",
					ПерваяСтрокаСегмента,
					ТаблицаРаздел12);
				
				РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
					ОбщиеПараметры.СсылкаНаДекларацию,
					"Раздел12",
					ПерваяСтрокаСегмента,
					ТабличныйДокументРаздел12);
					
			КонецЕсли;
			
			Если Контейнер.Свойство("Раздел1") Тогда
				
				Раздел1 = Контейнер.Раздел1;
				
				ЗначенияДляЗаполнения = Новый Структура("П000100003003");
				ЗначенияДляЗаполнения.П000100003003 = ИтогПоРазделу12;
				ЗаполнитьЗначенияСвойств(Раздел1, ЗначенияДляЗаполнения);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение декларации по НДС'"),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 12'"));
	
	ПоместитьВоВременноеХранилище(Контейнер, АдресХранилищаЗаполненияОтчета);

КонецПроцедуры

Процедура УстановитьОбщиеПараметрыЗапроса(Запрос, ОбщиеПараметры)
	
	Для Каждого Параметр Из ОбщиеПараметры Цикл
		Запрос.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, ОбщиеПараметры);
	
КонецПроцедуры

Функция ТекстЗапросаОбщиеДанные()
	
	Возврат 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И ВЫБОР
	|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|					КОГДА &СУчетомКорректировок = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Событие,
	|	ВидЦенности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.Событие КАК Событие,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокОбороты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.Событие,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И ВЫБОР
	|					КОГДА &ВесьОборотЗаПериод
	|						ТОГДА ЗаписьДополнительногоЛиста
	|					КОГДА &СУчетомКорректировок
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Событие";

КонецФункции

Функция ТекстЗапросаРаздел2()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
	|				И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|				И НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	|	КОНЕЦ КАК Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажРаздел2
	|ИЗ
	|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
	|ГДЕ
	|	(НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализацияРаздел2))
	|	И НДСЗаписиКнигиПродажОбороты.ВидЦенности В(&ВидыЦенностейНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагент.КПП КАК П000200001003,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК П000200002003,
	|	Контрагент.ИНН КАК П000200003003,
	|	Контрагент.ЮрФизЛицо КАК ПокупательЮридическоеФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011712)
	|			ТОГДА ""1011712""
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
	|			ТОГДА ""1011703""
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
	|			ТОГДА ""1011707""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК П000200007003,
	|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажРаздел2.НДСОборот), 0) КАК П000200006003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
	|							И НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеНачисленНДС)
	|						ИЛИ НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеРеализацияРаздел2)
	|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200008003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеПолученАванс)
	|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200009003,
	|	Контрагент.Ссылка КАК П000200002003_Расшифровка
	|ИЗ
	|	НДСЗаписиКнигиПродажРаздел2 КАК НДСЗаписиКнигиПродажРаздел2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагент
	|		ПО НДСЗаписиКнигиПродажРаздел2.Покупатель = Контрагент.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажРаздел2.Покупатель,
	|	Контрагент.ИНН,
	|	Контрагент.КПП,
	|	Контрагент.ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011712)
	|			ТОГДА ""1011712""
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
	|			ТОГДА ""1011703""
	|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
	|			ТОГДА ""1011707""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ,
	|	Контрагент.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000200002003";

КонецФункции

Функция ТекстЗапросаРаздел3Вычеты()
	
	Возврат 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр120)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300012003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр130)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300013003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр140)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300014003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр150)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300015003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр170)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300017003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр180)
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300018003
	|ИЗ
	|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты";

КонецФункции

Функция ТекстЗапросаРаздел3Начисления()
	
	Возврат 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300001003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300002003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300003003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300004003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр060)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300006003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007003,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007005,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008005,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
	|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр090)
	|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300009005
	|ИЗ
	|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты";

КонецФункции

Функция ПустаяТаблицаРаздел12()
	
	ТаблицаРаздел12 = Новый ТаблицаЗначений;
	ТаблицаРаздел12.Колонки.Добавить("НомерПор",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	ТаблицаРаздел12.Колонки.Добавить("НомСчФ",         ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаРаздел12.Колонки.Добавить("ДатаСчФ",        ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаРаздел12.Колонки.Добавить("ОКВ",            ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3));
	ТаблицаРаздел12.Колонки.Добавить("СтоимТовБНалВс", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(19, 2));
	ТаблицаРаздел12.Колонки.Добавить("СумНалПокуп",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(19, 2));
	ТаблицаРаздел12.Колонки.Добавить("СтоимТовСНалВс", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(19, 2));
	ТаблицаРаздел12.Колонки.Добавить("СвПокуп");
	ТаблицаРаздел12.Колонки.Добавить("ДополнительныеСведения");
	
	Возврат ТаблицаРаздел12;

КонецФункции

Функция ЭлектронноеПредставлениеКнигиПокупок_501(ВыгружаемыйДокумент, УникальныйИдентификатор) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115102");
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.01");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
	
	ВыгрузитьСведенияОбОрганизации_501(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКнПок");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	
	ВывестиУзелКнигиПокупок501_Всего(КомпоновщикXML, ВыгружаемыйДокумент);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ВыгружаемыйДокумент.ТабличнаяЧасть Цикл
		ВывестиУзелКнигиПокупок501_СвПокупка(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
	СтруктураВыгрузки.Вставить("ИмяФайла", ПараметрыВыгрузки.ИдФайл + ".xml");
	СтруктураВыгрузки.Вставить("АдресВременногоХранилища", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор));
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеКнигиПокупок_502(ВыгружаемыйДокумент, УникальныйИдентификатор) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115102");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		КомпоновщикXML = КомпоновщикXML_Новый();
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
		
		Если ПараметрыВыгрузки.ЭтоИП Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКнПок");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", СведенияДокумента.ОбщиеСведения.СумНДСВыч, "Ч,19,2");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		Для Каждого СтрокаСведений Из СведенияДокумента.Записи Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокупка");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
			
			Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
				
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
			КонецЦикла;
			
			Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокУплНал Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДокУплНал");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДокУплНал", ДокументПодтверждения.НомерДокУплНал, "Т,256");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокУплНал", ДокументПодтверждения.ДатаДокУплНал, "Т,10");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Для Каждого ДатаПринятияНаУчет Из СтрокаСведений.ДатаПринУчет Цикл
				ДатаПринятияНаУчет = Лев(СокрЛП(ДатаПринятияНаУчет), 10);
				
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаПринУчет");
				
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ДатаПринятияНаУчет);
			КонецЦикла;
			
			Если СтрокаСведений.СвПосредн <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
				
				Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
					
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
					КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
				НомерТД = Лев(СокрЛП(НомерТД), 29);
				
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "НомерТД");
				
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, НомерТД);
			КонецЦикла;
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДСВыч");
			
			Если ТипЗнч(СтрокаСведений.СумНДСВыч) = Тип("Число") Тогда
				СумНДСВыч = Формат(СтрокаСведений.СумНДСВыч,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СумНДСВыч);
			Иначе
				СумНДСВыч = Лев(СокрЛП(СтрокаСведений.СумНДСВыч), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СумНДСВыч);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Подписант");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПрПодп", ПараметрыВыгрузки.ПрПодп);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИО");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ПодпФамилия, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ПодпИмя, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ПодпОтчество, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		Если ПараметрыВыгрузки.Свойство("НаимДокПодп") И ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПодп) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПред");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимДок", ПараметрыВыгрузки.НаимДокПодп, "Т,120");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
		СтруктураВыгрузки.Вставить("ИмяФайла", ПараметрыВыгрузки.ИдФайл + ".xml");
		СтруктураВыгрузки.Вставить("АдресВременногоХранилища", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор));
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеДопЛистовКнигиПокупок_502(ВыгружаемыйДокумент, УникальныйИдентификатор) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115105");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		КомпоновщикXML = КомпоновщикXML_Новый();
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
		
		Для Каждого ЛистКниги Из СведенияДокумента Цикл
			ВывестиДокументДопЛистаКнигиПокупок_502(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
		СтруктураВыгрузки.Вставить("ИмяФайла", ПараметрыВыгрузки.ИдФайл + ".xml");
		СтруктураВыгрузки.Вставить("АдресВременногоХранилища", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор));
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеКнигиПродаж_501(ВыгружаемыйДокумент, УникальныйИдентификатор) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115103");
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.01");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродав");
	
	ВыгрузитьСведенияОбОрганизации_501(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКнПрод");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВсегоВсПродВклНДС", ВыгружаемыйДокумент.ВсегоПродаж, "Ч,17,2");
	
	ВывестиУзелКнигиПродаж501_Всего(КомпоновщикXML, ВыгружаемыйДокумент);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ВыгружаемыйДокумент.ТабличнаяЧасть Цикл
		ВывестиУзелКнигиПродаж501_СвПродаж(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
	СтруктураВыгрузки.Вставить("ИмяФайла", ПараметрыВыгрузки.ИдФайл + ".xml");
	СтруктураВыгрузки.Вставить("АдресВременногоХранилища", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор));
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеКнигиПродаж_502(ВыгружаемыйДокумент, УникальныйИдентификатор) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115103");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		КомпоновщикXML = КомпоновщикXML_Новый();
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродав");
		
		Если ПараметрыВыгрузки.ЭтоИП Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКнПрод");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
		
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18", СведенияДокумента.ОбщиеСведения.СтТовРубКоп18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10", СведенияДокумента.ОбщиеСведения.СтТовРубКоп10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0", СведенияДокумента.ОбщиеСведения.СтТовРубКоп0, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10", СведенияДокумента.ОбщиеСведения.СумНДСРубКоп10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СведенияДокумента.ОбщиеСведения.СтПродОсвНДСРубКоп, "Ч,19,2");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		Для Каждого СтрокаСведений Из СведенияДокумента.Записи Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродаж");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего",    СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалРубКоп",   СтрокаСведений.СтТовУчНалРубКоп,   "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      СтрокаСведений.СтТовРубКоп18,      "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      СтрокаСведений.СтТовРубКоп10,      "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       СтрокаСведений.СтТовРубКоп0,       "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     СтрокаСведений.СумНДСРубКоп18,     "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     СтрокаСведений.СумНДСРубКоп10,     "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СтрокаСведений.СтПродОсвНДСРубКоп, "Ч,19,2");
			
			Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
				
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
			КонецЦикла;
			
			Если СтрокаСведений.СвПосредн <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
				
				Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
					
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
					КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокПдтвОпл Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДокПдтвОпл");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДокПдтвОпл", ДокументПодтверждения.НомерДокПдтвОпл, "Т,256");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", ДокументПодтверждения.ДатаДокПдтвОпл, "Т,10");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
		СтруктураВыгрузки.Вставить("ИмяФайла", ПараметрыВыгрузки.ИдФайл + ".xml");
		СтруктураВыгрузки.Вставить("АдресВременногоХранилища", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор));
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеДопЛистовКнигиПродаж_502(ВыгружаемыйДокумент, УникальныйИдентификатор) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115106");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		КомпоновщикXML = КомпоновщикXML_Новый();
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
		
		Для Каждого ЛистКниги Из СведенияДокумента Цикл
			ВывестиДокументДопЛистаКнигиПродаж_502(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
		СтруктураВыгрузки.Вставить("ИмяФайла", ПараметрыВыгрузки.ИдФайл + ".xml");
		СтруктураВыгрузки.Вставить("АдресВременногоХранилища", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор));
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеЖурналаСчетовФактур_501(ВыгружаемыйДокумент, УникальныйИдентификатор) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115104");
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.01");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвНП");
	
	ВыгрузитьСведенияОбОрганизации_501(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ВыгружаемыйДокумент.ВыставленныеСчетаФактуры Цикл
		ВывестиУзелЖурналаСчетовФактур501_СвЧ1(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	Для Каждого СтрокаСведений Из ВыгружаемыйДокумент.ПолученныеСчетаФактуры Цикл
		ВывестиУзелЖурналаСчетовФактур501_СвЧ2(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Массив;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
	СтруктураВыгрузки.Вставить("ИмяФайла", ПараметрыВыгрузки.ИдФайл + ".xml");
	СтруктураВыгрузки.Вставить("АдресВременногоХранилища", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор));
	
	РезультатВыгрузки.Добавить(СтруктураВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ЭлектронноеПредставлениеЖурналаСчетовФактур_502(ВыгружаемыйДокумент, УникальныйИдентификатор) Экспорт
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115104");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		КомпоновщикXML = КомпоновщикXML_Новый();
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.02");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвНП");
		
		Если ПараметрыВыгрузки.ЭтоИП Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		Для Каждого СтрокаСведений Из СведенияДокумента.ЗаписиВыставленных Цикл
			ВывестиСвЧ1ЖурналаСчетовФактур_502(КомпоновщикXML, СтрокаСведений);
		КонецЦикла;
		
		Для Каждого СтрокаСведений Из СведенияДокумента.ЗаписиПолученных Цикл
			ВывестиСвЧ2ЖурналаСчетовФактур_502(КомпоновщикXML, СтрокаСведений);
		КонецЦикла;
		
		ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
		СтруктураВыгрузки.Вставить("ИмяФайла", ПараметрыВыгрузки.ИдФайл + ".xml");
		СтруктураВыгрузки.Вставить("АдресВременногоХранилища", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор));
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВывестиУзелКнигиПокупок501_Всего(КомпоновщикXML, ВыгружаемыйДокумент)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", ВыгружаемыйДокумент.ВсегоПокупок, "Ч,17,2");
	
	// НДС 18%.
	Если ВыгружаемыйДокумент.СуммаБезНДС18 <> 0 ИЛИ ВыгружаемыйДокумент.НДС18 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "18", ВыгружаемыйДокумент.СуммаБезНДС18, ВыгружаемыйДокумент.НДС18);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 10%.
	Если ВыгружаемыйДокумент.СуммаБезНДС10 <> 0 ИЛИ ВыгружаемыйДокумент.НДС10 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "10", ВыгружаемыйДокумент.СуммаБезНДС10, ВыгружаемыйДокумент.НДС10);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 0%.
	Если ВыгружаемыйДокумент.НДС0 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "0", ВыгружаемыйДокумент.НДС0);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	// НДС 20%.
	Если ВыгружаемыйДокумент.СуммаБезНДС20 <> 0 ИЛИ ВыгружаемыйДокумент.НДС20 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "20", ВыгружаемыйДокумент.СуммаБезНДС20, ВыгружаемыйДокумент.НДС20);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС Без НДС.
	Если ВыгружаемыйДокумент.СуммаСовсемБезНДС <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "без НДС", ВыгружаемыйДокумент.СуммаСовсемБезНДС); // Не локализуется
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзелКнигиПокупок501_СвПокупка(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокупка");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.Ном, "Ч,12");
	
	РеквизитыСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.ДатаНомер, ";");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СокрЛП(РеквизитыСчетаФактуры[0]), "Т,10");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СокрЛП(РеквизитыСчетаФактуры[1]), "Т,1000");
	
	РеквизитыИсправленияСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаИсправления, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[0]), "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[1]), "Т,10");
	
	РеквизитыКорректировочногоСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаКорректировки, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[0]), "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[1]), "Т,10");
	
	РеквизитыИсправленияКорректировочногоСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаИсправленияКорректировки, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[0]), "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[1]), "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаПринУчет", СтрокаСведений.ДатаОприходования, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.Продавец, "Т,1000");
	ИНН = СокрЛП(СтрокаСведений.ПродавецИНН);
	Если СтрДлина(ИНН) = 12 Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", ИНН, "Т,12");
	ИНаче
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", ИНН, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.ПродавецКПП, "Т,9");
	КонецЕсли;
	
	ПроисхождениеТовара = СтрокаСведений.НомерГТД;
	РеквизитыПроисхожденияТовара = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроисхождениеТовара, ";");
	
	Если РеквизитыПроисхожденияТовара.Количество() >= 2 Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодПроисх", СокрЛП(РеквизитыПроисхожденияТовара[0]), "Т,3");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.ВсегоПокупок, "Ч,19,2");
	
	ДатыОплаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.ДатаОплаты, ",");
	Для Каждого СтрокаДатыОплаты Из ДатыОплаты Цикл
		Если ЗначениеЗаполнено(СтрокаДатыОплаты) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаОплСчФПрод");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(СтрокаДатыОплаты), "Т,10");
		КонецЕсли;
	КонецЦикла;
	
	// НДС 18%.
	Если СтрокаСведений.СуммаБезНДС18 <> 0 ИЛИ СтрокаСведений.НДС18 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "18", СтрокаСведений.СуммаБезНДС18, СтрокаСведений.НДС18);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 10%.
	Если СтрокаСведений.СуммаБезНДС10 <> 0 ИЛИ СтрокаСведений.НДС10 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "10", СтрокаСведений.СуммаБезНДС10, СтрокаСведений.НДС10);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 0%.
	Если СтрокаСведений.НДС0 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "0", СтрокаСведений.НДС0);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 20%.
	Если СтрокаСведений.СуммаБезНДС20 <> 0 ИЛИ СтрокаСведений.НДС20 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "20", СтрокаСведений.СуммаБезНДС20, СтрокаСведений.НДС20);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС Без НДС.
	Если СтрокаСведений.СуммаСовсемБезНДС <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСтоимПок");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "без НДС", СтрокаСведений.СуммаСовсемБезНДС); // Не локализуется
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если РеквизитыПроисхожденияТовара.Количество() >= 2 Тогда
		Для Инд = 1 По РеквизитыПроисхожденияТовара.Количество() - 1 Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "НомерТД");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(РеквизитыПроисхожденияТовара[Инд]), "Т,29");
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиДокументДопЛистаКнигиПокупок_502(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги)
	
	ОбщиеСведенияЛиста = ЛистКниги.ОбщиеСведения;
	ЗаписиЛиста = ЛистКниги.Записи;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	Иначе
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДопЛКнПок");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДопЛКнПок", ОбщиеСведенияЛиста.НомерДопЛКнПок);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ОбщиеСведенияЛиста.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ОбщиеСведенияЛиста.ОтчетГод);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДопЛКнПок", ОбщиеСведенияЛиста.ДатаДопЛКнПок);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Итого");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", ОбщиеСведенияЛиста.Итого.СумНДСВыч, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", ОбщиеСведенияЛиста.Всего.СумНДСВыч, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ЗаписиЛиста Цикл
		ВывестиСвПокупкаДопЛистаКнигиПокупок_502(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвПокупкаДопЛистаКнигиПокупок_502(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокупка");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
	КонецЦикла;
	
	Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокУплНал Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДокУплНал");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДокУплНал", ДокументПодтверждения.НомерДокУплНал, "Т,256");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокУплНал", ДокументПодтверждения.ДатаДокУплНал, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	Для Каждого ДатаПринятияНаУчет Из СтрокаСведений.ДатаПринУчет Цикл
		ДатаПринятияНаУчет = Лев(СокрЛП(ДатаПринятияНаУчет), 10);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаПринУчет");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ДатаПринятияНаУчет);
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Для Каждого НомерТД Из СтрокаСведений.НомерТД Цикл
		НомерТД = Лев(СокрЛП(НомерТД), 29);
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "НомерТД");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, НомерТД);
	КонецЦикла;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДСВыч");
	
	Если ТипЗнч(СтрокаСведений.СумНДСВыч) = Тип("Число") Тогда
		СумНДСВыч = Формат(СтрокаСведений.СумНДСВыч,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СумНДСВыч);
	Иначе
		СумНДСВыч = Лев(СокрЛП(СтрокаСведений.СумНДСВыч), 7);
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СумНДСВыч);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзелКнигиПродаж501_Всего(КомпоновщикXML, ВыгружаемыйДокумент)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", ВыгружаемыйДокумент.ВсегоПродаж, "Ч,17,2");
	
	// НДС 18%.
	Если ВыгружаемыйДокумент.СуммаБезНДС18 <> 0 ИЛИ ВыгружаемыйДокумент.НДС18 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "18", ВыгружаемыйДокумент.СуммаБезНДС18, ВыгружаемыйДокумент.НДС18);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 10%.
	Если ВыгружаемыйДокумент.СуммаБезНДС10 <> 0 ИЛИ ВыгружаемыйДокумент.НДС10 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "10", ВыгружаемыйДокумент.СуммаБезНДС10, ВыгружаемыйДокумент.НДС10);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 0%.
	Если ВыгружаемыйДокумент.НДС0 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "0", ВыгружаемыйДокумент.НДС0);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	// НДС 20%.
	Если ВыгружаемыйДокумент.СуммаБезНДС20 <> 0 ИЛИ ВыгружаемыйДокумент.НДС20 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "20", ВыгружаемыйДокумент.СуммаБезНДС20, ВыгружаемыйДокумент.НДС20);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС Без НДС.
	Если ВыгружаемыйДокумент.СуммаСовсемБезНДС <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "без НДС", ВыгружаемыйДокумент.СуммаСовсемБезНДС); // Не локализуется
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзелКнигиПродаж501_СвПродаж(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродаж");
	
	РеквизитыСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.ДатаНомер, ";");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СокрЛП(РеквизитыСчетаФактуры[0]), "Т,10");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СокрЛП(РеквизитыСчетаФактуры[1]), "Т,1000");
	
	РеквизитыИсправленияСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаИсправления, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[0]), "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[1]), "Т,10");
	
	РеквизитыКорректировочногоСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаКорректировки, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[0]), "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[1]), "Т,10");
	
	РеквизитыИсправленияКорректировочногоСчетаФактуры = РасщепленнаяСтрока(СтрокаСведений.НомерДатаИсправленияКорректировки, ";");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[0]), "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[1]), "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.Покупатель, "Т,1000");
	ИНН = СокрЛП(СтрокаСведений.ПокупательИНН);
	Если СтрДлина(ИНН) = 12 Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", ИНН, "Т,12");
	ИНаче
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", ИНН, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.ПокупательКПП, "Т,9");
	КонецЕсли;
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.ВсегоПродаж, "Ч,19,2");
	
	ДатыОплаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.ДатаОплаты, ",");
	Для Каждого СтрокаДатыОплаты Из ДатыОплаты Цикл
		Если ЗначениеЗаполнено(СтрокаДатыОплаты) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаОплСчФПрод");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(СтрокаДатыОплаты), "Т,10");
		КонецЕсли;
	КонецЦикла;
	
	// НДС 18%.
	Если СтрокаСведений.СуммаБезНДС18 <> 0 ИЛИ СтрокаСведений.НДС18 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "18", СтрокаСведений.СуммаБезНДС18, СтрокаСведений.НДС18);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 10%.
	Если СтрокаСведений.СуммаБезНДС10 <> 0 ИЛИ СтрокаСведений.НДС10 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "10", СтрокаСведений.СуммаБезНДС10, СтрокаСведений.НДС10);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 0%.
	Если СтрокаСведений.НДС0 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "0", СтрокаСведений.НДС0);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС 20%.
	Если СтрокаСведений.СуммаБезНДС20 <> 0 ИЛИ СтрокаСведений.НДС20 <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "20", СтрокаСведений.СуммаБезНДС20, СтрокаСведений.НДС20);
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	// НДС Без НДС.
	Если СтрокаСведений.СуммаСовсемБезНДС <> 0 Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтЧисле");
		ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, "без НДС", СтрокаСведений.СуммаСовсемБезНДС); // Не локализуется
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиДокументДопЛистаКнигиПродаж_502(КомпоновщикXML, ПараметрыВыгрузки, ЛистКниги)
	
	ОбщиеСведенияЛиста = ЛистКниги.ОбщиеСведения;
	ЗаписиЛиста = ЛистКниги.Записи;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродав");
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	Иначе
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДопЛКнПрод");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДопЛКнПрод", ОбщиеСведенияЛиста.НомерДопЛКнПрод);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Период", ОбщиеСведенияЛиста.Период);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ОбщиеСведенияЛиста.ОтчетГод);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДопЛКнПрод", ОбщиеСведенияЛиста.ДатаДопЛКнПрод);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Итого");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      ОбщиеСведенияЛиста.Итого.СтТовРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       ОбщиеСведенияЛиста.Итого.СтТовРубКоп0, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     ОбщиеСведенияЛиста.Итого.СумНДСРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", ОбщиеСведенияЛиста.Итого.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Всего");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      ОбщиеСведенияЛиста.Всего.СтТовРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       ОбщиеСведенияЛиста.Всего.СтТовРубКоп0, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп18, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     ОбщиеСведенияЛиста.Всего.СумНДСРубКоп10, "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", ОбщиеСведенияЛиста.Всего.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Для Каждого СтрокаСведений Из ЗаписиЛиста Цикл
		ВывестиСвПродажДопЛистаКнигиПродаж_502(КомпоновщикXML, СтрокаСведений);
	КонецЦикла;
	
	ВывестиУзел_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвПродажДопЛистаКнигиПродаж_502(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПродаж");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ",  СтрокаСведений.НомИспрСчФ,  "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИспрСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ",  СтрокаСведений.НомИспрКСчФ,  "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаСведений.ДатаИспрКСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего",    СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалРубКоп",   СтрокаСведений.СтТовУчНалРубКоп,   "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп18",      СтрокаСведений.СтТовРубКоп18,      "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп10",      СтрокаСведений.СтТовРубКоп10,      "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовРубКоп0",       СтрокаСведений.СтТовРубКоп0,       "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп18",     СтрокаСведений.СумНДСРубКоп18,     "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСРубКоп10",     СтрокаСведений.СумНДСРубКоп10,     "Ч,19,2");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвНДСРубКоп", СтрокаСведений.СтПродОсвНДСРубКоп, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Для Каждого ДокументПодтверждения Из СтрокаСведений.СвДокПдтвОпл Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвДокПдтвОпл");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерДокПдтвОпл", ДокументПодтверждения.НомерДокПдтвОпл, "Т,256");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", ДокументПодтверждения.ДатаДокПдтвОпл, "Т,10");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЦикла;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзелЖурналаСчетовФактур501_СвЧ1(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвЧ1");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.Ном, "Ч,6");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаВыстСчФ", СтрокаСведений.ДатаПередачиПолучения, "Т,10");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодСпосВыст", СтрокаСведений.КодСпособаВыставления, "Т,1");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчетаФактуры, "Т,256");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчетаФактуры, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКорректировочногоСчетаФактуры, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ", СтрокаСведений.ДатаКорректировочногоСчетаФактуры, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаСведений.НомерИсправления, "Т,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИсправления, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.КонтрагентНаименование, "Т,1000");
	РеквизитыКонтрагента = РасщепленнаяСтрока(СтрокаСведений.КонтрагентИННКПП, "/");
	ИНН = СокрЛП(РеквизитыКонтрагента[0]);
	КПП = СокрЛП(РеквизитыКонтрагента[1]);
	Если СтрДлина(ИНН) = 12 Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", ИНН, "Т,12");
	ИНаче
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", ИНН, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", КПП, "Т,9");
	КонецЕсли;
	
	РеквизитыВалюты = РасщепленнаяСтрока(СтрокаСведений.Валюта, ",");
	КодОКВ = СокрЛП(РеквизитыВалюты[1]);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодОКВ", КодОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СуммаДокумента, "Ч,17,2");
	
	КодыОпераций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.КодВидаОперации, ";");
	Для Каждого КодОперации Из КодыОпераций Цикл
		Если ЗначениеЗаполнено(КодыОпераций) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(КодОперации), "Т,2");
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДС) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСумНДС");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДС, "Ч,17,2");
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУменьшение)
	 ИЛИ ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУвеличение) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнСтоимКСчФ");
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУменьшение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаСведений.СуммаДокументаРазницаУменьшение, "Ч,17,2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУвеличение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаСведений.СуммаДокументаРазницаУменьшение, "Ч,17,2");
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУменьшение)
	 ИЛИ ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУвеличение) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнНДСКСчФ");
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУменьшение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДСРазницаУменьшение, "Ч,17,2");
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУвеличение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДСРазницаУвеличение, "Ч,17,2");
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзелЖурналаСчетовФактур501_СвЧ2(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвЧ2");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.Ном, "Ч,6");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаПолСчФ", СтрокаСведений.ДатаПередачиПолучения, "Т,10");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодСпосВыст", СтрокаСведений.КодСпособаВыставления, "Т,1");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчетаФактуры, "Т,256");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчетаФактуры, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКорректировочногоСчетаФактуры, "Т,256");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ", СтрокаСведений.ДатаКорректировочногоСчетаФактуры, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаСведений.НомерИсправления, "Т,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаСведений.ДатаИсправления, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.КонтрагентНаименование, "Т,1000");
	РеквизитыКонтрагента = РасщепленнаяСтрока(СтрокаСведений.КонтрагентИННКПП, "/");
	ИНН = СокрЛП(РеквизитыКонтрагента[0]);
	КПП = СокрЛП(РеквизитыКонтрагента[1]);
	Если СтрДлина(ИНН) = 12 Тогда
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", ИНН, "Т,12");
	ИНаче
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", ИНН, "Т,10");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", КПП, "Т,9");
	КонецЕсли;
	
	РеквизитыВалюты = РасщепленнаяСтрока(СтрокаСведений.Валюта, ",");
	КодОКВ = СокрЛП(РеквизитыВалюты[1]);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодОКВ", КодОКВ, "Т,3");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СуммаДокумента, "Ч,17,2");
	
	КодыОпераций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.КодВидаОперации, ";");
	Для Каждого КодОперации Из КодыОпераций Цикл
		Если ЗначениеЗаполнено(КодыОпераций) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СокрЛП(КодОперации), "Т,2");
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДС) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСумНДС");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДС, "Ч,17,2");
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУменьшение)
	 ИЛИ ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУвеличение) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнСтоимКСчФ");
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУменьшение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаСведений.СуммаДокументаРазницаУменьшение, "Ч,17,2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаДокументаРазницаУвеличение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаСведений.СуммаДокументаРазницаУменьшение, "Ч,17,2");
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУменьшение)
	 ИЛИ ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУвеличение) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнНДСКСчФ");
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУменьшение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДСРазницаУменьшение, "Ч,17,2");
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.СуммаНДСРазницаУвеличение) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаСведений.СуммаНДСРазницаУвеличение, "Ч,17,2");
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвЧ1ЖурналаСчетовФактур_502(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвЧ1");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаВыстСчФ", СтрокаСведений.ДатаВыстСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрСчФ", СтрокаСведений.НомерИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ",  СтрокаСведений.ДатаИспрСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрКСчФ", СтрокаСведений.НомерИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ",  СтрокаСведений.ДатаИспрКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего,    "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФпрод", СтрокаСведений.СвПосредн.НомерСчФпрод, "Т,256");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФпрод", СтрокаСведений.СвПосредн.ДатаСчФпрод, "Т,10");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		Иначе
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФпрод", СтрокаСведений.СвПосредн.НомерСчФпрод, "Т,256");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФпрод", СтрокаСведений.СвПосредн.ДатаСчФпрод, "Т,10");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСумНДС");
	
	Если ТипЗнч(СтрокаСведений.ВтчСумНДС) = Тип("Число") Тогда
		ЗначениеУзла = Формат(СтрокаСведений.ВтчСумНДС,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
	Иначе
		ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.ВтчСумНДС), 7);
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Если СтрокаСведений.РазнСтоимКСчФ <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнСтоимКСчФ");
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Ум) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
		КонецЕсли;
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Увел) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если СтрокаСведений.РазнНДСКСчФ <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнНДСКСчФ");
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Ум) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Ум) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Ум), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Увел) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Увел) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Увел), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиСвЧ2ЖурналаСчетовФактур_502(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвЧ2");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаПолСчФ", СтрокаСведений.ДатаПолСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрСчФ", СтрокаСведений.НомерИспрСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ",  СтрокаСведений.ДатаИспрСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрКСчФ", СтрокаСведений.НомерИспрКСчФ, "Ч,3");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ",  СтрокаСведений.ДатаИспрКСчФ,  "Т,10");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
		
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, КодВидаОперации);
	КонецЦикла;
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосредн");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛСубКом") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимСубКом", СтрокаСведений.СвПосредн.НаимСубКом, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛСубКом", СтрокаСведений.СвПосредн.ИННЮЛСубКом, "Т,10");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КППСубКом", СтрокаСведений.СвПосредн.КППСубКом, "Т,9");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодВидСдел", СтрокаСведений.СвПосредн.КодВидСдел, "Т,1");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		ИначеЕсли СтрокаСведений.СвПосредн.Свойство("ИННФЛСубКом") Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛСубКом", СтрокаСведений.СвПосредн.ИННФЛСубКом, "Т,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодВидСдел", СтрокаСведений.СвПосредн.КодВидСдел, "Т,1");
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВтчСумНДС");
	
	Если ТипЗнч(СтрокаСведений.ВтчСумНДС) = Тип("Число") Тогда
		ЗначениеУзла = Формат(СтрокаСведений.ВтчСумНДС,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
	Иначе
		ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.ВтчСумНДС), 7);
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
		КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Если СтрокаСведений.РазнСтоимКСчФ <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнСтоимКСчФ");
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Ум) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
		КонецЕсли;
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.Увел) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	Если СтрокаСведений.РазнНДСКСчФ <> Неопределено Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "РазнНДСКСчФ");
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Ум")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Ум) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Ум");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Ум) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Ум,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Ум), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("Увел")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.Увел) Тогда
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Увел");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.Увел) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.Увел,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.Увел), 7);
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "БезНДС");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, ЗначениеУзла);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЕсли;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВыгрузитьСведенияОбОрганизации_501(КомпоновщикXML, ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИОИП");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	Иначе
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиУзелТипа501_СтНалТип(КомпоновщикXML, Знач СтавкаНДС, СтоимостьБезНДС, СуммаНДС = 0)
	
	Если ТипЗнч(СтавкаНДС) <> Тип("Строка") Тогда
		СтавкаНДС = Строка(СтавкаНДС);
	КонецЕсли;
	
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтТовБезНДС", СтоимостьБезНДС, "Ч,17,2");
	
	Если СтавкаНДС = "без НДС" Тогда // Не локализуется
		ТипСтавки = "текст";
		ЗначениеСуммы = "без НДС"; // Не локализуется
	Иначе
		ТипСтавки = "процент";
		ЗначениеСуммы = Формат(СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧН=-; ЧГ=0");
	КонецЕсли;
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "НалСт");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НалСтВел", СтавкаНДС, "Т,7");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НалСтТип", ТипСтавки, "Т,7");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СумНал");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", ЗначениеСуммы, "Т,18");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Процедура ВывестиУзел_Подписант(КомпоновщикXML,ПараметрыВыгрузки)
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Подписант");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПрПодп", ПараметрыВыгрузки.ПрПодп);
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ФИО");
	
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ПодпФамилия, "Т,60");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ПодпИмя, "Т,60");
	КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ПодпОтчество, "Т,60");
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	Если ПараметрыВыгрузки.Свойство("НаимДокПодп") И ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПодп) Тогда
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПред");
		
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НаимДок", ПараметрыВыгрузки.НаимДокПодп, "Т,120");
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
КонецПроцедуры

Функция КомпоновщикXML_Новый()
	
	КомпоновщикXML = Новый Структура;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ЗаписьТекста.Записать("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	КомпоновщикXML.Вставить("ИмяФайла", ИмяВременногоФайла);
	КомпоновщикXML.Вставить("ЗаписьТекста", ЗаписьТекста);
	КомпоновщикXML.Вставить("СтэкУзлов", Новый Массив);
	КомпоновщикXML.Вставить("НовыйУзелЗакрыт", Истина);
	КомпоновщикXML.Вставить("Табуляция", "");
	
	Возврат КомпоновщикXML;
	
КонецФункции

Процедура КомпоновщикXML_СоздатьУзел(КомпоновщикXML, ИмяУзла)
	
	Если НЕ КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.ЗаписьТекста.Записать(">");
		КомпоновщикXML.Табуляция = КомпоновщикXML.Табуляция + Символы.Таб;
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Вставить(0, ИмяУзла);
	
	КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "<" + ИмяУзла);
	
	КомпоновщикXML.НовыйУзелЗакрыт = Ложь;
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ПредставлениеЗначения = ПредставлениеЗначенияXML(ЗначениеАтрибута, ТипАтрибута);
	
	КомпоновщикXML.ЗаписьТекста.Записать(" " + ИмяАтрибута + "=""" + ПредставлениеЗначения + """");
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, Значение, ТипЗначения = "Т")
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПредставлениеЗначения = ПредставлениеЗначенияXML(Значение, ТипЗначения);
		КомпоновщикXML.ЗаписьТекста.Записать(">" + ПредставлениеЗначения + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
	Иначе
		КомпоновщикXML.ЗаписьТекста.Записать(" />");
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	КомпоновщикXML.НовыйУзелЗакрыт = Истина;
	
КонецПроцедуры

Процедура КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML)
	
	Если КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.Табуляция = Сред(КомпоновщикXML.Табуляция, 2);
		КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
		
	Иначе
		КомпоновщикXML.ЗаписьТекста.Записать("/>");
		КомпоновщикXML.НовыйУзелЗакрыт = Истина;
		
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	
КонецПроцедуры

Функция КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML, УникальныйИдентификатор)
	
	КомпоновщикXML.ЗаписьТекста.Закрыть();
	КомпоновщикXML.ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(КомпоновщикXML.ИмяФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
	
	УдалитьФайлы(КомпоновщикXML.ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

Функция ПредставлениеЗначенияXML(Значение, ТипЗначения)
	
	ОписаниеТипаАтрибута = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ТипЗначения);
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(Значение, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(Значение);
		ПредставлениеЗначения = ЗаменитьСимволыРазметки(ПредставлениеЗначения);
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=; ЧГ=0";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(Значение, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(Значение);
	КонецЕсли;
	
	Возврат ПредставлениеЗначения;
	
КонецФункции

Функция ЗаменитьСимволыРазметки(Знач ПредставлениеЗначения)
	
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "&", "&amp;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "<", "&lt;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, ">", "&gt;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, """", "&quot;");
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "'", "&apos;");
	
	Возврат ПредставлениеЗначения;
	
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления(СведенияОтправки)
	
	Префикс = СведенияОтправки.КНД;
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННФЛ);
	Иначе
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННЮЛ) + СокрЛП(СведенияОтправки.КПП);
	КонецЕсли;
	ИдентификаторПолучателя = СведенияОтправки.КодНО;
	ИдентификационныйНомер1 = Строка(Новый УникальныйИдентификатор);
	ДатаФормированияФайла = Формат(СведенияОтправки.ДатаФормированияФайла, "ДФ=yyyyMMdd");
	ИдентификационныйНомер2 = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификационныйНомер1
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер2;
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, КНД)
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("КНД", КНД);
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.СформироватьВерсПрог());
	ОсновныеСведения.Вставить("ДатаФормированияФайла", ТекущаяДата());
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(ВыгружаемыйДокумент.Организация);
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоЮЛ", НЕ ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоИП", ЭтоПБОЮЛ);
	
	СведенияОбОрганизации = СведенияОбОрганизации(ВыгружаемыйДокумент.Организация);
	
	Если ЭтоПБОЮЛ Тогда
		ОсновныеСведения.Вставить("ИННФЛ", СведенияОбОрганизации.ИННЮЛ);
		СведенияОЮрФизЛице  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыгружаемыйДокумент.Организация, ТекущаяДата());
		СвидетельствоОРегистрации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство");
		ОсновныеСведения.Вставить("СвГосРегИП", СвидетельствоОРегистрации);
		
		СведенияОбИП = СведенияОбИП(ВыгружаемыйДокумент);
		ОсновныеСведения.Вставить("ФамилияИП",  СведенияОбИП.Фамилия);
		ОсновныеСведения.Вставить("ИмяИП",      СведенияОбИП.Имя);
		ОсновныеСведения.Вставить("ОтчествоИП", СведенияОбИП.Отчество);
	Иначе
		ОсновныеСведения.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ОсновныеСведения.Вставить("ИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
		ОсновныеСведения.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыгружаемыйДокумент.ИФНС) Тогда
		ОсновныеСведения.Вставить("КодНО", ВыгружаемыйДокумент.ИФНС.Код);
	Иначе
		ОсновныеСведения.Вставить("КодНО", СведенияОбОрганизации.КодНО);
	КонецЕсли;
	
	ДобавитьСведенияОПодписанте(ОсновныеСведения, ВыгружаемыйДокумент);
	
	ОсновныеСведения.Вставить("Период", ВыгружаемыйДокумент.ПериодПоСКНП);
	
	ОтчетныйГод = Формат(ВыгружаемыйДокумент.НалоговыйПериод, "ДФ=yyyy");
	ОсновныеСведения.Вставить("ОтчетГод", ОтчетныйГод);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция СведенияОбОрганизации(Организация)
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ФИО, ОКВЭД, ОКАТО";
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СтрокаСведений);
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Процедура ДобавитьСведенияОПодписанте(ОсновныеСведения, ВыгружаемыйДокумент)
	
	Если ЗначениеЗаполнено(ВыгружаемыйДокумент.ИФНС) И ЗначениеЗаполнено(ВыгружаемыйДокумент.ИФНС.Представитель) Тогда
		Если ТипЗнч(ВыгружаемыйДокумент.ИФНС.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ФИОПодписанта = СведенияОФизЛице(ВыгружаемыйДокумент.ИФНС.Представитель, ВыгружаемыйДокумент.Дата);
			ОсновныеСведения.Вставить("ПрПодп", "2");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			ОсновныеСведения.Вставить("НаимДокПодп",  ВыгружаемыйДокумент.ИФНС.ДокументПредставителя);
			
		ИначеЕсли НЕ ПустаяСтрока(ВыгружаемыйДокумент.ИФНС.УполномоченноеЛицоПредставителя) Тогда
			ОсновныеСведения.Вставить("ПрПодп", "2");
			СоставляющиеФИО = СоставляющиеФИО(ВыгружаемыйДокумент.ИФНС.УполномоченноеЛицоПредставителя);
			ОсновныеСведения.Вставить("ПодпФамилия",  СоставляющиеФИО.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      СоставляющиеФИО.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", СоставляющиеФИО.Отчество);
			ОсновныеСведения.Вставить("НаимДокПодп",  ВыгружаемыйДокумент.ИФНС.ДокументПредставителя);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОсновныеСведения.Свойство("ПрПодп") ИЛИ (ОсновныеСведения.Свойство("ПрПодп") И ОсновныеСведения.ПрПодп <> "2") Тогда
		Если ЗначениеЗаполнено(ВыгружаемыйДокумент.Подписант) Тогда
			ФИОПодписанта = СведенияОФизЛице(ВыгружаемыйДокумент.Подписант, ВыгружаемыйДокумент.Дата);
			ОсновныеСведения.Вставить("ПрПодп", "1");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			
		Иначе
			ФИОПодписанта = СведенияОРуководителе(ВыгружаемыйДокумент);
			ОсновныеСведения.Вставить("ПрПодп", "1");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОРуководителе(ВыгружаемыйДокумент)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Если ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" Тогда
		Отбор = Новый Структура("Учреждение, ВидОтветственногоЛица", ВыгружаемыйДокумент.Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Руководитель = РегистрыСведений.ОтветственныеЛицаУчреждений.СрезПоследних(ВыгружаемыйДокумент.Дата, Отбор);
	Иначе
		Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", ВыгружаемыйДокумент.Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Руководитель = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ВыгружаемыйДокумент.Дата, Данные);
	КонецЕсли;
	
	Если Руководитель <> Неопределено И Руководитель.Количество() > 0 Тогда
		ФЛ = Руководитель[0][?(ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ", "ОтветственноеЛицо", "ФизическоеЛицо")];
		Если ЗначениеЗаполнено(ФЛ) Тогда
			Если ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" Тогда
				Результат.Фамилия  = СокрЛП(ФЛ.Контрагент.Фамилия);
				Результат.Имя      = СокрЛП(ФЛ.Контрагент.Имя);
				Результат.Отчество = СокрЛП(ФЛ.Контрагент.Отчество);
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ВыгружаемыйДокумент.Дата, Новый Структура("ФизЛицо",ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Результат.Фамилия  = СокрЛП(ДанныеФЛ[0].Фамилия);
					Результат.Имя      = СокрЛП(ДанныеФЛ[0].Имя);
					Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СведенияОФизЛице(ФизЛицо, Дата)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Если ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" Тогда
			Результат.Фамилия  = СокрЛП(ФизЛицо.Фамилия);
			Результат.Имя      = СокрЛП(ФизЛицо.Имя);
			Результат.Отчество = СокрЛП(ФизЛицо.Отчество);
		Иначе
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ФизЛицо));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Результат.Фамилия  = СокрЛП(ДанныеФЛ[0].Фамилия);
				Результат.Имя      = СокрЛП(ДанныеФЛ[0].Имя);
				Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоставляющиеФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция СведенияОбИП(ВыгружаемыйДокумент)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
		ФЛ = ВыгружаемыйДокумент.Организация.ИндивидуальныйПредприниматель;
		Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			ФИОИП = ВыгружаемыйДокумент.Организация.НаименованиеПолное;
		Иначе
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ВыгружаемыйДокумент.Дата, Новый Структура("ФизЛицо", ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Результат.Фамилия = СокрЛП(ДанныеФЛ[0].Фамилия);
				Результат.Имя = СокрЛП(ДанныеФЛ[0].Имя);
				Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		ИндивидуальныйПредприниматель = ВыгружаемыйДокумент.Организация.ИндивидуальныйПредприниматель;
		Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ВыгружаемыйДокумент.Дата, Новый Структура("ФизЛицо", ИндивидуальныйПредприниматель));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Результат.Фамилия = СокрЛП(ДанныеФЛ[0].Фамилия);
				Результат.Имя = СокрЛП(ДанныеФЛ[0].Имя);
				Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РасщепленнаяСтрока(СтрокаЗначения, Разделитель)
	
	Результат = Новый Массив;
	
	ПозицияРазделителя = Найти(СтрокаЗначения, Разделитель);
	Если ПозицияРазделителя = 0 Тогда
		Результат.Добавить(СтрокаЗначения);
		Результат.Добавить("");
	Иначе
		Результат.Добавить(Лев(СтрокаЗначения, ПозицияРазделителя - 1));
		Результат.Добавить(Сред(СтрокаЗначения, ПозицияРазделителя + 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
