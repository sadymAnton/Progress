// ИНТЕРФЕЙСНАЯ ЧАСТЬ ПЕРЕОПРЕДЕЛЯЕМОГО МОДУЛЯ

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ОбработчикиОбновления() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Библиотеки УПП и ЗУП
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    	= "*";
	Обработчик.Процедура 	= "БиблиотекаОбновленияИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы";
	
	// Библиотеки обмена ЭД
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    	= "*";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыЭД.ВыполнитьОбновлениеИнформационнойБазы";
	
	// При создании новой базы
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    	= "1.3.1.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	
	// Версия 1.3.23
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьЗначенияРеквизитовПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется, вызывается для способов распределения, добавленных пользователями
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.УстановитьКонстантуНастройкиСпособовРаспределенияЗатрат";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - по умолчанию будут использоваться новые способы распределения
	
	// Версия 1.3.24.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.24.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - вызывается явно при заполнении новой базы
	
	// Версия 1.3.24.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.24.2";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.ИзменитьНастройкуВыгрузкиСебестоимостиВРозницу";
	Обработчик.Опциональный = Истина; // В новой базе не требуется
	
	// Версия 1.3.25.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.25.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - вызывается явно при заполнении новой базы
	
	// Версия 1.3.28.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.28.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - вызывается явно при заполнении новой базы
	
	// Версия 1.3.29.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.29.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ОбновитьСпособМатериальныеЗатраты";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.32.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.32.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.ЗаполнениеКППКонтрагентаЖурналаУчетаСчетовФактур";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.32.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.32.1";
	Обработчик.Процедура    = "Справочники.СпособыРаспределенияЗатратНаВыпуск.ЗаполнитьСпособыРаспределенияПоУмолчанию";
	Обработчик.Опциональный = Истина; // В новой базе не требуется - вызывается явно при заполнении новой базы
	
	// Версия 1.3.36.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.36.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазыПереопределяемый.УстановитьПорядокПризнанияДопРасходов";
	Обработчик.Опциональный = Истина;

	Возврат Обработчики;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ, НАКОПЛЕННЫХ В ИНФОРМАЦИОННОЙ БАЗЕ ("ОПЦИОНАЛЬНЫЕ")

Процедура УстановитьКонстантуНастройкиСпособовРаспределенияЗатрат() Экспорт
	
	Константы.ИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат.Установить(Истина);
	
КонецПроцедуры

Процедура ИзменитьНастройкуВыгрузкиСебестоимостиВРозницу() Экспорт
	
	ВыборкаУзлов = ПланыОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.Выбрать();
	
	Пока ВыборкаУзлов.Следующий() Цикл
		
		УзелОбмена = ВыборкаУзлов.ПолучитьОбъект();
		
		Если УзелОбмена.УдалитьВыгружатьСебестоимость Тогда
			УзелОбмена.СпособВыгрузкиСебестоимости = Перечисления.СпособыВыгрузкиСебестоимостиВРозничнуюТорговлю.ВыгружатьСебестоимостьРегл;
		Иначе
			УзелОбмена.СпособВыгрузкиСебестоимости = Перечисления.СпособыВыгрузкиСебестоимостиВРозничнуюТорговлю.НеВыгружать;
		КонецЕсли;
		
		УзелОбмена.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// В регистр сведений "ЖурналУчетаСчетовФактур" добавлен новый ресурс КППКонтрагента 
//
Процедура ЗаполнениеКППКонтрагентаЖурналаУчетаСчетовФактур() Экспорт
	
	Запрос	= Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.Контрагент.КПП КАК КППКонтрагента
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.КППКонтрагента = """"
	|	И ЖурналУчетаСчетовФактур.Контрагент.КПП <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.КППКонтрагента	= Выборка.КППКонтрагента;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает значение ПорядокПризнанияДопРасходов в записях учетной политики
//
Процедура УстановитьПорядокПризнанияДопРасходов() Экспорт
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();

	Для каждого Запись Из НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокПризнанияДопРасходов) Тогда
			Запись.ПорядокПризнанияДопРасходов = Перечисления.ПорядокПризнанияДопРасходов.ВключатьВСтоимость;
		КонецЕсли;
				
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения	= НСтр("ru = 'Не выполнено обновление записей регистра сведений ""Учетная политика""'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры
