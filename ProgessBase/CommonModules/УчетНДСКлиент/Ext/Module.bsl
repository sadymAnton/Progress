////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ КНИГ И ЖУРНАЛОВ

// Книга покупок, дополнительные листы книги покупок

Процедура ПреобразоватьЗаписиКнигиПокупок(
		СтруктураПараметров, НаборЗаписей, ТабличныйДокумент = Неопределено, СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено, ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт	
	
	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
	
	СтруктураПараметров.ЗаписьДополнительногоЛиста = Ложь;
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = УчетНДС.ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
	   	
	Счетчик = 0; // Счетчик строк книги покупок
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			Для Каждого ИтогПоДокументу Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого ИтогПоИсправлению Из ИтогПоДокументу.Строки Цикл
					Для Каждого ЗаписьКниги Из ИтогПоИсправлению.Строки Цикл
						
						Если ЗаписьКниги.СводныйКорректировочный Тогда
							Для Каждого ДетальнаяЗапись Из ЗаписьКниги.Строки Цикл

								Счетчик = Счетчик + 1;
								ПараметрыСтроки.Ном = Счетчик;
								
								ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ДетальнаяЗапись, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
								
								ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЦикла;
						Иначе	
							Счетчик = Счетчик + 1;
							ПараметрыСтроки.Ном = Счетчик;
							
							ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
							ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						КонецЕсли;
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
			
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		
		Для каждого ИтогПоДокументу Из ИтогПоОрганизации.Строки Цикл
			Для Каждого ИтогПоИсправлению Из ИтогПоДокументу.Строки Цикл
				Для каждого ЗаписьКниги Из ИтогПоИсправлению.Строки Цикл
					
					Если ЗаписьКниги.СводныйКорректировочный Тогда
						Для Каждого ДетальнаяЗапись Из ЗаписьКниги.Строки Цикл  

							Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;	
							
							Счетчик = Счетчик + 1;
							ПараметрыСтроки.Ном = Счетчик;
							
							ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ДетальнаяЗапись, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
								ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
						КонецЦикла;
					Иначе
						Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
							ПараметрыСтроки = ТаблицаДокумента.Добавить();
						КонецЕсли;	
						
						Счетчик = Счетчик + 1;
						ПараметрыСтроки.Ном = Счетчик;
						
						ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
						// <- Шевченков, добавил вал стоимость из ГТД в книгу покупок
						Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
							ПараметрыСтроки.ВсегоПокупок = ЗаписьКниги.СчетФактураДокумент.товары.Итог("ФактурнаяСтоимость"); 
							ПараметрыСтроки.Валюта = ЗаписьКниги.СчетФактураДокумент.ВалютаДокумента.НаименованиеПолное + ", " + ЗаписьКниги.СчетФактураДокумент.ВалютаДокумента;
						КонецЕсли;
						// ->
						
						Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
							ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьСтрокуКнигиПокупок(
		ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)

	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество()>0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	КонецЕсли;
	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("КодОперации", 	 	ПараметрыЗаполнения.КодВидаОперации);
	СоставСтроки.Вставить("Продавец", 	 	 	ПараметрыЗаполнения.Продавец);
	СоставСтроки.Вставить("ПродавецИНН", 	 	ПараметрыЗаполнения.ПродавецИНН);
	СоставСтроки.Вставить("ПродавецКПП", 	 	ПараметрыЗаполнения.ПродавецКПП);
	СоставСтроки.Вставить("ПродавецРазделитель", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" , ""));
	СоставСтроки.Вставить("Посредник",		 	ПараметрыЗаполнения.Посредник);
	СоставСтроки.Вставить("ПосредникИНН_КПП","" + ПараметрыЗаполнения.ПосредникИНН + 
		?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПосредникКПП), "/" + ПараметрыЗаполнения.ПосредникКПП, ""));
	СоставСтроки.Вставить("Валюта", 			 ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПокупок", 	 	ЗаписьКниги.ВсегоПокупок);
	СоставСтроки.Вставить("СуммаБезНДС20", 	  	ЗаписьКниги.СуммаБезНДС20);
	СоставСтроки.Вставить("НДС20", 			  	ЗаписьКниги.НДС20);
	СоставСтроки.Вставить("СуммаБезНДС18", 	 	ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18", 	 		 	ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10", 	 	ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10", 	 		 	ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0", 	 		 	ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("НДС", 	 		 	ЗаписьКниги.НДС);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", 	ЗаписьКниги.СуммаСовсемБезНДС);
	СоставСтроки.Вставить("ДатаНомер", 			ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров));
	СоставСтроки.Вставить("НомерДата", 			ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров,Истина));
		
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		СтруктураПараметров.ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли;

	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;	
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();  
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";
	ТекстСтранаНомерГТД = "";
	ТекстДатаОприходования = "";
	
	СуммаСНДС = 0;
	
	Если ЭтоДетальнаяЗапись Тогда
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
				СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
			КонецЕсли;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОприходования) Тогда
			Если СписокДатОприходования.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстДатаОприходования = ТекстДатаОприходования + ?(НЕ ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy");
				СписокДатОприходования.Добавить(Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокументРасшифровка;
		
	Иначе
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
					ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				КонецЕсли;			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОприходования) Тогда
				Если СписокДатОприходования.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
					ТекстДатаОприходования = ТекстДатаОприходования + ?(НЕ ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy");
					СписокДатОприходования.Добавить(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыСтроки.СчетФактура = СтрокаЗаписи.СчетФактураДокументРасшифровка;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
		
	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстСтранаНомерГТД = ТекстСтранаНомерГТД + ?(ТекстСтранаНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТД);
			КонецЕсли;

			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДополнительнойИнформации.СуммаСНДС) Тогда
				СуммаСНДС = СуммаСНДС + СтрокаДополнительнойИнформации.СуммаСНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;		
	
	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты);
	СоставСтроки.Вставить("НомерГТД",  ТекстСтранаНомерГТД);
	СоставСтроки.Вставить("НомерГТД_", ТекстНомерГТД);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);

КонецПроцедуры

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПокупок(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, ТабличныйДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено, ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = УчетНДС.ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
	
	Счетчик = 0;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для Каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
				Для каждого ИтогПоИсправлениям Из ЗаписьПоСФ.Строки Цикл
					Для каждого ЗаписьКниги Из ИтогПоИсправлениям.Строки Цикл
						
						Счетчик = Счетчик + 1;
						ПараметрыСтроки.Ном = Счетчик;
						
						ЗаполнитьСтрокуДополнительногоЛистаКнигаПокупок(ПараметрыСтроки, ЗаписьКниги, СтруктураПараметров.ЕстьЗаписиПоКолонке20,
							СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
						ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
						ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС + ЗаписьКниги.НДС;							
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
			Для Каждого ИтогПоИсправлениям Из ЗаписьПоСФ.Строки Цикл
				Для каждого ЗаписьКниги Из ИтогПоИсправлениям.Строки Цикл
					
					Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ПараметрыСтроки = ТаблицаДокумента.Добавить();
					КонецЕсли;	
					
					Счетчик = Счетчик + 1;
					ПараметрыСтроки.Ном = Счетчик;
					
					ЗаполнитьСтрокуДополнительногоЛистаКнигаПокупок(ПараметрыСтроки, ЗаписьКниги, СтруктураПараметров.ЕстьЗаписиПоКолонке20,
						СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
											
					Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
					КонецЕсли;
	                					
					ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
					ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
					ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
					ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
					ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
					ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
					ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
					ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
					ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС + ЗаписьКниги.НДС;						
					ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьСтрокуДополнительногоЛистаКнигаПокупок(
		ПараметрыСтроки, ЗаписьКниги, ЕстьЗаписиПоКолонке20, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)
		
	ПараметрыЗаполнения = ЗаписьКниги.Строки[0];		
		
	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	КонецЕсли;	
			
	СтрокаДополнительнойИнформации = Неопределено;
	ДатаНомер = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров);
	НомерДата = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров, Истина);
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	
        	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("КодОперации", 	 	ПараметрыЗаполнения.КодВидаОперации);
	СоставСтроки.Вставить("Продавец", 	 	 	ПараметрыЗаполнения.Продавец);
	СоставСтроки.Вставить("ПродавецИНН", 	 	ПараметрыЗаполнения.ПродавецИНН);
	СоставСтроки.Вставить("ПродавецКПП", 	 	ПараметрыЗаполнения.ПродавецКПП);
	СоставСтроки.Вставить("ПродавецРазделитель", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" , ""));
	СоставСтроки.Вставить("Валюта", 			 ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПокупок", 	 	ЗаписьКниги.ВсегоПокупок);
	СоставСтроки.Вставить("СуммаБезНДС18", 	 	ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18", 	 		 	ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10", 	 	ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10", 	 		 	ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0", 	 		 	ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("НДС", 	 		 	ЗаписьКниги.НДС);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", 	ЗаписьКниги.СуммаСовсемБезНДС);
	СоставСтроки.Вставить("ДатаНомер", 			ДатаНомер);
	СоставСтроки.Вставить("НомерДата", 			НомерДата);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ПараметрыЗаполнения.СчетФактураДокумент;
	КонецЕсли;

	Если НЕ ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 
    



	ТекстОплаты = "";
	ТекстОплатыСНомером = "";
	ТекстСтранаНомерГТД = "";
	ТекстНомерГТД = "";
	ТекстДатаОприходования = "";
	
	СписокДатОплат = Новый СписокЗначений();
	СписокНомеровИДатОплат = Новый СписокЗначений();	
	СписокДатОприходования = Новый СписокЗначений();
		

	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+ Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
			КонецЕсли;			
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОприходования) Тогда
			Если СписокДатОприходования.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстДатаОприходования = ТекстДатаОприходования + ?(НЕ ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy");
				СписокДатОприходования.Добавить(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);	

	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
			
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстСтранаНомерГТД = ТекстСтранаНомерГТД + ?(ТекстСтранаНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ";") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
			КонецЕсли;

			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		

	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты);
	СоставСтроки.Вставить("НомерГТД",  ТекстСтранаНомерГТД);
	СоставСтроки.Вставить("НомерГТД_", ТекстНомерГТД);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
						
КонецПроцедуры

Процедура ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста) Экспорт
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");	
		ТабличныйДокумент.Вывести(Секция);	
	КонецЕсли;	
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;	
	КонецЕсли;
		
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = "Отбор: Контрагент " + ?(СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа, "в группе ", "= ") + СтруктураПараметров.КонтрагентДляОтбора;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

// Книга продаж, дополнительные листы книги продаж
                                                                             
Процедура ПреобразоватьЗаписиКнигиПродаж(
		СтруктураПараметров, НаборЗаписей, ТабличныйДокумент = Неопределено, СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено, ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт	
		
	ЕстьЗаписиПоКолонке20 = Ложь;
		
	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
		
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур);
		
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = СтруктураСекций.СекцияКонтрагент;
		СекцияВсегоКонтрагент = СтруктураСекций.СекцияВсегоКонтрагент;
	КонецЕсли;
	
	Счетчик = 0; // Счетчик строк книги продаж	
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл 
			СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабличныйДокумент.Вывести(СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для Каждого НалоговыеПериоды Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого СтрокаПоПорядокОтражения Из НалоговыеПериоды.Строки Цикл
					Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
						Для Каждого ЗаписьКниги  Из ИтогПоДокументу.Строки Цикл
							
							Если ЗаписьКниги.СводныйКорректировочный Тогда
								Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
									Счетчик = Счетчик + 1;
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик); 
									ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								КонецЦикла;
							Иначе
								Счетчик = Счетчик + 1;
								ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
								ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
							
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
		КонецЦикла;
		
	Иначе
		
		Для Каждого НалоговыеПериоды Из ИтогПоОрганизации.Строки Цикл
			Для Каждого СтрокаПоПорядокОтражения Из НалоговыеПериоды.Строки Цикл
				Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
					Для Каждого ЗаписьКниги Из ИтогПоДокументу.Строки Цикл
						
						Если ЗаписьКниги.Строки.Количество() > 1 И ЗаписьКниги.Покупатель = "Розничная продажа" 
							ИЛИ ЗаписьКниги.СводныйКорректировочный Тогда
							
							Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл   

								Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								Счетчик = Счетчик + 1;
								ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик);
								
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
									ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								КонецЕсли;
								
							КонецЦикла;
						Иначе
							
							Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;
							Счетчик = Счетчик + 1;
							ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
								ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла;
		
	КонецЕсли;

		
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, Секция, ЗаписьКниги, НомерСтроки = Неопределено)
	
	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество()>0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Секция) = Тип("ТабличныйДокумент") Тогда
		Секция.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(Секция, ПараметрыЗаполнения);
	КонецЕсли;	

	Секция.ВсегоПродаж	 	  = ЗаписьКниги.ВсегоПродаж;
	Секция.СуммаБезНДС18 	  = ЗаписьКниги.СуммаБезНДС18;
	Секция.НДС18 			  = ЗаписьКниги.НДС18;
	Секция.СуммаБезНДС10 	  = ЗаписьКниги.СуммаБезНДС10;
	Секция.НДС10 			  = ЗаписьКниги.НДС10;
	Секция.НДС0 			  = ЗаписьКниги.НДС0;
	Секция.СуммаСовсемБезНДС  = ЗаписьКниги.СуммаСовсемБезНДС; 

	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Секция.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	ИначеЕсли ЗаписьКниги.Строки.Количество() <> 0 Тогда
		Секция.СчетФактура = ЗаписьКниги.Строки[0].СчетФактура;
	КонецЕсли;
		
	Если ЭтоДетальнаяЗапись И ЗаписьКниги.Строки.Количество() = 0 Тогда
		РасшифровкаДанныхПокупателя = ЗаписьКниги;
	Иначе
		РасшифровкаДанныхПокупателя = ПараметрыЗаполнения;
	КонецЕсли;
	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("Ном", 			 НомерСтроки);
	СоставСтроки.Вставить("КодОперации", 	 РасшифровкаДанныхПокупателя.КодВидаОперации);
	СоставСтроки.Вставить("Покупатель", 	 РасшифровкаДанныхПокупателя.Покупатель);
	СоставСтроки.Вставить("ПокупательИНН", 	 РасшифровкаДанныхПокупателя.ПокупательИНН);
	СоставСтроки.Вставить("ПокупательКПП", 	 РасшифровкаДанныхПокупателя.ПокупательКПП);
	СоставСтроки.Вставить("ПокупательРазделитель", ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПокупательКПП), "/" , ""));
	СоставСтроки.Вставить("Посредник",		 РасшифровкаДанныхПокупателя.Посредник);
	СоставСтроки.Вставить("ПосредникИНН_КПП","" + РасшифровкаДанныхПокупателя.ПосредникИНН + 
		?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПосредникКПП), "/" + РасшифровкаДанныхПокупателя.ПосредникКПП, ""));
	СоставСтроки.Вставить("Валюта", 			   ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта),
		"" + РасшифровкаДанныхПокупателя.Валюта + ", " + РасшифровкаДанныхПокупателя.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПродажВВалюте",    ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта),
		РасшифровкаДанныхПокупателя.ВсегоПродажВВалюте, ""));
	СоставСтроки.Вставить("ДатаНомер", 	 	 ОпределитьДатуИНомерСФ(РасшифровкаДанныхПокупателя, СтруктураПараметров));
	СоставСтроки.Вставить("НомерДата", 	 	 ОпределитьДатуИНомерСФ(РасшифровкаДанныхПокупателя, СтруктураПараметров,Истина));
	
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.СчетФактура) Тогда
		СтрокаДополнительнойИнформации = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(РасшифровкаДанныхПокупателя.СчетФактура.УникальныйИдентификатор())];
		Если НЕ СтрокаДополнительнойИнформации = Неопределено 
			И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
			СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли; 
	Иначе
		СтрокаДополнительнойИнформации = Неопределено;
	КонецЕсли;
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФКнигаПродаж(РасшифровкаДанныхПокупателя, СтруктураПараметров);	
	Секция.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФКнигаПродаж(РасшифровкаДанныхПокупателя, СтруктураПараметров);
	Секция.НомерДатаКорректировки = НомерДатаКорректировки;	
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФКнигаПродаж(РасшифровкаДанныхПокупателя, СтруктураПараметров);
	Секция.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;
		
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	Если ЭтоДетальнаяЗапись Тогда 
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
			КонецЕсли;			
		КонецЕсли;
	Иначе
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + ";" + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
					ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
				КонецЕсли;			
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("ДатаОплаты", 	 ТекстОплаты);
	
	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки); 
	
КонецПроцедуры

Функция ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур, ЗаписьДополнительногоЛиста = Ложь)
	
	// Определить частичные оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДСОборот + НДСЗаписиКнигиПродаж.НДСОборот) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И НЕ(ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|						ИЛИ ВидЦенности В (&ВидыЦенностей_БезОплаты))) КАК НДСЗаписиКнигиПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("СписокСчетовФактур",  СписокСчетовФактур);
	
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;
	
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаИнформации.СчетФактура) Тогда
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаИнформации.СчетФактура.УникальныйИдентификатор()), СтрокаИнформации);
		КонецЕсли; 
	КонецЦикла; 
	
	// дополняем информацию датами оплаты,
	// отраженными в регистре записей книг отдельно от сумм

	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ДатыОплаты");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И ВЫБОР
	|			КОГДА &ЗаписьДополнительногоЛиста
	|					И &ДополнительныеЛистыЗаТекущийПериод
	|				ТОГДА НДСЗаписиКнигиПродаж.Период >= &НачалоПериода
	|						И (НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И НДСЗаписиКнигиПродаж.СчетФактура В(&СписокСчетовФактур)
	|	И НДСЗаписиКнигиПродаж.СуммаБезНДС = 0
	|	И НДСЗаписиКнигиПродаж.НДС = 0
	|	И НЕ ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЗаписьДополнительногоЛиста", ЗаписьДополнительногоЛиста);
	Запрос.УстановитьПараметр("ДополнительныеЛистыЗаТекущийПериод", СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	ДатыОплатСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСФ Из ДатыОплатСФ.Строки Цикл
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиИнформацииСФ = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
		Если СтрокиИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
		Иначе
			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
		КонецЕсли; 
		
		Для Каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
			СтрокаИнформацииСФ.ДатыОплаты = СтрокаСФ.Строки.ВыгрузитьКолонку("ДатаОплаты");;
		КонецЦикла; 
	КонецЦикла; 

	Возврат ДополнительнаяИнформацияПоСФ;
	
КонецФункции // ПолучитьДополнительнуюИнформациюПоСФ()

Процедура ЗаполнениеДатыИНомераСФ(ЗаписьКниги, СтруктураПараметров, Секция)
		
	ДатаНомер = ОпределитьДатуИНомерСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров);		
	Секция.ДатаНомер = ДатаНомер;
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров);	
	Секция.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров);
	Секция.НомерДатаКорректировки = НомерДатаКорректировки;	
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров);
	Секция.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	
		
КонецПроцедуры

Функция ОпределитьДатуИНомерСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)
		
	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат "";
	КонецЕсли;	

	Если ЗначениеЗаполнено(ЗаписьКниги.ДатаСчетаФактуры) И ЗначениеЗаполнено(ЗаписьКниги.НомерСчетаФактуры) Тогда
		Если ЗаписьКниги.ОбрабатыватьНомерДокумента 
			ИЛИ ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда			
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ";" + ОбщегоНазначения.ПолучитьНомерНаПечать(
				Новый Структура("Дата, Номер, Организация", ЗаписьКниги.ДатаСчетаФактуры, ЗаписьКниги.НомерСчетаФактуры, СтруктураПараметров.Организация), СтруктураПараметров.ПрефиксыРИБиОрганизации);
		Иначе
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ";" + СокрЛП(ЗаписьКниги.НомерСчетаФактуры);
		КонецЕсли;
	Иначе
		
		ДатаНомер = "";
		
		Если ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ";" + ОбщегоНазначения.ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактура, СтруктураПараметров.ПрефиксыРИБиОрганизации);
		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ";" + ОбщегоНазначения.ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактураДокумент, СтруктураПараметров.ПрефиксыРИБиОрганизации);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ДатаНомер;
		
КонецФункции

Функция ОпределитьНомерИДатуКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерКорректировки + ";" + Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		НомерДата = "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Функция ОпределитьНомерИДатуИсправленногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)

	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправления) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправления) Тогда
		НомерДата = "" + СокрЛП(ЗаписьКниги.НомерИсправления) + ";" + Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy") ;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Функция ОпределитьНомерИДатуИсправленияКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправленияКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправленияКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерИсправленияКорректировки  + ";" + Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПродаж(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, ТабличныйДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено, ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур, Истина);
	
	Счетчик = 0; // Счетчик строк книги продаж		
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
					Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
						
						Счетчик = Счетчик + 1;
						
						ЗаполнитьСтрокуДополнительногоЛистаКнигаПродаж(ПараметрыСтроки, ЗаписьКниги, СтруктураПараметров.ЕстьЗаписиПоКолонке20,
							СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров, Счетчик);
						
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
						ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;  
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе	
		Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
			Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
				Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
					
					Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ПараметрыСтроки = ТаблицаДокумента.Добавить();
					КонецЕсли;
					
					Счетчик = Счетчик + 1;					
					
					ЗаполнитьСтрокуДополнительногоЛистаКнигаПродаж(ПараметрыСтроки, ЗаписьКниги, СтруктураПараметров.ЕстьЗаписиПоКолонке20,
							СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров, Счетчик);
							
					Если Не СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
					КонецЕсли;
					
					ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
					ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
					ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
					ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
					ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
					ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
					ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
					ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
					ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДополнительногоЛистаКнигаПродаж(
		ПараметрыСтроки, ЗаписьКниги, ЕстьЗаписиПоКолонке20, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров, НомерСтроки = Неопределено)
	
	СтрокаДополнительнойИнформации = Неопределено;
	ПараметрыЗаполнения = ЗаписьКниги.Строки[0];	
	
	ДатаНомер = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров);
	НомерДата = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров, Истина);
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправления = НомерДатаИсправления;	

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаКорректировки = НомерДатаКорректировки;
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = НомерДатаИсправленияКорректировки;	

	Если ТипЗнч(ПараметрыСтроки) = Тип("ТабличныйДокумент") Тогда
		ПараметрыСтроки.Заполнить(ПараметрыЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	КонецЕсли;	
	
	ПараметрыСтроки.ВсегоПродаж 	   = ЗаписьКниги.ВсегоПродаж;
	ПараметрыСтроки.СуммаБезНДС18 	   = ЗаписьКниги.СуммаБезНДС18;
	ПараметрыСтроки.НДС18 			   = ЗаписьКниги.НДС18;
	ПараметрыСтроки.СуммаБезНДС10 	   = ЗаписьКниги.СуммаБезНДС10;
	ПараметрыСтроки.НДС10 			   = ЗаписьКниги.НДС10;
	ПараметрыСтроки.НДС0 			   = ЗаписьКниги.НДС0;
	ПараметрыСтроки.СуммаБезНДС20 	   = ЗаписьКниги.СуммаБезНДС20;
	ПараметрыСтроки.НДС20 			   = ЗаписьКниги.НДС20;
	ПараметрыСтроки.СуммаСовсемБезНДС = ЗаписьКниги.СуммаСовсемБезНДС;
	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("Ном", 			 НомерСтроки);
	СоставСтроки.Вставить("КодОперации", 	 ПараметрыЗаполнения.КодВидаОперации);
	СоставСтроки.Вставить("Покупатель", 	 ПараметрыЗаполнения.Покупатель);
	СоставСтроки.Вставить("ПокупательИНН", 	 ПараметрыЗаполнения.ПокупательИНН);
	СоставСтроки.Вставить("ПокупательКПП", 	 ПараметрыЗаполнения.ПокупательКПП);
	СоставСтроки.Вставить("ПокупательРазделитель", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПокупательКПП), "/" , ""));
	СоставСтроки.Вставить("Валюта", 			   ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПродажВВалюте",    ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		ПараметрыЗаполнения.ВсегоПродажВВалюте, ""));
	СоставСтроки.Вставить("ДатаНомер",		 ДатаНомер);
	СоставСтроки.Вставить("НомерДата",		 НомерДата);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.СчетФактураДокумент) Тогда
		ПараметрыСтроки.СчетФактура = ПараметрыЗаполнения.СчетФактураДокумент;
	КонецЕсли;

	Если НЕ ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 

	ПараметрыСтроки.ДатаНомер = ДатаНомер;

	ТекстОплаты = "";
	ТекстДатаОприходования = "";
	СписокДатОплат = Новый СписокЗначений();
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();	
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";
	
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+ Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + ";" + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+Символы.ПС) + НомерДатаОплаты;
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;

	// ГТД и страна происхождения, дополнительные оплаты
	СчетаФактуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
			Если НЕ СтрокаДополнительнойИнформации = Неопределено 
				И НЕ СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
				СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			КонецЕсли; 
			
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		

	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("ДатаОплаты", 	 ТекстОплаты);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
						
КонецПроцедуры

// Журнал учета счетов-фактур

Процедура ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур, СтруктураПараметров) Экспорт
	
	ТекстБезНДС	= "без НДС";
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур);
	
	// универсальная структутра для заполнения книги по разным версиям
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("ДатаПередачиПолучения",	?(ЗаписьЖурналаУчетаСчетовФактур.СчетФактураНеВыставляется, 
		"", ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения));
	СоставСтроки.Вставить("КодОперации", 	 		ЗаписьЖурналаУчетаСчетовФактур.КодВидаОперации);
	СоставСтроки.Вставить("НомерСчетаФактуры", 	 	ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры);
	СоставСтроки.Вставить("ДатаСчетаФактуры", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДата", 	 			"" + ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры 
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерИсправления", 	 	ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления);
	СоставСтроки.Вставить("ДатаИсправления", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаИсправления", 	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерКорректировочногоСчетаФактуры", 	ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры);
	СоставСтроки.Вставить("ДатаКорректировочногоСчетаФактуры", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаКорректировки",	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", 	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));	
	СоставСтроки.Вставить("ДатаПередачиПолучения",	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("КонтрагентИННКПП",		СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП));
	СоставСтроки.Вставить("Валюта",					СокрП(ЗаписьЖурналаУчетаСчетовФактур.НаименованиеВалюты) 
		+ ", " + ЗаписьЖурналаУчетаСчетовФактур.КодВалюты);	
	СоставСтроки.Вставить("СубкомиссионерИНН_КПП", 	СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.СубкомиссионерИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.СубкомиссионерИНН),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.СубкомиссионерИНН));
	СоставСтроки.Вставить("КомитентИНН_КПП", 		СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КомитентКПП));	
	СоставСтроки.Вставить("НомерДатаСчетаФактурыКомитента",	СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента),";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактурыКомитента, "ДФ=dd.MM.yyyy"));	
		
	Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда

		
		СоставСтроки.Вставить("СуммаДокумента", "");
		СоставСтроки.Вставить("СуммаНДС", "");
		
	Иначе
		
		СоставСтроки.Вставить("НомерКорректировочногоСчетаФактуры", "");
		СоставСтроки.Вставить("ДатаКорректировочногоСчетаФактуры", "");
		
		СоставСтроки.Вставить("СуммаДокументаРазницаУменьшение", "");
		СоставСтроки.Вставить("СуммаДокументаРазницаУвеличение", "");
		СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", "");
		СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", "");
		
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.Контрагент = ЗаписьЖурналаУчетаСчетовФактур.Организация Тогда
		СоставСтроки.Вставить("КонтрагентНаименование", СтруктураПараметров.НаименованиеОрганизацииДляПечатныхФорм);
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.СчетФактураБезНДС Тогда
		
		Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
			СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", ТекстБезНДС);
			СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", ТекстБезНДС);
		Иначе
			СоставСтроки.Вставить("СуммаНДС", ТекстБезНДС);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
	
КонецПроцедуры

// Вспомогательные процедуры

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает дату и номер счета-фактуры
// Определяет строку доп. информации, присваивает значение переменной СтрокаДополнительнойИнформации
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги, СтруктураПараметров, НомерВпереди = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат "";
	КонецЕсли;
	
	ДатаСФ 	= "";
	НомерСФ = "";	
	
	Если ЗначениеЗаполнено(ЗаписьКниги.ДатаСчетаФактуры) И ЗначениеЗаполнено(ЗаписьКниги.НомерСчетаФактуры) Тогда
		
		Если ЗаписьКниги.ОбрабатыватьНомерДокумента Тогда
			
			ДатаСФ = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
			НомерСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(
					Новый Структура("Дата, Номер, Организация", ЗаписьКниги.ДатаСчетаФактуры, ЗаписьКниги.НомерСчетаФактуры, СтруктураПараметров.Организация), 
					СтруктураПараметров.ПрефиксыРИБиОрганизации);			
		Иначе
			
			ДатаСФ = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(ЗаписьКниги.НомерСчетаФактуры);
			
		КонецЕсли;  
		
	Иначе

		Если ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			ДатаСФ = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактура, СтруктураПараметров.ПрефиксыРИБиОрганизации);

		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			ДатаСФ = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактураДокумент, СтруктураПараметров.ПрефиксыРИБиОрганизации); 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВпереди Тогда		
		Возврат "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), ";", "") + ДатаСФ;		
	Иначе		
		Возврат "" + ДатаСФ + ?(ЗначениеЗаполнено(ДатаСФ), ";", "") + НомерСФ;		
	КонецЕсли;	
		
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры корректировочного
Функция ОпределитьНомерИДатуКорректировочногоСФ(ЗаписьКниги)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерКорректировки + ";" + Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		НомерДата = "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры исправленного
Функция ОпределитьНомерИДатуИсправленногоСФ(ЗаписьКниги)

	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправления) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправления) Тогда
		НомерДата = "" + СокрЛП(ЗаписьКниги.НомерИсправления) + ";" + Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy") ;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры корректировочного исправленного
Функция ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ЗаписьКниги)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправленияКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправленияКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерИсправленияКорректировки  + ";" + Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции
