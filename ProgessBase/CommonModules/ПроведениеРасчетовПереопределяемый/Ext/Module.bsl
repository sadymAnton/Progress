
// Производит расчет записей набора записей регистра расчета
// параметры:
//  ИсходныеДанные - результат запроса к исходным данным
//  НаборЗаписейРегистра - набор записей
//  ЗаписиДоходыНДФЛ - набор записей регистра доходов НДФЛ
//  ГоловнаяОрганизация - ссылка на организацию
//  ОбособленноеПодразделение - ссылка на обособленное подразделение
//	ТабличнаяЧастьДокумента - табличная часть документа, заполняется по результатам расчета
//
// возвращаемое значение:
//	нет
//
Процедура РассчитатьЗаписиНабора(ИсходныеДанные,
									НаборЗаписейРегистра,
									НеобходимыеДанные,
									ЗаписиДоходыНДФЛ,
									ГоловнаяОрганизация,
									ОбособленноеПодразделение,
									ТабличнаяЧастьДокумента,
									ДанныеДляПрогнозаНДФЛ = Неопределено,
									СведенияОДоначислениях = Неопределено,
									КурсВалютыУпрУчета = Неопределено,
									ПовторныйРасчет = Ложь,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено)
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ПустойКодДохода = Справочники.ДоходыНДФЛ.ПустаяСсылка();
	
	// признаки расчета набора записей определенного регистра
	ОсновныеНачисленияОрганизаций = Ложь;
	ДополнительныеНачисленияОрганизаций = Ложь;
	УправленческиеНачисления = Ложь;
	РегламентированныеУдержания = Ложь;
	РегламентированныеНачисления = Ложь;
	Если ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
		ОсновныеНачисленияОрганизаций = Истина;
		РегламентированныеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
		ДополнительныеНачисленияОрганизаций = Истина;
		РегламентированныеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеНачисления") Тогда
		УправленческиеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УдержанияРаботниковОрганизаций") Тогда
		РегламентированныеУдержания = Истина;
	КонецЕсли;
	
	// Соответствие для хранения графика с ошибками
	ГрафикиБезРабочегоВремени = Новый ТаблицаЗначений;
	ГрафикиБезРабочегоВремени.Колонки.Добавить("ГрафикРаботы");
	ГрафикиБезРабочегоВремени.Колонки.Добавить("ВидУчетаВремени");
	
	ВычетНДФЛКод405 = Справочники.ВычетыНДФЛ.Код405;
	ВычетНДФЛКод404 = Справочники.ВычетыНДФЛ.Код404;
	ВычетНДФЛКод403 = Справочники.ВычетыНДФЛ.Код403;
	ВычетНДФЛМатпомощьПриРожденииРебенка = Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка;
	Для Каждого СтрокаДвижений Из НаборЗаписейРегистра Цикл
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаТабличнойЧасти = Неопределено;
			Если ТабличнаяЧастьДокумента <> Неопределено Тогда
				Если МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
					//расчет всего документа
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
				Иначе
					//расчет по сотруднику
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
				КонецЕсли;
			КонецЕсли;
			
			РассчитатьЗаписьРегистраРасчета(СтрокаДвижений, ИсходныеДанные, УправленческиеНачисления, РегламентированныеНачисления, РегламентированныеУдержания, ОсновныеНачисленияОрганизаций, ДополнительныеНачисленияОрганизаций, ДанныеДляПрогнозаНДФЛ, СведенияОДоначислениях, КурсВалютыУпрУчета, ПовторныйРасчет, КомментироватьРасчет, ФормаКомментариев, ГрафикиБезРабочегоВремени);
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
				
				Если (ОсновныеНачисленияОрганизаций ИЛИ ДополнительныеНачисленияОрганизаций) И СтрокаДвижений.Авторасчет Тогда
					СтрокаТабличнойЧасти.ОплаченоДнейЧасов = СтрокаДвижений.ОплаченоДнейЧасов;
				КонецЕсли;
				
				Если ОсновныеНачисленияОрганизаций и НеобходимыеДанные.РазмерПособияПоУходуЗаРебенкомДо1_5Лет Тогда
					СтрокаТабличнойЧасти.ДополнительныйРезультат = СтрокаДвижений.ДополнительныйРезультат;
				КонецЕсли;	
				
				// расчет вычетов для НДФЛ
				Если ДополнительныеНачисленияОрганизаций И НеобходимыеДанные.ВычетыКДоходамНДФЛ И СтрокаДвижений.Авторасчет Тогда
					Если СтрокаТабличнойЧасти.КодВычета = ВычетНДФЛКод405 Тогда
						СтрокаТабличнойЧасти.СуммаВычета = СтрокаДвижений.Результат * ИсходныеДанные.НормативЗатрат / 100;
					ИначеЕсли СтрокаТабличнойЧасти.КодВычета = ВычетНДФЛМатпомощьПриРожденииРебенка Тогда
						Если СтрокаДвижений.Сторно Тогда
							СтрокаТабличнойЧасти.СуммаВычета = Макс(СтрокаДвижений.Результат, -СтрокаТабличнойЧасти.КоличествоДетей * ИсходныеДанные.НормативЗатрат);
						Иначе
							СтрокаТабличнойЧасти.СуммаВычета = Мин(СтрокаДвижений.Результат, СтрокаТабличнойЧасти.КоличествоДетей * ИсходныеДанные.НормативЗатрат);
						КонецЕсли;
					ИначеЕсли СтрокаТабличнойЧасти.КодВычета = ВычетНДФЛКод403 Или СтрокаТабличнойЧасти.КодВычета = ВычетНДФЛКод404 Тогда  // фактические расходы, их изменять не следует
					Иначе
						Если Не СтрокаДвижений.Сторно Тогда
							СтрокаТабличнойЧасти.СуммаВычета = Макс(0, ИсходныеДанные.ГодовойВычет - ИсходныеДанные.СуммаВычетаОборот);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// если передали таблицу (или набор записей) для заполнения движений о доходах НДФЛ
			// если код дохода указан
			// и если результат не нулевой
			// запишем движение в доходы НДФЛ
			Если ЗаписиДоходыНДФЛ <> Неопределено И 
				ИсходныеДанные.КодДоходаНДФЛ <> ПустойКодДохода И 
				СтрокаДвижений.Результат <> 0 Тогда
				// если определен код дохода с точки зрения НДФЛ - добавим строку в доходы НДФЛ
				Движение = ЗаписиДоходыНДФЛ.Добавить();
				// свойства 
				Движение.Регистратор				= СтрокаДвижений.Регистратор;
				Если ОсновныеНачисленияОрганизаций 
					И ИсходныеДанные.УчитыватьДоходПоПериодуДействия Тогда
					Движение.Период					= СтрокаДвижений.ПериодДействия;
				Иначе
					Движение.Период					= СтрокаДвижений.ПериодРегистрации;
				КонецЕсли;
				
				// Измерения
				Движение.Организация				= ГоловнаяОрганизация;
				Движение.Физлицо					= СтрокаДвижений.Физлицо;
				Движение.КодДохода					= ИсходныеДанные.КодДоходаНДФЛ;
				Движение.ПериодРегистрации			= СтрокаДвижений.ПериодРегистрации;
				// Ресурсы
				Движение.СуммаДохода				= СтрокаДвижений.Результат;
				// реквизиты
				Движение.ОбособленноеПодразделение	= ОбособленноеПодразделение;
				Движение.ПодразделениеОрганизации	= СтрокаДвижений.ПодразделениеОрганизации;
				Движение.ВидРасчета					= СтрокаДвижений.ВидРасчета;
				Движение.ИсчисленоИзЗарплаты		= Истина;
				
				// выполнен расчет вычетов для НДФЛ
				Если ДополнительныеНачисленияОрганизаций И НеобходимыеДанные.ВычетыКДоходамНДФЛ Тогда
					Движение.СуммаВычета			= СтрокаТабличнойЧасти.СуммаВычета;
					Движение.КодВычета				= СтрокаТабличнойЧасти.КодВычета;
				КонецЕсли;
			КонецЕсли;
			
			// если это данные по виду расчета, период действия которого является отработанным временем
			// или учитывается как норма времени, то для рассчитываемой записи сохраним данные о времени
			Если (ОсновныеНачисленияОрганизаций ИЛИ УправленческиеНачисления) И СтрокаДвижений.Авторасчет Тогда
				
				СпособРасчета = ИсходныеДанные.СпособРасчета;
				
				БылоСообщениеОРабочемВремени = (
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням или 
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы или
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы); 
				
				БылоСообщениеОВидеВремени = Ложь;
				
				Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
					СтрокаДвижений.ОтработаноДней = 0;
					СтрокаДвижений.ОтработаноЧасов = 0;
					Если Не БылоСообщениеОРабочемВремени  Тогда
						СообщениеОбОшибке = Ложь;
						ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, , СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
						БылоСообщениеОРабочемВремени = СообщениеОбОшибке;
					КонецЕсли;
					Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням 
						Или СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
						СтрокаДвижений.ОтработаноДней = ИсходныеДанные.ОтработаноДней * ?(СтрокаДвижений.Сторно,-1,1);
						СтрокаДвижений.ОтработаноЧасов = ИсходныеДанные.ОтработаноЧасов * ?(СтрокаДвижений.Сторно,-1,1);
					Иначе
						ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + СтрокаДвижений.ВидРасчета + ": Не задан вид учета времени");
						БылоСообщениеОВидеВремени = Истина;
					КонецЕсли;
					Если ОсновныеНачисленияОрганизаций Тогда
						СтрокаДвижений.ОтработаноДнейПоПятидневке = ИсходныеДанные.ОтработаноВремениПроизводственныйГрафик * ?(СтрокаДвижений.Сторно,-1,1) ;
						СтрокаДвижений.ОтработаноЧасовПоПятидневке = ИсходныеДанные.ОтработаноЧасовПроизводственныйГрафик * ?(СтрокаДвижений.Сторно,-1,1) ;
					КонецЕсли;
				КонецЕсли;
				
				Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.ЗачетНормыВремени Тогда
					СтрокаДвижений.НормаЧасов = 0;
					СтрокаДвижений.НормаДней = 0;
					СтрокаДвижений.НормаДнейПоПятидневке = 0;
					СтрокаДвижений.НормаЧасовПоПятидневке = 0;
					Если ИсходныеДанные.НормаОплачиваемыхЧасов = NULL Тогда
						Если Не БылоСообщениеОРабочемВремени Тогда
							ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
						КонецЕсли;
					ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням 
						Или ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
						Если ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением Тогда
							СтрокаДвижений.НормаЧасов = ИсходныеДанные.ОтработаноЧасов * ?(СтрокаДвижений.Сторно,-1,1);
						Иначе 	
							СтрокаДвижений.НормаЧасов = ИсходныеДанные.НормаОплачиваемыхЧасов * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.НормаДней = ИсходныеДанные.НормаОплачиваемыхДней * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.НормаДнейПоПятидневке = ИсходныеДанные.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия * ?(СтрокаДвижений.Сторно,-1,1);
							СтрокаДвижений.НормаЧасовПоПятидневке = ИсходныеДанные.ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия * ?(СтрокаДвижений.Сторно,-1,1);
						КонецЕсли;
					ИначеЕсли Не БылоСообщениеОВидеВремени Тогда
						ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задан вид учета времени");
					КонецЕсли;
				КонецЕсли;
				
				// Перепишем данные из регистра в табличную часть документа
				Если СтрокаТабличнойЧасти <> Неопределено тогда
					Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
						СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.ОтработаноДней;
						СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.ОтработаноЧасов;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = СтрокаДвижений.ОтработаноДнейПоПятидневке;
							СтрокаТабличнойЧасти.ОтработаноЧасовПоПятидневке = СтрокаДвижений.ОтработаноЧасовПоПятидневке;
						КонецЕсли;
					Иначе
						СтрокаТабличнойЧасти.ОтработаноДней = 0;
						СтрокаТабличнойЧасти.ОтработаноЧасов = 0;
						Если ОсновныеНачисленияОрганизаций Тогда
							СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = 0;
							СтрокаТабличнойЧасти.ОтработаноЧасовПоПятидневке = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если ОсновныеНачисленияОрганизаций Тогда 
						Если ИсходныеДанные.ЗачетНормыВремени Тогда
							СтрокаТабличнойЧасти.НормаДней = СтрокаДвижений.НормаДней;
							СтрокаТабличнойЧасти.НормаЧасов = СтрокаДвижений.НормаЧасов;
							СтрокаТабличнойЧасти.НормаДнейПоПятидневке = СтрокаДвижений.НормаДнейПоПятидневке;
							СтрокаТабличнойЧасти.НормаЧасовПоПятидневке = СтрокаДвижений.НормаЧасовПоПятидневке;
						Иначе
							СтрокаТабличнойЧасти.НормаДней = 0;
							СтрокаТабличнойЧасти.НормаЧасов = 0;
							СтрокаТабличнойЧасти.НормаДнейПоПятидневке = 0;
							СтрокаТабличнойЧасти.НормаЧасовПоПятидневке = 0;
						КонецЕсли;
						// запишем "резервное" значение базы в табличную часть, чтобы оно попало в регистр
						Если ИсходныеДанные.РасчетИмеетБазовыеНачисления  Тогда
							СтрокаТабличнойЧасти.РасчетнаяБазаЗаЕдиницуНормыВремени = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени;	
						КонецЕсли;
							///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
						// Измайлова Полина 27.10.2011 15:24 
						Если СтрокаТабличнойЧасти.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
							СтрокаТабличнойЧасти.AVT_ПроцентВыработки = ИсходныеДанные.ПроцентВыработки;		
						КонецЕсли;
						////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
					
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗаписиНабора

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  УправленческиеНачисления - булево, признак того, что это расчет управленческий
//  РегламентированныеНачисления - булево, признак того, что это регламентированное начисление
//  ОсновныеНачисленияОрганизаций - булево, признак того, что это именно основое регламентированное начисление
//  ДанныеДляПрогнозаНДФЛ - выборка из результата запроса с данными для прогнозирования НДФЛ
//  СведенияОДоначислениях - соответствие для хранения данных о доначислениях
//  КурсВалютыУпрУчета
//  ПовторныйРасчет - признак того, что выполняется повторный расчет (поддержка 
//              способа ДоначислениеПоУправленческомуУчету)
//
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписьРегистраРасчета(СтрокаДвижений,
							ИсходныеДанные,
							УправленческиеНачисления,
							РегламентированныеНачисления,
							РегламентированныеУдержания,
							ОсновныеНачисленияОрганизаций,
							ДополнительныеНачисленияОрганизаций,
							ДанныеДляПрогнозаНДФЛ,
							СведенияОДоначислениях,
							КурсВалютыУпрУчета,
							ПовторныйРасчет,
							КомментироватьРасчет, ФормаКомментариев, 
							ГрафикиБезРабочегоВремени)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	
	РезультатПолучен = Истина;
	
	ПоказательРазмер = "Показатель1";
	
	// предварительные действия перед расчетом для поддержки 
	// способа расчета ДоначислениеПоУправленческомуУчету
	РасчетДоначисления = Ложь;
	Если РегламентированныеНачисления и СведенияОДоначислениях <> Неопределено Тогда
		Сведение = СведенияОДоначислениях.Получить(СтрокаДвижений.Сотрудник);
		Если Сведение = Неопределено Тогда
			Сведение = Новый Структура("КВыплатеПоУпрУчету,ЕстьДоначисление,ПрогнозНДФЛ,СуммарныйПроцент,УжеНачисленоДоДоначисления");
			Сведение.КВыплатеПоУпрУчету = 0;
			Сведение.СуммарныйПроцент = 0;
			Сведение.УжеНачисленоДоДоначисления = 0;
			Сведение.ЕстьДоначисление = Ложь;
			Сведение.ПрогнозНДФЛ = Новый Соответствие();
			СведенияОДоначислениях[СтрокаДвижений.Сотрудник] = Сведение;
		КонецЕсли;
		Если ОсновныеНачисленияОрганизаций 
			И ИсходныеДанные.УчитыватьДоходПоПериодуДействия Тогда
			ПериодДохода = НачалоМесяца(ИсходныеДанные.ПериодДействияНачало);
		Иначе
			// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
			ПериодДохода = СтрокаДвижений.ПериодРегистрации;
		КонецЕсли;
		СтрокаПрогноза = Сведение.ПрогнозНДФЛ.Получить(ПериодДохода);
		Если СтрокаПрогноза = Неопределено Тогда
			СтрокаПрогноза = ПроведениеРасчетовДополнительный.СоздатьСтрокуПрогнозаНДФЛ();
			Сведение.ПрогнозНДФЛ[ПериодДохода] = СтрокаПрогноза;
		КонецЕсли;
		Если ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
			РасчетДоначисления = Истина;
			Если не ПовторныйРасчет Тогда
				Сведение.ЕстьДоначисление = Истина;
				
				Если ОсновныеНачисленияОрганизаций Тогда
					Сведение.КВыплатеПоУпрУчету = ?(ИсходныеДанные.КВыплатеПоУпрУчету = Null, 0, ИсходныеДанные.КВыплатеПоУпрУчету) * КурсВалютыУпрУчета[НачалоМесяца(ИсходныеДанные.ПериодДействияНачало)];
				Иначе
					Сведение.КВыплатеПоУпрУчету = ?(ИсходныеДанные.КВыплатеПоУпрУчету = Null, 0, ИсходныеДанные.КВыплатеПоУпрУчету) * КурсВалютыУпрУчета[СтрокаДвижений.ПериодРегистрации];
				КонецЕсли;
				Сведение.СуммарныйПроцент = ?(ИсходныеДанные.СуммарныйПроцент = Null, 0, ИсходныеДанные.СуммарныйПроцент);
				Сведение.УжеНачисленоДоДоначисления = ?(ИсходныеДанные.УжеНачисленоДоДоначисления = Null, 0, ИсходныеДанные.УжеНачисленоДоДоначисления);
				Физлицо = ИсходныеДанные.Физлицо;
				// запомним поле "резидентство"
				Для Каждого СтрокаДляЗаполнения Из Сведение.ПрогнозНДФЛ Цикл
					СтрокаДляЗаполнения.Значение.Резидент = ИсходныеДанные.Резидент;
				КонецЦикла;
				Если ПроведениеРасчетовДополнительный.ПозиционироватьДанныеПрогнозаНДФЛ(ДанныеДляПрогнозаНДФЛ, Физлицо) Тогда
					Пока Истина Цикл
						СтрокаДляЗаполнения = Сведение.ПрогнозНДФЛ.Получить(ДанныеДляПрогнозаНДФЛ.Период);
						Если СтрокаДляЗаполнения = Неопределено Тогда
							СтрокаДляЗаполнения = ПроведениеРасчетовДополнительный.СоздатьСтрокуПрогнозаНДФЛ();
							Сведение.ПрогнозНДФЛ[ДанныеДляПрогнозаНДФЛ.Период] = СтрокаДляЗаполнения;
						КонецЕсли;
						// запоним остальные поля
						ПроведениеРасчетовДополнительный.ЗаполнитьСтрокуПрогнозаНДФЛ(СтрокаДляЗаполнения, ДанныеДляПрогнозаНДФЛ);
						Если не ДанныеДляПрогнозаНДФЛ.Следующий() Тогда
							Прервать;
							
						КонецЕсли;
						Если ДанныеДляПрогнозаНДФЛ.Физлицо <> Физлицо Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// расчет будем проводить только для авторассчитываемой записи
	Если СтрокаДвижений.Авторасчет Тогда
		
		ДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
		
		// этот Если... нужно расширять при появлении новых способов расчета или видов расчета,
		// которые не укладываются в тот или иной способ
		
		Если КомментироватьРасчет Тогда
			КомментарийВидаРасчета = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет ", , ИсходныеДанные.ВидРасчетаНаименование, СтрокаДвижений.ВидРасчета);
			ОбщегоНазначенияЗК.КомментарийРасчета("Способ расчета: " + ИсходныеДанные.СпособРасчета, КомментарийВидаРасчета);
			КомментарийПорядкаРасчета = ОбщегоНазначенияЗК.КомментарийРасчета("Порядок расчета: " + ПроведениеРасчетов.ВизуализироватьФормулуРасчета(ИсходныеДанные.ВидРасчета, "Текст", РегламентированныеУдержания), КомментарийВидаРасчета);
			
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор
				ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.БанковскиеИздержки Тогда
				
				Если ЗначениеЗаполнено(ИсходныеДанные.Получатель) Тогда
				
					ОбщегоНазначенияЗК.КомментарийРасчета("Получатель: " + ИсходныеДанные.Получатель, КомментарийПорядкаРасчета);
				
				КонецЕсли; 
				
				Если ИсходныеДанные.ПоТарифу Тогда
			
					ОбщегоНазначенияЗК.КомментарийРасчета("Тариф: " + ИсходныеДанные.ПорядокИсчисленияИздержек, КомментарийПорядкаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Процент: " + ИсходныеДанные.Процент, КомментарийПорядкаРасчета);
					
				Иначе
				
					ОбщегоНазначенияЗК.КомментарийРасчета("Фиксированный процент: " + ИсходныеДанные.Процент, КомментарийПорядкаРасчета);
					
				КонецЕсли;
				
				ОбщегоНазначенияЗК.КомментарийРасчета("Сумма перевода: " + ИсходныеДанные.СуммаАлиментов, КомментарийПорядкаРасчета);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		// Процентом и от стажа процентом
		//	
		Если ПроведениеРасчетов.ПолучитьСписокНачисленийПроцентом().Найти(СпособРасчета) <> НеОпределено Тогда
			
			Если ОсновныеНачисленияОрганизаций И СтрокаДвижений.Сторно И НЕ СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0 Тогда
				// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
				// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
				// поэтому для них получим базу прежним способом
				ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
				РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
			Иначе
				РезультатБаза = ИсходныеДанные.РезультатБаза;
			КонецЕсли;
			
			// Размер - процент доплаты
			Если РезультатБаза = NULL Тогда
				Если ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.РайонныйКоэффициент И СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда // оставляем поведение ред.2.1
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
				КонецЕсли;
			Иначе
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					РасшифровкаБазы = ИсходныеДанные.Выбрать();
					Если Не РегламентированныеУдержания Тогда
						Пока РасшифровкаБазы.Следующий() Цикл
							Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если РегламентированныеУдержания Тогда
					УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
					Результат = Макс(РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100 - УжеНачисленоВТекущемПериоде,0);
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Процент: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
						ОбщегоНазначенияЗК.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					КонецЕсли;
				Иначе
					Результат = РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100;
					Если Не ИсходныеДанные.ВидРасчетаПериодДействияБазовый и Не ИсходныеДанные.БазовыйПериодПрошлыйМесяц Тогда
						НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
						СообщениеОбОшибке = Ложь;
						ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
						Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
							ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
						КонецЕсли;
						Если НормаВремени = 0 Тогда
							Результат = 0;
						Иначе
							Результат = Результат * ОтработаноВремениОсновное / НормаВремени;
						КонецЕсли;
						СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
					КонецЕсли;
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
						Если Не ИсходныеДанные.ВидРасчетаПериодДействияБазовый и Не ИсходныеДанные.БазовыйПериодПрошлыйМесяц Тогда
							ОбщегоНазначенияЗК.КомментарийРасчета("Отработанное время: " + ИсходныеДанные.ОтработаноВремени, КомментарийВидаРасчета);
							ОбщегоНазначенияЗК.КомментарийРасчета("Норма времени: " + ИсходныеДанные.НормаВремениЗаМесяц, КомментарийВидаРасчета);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Процентом от облагаемых ЕСН начислений - для добровольных страховых взносов в ПФР на накопительную часть пенсии
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений Тогда
			
			Если ИсходныеДанные.ОблагаемыйЕСНДоход = NULL Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Отсутствуют доходы, облагаемые ЕСН ");
			Иначе
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Облагаемые доходы составили всего: " + ИсходныеДанные.ОблагаемыйЕСНДоход, КомментарийВидаРасчета,,,, Ложь);
					РасшифровкаБазы = ИсходныеДанные.Выбрать();
					Пока РасшифровкаБазы.Следующий() Цикл
						Если РасшифровкаБазы.ОблагаемыйЕСНДоход <> 0 Тогда
							ОбщегоНазначенияЗК.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.ОблагаемыйЕСНДоход, КомментарийБазы);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// Размер - процент доплаты
				Если РегламентированныеУдержания Тогда
					УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
					Результат = Макс(ИсходныеДанные.ОблагаемыйЕСНДоход * СтрокаДвижений[ПоказательРазмер]/100 - УжеНачисленоВТекущемПериоде,0);
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Процент: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
						ОбщегоНазначенияЗК.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					КонецЕсли;
				Иначе
					Результат = ИсходныеДанные.ОблагаемыйЕСНДоход * СтрокаДвижений[ПоказательРазмер]/100;
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// ИсполнительныйЛистВПрожиточныхМинимумах
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Тогда
			
			Если ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("АлиментыВПрожиточныхМинимумах", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные) Тогда
				Результат = СтрокаДвижений.Результат
			КонецЕсли;
			
			// ИсполнительныйЛистПроцентом
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			
			РезультатБаза = ИсходныеДанные.РезультатБаза;
			
			// Размер - процент удержания
			Если РезультатБаза = NULL Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления");
				
			Иначе
				ИсчисленныйНалог 			= ?(ИсходныеДанные.ИсчисленныйНалог = Null, 0, ИсходныеДанные.ИсчисленныйНалог);
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				
				Результат = Макс(((РезультатБаза - ?(ИсчисленныйНалог < 0, 0, ИсчисленныйНалог)) * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено НДФЛ за текущий период: " + ИсчисленныйНалог + ?(ИсчисленныйНалог < 0, "; сумма налога исключена из расчета", ""), КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// ИсполнительныйЛистПроцентомДоПредела
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			
			РезультатБаза = ИсходныеДанные.РезультатБаза;
			
			// Размер - процент удержания
			Если РезультатБаза = NULL Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				
				ИсчисленныйНалог 			= ?(ИсходныеДанные.ИсчисленныйНалог = Null, 0, ИсходныеДанные.ИсчисленныйНалог);
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				Результат = Макс(((РезультатБаза - ?(ИсчисленныйНалог < 0, 0, ИсчисленныйНалог)) * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
				
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Базовые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено НДФЛ за текущий период: " + ИсчисленныйНалог + ?(ИсчисленныйНалог < 0, "; сумма налога исключена из расчета", ""), КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Предел по документу основанию: " + ПределПоДокументуОснованию, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Ранее начислено за всю историю: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
				КонецЕсли;
				
			КонецЕсли;
			
			// ИсполнительныйЛистФиксСуммойДоПредела
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			
			ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
			УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
			
			// Ограничим результат расчета в случае достижения предела удержания
			Результат = Мин(СтрокаДвижений[ПоказательРазмер], ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Предел по документу основанию: " + ПределПоДокументуОснованию, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Ранее начислено за всю историю: " + УжеНачисленоЗаВсюИсторию, КомментарийВидаРасчета);
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор ИЛИ
					СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.БанковскиеИздержки Тогда
			
			Если ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("ПочтовыеПереводы", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные) Тогда
				Результат = СтрокаДвижений.Результат
			КонецЕсли;
			
			// УдержаниеФиксированнойСуммой
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			
			УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
			// Размер - сумма удержания 
			// за месяц должно удержаться ровно столько, сколько указано в документе
			Результат = СтрокаДвижений[ПоказательРазмер] - УжеНачисленоВТекущемПериоде;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Размер удержания: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
			КонецЕсли;
			
			// ФиксированнойСуммой
			// ПоДоговоруФиксированнойСуммой
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			// Размер - сумма доплаты
			Результат = СтрокаДвижений[ПоказательРазмер];
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Размер начисления: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
			КонецЕсли;
			
			// НулеваяСумма
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
			// Ничего не считаем 
			
			// ПоМесячнойТарифнойСтавкеПоДням
			// ПоМесячнойТарифнойСтавкеПоЧасам
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам Тогда
			
			НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ПоЧасовойТарифнойСтавке
			// ПоДневнойТарифнойСтавке
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
			
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ВыходноеПособие	и  СохраняемыйЗаработокНаВремяТрудоустройства
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если 
					ИсходныеДанные.СреднийЗаработок = NULL
					ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0)
					ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0) Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
			//Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
			//	// переводим дни в часы: количество недель * длительность рабочей недели
			//	ОплачиваемоеВремя = ОплачиваемоеВремя / ИсходныеДанные.ЧислоДнейВНеделе * ИсходныеДанные.ДлительностьРабочейНедели;
			//КонецЕсли;
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемые дни: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ОплатаПоСреднему
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0
					ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
				КонецЕсли;
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ДоплатаДоСреднегоЗаработка
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0 
					ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДвижений.Сторно И НЕ СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0 Тогда
				// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
				// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
				// поэтому для них получим базу прежним способом
				ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
				РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
			Иначе
				РезультатБаза = ИсходныеДанные.РезультатБаза;
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100, СтрокаДвижений[ПоказательРазмер]);
			ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
				КонецЕсли;
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
			КонецЕсли;
			
			СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100;
			
			// Вычтем из среднего заработка начисленные суммы
			Результат = Макс(СреднийЗаработок - ?(РезультатБаза = NULL, 0, РезультатБаза), 0);
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок: " + СреднийЗаработок, КомментарийВидаРасчета);
				КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Вычитаемые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
				РасшифровкаБазы = ИсходныеДанные.Выбрать();
				Пока РасшифровкаБазы.Следующий() Цикл
					Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ПоСреднемуЗаработкуФСС
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
			
			РезультатПолучен = ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("ПоСреднемуЗаработкуФСС2011", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные);
			Если РезультатПолучен Тогда
				Результат = СтрокаДвижений.Результат
			Иначе
				РезультатПолучен = ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("ПоСреднемуЗаработкуФСС213ФЗ", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные);
				Если РезультатПолучен Тогда
					Результат = СтрокаДвижений.Результат
				Иначе
					
					ЭтоПереходныйПериодПоЗакону255ФЗ = СтрокаДвижений.ПериодДействияНачало >= ДатаЗакона255ФЗ И
								(ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничением
								или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаБезОграничений
								или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИБезОграничений
								или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИВРазмереММОТ
								или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТ
								или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТиБезОграничений
								или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениямиВРазмереММОТиОбщим);
					
					Если НЕ СтрокаДвижений.Сторно Тогда
						Если ЭтоПереходныйПериодПоЗакону255ФЗ Тогда
							Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработок) ИЛИ Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий) Тогда
								ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
								СтрокаДвижений.Результат = 0;
								Возврат;
							ИначеЕсли СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноЧасов)
								ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДней) 
								ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий) Тогда
								ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
								СтрокаДвижений.Результат = 0;
								Возврат;
							КонецЕсли;	
						ИначеЕсли СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона255ФЗ Тогда
							Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработок) 
								ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0 
								ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
								ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
								СтрокаДвижений.Результат = 0;
								Возврат;
							ИначеЕсли СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноЧасов)
								ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДней) Тогда
								ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
								СтрокаДвижений.Результат = 0;
								Возврат;
							КонецЕсли;	
						ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий) Тогда
							ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
							СтрокаДвижений.Результат = 0;
							Возврат;
						ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий) Тогда
							ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
							СтрокаДвижений.Результат = 0;
							Возврат;
						КонецЕсли;	
					КонецЕсли;	
					
					ПроцентОплаты = СтрокаДвижений[ПоказательРазмер];
					
					Если СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона255ФЗ Тогда
						ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
					Иначе
						ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныхДней = Null, 0,ИсходныеДанные.КалендарныхДней);
					КонецЕсли;
					
					// Рассчитаем заработок за день (или за час для суммированного учета времени)
					// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
					Если НЕ СтрокаДвижений.Сторно Тогда
						
						Если СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона255ФЗ Тогда
							НормаВремени = ИсходныеДанные.НормаВремениЗаМесяц;
							Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
								ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
							Иначе
								ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
							КонецЕсли;	
						Иначе
							НормаВремени = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
							ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий / ИсходныеДанные.ОтработаноДнейПособий,2);
						КонецЕсли;	
						
						// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
						СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
						
					Иначе
						ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
					КонецЕсли;
					
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
						ОбщегоНазначенияЗК.КомментарийРасчета(?(СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона255ФЗ И СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
					КонецЕсли;
					
					Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйБезОграничений Тогда
						РазмерОграничения = 0
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничением Тогда
						РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемПоБеременности Тогда
						РазмерОграничения = ИсходныеДанные.РазмерПоБеременности * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ Тогда
						РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТбезРК Тогда
						РазмерОграничения = ИсходныеДанные.РазмерММОТ
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаБезОграничений Тогда
						РазмерОграничения = 0;
						РазмерОграниченияПП = 0;
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничением Тогда
						РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
						РазмерОграниченияПП = ИсходныеДанные.РазмерОбщегоОграничения;
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИБезОграничений Тогда
						РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
						РазмерОграниченияПП = 0;
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИВРазмереММОТ Тогда
						РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
						РазмерОграниченияПП = ИсходныеДанные.РазмерММОТ;
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТ Тогда
						РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
						РазмерОграниченияПП = ИсходныеДанные.РазмерММОТ;
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТиБезОграничений Тогда
						РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
						РазмерОграниченияПП = 0;
					ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениямиВРазмереММОТиОбщим Тогда
						РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
						РазмерОграниченияПП = ИсходныеДанные.РазмерОбщегоОграничения;
					Иначе
						РазмерОграничения = 0;
						РазмерОграниченияПП = 0;
					КонецЕсли;
					
					Если РазмерОграничения = 0 Тогда
						Результат = ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2);
						Если КомментироватьРасчет Тогда
							ОбщегоНазначенияЗК.КомментарийРасчета("Пособие начисляется без ограничений", КомментарийВидаРасчета);
						КонецЕсли;
					Иначе
						Если НормаВремени = 0 Или ОплачиваемоеВремя = 0 Тогда
							ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
						Иначе
							Если ОплачиваемоеВремя < НормаВремени Тогда
								ОграничениеПособия = Окр(РазмерОграничения / НормаВремени,2);
								Результат = ОплачиваемоеВремя * Мин(Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2), ОграничениеПособия);
							Иначе
								ОграничениеПособия = Окр(РазмерОграничения,2);
								Результат = Мин(ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2), ОграничениеПособия);
							КонецЕсли;
							Если КомментироватьРасчет Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Ограничение пособия: " + ОграничениеПособия, КомментарийВидаРасчета);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ СтрокаДвижений.Сторно И ЭтоПереходныйПериодПоЗакону255ФЗ Тогда
						
						ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий / ИсходныеДанные.ОтработаноДнейПособий,2);
						ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныхДней = Null, 0,ИсходныеДанные.КалендарныхДней);
						НормаВремени = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
						
						Если РазмерОграниченияПП = 0 Тогда
							РезультатПереходногоПериода = ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2);
						Иначе
							Если НормаВремени <> 0 И ОплачиваемоеВремя <> 0 Тогда
								Если ОплачиваемоеВремя < НормаВремени Тогда
									ОграничениеПособия = Окр(РазмерОграниченияПП * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1) / НормаВремени,2);
									РезультатПереходногоПериода = ОплачиваемоеВремя * Мин(Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2), ОграничениеПособия);
								Иначе
									ОграничениеПособия = Окр(РазмерОграниченияПП * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1),2);
									РезультатПереходногоПериода = Мин(ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2), ОграничениеПособия);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если Результат < РезультатПереходногоПериода Тогда
							// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
							СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
							Результат = РезультатПереходногоПериода;
							Если КомментироватьРасчет Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Ограничение пособия: " + ОграничениеПособия, КомментарийВидаРасчета);
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
					
				КонецЕсли;
			КонецЕсли;
			
			// ДоплатаДоСреднегоЗаработкаФСС
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС Тогда
			
			Если СтрокаДвижений.Сторно И НЕ СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0 Тогда
				// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
				// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
				// поэтому для них получим базу прежним способом
				ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
				РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
			Иначе
				РезультатБаза = ИсходныеДанные.РезультатБаза;
			КонецЕсли;
			
			Если ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("ДоплатаДоСреднегоЗаработкаФСС", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные) Тогда
				Результат = СтрокаДвижений.Результат
			КонецЕсли;
			
			// Компенсация отпуска и Удержание за неотработанный отпуск
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения ИЛИ 
			ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни ИЛИ 
			ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0)
					ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0) Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
			Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
				// переводим дни в часы: количество недель отпуска * длительность рабочей недели
				ОплачиваемоеВремя = ОплачиваемоеВремя / ИсходныеДанные.ЧислоДнейВНеделе * ИсходныеДанные.ДлительностьРабочейНедели;
			КонецЕсли;
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Размер начисления: " + Результат, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Дни отпуска: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Часы отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
				ОбщегоНазначенияЗК.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
				СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			КонецЕсли;
			
			// Удержание за неотработанный отпуск как отрицательное начисление
		ИначеЕсли ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни ИЛИ 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасовПоСреднему = 0)
					ИЛИ (СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0) Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = 100;
			ОплачиваемоеВремя = СтрокаДвижений[ПоказательРазмер];
			
			// Рассчитаем заработок за день 
			ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
			
			Результат = - ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Размер начисления: " + Результат, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Дни отпуска: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Часы отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
				ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = - ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ОплатаПоСреднемуОтпКалендарныеДни 
			// ОплатаПоСреднемуОтпШестидневка 
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням ИЛИ
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
			
			Если ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("ПоСреднемуЗаработкуДляОтпуска", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные) Тогда
				Результат = СтрокаДвижений.Результат
			КонецЕсли;
			
			// ПособиеПоУходуЗаРебенкомДо1_5Лет
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Тогда
			
			Если ИсходныеДанные.ПериодДействияНачало < ДатаЗакона255ФЗ Тогда
				
				КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
			
				ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
				Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
					Результат = ИсходныеДанные.ПоУходуЗаРебенкомДоПолутораЛет / КалендарныхДнейВМесяце  * ОплачиваемыеДни * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
				Иначе
					Результат = ИсходныеДанные.ПоУходуЗаРебенкомДоПолутораЛет * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
				КонецЕсли;
				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Учтенный районный коэффициент: " + Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия за месяц: " + ИсходныеДанные.ПоУходуЗаРебенкомДоПолутораЛет * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Календарных дней в месяце: " + КалендарныхДнейВМесяце, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемые дни отпуска: " + ОплачиваемыеДни, КомментарийВидаРасчета);
				КонецЕсли;
				
				СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемыеДни * ?(СтрокаДвижений.Сторно,-1,1);
			
			Иначе  // после вступления в силу Федеральных законов от 5 декабря 2006 г. № 207-ФЗ и от 29 декабря 2006 г. № 255-ФЗ 
				
				Если ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("ПособиеПоУходуЗаРебенком213ФЗ", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные) Тогда
					Результат = СтрокаДвижений.Результат
				КонецЕсли;
				
			КонецЕсли;
			
			// ПособиеПоУходуЗаРебенкомДо3Лет
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Тогда
			
			КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
			ОплачиваемыеДни = День(ИсходныеДанные.ПериодДействияКонец) - День(ИсходныеДанные.ПериодДействияНачало) + 1;
			Результат = ИсходныеДанные.РазмерПособияПоУходуЗаРебенкомДо3Лет / КалендарныхДнейВМесяце  * ОплачиваемыеДни * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Календарных дней в месяце: " + КалендарныхДнейВМесяце, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемые дни отпуска: " + ОплачиваемыеДни, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Учтенный районный коэффициент: " + Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия за месяц: " + ИсходныеДанные.РазмерПособияПоУходуЗаРебенкомДо3Лет * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемыеДни * ?(СтрокаДвижений.Сторно,-1,1);
			
			// СдельныйЗаработок
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				Если ИсходныеДанные.ОшибкаВводаФактическойВыработки Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные о фактической выработке введены сводно. Расчет суммы по данному виду расчета невозможен");
				Иначе
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о фактической выработке");
				КонецЕсли;
			Иначе
				Результат = ИсходныеДанные.РазмерСдельногоЗаработка;
				Если ИсходныеДанные.ЗачетНормыВремени Или ИсходныеДанные.ЗачетОтработанногоВремени Тогда
					СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
				КонецЕсли;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Размер сдельного заработка: " + ИсходныеДанные.РазмерСдельногоЗаработка, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			// доначсиление до размеров управленческих начислений
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
			// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
			ПериодДохода = СтрокаДвижений.ПериодРегистрации;
			Результат = ПроведениеРасчетовДополнительный.ПодобратьДоначисление(СведенияОДоначислениях, ИсходныеДанные.Сотрудник, СтрокаДвижений.ПериодРегистрации);
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Размер начисления: " + Результат, КомментарийВидаРасчета);
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			
			ФормулаРасчета = ИсходныеДанные.ФормулаРасчета;
			
			Если ЗначениеЗаполнено(ФормулаРасчета) Тогда //Возможно, что формула пустая, тогда результат вводится руками
				
				Если ИсходныеДанные.РасчетИмеетБазовыеНачисления Тогда // расчетная база собирается отдельно от других показателей
					
					Если ОсновныеНачисленияОрганизаций И СтрокаДвижений.Сторно И НЕ СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0 Тогда
						// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
						// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
						// поэтому для них получим базу прежним способом
						ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
						РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
					Иначе
						РезультатБаза = ИсходныеДанные.РезультатБаза;
					КонецЕсли;
					
					РасчетнаяБаза = РезультатБаза;
					Если РасчетнаяБаза = NULL Тогда
						ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
						РасчетнаяБаза = 0;
					КонецЕсли;
					
					Если КомментироватьРасчет Тогда
						КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Базовые начисления составили всего: " + РасчетнаяБаза, КомментарийВидаРасчета,,,, Ложь);
						Если УправленческиеНачисления Или РегламентированныеНачисления Тогда
							РасшифровкаБазы = ИсходныеДанные.Выбрать();
							Пока РасшифровкаБазы.Следующий() Цикл
								Если ЗначениеЗаполнено(РасшифровкаБазы.РезультатБаза) Тогда
									ОбщегоНазначенияЗК.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				// проверим, все ли показатели получены			
				Если ИсходныеДанные.КоличествоПоказателей <> Null Тогда
					Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
						Если ИсходныеДанные["Показатель"+НомерСтроки] = Null Тогда
							ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] + """");
							РезультатПолучен = Ложь;
						ИначеЕсли КомментироватьРасчет Тогда
							Если Не РегламентированныеНачисления Или Не ИсходныеДанные["Показатель" + НомерСтроки + "ЯвляетсяРасчетнойБазой"] Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета(ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"]+ ": " + Строка(ИсходныеДанные["Показатель"+НомерСтроки]), КомментарийВидаРасчета);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если РезультатПолучен Тогда
					
					// вместо значения ПоказательN из результата запроса для расчетной базы 
					// будем использовать специально вычисленное значение
					Если ИсходныеДанные.РасчетИмеетБазовыеНачисления Тогда
						
						ТекстРасчетнаяБаза = Формат(РасчетнаяБаза,"ЧРД=.; ЧН=0; ЧГ=0");
						Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
							Если ИсходныеДанные["Показатель" + НомерСтроки + "ЯвляетсяРасчетнойБазой"] Тогда
								ФормулаРасчета = СтрЗаменить(ФормулаРасчета,"ИсходныеДанные.Показатель" + НомерСтроки, ТекстРасчетнаяБаза);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					Попытка
						Результат = Вычислить(ФормулаРасчета);
					Исключение					
						ОбщегоНазначенияЗК.КомментарийРасчета(ИсходныеДанные.СотрудникНаименование + "; " +" При расчете " + ИсходныеДанные.ВидРасчетаНаименование + ОписаниеОшибки(), КомментарийВидаРасчета, ,,Перечисления.ВидыСообщений.Ошибка);
					КонецПопытки;
					
					Если РегламентированныеНачисления И ИсходныеДанные.РасчетИмеетОтработанноеВремя Тогда
						ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
						СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Не найден способ расчета
			ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": вид расчета не предусмотрен");
		КонецЕсли;
		
		Если РегламентированныеУдержания И ИсходныеДанные.ЯвляетсяДСВ Тогда
			Результат = Цел(Результат)
		КонецЕсли;
		
		Если СтрокаДвижений.Сторно Тогда
			СтрокаДвижений.Результат = Результат * -1;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Расчет сторно", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли;
		Иначе
			СтрокаДвижений.Результат = Результат;
			Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.РасчетИмеетБазовыеНачисления Тогда
				// запишем "резервное" значение "отнормированной" базы на случай расчета сторно-записи
				НормаВремениБазы = ?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.НормаОплачиваемыхДней, ИсходныеДанные.НормаОплачиваемыхЧасов);
				Если ЗначениеЗаполнено(НормаВремениБазы) Тогда
					СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = ?(РезультатБаза = NULL, 0, РезультатБаза) / НормаВремениБазы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Результат расчета: " + СтрокаДвижений.Результат, КомментарийВидаРасчета);
		КонецЕсли;
		
	КонецЕсли;
	
	// финальные действия для поддержки 
	// способа расчета ДоначислениеПоУправленческомуУчету
	Если РегламентированныеНачисления и СведенияОДоначислениях <> Неопределено Тогда
		Если РасчетДоначисления Тогда
			СтрокаПрогноза.НачисленоПриДоначислении = СтрокаДвижений.Результат;
			СтрокаПрогноза.НачисленоПослеДоначисления = 0;
		ИначеЕсли Сведение.ЕстьДоначисление Тогда
			СтрокаПрогноза.НачисленоПослеДоначисления = СтрокаПрогноза.НачисленоПослеДоначисления + СтрокаДвижений.Результат;
		ИначеЕсли не ПовторныйРасчет Тогда
			СтрокаПрогноза.НачисленоДоДоначисления = СтрокаПрогноза.НачисленоДоДоначисления + СтрокаДвижений.Результат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // РассчитатьЗаписьРегистраРасчета

// Функция предназначена для получения структуры НеобходимыеДанные с элементами:
//			База
//			НормаВремени
//			ОтработаноВремени
// каждый из которых - булево и означает необходимость получения соотвю исходных данных для 
// расчета записей регистра расчета
// Параметр:
//	МассивСпособовРасчета - массив элементов типа СпособРасчетаСсылка или ПланВидовРасчетаСсылка
Функция ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, ТаблицаПоказателей) Экспорт
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("База", Ложь);
	НеобходимыеДанные.Вставить("НормаВремени", Ложь);
	НеобходимыеДанные.Вставить("НормаВремениЗаМесяц", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремени", Ложь);
	НеобходимыеДанные.Вставить("СдельныйЗаработок", Ложь);

	НеобходимыеДанные.Вставить("СреднийЗаработок", Ложь);
	НеобходимыеДанные.Вставить("СреднийЗаработокОтпуска", Ложь);
	НеобходимыеДанные.Вставить("СреднийЗаработокПособий", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныйНДФЛ", Ложь);
	НеобходимыеДанные.Вставить("ВычетыКДоходамНДФЛ", Ложь);
	НеобходимыеДанные.Вставить("ПределПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияПоУходуЗаРебенкомДо1_5Лет", Ложь);
	НеобходимыеДанные.Вставить("РазмерПособияПоУходуЗаРебенкомДо3Лет", Ложь);
	НеобходимыеДанные.Вставить("РайонныйКоэффициентРФОрганизации", Ложь);
	НеобходимыеДанные.Вставить("ПочтовыеПереводы", Ложь);
	НеобходимыеДанные.Вставить("БанковскиеИздержки", Ложь);
	НеобходимыеДанные.Вставить("РазмерОграниченияПособия", Ложь);
	НеобходимыеДанные.Вставить("ДанныеДляПрогнозаНДФЛ", Ложь);
	НеобходимыеДанные.Вставить("ПоказателиСхемМотивации", Ложь);
	НеобходимыеДанные.Вставить("Стаж", Ложь);
	НеобходимыеДанные.Вставить("ВремяВКалендарныхДнях", Ложь);
	НеобходимыеДанные.Вставить("КалендарныхДнейВмесяце", Ложь);
	НеобходимыеДанные.Вставить("ВсегоОтработаноВремени", Ложь);
	НеобходимыеДанные.Вставить("ДоходыОблагаемыеЕСН", Ложь);
	НеобходимыеДанные.Вставить("ПрожиточныйМинимум", Ложь);
	
	// данный Если... необходимо пополнять при появлении новых способ расчета или
	// видов расчета, которые не укладываются ни в один из способов
	Для Каждого СпособРасчета Из МассивСпособовРасчета Цикл
		
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам  
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам  
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			НеобходимыеДанные.База = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Тогда
			НеобходимыеДанные.ПрожиточныйМинимум = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйНДФЛ = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйНДФЛ = Истина;
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку  Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС  Тогда
			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.РазмерОграниченияПособия = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			НеобходимыеДанные.РайонныйКоэффициентРФОрганизации = Истина;	
			НеобходимыеДанные.СреднийЗаработок = Истина;
			НеобходимыеДанные.СреднийЗаработокПособий = Истина;
			НеобходимыеДанные.ВремяВКалендарныхДнях = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС Тогда
			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.РазмерОграниченияПособия = Истина;
			НеобходимыеДанные.РайонныйКоэффициентРФОрганизации = Истина;	
			НеобходимыеДанные.СреднийЗаработокПособий = Истина;
			НеобходимыеДанные.ВремяВКалендарныхДнях = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням  
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
			
			НеобходимыеДанные.ВремяВКалендарныхДнях = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.СреднийЗаработокОтпуска = Истина;
			НеобходимыеДанные.СреднийЗаработок = Истина;  
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			// ничего...
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Тогда
			НеобходимыеДанные.РазмерПособияПоУходуЗаРебенкомДо1_5Лет = Истина;	
			НеобходимыеДанные.РазмерОграниченияПособия = Истина;
			НеобходимыеДанные.РайонныйКоэффициентРФОрганизации = Истина;	
			НеобходимыеДанные.ВремяВКалендарныхДнях = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Тогда
			НеобходимыеДанные.РазмерПособияПоУходуЗаРебенкомДо3Лет = Истина;	
			НеобходимыеДанные.РайонныйКоэффициентРФОрганизации = Истина;	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			НеобходимыеДанные.СдельныйЗаработок = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			НеобходимыеДанные.ПочтовыеПереводы = Истина
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.БанковскиеИздержки Тогда
			НеобходимыеДанные.БанковскиеИздержки = Истина
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
			НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
			НеобходимыеДанные.База = Истина;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений Тогда
			НеобходимыеДанные.ДоходыОблагаемыеЕСН = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	НеобходимыеДанные.ПочтовыеПереводы = НеобходимыеДанные.ПочтовыеПереводы ИЛИ НеобходимыеДанные.БанковскиеИздержки;
		
	МассивСтажей = Новый Соответствие;
	
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		
		Показатель = СтрокаПоказателя.Показатель;
		
		Показатель = СтрокаПоказателя.Показатель;
		
		НеобходимыеДанные.СдельныйЗаработок = НеобходимыеДанные.СдельныйЗаработок Или Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка;
		НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
			Или Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах;
		НеобходимыеДанные.НормаВремениЗаМесяц = НеобходимыеДанные.НормаВремениЗаМесяц Или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах;
		НеобходимыеДанные.База = НеобходимыеДанные.База Или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза;
		НеобходимыеДанные.Стаж = НеобходимыеДанные.Стаж Или Показатель = Справочники.ПоказателиСхемМотивации.Стаж;
		
		НеобходимыеДанные.ВремяВКалендарныхДнях = НеобходимыеДанные.ВремяВКалендарныхДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях;
		НеобходимыеДанные.КалендарныхДнейВмесяце = НеобходимыеДанные.КалендарныхДнейВмесяце Или Показатель = Справочники.ПоказателиСхемМотивации.КалендарныхДнейВмесяце;
		НеобходимыеДанные.ВсегоОтработаноВремени = НеобходимыеДанные.ВсегоОтработаноВремени Или Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах;
		

		Если ЗначениеЗаполнено(СтрокаПоказателя.ВидСтажа) Тогда
			 МассивСтажей.Вставить(СтрокаПоказателя.ВидСтажа, СтрокаПоказателя.ВидСтажаКод) 
		КонецЕсли;

		
	КонецЦикла;
	
	НеобходимыеДанные.Вставить("ПроизвольныеСтажи", МассивСтажей);
	
	Возврат НеобходимыеДанные;
КонецФункции

// Функция предназначена для получения оплачиваемого времени по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть время
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях/часах
//
Функция ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВладелец, СообщениеОбОшибке = Ложь, ГрафикиБезРабочегоВремени)
	
	ОплачиваемоеВремя = 0;
	РасшифровкаКомментария = НеОпределено;
	ВажностьКомментария = НеОпределено;
	ТипВР = ТипЗнч(ИсходныеДанные.ВидРасчета);
	ЭтоРегламентированноеНачисление = ТипВР <> Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") И ТипВР <> Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания");
	УчтеныВнутрисменныеОтклонения = Ложь;
	
	Если ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением Тогда
		ОплачиваемоеВремя = ИсходныеДанные.ОтработаноЧасов;
	Иначе
		Если ИсходныеДанные.ОтработаноВремени = Null Тогда
			Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
			ИначеЕсли ИсходныеДанные.ОшибкаВводаИндивидуальногоГрафикаРаботы Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Индивидуальный график работы введен сводно. Расчет времени по данному виду расчета невозможен");
			Иначе
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не найдены данные об отработанном времени");
			КонецЕсли;
			СообщениеОбОшибке = Истина;
			Возврат 0;
		ИначеЕсли ИсходныеДанные.ПредупреждениеНесоответствияТабеляИНачисления Тогда
			ОбщегоНазначенияЗК.ОшибкаРасчета("Предупреждение: " + ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введенные табелем, не соответствуют введенным начислениям");
		КонецЕсли;
		
		Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням 
			Или ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам 
			Или ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам 
			Или ИсходныеДанные.ВремяВведеноТабелем Тогда 
			
			ОплачиваемоеВремя = ИсходныеДанные.ОтработаноВремени;
			
		Иначе
			УчтеныВнутрисменныеОтклонения = ЗначениеЗаполнено(ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение);
			ОплачиваемоеВремя = ИсходныеДанные.ОтработаноВремени - ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение;
		КонецЕсли;
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		
		Если ЭтоРегламентированноеНачисление Тогда
			Если ИсходныеДанные.СпособВводаВремени = 1 Или ИсходныеДанные.СпособВводаВремени = 2 Тогда 
				// введено сводно табелем или индивид. графиком
				РасшифровкаКомментария = Новый Массив;
				РасшифровкаКомментария.Добавить("РаботаСДиалогамиЗК.ОткрытьГрафик");
				РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				ТекстКомментария = "Оплачиваемое время введено сводно за весь период работы ";
				Если ИсходныеДанные.СпособВводаВремени = 1 Тогда
					ПредставлениеРасшифровки = "табелем учета рабочего времени или сдельным нарядом";
				Иначе
					ПредставлениеРасшифровки = "индивидуальным графиком работы";
				КонецЕсли;
				ВажностьКомментария = Перечисления.ВидыСообщений.ВажнаяИнформация;
			Иначе
				РасшифровкаКомментария = Новый Массив;
				РасшифровкаКомментария.Добавить("РаботаСДиалогамиЗК.ОткрытьГрафик");
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ГрафикРаботы);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				Если ИсходныеДанные.СпособВводаВремени = 3 Тогда
					ТекстКомментария = "Оплачиваемое время рассчитано по графику работы: ";
					ПредставлениеРасшифровки = ИсходныеДанные.ГрафикРаботыНаименование;
				Иначе
					ТекстКомментария = "Оплачиваемое время рассчитано по индивидуальному графику работы или по табелю учета рабочего времени. ";
					ПредставлениеРасшифровки = "Подробнее...";
					ВажностьКомментария = Перечисления.ВидыСообщений.ВажнаяИнформация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемое время " + ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, "(в днях) ", "(в часах) ") + ОплачиваемоеВремя, КомментарийВладелец);
		Если УчтеныВнутрисменныеОтклонения Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("При расчете оплачиваемого времени учтены внутрисменные невыходы (в часах) " + ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение, КомментарийВладелец);
		КонецЕсли;
		ОбщегоНазначенияЗК.КомментарийРасчета("Вид учета времени: " + ИсходныеДанные.ВидУчетаВремени, КомментарийВладелец);
		ОбщегоНазначенияЗК.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, ПредставлениеРасшифровки, РасшифровкаКомментария, ВажностьКомментария);
		
	КонецЕсли;
	
	Если ЭтоРегламентированноеНачисление И Не ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением И ОплачиваемоеВремя = 0 И Не ЗначениеЗаполнено(ИсходныеДанные.НормаВремениЗаМесяц) Тогда
		КлючПоиска = Новый Структура("ГрафикРаботы,ВидУчетаВремени");
		КлючПоиска.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
		Если ИсходныеДанные.СпособВводаВремени = 1 Или ИсходныеДанные.СпособВводаВремени = 2 Тогда
			КлючПоиска.ГрафикРаботы = СтрокаДвижений.Сотрудник;
		Иначе
			КлючПоиска.ГрафикРаботы = СтрокаДвижений.ГрафикРаботы;
		КонецЕсли;
		
		КоличествоСтрокГрафика = ГрафикиБезРабочегоВремени.НайтиСтроки(КлючПоиска).Количество();
		Если КомментироватьРасчет Или КоличествоСтрокГрафика = 0 Тогда
			РасшифровкаКомментария = Новый Массив;
			РасшифровкаКомментария.Добавить("РаботаСДиалогамиЗК.ОткрытьГрафик");
			
			Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам Тогда
				ТекстВидаВремени = "вечерних часов";
			ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам Тогда
				ТекстВидаВремени = "ночных часов";
			Иначе
				ТекстВидаВремени = "рабочих дней";
			КонецЕсли;
			
			Если ИсходныеДанные.СпособВводаВремени = 1 Тогда
				РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				Если КомментироватьРасчет Тогда
					ТекстКомментария = "В сдельном наряде или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				Иначе
					ФИО = ИсходныеДанные.СотрудникНаименование;
					УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, , ФИО);
					
					ТекстКомментария = "У " + ФИО + " в сдельном наряде или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				КонецЕсли;
				
				ОбщегоНазначенияЗК.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.Сотрудник;
				КонецЕсли;
				
			ИначеЕсли ИсходныеДанные.СпособВводаВремени = 2 Тогда
				РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				
				Если КомментироватьРасчет Тогда
					ТекстКомментария = "В индивидуальном графике за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				Иначе
					ФИО = ИсходныеДанные.СотрудникНаименование;
					УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, , ФИО);
					
					ТекстКомментария = "У " + ФИО + " в индивидуальном графике за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				КонецЕсли;
				
				ОбщегоНазначенияЗК.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.Сотрудник;
				КонецЕсли;
				
			Иначе
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ГрафикРаботы);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				Если ИсходныеДанные.СпособВводаВремени = 3 Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("В графике нет " + ТекстВидаВремени + " за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " Необходимо заполнить график: ", КомментарийВладелец, ИсходныеДанные.ГрафикРаботыНаименование, РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Иначе
					Если КомментироватьРасчет Тогда
						ТекстКомментария = "В индивидуальном графике или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + ". Необходимо заполнить ";
					Иначе
						ФИО = ИсходныеДанные.СотрудникНаименование;
						УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, , ФИО);
						
						ТекстКомментария = "У " + ФИО + " в индивидуальном графике или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + ". Необходимо заполнить ";
					КонецЕсли;
					
					ОбщегоНазначенияЗК.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				КонецЕсли;
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.ГрафикРаботы;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		СообщениеОбОшибке = Истина;
	КонецЕсли;
	
	Возврат ОплачиваемоеВремя;
	
КонецФункции // ОплачиваемоеВремя()

// выполняет формирование и запись набора записей регистра РасчетСреднегоЗаработка
// на основании данных набора записей регистра ОсновныеНачисленияРаботниковОрганизации
// Параметры:
//  ИмяРегистра - имя регистра расчетов 
//  Регистратор - регистратор набора записей регистра ОсновныеНачисленияРаботниковОрганизации
//  НаборЗаписей
// 
// Возвращаемое значение:
//  нет
//
Процедура СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписей, КомментироватьРасчет = Ложь) Экспорт;
	
	// Вычислим наименьшую и наибольшую дату расчета среднего
	ДатаНачалаРасчетаСреднего		= '00010101';
	ДатаОкончанияРасчетаСреднего	= '00010101';
	НГраница = НаборЗаписей.Количество();
	
	// Выберем данные о коэффициентах индексации за расчетные периоды (в общем случае может быть несколько 
	// различных расчетных периодов, так как записей начислений в документе оплаты может быть несколько и мы позволяем 
	// пользователю редактировать расчетный период)
	
	// Реализация Федеральных законов:
	//	от 22.12.2005 г. № 180-ФЗ и от 29 декабря 2006 г. № 255-ФЗ - по больничным листам
	//	от 5 декабря 2006 г. № 207-ФЗ - по отпуску по уходу за детьми
	// - поле "Сотрудник" с 1 января 2006 года для больничных листов и с 1 января 2007 года для отпуска по уходу за детьми
	// может идентифицировать несколько мест работы, включая работу по внутреннему совместительству
	// - выборка РаботникиОрганизацийСрезПоследних содержит все действующие на конец расчетного периода
	// рабочие места
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.Сотрудник, Основной.Сотрудник) КАК Сотрудник,
	|	Основной.ФизЛицо КАК Физлицо,
	|	Основной.Организация КАК Организация,
	|	Основной.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|		ИНАЧЕ Основной.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчета,
	|	РАЗНОСТЬДАТ(Основной.ПериодРасчетаСреднегоЗаработкаНачало, НАЧАЛОПЕРИОДА(Основной.ПериодРасчетаСреднегоЗаработкаОкончание, МЕСЯЦ), МЕСЯЦ) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	Основной.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоБП,
	|	КОНЕЦПЕРИОДА(Основной.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ) КАК КонецБП,
	|	Основной.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(КоэффициентИндексацииЗаработка.Коэффициент, 1)
	|	КОНЕЦ КАК КоэффициентИндексации,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
	|			ТОГДА ДОБАВИТЬКДАТЕ(Основной.ПериодРасчетаСреднегоЗаработкаНачало, МЕСЯЦ, 1)
	|		ИНАЧЕ ЕСТЬNULL(КоэффициентИндексацииЗаработка.Период, Основной.ДатаНачалаСобытия)
	|	КОНЕЦ КАК Период,
	|	НЕОПРЕДЕЛЕНО КАК ВариантЗаполненияСреднего,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет)
	|			ТОГДА НАЧАЛОПЕРИОДА(Основной.Регистратор.Дата, МЕСЯЦ)
	|		ИНАЧЕ Основной.Регистратор.ПериодРегистрации
	|	КОНЕЦ КАК ПериодРегистрации
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентИндексацииЗаработка
	|		ПО ((НЕ Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))))
	|			И (КоэффициентИндексацииЗаработка.Сотрудник = Основной.Сотрудник)
	|			И (КоэффициентИндексацииЗаработка.Период > Основной.ПериодРасчетаСреднегоЗаработкаНачало)
	|			И (КоэффициентИндексацииЗаработка.Период < Основной.ДатаНачалаСобытия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДатыРегистра.Сотрудник КАК Сотрудник,
	|			ДатыРегистра.Регистратор КАК Регистратор,
	|			ДатыРегистра.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|			ИЗ
	|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия >= РаботникиОрганизаций.Период
	|						И ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|						И ОсновныеНачисленияРаботниковОрганизаций.Организация = РаботникиОрганизаций.Сотрудник.Организация
	|			ГДЕ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &парамРегистратор
	|				И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
	|				И ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия >= &парамДатаЗакона180ФЗ
	|				И (НЕ ОсновныеНачисленияРаботниковОрганизаций.Сторно)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник) КАК ДатыРегистра
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО ДатыРегистра.Период = РаботникиОрганизаций.Период
	|					И ДатыРегистра.Сотрудник = РаботникиОрганизаций.Сотрудник
	|		ГДЕ
	|			ВЫБОР
	|					КОГДА ДатыРегистра.ДатаНачалаСобытия >= РаботникиОрганизаций.ПериодЗавершения
	|							И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	|					ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО Основной.Регистратор = РаботникиОрганизацийСрезПоследних.Регистратор
	|			И Основной.НомерСтроки = РаботникиОрганизацийСрезПоследних.НомерСтроки
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.ВидРасчета.СпособРасчета В(&парамСпособыРасчета)
	|	И (НЕ Основной.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	Сотрудник,
	|	СпособРасчета,
	|	НачалоБП,
	|	КонецБП,
	|	Период УБЫВ";
	
	// уточним запрос для разных расчетных регистров
	Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ВариантЗаполненияСреднего",
		"ВЫБОР
		|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет)
		|			ТОГДА ВЫБОР
		|					КОГДА Основной.ДатаНачалаСобытия >= &парамДатаЗакона213ФЗ
		|						ТОГДА ""ЗаСчетФССПо213ФЗ""
		|					ИНАЧЕ ""ЗаСчетФССПо255ФЗ""
		|				КОНЕЦ
		|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
		|			ТОГДА ВЫБОР
		|					КОГДА Основной.ПериодРегистрации >= &парамДатаЗакона213ФЗ И Основной.ПериодДействияНачало >= &парамДатаЗакона213ФЗ
		|						ТОГДА ""ЗаСчетФССПо213ФЗ""
		|					КОГДА Основной.ДатаНачалаСобытия >= &парамДатаЗакона255ФЗ
		|						ТОГДА ""ЗаСчетФССПо255ФЗ""
		|					КОГДА Основной.ВариантАлгоритмаРасчета В (&БольничныеПереходногоПериода)
		|						ТОГДА ""ПереходныйПериодПо255ФЗ""
		|					ИНАЧЕ ""ЗаСчетФССПо180ФЗ""
		|				КОНЕЦ
		|		КОГДА Основной.ДатаНачалаСобытия >= &парамДатаПостановления922
		|			ТОГДА ""Средний2008""
		|		ИНАЧЕ ""Средний""
		|	КОНЕЦ КАК ВариантЗаполненияСреднего");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ВариантЗаполненияСреднего",
		"ВЫБОР
		|		КОГДА Основной.ДатаНачалаСобытия >= &парамДатаПостановления922
		|			ТОГДА ""Средний2008""
		|		ИНАЧЕ ""Средний""
		|	КОНЕЦ КАК ВариантЗаполненияСреднего");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций","РегистрРасчета." + ИмяРегистра);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("парамДатаЗакона180ФЗ",		'20060101');
	Запрос.УстановитьПараметр("парамДатаЗакона255ФЗ",		ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006());
	Запрос.УстановитьПараметр("парамДатаЗакона213ФЗ",		ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	ДатаПостановления922	= ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоОтпускам2008();
	Запрос.УстановитьПараметр("парамДатаПостановления922",	ДатаПостановления922);
	Запрос.УстановитьПараметр("парамРегистратор",			Регистратор);
	
	СпособыРасчетаПоСреднему = Новый Массив(7);
	СпособыРасчетаПоСреднему[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку;
	СпособыРасчетаПоСреднему[1] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
	СпособыРасчетаПоСреднему[2] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням;
	СпособыРасчетаПоСреднему[3] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке;
	СпособыРасчетаПоСреднему[4] = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка;
	СпособыРасчетаПоСреднему[5] = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет;
	СпособыРасчетаПоСреднему[6] = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС;
	
	Запрос.УстановитьПараметр("парамСпособыРасчета", СпособыРасчетаПоСреднему);
	
	БольничныеПереходногоПериода = Новый Массив(7);
	БольничныеПереходногоПериода[0] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаБезОграничений;
	БольничныеПереходногоПериода[1] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничением;
	БольничныеПереходногоПериода[2] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИБезОграничений;
	БольничныеПереходногоПериода[3] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИВРазмереММОТ;
	БольничныеПереходногоПериода[4] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТ;
	БольничныеПереходногоПериода[5] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТиБезОграничений;
	БольничныеПереходногоПериода[6] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениямиВРазмереММОТиОбщим;
	
	Запрос.УстановитьПараметр("БольничныеПереходногоПериода", БольничныеПереходногоПериода);

	Выборка = Запрос.Выполнить().Выбрать();

	ПредыдущаяСтрокаЗаработок	= Неопределено;
	ПредыдущаяСтрокаПремии		= Неопределено;
	ПредыдущаяСтрокаФиксПремии	= Неопределено;
	
	ТекущийСотрудник			= Неопределено;
	ТекущийСпособ				= Неопределено;
	ТекущийНачалоБП				= Неопределено;
	ТекущийКонецБП				= Неопределено;
	ТекущаяДатаНачалаСобытия	= Неопределено;
	ТекущийКоэффициент			= 1;
	ТекущийВариантЗаполненияСреднего = "";

	// предопределенные виды расчета среднего заработка
	ПоЗаработку		= Неопределено;
	ПоПремиям		= Неопределено;
	ПоФиксПремиям	= Неопределено;
	ПоГодовойПремии	= Неопределено;
	ПоФиксГодовойПремии	= Неопределено;
	
	ПоЗаработкуБЛ			= ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ПоЗаработкуБЛиПособий	= ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
	ПоЗаработкуБЛиПособийС2010 = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010;
	ПоПремиямБЛ				= ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
	ПоФиксПремиямБЛ			= ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
    ПоПремиямБЛиПособий		= ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
    ПоПремиямБЛиПособийС2010 = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010;
	ПоГодовойПремииБЛ		= ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
	ПоФиксГодовойПремииБЛ	= ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
	
	ПоЗаработкуДо			= ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ПоЗаработкуПосле		= ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
	ПоЗаработкуНеИндексируемый = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые;
	ПоПремиямДо				= ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	ПоПремиямПосле			= ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
	ПоПремиямНеИндексируемый = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые;
	ПоФиксПремиямДо			= ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	ПоФиксПремиямПосле		= ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;
	ПоГодовойПремииДо		= ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	ПоГодовойПремииПосле	= ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые;
	ПоГодовойПремииИндексируемый = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;
	ПоФиксГодовойПремииДо	= ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
	ПоФиксГодовойПремииПосле = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;

	Организация = Справочники.Организации.ПустаяСсылка();;
	
	// Скопируем структуру набора записей
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	// Выборку обходим в порядке убывания дат случаев индексации
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = Выборка.Организация
		КонецЕсли;
		
		// Проверим, не сменился ли работник
		Если ТекущийСотрудник <> Выборка.Сотрудник
			ИЛИ ТекущийСпособ <> Выборка.СпособРасчета
			ИЛИ ТекущийНачалоБП <> Выборка.НачалоБП
			ИЛИ ТекущийКонецБП <> Выборка.КонецБП
			ИЛИ ТекущийВариантЗаполненияСреднего <> Выборка.ВариантЗаполненияСреднего
			ИЛИ ТекущаяДатаНачалаСобытия <> Выборка.ДатаНачалаСобытия Тогда
			
			// Закроем строки по предыдущему работнику
			Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
				
				ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(ТекущийНачалоБП);
				
				СтрокаЗаработок = ПредыдущаяСтрокаЗаработок;
				СтрокаПремии = ПредыдущаяСтрокаПремии;
				СтрокаФиксПремии = ПредыдущаяСтрокаФиксПремии;
				
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
					// дозаполним строки по работнику
					СтрокаЗаработок.БазовыйПериодНачало		= ТекущийМесяц;
					СтрокаПремии.БазовыйПериодНачало		= ТекущийМесяц;
					СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийМесяц;
					
					Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
						
						СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
						СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
						
						ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
						ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
						
					ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
						
					КонецЕсли;
					
					// Создадим по первой строке по работнику для заработка и премии
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
					Если Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
						СтрокаФиксПремии = СтрокаПремии;
					Иначе
						СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаработок,ПредыдущаяСтрокаЗаработок);
					ЗаполнитьЗначенияСвойств(СтрокаПремии,ПредыдущаяСтрокаПремии);
					ЗаполнитьЗначенияСвойств(СтрокаФиксПремии,ПредыдущаяСтрокаФиксПремии);
					
					СтрокаЗаработок.БазовыйПериодКонец		= ТекущийМесяц - 1;
					СтрокаПремии.БазовыйПериодКонец			= ТекущийМесяц - 1;
					СтрокаФиксПремии.БазовыйПериодКонец		= ТекущийМесяц - 1;
					СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
					СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
					СтрокаФиксПремии.КоэффициентИндексации	= ТекущийКоэффициент;
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
				
				// закроем последнюю строку по предыдущему работнику
				СтрокаЗаработок.БазовыйПериодНачало		= ТекущийНачалоБП;
				СтрокаПремии.БазовыйПериодНачало		= ТекущийНачалоБП;
				СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийНачалоБП;
				Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
					
					СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
					СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
					ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
					
				ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
					
				КонецЕсли;
				ПредыдущаяСтрокаЗаработок	= Неопределено;
				ПредыдущаяСтрокаПремии		= Неопределено;
				ПредыдущаяСтрокаФиксПремии	= Неопределено;
			КонецЕсли;

			// Запомним новый набор идентификаторов начисления
			ТекущийСотрудник			= Выборка.Сотрудник;
			ТекущийСпособ				= Выборка.СпособРасчета;
			ТекущийНачалоБП				= Выборка.НачалоБП;
			ТекущийКонецБП				= Выборка.КонецБП;
			ТекущаяДатаНачалаСобытия	= Выборка.ДатаНачалаСобытия;
			ТекущийВариантЗаполненияСреднего = Выборка.ВариантЗаполненияСреднего;
			
			ПоЗаработку		= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоЗаработкуДо, ПоЗаработкуПосле);
			ПоПремиям		= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоПремиямДо, ПоПремиямПосле);
			ПоФиксПремиям	= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоФиксПремиямДо, ПоФиксПремиямПосле);
			ПоГодовойПремии	= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоГодовойПремииДо, ПоГодовойПремииПосле);
			ПоФиксГодовойПремии	= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоФиксГодовойПремииДо, ПоФиксГодовойПремииПосле);
			
			// Инициализируем данные для нового работника
			ТекущийКоэффициент = 1;
			
			// введем вид расчета по годовой премии
			Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
				СтрокаГП = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоГодовойПремии);
				// при расчете годовой премии в базовый период пишем расчетный период 
				СтрокаГП.БазовыйПериодНачало	= ТекущийНачалоБП;
				СтрокаГП.БазовыйПериодКонец		= ТекущийКонецБП;
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				// годовые премии не выделяются
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" Или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				СтрокаГП = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоГодовойПремииБЛ);
				// при расчете годовой премии в базовый период пишем расчетный период 
				СтрокаГП.БазовыйПериодНачало	= ТекущийНачалоБП;
				СтрокаГП.БазовыйПериодКонец		= ТекущийКонецБП;
			Иначе
			КонецЕсли;
			
			// введем вид расчета по годовой премии, начисляемых фиксированными суммами
			Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
				СтрокаГП = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоФиксГодовойПремии);
				// при расчете годовой премии в базовый период пишем расчетный период 
				СтрокаГП.БазовыйПериодНачало	= ТекущийНачалоБП;
				СтрокаГП.БазовыйПериодКонец		= ТекущийКонецБП;
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				// годовые премии не выделяются
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" Или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				СтрокаГП = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоФиксГодовойПремииБЛ);
				// при расчете годовой премии в базовый период пишем расчетный период 
				СтрокаГП.БазовыйПериодНачало	= ТекущийНачалоБП;
				СтрокаГП.БазовыйПериодКонец		= ТекущийКонецБП;
			Иначе
			КонецЕсли;
			
			// Создадим по первой строке по работнику для заработка и премии
			Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
				СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ" Тогда
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
				СтрокаФиксПремии = СтрокаПремии; // фиксированные премии не выделяются
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособийС2010);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособийС2010);
				СтрокаФиксПремии = СтрокаПремии; // фиксированные премии не выделяются
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛ);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛ);
				СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиямБЛ);
			Иначе
			КонецЕсли;
			
			СтрокаЗаработок.КоэффициентИндексации	= 1;
			СтрокаПремии.КоэффициентИндексации		= 1;
			СтрокаФиксПремии.КоэффициентИндексации	= 1;
			СтрокаЗаработок.БазовыйПериодКонец		= Выборка.КонецБП;
			СтрокаПремии.БазовыйПериодКонец			= Выборка.КонецБП;
			СтрокаФиксПремии.БазовыйПериодКонец		= Выборка.КонецБП;
			
			Если Выборка.Период <= Выборка.КонецБП Тогда

				ТекущийМесяц = НачалоМесяца(СтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(Выборка.Период);
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
					// дозаполним строки по работнику
					СтрокаЗаработок.БазовыйПериодНачало		= ТекущийМесяц;
					СтрокаПремии.БазовыйПериодНачало		= ТекущийМесяц;
					СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийМесяц;
					Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
						
						СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
						СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
						
						ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
						ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
						
					ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
						
					КонецЕсли;
					
					// Создадим по первой строке по работнику для заработка и премии
					Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
						СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
						СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
						СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
					ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ" Тогда
						СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
						СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
						СтрокаФиксПремии = СтрокаПремии;
					ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
						СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособийС2010);
						СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособийС2010);
						СтрокаФиксПремии = СтрокаПремии;
					ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
						СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛ);
						СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛ);
						СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиямБЛ);
					Иначе
					КонецЕсли;
					
					СтрокаЗаработок.БазовыйПериодКонец		= ТекущийМесяц - 1;
					СтрокаПремии.БазовыйПериодКонец			= ТекущийМесяц - 1;
					СтрокаФиксПремии.БазовыйПериодКонец		= ТекущийМесяц - 1;
					СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
					СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
					СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
				
				// дозаполним первые строки по работнику
				СтрокаЗаработок.БазовыйПериодНачало		= Выборка.Период;
				СтрокаПремии.БазовыйПериодНачало		= Выборка.Период;
				СтрокаФиксПремии.БазовыйПериодНачало	= Выборка.Период;
				Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
					
					СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
					СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
					ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
					
				ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
					
				КонецЕсли;
				
				// и создадим еще по одной строке
				Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
					СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
				ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ" Тогда
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
					СтрокаФиксПремии = СтрокаПремии;
				ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособийС2010);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособийС2010);
					СтрокаФиксПремии = СтрокаПремии;
				ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛ);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛ);
					СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиямБЛ);
				Иначе
				КонецЕсли;
				
				// дозаполним - знаем все кроме БазовыйПериодНачало
				ТекущийКоэффициент = Выборка.КоэффициентИндексации * ТекущийКоэффициент;
				
				СтрокаЗаработок.БазовыйПериодКонец	= Выборка.Период-1;
				СтрокаПремии.БазовыйПериодКонец		= Выборка.Период-1;
				СтрокаФиксПремии.БазовыйПериодКонец	= Выборка.Период-1;
				
			Иначе
				// здесь запомним только КоэффициентИндексации
				ТекущийКоэффициент = Выборка.КоэффициентИндексации * ТекущийКоэффициент;
			КонецЕсли;
			
			СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
			СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
			СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
			
		Иначе // здесь обрабатывается очередной период, заработок которого индексируется
				
			ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
			МесяцБазовыйПериодНачало = НачалоМесяца(Выборка.Период);
			
			СтрокаЗаработок = ПредыдущаяСтрокаЗаработок;
			СтрокаПремии = ПредыдущаяСтрокаПремии;
			СтрокаФиксПремии = ПредыдущаяСтрокаФиксПремии;
				
			Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
				// дозаполним строки по работнику
				СтрокаЗаработок.БазовыйПериодНачало		= ТекущийМесяц;
				СтрокаПремии.БазовыйПериодНачало		= ТекущийМесяц;
				СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийМесяц;
				
				Если Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
					
					СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
					СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
					ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
					
				ИначеЕсли Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
					
				КонецЕсли;
				
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
				Если Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
					СтрокаФиксПремии = СтрокаПремии
				Иначе
					СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаЗаработок,ПредыдущаяСтрокаЗаработок);
				ЗаполнитьЗначенияСвойств(СтрокаПремии,ПредыдущаяСтрокаПремии);
				ЗаполнитьЗначенияСвойств(СтрокаФиксПремии,ПредыдущаяСтрокаФиксПремии);
				
				СтрокаЗаработок.БазовыйПериодКонец		= ТекущийМесяц - 1;
				СтрокаПремии.БазовыйПериодКонец			= ТекущийМесяц - 1;
				СтрокаФиксПремии.БазовыйПериодКонец		= ТекущийМесяц - 1;
				СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
				СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
				СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
				
				ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
				
			КонецЦикла;
			
			// закроем предыдущую строку
			СтрокаЗаработок.БазовыйПериодНачало	= Выборка.Период;
			СтрокаПремии.БазовыйПериодНачало	= Выборка.Период;
			СтрокаФиксПремии.БазовыйПериодНачало= Выборка.Период;
			
			Если Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				
				СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
				СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
				
				ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
				ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
				
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
				
			КонецЕсли;
			
			// Создадим очередные строки
			СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
			СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
			Если Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				СтрокаФиксПремии = СтрокаПремии;
			Иначе
				СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаЗаработок,ПредыдущаяСтрокаЗаработок);
			ЗаполнитьЗначенияСвойств(СтрокаПремии,ПредыдущаяСтрокаПремии);
			ЗаполнитьЗначенияСвойств(СтрокаФиксПремии,ПредыдущаяСтрокаФиксПремии);
					
			// дозаполним - знаем все кроме БазовыйПериодНачало
			ТекущийКоэффициент = Выборка.КоэффициентИндексации * ТекущийКоэффициент;
			
			СтрокаЗаработок.БазовыйПериодКонец		= Выборка.Период-1;
			СтрокаПремии.БазовыйПериодКонец			= Выборка.Период-1;
			СтрокаФиксПремии.БазовыйПериодКонец		= Выборка.Период-1;
			СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
			СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
			СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
			
		КонецЕсли;
		
		// Сохраним для следующей итерации
		ПредыдущаяСтрокаЗаработок	= СтрокаЗаработок;
		ПредыдущаяСтрокаПремии		= СтрокаПремии;
		ПредыдущаяСтрокаФиксПремии	= СтрокаФиксПремии;
		
		// Расчет минимальной и максимальной из дат начала и окончания расчетных периодов 
		//(эти данные нужны для процедуры ПолучитьДанныеДляРасчета
		Если ДатаНачалаРасчетаСреднего = '00010101' Тогда
			ДатаНачалаРасчетаСреднего = Выборка.НачалоБП;
		Иначе
			ДатаНачалаРасчетаСреднего = Мин(ДатаНачалаРасчетаСреднего, Выборка.НачалоБП);
		КонецЕсли;
		Если ДатаОкончанияРасчетаСреднего = '00010101' Тогда
			ДатаОкончанияРасчетаСреднего = Выборка.КонецБП;
		Иначе
			ДатаОкончанияРасчетаСреднего = Макс(ДатаОкончанияРасчетаСреднего, Выборка.КонецБП);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
		
		ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
		МесяцБазовыйПериодНачало = НачалоМесяца(ТекущийНачалоБП);
		
		СтрокаЗаработок		= ПредыдущаяСтрокаЗаработок;
		СтрокаПремии		= ПредыдущаяСтрокаПремии;
		СтрокаФиксПремии	= ПредыдущаяСтрокаФиксПремии;
		
		Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
			
			// дозаполним строки по работнику
			СтрокаЗаработок.БазовыйПериодНачало		= ТекущийМесяц;
			СтрокаПремии.БазовыйПериодНачало		= ТекущийМесяц;
			СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийМесяц;
			Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				
				СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
				СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
				
				ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
				ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
				
			ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
				
			КонецЕсли;
			
			// Создадим по первой строке по работнику для заработка и премии
			СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
			СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
			Если Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				СтрокаФиксПремии = СтрокаПремии;
			Иначе
				СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаЗаработок,ПредыдущаяСтрокаЗаработок);
			ЗаполнитьЗначенияСвойств(СтрокаПремии,ПредыдущаяСтрокаПремии);
			ЗаполнитьЗначенияСвойств(СтрокаФиксПремии,ПредыдущаяСтрокаФиксПремии);
			
			СтрокаЗаработок.БазовыйПериодКонец		= ТекущийМесяц - 1;
			СтрокаПремии.БазовыйПериодКонец			= ТекущийМесяц - 1;
			СтрокаФиксПремии.БазовыйПериодКонец		= ТекущийМесяц - 1;
			СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
			СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
			СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
			
		КонецЦикла;
		
		// закроем последнюю строку по предыдущему работнику
		СтрокаЗаработок.БазовыйПериодНачало		= ТекущийНачалоБП;
		СтрокаПремии.БазовыйПериодНачало		= ТекущийНачалоБП;
		СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийНачалоБП;
		Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
			
			СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
			СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
			
			ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
			ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
			
		ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
			
			ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
			ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
			
			ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
			ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
			
			ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
			ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
			
		КонецЕсли;
	КонецЕсли;
	
	// Загрузим полученные периоды в набор записей
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	// Зафиксируем нарезанные записи
	НаборЗаписей.Записать();

	////////////////////////////////////////////////////////////////////////////////
	// базовые данные для расчета ресурсов
	
	ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("РасчетнаяБазаСреднегоЗаработка", КомментироватьРасчет, Запрос);
	
	ПоГодовойПремии = Новый Массив;
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
	
	Заработок = Новый Массив;
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
	Запрос.УстановитьПараметр("парамЗаработокБезБольничных", Заработок);
	
	Заработок = Новый Массив;
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
	Запрос.УстановитьПараметр("парамЗаработок",	Заработок);
	
	Запрос.УстановитьПараметр("парамПоГодовойПремии",	ПоГодовойПремии);
	Запрос.УстановитьПараметр("парамПоГодовойПремииИндексируемые", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
	Запрос.УстановитьПараметр("парамДатаС", НачалоМесяца(ДатаНачалаРасчетаСреднего));
	Запрос.УстановитьПараметр("парамДатаПо", КонецМесяца(ДатаОкончанияРасчетаСреднего));
	
	ПропорциональныеПремии = Новый Массив;
	Если Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "НеУменьшатьПропорциональныеПремии") Тогда 
		// в учетной политике записано дополнительно уменьшать премии при выходе их базового периода за пределы расчетного периода
		ПропорциональныеПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
		ПропорциональныеПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
		ПропорциональныеПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
		ПропорциональныеПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПропорциональныеПремии",ПропорциональныеПремии);
	
	ВыборкаБазы = Запрос.Выполнить().Выбрать();
	
	ТекстЗапроса = "";
	ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ВремяСреднегоЗаработка", КомментироватьРасчет, Запрос, ТекстЗапроса);
	
	ТекстДопТаблицы = 
	"ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК БазовыйПериодНачало,
	|	0 КАК ОтработаноПоПятидневке,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТДополнительныеДанные
	|ГДЕ
	|	ЛОЖЬ";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, ТекстДопТаблицы, ТекстДополнительнойТаблицыРасчетаСреднего());
	
	ПоФиксПремиям = ПропорциональныеПремии;
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
	Запрос.УстановитьПараметр("ФиксПремии", ПоФиксПремиям);
	
	Заработок = Новый Массив();
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Запрос.УстановитьПараметр("ЗаработокПрошлыхЛет", Заработок);
	Заработок = Новый Массив();
	Запрос.УстановитьПараметр("парамДатаИзмененияПорядкаРасчета2006", ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006());
	
	СоответствиеФиксПремий = Новый Соответствие;
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий,Истина);
	СоответствиеОсновногозаработка = Новый Соответствие;
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку,Истина);
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые,Истина);
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ,Истина);
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий,Истина);
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010,Истина);

	ВыборкаОтработанноеВремя = Запрос.Выполнить().Выбрать();
	
	// заполним результаты в наборе записей
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ВГраница = НаборЗаписей.Количество() - 1;
	
	Если КомментироватьРасчет Тогда
		КомментарийРасчетаСреднего = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет среднего заработка");
	Конецесли;
		
	Для Индекс = НГраница По ВГраница Цикл
		СтрокаДвижений = НаборЗаписей[Индекс];
		
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		ЗаписьСреднегоНеОбработана = Истина;
		
		ТекущийНомерСтроки = НеОпределено;
		ТекущийЧислоМесяцев = НеОпределено;
		ТекущийПериодРасчета = НеОпределено;
		ТекущийДополнительноУменьшатьПропорциональныеПремии = Ложь;
		НеБылоСообщениеОСводномТабеле = Истина;
		Пока ВыборкаБазы.НайтиСледующий(СтруктураПоиска) Цикл
			
			ЗаписьСреднегоНеОбработана = Ложь;
			
			Если ТекущийНомерСтроки = ВыборкаБазы.НомерСтроки Тогда
				Если НЕ (ТекущийЧислоМесяцев = ВыборкаБазы.ЧислоМесяцев И ТекущийПериодРасчета = ВыборкаБазы.ПериодРасчетаСреднегоЗаработка И ТекущийДополнительноУменьшатьПропорциональныеПремии = ВыборкаБазы.ДополнительноУменьшатьПропорциональныеПремии) Тогда
					// вводим новые строки набора записей
					ДопСтрокаДвижений = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ДопСтрокаДвижений,СтрокаДвижений);
					СтрокаДвижений = ДопСтрокаДвижений;
					СтрокаДвижений.Результат = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаОтработанноеВремя.НайтиСледующий(СтруктураПоиска) Или ТекущийНомерСтроки = ВыборкаБазы.НомерСтроки Тогда 
				Если СоответствиеФиксПремий[СтрокаДвижений.ВидРасчета] <> Неопределено Или ВыборкаБазы.ДополнительноУменьшатьПропорциональныеПремии Тогда
					// для "премий фиксированной суммой" надо учитывать отработанное время
					СтрокаДвижений.ОтработаноПоПятидневке	= ВыборкаОтработанноеВремя.ОтработаноПоПятидневке;
					СтрокаДвижений.НормаПоПятидневке		= ВыборкаОтработанноеВремя.НормаПоПятидневкеПоПроизвКалендарю;
				ИначеЕсли СоответствиеОсновногозаработка[СтрокаДвижений.ВидРасчета] <> Неопределено Тогда
					СтрокаДвижений.ОтработаноДней			= ВыборкаОтработанноеВремя.ОтработаноДней;
					СтрокаДвижений.ОтработаноЧасов			= ВыборкаОтработанноеВремя.ОтработаноЧасов;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДвижений,ВыборкаБазы, "ЧислоМесяцев, ПериодРасчетаСреднегоЗаработка");
			
			Если ВыборкаБазы.ОшибкаВводаСводногоТабеля Тогда
				Если НеБылоСообщениеОСводномТабеле Тогда
					Если Не КомментироватьРасчет Тогда
						КомментарийРасчетаСреднего = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет среднего заработка");
					КонецЕсли;
					ОбщегоНазначенияЗК.КомментарийРасчета("За период с " + Формат(СтрокаДвижений.БазовыйПериодНачало,"ДФ=dd.MM.yyyy") + " по " + Формат(СтрокаДвижений.БазовыйПериодКонец,"ДФ=dd.MM.yyyy") + " не удалось определить базовые начисления, так как в этом месяце введен сводный табель.", КомментарийРасчетаСреднего);
					НеБылоСообщениеОСводномТабеле = Ложь;
				КонецЕсли;
			Иначе
				Если ВыборкаБазы.ДополнительноУменьшатьПропорциональныеПремии И СтрокаДвижений.НормаПоПятидневке <> 0 Тогда
					СтрокаДвижений.Результат = СтрокаДвижений.Результат + ВыборкаБазы.РезультатБаза * СтрокаДвижений.ОтработаноПоПятидневке / СтрокаДвижений.НормаПоПятидневке;
				Иначе
					СтрокаДвижений.Результат = СтрокаДвижений.Результат + ВыборкаБазы.РезультатБаза;
				КонецЕсли;
				СтрокаДвижений.СкидкаПоСтраховымВзносам	= СтрокаДвижений.СкидкаПоСтраховымВзносам + ВыборкаБазы.СкидкаПоСтраховымВзносам;
				Если КомментироватьРасчет и ВыборкаБазы.РезультатБаза <> 0 Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Вид начисления: " + ВыборкаБазы.ВидРасчетаНаименование + ", сумма: " + ВыборкаБазы.РезультатБаза + ?(ВыборкаБазы.СкидкаПоСтраховымВзносам = 0,"",", учтено скидки" + ВыборкаБазы.СкидкаПоСтраховымВзносам), КомментарийРасчетаСреднего);
				КонецЕсли;
			КонецЕсли;
			
			ТекущийНомерСтроки = ВыборкаБазы.НомерСтроки;
			ТекущийЧислоМесяцев = ВыборкаБазы.ЧислоМесяцев;
			ТекущийПериодРасчета = ВыборкаБазы.ПериодРасчетаСреднегоЗаработка;
			ТекущийДополнительноУменьшатьПропорциональныеПремии = ВыборкаБазы.ДополнительноУменьшатьПропорциональныеПремии;
		КонецЦикла;
		
		Если ЗаписьСреднегоНеОбработана И СоответствиеОсновногозаработка[СтрокаДвижений.ВидРасчета] <> Неопределено И ВыборкаОтработанноеВремя.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаДвижений.ОтработаноДней			= ВыборкаОтработанноеВремя.ОтработаноДней;
			СтрокаДвижений.ОтработаноЧасов			= ВыборкаОтработанноеВремя.ОтработаноЧасов;
		КонецЕсли;
		
	КонецЦикла;
	
	// Отсортируем периоды в наборе записей
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Сортировать("Сотрудник, СпособРасчета, ДатаНачалаСобытия, ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода, БазовыйПериодНачало");
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	//Запишем результат
	НаборЗаписей.Записать();

КонецПроцедуры

// Возвращает текст части запроса расчета среднего для отпусков 2007 года
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Строка - текст временной таблицы
//
Функция ТекстДополнительнойТаблицыРасчетаСреднего() 

	Возврат
	"ВЫБРАТЬ
	|	ДанныеЗаработокПрошлыхЛет.НомерСтроки,
	|	ДанныеЗаработокПрошлыхЛет.БазовыйПериодНачало,
	|	0 КАК ОтработаноПоПятидневке,
	|	ВЫБОР
	|		КОГДА ДанныеЗаработокПрошлыхЛет.СпособРасчета В (&парамНеОтпуск)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА ДанныеЗаработокПрошлыхЛет.ЭтоПрогул
	|							ТОГДА ДанныеЗаработокПрошлыхЛет.НормаДней
	|						ИНАЧЕ ДанныеЗаработокПрошлыхЛет.ОтработаноДней
	|					КОНЕЦ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеЗаработокПрошлыхЛет.Сотрудник ЕСТЬ NULL 
	|					ТОГДА 0
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА ДанныеЗаработокПрошлыхЛет.ЭтоПрогул
	|								ТОГДА ДанныеЗаработокПрошлыхЛет.НормаДнейПоПятидневке
	|							ИНАЧЕ ДанныеЗаработокПрошлыхЛет.ОтработаноДнейПоПятидневке
	|						КОНЕЦ) < ДанныеЗаработокПрошлыхЛет.ДнейПоПятидневке
	|					ТОГДА ВЫБОР
	|							КОГДА ДанныеЗаработокПрошлыхЛет.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|								ТОГДА СУММА(ДанныеЗаработокПрошлыхЛет.ОтработаноДнейПоПятидневке) * 1.2
	|							ИНАЧЕ СУММА(ДанныеЗаработокПрошлыхЛет.ОтработаноДнейПоПятидневке) * 1.4
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ДанныеЗаработокПрошлыхЛет.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|							ТОГДА ДанныеЗаработокПрошлыхЛет.ДнейПоШестидневке
	|						КОГДА ДанныеЗаработокПрошлыхЛет.ДатаНачалаСобытия < &парамДатаИзмененияПорядкаРасчета2006
	|							ТОГДА 29.6
	|						ИНАЧЕ 29.4
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОтработаноДней,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеЗаработокПрошлыхЛет.ЭтоПрогул
	|				ТОГДА ДанныеЗаработокПрошлыхЛет.НормаЧасов
	|			ИНАЧЕ ДанныеЗаработокПрошлыхЛет.ОтработаноЧасов
	|		КОНЕЦ) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТДополнительныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
	|		ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗаписиРасчетаСреднего.СпособРасчета КАК СпособРасчета,
	|		ВЫБОР
	|			КОГДА ОтработанноеВремя.ВидРасчета В (&Прогулы)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоПрогул,
	|		ОтработанноеВремя.НормаДней КАК НормаДней,
	|		ОтработанноеВремя.НормаЧасов КАК НормаЧасов,
	|		ОтработанноеВремя.ОтработаноДней КАК ОтработаноДней,
	|		ОтработанноеВремя.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ОтработанноеВремя.Сотрудник КАК Сотрудник,
	|		ОтработанноеВремя.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|		ОтработанноеВремя.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|		НормаПоПроизвКалендарю.ДнейПоПятидневке КАК ДнейПоПятидневке,
	|		ЗаписиРасчетаСреднего.СпособРасчета КАК СпособРасчета1,
	|		ОтработанноеВремя.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке1,
	|		НормаПоПроизвКалендарю.ДнейПоШестидневке КАК ДнейПоШестидневке,
	|		ЗаписиРасчетаСреднего.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
	|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
	|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОтработанноеВремя.ПериодРегистрации
	|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.ПериодДействия)
	|				И (ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	|					ИЛИ ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
	|					ИЛИ ОтработанноеВремя.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаПоПроизвКалендарю КАК НормаПоПроизвКалендарю
	|			ПО (НормаПоПроизвКалендарю.МесяцПериода = НАЧАЛОПЕРИОДА(ОтработанноеВремя.ПериодДействия, ДЕНЬ))
	|	ГДЕ
	|		ЗаписиРасчетаСреднего.ВидРасчета В(&ЗаработокПрошлыхЛет)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаписиРасчетаСреднего.НомерСтроки,
	|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
	|		ЗаписиРасчетаСреднего.СпособРасчета,
	|		ИСТИНА,
	|		ОтработанноеВремя.Дней,
	|		ОтработанноеВремя.Часов,
	|		0,
	|		0,
	|		ОтработанноеВремя.Сотрудник,
	|		ОтработанноеВремя.Дней,
	|		НормаПоПроизвКалендарю.ДнейПоПятидневке,
	|		НормаПоПроизвКалендарю.ДнейПоПятидневке,
	|		ЗаписиРасчетаСреднего.СпособРасчета,
	|		0,
	|		НормаПоПроизвКалендарю.ДнейПоШестидневке,
	|		ЗаписиРасчетаСреднего.ДатаНачалаСобытия
	|	ИЗ
	|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПрогулыПоТабелюФПД КАК ОтработанноеВремя
	|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
	|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОтработанноеВремя.ПериодРегистрации
	|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.ПериодДействия)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаПоПроизвКалендарю КАК НормаПоПроизвКалендарю
	|			ПО (НормаПоПроизвКалендарю.МесяцПериода = НАЧАЛОПЕРИОДА(ОтработанноеВремя.ПериодДействия, ДЕНЬ))
	|	ГДЕ
	|		ЗаписиРасчетаСреднего.ВидРасчета В(&ЗаработокПрошлыхЛет)) КАК ДанныеЗаработокПрошлыхЛет
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаработокПрошлыхЛет.Сотрудник,
	|	ДанныеЗаработокПрошлыхЛет.СпособРасчета,
	|	ДанныеЗаработокПрошлыхЛет.НомерСтроки,
	|	ДанныеЗаработокПрошлыхЛет.ДатаНачалаСобытия,
	|	ДанныеЗаработокПрошлыхЛет.БазовыйПериодНачало,
	|	ДанныеЗаработокПрошлыхЛет.ДнейПоПятидневке,
	|	ДанныеЗаработокПрошлыхЛет.ДнейПоШестидневке"

КонецФункции // ()

// Получает данные для расчета ресурсов записей регистра расчета
//
//	ИмяРегистра - строка, имя регистра расчета
//	КатегорияРасчета - ссылка на значение перечисленич КатегорииРасчетов
//	НеобходимыеДанные - Структура с элементами 
//			База,
//			НормаВремени,
//			ОтработаноВремени,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//	Перерасчет - булево - признак того, что получаем данные для случая перерасчета
//	Физлица - массив ссылок на физлиц - выбранные для перерасчета физлица, или массив содержащий ссылку
//			  на физлицо по которому производится расчет (расчет по одному работнику из документа)	
//
// Возвращает выборку результата запроса
Функция ПолучитьДанныеДляРасчета(ИмяРегистра,
									КатегорияРасчета,
									НеобходимыеДанные,
									Регистратор,
									Организация,
									ПериодРегистрации,
									Перерасчет = Ложь,
									Физлица = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено) Экспорт

									
	/////////////////////////////////////////////////////////////////////
	// Вложенные запросы
	// для получения данных расчета
	// Реализованы как временные таблицы
	
	// таблица СотрудникиДляПерерасчетаТекст
	// Список сотрудников по которым необходимо выполнить перерасчет
	// Поля:
	//		Сотрудник
	// Описание:
	// Получает список неповторяющихся сотрудников по которым есть записи
	// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
	//
	ФизлицаДляПерерасчетаТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчет.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТФизлицаДляПерерасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Перерасчет.Физлицо КАК Физлицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Перерасчет.Физлицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет
	|ИНДЕКСИРОВАТЬ ПО 
	|	Физлицо";
	
	// ДанныеОСреднемЗаработке
	//		Таблица данных о среднем заработке
	// 
	//	Поля:
	//		СреднийЗаработок - суммируем
	//		ОтработаноДней - для расчета среднего
	//		ОтработаноЧасов - для расчета среднего
	//		Сотрудник,
	//		СпособРасчета,                 - это для идентификации записи в основном регистре расчета
	//		ДатаНачалаРасчетногоПериода,   - это для идентификации записи в основном регистре расчета
	//		ДатаОкончанияРасчетногоПериода - это для идентификации записи в основном регистре расчета
	// 
	// Описание:
	//
	//	выбираем из РегистрРасчета.РасчетСреднегоЗаработка
	//	по регистратору

	ДанныеОСреднемЗаработкеТекст =
	"ВЫБРАТЬ
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&СоставляющиеСреднегоЗаработкаПособий)
	|				ТОГДА 0
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|							ТОГДА 1
	|						ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|					КОНЕЦ
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|				ТОГДА РасчетСреднегоЗаработка.Результат
	|			КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|									ТОГДА 1
	|								ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|							КОНЕЦ
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|									ТОГДА 1
	|								ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|							КОНЕЦ * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|									ТОГДА 0
	|								ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|							КОНЕЦ
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиямНеИндексируемые)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|									ТОГДА 0
	|								ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|							КОНЕЦ
	|					ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|				КОНЕЦ * ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев > РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка
	|						ТОГДА РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка / РасчетСреднегоЗаработка.ЧислоМесяцев
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СреднийЗаработок,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&СоставляющиеСреднегоЗаработкаПособий)
	|				ТОГДА РасчетСреднегоЗаработка.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СреднийЗаработокПособий,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010))
	|				ТОГДА РасчетСреднегоЗаработка.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СреднийЗаработокПособий2010,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.СпособРасчета В (&ПоСреднемуЗаработкуФСС)
	|							ТОГДА ВЫБОР
	|									КОГДА РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|										ТОГДА 0
	|									ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|								КОНЕЦ
	|						ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноДней,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокПособий)
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.СпособРасчета В (&ПоСреднемуЗаработкуФСС)
	|							ТОГДА ВЫБОР
	|									КОГДА РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|										ТОГДА 0
	|									ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|								КОНЕЦ
	|						ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноДнейПособий,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010)
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.СпособРасчета В (&ПоСреднемуЗаработкуФСС)
	|							ТОГДА ВЫБОР
	|									КОГДА РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|										ТОГДА 0
	|									ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|								КОНЕЦ
	|						ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноДнейПособий2010,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|					ИЛИ РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|				ТОГДА ВЫБОР
	|						КОГДА РасчетСреднегоЗаработка.СпособРасчета В (&ПоСреднемуЗаработкуФСС)
	|							ТОГДА ВЫБОР
	|									КОГДА РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|										ТОГДА 0
	|									ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноЧасов
	|								КОНЕЦ
	|						ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноЧасов
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И РасчетСреднегоЗаработка.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет))
	|			ТОГДА ЕСТЬNULL(РасчетСреднегоЗаработка.Регистратор.Сотрудник, РасчетСреднегоЗаработка.Сотрудник)
	|		ИНАЧЕ РасчетСреднегоЗаработка.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	РасчетСреднегоЗаработка.СпособРасчета КАК СпособРасчета,
	|	РасчетСреднегоЗаработка.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
	|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода
	|ПОМЕСТИТЬ ВТДанныеОСреднемЗаработке
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|ГДЕ
	|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И РасчетСреднегоЗаработка.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет))
	|			ТОГДА ЕСТЬNULL(РасчетСреднегоЗаработка.Регистратор.Сотрудник, РасчетСреднегоЗаработка.Сотрудник)
	|		ИНАЧЕ РасчетСреднегоЗаработка.Сотрудник
	|	КОНЕЦ,
	|	РасчетСреднегоЗаработка.СпособРасчета,
	|	РасчетСреднегоЗаработка.ДатаНачалаСобытия,
	|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
	|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	СпособРасчета,
	|	ДатаНачалаСобытия,
	|	ДатаНачалаРасчетногоПериода,
	|	ДатаОкончанияРасчетногоПериода";
	
	
	// РазмерПособияПоУходуЗаРебенкомДо1_5Лет
	//	Поля:
	//		НомерСтроки - номер строки рассчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия по уходу за ребенком до 1.5 лет для каждой строки начислений
	//
	РазмерПособияПоУходуЗаРебенкомДо1_5ЛетТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ГосударственныеПособия.Размер КАК РазмерПособия,
	|	ДатыАктуальностиРазмераПособия.ВидПособия КАК ВидПособия
	|ПОМЕСТИТЬ ВТРазмерПособияПоУходуЗаРебенкомДо1_5Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности,
	|		ГосударственныеПособия.ВидПособия КАК ВидПособия
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|				И (ГосударственныеПособия.ВидПособия В (&ВидПособияПоУходуЗаРебенкомДо1_5Лет))
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|		И Основной.Авторасчет
	|		И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособиеПоУходуЗаРебенкомДо1_5Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		ГосударственныеПособия.ВидПособия) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|			И ДатыАктуальностиРазмераПособия.ВидПособия = ГосударственныеПособия.ВидПособия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки,
	|	ВидПособия";
	
	// РазмерПособияПоУходуЗаРебенкомДо3Лет
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		РазмерПособия - размер пособия
	//	Описание:
	//		получает размер пособия по уходу за ребенком до 3 лет для каждой строки начислений
	//
	РазмерПособияПоУходуЗаРебенкомДо3ЛетТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиРазмераПособия.НомерСтроки КАК ОсновнойНомерСтроки,
	|	ГосударственныеПособия.Размер КАК РазмерПособия
	|ПОМЕСТИТЬ ВТРазмерПособияПоУходуЗаРебенкомДо3Лет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(ГосударственныеПособия.Период) КАК ДатаАктуальности
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|			ПО (ГосударственныеПособия.ВидПособия = &ВидПособияПоУходуЗаРебенкомДо3Лет)
	|				И ГосударственныеПособия.Период <= Основной.ПериодДействияНачало
	|	ГДЕ
	|		Основной.Регистратор = &парамРегистратор
	|		И Основной.Авторасчет
	|		И Основной.ВидРасчета.СпособРасчета = &СпособРасчетаПособиеПоУходуЗаРебенкомДо3Лет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки) КАК ДатыАктуальностиРазмераПособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГосударственныеПособия КАК ГосударственныеПособия
	|		ПО (ГосударственныеПособия.ВидПособия = &ВидПособияПоУходуЗаРебенкомДо3Лет)
	|			И ГосударственныеПособия.Период = ДатыАктуальностиРазмераПособия.ДатаАктуальности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки";
	
	
	// СдельныйЗаработокКомпанииТекст
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		РазмерЗаработка - размер сдельного заработка
	//	Описание:
	//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок"
	//
	СдельныйЗаработокКомпанииТекст =
	"ВЫБРАТЬ
	|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
	|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
	|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
	|ПОМЕСТИТЬ ВТСдельныйЗаработокКомпании
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
	|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
	|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
	|	ИЗ
	|		РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
	|				Регистратор = &парамРегистратор
	|					И Авторасчет) КАК Начисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработка
	|			ПО Начисления.ФизЛицо = ФактическаяВыработка.Физлицо
	|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Начисления.НомерСтроки,
	|		ФактическаяВыработка.Выработка,
	|		ВЫБОР
	|			КОГДА ПроверкаКоличестваЗаписей.ФизЛицо ЕСТЬ НЕ NULL 
	|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		РегистрРасчета.УправленческиеНачисления КАК Начисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработка
	|			ПО Начисления.ФизЛицо = ФактическаяВыработка.Физлицо
	|				И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
	|				И (ФактическаяВыработка.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления КАК ПроверкаКоличестваЗаписей
	|			ПО Начисления.ФизЛицо = ПроверкаКоличестваЗаписей.ФизЛицо
	|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
	|				И (Начисления.ВидРасчета.ЗачетОтработанногоВремени)
	|				И (ПроверкаКоличестваЗаписей.ВидРасчета.ЗачетОтработанногоВремени)
	|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
	|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
	|	ГДЕ
	|		Начисления.Регистратор = &парамРегистратор
	|		И Начисления.Авторасчет) КАК НесгруппированныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	НесгруппированныеДанные.ОсновнойНомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки";


	// ВремяПоТабелю
	//	данные по отработанному времени и норме времени по методу "сплошной регистрации" в текущем периоде регистрации
	//	Поля 
	//		НомерСтроки
	//		ОтработаноДнейПоТабелю
	//		ОтработаноЧасовПоТабелю
	//		ОтработаноЧасовПоТабелюОтклонение
	//
	//	Описание                       
	//	Суммируем отработанное время и норму времени в заданном периоде действия для каждой строки начисления
	//	из регистра РабочееВремяРаботниковОрганизаций 
	
	ВремяПоТабелюТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА Основной.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	|				ТОГДА ОтработанноеВремя.Часов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасовПоТабелюОтклонение,
	|	СУММА(ВЫБОР
	|			КОГДА ОтработанноеВремя.Регистратор = &парамРегистратор
	|					И Основной.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
	|				ТОГДА ОтработанноеВремя.Часов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВнутрисменныеЧасыОтклонение
	|ПОМЕСТИТЬ ВТВремяПоТабелю
	|ИЗ
	|	ВТФактическийПериодДействия КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО Основной.Сотрудник = ОтработанноеВремя.Сотрудник
	|			И (ОтработанноеВремя.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";


	// ОтработаноПоВидуВремениДляПоказателейТекст
	//	Данные по отработанному времени введенное табелем по указанному в начислении виду учета времени
	ОтработаноПоВидуВремениДляПоказателейТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(РабочееВремяРаботников.Дней) КАК Дней,
	|	СУММА(РабочееВремяРаботников.Часов) КАК Часов
	|ПОМЕСТИТЬ ВТОтработаноПоВидуВремениДляПоказателей
	|ИЗ
	|	ВТФактическийПериодДействия КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботников
	|		ПО Основной.Сотрудник = РабочееВремяРаботников.Сотрудник
	|			И (РабочееВремяРаботников.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|			И (РабочееВремяРаботников.ВидИспользованияРабочегоВремени = Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени)
	|			И (РабочееВремяРаботников.Регистратор <> &парамРегистратор)
	|			И (РабочееВремяРаботников.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
	|			И ((НЕ РабочееВремяРаботников.ВЦеломЗаПериод))
	|ГДЕ
	|	Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	
	// ОтработаноНЕПоВидуВремениДляПоказателейТекст
	//	Данные по отработанному времени введенное табелем НЕ по указанному в начислении виду учета времени
	ОтработаноНЕПоВидуВремениДляПоказателейТекст = 
	"ВЫБРАТЬ
	|	ГруппировкаДней.НомерСтроки КАК НомерСтроки,
	|	СУММА(ГруппировкаДней.Дней) КАК Дней,
	|	СУММА(ГруппировкаДней.Часов) КАК Часов
	|ПОМЕСТИТЬ ВТОтработаноНЕПоВидуВремениДляПоказателей
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		РабочееВремяРаботников.Период КАК Период,
	|		ВЫБОР
	|			КОГДА ДругоеРабочееВремя.Сотрудник ЕСТЬ NULL 
	|				ТОГДА РабочееВремяРаботников.Дней
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Дней,
	|		СУММА(ВЫБОР
	|				КОГДА ДругоеРабочееВремя.Сотрудник ЕСТЬ НЕ NULL 
	|							И (НЕ РабочееВремяРаботников.ВидИспользованияРабочегоВремени.РабочееВремя)
	|						ИЛИ (НЕ ДругоеРабочееВремя.ВидИспользованияРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)))
	|							И ((НЕ РабочееВремяРаботников.ВидИспользованияРабочегоВремени.РабочееВремя)
	|								ИЛИ РабочееВремяРаботников.ВидИспользованияРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)))
	|					ТОГДА 0
	|				ИНАЧЕ РабочееВремяРаботников.Часов
	|			КОНЕЦ) КАК Часов
	|	ИЗ
	|		ВТФактическийПериодДействия КАК Основной
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботников
	|			ПО Основной.Сотрудник = РабочееВремяРаботников.Сотрудник
	|				И (РабочееВремяРаботников.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|				И ((НЕ РабочееВремяРаботников.ВидИспользованияРабочегоВремени = Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени))
	|				И (РабочееВремяРаботников.Регистратор <> &парамРегистратор)
	|				И (РабочееВремяРаботников.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
	|				И ((НЕ РабочееВремяРаботников.ВидИспользованияРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))))
	|				И ((НЕ РабочееВремяРаботников.ВЦеломЗаПериод))
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РабочееВремяРаботников.Сотрудник КАК Сотрудник,
	|				РабочееВремяРаботников.Период КАК Период,
	|				РабочееВремяРаботников.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени
	|			ИЗ
	|				РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботников
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФактическийПериодДействия КАК Основной
	|					ПО (РабочееВремяРаботников.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|						И РабочееВремяРаботников.ВидИспользованияРабочегоВремени = Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|						И ((НЕ РабочееВремяРаботников.ВЦеломЗаПериод))
	|						И (РабочееВремяРаботников.Регистратор <> &парамРегистратор)
	|						И (РабочееВремяРаботников.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
	|			ГДЕ
	|				РабочееВремяРаботников.Регистратор <> &парамРегистратор
	|				И РабочееВремяРаботников.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
	|				И (НЕ РабочееВремяРаботников.ВЦеломЗаПериод)) КАК ДругоеРабочееВремя
	|			ПО Основной.Сотрудник = ДругоеРабочееВремя.Сотрудник
	|				И (ДругоеРабочееВремя.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|				И (ДругоеРабочееВремя.ВидИспользованияРабочегоВремени = Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени)
	|				И (ДругоеРабочееВремя.Период = РабочееВремяРаботников.Период)
	|	ГДЕ
	|		Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки,
	|		РабочееВремяРаботников.Период,
	|		ВЫБОР
	|			КОГДА ДругоеРабочееВремя.Сотрудник ЕСТЬ NULL 
	|				ТОГДА РабочееВремяРаботников.Дней
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГруппировкаДней
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппировкаДней.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";


	ВремяВведенноеВЦеломЗаПериодТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА Основной.ВидУчетаВремени = &ПоДням
	|				ТОГДА ОтработанноеВремя.Дней
	|			ИНАЧЕ ОтработанноеВремя.Часов
	|		КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
	|	СУММА(ОтработанноеВремя.Дней) КАК ДнейПоТабелю,
	|	СУММА(ОтработанноеВремя.Часов) КАК ЧасовПоТабелю,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПроверкаКоличестваЗаписей.Сотрудник ЕСТЬ НЕ NULL 
	|					И ОтработанноеВремя.Дней ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОшибкаВводаОтработанногоВремени
	|ПОМЕСТИТЬ ВТВремяВведенноеВЦеломЗаПериод
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО Основной.Сотрудник = ОтработанноеВремя.Сотрудник
	|			И Основной.ПериодДействия = ОтработанноеВремя.Период
	|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|			И (ОтработанноеВремя.ВЦеломЗаПериод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
	|		ПО Основной.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
	|			И Основной.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
	|			И Основной.ПериодРегистрации >= ПроверкаКоличестваЗаписей.ПериодРегистрации
	|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|			И Основной.Организация = ПроверкаКоличестваЗаписей.Организация
	|			И (Основной.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	|			И (ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	|			И ((НЕ(Основной.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
	|					И Основной.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
	|			И ((НЕ(Основной.ВидРасчета = ПроверкаКоличестваЗаписей.ВидРасчета
	|					И Основной.ПериодДействияНачало = ПроверкаКоличестваЗаписей.ПериодДействияНачало
	|					И Основной.ПериодДействияКонец = ПроверкаКоличестваЗаписей.ПериодДействияКонец
	|					И (Основной.ПериодРегистрации <> ПроверкаКоличестваЗаписей.ПериодРегистрации
	|						ИЛИ Основной.Сторно <> ПроверкаКоличестваЗаписей.Сторно))))
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";

	ДанныеТабеляТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТВремяВведеноТабелем
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО Основной.Сотрудник = ОтработанноеВремя.Сотрудник
	|			И (Основной.ПериодДействия = НАЧАЛОПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ))
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";

	СводныеИндивидуальныеГрафикиТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = &ПоДням
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = &ПоЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.Часов
	|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаВремени,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = &ПоДням
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ СводныеИндивидуальныеГрафики.Часов
	|	КОНЕЦ КАК ОсновноеЗначение,
	|	СводныеИндивидуальныеГрафики.Дней КАК ДнейПоГрафику,
	|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовПоГрафику,
	|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
	|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.ВидВремени В (&парамСписокПочасовыхОтклонений)
	|			ТОГДА ЛОЖЬ
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафики
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО Основной.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И Основной.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	НормаВремениПоОбщемуГрафикуТекст = 
	"ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов,
	|	Основной.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщемуГрафику
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ВЫБОР
	|				КОГДА Основной.ГрафикРаботыНорма = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|					ТОГДА Основной.ГрафикРаботы
	|				ИНАЧЕ Основной.ГрафикРаботыНорма
	|			КОНЕЦ = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И Основной.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|	И (Основной.ГрафикРаботыНорма <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ИЛИ Основной.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)))
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	 	 	
	// СоответствиеТабеляИНачислений
	// Данное по ошибке, возникающей в случае ввода табеля с отклонениями, на которые не введены документы
	//	Поля 
	//		НомерСтроки
	//		ПредупреждениеОНесоответствииТабеляИНачисления
	//
	//	Описание                       
	//	Суммируем отработанное время в заданном периоде действия для каждой строки начисления
	//	из регистра РабочееВремяРаботниковОрганизаций 
	
	СоответствиеТабеляИНачислений = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|					И Основной.ОсновноеЗначениеФактическийПериодДействия = СУММА(РабочееВремяРаботниковОрганизаций.Дней)
	|				ИЛИ Основной.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
	|					И Основной.ОсновноеЗначениеФактическийПериодДействия = СУММА(РабочееВремяРаботниковОрганизаций.Часов)
	|				ИЛИ СУММА(РабочееВремяРаботниковОрганизаций.Часов) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		КОГДА  Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> 
	|			ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|				И НЕ СУММА(РабочееВремяРаботниковОрганизаций.Дней) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПредупреждениеОНесоответствииТабеляИНачисления
	|ПОМЕСТИТЬ ВТСоответствиеТабеляИНачислений
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(Регистратор = &парамРегистратор) КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|		ПО (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени
	|			И Основной.Сотрудник = РабочееВремяРаботниковОрганизаций.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ) = &парамПериодРегистрации)
	|			И ((НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод))
	|ГДЕ
	|	Основной.Авторасчет
	|	И Основной.Регистратор = &ПарамРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки,
	|	Основной.ВидУчетаВремени,
	|	Основной.ОсновноеЗначениеФактическийПериодДействия,
	|	Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени";	
	
	// Сумма отработанного времени по видам времени: 
	//	ОтработанноеВПределахНормы,
	//	ЧасовоеОтработанноеВПределахНормы,
	//	ОтработанноеСверхНормы, необходим для расчета показателей ОтработаноВремениВДнях, ОтработаноВремениВЧасах
	
	УпрВсегоОтработаноВремени = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УправленческиеНачисления.ФизЛицо КАК ФизЛицо,
	|	УправленческиеНачисления.ПериодДействия КАК ПериодДействия
	|ПОМЕСТИТЬ ВТ_ФизлицаПериодыДействия
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.Регистратор = &парамРегистратор
	|	И УправленческиеНачисления.Авторасчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК ВсегоОтработаноДней,
	|	СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК ВсегоОтработаноЧасов
	|ПОМЕСТИТЬ ВТУпрВсегоОтработаноВремени
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
	|			Регистратор = &парамРегистратор
	|				И Авторасчет) КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
	|				ВидРасчета.ЗачетОтработанногоВремени
	|					И (ФизЛицо, ПериодДействия) В
	|						(ВЫБРАТЬ
	|							УправленческиеНачисления.ФизЛицо,
	|							УправленческиеНачисления.ПериодДействия
	|						ИЗ
	|							ВТ_ФизлицаПериодыДействия КАК УправленческиеНачисления)) КАК Вспомогательный
	|		ПО Основной.ФизЛицо = Вспомогательный.ФизЛицо
	|			И Основной.ПериодДействия = Вспомогательный.ПериодДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|		ПО (Вспомогательный.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботы.Месяц = Вспомогательный.ПериодДействия)
	|			И (ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И (ГрафикиРаботы.Дата МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
	|			И (ГрафикиРаботы.Дата МЕЖДУ Вспомогательный.ПериодДействияНачало И Вспомогательный.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	

	УпрСводныеИндивидуальныеГрафикиТекст = 
	"ВЫБРАТЬ
	|	Основной.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = &ПоДням
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = &ПоЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.Часов
	|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаВремени,
	|	ВЫБОР
	|		КОГДА Основной.ВидУчетаВремени = &ПоДням
	|			ТОГДА СводныеИндивидуальныеГрафики.Дней
	|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
	|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
	|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
	|		ИНАЧЕ СводныеИндивидуальныеГрафики.Часов
	|	КОНЕЦ КАК ОсновноеЗначение,
	|	СводныеИндивидуальныеГрафики.Дней КАК ДнейПоГрафику,
	|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовПоГрафику,
	|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
	|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику,
	|	ВЫБОР
	|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
	|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
	|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
	|ПОМЕСТИТЬ ВТУпрСводныеИндивидуальныеГрафики
	|ИЗ
	|	РегистрРасчета.УправленческиеНачисления КАК Основной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО Основной.ФизЛицо = СводныеИндивидуальныеГрафики.Сотрудник.ФизЛицо
	|			И (СводныеИндивидуальныеГрафики.Месяц = Основной.ПериодДействия)
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.Авторасчет
	|ИНДЕКСИРОВАТЬ ПО 
	|	НомерСтроки";

	
	// Конец определения текстов вложенных запросов
	/////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос();
	НеобходимаБаза = НеобходимыеДанные.База;
	НеобходимГрафик = НеобходимыеДанные.НормаВремени ИЛИ НеобходимыеДанные.ОтработаноВремени ИЛИ НеобходимыеДанные.НормаВремениЗаМесяц;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	// параметры запросов
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	// категория начисления (удержания)
	Запрос.УстановитьПараметр("парамКатегорияНачисления", КатегорияРасчета);
	
	Условие = "ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления И Регистратор = &парамРегистратор И Авторасчет";
	ВнешнееУсловие = "Основной.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления И Основной.Регистратор = &парамРегистратор";
	
	Если Перерасчет тогда
		Если Физлица = Неопределено Тогда
			
			// таблица ВТФизлицаДляПерерасчета
			// Список сотрудников по которым необходимо выполнить перерасчет
			// Поля:
			//		Физлицо
			// Описание:
			// Получает список неповторяющихся сотрудников по которым есть записи
			// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Перерасчет.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТФизлицаДляПерерасчета
			|ИЗ
			|	(ВЫБРАТЬ
			|		Перерасчет.Физлицо КАК Физлицо
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Перерасчет.Физлицо
			|	ИЗ
			|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет
			|ИНДЕКСИРОВАТЬ ПО 
			|	Физлицо";
			Запрос.Выполнить();

			
			УсловиеНаФизлицоТекст = "Физлицо В (ВЫБРАТЬ Физлица.Физлицо ИЗ ВТФизлицаДляПерерасчета КАК Физлица)";
			Условие = Условие + " И " + УсловиеНаФизлицоТекст + " И Авторасчет";
			// в данном случае внешнее условие не дополняется - выполняется внутреннее 
			// соединение с таблицей СотрудникиДляПерерасчета
		Иначе
			УсловиеНаФизлицоТекст = "Физлицо В (&ФизлицаПерерасчета)";
			Условие = Условие + " И " + УсловиеНаФизлицоТекст + " И Авторасчет";
			ВнешнееУсловие = ВнешнееУсловие + " И Основной.Физлицо В (&ФизлицаПерерасчета)";
			Запрос.УстановитьПараметр("ФизлицаПерерасчета", Физлица);
		КонецЕсли;
	ИначеЕсли НеобходимыеДанные.ВычетыКДоходамНДФЛ Тогда
		
		УсловиеНаФизлицоТекст = 
		"Физлицо В (ВЫБРАТЬ Физлица.Физлицо ИЗ ВТФизлица КАК Физлица)";
		// поместим в запрос временную таблицу для проверки условия на физлиц
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Регистратор = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// для формирования ИТОГИ при комментировании расчета
	ПоляЗапроса = Новый Массив;
	
	ПроцентныеПоказатели = Новый Массив;
	ПроцентныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	ПроцентныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.Процентный);
	Запрос.УстановитьПараметр("ПроцентныеПоказатели", ПроцентныеПоказатели);
	
	ШкальныеПоказатели = Новый Массив;
	ШкальныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	ШкальныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая);
	Запрос.УстановитьПараметр("ШкальныеПоказатели", ШкальныеПоказатели);				
	
	Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
		
		Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
        	ИмяПВР = "ОсновныеНачисленияОрганизаций";
		ИначеЕсли ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
			ИмяПВР = "ДополнительныеНачисленияОрганизаций";						
		ИначеЕсли ИмяРегистра = "УправленческиеНачисления" Или ИмяРегистра = "УправленческиеУдержания" Тогда 			
			ИмяПВР = ИмяРегистра;			
		ИначеЕсли ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда
			ИмяПВР = "УдержанияОрганизаций";
		КонецЕсли;
		
		// Получим максимальное число показателей			
		КоличествоПоказателей = ПроведениеРасчетов.ПолучитьДанныеОПроизвольныхФормулахВЗапросе(Запрос,ИмяРегистра,ВнешнееУсловие,ИмяПВР);		
		
		Показатель1Текст = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра,,КомментироватьРасчет);
		Если КоличествоПоказателей > 6 Тогда
			// получим текст запроса для предопределенных показателей
			Показатель1ТекстПредопределенный = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра, Истина,КомментироватьРасчет);
		КонецЕсли;

    КонецЕсли;
    
    // установка параметров связанных с виртуальными таблицами регистов расчета
	Если ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
		// измерения сопоставления
		Измерения = Новый Массив(1);
		Измерения[0] = "Сотрудник";
		// для начислений сопоставляемые измерения основного и базового регистов совпадают
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		// список способов расчета, являющихся почасовыми отклонениями
		Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
		
	ИначеЕсли	ИмяРегистра = "УправленческиеНачисления" ИЛИ
				ИмяРегистра = "УправленческиеУдержания"
		Тогда
		// измерения сопоставления для управленческих регистров
		Измерения = Новый Массив(1);
		Измерения[0] = "Физлицо";
		// для начислений сопоставляемые измерения основного и базового регистов совпадают
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		
	Иначе
		// измерения сопоставления для удержаний
		Измерения = Новый Массив(2);
		Измерения[0] = "ФизЛицо";
		Измерения[1] = "Организация";
		// для удержаний сопоставляемые измерения основного и базового регистов разные
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		
	КонецЕсли;
	
	МассивСтажей = НеобходимыеДанные["ПроизвольныеСтажи"];
	
	Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор Как Регистратор,
		|Основной.НомерСтроки Как НомерСтроки,
		|Основной.ВидРасчета Как ВидРасчета,
		|Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|Основной.ВидРасчета.ПериодДействияБазовый Как ВидРасчетаПериодДействияБазовый,
		|Основной.ВидРасчета.БазовыйПериодПрошлыйМесяц Как БазовыйПериодПрошлыйМесяц,
		|Основной.Сотрудник Как Сотрудник,
		|Основной.Сотрудник.Наименование Как СотрудникНаименование,
		|Основной.Сотрудник.Физлицо Как Физлицо,
		|Основной.ПериодДействияНачало Как ПериодДействияНачало,
		|Основной.ПериодДействияКонец Как ПериодДействияКонец,
		|Основной.ВидРасчета.ЗачетОтработанногоВремени Как ЗачетОтработанногоВремени,
		|Основной.ВидРасчета.ЗачетНормыВремени Как ЗачетНормыВремени,
		|Основной.ВидРасчета.ВидПособияСоциальногоСтрахования Как ВидПособияСоциальногоСтрахования,
		|Ложь Как ЯвляетсяДСВ,
		|Основной.ВидУчетаВремени Как ВидУчетаВремени,
		|Основной.ВидРасчета.СпособРасчета Как СпособРасчета, 
		|Основной.ВариантАлгоритмаРасчета Как ВариантАлгоритмаРасчета, 
		|ВЫБОР КОГДА Основной.ВидРасчета.ВидВремени В(&парамСписокПочасовыхОтклонений) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВидРасчетаЯвляетсяПочасовымОтклонением,
		|ЕСТЬNULL(Основной.ВидРасчета.КодДоходаНДФЛ.УчитыватьПоПериодуДействия,Ложь) Как УчитыватьДоходПоПериодуДействия,
		|Основной.ВидРасчета.КодДоходаНДФЛ Как КодДоходаНДФЛ";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("ПериодДействияНачало");
			ПоляЗапроса.Добавить("ПериодДействияКонец");
			ПоляЗапроса.Добавить("ЗачетОтработанногоВремени");
			ПоляЗапроса.Добавить("ЗачетНормыВремени");
			ПоляЗапроса.Добавить("ВидУчетаВремени");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("ВариантАлгоритмаРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаЯвляетсяПочасовымОтклонением");
			ПоляЗапроса.Добавить("УчитыватьДоходПоПериодуДействия");
			ПоляЗапроса.Добавить("КодДоходаНДФЛ");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
			ПоляЗапроса.Добавить("ВидРасчетаПериодДействияБазовый");
			ПоляЗапроса.Добавить("БазовыйПериодПрошлыйМесяц");
			ПоляЗапроса.Добавить("ЯвляетсяДСВ");
		КонецЕсли;
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			ПроведениеРасчетов.ДобавитьПоказатели(НеобходимыеДанные, КоличествоПоказателей, ТекстЗапроса, КомментироватьРасчет, ПоляЗапроса, Показатель1Текст, Показатель1ТекстПредопределенный);
		Иначе 	
			ТекстЗапроса = ТекстЗапроса + ",
			|ВЫБОР
			|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РасчетИмеетБазовыеНачисления");
			КонецЕсли;
		КонецЕсли;
	
		Если НеобходимаБаза Тогда
			Если КомментироватьРасчет Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза Как РезультатБаза,
				|База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|База.ВидРасчетаРазрез.Наименование КАК ВидРасчетаРазрезНаименование";
				ПоляЗапроса.Добавить("РезультатБаза");
				ПоляЗапроса.Добавить("ВидРасчетаРазрез");
				ПоляЗапроса.Добавить("ВидРасчетаРазрезНаименование");
			Иначе 
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза КАК РезультатБаза";
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ) КАК ОшибкаВводаИндивидуальногоГрафикаРаботы,
			|	ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ) КАК ОшибкаВводаОтработанногоВремени,
			|	ЕСТЬNULL(СоответствиеТабеляИНачислений.ПредупреждениеОНесоответствииТабеляИНачисления, ЛОЖЬ) КАК ПредупреждениеНесоответствияТабеляИНачисления,
			|	Основной.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ГрафикРаботыНаименование");
				ПоляЗапроса.Добавить("ОшибкаВводаИндивидуальногоГрафикаРаботы");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработанногоВремени");
				ПоляЗапроса.Добавить("ПредупреждениеНесоответствияТабеляИНачисления");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.НормаВремениЗаМесяц Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(
			|		ВЫБОР  
			|			КОГДА НормаВремениПоОбщемуГрафику.НомерСтроки ЕСТЬ NULL	
			|				ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени,ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия) 
			|			КОГДА Основной.ВидУчетаВремени = &ПоДням
			|				ТОГДА НормаВремениПоОбщемуГрафику.НормаДней
			|	    	ИНАЧЕ НормаВремениПоОбщемуГрафику.НормаЧасов
			|		КОНЕЦ, 0) КАК НормаВремениЗаМесяц";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("НормаВремениЗаМесяц");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.НормаВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
			|						КОГДА Основной.ВидУчетаВремени = &ПоДням
			|							ТОГДА ДанныеГрафика.ДополнительноеЗначениеНормаФактическийПериодДействия
			|						ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеНормаФактическийПериодДействия
			|					КОНЕЦ, 0))
			|	КОНЕЦ КАК НормаОплачиваемыхЧасов,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, ЕСТЬNULL(ВЫБОР
			|						КОГДА Основной.ВидУчетаВремени = &ПоДням
			|							ТОГДА ДанныеГрафика.ОсновноеЗначениеНормаФактическийПериодДействия
			|						ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеНормаФактическийПериодДействия
			|					КОНЕЦ, 0))
			|	КОНЕЦ КАК НормаОплачиваемыхДней,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия,0) КАК ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия,0) КАК ПроизводственныйКалендарьПятидневкаФактическийПериодДействия";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("НормаОплачиваемыхЧасов");
				ПоляЗапроса.Добавить("НормаОплачиваемыхДней");
				ПоляЗапроса.Добавить("ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия");
				ПоляЗапроса.Добавить("ПроизводственныйКалендарьПятидневкаФактическийПериодДействия");
			КонецЕсли;
		КонецЕсли;
		 		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 19.09.2011 15:45
		РучнойВводОтработанногоВремени = ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") И Регистратор.AVT_ПоГрафику;
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА NULL
			|		КОГДА ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю ЕСТЬ НЕ NULL 
			|			ТОГДА 1 
			|		КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
			|			ТОГДА 4 
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		КОГДА СводныеИндивидуальныеГрафики.ОсновноеЗначение ЕСТЬ НЕ NULL 
			|			ТОГДА 2 
			|		ИНАЧЕ 3 
			|	КОНЕЦ КАК СпособВводаВремени,
			|	ВЫБОР " +
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 19.09.2011 15:39 
			// ОПИСАНИЕ: Если расчет для оплаты по среднему и в документе вручную указан график работы в командировке,
			//           то берем отработанное время из документа.
			?(РучнойВводОтработанногоВремени, "
			|		КОГДА Основной.ОтработаноДней > 0				
			|			ТОГДА 
			|			ВЫБОР
			|				КОГДА Основной.ВидУчетаВремени = &ПоДням
			|					ТОГДА Основной.ОтработаноДней
			|				ИНАЧЕ Основной.ОтработаноЧасов
			|			КОНЕЦ ", "") + 
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 07.11.2011 17:16 
			// ОПИСАНИЕ: для периодов работы по сдельным нарядам берем данные из регистра "Фактическая выработка работников". 
			?(НеобходимыеДанные.СдельныйЗаработок, "
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноДней > 0 
			|			И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
			|			И Основной.ВидУчетаВремени = &ПоДням
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноДней
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноЧасов > 0 
			|			И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
			|			И Основной.ВидУчетаВремени = &ПоЧасам
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноЧасов
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноЧасовВПраздники > 0 
			|			И Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных)
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноЧасовВПраздники
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноНочныхЧасов > 0 
			|			И Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы)
			|		ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноНочныхЧасов ", "") + "
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА NULL
			|		КОГДА НЕ ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю ЕСТЬ NULL 
			|			ТОГДА ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю 
			|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <>
			|			ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|			 И НЕ ОтработаноПоВидуВремениНачисления.Дней ЕСТЬ NULL
			|			ТОГДА 
			|				ВЫБОР КОГДА Основной.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
			|					ТОГДА 
			|					ВЫБОР КОГДА Основной.ВидУчетаВремени = &ПоДням
			|						ТОГДА ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Дней, 0)
			|						ИНАЧЕ ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Часов, 0)
			|			    	КОНЕЦ
			|				ИНАЧЕ
			|					ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0) - 
			|					ВЫБОР КОГДА Основной.ВидУчетаВремени = &ПоДням
			|						ТОГДА ЕСТЬNULL(ОтработаноНЕПоВидуВремениНачисления.Дней, 0)
			|						ИНАЧЕ ЕСТЬNULL(ОтработаноНЕПоВидуВремениНачисления.Часов, 0)
			|			    	КОНЕЦ
			|			    КОНЕЦ
			|		КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
			|			ТОГДА ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0)
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОсновноеЗначение, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0))
			|		КОНЕЦ КАК ОтработаноВремени,
			|	ВЫБОР " +
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 19.09.2011 15:39 
			?(РучнойВводОтработанногоВремени, "
			|		КОГДА Основной.ОтработаноДней > 0				
			|			ТОГДА Основной.ОтработаноДней ", "") +
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 07.11.2011 17:16 
			?(НеобходимыеДанные.СдельныйЗаработок, "
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноДней > 0 
			|			И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноДней
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноДнейВПраздники > 0 
			|			И Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных)
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноДнейВПраздники
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноДнейНочью > 0
			|			И Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы)
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноДнейНочью ", "") + "
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
			|		КОГДА Основной.ВидРасчета.ВидВремени В (Значение(Перечисление.ВидыВремени.ЧасовоеНеотработанное), Значение(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
			|			ТОГДА 0
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА 0
			|		КОГДА НЕ ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю ЕСТЬ NULL
			|			ТОГДА ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю 
			|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя
			|			 И НЕ ОтработаноПоВидуВремениНачисления.Дней ЕСТЬ NULL
			|			ТОГДА ВЫБОР КОГДА Основной.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
			|					ТОГДА ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Дней, 0)
			|				ИНАЧЕ ЕСТЬNULL(ВЫБОР
			|						КОГДА Основной.ВидУчетаВремени = &ПоДням
			|							ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|						ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|						КОНЕЦ, 0) - ЕСТЬNULL(ОтработаноНЕПоВидуВремениНачисления.Дней, 0)
			|				КОНЕЦ
			|		КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
			|			ТОГДА ЕСТЬNULL(ВЫБОР
			|					КОГДА Основной.ВидУчетаВремени = &ПоДням
			|						ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|					ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|					КОНЕЦ, 0)
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДнейПоГрафику, ЕСТЬNULL(ВЫБОР
			|				КОГДА Основной.ВидУчетаВремени = &ПоДням
			|					ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|				ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|				КОНЕЦ, 0))
			|	КОНЕЦ КАК ОтработаноДней,
			|	ВЫБОР " +
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 19.09.2011 15:39 
			?(РучнойВводОтработанногоВремени, "
			|		КОГДА Основной.ОтработаноДней > 0				
			|			ТОГДА Основной.ОтработаноЧасов ", "") +
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 07.11.2011 17:16 
			?(НеобходимыеДанные.СдельныйЗаработок, "
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноЧасов > 0
			|			И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноЧасов
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноЧасовВПраздники > 0 
			|			И Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных)
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноЧасовВПраздники
			|		КОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноНочныхЧасов > 0 
			|			И Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы)
			|			ТОГДА ДанныеОСдельномЗаработке.AVT_ОтработаноНочныхЧасов ", "") + "
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
			|		КОГДА Основной.ВидРасчета.ВидВремени В (Значение(Перечисление.ВидыВремени.ЧасовоеНеотработанное), Значение(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
			|			ТОГДА ЕСТЬNULL(ВремяПоТабелю.ВнутрисменныеЧасыОтклонение, 0)
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА 0
			|		КОГДА НЕ ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю ЕСТЬ NULL
			|			ТОГДА ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю 
			|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя
			|			 И ОтработаноПоВидуВремениНачисления.Часов ЕСТЬ НЕ NULL
			|			ТОГДА ВЫБОР КОГДА Основной.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
			|					ТОГДА ОтработаноПоВидуВремениНачисления.Часов
			|					ИНАЧЕ ЕСТЬNULL(ВЫБОР
			|							КОГДА Основной.ВидУчетаВремени = &ПоДням
			|								ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|							ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|							КОНЕЦ, 0) - ЕСТЬNULL(ОтработаноНЕПоВидуВремениНачисления.Часов, 0)
			|					КОНЕЦ
			|		КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
			|			ТОГДА ЕСТЬNULL(ВЫБОР
			|					КОГДА Основной.ВидУчетаВремени = &ПоДням
			|						ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|						ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|					КОНЕЦ, 0) - ВЫБОР
			|								КОГДА ВремяВведеноТабелем.НомерСтроки ЕСТЬ НЕ NULL
			|									ТОГДА 0
			|									ИНАЧЕ ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0)
			|								КОНЕЦ
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
			|				КОГДА Основной.ВидУчетаВремени = &ПоДням
			|					ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|					ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|				КОНЕЦ, 0)) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0)
			|	КОНЕЦ КАК ОтработаноЧасов,
			|	ВЫБОР
			|		КОГДА ВремяВведеноТабелем.НомерСтроки ЕСТЬ НЕ NULL
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ВремяВведеноТабелем,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаЧасыФактическийПериодДействия,0) КАК ОтработаноЧасовПроизводственныйГрафик,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия, 0) КАК ОтработаноВремениПроизводственныйГрафик,
			|	ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0) КАК ОтработаноЧасовПоТабелюОтклонение";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноВремени");
				ПоляЗапроса.Добавить("ОтработаноДней");
				ПоляЗапроса.Добавить("ОтработаноЧасов");
				ПоляЗапроса.Добавить("ОтработаноВремениПроизводственныйГрафик");
				ПоляЗапроса.Добавить("ОтработаноЧасовПроизводственныйГрафик");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоТабелюОтклонение");
				ПоляЗапроса.Добавить("ВремяВведеноТабелем");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДней,0) Как ОтработаноДнейПоСреднему, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноЧасов,0) Как ОтработаноЧасовПоСреднему, 
			|ДанныеДляРасчетаСреднего.СреднийЗаработок Как СреднийЗаработок";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноДнейПоСреднему");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоСреднему");
				ПоляЗапроса.Добавить("СреднийЗаработок");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерОграниченияПособия Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("РазмерОграниченияПособия", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработокПособий Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("СреднийЗаработокПособий", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса);
		КонецЕсли;
			
		Если НеобходимыеДанные.СреднийЗаработокОтпуска Тогда
			// выбираем число дней по шестидневке или календарных рабочих дней 
			// из производственного календаря и ЧислоДнейВНеделе
			ТекстЗапроса = ТекстЗапроса + ", 
			|ВЫБОР КОГДА Основной.ВариантАлгоритмаРасчета = ЗНАЧЕНИЕ(Перечисление.ВариантыАлгоритмовРасчета.ОтпускСОплатойПраздничныхДней) ТОГДА ВремяВКалендарныхДнях.КалендарныхДней КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) ТОГДА ДанныеГрафика.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия ИНАЧЕ ДанныеГрафика.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия КОНЕЦ КАК ОплачиваемыеДниОтпуска,
			|ВЫБОР КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) ТОГДА 6 ИНАЧЕ 7 КОНЕЦ КАК ЧислоДнейВНеделе,
			|Основной.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОплачиваемыеДниОтпуска");
				ПоляЗапроса.Добавить("ЧислоДнейВНеделе");
				ПоляЗапроса.Добавить("ДлительностьРабочейНедели");
			КонецЕсли;

		КонецЕсли;
			
		Если НеобходимыеДанные.ВремяВКалендарныхДнях Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("ВремяВКалендарныхДнях", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияПоУходуЗаРебенкомДо1_5Лет Тогда
			// выбираем размер пособия по уходу за ребенком до 1.5 лет
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияПоУходуЗаРебенкомДоПолутораЛет.РазмерПособия КАК ПоУходуЗаРебенкомДоПолутораЛет,
			|МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет.РазмерПособия КАК МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет,
			|МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет.РазмерПособия КАК МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет,
			|МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет.РазмерПособия КАК МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ПоУходуЗаРебенкомДоПолутораЛет");
				ПоляЗапроса.Добавить("МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет");
				ПоляЗапроса.Добавить("МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет");
				ПоляЗапроса.Добавить("МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияПоУходуЗаРебенкомДо3Лет Тогда
			// выбираем размер пособия по уходу за ребенком до 3 лет
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеОРазмереПособияПоУходуЗаРебенкомДо3Лет.РазмерПособия КАК РазмерПособияПоУходуЗаРебенкомДо3Лет";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РазмерПособияПоУходуЗаРебенкомДо3Лет");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.РайонныйКоэффициентРФОрганизации Тогда
			// размер районного коэфиициента, установленного для организации
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА Основной.ПодразделениеОрганизации.КодПоОКТМО <> """" или Основной.ПодразделениеОрганизации.КодПоОКАТО <> """"
			|			ТОГДА ВЫБОР
			|					КОГДА Основной.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
			|						ТОГДА Основной.ПодразделениеОрганизации.РайонныйКоэффициентРФ
			|					ИНАЧЕ 1
			|				КОНЕЦ
			|		КОГДА Основной.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
			|			ТОГДА Основной.ОбособленноеПодразделение.РайонныйКоэффициентРФ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК РайонныйКоэффициентРФОрганизации";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("РайонныйКоэффициентРФОрганизации");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("СдельныйЗаработок", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ВзаиморасчетыСРаботниками.СуммаУпрКонечныйОстаток Как КВыплатеПоУпрУчету,
			|ВзаиморасчетыСРаботникамиОрганизаций.УжеНачисленоДоДоначисления Как УжеНачисленоДоДоначисления,
			|ЕСТЬNULL(СуммарныйПроцент.Процент, 0) Как СуммарныйПроцент,
			|ВЫБОР КОГДА НеРезиденты.ФизЛицо ЕСТЬ NULL ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ Как Резидент";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("КВыплатеПоУпрУчету");
				ПоляЗапроса.Добавить("УжеНачисленоДоДоначисления");
				ПоляЗапроса.Добавить("СуммарныйПроцент");
				ПоляЗапроса.Добавить("Резидент");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ДоходыОблагаемыеЕСН Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("ДоходыОблагаемыеСтраховымиВзносамиЕСН", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций Как Основной";
		
		Если НеобходимыеДанные.ВремяВКалендарныхДнях Или НеобходимыеДанные.ОтработаноВремени Или НеобходимыеДанные.СдельныйЗаработок Тогда // все случаи использования таблицы ФПД
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ФактическийПериодДействия", КомментироватьРасчет, Запрос, ТекстЗапроса)			
		КонецЕсли;

		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда

			ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.Сотрудник.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;	
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ВсегоОтработаноВремени Тогда
			
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ВсегоОтработаноВремени", КомментироватьРасчет, Запрос, ТекстЗапроса)			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеОСтаже			
			|ПО ДанныеОСтаже.Сотрудник = Основной.Сотрудник
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		// если перерасчет - нужно сузить выборку 
		Если Перерасчет И Физлица = Неопределено Тогда
			// перерасчет по всем физлицам перерасчета
			ТекстЗапроса = ТекстЗапроса + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|ПО ФизлицаДляПерерасчета.Физлицо = Основной.Физлицо";
					
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			
			Разрезы = Новый Массив;
            Разрезы.Добавить("ПериодРегистрации");
            Если КомментироватьРасчет Тогда
                Запрос.Текст = 
                "ВЫБРАТЬ
                |	СУММА(База.РезультатБаза) КАК РезультатБаза,
                |	База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
                |	База.Регистратор КАК Регистратор,
                |	База.НомерСтроки КАК НомерСтроки
                |ПОМЕСТИТЬ ВТБаза
                |ИЗ
                |	(ВЫБРАТЬ
                |		База1.РезультатБаза КАК РезультатБаза,
                |		База1.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
                |		База1.Регистратор КАК Регистратор,
                |		База1.НомерСтроки КАК НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База1
                |	ГДЕ
                |		((НЕ База1.Сторно)
                |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
                |		База2.РезультатБаза,
                |		База2.ВидРасчетаРазрез,
                |		База2.Регистратор,
                |		База2.НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База2
                |	ГДЕ
                |		((НЕ База2.Сторно)
                |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
                |СГРУППИРОВАТЬ ПО
                |	База.ВидРасчетаРазрез,
                |	База.Регистратор,
                |	База.НомерСтроки";
                
				Разрезы.Добавить("ВидРасчета");
				
			Иначе
                Запрос.Текст = 
                "ВЫБРАТЬ
                |	СУММА(База.РезультатБаза) КАК РезультатБаза,
                |	База.Регистратор КАК Регистратор,
                |	База.НомерСтроки КАК НомерСтроки
                |ПОМЕСТИТЬ ВТБаза
                |ИЗ
                |	(ВЫБРАТЬ
                |		База1.РезультатБаза КАК РезультатБаза,
                |		База1.Регистратор КАК Регистратор,
                |		База1.НомерСтроки КАК НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База1
                |	ГДЕ
                |		((НЕ База1.Сторно)
                |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
                |		База2.РезультатБаза,
                |		База2.Регистратор,
                |		База2.НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База2
                |	ГДЕ
                |		((НЕ База2.Сторно)
                |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
                |СГРУППИРОВАТЬ ПО
                |	База.Регистратор,
                |	База.НомерСтроки";
				
            КонецЕсли;
            Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
            Запрос.Выполнить();
            
            ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТБаза КАК База
            |ПО Основной.Регистратор = База.Регистратор И Основной.НомерСтроки = База.НомерСтроки";
            
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			
			Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
			Запрос.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			Запрос.УстановитьПараметр("ПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
			Запрос.УстановитьПараметр("ПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
			Запрос.УстановитьПараметр("ПустойВидИспользованияРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
			Запрос.УстановитьПараметр("КлассификаторЯ", Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
			Запрос.УстановитьПараметр("КлассификаторВЧ", Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы);
			Запрос.УстановитьПараметр("КлассификаторНЧ", Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы);
			Запрос.УстановитьПараметр("ОтработанноеВПределахНормы", Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеНеотработанное", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеОтработанноеВПределахНормы", Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
			
			Запрос.Текст = СводныеИндивидуальныеГрафикиТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = ВремяВведенноеВЦеломЗаПериодТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = СоответствиеТабеляИНачислений;
			Запрос.Выполнить();
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(" + Условие +  ") Как ДанныеГрафика
			|ПО Основной.Регистратор = ДанныеГрафика.Регистратор И Основной.НомерСтроки = ДанныеГрафика.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|ПО Основной.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяВведенноеВЦеломЗаПериод КАК ВремяВведенноеВЦеломЗаПериод
			|ПО Основной.НомерСтроки = ВремяВведенноеВЦеломЗаПериод.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТабеляИНачислений КАК СоответствиеТабеляИНачислений
			|ПО Основной.НомерСтроки = СоответствиеТабеляИНачислений.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.НормаВремениЗаМесяц Тогда
			
			Запрос.Текст = НормаВремениПоОбщемуГрафикуТекст;
			Запрос.Выполнить();
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщемуГрафику КАК НормаВремениПоОбщемуГрафику
			|ПО Основной.НомерСтроки = НормаВремениПоОбщемуГрафику.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			
			Запрос.Текст = ВремяПоТабелюТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = ОтработаноПоВидуВремениДляПоказателейТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = ОтработаноНЕПоВидуВремениДляПоказателейТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = ДанныеТабеляТекст;
			Запрос.Выполнить();
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоТабелю КАК ВремяПоТабелю
			|ПО Основной.НомерСтроки = ВремяПоТабелю.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноПоВидуВремениДляПоказателей КАК ОтработаноПоВидуВремениНачисления
			|ПО Основной.НомерСтроки = ОтработаноПоВидуВремениНачисления.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноНЕПоВидуВремениДляПоказателей КАК ОтработаноНЕПоВидуВремениНачисления
			|ПО Основной.НомерСтроки = ОтработаноНЕПоВидуВремениНачисления.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяВведеноТабелем КАК ВремяВведеноТабелем
			|ПО Основной.НомерСтроки = ВремяВведеноТабелем.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Или НеобходимыеДанные.СреднийЗаработокПособий Тогда
			
			ОсновнойЗаработок = Новый Массив(3);
			ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
			ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
			ОсновнойЗаработок[2] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
			ПоФиксПремиям = Новый Массив(2);
			ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
			ПоФиксПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
			ПоПремиям = Новый Массив(4);
			ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
			ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
			ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
			ПоПремиям[3] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;
			ПоФиксПремиямНеИндексируемые = Новый Массив(4);
			ПоФиксПремиямНеИндексируемые[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
			ПоФиксПремиямНеИндексируемые[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
			ПоФиксПремиямНеИндексируемые[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
			ПоФиксПремиямНеИндексируемые[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;
			
			Запрос.УстановитьПараметр("ОсновнойЗаработок", ОсновнойЗаработок); // Основной заработок индексируемый
			Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
			Запрос.УстановитьПараметр("ПоПремиям", ПоПремиям);  // Премии полностью учитываемые, индексируемые
			Запрос.УстановитьПараметр("ПоФиксПремиям", ПоФиксПремиям); // Премии учитываемые частично, индексируемые
			Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые", ПоФиксПремиямНеИндексируемые); // Премии учитываемые частично, не индексируемые
			
			// для реализации Федеральных законов:
			//	от 22.12.2005 г. № 180-ФЗ и от 29 декабря 2006 г. № 255-ФЗ - по больничным листам
			//	от 5 декабря 2006 г. № 207-ФЗ - по отпуску по уходу за детьми
			// при расчете пособий заработок учитывается по всем местам работы
			
			Запрос.УстановитьПараметр("ОсновнойЗаработокПособий", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			
			СоставляющиеСреднегоЗаработкаПособий = Новый Массив(5);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий);

			СоставляющиеПрочихСреднихЗаработков = Новый Массив(18);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);

			Запрос.УстановитьПараметр("СоставляющиеСреднегоЗаработкаПособий", СоставляющиеСреднегоЗаработкаПособий);
			Запрос.УстановитьПараметр("СоставляющиеПрочихСреднихЗаработков", СоставляющиеПрочихСреднихЗаработков);

			ПоСреднемуЗаработкуФСС = Новый Массив(2);
			ПоСреднемуЗаработкуФСС[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
			ПоСреднемуЗаработкуФСС[1] = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет;
			Запрос.УстановитьПараметр("ПоСреднемуЗаработкуФСС", ПоСреднемуЗаработкуФСС);
			
			Запрос.Текст = ДанныеОСреднемЗаработкеТекст;
			Запрос.Выполнить();
			
			// присоединяем данные для расчета среднего заработка
			ТекстЗапроса = ТекстЗапроса + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСреднемЗаработке КАК ДанныеДляРасчетаСреднего
			|		ПО Основной.Сотрудник = ДанныеДляРасчетаСреднего.Сотрудник
			|			И Основной.ДатаНачалаСобытия = ДанныеДляРасчетаСреднего.ДатаНачалаСобытия
			|			И Основной.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеДляРасчетаСреднего.ДатаНачалаРасчетногоПериода
			|			И Основной.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеДляРасчетаСреднего.ДатаОкончанияРасчетногоПериода
			|			И (ВЫБОР
			|				КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС)
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
			|				ИНАЧЕ Основной.ВидРасчета.СпособРасчета
			|			КОНЕЦ = ДанныеДляРасчетаСреднего.СпособРасчета)";

		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерОграниченияПособия Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("РазмерОграниченияПособия", КомментироватьРасчет, Запрос, ТекстЗапроса)			
		КонецЕсли;				
		
		Если НеобходимыеДанные.СреднийЗаработокПособий Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("СреднийЗаработокПособий2011", КомментироватьРасчет, Запрос, ТекстЗапроса);			
		КонецЕсли;				
		                                           
		Если НеобходимыеДанные.ВремяВКалендарныхДнях Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ВремяВКалендарныхДнях", КомментироватьРасчет, Запрос, ТекстЗапроса)			
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерПособияПоУходуЗаРебенкомДо1_5Лет Тогда
			
			Запрос.УстановитьПараметр("СпособРасчетаПособиеПоУходуЗаРебенкомДо1_5Лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
			Запрос.УстановитьПараметр("РазмерПособияПоУходуЗаРебенкомДоПолутораЛет", Перечисления.РазмерыГосударственныхПособий.ПоУходуЗаРебенкомДоПолутораЛет);
			Запрос.УстановитьПараметр("МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет", Перечисления.РазмерыГосударственныхПособий.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет);
			Запрос.УстановитьПараметр("МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет", Перечисления.РазмерыГосударственныхПособий.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет);
			Запрос.УстановитьПараметр("МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет", Перечисления.РазмерыГосударственныхПособий.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет);
			ВидПособияПоУходуЗаРебенкомДо1_5Лет = Новый Массив;
			ВидПособияПоУходуЗаРебенкомДо1_5Лет.Добавить(Перечисления.РазмерыГосударственныхПособий.ПоУходуЗаРебенкомДоПолутораЛет);
			ВидПособияПоУходуЗаРебенкомДо1_5Лет.Добавить(Перечисления.РазмерыГосударственныхПособий.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет);
			ВидПособияПоУходуЗаРебенкомДо1_5Лет.Добавить(Перечисления.РазмерыГосударственныхПособий.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет);
			ВидПособияПоУходуЗаРебенкомДо1_5Лет.Добавить(Перечисления.РазмерыГосударственныхПособий.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет);
			Запрос.УстановитьПараметр("ВидПособияПоУходуЗаРебенкомДо1_5Лет", ВидПособияПоУходуЗаРебенкомДо1_5Лет);
			
			Запрос.Текст = РазмерПособияПоУходуЗаРебенкомДо1_5ЛетТекст;
			Запрос.Выполнить();
			РазмерПособияПоУходуЗаРебенкомДо1_5ЛетТекст = "ВТРазмерПособияПоУходуЗаРебенкомДо1_5Лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияПоУходуЗаРебенкомДо1_5Лет КАК ДанныеОРазмереПособияПоУходуЗаРебенкомДоПолутораЛет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияПоУходуЗаРебенкомДоПолутораЛет.ОсновнойНомерСтроки И ДанныеОРазмереПособияПоУходуЗаРебенкомДоПолутораЛет.ВидПособия = &РазмерПособияПоУходуЗаРебенкомДоПолутораЛет
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияПоУходуЗаРебенкомДо1_5Лет КАК МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет
			|ПО Основной.НомерСтроки = МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет.ОсновнойНомерСтроки И МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет.ВидПособия = &МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияПоУходуЗаРебенкомДо1_5Лет КАК МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет
			|ПО Основной.НомерСтроки = МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет.ОсновнойНомерСтроки И МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет.ВидПособия = &МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПособияПоУходуЗаРебенкомДо1_5Лет КАК МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет
			|ПО Основной.НомерСтроки = МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет.ОсновнойНомерСтроки И МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет.ВидПособия = &МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет";
			
		КонецЕсли;

		Если НеобходимыеДанные.РазмерПособияПоУходуЗаРебенкомДо3Лет Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПособиеПоУходуЗаРебенкомДо3Лет", Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет);
			Запрос.УстановитьПараметр("ВидПособияПоУходуЗаРебенкомДо3Лет", Перечисления.РазмерыГосударственныхПособий.ПоУходуЗаРебенкомДо3хЛет);
			
			Запрос.Текст = РазмерПособияПоУходуЗаРебенкомДо3ЛетТекст;
			Запрос.Выполнить();
			РазмерПособияПоУходуЗаРебенкомДо3ЛетТекст = "ВТРазмерПособияПоУходуЗаРебенкомДо3Лет";
			
			// присоединяем данные о размере пособия
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерПособияПоУходуЗаРебенкомДо3ЛетТекст+" КАК ДанныеОРазмереПособияПоУходуЗаРебенкомДо3Лет
			|ПО Основной.НомерСтроки = ДанныеОРазмереПособияПоУходуЗаРебенкомДо3Лет.ОсновнойНомерСтроки";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("СдельныйЗаработок", КомментироватьРасчет, Запрос, ТекстЗапроса)			
		КонецЕсли;
		
		Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
			
			// получим период за который необходимы данные к выплате по управленческому учету
			ЗапросПериода = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(Начисления.ПериодДействия) КАК МаксПД,
			|	МИНИМУМ(Начисления.ПериодДействия) КАК МинПД
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
			|ГДЕ
			|	Начисления.Регистратор = &парамРегистратор
			|	И Начисления.ВидРасчета.СпособРасчета = &Доначисление
			|	И Начисления.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления");
			ЗапросПериода.УстановитьПараметр("Доначисление", Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
			ЗапросПериода.УстановитьПараметр("парамРегистратор", Регистратор);
			ЗапросПериода.УстановитьПараметр("парамКатегорияНачисления", КатегорияРасчета);
			Выборка = ЗапросПериода.Выполнить().Выбрать();
			Выборка.Следующий();
			// остатки получаем на начало месяца, следующего за периодом действия начисления
			ПериодОстатковНачало = ДобавитьМесяц(Выборка.МинПД, 1);
			ПериодОстатковКонец = ДобавитьМесяц(Выборка.МаксПД, 1);
			
			// суммарный процент всех процентных начислений, в базу которых включены виды расчета 
			// со способом расчета ДоначислениеПоУправленческомуУчету
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.Сотрудник,
			|	Начисления.ФизЛицо,
			|	Начисления.ПериодДействия
			|ПОМЕСТИТЬ ВТСотрудникиСДоначислением
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
			|ГДЕ
			|	Начисления.Регистратор = &парамРегистратор
			|	И Начисления.ВидРасчета.СпособРасчета = &Доначисление
			|	И Начисления.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.ПериодДействия КАК ПериодДействия,
			|	Начисления.Размер + Дополнительные.Размер КАК Процент
			|ПОМЕСТИТЬ ВТСуммарныйПроцент
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.Сотрудник КАК Сотрудник,
			|		НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
			|		СУММА(Начисления.Показатель1) КАК Размер
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСДоначислением КАК СотрудникиСДоначислением
			|			ПО Начисления.Сотрудник = СотрудникиСДоначислением.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) = СотрудникиСДоначислением.ПериодДействия)
			|	ГДЕ
			|		Начисления.Ссылка = &парамРегистратор
			|		И Начисления.ВидРасчета.СпособРасчета В(&Процентом)
			|		И Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					Базовые.Ссылка
			|				ИЗ
			|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
			|				ГДЕ
			|					Базовые.ВидРасчета.СпособРасчета = &Доначисление)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Начисления.Сотрудник,
			|		НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)) КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Начисления.Сотрудник КАК Сотрудник,
			|			СУММА(Начисления.Показатель1) КАК Размер
			|		ИЗ
			|			Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Начисления
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСДоначислением КАК СотрудникиСДоначислением
			|				ПО Начисления.Сотрудник = СотрудникиСДоначислением.Сотрудник
			|		ГДЕ
			|			Начисления.Ссылка = &парамРегистратор
			|			И Начисления.ВидРасчета.СпособРасчета В(&Процентом)
			|			И Начисления.ВидРасчета В
			|					(ВЫБРАТЬ
			|						Базовые.Ссылка
			|					ИЗ
			|						ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
			|					ГДЕ
			|						Базовые.ВидРасчета.СпособРасчета = &Доначисление)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Начисления.Сотрудник) КАК Дополнительные
			|		ПО Начисления.Сотрудник = Дополнительные.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОрганизаций.Период, МЕСЯЦ) КАК Период,
			|	СУММА(ВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов) КАК УжеНачисленоДоДоначисления
			|ПОМЕСТИТЬ ВТВзаиморасчетыСРаботникамиОрганизаций
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСДоначислением КАК СотрудникиСДоначислением
			|		ПО (СотрудникиСДоначислением.ФизЛицо = ВзаиморасчетыСРаботникамиОрганизаций.Физлицо)
			|			И (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОрганизаций.Период, МЕСЯЦ) = СотрудникиСДоначислением.ПериодДействия)
			|ГДЕ
			|	ВзаиморасчетыСРаботникамиОрганизаций.Организация = &парамОрганизация
			|	И ВзаиморасчетыСРаботникамиОрганизаций.Регистратор <> &парамРегистратор
			|	И ВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОрганизаций.Период, МЕСЯЦ)";
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботниками.ОстаткиИОбороты(&ПериодОстатковНачало, &ПериодОстатковКонец, МЕСЯЦ, , Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ Физлицо ИЗ ВТСотрудникиСДоначислением)) КАК ВзаиморасчетыСРаботниками
			|ПО Основной.Физлицо = ВзаиморасчетыСРаботниками.Физлицо
			|И ДОБАВИТЬКДАТЕ(Основной.ПериодДействия, МЕСЯЦ, 1) = ВзаиморасчетыСРаботниками.Период
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|ПО Основной.Физлицо = ВзаиморасчетыСРаботникамиОрганизаций.Физлицо 
			|И Основной.ПериодДействия = ВзаиморасчетыСРаботникамиОрганизаций.Период
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммарныйПроцент КАК СуммарныйПроцент
			|ПО Основной.Сотрудник = СуммарныйПроцент.Сотрудник
			|И Основной.ПериодДействия = СуммарныйПроцент.ПериодДействия
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|(ВЫБРАТЬ
			|	СтатусФизЛица.ФизЛицо КАК ФизЛицо
			|	ИЗ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(&парамКонецГода, Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ Физлицо ИЗ ВТСотрудникиСДоначислением)) КАК СтатусФизЛица
			|	ГДЕ (СтатусФизЛица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент))) КАК НеРезиденты
			|ПО Основной.Физлицо = НеРезиденты.ФизЛицо";
			
			Запрос.УстановитьПараметр("ПериодОстатковНачало", ПериодОстатковНачало);
			Запрос.УстановитьПараметр("ПериодОстатковКонец", ПериодОстатковКонец);
			Запрос.УстановитьПараметр("парамКонецГода", КонецГода(ПериодРегистрации));
			Запрос.УстановитьПараметр("КонецПериодаРегистрации", ДобавитьМесяц(ПериодРегистрации, 1));
			Запрос.УстановитьПараметр("Доначисление", Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
			Запрос.УстановитьПараметр("Процентом", ПроведениеРасчетов.ПолучитьСписокНачисленийПроцентом());
			Запрос.ВыполнитьПакет();
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ДоходыОблагаемыеЕСН Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ДоходыОблагаемыеСтраховымиВзносамиЕСН", КомментироватьРасчет, Запрос, ТекстЗапроса, , ИмяРегистра)			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;
		
	ИначеЕсли ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор Как Регистратор,
		|Основной.НомерСтроки Как НомерСтроки,
		|Основной.Сотрудник.Наименование Как СотрудникНаименование,
		|Основной.Сотрудник Как Сотрудник,
		|Основной.Сотрудник.Физлицо Как Физлицо,
		|Основной.ВидРасчета Как ВидРасчета,
		|Истина Как ВидРасчетаПериодДействияБазовый,
		|Ложь Как БазовыйПериодПрошлыйМесяц,
		|Ложь Как ЯвляетсяДСВ,
		|Ложь Как ВидРасчетаЯвляетсяПочасовымОтклонением,
		|Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|Основной.ВидРасчета.ВидПособияСоциальногоСтрахования Как ВидПособияСоциальногоСтрахования,
		|Основной.ВидРасчета.СпособРасчета Как СпособРасчета,
		|Ложь Как УчитыватьДоходПоПериодуДействия,
		|Основной.ВидРасчета.КодДоходаНДФЛ Как КодДоходаНДФЛ";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("УчитыватьДоходПоПериодуДействия");
			ПоляЗапроса.Добавить("КодДоходаНДФЛ");
			ПоляЗапроса.Добавить("ВидРасчетаПериодДействияБазовый");
			ПоляЗапроса.Добавить("БазовыйПериодПрошлыйМесяц");
			ПоляЗапроса.Добавить("ЯвляетсяДСВ");
			ПоляЗапроса.Добавить("ВидРасчетаЯвляетсяПочасовымОтклонением");
		КонецЕсли;
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			ПроведениеРасчетов.ДобавитьПоказатели(НеобходимыеДанные, КоличествоПоказателей, ТекстЗапроса, КомментироватьРасчет, ПоляЗапроса, Показатель1Текст, Показатель1ТекстПредопределенный);
		Иначе 	
			ТекстЗапроса = ТекстЗапроса + ",
			|Ложь КАК РасчетИмеетБазовыеНачисления";
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			// если присоединяем к базе
			Если КомментироватьРасчет Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза Как РезультатБаза,
				|База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|База.ВидРасчетаРазрез.Наименование КАК ВидРасчетаРазрезНаименование";
				ПоляЗапроса.Добавить("РезультатБаза");
				ПоляЗапроса.Добавить("ВидРасчетаРазрез");
				ПоляЗапроса.Добавить("ВидРасчетаРазрезНаименование");
			Иначе 
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза КАК РезультатБаза";
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДней,0) Как ОтработаноДнейПоСреднему, 
			|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноЧасов,0) Как ОтработаноЧасовПоСреднему, 
			|ДанныеДляРасчетаСреднего.СреднийЗаработок Как СреднийЗаработок";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноДнейПоСреднему");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоСреднему");
				ПоляЗапроса.Добавить("СреднийЗаработок");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработокОтпуска Тогда

			// выбираем ЧислоДнейВНеделе
			ТекстЗапроса = ТекстЗапроса + ", 
			|ВЫБОР КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) ТОГДА 6 ИНАЧЕ 7 КОНЕЦ КАК ЧислоДнейВНеделе,
			|Основной.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧислоДнейВНеделе");
				ПоляЗапроса.Добавить("ДлительностьРабочейНедели");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ВзаиморасчетыСРаботниками.СуммаУпрКонечныйОстаток Как КВыплатеПоУпрУчету,
			|ВзаиморасчетыСРаботникамиОрганизаций.УжеНачисленоДоДоначисления Как УжеНачисленоДоДоначисления,
			|ЕСТЬNULL(СуммарныйПроцент.Процент, 0) Как СуммарныйПроцент, 
			|ВЫБОР КОГДА НеРезиденты.ФизЛицо ЕСТЬ NULL ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ Как Резидент";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("КВыплатеПоУпрУчету");
				ПоляЗапроса.Добавить("УжеНачисленоДоДоначисления");
				ПоляЗапроса.Добавить("СуммарныйПроцент");
				ПоляЗапроса.Добавить("Резидент");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ВычетыКДоходамНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ЕСТЬNULL(СведенияОСкидках.ГодовойВычет, 0) Как ГодовойВычет,
			|ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0) Как НормативЗатрат,
			|ЕСТЬNULL(НДФЛОбороты.СуммаВычетаОборот, 0) Как СуммаВычетаОборот";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ГодовойВычет");
				ПоляЗапроса.Добавить("НормативЗатрат");
				ПоляЗапроса.Добавить("СуммаВычетаОборот");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ДоходыОблагаемыеЕСН Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("ДоходыОблагаемыеСтраховымиВзносамиЕСН", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ РегистрРасчета."+ИмяРегистра+" Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда

			ТекстЗапроса = ТекстЗапроса + "			
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.Сотрудник.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;
			
		КонецЕсли;	
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеОСтаже			
			|ПО ДанныеОСтаже.Сотрудник = Основной.Сотрудник
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;		
		
		// если перерасчет - нужно сузить выборку 
		Если Перерасчет И Физлица = Неопределено Тогда
			// перерасчет по всем физлицам перерасчета
			ТекстЗапроса = ТекстЗапроса + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|ПО ФизлицаДляПерерасчета.Физлицо = Основной.Физлицо";
					
		КонецЕсли;
		
        Если НеобходимаБаза Тогда
            
            Разрезы = Новый Массив;
            Разрезы.Добавить("ПериодРегистрации");
            Если КомментироватьРасчет Тогда
                Запрос.Текст = 
                "ВЫБРАТЬ
                |	СУММА(База.РезультатБаза) КАК РезультатБаза,
                |	База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
                |	База.Регистратор КАК Регистратор,
                |	База.НомерСтроки КАК НомерСтроки
                |ПОМЕСТИТЬ ВТБаза
                |ИЗ
                |	(ВЫБРАТЬ
                |		База1.РезультатБаза КАК РезультатБаза,
                |		База1.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
                |		База1.Регистратор КАК Регистратор,
                |		База1.НомерСтроки КАК НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База1
                |	ГДЕ
                |		((НЕ База1.Сторно)
                |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
                |		База2.РезультатБаза,
                |		База2.ВидРасчетаРазрез,
                |		База2.Регистратор,
                |		База2.НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База2
                |	ГДЕ
                |		((НЕ База2.Сторно)
                |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
                |СГРУППИРОВАТЬ ПО
                |	База.ВидРасчетаРазрез,
                |	База.Регистратор,
                |	База.НомерСтроки";
                
				Разрезы.Добавить("ВидРасчета");
				
			Иначе
                Запрос.Текст = 
                "ВЫБРАТЬ
                |	СУММА(База.РезультатБаза) КАК РезультатБаза,
                |	База.Регистратор КАК Регистратор,
                |	База.НомерСтроки КАК НомерСтроки
                |ПОМЕСТИТЬ ВТБаза
                |ИЗ
                |	(ВЫБРАТЬ
                |		База1.РезультатБаза КАК РезультатБаза,
                |		База1.Регистратор КАК Регистратор,
                |		База1.НомерСтроки КАК НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База1
                |	ГДЕ
                |		((НЕ База1.Сторно)
                |				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
                |		База2.РезультатБаза,
                |		База2.Регистратор,
                |		База2.НомерСтроки
                |	ИЗ
                |		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") КАК База2
                |	ГДЕ
                |		((НЕ База2.Сторно)
                |				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
                |СГРУППИРОВАТЬ ПО
                |	База.Регистратор,
                |	База.НомерСтроки";
				
            КонецЕсли;
            Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
            Запрос.Выполнить();
            
            ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТБаза КАК База
            |ПО Основной.Регистратор = База.Регистратор И Основной.НомерСтроки = База.НомерСтроки";
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			
			ОсновнойЗаработок = Новый Массив(3);
			ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
			ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
			ОсновнойЗаработок[2] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
			ПоФиксПремиям = Новый Массив(2);
			ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
			ПоФиксПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
			ПоПремиям = Новый Массив(4);
			ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
			ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
			ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
			ПоПремиям[3] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;
			ПоФиксПремиямНеИндексируемые = Новый Массив(4);
			ПоФиксПремиямНеИндексируемые[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
			ПоФиксПремиямНеИндексируемые[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
			ПоФиксПремиямНеИндексируемые[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
			ПоФиксПремиямНеИндексируемые[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;
			
			Запрос.УстановитьПараметр("ОсновнойЗаработок", ОсновнойЗаработок); // Основной заработок индексируемый
			Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
			Запрос.УстановитьПараметр("ПоПремиям", ПоПремиям);  // Премии полностью учитываемые, индексируемые
			Запрос.УстановитьПараметр("ПоФиксПремиям", ПоФиксПремиям); // Премии учитываемые частично, индексируемые
			Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые", ПоФиксПремиямНеИндексируемые); // Премии учитываемые частично, не индексируемые
			
			// для реализации Федеральных законов:
			//	от 22.12.2005 г. № 180-ФЗ и от 29 декабря 2006 г. № 255-ФЗ - по больничным листам
			//	от 5 декабря 2006 г. № 207-ФЗ - по отпуску по уходу за детьми
			// при расчете пособий заработок учитывается по всем местам работы
			
			Запрос.УстановитьПараметр("ОсновнойЗаработокПособий", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			
			СоставляющиеСреднегоЗаработкаПособий = Новый Массив(5);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий);

			СоставляющиеПрочихСреднихЗаработков = Новый Массив(18);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);

			Запрос.УстановитьПараметр("СоставляющиеСреднегоЗаработкаПособий", СоставляющиеСреднегоЗаработкаПособий);
			Запрос.УстановитьПараметр("СоставляющиеПрочихСреднихЗаработков", СоставляющиеПрочихСреднихЗаработков);

			ПоСреднемуЗаработкуФСС = Новый Массив(2);
			ПоСреднемуЗаработкуФСС[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
			ПоСреднемуЗаработкуФСС[1] = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет;
			Запрос.УстановитьПараметр("ПоСреднемуЗаработкуФСС", ПоСреднемуЗаработкуФСС);
			
			Запрос.Текст = ДанныеОСреднемЗаработкеТекст;
			Запрос.Выполнить();
			ДанныеОСреднемЗаработкеТекст = "ВТДанныеОСреднемЗаработке";
			
			// присоединяем данные для расчета среднего заработка
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ДанныеОСреднемЗаработкеТекст+" КАК ДанныеДляРасчетаСреднего
			|ПО Основной.Сотрудник = ДанныеДляРасчетаСреднего.Сотрудник И 
			|Основной.ВидРасчета.СпособРасчета = ДанныеДляРасчетаСреднего.СпособРасчета И 
			|Основной.ДатаНачалаСобытия = ДанныеДляРасчетаСреднего.ДатаНачалаСобытия И 
			|Основной.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеДляРасчетаСреднего.ДатаНачалаРасчетногоПериода И 
			|Основной.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеДляРасчетаСреднего.ДатаОкончанияРасчетногоПериода";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
			// получим период за который необходимы данные к выплате по управленческому учету
			ЗапросПериода = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(Начисления.ПериодРегистрации) КАК МаксПД,
			|	МИНИМУМ(Начисления.ПериодРегистрации) КАК МинПД
			|ИЗ
			|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
			|ГДЕ
			|	Начисления.Регистратор = &парамРегистратор
			|	И Начисления.ВидРасчета.СпособРасчета = &Доначисление
			|	И Начисления.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления");
			ЗапросПериода.УстановитьПараметр("Доначисление", Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
			ЗапросПериода.УстановитьПараметр("парамРегистратор", Регистратор);
			ЗапросПериода.УстановитьПараметр("парамКатегорияНачисления", КатегорияРасчета);
			Выборка = ЗапросПериода.Выполнить().Выбрать();
			Выборка.Следующий();
			// остатки получаем на начало месяца, следующего за периодом действия начисления
			ПериодОстатковНачало = ДобавитьМесяц(Выборка.МинПД, 1);
			ПериодОстатковКонец = ДобавитьМесяц(Выборка.МаксПД, 1);
			
			// суммарный процент всех процентных начислений, в базу которых включены виды расчета 
			// со способом расчета ДоначислениеПоУправленческомуУчету
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.Сотрудник,
			|	Начисления.ФизЛицо,
			|	Начисления.ПериодРегистрации КАК ПериодДействия
			|ПОМЕСТИТЬ ВТСотрудникиСДоначислением
			|ИЗ
			|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
			|ГДЕ
			|	Начисления.Регистратор = &парамРегистратор
			|	И Начисления.ВидРасчета.СпособРасчета = &Доначисление
			|	И Начисления.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.ПериодДействия КАК ПериодДействия,
			|	Начисления.Размер + Дополнительные.Размер КАК Процент
			|ПОМЕСТИТЬ ВТСуммарныйПроцент
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.Сотрудник КАК Сотрудник,
			|		НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
			|		СУММА(Начисления.Показатель1) КАК Размер
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСДоначислением КАК СотрудникиСДоначислением
			|			ПО Начисления.Сотрудник = СотрудникиСДоначислением.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) = СотрудникиСДоначислением.ПериодДействия)
			|	ГДЕ
			|		Начисления.Ссылка = &парамРегистратор
			|		И Начисления.ВидРасчета.СпособРасчета В(&Процентом)
			|		И Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					Базовые.Ссылка
			|				ИЗ
			|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
			|				ГДЕ
			|					Базовые.ВидРасчета.СпособРасчета = &Доначисление)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Начисления.Сотрудник,
			|		НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)) КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Начисления.Сотрудник КАК Сотрудник,
			|			СУММА(Начисления.Показатель1) КАК Размер
			|		ИЗ
			|			Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Начисления
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСДоначислением КАК СотрудникиСДоначислением
			|				ПО Начисления.Сотрудник = СотрудникиСДоначислением.Сотрудник
			|		ГДЕ
			|			Начисления.Ссылка = &парамРегистратор
			|			И Начисления.ВидРасчета.СпособРасчета В(&Процентом)
			|			И Начисления.ВидРасчета В
			|					(ВЫБРАТЬ
			|						Базовые.Ссылка
			|					ИЗ
			|						ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
			|					ГДЕ
			|						Базовые.ВидРасчета.СпособРасчета = &Доначисление)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Начисления.Сотрудник) КАК Дополнительные
			|		ПО Начисления.Сотрудник = Дополнительные.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОрганизаций.Период, МЕСЯЦ) КАК Период,
			|	СУММА(ВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов) КАК УжеНачисленоДоДоначисления
			|ПОМЕСТИТЬ ВТВзаиморасчетыСРаботникамиОрганизаций
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСДоначислением КАК СотрудникиСДоначислением
			|		ПО (СотрудникиСДоначислением.ФизЛицо = ВзаиморасчетыСРаботникамиОрганизаций.Физлицо)
			|			И (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОрганизаций.Период, МЕСЯЦ) = СотрудникиСДоначислением.ПериодДействия)
			|ГДЕ
			|	ВзаиморасчетыСРаботникамиОрганизаций.Организация = &парамОрганизация
			|	И ВзаиморасчетыСРаботникамиОрганизаций.Регистратор <> &парамРегистратор
			|	И ВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОрганизаций.Период, МЕСЯЦ)";
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботниками.ОстаткиИОбороты(&ПериодОстатковНачало, &ПериодОстатковКонец, МЕСЯЦ, , Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ Физлицо ИЗ ВТСотрудникиСДоначислением)) КАК ВзаиморасчетыСРаботниками
			|ПО Основной.Физлицо = ВзаиморасчетыСРаботниками.Физлицо
			|И ДОБАВИТЬКДАТЕ(Основной.ПериодРегистрации, МЕСЯЦ, 1) = ВзаиморасчетыСРаботниками.Период
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|ПО Основной.Физлицо = ВзаиморасчетыСРаботникамиОрганизаций.Физлицо 
			|И Основной.ПериодРегистрации = ВзаиморасчетыСРаботникамиОрганизаций.Период
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммарныйПроцент КАК СуммарныйПроцент
			|ПО Основной.Сотрудник = СуммарныйПроцент.Сотрудник
			|И Основной.ПериодРегистрации = СуммарныйПроцент.ПериодДействия
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|(ВЫБРАТЬ
			|	СтатусФизЛица.ФизЛицо КАК ФизЛицо
			|	ИЗ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(&парамКонецГода, Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ Физлицо ИЗ ВТСотрудникиСДоначислением)) КАК СтатусФизЛица
			|	ГДЕ (СтатусФизЛица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент))) КАК НеРезиденты
			|ПО Основной.Физлицо = НеРезиденты.ФизЛицо";
			
			Запрос.УстановитьПараметр("ПериодОстатковНачало", ПериодОстатковНачало);
			Запрос.УстановитьПараметр("ПериодОстатковКонец", ПериодОстатковКонец);
			Запрос.УстановитьПараметр("парамКонецГода", КонецГода(ПериодРегистрации));
			Запрос.УстановитьПараметр("КонецПериодаРегистрации", ДобавитьМесяц(ПериодРегистрации, 1));
			Запрос.УстановитьПараметр("Доначисление", Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
			Запрос.УстановитьПараметр("Процентом", ПроведениеРасчетов.ПолучитьСписокНачисленийПроцентом());
			Запрос.ВыполнитьПакет();
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ВычетыКДоходамНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, , НАЧАЛОПЕРИОДА(ПериодРегистрации, МЕСЯЦ) <= &парамПериодРегистрации И Организация = &парамОрганизация И КодДохода В (&ДоходыП28Ст217) И " + УсловиеНаФизлицоТекст +") КАК НДФЛОбороты
			|ПО Основной.Физлицо = НДФЛОбороты.ФизЛицо И Основной.Организация = НДФЛОбороты.Организация И Основной.ВидРасчета.КодДоходаНДФЛ = НДФЛОбороты.КодДохода
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&парамНачалоГода) КАК СведенияОСкидках
			|ПО СведенияОСкидках.КодДохода = Основной.ВидРасчета.КодДоходаНДФЛ";
			
			ДоходыП28Ст217 = Новый Массив;
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2761);
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2720);
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2730);
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2740);
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2760);
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2770);
			ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2790);
			
			Запрос.УстановитьПараметр("ДоходыП28Ст217", ДоходыП28Ст217);
			Запрос.УстановитьПараметр("парамНачалоГода",НачалоГода(ПериодРегистрации));
			Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПериодРегистрации));
		КонецЕсли;
		
		Если НеобходимыеДанные.ДоходыОблагаемыеЕСН Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ДоходыОблагаемыеСтраховымиВзносамиЕСН", КомментироватьРасчет, Запрос, ТекстЗапроса, , ИмяРегистра)			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;
		
	ИначеЕсли 	ИмяРегистра = "УправленческиеНачисления" Тогда 
			
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор Как Регистратор,
		|Основной.НомерСтроки Как НомерСтроки,
		|Основной.Физлицо Как Сотрудник,
		|Основной.Физлицо.Наименование Как СотрудникНаименование, 
		|Основной.ВидРасчета Как ВидРасчета,
		|Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|Ложь Как ВидРасчетаЯвляетсяПочасовымОтклонением,
		|Основной.ВидРасчета.СпособРасчета Как СпособРасчета,
		|Основной.ВидРасчета.ЗачетОтработанногоВремени Как ЗачетОтработанногоВремени,
		|Основной.ВидУчетаВремени Как ВидУчетаВремени";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
			ПоляЗапроса.Добавить("ВидРасчетаЯвляетсяПочасовымОтклонением");
			ПоляЗапроса.Добавить("ЗачетОтработанногоВремени");
			ПоляЗапроса.Добавить("ВидУчетаВремени");
		КонецЕсли;
		
		ПроведениеРасчетов.ДобавитьПоказатели(НеобходимыеДанные, КоличествоПоказателей, ТекстЗапроса, КомментироватьРасчет, ПоляЗапроса, Показатель1Текст, Показатель1ТекстПредопределенный);
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			ТекстЗапроса = ТекстЗапроса 
							+ ", " 
							+ УправлениеПоказателямиСхемМотивации.ТекстЗапросаПолейОтработанногоВремени();
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноВремени");
				ПоляЗапроса.Добавить("ОтработаноДней");
				ПоляЗапроса.Добавить("ОтработаноЧасов");
				ПоляЗапроса.Добавить("ОтработаноВремениПроизводственныйГрафик");
				ПоляЗапроса.Добавить("ОтработаноЧасовПроизводственныйГрафик");
				//ПоляЗапроса.Добавить("ОтработаноЧасовПоТабелю");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			Если КомментироватьРасчет  Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза Как РезультатБаза,
				|База.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|База.ВидРасчетаРазрез.Наименование КАК ВидРасчетаРазрезНаименование";
				ПоляЗапроса.Добавить("РезультатБаза");
				ПоляЗапроса.Добавить("ВидРасчетаРазрез");
				ПоляЗапроса.Добавить("ВидРасчетаРазрезНаименование");
			Иначе 
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза КАК РезультатБаза";
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ) КАК ОшибкаВводаИндивидуальногоГрафикаРаботы,
			|	ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ) КАК ОшибкаВводаОтработанногоВремени,
			|	ЛОЖЬ КАК ПредупреждениеНесоответствияТабеляИНачисления,
			|	Основной.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ГрафикРаботыНаименование");
				ПоляЗапроса.Добавить("ОшибкаВводаИндивидуальногоГрафикаРаботы");
				ПоляЗапроса.Добавить("ОшибкаВводаОтработанногоВремени");
				ПоляЗапроса.Добавить("ПредупреждениеНесоответствияТабеляИНачисления");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// стаж работы на предприятии
			ТекстЗапроса = ТекстЗапроса + ", 
			|РАЗНОСТЬДАТ(ДанныеОСтаже.Период, &ПериодРегистрации, МЕСЯЦ) КАК Стаж";			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			// размер сдельного заработка
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка 
			|	КОНЕЦ КАК РазмерСдельногоЗаработка,
			|ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ) КАК ОшибкаВводаФактическойВыработки";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОшибкаВводаФактическойВыработки");
			КонецЕсли;
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса + "		
		|ИЗ РегистрРасчета." + ИмяРегистра + " Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			Если КоличествоПоказателей > 0 Тогда
				ТекстЗапроса = ТекстЗапроса + "			
				|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
				|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			КонецЕсли;
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;
		КонецЕсли;
								
		Если НеобходимыеДанные.ВремяВКалендарныхДнях Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
			|	ФактическийПериодДействия.ПериодДействияНачало,
			|	ФактическийПериодДействия.ПериодДействияКонец,
			|	ФактическийПериодДействия.ВидРасчета,
			|	ФактическийПериодДействия.ФизЛицо КАК Сотрудник
			|ПОМЕСТИТЬ ВТФактическийПериодДействия
			|ИЗ
			|	РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
			|			Регистратор = &парамРегистратор
			|				И Авторасчет) КАК ФактическийПериодДействия
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
			Запрос.Выполнить();
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
			|	СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ФактическийПериодДействия.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК КалендарныхДней
			|ПОМЕСТИТЬ ВТВремяВКалендарныхДнях
			|ИЗ
			|	ВТФактическийПериодДействия КАК ФактическийПериодДействия
			|ГДЕ
			|	ФактическийПериодДействия.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления
			|
			|СГРУППИРОВАТЬ ПО
			|	ФактическийПериодДействия.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяВКалендарныхДнях КАК ВремяВКалендарныхДнях
			|ПО ВремяВКалендарныхДнях.НомерСтроки = Основной.НомерСтроки";
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			// присоединяем к базе
            Если КомментироватьРасчет  Тогда
                
				Разрезы = Новый Массив;
				Разрезы.Добавить("ВидРасчета");
	            Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
				
	            ТекстЗапроса = ТекстЗапроса + "
	            |ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета." + ИмяРегистра + ".БазаУправленческиеНачисления(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") Как База
	            |ПО Основной.Регистратор = База.Регистратор И Основной.НомерСтроки = База.НомерСтроки";
				
			Иначе
				
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета." + ИмяРегистра + ".БазаУправленческиеНачисления(&парамИзмеренияОсновного, &парамИзмеренияБазового, , " + Условие + ") Как База
				|ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки";
				
            КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ВсегоОтработаноВремени Тогда
			
			Запрос.Текст = УпрВсегоОтработаноВремени;
			Запрос.Выполнить();
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрВсегоОтработаноВремени КАК ВсегоОтработаноВремени
			|ПО Основной.НомерСтроки = ВсегоОтработаноВремени.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
			Запрос.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			Запрос.УстановитьПараметр("ПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
			Запрос.УстановитьПараметр("ПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
			Запрос.УстановитьПараметр("ПустойВидИспользованияРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
			Запрос.УстановитьПараметр("ОтработанноеВПределахНормы", Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеНеотработанное", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеОтработанноеВПределахНормы", Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
			
			Запрос.Текст = УправлениеПоказателямиСхемМотивации.ТекстЗапросаВременнойТаблицыОтработаноПоВидуВремени();
			Запрос.Выполнить();
			
			Запрос.Текст = УправлениеПоказателямиСхемМотивации.ТекстЗапросаВременнойТаблицыОтработаноНЕПоВидуВремени();
			Запрос.Выполнить();
			
			Запрос.Текст = УпрСводныеИндивидуальныеГрафикиТекст;
			Запрос.Выполнить();
			
			Запрос.Текст = УправлениеПоказателямиСхемМотивации.ТекстЗапросаВременнойТаблицыВремяВЦеломЗаПериод();
			Запрос.Выполнить();
			
			Запрос.Текст = УправлениеПоказателямиСхемМотивации.ТекстЗапросаВременнойТаблицыВремяВведеноТабелем();
			Запрос.Выполнить();
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета." + ИмяРегистра + ".ДанныеГрафика(" + Условие +  ") Как ДанныеГрафика
			|ПО Основной.Регистратор = ДанныеГрафика.Регистратор И Основной.НомерСтроки = ДанныеГрафика.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|ПО Основной.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрОтработаноПоВидуВремениДляПоказателей КАК ОтработаноПоВидуВремениНачисления
			|ПО Основной.НомерСтроки = ОтработаноПоВидуВремениНачисления.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрОтработаноНЕПоВидуВремениДляПоказателей КАК ОтработаноНЕПоВидуВремениНачисления
			|ПО Основной.НомерСтроки = ОтработаноНЕПоВидуВремениНачисления.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрВремяВведенноеВЦеломЗаПериод КАК ВремяВведенноеВЦеломЗаПериод
			|ПО Основной.НомерСтроки = ВремяВведенноеВЦеломЗаПериод.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТУпрВремяВведеноТабелем КАК ВремяВведеноТабелем
			|ПО Основной.НомерСтроки = ВремяВведеноТабелем.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеОСтаже
			|ПО ДанныеОСтаже.Физлицо = Основной.Физлицо
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			
			Запрос.Текст = СдельныйЗаработокКомпанииТекст;
			Запрос.Выполнить();
			СдельныйЗаработокКомпанииТекст = "ВТСдельныйЗаработокКомпании";
			
			// присоединяем данные о сдельном заработке
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+СдельныйЗаработокКомпанииТекст+" КАК ДанныеОСдельномЗаработке
			|ПО Основной.НомерСтроки = ДанныеОСдельномЗаработке.ОсновнойНомерСтроки";
			
		КонецЕсли;
				
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;

	ИначеЕсли 	ИмяРегистра = "УправленческиеУдержания" Тогда 
			
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор Как Регистратор,
		|Основной.НомерСтроки Как НомерСтроки,
		|Основной.Физлицо Как Сотрудник,
		|Основной.Физлицо.Наименование Как СотрудникНаименование, 
		|Основной.ВидРасчета Как ВидРасчета,
		|Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|Ложь Как ВидРасчетаЯвляетсяПочасовымОтклонением,
		|Основной.ВидРасчета.СпособРасчета Как СпособРасчета";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
			ПоляЗапроса.Добавить("ВидРасчетаЯвляетсяПочасовымОтклонением");
		КонецЕсли;
		
		ПроведениеРасчетов.ДобавитьПоказатели(НеобходимыеДанные, КоличествоПоказателей, ТекстЗапроса, КомментироватьРасчет, ПоляЗапроса, Показатель1Текст, Показатель1ТекстПредопределенный);
		
		Если НеобходимаБаза Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|База.РезультатБаза КАК РезультатБаза";
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// стаж работы на предприятии
			ТекстЗапроса = ТекстЗапроса + ", 
			|РАЗНОСТЬДАТ(ДанныеОСтаже.Период, &ПериодРегистрации, МЕСЯЦ) КАК Стаж";			
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "		
		|ИЗ РегистрРасчета." + ИмяРегистра + " Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			Если КоличествоПоказателей > 0 Тогда
				ТекстЗапроса = ТекстЗапроса + "			
				|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
				|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			КонецЕсли;
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;
		КонецЕсли;
								
		Если НеобходимаБаза Тогда
			// присоединяем к базе
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета." + ИмяРегистра + ".БазаУправленческиеНачисления(&парамИзмеренияОсновного, &парамИзмеренияБазового, , " + Условие + ") Как База
			|ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеОСтаже
			|ПО ДанныеОСтаже.Физлицо = Основной.Физлицо
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;

	ИначеЕсли ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда		
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Основной.Регистратор Как Регистратор, 
		|	Основной.НомерСтроки Как НомерСтроки, 
		|	Основной.Физлицо Как Сотрудник, 
		|	Основной.Физлицо.Наименование Как СотрудникНаименование, 
		|	Основной.ВидРасчета Как ВидРасчета,
		|	Истина Как ВидРасчетаПериодДействияБазовый,
		|	Ложь Как БазовыйПериодПрошлыйМесяц,
		|	Основной.ВидРасчета.ЯвляетсяДСВ Как ЯвляетсяДСВ,
		|	Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|	Ложь Как ВидРасчетаЯвляетсяПочасовымОтклонением,
		|	Основной.ВидРасчета.СпособРасчета Как СпособРасчета";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("Сотрудник");
			ПоляЗапроса.Добавить("СотрудникНаименование");
			ПоляЗапроса.Добавить("ВидРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаНаименование");
			ПоляЗапроса.Добавить("СпособРасчета");
			ПоляЗапроса.Добавить("ВидРасчетаПериодДействияБазовый");
			ПоляЗапроса.Добавить("БазовыйПериодПрошлыйМесяц");
			ПоляЗапроса.Добавить("ВидРасчетаЯвляетсяПочасовымОтклонением");
			ПоляЗапроса.Добавить("ЯвляетсяДСВ");
		КонецЕсли;                 
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			ПроведениеРасчетов.ДобавитьПоказатели(НеобходимыеДанные, КоличествоПоказателей, ТекстЗапроса, КомментироватьРасчет, ПоляЗапроса, Показатель1Текст, Показатель1ТекстПредопределенный);
		Иначе 	
			ТекстЗапроса = ТекстЗапроса + ",
			|Ложь КАК РасчетИмеетБазовыеНачисления";
		КонецЕсли;
		
		Если НеобходимыеДанные.ПределПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Основной.ДокументОснование.Предел Как ПределПоДокументуОснованию";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ПределПоДокументуОснованию");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("РасчетнаяБазаУдержаний", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("УдержаноПоДокументу", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("ИсчисленныйНДФЛ", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДней,0) Как ОтработаноДнейПоСреднему, 
			|	ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноЧасов,0) Как ОтработаноЧасовПоСреднему, 
			|	ДанныеДляРасчетаСреднего.СреднийЗаработок Как СреднийЗаработок";
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ОтработаноДнейПоСреднему");
				ПоляЗапроса.Добавить("ОтработаноЧасовПоСреднему");
				ПоляЗапроса.Добавить("СреднийЗаработок");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработокОтпуска Тогда
			// выбираем число дней по шестидневке или календарных рабочих дней 
			// из производственного календаря
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке) ТОГДА 6 ИНАЧЕ 7 КОНЕЦ КАК ЧислоДнейВНеделе,
			|	Основной.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("ЧислоДнейВНеделе");
				ПоляЗапроса.Добавить("ДлительностьРабочейНедели");
			КонецЕсли;
			
		КонецЕсли;
			
		Если НеобходимыеДанные.ПочтовыеПереводы Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("ПочтовыеПереводы", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		Если НеобходимыеДанные.ПрожиточныйМинимум Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("АлиментыВПрожиточныхМинимумах", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		Если НеобходимыеДанные.ДоходыОблагаемыеЕСН Тогда
			ПроведениеРасчетов.ДописатьПоляАлгоритмов("ДоходыОблагаемыеСтраховымиВзносамиЕСН", КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса)
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ РегистрРасчета."+ИмяРегистра+" Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда

			ТекстЗапроса = ТекстЗапроса + "			
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				Запрос.УстановитьПараметр(КодСтажа, ВидСтажа.Ключ); // ссылка на вид стажа
				
				ТекстЗапроса = ТекстЗапроса + "
				
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК "+ КодСтажа + "
				|	ПО Основной.ФизЛицо = " + КодСтажа + ".Ссылка И
				|	&" + КодСтажа + " = "+КодСтажа+".ВидСтажа";
				
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеОСтаже			
			|ПО ДанныеОСтаже.Сотрудник.ФизЛицо = Основной.Физлицо
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;			
		
		// если перерасчет - нужно сузить выборку 
		Если Перерасчет И Физлица = Неопределено Тогда
			// перерасчет по всем физлицам перерасчета
			ТекстЗапроса = ТекстЗапроса + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|	ПО ФизлицаДляПерерасчета.Физлицо = Основной.Физлицо";
					
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("РасчетнаяБазаУдержаний", КомментироватьРасчет, Запрос, ТекстЗапроса, Условие)			
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("УдержаноПоДокументу", КомментироватьРасчет, Запрос, ТекстЗапроса)			
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ИсчисленныйНДФЛ", КомментироватьРасчет, Запрос, ТекстЗапроса)			
		КонецЕсли;
		
		Если НеобходимыеДанные.СреднийЗаработок Тогда
			ОсновнойЗаработок = Новый Массив(3);
			ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
			ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
			ОсновнойЗаработок[2] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
			ПоФиксПремиям = Новый Массив(2);
			ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
			ПоФиксПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
			ПоПремиям = Новый Массив(4);
			ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
			ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
			ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
			ПоПремиям[3] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;
			ПоФиксПремиямНеИндексируемые = Новый Массив(4);
			ПоФиксПремиямНеИндексируемые[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
			ПоФиксПремиямНеИндексируемые[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
			ПоФиксПремиямНеИндексируемые[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
			ПоФиксПремиямНеИндексируемые[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;
			
			Запрос.УстановитьПараметр("ОсновнойЗаработок", ОсновнойЗаработок); // Основной заработок индексируемый
			Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
			Запрос.УстановитьПараметр("ПоПремиям", ПоПремиям);  // Премии полностью учитываемые, индексируемые
			Запрос.УстановитьПараметр("ПоФиксПремиям", ПоФиксПремиям); // Премии учитываемые частично, индексируемые
			Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые", ПоФиксПремиямНеИндексируемые); // Премии учитываемые частично, не индексируемые
			
			// для реализации Федеральных законов:
			//	от 22.12.2005 г. № 180-ФЗ и от 29 декабря 2006 г. № 255-ФЗ - по больничным листам
			//	от 5 декабря 2006 г. № 207-ФЗ - по отпуску по уходу за детьми
			// при расчете пособий заработок учитывается по всем местам работы
			
			Запрос.УстановитьПараметр("ОсновнойЗаработокПособий", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			
			СоставляющиеСреднегоЗаработкаПособий = Новый Массив(5);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий);
			СоставляющиеСреднегоЗаработкаПособий.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий);

			СоставляющиеПрочихСреднихЗаработков = Новый Массив(18);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ);
			СоставляющиеПрочихСреднихЗаработков.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);

			Запрос.УстановитьПараметр("СоставляющиеСреднегоЗаработкаПособий", СоставляющиеСреднегоЗаработкаПособий);
			Запрос.УстановитьПараметр("СоставляющиеПрочихСреднихЗаработков", СоставляющиеПрочихСреднихЗаработков);

			ПоСреднемуЗаработкуФСС = Новый Массив(2);
			ПоСреднемуЗаработкуФСС[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
			ПоСреднемуЗаработкуФСС[1] = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет;
			Запрос.УстановитьПараметр("ПоСреднемуЗаработкуФСС", ПоСреднемуЗаработкуФСС);
			
			Запрос.Текст = ДанныеОСреднемЗаработкеТекст;
			Запрос.Выполнить();
			ДанныеОСреднемЗаработкеТекст = "ВТДанныеОСреднемЗаработке";
			
			// присоединяем данные для расчета среднего заработка
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ДанныеОСреднемЗаработкеТекст+" КАК ДанныеДляРасчетаСреднего
			|ПО Основной.Сотрудник = ДанныеДляРасчетаСреднего.Сотрудник И 
			|Основной.ВидРасчета.СпособРасчета = ДанныеДляРасчетаСреднего.СпособРасчета И 
			|Основной.ДатаНачалаСобытия = ДанныеДляРасчетаСреднего.ДатаНачалаСобытия И 
			|Основной.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеДляРасчетаСреднего.ДатаНачалаРасчетногоПериода И 
			|Основной.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеДляРасчетаСреднего.ДатаОкончанияРасчетногоПериода";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ПочтовыеПереводы Тогда
			
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ПочтовыеПереводы", КомментироватьРасчет, Запрос, ТекстЗапроса)			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ПрожиточныйМинимум Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("АлиментыВПрожиточныхМинимумах", КомментироватьРасчет, Запрос, ТекстЗапроса)			
		КонецЕсли;
		
		Если НеобходимыеДанные.ДоходыОблагаемыеЕСН Тогда
			ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ДоходыОблагаемыеСтраховымиВзносамиЕСН", КомментироватьРасчет, Запрос, ТекстЗапроса, , ИмяРегистра)			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;

	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	Если НеобходимаБаза И КомментироватьРасчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ";
		Для Каждого Поле Из ПоляЗапроса Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	МАКСИМУМ(" + Поле + "),"
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|	СУММА(РезультатБаза)
		|ПО
		|	НомерСтроки";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции //ПолучитьДанныеДляРасчета()

// Рассчитывает записи из переданного набора записей
//
// Параметры:
//	ИмяРегистра				- имя регистра, чьи записи будут рассчитаны
//	НаборЗаписейРегистра	- набор записей, которые надо рассчитать
//	ЗаписиДоходыНДФЛ		- набор записей регистра накопления с доходами НДФЛ
//							  Передается только для случаев расчета набора записей - начислений
//	НаборЗаписейРасчетСреднего
//	ГоловнаяОрганизация
//	ОбособленноеПодразделение
//	ТабличнаяЧастьДокумента
//	ОднократныйРасчетСреднего	- будево. Если Истина, то при расчете выполняется 
//								  однократный расчет среднего в не зависимости от количесвта различных 
//								  категорий видов расчета в наборе записей
//  ПовторныйРасчет
//  КатегорияДоначисления
//  СведенияОДоначислениях
//  КурсВалютыУпрУчета
//  МассивИндексыСтрокТабличнойЧасти	- массив с индексами строк табличного поля, для реализации
//										  расчета по одному сотруднику	
//	Физлицо								- ссылка Справочники.ФизическиеЛица, для реализации
//										  расчета по одному сотруднику	
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, 
												НаборЗаписейРегистра, 
												ЗаписиДоходыНДФЛ = Неопределено,
												НаборЗаписейРасчетСреднего = Неопределено,
												ГоловнаяОрганизация = Неопределено,
												ОбособленноеПодразделение = Неопределено,
												ТабличнаяЧастьДокумента = Неопределено,
												ОднократныйРасчетСреднего = Ложь,
												МассивИндексыСтрокТабличнойЧасти = Неопределено,
												Физлицо = Неопределено,
												КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено,
												ПовторныйРасчет = Ложь,
												КатегорияДоначисления = Неопределено,
												СведенияОДоначислениях = Неопределено,
												КурсВалютыУпрУчета = Неопределено) Экспорт

	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;
	
	СчитатьСреднийЗаработок = Истина;

	Если	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "УдержанияРаботниковОрганизаций" или
			ИмяРегистра = "УправленческиеНачисления" или
			ИмяРегистра = "УправленческиеУдержания" Тогда
		
		// получим массив видов расчета из набора записей
		ТаблицаВидовРасчета = НаборЗаписейРегистра.Выгрузить();
		ТаблицаВидовРасчета.Свернуть("ВидРасчета");
		ВидыРасчетов = ТаблицаВидовРасчета.ВыгрузитьКолонку("ВидРасчета");
		
		// Получим максимальное число показателей			
		ЗапросНаКоличествоПоказателей = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(НачисленияПоказатели.НомерСтроки),0) КАК КолВоПоказателей
		|ИЗ");
		Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда 
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УправленческиеНачисления" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УправленческиеНачисления.Показатели КАК НачисленияПоказатели";
		ИначеЕсли ИмяРегистра = "УправленческиеУдержания" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
		|	ПланВидовРасчета.УправленческиеУдержания.Показатели КАК НачисленияПоказатели";
		КонецЕсли;
		ВыборкаКоличестваПоказателей = ЗапросНаКоличествоПоказателей.Выполнить().Выбрать();
		ВыборкаКоличестваПоказателей.Следующий();
		КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;
		

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КатегорияРасчета.Код КАК КодКатегорииРасчета,
		|	КатегорияРасчета,"
		+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций",
		"
		|	ЗачетНормыВремени,
		|	ПериодДействияБазовый,","")
		+ ?(ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		"
		|	ВЫБОР КОГДА КодыДоходаСВычетами.КодДохода ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ Как РасчетВычетов,","") + "
		|	ПВР.Ссылка КАК Ссылка1");		
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			Если СчПоказателей = 1 Тогда
				Запрос.Текст = Запрос.Текст + ",";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.Предопределенный ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель
			|					ИНАЧЕ NULL
			|				КОНЕЦ				
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК Показатель" + СчПоказателей + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа
			|					ИНАЧЕ NULL
			|				КОНЕЦ
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидСтажа" + СчПоказателей + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
			|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа.Код
			|					ИНАЧЕ NULL
			|				КОНЕЦ
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидСтажаКод" + СчПоказателей;

			Если СчПоказателей<КоличествоПоказателей Тогда
				Запрос.Текст = Запрос.Текст + ","
			КонецЕсли;
		КонецЦикла;
		Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Или ИмяПВР = "УправленческиеНачисления" Тогда
			Запрос.Текст = Запрос.Текст + ",
			|	ЗачетОтработанногоВремени";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ",
		|	ПВР.СпособРасчета Как СпособРасчета
		|ИЗ	
		|	ПланВидовРасчета."+ИмяПВР + " КАК ПВР";
		Если КоличествоПоказателей > 0 Тогда
			Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ  ПланВидовРасчета."+ИмяПВР+".Показатели КАК ТЧПоказатели
		|	ПО ПВР.Ссылка = ТЧПоказатели.Ссылка
		|		И (ТЧПоказатели.Показатель.Предопределенный
		|			ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Стаж))";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст 
		+ ?(ИмяПВР = "ДополнительныеНачисленияОрганизаций",
		"
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ КодДохода Из РегистрСведений.НДФЛВычетыПоДоходам) Как КодыДоходаСВычетами
		|ПО КодДоходаНДФЛ = КодыДоходаСВычетами.КодДохода","")
		+ "
		|ГДЕ ПВР.Ссылка В(&парамВидыРасчетов)
		|УПОРЯДОЧИТЬ ПО
		|	КатегорияРасчета.Код
		|
		|ИТОГИ ПО КатегорияРасчета";

		Запрос.УстановитьПараметр("парамВидыРасчетов", ВидыРасчетов);
		
		// получаем список категороий и способов расчета
		ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

        БудетДоначислениеПоУпрУчету = Ложь;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   1 КАК Поле1
        |ИЗ
        |   ПланВидовРасчета." + ИмяПВР + " КАК ПВР
        |ГДЕ
        |   ПВР.Ссылка В(&парамВидыРасчетов)
        |   И ПВР.СпособРасчета = &Доначисление";
        
        Запрос.УстановитьПараметр("Доначисление", Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
        
        Если Не Запрос.Выполнить().Пустой() Тогда

            БудетДоначислениеПоУпрУчету = Истина;
        КонецЕсли;


		// первая запись набора делается с пересчетом Фактического периода действия
		ТолькоЗапись = Ложь;
		
		Если ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
			ЗапросПоВычетам = Новый Запрос
		КонецЕсли;
		
		Если Не(Физлицо = Неопределено) Тогда
			Физлица = Новый Массив();
			Физлица.Добавить(Физлицо);
		Иначе
			Физлица = Неопределено;
		КонецЕсли;

		
		Пока ВыборкаКатегорий.Следующий() Цикл
			
			// Поддержка способа расчета ДоначислениеПоУправленческомуУчету
			// пропустим категории "младше" категории в которой выполняется доначисление
			Если ПовторныйРасчет и КатегорияДоначисления <> Неопределено и ВыборкаКатегорий.КодКатегорииРасчета < КатегорияДоначисления.Код Тогда
				Продолжить;
			КонецЕсли;
			
			// Получим структуру необходимых данных для расчетов текущей категории
			МассивСпособовРасчета	= Новый Массив;	// Массив способов расчета текущий категории
			ТаблицаПоказателей		= Новый ТаблицаЗначений;	// Массив видов показателей схем мотивации
			ТаблицаПоказателей.Колонки.Добавить("Показатель");
			ТаблицаПоказателей.Колонки.Добавить("ВидСтажа");
			ТаблицаПоказателей.Колонки.Добавить("ВидСтажаКод");

			НормаВремени			= Ложь;			// Признак необходимости получения нормы времени для видов расчета
			ОтработаноВремени		= Ложь;			// Признак необходимости получения отработанного времени для видов расчета
			РасчетВычетов			= Ложь;			// Признак необходимости расчета вычетов к доходам
			НеобходимБазовыйПериод	= Ложь;			// Признак необходимости базового периода
			
			ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
			Пока ВложеннаяВыборка.Следующий() Цикл
				МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);
				
				Для Сч = 1 По КоличествоПоказателей Цикл
					Если ВложеннаяВыборка["Показатель"+Сч] <> Null Тогда
						СтрокаПоказателя = ТаблицаПоказателей.Добавить();
						СтрокаПоказателя.Показатель		= ВложеннаяВыборка["Показатель"+Сч];
						СтрокаПоказателя.ВидСтажа		= ВложеннаяВыборка["ВидСтажа"+Сч];
						СтрокаПоказателя.ВидСтажаКод	= ВложеннаяВыборка["ВидСтажаКод"+Сч];
					КонецЕсли;
				КонецЦикла;
					
				Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
					
					НормаВремени			= НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					ОтработаноВремени		= ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					НеобходимБазовыйПериод	= НеобходимБазовыйПериод ИЛИ (НЕ ВложеннаяВыборка.ПериодДействияБазовый);
				КонецЕсли;
				
				Если ИмяПВР = "ДополнительныеНачисленияОрганизаций" Тогда
					РасчетВычетов = РасчетВычетов ИЛИ ВложеннаяВыборка.РасчетВычетов;
				КонецЕсли;
				
				Если ИмяПВР = "УправленческиеНачисления" Тогда
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени;
				КонецЕсли;
								
			КонецЦикла;
			
			НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, ТаблицаПоказателей);
			НеобходимыеДанные.НормаВремени			= НеобходимыеДанные.НормаВремени ИЛИ НормаВремени ИЛИ (НеобходимыеДанные.База И (ИмяПВР = "ОсновныеНачисленияОрганизаций" Или ИмяПВР = "УправленческиеНачисления"));
			НеобходимыеДанные.ОтработаноВремени		= НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени ИЛИ (НеобходимыеДанные.База И (ИмяПВР = "ОсновныеНачисленияОрганизаций" Или ИмяПВР = "УправленческиеНачисления"));
			НеобходимыеДанные.ВычетыКДоходамНДФЛ	= РасчетВычетов;
			
			Если Не НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
				НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = ИмяРегистра = "УдержанияРаботниковОрганизаций" И (НеобходимыеДанные.База Или НеобходимыеДанные.ДоходыОблагаемыеЕСН)
			КонецЕсли;
			
			Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Или ИмяПВР = "УправленческиеНачисления" Тогда
				НеобходимыеДанные.НормаВремениЗаМесяц = Истина; // для предотвращения ложных сообщений об отсутствии графика
			КонецЕсли;
			
			// записываем набор перед расчетом каждой категории начислений
			Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций" Тогда
				НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись, Истина, Ложь);
			Иначе	
				НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
			КонецЕсли;
			ТолькоЗапись = Истина;
	         ///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 28.09.2011 11:53 
			// ОПИСАНИЕ: заполняем показатель "ОтработаноДнейПоПятидневке" для сотрудников по данным 
			//			 виртуальной таблицы "ДанныеГрафика" регистра расчета "ОсновныеНачисленияОрганизаций".
			Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
				ЗаполнитьПоказательОтработаноДнейПоПятидневке(Регистратор, НаборЗаписейРегистра);
				НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись, Истина, Ложь);
			КонецЕсли;
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
		
			// если нужны данные для расчета среднего заработка
			Если СчитатьСреднийЗаработок И (НеобходимыеДанные.СреднийЗаработок ИЛИ НеобходимыеДанные.СреднийЗаработокОтпуска) И (НаборЗаписейРасчетСреднего <> Неопределено) Тогда
				
				СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписейРасчетСреднего, КомментироватьРасчет);
				Если ОднократныйРасчетСреднего Тогда
					СчитатьСреднийЗаработок = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИсходныеДанные = ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ГоловнаяОрганизация, ПериодРегистрации, , Физлица, КомментироватьРасчет);
			
			// Поддержка способа расчета ДоначислениеПоУправленческомуУчету
			// если необходимо прогнозировать НДФЛ
			Если НеобходимыеДанные.ДанныеДляПрогнозаНДФЛ Тогда
				Если не ПовторныйРасчет Тогда
					// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
					СписокФизлицТекст = 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Работники.ФизЛицо КАК Физлицо
					|ИЗ
					|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Работники
					|ГДЕ
					|	Работники.Ссылка = &парамРегистратор";
					
					ДанныеДляПрогнозаНДФЛ = ПроведениеРасчетовДополнительный.ДанныеДляПрогнозаНДФЛ(ПериодРегистрации, ГоловнаяОрганизация, ОбособленноеПодразделение, Регистратор, СписокФизЛицТекст);
				КонецЕсли;
				КатегорияДоначисления = ВыборкаКатегорий.КатегорияРасчета;
			КонецЕсли;
			РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, НеобходимыеДанные, ЗаписиДоходыНДФЛ, ГоловнаяОрганизация, ОбособленноеПодразделение, ТабличнаяЧастьДокумента, ДанныеДляПрогнозаНДФЛ, СведенияОДоначислениях, КурсВалютыУпрУчета, ПовторныйРасчет, МассивИндексыСтрокТабличнойЧасти, КомментироватьРасчет, ФормаКомментариев);
			Если БудетДоначислениеПоУпрУчету И ЗаписиДоходыНДФЛ <> НеОпределено Тогда
				// запись набора записей доходов НДФЛ
				// необходимо для расчета ДоначислениеПоУправленческомуУчету
				ЗаписиДоходыНДФЛ.Записать();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РассчитатьЗаписиРегистраРасчета

// Перерассчитывает записи из переданного набора записей
//
// Параметры: 
//  ИмяРегистра			 - имя регистра, чьи записи будут рассчитаны
//  НаборЗаписейРегистра - набор записей, которые надо рассчитать
//	Физлица - массив физлиц для перерасчета
//	ЗаписиДоходыНДФЛ - набор записей доходов НДФЛ
//	НаборЗаписейРасчетСреднего - набор записей расчета среднего заработка
//	Организация - организацция
//	ТабличнаяЧастьДокумента - табличная часть документа по которой ведется перерасчет
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПереРассчитатьЗаписиРегистраРасчета(	ИмяРегистра, 
												НаборЗаписейРегистра, 
												Физлица = Неопределено, 
												ЗаписиДоходыНДФЛ = Неопределено,
												НаборЗаписейРасчетСреднего = Неопределено,
												ГоловнаяОрганизация = Неопределено,
												ОбособленноеПодразделение = Неопределено,
												ТабличнаяЧастьДокумента = Неопределено,
												ОднократныйРасчетСреднего = Ложь) Экспорт

	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;

	СчитатьСреднийЗаработок = Истина;
	
	// Получим максимальное число показателей			
	ЗапросНаКоличествоПоказателей = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КолВоПоказателей
	|ИЗ
	|	ПланВидовРасчета."+ИмяПВР+".Показатели КАК Показатели");			
	ВыборкаКоличестваПоказателей = ЗапросНаКоличествоПоказателей.Выполнить().Выбрать();
	ВыборкаКоличестваПоказателей.Следующий();
	КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;		
	Если КоличествоПоказателей = Null Тогда
		КоличествоПоказателей = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// таблица ФизлицаДляПерерасчета
	// Список физлиц по которым необходимо выполнить перерасчет
	// Поля:
	//		ФизЛицо
	Если Физлица = Неопределено Тогда
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	(ВЫБРАТЬ
		|		Перерасчет.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		
	Иначе
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&парамФизлица)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";
		Запрос.УстановитьПараметр("парамФизлица", Физлица);
	КонецЕсли;
	Запрос.Текст = ФизлицаДляПерерасчетаТекст;
	Запрос.Выполнить();
	
	// соответствие категории начисления и массива сособов расчета
	// для записей, которые будут перерассчитываться
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + "	
		|	ВЫБОР
		|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ТЧПоказатели.Показатель.Предопределенный ИЛИ ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
		|						ТОГДА ТЧПоказатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель" + СчПоказателей + ",
		|	ВЫБОР
		|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
		|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа
		|					ИНАЧЕ NULL
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидСтажа" + СчПоказателей + ",
		|	ВЫБОР
		|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ТЧПоказатели.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Стаж)
		|						ТОГДА ТЧПоказатели.Показатель.ВидСтажа.Код
		|					ИНАЧЕ NULL
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидСтажаКод" + СчПоказателей + ",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст 
	+ ?(ИмяПВР = "ОсновныеНачисленияОрганизаций","
	|	ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый,
	|	ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,","")
	+ ?(ИмяПВР = "ДополнительныеНачисленияОрганизаций",
	"
	|	ВЫБОР КОГДА КодыДоходаСВычетами.КодДохода ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ Как РасчетВычетов,","")
	+ "
	|   "+ИмяРегистра+".ВидРасчета.КатегорияРасчета Как КатегорияРасчета,
	|	"+ИмяРегистра+".ВидРасчета.СпособРасчета Как СпособРасчета
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " Как "+ ИмяРегистра + "
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлица Как ФизлицаДляПерерасчета
	|		ПО ФизлицаДляПерерасчета.ФизЛицо = "+ИмяРегистра+".ФизЛицо"
	+ ?(ИмяПВР = "ДополнительныеНачисленияОрганизаций",
	"
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ КодДохода Из РегистрСведений.НДФЛВычетыПоДоходам) Как КодыДоходаСВычетами
	|		ПО "+ИмяРегистра+".ВидРасчета.КодДоходаНДФЛ = КодыДоходаСВычетами.КодДохода","")
    + ?(КоличествоПоказателей > 0,
	"
	|		ЛЕВОЕ СОЕДИНЕНИЕ  ПланВидовРасчета."+ИмяПВР+".Показатели КАК ТЧПоказатели
	|		ПО "+ИмяРегистра+".ВидРасчета = ТЧПоказатели.Ссылка","") 
	+ "
	|ГДЕ Регистратор = &парамРегистратор
	|УПОРЯДОЧИТЬ ПО
	|	"+ИмяРегистра+".ВидРасчета.КатегорияРасчета.Код
	|ИТОГИ ПО "+ИмяРегистра+".ВидРасчета.КатегорияРасчета";
	
	ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// соответствие категорий начислений и массива способов расчета
	КатегорииСпособы = Новый Соответствие;
	Пока ВыборкаКатегорий.Следующий() Цикл
		
		// Получим структуру необходимых данных для расчетов текущей категории
		МассивСпособовРасчета	= Новый Массив;	// Массив способов расчета текущий категории
		ТаблицаПоказателей		= Новый ТаблицаЗначений;	// Массив видов показателей схем мотивации
		ТаблицаПоказателей.Колонки.Добавить("Показатель");
		ТаблицаПоказателей.Колонки.Добавить("ВидСтажа");
		ТаблицаПоказателей.Колонки.Добавить("ВидСтажаКод");
		НормаВремени			= Ложь;			// Признак необходимости получения нормы времени для видов расчета
		ОтработаноВремени		= Ложь;			// Признак необходимости получения отработанного времени для видов расчета
		РасчетВычетов			= Ложь;			// Признак необходимости расчета вычетов к доходам
		НеобходимБазовыйПериод	= Ложь;			// Признак необходимости базового периода
		
		ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
		Пока ВложеннаяВыборка.Следующий() Цикл
			МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				
				Если ВложеннаяВыборка["Показатель"+СчПоказателей] <> Null Тогда
					СтрокаПоказателя = ТаблицаПоказателей.Добавить();
					СтрокаПоказателя.Показатель		= ВложеннаяВыборка["Показатель"+СчПоказателей];
					СтрокаПоказателя.ВидСтажа		= ВложеннаяВыборка["ВидСтажа"+СчПоказателей];
					СтрокаПоказателя.ВидСтажаКод	= ВложеннаяВыборка["ВидСтажаКод"+СчПоказателей];
				КонецЕсли;
			КонецЦикла;
			
			Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
				
				
				НормаВремени			= НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
				ОтработаноВремени		= ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
				НеобходимБазовыйПериод	= НеобходимБазовыйПериод ИЛИ (НЕ ВложеннаяВыборка.ПериодДействияБазовый);
			КонецЕсли;
			
			Если ИмяПВР = "ДополнительныеНачисленияОрганизаций" Тогда
				РасчетВычетов = РасчетВычетов ИЛИ ВложеннаяВыборка.РасчетВычетов;
			КонецЕсли;
			
		КонецЦикла;
		
		НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, ТаблицаПоказателей);
		НеобходимыеДанные.НормаВремени			= НеобходимыеДанные.НормаВремени ИЛИ НормаВремени ИЛИ (НеобходимыеДанные.База И (ИмяПВР = "ОсновныеНачисленияОрганизаций" Или ИмяПВР = "УправленческиеНачисления"));
		НеобходимыеДанные.ОтработаноВремени		= НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени ИЛИ (НеобходимыеДанные.База И (ИмяПВР = "ОсновныеНачисленияОрганизаций" Или ИмяПВР = "УправленческиеНачисления"));
		НеобходимыеДанные.ВычетыКДоходамНДФЛ	= РасчетВычетов;
		
		Если НеобходимыеДанные.База Тогда
			НеобходимыеДанные.НормаВремениЗаМесяц	= НеобходимыеДанные.НормаВремениЗаМесяц ИЛИ НеобходимБазовыйПериод;
		КонецЕсли;
		
		Если ИмяРегистра = "ОсновныеНачисленияОрганизаций" Или ИмяРегистра = "УправленческиеНачисления" Тогда
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина; // для предотвращения ложных сообщений об отсутствии графика
		КонецЕсли;
		
		Если Не НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = ИмяРегистра = "УдержанияРаботниковОрганизаций" И (НеобходимыеДанные.База Или НеобходимыеДанные.ДоходыОблагаемыеЕСН)
		КонецЕсли;
			
		// если нужны данные для расчета среднего заработка
		Если СчитатьСреднийЗаработок И (НеобходимыеДанные.СреднийЗаработок ИЛИ НеобходимыеДанные.СреднийЗаработокОтпуска) И (НаборЗаписейРасчетСреднего <> Неопределено) Тогда
			СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписейРасчетСреднего);
			Если ОднократныйРасчетСреднего Тогда
				СчитатьСреднийЗаработок = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИсходныеДанные = ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ГоловнаяОрганизация, ПериодРегистрации, Истина, Физлица);
		// Курс результата передаем равным 1, т.к. считаем, что перерасчет доступен только для реглучета
		РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, НеобходимыеДанные, ЗаписиДоходыНДФЛ, ГоловнаяОрганизация, ОбособленноеПодразделение, ТабличнаяЧастьДокумента);
		
		// записываем набор после расчета каждой очередной категории
		НаборЗаписейРегистра.Записать(Истина, Истина);
		
	КонецЦикла;

КонецПроцедуры // ПерерассчитатьЗаписиРегистраРасчета() 

////////////////////////////////////////////////////////////////////////////////
// ДАТЫ ИЗМЕНЕНИЯ ЗАКОНОДАТЕЛЬСТВА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ДОКУМЕНТОВ

Функция СтрокаСвойствИзСтрокиДокументаДляОсновныхНачислений() Экспорт
	СтрокаСвойствИзСтрокиДокумента = "ПериодДействияНачало,ПериодДействияКонец,ВидРасчета,Сторно,Результат,ОплаченоДнейЧасов,ВидУчетаВремени," 
									+ "Сотрудник,ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ДополнительныеДанные,ГрафикРаботы,ГрафикРаботыНорма,"
									+ "ДатаНачалаСобытия,Авторасчет,ВариантОбработкиЗаписиПриОтраженииВРеглУчете,"
									+ "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент,РасчетнаяБазаЗаЕдиницуНормыВремени";
									
	Возврат СтрокаСвойствИзСтрокиДокумента;
	
КонецФункции //СтрокаСвойствИзСтрокиДокументаДляОсновныхНачислений()

Функция ЗаписыватьДвиженияПриРасчетеДокументаСреднегоЗаработка(РассчитываемыеТаблицы, РежимПерерасчета = Ложь) Экспорт 
	Возврат РежимПерерасчета;
КонецФункции // ЗаписыватьДвиженияПриРасчетеДокументаСреднегоЗаработка()

Процедура ВыполнитьДополнительныеДействияПриРасчетеДокументаСреднегоЗаработка(ДокументОбъект) Экспорт 
	
	Ссылка = ДокументОбъект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
	|			ТОГДА ВЫБОР
	|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ВидРасчетаЗаСчетРаботодателя
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.Сторно
	|										И (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай)
	|								КОГДА (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай)
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателя)
	|							КОНЕЦ
	|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)
	|					КОГДА ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПериодРегистрации < &ДатаНачалаРеформыСоцСтрахования
	|							И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПособиеОтражаетсяВРеглУчетеТекущимДокументом
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать)
	|					КОГДА ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.Сторно
	|										И (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай)
	|								КОГДА (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай)
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|							КОНЕЦ
	|					КОГДА ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве)
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.Сторно
	|										И (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай)
	|								КОГДА (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай)
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|							КОНЕЦ
	|					КОГДА ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПричинаНетрудоспособности В (ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаВБыту), ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание))
	|						ТОГДА ВЫБОР
	|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.Сторно
	|										И (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай)
	|								КОГДА (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|										И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай)
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание)
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ОсновныеНачисленияРаботниковОрганизаций.Сторно
	|									И (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|									И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни
	|									И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочийНовыйСтраховойСлучай)
	|							КОГДА (НЕ ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ЯвляетсяПродолжениемБолезни)
	|									И ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Документ.НачислениеПоБольничномуЛисту).ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочийНовыйСтраховойСлучай)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочий)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочий)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаРеформыСоцСтрахования", ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования());
	ТаблицаКорректировки = Запрос.Выполнить().Выгрузить();
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	НаборОсновныеНачисления.Прочитать();
	Для каждого СтрокаНабора Из НаборОсновныеНачисления Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНабора,ТаблицаКорректировки.Найти(СтрокаНабора.НомерСтроки,"НомерСтроки"),"ВариантОбработкиЗаписиПриОтраженииВРеглУчете");
	КонецЦикла;
	НаборОсновныеНачисления.Записать(Истина, Истина, Ложь, Ложь);

КонецПроцедуры

Процедура ВыполнитьДополнительныеДействияПриРасчетеНДФЛ(ДокументОбъект) Экспорт 
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА

Функция ДополнитьСписокОсновныхВариантовНачисленийОрганизации(СписокСпособов) Экспорт

	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
	 Возврат СписокСпособов

КонецФункции // ДополнитьСписокОсновныхВариантовНачисленийОрганизации()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокДополнительныхВариантовНачислений() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений);
     
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);

	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
     
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список алгоритмов начислений надбавок
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовНадбавок() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
    
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
    
    СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
		
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовНадбавок()

// Возвращает список алгоритмов начислений, не требующих указания валюты начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	
	Возврат СписокСпособов;
	
КонецФункции 

// Возвращает список видов государственных единовременных пособий за счет ФСС
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления РазмерыГосударственныхПособий
//
Функция ПолучитьСписокЕдиновременныхПособийЗаСчетФСС() Экспорт
	
	СписокПособий = Новый СписокЗначений;
	                                   
	СписокПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ПриРожденииРебенка);
	СписокПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ПриПостановкеНаУчетВРанниеСрокиБеременности);
	СписокПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ВСвязиСоСмертью);
	//СписокПособий.Добавить(Перечисления.РазмерыГосударственныхПособий.ПриУсыновленииРебенка);
	
	Возврат СписокПособий
	
КонецФункции

// В зависимости от даты начала события предлагаем для выбора разные наборы составляющих
//
// Параметры
//  ДатаНачалаСобытия - дата, дата события, с которым связана выплата среднего заработка
//
// Возвращаемое значение:
//   Список значений, элементы которого представляют собой предопредеелнные в.р. из ПВР СреднийЗаработок
//
Функция ПолучитьПереченьСоставляющихСреднегоЗаработка(ЭтоПорядок2007года) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	Если ЭтоПорядок2007года Тогда
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
	Иначе
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
		СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
	КонецЕсли;
	
    Возврат СписокВыбора
	
КонецФункции // ПолучитьПереченьСоставляющихСреднего()

// рассчитываем сумму за работу в документах сдельной выработки
//
// Параметры
//  ТекущиеДанные - данные строки т.ч. Выработка
//  РассчитыватьСуммуЗаРаботуВВалютеРасценки - булево, флажок пересчета суммы в валюте расценки
//
Процедура РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ТекущиеДанные, Дата, ВалютаРегламентированногоУчета, ВалютаУпрУчета, КурсВалютыУпрУчета, КратностьВалютыУпрУчета, РассчитыватьСуммуЗаРаботуВВалютеРасценки = Истина) Экспорт

	Если РассчитыватьСуммуЗаРаботуВВалютеРасценки Тогда
		ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки = ТекущиеДанные.Расценка * ТекущиеДанные.Количество;
	КонецЕсли;
	
	Если ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
		КурсВылютыРасценки = 1;
		КратностьВылютыРасценки = 1;
	ИначеЕсли ТекущиеДанные.Валюта = ВалютаУпрУчета Тогда	
		КурсВылютыРасценки = КурсВалютыУпрУчета;
		КратностьВылютыРасценки = КратностьВалютыУпрУчета;
	Иначе	
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ТекущиеДанные.Валюта));
		КурсВылютыРасценки = Структура.Курс;
		КратностьВылютыРасценки = Структура.Кратность;
	КонецЕсли; 
	
	Если ОтражатьВУправленческомУчете Тогда
		ТекущиеДанные.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаУпрУчета,
								КурсВылютыРасценки, КурсВалютыУпрУчета, КратностьВылютыРасценки, КратностьВалютыУпрУчета);
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ТекущиеДанные.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаРегламентированногоУчета,
								КурсВылютыРасценки, 1, КратностьВылютыРасценки, 1);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуЗаРаботу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА

// Функция определяет процента оплаты БЛ в зависимости от стажа работника
//
// Параметры: 
//  Дата - Дата, обычно текущая дата
//  ДатаНачала - Дата, дата на которую формируется стаж - дата начала события
//  Физлицо - Справочник.ФизическиеЛица, физ. лицо для которого определяется стаж
//  Организация - Справочник.Организации, организация (головная), где работает физлицо.
//
// Возвращаемое значение:
//  число - процент оплаты Больничного листа
//
Функция ЗаполнитьПроцентОплатыОтСтажа(Дата, ДатаНачала, Физлицо, Организация) Экспорт

	Если ДатаНачала >= ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006() Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
		|	КОНЕЦ КАК ПричинаИзмененияСостояния
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаАктуальности,
		|		Сотрудник.Физлицо = &Физлицо
		|			И Организация = &ГоловнаяОрганизация
		|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	ВЫБОР
		|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаНачала);
		Запрос.УстановитьПараметр("Физлицо",					Физлицо);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		Организация);
		
		УжеНеРаботает = Запрос.Выполнить().Пустой(); // в рег-ре РаботникиОрганизаций нет других записей, кроме как об увольнении
		
	Иначе
		УжеНеРаботает = Ложь; // не проверяется	
	КонецЕсли;
	Если УжеНеРаботает Тогда
		Возврат 60;
	Иначе
		
		ДатаСтажа = ПроведениеРасчетов.ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаНачала, Физлицо, Организация);
		Если НЕ ЗначениеЗаполнено(ДатаСтажа) Тогда
			ДатаСтажа = Дата;
		КонецЕсли;
		
		Лет	= 0;
		ОбщегоНазначенияЗК.РазобратьРазностьДат(ДатаНачала, ДатаСтажа, Лет);
		
		Возврат ?(Лет >= 8, 100,?(Лет >= 5, 80, 60));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидСтажаПоУмолчаниюДляБольничногоЛиста(ДатаНачала) Экспорт
	Возврат ?(ДатаНачала < ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006(),Справочники.ВидыСтажа.НепрерывныйСтаж,Справочники.ВидыСтажа.СтраховойСтажДляБЛ);
КонецФункции //ПолучитьВидСтажаПоУмолчаниюДляБольничногоЛиста()

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА

Функция ПроверитьОтражениеВУчетеВидаРасчета(ВидРасчета, Отказ, ОбработкаКомментариев) Экспорт
	
	//Определяется в конкретной конфигурации	
	
КонецФункции

// определяет, является ли этот вид расчета одним из видов начислений
//
// Параметры
//  МетаданныеВидаРасчета - описание вида расчета как метаданного
//
// Возвращаемое значение:
//   булево
//
Функция ВидРасчетаЯвляетсяНачислением(МетаданныеВидаРасчета) Экспорт 

	Возврат МетаданныеВидаРасчета <> Метаданные.ПланыВидовРасчета.УдержанияОрганизаций
			  И МетаданныеВидаРасчета <> Метаданные.ПланыВидовРасчета.УправленческиеУдержания;

КонецФункции // ВидРасчетаЯвляетсяНачислением()

// возвращает текст запроса
//
// Параметры
//	нет
//
// Возвращаемое значение:
//	строка
//
Функция ПолучитьТекстОписанияБазовыхНачислений(МетаданныеВидаРасчета) Экспорт
	
	Если МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.УправленческиеНачисления Тогда
		Возврат			
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(БазовыеВидыРасчета.ВидРасчета.КатегорияРасчета.Код), """") КАК МаксимальныйИндексКатегории,
		|	ЛОЖЬ КАК ЕстьДополнительныеВР,
		|	ИСТИНА КАК ЕстьОсновныеВР
		|ИЗ
		|	ВТ_ТаблицаБазовыхВидовРасчета КАК БазовыеВидыРасчета
		|ГДЕ
		|	БазовыеВидыРасчета.ВидРасчета.Наименование ЕСТЬ НЕ NULL ";
		
	Иначе
		Возврат			
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(БазовыеВидыРасчета.ВидРасчета.КатегорияРасчета.Код), """") КАК МаксимальныйИндексКатегории,
		|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
		|				КОГДА БазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ), ЛОЖЬ) КАК ЕстьДополнительныеВР,
		|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
		|				КОГДА БазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ), ЛОЖЬ) КАК ЕстьОсновныеВР
		|ИЗ
		|	ВТ_ТаблицаБазовыхВидовРасчета КАК БазовыеВидыРасчета
		|ГДЕ
		|	БазовыеВидыРасчета.ВидРасчета.Наименование ЕСТЬ НЕ NULL ";
	КонецЕсли;
	
КонецФункции // ПолучитьТекстОписанияБазовыхНачислений()

Функция ЕстьДоначисление(ВидРасчета) Экспорт
	ЕстьРеквизитСпособРасчета = ВидРасчета.Метаданные().Реквизиты.Найти("СпособРасчета") <> Неопределено;
	Возврат ЕстьРеквизитСпособРасчета И ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету;
КонецФункции

Процедура ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ОбработкаКомментариев) Экспорт
	
	Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ОсновныеНачисленияОрганизаций.КатегорияРасчета.Код) КАК КатегорияРасчетаКод
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		КатегорияРасчетаКод = 0;
		
		Если Выборка.Следующий() Тогда
			КатегорияРасчетаКод = Выборка.КатегорияРасчетаКод;
		КонецЕсли;
		
		Если ВидРасчета.КатегорияРасчета.Код <= КатегорияРасчетаКод Тогда
			
			ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать более высокую очередность расчета!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПроверитьНастройкуВидаРасчета

////////////////////////////////////////////////////////////////////////////////
// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
//

Процедура ДополнитьТекстЗапросаПерерасчетыВЗаполнениеПлановыхНачислений(ТекстЗапроса) Экспорт

	// в этой конфигурации текст запроса не дополняется
	
КонецПроцедуры

// Функция формирует текст запроса для получения временных таблиц
// прочих документов к перерасчету
Функция ПолучитьТекстЗапросаДокументыКПерерасчетуДополнительно(ТекстПервыхЗаписей) Экспорт

	Возврат "";

КонецФункции

// Процедура дополняет итоговый текст запроса получения списка документов к перерасчету
Процедура ДополнитьТекстЗапросаДокументыКПерерасчету(ТекстЗапроса) Экспорт

	// в этой конфигурации текст запроса не дополняется
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Формульные расчеты

Функция ПолучитьТекстПоказателя(НеобходимыеДанные, ВидПВР, Предопределенный = Ложь, КомментироватьРасчет)		

	МассивСтажей = НеобходимыеДанные["ПроизвольныеСтажи"];
		
	Если 	НеобходимыеДанные.СдельныйЗаработок или 
		НеобходимыеДанные.ОтработаноВремени или 
		НеобходимыеДанные.НормаВремениЗаМесяц или
		НеобходимыеДанные.Стаж или
		НеобходимыеДанные.ВремяВКалендарныхДнях или
		МассивСтажей.Количество() > 0 или
		НеобходимыеДанные.База Тогда
		
		Если ВидПВР = "УдержанияРаботниковОрганизаций" Или ВидПВР = "ДополнительныеНачисленияРаботниковОрганизаций" Или ВидПВР = "УправленческиеУдержания" Тогда
			
			Показатель1Текст = "ВЫБОР "+
			?(НеобходимыеДанные.Стаж, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.Стаж)
			|		ТОГДА РАЗНОСТЬДАТ(ДанныеОСтаже.Период, Основной.БазовыйПериодКонец, МЕСЯЦ)", "") + 
			?(НеобходимыеДанные.ВремяВКалендарныхДнях, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВКалендарныхДнях)
			|		ТОГДА РАЗНОСТЬДАТ(Основной.БазовыйПериодНачало, Основной.БазовыйПериодКонец, ДЕНЬ) + 1  ", "")+
			?(НеобходимыеДанные.КалендарныхДнейВмесяце, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.КалендарныхДнейВмесяце)
			|		ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало,МЕСЯЦ), КОНЕЦПЕРИОДА(Основной.БазовыйПериодКонец,МЕСЯЦ), ДЕНЬ) + 1  ", "");
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл
				
				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				
				Показатель1Текст = Показатель1Текст +
				"	КОГДА Показатели.Показатель1.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Стаж) И Показатели.Показатель1.ВидСтажа = "+КодСтажа+".ВидСтажа 
				|	ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(" + КодСтажа+".ДатаОтсчета, МЕСЯЦ, -" + КодСтажа+".РазмерМесяцев), ДЕНЬ, -" + КодСтажа+".РазмерДней), Основной.БазовыйПериодКонец, МЕСЯЦ)
				|";
			КонецЦикла;
			
		Иначе
			
			Показатель1Текст = "ВЫБОР "+
			?(НеобходимыеДанные.Стаж, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.Стаж)
			|		ТОГДА РАЗНОСТЬДАТ(ДанныеОСтаже.Период, КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ), МЕСЯЦ)", "") + 
			?(НеобходимыеДанные.СдельныйЗаработок, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка) 
			|		ТОГДА ВЫБОР
			|			КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ДанныеОСдельномЗаработке.СуммаЗаработка,0)
			|		КОНЕЦ", "") + 
			?(НеобходимыеДанные.ВремяВКалендарныхДнях, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВКалендарныхДнях)
			|		ТОГДА ВремяВКалендарныхДнях.КалендарныхДней ", "") +
			?(НеобходимыеДанные.КалендарныхДнейВмесяце, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.КалендарныхДнейВмесяце)
			|		ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало,МЕСЯЦ), КОНЕЦПЕРИОДА(Основной.ПериодДействияНачало,МЕСЯЦ), ДЕНЬ) + 1  ", "") +
			?(НеобходимыеДанные.ВсегоОтработаноВремени, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях)  
			|		ТОГДА ВЫБОР
			|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ВсегоОтработаноВремени.ВсегоОтработаноДней, 0)
			|		КОНЕЦ 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах)
			|		ТОГДА ВЫБОР
			|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ВсегоОтработаноВремени.ВсегоОтработаноЧасов, 0)
			|		КОНЕЦ","");  
			
			Если ВидПВР = "УправленческиеНачисления" Тогда
				
				Показатель1Текст = Показатель1Текст +		
				?(НеобходимыеДанные.ОтработаноВремени, "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях)  
				|		ТОГДА ВЫБОР
				|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
				|				ТОГДА 0
				|			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
				|				ТОГДА ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0)
				|			ИНАЧЕ ЕСТЬNULL(ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия, 0)
				|		КОНЕЦ 
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах)
				|		ТОГДА ВЫБОР
				|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
				|				ТОГДА 0
				|			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
				|				ТОГДА ЕСТЬNULL(ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия, 0)
				|			ИНАЧЕ ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0)
				|		КОНЕЦ", "") +
				?(НеобходимыеДанные.НормаВремениЗаМесяц, "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВДнях)
				|		ТОГДА ВЫБОР 
				|			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
				|				ТОГДА ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия 
				|			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеНормаПериодДействия 
				|		КОНЕЦ
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах)
				|		ТОГДА ВЫБОР 
				|			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
				|				ТОГДА ДанныеГрафика.ДополнительноеЗначениеНормаПериодДействия 
				|			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия 
				|		КОНЕЦ", "");
				
			Иначе
				
				Показатель1Текст = Показатель1Текст +		
				?(НеобходимыеДанные.ОтработаноВремени, "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях)  
				|		ТОГДА ВЫБОР
				|			КОГДА Основной.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
				|				ТОГДА 0
				|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
				|				ТОГДА 0
				|			КОГДА НЕ ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю ЕСТЬ NULL
				|				ТОГДА ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю 
				|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя
				|			 И НЕ ОтработаноПоВидуВремениНачисления.Дней ЕСТЬ NULL
				|			ТОГДА ВЫБОР КОГДА Основной.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
				|					ТОГДА ЕСТЬNULL(ОтработаноПоВидуВремениНачисления.Дней, 0)
				|				ИНАЧЕ ЕСТЬNULL(ВЫБОР
				|						КОГДА Основной.ВидУчетаВремени = &ПоДням
				|							ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|						ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|						КОНЕЦ, 0) - ЕСТЬNULL(ОтработаноНЕПоВидуВремениНачисления.Дней, 0)
				|				КОНЕЦ
				|		КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
				|			ТОГДА ЕСТЬNULL(ВЫБОР
				|					КОГДА Основной.ВидУчетаВремени = &ПоДням
				|						ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|					ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|					КОНЕЦ, 0)
				|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
				|			ТОГДА 0
				|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДнейПоГрафику, ЕСТЬNULL(ВЫБОР
				|				КОГДА Основной.ВидУчетаВремени = &ПоДням
				|					ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|				ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|				КОНЕЦ, 0))
				|		КОНЕЦ 
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах)
				|		ТОГДА ВЫБОР
				|			КОГДА Основной.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
				|				ТОГДА ЕСТЬNULL(ВремяПоТабелю.ВнутрисменныеЧасыОтклонение, 0)
				|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
				|				ТОГДА 0
				|		КОГДА НЕ ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю ЕСТЬ NULL
				|			ТОГДА ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю 
				|		КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя
				|			 И ОтработаноПоВидуВремениНачисления.Часов ЕСТЬ НЕ NULL
				|			ТОГДА ВЫБОР КОГДА Основной.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
				|					ТОГДА ОтработаноПоВидуВремениНачисления.Часов
				|					ИНАЧЕ ЕСТЬNULL(ВЫБОР
				|							КОГДА Основной.ВидУчетаВремени = &ПоДням
				|								ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|							ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|							КОНЕЦ, 0) - ЕСТЬNULL(ОтработаноНЕПоВидуВремениНачисления.Часов, 0)
				|					КОНЕЦ
				|		КОГДА НЕ (Основной.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы)
				|			ТОГДА ЕСТЬNULL(ВЫБОР
				|					КОГДА Основной.ВидУчетаВремени = &ПоДням
				|						ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|						ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|					КОНЕЦ, 0) - ВЫБОР
				|								КОГДА ВремяВведеноТабелем.НомерСтроки ЕСТЬ НЕ NULL
				|									ТОГДА 0
				|									ИНАЧЕ ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0)
				|								КОНЕЦ
				|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
				|			ТОГДА 0
				|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
				|				КОГДА Основной.ВидУчетаВремени = &ПоДням
				|					ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|					ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|				КОНЕЦ, 0)) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0)
				|	КОНЕЦ", "") +
				?(НеобходимыеДанные.НормаВремениЗаМесяц, "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВДнях)
				|		ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, ВЫБОР 
				|																			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
				|																				ТОГДА ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия 
				|																			КОГДА Основной.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
				|																				ТОГДА ЕСТЬNULL(НормаВремениПоОбщемуГрафику.НормаДней, 0)
				|																			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеНормаПериодДействия 
				|																		КОНЕЦ)
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах)
				|		ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, ВЫБОР 
				|																			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
				|																				ТОГДА ДанныеГрафика.ДополнительноеЗначениеНормаПериодДействия 
				|																			КОГДА Основной.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
				|																				ТОГДА ЕСТЬNULL(НормаВремениПоОбщемуГрафику.НормаЧасов, 0)
				|																			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия 
				|																		КОНЕЦ)", "");
				
			КонецЕсли;
			
			Для Каждого ВидСтажа Из МассивСтажей Цикл

				КодСтажа = "Стаж_"+СокрП(ВидСтажа.Значение); // код стажа
				
				Показатель1Текст = Показатель1Текст +
				"	КОГДА Показатели.Показатель1.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Стаж) И Показатели.Показатель1.ВидСтажа = "+КодСтажа+".ВидСтажа 
				|	ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(" + КодСтажа+".ДатаОтсчета, МЕСЯЦ, -" + КодСтажа+".РазмерМесяцев), ДЕНЬ, -" + КодСтажа+".РазмерДней), Основной.ПериодДействияКонец, МЕСЯЦ)
				|";
			КонецЦикла;
			
		КонецЕсли;
		
		Показатель1Текст = Показатель1Текст +		
		?(НеобходимыеДанные.База, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
		|		ТОГДА ЕСТЬNULL(База.РезультатБаза,0)", "");	
		
		Если Предопределенный Тогда

			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ 0
			|КОНЕЦ ";
		Иначе
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ШкальныеПоказатели)
			|		ТОГДА Показатели.Показатель1
			|	    ИНАЧЕ  Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
			|КОНЕЦ КОНЕЦ";
			
		КонецЕсли;
		
	Иначе
		Если Предопределенный Тогда

			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ 0
			|КОНЕЦ ";
		Иначе

			Показатель1Текст = "ВЫБОР 
			|КОГДА Показатели.Показатель1.ТипПоказателя В (&ШкальныеПоказатели)
			|		ТОГДА Показатели.Показатель1
			|	  	ИНАЧЕ  Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
			|КОНЕЦ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Показатель1Текст;
	
КонецФункции //ПолучитьТекстПоказателя


Процедура ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, ЭтоНачисление, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета = Неопределено) Экспорт
	
	Если ВыборкаПоСтрокамДокумента.ПроизвольнаяФормулаРасчета Тогда
		Для СчПоказателя = 1 По Мин(ВыборкаПоСтрокамДокумента.КоличествоПоказателей, 6) Цикл
			ТипПоказателя = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ТипПоказателя"];
			ВозможностьИзменения = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ВозможностьИзменения"];
			ЗапрашиватьПриКадровыхПеремещениях = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ЗапрашиватьПриКадровыхПеремещениях"];
			Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И ЗапрашиватьПриКадровыхПеремещениях
				Или ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете	Тогда
				
				// проверка постоянных показателей
				Если ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя] = 0 Тогда
					// размер 
					Если Не ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "Предопределенный"]
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указан размер показателя " + ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя+"Наименование"], Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
				Если ЭтоНачисление Тогда
					Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["ТарифныйРазряд" + СчПоказателя])
						и ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер тарифа " + ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя+"Наименование"], Отказ, Заголовок);
					КонецЕсли;	
				КонецЕсли;	
				// валюта (для денежного показателя)
				Если ИспользуютсяНачисленияВВалюте Тогда
					Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный 
						и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Валюта" + СчПоказателя]) 
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке +  "не указана валюта!", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ИспользуютсяНачисленияВВалюте Тогда
			// Валюта
			Если ВыборкаПоСтрокамДокумента.КоличествоПоказателей > 0 
				И (Не ЭтоНачисление Или Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда)
				И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Валюта1) 
				И СоответствиеВалютныеСпособыРасчета[ВыборкаПоСтрокамДокумента.СпособРасчета] 
				И ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задана валюта!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		// Размер оплаты
		Если ВыборкаПоСтрокамДокумента.КоличествоПоказателей > 0 И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить И ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
			Если ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 и Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер начисления!", Отказ, Заголовок);
				
			ИначеЕсли ЭтоНачисление И ВыборкаПоСтрокамДокумента.ТарифныйРазряд1.Пустая() И ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан разряд!", Отказ, Заголовок);
				
			ИначеЕсли Не ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 Тогда 
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер удержания!", Отказ, Заголовок);
				
			КонецЕсли;
		КонецЕсли;
			
		
	КонецЕсли;
	
КонецПроцедуры //ПроверкаПоказаетелей

// Формирует текстовую интерпретацию формулы по способу расчета и показателям для отображения
// на экране.
//
// Параметры
//  СпособРасчета - ПеречислениеСсылка.СпособыРасчетаОплатыТруда 
//	Режим - "Текст" - формула выводится в виде текста, "HTML" - в виде HTML кода, по умолчанию = "Текст"
// Возвращаемое значение:
//   Строка   – содержит текстовую интерпретацию формулы расчета.
//
Функция ПолучитьОписаниеДополнительногоСпособа(СпособРасчета, Режим) Экспорт
	
	СтрокаФормулы = "";
	
	Если  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеПоУправленческомуУчету Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<От обратного>";
		Иначе
			СтрокаФормулы = "
							|Результат = <FONT color=#0000ff>От обратного</FONT>"
		КонецЕсли;
	КонецЕсли;
	
    Возврат СтрокаФормулы;	
	
КонецФункции // ПолучитьОписаниеДополнительногоСпособа()

// Дополняет массив типов ПВР удержаний текущей конфигурации
//
Процедура ТипыПВРУдержанийДополнить(ТипыПВРУдержаний) Экспорт
	
	ТипыПВРУдержаний.Добавить(Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания"));
	
КонецПроцедуры

Процедура ДополнитьСоответствиеИменПВРПоТипу(МассивыИменПВРПоТипу) Экспорт
	
	ИменаПВР = Новый Массив;
	ИменаПВР.Добавить("УправленческиеНачисления");
	ИменаПВР.Добавить("УправленческиеУдержания");
	
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления"), ИменаПВР);
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания"), ИменаПВР);
	
КонецПроцедуры // ДополнитьСоответствиеИменПВРПоТипу

Процедура ДополнитьМассивАвтоматическиРассчитываемыхПоказателей(АвтоРассчитываемыеПоказатели) Экспорт

	ПроведениеРасчетовДополнительный.ДополнитьМассивАвтоматическиРассчитываемыхПоказателей(АвтоРассчитываемыеПоказатели);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Законодательство

Процедура СформироватьРасчетыПоНДФЛПриВыплате(ВыборкаПоШапкеДокумента, ТекстТаблицыВыплаты = Неопределено, НаборЗаписейНДФЛ = Неопределено, НаборЗаписейРасчетыНА = Неопределено) Экспорт

	
	ПроведениеРасчетов.СформироватьРасчетыПоНДФЛПриВыплате(ВыборкаПоШапкеДокумента, ТекстТаблицыВыплаты, НаборЗаписейНДФЛ, НаборЗаписейРасчетыНА)


		
КонецПроцедуры

// Возвращает соответствие физлиц и подразделений
//
Функция ПолучитьСоответствиеФизлицИПодразделенийОрганизаций(ФизЛица, ПарамДата, ПарамГоловнаяОрганизация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизЛица",ФизЛица);
	Запрос.УстановитьПараметр("ПарамДата",ПарамДата);
	Запрос.УстановитьПараметр("ПарамГоловнаяОрганизация",ПарамГоловнаяОрганизация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.ВидДоговора,
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ПарамГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо В(&ФизЛица)
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И СотрудникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОсновноеМесто.Сотрудник КАК Сотрудник,
	|	РаботникиОсновноеМесто.ПодразделениеОрганизации КАК Подразделение,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТДанныеОРаботниках
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ПарамДата, Сотрудник.ФизЛицо В (&ФизЛица)) КАК РаботникиОсновноеМесто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК СотрудникиОрганизаций
	|		ПО РаботникиОсновноеМесто.Сотрудник = СотрудникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ПарамДата
	|					И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗанятости,
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОРаботниках.Подразделение,
	|	СписокСотрудников.Физлицо КАК Физлицо
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|		РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|		1 КАК Приоритет
	|	ИЗ
	|		ВТДанныеОРаботниках КАК РаботникиОсновноеМесто
	|	ГДЕ
	|		РаботникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОсновноеМесто.Физлицо
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|		РаботникиСовместительство.Физлицо,
	|		2
	|	ИЗ
	|		ВТДанныеОРаботниках КАК РаботникиСовместительство
	|	ГДЕ
	|		РаботникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиСовместительство.Физлицо
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(СотрудникиДУ.Сотрудник),
	|		СотрудникиДУ.Физлицо,
	|		ВЫБОР
	|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|				ТОГДА 4
	|			ИНАЧЕ 5
	|		КОНЕЦ
	|	ИЗ
	|		ВТСотрудники КАК СотрудникиДУ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СотрудникиДУ.Физлицо,
	|		ВЫБОР
	|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|				ТОГДА 4
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК СписокСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокФизическихЛиц.Физлицо КАК Физлицо,
	|			МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				ВТДанныеОРаботниках КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				РаботникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				РаботникиСовместительство.Физлицо,
	|				2
	|			ИЗ
	|				ВТДанныеОРаботниках КАК РаботникиСовместительство
	|			ГДЕ
	|				РаботникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИЗ
	|				ВТСотрудники КАК СотрудникиДУ) КАК СписокФизическихЛиц
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|		ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|			И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОРаботниках КАК ДанныеОРаботниках
	|		ПО СписокСотрудников.Сотрудник = ДанныеОРаботниках.Сотрудник";
	
	ПодразделенияФизлиц = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПодразделенияФизлиц.Вставить(Выборка.Физлицо, Выборка.Подразделение);
	КонецЦикла;
	
	Возврат ПодразделенияФизлиц;
	
КонецФункции //ПолучитьСоответствиеФизлицИПодразделений

////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ


////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ КОНТРОЛЯ ПЕРИОДИЧЕСКИХ ВЫПЛАТ

Процедура ДополнитьТекстЗапросаНабораПериодическихВыплат(ТекстЗапроса) Экспорт
	
	// В этой конфигурации дополнительных действий не предусмотрено
	
КонецПроцедуры



/////автоматизация

// Заполняет значения показателя "ОтработаноДнейПоПятидневке".
Процедура ЗаполнитьПоказательОтработаноДнейПоПятидневке(Регистратор, НаборЗаписейРегистра)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 28.09.2011 12:01 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка КАК ВидРасчета,
	|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки
	|ПОМЕСТИТЬ ВТВидыРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.AVT_ОтработаноДнейПоПятидневке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизацийДанныеГрафика.ПериодДействия,
	|	ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.AVT_ОтработаноДнейПоПятидневке) КАК Показатель,
	|	ОсновныеНачисленияРаботниковОрганизацийДанныеГрафика.Организация,
	|	ОсновныеНачисленияРаботниковОрганизацийДанныеГрафика.Сотрудник,
	|	ОсновныеНачисленияРаботниковОрганизацийДанныеГрафика.ПроизводственныйКалендарьПятидневкаФактическийПериодДействия КАК Значение,
	|	ОсновныеНачисленияРаботниковОрганизацийДанныеГрафика.НомерСтроки,
	|	ВТВидыРасчета.НомерСтроки КАК НомерПоказателя
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
	|			ВидРасчета В
	|					(ВЫБРАТЬ
	|						ВТВидыРасчета.ВидРасчета
	|					ИЗ
	|						ВТВидыРасчета)
	|				И Регистратор = &Регистратор) КАК ОсновныеНачисленияРаботниковОрганизацийДанныеГрафика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчета КАК ВТВидыРасчета
	|		ПО ОсновныеНачисленияРаботниковОрганизацийДанныеГрафика.ВидРасчета = ВТВидыРасчета.ВидРасчета";
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого Строка Из ТЗ Цикл
		// Добавим значение показателя в регистр.
		Запись = РегистрыСведений.ЗначенияПоказателейСхемМотивации.СоздатьМенеджерЗаписи();
		Запись.ПериодДействия = Строка.ПериодДействия;
		Запись.Показатель     = Строка.Показатель;
		Запись.Организация    = Строка.Организация;
		Запись.Сотрудник      = Строка.Сотрудник;
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			Запись.ПериодДействия = Строка.ПериодДействия;
			Запись.Показатель     = Строка.Показатель;
			Запись.Организация    = Строка.Организация;
			Запись.Сотрудник      = Строка.Сотрудник;
			Запись.Значение       = Строка.Значение;
		КонецЕсли;
		Запись.Значение       = Строка.Значение;
		Запись.Записать();
	КонецЦикла;
	
	// Добавим значения показателя в набор записей.
	Для каждого Запись Из НаборЗаписейРегистра Цикл
		СтрокаПоказателя = ТЗ.Найти(Запись.НомерСтроки, "НомерСтроки");
		Если Не СтрокаПоказателя = Неопределено Тогда
			Запись["Показатель"+СтрокаПоказателя.НомерПоказателя] = СтрокаПоказателя.Значение;
		КонецЕсли;
	КонецЦикла;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
КонецПроцедуры


//начало изменений Ожиганов А. 27.01.2017 
// выполняет формирование и запись набора записей регистра РасчетСреднегоЗаработка
// на основании данных набора записей регистра ОсновныеНачисленияРаботниковОрганизации
// Параметры:
//  ИмяРегистра - имя регистра расчетов 
//  Регистратор - регистратор набора записей регистра ОсновныеНачисленияРаботниковОрганизации
//  НаборЗаписей
// 
// Возвращаемое значение:
//  нет
//
Процедура АААСформироватьИЗаписатьДанныеРасчетаСреднего(ИмяРегистра, Регистратор, НаборЗаписей, КомментироватьРасчет = Ложь,Результат=Неопределено) Экспорт;
	
	// Вычислим наименьшую и наибольшую дату расчета среднего
	ДатаНачалаРасчетаСреднего		= '00010101';
	ДатаОкончанияРасчетаСреднего	= '00010101';
	НГраница = НаборЗаписей.Количество();
	
	// Выберем данные о коэффициентах индексации за расчетные периоды (в общем случае может быть несколько 
	// различных расчетных периодов, так как записей начислений в документе оплаты может быть несколько и мы позволяем 
	// пользователю редактировать расчетный период)
	
	// Реализация Федеральных законов:
	//	от 22.12.2005 г. № 180-ФЗ и от 29 декабря 2006 г. № 255-ФЗ - по больничным листам
	//	от 5 декабря 2006 г. № 207-ФЗ - по отпуску по уходу за детьми
	// - поле "Сотрудник" с 1 января 2006 года для больничных листов и с 1 января 2007 года для отпуска по уходу за детьми
	// может идентифицировать несколько мест работы, включая работу по внутреннему совместительству
	// - выборка РаботникиОрганизацийСрезПоследних содержит все действующие на конец расчетного периода
	// рабочие места
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.Сотрудник, Основной.Сотрудник) КАК Сотрудник,
	|	Основной.ФизЛицо КАК Физлицо,
	|	Основной.Организация КАК Организация,
	|	Основной.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|		ИНАЧЕ Основной.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчета,
	|	РАЗНОСТЬДАТ(Основной.ПериодРасчетаСреднегоЗаработкаНачало, НАЧАЛОПЕРИОДА(Основной.ПериодРасчетаСреднегоЗаработкаОкончание, МЕСЯЦ), МЕСЯЦ) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	Основной.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоБП,
	|	КОНЕЦПЕРИОДА(Основной.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ) КАК КонецБП,
	|	Основной.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(КоэффициентИндексацииЗаработка.Коэффициент, 1)
	|	КОНЕЦ КАК КоэффициентИндексации,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
	|			ТОГДА ДОБАВИТЬКДАТЕ(Основной.ПериодРасчетаСреднегоЗаработкаНачало, МЕСЯЦ, 1)
	|		ИНАЧЕ ЕСТЬNULL(КоэффициентИндексацииЗаработка.Период, Основной.ДатаНачалаСобытия)
	|	КОНЕЦ КАК Период,
	|	НЕОПРЕДЕЛЕНО КАК ВариантЗаполненияСреднего,
	|	ВЫБОР
	|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет)
	|			ТОГДА НАЧАЛОПЕРИОДА(Основной.Регистратор.Дата, МЕСЯЦ)
	|		ИНАЧЕ Основной.Регистратор.ПериодРегистрации
	|	КОНЕЦ КАК ПериодРегистрации
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентИндексацииЗаработка
	|		ПО ((НЕ Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))))
	|			И (КоэффициентИндексацииЗаработка.Сотрудник = Основной.Сотрудник)
	|			И (КоэффициентИндексацииЗаработка.Период > Основной.ПериодРасчетаСреднегоЗаработкаНачало)
	|			И (КоэффициентИндексацииЗаработка.Период < Основной.ДатаНачалаСобытия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДатыРегистра.Сотрудник КАК Сотрудник,
	|			ДатыРегистра.Регистратор КАК Регистратор,
	|			ДатыРегистра.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки КАК НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|			ИЗ
	|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия >= РаботникиОрганизаций.Период
	|						И ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|						И ОсновныеНачисленияРаботниковОрганизаций.Организация = РаботникиОрганизаций.Сотрудник.Организация
	|			ГДЕ
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &парамРегистратор
	|				И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
	|				И ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия >= &парамДатаЗакона180ФЗ
	|				И (НЕ ОсновныеНачисленияРаботниковОрганизаций.Сторно)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОсновныеНачисленияРаботниковОрганизаций.Регистратор,
	|				ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки,
	|				ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия,
	|				РаботникиОрганизаций.Сотрудник) КАК ДатыРегистра
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО ДатыРегистра.Период = РаботникиОрганизаций.Период
	|					И ДатыРегистра.Сотрудник = РаботникиОрганизаций.Сотрудник
	|		ГДЕ
	|			ВЫБОР
	|					КОГДА ДатыРегистра.ДатаНачалаСобытия >= РаботникиОрганизаций.ПериодЗавершения
	|							И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
	|					ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО Основной.Регистратор = РаботникиОрганизацийСрезПоследних.Регистратор
	|			И Основной.НомерСтроки = РаботникиОрганизацийСрезПоследних.НомерСтроки
	|ГДЕ
	|	Основной.Регистратор = &парамРегистратор
	|	И Основной.ВидРасчета.СпособРасчета В(&парамСпособыРасчета)
	|	И (НЕ Основной.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	Сотрудник,
	|	СпособРасчета,
	|	НачалоБП,
	|	КонецБП,
	|	Период УБЫВ";
	
	// уточним запрос для разных расчетных регистров
	Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ВариантЗаполненияСреднего",
		"ВЫБОР
		|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет)
		|			ТОГДА ВЫБОР
		|					КОГДА Основной.ДатаНачалаСобытия >= &парамДатаЗакона213ФЗ
		|						ТОГДА ""ЗаСчетФССПо213ФЗ""
		|					ИНАЧЕ ""ЗаСчетФССПо255ФЗ""
		|				КОНЕЦ
		|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
		|			ТОГДА ВЫБОР
		|					КОГДА Основной.ПериодРегистрации >= &парамДатаЗакона213ФЗ И Основной.ПериодДействияНачало >= &парамДатаЗакона213ФЗ
		|						ТОГДА ""ЗаСчетФССПо213ФЗ""
		|					КОГДА Основной.ДатаНачалаСобытия >= &парамДатаЗакона255ФЗ
		|						ТОГДА ""ЗаСчетФССПо255ФЗ""
		|					КОГДА Основной.ВариантАлгоритмаРасчета В (&БольничныеПереходногоПериода)
		|						ТОГДА ""ПереходныйПериодПо255ФЗ""
		|					ИНАЧЕ ""ЗаСчетФССПо180ФЗ""
		|				КОНЕЦ
		|		КОГДА Основной.ДатаНачалаСобытия >= &парамДатаПостановления922
		|			ТОГДА ""Средний2008""
		|		ИНАЧЕ ""Средний""
		|	КОНЕЦ КАК ВариантЗаполненияСреднего");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ВариантЗаполненияСреднего",
		"ВЫБОР
		|		КОГДА Основной.ДатаНачалаСобытия >= &парамДатаПостановления922
		|			ТОГДА ""Средний2008""
		|		ИНАЧЕ ""Средний""
		|	КОНЕЦ КАК ВариантЗаполненияСреднего");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций","РегистрРасчета." + ИмяРегистра);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("парамДатаЗакона180ФЗ",		'20060101');
	Запрос.УстановитьПараметр("парамДатаЗакона255ФЗ",		ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006());
	Запрос.УстановитьПараметр("парамДатаЗакона213ФЗ",		ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	ДатаПостановления922	= ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоОтпускам2008();
	Запрос.УстановитьПараметр("парамДатаПостановления922",	ДатаПостановления922);
	Запрос.УстановитьПараметр("парамРегистратор",			Регистратор);
	
	СпособыРасчетаПоСреднему = Новый Массив(7);
	СпособыРасчетаПоСреднему[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку;
	СпособыРасчетаПоСреднему[1] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
	СпособыРасчетаПоСреднему[2] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням;
	СпособыРасчетаПоСреднему[3] = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке;
	СпособыРасчетаПоСреднему[4] = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка;
	СпособыРасчетаПоСреднему[5] = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет;
	СпособыРасчетаПоСреднему[6] = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС;
	
	Запрос.УстановитьПараметр("парамСпособыРасчета", СпособыРасчетаПоСреднему);
	
	БольничныеПереходногоПериода = Новый Массив(7);
	БольничныеПереходногоПериода[0] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаБезОграничений;
	БольничныеПереходногоПериода[1] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничением;
	БольничныеПереходногоПериода[2] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИБезОграничений;
	БольничныеПереходногоПериода[3] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИВРазмереММОТ;
	БольничныеПереходногоПериода[4] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТ;
	БольничныеПереходногоПериода[5] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТиБезОграничений;
	БольничныеПереходногоПериода[6] = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениямиВРазмереММОТиОбщим;
	
	Запрос.УстановитьПараметр("БольничныеПереходногоПериода", БольничныеПереходногоПериода);

	Выборка = Запрос.Выполнить().Выбрать();

	ПредыдущаяСтрокаЗаработок	= Неопределено;
	ПредыдущаяСтрокаПремии		= Неопределено;
	ПредыдущаяСтрокаФиксПремии	= Неопределено;
	
	ТекущийСотрудник			= Неопределено;
	ТекущийСпособ				= Неопределено;
	ТекущийНачалоБП				= Неопределено;
	ТекущийКонецБП				= Неопределено;
	ТекущаяДатаНачалаСобытия	= Неопределено;
	ТекущийКоэффициент			= 1;
	ТекущийВариантЗаполненияСреднего = "";

	// предопределенные виды расчета среднего заработка
	ПоЗаработку		= Неопределено;
	ПоПремиям		= Неопределено;
	ПоФиксПремиям	= Неопределено;
	ПоГодовойПремии	= Неопределено;
	ПоФиксГодовойПремии	= Неопределено;
	
	ПоЗаработкуБЛ			= ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ПоЗаработкуБЛиПособий	= ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
	ПоЗаработкуБЛиПособийС2010 = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010;
	ПоПремиямБЛ				= ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
	ПоФиксПремиямБЛ			= ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
    ПоПремиямБЛиПособий		= ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
    ПоПремиямБЛиПособийС2010 = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010;
	ПоГодовойПремииБЛ		= ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
	ПоФиксГодовойПремииБЛ	= ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
	
	ПоЗаработкуДо			= ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ПоЗаработкуПосле		= ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
	ПоЗаработкуНеИндексируемый = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые;
	ПоПремиямДо				= ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	ПоПремиямПосле			= ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
	ПоПремиямНеИндексируемый = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые;
	ПоФиксПремиямДо			= ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	ПоФиксПремиямПосле		= ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;
	ПоГодовойПремииДо		= ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	ПоГодовойПремииПосле	= ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые;
	ПоГодовойПремииИндексируемый = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;
	ПоФиксГодовойПремииДо	= ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
	ПоФиксГодовойПремииПосле = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;

	Организация = Справочники.Организации.ПустаяСсылка();;
	
	// Скопируем структуру набора записей
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	// Выборку обходим в порядке убывания дат случаев индексации
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = Выборка.Организация
		КонецЕсли;
		
		// Проверим, не сменился ли работник
		Если ТекущийСотрудник <> Выборка.Сотрудник
			ИЛИ ТекущийСпособ <> Выборка.СпособРасчета
			ИЛИ ТекущийНачалоБП <> Выборка.НачалоБП
			ИЛИ ТекущийКонецБП <> Выборка.КонецБП
			ИЛИ ТекущийВариантЗаполненияСреднего <> Выборка.ВариантЗаполненияСреднего
			ИЛИ ТекущаяДатаНачалаСобытия <> Выборка.ДатаНачалаСобытия Тогда
			
			// Закроем строки по предыдущему работнику
			Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
				
				ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(ТекущийНачалоБП);
				
				СтрокаЗаработок = ПредыдущаяСтрокаЗаработок;
				СтрокаПремии = ПредыдущаяСтрокаПремии;
				СтрокаФиксПремии = ПредыдущаяСтрокаФиксПремии;
				
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
					// дозаполним строки по работнику
					СтрокаЗаработок.БазовыйПериодНачало		= ТекущийМесяц;
					СтрокаПремии.БазовыйПериодНачало		= ТекущийМесяц;
					СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийМесяц;
					
					Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
						
						СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
						СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
						
						ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
						ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
						
					ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
						
					КонецЕсли;
					
					// Создадим по первой строке по работнику для заработка и премии
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
					Если Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
						СтрокаФиксПремии = СтрокаПремии;
					Иначе
						СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаработок,ПредыдущаяСтрокаЗаработок);
					ЗаполнитьЗначенияСвойств(СтрокаПремии,ПредыдущаяСтрокаПремии);
					ЗаполнитьЗначенияСвойств(СтрокаФиксПремии,ПредыдущаяСтрокаФиксПремии);
					
					СтрокаЗаработок.БазовыйПериодКонец		= ТекущийМесяц - 1;
					СтрокаПремии.БазовыйПериодКонец			= ТекущийМесяц - 1;
					СтрокаФиксПремии.БазовыйПериодКонец		= ТекущийМесяц - 1;
					СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
					СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
					СтрокаФиксПремии.КоэффициентИндексации	= ТекущийКоэффициент;
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
				
				// закроем последнюю строку по предыдущему работнику
				СтрокаЗаработок.БазовыйПериодНачало		= ТекущийНачалоБП;
				СтрокаПремии.БазовыйПериодНачало		= ТекущийНачалоБП;
				СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийНачалоБП;
				Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
					
					СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
					СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
					ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
					
				ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
					
				КонецЕсли;
				ПредыдущаяСтрокаЗаработок	= Неопределено;
				ПредыдущаяСтрокаПремии		= Неопределено;
				ПредыдущаяСтрокаФиксПремии	= Неопределено;
			КонецЕсли;

			// Запомним новый набор идентификаторов начисления
			ТекущийСотрудник			= Выборка.Сотрудник;
			ТекущийСпособ				= Выборка.СпособРасчета;
			ТекущийНачалоБП				= Выборка.НачалоБП;
			ТекущийКонецБП				= Выборка.КонецБП;
			ТекущаяДатаНачалаСобытия	= Выборка.ДатаНачалаСобытия;
			ТекущийВариантЗаполненияСреднего = Выборка.ВариантЗаполненияСреднего;
			
			ПоЗаработку		= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоЗаработкуДо, ПоЗаработкуПосле);
			ПоПремиям		= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоПремиямДо, ПоПремиямПосле);
			ПоФиксПремиям	= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоФиксПремиямДо, ПоФиксПремиямПосле);
			ПоГодовойПремии	= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоГодовойПремииДо, ПоГодовойПремииПосле);
			ПоФиксГодовойПремии	= ?(Выборка.ДатаНачалаСобытия < ДатаПостановления922, ПоФиксГодовойПремииДо, ПоФиксГодовойПремииПосле);
			
			// Инициализируем данные для нового работника
			ТекущийКоэффициент = 1;
			
			// введем вид расчета по годовой премии
			Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
				СтрокаГП = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоГодовойПремии);
				// при расчете годовой премии в базовый период пишем расчетный период 
				СтрокаГП.БазовыйПериодНачало	= ТекущийНачалоБП;
				СтрокаГП.БазовыйПериодКонец		= ТекущийКонецБП;
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				// годовые премии не выделяются
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" Или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				СтрокаГП = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоГодовойПремииБЛ);
				// при расчете годовой премии в базовый период пишем расчетный период 
				СтрокаГП.БазовыйПериодНачало	= ТекущийНачалоБП;
				СтрокаГП.БазовыйПериодКонец		= ТекущийКонецБП;
			Иначе
			КонецЕсли;
			
			// введем вид расчета по годовой премии, начисляемых фиксированными суммами
			Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
				СтрокаГП = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоФиксГодовойПремии);
				// при расчете годовой премии в базовый период пишем расчетный период 
				СтрокаГП.БазовыйПериодНачало	= ТекущийНачалоБП;
				СтрокаГП.БазовыйПериодКонец		= ТекущийКонецБП;
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				// годовые премии не выделяются
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" Или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				СтрокаГП = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоФиксГодовойПремииБЛ);
				// при расчете годовой премии в базовый период пишем расчетный период 
				СтрокаГП.БазовыйПериодНачало	= ТекущийНачалоБП;
				СтрокаГП.БазовыйПериодКонец		= ТекущийКонецБП;
			Иначе
			КонецЕсли;
			
			// Создадим по первой строке по работнику для заработка и премии
			Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
				СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ" Тогда
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
				СтрокаФиксПремии = СтрокаПремии; // фиксированные премии не выделяются
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособийС2010);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособийС2010);
				СтрокаФиксПремии = СтрокаПремии; // фиксированные премии не выделяются
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛ);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛ);
				СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиямБЛ);
			Иначе
			КонецЕсли;
			
			СтрокаЗаработок.КоэффициентИндексации	= 1;
			СтрокаПремии.КоэффициентИндексации		= 1;
			СтрокаФиксПремии.КоэффициентИндексации	= 1;
			СтрокаЗаработок.БазовыйПериодКонец		= Выборка.КонецБП;
			СтрокаПремии.БазовыйПериодКонец			= Выборка.КонецБП;
			СтрокаФиксПремии.БазовыйПериодКонец		= Выборка.КонецБП;
			
			Если Выборка.Период <= Выборка.КонецБП Тогда

				ТекущийМесяц = НачалоМесяца(СтрокаЗаработок.БазовыйПериодКонец);
				МесяцБазовыйПериодНачало = НачалоМесяца(Выборка.Период);
				Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
					// дозаполним строки по работнику
					СтрокаЗаработок.БазовыйПериодНачало		= ТекущийМесяц;
					СтрокаПремии.БазовыйПериодНачало		= ТекущийМесяц;
					СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийМесяц;
					Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
						
						СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
						СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
						
						ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
						ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
						
					ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
						
						ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
						
					КонецЕсли;
					
					// Создадим по первой строке по работнику для заработка и премии
					Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
						СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
						СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
						СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
					ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ" Тогда
						СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
						СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
						СтрокаФиксПремии = СтрокаПремии;
					ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
						СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособийС2010);
						СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособийС2010);
						СтрокаФиксПремии = СтрокаПремии;
					ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
						СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛ);
						СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛ);
						СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиямБЛ);
					Иначе
					КонецЕсли;
					
					СтрокаЗаработок.БазовыйПериодКонец		= ТекущийМесяц - 1;
					СтрокаПремии.БазовыйПериодКонец			= ТекущийМесяц - 1;
					СтрокаФиксПремии.БазовыйПериодКонец		= ТекущийМесяц - 1;
					СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
					СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
					СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
					
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
					
				КонецЦикла;
				
				// дозаполним первые строки по работнику
				СтрокаЗаработок.БазовыйПериодНачало		= Выборка.Период;
				СтрокаПремии.БазовыйПериодНачало		= Выборка.Период;
				СтрокаФиксПремии.БазовыйПериодНачало	= Выборка.Период;
				Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
					
					СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
					СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
					ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
					
				ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
					
				КонецЕсли;
				
				// и создадим еще по одной строке
				Если Выборка.ВариантЗаполненияСреднего = "Средний" Или Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
					СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
				ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ" Тогда
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
					СтрокаФиксПремии = СтрокаПремии;
				ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособийС2010);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособийС2010);
					СтрокаФиксПремии = СтрокаПремии;
				ИначеЕсли Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо180ФЗ" или Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
					СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛ);
					СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛ);
					СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиямБЛ);
				Иначе
				КонецЕсли;
				
				// дозаполним - знаем все кроме БазовыйПериодНачало
				ТекущийКоэффициент = Выборка.КоэффициентИндексации * ТекущийКоэффициент;
				
				СтрокаЗаработок.БазовыйПериодКонец	= Выборка.Период-1;
				СтрокаПремии.БазовыйПериодКонец		= Выборка.Период-1;
				СтрокаФиксПремии.БазовыйПериодКонец	= Выборка.Период-1;
				
			Иначе
				// здесь запомним только КоэффициентИндексации
				ТекущийКоэффициент = Выборка.КоэффициентИндексации * ТекущийКоэффициент;
			КонецЕсли;
			
			СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
			СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
			СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
			
		Иначе // здесь обрабатывается очередной период, заработок которого индексируется
				
			ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
			МесяцБазовыйПериодНачало = НачалоМесяца(Выборка.Период);
			
			СтрокаЗаработок = ПредыдущаяСтрокаЗаработок;
			СтрокаПремии = ПредыдущаяСтрокаПремии;
			СтрокаФиксПремии = ПредыдущаяСтрокаФиксПремии;
				
			Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
				
				// дозаполним строки по работнику
				СтрокаЗаработок.БазовыйПериодНачало		= ТекущийМесяц;
				СтрокаПремии.БазовыйПериодНачало		= ТекущийМесяц;
				СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийМесяц;
				
				Если Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
					
					СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
					СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
					
					ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
					ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
					
				ИначеЕсли Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
					
					ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
					
				КонецЕсли;
				
				СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
				СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
				Если Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
					СтрокаФиксПремии = СтрокаПремии
				Иначе
					СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаЗаработок,ПредыдущаяСтрокаЗаработок);
				ЗаполнитьЗначенияСвойств(СтрокаПремии,ПредыдущаяСтрокаПремии);
				ЗаполнитьЗначенияСвойств(СтрокаФиксПремии,ПредыдущаяСтрокаФиксПремии);
				
				СтрокаЗаработок.БазовыйПериодКонец		= ТекущийМесяц - 1;
				СтрокаПремии.БазовыйПериодКонец			= ТекущийМесяц - 1;
				СтрокаФиксПремии.БазовыйПериодКонец		= ТекущийМесяц - 1;
				СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
				СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
				СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
				
				ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
				
			КонецЦикла;
			
			// закроем предыдущую строку
			СтрокаЗаработок.БазовыйПериодНачало	= Выборка.Период;
			СтрокаПремии.БазовыйПериодНачало	= Выборка.Период;
			СтрокаФиксПремии.БазовыйПериодНачало= Выборка.Период;
			
			Если Выборка.ВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				
				СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
				СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
				
				ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
				ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
				
			ИначеЕсли Выборка.ВариантЗаполненияСреднего = "Средний2008" Тогда
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
				
			КонецЕсли;
			
			// Создадим очередные строки
			СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
			СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
			Если Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				СтрокаФиксПремии = СтрокаПремии;
			Иначе
				СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаЗаработок,ПредыдущаяСтрокаЗаработок);
			ЗаполнитьЗначенияСвойств(СтрокаПремии,ПредыдущаяСтрокаПремии);
			ЗаполнитьЗначенияСвойств(СтрокаФиксПремии,ПредыдущаяСтрокаФиксПремии);
					
			// дозаполним - знаем все кроме БазовыйПериодНачало
			ТекущийКоэффициент = Выборка.КоэффициентИндексации * ТекущийКоэффициент;
			
			СтрокаЗаработок.БазовыйПериодКонец		= Выборка.Период-1;
			СтрокаПремии.БазовыйПериодКонец			= Выборка.Период-1;
			СтрокаФиксПремии.БазовыйПериодКонец		= Выборка.Период-1;
			СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
			СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
			СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
			
		КонецЕсли;
		
		// Сохраним для следующей итерации
		ПредыдущаяСтрокаЗаработок	= СтрокаЗаработок;
		ПредыдущаяСтрокаПремии		= СтрокаПремии;
		ПредыдущаяСтрокаФиксПремии	= СтрокаФиксПремии;
		
		// Расчет минимальной и максимальной из дат начала и окончания расчетных периодов 
		//(эти данные нужны для процедуры ПолучитьДанныеДляРасчета
		Если ДатаНачалаРасчетаСреднего = '00010101' Тогда
			ДатаНачалаРасчетаСреднего = Выборка.НачалоБП;
		Иначе
			ДатаНачалаРасчетаСреднего = Мин(ДатаНачалаРасчетаСреднего, Выборка.НачалоБП);
		КонецЕсли;
		Если ДатаОкончанияРасчетаСреднего = '00010101' Тогда
			ДатаОкончанияРасчетаСреднего = Выборка.КонецБП;
		Иначе
			ДатаОкончанияРасчетаСреднего = Макс(ДатаОкончанияРасчетаСреднего, Выборка.КонецБП);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПредыдущаяСтрокаЗаработок <> Неопределено Тогда
		
		ТекущийМесяц = НачалоМесяца(ПредыдущаяСтрокаЗаработок.БазовыйПериодКонец);
		МесяцБазовыйПериодНачало = НачалоМесяца(ТекущийНачалоБП);
		
		СтрокаЗаработок		= ПредыдущаяСтрокаЗаработок;
		СтрокаПремии		= ПредыдущаяСтрокаПремии;
		СтрокаФиксПремии	= ПредыдущаяСтрокаФиксПремии;
		
		Пока ТекущийМесяц > МесяцБазовыйПериодНачало Цикл
			
			// дозаполним строки по работнику
			СтрокаЗаработок.БазовыйПериодНачало		= ТекущийМесяц;
			СтрокаПремии.БазовыйПериодНачало		= ТекущийМесяц;
			СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийМесяц;
			Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
				
				СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
				СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
				
				ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
				ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
				
			ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
				
				ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
				
			КонецЕсли;
			
			// Создадим по первой строке по работнику для заработка и премии
			СтрокаЗаработок = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработку);
			СтрокаПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиям);
			Если Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо255ФЗ"
						Или Выборка.ВариантЗаполненияСреднего = "ЗаСчетФССПо213ФЗ" Тогда
				СтрокаФиксПремии = СтрокаПремии;
			Иначе
				СтрокаФиксПремии = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоФиксПремиям);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаЗаработок,ПредыдущаяСтрокаЗаработок);
			ЗаполнитьЗначенияСвойств(СтрокаПремии,ПредыдущаяСтрокаПремии);
			ЗаполнитьЗначенияСвойств(СтрокаФиксПремии,ПредыдущаяСтрокаФиксПремии);
			
			СтрокаЗаработок.БазовыйПериодКонец		= ТекущийМесяц - 1;
			СтрокаПремии.БазовыйПериодКонец			= ТекущийМесяц - 1;
			СтрокаФиксПремии.БазовыйПериодКонец		= ТекущийМесяц - 1;
			СтрокаЗаработок.КоэффициентИндексации	= ТекущийКоэффициент;
			СтрокаПремии.КоэффициентИндексации		= ТекущийКоэффициент;
			СтрокаФиксПремии.КоэффициентИндексации	= ?(Выборка.ВариантЗаполненияСреднего = "Средний2008",1,ТекущийКоэффициент);
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
			
		КонецЦикла;
		
		// закроем последнюю строку по предыдущему работнику
		СтрокаЗаработок.БазовыйПериодНачало		= ТекущийНачалоБП;
		СтрокаПремии.БазовыйПериодНачало		= ТекущийНачалоБП;
		СтрокаФиксПремии.БазовыйПериодНачало	= ТекущийНачалоБП;
		Если ТекущийВариантЗаполненияСреднего = "ПереходныйПериодПо255ФЗ" Тогда
			
			СтрокаЗаработокПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор,ПоЗаработкуБЛиПособий);
			СтрокаПремииПереходногоПериода = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямБЛиПособий);
			
			ЗаполнитьЗначенияСвойств(СтрокаЗаработокПереходногоПериода,СтрокаЗаработок,,"ВидРасчета");
			ЗаполнитьЗначенияСвойств(СтрокаПремииПереходногоПериода,СтрокаПремии,,"ВидРасчета");
			
		ИначеЕсли ТекущийВариантЗаполненияСреднего = "Средний2008" Тогда
			
			ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоЗаработкуНеИндексируемый);
			ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаЗаработок,,"ВидРасчета,КоэффициентИндексации");
			
			ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоПремиямНеИндексируемый);
			ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета,КоэффициентИндексации");
			
			ДополнительнаяСтрока = ПроведениеРасчетов.СоздатьСтрокуРасчетаСреднего(Выборка, ТаблицаЗаписей, Регистратор, ПоГодовойПремииИндексируемый);
			ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока,СтрокаПремии,,"ВидРасчета");
			
		КонецЕсли;
	КонецЕсли;
	
	//начало изменений Ожиганов А. 30.01.2017 очистка важных реквизитов при использовании обмена с Логинет 61716
	//пронумеровать строки
	к = 1;
	пока к < ТаблицаЗаписей.Количество() цикл
		ТаблицаЗаписей[к].Номерстроки = к +1;
		к = к +1;
	КонецЦикла;	
		
	//конец изменений 
	
	// Загрузим полученные периоды в набор записей
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	// Зафиксируем нарезанные записи
	НаборЗаписей.Записать();

	////////////////////////////////////////////////////////////////////////////////
	// базовые данные для расчета ресурсов
	
	ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("РасчетнаяБазаСреднегоЗаработка", КомментироватьРасчет, Запрос);
	
	ПоГодовойПремии = Новый Массив;
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
	ПоГодовойПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
	
	Заработок = Новый Массив;
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
	Запрос.УстановитьПараметр("парамЗаработокБезБольничных", Заработок);
	
	Заработок = Новый Массив;
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
	Запрос.УстановитьПараметр("парамЗаработок",	Заработок);
	
	Запрос.УстановитьПараметр("парамПоГодовойПремии",	ПоГодовойПремии);
	Запрос.УстановитьПараметр("парамПоГодовойПремииИндексируемые", ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
	Запрос.УстановитьПараметр("парамДатаС", НачалоМесяца(ДатаНачалаРасчетаСреднего));
	Запрос.УстановитьПараметр("парамДатаПо", КонецМесяца(ДатаОкончанияРасчетаСреднего));
	
	ПропорциональныеПремии = Новый Массив;
	Если Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "НеУменьшатьПропорциональныеПремии") Тогда 
		// в учетной политике записано дополнительно уменьшать премии при выходе их базового периода за пределы расчетного периода
		ПропорциональныеПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые);
		ПропорциональныеПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
		ПропорциональныеПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые);
		ПропорциональныеПремии.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПропорциональныеПремии",ПропорциональныеПремии);
	
	//начало изменений Ожиганов А. 31.01.2017 пробуем ооптимизировать расчет отпускных
	//ВыборкаБазы = Запрос.Выполнить().Выбрать();
	тВыборкаБазы = Запрос.Выполнить().Выгрузить();
	тВыборкаБазы.Индексы.Добавить("НомерСтроки");
	//конец изменений 
	
	ТекстЗапроса = "";
	ПроведениеРасчетов.ДописатьАлгоритмВЗапрос("ВремяСреднегоЗаработка", КомментироватьРасчет, Запрос, ТекстЗапроса);
	
	ТекстДопТаблицы = 
	"ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК БазовыйПериодНачало,
	|	0 КАК ОтработаноПоПятидневке,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТДополнительныеДанные
	|ГДЕ
	|	ЛОЖЬ";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, ТекстДопТаблицы, ТекстДополнительнойТаблицыРасчетаСреднего());
	
	ПоФиксПремиям = ПропорциональныеПремии;
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые);
	ПоФиксПремиям.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые);
	Запрос.УстановитьПараметр("ФиксПремии", ПоФиксПремиям);
	
	Заработок = Новый Массив();
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	Заработок.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	Запрос.УстановитьПараметр("ЗаработокПрошлыхЛет", Заработок);
	Заработок = Новый Массив();
	Запрос.УстановитьПараметр("парамДатаИзмененияПорядкаРасчета2006", ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийТрудовогоКодекса2006());
	
	СоответствиеФиксПремий = Новый Соответствие;
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ,Истина);
	СоответствиеФиксПремий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий,Истина);
	СоответствиеОсновногозаработка = Новый Соответствие;
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку,Истина);
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые,Истина);
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ,Истина);
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий,Истина);
	СоответствиеОсновногозаработка.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010,Истина);

	ВыборкаОтработанноеВремя = Запрос.Выполнить().Выбрать();
	
	// заполним результаты в наборе записей
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ВГраница = НаборЗаписей.Количество() - 1;
	
	Если КомментироватьРасчет Тогда
		КомментарийРасчетаСреднего = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет среднего заработка");
	Конецесли;
		
	Для Индекс = НГраница По ВГраница Цикл
		СтрокаДвижений = НаборЗаписей[Индекс];
		
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		ЗаписьСреднегоНеОбработана = Истина;
		
		ТекущийНомерСтроки = НеОпределено;
		ТекущийЧислоМесяцев = НеОпределено;
		ТекущийПериодРасчета = НеОпределено;
		ТекущийДополнительноУменьшатьПропорциональныеПремии = Ложь;
		НеБылоСообщениеОСводномТабеле = Истина;
		//начало изменений Ожиганов А. 31.01.2017 пробуем ооптимизировать расчет отпускных
		мВыборкаБазы =  тВыборкаБазы.НайтиСтроки(СтруктураПоиска);
		//конец изменений 		 
		//начало изменений Ожиганов А. 31.01.2017 пробуем ооптимизировать расчет отпускных
		//Пока ВыборкаБазы.НайтиСледующий(СтруктураПоиска) Цикл
		//Пока ВыборкаБазы.НайтиСледующий(СтруктураПоиска) Цикл
		//Пока ВыборкаБазы  Цикл
		Если мВыборкаБазы.Количество() > 1 Тогда
		///	Сообщить("Есть несколько строк");
		КонецЕсли;
		
		Для Каждого ВыборкаБазы из мВыборкаБазы Цикл
		//конец изменений 	
			ЗаписьСреднегоНеОбработана = Ложь;
			
			Если ТекущийНомерСтроки = ВыборкаБазы.НомерСтроки Тогда
				Если НЕ (ТекущийЧислоМесяцев = ВыборкаБазы.ЧислоМесяцев И ТекущийПериодРасчета = ВыборкаБазы.ПериодРасчетаСреднегоЗаработка И ТекущийДополнительноУменьшатьПропорциональныеПремии = ВыборкаБазы.ДополнительноУменьшатьПропорциональныеПремии) Тогда
					// вводим новые строки набора записей
					ДопСтрокаДвижений = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ДопСтрокаДвижений,СтрокаДвижений);
					СтрокаДвижений = ДопСтрокаДвижений;
					СтрокаДвижений.Результат = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаОтработанноеВремя.НайтиСледующий(СтруктураПоиска) Или ТекущийНомерСтроки = ВыборкаБазы.НомерСтроки Тогда 
				Если СоответствиеФиксПремий[СтрокаДвижений.ВидРасчета] <> Неопределено Или ВыборкаБазы.ДополнительноУменьшатьПропорциональныеПремии Тогда
					// для "премий фиксированной суммой" надо учитывать отработанное время
					СтрокаДвижений.ОтработаноПоПятидневке	= ВыборкаОтработанноеВремя.ОтработаноПоПятидневке;
					СтрокаДвижений.НормаПоПятидневке		= ВыборкаОтработанноеВремя.НормаПоПятидневкеПоПроизвКалендарю;
				ИначеЕсли СоответствиеОсновногозаработка[СтрокаДвижений.ВидРасчета] <> Неопределено Тогда
					СтрокаДвижений.ОтработаноДней			= ВыборкаОтработанноеВремя.ОтработаноДней;
					СтрокаДвижений.ОтработаноЧасов			= ВыборкаОтработанноеВремя.ОтработаноЧасов;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДвижений,ВыборкаБазы, "ЧислоМесяцев, ПериодРасчетаСреднегоЗаработка");
			
			Если ВыборкаБазы.ОшибкаВводаСводногоТабеля Тогда
				Если НеБылоСообщениеОСводномТабеле Тогда
					Если Не КомментироватьРасчет Тогда
						КомментарийРасчетаСреднего = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет среднего заработка");
					КонецЕсли;
					ОбщегоНазначенияЗК.КомментарийРасчета("За период с " + Формат(СтрокаДвижений.БазовыйПериодНачало,"ДФ=dd.MM.yyyy") + " по " + Формат(СтрокаДвижений.БазовыйПериодКонец,"ДФ=dd.MM.yyyy") + " не удалось определить базовые начисления, так как в этом месяце введен сводный табель.", КомментарийРасчетаСреднего);
					НеБылоСообщениеОСводномТабеле = Ложь;
				КонецЕсли;
			Иначе
				Если ВыборкаБазы.ДополнительноУменьшатьПропорциональныеПремии И СтрокаДвижений.НормаПоПятидневке <> 0 Тогда
					СтрокаДвижений.Результат = СтрокаДвижений.Результат + ВыборкаБазы.РезультатБаза * СтрокаДвижений.ОтработаноПоПятидневке / СтрокаДвижений.НормаПоПятидневке;
				Иначе
					СтрокаДвижений.Результат = СтрокаДвижений.Результат + ВыборкаБазы.РезультатБаза;
				КонецЕсли;
				СтрокаДвижений.СкидкаПоСтраховымВзносам	= СтрокаДвижений.СкидкаПоСтраховымВзносам + ВыборкаБазы.СкидкаПоСтраховымВзносам;
				Если КомментироватьРасчет и ВыборкаБазы.РезультатБаза <> 0 Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Вид начисления: " + ВыборкаБазы.ВидРасчетаНаименование + ", сумма: " + ВыборкаБазы.РезультатБаза + ?(ВыборкаБазы.СкидкаПоСтраховымВзносам = 0,"",", учтено скидки" + ВыборкаБазы.СкидкаПоСтраховымВзносам), КомментарийРасчетаСреднего);
				КонецЕсли;
			КонецЕсли;
			
			ТекущийНомерСтроки = ВыборкаБазы.НомерСтроки;
			ТекущийЧислоМесяцев = ВыборкаБазы.ЧислоМесяцев;
			ТекущийПериодРасчета = ВыборкаБазы.ПериодРасчетаСреднегоЗаработка;
			ТекущийДополнительноУменьшатьПропорциональныеПремии = ВыборкаБазы.ДополнительноУменьшатьПропорциональныеПремии;
		КонецЦикла;
		
		Если ЗаписьСреднегоНеОбработана И СоответствиеОсновногозаработка[СтрокаДвижений.ВидРасчета] <> Неопределено И ВыборкаОтработанноеВремя.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаДвижений.ОтработаноДней			= ВыборкаОтработанноеВремя.ОтработаноДней;
			СтрокаДвижений.ОтработаноЧасов			= ВыборкаОтработанноеВремя.ОтработаноЧасов;
		КонецЕсли;
		
	КонецЦикла;
	
	//дополнительный проход
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТипЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	Результат.Колонки.Добавить("Результат",ТипЧисла);
	Результат.Колонки.Добавить("ОтработаноДней",ТипЧисла);
	Результат.Колонки.Добавить("ОтработаноЧасов",ТипЧисла);
	
	Результат.Колонки.Добавить("ДляСреднегоЗаработок",ТипЧисла);
	Результат.Колонки.Добавить("СреднийЗаработок",ТипЧисла);
	
	Результат.Индексы.Добавить("Сотрудник");
	
	ОсновнойЗаработок = Новый Соответствие;
	ОсновнойЗаработок.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку,Истина);
	ОсновнойЗаработок.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ,Истина);
	ОсновнойЗаработок.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые,Истина);
	
	ПоФиксПремиям = Новый Соответствие;
	ПоФиксПремиям.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям,Истина);
	ПоФиксПремиям.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ,Истина);
	
	ПоПремиям = Новый Соответствие;
	ПоПремиям.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям,Истина);
	ПоПремиям.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ,Истина);
	ПоПремиям.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые,Истина);
	ПоПремиям.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые,Истина);
	
	ПоФиксПремиямНеИндексируемые = Новый Соответствие;
	ПоФиксПремиямНеИндексируемые.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии,Истина);
	ПоФиксПремиямНеИндексируемые.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ,Истина);
	ПоФиксПремиямНеИндексируемые.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые,Истина);
	ПоФиксПремиямНеИндексируемые.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые,Истина);
			
	//Запрос.УстановитьПараметр("ОсновнойЗаработок", ОсновнойЗаработок); // Основной заработок индексируемый
	//Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
	//Запрос.УстановитьПараметр("ПоПремиям", ПоПремиям);  // Премии полностью учитываемые, индексируемые
	//Запрос.УстановитьПараметр("ПоФиксПремиям", ПоФиксПремиям); // Премии учитываемые частично, индексируемые
	//Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые", ПоФиксПремиямНеИндексируемые); // Премии учитываемые частично, не индексируемые
			
			// для реализации Федеральных законов:
			//	от 22.12.2005 г. № 180-ФЗ и от 29 декабря 2006 г. № 255-ФЗ - по больничным листам
			//	от 5 декабря 2006 г. № 207-ФЗ - по отпуску по уходу за детьми
			// при расчете пособий заработок учитывается по всем местам работы
			
			//Запрос.УстановитьПараметр("ОсновнойЗаработокПособий", ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			
	СоставляющиеСреднегоЗаработкаПособий = Новый Соответствие;
	СоставляющиеСреднегоЗаработкаПособий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий,Истина);
	СоставляющиеСреднегоЗаработкаПособий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий,Истина);
	СоставляющиеСреднегоЗаработкаПособий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий,Истина);
	СоставляющиеСреднегоЗаработкаПособий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий,Истина);
	СоставляющиеСреднегоЗаработкаПособий.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий,истина);

	СоставляющиеПрочихСреднихЗаработков = Новый  Соответствие ;
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ,истина);
	СоставляющиеПрочихСреднихЗаработков.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ,истина);	
	
	ОсновнойЗаработокНеиндексируемый = Новый Соответствие;
	ОсновнойЗаработокНеиндексируемый.Вставить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
	
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		Если ТекСтрока.Результат = 0 и ТекСтрока.ОтработаноДней = 0 и ТекСтрока.ОтработаноЧасов=0 Тогда
			продолжить;
		КонецЕсли;	
		
		СреднийЗаработок = 0;
		
		Если ОсновнойЗаработок.Получить(ТекСтрока.ВидРасчета) <> Неопределено Тогда
			СреднийЗаработок = Окр(ТекСтрока.Результат*?(ТекСтрока.КоэффициентИндексации <1,1,ТекСтрока.КоэффициентИндексации),2);
		ИначеЕсли ОсновнойЗаработокНеиндексируемый.Получить(ТекСтрока.ВидРасчета) <> Неопределено Тогда
			СреднийЗаработок = Окр(ТекСтрока.Результат,2);
		ИначеЕсли Текстрока.ЧислоМесяцев  = 0 Тогда
			СреднийЗаработок = 0;
		Иначе
			ДобКоэфф = ?(ТекСтрока.ЧислоМесяцев > ТекСтрока.ПериодРасчетаСреднегоЗаработка,
			ТекСтрока.ПериодРасчетаСреднегоЗаработка / ТекСтрока.ЧислоМесяцев,1);
			Если ПоПремиям.Получить(ТекСтрока.ВидРасчета) <> Неопределено Тогда
				 СреднийЗаработок = Окр(ТекСтрока.Результат*?(ТекСтрока.КоэффициентИндексации <1,1,ТекСтрока.КоэффициентИндексации)*ДобКоэфф,2);
			ИначеЕсли ПоФиксПремиям.Получить(ТекСтрока.ВидРасчета) <> Неопределено Тогда
				 СреднийЗаработок = Окр(ТекСтрока.Результат * 
				 ?(ТекСтрока.КоэффициентИндексации <1,1,ТекСтрока.КоэффициентИндексации)*
				 ?(ТекСтрока.НормаПоПятидневке=0,0,ТекСтрока.ОтработаноПоПятидневке/ТекСтрока.НормаПоПятидневке)*
				 ДобКоэфф,2);
			ИначеЕсли ПоФиксПремиямНеИндексируемые.Получить(ТекСтрока.ВидРасчета) <> Неопределено Тогда
				 СреднийЗаработок = Окр(ТекСтрока.Результат * 				 
				 ?(ТекСтрока.НормаПоПятидневке=0,0,ТекСтрока.ОтработаноПоПятидневке/ТекСтрока.НормаПоПятидневке)*
				 ДобКоэфф,2);
			ИначеЕсли СоставляющиеСреднегоЗаработкаПособий.Получить(ТекСтрока.ВидРасчета) <> Неопределено Тогда
				 СреднийЗаработок = 0;
			Иначе
				 СреднийЗаработок  =  ТекСтрока.Результат;
			КонецЕсли;	
		КонецЕсли;	
		
		Если СреднийЗаработок <> 0 или  
			ТекСтрока.ОтработаноДней <> 0 или ТекСтрока.ОтработаноЧасов <> 0 
			Тогда
			СтрокаТЧ =  Результат.Найти(ТекСтрока.Сотрудник,"Сотрудник");
			Если СтрокаТЧ = Неопределено тогда
				СтрокаТЧ = Результат .Добавить();
				СтрокаТЧ.Сотрудник 			  =  ТекСтрока.Сотрудник;
				СтрокаТЧ.СреднийЗаработок	  = 0; 
			КонецЕсли;	
			
			
			СтрокаТЧ.Результат 			  =  СтрокаТЧ.Результат + ТекСтрока.Результат;
			СтрокаТЧ.ОтработаноДней 	  =  СтрокаТЧ.ОтработаноДней  + ТекСтрока.ОтработаноДней;
			СтрокаТЧ.ОтработаноЧасов 	  =  СтрокаТЧ.ОтработаноЧасов + ТекСтрока.ОтработаноЧасов;
			СтрокаТЧ.ДляСреднегоЗаработок =  СтрокаТЧ.ДляСреднегоЗаработок + СреднийЗаработок;
		КонецЕсли;	
	КонецЦикла;
	
	для Каждого ТекСтрока Из Результат Цикл
		Если ТекСтрока.ОтработаноЧасов <> 0 Тогда
			ТекСтрока.СреднийЗаработок  = Окр(ТекСтрока.ДляСреднегоЗаработок/ТекСтрока.ОтработаноЧасов,2);
		ИначеЕсли ТекСтрока.ОтработаноДней <> 0 Тогда
			ТекСтрока.СреднийЗаработок  = Окр(ТекСтрока.ДляСреднегоЗаработок/ТекСтрока.ОтработаноДней,2);
		Иначе
			ТекСтрока.СреднийЗаработок = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	
	 НаборЗаписей.Очистить();
	 возврат;
	
	// Отсортируем периоды в наборе записей
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	ТаблицаЗаписей .Свернуть("Сотрудник","Результат,ОтработаноДней");
	
	Результат =ТаблицаЗаписей;
	
	//для Каждого ТекСтрока из ТаблицаЗаписей Цикл
	//	Если ТекСтрока.ОтработаноДней <> 0 Тогда
	//		Сообщить(""+ТекСтрока.Сотрудник+" ср "+Окр(ТекСтрока.Результат/ТекСтрока.ОтработаноДней,2));
	//	Иначе
	//		Сообщить(""+ТекСтрока.Сотрудник+" ср "+0+" о дней отраб");
	//	КонецЕслИ;	
	//КонецЦикла;	
	
	возврат;
	ТаблицаЗаписей.Сортировать("Сотрудник, СпособРасчета, ДатаНачалаСобытия, ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода, БазовыйПериодНачало");
	
	Отработано = ТаблицаЗаписей.Итог("ОтработаноДней");
	Если Отработано <> 0 Тогда
		Сообщить(""+ТаблицаЗаписей[0]["Сотрудник"]+" ср "+Окр(ТаблицаЗаписей.Итог("Результат")/Отработано,2));
	Иначе
		Сообщить(""+ТаблицаЗаписей[0]["Сотрудник"]+" ср "+0+" о дней отраб");
	КонецЕсли;	
	
	
	//НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	//Запишем результат
	//НаборЗаписей.Записать();

КонецПроцедуры
//конец изменений Ожиганов А. 27.01.2017 