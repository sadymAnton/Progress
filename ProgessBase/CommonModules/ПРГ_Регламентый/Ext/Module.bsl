	//Blik 290216 49617 н
Функция ПолучитьНастройкиРассылкиУведомлений() 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""НастройкиРассылкиУведомления""";
	
	Результат = Запрос.Выполнить().Выгрузить();
		
	Возврат Результат;	
КонецФункции
	//Blik 290216 49617 к
	
//Blik 260617 67223 н	
Функция ПолучитьСписокРаботающихСотрудников(ДатаОстатков,ПодразделенияОрганизаций)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//BLik 090617 66520 н
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.ПодразделениеОрганизации,
	|	ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения КАК ДатаРождения,
	|	ВложенныйЗапрос.Сотрудник.Физлицо.Пол КАК пол,
	|	ВложенныйЗапрос.Сотрудник.Физлицо
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|		РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|		РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ПричинаИзмененияСостояния <> &ПричинаИзмененияСостояния
	|	И ВложенныйЗапрос.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)";
	
	Запрос.УстановитьПараметр("Дата", ДатаОстатков);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделенияОрганизаций);
	Запрос.УстановитьПараметр("ПричинаИзмененияСостояния", Перечисления.ПричиныИзмененияСостояния.Увольнение);  //BLik 090617 66520
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	возврат Результат;
	
	
КонецФункции 

Функция ПолучитьСписокРаботающихСотрудников_Ю(ДатаОстатков,ПодразделенияОрганизаций)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//BLik 090617 66520 н
	//"ВЫБРАТЬ
	//|	ВложенныйЗапрос.Сотрудник,
	//|	ВложенныйЗапрос.ПодразделениеОрганизации,
	//|	ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения КАК ДатаРождения,
	//|	ВложенныйЗапрос.Сотрудник.Физлицо.Пол КАК пол,
	//|	ВложенныйЗапрос.Сотрудник.Физлицо
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	//|		РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	//|		РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	//|	ИЗ
	//|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних) КАК ВложенныйЗапрос
	//|ГДЕ
	//|	ВложенныйЗапрос.ПричинаИзмененияСостояния <> &ПричинаИзмененияСостояния
	//|	И ВложенныйЗапрос.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)";
	
	//Blik 71323 051017 н в запрос внесены изменения для рассылки 1 раз в месяц
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.ПодразделениеОрганизации,
	|	ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения КАК ДатаРождения,
	|	ВложенныйЗапрос.Сотрудник.Физлицо.Пол КАК пол,
	|	ВложенныйЗапрос.Сотрудник.Физлицо,
	|	ДОБАВИТЬКДАТЕ(&Дата, ГОД, -50) КАК _50Лет,
	|	ДОБАВИТЬКДАТЕ(&Дата, ГОД, -55) КАК _55Лет,
	|	ДОБАВИТЬКДАТЕ(&Дата, ГОД, -60) КАК _560Лет,
	//Blik 71323 051017 н
	//|	ВЫБОР
	//|		КОГДА ДОБАВИТЬКДАТЕ(&Дата, ГОД, -50) = ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения
	//|			ТОГДА 1
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Юбиляр_50,
	//|	ВЫБОР
	//|		КОГДА ВложенныйЗапрос.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДОБАВИТЬКДАТЕ(&Дата, ГОД, -55) = ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения
	//|						ТОГДА 1
	//|					ИНАЧЕ 0
	//|				КОНЕЦ
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Юбиляр_55,
	//|	ВЫБОР
	//|		КОГДА ВложенныйЗапрос.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Мужской)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДОБАВИТЬКДАТЕ(&Дата, ГОД, -60) = ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения
	//|						ТОГДА 1
	//|					ИНАЧЕ 0
	//|				КОНЕЦ
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Юбиляр_60
	|	ВЫБОР
	|		КОГДА ДОБАВИТЬКДАТЕ(КонецПериода(ДобавитьКДате(&Дата,Месяц,1),Месяц), ГОД, -50) = КонецПериода(ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения,Месяц)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Юбиляр_50,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(КонецПериода(ДобавитьКДате(&Дата,Месяц,1),Месяц), ГОД, -55) = КонецПериода(ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения,Месяц)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Юбиляр_55,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Мужской)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(КонецПериода(ДобавитьКДате(&Дата,Месяц,1),Месяц), ГОД, -60) = КонецПериода(ВложенныйЗапрос.Сотрудник.Физлицо.ДатаРождения,Месяц)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Юбиляр_60,
	|	ВложенныйЗапрос.Должность
	//Blik 71323 051017 к
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|		РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|		РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//Blik 71323 051017 н
	|		РаботникиОрганизацийСрезПоследних.Должность КАК Должность
	|	ИЗ
	//|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(КонецПериода(ДобавитьКДате(&Дата,Месяц,1)), ) КАК РаботникиОрганизацийСрезПоследних
	//Blik 71323 051017 к
	|	ГДЕ
	|		РаботникиОрганизацийСрезПоследних.Сотрудник.ПометкаУдаления = ЛОЖЬ
	|		И РаботникиОрганизацийСрезПоследних.Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Сотрудник КАК Сотрудник,
	//Blik 71323 051017 н
	//|	ВТ_Данные.ПодразделениеОрганизации,
	|	ВТ_Данные.ПодразделениеОрганизации как Подразделение,
	|	ВТ_Данные.Должность как Должность,
	//Blik 71323 051017 к
	|	ВТ_Данные.ДатаРождения КАК ДатаРождения,
	|	ВТ_Данные.пол,
	|	ВТ_Данные.СотрудникФизлицо,
	|	ВТ_Данные.Юбиляр_50,
	|	ВТ_Данные.Юбиляр_55,
	|	ВТ_Данные.Юбиляр_60,
	|	РАЗНОСТЬДАТ(ВТ_Данные.ДатаРождения, &Дата, ГОД) КАК Лет
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	(ВТ_Данные.Юбиляр_50 = 1
	|			ИЛИ ВТ_Данные.Юбиляр_55 = 1
	|			ИЛИ ВТ_Данные.Юбиляр_60 = 1)";
    //BLik 090617 66520 к
	Запрос.УстановитьПараметр("Дата", ДатаОстатков);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделенияОрганизаций);
	//Запрос.УстановитьПараметр("ПричинаИзмененияСостояния", Перечисления.ПричиныИзмененияСостояния.Увольнение);  //BLik 090617 66520
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	возврат Результат;
	
	
КонецФункции 
//Blik 260617 67223 к

Функция ПолучитьОстаткиОтпусков(ДатаОстатков,ПодразделенияОрганизаций)
	табСотрудников=ПолучитьСписокРаботающихСотрудников(ДатаОстатков,ПодразделенияОрганизаций);
	возврат ОстаткиОтпусков.ОстатокОтпускаСпискаСотрудниковНаДату(табСотрудников.ВыгрузитьКолонку("Сотрудник"), ДатаОстатков);
КонецФункции 

Функция  сформироватьОстаткиОтпусков(ПодразделенияОрганизаций)
	ДатаОстатков=ТекущаяДата();
	
	таботпусков=ПолучитьОстаткиОтпусков(ДатаОстатков,ПодразделенияОрганизаций);
	таботпусков = ДополнитьТабОтпусковСостоянием(таботпусков);  //Blik 280815 43325
	ТабДок=Новый ТабличныйДокумент;
	макет=ПолучитьОбщийМакет("ОстаткиОтпусков");
	ШапкаОбласть=макет.ПолучитьОбласть("Шапка");
	строкаОбласть=макет.ПолучитьОбласть("СТрока");
	
	ШапкаОбласть.Параметры.Дата="Остатки отпусков на "+Формат(ДатаОстатков,"ДЛФ=D");
	
	ТабДок.Вывести(ШапкаОбласть);
	таботпусков.сортировать("Сотрудник");
	Для каждого стр Из таботпусков Цикл
		строкаОбласть.Параметры.Заполнить(стр);
		ТабДок.Вывести(строкаОбласть);
	КонецЦикла;
	
	имяфайла=КаталогВременныхФайлов()+"ОстаткиОтпусков.xls";
	
	ТабДок.Записать(имяфайла,ТипФайлаТабличногоДокумента.XLS);
	
	Если не таботпусков.Количество()=0 тогда
		возврат новый Структура("ТекстПисьма,ТемаПисьма,имяфайла","Остатки отпусков на "+Формат(ДатаОстатков,"ДЛФ=D"),"Остатки отпусков на "+Формат(ДатаОстатков,"ДЛФ=D"),имяфайла);
	Иначе
		возврат Неопределено;
	КонецЕсли;
	
	///ОправитьФайл("Остатки отпусков","VTumanov@lip.progressfood.ru","проверка",имяфайла)
	
	
	
КонецФункции
//Blik 131113 н по задаче 23227
Функция СформироватьФактОтпусков(ПодразделенияОрганизаций)
	
	ДатаОстатков=ТекущаяДата();
	Дата=ТекущаяДата();

	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ОстаткиОтпусков");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("ШапкаФО"); 
	ОбластьМакетаПодр = Макет.ПолучитьОбласть("ПодразделениеФО"); 
    ОбластьМакетаСотр = Макет.ПолучитьОбласть("СотрудникФО"); 
	
    ПредставлениеДатыОтч = Формат(Дата, "ДФ='ММММ гггг'"); 	
	ОбластьМакетаШапка.Параметры.ПериодОтчета =  СокрЛП(ПредставлениеДатыОтч);
	ПредставлениеТекДаты = Формат(Дата, "ДЛФ=ДД"); 	
	ОбластьМакетаШапка.Параметры.ТекДата =  СокрЛП(ПредставлениеТекДаты);
    ТабДок.Вывести(ОбластьМакетаШапка);

	СписокОтпусков = Новый СписокЗначений;
	СписокОтпусков.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	СписокОтпусков.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
    СписокОтпусков.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебный);
    СписокОтпусков.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый);
    СписокОтпусков.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
    СписокОтпусков.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подразделение,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	СостояниеРаботниковОрганизаций.Состояние КАК ВИДОтпуска,
	|	СостояниеРаботниковОрганизаций.Период КАК Начало,
	|	ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизаций.ПериодЗавершения, ДЕНЬ, -1) КАК Окончание,
	|	РАЗНОСТЬДАТ(СостояниеРаботниковОрганизаций.Период, СостояниеРаботниковОрганизаций.ПериодЗавершения, ДЕНЬ) КАК КолвоДней,
	|	СостояниеРаботниковОрганизацийСрезПоследних.Состояние
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&дата, ) КАК РаботникиОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И (СостояниеРаботниковОрганизаций.Состояние В (&СписокеОтпусков))
	|			И (СостояниеРаботниковОрганизаций.Период МЕЖДУ &Дата И &датаК
	|				ИЛИ ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизаций.ПериодЗавершения, ДЕНЬ, -1) МЕЖДУ &Дата И &датаК)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних КАК СостояниеРаботниковОрганизацийСрезПоследних
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)
	|ИТОГИ ПО
	|	Подразделение";
	
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделенияОрганизаций);
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата)); 
	Запрос.УстановитьПараметр("ДатаК", КонецМесяца(Дата));   
	Запрос.УстановитьПараметр("СписокеОтпусков", СписокОтпусков);
	
	Результат = Запрос.Выполнить();
	тззапроса = новый таблицазначений;
	тззапроса = Результат.Выгрузить();
	
	МассивСотрудников = тззапроса.ВыгрузитьКолонку("Сотрудник");
	ОстаткиНаНачало = ОстаткиОтпусков.ОстатокОтпускаСпискаСотрудниковНаДату(МассивСотрудников, НачалоМесяца(Дата));
	ОстаткиНаКонец = ОстаткиОтпусков.ОстатокОтпускаСпискаСотрудниковНаДату(МассивСотрудников, КонецМесяца(Дата));
 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сотрудник = Null Тогда
			ОбластьМакетаПодр.Параметры.Заполнить(Выборка);
			ТабДок.Вывести(ОбластьМакетаПодр);
		Иначе
			Если Выборка.ВидОтпуска = Выборка.Состояние Тогда
				ОбластьМакетаСотр.Параметры.Заполнить(Выборка); 
				Если Выборка.ВидОтпуска = Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный Тогда
					НайденнаяСтрокаН = ОстаткиНаНачало.Найти(Выборка.сотрудник, "Сотрудник");
					Если НайденнаяСтрокаН <> НЕОПРЕДЕЛЕНО Тогда
						ОбластьМакетаСотр.Параметры.ОстНачМ =НайденнаяСтрокаН.ОстатокНаДату;
					КонецЕсли;
					
					НайденнаяСтрокаК = ОстаткиНаКонец.Найти(Выборка.сотрудник, "Сотрудник");
					Если НайденнаяСтрокаК <> НЕОПРЕДЕЛЕНО Тогда
						ОбластьМакетаСотр.Параметры.ОстКонМ = НайденнаяСтрокаК.ОстатокНаДату;
					КонецЕсли;
				Иначе
					ОбластьМакетаСотр.Параметры.ОстНачМ = "";
					ОбластьМакетаСотр.Параметры.ОстКонМ = "";
				КонецЕсли;
				ТабДок.Вывести(ОбластьМакетаСотр);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	имяфайла=КаталогВременныхФайлов()+"ФактическоеИспользованиеОтпусковПоПодр"+ПодразделенияОрганизаций+".xls";
	
	ТабДок.Записать(имяфайла,ТипФайлаТабличногоДокумента.XLS);
	
	Если не Выборка.Количество()=0 тогда
		возврат новый Структура("ТекстПисьма,ТемаПисьма,имяфайла","Фактическое использование отпусков на "+Формат(ДатаОстатков,"ДЛФ=D"),"Фактическое использование отпусков на "+Формат(ДатаОстатков,"ДЛФ=D"),имяфайла);
	Иначе
		возврат Неопределено;
	КонецЕсли;
	
КонецФункции
//Blik 131113 к по задаче 23227
функция пролучитьВозраст(ПодразделенияОрганизаций)
	датаРасчета=ТекущаяДата();
	табСотрудников=Новый ТаблицаЗначений;
	табСотрудников=ПолучитьСписокРаботающихСотрудников_Ю(датаРасчета,ПодразделенияОрганизаций);
	датаДР=датаРасчета+(86400*3);
	
	//BLik 090617 66520 н
	//дата50=дата(Год(датаДР)-50,месяц(датаДР),день(датаДР));
	//дата55=дата(Год(датаДР)-55,месяц(датаДР),день(датаДР));
	//дата60=дата(Год(датаДР)-60,месяц(датаДР),день(датаДР));
	////датаТемп=дата(Год(датаДР)-52,месяц(датаДР),день(датаДР));
	//
	//ТабДР=табСотрудников.Скопировать();
	//ТабДР.очистить();
	/////////Найти Темп
	////Отбор = Новый Структура();
	////Отбор.Вставить("ДатаРождения",датаТемп);
	////Строки = табСотрудников.НайтиСтроки(Отбор);
	////для сч=0 по  Строки.Количество() -1 Цикл
	////	ЗаполнитьЗначенияСвойств(ТабДР.добавить(),строки[сч]);
	////КонецЦикла;
	///////Найти 50 лет
	//Отбор = Новый Структура();
	//Отбор.Вставить("ДатаРождения",ДатаДР);
	//Строки = табСотрудников.НайтиСтроки(Отбор);
	//для сч=0 по  Строки.Количество() -1 Цикл
	//	ЗаполнитьЗначенияСвойств(ТабДР.добавить(),строки[сч]);
	//КонецЦикла;
	///////Найти 55 лет
	//Отбор = Новый Структура();
	//Отбор.Вставить("ДатаРождения",ДатаДР);
	//Отбор.Вставить("Пол",Перечисления.ПолФизическихЛиц.Женский);
	//Строки = табСотрудников.НайтиСтроки(Отбор);
	//для сч=0 по  Строки.Количество() -1 Цикл
	//	ЗаполнитьЗначенияСвойств(ТабДР.добавить(),строки[сч]);
	//КонецЦикла;
	//
	///////Найти 60 лет
	//Отбор = Новый Структура();
	//Отбор.Вставить("ДатаРождения",ДатаДР);
	//Отбор.Вставить("Пол",Перечисления.ПолФизическихЛиц.Мужской);
	//Строки = табСотрудников.НайтиСтроки(Отбор);
	//для сч=0 по  Строки.Количество() -1 Цикл
	//	ЗаполнитьЗначенияСвойств(ТабДР.добавить(),строки[сч]);          
	//КонецЦикла;
	//BLik 090617 66520 к
	
	//Blik 71323 051017 н
	//ТекстПисьма="У следующих сотрудников будет юбилей "+ Формат(датаДР,"ДЛФ=D")+" числа!";
	МесяцРассылки =  ДобавитьМесяц(датаДР,1); 
	ТекстПисьма="У следующих сотрудников будет юбилей ";//+ Формат(МесяцРассылки,"ДФ=ММММ")+" числа!";
	//Blik 71323 051017 к
	ТемаПисьма=ТекстПисьма;
	                                               
	
	ТабДок=Новый ТабличныйДокумент;
	макет=ПолучитьОбщийМакет("ОстаткиОтпусков");
	ШапкаОбласть=макет.ПолучитьОбласть("ШапкаДР");
	строкаОбласть=макет.ПолучитьОбласть("СТрокаДР");
	//Blik 71323 051017 н
	//ШапкаОбласть.Параметры.ТекстШАпки="Дни рождения на "+Формат(датаДР,"ДЛФ=D");
	ШапкаОбласть.Параметры.ТекстШАпки="Дни рождения на "+Формат(МесяцРассылки,"ДФ=ММММ");
	//Blik 71323 051017 к	
	ТабДок.Вывести(ШапкаОбласть);
	
	//BLik 090617 66520 н
	//Для каждого стр Из ТабДР Цикл
	Для каждого стр Из табСотрудников Цикл
	//BLik 090617 66520 к
		строкаОбласть.Параметры.Заполнить(стр);
		строкаОбласть.Параметры.лет=Год(датаДР)-год(стр.датаРождения);
		ТабДок.Вывести(строкаОбласть);
	КонецЦикла;
	
	имяфайла=КаталогВременныхФайлов()+"ДРСотрудников.xls";
	
	ТабДок.Записать(имяфайла,ТипФайлаТабличногоДокумента.XLS);
	
	//BLik 090617 66520 н
	//Если не ТабДР.Количество()=0 тогда
	Если не табСотрудников.Количество()=0 тогда
	//BLik 090617 66520 к
		возврат новый Структура("ТекстПисьма,ТемаПисьма,имяфайла",ТекстПисьма,ТемаПисьма,имяфайла);
	Иначе
		возврат Неопределено;
	КонецЕсли;
	
	
	
	
	
КонецФункции

/////Вадим 25.01.2013 8:02:38

Функция ПолучитьДанныеПоСеверномуСтажу(Дат,ТекФизЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОСтажеРаботыНаСевереСрезПоследних.ФизЛицо,
	|	СведенияОСтажеРаботыНаСевереСрезПоследних.ПорядокНачисленияСеверныхНадбавок,
	|	СведенияОСтажеРаботыНаСевереСрезПоследних.НачальныйПроцентСевернойНадбавки,
	|	СведенияОСтажеРаботыНаСевереСрезПоследних.СеверныйСтажМесяцев,
	|	СведенияОСтажеРаботыНаСевереСрезПоследних.СеверныйСтажДней,
	|	СведенияОСтажеРаботыНаСевереСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.СведенияОСтажеРаботыНаСевере.СрезПоследних(Конецпериода(&Дата,день), ФизЛицо = &ФизЛицо) КАК СведенияОСтажеРаботыНаСевереСрезПоследних";
	Запрос.УстановитьПараметр("Дата", дат);
	Запрос.УстановитьПараметр("ФизЛицо", ТекФизЛицо);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	Если Выборка.Следующий() тогда
		возврат новый Структура("ПорядокНачисленияСеверныхНадбавок,НачальныйПроцентСевернойНадбавки,СеверныйСтажМесяцев,СеверныйСтажДней,Период",Выборка.ПорядокНачисленияСеверныхНадбавок,Выборка.НачальныйПроцентСевернойНадбавки,
		Выборка.СеверныйСтажМесяцев,Выборка.СеверныйСтажДней,Выборка.Период);
	иначе
		возврат Неопределено;
	КонецЕсли;
	
	
	
	
	
КонецФункции 

функция ПолучитьПаспорта(ПодразделенияОрганизаций)
	дата=ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подразделение,
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения КАК ДатаРождения,
	|	РАЗНОСТЬДАТ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, &Дата, ГОД) КАК Лет,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК датавыдачи,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, &Дата, ГОД) = 20
	|				ИЛИ РАЗНОСТЬДАТ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, &Дата, ГОД) = 45
	|			ТОГДА ""ДА""
	|		ИНАЧЕ ""Нет""
	|	КОНЕЦ КАК ПоСроку,
	|	ВЫБОР
	|		КОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, РАЗНОСТЬДАТ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, &Дата, ГОД)) > ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи
	|			ТОГДА ""менять""
	|		ИНАЧЕ ""нет""
	|	КОНЕЦ КАК НаЗамену,
	|	ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, РАЗНОСТЬДАТ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, &Дата, ГОД)) КАК Поле4
	|ИЗ
	|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО (РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо)
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.увольнение)
	|	И ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, РАЗНОСТЬДАТ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, &Дата, ГОД)) < &Дата
	|	И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)";
	
	Запрос.УстановитьПараметр("Дата", дата);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделенияОрганизаций);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ТекстПисьма="У следующих сотрудников просрочены паспорта!!! ";
	ТемаПисьма=ТекстПисьма;
	
	
	ТабДок=Новый ТабличныйДокумент;
	макет=ПолучитьОбщийМакет("ОстаткиОтпусков");
	ШапкаОбласть=макет.ПолучитьОбласть("ШапкаПР");
	строкаОбласть=макет.ПолучитьОбласть("СТрокаПР");
	
	ШапкаОбласть.Параметры.Дата=Формат(дата,"ДЛФ=D");
	пров=0;
	ТабДок.Вывести(ШапкаОбласть);
	пока Результат.Следующий() цикл
		Если  Результат.ПоСроку = "ДА" Тогда
			Если  Результат.НаЗамену = "менять" Тогда	
				пров = пров+1;
				строкаОбласть.Параметры.Заполнить(Результат);
				ТабДок.Вывести(строкаОбласть);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	имяфайла=КаталогВременныхФайлов()+"ПросроченныеПаспортаСотрудников.xls";
	
	ТабДок.Записать(имяфайла,ТипФайлаТабличногоДокумента.XLS);
	
	Если не пров=0 тогда
		возврат новый Структура("ТекстПисьма,ТемаПисьма,имяфайла",ТекстПисьма,ТемаПисьма,имяфайла);
	Иначе
		возврат Неопределено;
	КонецЕсли;
	
	
	
	
	
КонецФункции


Функция получитьРазницуСеверных(Дат,ДатНов,ФизЛицо)
	СевСтаж=ПолучитьДанныеПоСеверномуСтажу(дат,ФизЛицо);
	Если СевСтаж=Неопределено тогда Возврат Неопределено; конецесли;
	///датарег=ПроведениеРасчетов.ПолучитьНачалоСтажаДляБольничногоЛиста(ТекущаяДата(),ФизЛицо,Организация,ВидСтажа);
	
	ПроцентыСевернойНадбавки = ПроведениеРасчетов.ПолучитьПроцентыСевернойНадбавкиЗаПериод(
	СевСтаж.Период, 
	СевСтаж.ПорядокНачисленияСеверныхНадбавок, 
	СевСтаж.НачальныйПроцентСевернойНадбавки,
	СевСтаж.СеверныйСтажМесяцев,
	СевСтаж.СеверныйСтажДней,
	Дат,
	КонецДня(Дат));
	ТекСеверный=ПроцентыСевернойНадбавки[0].Процент;
	
	
	ПроцентыСевернойНадбавки = ПроведениеРасчетов.ПолучитьПроцентыСевернойНадбавкиЗаПериод(
	СевСтаж.Период, 
	СевСтаж.ПорядокНачисленияСеверныхНадбавок, 
	СевСтаж.НачальныйПроцентСевернойНадбавки,
	СевСтаж.СеверныйСтажМесяцев,
	СевСтаж.СеверныйСтажДней,
	ДатНов,
	КонецДня(ДатНов));
	НовСеверный=ПроцентыСевернойНадбавки[0].Процент;
	
	Если не ТекСеверный=НовСеверный тогда
		возврат НовСеверный;
	иначе
		Возврат Неопределено;
	Конецесли;	
	
КонецФункции 

Функция получитьСеверные(ПодразделенияОрганизаций)
	датаРасчета=ТекущаяДата();
	ДатНов=датаРасчета+(86400*3);
	табСотрудников=ПолучитьСписокРаботающихСотрудников(датаРасчета,ПодразделенияОрганизаций);
	текстПисьма="";пр=ложь;
	для каждого стр из табСотрудников цикл
		северный=получитьРазницуСеверных(датаРасчета,ДатНов,стр.Сотрудник.ФизЛицо);
		если северный=Неопределено тогда продолжить; конецесли;
		текстПисьма=текстПисьма+Символы.пс+"У сотрудника "+сокрЛП(стр.Сотрудник)+"("+стр.ПодразделениеОрганизации+") "+формат(ДатНов,"ДЛФ=D")+" изменится северный стаж на "+строка(северный);
		пр=Истина;
		
	КонецЦикла;
	
	Если не пр тогда возврат Неопределено; конецесли;
	
	возврат  новый Структура("ТекстПисьма,ТемаПисьма,имяфайла",текстПисьма,"Изменение северного стажа", Неопределено);
	
	
КонецФункции 


Функция получитьВыслугуЛет(ПодразделенияОрганизаций)
	датаРасчета=ТекущаяДата();
	ДатНов=датаРасчета+(86400*3);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СотрудникФизлицо КАК Физлицо,
	|	ВложенныйЗапрос.Период КАК ДатаПриема,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ДатаОтсчета ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапрос.Период
	|		ИНАЧЕ ВложенныйЗапрос.ДатаОтсчета
	|	КОНЕЦ КАК ДатаОтсчета,
	|	ВложенныйЗапрос.РазмерМесяцев,
	|	ВложенныйЗапрос.РазмерДней,
	|	ВложенныйЗапрос.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТ_ФизЛица
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Сотрудник.Физлицо КАК СотрудникФизлицо,
	|		ВложенныйЗапрос.Период КАК Период,
	|		ФизическиеЛицаСтажи.ДатаОтсчета КАК ДатаОтсчета,
	|		ФизическиеЛицаСтажи.РазмерМесяцев КАК РазмерМесяцев,
	|		ФизическиеЛицаСтажи.РазмерДней КАК РазмерДней,
	|		ВложенныйЗапрос.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Работающие.Сотрудник КАК Сотрудник,
	|			Работающие.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|			Работающие.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			Прием.Период КАК Период
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ) КАК Работающие
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК Прием
	|				ПО Работающие.Сотрудник = Прием.Сотрудник) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК ФизическиеЛицаСтажи
	|			ПО ВложенныйЗапрос.Сотрудник.Физлицо = ФизическиеЛицаСтажи.Ссылка
	|				И (ФизическиеЛицаСтажи.ВидСтажа = &Стаж)
	|	ГДЕ
	|		ВложенныйЗапрос.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И ВложенныйЗапрос.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Стажи.Физлицо,
	|	Стажи.ДатаПриема,
	|	Стажи.ДатаОтсчета,
	|	Стажи.РазмерМесяцев,
	|	Стажи.РазмерДней,
	|	ВЫБОР
	|		КОГДА Стажи.ДатаОтсчета >= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МЕСЯЦ, Стажи.РазмерМесяцев), ДЕНЬ, Стажи.РазмерДней)
	|			ТОГДА ВЫБОР
	|					КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|						ТОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), МЕСЯЦ)) - ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней)) + ДЕНЬ(&Период)
	|					КОГДА ДЕНЬ(&Период) > ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|						ТОГДА ДЕНЬ(&Период) - ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|	КОНЕЦ КАК СтажДней,
	|	ВЫБОР
	|		КОГДА Стажи.ДатаОтсчета >= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МЕСЯЦ, Стажи.РазмерМесяцев), ДЕНЬ, Стажи.РазмерДней)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫБОР
	|							КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|								ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|							КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|								ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|						КОНЕЦ / 12 < (ВЫРАЗИТЬ(ВЫБОР
	|								КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|									ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|								КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|									ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|							КОНЕЦ / 12 КАК ЧИСЛО(7, 0)))
	|						ТОГДА (ВЫРАЗИТЬ(ВЫБОР
	|									КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|										ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|									КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|										ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|								КОНЕЦ / 12 КАК ЧИСЛО(7, 0))) - 1
	|					ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
	|								КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|									ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|								КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|									ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|							КОНЕЦ / 12 КАК ЧИСЛО(7, 0))
	|				КОНЕЦ
	|	КОНЕЦ КАК СтажЛет,
	|	ВЫБОР
	|		КОГДА Стажи.ДатаОтсчета >= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МЕСЯЦ, Стажи.РазмерМесяцев), ДЕНЬ, Стажи.РазмерДней)
	|			ТОГДА ВЫБОР
	|					КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|						ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|					КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|						ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|				КОНЕЦ - ВЫБОР
	|					КОГДА ВЫБОР
	|							КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|								ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|							КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|								ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|						КОНЕЦ / 12 < (ВЫРАЗИТЬ(ВЫБОР
	|								КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|									ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|								КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|									ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|							КОНЕЦ / 12 КАК ЧИСЛО(7, 0)))
	|						ТОГДА (ВЫРАЗИТЬ(ВЫБОР
	|									КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|										ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|									КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|										ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|								КОНЕЦ / 12 КАК ЧИСЛО(7, 0))) - 1
	|					ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
	|								КОГДА ДЕНЬ(&Период) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|									ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ)
	|								КОГДА ДЕНЬ(&Период) < ДЕНЬ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней))
	|									ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, -Стажи.РазмерМесяцев), ДЕНЬ, -Стажи.РазмерДней), &Период, МЕСЯЦ) - 1
	|							КОНЕЦ / 12 КАК ЧИСЛО(7, 0))
	|				КОНЕЦ * 12
	|	КОНЕЦ КАК СтажМесяцев,
	|	Стажи.ПодразделениеОрганизации
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	ВТ_ФизЛица КАК Стажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Физлицо,
	|	вт.ДатаПриема,
	|	вт.ДатаОтсчета,
	|	вт.РазмерМесяцев,
	|	вт.РазмерДней,
	|	вт.СтажДней,
	|	вт.СтажЛет,
	|	вт.СтажМесяцев,
	|	вт.ПодразделениеОрганизации
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	вт.СтажДней = 0
	|	И вт.СтажМесяцев = 0
	|	И (вт.СтажЛет = 5
	|			ИЛИ вт.СтажЛет = 10
	|			ИЛИ вт.СтажЛет = 15)";
	Запрос.УстановитьПараметр("Период", ДатНов);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделенияОрганизаций);
	Запрос.УстановитьПараметр("Стаж", Справочники.ВидыСтажа.НайтиПоНаименованию("Стаж на предприятии"));
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	текстПисьма="";пр=ложь;
	Пока Выборка.Следующий() Цикл
		текстПисьма=текстПисьма+Символы.пс+"
		|У сотрудника "+сокрЛП(Выборка.Физлицо)+"("+Выборка.ПодразделениеОрганизации+") "+формат(ДатНов,"ДЛФ=D")+" Стаж работы на предприятии - "+строка(Выборка.СтажЛет)+" лет";
		пр=Истина;
		
		
	КонецЦикла;
	Если не пр тогда возврат Неопределено; конецесли;
	//
	возврат  новый Структура("ТекстПисьма,ТемаПисьма,имяфайла",текстПисьма,"Изменение Выслуги лет", Неопределено);
	
	
	 	
	
КонецФункции 


Функция получитьСверхурочкуСвыше120Часов(ПодразделенияОрганизаций)
	датаРасчета=ТекущаяДата();
	ДатНов=датаРасчета+(86400*3);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	AVT_РаботаСверхНормы.Сотрудник,
	|	СУММА(AVT_РаботаСверхНормы.Часов) КАК Часов,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.Должность
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрНакопления.AVT_РаботаСверхНормы КАК AVT_РаботаСверхНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО AVT_РаботаСверхНормы.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	AVT_РаботаСверхНормы.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ГОД) И КОНЕЦПЕРИОДА(&Период, ГОД)
	|	И AVT_РаботаСверхНормы.ВидРасчета = &ВидРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	AVT_РаботаСверхНормы.Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Сотрудник,
	|	СУММА(ВТ.Часов) КАК Часов,
	|	ВТ.ПодразделениеОрганизации,
	|	ВТ.Должность
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Часов > 120
	|	И ВТ.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Сотрудник,
	|	ВТ.ПодразделениеОрганизации,
	|	ВТ.Должность";
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных);
	Запрос.УстановитьПараметр("Период", датаРасчета);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделенияОрганизаций);
	
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	текстПисьма="";пр=ложь;
	Пока Выборка.Следующий() Цикл
		текстПисьма=текстПисьма+Символы.пс+"У сотрудника "+сокрЛП(Выборка.Сотрудник)+"("+Выборка.ПодразделениеОрганизации+") Работа по сверхурочке превышает 120 часов ("+строка(Выборка.Часов)+") ";
		пр=Истина;
		
		
	КонецЦикла;
	Если не пр тогда возврат Неопределено; конецесли;
	//
	возврат  новый Структура("ТекстПисьма,ТемаПисьма,имяфайла",текстПисьма,"Превышение работы в сверхурочные часы", Неопределено);
	
	
	
	
	
КонецФункции 


Функция получитьВыходИзОтпускаПоУходуЗаРебенком(ПодразделенияОрганизаций)
	датаРасчета=ТекущаяДата();
	ДатНов=датаРасчета+(86400*10);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник,
	|	СостояниеРаботниковОрганизацийСрезПоследних.Состояние,
	|	СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&Период, ) КАК СостояниеРаботниковОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	СостояниеРаботниковОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Сотрудник,
	|	ВТ.Состояние,
	|	ВТ.ПериодЗавершения,
	|	ВТ.ПодразделениеОрганизации,
	|	ВТ.Должность,
	|	ВТ.ПричинаИзмененияСостояния
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВТ.ПериодЗавершения = &ПериодЗавершения
	|	И ВТ.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)";

	Запрос.УстановитьПараметр("ПериодЗавершения", ДатНов);
 	Запрос.УстановитьПараметр("Период", датаРасчета);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделенияОрганизаций);
	
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	текстПисьма="";пр=ложь;
	Пока Выборка.Следующий() Цикл
		текстПисьма=текстПисьма+Символы.пс+"Через 10 дней("+Формат(Выборка.ПериодЗавершения,"ДФ=dd.MM.yyyy")+") у сотрудника "+сокрЛП(Выборка.Сотрудник)+"("+Выборка.ПодразделениеОрганизации+") заканчивается отпуск по уходу за ребенком";
		пр=Истина;
		
		
	КонецЦикла;
	Если не пр тогда возврат Неопределено; конецесли;
	//
	возврат  новый Структура("ТекстПисьма,ТемаПисьма,имяфайла",текстПисьма,"Окончание отпуска по уходом за ребенком", Неопределено);
	
	
	
		
	
КонецФункции 

// получитьРазницуСеверных() ВадимКонец
//начало изменений Ожиганов 06.08.2015 Ошибка при рассылке
//пока закомментировал
//#Если Клиент Тогда
Процедура ОправитьФайл(Тема, Получатель, Текст, Файл = Неопределено, Проверка = Ложь, Отправитель = Неопределено, HTML = Ложь) Экспорт
	//Blik 290216 49617 н
	НастройкиРассылки   = ПолучитьНастройкиРассылкиУведомлений(); 
	АдресСервераSMTP    = СокрЛП(строка(НастройкиРассылки.Найти("АдресСервераSMTP", "Параметр").ЗначениеПараметра));
	ПортSMTP            = СокрЛП(Строка(НастройкиРассылки.Найти("ПортSMTP", "Параметр").ЗначениеПараметра));  
	Отправитель_robot1s = СокрЛП(Строка(НастройкиРассылки.Найти("Отправитель_robot1s", "Параметр").ЗначениеПараметра)); 
	//Blik 290216 49617 к
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	//начало изменений Ожиганов 29.07.2015 изменение сервера
	//Профиль.АдресСервераSMTP = "lipmail.progressfood.ru";
	Профиль.АдресСервераSMTP = АдресСервераSMTP;//"SMTP.PROGRESSFOOD.RU";  //Blik 290216 49617
	//конец изменений 
	//Профиль.АдресСервераPOP3 = Ящик.АдресСервераPOP; //строка
	//Профиль.ПортPOP3 = Ящик.ПортPOP; //строка
	Профиль.ПортSMTP = ПортSMTP;//"25"; //строка //Blik 290216 49617
	//Профиль.Пользователь = Ящик.ИмяПользователя;//строка
	//Профиль.Пароль = Ящик.Пароль;//строка
	//Профиль.ПользовательSMTP = Ящик.ИмяПользователя;//строка
	//Профиль.ПарольSMTP = Ящик.Пароль;//строка
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации; //Ящик.СпособSMTPАутентификации; //ПеречислениеСсылка.СпособыSMTPАутентификации
	
	Почта = Новый ИнтернетПочта;
	
	// Создадим почтовое сообщение
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема; 
	
	ТекстДляОшибок = Текст;
	Текст = Письмо.Тексты.Добавить(Текст);
	Текст.ТипТекста = ? (HTML, ТипТекстаПочтовогоСообщения.HTML, ТипТекстаПочтовогоСообщения.ПростойТекст);
	
	Если Не Отправитель = Неопределено тогда
		Письмо.Отправитель = Отправитель;
	Иначе
		Письмо.Отправитель = Отправитель_robot1s;
		Письмо.ИмяОтправителя = Отправитель_robot1s; //"robot1s@lip.progressfood.ru"; //Blik 290216 49617 //"Андроид 1С";  //Blik 30744 070814
	Конецесли;
	ПолучателиДляОшибки="";
	
	Если ТипЗнч(Получатель)=тип("Строка") тогда
		Письмо.Получатели.Добавить(Получатель);
		ПолучателиДляОшибки=Получатель;
	ИначеЕсли ТипЗнч(Получатель)=тип("Массив") тогда
		Для сч=0 по Получатель.Количество()-1 цикл
			Если не СокрЛП(Получатель[сч])="" тогда
				Письмо.Получатели.Добавить(Получатель[сч]);
				ПолучателиДляОшибки=ПолучателиДляОшибки+?(ПолучателиДляОшибки="","",";")+Получатель[сч];
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Для сч=0 по Получатель.Количество()-1 цикл
			Если не СокрЛП(Получатель[сч].значение)="" тогда
				Письмо.Получатели.Добавить(Получатель[сч].значение);
				ПолучателиДляОшибки=ПолучателиДляОшибки+?(ПолучателиДляОшибки="","",";")+Получатель[сч].значение;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	Если не Файл=Неопределено тогда
		Если ТипЗнч(Файл)=тип("Строка") тогда
			Если не сокрЛП(Файл)="" тогда
				Письмо.Вложения.Добавить(Файл);
			КонецЕсли;
		Иначе	
			Для сч=0 по Файл.Количество()-1 цикл
				Если не сокрЛП(Файл[сч].значение)="" тогда
					Письмо.Вложения.Добавить(Файл[сч].значение);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	
	Попытка
		Почта.Подключиться(Профиль);
		
		///Сообщить(Ящик.Наименование+": Подключенено");
		
	Исключение
		Сообщить("Не удалось подключиться к серверу");
	КонецПопытки;
	Попытка
		Почта.Послать(Письмо);
		проверка=истина;
		//Сообщить("Письма отправлены");
	Исключение
		Сообщить(ОписаниеОшибки());
		//начало изменений Ожиганов 29.07.2015 
		//ТекстОшибки="Не ушло письмо с текстом:"+Символы.ПС+текстДляОшибок+Символы.ПС+" для "+ПолучателиДляОшибки+Символы.ПС+" описание ошибки:"+Символы.ПС+ОписаниеОшибки();
		//ОправитьФайл("!!!!!!!!!!!!!!!!!!!!!!!Не ушло письмо","VTumanov@lip.progressfood.ru",ТекстОшибки);
		//конец изменений 
	КонецПопытки;
	
	Почта.Отключиться();
	//Сообщить("Соединение завершено");
	
	
	
КонецПроцедуры
//начало изменений Ожиганов 06.08.2015 Ошибка при рассылке
//#КонецЕсли
//конец изменений 

Процедура ППР_рассылкаОтпусков() Экспорт
	//Blik по Ит отдельный алгоритм рассылки 46594 051215 н
	СписПодрИскл = новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК Подразделение,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра КАК Сотрудник,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра.Физлицо = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""ДепартаменИТ""
	|ИТОГИ ПО
	|	Сотрудник";
	результатИскл = запрос.Выполнить();
	ВыборкаСгруппировано = результатИскл.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаСгруппировано.Следующий() Цикл
		СпсАдресатов=Новый СписокЗначений;
		ВыборкаДетальныеЗаписи = ВыборкаСгруппировано.Выбрать();
		СписПодр = новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СписПодрИскл.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Подразделение) = Неопределено Тогда
				СписПодрИскл.Добавить(ВыборкаДетальныеЗаписи.Подразделение);
			КонецЕсли;
			Если СпсАдресатов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Представление) = Неопределено Тогда
				СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
			КонецЕсли;
			СписПодр.Добавить(ВыборкаДетальныеЗаписи.Подразделение);
		КонецЦикла;
		остатокОтпусков=сформироватьОстаткиОтпусков(СписПодр);	
		СпсАдресатов.Добавить("IKalmatskaya@progressfood.ru");//   //Blik 290216 49617
		СпсАдресатов.Добавить("sovchinnikov@progressfood.ru"); //добавляем в получателей начальника отдела
		если не остатокОтпусков=Неопределено тогда
			ОправитьФайл(остатокОтпусков.ТемаПисьма,СпсАдресатов,остатокОтпусков.ТекстПисьма,остатокОтпусков.имяфайла);
			//Сообщить("Отправлено");
		КонецЕсли;

	КонецЦикла;
	//Blik по Ит отдельный алгоритм рассылки 46594 051215 к
	
	Запрос = Новый Запрос;
	Запрос.Текст =  получитьТекстЗапроса("ОстаткиОтпусков");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		//Blik по Ит отдельный алгоритм рассылки 46594 051215 н
		//Если не СписПодрИскл.НайтиПоЗначению(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций) = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;
		//Blik по Ит отдельный алгоритм рассылки 46594 051215 к
		остатокОтпусков=сформироватьОстаткиОтпусков(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		если не остатокОтпусков=Неопределено тогда
			ОправитьФайл(остатокОтпусков.ТемаПисьма,СпсАдресатов,остатокОтпусков.ТекстПисьма,остатокОтпусков.имяфайла);
		КонецЕсли;
	КонецЦикла;
	
	//Blik 060914 просроченные паспорта 31282
	Запрос = Новый Запрос;
	Запрос.Текст =  получитьТекстЗапроса("Юбиляры");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		СотрыСпросрПаспортами= ПолучитьПаспорта(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		если СотрыСпросрПаспортами=Неопределено тогда продолжить; конецесли;
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		ОправитьФайл(СотрыСпросрПаспортами.ТемаПисьма,СпсАдресатов,СотрыСпросрПаспортами.ТекстПисьма,СотрыСпросрПаспортами.имяфайла);
		
	КонецЦикла;

	//Blik 71323 051017 н 
	//перенесена рассылка по юбилярам
	//Запрос = Новый Запрос;
	//Запрос.Текст =  получитьТекстЗапроса("Юбиляры");
	
	РезультатЮ = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = РезультатЮ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		Юбиляры= пролучитьВозраст(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		если Юбиляры=Неопределено тогда 
			продолжить; 
		конецесли;
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		ОправитьФайл(Юбиляры.ТемаПисьма,СпсАдресатов,Юбиляры.ТекстПисьма,Юбиляры.имяфайла);
		
	КонецЦикла;
    //Blik 71323 051017 к
	
КонецПроцедуры
//Blik 131113 н по задаче 23227
Процедура ПРГ_РассылкаФактическихОтпусков()Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =  получитьТекстЗапроса("ОстаткиОтпусков");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		остатокОтпусков=СформироватьФактОтпусков(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		если не остатокОтпусков=Неопределено тогда
			ОправитьФайл(остатокОтпусков.ТемаПисьма,СпсАдресатов,остатокОтпусков.ТекстПисьма,остатокОтпусков.имяфайла);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
//Blik 131113 к по задаче 23227
Процедура ПРГ_ЕжедневнаяРассылка() Экспорт
	
	//Blik 71323 051017 н 
	//теперь рассылка по юбилярам 25 числа месяца
	//Запрос = Новый Запрос;
	//Запрос.Текст =  получитьТекстЗапроса("Юбиляры");
	//
	//Результат = Запрос.Выполнить();
	//
	//ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
	//	Юбиляры= пролучитьВозраст(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
	//	если Юбиляры=Неопределено тогда продолжить; конецесли;
	//	ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
	//	СпсАдресатов=Новый СписокЗначений;
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
	//	КонецЦикла;
	//	ОправитьФайл(Юбиляры.ТемаПисьма,СпсАдресатов,Юбиляры.ТекстПисьма,Юбиляры.имяфайла);
	//	
	//КонецЦикла;
	//Blik 71323 051017 к 

	///////////////////////Северные
	Запрос = Новый Запрос;
	Запрос.Текст =  получитьТекстЗапроса("ИзменениеСтажаПоСевернымНадБавкам");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		Северные= получитьСеверные(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		если Северные=Неопределено тогда продолжить; конецесли;
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		ОправитьФайл(Северные.ТемаПисьма,СпсАдресатов,Северные.ТекстПисьма,Северные.имяфайла);
		
	КонецЦикла;
	///////////////////////СтажНаПредприятие
	Запрос = Новый Запрос;
	Запрос.Текст =  получитьТекстЗапроса("ВыслугаЛет");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		ВыслугаЛет= получитьВыслугуЛет(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		если ВыслугаЛет=Неопределено тогда продолжить; конецесли;
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		ОправитьФайл(ВыслугаЛет.ТемаПисьма,СпсАдресатов,ВыслугаЛет.ТекстПисьма,ВыслугаЛет.имяфайла);
		
	КонецЦикла;
	///////////////////////получитьСверхурочкуСвыше120Часов
	Запрос = Новый Запрос;
	Запрос.Текст =  получитьТекстЗапроса("ПриказОСверхурочке");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		СверхурочкуСвыше120Часов= получитьСверхурочкуСвыше120Часов(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		если СверхурочкуСвыше120Часов=Неопределено тогда продолжить; конецесли;
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		ОправитьФайл(СверхурочкуСвыше120Часов.ТемаПисьма,СпсАдресатов,СверхурочкуСвыше120Часов.ТекстПисьма,СверхурочкуСвыше120Часов.имяфайла);
		
	КонецЦикла;
     ///////////////////////получитьВыходИзОтпускаПоУходуЗаРебенком
	Запрос = Новый Запрос;
	Запрос.Текст =  получитьТекстЗапроса("ЗавершениеОтпускаПоУходуЗаРебенком");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		ВыходИзОтпускаПоУходуЗаРебенком= получитьВыходИзОтпускаПоУходуЗаРебенком(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		если ВыходИзОтпускаПоУходуЗаРебенком=Неопределено тогда продолжить; конецесли;
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		ОправитьФайл(ВыходИзОтпускаПоУходуЗаРебенком.ТемаПисьма,СпсАдресатов,ВыходИзОтпускаПоУходуЗаРебенком.ТекстПисьма,ВыходИзОтпускаПоУходуЗаРебенком.имяфайла);
		
	КонецЦикла;

	////////////////////////////////УведомлениеОбОтпуске
	 //ОтправкаУведомленийОбОтпуске();
	 РассылкаУведомленийОЗавершенииИспытательногоСрока();//BLik 40649 180615
	 РассылкаУведомленийОЗавершенииИспытательногоСрокаКС(); //BLik 52612  190516
	 
	 УведомлениеЗа10ДнейОЗавершенииСрочногоТД();//Blik 41526 140715 
	 ОчишениеДатыОкончанияДоговора();
	 ПростановкаКодовСотрудникаИзФизЛиц();
	 //ВыгрузкаЛимитовСотовойСвязи();  //Blik 080816 54976 
	 //ВыгрузкаАналитикиКС();  //Blik закком 100815 
	 //ВыгрузкаДляНав();  // 140715 Blik по задаче 41747 остановить выгрузку
	 РассылкаПоЗапросамНаПредоставлениеДокуметовЕжеднев();
	 //ВыгрузкаДляCubSebest();  //Blik 030815 остановлена ежедневная выгрузка для pl (иниц Ожиганов)
	//ОтправкаЗаявленийНаОтпуске(); //Blik 090616 53288  //Blik 280616 закком надо разобраться со склонениями на сервере
	
	//Blik 260916 57188 н
	ТекДата = ТекущаяДата();
	Если КонецДня(ТекДата) = КонецМесяца(ТекДата) Тогда
		 СформироватьРассылкуПоотстранениям();
	КонецЕсли;
	//Blik 260916 57188 к
	
	// Шевченков 20170307 #61973
	ТекДата = ТекущаяДата();
	Если НачалоДня(ТекДата) = НачалоМесяца(ТекДата) Тогда
		РассылкаПоПомеченнымНаУдалениеАктам();
	КонецЕсли;
	
	// Шевченков 20170309 #62596
	Если ДеньНедели(ТекДата) = 1 Тогда
		РассылкаПоОборотамСПоставщиками();
	КонецЕсли;	
	
	//Blik 050417 64081 н
	 РассылкаУведомленияПоСпецификациям();
	//Blik 050417 64081 к
	
	// Шевченков 20170413 #64529
	Если ДеньНедели(ТекДата) = 1 ИЛИ ДеньНедели(ТекДата) = 4 Тогда
		
		мТекДата     = КонецМесяца(ТекДата);
		
		НазвМесяца0  = Строка(Формат(КонецМесяца(ТекДата),"ДФ=ММММ"));
		НазвМесяца_1 = Строка(Формат(КонецМесяца(ТекДата) - 86400*31,"ДФ=ММММ"));
		НазвМесяца_2 = Строка(Формат(КонецМесяца(ТекДата) - 86400*31*2,"ДФ=ММММ"));
		
		РассылкаПоОтчетуПоСкидкамФКК(НачалоМесяца(мТекДата - 86400*31*2), КонецМесяца(мТекДата), НазвМесяца_2 + "_" + НазвМесяца0);
		//РассылкаПоОтчетуПоСкидкамФКК(НачалоМесяца(мТекДата - 86400*31), КонецМесяца(мТекДата - 86400*31), НазвМесяца_1);
		//РассылкаПоОтчетуПоСкидкамФКК(НачалоМесяца(мТекДата - 86400*31*2), КонецМесяца(мТекДата - 86400*31*2), НазвМесяца_2);
		
		Попытка
			мСписокФайлов = Новый СписокЗначений;
			мСписокФайлов.Добавить(КаталогВременныхФайлов() + НазвМесяца_2 + "_" + НазвМесяца0 + ".xls");
			//мСписокФайлов.Добавить(КаталогВременныхФайлов() + НазвМесяца_1 + ".xls");
			//мСписокФайлов.Добавить(КаталогВременныхФайлов() + НазвМесяца_2 + ".xls");
			
			ПРГ_Регламентый.ОправитьФайл("Рассылка по отчету по скидкам ФКК", "AGorbachev@progressfood.ru", "", мСписокФайлов, , , Истина);
		Исключение
			
		КонецПопытки;		
		
	КонецЕсли;
	
	ВыполнитьУдалениеДопСогласующих();
	
КонецПроцедуры

/////Вадим 04.12.2013 15:56:24  бп 
Функция получитьТЗДляОтправкиОтпусков()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_СписокРассылкиОтчетов.ФизЛицо,
	|	ПРГ_СписокРассылкиОтчетов.ПодразделенияОрганизаций,
	|	КонтактнаяИнформация.Представление как email
	|ИЗ
	|	РегистрСведений.ПРГ_СписокРассылкиОтчетов КАК ПРГ_СписокРассылкиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ПРГ_СписокРассылкиОтчетов.ФизЛицо = КонтактнаяИнформация.Объект
	|			И  КонтактнаяИнформация.Тип=   ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|ГДЕ
	|	ПРГ_СписокРассылкиОтчетов.ОстаткиОтпусков";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ФизЛицо");
	тз.Колонки.Добавить("ПодразделенияОрганизаций");
	тз.Колонки.Добавить("email");
	Пока Выборка.Следующий() Цикл
		Запрос1 = Новый Запрос;
		Запрос1.Текст =
		"                ВЫБРАТЬ
		|	РаботникиОрганизаций.ПодразделениеОрганизации
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизаций.ПодразделениеОрганизации";
		Запрос1.УстановитьПараметр("ПодразделениеОрганизации",Выборка.ПодразделенияОрганизаций );
		
		Результат1= Запрос1.Выполнить();
		Выборка1= Результат1.Выбрать();
		Пока Выборка1.Следующий() Цикл
			нов=тз.Добавить();
			ЗаполнитьЗначенияСвойств(нов,Выборка);
			нов.ПодразделенияОрганизаций=Выборка1.ПодразделениеОрганизации;
		КонецЦикла;
		
		
		
		
		
		
	КонецЦикла;
	тз.Свернуть("ФизЛицо,ПодразделенияОрганизаций,email");
	возврат тз;

КонецФункции 
// получитьТЗОтправки() ВадимКонец


///Вадим 04.12.2013 15:15:20   бп пакетнаяпечать
функция ОтправкаУведомленийОбОтпуске() экспорт
    тзОтправки=получитьТЗДляОтправкиОтпусков();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикОтпусковОрганизаций.Период,
		|	ГрафикОтпусковОрганизаций.Регистратор,
		|	ГрафикОтпусковОрганизаций.Сотрудник,
		|	ГрафикОтпусковОрганизаций.Состояние,
		|	ГрафикОтпусковОрганизаций.ДатаОкончания,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.Должность,
		|	ВЫБОР
		|		КОГДА КонтактнаяИнформация.Представление ЕСТЬ NULL 
		|			ТОГДА """"
		|		ИНАЧЕ КонтактнаяИнформация.Представление
		|	КОНЕЦ КАК email,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" КАК ФИО
		|ИЗ
		|	РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
		|		ПО ГрафикОтпусковОрганизаций.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ГрафикОтпусковОрганизаций.Сотрудник.Физлицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
		|		ПО ГрафикОтпусковОрганизаций.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	ГрафикОтпусковОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
		|	И ГрафикОтпусковОрганизаций.Период = &Дата";

	Запрос.УстановитьПараметр("Дата", ТекущаяДата()+(86400*21));
	//Запрос.УстановитьПараметр("Дата", дат);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	макет=Документы.ГрафикОтпусковОрганизаций.ПолучитьМакет("УведомлениеОбОтпуске");
	
	область=макет.ПолучитьОбласть("Уведомление");
	
	имяфайла=КаталогВременныхФайлов()+"УведомлениеОбОтпуск.PDF";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		табдок=Новый ТабличныйДокумент;
		область.Параметры.текст="          Напоминаем Вам, что согласно графику отпусков на "+формат(ВыборкаДетальныеЗаписи.Период,"ДФ=yyyy")+" год Ваш ежегодный оплачиваемый отпуск начинается "+формат(ВыборкаДетальныеЗаписи.Период,"ДФ='dd MMMM yyyy'") +"г.";
		область.Параметры.фио=ВыборкаДетальныеЗаписи.ФИО;
		табдок.Вывести(область);
		ТабДок.Записать(имяфайла,ТипФайлаТабличногоДокумента.PDF);
		СпсАдресатов=Новый СписокЗначений;
		найденныеСтроки=тзОтправки.найтиСтроки(новый Структура("ПодразделениеОрганизации",ВыборкаДетальныеЗаписи.ПодразделениеОрганизации));
		
		
		для ии=0 по найденныеСтроки.Количество()-1 Цикл
			СпсАдресатов.Добавить(найденныеСтроки[ии].email);
		КонецЦикла;
		
		//{23.06.2016 Островерхий заявка №б/н 
		ПредставлениеОрганизации = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Справочники.ПРГ_Служебный.ОрганизацияПоУмолчанию,Новый Структура("Наименование","Выразить(Объект КАК Справочник.Организации).Наименование")).Наименование; 
		//23.06.2016 Островерхий} 
		
		ПРГ_Регламентый.ОправитьФайл("уведомление о предстоящем отпуске"+СокрЛП(ВыборкаДетальныеЗаписи.ФИО),СпсАдресатов,
			
			"Добрый день!
			| Направляем Вам уведомление о предстоящем отпуске
			| С наилучшими пожеланиями, 
			| Толкачева Елена
			| руководитель отдела КДиОТ
			| "+ПредставлениеОрганизации+"
			| тел. (4742) 42-29-03"
			,имяфайла);
	КонецЦикла;

	

	
	

Конецфункции
//ВадимКонец
Процедура ОтправкаЗаявленийНаОтпуске() экспорт
	
	тзОтправки=получитьТЗДляОтправкиОтпусков();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикОтпусковОрганизаций.Период,
		|	ГрафикОтпусковОрганизаций.Регистратор,
		|	ГрафикОтпусковОрганизаций.Сотрудник,
		|	ГрафикОтпусковОрганизаций.Состояние,
		|	ГрафикОтпусковОрганизаций.ДатаОкончания,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.Должность,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" КАК ФИО,
		|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы.AVT_ПроизводственныйКалендарь,
		|	ГрафикОтпусковОрганизаций.Организация,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество,
		|	ВЫБОР
		|		КОГДА ПРГ_ОтмененыеГрафикиОтпусков.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отменен,
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
		|ПОМЕСТИТЬ ВТ_График
		|ИЗ
		|	РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
		|		ПО ГрафикОтпусковОрганизаций.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
		|		ПО ГрафикОтпусковОрганизаций.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтмененыеГрафикиОтпусков КАК ПРГ_ОтмененыеГрафикиОтпусков
		|		ПО ГрафикОтпусковОрганизаций.Период = ПРГ_ОтмененыеГрафикиОтпусков.Период
		|			И (НАЧАЛОПЕРИОДА(ГрафикОтпусковОрганизаций.ДатаОкончания, ДЕНЬ) = ПРГ_ОтмененыеГрафикиОтпусков.ДатаОкончания)
		|			И ГрафикОтпусковОрганизаций.Сотрудник = ПРГ_ОтмененыеГрафикиОтпусков.Сотрудник
		|ГДЕ
		|	ГрафикОтпусковОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
		|	И ГрафикОтпусковОрганизаций.Период = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&дата, ДЕНЬ, 21), ДЕНЬ)
		|	И РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
		|	РегламентированныйПроизводственныйКалендарь.ВидДня,
		|	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь
		|ПОМЕСТИТЬ ВТ_календарь
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &Дата И ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, 6)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_График.Период,
		|	ВТ_График.Регистратор,
		|	ВТ_График.Сотрудник,
		|	ВТ_График.Состояние,
		|	ВТ_График.ДатаОкончания,
		|	ВТ_График.ПодразделениеОрганизации,
		|	ВТ_График.Должность,
		|	ВТ_График.ФИО,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КолДней,
		|	ВТ_График.Организация,
		|	ВТ_График.Фамилия,
		|	ВТ_График.Имя,
		|	ВТ_График.Отчество
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	ВТ_календарь КАК ВТ_календарь
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_График КАК ВТ_График
		|		ПО (ВТ_календарь.ДатаКалендаря МЕЖДУ ВТ_График.Период И ВТ_График.ДатаОкончания)
		|			И ВТ_календарь.AVT_ПроизводственныйКалендарь = ВТ_График.ГрафикРаботыAVT_ПроизводственныйКалендарь
		|			И (НЕ ВТ_График.Отменен)
		|			И (НЕ ВТ_График.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_График.Период,
		|	ВТ_График.Сотрудник,
		|	ВТ_График.Регистратор,
		|	ВТ_График.ДатаОкончания,
		|	ВТ_График.Состояние,
		|	ВТ_График.ПодразделениеОрганизации,
		|	ВТ_График.Должность,
		|	ВТ_График.ФИО,
		|	ВТ_График.Организация,
		|	ВТ_График.Фамилия,
		|	ВТ_График.Имя,
		|	ВТ_График.Отчество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.Период КАК датаНачала,
		|	вт.Сотрудник,
		|	вт.Состояние,
		|	вт.ДатаОкончания КАК ДатаОкончания,
		|	вт.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	вт.Должность,
		|	вт.ФИО,
		|	вт.КолДней КАК Дней,
		|	ВЫБОР
		|		КОГДА КонтактнаяИнформация.Представление ЕСТЬ NULL 
		|			ТОГДА """"
		|		ИНАЧЕ КонтактнаяИнформация.Представление
		|	КОНЕЦ КАК email,
		|	вт.Сотрудник.Код КАК ТабНомер,
		|	вт.Организация,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" КАК Директор,
		|	вт.Фамилия,
		|	вт.Имя,
		|	вт.Отчество,
		|	ЗначенияСвойствОбъектов.Значение КАК филиал,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК ФамилияДиректор,
		|	ФИОФизЛицСрезПоследних.Имя КАК ИмяДиректор,
		|	ФИОФизЛицСрезПоследних.Отчество КАК ОтчествоДиректор
		|ИЗ
		|	вт КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО вт.Сотрудник.Физлицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Дата, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО вт.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО вт.ПодразделениеОрганизации = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство.Наименование = ""НазваниеФилиала"")
		|ГДЕ
		|	НЕ вт.Период ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	вт.Сотрудник.Наименование";

	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	//Запрос.УстановитьПараметр("Дата", ТекДата);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	макет=Документы.ГрафикОтпусковОрганизаций.ПолучитьМакет("ЗаявлениеНаОтпуск");
	
	область=макет.ПолучитьОбласть("Шапка");
	
	имяфайла=КаталогВременныхФайлов()+"ЗаявлениеНаОтпуск.PDF";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		табдок=Новый ТабличныйДокумент;
		
		область.Параметры.текст="            Прошу предоставить мне ежегодный отпуск на "+Строка(ВыборкаДетальныеЗаписи.дней)+"  календарных дней  с "+формат(ВыборкаДетальныеЗаписи.датаНачала,"ДЛФ=DD")+
		" по "+формат(ВыборкаДетальныеЗаписи.ДатаОкончания,"ДЛФ=DD");
		
				
		область.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		//ФИО=ПРГ_Обработки.проскланятьФИО(ВыборкаДетальныеЗаписи.Фамилия+" "+ВыборкаДетальныеЗаписи.Имя+" "+ВыборкаДетальныеЗаписи.Отчество);
		ФИО=проскланятьФИО(ВыборкаДетальныеЗаписи.Фамилия+" "+ВыборкаДетальныеЗаписи.Имя+" "+ВыборкаДетальныеЗаписи.Отчество);
		МассивСлов 	= РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИО)," ");//ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИО)," ");
		область.Параметры.Фамилия=МассивСлов[0];				
		область.Параметры.Имя=МассивСлов[1];
        область.Параметры.Отчество=МассивСлов[2];
		
		ФИО=ПРГ_Обработки.проскланятьФИО(ВыборкаДетальныеЗаписи.ФамилияДиректор+" "+ВыборкаДетальныеЗаписи.ИмяДиректор+" "+ВыборкаДетальныеЗаписи.ОтчествоДиректор);
		МассивСлов 	= РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИО)," ");//ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИО)," ");
		область.Параметры.Директор=МассивСлов[0]+" "+лев(МассивСлов[1],1)+"."+лев(МассивСлов[2],1)+".";
		
		 		

		область.Параметры.ПодразделениеОрганизации=СокрЛП(ВыборкаДетальныеЗаписи.филиал)+": "+СокрЛП(ВыборкаДетальныеЗаписи.ПодразделениеОрганизации);
		табдок.Вывести(область);
		табдок.АвтоМасштаб=Истина;
		//табдок.Показать();
		ТабДок.Записать(имяфайла,ТипФайлаТабличногоДокумента.PDF);
		СпсАдресатов=Новый СписокЗначений;
		найденныеСтроки=тзОтправки.найтиСтроки(новый Структура("ПодразделенияОрганизаций",ВыборкаДетальныеЗаписи.ПодразделениеОрганизации));
		СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.email);
		
		для ии=0 по найденныеСтроки.Количество()-1 Цикл
			СпсАдресатов.Добавить(найденныеСтроки[ии].email);
		КонецЦикла;
		
		
		ПРГ_Регламентый.ОправитьФайл("Уведомление о предстоящем отпуске "+СокрЛП(ВыборкаДетальныеЗаписи.ФИО),СпсАдресатов,
		
		"Уважаемый коллега!"+Символы.ПС+"Напоминаем Вам, что согласно графику отпусков на "+формат(ВыборкаДетальныеЗаписи.датаНачала,"ДФ='yyyy'")+" год Ваш  ежегодный оплачиваемый отпуск начинается "+
		формат(ВыборкаДетальныеЗаписи.датаНачала,"ДЛФ=DD") +
		Символы.ПС+"Просим  заполнить бланк заявление во вложении ."+
		Символы.ПС+""+
		Символы.ПС+"Заявление необходимо не менее чем за 14 дней до начала отпуска передать в отдел персонала: в г. Липецке - Барановой Екатерине, в г. Москва - Кульковой Ирине. "+
		Символы.ПС+""+
		Символы.ПС+"Для сотрудников, работающих в регионах: сканированную копию заявления  необходимо направить по электронной  почте Барановой Екатерине EBaranova@progressfood.ru.  "+
		Символы.ПС+"Подлинник документа необходимо передать  для отправки в Липецк. В Москве – передать Кульковой Ирине. "+
		Символы.ПС+""+
		Символы.ПС+"В течение 10 дней после отправки заявления Вы получите для ознакомления приказ об отпуске."
		
//		 Уважаемый коллега!
//Напоминаем Вам, что согласно графику отпусков на 2014 год Ваш  ежегодный оплачиваемый отпуск начинается 10 января 2014 г.
//Просим  заполнить бланк заявление во вложении . 

//Заявление необходимо не менее чем за 14 дней до начала отпуска передать в отдел персонала: в г. Липецке - Барановой Екатерине, в г. Москва - Кульковой Ирине. 

//Для сотрудников, работающих в регионах: сканированную копию заявления  необходимо направить по электронной  почте Барановой Екатерине EBaranova@lip.progressfood.ru.  
//Подлинник документа необходимо передать  для отправки в Липецк. В Москве – передать Кульковой Ирине. 


//В течение 10 дней после отправки заявления Вы получите для ознакомления приказ об отпуске.
		
		,имяфайла);
		//
		
		
	КонецЦикла;
	
КонецПроцедуры

Функция проскланятьФИО(ФИО,Падеж=2) Экспорт 
    ввв="";
	МассивСлов 	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИО)," ");
	УниверсальныеМеханизмы.ПросклонятьФамилиюИмяОтчество(глЗначениеПеременной("глКомпонентаСклоненияФИО"),СокрЛП(МассивСлов[0]),МассивСлов[1],МассивСлов[2],Падеж,,ввв);

	возврат ввв;
КонецФункции 

Процедура ВыгрузкаЛимитовСотовойСвязи() экспорт
         //
                КаталогФайла="\\COFS\Share\Mobile_Load\Emploees_Load\";  //  \\Devsrv\1s\blik\проверка       \\COFS\Share\Mobile_Load\Emploees_Load\
                ИмяФайла = "Сотрудники с лимитами.txt";
                ВФайл = КаталогФайла+ИмяФайла;
                ТексФайл = Новый ТекстовыйДокумент;
                Запрос = Новый Запрос;
                Запрос.Текст =
                "ВЫБРАТЬ
                |             ""Сотрудник"" КАК Состояние,
                |             РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Код КАК ТН,
                |             РаботникиОрганизацийСрезПоследних.Сотрудник.Наименование КАК ФИО,
                |             РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подр,
                |             РаботникиОрганизацийСрезПоследних.Должность КАК Долж,
                |             ЗначенияЛимитГСМ.Значение КАК Лимит,
                |             ЗначенияДивизион.Значение КАК Дивизион,
                |             ЗначенияФилиал.Значение КАК Филиал_ДО,
                |             РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения КАК ДатаРожд,
                |             РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол КАК Пол,
                |             РаботникиОрганизацийСрезПоследних.Сотрудник.ДатаПриемаНаРаботу КАК ДатаПриема,
                |             РаботникиОрганизацийСрезПоследних.Сотрудник.ДатаУвольнения КАК ДатаУвольнения,
                |             ТаблицаАдресов.Представление КАК АдресФЛ,
                |             ТаблицаТелНом.Представление КАК ТелНом,
                |             ТаблицаЭлад.Представление КАК Емаил,
                |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ВидУд,
                |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК Серия,
                |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК Номер,
                |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ДатаВ,
                |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК КемВ
                |ИЗ
                |             РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
                |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияЛимитГСМ
                |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ЗначенияЛимитГСМ.Объект
                |                                             И (ЗначенияЛимитГСМ.Свойство В
                |                                                            (ВЫБРАТЬ
                |                                                                            СвойстваОбъектов.Ссылка
                |                                                            ИЗ
                |                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
                |                                                            ГДЕ
                |                                                                            СвойстваОбъектов.Наименование = ""Лимит мобильной связи""))
                |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияДивизион
                |                             ПО (ЗначенияДивизион.Свойство В
                |                                                            (ВЫБРАТЬ
                |                                                                            СвойстваОбъектов.Ссылка
                |                                                            ИЗ
                |                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
                |                                                            ГДЕ
                |                                                                            СвойстваОбъектов.Наименование = ""Дивизион""))
                |                                             И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ЗначенияДивизион.Объект
                |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияФилиал
                |                             ПО (ЗначенияФилиал.Свойство В
                |                                                            (ВЫБРАТЬ
                |                                                                            СвойстваОбъектов.Ссылка
                |                                                            ИЗ
                |                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
                |                                                            ГДЕ
                |                                                                            СвойстваОбъектов.Наименование = ""НазваниеФилиала""))
                |                                             И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ЗначенияФилиал.Объект
                |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТаблицаАдресов
                |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ТаблицаАдресов.Объект
                |                                             И (ТаблицаАдресов.Вид = &ВидАдреса)
                |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТаблицаТелНом
                |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ТаблицаТелНом.Объект
                |                                             И (ТаблицаТелНом.Вид = &ВидТелНом)
                |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТаблицаЭлад
                |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ТаблицаЭлад.Объект
                |                                             И (ТаблицаЭлад.Вид = &Емаил)
                |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ) КАК ПаспортныеДанныеФизЛицСрезПоследних
                |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
                |ГДЕ
                |             РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &ПричинаИзмененияСостояния
                |             И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> &ВидЗанятости
                |  И РаботникиОрганизацийСрезПоследних.Сотрудник.ПометкаУдаления = ЛОЖЬ
    |
                |УПОРЯДОЧИТЬ ПО
                |             ФИО";
                Запрос.УстановитьПараметр("Дата", НачалоМесяца(ТекущаяДата()));
                Запрос.УстановитьПараметр("ПричинаИзмененияСостояния", Перечисления.ПричиныИзмененияСостояния.Увольнение);
                Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
                Запрос.УстановитьПараметр("ВидАдреса", Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
                Запрос.УстановитьПараметр("ВидТелНом", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
                Запрос.УстановитьПараметр("Емаил", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
                
                
                ТекСтрока="";
                ПерваяСТрока="sostoyanie;filial_DO;division;TN;sotrudnik;otdel;dolz;Limit;Address;MobilePhoneNo;EMail;BirthDate;";
                ПерваяСТрока=ПерваяСТрока+"Sex;EmploymentDate;Status;TerminationDate;Passport;DepCode";
                ТексФайл.ДобавитьСтроку(ПерваяСТрока);
                Результат = Запрос.Выполнить();
                Выборка = Результат.Выбрать();
                
                
                Пока Выборка.Следующий() Цикл 
                               ТекСтрока = "Работает"+";"+СокрЛП(СтрЗаменить(Строка(Выборка.Филиал_ДО),";",","))+";"+
                               ?(Выборка.Дивизион=Null,СокрЛП(СтрЗаменить(Строка(Выборка.Филиал_ДО),";",",")),СокрЛП(СтрЗаменить(Строка(Выборка.Дивизион),";",",")))+";"
                                +СокрЛП(Строка(Выборка.ТН))+";"+СокрЛП(Строка(Выборка.ФИО))+";"+СокрЛП(Строка(Выборка.Подр))+";"
                               +СокрЛП(Строка(Выборка.Долж))+";"+СокрЛП(Строка(Формат(Выборка.Лимит,"ЧЦ=15; ЧДЦ=0; ЧГ=0")))+";"
                                +СокрЛП(СтрЗаменить(Строка(Выборка.АдресФЛ),";",","))+";"+СокрЛП(СтрЗаменить(Строка(Выборка.ТелНом),";",","))+";"+СокрЛП(СтрЗаменить(Строка(Выборка.Емаил),";",","))+";"
                               +СокрЛП(Строка(Формат(Выборка.ДатаРожд,"ДФ=dd.MM.yyyy; ДП=''")))+";"+СокрЛП(Строка(Выборка.Пол))+";"
                               +СокрЛП(Строка(Формат(Выборка.ДатаПриема,"ДФ=dd.MM.yyyy; ДП=''")))+";"
                               +?(Формат(Выборка.ДатаУвольнения,"ДФ=dd.MM.yyyy; ДП=''")="01.01.0001","Активен","Уволен")+";"
                               +?(Формат(Выборка.ДатаУвольнения,"ДФ=dd.MM.yyyy; ДП=''")="01.01.0001","",СокрЛП(Строка(Формат(Выборка.ДатаУвольнения,"ДФ=dd.MM.yyyy; ДП=''"))))+";"
                               + СокрЛП(Строка(Выборка.ВидУд))+","+СокрЛП(Строка(Выборка.Серия))+","+СокрЛП(Строка(Выборка.Номер))+","
                               +СокрЛП(Строка(Формат(Выборка.ДатаВ,"ДФ=dd.MM.yyyy; ДП=''")))+","+СокрЛП(Строка(Выборка.КемВ))+";"
                               +СокрЛП(Строка(Выборка.Подр.Код));
                               ТексФайл.ДобавитьСтроку(ТекСтрока);
                КонецЦикла;
                ТексФайл.Записать(ВФайл,"windows-1251");

	
КонецПроцедуры
//выгрузка для Nav
Процедура ВыгрузкаДляНав() экспорт
         //
		 КаталогФайла="\\COFS\Share\Mobile_Load\Emploees_Load\";  //  \\Devsrv\1s\blik\проверка       \\COFS\Share\Mobile_Load\Emploees_Load\
		 ИмяФайла = "Сотрудники Navision.txt";
		 ВФайл = КаталогФайла+ИмяФайла;
		 ТексФайл = Новый ТекстовыйДокумент;
		 Запрос = Новый Запрос;
		 Запрос.Текст =
		 "ВЫБРАТЬ
		 |             ""Сотрудник"" КАК Состояние,
		 |             РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Код КАК ТН,
		 |             РаботникиОрганизацийСрезПоследних.Сотрудник.Наименование КАК ФИО,
		 |             РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подр,
		 |             РаботникиОрганизацийСрезПоследних.Должность КАК Долж,
		 |             ЗначенияЛимитГСМ.Значение КАК Лимит,
		 |             ЗначенияДивизион.Значение КАК Дивизион,
		 |             ЗначенияФилиал.Значение КАК Филиал_ДО,
		 |             РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения КАК ДатаРожд,
		 |             РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол КАК Пол,
		 |             РаботникиОрганизацийСрезПоследних.Сотрудник.ДатаПриемаНаРаботу КАК ДатаПриема,
		 |             РаботникиОрганизацийСрезПоследних.Сотрудник.ДатаУвольнения КАК ДатаУвольнения,
		 |             ТаблицаАдресов.Представление КАК АдресФЛ,
		 |             ТаблицаТелНом.Представление КАК ТелНом,
		 |             ТаблицаЭлад.Представление КАК Емаил,
		 |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ВидУд,
		 |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК Серия,
		 |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК Номер,
		 |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ДатаВ,
		 |             ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК КемВ
		 |ИЗ
		 |             РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
		 |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияЛимитГСМ
		 |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ЗначенияЛимитГСМ.Объект
		 |                                             И (ЗначенияЛимитГСМ.Свойство В
		 |                                                            (ВЫБРАТЬ
		 |                                                                            СвойстваОбъектов.Ссылка
		 |                                                            ИЗ
		 |                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		 |                                                            ГДЕ
		 |                                                                            СвойстваОбъектов.Наименование = ""Лимит мобильной связи""))
		 |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияДивизион
		 |                             ПО (ЗначенияДивизион.Свойство В
		 |                                                            (ВЫБРАТЬ
		 |                                                                            СвойстваОбъектов.Ссылка
		 |                                                            ИЗ
		 |                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		 |                                                            ГДЕ
		 |                                                                            СвойстваОбъектов.Наименование = ""Дивизион""))
		 |                                             И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ЗначенияДивизион.Объект
		 |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияФилиал
		 |                             ПО (ЗначенияФилиал.Свойство В
		 |                                                            (ВЫБРАТЬ
		 |                                                                            СвойстваОбъектов.Ссылка
		 |                                                            ИЗ
		 |                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		 |                                                            ГДЕ
		 |                                                                            СвойстваОбъектов.Наименование = ""НазваниеФилиала""))
		 |                                             И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ЗначенияФилиал.Объект
		 |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТаблицаАдресов
		 |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ТаблицаАдресов.Объект
		 |                                             И (ТаблицаАдресов.Вид = &ВидАдреса)
		 |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТаблицаТелНом
		 |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ТаблицаТелНом.Объект
		 |                                             И (ТаблицаТелНом.Вид = &ВидТелНом)
		 |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТаблицаЭлад
		 |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ТаблицаЭлад.Объект
		 |                                             И (ТаблицаЭлад.Вид = &Емаил)
		 |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ) КАК ПаспортныеДанныеФизЛицСрезПоследних
		 |                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		 |ГДЕ
		 |             РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &ПричинаИзмененияСостояния
		 |             И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> &ВидЗанятости
		 |  И РаботникиОрганизацийСрезПоследних.Сотрудник.ПометкаУдаления = ЛОЖЬ
		 |
		 |УПОРЯДОЧИТЬ ПО
		 |             ФИО";
		 Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		 Запрос.УстановитьПараметр("ПричинаИзмененияСостояния", Перечисления.ПричиныИзмененияСостояния.Увольнение);
		 Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		 Запрос.УстановитьПараметр("ВидАдреса", Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
		 Запрос.УстановитьПараметр("ВидТелНом", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
		 Запрос.УстановитьПараметр("Емаил", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
		 
		 
		 ТекСтрока="";
		 ПерваяСТрока="sostoyanie;filial_DO;division;TN;sotrudnik;otdel;dolz;Limit;Address;MobilePhoneNo;EMail;BirthDate;";
		 ПерваяСТрока=ПерваяСТрока+"Sex;EmploymentDate;Status;TerminationDate;Passport;DepCode";
		 ТексФайл.ДобавитьСтроку(ПерваяСТрока);
		 Результат = Запрос.Выполнить();
		 Выборка = Результат.Выбрать();
		 
		 
		 Пока Выборка.Следующий() Цикл 
			 ТекСтрока = "Работает"+";"+СокрЛП(СтрЗаменить(Строка(Выборка.Филиал_ДО),";",","))+";"+
			 ?(Выборка.Дивизион=Null,СокрЛП(СтрЗаменить(Строка(Выборка.Филиал_ДО),";",",")),СокрЛП(СтрЗаменить(Строка(Выборка.Дивизион),";",",")))+";"
			 +СокрЛП(Строка(Выборка.ТН))+";"+СокрЛП(Строка(Выборка.ФИО))+";"+СокрЛП(Строка(Выборка.Подр))+";"
			 +СокрЛП(Строка(Выборка.Долж))+";"+СокрЛП(Строка(Формат(Выборка.Лимит,"ЧЦ=15; ЧДЦ=0; ЧГ=0")))+";"
			 +СокрЛП(СтрЗаменить(Строка(Выборка.АдресФЛ),";",","))+";"+СокрЛП(СтрЗаменить(Строка(Выборка.ТелНом),";",","))+";"+СокрЛП(СтрЗаменить(Строка(Выборка.Емаил),";",","))+";"
			 +СокрЛП(Строка(Формат(Выборка.ДатаРожд,"ДФ=dd.MM.yyyy; ДП=''")))+";"+СокрЛП(Строка(Выборка.Пол))+";"
			 +СокрЛП(Строка(Формат(Выборка.ДатаПриема,"ДФ=dd.MM.yyyy; ДП=''")))+";"
			 +?(Формат(Выборка.ДатаУвольнения,"ДФ=dd.MM.yyyy; ДП=''")="01.01.0001","Активен","Уволен")+";"
			 +?(Формат(Выборка.ДатаУвольнения,"ДФ=dd.MM.yyyy; ДП=''")="01.01.0001","",СокрЛП(Строка(Формат(Выборка.ДатаУвольнения,"ДФ=dd.MM.yyyy; ДП=''"))))+";"
			 + СокрЛП(Строка(Выборка.ВидУд))+","+СокрЛП(Строка(Выборка.Серия))+","+СокрЛП(Строка(Выборка.Номер))+","
			 +СокрЛП(Строка(Формат(Выборка.ДатаВ,"ДФ=dd.MM.yyyy; ДП=''")))+","+СокрЛП(Строка(Выборка.КемВ))+";"
			 +СокрЛП(Строка(Выборка.Подр.Код));
			 ТексФайл.ДобавитьСтроку(ТекСтрока);
		 КонецЦикла;
		 ТексФайл.Записать(ВФайл,"windows-1251");

	
КонецПроцедуры

///Вадим 06.08.2013 11:13:24
Процедура ВыгрузкаАналитикиКС()
	//
	КаталогФайла="\\COFS\Share\Mobile_Load\Emploees_Load\Analitika_KC\";  //  \\Devsrv\1s\blik\проверка   \\COFS\Share\Mobile_Load\Emploees_Load\Analitika_KC\
	ИмяФайла = "Analitika_KC_Сотрудники.txt";
	ВФайл = КаталогФайла+ИмяФайла;
	ТексФайл = Новый ТекстовыйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|             ВложенныйЗапрос.AVTШтатноеРасписание,
	|             ВложенныйЗапрос.КоличествоСтавок,
	|             ВложенныйЗапрос.ПодразделениеОрганизации,
	|             ВложенныйЗапрос.Должность,
	|             ВложенныйЗапрос.МаксимальнаяТарифнаяСтавка
	|ПОМЕСТИТЬ ВТ_Штатка
	|ИЗ
	|             (ВЫБРАТЬ
	|                             ШтатноеРасписаниеОрганизацийСрезПоследних.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
	|                             СУММА(ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок) КАК КоличествоСтавок,
	|                             ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|                             ШтатноеРасписаниеОрганизацийСрезПоследних.Должность КАК Должность,
	|                             ШтатноеРасписаниеОрганизацийСрезПоследних.МаксимальнаяТарифнаяСтавка КАК МаксимальнаяТарифнаяСтавка,
	|                             ВЫБОР
	|                                             КОГДА НЕ ПРГ_ЗамороженныеШтатки.ШтатнаяЕдиница ЕСТЬ NULL 
	|                                                            ТОГДА ИСТИНА
	|                                             ИНАЧЕ ЛОЖЬ
	|                             КОНЕЦ КАК Заморожена
	|             ИЗ
	|                             РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&Дата, ) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
	|                                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ЗамороженныеШтатки.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), ) КАК ПРГ_ЗамороженныеШтатки
	|                                             ПО ШтатноеРасписаниеОрганизацийСрезПоследних.AVTШтатноеРасписание = ПРГ_ЗамороженныеШтатки.ШтатнаяЕдиница
	|             ГДЕ
	|                             НЕ ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок = 0
	|             
	|             СГРУППИРОВАТЬ ПО
	|                             ШтатноеРасписаниеОрганизацийСрезПоследних.AVTШтатноеРасписание,
	|                             ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|                             ШтатноеРасписаниеОрганизацийСрезПоследних.Должность,
	|                             ШтатноеРасписаниеОрганизацийСрезПоследних.МаксимальнаяТарифнаяСтавка,
	|                             ВЫБОР
	|                                             КОГДА НЕ ПРГ_ЗамороженныеШтатки.ШтатнаяЕдиница ЕСТЬ NULL 
	|                                                            ТОГДА ИСТИНА
	|                                             ИНАЧЕ ЛОЖЬ
	|                             КОНЕЦ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|             ЗанятыеШтатныеЕдиницыОрганизаций.AVTШтатноеРасписание,
	|             ЗанятыеШтатныеЕдиницыОрганизаций.Должность,
	|             ЗанятыеШтатныеЕдиницыОрганизаций.ПодразделениеОрганизации,
	|             СУММА(ВЫБОР
	|                                             КОГДА ЗанятыеШтатныеЕдиницыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|                                                            ТОГДА ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавок
	|                                             ИНАЧЕ -ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавок
	|                             КОНЕЦ) КАК Количество,
	|             ЗанятыеШтатныеЕдиницыОрганизаций.Сотрудник
	|ПОМЕСТИТЬ ВТ_ЗанятыеШтатки
	|ИЗ
	|             РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК ЗанятыеШтатныеЕдиницыОрганизаций
	|ГДЕ
	|             ЗанятыеШтатныеЕдиницыОрганизаций.Период <= &дата
	|             И НЕ ЗанятыеШтатныеЕдиницыОрганизаций.AVTШтатноеРасписание = ЗНАЧЕНИЕ(Справочник.AVT_ШтатноеРасписание.пустаяссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|             ЗанятыеШтатныеЕдиницыОрганизаций.AVTШтатноеРасписание,
	|             ЗанятыеШтатныеЕдиницыОрганизаций.Должность,
	|             ЗанятыеШтатныеЕдиницыОрганизаций.ПодразделениеОрганизации,
	|             ЗанятыеШтатныеЕдиницыОрганизаций.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|             РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния,
	|             РаботникиОрганизацийСрезПоследних.Сотрудник
	|ПОМЕСТИТЬ ВТ_Уволенные
	|ИЗ
	|             РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|             СУММА(ВТ_Штатка.КоличествоСтавок) КАК КоличествоСтавок,
	|             ВТ_Штатка.ПодразделениеОрганизации КАК Подразделение,
	|             ВТ_Штатка.Должность КАК Должность,
	|             ВТ_Штатка.ПодразделениеОрганизации.Родитель КАК Служба,
	|             ЗначенияСвойствОбъектовФилиал.Значение КАК Офис,
	|             ЗначенияСвойствОбъектовДивизион.Значение КАК Дивизион,
	|             ЗначенияСвойствОбъектовКС.Значение КАК КС
	|ИЗ
	|             ВТ_Штатка КАК ВТ_Штатка
	|                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовФилиал
	|                             ПО ВТ_Штатка.ПодразделениеОрганизации = ЗначенияСвойствОбъектовФилиал.Объект
	|                                             И (ЗначенияСвойствОбъектовФилиал.Свойство В
	|                                                            (ВЫБРАТЬ
	|                                                                            СвойстваОбъектов.Ссылка
	|                                                            ИЗ
	|                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|                                                            ГДЕ
	|                                                                            СвойстваОбъектов.Наименование = ""НазваниеФилиала""))
	|                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовДивизион
	|                             ПО ВТ_Штатка.ПодразделениеОрганизации = ЗначенияСвойствОбъектовДивизион.Объект
	|                                             И (ЗначенияСвойствОбъектовДивизион.Свойство В
	|                                                            (ВЫБРАТЬ
	|                                                                            СвойстваОбъектов.Ссылка
	|                                                            ИЗ
	|                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|                                                            ГДЕ
	|                                                                            СвойстваОбъектов.Наименование = ""Дивизион""))
	|                             ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовКС
	|                             ПО ВТ_Штатка.ПодразделениеОрганизации = ЗначенияСвойствОбъектовКС.Объект
	|                                             И (ЗначенияСвойствОбъектовКС.Свойство В
	|                                                            (ВЫБРАТЬ
	|                                                                            СвойстваОбъектов.Ссылка
	|                                                            ИЗ
	|                                                                            ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|                                                            ГДЕ
	|                                                                            СвойстваОбъектов.Наименование = ""Ком служба""))
	|
	|СГРУППИРОВАТЬ ПО
	|             ВТ_Штатка.ПодразделениеОрганизации,
	|             ВТ_Штатка.Должность,
	|             ВТ_Штатка.ПодразделениеОрганизации.Родитель,
	|             ЗначенияСвойствОбъектовФилиал.Значение,
	|             ЗначенияСвойствОбъектовДивизион.Значение,
	|             ЗначенияСвойствОбъектовКС.Значение";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	ТекСтрока="";
	ПерваяСТрока="Год;Месяц;Дивизион;Офис;Служба;Подразделение;Должность;Количество";
	ТексФайл.ДобавитьСтроку(ПерваяСТрока);
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСтрока = СокрЛП(Формат(ТекущаяДата(),"ДФ=yyyy"))+";"
		+ СокрЛП(Формат(ТекущаяДата(),"ДФ=MM"))+";"
		+ СокрЛП(Строка(Выборка.Дивизион))+";"+ СокрЛП(Строка(Выборка.Офис))+";"+ СокрЛП(Строка(Выборка.Служба))+";"
		+ СокрЛП(Строка(Выборка.Подразделение))+";"+ СокрЛП(Строка(Выборка.Должность))+";"
		+ СокрЛП(Строка(Выборка.КоличествоСтавок));
		ТексФайл.ДобавитьСтроку(ТекСтрока); 
	КонецЦикла;
	ТексФайл.Записать(ВФайл,"windows-1251");
	
	
	
	
КонецПроцедуры
//ВадимКонец



///Вадим 26.02.2013 11:35:31
Процедура ОчишениеДатыОкончанияДоговора()
	датокончания=НачалоДня(началоДня(ТекущаяДата())-86400);////Blik 201015 44862 //-1);
	Запрос = Новый Запрос;
	Запрос.Текст =
	//Blik 140815 в запрос добавила выбор подразделения и должности задача б/н
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.ДатаНачала,
	|	СотрудникиОрганизаций.ДатаОкончания,
	|	СотрудникиОрганизаций.Наименование,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.Должность
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаОкончания, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	СотрудникиОрганизаций.ДатаОкончания = &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаОкончания", датокончания);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	текстПисьма="";
	Пока Выборка.Следующий() Цикл
		текстПисьма=текстПисьма+?(текстПисьма="","",Символы.ПС)+"  "+Выборка.Наименование+" подразделение "+Выборка.ПодразделениеОрганизации+" должность "+Выборка.Должность+" дата расторжения "+формат(выборка.ДатаОкончания,"ДЛФ=D");
		об=Выборка.ссылка.получитьОбъект();
		об.ДатаОкончания=Дата("01.01.0001 0:00:00");
		об.записать();
	КонецЦикла;
	Если не текстПисьма="" тогда
		текстПисьма="у следующих сотрудников завершается срок трудового договора:"+Символы.ПС+текстПисьма+Символы.ПС+". Обнулена дата завершения трудового договора.";
		
		Запрос = Новый Запрос;
		Запрос.Текст =  получитьТекстЗапроса("ОчисткаДатыОкончанияСрочногоТрудовогоДоговора");
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
			СпсАдресатов=Новый СписокЗначений;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
			КонецЦикла;
			ОправитьФайл("У следующих сотрудников обнулена дата окончания трудового договора которая равнялась "+формат(датокончания,"ДЛФ=D"),СпсАдресатов,текстПисьма);
			
		КонецЦикла;
	Конецесли;
	
КонецПроцедуры
//ВадимКонец
//Blik 41526 140715 н
Процедура УведомлениеЗа10ДнейОЗавершенииСрочногоТД()
	датокончания=НачалоДня(началоДня(ТекущаяДата())+864000);//11);//Blik 201015 44862 +10 дней 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.ДатаНачала,
	|	СотрудникиОрганизаций.ДатаОкончания,
	|	СотрудникиОрганизаций.Наименование,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.Должность
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.ДатаОкончания = &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаОкончания", датокончания);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	текстПисьма="";
	Пока Выборка.Следующий() Цикл
		об=Выборка.ссылка.получитьОбъект();
		об.записать();
		текстПисьма=текстПисьма+?(текстПисьма="","",Символы.ПС)+"  "+Выборка.Наименование+" подразделение "+Выборка.ПодразделениеОрганизации+" должность "+Выборка.Должность+" дата расторжения "+формат(выборка.ДатаОкончания,"ДЛФ=D");
		
	КонецЦикла;
	Если не текстПисьма="" тогда
		текстПисьма="у следующих сотрудников до окончания срочного трудового договора осталось 10 дней:"+Символы.ПС+текстПисьма;
		
		Запрос = Новый Запрос;
		Запрос.Текст =  получитьТекстЗапроса("ОчисткаДатыОкончанияСрочногоТрудовогоДоговора");
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
			СпсАдресатов=Новый СписокЗначений;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
			КонецЦикла;
			ОправитьФайл("У следующих сотрудников осрочный трудовой договор заканчивается "+формат(датокончания,"ДЛФ=D"),СпсАдресатов,текстПисьма);
			
		КонецЦикла;
	Конецесли;
	
КонецПроцедуры
//Blik 41526 140715 к



Функция получитьТекстЗапроса(отбор) экспорт
	
	Если отбор = "ОстаткиОтпусков" Тогда  //Blik 070916 56443 
		возврат  
		"ВЫБРАТЬ
		|	ПРГ_СписокРассылкиОтчетов.ФизЛицо,
		|	ПРГ_СписокРассылкиОтчетов.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций,
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.ПРГ_СписокРассылкиОтчетов КАК ПРГ_СписокРассылкиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ПРГ_СписокРассылкиОтчетов.ФизЛицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ПРГ_СписокРассылкиОтчетов."+отбор+"
		|   и ПРГ_СписокРассылкиОтчетов.ПодразделенияОрганизаций не в (ВЫБРАТЬ
		|		ПРГ_СлужебныйТаблицаПараметров.Параметр КАК Подразделение
		|		ИЗ
		|			Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
		|		ГДЕ
		|			ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""ДепартаменИТ"")
		|ИТОГИ ПО
		|	ПодразделенияОрганизаций";
		
	Иначе  //Blik 070916 56443 н
		возврат  
		"ВЫБРАТЬ
		|	ПРГ_СписокРассылкиОтчетов.ФизЛицо,
		|	ПРГ_СписокРассылкиОтчетов.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций,
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.ПРГ_СписокРассылкиОтчетов КАК ПРГ_СписокРассылкиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ПРГ_СписокРассылкиОтчетов.ФизЛицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ПРГ_СписокРассылкиОтчетов."+отбор+"
		|ИТОГИ ПО
		|	ПодразделенияОрганизаций";

	КонецЕсли;  //Blik 070916 56443  к
	
КонецФункции	



/////////////////////////////////////////////////////ОТправка Документов
////////////////////////////////////////////////////////Отправка писем по документам
/////Вадим 14.01.2013 11:14:29


Процедура ПРГ_РассылкаДокументов() Экспорт
	//Blik 251013  22838 в запрос добавлен выбор доков - командировки и сл поездки
	//Blik 051113  23104 в запрос добавлен док отпуска по задаче
	//Blik 060815 42596 для командировок и сл поездок рассылка док сделана с глубиной -30 дней
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Документ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Ссылка КАК Ссылка,
	|		ПРГ_ОтправленыеДокументы.Документ КАК Документ
	|	ИЗ
	|		Документ.КадровоеПеремещениеОрганизаций КАК Док
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|			ПО Док.Ссылка = ПРГ_ОтправленыеДокументы.Документ
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
	|	ГДЕ
	|		Док.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -30)
	|		И Док.Проведен
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Док.Ссылка,
	|		ПРГ_ОтправленыеДокументы.Документ
	|	ИЗ
	|		Документ.ПриемНаРаботуВОрганизацию КАК Док
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|			ПО Док.Ссылка = ПРГ_ОтправленыеДокументы.Документ
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
	|	ГДЕ
	|		Док.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -30)
	|		И Док.Проведен
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Док.Ссылка,
	|		ПРГ_ОтправленыеДокументы.Документ
	|	ИЗ
	|		Документ.УвольнениеИзОрганизаций КАК Док
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|			ПО Док.Ссылка = ПРГ_ОтправленыеДокументы.Документ
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
	|	ГДЕ
	|		Док.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -30)
	|		И Док.Проведен
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		AVT_СлужебныеПоездки.Ссылка,
	|		ПРГ_ОтправленыеДокументы.Документ
	|	ИЗ
	|		Документ.AVT_СлужебныеПоездки КАК AVT_СлужебныеПоездки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|			ПО AVT_СлужебныеПоездки.Ссылка = ПРГ_ОтправленыеДокументы.Документ
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО AVT_СлужебныеПоездки.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство В
	|					(ВЫБРАТЬ
	|						СвойстваОбъектов.Ссылка
	|					ИЗ
	|						ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|					ГДЕ
	|						СвойстваОбъектов.Наименование = ""Отправлять командировки служ. поездки""))
	|	ГДЕ
	|		AVT_СлужебныеПоездки.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -30)
	|		И НЕ AVT_СлужебныеПоездки.ПометкаУдаления
	|		И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		КомандировкиОрганизаций.Ссылка,
	|		ПРГ_ОтправленыеДокументы.Документ
	|	ИЗ
	|		Документ.КомандировкиОрганизаций КАК КомандировкиОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|			ПО КомандировкиОрганизаций.Ссылка = ПРГ_ОтправленыеДокументы.Документ
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО КомандировкиОрганизаций.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство В
	|					(ВЫБРАТЬ
	|						СвойстваОбъектов.Ссылка
	|					ИЗ
	|						ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|					ГДЕ
	|						СвойстваОбъектов.Наименование = ""Отправлять командировки служ. поездки""))
	|	ГДЕ
	|		КомандировкиОрганизаций.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -30)
	|		И КомандировкиОрганизаций.Проведен
	|		И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ОтпускаОрганизаций.Ссылка,
	|		ПРГ_ОтправленыеДокументы.Документ
	|	ИЗ
	|		Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|			ПО ОтпускаОрганизаций.Ссылка = ПРГ_ОтправленыеДокументы.Документ
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
	|	ГДЕ
	|		ОтпускаОрганизаций.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -2)
	|		И ОтпускаОрганизаций.Проведен) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Документ ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтправкаДокументовНаПочту(Выборка.ссылка);
	КонецЦикла;
	
	//Blik 270315 37865 н
	      РассылкаПоЗапросамНаПредоставлениеДокументов();
	//Blik 270315 37865 к
	
	ФормированиеУведомленийПоПоступлениям('20160330'); // Шевченков №47237 20160317
    ФормированиеУведомленийПоОтстранениям(); //Blik 160916 56829
	
	//Blik 130917 67870 н
	ФормированиеРассылкиПоЗаказам_Дегустация_ДегустацияПР();
	//Blik 130917 67870 к
	
	
	
КонецПроцедуры

//Blik 270315 37865 н
Процедура РассылкаПоЗапросамНаПредоставлениеДокуметовЕжеднев() Экспорт
	//Blik 290216 49617 н
	НастройкиРассылки   = ПолучитьНастройкиРассылкиУведомлений();  
	Отправитель_robot1s = СокрЛП(Строка(НастройкиРассылки.Найти("Отправитель_robot1s", "Параметр").ЗначениеПараметра)); 
	//Blik 290216 49617 к
	Начдата = НачалоДня(ТекущаяДата()-86400);
	Кондата = КонецДня(ТекущаяДата()+86400);
    Текдата = КонецДня(ТекущаяДата());
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Запрос,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Инициатор,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Исполнитель,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Отправлено,
	|	адресИсп.Представление КАК адресИсп,
	|	адресИниц.Представление КАК адресИниц,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.ПредметЗапроса,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.ВидЗапроса,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Период,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Организация,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
	|	АдресРукИсп.Представление КАК адресИспРук
	|ИЗ
	|	РегистрСведений.ПРГ_ЗапросынаПредоставлениеДокументов КАК ПРГ_ЗапросынаПредоставлениеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК адресИсп
	|		ПО ПРГ_ЗапросынаПредоставлениеДокументов.Исполнитель.ФизЛицо = адресИсп.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК адресИниц
	|		ПО ПРГ_ЗапросынаПредоставлениеДокументов.Инициатор.ФизЛицо = адресИниц.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Началопериода, ) КАК РаботникиОрганизацийСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Началопериода, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресРукИсп
	|				ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = АдресРукИсп.Объект
	|			ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
	|		ПО ПРГ_ЗапросынаПредоставлениеДокументов.Исполнитель.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|ГДЕ
	|	адресИсп.Вид = &Вид
	|	И адресИниц.Вид = &Вид
	|	И КОНЕЦПЕРИОДА(ПРГ_ЗапросынаПредоставлениеДокументов.Запрос.ДатаИсполнения, ДЕНЬ) < &Текдата
	|	И АдресРукИсп.Вид = &Вид
	|	И ПРГ_ЗапросынаПредоставлениеДокументов.Запрос.Статус = ЗНАЧЕНИЕ(Перечисление.ПРГ_СтатусыЗапросовНаПредоставление.Открыт)
	//Blik 191017 71858 н
	|	И РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок > 0"
	//Blik 191017 71858 к
	;
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Началопериода", Начдата);
    Запрос.УстановитьПараметр("КонецПериода", Кондата);
     Запрос.УстановитьПараметр("Текдата", Текдата);
	 
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура("Запрос,Инициатор,Исполнитель,ПредметЗапроса,ВидЗапроса,Период,Организация",
		Выборка.Запрос,Выборка.Инициатор,Выборка.Исполнитель,Выборка.ПредметЗапроса,Выборка.ВидЗапроса,Выборка.Период,Выборка.Организация);
		
		Если не ЗначениеЗаполнено(Выборка.Запрос.ДатаЗакрытия) Тогда			
			Текст="Вам был назначен запрос на предоставление документов  "+СокрЛП(строка(Выборка.Запрос))+". На  "+СокрЛП(строка(Выборка.ВидЗапроса))+Символы.ПС+"
			|Предмет запроса  "+СокрЛП(строка(Выборка.ПредметЗапроса))+Символы.ПС+"
			|Инициатор: "+СокрЛП(строка(Выборка.Инициатор))+Символы.ПС+"
			|Срок исполнения запроса просрочен!!!";  
			
			проверка=ложь;
			неОтправлять = 0;
			АдресПолучателя = СокрЛП(Строка(Выборка.адресИсп));
			СпсАдресатов=Новый СписокЗначений;
			СпсАдресатов.Добавить(Выборка.адресИниц);
            СпсАдресатов.Добавить(Выборка.адресИспРук);
			АдресКопии = СпсАдресатов;//СокрЛП(Строка(Выборка.адресИниц))+","+СокрЛП(Строка(Выборка.адресИспРук));
			Если АдресПолучателя = "" Тогда
				текстДляОшибок = "Нет адреса фл " + СокрЛП(Строка(Выборка.Исполнитель));	 
				ТекстОшибки="Не ушло письмо с текстом:"+Символы.ПС+текстДляОшибок+Символы.ПС+" для "+Символы.ПС+" описание ошибки:"+Символы.ПС+ОписаниеОшибки();
				ОправитьФайл("!!!!!!!!!!!!!!!!!!!!!!!Не ушло письмо","ikalmatskaya@progressfood.ru",ТекстОшибки);   //Blik 290216 49617
				неОтправлять = 1;
			КонецЕсли;
			Если неОтправлять = 0 Тогда
				 ОправитьФайл_У("Уведомление о назначении задачния: ",АдресПолучателя,АдресКопии,Текст,Неопределено,проверка,Отправитель_robot1s);//"robot1s@lip.progressfood.ru");   //Blik 290216 49617
			КонецЕсли;
			Если Проверка тогда
				//ЗаписатьДокументПоОтправкеЗапроса(СтруктураСтроки);
			Конецесли;
			
		КонецЕсли;
         
	КонецЦикла;
КонецПроцедуры

Процедура РассылкаПоЗапросамНаПредоставлениеДокументов() Экспорт
	//Blik 290216 49617 н
	НастройкиРассылки   = ПолучитьНастройкиРассылкиУведомлений(); 
	АдресСервераSMTP    = СокрЛП(строка(НастройкиРассылки.Найти("АдресСервераSMTP", "Параметр").ЗначениеПараметра));
	ПортSMTP            = СокрЛП(Строка(НастройкиРассылки.Найти("ПортSMTP", "Параметр").ЗначениеПараметра));  
	Отправитель_robot1s = СокрЛП(Строка(НастройкиРассылки.Найти("Отправитель_robot1s", "Параметр").ЗначениеПараметра)); 
	//Blik 290216 49617 к

	Начдата = НачалоДня(ТекущаяДата()-86400);
	Кондата = КонецДня(ТекущаяДата()+86400);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Запрос,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Статус,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Инициатор,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Исполнитель,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Отправлено,
	|	адресИсп.Представление КАК адресИсп,
	|	адресИниц.Представление КАК адресИниц,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.ПредметЗапроса,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.ВидЗапроса,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Период,
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Организация,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
	|	АдресРукИсп.Представление КАК адресИспРук
	|ИЗ
	|	РегистрСведений.ПРГ_ЗапросынаПредоставлениеДокументов КАК ПРГ_ЗапросынаПредоставлениеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК адресИсп
	|		ПО ПРГ_ЗапросынаПредоставлениеДокументов.Исполнитель.ФизЛицо = адресИсп.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК адресИниц
	|		ПО ПРГ_ЗапросынаПредоставлениеДокументов.Инициатор.ФизЛицо = адресИниц.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Началопериода, ) КАК РаботникиОрганизацийСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Началопериода, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресРукИсп
	|				ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = АдресРукИсп.Объект
	|			ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
	|		ПО ПРГ_ЗапросынаПредоставлениеДокументов.Исполнитель.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|ГДЕ
	|	ПРГ_ЗапросынаПредоставлениеДокументов.Период МЕЖДУ &Началопериода И &КонецПериода
	|	И ПРГ_ЗапросынаПредоставлениеДокументов.Отправлено = ЛОЖЬ
	|	И адресИсп.Вид = &Вид
	|	И адресИниц.Вид = &Вид
	|	И АдресРукИсп.Вид = &Вид
	|	И ПРГ_ЗапросынаПредоставлениеДокументов.Запрос.ПровереноКК = Ложь
	//Blik 191017 71858 н
	|	И РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок > 0"
	//Blik 191017 71858 к
	;
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Началопериода", Начдата);
    Запрос.УстановитьПараметр("КонецПериода", Кондата);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура("Запрос,Статус,Инициатор,Исполнитель,ПредметЗапроса,ВидЗапроса,Период,Организация",
		Выборка.Запрос,Выборка.Статус,Выборка.Инициатор,Выборка.Исполнитель,Выборка.ПредметЗапроса,Выборка.ВидЗапроса,Выборка.Период,Выборка.Организация);
		
		Если Выборка.Статус = Перечисления.ПРГ_СтатусыЗапросовНаПредоставление.Открыт Тогда
			
			Текст="Вам назначен запрос на предоставление документов  "+СокрЛП(строка(Выборка.Запрос))+". На  "+СокрЛП(строка(Выборка.ВидЗапроса))+Символы.ПС+"
			|Предмет запроса  "+СокрЛП(строка(Выборка.ПредметЗапроса))+Символы.ПС+"
			|Инициатор: "+СокрЛП(строка(Выборка.Инициатор))+".";  
			
			проверка=ложь;
			неОтправлять = 0;
			АдресПолучателя = СокрЛП(Строка(Выборка.адресИсп));
			СпсАдресатов=Новый СписокЗначений;
			СпсАдресатов.Добавить(Выборка.адресИниц);
            СпсАдресатов.Добавить(Выборка.адресИспРук);
			АдресКопии = СпсАдресатов;// СокрЛП(Строка(Выборка.адресИниц))+","+СокрЛП(Строка(Выборка.адресИспРук));
			Если АдресПолучателя = "" Тогда
				текстДляОшибок = "Нет адреса фл " + СокрЛП(Строка(Выборка.Исполнитель));	 
				ТекстОшибки="Не ушло письмо с текстом:"+Символы.ПС+текстДляОшибок+Символы.ПС+" для "+Символы.ПС+" описание ошибки:"+Символы.ПС+ОписаниеОшибки();
				ОправитьФайл("!!!!!!!!!!!!!!!!!!!!!!!Не ушло письмо","Ikalmatskaya@progressfood.ru",ТекстОшибки); //Blik 290216 49617 //"VTumanov@lip.progressfood.ru"
				неОтправлять = 1;
			КонецЕсли;
			Если неОтправлять = 0 Тогда
				 ОправитьФайл_У("Уведомление о назначении задачния: ",АдресПолучателя,АдресКопии,Текст,Неопределено,проверка,Отправитель_robot1s); //Blik 290216 49617 //"robot1s@lip.progressfood.ru"
			КонецЕсли;
			Если Проверка тогда
				ЗаписатьДокументПоОтправкеЗапроса(СтруктураСтроки);
			Конецесли;
			
		ИначеЕсли Выборка.Статус = Перечисления.ПРГ_СтатусыЗапросовНаПредоставление.ВРаботе Тогда
			
			Текст="Ваш запрос принят в работу  "+СокрЛП(строка(Выборка.Запрос))+". На  "+СокрЛП(строка(Выборка.ВидЗапроса))+Символы.ПС+"
			|Предмет запроса  "+СокрЛП(строка(Выборка.ПредметЗапроса))+Символы.ПС+"
			|Исполнитель: "+СокрЛП(строка(Выборка.Исполнитель))+".";  
			
			проверка=ложь;
			неОтправлять = 0;
			АдресПолучателя = СокрЛП(Строка(Выборка.адресИниц));
			АдресКопии = СокрЛП(Строка(Выборка.адресИсп));
			Если АдресПолучателя = "" Тогда
				текстДляОшибок = "Нет адреса фл " + СокрЛП(Строка(Выборка.Инициатор));	 
				ТекстОшибки="Не ушло письмо с текстом:"+Символы.ПС+текстДляОшибок+Символы.ПС+" для "+Символы.ПС+" описание ошибки:"+Символы.ПС+ОписаниеОшибки();
				ОправитьФайл("!!!!!!!!!!!!!!!!!!!!!!!Не ушло письмо","Ikalmatskaya@progressfood.ru",ТекстОшибки); //Blik 290216 49617 //"VTumanov@lip.progressfood.ru"
				неОтправлять = 1;
			КонецЕсли;
			Если неОтправлять = 0 Тогда
				ОправитьФайл_У("Уведомление о назначении задания. ",АдресПолучателя,АдресКопии,Текст,Неопределено,проверка,Отправитель_robot1s); //Blik 290216 49617 //"robot1s@lip.progressfood.ru"
			КонецЕсли;
			Если Проверка тогда
				ЗаписатьДокументПоОтправкеЗапроса(СтруктураСтроки);
			Конецесли;
			
		ИначеЕсли Выборка.Статус = Перечисления.ПРГ_СтатусыЗапросовНаПредоставление.Закрыт Тогда
			
             Текст="Ваш запрос был выполнен  "+СокрЛП(строка(Выборка.Запрос))+". На  "+СокрЛП(строка(Выборка.ВидЗапроса))+Символы.ПС+"
			|Предмет запроса  "+СокрЛП(строка(Выборка.ПредметЗапроса))+Символы.ПС+"
			|Исполнитель: "+СокрЛП(строка(Выборка.Исполнитель))+".";  
			
			проверка=ложь;
			неОтправлять = 0;
			АдресПолучателя = СокрЛП(Строка(Выборка.адресИниц));
			СпсАдресатов=Новый СписокЗначений;
			СпсАдресатов.Добавить(Выборка.адресИниц);
            СпсАдресатов.Добавить(Выборка.адресИспРук);
			АдресКопии = СпсАдресатов;// СокрЛП(Строка(Выборка.адресИсп))+","+СокрЛП(Строка(Выборка.адресИспРук));
			Если АдресПолучателя = "" Тогда
				текстДляОшибок = "Нет адреса фл " + СокрЛП(Строка(Выборка.Инициатор));	 
				ТекстОшибки="Не ушло письмо с текстом:"+Символы.ПС+текстДляОшибок+Символы.ПС+" для "+Символы.ПС+" описание ошибки:"+Символы.ПС+ОписаниеОшибки();
				ОправитьФайл("!!!!!!!!!!!!!!!!!!!!!!!Не ушло письмо","Ikalmatskaya@progressfood.ru",ТекстОшибки); //Blik 290216 49617 //"VTumanov@lip.progressfood.ru"
				неОтправлять = 1;
			КонецЕсли;
			Если неОтправлять = 0 Тогда
				ОправитьФайл_У("Уведомление о назнаении задания. ",АдресПолучателя,АдресКопии,Текст,Неопределено,проверка,Отправитель_robot1s); //Blik 290216 49617 //"robot1s@lip.progressfood.ru"
			КонецЕсли;
			Если Проверка тогда
				ЗаписатьДокументПоОтправкеЗапроса(СтруктураСтроки);
			Конецесли;

		КонецЕсли;
         
	КонецЦикла;
КонецПроцедуры
//начало изменений Ожиганов 06.08.2015 Ошибка при рассылке
//#Если Клиент Тогда
//конец изменений 	
Процедура ОправитьФайл_У(Тема, Получатель,Копия, Текст, Файл = Неопределено, Проверка = Ложь, Отправитель = Неопределено, HTML = Ложь) Экспорт
	//Blik 290216 49617 н
	НастройкиРассылки   = ПолучитьНастройкиРассылкиУведомлений(); 
	АдресСервераSMTP    = СокрЛП(строка(НастройкиРассылки.Найти("АдресСервераSMTP", "Параметр").ЗначениеПараметра));
	ПортSMTP            = СокрЛП(Строка(НастройкиРассылки.Найти("ПортSMTP", "Параметр").ЗначениеПараметра));  
	Отправитель_robot1s = СокрЛП(Строка(НастройкиРассылки.Найти("Отправитель_robot1s", "Параметр").ЗначениеПараметра)); 
	//Blik 290216 49617 к
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	//начало изменений Ожиганов 29.07.2015 смена сервера
	//Профиль.АдресСервераSMTP = "lipmail.progressfood.ru";
	Профиль.АдресСервераSMTP = АдресСервераSMTP;//"SMTP.PROGRESSFOOD.RU";  //Blik 290216 49617
	//конец изменений 
	Профиль.ПортSMTP = ПортSMTP;//"25"; //строка //Blik 290216 49617
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации; 
	
	Почта = Новый ИнтернетПочта;
	
	// Создадим почтовое сообщение
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема; 
	
	ТекстДляОшибок = Текст;
	Текст = Письмо.Тексты.Добавить(Текст);
	Текст.ТипТекста = ? (HTML, ТипТекстаПочтовогоСообщения.HTML, ТипТекстаПочтовогоСообщения.ПростойТекст);
	
	Если Не Отправитель = Неопределено тогда
		Письмо.Отправитель = Отправитель;
	Иначе
		Письмо.ИмяОтправителя = Отправитель_robot1s; //"robot1s@lip.progressfood.ru"; //Blik 290216 49617 //"Андроид 1С";  //Blik 30744 070814
	Конецесли;
	ПолучателиДляОшибки="";
	
	Если ТипЗнч(Получатель)=тип("Строка") тогда
		Письмо.Получатели.Добавить(Получатель);
		ПолучателиДляОшибки=Получатель;
	Иначе	
		Для сч=0 по Получатель.Количество()-1 цикл
			Если не СокрЛП(Получатель[сч].значение)="" тогда
				Письмо.Получатели.Добавить(Получатель[сч].значение);
				ПолучателиДляОшибки=ПолучателиДляОшибки+?(ПолучателиДляОшибки="","",";")+Получатель[сч].значение;
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;
	Если ТипЗнч(Копия)=тип("Строка") тогда
		Письмо.Копии.Добавить(Копия);
		ПолучателиДляОшибки=Копия;
	Иначе	
		Для сч=0 по Копия.Количество()-1 цикл
			Если не СокрЛП(Копия[сч].значение)="" тогда
				Письмо.Получатели.Добавить(Копия[сч].значение);
				ПолучателиДляОшибки=ПолучателиДляОшибки+?(ПолучателиДляОшибки="","",";")+Копия[сч].значение;
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;

	Если не Файл=Неопределено тогда
		Если ТипЗнч(Файл)=тип("Строка") тогда
			Если не сокрЛП(Файл)="" тогда
				Письмо.Вложения.Добавить(Файл);
			КонецЕсли;
		Иначе	
			Для сч=0 по Файл.Количество()-1 цикл
				Если не сокрЛП(Файл[сч].значение)="" тогда
					Письмо.Вложения.Добавить(Файл[сч].значение);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	
	Попытка
		Почта.Подключиться(Профиль);
		
		///Сообщить(Ящик.Наименование+": Подключенено");
		
	Исключение
		Сообщить("Не удалось подключиться к серверу");
	КонецПопытки;
	Попытка
		Почта.Послать(Письмо);
		проверка=истина;
		//Сообщить("Письма отправлены");
	Исключение
		Сообщить(ОписаниеОшибки());
		//начало изменений Ожиганов 29.07.2015 уволился 
		//ТекстОшибки="Не ушло письмо с текстом:"+Символы.ПС+текстДляОшибок+Символы.ПС+" для "+ПолучателиДляОшибки+Символы.ПС+" описание ошибки:"+Символы.ПС+ОписаниеОшибки();
		//ОправитьФайл("!!!!!!!!!!!!!!!!!!!!!!!Не ушло письмо","VTumanov@lip.progressfood.ru",ТекстОшибки);
		//конец изменений 
	КонецПопытки;
	
	Почта.Отключиться();
	//Сообщить("Соединение завершено");
	
	
	
КонецПроцедуры
//начало изменений Ожиганов 06.08.2015 Ошибка при рассылке
//#КонецЕсли
//конец изменений
Процедура ЗаписатьДокументПоОтправкеЗапроса(СтруктураСтроки)
	Запрос = СтруктураСтроки.Запрос;
	Организация = СтруктураСтроки.Организация;
	Статус = СтруктураСтроки.Статус;	
	
	НаборЗаписей       = РегистрыСведений.ПРГ_ЗапросынаПредоставлениеДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Запрос.Установить(Запрос);
	НаборЗаписей.Отбор.Статус.Установить(Статус);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	
	
	НоваяЗапись        = НаборЗаписей.Добавить();
	НоваяЗапись.Запрос  = Запрос;  
	Если Статус = Перечисления.ПРГ_СтатусыЗапросовНаПредоставление.Открыт Тогда
		НоваяЗапись.Период       = СтруктураСтроки.Период; 
	ИначеЕсли Статус = Перечисления.ПРГ_СтатусыЗапросовНаПредоставление.ВРаботе Тогда
		НоваяЗапись.Период       = СтруктураСтроки.Период; 
	ИначеЕсли Статус = Перечисления.ПРГ_СтатусыЗапросовНаПредоставление.Закрыт Тогда
		НоваяЗапись.Период       = СтруктураСтроки.Период; 
	КонецЕсли;
	НоваяЗапись.Организация = Организация;
	НоваяЗапись.Инициатор = СтруктураСтроки.Инициатор;
	НоваяЗапись.Исполнитель = СтруктураСтроки.Исполнитель;
	НоваяЗапись.ПредметЗапроса = СтруктураСтроки.ПредметЗапроса;
	НоваяЗапись.ВидЗапроса = СтруктураСтроки.ВидЗапроса;	
	НоваяЗапись.Статус = СтруктураСтроки.Статус;
	НоваяЗапись.Отправлено = Истина;
	
	НаборЗаписей.Записать(); 

КонецПроцедуры
//Blik 270315 37865 к


Функция получитьСписокПолучателейПоПодразделению(тз,Подразделение)
	тзНаОтправку=Новый ТаблицаЗначений;
	тзНаОтправку.Колонки.Добавить("ФизЛицо");
	тзНаОтправку.Колонки.Добавить("Мыло");
	
	Отбор = Новый Структура();
	Отбор.Вставить("Подразделение",Подразделение);
	Строки = тз.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Для сч=0 По Строки.Количество()-1 Цикл
			ЗаполнитьЗначенияСвойств(тзНаОтправку.Добавить(),строки[сч]);
		КонецЦикла;
	КонецЕсли;
	возврат тзНаОтправку;
	
КонецФункции
//Blik 250516 52727 н
Функция ПолучитСотровОтдОбучДляКС()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК ФИО,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра КАК Мыло
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""РассылкаПриемУвольнениеКС_ДляОтдОбуч""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции
Функция ПроверитьНаКомСлужбу(ПодразделениеОрганизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Код,
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение КАК ЭтоКС
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ПодразделенияОрганизаций.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Наименование = ""Ком служба"")
	|ГДЕ
	|	ПодразделенияОрганизаций.ПометкаУдаления = ЛОЖЬ
	|	И ПодразделенияОрганизаций.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ПодразделениеОрганизации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭтоКС;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//Blik 250516 52727 к			
Функция получитьСписокПолучателей(ТипДвиж)
	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ФизЛицо");
	тз.Колонки.Добавить("Подразделение");
	тз.Колонки.Добавить("Мыло");
	
	//тзНаОтправку=Новый ТаблицаЗначений;
	//тзНаОтправку.Колонки.Добавить("ФизЛицо");
	//тзНаОтправку.Колонки.Добавить("Мыло");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРГ_СписокРассылкиОтчетов.ФизЛицо,
	|	ПРГ_СписокРассылкиОтчетов.ПодразделенияОрганизаций,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.ПРГ_СписокРассылкиОтчетов КАК ПРГ_СписокРассылкиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ПРГ_СписокРассылкиОтчетов.ФизЛицо = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = &Вид)
	|ГДЕ
	|	ПРГ_СписокРассылкиОтчетов."+ТипДвиж;// или ПРГ_СписокРассылкиОтчетов.Перемещение";
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗапросПод = Новый Запрос;
		ЗапросПод.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодразделенияОрганизаций.Ссылка";
		ЗапросПод.УстановитьПараметр("Ссылка", Выборка.ПодразделенияОрганизаций);
		РезультатПод = ЗапросПод.Выполнить();
		ВыборкаПод = РезультатПод.Выбрать();
		Пока ВыборкаПод.Следующий() Цикл
			нов=тз.Добавить();
			нов.ФизЛицо=Выборка.ФизЛицо;
			нов.Подразделение=ВыборкаПод.Ссылка;
			нов.Мыло=Выборка.Представление;
		КонецЦикла;
	КонецЦикла;
	
	//Отбор = Новый Структура();
	//Отбор.Вставить("Подразделение",Подразделение);
	//Строки = тз.НайтиСтроки(Отбор);
	//Если Строки.Количество() > 0 Тогда
	//	Для сч=0 По Строки.Количество()-1 Цикл
	//		ЗаполнитьЗначенияСвойств(тзНаОтправку.Добавить(),строки[сч]);
	//  	КонецЦикла;
	//КонецЕсли;
	возврат тз;
	
КонецФункции 
// получитьСписокПолучателейПоПодразделению() ВадимКонец

/////Вадим 14.01.2013 15:24:54
Функция ПолучитьСтрокуМылаФизЛица(ФизЛицо,типвыборки)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Если типвыборки = "КадровыеПриказы" тогда
			возврат ВыборкаДетальныеЗаписи.Представление; 	
		Иначе	
			возврат Символы.ПС+"Е-mail сотрудника: "+ВыборкаДетальныеЗаписи.Представление;
		конецесли;
	иначе	
		возврат "";
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
КонецФункции 
// ПолучитьМылоФизЛица() ВадимКонец

//BLIK 251013  22838 в запрос добавлен выбор доков - командировки и сл поездки   н

Функция получитьСтруктуруВнешПечФормы(ссылкаНаДокумент,НаименованиеПечФормы)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|             ВнешниеОбработкиПринадлежность.Ссылка,
	|             ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки,
	|             ВнешниеОбработкиПринадлежность.СсылкаОбъекта,
	|             ВнешниеОбработкиПринадлежность.ПредставлениеОбъекта
	|ИЗ
	|             Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|             ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма)
	|             И ВнешниеОбработкиПринадлежность.ПредставлениеОбъекта ПОДОБНО &ПредставлениеОбъекта
	|             И ВнешниеОбработкиПринадлежность.Ссылка.Наименование = &Наименование";
	ВыбранноеЗначение=ссылкаНаДокумент.Метаданные();
	ПредставлениеОбъекта="Документ """ + ?(ВыбранноеЗначение.Синоним="", ВыбранноеЗначение.Имя, ВыбранноеЗначение.Синоним)+"""";
	Запрос.УстановитьПараметр("Наименование", НаименованиеПечФормы);
	Запрос.УстановитьПараметр("ПредставлениеОбъекта",ПредставлениеОбъекта );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	если Выборка.Следующий() тогда
		структура=Новый Структура;
		структура.Вставить("ВидПечатнойФормы",Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
		структура.Вставить("ДополнительныеПараметрыОбработки",Неопределено);
		структура.Вставить("ЗаменяемаяПечатнаяФорма",Неопределено);
		структура.Вставить("НомерСтроки",1);
		
		структура.Вставить("СсылкаНаВнешнююОбработку",Выборка.Ссылка);      
	иначе   
		структура=Неопределено;
	КонецЕсли;
	
	
	Возврат структура;
	

КонецФункции 
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт
	
	Перем ДополнительныеПараметры;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;

КонецФункции
Функция получитьвнешниепечформы(Ссылка,НаименованиеПечФормы) Экспорт
	
	структураПечати=получитьСтруктуруВнешПечФормы(Ссылка,НаименованиеПечФормы);
	ТабДокумент=НапечататьВнешнююФорму(Ссылка, структураПечати);
	Если не ТабДокумент=Неопределено тогда
		//{25.07.2016 Островерхий заявка №б/н 
		//Имяфайла=КаталогВременныхФайлов()+НаименованиеПечФормы+Формат(Ссылка.Дата,"ДФ=dd_MM_yyyy")+ссылка.Номер+".pdf";
		Имяфайла = НаименованиеПечФормы+Формат(Ссылка.Дата,"ДФ=dd_MM_yyyy")+ссылка.Номер+".pdf";
		Имяфайла = КаталогВременныхФайлов()+РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(Имяфайла,"_");
		//ТабДокумент.Записать(имяфайла,ТипФайлаТабличногоДокумента.pdf); 
		ТабДокумент.Записать(Имяфайла,ТипФайлаТабличногоДокумента.pdf);
		//25.07.2016 Островерхий} 
	иначе
		ИмяФайла="";
	Конецесли;	
	Возврат ИмяФайла;
	
КонецФункции
//BLIK 251013  22838 в запрос добавлен выбор доков - командировки и сл поездки   к


/////Вадим 14.01.2013 12:12:10
Функция ПолучитьСписокАдресов(Спис)
	сп=Новый СписокЗначений;
	Для сч=0 по Спис.Количество()-1 цикл
		сп.Добавить(спис[сч]);
	КонецЦикла;	
	возврат сп;
	
	
	
КонецФункции 
// ПолучитьСписокАдресов() ВадимКонец
 //Blik 301013  23063 н рассылка по уволнению
 Функция ПолучитьСписокФайлов(ссылка)
	 списименформ = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст =
	" ВЫБРАТЬ
	|ПРГ_дополнительнаяИнформация.Информация
	|ИЗ
	|РегистрСведений.ПРГ_дополнительнаяИнформация КАК ПРГ_дополнительнаяИнформация
	|ГДЕ
	|ПРГ_дополнительнаяИнформация.Документ = &ТекДок
	|И ПРГ_дополнительнаяИнформация.Сотрудник = &текотбор";
	Запрос.УстановитьПараметр("ТекДок", ссылка);
	Запрос.УстановитьПараметр("текотбор","внешниепечатныеформы" );
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		 списименформ.Добавить(СокрЛП(Строка(Выборка.Информация)));
	КонецЦикла;
	 
	 возврат списименформ;
	 
КонецФункции
  //Blik 301013  23063 к рассылка по уволнению
  //начало изменений Ожиганов 06.08.2015 Ошибка при рассылке
  //#Если Клиент ТОгда 
  ///конец изменений
  Процедура ОтправкаДокументовНаПочту(ссылка)
	//Blik 290216 49617 н
	НастройкиРассылки   = ПолучитьНастройкиРассылкиУведомлений(); 
	Отправитель_Modified1C = СокрЛП(строка(НастройкиРассылки.Найти("Отправитель_Modified1C", "Параметр").ЗначениеПараметра));
	Отправитель_Fired1C    = СокрЛП(строка(НастройкиРассылки.Найти("Отправитель_Fired1C", "Параметр").ЗначениеПараметра));
	Отправитель_Accepted1C = СокрЛП(Строка(НастройкиРассылки.Найти("Отправитель_Accepted1C", "Параметр").ЗначениеПараметра));  
	Отправитель_robot1s    = СокрЛП(Строка(НастройкиРассылки.Найти("Отправитель_robot1s", "Параметр").ЗначениеПараметра)); 
	//Blik 290216 49617 к

	первый=истина;
	//	|	ПРГ_СписокРассылкиОтчетов.ПриемУвольнение или ПРГ_СписокРассылкиОтчетов.Перемещение
	Если ТипЗнч(ссылка)=тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") тогда
		тз=получитьСписокПолучателей("ПриемУвольнение");
		тз2=получитьСписокПолучателей("КадровыеПриказы"); //Blik 301013  23063
		//Blik 250516 52727 добавлено св-во КС
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ПодразделениеОрганизации,
		|	ВложенныйЗапрос.Должность,
		|	ВложенныйЗапрос.ДатаПриема,
		|	ВложенныйЗапрос.Документ,
		|	ЗначенияСвойствОбъектов.Значение,
		|	ЗначенияСвойствОбъектовКС.Значение КАК КС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка КАК Ссылка,
		|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность КАК Должность,
		|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|		ПРГ_ОтправленыеДокументы.Документ КАК Документ
		|	ИЗ
		|		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
		|			ПО ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = ПРГ_ОтправленыеДокументы.Документ
		// Исправление по типам рассылок
		|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
		|	ГДЕ
		|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ВложенныйЗапрос.ПодразделениеОрганизации = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовКС
		|		ПО (ЗначенияСвойствОбъектовКС.Свойство.Наименование = ""Ком служба"")
		|			И ВложенныйЗапрос.ПодразделениеОрганизации = ЗначенияСвойствОбъектовКС.Объект
		|ГДЕ
		|	ВложенныйЗапрос.Документ ЕСТЬ NULL ";
		Запрос.УстановитьПараметр("Ссылка", ССЫЛКА);
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("НазваниеФилиала"));
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			тзНаОТправку=получитьСписокПолучателейПоПодразделению(тз,Выборка.ПодразделениеОрганизации);
			Если тзНаОТправку.количество()=0 тогда продолжить;Конецесли;
			Текст="Сотрудник: "+строка(Выборка.Сотрудник)+"(Код физ.лица: "+Выборка.Сотрудник.Физлицо.код +")"+Символы.ПС+"
			|Филиал: "+Выборка.Значение+Символы.ПС+"
			|Подразделение: "+строка(Выборка.ПодразделениеОрганизации)+Символы.ПС+"
			|Должность: "+строка(Выборка.Должность)+Символы.ПС+"
			|Дата приема: "+формат(Выборка.ДатаПриема,"ДЛФ=D")+ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,Неопределено); 
			проверка=ложь;
			адреса=ПолучитьСписокАдресов(тзНаОТправку.выгрузитьКолонку("Мыло"));
			//Blik 250516 52727 н
			Если Выборка.КС = Истина Тогда
				ТЗ_КС = ПолучитСотровОтдОбучДляКС();
				Пока ТЗ_КС.Следующий() Цикл
					адреса.Добавить(ТЗ_КС.Мыло);
				КонецЦикла;
			КонецЕсли;
			//Blik 250516 52727 к
			ОправитьФайл("Уведомление о приеме на работу сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,Неопределено,проверка,Отправитель_Accepted1C); //"Accepted1C@progressfood.ru"); //Blik 290216 49617
			//Blik 011113  23102 н рассылка по приему
            стрДляОтправкиПоПодр2=ПРГ_Обработки.ПолучитьКадровыеДанныеСотрудника(Выборка.Сотрудник,Выборка.ДатаПриема);
			
			тзНаОТправку2=получитьСписокПолучателейПоПодразделению(тз2,стрДляОтправкиПоПодр2.ПодразделениеОрганизации);
			//Если тзНаОТправку2.количество()=0 тогда продолжить;Конецесли;
			Если не тзНаОТправку2.количество()=0 тогда 
				типвыборки = "КадровыеПриказы";
				МылоФЛ = ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,типвыборки);
				если СокрЛП(мылофл)<>"" Тогда
					нов=тзНаОТправку2.Добавить();
					нов.ФизЛицо=Выборка.Сотрудник.Физлицо;
					нов.Мыло=МылоФЛ;
				Иначе
					Сообщить("У сотрудника "+Выборка.Сотрудник+" не заполнена электронная почта, документы ему отправлены не будут!!!");
				КонецЕсли;
				тзНаОТправку2.свернуть("ФизЛицо,Мыло");
				
				Текст=" Уважаемые коллеги!
				|Во вложении документы на прием сотрудника"+ строка(Выборка.Сотрудник)+" 
				|Просим ознакомиться с документами под роспись и передать оригинал в отдел персонала."+Символы.ПС;
				
				адреса=ПолучитьСписокАдресов(тзНаОТправку2.выгрузитьКолонку("Мыло"));
				
				списфайлов=Новый СписокЗначений;
				списименформ = ПолучитьСписокФайлов(ссылка);
				Если списименформ.Количество()<>0 Тогда
					проверка=ложь;
					Для сч=0 по списименформ.Количество()-1 цикл 					
						ТабДокумент=получитьвнешниепечформы(ссылка,списименформ[сч].Значение); 
						списфайлов.Добавить(ТабДокумент); 
					КонецЦикла;	
					
					ОправитьФайл("Документы по приему сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,списфайлов,проверка,Неопределено);
				КонецЕсли;
			Конецесли;
			//Blik 301013  23063 к рассылка по приему

			Если Проверка и первый тогда
				первый=ложь;
				ЗаписатьДокументПоОтправке(ссылка);
			Конецесли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ссылка)=тип("ДокументСсылка.УвольнениеИзОрганизаций")	тогда
		тз=получитьСписокПолучателей("ПриемУвольнение");
		тз2=получитьСписокПолучателей("КадровыеПриказы"); //Blik 301013  23063
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ДатаУвольнения,
		|	ВложенныйЗапрос.Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|		УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
		|		ПРГ_ОтправленыеДокументы.Документ КАК Документ
		|	ИЗ
		|		Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
		|			ПО УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = ПРГ_ОтправленыеДокументы.Документ
		// Исправление по типам рассылок
		|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
		|	ГДЕ
		|		УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Документ ЕСТЬ NULL ";
		Запрос.УстановитьПараметр("Ссылка", ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		
		Пока Выборка.Следующий() Цикл
			стр=ПРГ_Обработки.ПолучитьКадровыеДанныеСотрудника(Выборка.Сотрудник,Выборка.ДатаУвольнения);
			
			тзНаОТправку=получитьСписокПолучателейПоПодразделению(тз,стр.ПодразделениеОрганизации);
			Если тзНаОТправку.количество()=0 тогда продолжить;Конецесли;
			Текст="Сотрудник: "+строка(Выборка.Сотрудник)+"(Код физ.лица: "+Выборка.Сотрудник.Физлицо.код +")"+Символы.ПС+"
			|Филиал: "+ПРГ_Обработки.получитьзначениесвойстобъекта(стр.ПодразделениеОрганизации,"НазваниеФилиала")+Символы.ПС+"
			|Подразделение: "+строка(стр.ПодразделениеОрганизации)+Символы.ПС+"
			|Должность: "+строка(стр.Должность)+Символы.ПС+"
			|Дата увольнения: "+формат(Выборка.ДатаУвольнения,"ДЛФ=D")+ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,Неопределено);  
			проверка=ложь;
			адреса=ПолучитьСписокАдресов(тзНаОТправку.выгрузитьКолонку("Мыло"));
			//Blik 250516 52727 н
			ЭтоКомСлужба = ПроверитьНаКомСлужбу(стр.ПодразделениеОрганизации);
			Если ЭтоКомСлужба = Истина Тогда
				ТЗ_КС = ПолучитСотровОтдОбучДляКС();
				Пока ТЗ_КС.Следующий() Цикл
					адреса.Добавить(ТЗ_КС.Мыло);
				КонецЦикла;
			КонецЕсли;
			//Blik 250516 52727 к

			ОправитьФайл("Уведомление об увольнении сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,Неопределено,проверка,Отправитель_Fired1C);//"Fired1C@progressfood.ru"); //Blik 290216 49617
			//Blik 301013  23063 н рассылка по уволнению
            стрДляОтправкиПоПодр2=ПРГ_Обработки.ПолучитьКадровыеДанныеСотрудника(Выборка.Сотрудник,Выборка.ДатаУвольнения);
			
			тзНаОТправку2=получитьСписокПолучателейПоПодразделению(тз2,стрДляОтправкиПоПодр2.ПодразделениеОрганизации);
			//Если тзНаОТправку2.количество()=0 тогда продолжить;Конецесли;
			Если не тзНаОТправку2.количество()=0 тогда 
				типвыборки = "КадровыеПриказы";
				МылоФЛ = ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,типвыборки);
				если СокрЛП(мылофл)<>"" Тогда
					нов=тзНаОТправку2.Добавить();
					нов.ФизЛицо=Выборка.Сотрудник.Физлицо;
					нов.Мыло=МылоФЛ;
				Иначе
					Сообщить("У сотрудника "+Выборка.Сотрудник+" не заполнена электронная почта, документы ему отправлены не будут!!!");
				КонецЕсли;
				тзНаОТправку2.свернуть("ФизЛицо,Мыло");
				
				Текст=" Уважаемые коллеги!
				|Во вложении документы на увольнение сотрудника"+ строка(Выборка.Сотрудник)+" 
				|Просим ознакомиться с документами под роспись и передать оригинал в отдел персонала."+Символы.ПС;
				
				
				
				адреса=ПолучитьСписокАдресов(тзНаОТправку2.выгрузитьКолонку("Мыло"));
				
				списфайлов=Новый СписокЗначений;
				списименформ = ПолучитьСписокФайлов(ссылка);
				Если списименформ.Количество()<>0 Тогда
					проверка=ложь;
					Для сч=0 по списименформ.Количество()-1 цикл 					
						ТабДокумент=получитьвнешниепечформы(ссылка,списименформ[сч].Значение); 
						списфайлов.Добавить(ТабДокумент); 
					КонецЦикла;	
					
					ОправитьФайл("Документы по увольнению сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,списфайлов,проверка,Неопределено);
				КонецЕсли;
			Конецесли;
			//Blik 301013  23063 к рассылка по уволнению

			Если Проверка и первый тогда
				первый=ложь;
				ЗаписатьДокументПоОтправке(ссылка);
			Конецесли;
			
			
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(ссылка)=тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") тогда
		тз=получитьСписокПолучателей("Перемещение");
		тз2=получитьСписокПолучателей("КадровыеПриказы"); //Blik 051113  23103
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ПодразделениеОрганизации,
		|	ВложенныйЗапрос.Должность,
		|	ВложенныйЗапрос.Документ,
		|	ВложенныйЗапрос.Значение
		|ИЗ
		|	(ВЫБРАТЬ
		|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность КАК Должность,
		|		ПРГ_ОтправленыеДокументы.Документ КАК Документ,
		|		ЗначенияСвойствОбъектов.Значение КАК Значение
		|	ИЗ
		|		Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
		|			ПО КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка = ПРГ_ОтправленыеДокументы.Документ
		// Исправление по типам рассылок
		|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации = ЗначенияСвойствОбъектов.Объект
		|				И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
		|	ГДЕ
		|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Документ ЕСТЬ NULL ";
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("НазваниеФилиала"));
		Запрос.УстановитьПараметр("Ссылка", ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		
		Пока Выборка.Следующий() Цикл
			стрСтарые=ПРГ_Обработки.ПолучитьКадровыеДанныеСотрудника(Выборка.Сотрудник,Выборка.ДатаНачала-1);
			//Blik 120517 65511 н
			Если стрСтарые = НЕОПРЕДЕЛЕНО Тогда 
				Продолжить; 
			КонецЕсли;
            //Blik 120517 65511 к
			тзНаОТправкуСтарое=получитьСписокПолучателейПоПодразделению(тз,стрСтарые.ПодразделениеОрганизации);
			Если тзНаОТправкуСтарое.количество()=0 тогда продолжить;Конецесли;
			Если не стрСтарые.ПодразделениеОрганизации=Выборка.ПодразделениеОрганизации тогда
				тзНаОТправкуНовое=получитьСписокПолучателейПоПодразделению(тз,Выборка.ПодразделениеОрганизации);
				для каждого строк из тзНаОТправкуНовое цикл
					ЗаполнитьЗначенияСвойств(тзНаОТправкуСтарое.добавить(),строк);
				КонецЦикла;	
				тзНаОТправкуСтарое.свернуть("ФизЛицо,Мыло");
			Конецесли;
			
			Если стрСтарые.ПодразделениеОрганизации=Выборка.ПодразделениеОрганизации и стрСтарые.Должность=Выборка.Должность тогда продолжить; конецесли;
			
			Текст="Сотрудник: "+строка(Выборка.Сотрудник)+"(Код физ.лица: "+Выборка.Сотрудник.Физлицо.код +")"+Символы.ПС+"
			|Филиал старый: "+ПРГ_Обработки.получитьзначениесвойстобъекта(стрСтарые.ПодразделениеОрганизации,"НазваниеФилиала")+", Филиал новый: "+ПРГ_Обработки.получитьзначениесвойстобъекта(Выборка.ПодразделениеОрганизации,"НазваниеФилиала")+Символы.ПС+" 
			|Подразделение старое: "+строка(стрСтарые.ПодразделениеОрганизации)+", Подразделение новое: "+Строка(Выборка.ПодразделениеОрганизации)+Символы.ПС+"
			|Должность старая: "+строка(стрСтарые.Должность)+", Должность новая: "+Строка(Выборка.Должность)+Символы.ПС+"
			|Дата перемещения: "+формат(Выборка.ДатаНачала,"ДЛФ=D")+ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,Неопределено);  
			
			
			проверка=ложь;
			адреса=ПолучитьСписокАдресов(тзНаОТправкуСтарое.выгрузитьКолонку("Мыло"));
			
			ОправитьФайл("Уведомление об изменении должности (подразделения) сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,Неопределено,проверка,Отправитель_Modified1C); //"Modified1C@progressfood.ru"); //Blik 290216 49617
			//Blik 051113  23103 н рассылка по перемещению
            стрДляОтправкиПоПодр2=ПРГ_Обработки.ПолучитьКадровыеДанныеСотрудника(Выборка.Сотрудник,Выборка.ДатаНачала);
			
			тзНаОТправку2=получитьСписокПолучателейПоПодразделению(тз2,стрДляОтправкиПоПодр2.ПодразделениеОрганизации);
			//Если тзНаОТправку2.количество()=0 тогда продолжить;Конецесли;
			Если не тзНаОТправку2.количество()=0 тогда 
				типвыборки = "КадровыеПриказы";
				МылоФЛ = ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,типвыборки);
				если СокрЛП(мылофл)<>"" Тогда
					нов=тзНаОТправку2.Добавить();
					нов.ФизЛицо=Выборка.Сотрудник.Физлицо;
					нов.Мыло=МылоФЛ;
				Иначе
					Сообщить("У сотрудника "+Выборка.Сотрудник+" не заполнена электронная почта, документы ему отправлены не будут!!!");
				КонецЕсли;
				тзНаОТправку2.свернуть("ФизЛицо,Мыло");
				
				Текст=" Уважаемые коллеги!
				|Во вложении документы на перемещение сотрудника"+ строка(Выборка.Сотрудник)+" 
				|Просим ознакомиться с документами под роспись и передать оригинал в отдел персонала."+Символы.ПС;
				
				адреса=ПолучитьСписокАдресов(тзНаОТправку2.выгрузитьКолонку("Мыло"));
				
				списфайлов=Новый СписокЗначений;
				списименформ = ПолучитьСписокФайлов(ссылка);
				Если списименформ.Количество()<>0 Тогда
					проверка=ложь;
					Для сч=0 по списименформ.Количество()-1 цикл 					
						ТабДокумент=получитьвнешниепечформы(ссылка,списименформ[сч].Значение); 
						списфайлов.Добавить(ТабДокумент); 
					КонецЦикла;	
					
					ОправитьФайл("Документы по перемещению сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,списфайлов,проверка,Неопределено);
				КонецЕсли;
			Конецесли;
			//Blik 051113  23103 н рассылка по перемещению

			Если Проверка и первый тогда
				первый=ложь;
				ЗаписатьДокументПоОтправке(ссылка);
			Конецесли;
		КонецЦикла;
		//Blik 251013  22838 в запрос добавлен выбор доков - командировки и сл поездки  н
	ИначеЕсли ТипЗнч(ссылка)=тип("ДокументСсылка.AVT_СлужебныеПоездки") тогда
		тз=получитьСписокПолучателей("КадровыеПриказы");
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		AVT_СлужебныеПоездки.Сотрудник КАК Сотрудник,
		|		AVT_СлужебныеПоездки.ДатаНачала КАК ДатаНачала,
		|		ПРГ_ОтправленыеДокументы.Документ КАК Документ
		|	ИЗ
		|		Документ.AVT_СлужебныеПоездки КАК AVT_СлужебныеПоездки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
		|			ПО AVT_СлужебныеПоездки.Ссылка = ПРГ_ОтправленыеДокументы.Документ 
		// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
		|	ГДЕ
		|		AVT_СлужебныеПоездки.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Документ ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("Ссылка", ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		
		Пока Выборка.Следующий() Цикл
			стрДляОтправкиПоПодр=ПРГ_Обработки.ПолучитьКадровыеДанныеСотрудника(Выборка.Сотрудник,Выборка.ДатаНачала);
			
			тзНаОТправку=получитьСписокПолучателейПоПодразделению(тз,стрДляОтправкиПоПодр.ПодразделениеОрганизации);
			Если тзНаОТправку.количество()=0 тогда продолжить;Конецесли;
			типвыборки = "КадровыеПриказы";
			МылоФЛ = ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,типвыборки);
			нов=тзНаОТправку.Добавить();
			нов.ФизЛицо=Выборка.Сотрудник.Физлицо;
			нов.Мыло=МылоФЛ;

			тзНаОТправку.свернуть("ФизЛицо,Мыло");
			
			Текст=" Уважаемые коллеги!
			|Во вложении приказ и  командировочное удостоверение/разъездной лист на предстоящую командировку/служебную поездку.
			|Просим ознакомиться с приказом под роспись и передать оригинал в отдел персонала."+Символы.ПС;
			
			
			проверка=ложь;
			адреса=ПолучитьСписокАдресов(тзНаОТправку.выгрузитьКолонку("Мыло"));
			
			списфайлов=Новый СписокЗначений; 	
			
			списфайлов.Добавить(получитьвнешниепечформы(ссылка,"Приказ")); 	
			списфайлов.Добавить(получитьвнешниепечформы(ссылка,"Разъездной лист"));
			
			ОправитьФайл("Уведомление о направлении в служебную поездку сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,списфайлов,проверка,НЕОПРЕДЕЛЕНО);
			Если Проверка и первый тогда
				первый=ложь;
				ЗаписатьДокументПоОтправке(ссылка);
			Конецесли;
		КонецЦикла;
	 ИначеЕсли ТипЗнч(ссылка)=тип("ДокументСсылка.КомандировкиОрганизаций") тогда
		тз=получитьСписокПолучателей("КадровыеПриказы");
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Командировки.Сотрудник КАК Сотрудник,
		|		Командировки.ДатаНачала КАК ДатаНачала,
		|		ПРГ_ОтправленыеДокументы.Документ КАК Документ
		|	ИЗ
		|		Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК Командировки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
		|			ПО Командировки.Ссылка = ПРГ_ОтправленыеДокументы.Документ 
		// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
		|	ГДЕ
		|		Командировки.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Документ ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("Ссылка", ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		
		Пока Выборка.Следующий() Цикл
			стрДляОтправкиПоПодр=ПРГ_Обработки.ПолучитьКадровыеДанныеСотрудника(Выборка.Сотрудник,Выборка.ДатаНачала);
			
			тзНаОТправку=получитьСписокПолучателейПоПодразделению(тз,стрДляОтправкиПоПодр.ПодразделениеОрганизации);
			Если тзНаОТправку.количество()=0 тогда продолжить;Конецесли;
			
			типвыборки = "КадровыеПриказы";
			МылоФЛ = ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,типвыборки);
			нов=тзНаОТправку.Добавить();
			нов.ФизЛицо=Выборка.Сотрудник.Физлицо;
			нов.Мыло=МылоФЛ;
	
			тзНаОТправку.свернуть("ФизЛицо,Мыло");
			
			Текст=" Уважаемые коллеги!
			|Во вложении приказ и  командировочное удостоверение/разъездной лист на предстоящую командировку/служебную поездку.
			|Просим ознакомиться с приказом под роспись и передать оригинал в отдел персонала."+Символы.ПС;
			
			
			проверка=ложь;
			адреса=ПолучитьСписокАдресов(тзНаОТправку.выгрузитьКолонку("Мыло"));
			
			списфайлов=Новый СписокЗначений;
			ТабДокумент=получитьвнешниепечформы(ссылка,"Приказ"); 
			списфайлов.Добавить(ТабДокумент);
			ТабДокумент=получитьвнешниепечформы(ссылка,"Командировочное удостоверение");
			списфайлов.Добавить(ТабДокумент);

			ОправитьФайл("Уведомление о направлении в командировку сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,списфайлов,проверка,Неопределено);
			Если Проверка и первый тогда
				первый=ложь;
				ЗаписатьДокументПоОтправке(ссылка);
			Конецесли;
		КонецЦикла;
		//Blik 251013  22838 в запрос добавлен выбор доков - командировки и сл поездки к
		//Blik 051113  23104 в запрос добавлен выбор доков - отпуска н 		
	ИначеЕсли ТипЗнч(ссылка)=тип("ДокументСсылка.ОтпускаОрганизаций") тогда
		тз=получитьСписокПолучателей("КадровыеПриказы");
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Отпуска.Сотрудник КАК Сотрудник,
		|		Отпуска.ДатаНачала КАК ДатаНачала,
		|		ПРГ_ОтправленыеДокументы.Документ КАК Документ
		|	ИЗ
		|		Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК Отпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
		|			ПО Отпуска.Ссылка = ПРГ_ОтправленыеДокументы.Документ 
		// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
		|	ГДЕ
		|		Отпуска.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Документ ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("Ссылка", ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		
		Пока Выборка.Следующий() Цикл
			стрДляОтправкиПоПодр=ПРГ_Обработки.ПолучитьКадровыеДанныеСотрудника(Выборка.Сотрудник,Выборка.ДатаНачала);
			
			тзНаОТправку=получитьСписокПолучателейПоПодразделению(тз,стрДляОтправкиПоПодр.ПодразделениеОрганизации);
			Если тзНаОТправку.количество()=0 тогда продолжить;Конецесли;
			
			типвыборки = "КадровыеПриказы";
			МылоФЛ = ПолучитьСтрокуМылаФизЛица(Выборка.Сотрудник.Физлицо,типвыборки);
			если СокрЛП(мылофл)<>"" Тогда
				нов=тзНаОТправку.Добавить();
				нов.ФизЛицо=Выборка.Сотрудник.Физлицо;
				нов.Мыло=МылоФЛ;
			Иначе
				Сообщить("У сотрудника "+Выборка.Сотрудник+" не заполнена электронная почта, документы ему отправлены не будут!!!");
			КонецЕсли;
			
 			тзНаОТправку.свернуть("ФизЛицо,Мыло");
			
			Текст=" Уважаемые коллеги!
			|Во вложении документы на отпуск сотрудника"+ строка(Выборка.Сотрудник)+" 
			|Просим ознакомиться с документами под роспись и передать оригинал в отдел персонала."+Символы.ПС;
			
			проверка=ложь;
			адреса=ПолучитьСписокАдресов(тзНаОТправку.выгрузитьКолонку("Мыло"));
			
			списфайлов=Новый СписокЗначений;
			списименформ = ПолучитьСписокФайлов(ссылка);
			Если списименформ.Количество()<>0 Тогда
				проверка=ложь;
				Для сч=0 по списименформ.Количество()-1 цикл 					
					ТабДокумент=получитьвнешниепечформы(ссылка,списименформ[сч].Значение); 
					списфайлов.Добавить(ТабДокумент); 
				КонецЦикла;	
				            
				ОправитьФайл("Документы по отпуску сотрудника: "+строка(Выборка.Сотрудник),адреса,Текст,списфайлов,проверка,Неопределено);
			КонецЕсли;
			
			Если Проверка и первый тогда
				первый=ложь;
				ЗаписатьДокументПоОтправке(ссылка);
			Конецесли;
		КонецЦикла;
		//Blik 051113  23104 в запрос добавлен выбор доков - отпуска  к
		
	конецесли;	
КонецПроцедуры
//начало изменений Ожиганов 06.08.2015 Ошибка при рассылке
//#КонецЕсли
//конец изменений


///Вадим 14.01.2013 11:50:20
Процедура ЗаписатьДокументПоОтправке(ссылка)
	
		наборзаписей=РегистрыСведений.ПРГ_ОтправленыеДокументы.СоздатьНаборЗаписей();	
		нов=наборзаписей.Добавить();
		нов.Документ=ссылка;
		наборзаписей.Записать(ложь);
	
КонецПроцедуры
//ВадимКонец

///Вадим 08.07.2013 9:24:52
Процедура ПростановкаКодовСотрудникаИзФизЛиц()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Код
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Актуальность
	|	И РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Код,
	|	СотрудникиОрганизаций.Физлицо.Код
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Актуальность
	|	И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Сотрудник,
	|	вт.СотрудникКод,
	|	вт.СотрудникФизлицоКод
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	не вт.СотрудникКод = вт.СотрудникФизлицоКод ";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ТекстПисьма="";
	Пока Выборка.Следующий() Цикл
		об=Выборка.Сотрудник.получитьОбъект();
		об.код=Выборка.СотрудникФизлицоКод;
		об.записать();
		ТекстПисьма=ТекстПисьма+"
		|
		|"+СокрЛП(Выборка.Сотрудник.наименование)+"; старый код:"+СокрЛП(Выборка.СотрудникКод)+"; новый код:"+СокрЛП(Выборка.СотрудникФизлицоКод);
		
	КонецЦикла;
	Если сокрЛП(ТекстПисьма)="" тогда
		возврат;
	Конецесли;	
		
	
	СпсАдресатов=Новый СписокЗначений;
	СпсАдресатов.Добавить("ETolkacheva@progressfood.ru");  //Blik 290216 49617
	СпсАдресатов.Добавить("IKalmatskaya@progressfood.ru"); //Blik 290216 49617
	//СпсАдресатов.Добавить("VTumanov@lip.progressfood.ru"); //Blik 290216 49617
	
    ОправитьФайл("Изменение кодов сотрудников на коды Физ.лиц",СпсАдресатов,ТекстПисьма,Неопределено);
	

КонецПроцедуры
//ВадимКонец

//Blik 270214 выгрузка для себестоимости нач
Процедура ВыгрузкаФиилалов() 
	// выгрузка статей затрат для кубов
		КаталогФайла="\\cofs\Share\Finance_Load\Sebestoimost_1C\";  //  \\Devsrv\1s\blik\проверка   \\\\cofs\Share\Finance_Load\Sebestoimost_1C\
		ИмяФайла = "1SFilial.txt";
		ВФайл = КаталогФайла+ИмяФайла;
		ТексФайл = Новый ТекстовыйДокумент;
				
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Подр,
		|	Подразделения.Код КАК Филиал_Код,
		|	Подразделения.Наименование КАК Филиал_Наим,
		|	Подразделения.ПРГДопОфис.Ссылка КАК ДО,
		|	Подразделения.ПРГДопОфис.Код КАК ДО_Код,
		|	Подразделения.ПРГДопОфис.Наименование КАК ДО_Наим,
		|	Подразделения.ПРГДивизион.Ссылка КАК Дивизион,
		|	Подразделения.ПРГДивизион.Код КАК Дивизион_Код,
		|	Подразделения.ПРГДивизион.Наименование КАК Дивизион_Наим,
		|	"""" КАК Division_Nav,
		|	Подразделения.ПРГЦФО.Наименование КАК ЦФО_1,
		|	Подразделения.ПРГ_ЦентрУчетаЗатрат2014.Наименование КАК ЦФФО_2
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения";

		
		ТекСтрока="";
		ПерваяСТрока="Filial_ID;Filial_Code;Filial_Name;Office_Code;Office;Division_Code;Division;Division_Nav;CFO_1;CFO_2";
		ТексФайл.ДобавитьСтроку(ПерваяСТрока);
		
		
		Результат = Запрос.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			//Если не выборка.ЦФО_1 = Null Тогда
				Если СокрЛП(Строка(выборка.Дивизион_Код)) = "000000008" тогда
					дивизионНаим = "ПРОГРЕСС";
				Иначе
					дивизионНаим = выборка.Дивизион_Наим; 
				КонецЕсли;
				гуид = выборка.Подр.УникальныйИдентификатор(); 
				ТекСтрока = СокрЛП(Строка(гуид))+";" 
				+ СокрЛП(Строка(выборка.Филиал_Код))+";"
				+ СокрЛП(Строка(Выборка.Филиал_Наим))+";"
				+ СокрЛП(Строка(выборка.ДО_Код))+";"
				+ СокрЛП(Строка(Выборка.ДО_Наим))+";" 
				+ СокрЛП(Строка(Выборка.Дивизион_Код))+";"
                + СокрЛП(Строка(дивизионНаим))+";"
				+ СокрЛП(Строка(Выборка.Division_Nav))+";"
				+ СокрЛП(Строка(выборка.ЦФО_1))+";"
				+ СокрЛП(Строка(Выборка.ЦФФО_2));
				ТексФайл.ДобавитьСтроку(ТекСтрока);
			//КонецЕсли;
		КонецЦикла;
		
		Запрос1 = Новый Запрос;
		Запрос1.Текст =
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Подр,
		|	ПодразделенияОрганизаций.Код КАК Филиал_Код,
		|	ПодразделенияОрганизаций.Наименование КАК Филиал_Наим,
		|	ПодразделенияОрганизаций.ПРГДопОфис.Ссылка КАК ДО,
		|	ПодразделенияОрганизаций.ПРГДопОфис.Код КАК ДО_Код,
		|	ПодразделенияОрганизаций.ПРГДопОфис.Наименование КАК ДО_Наим,
		|	ПодразделенияОрганизаций.ПРГДивизион.Ссылка КАК Дивизион,
		|	ПодразделенияОрганизаций.ПРГДивизион.Код КАК Дивизион_Код,
		|	ПодразделенияОрганизаций.ПРГДивизион.Наименование КАК Дивизион_Наим,
		|	"""" КАК Division_Nav,
		|	ПодразделенияОрганизаций.ПРГЦФО.Наименование КАК ЦФО_1,
		|	ПодразделенияОрганизаций.ПРГ_ЦентрУчетаЗатрат2014.Наименование КАК ЦФФО_2
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций";

				
		Результат = Запрос1.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			//Если не выборка.ЦФО_1 = Null Тогда
				Если СокрЛП(Строка(выборка.Дивизион_Код)) = "000000008" тогда
					дивизионНаим = "ПРОГРЕСС";
				Иначе
					дивизионНаим = выборка.Дивизион_Наим; 
				КонецЕсли;
				гуид = выборка.Подр.УникальныйИдентификатор(); 
				ТекСтрока = СокрЛП(Строка(гуид))+";" 
				+ СокрЛП(Строка(выборка.Филиал_Код))+";"
				+ СокрЛП(Строка(Выборка.Филиал_Наим))+";"
				+ СокрЛП(Строка(выборка.ДО_Код))+";"
				+ СокрЛП(Строка(Выборка.ДО_Наим))+";" 
				+ СокрЛП(Строка(Выборка.Дивизион_Код))+";"
                + СокрЛП(Строка(дивизионНаим))+";"
				+ СокрЛП(Строка(Выборка.Division_Nav))+";"
				+ СокрЛП(Строка(выборка.ЦФО_1))+";"
				+ СокрЛП(Строка(Выборка.ЦФФО_2));
				ТексФайл.ДобавитьСтроку(ТекСтрока);
			//КонецЕсли;
		КонецЦикла;

		ТексФайл.Записать(ВФайл,"windows-1251"); 
	
КонецПроцедуры
Процедура  ВыгрузкаСчетов()
	КаталогФайла="\\cofs\Share\Finance_Load\Sebestoimost_1C\";  //  \\Devsrv\1s\blik\проверка   \\cofs\Share\Finance_Load\Sebestoimost_1C\
		ИмяФайла = "1saccounts.txt";
		ВФайл = КаталогФайла+ИмяФайла;
		ТексФайл = Новый ТекстовыйДокумент;
		СтрКод = Новый СписокЗначений;
		СтрКод.Добавить("20");
		СтрКод.Добавить("20.01");
		СтрКод.Добавить("20.01.1");
		СтрКод.Добавить("20.01.2");
		СтрКод.Добавить("20.02");
		СтрКод.Добавить("23");
		СтрКод.Добавить("23.01");
		СтрКод.Добавить("23.02");
		СтрКод.Добавить("25");
		СтрКод.Добавить("25.01");
		СтрКод.Добавить("25.02");
		СтрКод.Добавить("25.03");
		СтрКод.Добавить("26");
		СтрКод.Добавить("26.01");
		СтрКод.Добавить("26.02");
		СтрКод.Добавить("26.03");
		СтрКод.Добавить("44.01.1");
		СтрКод.Добавить("44.01.2");
		СтрКод.Добавить("44.02.1");
		СтрКод.Добавить("44.02.2");
		СтрКод.Добавить("90.01");
		СтрКод.Добавить("90.01.1");
		СтрКод.Добавить("90.01.2");
		СтрКод.Добавить("90.02");
		СтрКод.Добавить("90.02.1");
		СтрКод.Добавить("90.02.2");
		СтрКод.Добавить("90.03");
		СтрКод.Добавить("91.01");
		СтрКод.Добавить("91.02");
		СтрКод.Добавить("91.02.1");
		СтрКод.Добавить("91.02.2");
		СтрКод.Добавить("91.02.3");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Код КАк Код,
		|	Хозрасчетный.Наименование КАк Наим,
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код В(&СтрКод)";
		Запрос.УстановитьПараметр("СтрКод", СтрКод);
		
		ТекСтрока="";
		ПерваяСТрока="Acc_ID;Acc_number;Acc_name";
		ТексФайл.ДобавитьСтроку(ПерваяСТрока);
		
		
		Результат = Запрос.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			гуид = выборка.Ссылка.УникальныйИдентификатор(); 
			ТекСтрока = СокрЛП(Строка(гуид))+";" 
			+ СокрЛП(Строка(выборка.код))+";"
			+ СокрЛП(Строка(Выборка.Наим));
			ТексФайл.ДобавитьСтроку(ТекСтрока); 
		КонецЦикла;
		ТексФайл.Записать(ВФайл,"windows-1251"); 
	
КонецПроцедуры
Процедура ВыгрузкаСтатей()
КаталогФайла="\\cofs\Share\Finance_Load\Sebestoimost_1C\";  //  \\Devsrv\1s\blik\проверка   \\cofs\Share\Finance_Load\Sebestoimost_1C\
ИмяФайла = "1SExpenses.txt";
		ВФайл = КаталогФайла+ИмяФайла;
		ТексФайл = Новый ТекстовыйДокумент;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатьиЗатрат.Код КАК Код,
		|	СтатьиЗатрат.Наименование КАК Наим,
		|	СтатьиЗатрат.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.ЭтоГруппа = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрочиеДоходыИРасходы.Код,
		|	ПрочиеДоходыИРасходы.Наименование,
		|	ПрочиеДоходыИРасходы.Ссылка
		|ИЗ
		|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
		|ГДЕ
		|	ПрочиеДоходыИРасходы.ЭтоГруппа = ЛОЖЬ";
				
		ТекСтрока="";
		ПерваяСТрока="Expenses_ID_Code;Expenses_ID;Expenses_Code;Expenses_Name";
		ТексФайл.ДобавитьСтроку(ПерваяСТрока);
		
		
		Результат = Запрос.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			гуид = выборка.Ссылка.УникальныйИдентификатор(); 
			ТекСтрока = СокрЛП(Строка(гуид))+"_"+выборка.код+";"
			+  СокрЛП(Строка(гуид))+";"
			+ СокрЛП(Строка(выборка.код))+";"
			+ СокрЛП(Строка(Выборка.Наим));
			ТексФайл.ДобавитьСтроку(ТекСтрока); 
		КонецЦикла;
		//ТекСтрока = "Sebest1;Sebest1;Sebest1;Sebest1";
		//ТексФайл.ДобавитьСтроку(ТекСтрока);
		//ТекСтрока = "База Отдыха ""Тихий Дон"";База Отдыха ""Тихий Дон"";База Отдыха ""Тихий Дон"";База Отдыха ""Тихий Дон""";
		//ТексФайл.ДобавитьСтроку(ТекСтрока);
		//ТекСтрока = "Кафе ""Тихий Дон"";Кафе ""Тихий Дон"";Кафе ""Тихий Дон"";Кафе ""Тихий Дон""";
		//ТексФайл.ДобавитьСтроку(ТекСтрока);
		//ТекСтрока = "Полуфабрикаты;Полуфабрикаты;Полуфабрикаты;Полуфабрикаты";
		//ТексФайл.ДобавитьСтроку(ТекСтрока);
		//ТекСтрока = "Прочая реализация;Прочая реализация;Прочая реализация;Прочая реализация";
		//ТексФайл.ДобавитьСтроку(ТекСтрока);
		//ТекСтрока = "Прочие услуги;Прочие услуги;Прочие услуги;Прочие услуги";
		//ТексФайл.ДобавитьСтроку(ТекСтрока);
		//ТекСтрока = "Услуга по переконцентрации;Услуга по переконцентрации;Услуга по переконцентрации;Услуга по переконцентрации";
		//ТексФайл.ДобавитьСтроку(ТекСтрока);
		//ТекСтрока = "Услуги по розливу сока;Услуги по розливу сока;Услуги по розливу сока;Услуги по розливу сока";
		//ТексФайл.ДобавитьСтроку(ТекСтрока);
		ТексФайл.Записать(ВФайл,"windows-1251");
	
КонецПроцедуры
Функция ПолучитьГуид(Эл)
	Если СокрЛП(строка(Эл))="" Тогда
		 Возврат "";
	Иначе
		Возврат Эл.Ссылка.УникальныйИдентификатор();
	КонецЕсли;
КонецФункции
Процедура ВыгрузкаСумма()
	
	КаталогФайла="\\cofs\Share\Finance_Load\Sebestoimost_1C\";  //  \\Devsrv\1s\blik\проверка   \\\\cofs\Share\Finance_Load\Sebestoimost_1C\
		ИмяФайла = "1SEntry.txt";
		ВФайл = КаталогФайла+ИмяФайла;
		ТексФайл = Новый ТекстовыйДокумент;
        ТекСтрока="";
		ПерваяСТрока="PL_1C_ID;Acc_ID;Filial_ID;Expenses_ID_Code;SUMMA;DataG;DataM;DataGM;KodKontr";
		ТексФайл.ДобавитьСтроку(ПерваяСТрока);
		
        НачПер=НачалоГода(ТекущаяДата()); НКонПер=КонецГода(ТекущаяДата());
		//запрос по счетам 20 23 25 26 44 91		
		СчетКт =  Новый СписокЗначений; // 20 и 23 счета
        СчетКт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетКт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		СчетКт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД);
		СчетКт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД);
		СчетКт.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
		СчетКт.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		СчетКт.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД);
		СчетКт.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД);
		
		ИсклКт =  Новый СписокЗначений; // исключения из 20 счета
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД);
		ИсклКт.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые);

		СчетКт_25 = Новый СписокЗначений; // 25  счета 
        СчетКт_25.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		СчетКт_25.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД);
		СчетКт_25.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД);
		СчетКт_25.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые);
		
		 ИсклКт_25 = Новый СписокЗначений; // 25  счета исключеия Кт
        ИсклКт_25.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		ИсклКт_25.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД);
		ИсклКт_25.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД);
		ИсклКт_25.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые);
		
		СчетКт_26 = Новый СписокЗначений; //26  счета 
		СчетКт_26.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		СчетКт_26.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД);
		СчетКт_26.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД);
		СчетКт_26.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыРаспределяемые);
		
		СчетКт_911 = Новый СписокЗначений; //91 счета
        СчетКт_911.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		
		СчетКт_44 = Новый СписокЗначений; // 44 счета 
		СчетКт_44.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращенияНеОблагаемыеЕНВД);
		СчетКт_44.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД);
		СчетКт_44.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД);
		СчетКт_44.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД);

		СчетКт_91_2 = Новый СписокЗначений; // 91.2 счета
		СчетКт_91_2.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД);
        //подр бухгалтерия 
		 
		НайденнаяСсылкаПодрБух = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("ЗПЛ_1001");
		Если НайденнаяСсылкаПодрБух = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() тогда
			ПодрБух = неопределено;
		Иначе
			ПодрБух = НайденнаяСсылкаПодрБух;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетКТ,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Подр,
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОборот,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК Статья,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК Пер
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДт В (&СчетКт), , НЕ СчетКт В (&ИсклКт), , ) КАК ХозрасчетныйОборотыДтКт
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот),
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДт В (&СчетКт_25), ,НЕ СчетКт В (&ИсклКт_25) , , ) КАК ХозрасчетныйОборотыДтКт
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот),
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДТ В (&СчетКт_26), , , , ) КАК ХозрасчетныйОборотыДтКт
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот * -1),
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, , , СчетКт В (&СчетКт_911), , ) КАК ХозрасчетныйОборотыДтКт
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот),
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДТ В (&СчетКт_44), , , , ) КАК ХозрасчетныйОборотыДтКт
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот),
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДТ В (&СчетКт_91_2), , , , ) КАК ХозрасчетныйОборотыДтКт
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)";

		Запрос.УстановитьПараметр("СчетКт", СчетКт);
        Запрос.УстановитьПараметр("СчетКт_25", СчетКт_25);
		Запрос.УстановитьПараметр("СчетКт_26", СчетКт_26);
		Запрос.УстановитьПараметр("СчетКт_911", СчетКт_911);
        Запрос.УстановитьПараметр("СчетКт_44", СчетКт_44);
        Запрос.УстановитьПараметр("СчетКт_91_2", СчетКт_91_2);
		 Запрос.УстановитьПараметр("НачПер", НачПер);
        Запрос.УстановитьПараметр("НКонПер", НКонПер);
		Запрос.УстановитьПараметр("ИсклКт", ИсклКт);
        Запрос.УстановитьПараметр("ИсклКт_25", ИсклКт);
		
		Результат = Запрос.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			гуидСчета = выборка.СчетКТ.УникальныйИдентификатор(); 
			Если ЗначениеЗаполнено(выборка.Статья) Тогда
				Если Типзнч(выборка.Статья) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
					Если выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ 
						или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты Тогда //Blik 110514 добавлена замена для статьи отклонение курса в покупке продаже валют 
						Если не ПодрБух=Неопределено Тогда
							гуидФил = ПолучитьГуид(ПодрБух);
							//Сообщить("Заменили");
						Иначе
							гуидФил = ПолучитьГуид(выборка.Подр);
						КонецЕсли;
					Иначе
						гуидФил = ПолучитьГуид(выборка.Подр);
					КонецЕсли;
				Иначе
					гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
				Конецесли;
			КонецЕсли;
			//Сообщить(Строка(выборка.Статья) + " стр "+Строка(СокрЛП(строка(выборка.Статья.ССылка))));
			Если ЗначениеЗаполнено(выборка.Статья) Тогда
				ГуидСтатьи =  Строка(ПолучитьГуид(выборка.Статья))+"_"+Строка(?(СокрЛП(строка(выборка.Статья))="","",выборка.Статья.Код));//СокрЛП(строка(выборка.Статья.УникальныйИдентификатор()))+"_"+выборка.Статья.Код;
			Иначе
				ГуидСтатьи =  "";
			КонецЕсли;
			датаГ =  Прав(Формат(выборка.Пер,"ДЛФ=Д"),4);
			датаМ = Сред(Формат(выборка.Пер,"ДЛФ=Д"),4,2);
			перваяколонка = СокрЛП(Строка(гуидСчета))+"_"+СокрЛП(Строка(гуидФил))+"_"+СокрЛП(Строка(ГуидСтатьи))+"_"+СокрЛП(Строка(датаГ));
			ТекСтрока =перваяколонка+";" 
			+ СокрЛП(Строка(гуидСчета))+";"
			+ СокрЛП(Строка(гуидФил))+";"
			+ СокрЛП(Строка(ГуидСтатьи))+";"
			+ СокрЛП(Формат(Выборка.СуммаОборот,"ЧГ=0"))+";" 
			+ СокрЛП(Строка(датаГ))+";"
			+ СокрЛП(Строка(датаМ))+";"
			+ СокрЛП(Строка(датаГ))+"_" + СокрЛП(Строка(датаМ))+";"+"";
			ТексФайл.ДобавитьСтроку(ТекСтрока);
		КонецЦикла;
		//запрос по счетам 90.2 только ГП
       	СчетКт_90_2 = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;

		Запрос5 = Новый Запрос;
		Запрос5.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОборот,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение КАК Подр,
		|	""Sebest1"" КАК Статья,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ КАК ГП_неГП,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК Пер,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент КАК Контр,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена КАК ИДКонтр
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДТ = &СчетКт_90_2, , , , ) КАК ХозрасчетныйОборотыДтКт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК ПРГ_ДополнительныеРеквизитыСправочников
		|		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПРГ_ДополнительныеРеквизитыСправочников.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ),
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена";

		Запрос5.УстановитьПараметр("СчетКт_90_2", СчетКт_90_2); 
		 Запрос5.УстановитьПараметр("НачПер", НачПер);
        Запрос5.УстановитьПараметр("НКонПер", НКонПер);

		Результат = Запрос5.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ГП_неГП = "Да"  Тогда
				гуидСчета = СчетКт_90_2.УникальныйИдентификатор(); 
				//гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
				Если ЗначениеЗаполнено(выборка.Статья) Тогда
					Если Типзнч(выборка.Статья) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
						Если выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ 
							или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты Тогда //Blik 110514 добавлена замена для статьи отклонение курса в покупке продаже валют 
							Если не ПодрБух=Неопределено Тогда
								гуидФил = ПолучитьГуид(ПодрБух);
								//Сообщить("Заменили");
							Иначе
								гуидФил = ПолучитьГуид(выборка.Подр);
							КонецЕсли;
						Иначе
							гуидФил = ПолучитьГуид(выборка.Подр);
						КонецЕсли;
					Иначе
						гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
					Конецесли;
				КонецЕсли;
				ГуидСтатьи =  Строка(выборка.Статья);
				датаГ =  Прав(Формат(выборка.Пер,"ДЛФ=Д"),4);
				датаМ = Сред(Формат(выборка.Пер,"ДЛФ=Д"),4,2);
				перваяколонка = СокрЛП(Строка(гуидСчета))+"_"+СокрЛП(Строка(гуидФил))+"_"+СокрЛП(Строка(ГуидСтатьи))+"_"+СокрЛП(Строка(датаГ));
				ТекСтрока =перваяколонка+";" 
				+ СокрЛП(Строка(гуидСчета))+";"
				+ СокрЛП(Строка(гуидФил))+";"
				+ СокрЛП(Строка(ГуидСтатьи))+";"
				+ СокрЛП(Формат(Выборка.СуммаОборот,"ЧГ=0"))+";" 
				+ СокрЛП(Строка(датаГ))+";"
				+ СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(датаГ))+"_" + СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(Выборка.ИДКонтр));
				ТексФайл.ДобавитьСтроку(ТекСтрока);
			КонецЕсли;
		КонецЦикла;

		
		//запрос по счетам 90.1 только прочее
		СчетКт_90_1 = Новый СписокЗначений; // 90.01 счета 
		СчетКт_90_1.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
		сч90_1 = ПланыСчетов.Хозрасчетный.Выручка;

		Запрос1 = Новый Запрос;
		Запрос1.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот * -1) КАК СуммаОборот,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение КАК Подр,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Статья,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ КАК ГП_неГП,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК Пер,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена КАК ИДКонтр
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, , , СчетКТ В ИЕРАРХИИ (&СчетКт_90_1), , ) КАК ХозрасчетныйОборотыДтКт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК ПРГ_ДополнительныеРеквизитыСправочников
		|		ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = ПРГ_ДополнительныеРеквизитыСправочников.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ),
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена";

		Запрос1.УстановитьПараметр("СчетКт_90_1", СчетКт_90_1); 
		 Запрос1.УстановитьПараметр("НачПер", НачПер);
        Запрос1.УстановитьПараметр("НКонПер", НКонПер);

		Результат = Запрос1.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ГП_неГП = "Нет"  Тогда
				гуидСчета = сч90_1.УникальныйИдентификатор(); 
				//гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
				Если ЗначениеЗаполнено(выборка.Статья) Тогда
					Если Типзнч(выборка.Статья) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
						Если выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ 
							или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты Тогда //Blik 110514 добавлена замена для статьи отклонение курса в покупке продаже валют 
							Если не ПодрБух=Неопределено Тогда
								гуидФил = ПолучитьГуид(ПодрБух);
								//Сообщить("Заменили");
							Иначе
								гуидФил = ПолучитьГуид(выборка.Подр);
							КонецЕсли;
						Иначе
							гуидФил = ПолучитьГуид(выборка.Подр);
						КонецЕсли;
					Иначе
						гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
					Конецесли;
				КонецЕсли;
				
				ГуидСтатьи =  Строка(выборка.Статья.Наименование);//Строка(ПолучитьГуид(выборка.Статья))+"_"+Строка(?(СокрЛП(строка(выборка.Статья))="","",выборка.Статья.Код));//СокрЛП(строка(выборка.Статья.УникальныйИдентификатор()))+"_"+выборка.Статья.Код;
				датаГ =  Прав(Формат(выборка.Пер,"ДЛФ=Д"),4);
				датаМ = Сред(Формат(выборка.Пер,"ДЛФ=Д"),4,2);
				перваяколонка = СокрЛП(Строка(гуидСчета))+"_"+СокрЛП(Строка(гуидФил))+"_"+СокрЛП(Строка(ГуидСтатьи))+"_"+СокрЛП(Строка(датаГ));
				ТекСтрока =перваяколонка+";" 
				+ СокрЛП(Строка(гуидСчета))+";"
				+ СокрЛП(Строка(гуидФил))+";"
				+ СокрЛП(Строка(ГуидСтатьи))+";"
				+ СокрЛП(Формат(Выборка.СуммаОборот,"ЧГ=0"))+";" 
				+ СокрЛП(Строка(датаГ))+";"
				+ СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(датаГ))+"_" + СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(Выборка.ИДКонтр));
				ТексФайл.ДобавитьСтроку(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
        //запрос по счетам 90.3 только прочее к счету 90.1
		СчетКт_90_3 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		сч90_1 = ПланыСчетов.Хозрасчетный.Выручка;
		
		Запрос2 = Новый Запрос;
		Запрос2.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОборот,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение КАК Подр,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Статья,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ КАК ГП_неГП,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК Пер,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена КАК ИДКонтр
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДТ = &СчетКт_90_3, , , , ) КАК ХозрасчетныйОборотыДтКт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК ПРГ_ДополнительныеРеквизитыСправочников
		|		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПРГ_ДополнительныеРеквизитыСправочников.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ),
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1";

		Запрос2.УстановитьПараметр("СчетКт_90_3", СчетКт_90_3); 
		 Запрос2.УстановитьПараметр("НачПер", НачПер);
        Запрос2.УстановитьПараметр("НКонПер", НКонПер);

		Результат = Запрос2.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ГП_неГП = "Нет"  Тогда
				гуидСчета = сч90_1.УникальныйИдентификатор(); 
				//гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
				Если ЗначениеЗаполнено(выборка.Статья) Тогда
					Если Типзнч(выборка.Статья) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
						Если выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ 
							или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты Тогда //Blik 110514 добавлена замена для статьи отклонение курса в покупке продаже валют 
							Если не ПодрБух=Неопределено Тогда
								гуидФил = ПолучитьГуид(ПодрБух);
								//Сообщить("Заменили");
							Иначе
								гуидФил = ПолучитьГуид(выборка.Подр);
							КонецЕсли;
						Иначе
							гуидФил = ПолучитьГуид(выборка.Подр);
						КонецЕсли;
					Иначе
						гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
					Конецесли;
				КонецЕсли;
				
				ГуидСтатьи = Строка(выборка.Статья.Наименование);// Строка(ПолучитьГуид(выборка.Статья))+"_"+Строка(?(СокрЛП(строка(выборка.Статья))="","",выборка.Статья.Код));//СокрЛП(строка(выборка.Статья.УникальныйИдентификатор()))+"_"+выборка.Статья.Код;
				датаГ =  Прав(Формат(выборка.Пер,"ДЛФ=Д"),4);
				датаМ = Сред(Формат(выборка.Пер,"ДЛФ=Д"),4,2);
				перваяколонка = СокрЛП(Строка(гуидСчета))+"_"+СокрЛП(Строка(гуидФил))+"_"+СокрЛП(Строка(ГуидСтатьи))+"_"+СокрЛП(Строка(датаГ));
				ТекСтрока =перваяколонка+";" 
				+ СокрЛП(Строка(гуидСчета))+";"
				+ СокрЛП(Строка(гуидФил))+";"
				+ СокрЛП(Строка(ГуидСтатьи))+";"
				+ СокрЛП(Формат(Выборка.СуммаОборот,"ЧГ=0"))+";" 
				+ СокрЛП(Строка(датаГ))+";"
				+ СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(датаГ))+"_" + СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(Выборка.ИДКонтр));
				ТексФайл.ДобавитьСтроку(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
        //запрос по счетам 90.2 
		СчетКт_90_2 = Новый СписокЗначений; // 90.01 счета 
		СчетКт_90_2.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
		сч90_2 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
		
		Запрос3 = Новый Запрос;
		Запрос3.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОборот,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение КАК Подр,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Статья,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ КАК ГП_неГП,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК Пер,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена КАК ИДКонтр
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДТ В ИЕРАРХИИ (&СчетКт_90_2), , , , ) КАК ХозрасчетныйОборотыДтКт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК ПРГ_ДополнительныеРеквизитыСправочников
		|		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПРГ_ДополнительныеРеквизитыСправочников.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ,
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ),
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1";

		Запрос3.УстановитьПараметр("СчетКт_90_2", СчетКт_90_2); 
		 Запрос3.УстановитьПараметр("НачПер", НачПер);
        Запрос3.УстановитьПараметр("НКонПер", НКонПер);

		Результат = Запрос3.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ГП_неГП = "Нет"  Тогда
				гуидСчета = сч90_2.УникальныйИдентификатор(); 
				//гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
				Если ЗначениеЗаполнено(выборка.Статья) Тогда
					Если Типзнч(выборка.Статья) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
						Если выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ 
							или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты Тогда //Blik 110514 добавлена замена для статьи отклонение курса в покупке продаже валют 
							Если не ПодрБух=Неопределено Тогда
								гуидФил = ПолучитьГуид(ПодрБух);
								//Сообщить("Заменили");
							Иначе
								гуидФил = ПолучитьГуид(выборка.Подр);
							КонецЕсли;
						Иначе
							гуидФил = ПолучитьГуид(выборка.Подр);
						КонецЕсли;
					Иначе
						гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
					Конецесли;
				КонецЕсли;
				
				ГуидСтатьи = Строка(выборка.Статья.Наименование);// Строка(ПолучитьГуид(выборка.Статья))+"_"+Строка(?(СокрЛП(строка(выборка.Статья))="","",выборка.Статья.Код));//СокрЛП(строка(выборка.Статья.УникальныйИдентификатор()))+"_"+выборка.Статья.Код;
				датаГ =  Прав(Формат(выборка.Пер,"ДЛФ=Д"),4);
				датаМ = Сред(Формат(выборка.Пер,"ДЛФ=Д"),4,2);
				перваяколонка = СокрЛП(Строка(гуидСчета))+"_"+СокрЛП(Строка(гуидФил))+"_"+СокрЛП(Строка(ГуидСтатьи))+"_"+СокрЛП(Строка(датаГ));
				ТекСтрока =перваяколонка+";" 
				+ СокрЛП(Строка(гуидСчета))+";"
				+ СокрЛП(Строка(гуидФил))+";"
				+ СокрЛП(Строка(ГуидСтатьи))+";"
				+ СокрЛП(Формат(Выборка.СуммаОборот,"ЧГ=0"))+";" 
				+ СокрЛП(Строка(датаГ))+";"
				+ СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(датаГ))+"_" + СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(Выборка.ИДКонтр));
				ТексФайл.ДобавитьСтроку(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		//запрос по счетам 90.3 только прочее к счету 90.2
		СчетКт_90_3 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		сч90_2 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
		
		Запрос4 = Новый Запрос;
		Запрос4.Текст =
		"ВЫБРАТЬ
		|	СУММА(0) КАК СуммаОборот,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение КАК Подр,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Статья,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ КАК ГП_неГП,
		|	ХозрасчетныйОборотыДтКт.Период КАК Пер,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена КАК ИДКонтр
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПер, &НКонПер, Запись, СчетДТ = &СчетКт_90_3, , , , ) КАК ХозрасчетныйОборотыДтКт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК ПРГ_ДополнительныеРеквизитыСправочников
		|		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПРГ_ДополнительныеРеквизитыСправочников.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Регистратор.Контрагент.ИД_Обмена,
		|	ХозрасчетныйОборотыДтКт.Регистратор.Подразделение,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ВЫБОР
		|		КОГДА ПРГ_ДополнительныеРеквизитыСправочников.Реквизит = ""ГП_Товары""
		|			ТОГДА ""Да""
		|		ИНАЧЕ ""Нет""
		|	КОНЕЦ,
		|	ХозрасчетныйОборотыДтКт.Период,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1";

		Запрос4.УстановитьПараметр("СчетКт_90_3", СчетКт_90_3); 
		 Запрос4.УстановитьПараметр("НачПер", НачПер);
        Запрос4.УстановитьПараметр("НКонПер", НКонПер);
		
		Результат = Запрос4.Выполнить();                          
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ГП_неГП = "Нет"  Тогда
				гуидСчета = сч90_2.УникальныйИдентификатор(); 
				//гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
				Если ЗначениеЗаполнено(выборка.Статья) Тогда
					Если Типзнч(выборка.Статья) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
						Если выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУ
							или выборка.Статья = Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты Тогда //Blik 110514 добавлена замена для статьи отклонение курса в покупке продаже валют 
							Если не ПодрБух=Неопределено Тогда
								гуидФил = ПолучитьГуид(ПодрБух);
								//Сообщить("Заменили");
							Иначе
								гуидФил = ПолучитьГуид(выборка.Подр);
							КонецЕсли;
						Иначе
							гуидФил = ПолучитьГуид(выборка.Подр);
						КонецЕсли;
					Иначе
						гуидФил = ПолучитьГуид(выборка.Подр);//выборка.Подр.УникальныйИдентификатор();
					Конецесли;
				КонецЕсли;
				
				ГуидСтатьи = Строка(выборка.Статья.Наименование);// Строка(ПолучитьГуид(выборка.Статья))+"_"+Строка(?(СокрЛП(строка(выборка.Статья))="","",выборка.Статья.Код));//СокрЛП(строка(выборка.Статья.УникальныйИдентификатор()))+"_"+выборка.Статья.Код;
				датаГ =  Прав(Формат(выборка.Пер,"ДЛФ=Д"),4);
				датаМ = Сред(Формат(выборка.Пер,"ДЛФ=Д"),4,2);
				перваяколонка = СокрЛП(Строка(гуидСчета))+"_"+СокрЛП(Строка(гуидФил))+"_"+СокрЛП(Строка(ГуидСтатьи))+"_"+СокрЛП(Строка(датаГ));
				ТекСтрока =перваяколонка+";" 
				+ СокрЛП(Строка(гуидСчета))+";"
				+ СокрЛП(Строка(гуидФил))+";"
				+ СокрЛП(Строка(ГуидСтатьи))+";"
				+ СокрЛП(Формат(Выборка.СуммаОборот,"ЧГ=0"))+";" 
				+ СокрЛП(Строка(датаГ))+";"
				+ СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(датаГ))+"_" + СокрЛП(Строка(датаМ))+";"
				+ СокрЛП(Строка(Выборка.ИДКонтр));
				ТексФайл.ДобавитьСтроку(ТекСтрока);
			КонецЕсли;
		КонецЦикла;

		ТексФайл.Записать(ВФайл,"windows-1251"); 

КонецПроцедуры	
//Процедура ВыгрузкаДляCubSebest()  //Blik 030815 остановлена ежедневная выгрузка для pl (иниц Ожиганов)
//	ВыгрузкаФиилалов();
//	ВыгрузкаСчетов();
//	ВыгрузкаСтатей();
//	ВыгрузкаСумма();
//КонецПроцедуры
//Blik 270214 выгрузка для себестоимости кон
//Blik 040414 получение затратного подразделения организации по подразделению
Функция ПолучитьЗатратноеПодразделениеОрганизации(Подр) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации КАК подрЗатрат
	|ИЗ
	|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|ГДЕ
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение";
	Запрос.УстановитьПараметр("Подразделение", Подр);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		 Возврат выборка.подрЗатрат;
	 Иначе
		 //Сообщить("Не определено подразделение затрат для подразделения "+Строка(Подр));
		 Возврат Неопределено;
	КонецЕсли;

КонецФункции



// <- Шевченков         Процедуры рассылки уведомлений               
Процедура ПодготовитьУведомление(ЗаявкаНаРасход, СостояниеОбъекта = Неопределено, Оплачено = Ложь) Экспорт
	
	СписокПользователей = Новый Массив;
	ВремМассив          = Новый Массив;
	ТекстУведомления    = "";
	ТемаПисьма          = "";
	ОтправитьИнициатору = Истина;
	
	Если СостояниеОбъекта = Неопределено Тогда // функция вызвана не из заявки, думаю здесь будет вызов для отправки инициатору об оплате
		
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Подготовлен Тогда
		ТекстУведомления    = ПодготовитьТекстОписанияЗаявки(ЗаявкаНаРасход, СостояниеОбъекта);
		СписокПользователей = ПолучитьСписокСогласующих(ЗаявкаНаРасход, ЗаявкаНаРасход.МаршрутСогласованияР);
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Согласован Тогда
		ТекстУведомления    = ПодготовитьТекстОписанияЗаявки(ЗаявкаНаРасход, СостояниеОбъекта);
		СписокПользователей = ПолучитьСписокСогласующих(ЗаявкаНаРасход, ПолучитьСледующийЭтапСогласования(ЗаявкаНаРасход));
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Утвержден И не Оплачено Тогда
		ТекстУведомления    = ПодготовитьТекстОписанияЗаявки(ЗаявкаНаРасход, СостояниеОбъекта);
		СписокПользователей.Добавить(ЗаявкаНаРасход.Ответственный);
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Утвержден И Оплачено Тогда
		ТекстУведомления    = ПодготовитьТекстОписанияЗаявки(ЗаявкаНаРасход, СостояниеОбъекта, "ЗАЯВКА ОПЛАЧЕНА");
		СписокПользователей.Добавить(ЗаявкаНаРасход.Ответственный);
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Отклонен Тогда
		ТекстУведомления    = ПодготовитьТекстОписанияЗаявки(ЗаявкаНаРасход, СостояниеОбъекта);
		СписокПользователей.Добавить(ЗаявкаНаРасход.Ответственный);
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Отложен Тогда
		ТекстУведомления    = ПодготовитьТекстОписанияЗаявки(ЗаявкаНаРасход, СостояниеОбъекта);
		СписокПользователей.Добавить(ЗаявкаНаРасход.Ответственный);	
	КонецЕсли;
	
	СписокПользователей = ПроверитьСписокПользователейДляУведомления(СписокПользователей);
	             	
	Для Каждого ТекПольз Из СписокПользователей Цикл
		
		ТекАдресПочты = ПолучитьАдресЭлПочты(ТекПольз.ФизЛицо);
		
		Если СостояниеОбъекта = Неопределено Тогда // функция вызвана не из заявки, думаю здесь будет вызов для отправки инициатору об оплате
		
		ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Подготовлен Тогда
			ТемаПисьма = "Вам на согласование поступила заявка №" + ЗаявкаНаРасход.Номер;
			ЗарегистрироватьДляОтправкиУведомления(ЗаявкаНаРасход, ТекПольз, ТемаПисьма, ТекстУведомления, ТекущаяДата());
			//ОтправитьУведомление(ТекАдресПочты, ТемаПисьма, ТекстУведомления);
			ОтправитьИнициатору = Ложь;
		ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Согласован Тогда
			ТемаПисьма = "Вам на согласование поступила заявка №" + ЗаявкаНаРасход.Номер;
			ЗарегистрироватьДляОтправкиУведомления(ЗаявкаНаРасход, ТекПольз, ТемаПисьма, ТекстУведомления, ТекущаяДата());
			//ОтправитьУведомление(ТекАдресПочты, ТемаПисьма, ТекстУведомления);
			ОтправитьИнициатору = Истина;
			// Уведомим инициатора
			ТемаПисьма = "Ваша заявка №" + Строка(ЗаявкаНаРасход.Номер) + " была согласована и направлена на согласование на следующий этап: " + ПолучитьСледующийЭтапСогласования(ЗаявкаНаРасход.Ссылка);
		КонецЕсли;	
						
	КонецЦикла;
	
	Если СостояниеОбъекта = Перечисления.СостоянияОбъектов.Утвержден И НЕ Оплачено Тогда
		ТемаПисьма = "Ваша заявка №" + ЗаявкаНаРасход.Номер + " была утверждена";
		ОтправитьИнициатору = Истина;
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Утвержден И Оплачено Тогда
		ТемаПисьма = "Ваша заявка №" + ЗаявкаНаРасход.Номер + " была ОПЛАЧЕНА";
		ОтправитьИнициатору = Истина;
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Отклонен Тогда
		ТемаПисьма = "Ваша заявка №" + ЗаявкаНаРасход.Номер + " была отклонена";
		ОтправитьИнициатору = Истина;
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОбъектов.Отложен Тогда
		ТемаПисьма = "Ваша заявка №" + ЗаявкаНаРасход.Номер + " была отложена";
		ОтправитьИнициатору = Истина;
	КонецЕсли;
		
	Если ОтправитьИнициатору И НЕ СостояниеОбъекта = Перечисления.СостоянияОбъектов.Подготовлен Тогда
		Если СостояниеОбъекта = Перечисления.СостоянияОбъектов.Согласован Тогда
			ТемаПисьма = ?(ПустаяСтрока(ТемаПисьма), "Ваша заявка №" + Строка(ЗаявкаНаРасход.Номер) + " была согласована и направлена на согласование на следующий этап: " + ПолучитьСледующийЭтапСогласования(ЗаявкаНаРасход.Ссылка), ТемаПисьма);
		КонецЕсли;		
		//ТемаПисьма = "Ваша заявка была направлена на согласование на следующий этап: " + ЗаявкаНаРасход.МаршрутСогласованияР;
		ТекАдресПочты = ПолучитьАдресЭлПочты(ЗаявкаНаРасход.Ответственный.ФизЛицо);
		ВремМассив.Добавить(ЗаявкаНаРасход.Ответственный);
		ВремМассив = ПроверитьСписокПользователейДляУведомления(ВремМассив);
		ЗарегистрироватьДляОтправкиУведомления(ЗаявкаНаРасход, ЗаявкаНаРасход.Ответственный, ТемаПисьма, ТекстУведомления, ТекущаяДата());
		//ОтправитьУведомление(ТекАдресПочты, ТемаПисьма, ТекстУведомления);

	КонецЕсли;   	
			
КонецПроцедуры

Функция ПолучитьСледующийЭтапСогласования(ЗаявкаНаРасход)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияСогласованияЗаявокСрезПоследних.Этап,
	|	СостоянияСогласованияЗаявокСрезПоследних.Этап.Родитель КАК СледЭтап
	|ИЗ
	|	РегистрСведений.СостоянияСогласованияЗаявок.СрезПоследних(&ТекДата, ) КАК СостоянияСогласованияЗаявокСрезПоследних
	|ГДЕ
	|	СостоянияСогласованияЗаявокСрезПоследних.Заявка = &Заявка";
	Запрос.УстановитьПараметр("Текдата", КонецДня(Текущаядата()));
	Запрос.УстановитьПараметр("Заявка", ЗаявкаНаРасход.Ссылка);
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат РезТЗ[0].СледЭтап;	
	
КонецФункции

Функция ПолучитьСписокСогласующих(ЗаявкаНаРасход, ТекЭтапСогласования, ДопПользователь = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутыСогласованияСогласующиеЛица.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.МаршрутыСогласования.СогласующиеЛица КАК МаршрутыСогласованияСогласующиеЛица
	|ГДЕ
	|	МаршрутыСогласованияСогласующиеЛица.Ссылка = &Ссылка
	|	И НЕ МаршрутыСогласованияСогласующиеЛица.Пользователь.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", ТекЭтапСогласования);
	
	РезТЗ = Запрос.Выполнить().Выгрузить();
	МассивПользователей = Новый Массив;
	
	Для Каждого Строка Из РезТЗ Цикл  		
		МассивПользователей.Добавить(Строка.Пользователь);		
	КонецЦикла;
	
	Если ДопПользователь <> Неопределено Тогда
		МассивПользователей.Добавить(ДопПользователь);	
	КонецЕсли;
		
	Возврат МассивПользователей;
	
КонецФункции

Функция ПодготовитьТекстОписанияЗаявки(ЗаявкаНаРасход, СтатусЗаявки, ДопТекст = "")
	
	ТекстОписания = "Заявка №" + ЗаявкаНаРасход.Номер + " от " + Формат(ЗаявкаНаРасход.Дата, "ДФ=""дд ММММ гггг""") + " " + 
					"Инициатор: " + ЗаявкаНаРасход.Ответственный + Символы.ПС + "ЦФО: " + ЗаявкаНаРасход.ЦФО + Символы.ПС +
	                "Контрагент: " + ЗаявкаНаРасход.Контрагент + " на сумму " + ЗаявкаНаРасход.СуммаДокумента + " " + ЗаявкаНаРасход.ВалютаДокумента +
					Символы.ПС + "Описание: [Описание]" + Символы.ПС + Символы.ПС + "Текущее состояние:     " + ВРег(Строка(СтатусЗаявки)) + 
					?(ЗаявкаНаРасход.Состояние = Перечисления.СостоянияОбъектов.Отклонен, ". Отклонена по причине: " + ЗаявкаНаРасход.Комментарий, "");
	Возврат ТекстОписания + ?(ПустаяСтрока(ДопТекст), "", Символы.ПС + Символы.ПС + ДопТекст);
	
КонецФункции
           
// Передадим список следующего этапа, либо иной массив пользователей, проверим по регистру сведений
// на отказ от уведомлений, вернум скорректированный список
Функция ПроверитьСписокПользователейДляУведомления(СписокПользователей)
	
	ИспрМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_НеУведомлятьОСогласованияхЗаявок.Пользователь
	|ИЗ
	|	РегистрСведений.ПРГ_НеУведомлятьОСогласованияхЗаявок КАК ПРГ_НеУведомлятьОСогласованияхЗаявок";
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из СписокПользователей Цикл
		Если РезТЗ.Найти(Строка) = Неопределено Тогда
			ИспрМассив.Добавить(Строка);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ИспрМассив;
	  	
КонецФункции

Функция ПолучитьАдресЭлПочты(ФизЛицо) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление КАК Почта
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000026"));
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Если РезТЗ.Количество() = 1 Тогда
		Возврат РезТЗ[0].Почта;
	ИначеЕсли РезТЗ.Количество() = 0 Тогда
		Возврат "";
	ИначеЕсли РезТЗ.Количество() > 1 Тогда
		Возврат "";
	КонецЕсли;
		
КонецФункции

Функция ОтправитьУведомление(АдресПочты, ТемаПисьма, ТекстПисьма, Описание) Экспорт
    // Вернет результат булево, отправлено или нет
	//Blik 290216 49617 н
	НастройкиРассылки   = ПолучитьНастройкиРассылкиУведомлений();
	Отправитель_robot1s = СокрЛП(Строка(НастройкиРассылки.Найти("Отправитель_robot1s", "Параметр").ЗначениеПараметра)); 
	//Blik 290216 49617 к

	Попытка
		Если ЗначениеЗаполнено(АдресПочты) И ЗначениеЗаполнено(ТемаПисьма) И ЗначениеЗаполнено(Строка(ТекстПисьма)) Тогда		
			ПРГ_Регламентый.ОправитьФайл(ТемаПисьма, СокрЛП(АдресПочты), СтрЗаменить(ТекстПисьма, "[Описание]", Описание), , , Отправитель_robot1s); //"robot1s@lip.progressfood.ru");	//Blik 290216 49617		
		КонецЕсли;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
		
КонецФункции

Процедура ЗарегистрироватьДляОтправкиУведомления(ТекОбъект, ТекПользователь, ТемаПисьма, ТекстПисьма, ДатаОтправки = Неопределено, ППИ = Неопределено) Экспорт
	
	// Проверим может такое уведомление уже существует
	ТекОтветственный = ТекОбъект.Ответственный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Объект,
	|	ДанныеРегистра.Пользователь,
	|	ДанныеРегистра.ТемаПисьма,
	|	ДанныеРегистра.ТекстПисьма,
	|	ДанныеРегистра.ДатаОтправки,
	|	ДанныеРегистра.ПлатежноеПоручениеИсходящее,
	|	ДанныеРегистра.Отправлено
	|ИЗ
	|	РегистрСведений.ПРГ_ОтправкаПочты КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Объект = &Объект
	|	И ДанныеРегистра.Пользователь = &Пользователь
	|	И ДанныеРегистра.ТемаПисьма = &ТемаПисьма";
	Запрос.УстановитьПараметр("Объект", ТекОбъект.Ссылка);
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ТемаПисьма", ТемаПисьма);
	Запрос.УстановитьПараметр("ТекстПисьма", ТекстПисьма);
	Рез = Запрос.Выполнить();
	
	Если Не Рез.Пустой() Тогда Возврат КонецЕсли;
	
	// Поле дата отправки может пригодиться, дата после которой начинать отправлють даныне по записи
	ВремМассив               = Новый Массив;
	ВремМассив.Добавить(ТекОтветственный);	
	ВремМассив = ПроверитьСписокПользователейДляУведомления(ВремМассив);
	Если ВремМассив.Количество() = 0 И ТекПользователь = ТекОтветственный Тогда Возврат КонецЕсли;
	
	НоваяЗапись              = РегистрыСведений.ПРГ_ОтправкаПочты.СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект       = ТекОбъект.Ссылка;
	НоваяЗапись.Пользователь = ТекПользователь;
	НоваяЗапись.ТемаПисьма   = ТемаПисьма;
	НоваяЗапись.ТекстПисьма  = ТекстПисьма;
	НоваяЗапись.ДатаОтправки = ?(ДатаОтправки <> Неопределено, ДатаОтправки + 100, ТекущаяДата() + 100);
	НоваяЗапись.ПлатежноеПоручениеИсходящее = ?(ППИ = Неопределено, Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка(), ППИ);
	НоваяЗапись.Записать();
	
КонецПроцедуры

Функция ПолучитьЗаписиДляОтправкиУведомлений(ДатаСреза = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_ОтправкаПочты.Объект,
	|	ПРГ_ОтправкаПочты.Пользователь,
	|	ПРГ_ОтправкаПочты.ТемаПисьма,
	|	ПРГ_ОтправкаПочты.ТекстПисьма,
	|	ПРГ_ОтправкаПочты.ДатаОтправки,
	|	ПРГ_ОтправкаПочты.ПлатежноеПоручениеИсходящее
	|ИЗ
	|	РегистрСведений.ПРГ_ОтправкаПочты КАК ПРГ_ОтправкаПочты
	|ГДЕ
	|	ПРГ_ОтправкаПочты.ДатаОтправки <= &ДатаОтправки
	|	И НЕ ПРГ_ОтправкаПочты.Отправлено";
	//|	И ПРГ_ОтправкаПочты.ПлатежноеПоручениеИсходящее = &ПлатежноеПоручениеИсходящее";
	Запрос.УстановитьПараметр("ДатаОтправки", ТекущаяДата()-60);
	Запрос.УстановитьПараметр("ПлатежноеПоручениеИсходящее", Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка());
	РезТЗ = Запрос.Выполнить().Выгрузить();
	Возврат РезТЗ;
	
КонецФункции

Процедура РегламентнаяОтправкаПочты() Экспорт
	
	ТаблицаУведомлений = ПолучитьЗаписиДляОтправкиУведомлений();
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	ТаблицаЗаписей.Колонки.Добавить("Объект");
	ТаблицаЗаписей.Колонки.Добавить("Пользователь");
	ТаблицаЗаписей.Колонки.Добавить("ТемаПисьма");
	ТаблицаЗаписей.Колонки.Добавить("ТекстПисьма");
	ТаблицаЗаписей.Колонки.Добавить("ПлатежноеПоручениеИсходящее");
	ТаблицаЗаписей.Колонки.Добавить("Отправлено");
	ТаблицаЗаписей.Колонки.Добавить("ДатаОтправки");
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Объект");
	ТаблицаОшибок.Колонки.Добавить("Пользователь");
	
	Для Каждого Строка Из ТаблицаУведомлений Цикл                                                     		
		АдресПочты = ПолучитьАдресЭлПочты(Строка.Пользователь.ФизЛицо);                               		
		ТаблицаЗаписей.Очистить();
		Если НЕ ОтправитьУведомление(АдресПочты, Строка.ТемаПисьма, Строка(Строка.ТекстПисьма), Строка.Объект.Описание) Тогда 			
			ЗаполнитьЗначенияСвойств(ТаблицаОшибок.Добавить(), Строка);                               			
		Иначе // Сообщение отправилось без ошибок                                                     			
			НаборЗаписей = РегистрыСведений.ПРГ_ОтправкаПочты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Строка.Объект);
			НаборЗаписей.Отбор.Пользователь.Установить(Строка.Пользователь);
			НаборЗаписей.Отбор.Отправлено.Установить(Ложь);
			НаборЗаписей.Отбор.ТемаПисьма.Установить(Строка.ТемаПисьма);
			НаборЗаписей.Отбор.ТекстПисьма.Установить(Строка.ТекстПисьма);
			НаборЗаписей.Прочитать(); 
			
			Для Каждого СтрЗапись Из НаборЗаписей Цикл
				
				ЗаполнитьЗначенияСвойств(ТаблицаЗаписей.Добавить(), Стрзапись);
								
			КонецЦикла;
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();                                                                  			
			
			Для Каждого Строка Из ТаблицаЗаписей Цикл
				
				НовыйНаборЗаписей = РегистрыСведений.ПРГ_ОтправкаПочты.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НовыйНаборЗаписей, Строка);
				НовыйНаборЗаписей.ДатаОтправки = ТекущаяДата();
				НовыйНаборЗаписей.Отправлено = Истина;
				НовыйНаборЗаписей.Записать();
								
			КонецЦикла;				
						
		КонецЕсли;                                                                                    				
	КонецЦикла;  
		
КонецПроцедуры
             
Процедура РегламентПоПлатежкам() Экспорт
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа КАК ЗаявкаНаРасход,
		|	СУММА(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа.Ответственный
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата > &Дата
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|	И НЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа <> &ПустаяПлатежка
		|	И НЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПРГ_ОтправкаПочты.ПлатежноеПоручениеИсходящее
		|				ИЗ
		|					РегистрСведений.ПРГ_ОтправкаПочты КАК ПРГ_ОтправкаПочты
		|				ГДЕ
		|					ПРГ_ОтправкаПочты.ПлатежноеПоручениеИсходящее <> &ПустаяПлатежка)
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа <> &ПустаяЗаявка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа.Ответственный";
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата() - (86400 * 14)));
		Запрос.УстановитьПараметр("ПустаяПлатежка", Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка());
		РезТЗ = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаПлатежка Из РезТЗ Цикл
			
			ТекстПисьма = ПодготовитьТекстОписанияЗаявки(СтрокаПлатежка.ЗаявкаНаРасход, "Оплачена", "Документ: " + СтрокаПлатежка.Ссылка);
			ТемаПисьма  = "Ваша заявка №" + СтрокаПлатежка.ЗаявкаНаРасход.Номер + " была оплачена";
			ЗарегистрироватьДляОтправкиУведомления(СтрокаПлатежка.ЗаявкаНаРасход, СтрокаПлатежка.ЗаявкаНаРасход.Ответственный, ТемаПисьма, ТекстПисьма, , СтрокаПлатежка.Ссылка);
			
		КонецЦикла;
		
	Исключение
		ОтправитьСообщениеОбОшибке(ПРГ_Регламентый.ПолучитьАдресЭлПочты(Справочники.Пользователи.НайтиПоКоду("Шевченков А.В.").ФизЛицо), ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправитьСообщениеОбОшибке(ФизЛицо, ТекОшибка, Объект1 = Неопределено, Объект2 = Неопределено, ДопТекст = Неопределено)
	
	Попытка
		СообщениеОбОшибке = Строка(ТекОшибка);
		СообщениеОбОшибке = ?(ПустаяСтрока(Строка(Объект1)), СообщениеОбОшибке, СообщениеОбОшибке + Символы.ПС + "Объект1: " + Объект1);
		СообщениеОбОшибке = ?(ПустаяСтрока(Строка(Объект2)), СообщениеОбОшибке, СообщениеОбОшибке + Символы.ПС + "Объект2: " + Объект2);
		СообщениеОбОшибке = ?(ПустаяСтрока(Строка(ДопТекст)), СообщениеОбОшибке, СообщениеОбОшибке + Символы.ПС + "ДопТекст: " + ДопТекст);
		ПРГ_Регламентый.ОтправитьУведомление(ПРГ_Регламентый.ПолучитьАдресЭлПочты(Справочники.Пользователи.НайтиПоКоду("Шевченков А.В.").ФизЛицо), "Ошибка в регламенте формирования уведомлений по платежкам", СообщениеОбОшибке);
	Исключение
		
	КонецПопытки;		
	
КонецПроцедуры

// -> Процедуры рассылки уведомлений - конец

// процедуры обмена данными по столовой Blik 011014 нач
функция выгрузитьДанныеПоЛимитам() экспорт  
	//выгрузка в файл данных по лимитам сотров. выгружаются только сотры у которых установлен лимит
	// по графикам и явкам контроля нет
	//выгрузка в файл формата txt
	//1 строка - маска данных - tabnom;fio;dolznost;podr;kod;limit;data
	КаталогФайла="\\Devsrv\1s\blik\проверка\";  //  \\Devsrv\1s\blik\проверка      
	ИмяФайла = "Сотрудники Питание.txt";
	
	ВФайл = КаталогФайла+ИмяФайла;
	ТексФайл = Новый ТекстовыйДокумент;
	
	//запрос для подр гр
	
	ЗапросП = Новый Запрос;
	ЗапросП.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка как подр
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Код = ""ПЛ""";
	
	выборка = ЗапросП.Выполнить().Выбрать();
	Если выборка.Следующий() тогда
		ПодраздГр = выборка.подр;
	Иначе
		ПодраздГр = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	//Сообщить( ПодраздГр);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотр,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Код КАК ТабНом,
	|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК График,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подр,
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния,
	|	РегКодкартыДоступа.Значение КАК КодПропуска,
	|	СостояниеРаботниковОрганизацийСрезПоследних.Состояние КАК Состояние,
	|	СостояниеРаботниковОрганизацийСрезПоследних.Период,
	|	ЛимитПитания.Значение КАК Лимит,
	|	ПРГ_ДополнительныеРеквизитыСправочниковПереодическийСрезПоследних.Период КАК датаЛимита,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.ДатаПриемаНаРаботу КАК датаПриема
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК РегКодкартыДоступа
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = РегКодкартыДоступа.Объект
	|			И (РегКодкартыДоступа.Свойство В
	|				(ВЫБРАТЬ
	|					СвойстваОбъектов.Ссылка
	|				ИЗ
	|					ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|				ГДЕ
	|					СвойстваОбъектов.Наименование = ""КодКартыДоступа""))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЛимитПитания
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ЛимитПитания.Объект
	|			И (ЛимитПитания.Свойство В
	|				(ВЫБРАТЬ
	|					СвойстваОбъектов.Ссылка
	|				ИЗ
	|					ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|				ГДЕ
	|					СвойстваОбъектов.Наименование = ""ЛимитПитания""))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&Дата, ) КАК СостояниеРаботниковОрганизацийСрезПоследних
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник
	|			И (СостояниеРаботниковОрганизацийСрезПоследних.Период = &Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочниковПереодический.СрезПоследних(&дата, ) КАК ПРГ_ДополнительныеРеквизитыСправочниковПереодическийСрезПоследних
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ПРГ_ДополнительныеРеквизитыСправочниковПереодическийСрезПоследних.Объект
	|			И (ПРГ_ДополнительныеРеквизитыСправочниковПереодическийСрезПоследних.Реквизит = ""ЛимитПитания"")
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.увольнение)
	|	И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)";
	
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",ПодраздГр);
	
	ТекСтрока="";
	ПерваяСТрока="tabnom;fio;dolznost;podr;kod;limit;data";
	ТексФайл.ДобавитьСтроку(ПерваяСТрока);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 		
		Если не сокрлп(строка(Выборка.Лимит))="" Тогда
			если  началодня(Выборка.датаПриема) = началодня(текущаядата()) тогда
				продолжить;
			КонецЕсли;
			ТекСтрока = сокрлп(строка(Выборка.ТабНом))+";"+
			сокрлп(строка(Выборка.Сотр))+";"+
			сокрлп(строка(Выборка.Должность))+";"+
			сокрлп(строка(Выборка.Подр))+";"+
			сокрлп(строка(Выборка.КодПропуска))+";"+
			сокрлп(строка(Выборка.Лимит))+";"+
			сокрлп(строка(формат(Выборка.датаЛимита, "ДЛФ=Д")));
			ТексФайл.ДобавитьСтроку(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ТексФайл.Записать(ВФайл,"windows-1251");
	
Конецфункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") 
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
КонецФункции
функция получитьтзИзФайла()
	текст = Новый ТекстовыйДокумент;
		Попытка
			//обязательно устанавливаем кодировку, в которой наш файл
			Имя =  "Сотрудники Питание.txt";
			ИмяФайла = "\\Devsrv\1s\blik\проверка\"+Имя;
			Текст.Прочитать(ИмяФайла);
		Исключение
			Сообщить("Не удалось прочитать файл: " 
			+ ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
			Возврат НЕОПРЕДЕЛЕНО;
		КонецПопытки;
		тзДанных = новый ТаблицаЗначений;
		тзДанных.Очистить();//очищаем таблицу
		тзДанных.Колонки.Очистить();//удаляем колонки, так как их состав мог измениться
		квоСтрок = текст.КоличествоСтрок();
		Если Не квоСтрок > 0 Тогда
			Сообщить("Файл пустой",СтатусСообщения.Внимание);
			Возврат НЕОПРЕДЕЛЕНО;	
		КонецЕсли;
		ЗнРазделителя=";";
		//получаем первую строку с форматом файла
		стрТекста = текст.ПолучитьСтроку(1);
		//преобразуем строку в массив при помощи функции общего модуля, которая есть в типовых
		//ниже я дам её код, на случай, если нет
		масЗначСтр = РазложитьСтрокуВМассивПодстрок(стрТекста,ЗнРазделителя);
		//добавляем две служебные колонки
		//для возможности отказаться от загрузки определенной строки
		//табЗагрузки.Колонки.Добавить("не_загружать",Новый ОписаниеТипов("Булево"),"Не загружать");
		//для удобства вывода комментариев с указанием номера строки по ходу загрузки
		тзДанных.Колонки.Добавить("номер_строки",Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)),"Номер строки");
		//формируем колонки нашей таблицы	
		Для каждого зн Из масЗначСтр Цикл
			//убираем лишний символОграничения
			значение = СтрЗаменить(зн,ЗнРазделителя,""); 
			кол = тзДанных.Колонки.Добавить(значение,Новый ОписаниеТипов("Строка"));
		КонецЦикла;
		
		//начиная со второй строки читаем строки файла, раскладывая их в массив
		Для номСтр = 2 По квоСтрок Цикл
			стрТекста = текст.ПолучитьСтроку(номСтр);
			масЗначСтр = РазложитьСтрокуВМассивПодстрок(стрТекста,ЗнРазделителя);
			//добавляем новую строку в таблицу
			новСтр = тзДанных.Добавить();
			новСтр.номер_строки = номСтр;
			//начиная с третьей колонки производим установку значений в колонки
			номЗнач = 1;
			Для каждого зн Из масЗначСтр Цикл
				новСтр[номЗнач] = СтрЗаменить(зн,ЗнРазделителя,"");
				номЗнач = номЗнач + 1;
			КонецЦикла;
		КонецЦикла;
        возврат тзДанных;
КонецФункции
Функция вернутьЭлементСпр(стрТабФайла,ДатаОбеда)
	КодЭлемента = стрТабФайла.tabnom;
	Если Не ЗначениеЗаполнено(КодЭлемента) Тогда
		Сообщить("В строке " + стрТабФайла.номер_строки + " не заполнен код справочника",
		СтатусСообщения.ОченьВажное);
		Возврат Неопределено;		
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотр,
	                      |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Код КАК ТабНом,
	                      |	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	                      |	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подр,
	                      |	ЛимитПитания.Значение КАК Лимит
	                      |ИЗ
	                      |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЛимитПитания
	                      |		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ЛимитПитания.Объект
	                      |			И (ЛимитПитания.Свойство В
	                      |				(ВЫБРАТЬ
	                      |					СвойстваОбъектов.Ссылка
	                      |				ИЗ
	                      |					ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	                      |				ГДЕ
	                      |					СвойстваОбъектов.Наименование = ""ЛимитПитания""))
	                      |ГДЕ
	                      |	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.увольнение)
	                      |	И РаботникиОрганизацийСрезПоследних.Сотрудник.Код = &ТабНом");
	
	Запрос.УстановитьПараметр("ТабНом",КодЭлемента);
	Запрос.УстановитьПараметр("Дата",НачалоДня(ДатаОбеда));///тут нужно указать дату загрузки

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Если Выборка.Следующий() Тогда
		структураСотра = новый Структура;
        структураСотра.Вставить("Сотр", Выборка.Сотр);
        структураСотра.Вставить("Подр", Выборка.Подр);
		структураСотра.Вставить("долж", Выборка.Должность);
		структураСотра.Вставить("Лимит", Выборка.Лимит); 
		Возврат структураСотра;			
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции 

функция ЗагрузкаДанныхПоИспользованиюЛимитовПитания() экспорт
	//загрузка данных в рег счед по использованию лимитов питания
	// данные из файла По по столовой. 
	//формат файл - txt
	//1 строка файла - маска -  tabnom;fio;dolznost;podr;kod;limit;data
	//соотв сотров по табельному номеру. 
	
	//получим таблицу значений
	тзданных = получитьТЗизФайла();
	если тзданных = неопределено тогда
		Сообщить("не получилось");
		Возврат неопределено;
	КонецЕсли;
	ВсегоСтрок = тзданных.Количество();
	номСтр = 1;
	Для каждого стрТЗ Из тзданных Цикл
		
		#Если Клиент Тогда
			Состояние("Обработано: " + Окр(номСтр * 100 / ВсегоСтрок) + "%");
		#КонецЕсли	
		номСтр = номСтр + 1;
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		частьдатыДень = Лев(стрТЗ.data,2);
		частьДатыМес = сред(стрТЗ.data,4,2);
		частьДатыГод = сред(стрТЗ.data,7);  
		строкадаты = СокрЛП(Строка(частьДатыГод))+СокрЛП(Строка(частьДатыМес))+СокрЛП(Строка(частьдатыДень));
		ДатаОбеда = Дата(строкадаты);
		ДанныеСотра =вернутьЭлементСпр(стрТЗ,ДатаОбеда);
		
		//лимит = вернутьлимитсотра(ссылкаСотр);
		Если ДанныеСотра = Неопределено Тогда
			Сообщить("Не найдено соответствие для сотрудника "+стрТЗ.fio);
			Продолжить;	
		Иначе
			НаборЗаписей = РегистрыСведений.ПРГ_СотрудникиСЛимитамиПитания.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Сотрудник.Установить(ДанныеСотра.сотр);
			НаборЗаписей.Отбор.Период.Установить(НачалоДня(ДатаОбеда));///тут нужно указать дату загрузки
			
			НовЗапись = НаборЗаписей.Добавить();
			
			НовЗапись.Сотрудник = ДанныеСотра.сотр;
			НовЗапись.Период  = НачалоДня(ДатаОбеда);//началоДня(ТекущаяДата());///тут нужно указать дату загрузки
			НовЗапись.Лимит = ДанныеСотра.лимит;
			НовЗапись.Подразделение = ДанныеСотра.подр;
            НовЗапись.Должность = ДанныеСотра.Долж;
			НовЗапись.СтоимостьОбеда = стрТЗ.limit;
			
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции
процедура ВыгразукаЗагрузкаДанныхПоПитанию() Экспорт
	//выгрузка данных в файл для столовой
	выгрузитьДанныеПоЛимитам();
	
	//загрузка из файла столовой 
	ЗагрузкаДанныхПоИспользованиюЛимитовПитания();
	
КонецПроцедуры
// процедуры обмена данными по столовой Blik 011014 кон

//процедуры рег задания по автоматической установке руководителя подразделения Blik 121114 28902 н
функция изменитьданныерегистраруководителей(РукНов,ДолжНов,Рукрег,ДолжРег,Флаг,подр,ОтвЛ,ЕстьЗам,Дивизион)
	НаДату = началодня(ТекущаяДата());
	Если Флаг = 1 тогда //меняется должность
		НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(подр);
		НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(ОтвЛ);
		НаборЗаписей.Отбор.Период.Установить(НаДату); 
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.СтруктурнаяЕдиница = подр;
		НовЗапись.ОтветственноеЛицо = ОтвЛ;
		НовЗапись.Период = НаДату;
		Если ТипЗнч(РукНов) = Тип("Null") Тогда
			НовЗапись.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();      
			НовЗапись.Должность = Справочники.ДолжностиОрганизаций.ПустаяСсылка(); 
		иначе
			НовЗапись.ФизическоеЛицо = РукНов;
			НовЗапись.Должность = ДолжНов; 
		КонецЕсли;
		НаборЗаписей.Записать(Истина);
		//Сообщить("Изменены данные подр "+подр);
		Текст = "Изменены данные подразделения "+подр + " код " + подр.код + " дивизион " +Дивизион+"
		|старые значение руководителя "+Рукрег+ " должность руководителя "+ДолжРег+";
		|новые значения руководителя "+РукНов+ " должность руководителя "+ДолжНов+".";
		Если  ЕстьЗам=1 Тогда
			Текст = Текст+"
			|По данному подразделению На ШЕ урководителя не числится сотрудник, установлен заместитель!";
		ИначеЕсли ЕстьЗам=1 Тогда
			Текст = Текст+"
			|По данному подразделению На ШЕ урководителя не числится сотрудник, заместитель не указан!";
		КонецЕсли;
		Тема = "Изменения руководителя в подразделении";
		Получатель = новый СписокЗначений;
		Получатель.Добавить("IKalmatskaya@progressfood.ru");  //Blik 290216 49617
		////Получатель.Добавить("MNPetrova@progressfood.ru");
		ПРГ_Регламентый.ОправитьФайл(Тема, Получатель, Текст) 
	ИначеЕсли Флаг = 2 Тогда//изменился рук
		Если ЗначениеЗаполнено(РукНов) Тогда
			НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей(); 
			
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(подр);
			НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(ОтвЛ);
			НаборЗаписей.Отбор.Период.Установить(НаДату); 
			
			НовЗапись = НаборЗаписей.Добавить();
			НовЗапись.СтруктурнаяЕдиница = подр;
			НовЗапись.ОтветственноеЛицо = ОтвЛ;
			НовЗапись.Период = НаДату;
			Если ТипЗнч(РукНов) = Тип("Null") Тогда
				НовЗапись.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();      
				НовЗапись.Должность = Справочники.ДолжностиОрганизаций.ПустаяСсылка(); 
			иначе
				НовЗапись.ФизическоеЛицо = РукНов;
				НовЗапись.Должность = ДолжНов; 
			КонецЕсли;
			НаборЗаписей.Записать(Истина);
			//Сообщить("Изменены данные подр "+подр);
			Текст = "Изменены данные подразделения "+подр + " код " + подр.код + " дивизион " +Дивизион+"
			|старые значение руководителя "+Рукрег+ " должность руководителя "+ДолжРег+";
			|новые значения руководителя "+РукНов+ " должность руководителя "+ДолжНов+".";
			Если  ЕстьЗам=1 Тогда
				Текст = Текст+"
				|По данному подразделению На ШЕ урководителя не числится сотрудник, установлен заместитель!";
			ИначеЕсли ЕстьЗам=1 Тогда
				Текст = Текст+"
				|По данному подразделению На ШЕ урководителя не числится сотрудник, заместитель не указан!";
			КонецЕсли;
			Тема = "Изменения руководителя в подразделении";
			Получатель = новый СписокЗначений;
			Получатель.Добавить("IKalmatskaya@progressfood.ru"); //Blik 290216 49617
			//Получатель.Добавить("MNPetrova@progressfood.ru");
			ПРГ_Регламентый.ОправитьФайл(Тема, Получатель, Текст) 
		КонецЕсли;
	КонецЕсли;
КонецФункции
Процедура ПодборДанныхДляУстановкиРуководителяВПодразделении()Экспорт
//запрос выборка подразделения и руководителя
Запрос = Новый Запрос("ВЫБРАТЬ
                      |	ПРГ_СоответствиеШЕРукИПодразделенияСрезПоследних.Подразделение КАК Подразделение,
                      |	ПРГ_СоответствиеШЕРукИПодразделенияСрезПоследних.Подразделение.Код,
                      |	ПРГ_СоответствиеШЕРукИПодразделенияСрезПоследних.ШтатнаяЕдиница КАК ШЕ,
                      |	ПРГ_СоответствиеШЕРукИПодразделенияСрезПоследних.ШтатнаяЕдиницаЗамещения КАК ШЕЗам,
                      |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Руководитель,
                      |	РаботникиОрганизацийСрезПоследних.Должность КАК ДолжностьРук,
                      |	РаботникиОрганизацийСрезПоследнихЗам.Сотрудник.Физлицо КАК РуководительЗам,
                      |	РаботникиОрганизацийСрезПоследнихЗам.Должность КАК ДолжностьРукЗам,
                      |	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК РуководительРег,
                      |	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРукРег,
                      |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтвЛ,
                      |	ВЫБОР
                      |		КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо ЕСТЬ NULL 
                      |			ТОГДА ВЫБОР
                      |					КОГДА РаботникиОрганизацийСрезПоследнихЗам.Сотрудник.Физлицо ЕСТЬ NULL 
                      |						ТОГДА 2
                      |					ИНАЧЕ 1
                      |				КОНЕЦ
                      |		ИНАЧЕ 0
                      |	КОНЕЦ КАК ЕстьЗам
                      |ПОМЕСТИТЬ ВТ_Данные
                      |ИЗ
                      |	РегистрСведений.ПРГ_СоответствиеШЕРукИПодразделения.СрезПоследних(&Дата, ) КАК ПРГ_СоответствиеШЕРукИПодразделенияСрезПоследних
                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
                      |				&Дата,
                      |				Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
                      |					И НЕ Сотрудник.Физлицо В
                      |							(ВЫБРАТЬ
                      |								ПРГ_СлужебныйТаблицаПараметров.Параметр КАК ФизЛицо
                      |							ИЗ
                      |								Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
                      |							ГДЕ
                      |								ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""Исключения_Рук"")) КАК РаботникиОрганизацийСрезПоследних
                      |		ПО ПРГ_СоответствиеШЕРукИПодразделенияСрезПоследних.ШтатнаяЕдиница = РаботникиОрганизацийСрезПоследних.AVTШтатноеРасписание
                      |			И (НЕ РаботникиОрганизацийСрезПоследних.AVTШтатноеРасписание = ЗНАЧЕНИЕ(Справочник.AVT_ШтатноеРасписание.ПустаяСсылка))
                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
                      |				&Дата,
                      |				Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
                      |					И НЕ Сотрудник.Физлицо В
                      |							(ВЫБРАТЬ
                      |								ПРГ_СлужебныйТаблицаПараметров.Параметр КАК ФизЛицо
                      |							ИЗ
                      |								Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
                      |							ГДЕ
                      |								ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""Исключения_Рук"")) КАК РаботникиОрганизацийСрезПоследнихЗам
                      |		ПО ПРГ_СоответствиеШЕРукИПодразделенияСрезПоследних.ШтатнаяЕдиницаЗамещения = РаботникиОрганизацийСрезПоследнихЗам.AVTШтатноеРасписание
                      |			И (НЕ РаботникиОрганизацийСрезПоследнихЗам.AVTШтатноеРасписание = ЗНАЧЕНИЕ(Справочник.AVT_ШтатноеРасписание.ПустаяСсылка))
                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
                      |		ПО ПРГ_СоответствиеШЕРукИПодразделенияСрезПоследних.Подразделение = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
                      |;
                      |
                      |////////////////////////////////////////////////////////////////////////////////
                      |ВЫБРАТЬ
                      |	ВТ_Данные.Подразделение КАК Подразделение,
                      |	ВТ_Данные.ПодразделениеКод,
                      |	ВТ_Данные.ШЕ,
                      |	ВТ_Данные.ШЕЗам,
                      |	ЕСТЬNULL(ВТ_Данные.Руководитель, ВТ_Данные.РуководительЗам) КАК Руководитель,
                      |	ЕСТЬNULL(ВТ_Данные.ДолжностьРук, ВТ_Данные.ДолжностьРукЗам) КАК ДолжностьРук,
                      |	ВТ_Данные.РуководительРег КАК РуководительРег,
                      |	ВТ_Данные.ДолжностьРукРег КАК ДолжностьРукРег,
                      |	ВТ_Данные.ОтвЛ КАК ОтвЛ,
                      |	ВЫБОР
                      |		КОГДА ВТ_Данные.ШЕ = ЗНАЧЕНИЕ(Справочник.AVT_ШтатноеРасписание.ПустаяССылка)
                      |			ТОГДА 0
                      |		ИНАЧЕ ВЫБОР
                      |				КОГДА ЕСТЬNULL(ВТ_Данные.Руководитель, ВТ_Данные.РуководительЗам) = ВТ_Данные.РуководительРег
                      |					ТОГДА ВЫБОР
                      |							КОГДА ЕСТЬNULL(ВТ_Данные.ДолжностьРук, ВТ_Данные.ДолжностьРукЗам) = ВТ_Данные.ДолжностьРукРег
                      |								ТОГДА 0
                      |							ИНАЧЕ 1
                      |						КОНЕЦ
                      |				ИНАЧЕ 2
                      |			КОНЕЦ
                      |	КОНЕЦ КАК ЧтоИзменяется,
                      |	ВТ_Данные.ЕстьЗам,
                      |	ЗначенияСвойствОбъектов.Значение КАК Дивизион
                      |ИЗ
                      |	ВТ_Данные КАК ВТ_Данные
                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
                      |		ПО ВТ_Данные.Подразделение = ЗначенияСвойствОбъектов.Объект
                      |			И (ЗначенияСвойствОбъектов.Свойство В
                      |				(ВЫБРАТЬ
                      |					СвойстваОбъектов.Ссылка
                      |				ИЗ
                      |					ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
                      |				ГДЕ
                      |					СвойстваОбъектов.Наименование = ""Дивизион""))
                      |ГДЕ
                      |	ВТ_Данные.Подразделение.ПометкаУдаления = ЛОЖЬ
                      |
                      |УПОРЯДОЧИТЬ ПО
                      |	ВТ_Данные.Подразделение");
	
	Запрос.УстановитьПараметр("Дата",КонецДня(ТекущаяДата())); 	
	//контроль по полю ЧтоИзменяется ели 0 - ничего не делаем, 
	//если 1 - изменилась должность руководителя нужно поправить, 
	//если 2 изменился руководитель - нужно  изменить все
	//если есть зам = 1  - устанавливается заместитель 
	//если есть зам = 2  - устанавливается пустое значение нет рук на ше и зама
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если выборка.ЧтоИзменяется = 1 Тогда
			изменитьданныерегистраруководителей(выборка.Руководитель,выборка.ДолжностьРук,выборка.РуководительРег,выборка.ДолжностьРукРег,выборка.ЧтоИзменяется,выборка.Подразделение,выборка.ОтвЛ,выборка.ЕстьЗам,выборка.Дивизион);
		ИначеЕсли выборка.ЧтоИзменяется = 2 Тогда
			изменитьданныерегистраруководителей(выборка.Руководитель,выборка.ДолжностьРук,выборка.РуководительРег,выборка.ДолжностьРукРег,выборка.ЧтоИзменяется,выборка.Подразделение,выборка.ОтвЛ,выборка.ЕстьЗам,выборка.Дивизион);
		Иначе
			Продолжить;
		КонецЕсли;
   КонецЦикла;
КонецПроцедуры
//процедуры рег задания по автоматической установке руководителя подразделения Blik 121114 28902 к 

 

//{19.01.2015 Евгений заявка №34362 
Процедура ПРГВыгрузкаВКубыOLAP(РежимВыгрузки=0,ИмяОбъекта=Неопределено) Экспорт
	
	//РежимВыгрузки=0;
	//ИмяОбъекта=Неопределено;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ГраницыЗапретаИзмененияДанных.Организация,
	//	|	ГраницыЗапретаИзмененияДанных.Пользователь,
	//	|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
	//	|ИЗ
	//	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	//	|ГДЕ
	//	|	ГраницыЗапретаИзмененияДанных.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//	|	И ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";

	//Результат = Запрос.Выполнить();

	//ВыборкаДетальныеЗаписи = Результат.Выбрать();

	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
	//	НачалоПериода = НачалоМесяца(ВыборкаДетальныеЗаписи.ГраницаЗапретаИзменений);
	//Иначе 
	//	НачалоПериода = '00010101';
	//КонецЕсли;

	//По просьбе Жаворонкого С. дата фиксированна
	НачалоПериода = '20150601';
	
	тОбработчик = Обработки.ПРГВыгрузкаВКубыOLAP.Создать();
	тОбработчик.Выгрузить(РежимВыгрузки,ИмяОбъекта,НачалоПериода);	
	
КонецПроцедуры
//19.01.2015 Евгений}

//{03.02.2015 Островерхий заявка №б/н //Задача Губиной
Процедура ПРГОбновлениеСотрудниковПродаж() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПервых.ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПервых.Должность,
		|	РаботникиОрганизацийСрезПервых.Сотрудник,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.Период ЕСТЬ NULL 
		|			ТОГДА &ПустаяДата
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Период
		|	КОНЕЦ КАК ДатаУволнения,
		|	РаботникиОрганизацийСрезПервых.Период КАК ДатаПриема,
		|	РаботникиОрганизацийСрезПервых.Сотрудник.Код КАК ТабельныйНомер,
		|	РаботникиОрганизацийСрезПервых.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации1
		|ПОМЕСТИТЬ втСотрудники
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПервых(, ) КАК РаботникиОрганизацийСрезПервых
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
		|		ПО РаботникиОрганизацийСрезПервых.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|			И РаботникиОрганизацийСрезПервых.Организация = РаботникиОрганизацийСрезПоследних.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации ЕСТЬ NULL 
		|				ТОГДА РаботникиОрганизацийСрезПервых.ПодразделениеОрганизации В
		|						(ВЫБРАТЬ
		|							ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|						ИЗ
		|							Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|						ГДЕ
		|							ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
		|								(ВЫБРАТЬ
		|									ПодразделенияОрганизаций.Ссылка
		|								ИЗ
		|									Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|								ГДЕ
		|									ПодразделенияОрганизаций.Наименование ПОДОБНО ""%комм%"")
		|						СГРУППИРОВАТЬ ПО
		|												ПодразделенияОрганизаций.Ссылка)
		|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В
		|					(ВЫБРАТЬ
		|						ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|					ИЗ
		|						Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|					ГДЕ
		|						ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
		|							(ВЫБРАТЬ
		|								ПодразделенияОрганизаций.Ссылка
		|							ИЗ
		|								Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|							ГДЕ
		|								ПодразделенияОрганизаций.Наименование ПОДОБНО ""%комм%"")
		|					СГРУППИРОВАТЬ ПО
		|										ПодразделенияОрганизаций.Ссылка)
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	ТабельныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втСотрудники.ПодразделениеОрганизации,
		|	втСотрудники.ПодразделениеОрганизации1,
		|	втСотрудники.Должность,
		|	втСотрудники.Сотрудник,
		|	втСотрудники.ДатаУволнения,
		|	втСотрудники.ДатаПриема,
		|	втСотрудники.ТабельныйНомер,
		|	втСотрудники.Физлицо КАК Физлицо,
		|	НСИ_ТорговыеПредставители.Ссылка КАК СотрудникПродажСсылка,
		|	НСИ_ТорговыеПредставители.ДатаПриемаНаРаботу,
		|	НСИ_ТорговыеПредставители.ДатаУвольнения,
		|	ПРЕДСТАВЛЕНИЕ(втСотрудники.Физлицо) КАК ФИО
		|ИЗ
		|	втСотрудники КАК втСотрудники
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.НСИ_ТорговыеПредставители КАК НСИ_ТорговыеПредставители
		|		ПО втСотрудники.Физлицо = НСИ_ТорговыеПредставители.Физлицо
		|			И втСотрудники.ТабельныйНомер = НСИ_ТорговыеПредставители.ТабельныйНомер
		|			И втСотрудники.ДатаПриема = НСИ_ТорговыеПредставители.ДатаПриемаНаРаботу
		|ГДЕ
		|	НЕ втСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)";

	Запрос.УстановитьПараметр("ПустаяДата",'00010101');	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СотрудникПродажСсылка) И ВыборкаДетальныеЗаписи.ДатаУволнения = '00010101' Тогда
			тОбъект = Справочники.НСИ_ТорговыеПредставители.СоздатьЭлемент();	
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СотрудникПродажСсылка) Тогда
			тОбъект = ВыборкаДетальныеЗаписи.СотрудникПродажСсылка.ПолучитьОбъект();	
		Иначе
			Продолжить;
		КонецЕсли; 
		
		тОбъект.Наименование = ВыборкаДетальныеЗаписи.ФИО;
		тОбъект.Должность = ВыборкаДетальныеЗаписи.Должность;
		тОбъект.ТабельныйНомер = ВыборкаДетальныеЗаписи.ТабельныйНомер;
		тОбъект.ДатаПриемаНаРаботу = ВыборкаДетальныеЗаписи.ДатаПриема;
		тОбъект.ДатаУвольнения = ВыборкаДетальныеЗаписи.ДатаУволнения;
		тОбъект.Физлицо = ВыборкаДетальныеЗаписи.Физлицо;
		
		Попытка
			
			тСсылка = ВыборкаДетальныеЗаписи.СотрудникПродажСсылка;
			
			//Записываем если объект модифицирован
			Если тОбъект.ЭтоНовый()
				ИЛИ НЕ тСсылка.Наименование = ВыборкаДетальныеЗаписи.ФИО
				ИЛИ НЕ тСсылка.ТабельныйНомер = ВыборкаДетальныеЗаписи.ТабельныйНомер
				ИЛИ НЕ тСсылка.ДатаПриемаНаРаботу = ВыборкаДетальныеЗаписи.ДатаПриема
				ИЛИ НЕ тСсылка.ДатаУвольнения = ВыборкаДетальныеЗаписи.ДатаУволнения
				ИЛИ НЕ тСсылка.Должность = ВыборкаДетальныеЗаписи.Должность
				ИЛИ НЕ тСсылка.Физлицо = ВыборкаДетальныеЗаписи.Физлицо
				Тогда
				
				тОбъект.Записать();	
			
			КонецЕсли; 
				
		Исключение
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры 
//03.02.2015 Островерхий}

Процедура ПРГРассылкаОтчетовДЗПоМенеджерам() Экспорт
	
	//{09.11.2015 Островерхий заявка №б/н, исключить рассылку для всех баз кроме рабочей 
	Если  Нрег(СокрЛП(Константы.ПРГ_СтрокаПодключения.Получить())) <> Нрег(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;  
	//09.11.2015 Островерхий} 
	
	//{20.03.2015 Островерхий заявка №37263 
	тОбработка = Обработки.ПРГРассылкаОтчетаДЗПоМенеджерам.Создать();
	тОбработка.СформироватьИОтправитьПисьма(ТекущаяДата());
	//20.03.2015 Островерхий} 
	
КонецПроцедуры

Процедура ПРГВыгрузкаВКубыOLAPv2(РежимВыгрузки=0,ИмяОбъекта=Неопределено,МногопоточнаяВыгрузка=Ложь) Экспорт
	
	//{09.11.2015 Островерхий заявка №б/н, исключить рассылку для всех баз кроме рабочей 
	Если  Нрег(СокрЛП(Константы.ПРГ_СтрокаПодключения.Получить())) <> Нрег(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;  
	//09.11.2015 Островерхий} 
	
	тОбработчик = Обработки.ПРГВыгрузкаВКубыOLAPv2.Создать();
	
	//{05.08.2015 Островерхий заявка №б/н
	//НачалоПериода определим в обработке посредством SQL запроса к corep3
	//НачалоПериода = '20150601'; 
	//тОбработчик.Выгрузить(РежимВыгрузки,ИмяОбъекта,НачалоПериода);
	//{11.11.2015 Островерхий заявка №б/н 
	//тОбработчик.Выгрузить(РежимВыгрузки,ИмяОбъекта); 
	тОбработчик.Выгрузить(РежимВыгрузки,ИмяОбъекта,,,,МногопоточнаяВыгрузка);
	//11.11.2015 Островерхий} 
	
	//05.08.2015 Островерхий} 
	
КонецПроцедуры
//BLik 40649 180615 н
Функция ПолучитьСписокПодр(списокПодразделения,Подр)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка = &Подр
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
		
	Запрос.УстановитьПараметр("Подр",Подр);	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 списокПодразделения.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
    возврат списокПодразделения;
КонецФункции
Функция ПолучитьСписокАдресатов(СпсАдресатов,Подр)
	списокПодразделения = новый СписокЗначений;
	списокПодразделения = ПолучитьСписокПодр(списокПодразделения,Подр);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_СписокРассылкиОтчетов.ФизЛицо,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК Представление
		|ИЗ
		|	РегистрСведений.ПРГ_СписокРассылкиОтчетов КАК ПРГ_СписокРассылкиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ПРГ_СписокРассылкиОтчетов.ФизЛицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ПРГ_СписокРассылкиОтчетов.УведомлениеОЗавершенииИспытательногоСрока
		|	И ПРГ_СписокРассылкиОтчетов.ПодразделенияОрганизаций В ИЕРАРХИИ(&СписПодр)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПРГ_СписокРассылкиОтчетов.ФизЛицо,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200))
		|ИЗ
		|	РегистрСведений.ПРГ_СписокРассылкиОтчетов КАК ПРГ_СписокРассылкиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ПРГ_СписокРассылкиОтчетов.ФизЛицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ПРГ_СписокРассылкиОтчетов.УведомлениеОЗавершенииИспытательногоСрока
		|	И ПРГ_СписокРассылкиОтчетов.ПодразделенияОрганизаций = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("СписПодр",Подр);	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭлементСписка = СпсАдресатов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Представление); 
		Если ЭлементСписка = Неопределено Тогда 
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЕсли;
		
	КонецЦикла;
	Возврат СпсАдресатов;
КонецФункции
//Blik 020915 43450 н 
Процедура РассылкаУведомленийОЗавершенииИспытательногоСрока() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =  получитьТекстЗапроса("УведомлениеОЗавершенииИспытательногоСрока");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		запросПоСотрам=сформироватьЗапросПоСотрамИспСРок(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		ВыборкаПоСОтрам = запросПоСотрам.Выбрать();
		Пока ВыборкаПоСОтрам.Следующий() Цикл
			ПроверкаУжеОтправлено = ПроверитьНаОтправленные(ВыборкаПоСОтрам.Сотр);
			//1 - принят
			//2 - середина исп срока
			//3 - за 2 нед до оконч исп срока
			Если ВыборкаПоСОтрам.ЧтоРассылать = 1 Тогда
				Если ПроверкаУжеОтправлено=0 Тогда
					ТемаПисьма="Уведомление о приеме нового сотрудника";
					ТекстПисьма = "Уважаемый руководитель, добрый день!
					|Информируем Вас о том, что новый сотрудник Вашего департамента "+СокрЛП(СТрока(ВыборкаПоСОтрам.Сотр))+", "+СокрЛП(СТрока(ВыборкаПоСОтрам.должн))+", "+Символы.ПС+
					СокрЛП(СТрока(ВыборкаПоСОтрам.Подр))+" принят на работу с "+СокрЛП(СТрока(Формат(ВыборкаПоСОтрам.ДатаПриема,"ДЛФ=Д")))+" г."+Символы.ПС+
					"Сотруднику установлен испытательный срок "+ СокрЛП(СТрока(ВыборкаПоСОтрам.ИспытательныйСрок))+" месяца."+ Символы.ПС+
					"Просим Вас в течении 5 рабочих дней составить план задач на испытательный срок (бланк во вложении) и выслать Вашему HR - партнеру.
					|В течении 3 рабочих дней HR - партнер возвращает Вам подписанный бланк, после чего задачи необходимо довести до сотрудника
					| и выслать HR - партнеру завизированный бланк.
					|
					|С наилучшими пожеланиями,
					|Департамент управления персоналом.";
					ТабДок=Новый ТабличныйДокумент;
					макет=ПолучитьОбщийМакет("ОстаткиОтпусков");
					ОбластьМакета=макет.ПолучитьОбласть("ИспСрок");
					ОбластьМакета.Параметры.Руководитель=ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоСОтрам.Руководитель);
					ОбластьМакета.Параметры.Сотрудник=ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоСОтрам.Сотр);
					ОбластьМакета.Параметры.Подразделение= СокрЛП(СТрока(ВыборкаПоСОтрам.Подр));
					ОбластьМакета.Параметры.Должность= СокрЛП(СТрока(ВыборкаПоСОтрам.должн));
					ОбластьМакета.Параметры.ДатаПриема= Формат(ВыборкаПоСОтрам.ДатаПриема,"ДЛФ=Д");
					ОбластьМакета.Параметры.ДатаЗавИ=Формат(ДобавитьМесяц(ВыборкаПоСОтрам.ДатаПриема,ВыборкаПоСОтрам.ИспытательныйСрок),"ДЛФ=Д");
					ОбластьМакета.Параметры.Дата=Формат(ТекущаяДата(),"ДЛФ=D");
					
					ТабДок.Вывести(ОбластьМакета);
					имяфайла=КаталогВременныхФайлов()+"ЗадачиНаИспытательныйСрок.xls";
					Табдок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
					ТабДок.Записать(имяфайла,ТипФайлаТабличногоДокумента.XLS);
					
					Попытка
					ПРГ_Регламентый.ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма,имяфайла);
					//запишим что  отправили
					НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочников.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.Объект.Установить(ВыборкаПоСОтрам.Сотр);
					НаборЗаписей.Отбор.Реквизит.Установить("ПоПриему");
					
					НоваяЗапись = НаборЗаписей.Добавить();
					
					НоваяЗапись.Объект = ВыборкаПоСОтрам.Сотр;
					НоваяЗапись.Реквизит = "ПоПриему";
					НоваяЗапись.Значение = "ОТПРАВЛЕНО";
					
					НаборЗаписей.Записать();
					Исключение конецПопытки;
				КонецЕсли;
			ИначеЕсли ВыборкаПоСОтрам.ЧтоРассылать = 2 Тогда
				Если ПроверкаУжеОтправлено=1 Тогда
					//Blik 210617 67049 н
					//ТемаПисьма="Уведомление о промежуточной аттестации сотрудника";
					ТемаПисьма="Уведомление о промежуточной оценке прохождения испытательного срока работника";
					//Blik 210617 67049 к
					ТекстПисьма = "Уважаемый руководитель, добрый день!
					|Просим Вас провести промежуточную оценку прохождения испытательного срока сотрудника "+СокрЛП(СТрока(ВыборкаПоСОтрам.Сотр))+", "+ Символы.ПС+
					СокрЛП(СТрока(ВыборкаПоСОтрам.должн))+", "+СокрЛП(СТрока(ВыборкаПоСОтрам.Подр))+". "+Символы.ПС+
					"План задач, поставленных сотруднику на испытательный срок, находится на диске Q в общей папке ""Испытательные сроки"" Q:\1-07 Центральный офис\1-07-01 Служба персонала\Испытательные сроки\ .
					|
					|С наилучшими пожеланиями,
					|Департамент управления персоналом.";
					Попытка
					ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма,НЕОПРЕДЕЛЕНО);
					//запишим что  отправили
					НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочников.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.Объект.Установить(ВыборкаПоСОтрам.Сотр);
					НаборЗаписей.Отбор.Реквизит.Установить("ПоловинаИспСРока");
					
					НоваяЗапись = НаборЗаписей.Добавить();
					
					НоваяЗапись.Объект = ВыборкаПоСОтрам.Сотр;
					НоваяЗапись.Реквизит = "ПоловинаИспСРока";
					НоваяЗапись.Значение = "ОТПРАВЛЕНО";
					
					НаборЗаписей.Записать();
					Исключение КонецПопытки;
				КонецЕсли;
			ИначеЕсли ВыборкаПоСОтрам.ЧтоРассылать = 3 Тогда
				Если ПроверкаУжеОтправлено=2 Тогда
					
					ТемаПисьма="Уведомление о завершении испытательного срока сотрудника";
					ТекстПисьма = "Уважаемый руководитель, добрый день!
					|Уведомляем Вас о том что у сотрудника - "+СокрЛП(СТрока(ВыборкаПоСОтрам.Сотр))+", "+СокрЛП(СТрока(ВыборкаПоСОтрам.должн))+", "+Символы.ПС+
					СокрЛП(СТрока(ВыборкаПоСОтрам.Подр))+" - заканчивается испытательный срок "+СокрЛП(СТрока(Формат(ДобавитьМесяц(ВыборкаПоСОтрам.ДатаПриема,ВыборкаПоСОтрам.ИспытательныйСрок),"ДЛФ=Д")))+"г."+Символы.ПС+
					"Просим Вас оценить выполнение задач, поставленных на испытательный срок, и принять решение о его прохождении." + Символы.ПС+
					"Свое решение просим сообщить HR - партнеру в течении 5 рабочих дней.
					|
					|С наилучшими пожеланиями,
					|Департамент управления персоналом.";
					Попытка
					ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма,НЕОПРЕДЕЛЕНО);
					//запишим что  отправили
					НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочников.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.Объект.Установить(ВыборкаПоСОтрам.Сотр);
					НаборЗаписей.Отбор.Реквизит.Установить("ЗавершениеИспСРока");
					
					НоваяЗапись = НаборЗаписей.Добавить();
					
					НоваяЗапись.Объект = ВыборкаПоСОтрам.Сотр;
					НоваяЗапись.Реквизит = "ЗавершениеИспСРока";
					НоваяЗапись.Значение = "ОТПРАВЛЕНО";
					
					НаборЗаписей.Записать();
					Исключение КонецПопытки;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры
Функция сформироватьЗапросПоСотрамИспСРок(Подр)
	//1 - принят
	//2 - середина исп срока
	//3 - за 2 нед до оконч исп срока
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотр,
		|	РаботникиОрганизаций.ПодразделениеОрганизации КАК Подр,
		|	РаботникиОрганизаций.Должность КАК должн,
		|	РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу КАК ДатаПриема,
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния,
		|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок,
		|	ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок) КАК ДатаОкончанияИспытательногоСрока,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок), ДЕНЬ, -14) КАК _14ДнейДоОкончИспытСрока,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель,
		|	КонтактнаяИнформация.Представление КАК ЭлРурк,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок), ДЕНЬ, -7) КАК _7ДнейДоОкончИспытСрока,
		|	ВЫБОР
		|		КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок = 3
		|			ТОГДА 45
		|		ИНАЧЕ 30
		|	КОНЕЦ КАК ПоловинаИсп,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -3), ДЕНЬ) И НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
		|			ТОГДА 1
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ, ВЫБОР
		|								КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок = 3
		|									ТОГДА 45
		|								ИНАЧЕ 30
		|							КОНЕЦ), ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
		|					ТОГДА 2
		|				ИНАЧЕ ВЫБОР
		|						КОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок), ДЕНЬ, -14), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
		|							ТОГДА 3
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ЧтоРассылать,
		|	ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ, ВЫБОР
		|			КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок = 3
		|				ТОГДА 45
		|			ИНАЧЕ 30
		|		КОНЕЦ) КАК ПоловинаИспДата
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|		ПО РаботникиОрганизаций.Регистратор = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
		|			И РаботникиОрганизаций.Сотрудник = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ПО РаботникиОрганизаций.ПодразделениеОрганизации = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = КонтактнаяИнформация.Объект)
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок <> 0
		|	И (КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок), ДЕНЬ, -14), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
		|			ИЛИ НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -3), ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
		|			ИЛИ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ, ВЫБОР
		|						КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок = 3
		|							ТОГДА 45
		|						ИНАЧЕ 30
		|					КОНЕЦ), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ))
		|	И РаботникиОрганизаций.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)";
		
	текДата = ТекущаяДата();
	Запрос.УстановитьПараметр("ТекДата",текДата);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",Подр);
	Результат = Запрос.Выполнить();
    Возврат Результат;
КонецФункции
Функция ПроверитьНаОтправленные(Сотр)
	  Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_ДополнительныеРеквизитыСправочников.Реквизит
		|ИЗ
		|	РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК ПРГ_ДополнительныеРеквизитыСправочников
		|ГДЕ
		|	ПРГ_ДополнительныеРеквизитыСправочников.Объект = &Сотр
		|	И ПРГ_ДополнительныеРеквизитыСправочников.Значение = ""ОТПРАВЛЕНО""";
		
	текДата = ТекущаяДата();
	Запрос.УстановитьПараметр("Сотр",Сотр);
	Результат = Запрос.Выполнить().Выбрать();
	чтоОтправлено=0;
	Пока Результат.Следующий() Цикл
		 чтоОтправлено = чтоОтправлено+1;
	КонецЦикла;
	Возврат чтоОтправлено; 
КонецФункции
//Blik 020915 43450 к
//BLik 40649 180615 к 
//Blik 280815 43325 н
Функция ДополнитьТабОтпусковСостоянием(тз)
	тз.Колонки.Добавить("Состояние");
	//Blik 250816 55965 н
	тз.Колонки.Добавить("Подразделение"); 
	тз.Колонки.Добавить("Должность"); 
	//Blik 250816 55965 к
	списокСОтров = Новый СписокЗначений;   
	списокСОтров.ЗагрузитьЗначения(тз.выгрузитьКолонку("Сотрудник"));
	
	ДатаСреза=ТекущаяДата();
	//Blik 250816 55965 в запрос добавлена выборка подразделения и должности
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	//Blik 260617 67267 н
	//|	СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник КАК СОтр,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК СОтр,
	//Blik 260617 67267 к
	|	СостояниеРаботниковОрганизацийСрезПоследних.Состояние,
	|	СостояниеРаботниковОрганизацийСрезПоследних.СостояниеЗавершения,
	|	СостояниеРаботниковОрганизацийСрезПоследних.Период,
	|	СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения,
	 //Blik 260617 67267 н
	//|	ВЫБОР
	//|		КОГДА СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА СостояниеРаботниковОрганизацийСрезПоследних.Состояние
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения < &ДатаСреза
	//|					ТОГДА СостояниеРаботниковОрганизацийСрезПоследних.СостояниеЗавершения
	//|				ИНАЧЕ СостояниеРаботниковОрганизацийСрезПоследних.Состояние
	//|			КОНЕЦ
	//|	КОНЕЦ КАК СостояниеСотрудника,
	|	ЕстьNull(ВЫБОР
	|		КОГДА СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СостояниеРаботниковОрганизацийСрезПоследних.Состояние
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения < &ДатаСреза
	|					ТОГДА СостояниеРаботниковОрганизацийСрезПоследних.СостояниеЗавершения
	|				ИНАЧЕ СостояниеРаботниковОрганизацийСрезПоследних.Состояние
	|			КОНЕЦ
	|	КОНЕЦ,Значение(Перечисление.СостоянияРаботникаОрганизации.Работает)) КАК СостояниеСотрудника,
	//Blik 260617 67267 к
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подразделение,
	|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность
	//Blik 260617 67267 н
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза, ) КАК РаботникиОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&ДатаСреза, ) КАК СостояниеРаботниковОрганизацийСрезПоследних
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник
	//|ИЗ
	//|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&ДатаСреза, ) КАК СостояниеРаботниковОрганизацийСрезПоследних
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза, ) КАК РаботникиОрганизацийСрезПоследних
	//|		ПО СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	//|	СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник В(&СписСотров)";
	|	РаботникиОрганизацийСрезПоследних.Сотрудник В(&СписСотров)";
	//Blik 260617 67267 к

	Запрос.УстановитьПараметр("СписСотров", списокСОтров);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	Результат = Запрос.Выполнить().Выбрать();	
	
	Пока Результат.Следующий() Цикл
		НайденнаяСтрока = тз.Найти(Результат.СОтр, "Сотрудник");
		Если не НайденнаяСтрока = Неопределено Тогда
				 НайденнаяСтрока.Состояние = Результат.СостояниеСотрудника;
				 //Blik 250816 55965 н
				 НайденнаяСтрока.Подразделение = Результат.Подразделение;
				 НайденнаяСтрока.Должность = Результат.Должность;
				 //Blik 250816 55965 к
		КонецЕсли;		
	КонецЦикла;
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние",НЕОПРЕДЕЛЕНО); 
	МассивСтрок = ТЗ.НайтиСтроки(Отбор);
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		ЭлементМассива.Состояние = Перечисления.СостоянияРаботникаОрганизации.Работает;
	КонецЦикла;
	//Для каждого стр из тз Цикл
	//	Если стр.Состояние="" Тогда
	//		 стр.Состояние=Результат.СостояниеСотрудника;
	//	КонецЕсли;
	//КонецЦикла;
	
 	Возврат тз;
КонецФункции
//Blik 280815 43325 к

// <- Шевченков №47237 20160317
Процедура ФормированиеУведомленийПоПоступлениям(НачДата, ФизЛицо = Неопределено) Экспорт
	
	ТаблицаУведомлений = ПодготовкаТаблицДляУведомленийПоПоступлениям(НачДата);
	СписокПолучателей  = ПодготовитьТаблицуСМыломУведомляемых();
	ОтправкаУведомленийПоПоступлениям(ТаблицаУведомлений, СписокПолучателей, ФизЛицо);
	
КонецПроцедуры

Функция ПодготовитьТаблицуСМыломУведомляемых()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК Пользователь,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра,
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо КАК ФизЛицо,
	|	КонтактнаяИнформация.Представление КАК Мыло
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &УведомляемыеПоПоступлениям
	|	И НЕ ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо В
	|				(ВЫБРАТЬ
	|					ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Физлицо
	|				ИЗ
	|					РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы КАК ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы
	|				ГДЕ
	|					ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Физлицо В
	|						(ВЫБРАТЬ
	|							ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо КАК Менеджер
	|						ИЗ
	|							Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|						ГДЕ
	|							ПРГ_СлужебныйТаблицаПараметров.Ссылка = &УведомляемыеПоПоступлениям)
	|					И ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1))";
	//"ВЫБРАТЬ
	//|	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК Пользователь,
	//|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра,
	//|	ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо КАК ФизЛицо,
	//|	КонтактнаяИнформация.Представление КАК Мыло
	//|ИЗ
	//|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|		ПО ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо = КонтактнаяИнформация.Объект
	//|ГДЕ
	//|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &Ссылка
	//|	И ПРГ_СлужебныйТаблицаПараметров.Параметр ССЫЛКА Справочник.Пользователи
	//|	И КонтактнаяИнформация.Вид = &Вид";
	//Запрос.УстановитьПараметр("УведомляемыеПоПоступлениям", Справочники.ПРГ_Служебный.НайтиПоНаименованию("УведомляемыеПоПоступлениям"));
	Запрос.УстановитьПараметр("УведомляемыеПоПоступлениям", Справочники.ПРГ_Служебный.НайтиПоКоду("000000049"));
	//Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000026"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПодготовкаТаблицДляУведомленийПоПоступлениям(НачДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК Пользователь,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра,
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо КАК ФизЛицо
	|ПОМЕСТИТЬ втПользователи
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &Ссылка
	|	И ПРГ_СлужебныйТаблицаПараметров.Параметр ССЫЛКА Справочник.Пользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРГ_ОтправленыеДокументы.Документ КАК ДокументПоступления
	|ПОМЕСТИТЬ втОтправленныеУведомления
	|ИЗ
	|	РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|ГДЕ
	|	ПРГ_ОтправленыеДокументы.Документ ССЫЛКА Документ.ПоступлениеТоваровУслуг
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Менеджер КАК Менеджер,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК ДнейОтсрочки,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.СуммаПоДоговору КАК СуммаПоДоговору,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ПроцентПредоплаты КАК ПроцентПредоплаты,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.Номер,
	|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ВхДата,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК ВхНомер,
	|	ПоступлениеТоваровУслуг.СуммаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ДОБАВИТЬКДАТЕ(ПоступлениеТоваровУслуг.Дата, ДЕНЬ, ПоступлениеТоваровУслуг.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности) КАК ДатаОплаты
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Менеджер В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Врем.ФизЛицо
	|			ИЗ
	|				втПользователи КАК Врем)
	|	И ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.Дата > &Дата
	|	И ПоступлениеТоваровУслуг.ОтражатьВУправленческомУчете
	|	И ПоступлениеТоваровУслуг.ОтражатьВБухгалтерскомУчете
	|	И НЕ ПоступлениеТоваровУслуг.Ссылка В
	|				(ВЫБРАТЬ
	|					Врем1.ДокументПоступления
	|				ИЗ
	|					втОтправленныеУведомления КАК Врем1)";
	Запрос.УстановитьПараметр("Дата", НачДата);
	Запрос.УстановитьПараметр("Ссылка", Справочники.ПРГ_Служебный.НайтиПоКоду("000000049"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ОтправкаУведомленийПоПоступлениям(ТаблицаУведомлений, СписокПолучателей, ФизЛицо = Неопределено)

	ТипВыборки           = "КадровыеПриказы";
	ТекТемаПисьма        = "Уведомление о документах поступления";
	ТекСписокПолучателей = СписокПолучателей.ВыгрузитьКолонку("Мыло");
	ПредварительноеМыло  = ?(ЗначениеЗаполнено(ФизЛицо) И ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица"), ПолучитьСтрокуМылаФизЛица(ФизЛицо,ТипВыборки), Неопределено);
	
	Для Каждого ТекСтрока Из ТаблицаУведомлений Цикл		
		
		ТекТекстПисьма = "Поступление товаров №" + Строка(ТекСтрока.Номер) + " от контрагента " + Строка(ТекСтрока.Контрагент) + ", дата поступления " + Формат(ТекСтрока.Дата, "ДЛФ=Д") + " г., на сумму " + Строка(ТекСтрока.СуммаДокумента)
			+ " " + Строка(ТекСтрока.ВалютаДокумента) + ", по документу №" + Строка(ТекСтрока.ВхНомер) + " от " + Формат(ТекСтрока.ВхДата, "ДЛФ=Д") + " г." + Символы.ПС + "Плановая дата платежа: " + 
			?(НачалоДня(ТекСтрока.Дата) = НачалоДня(ТекСтрока.ДатаОплаты), "Согласно договора.", Формат(ТекСтрока.ДатаОплаты, "ДЛФ=Д")) + Символы.ПС + "Менеджер по договору:  " + Строка(ТекСтрока.Менеджер);
		//Сообщить(ТекТекстПисьма);	
		Получатель = ?(ЗначениеЗаполнено(ПредварительноеМыло), ПредварительноеМыло, ТекСписокПолучателей); //ПолучитьСтрокуМылаФизЛица(ФизЛицо,ТекСтрока));	
		                		
		Проверка = Ложь;
		
		ПутьКТаблице = СформироватьПутьИВложение(ТекСтрока.Ссылка);
		
		ОправитьФайл(ТекТемаПисьма, Получатель, ТекТекстПисьма, ПутьКТаблице, Проверка);
		
		Если Проверка тогда
			ЗаписатьДокументПоОтправке(ТекСтрока.Ссылка);
		Конецесли;
			
	КонецЦикла;
	
КонецФункции

Функция СформироватьПутьИВложение(ТекДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугТовары.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", ТекДокумент);
	Результат = Запрос.Выполнить();
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных  = Новый ОписаниеИсточникаДанных(Результат);
	ТД = Новый ТабличныйДокумент;
	Построитель.Вывести(ТД);
	
	
	имяфайла=КаталогВременныхФайлов()+ Строка(ТекДокумент.Номер) + ".xls";
	ТД.Записать(имяфайла,ТипФайлаТабличногоДокумента.XLS);
	
	Возврат имяфайла;
	
КонецФункции
// ->

//Blik 190516 52612 н 
Функция ВыборкаПодразделенийРассылки()
	возврат  
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК ПодразделенияОрганизаций,
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК ФизЛицо,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра КАК Представление
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ПодразделенияОрганизаций.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Наименование = ""Ком служба""),
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|	И ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""РассылкаИспСрокКС""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодразделенияОрганизаций.Ссылка
	|ИТОГИ ПО
	|	ПодразделенияОрганизаций";
	
КонецФункции

Процедура РассылкаУведомленийОЗавершенииИспытательногоСрокаКС() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =  ВыборкаПодразделенийРассылки();
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПодразделенияОрганизаций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделенияОрганизаций.Следующий() Цикл
		запросПоСотрам=сформироватьЗапросПоСотрамИспСРокКС(ВыборкаПодразделенияОрганизаций.ПодразделенияОрганизаций);	
		ВыборкаДетальныеЗаписи = ВыборкаПодразделенияОрганизаций.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
		СпсАдресатов.Добавить("IKalmatskaya@progressfood.ru");//для проверки я
		ВыборкаПоСОтрам = запросПоСотрам.Выбрать();
		Пока ВыборкаПоСОтрам.Следующий() Цикл
			ПроверкаУжеОтправлено = ПроверитьНаОтправленные(ВыборкаПоСОтрам.Сотр);
			//1 - принят
			//2 - середина исп срока
			//3 - за 2 нед до оконч исп срока
			Если ВыборкаПоСОтрам.ЧтоРассылать = 1 Тогда
				Если ПроверкаУжеОтправлено=0 Тогда
					ТемаПисьма="Уведомление о приеме нового сотрудника";
					ТекстПисьма = "Уважаемый руководитель, добрый день!
					|Информируем Вас о том, что новый сотрудник Вашего департамента "+СокрЛП(СТрока(ВыборкаПоСОтрам.Сотр))+", "+СокрЛП(СТрока(ВыборкаПоСОтрам.должн))+", "+Символы.ПС+
					СокрЛП(СТрока(ВыборкаПоСОтрам.Подр))+" принят на работу с "+СокрЛП(СТрока(Формат(ВыборкаПоСОтрам.ДатаПриема,"ДЛФ=Д")))+" г."+Символы.ПС+
					"Сотруднику установлен испытательный срок 3 месяца."+ Символы.ПС+
					"Просим Вас в течении 5 рабочих дней составить план задач на испытательный срок (бланк во вложении) и выслать Вашему HR - партнеру.
					|В течении 3 рабочих дней HR - партнер возвращает Вам подписанный бланк, после чего задачи необходимо довести до сотрудника
					| и выслать HR - партнеру завизированный бланк.
					|
					|С наилучшими пожеланиями,
					|Департамент управления персоналом.";
					
					ТабДок=Новый ТабличныйДокумент;
					макет=ПолучитьОбщийМакет("ОстаткиОтпусков");
					ОбластьМакета=макет.ПолучитьОбласть("ИспСрокКС");
					//ОбластьМакета.Параметры.Руководитель=ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоСОтрам.Руководитель);
					ОбластьМакета.Параметры.Сотрудник=ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоСОтрам.Сотр);
					//ОбластьМакета.Параметры.Подразделение= СокрЛП(СТрока(ВыборкаПоСОтрам.Подр));
					//ОбластьМакета.Параметры.Должность= СокрЛП(СТрока(ВыборкаПоСОтрам.должн));
					ОбластьМакета.Параметры.ПодрДлжн= СокрЛП(СТрока(ВыборкаПоСОтрам.Подр)) +" / "+СокрЛП(СТрока(ВыборкаПоСОтрам.должн));
					ОбластьМакета.Параметры.ДатаПриема= Формат(ВыборкаПоСОтрам.ДатаПриема,"ДЛФ=Д");
					ОбластьМакета.Параметры.ДатаЗавИ=Формат(ДобавитьМесяц(ВыборкаПоСОтрам.ДатаПриема,ВыборкаПоСОтрам.ИспытательныйСрок),"ДЛФ=Д");
					ОбластьМакета.Параметры.Дата=Формат(ТекущаяДата(),"ДЛФ=D");
					
					ТабДок.Вывести(ОбластьМакета);
					имяфайла=КаталогВременныхФайлов()+"ЗадачиНаИспытательныйСрок.xls";
					Табдок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
					ТабДок.Записать(имяфайла,ТипФайлаТабличногоДокумента.XLS);
					
					Попытка
					ПРГ_Регламентый.ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма,имяфайла);
					//запишим что  отправили
					НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочников.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.Объект.Установить(ВыборкаПоСОтрам.Сотр);
					НаборЗаписей.Отбор.Реквизит.Установить("ПоПриему");
					
					НоваяЗапись = НаборЗаписей.Добавить();
					
					НоваяЗапись.Объект = ВыборкаПоСОтрам.Сотр;
					НоваяЗапись.Реквизит = "ПоПриему";
					НоваяЗапись.Значение = "ОТПРАВЛЕНО";
					
					НаборЗаписей.Записать();
					Исключение конецПопытки;
				КонецЕсли;
			ИначеЕсли ВыборкаПоСОтрам.ЧтоРассылать = 2 Тогда
				Если ПроверкаУжеОтправлено=1 Тогда
					ТемаПисьма="Уведомление о промежуточной аттестации сотрудника";
					ТекстПисьма = "Уважаемый руководитель, добрый день!
					|Просим Вас провести промежуточную оценку прохождения испытательного срока сотрудника "+СокрЛП(СТрока(ВыборкаПоСОтрам.Сотр))+", "+ Символы.ПС+
					СокрЛП(СТрока(ВыборкаПоСОтрам.должн))+", "+СокрЛП(СТрока(ВыборкаПоСОтрам.Подр))+". "+Символы.ПС+
					"План задач, поставленных сотруднику на испытательный срок, находится на диске Q в общей папке.
					|
					|С наилучшими пожеланиями,
					|Департамент управления персоналом.";
					Попытка
					ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма,НЕОПРЕДЕЛЕНО);
					//запишим что  отправили
					НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочников.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.Объект.Установить(ВыборкаПоСОтрам.Сотр);
					НаборЗаписей.Отбор.Реквизит.Установить("ПоловинаИспСРока");
					
					НоваяЗапись = НаборЗаписей.Добавить();
					
					НоваяЗапись.Объект = ВыборкаПоСОтрам.Сотр;
					НоваяЗапись.Реквизит = "ПоловинаИспСРока";
					НоваяЗапись.Значение = "ОТПРАВЛЕНО";
					
					НаборЗаписей.Записать();
					Исключение КонецПопытки;
				КонецЕсли;
			ИначеЕсли ВыборкаПоСОтрам.ЧтоРассылать = 3 Тогда
				Если ПроверкаУжеОтправлено=2 Тогда
					
					ТемаПисьма="Уведомление о завершении испытательного срока сотрудника";
					ТекстПисьма = "Уважаемый руководитель, добрый день!
					|Уведомляем Вас о том что у сотрудника - "+СокрЛП(СТрока(ВыборкаПоСОтрам.Сотр))+", "+СокрЛП(СТрока(ВыборкаПоСОтрам.должн))+", "+Символы.ПС+
					СокрЛП(СТрока(ВыборкаПоСОтрам.Подр))+" - заканчивается испытательный срок "+СокрЛП(СТрока(Формат(ДобавитьМесяц(ВыборкаПоСОтрам.ДатаПриема,3),"ДЛФ=Д")))+"г."+Символы.ПС+
					"Просим Вас оценить выполнение задач и принять решение о соответствии сотрудника." + Символы.ПС+
					"Решение просим сообщить HR - партнеру в течении 5 рабочих дней.
					|
					|С наилучшими пожеланиями,
					|Департамент управления персоналом.";
					Попытка
					ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма,НЕОПРЕДЕЛЕНО);
					//запишим что  отправили
					НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочников.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.Объект.Установить(ВыборкаПоСОтрам.Сотр);
					НаборЗаписей.Отбор.Реквизит.Установить("ЗавершениеИспСРока");
					
					НоваяЗапись = НаборЗаписей.Добавить();
					
					НоваяЗапись.Объект = ВыборкаПоСОтрам.Сотр;
					НоваяЗапись.Реквизит = "ЗавершениеИспСРока";
					НоваяЗапись.Значение = "ОТПРАВЛЕНО";
					
					НаборЗаписей.Записать();
					Исключение КонецПопытки;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры
Функция сформироватьЗапросПоСотрамИспСРокКС(Подр)
	//1 - принят
	//2 - середина исп срока
	//3 - за 2 нед до оконч исп срока
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник КАК Сотр,
	|	РаботникиОрганизаций.ПодразделениеОрганизации КАК Подр,
	|	РаботникиОрганизаций.Должность КАК должн,
	|	РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу КАК ДатаПриема,
	|	РаботникиОрганизаций.Период,
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок,
	|	ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, 3) КАК ДатаОкончанияИспытательногоСрока,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, 3), ДЕНЬ, -14) КАК _14ДнейДоОкончИспытСрока,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель,
	|	КонтактнаяИнформация.Представление КАК ЭлРурк,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, 3), ДЕНЬ, -7) КАК _7ДнейДоОкончИспытСрока,
	|	30 КАК ПоловинаИсп,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -3), ДЕНЬ) И НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ, 30), ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, 3), ДЕНЬ, -14), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	|							ТОГДА 3
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧтоРассылать,
	|	ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ, 30) КАК ПоловинаИспДата,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ, 30), ДЕНЬ) КАК Поле1
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|		ПО РаботникиОрганизаций.Регистратор = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
	|			И РаботникиОрганизаций.Сотрудник = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|		ПО РаботникиОрганизаций.ПодразделениеОрганизации = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = КонтактнаяИнформация.Объект)
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РаботникиОрганизаций.ПодразделениеОрганизации = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Наименование = ""Ком служба"")
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|	И РаботникиОрганизаций.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)
	|	И (ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -3) И КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	|			ИЛИ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, МЕСЯЦ, 3), ДЕНЬ, -14), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	|			ИЛИ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Сотрудник.ДатаПриемаНаРаботу, ДЕНЬ, 30), ДЕНЬ) = КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ))
	|	И РаботникиОрганизаций.Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЗначенияСвойствОбъектов.Значение = ИСТИНА";
	//Blik 111116 58904 в запрос добавлена проверка на увольнение
	
	текДата = ТекущаяДата();
	Запрос.УстановитьПараметр("ТекДата",текДата);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",Подр);
	Результат = Запрос.Выполнить();
	Возврат Результат;
КонецФункции
//Blik 190516 52612 к 

//Blik 160916 56829 н
Функция ПолучитьСписокПолучателейОтстр(Спрполучателей)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК Получатель,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра КАК ЭлАдрес
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Спрполучателей);
	
	Результат = Запрос.Выполнить().Выбрать();
	СписокПолучаталей = новый СписокЗначений;
	Пока Результат.Следующий() Цикл
		 СписокПолучаталей.Добавить(СокрЛП(Строка(Результат.ЭлАдрес)));
	 КонецЦикла;
	 
    Возврат СписокПолучаталей;
	
КонецФункции

Функция ПОлучитьДанныеПоСотруднику(ДокБЛ,вр_отстранение)
	ТекДата = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеПоБольничномуЛисту.Сотрудник,
	|	НачислениеПоБольничномуЛисту.ДатаНачала КАК ДатаНБЛ,
	|	НачислениеПоБольничномуЛисту.ДатаОкончания КАК ДатаКБЛ,
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ДатаНОтстр,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец КАК ДатаКОтстр,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подразделение,
	|	РаботникиОрганизацийСрезПоследних.Должность
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ПО НачислениеПоБольничномуЛисту.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
	|			И (ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета)
	|			И (НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ)
	|				ИЛИ КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ)
	|				ИЛИ НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаНачала, ДЕНЬ)
	|				ИЛИ КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ)
	|				ИЛИ НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаНачала, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДЕНЬ) И КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ)
	|				ИЛИ КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДЕНЬ) И КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО НачислениеПоБольничномуЛисту.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	НачислениеПоБольничномуЛисту.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ДокБЛ);
	Запрос.УстановитьПараметр("ВидРасчета",вр_отстранение);
    Запрос.УстановитьПараметр("ДатаСреза",ТекДата);

	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		структураСотра = новый Структура;
		структураСотра.Вставить("Сотр", Результат.Сотрудник);
		структураСотра.Вставить("Подр", Результат.Подразделение);
		структураСотра.Вставить("долж", Результат.Должность);
		структураСотра.Вставить("ДатаНБЛ", Результат.ДатаНБЛ); 
		структураСотра.Вставить("ДатаКБЛ", Результат.ДатаКБЛ);
		структураСотра.Вставить("ДатаНОт", Результат.ДатаНОтстр);
		структураСотра.Вставить("ДатаКОт", Результат.ДатаКОтстр);
		Возврат структураСотра;	
	Иначе	
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;
	 
КонецФункции

Процедура ФормированиеУведомленийПоОтстранениям()
	
	ЭлСпрСлужебный = Справочники.ПРГ_Служебный.НайтиПоНаименованию("ОтстранениеОтРаботы");
	ВР_Отстранение = ЭлСпрСлужебный.Объект.Ссылка;

	// список получателей
	СпсАдресатов = ПолучитьСписокПолучателейОтстр(ЭлСпрСлужебный);
//подготовить данные для рассылки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаОтправку.Объект,
	|	НаОтправку.Значение,
	|	НаОтправку.Реквизит КАК НаОтправку
	|ПОМЕСТИТЬ ВТ_Котправке
	|ИЗ
	|	РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК НаОтправку
	|ГДЕ
	|	(ВЫРАЗИТЬ(НаОтправку.Значение КАК СТРОКА(14))) = ""ПоОтстранениям""
	|	И НаОтправку.Реквизит = ""КОтправке""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отправлено.Объект,
	|	Отправлено.Реквизит КАК Отправлено,
	|	Отправлено.Значение
	|ПОМЕСТИТЬ ВТ_Отправлено
	|ИЗ
	|	РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК Отправлено
	|ГДЕ
	|	(ВЫРАЗИТЬ(Отправлено.Значение КАК СТРОКА(14))) = ""ПоОтстранениям""
	|	И НЕ Отправлено.Реквизит = ""КОтправке""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Котправке.Объект КАК БЛ,
	|	ВТ_Котправке.Значение,
	|	ВТ_Котправке.НаОтправку,
	|	ЕСТЬNULL(ВТ_Отправлено.Отправлено, """") КАК Отправлено,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Отправлено.Отправлено, """") = """"
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧТоДелать
	|ИЗ
	|	ВТ_Котправке КАК ВТ_Котправке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отправлено КАК ВТ_Отправлено
	|		ПО ВТ_Котправке.Объект = ВТ_Отправлено.Объект";
	
	
	Результат = Запрос.Выполнить();

	ВыборкаНаОтправку = Результат.Выбрать();
	Пока ВыборкаНаОтправку.Следующий() Цикл
		Если ВыборкаНаОтправку.ЧТоДелать = 0 Тогда
			ДокБЛ = ВыборкаНаОтправку.БЛ;
			СтруктураДанныхПоСотруднику = ПОлучитьДанныеПоСотруднику(ДокБЛ,ВР_Отстранение);
			Если СтруктураДанныхПоСотруднику = Неопределено тогда
				Продолжить;
			Иначе
				ТемаПисьма="Уведомление о пересечении периодов больничного листа и отстранения от работы";
					ТекстПисьма = "Добрый день!
					|Информируем Вас о том, что у сотрудника "+СокрЛП(СТрока(СтруктураДанныхПоСотруднику.Сотр))+", "+СокрЛП(СТрока(СтруктураДанныхПоСотруднику.долж))+", "+Символы.ПС +
					СокрЛП(СТрока(СтруктураДанныхПоСотруднику.Подр))+" больничный лист на даты с "+СокрЛП(СТрока(Формат(СтруктураДанныхПоСотруднику.ДатаНБЛ,"ДЛФ=Д")))+" по "+СокрЛП(СТрока(Формат(СтруктураДанныхПоСотруднику.ДатаКБЛ,"ДЛФ=Д")))+Символы.ПС + 
					"пересекаются с датами отстранения от работы с "+СокрЛП(СТрока(Формат(СтруктураДанныхПоСотруднику.ДатаНОт,"ДЛФ=Д")))+" по "+СокрЛП(СТрока(Формат(СтруктураДанныхПоСотруднику.ДатаКОт,"ДЛФ=Д")))+"."+ Символы.ПС +"
					|
					|Данное письмо отправлено автоматически.";
					
					Попытка
					ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма);
					//запишим что  отправили
					НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочников.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.Объект.Установить(ВыборкаНаОтправку.Бл);
									
					НоваяЗапись = НаборЗаписей.Добавить();
					
					НоваяЗапись.Объект = ВыборкаНаОтправку.Бл;
					НоваяЗапись.Реквизит = "Отправлено";
					НоваяЗапись.Значение = "ПоОтстранениям";
					
					НаборЗаписей.Записать();
					Исключение конецПопытки;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//Blik 160916 56829 к

//Blik 260916 57188 н
Процедура СформироватьРассылкуПоотстранениям() экспорт
	
	ЭлСпрСлужебный = Справочники.ПРГ_Служебный.НайтиПоНаименованию("ОтстранениеОтРаботы");
	ВР_Отстранение = ЭлСпрСлужебный.Объект.Ссылка;
	ТекДата = ТекущаяДата();
	
	СпсАдресатов = ПолучитьСписокПолучателейОтстр(ЭлСпрСлужебный);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета
	|	И КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(&ПериодДействияКонец, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("ПериодДействияКонец",ТекДата);
	Запрос.УстановитьПараметр("ВидРасчета",ВР_Отстранение);
	
	Результат = Запрос.Выполнить();
	ТекстПоСотрам="";
	ВыборкаДанных = Результат.Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		 ТекстПоСотрам = ТекстПоСотрам+СокрЛП(Строка(ВыборкаДанных.Сотрудник))+Символы.ПС;
	КонецЦикла;
	Если не ТекстПоСотрам = "" Тогда 
		ТемаПисьма="Уведомление об отстранения от работы";
		ТекстПисьма = "Добрый день!
		|Информируем Вас о том, что на "+СокрЛП(СТрока(Формат(ТекДата,"ДЛФ=Д")))+" следующие сотрудники отстранены от работы: "+Символы.ПС +
		ТекстПоСотрам + Символы.ПС +"
		|
		|Данное письмо отправлено автоматически.";
		
		//отправим файл
		Попытка
			ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма);
		Исключение 
		конецПопытки;
	КонецЕсли;
КонецПроцедуры
//Blik 260916 57188 к


/// Кунов О.В., 01.02.2017 - 61594
Процедура Рассылка_ИстекающееКоличествоВПриказахНаСкидку() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры КАК Приказ
	|ПОМЕСТИТЬ втПриказы
	|ИЗ
	|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
	|			&ДатаОстатков,
	|			УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки = &ВидОграничения
	|				И УстановкаСкидокНоменклатуры.ДатаОкончания >= &ОкончаниеСкидки) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|		ПО ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры = ПРГ_ОтправленыеДокументы.Документ
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка)
	|ГДЕ
	|	ПРГ_ОтправленыеДокументы.Документ ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Контрагент,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ПолучательСкидки,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.УстановкаСкидокНоменклатуры,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Брендообъем,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоПриход,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоРасход
	|ИЗ
	|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Обороты(
	|			,
	|			,
	|			,
	|			УстановкаСкидокНоменклатуры В
	|					(ВЫБРАТЬ
	|						втПриказы.Приказ
	|					ИЗ
	|						втПриказы)
	//|				И Брендообъем <> ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
	|					) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты
	|ГДЕ
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоПриход > 0
	|	И ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоРасход / ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоПриход > &ДоляПредупреждения");
	
	//Запрос.УстановитьПараметр("НачалоПериода", '20161001');
	
	ДатаПроверки 		= НачалоДня(ТекущаяДата());
	ДоляПредупреждения 	= 0.8;
	ТестовыйРежим 		= Ложь;
	
	Попытка
		ЭлементСлужебногоСправочника = ПредопределенноеЗначение("Справочник.ПРГ_Служебный.НастройкиУведомленийОПревышенииОбъемаСкидок");
		Если ЗначениеЗаполнено(ЭлементСлужебногоСправочника.ПРГ_Дата) Тогда
			ДатаПроверки = ЭлементСлужебногоСправочника.ПРГ_Дата;
		КонецЕсли;
		ДоляПредупрежденияСтрока = ЭлементСлужебногоСправочника.ТаблицаПараметров.Найти("ДоляПредупреждения", "Параметр");
		Если ДоляПредупрежденияСтрока <> Неопределено И ТипЗнч(ДоляПредупрежденияСтрока.ЗначениеПараметра) = Тип("Число") Тогда
			ДоляПредупреждения = ДоляПредупрежденияСтрока.ЗначениеПараметра;
		КонецЕсли;
		ТестовыйРежимСтрока = ЭлементСлужебногоСправочника.ТаблицаПараметров.Найти("ТестовыйРежим", "Параметр");
		Если ТестовыйРежимСтрока <> Неопределено И ТипЗнч(ТестовыйРежимСтрока.ЗначениеПараметра) = Тип("Булево") Тогда
			ТестовыйРежим = ТестовыйРежимСтрока.ЗначениеПараметра;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Запрос.УстановитьПараметр("ДатаОстатков",		ТекущаяДата());
	Запрос.УстановитьПараметр("ОкончаниеСкидки",	ДатаПроверки);
	Запрос.УстановитьПараметр("ВидОграничения", 	Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем);
	Запрос.УстановитьПараметр("ДоляПредупреждения", ДоляПредупреждения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НастройкиДопПолучателей = ПредопределенноеЗначение("Справочник.ПРГ_Служебный.НастройкиУведомленийОПревышенииОбъемаСкидок");
	
	Пока Выборка.Следующий() Цикл
		
		МассивДопПолучателей = Новый Массив;
		Если ЗначениеЗаполнено(НастройкиДопПолучателей) Тогда
			ТаблицаПараметров = НастройкиДопПолучателей.ТаблицаПараметров;
			СтрокаКонтрагента = ТаблицаПараметров.Найти( ? (ЗначениеЗаполнено(Выборка.Контрагент), Выборка.Контрагент, Выборка.ПолучательСкидки), "Параметр" );
			Если СтрокаКонтрагента <> Неопределено Тогда
				СтрокаДопПолучателя = ТаблицаПараметров[ТаблицаПараметров.Индекс(СтрокаКонтрагента) + 1];
				Пока ТипЗнч(СтрокаДопПолучателя.Параметр) = Тип("Строка") Цикл
					МассивДопПолучателей.Добавить(СтрокаДопПолучателя.Параметр);
					Если ТаблицаПараметров.Индекс(СтрокаДопПолучателя) = ТаблицаПараметров.Количество()-1 Тогда
						Прервать;
					Иначе
						СтрокаДопПолучателя = ТаблицаПараметров[ТаблицаПараметров.Индекс(СтрокаДопПолучателя) + 1];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Рассылка_ИстекающееКоличествоВПриказахНаСкидку_ОтправитьСообщение(Выборка, ТестовыйРежим, МассивДопПолучателей) Тогда
			СтрокаРегистра = РегистрыСведений.ПРГ_ОтправленыеДокументы.СоздатьМенеджерЗаписи();
			СтрокаРегистра.Документ = Выборка.УстановкаСкидокНоменклатуры;
			СтрокаРегистра.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Функция Рассылка_ИстекающееКоличествоВПриказахНаСкидку_ОтправитьСообщение(Выборка, ТестовыйРежим = Ложь, Знач АдресаПолучателей)
	
	Приказ = Выборка.УстановкаСкидокНоменклатуры;
	//АдресаПолучателей = Новый Массив;
	
	Если Не ТестовыйРежим Тогда
		Менеджер = Приказ.ПРГ_ОтветственныйМенеджер.Физлицо;
		АдресПолучателя = "";
		
		Если ЗначениеЗаполнено(Менеджер) Тогда
			АдресПолучателя = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Менеджер);
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресПолучателя) Тогда
			АдресаПолучателей.Добавить(АдресПолучателя);
		Иначе
			АдресПолучателя = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Приказ.Ответственный.Физлицо);
			Если ЗначениеЗаполнено(АдресПолучателя) Тогда
				АдресаПолучателей.Добавить(АдресПолучателя);
			КонецЕсли;
		КонецЕсли;
		
		Если АдресаПолучателей.Количество() = 0 Тогда
			ЗаписьЖурналаРегистрации("Сообщение.Ошибка",
				УровеньЖурналаРегистрации.Предупреждение,
				Приказ.Метаданные(),
				Приказ,
				"Не удается определить адрес получателя для рассылки предупреждения о скором превышении объема скидки.");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Менеджер = Неопределено;
	//Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
	//	Менеджер = Выборка.Контрагент.ОсновнойМенеджерПокупателя.Физлицо;
	//ИначеЕсли ЗначениеЗаполнено(Выборка.ПолучательСкидки) Тогда
	//	Получатель = Выборка.ПолучательСкидки;
	//	Если ЗначениеЗаполнено(Получатель.Контрагент) Тогда
	//		Менеджер = Получатель.Контрагент.ОсновнойМенеджерПокупателя.Физлицо;
	//	КонецЕсли;
	//	Если Получатель.Контрагенты.Количество() > 1 Тогда
	//		Менеджеры = Новый ТаблицаЗначений;
	//		Менеджеры.Колонки.Добавить("Менеджер");
	//		Для Каждого СтрокаКонтрагент Из Получатель.Контрагенты Цикл
	//			ЗаполнитьЗначенияСвойств(Менеджеры.Добавить(), Новый Структура("Менеджер", СтрокаКонтрагент.Контрагент.ОсновнойМенеджерПокупателя.Физлицо));
	//		КонецЦикла;
	//		Менеджеры.Свернуть("Менеджер");
	//		Менеджер = Менеджеры.ВыгрузитьКолонку("Менеджер");
	//	ИначеЕсли Получатель.Контрагенты.Количество() = 1 Тогда
	//		Менеджер = Получатель.Контрагенты[0].Контрагент.ОсновнойМенеджерПокупателя.Физлицо;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ТипЗнч(Менеджер) = Тип("Массив") Тогда
	//	МенеджерСтрока = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Менеджер, ", ");
	//Иначе
	//	МенеджерСтрока = Менеджер.Наименование;
	//КонецЕсли;
	
	ДоляВыбранногоКоличества = Окр(Выборка.КоличествоРасход / Выборка.КоличествоПриход * 100, 2);
	
	Сообщение = "Это уведомление сформировано автоматически системой 1С и информирует Вас о том,
		|что по приказу <b>№ %1 %2</b> клиенту %5 по брендообъему <b>%3</b> со скидкой отгружено <b>%4проц.</b> от согласованного в приказе количества.
		|Напоминаем, что при достижении 120проц. отгрузки со скидкой по данному брендообъему будут прекращены.
		|Просим заблаговременно составить и согласовать в Docs приказ на дополнительное количество.";
		
	Если Не ЗначениеЗаполнено(Выборка.Брендообъем) Тогда
		Сообщение = СтрЗаменить(Сообщение, "по брендообъему <b>%3</b> ", "%3");
		Сообщение = СтрЗаменить(Сообщение, "отгрузки со скидкой по данному брендообъему ", "отгрузки со скидкой по данному приказу ");
	КонецЕсли;
		
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
		Выборка.УстановкаСкидокНоменклатуры.ПЦ_НомерВходящегоДокумента,
		Формат(Выборка.УстановкаСкидокНоменклатуры.ПЦ_ДатаВходящегоДокумента, "ДФ='от dd.MM.yyyy'; ДП=' '"),
		? (ЗначениеЗаполнено(Выборка.Брендообъем), Выборка.Брендообъем, ""),
		ДоляВыбранногоКоличества,
		? (ЗначениеЗаполнено(Выборка.ПолучательСкидки), СокрЛП(Выборка.ПолучательСкидки.Наименование), СокрЛП(Выборка.Контрагент.Наименование) )
		);
	Сообщение = СтрЗаменить(Сообщение, "проц.", "%");
	
	АдресаПолучателей.Добавить("okunov@progressfood.ru");

	Попытка
		ПРГ_Регламентый.ОправитьФайл("Уведомление о скором превышении объема по скидке", АдресаПолучателей, Сообщение, , , , Истина);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции
///

// <- Шевченков 20170307 61973

Функция РассылкаПоПомеченнымНаУдалениеАктам() Экспорт
	
	ТекДата = ТекущаяДата();
	Если Истина
		И НачалоДня(ТекДата) = НачалоМесяца(ТекДата) 
		Тогда 		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.Ссылка,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.НомерСтроки,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.График,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.Контрагент,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.НачПериод,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.КонПериод
		|ПОМЕСТИТЬ втВрем
		|ИЗ
		|	Документ.ПКК_ВедомостьПоРасчетуБонусовУслуг.Ведомость КАК ПКК_ВедомостьПоРасчетуБонусовУслугВедомость
		|ГДЕ
		|	НЕ ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.Исключено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПКК_ВедомостьПоРасчетуБонусовУслугАкты.Ссылка,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугАкты.Акт КАК Акт,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугАкты.НомерСтроки,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугАкты.График,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугАкты.Контрагент,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугАкты.НачПериод,
		|	ПКК_ВедомостьПоРасчетуБонусовУслугАкты.КонПериод
		//|ПОМЕСТИТЬ втУдаленныеАкты
		|ИЗ
		|	Документ.ПКК_ВедомостьПоРасчетуБонусовУслуг.Акты КАК ПКК_ВедомостьПоРасчетуБонусовУслугАкты
		|ГДЕ
		|	ПКК_ВедомостьПоРасчетуБонусовУслугАкты.Акт.ПометкаУдаления
		|	И ПКК_ВедомостьПоРасчетуБонусовУслугАкты.Акт.Дата >= ДАТАВРЕМЯ(2016, 1, 1)
		|	И (ПКК_ВедомостьПоРасчетуБонусовУслугАкты.Ссылка, ПКК_ВедомостьПоРасчетуБонусовУслугАкты.График, ПКК_ВедомостьПоРасчетуБонусовУслугАкты.Контрагент, ПКК_ВедомостьПоРасчетуБонусовУслугАкты.НачПериод, ПКК_ВедомостьПоРасчетуБонусовУслугАкты.КонПериод) В
		|			(ВЫБРАТЬ
		|				ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.Ссылка,
		|				ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.График,
		|				ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.Контрагент,
		|				ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.НачПериод,
		|				ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.КонПериод
		|			ИЗ
		|				Документ.ПКК_ВедомостьПоРасчетуБонусовУслуг.Ведомость КАК ПКК_ВедомостьПоРасчетуБонусовУслугВедомость
		|			ГДЕ
		|				НЕ ПКК_ВедомостьПоРасчетуБонусовУслугВедомость.Исключено)";
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		СписокАктов = "";
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокАктов = СписокАктов + Символы.ПС + ВыборкаДетальныеЗаписи.Акт + Символы.ПС;
		КонецЦикла;
		
		Если Не ПустаяСтрока(СписокАктов) Тогда			
			Попытка
				//ПРГ_Регламентый.ОправитьФайл("Рассылка по удаленным актам", "ashevchenkov@progressfood.ru", СписокАктов, , , , Истина);
				ПРГ_Регламентый.ОправитьФайл("Рассылка по удаленным актам", "ochevychelova@progressfood.ru", СписокАктов, , , , Истина);
				Возврат Истина;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;		
		
	КонецЕсли;
	
КонецФункции

Функция РассылкаПоОборотамСПоставщиками() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо КАК Менеджер
		|ПОМЕСТИТЬ втСписокМенеджеров
		|ИЗ
		|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
		|ГДЕ
		|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &УведомляемыеПоПоступлениям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ДоговорыКонтрагентов.Владелец КАК Контрагент
		|ПОМЕСТИТЬ втТаблицаКонтрагентов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Менеджер В
		|			(ВЫБРАТЬ
		|				втСписокМенеджеров.Менеджер
		|			ИЗ
		|				втСписокМенеджеров КАК втСписокМенеджеров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Внутр.Организация,
		|	Внутр.Контрагент,
		|	СУММА(Внутр.ОборотыТекущийГод) КАК ОборотыТекущийГод,
		|	СУММА(Внутр.ОборотыПрошлыйГод) КАК ОборотыПрошлыйГод
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход) КАК ОборотыТекущийГод,
		|		СУММА(0) КАК ОборотыПрошлыйГод,
		|		ВзаиморасчетыСКонтрагентамиОбороты.Организация КАК Организация,
		|		ВзаиморасчетыСКонтрагентамиОбороты.Контрагент КАК Контрагент
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
		|				НАЧАЛОПЕРИОДА(&ТекДата, ГОД),
		|				НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ),
		|				Период,
		|				Контрагент В
		|					(ВЫБРАТЬ
		|						Внутр.Контрагент
		|					ИЗ
		|						втТаблицаКонтрагентов КАК Внутр)) КАК ВзаиморасчетыСКонтрагентамиОбороты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзаиморасчетыСКонтрагентамиОбороты.Контрагент,
		|		ВзаиморасчетыСКонтрагентамиОбороты.Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход),
		|		ВзаиморасчетыСКонтрагентамиОбороты.Организация,
		|		ВзаиморасчетыСКонтрагентамиОбороты.Контрагент
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
		|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, -1), ГОД),
		|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, ГОД, -1), ГОД),
		|				Период,
		|				Контрагент В
		|					(ВЫБРАТЬ
		|						Внутр.Контрагент
		|					ИЗ
		|						втТаблицаКонтрагентов КАК Внутр)) КАК ВзаиморасчетыСКонтрагентамиОбороты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзаиморасчетыСКонтрагентамиОбороты.Контрагент,
		|		ВзаиморасчетыСКонтрагентамиОбороты.Организация) КАК Внутр
		|
		|СГРУППИРОВАТЬ ПО
		|	Внутр.Контрагент,
		|	Внутр.Организация";

	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("УведомляемыеПоПоступлениям", Справочники.ПРГ_Служебный.НайтиПоКоду("000000049"));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();	
	
	ТабДок=Новый ТабличныйДокумент;
	Итог = 0;
	К=2;

	ТабДок.Область("R1"+"C1").Текст = "Контрагент";	
	ТабДок.Область("R1"+"C2").Текст = "Оборот за предыдущий календарный год, руб.";
	ТабДок.Область("R1"+"C3").Текст = "Оборот за текущий календарный год, руб.";
	

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ТабДок.Область("R"+(К+1)+"C1").Текст = ВыборкаДетальныеЗаписи.Контрагент;		
		ТабДок.Область("R"+(К+1)+"C2").Текст = ВыборкаДетальныеЗаписи.ОборотыПрошлыйГод;
		ТабДок.Область("R"+(К+1)+"C3").Текст = ВыборкаДетальныеЗаписи.ОборотыТекущийГод;
		//Итог = Итог+ВыборкаДетальныеЗаписи.Количество;
		К=К+1;
	КонецЦикла;
	
	//ТабДок.Область("R"+(К+1)+"C1").Текст = "Итог:";
	//ТабДок.Область("R"+(К+1)+"C2").Текст = Итог;
	Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ТабДок.Область("R1C1:R1C3").Обвести(,Рамка,,Рамка);
	ТабДок.Область("R"+(К+1)+"C1:"+"R"+(К+1)+"C3").Обвести(,Рамка,,);
	ТабДок.ОтображатьСетку = Ложь;
	//ТабДок.Показать();
	
	ИмяФайла = КаталогВременныхФайлов() + "Рассылка по обороту с поставщиками.xls";
	
	ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо КАК Менеджер,
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &УведомляемыеПоПоступлениям
		|	И НЕ ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо В
		|				(ВЫБРАТЬ
		|					ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Физлицо
		|				ИЗ
		|					РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы КАК ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы
		|				ГДЕ
		|					ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Физлицо В
		|						(ВЫБРАТЬ
		|							ПРГ_СлужебныйТаблицаПараметров.Параметр.Физлицо КАК Менеджер
		|						ИЗ
		|							Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
		|						ГДЕ
		|							ПРГ_СлужебныйТаблицаПараметров.Ссылка = &УведомляемыеПоПоступлениям)
		|					И ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1))";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	СпсАдресатов=Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпсАдресатов.Добавить(ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
   
	ПРГ_Регламентый.ОправитьФайл("Рассылка по обороту с поставщиками", СпсАдресатов, "", ИмяФайла, , , Истина);
	//ПРГ_Регламентый.ОправитьФайл("Рассылка по обороту с поставщиками", "ashevchenkov@progressfood.ru", "", ИмяФайла, , , Истина);
                       
КонецФункции

Функция РассылкаПоОтчетуПоСкидкамФКК(НачПер, КонПер, НазвМесяца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Контрагент КАК Контрагент,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор КАК Приказ,
		|	ЕСТЬNULL(ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.СуммаСкидкиПриход, 0) КАК СуммаПриказа,
		|	ЕСТЬNULL(ВложенныйЗапрос.СуммаПредоставленнойСкидки, 0) КАК СуммаПредоставленнойСкидки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.СуммаСкидкиПриход, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаПредоставленнойСкидки, 0) >= 0
		|			ТОГДА ЕСТЬNULL(ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.СуммаСкидкиПриход, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаПредоставленнойСкидки, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокСкидки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоОборот, 0) - ЕСТЬNULL(ВложенныйЗапрос.КоличествоОтгруженное, 0) >= 0
		|			ТОГДА ЕСТЬNULL(ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоОборот, 0) - ЕСТЬNULL(ВложенныйЗапрос.КоличествоОтгруженное, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокПоПриказу,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоОборот КАК КоличествоПоПриказу,
		|	ВложенныйЗапрос.КоличествоОтгруженное КАК ОтгруженоПоПриказу,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Брендообъем КАК Брендообъем,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор.ДатаНачала КАК ДатаНачала,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор.ДатаОкончания КАК ДатаОкончания,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор.ПЦ_НомерВходящегоДокумента КАК ПЦ_НомерВходящегоДокумента,
		|	ВложенныйЗапрос.ПроцентСкидки
		|ИЗ
		|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Обороты(&НачПер, &КонПер, Авто, ) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПредоставленныеСкидкиОбороты.ДокументСкидки КАК ДокументСкидки,
		|			ПредоставленныеСкидкиОбороты.ПолучательСкидки КАК ПолучательСкидки,
		|			СУММА(ЕСТЬNULL(ПредоставленныеСкидкиОбороты.СуммаСкидкиОборот, 0)) КАК СуммаПредоставленнойСкидки,
		|			СУММА(ЕСТЬNULL(ПредоставленныеСкидкиОбороты.КоличествоОборот, 0)) КАК КоличествоОтгруженное,
		|			ПредоставленныеСкидкиОбороты.Номенклатура.НСИ_Брендообъем КАК НоменклатураНСИ_Брендообъем,
		|			ПредоставленныеСкидкиОбороты.ПроцентСкидки КАК ПроцентСкидки
		|		ИЗ
		|			РегистрНакопления.ПредоставленныеСкидки.Обороты(&НачПер, &КонПер, Авто, ) КАК ПредоставленныеСкидкиОбороты
		|		ГДЕ
		|			ПредоставленныеСкидкиОбороты.ПЦ_ОграниченияСкидки В(&ПЦ_ОграниченияСкидкиПоСумме)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПредоставленныеСкидкиОбороты.ДокументСкидки,
		|			ПредоставленныеСкидкиОбороты.ПолучательСкидки,
		|			ПредоставленныеСкидкиОбороты.Номенклатура.НСИ_Брендообъем,
		|			ПредоставленныеСкидкиОбороты.ПроцентСкидки) КАК ВложенныйЗапрос
		|		ПО ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор = ВложенныйЗапрос.ДокументСкидки
		|			И ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Контрагент = ВложенныйЗапрос.ПолучательСкидки
		|			И ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Брендообъем = ВложенныйЗапрос.НоменклатураНСИ_Брендообъем
		|ГДЕ
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор ССЫЛКА Документ.УстановкаСкидокНоменклатуры";

	Запрос.УстановитьПараметр("НачПер", НачалоМесяца(НачПер));
	Запрос.УстановитьПараметр("КонПер", КонецМесяца(КонПер));
	
	СписокЗнч = Новый СписокЗначений;
	СписокЗнч.Добавить(Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки);
	СписокЗнч.Добавить(Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг);
	СписокЗнч.Добавить(Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем);
	
	Запрос.УстановитьПараметр("ПЦ_ОграниченияСкидкиПоСумме", СписокЗнч);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();	
	
	ТабДок=Новый ТабличныйДокумент;
	Итог = 0;
	К=2;

	ТабДок.Область("R1"+"C1").Текст = "Контрагент";	
	ТабДок.Область("R1"+"C2").Текст = "Брендообъем";
	ТабДок.Область("R1"+"C3").Текст = "Дата начала действия скидки";
	ТабДок.Область("R1"+"C4").Текст = "Дата окончания действия скидки";
	ТабДок.Область("R1"+"C5").Текст = "Номер входящего документа";
	ТабДок.Область("R1"+"C6").Текст = "Приказ";
	ТабДок.Область("R1"+"C7").Текст = "Процент скидки";
	ТабДок.Область("R1"+"C8").Текст = "Количество по приказу";
	ТабДок.Область("R1"+"C9").Текст = "Отгружено по приказу";
	ТабДок.Область("R1"+"C10").Текст = "Остаток по приказу";
	ТабДок.Область("R1"+"C11").Текст = "Сумма приказа";
	ТабДок.Область("R1"+"C12").Текст = "Сумма предоставленной скидки";
	ТабДок.Область("R1"+"C13").Текст = "Остаток скидки";

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КК = СтрЗаменить(Строка(К+1), Символы.НПП, "");
		ТабДок.Область("R"+(КК)+"C1").Текст = ВыборкаДетальныеЗаписи.Контрагент;		
		ТабДок.Область("R"+(КК)+"C2").Текст = ВыборкаДетальныеЗаписи.Брендообъем;
		ТабДок.Область("R"+(КК)+"C3").Текст = ВыборкаДетальныеЗаписи.ДатаНачала;
		ТабДок.Область("R"+(КК)+"C4").Текст = ВыборкаДетальныеЗаписи.ДатаОкончания;
		ТабДок.Область("R"+(КК)+"C5").Текст = ВыборкаДетальныеЗаписи.ПЦ_НомерВходящегоДокумента;
		ТабДок.Область("R"+(КК)+"C6").Текст = ВыборкаДетальныеЗаписи.Приказ;
		ТабДок.Область("R"+(КК)+"C7").Текст = ВыборкаДетальныеЗаписи.ПроцентСкидки;
		ТабДок.Область("R"+(КК)+"C8").Текст = ВыборкаДетальныеЗаписи.КоличествоПоПриказу;
		ТабДок.Область("R"+(КК)+"C9").Текст = ВыборкаДетальныеЗаписи.ОтгруженоПоПриказу;
		ТабДок.Область("R"+(КК)+"C10").Текст = ВыборкаДетальныеЗаписи.ОстатокПоПриказу;
		ТабДок.Область("R"+(КК)+"C11").Текст = ВыборкаДетальныеЗаписи.СуммаПриказа;
		ТабДок.Область("R"+(КК)+"C12").Текст = ВыборкаДетальныеЗаписи.СуммаПредоставленнойСкидки;
		ТабДок.Область("R"+(КК)+"C13").Текст = ВыборкаДетальныеЗаписи.ОстатокСкидки;
		
		//Итог = Итог+ВыборкаДетальныеЗаписи.Количество;
		К=К+1;
		
	КонецЦикла;
	КК = СтрЗаменить(Строка(К+1), Символы.НПП, "");
	//ТабДок.Область("R"+(К+1)+"C1").Текст = "Итог:";
	//ТабДок.Область("R"+(К+1)+"C2").Текст = Итог;
	Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ТабДок.Область("R1C1:R1C13").Обвести(,Рамка,,Рамка);
	ТабДок.Область("R"+(КК)+"C1:"+"R"+(КК)+"C13").Обвести(,Рамка,,);
	ТабДок.ОтображатьСетку = Ложь;
	//ТабДок.Показать();                              
	
	ИмяФайла = КаталогВременныхФайлов() + НазвМесяца + ".xls";
	
	ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
       
	//ПРГ_Регламентый.ОправитьФайл("Рассылка по обороту с поставщиками", "AGorbachev@progressfood.ru", "", ИмяФайла, , , Истина);
	
КонецФункции


// ->

//Blik 050417 64081 н
Процедура РассылкаУведомленияПоСпецификациям() экспорт
	
	ЭлСпрСлужебный = Справочники.ПРГ_Служебный.НайтиПоНаименованию("РассылкаПоСпецификациямНоменклатуры");
	//ВР_Отстранение = ЭлСпрСлужебный.Объект.Ссылка;
	//Blik 210617 67044 н
	//ТекДата = ТекущаяДата();
	ТекДата = ТекущаяДата()+86400*2;
	//Blik 210617 67044 к
	СпсАдресатов = Новый СписокЗначений;
	СпсАдресатов = ПолучитьСписокПолучателейОтстр(ЭлСпрСлужебный);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииНоменклатуры.Ссылка,
	|	СпецификацииНоменклатуры.Ответственный,
	|	СпецификацииНоменклатуры.ДатаУтверждения,
	|	СпецификацииНоменклатуры.Состояние,
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура,
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Период,
	|	КонтактнаяИнформация.Представление как ЭлПолучателя,
	|	СпецификацииНоменклатуры.КодВерсии,
	|	СпецификацииНоменклатуры.Код,
	|	СпецификацииНоменклатуры.Наименование
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(НачалоПериода(&ТекДата,День), ) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|		ПО СпецификацииНоменклатуры.Ссылка = ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО СпецификацииНоменклатуры.Ответственный.ФизЛицо = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Период = НачалоПериода(&ТекДата,День)";
	
	Запрос.УстановитьПараметр("ТекДата",ТекДата);
	
	Результат = Запрос.Выполнить();
	
	ТекстПисьма="";
	
	ВыборкаДанных = Результат.Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		//ТекстПисьма = ТекстПисьма+СокрЛП(Строка(ВыборкаДанных.Ссылка))+" " +СокрЛП(Строка(ВыборкаДанных.Код))+" "+СокрЛП(Строка(ВыборкаДанных.Наименование))+" утвержденная от "+Формат(ВыборкаДанных.ДатаУтверждения,"ДФ=dd.MM.yyyy")+" установлена основной с "+Формат(ВыборкаДанных.Период,"ДФ=dd.MM.yyyy")+Символы.ПС;
		ТекстПисьма = ТекстПисьма+" Спецификация код " +СокрЛП(Строка(ВыборкаДанных.Код))+" "+СокрЛП(Строка(ВыборкаДанных.Наименование))+" утвержденная от "+Формат(ВыборкаДанных.ДатаУтверждения,"ДФ=dd.MM.yyyy")+" установлена основной с "+Формат(ВыборкаДанных.Период,"ДФ=dd.MM.yyyy")+"; "+Символы.ПС;
		Если СпсАдресатов.НайтиПоЗначению(СокрЛП(Строка(ВыборкаДанных.ЭлПолучателя)))=Неопределено Тогда
			 СпсАдресатов.Добавить(СокрЛП(Строка(ВыборкаДанных.ЭлПолучателя)));
		КонецЕсли;
	КонецЦикла;
	Если не ТекстПисьма = "" Тогда 
		ТемаПисьма="Оповещение по актуализации спецификаций на продукты";
		ТекстПисьма = "Добрый день!
		|Информируем Вас о том, что "+Символы.ПС +
		ТекстПисьма+". " + Символы.ПС +"
		|
		|Данное письмо отправлено автоматически.";
		
		//отправим файл
		Попытка
			ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма);
		Исключение 
		конецПопытки;
	КонецЕсли;
	
КонецПроцедуры
//Blik 050417 64081 к

Процедура ВыполнитьУдалениеДопСогласующих() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МаршрутыСогласованияСогласующиеЛица.Ссылка КАК Маршрут,
	|	МаршрутыСогласованияСогласующиеЛица.Пользователь,
	|	МаршрутыСогласованияСогласующиеЛица.Ссылка.Родитель
	|ИЗ
	|	Справочник.МаршрутыСогласования.СогласующиеЛица КАК МаршрутыСогласованияСогласующиеЛица
	|ГДЕ
	|	НЕ МаршрутыСогласованияСогласующиеЛица.Ссылка В ИЕРАРХИИ (&Ссылка)
	|	И МаршрутыСогласованияСогласующиеЛица.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И МаршрутыСогласованияСогласующиеЛица.ДатаОкончания < &ТекДата";
	Запрос.УстановитьПараметр("Ссылка", Справочники.МаршрутыСогласования.НайтиПоНаименованию("Удалить"));
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	//Возврат РезТЗ;
	
	НовыйСписокСогласующих = Новый СписокЗначений;
	
	Для Каждого Строка Из РезТЗ Цикл
		
		НачатьТранзакцию();
		
		ТекМаршрут = Строка.Маршрут.ПолучитьОбъект();		
		
		Для Каждого ТекСогласующий Из ТекМаршрут.СогласующиеЛица Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекСогласующий.ДатаОкончания) Тогда				
				НовыйСписокСогласующих.Добавить(ТекСогласующий.Пользователь);				
			КонецЕсли;			
			
		КонецЦикла;
		
		ТекМаршрут.СогласующиеЛица.Очистить();
		
		Для Каждого ТекСогласующий Из НовыйСписокСогласующих Цикл
			
			НСтрока = ТекМаршрут.СогласующиеЛица.Добавить();
			НСтрока.Пользователь = ТекСогласующий.Значение;
			
		КонецЦикла;
		
		ТекМаршрут.Записать();
		НовыйСписокСогласующих.Очистить();
		
		ЗафиксироватьТранзакцию();
		
		//Сообщить("Изменен маршрут: " + Строка(ТекМаршрут));
				
	КонецЦикла;
		
КонецПроцедуры


// Шевченков 20170831 #69694
Процедура РассылкиИнформацииПоЗаявкамНаКомплектацию(мДата = Неопределено) Экспорт
	
	//ОтделениеМСК = Справочники.НСИ_Отделения.НайтиПоКоду("МФ ПРГ");
	//ОтделениеСПБ = Справочники.НСИ_Отделения.НайтиПоКоду("СПБФ ПРГ");
	
	ОтделениеСПБ = Справочники.Склады.НайтиПоКоду("ПРГСПБФ2");   // Отделение СПБ
	//ОтделениеМСК = Справочники.Склады.НайтиПоКоду("ПРГСПБФ2");   // Отделение МСК
	
	МассивОтделений = Новый Массив;
	//МассивОтделений.Добавить(ОтделениеМСК);
	МассивОтделений.Добавить(ОтделениеСПБ);
	
	СпсАдресатов_СПБ = Новый СписокЗначений;
	СпсАдресатов_МСК = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_СлужебныйТаблицаПараметров.Параметр,
		|	КонтактнаяИнформация.Представление КАК ЭлПочта
		|ИЗ
		|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ПРГ_СлужебныйТаблицаПараметров.Параметр = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ПРГ_СлужебныйТаблицаПараметров.Ссылка.Код = &Код
		|	И ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Код", "000000122");
	Запрос.УстановитьПараметр("Наименование", "ПолучателиРассылки_СПБ");

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЭлПочта) Тогда
			СпсАдресатов_СПБ.Добавить(ВыборкаДетальныеЗаписи.ЭлПочта);
			//Сообщить(ВыборкаДетальныеЗаписи.ЭлПочта);
		ИначеЕсли не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЭлПочта) и ТипЗнч(ВыборкаДетальныеЗаписи.Параметр) = Тип("Строка") И не ПустаяСтрока(ВыборкаДетальныеЗаписи.Параметр) Тогда
			СпсАдресатов_СПБ.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.Параметр));
			//Сообщить(СокрЛП(ВыборкаДетальныеЗаписи.Параметр));
		КонецЕсли;		
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_СлужебныйТаблицаПараметров.Параметр,
		|	КонтактнаяИнформация.Представление КАК ЭлПочта
		|ИЗ
		|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ПРГ_СлужебныйТаблицаПараметров.Параметр = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ПРГ_СлужебныйТаблицаПараметров.Ссылка.Код = &Код
		|	И ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Код", "000000123");
	Запрос.УстановитьПараметр("Наименование", "ПолучателиРассылки_МСК");

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЭлПочта) Тогда
			СпсАдресатов_МСК.Добавить(ВыборкаДетальныеЗаписи.ЭлПочта);
		ИначеЕсли не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЭлПочта) и ТипЗнч(ВыборкаДетальныеЗаписи.Параметр) = Тип("Строка") И не ПустаяСтрока(ВыборкаДетальныеЗаписи.Параметр) Тогда
			СпсАдресатов_МСК.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.Параметр));
		КонецЕсли;		
	КонецЦикла;

	СформироватьДанныеПоСПБ(мДата, МассивОтделений, СпсАдресатов_СПБ);
	
	СформироватьДанныеПоМСК(мДата, МассивОтделений, СпсАдресатов_МСК);

		
КонецПроцедуры

Процедура СформироватьДанныеПоСПБ(мДата, МассивОтделений, СпсАдресатов_СПБ)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СП_ЗаданиеНаПодбор.Ссылка,
		|	СП_ЗаданиеНаПодбор.Номер,
		|	СП_ЗаданиеНаПодбор.Заказ,
		|	ВнутреннийЗаказ.КП_ДатаДоставки КАК ДатаДоставки,
		|	СП_ЗаданиеНаПодбор.КП_Отделение,
		|	ПТЛ_ЗаданиеНаПеревозку.ДатаДоставкиПлан,
		|	ПТЛ_ЗаданиеНаПеревозку.Водитель,
		|	ПТЛ_ЗаданиеНаПеревозку.ТранспортноеСредство,
		|	ПТЛ_Водители.Телефон,
		|	ПТЛ_ЗаданиеНаПеревозку.ДатаОтгрузкиФакт
		|ИЗ
		|	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
		|		ПО СП_ЗаданиеНаПодбор.Заказ = ВнутреннийЗаказ.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПТЛ_Водители КАК ПТЛ_Водители
		|			ПО ПТЛ_ЗаданиеНаПеревозку.Водитель = ПТЛ_Водители.Ссылка
		|		ПО СП_ЗаданиеНаПодбор.Ссылка = ПТЛ_ЗаданиеНаПеревозку.ЗаданиеНаПодбор
		|ГДЕ
		|	ПТЛ_ЗаданиеНаПеревозку.ДатаОтгрузкиФакт >= &Дата
		|	И НЕ СП_ЗаданиеНаПодбор.Ссылка В
		|				(ВЫБРАТЬ
		|					ПРГ_ОтправленыеДокументы.Документ
		|				ИЗ
		|					РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
		|				ГДЕ
		|					ПРГ_ОтправленыеДокументы.Документ ССЫЛКА Документ.СП_ЗаданиеНаПодбор
		// Исправление по типам рассылок
		|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка))
		|	И СП_ЗаданиеНаПодбор.СтатусДокумента = &СтатусДокумента
		|	И СП_ЗаданиеНаПодбор.Получатель В(&КП_Отделение)
		|	И СП_ЗаданиеНаПодбор.ВидОперации = &ВидОперации
		|	И ПТЛ_ЗаданиеНаПеревозку.Проведен";

	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(мДата), мДата, Дата('20170928')));
	//Запрос.УстановитьПараметр("Дата", Дата('20170712'));
	Запрос.УстановитьПараметр("СтатусДокумента", Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен);
	Запрос.УстановитьПараметр("КП_Отделение", МассивОтделений);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеНаСклад);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			
			//мИмяФайла = ПоместитьДанныеВФайл(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Номер, ВыборкаДетальныеЗаписи.ДатаДоставки, ?(ВыборкаДетальныеЗаписи.КП_Отделение = ОтделениеМСК, "Приход ПРГМСК", "Приход ПРГСПБФ2"), ВыборкаДетальныеЗаписи);
			мИмяФайла = ПоместитьДанныеВФайлСПБ(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Номер, ВыборкаДетальныеЗаписи.ДатаДоставки, "Приход ПРГСПБФ2", ВыборкаДетальныеЗаписи);
			
			//Сообщить("Файл:" + Строка(мИмяФайла));
			
			//Возврат;
			//СписокАдресатов = ?(ВыборкаДетальныеЗаписи.КП_Отделение = ОтделениеМСК, СпсАдресатов_МСК, СпсАдресатов_СПБ);
			СписокАдресатов =  СпсАдресатов_СПБ;
			Если СписокАдресатов.Количество() < 1 Тогда Продолжить КонецЕсли;
			Отправлен = Ложь;
			ОправитьФайл("Рассылка по заданиям на подбор",СписокАдресатов,"",мИмяФайла, Отправлен, "robot1s@progressfood.ru");
			
			Если Отправлен Тогда
				СтрокаРегистра = РегистрыСведений.ПРГ_ОтправленыеДокументы.СоздатьМенеджерЗаписи();
				СтрокаРегистра.Документ = ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаРегистра.Записать();
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
        
Функция ПоместитьДанныеВФайлСПБ(мЗадание, мНомерДокумента, мДатаДоставки, мИмяФайла, мСтруктураДанных)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СП_ЗаданиеНаПодборТовары.Номенклатура.Код КАК Код,
		|	СП_ЗаданиеНаПодборТовары.Номенклатура.Представление КАК Описание,
		|	СП_ЗаданиеНаПодборТовары.КоличествоФакт КАК КолВо,
		|	СП_ЗаданиеНаПодборТовары.КоличествоМестФакт КАК КолВоУпаковок,
		|	СП_ЗаданиеНаПодборТовары.ДатаВыпуска КАК ДатаВыпуска
		|ИЗ
		|	Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
		|ГДЕ
		|	СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка
		|	И СП_ЗаданиеНаПодборТовары.КоличествоФакт > 0";

	Запрос.УстановитьПараметр("Ссылка", мЗадание);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ФайлCSV = Новый ТекстовыйДокумент();
	
	ФайлCSV.ДобавитьСтроку(мНомерДокумента + ";" + Строка(Формат(мДатаДоставки, "ДФ=dd.MM.yyyy")));	
	ФайлCSV.ДобавитьСтроку("Товар Но.;Описание;Кол-во;Кол-во упаковок;Дата производства;ДатаДоставкиПлан;Водитель;ТС;Телефон");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ФайлCSV.ДобавитьСтроку(Строка(ВыборкаДетальныеЗаписи.Код) + ";" + Строка(ВыборкаДетальныеЗаписи.Описание) + ";" + 
							СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.КолВо), Символы.НПП, "") + ";" + СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.КолВоУпаковок), Символы.НПП, "") + ";" + 
							Строка(Строка(Формат(ВыборкаДетальныеЗаписи.ДатаВыпуска, "ДФ=dd.MM.yyyy"))) + ";" +
							
							Строка(Формат(мСтруктураДанных.ДатаДоставкиПлан, "ДФ=dd.MM.yyyy")) + ";" + Строка(мСтруктураДанных.Водитель) + ";" +
							Строка(мСтруктураДанных.ТранспортноеСредство) + ";" + Строка(мСтруктураДанных.Телефон));
		
	КонецЦикла;
	
	//ФайлCSV.ДобавитьСтроку("ДатаДоставкиПлан" + ";" + Строка(Формат(мСтруктураДанных.ДатаДоставкиПлан, "ДФ=dd.MM.yyyy")));
	//ФайлCSV.ДобавитьСтроку("Водитель" + ";" + мСтруктураДанных.Водитель);
	//ФайлCSV.ДобавитьСтроку("ТС" + ";" + мСтруктураДанных.ТранспортноеСредство);
	//ФайлCSV.ДобавитьСтроку("Телефон" + ";" + мСтруктураДанных.Телефон);
	
	//ИмяФайла = КаталогВременныхФайлов() + мНомерДокумента + ".xls";
	ИмяФайла = КаталогВременныхФайлов() + мИмяФайла + ".csv";	
	
	ФайлCSV.Записать(ИмяФайла, "windows-1251");	

	Возврат ИмяФайла;
	
КонецФункции

Процедура СформироватьДанныеПоМСК(мДата, МассивОтделений, СпсАдресатов_МСК)
	          	
	СписокАдресатов =  СпсАдресатов_МСК;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СП_ЗаданиеНаПодбор.Ссылка КАК ЗаданиеНаПодбор,
	|	СП_ЗаданиеНаПодбор.СтатусДокумента,
	|	СП_ЗаданиеНаПодбор.Дата,
	|	СП_ЗаданиеНаПодбор.ВидОперации,
	|	СП_ЗаданиеНаПодбор.Получатель
	|ПОМЕСТИТЬ втЗаданияНаПодбор
	|ИЗ
	|	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	|		ПО СП_ЗаданиеНаПодбор.Ссылка = ПТЛ_ЗаданиеНаПеревозку.ЗаданиеНаПодбор
	|			И (ПТЛ_ЗаданиеНаПеревозку.Проведен)
	|ГДЕ
	|	НЕ СП_ЗаданиеНаПодбор.Ссылка В
	|				(ВЫБРАТЬ
	|					ПРГ_ОтправленыеДокументы.Документ
	|				ИЗ
	|					РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|				ГДЕ
	|					ПРГ_ОтправленыеДокументы.Документ ССЫЛКА Документ.СП_ЗаданиеНаПодбор  
	// Исправление по типам рассылок
	|			И ПРГ_ОтправленыеДокументы.ВариантРассылки = Значение(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка))
	|	И СП_ЗаданиеНаПодбор.Проведен
	|	И СП_ЗаданиеНаПодбор.Получатель = &КП_Отделение
	|	И ПТЛ_ЗаданиеНаПеревозку.ДатаОтгрузкиФакт >= &Дата
	|	И СП_ЗаданиеНаПодбор.ВидОперации = &ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор, ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)) КАК НомерДокументаКонтрагента,
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаКонтрагента,
	|	ВЫБОР
	|		КОГДА СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.КП_УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.Самовывоз)
	|			ТОГДА ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.Заказ.КП_ТранспортноеСредство, ЗНАЧЕНИЕ(Справочник.ПТЛ_ТранспортныеСредства.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПТЛ_ПланДоставки.ТранспортноеСредство, ЗНАЧЕНИЕ(Справочник.ПТЛ_ТранспортныеСредства.ПустаяСсылка))
	|	КОНЕЦ КАК НомерАвтомобиля,
	|	ВЫБОР
	|		КОГДА СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.КП_УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.Самовывоз)
	|			ТОГДА ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.Заказ.КП_Водитель, ЗНАЧЕНИЕ(Справочник.ПТЛ_Водители.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПТЛ_ПланДоставки.Водитель, ЗНАЧЕНИЕ(Справочник.ПТЛ_Водители.ПустаяСсылка))
	|	КОНЕЦ КАК ФИОВодителя,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрибытияТС,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ВремяПодачиТС, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяПрибытияТС,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ДатаДоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоставки,
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.Номенклатура.Код, """") КАК Артикул,
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.КоличествоПланОборот, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.КоличествоФактОборот, 0)) КАК КоличествоФакт,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНоменклатуры,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(СП_ЗаданияНаПодборОбороты.Заказ КАК Документ.ЗаказПокупателя).Грузополучатель, ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)) КАК Примечание,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.Отделение, ЗНАЧЕНИЕ(Справочник.НСИ_Отделения.ПустаяСсылка)) КАК Отделение,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтгрузки,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ЗаданиеНаПодбор, ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)) КАК ЗаданиеНаПодбор,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.ПТЛ_ЗаданиеНаПеревозку.ПустаяСсылка)) КАК ЗаданиеНаПеревозку,
	|	ПТЛ_ПланДоставки.Маршрут КАК Маршрут,
	|	ПРЕДСТАВЛЕНИЕ(ПТЛ_ПланДоставки.Маршрут) КАК МаршрутПредставление,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Получатель,
	|	ПТЛ_ПланДоставки.Рейс КАК Рейс,
	|	ПТЛ_ПланДоставки.Регистратор.Номер КАК ПланНомер,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(СП_ЗаданияНаПодборОбороты.Заказ КАК Документ.ЗаказПокупателя).Грузополучатель.НСИ_Город, ЗНАЧЕНИЕ(Справочник.НСИ_Города.ПустаяСсылка)) КАК Город,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)) КАК АдресПоставки,
	|	ЗаданиеНаПодборТовары.ДатаВыпуска
	|ИЗ
	|	РегистрНакопления.СП_ЗаданияНаПодбор.Обороты(
	|			,
	|			,
	|			,
	|			ЗаданиеНаПодбор В
	|					(ВЫБРАТЬ
	|						вт.ЗаданиеНаПодбор
	|					ИЗ
	|						втЗаданияНаПодбор КАК вт)
	|				И НЕ Номенклатура ЕСТЬ NULL ) КАК СП_ЗаданияНаПодборОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	|		ПО (ПТЛ_ПланДоставки.ЗаданиеНаПодбор = СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор)
	|			И (ПТЛ_ПланДоставки.Исключено = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (ВЫРАЗИТЬ(СП_ЗаданияНаПодборОбороты.Заказ КАК Документ.ЗаказПокупателя).Грузополучатель = КонтактнаяИнформация.Объект)
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СП_ЗаданиеНаПодбор.Товары КАК ЗаданиеНаПодборТовары
	|		ПО СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор = ЗаданиеНаПодборТовары.Ссылка
	|			И СП_ЗаданияНаПодборОбороты.Номенклатура = ЗаданиеНаПодборТовары.Номенклатура
	|			И СП_ЗаданияНаПодборОбороты.КоличествоПланОборот = ЗаданиеНаПодборТовары.Количество
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор, ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)),
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ВЫБОР
	|		КОГДА СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.КП_УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.Самовывоз)
	|			ТОГДА ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.Заказ.КП_ТранспортноеСредство, ЗНАЧЕНИЕ(Справочник.ПТЛ_ТранспортныеСредства.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПТЛ_ПланДоставки.ТранспортноеСредство, ЗНАЧЕНИЕ(Справочник.ПТЛ_ТранспортныеСредства.ПустаяСсылка))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.КП_УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.Самовывоз)
	|			ТОГДА ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ЗаданиеНаПодбор.Заказ.КП_Водитель, ЗНАЧЕНИЕ(Справочник.ПТЛ_Водители.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПТЛ_ПланДоставки.Водитель, ЗНАЧЕНИЕ(Справочник.ПТЛ_Водители.ПустаяСсылка))
	|	КОНЕЦ,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ВремяПодачиТС, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ДатаДоставки, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.Номенклатура.Код, """"),
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(СП_ЗаданияНаПодборОбороты.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.Отделение, ЗНАЧЕНИЕ(Справочник.НСИ_Отделения.ПустаяСсылка)),
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ЗаданиеНаПодбор, ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)),
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.ПТЛ_ЗаданиеНаПеревозку.ПустаяСсылка)),
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(СП_ЗаданияНаПодборОбороты.Заказ КАК Документ.ЗаказПокупателя).Грузополучатель, ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)),
	|	ПТЛ_ПланДоставки.Маршрут,
	|	ПТЛ_ПланДоставки.Рейс,
	|	ПТЛ_ПланДоставки.Регистратор.Номер,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(СП_ЗаданияНаПодборОбороты.Заказ КАК Документ.ЗаказПокупателя).Грузополучатель.НСИ_Город, ЗНАЧЕНИЕ(Справочник.НСИ_Города.ПустаяСсылка)),
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)),
	|	ЗаданиеНаПодборТовары.ДатаВыпуска,
	|	ЕСТЬNULL(ПТЛ_ПланДоставки.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПодбор
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(ДатаПрибытияТС),
	|	МАКСИМУМ(ВремяПрибытияТС),
	|	МАКСИМУМ(ДатаДоставки),
	|	МАКСИМУМ(Примечание),
	|	МАКСИМУМ(Получатель)
	|ПО
	|	ЗаданиеНаПодбор
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(мДата), мДата, Дата('20171003')));
	//Запрос.УстановитьПараметр("Дата", Дата('20170712'));
	Запрос.УстановитьПараметр("СтатусДокумента", Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен);
	Запрос.УстановитьПараметр("КП_Отделение", Справочники.Склады.НайтиПоКоду("ПРГМФ3"));
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеНаСклад);
	
	КаталогФайл = КаталогВременныхФайлов();
	//КаталогФайл = "C:\1111";
	
	мМассивЗаданийНаПодбор = Новый Массив;
	
	Рез = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если НЕ Рез.Количество() = 0 Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = Отчеты.ПТЛ_ЗаявкиНаКомплектацию.ПолучитьМакет("МакетМосква_Выгрузка");
		//Макет = ВладелецФормы.ПолучитьМакет("МакетМосква");
		ОбластьШапка	 = Макет.ПолучитьОбласть("Шапка");
		//{23.06.2016 Островерхий заявка №б/н 
		ПредставлениеОрганизации = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Справочники.ПРГ_Служебный.ОрганизацияПоУмолчанию,Новый Структура("Наименование","Выразить(Объект КАК Справочник.Организации).Наименование")).Наименование; 
		ОбластьШапка.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		//23.06.2016 Островерхий}
		ОбластьДанные	 = Макет.ПолучитьОбласть("Данные");
		
		//ОбластьШапка.Параметры.Организация = СокрЛП(Рез.Организация);
		ОбластьШапка.Параметры.Параметр_01 = "01";
		ОбластьШапка.Параметры.Параметр_02 = "00140";
		
		ТабДокумент.Вывести(ОбластьШапка);
		сч = 1;
		
		Пока Рез.Следующий() Цикл
			
			Если Сч = 1 Тогда
				ДатаДоставки = Рез.ДатаДоставки;
			КонецЕсли;
			
			Рез1 = Рез.Выбрать();
			
			мМассивЗаданийНаПодбор.Добавить(Рез.ЗаданиеНаПодбор);
			
			/// Кунов О.В., 14.07.2017 - 67920
			ЭлементСлужебногоСправочника = ПредопределенноеЗначение("Справочник.ПРГ_Служебный.СкладыВыгрузкиДатыВыпускаВФайлКомплектации");
			Если ЗначениеЗаполнено(ЭлементСлужебногоСправочника) Тогда
				ВыгружатьДатуПроизводства = (ЭлементСлужебногоСправочника.ТаблицаПараметров.Найти(Рез.ЗаданиеНаПодбор.Получатель, "Параметр") <> Неопределено);
			КонецЕсли;
			///
			
			Пока Рез1.Следующий() Цикл
				ОбластьДанные.Параметры.сч = Формат(сч, "ЧГ=0");
				/// Кунов О.В., 14.07.2017 - 67920
				НомерДокументаКонтрагента = СокрЛП(Рез1.НомерДокументаКонтрагента.Номер);
				Если Прав(НомерДокументаКонтрагента, 1) = "М" Тогда
					НомерДокументаКонтрагента = Лев(НомерДокументаКонтрагента, СтрДлина(НомерДокументаКонтрагента)-1);
				КонецЕсли;
				//ОбластьДанные.Параметры.НомДок		 = СокрЛП(Рез1.НомерДокументаКонтрагента.Номер);
				ОбластьДанные.Параметры.НомДок		 = НомерДокументаКонтрагента;
				///
				ОбластьДанные.Параметры.ДатаДок		 = Формат(Рез1.ДатаДокументаКонтрагента, "ДЛФ=Д"); 
				ОбластьДанные.Параметры.НомТС		 = СокрЛП(Рез1.НомерАвтомобиля); 
				ОбластьДанные.Параметры.ФИОВодителя	 = СокрЛП(Рез1.ФИОВодителя); 
				/// Кунов О.В., 18.07.2017 - 67920
				ОбластьДанные.Параметры.ДатаПрибытия = Формат(Рез1.ДатаДоставки, "ДЛФ=Д");
				//ОбластьДанные.Параметры.ДатаПрибытия = Формат(Рез1.ДатаПрибытияТС, "ДЛФ=Д"); 
				//ОбластьДанные.Параметры.ВремяПрибытия = Формат(Рез1.ВремяПрибытияТС, "ДЛФ=T"); 
				///
				ОбластьДанные.Параметры.Артикул		 = СокрЛП(Рез1.Артикул); 
				ОбластьДанные.Параметры.Наименование = СокрЛП(Рез1.Номенклатура) + ?(ЗначениеЗаполнено(Рез1.ХарактеристикаНоменклатуры), ", "+СокрЛП(Рез1.ХарактеристикаНоменклатуры), ""); 
				/// Кунов О.В., 27.02.2017 - 62587
				ОбластьДанные.Параметры.Количество	 = Формат(Рез1.Количество, "ЧГ=0");
				///
				
				ОбластьДанные.Параметры.ДатаВыпуска  = Формат(Рез1.ДатаВыпуска, "ДФ=dd.MM.yyyy");
				
				/// Кунов О.В., 14.07.2017 - 67920
				//ОбластьДанные.Параметры.Партия		 = ""; //СокрЛП(Рез1.СерияНоменклатуры);
				ОбластьДанные.Параметры.Партия		 = ? (ВыгружатьДатуПроизводства, Формат(Рез1.ДатаВыпуска, "ДЛФ=D"), "");
				///
				
				//{13.07.2016 Островерхий заявка №54460 
				//ОбластьДанные.Параметры.Примечание	 = СокрЛП(Рез1.Получатель) + " " + СокрЛП(Рез1.Примечание);
				ОбластьДанные.Параметры.Примечание	 = СокрЛП(Рез1.Получатель) + " " + СокрЛП(Рез1.Примечание.НСИ_Город) + " " + СокрЛП(Рез1.Примечание);
				//начало изменений 58303 добавление в файл заявки на комплектацию Москва название маршрута 21.10.2016 11:23:10 
				//Blik 130116 61126 н
				//ОбластьДанные.Параметры.МаршрутПредставление	 = Рез1.МаршрутПредставление;
				ОбластьДанные.Параметры.МаршрутПредставление	 =СокрЛП(СТрока(Рез1.Рейс))+", "+ СокрЛП(СТрока(Рез1.ПланНомер))+", "+Рез1.МаршрутПредставление;
				//Blik 130116 61126 к
				//конец изменений 
				//13.07.2016 Островерхий} 
				ТабДокумент.Вывести(ОбластьДанные);
				сч = сч + 1;
			КонецЦикла;
			//ТабДокумент.Показать();
		КонецЦикла;
		
		/// Кунов О.В., 14.07.2017 - 67920
		//01-00140-20170714-1P140717
		НомерФайлаЗаДень = 1;
		СвободныйНомерНайден = Ложь;
		Пока Не СвободныйНомерНайден Цикл
			пИмяФайла = "01-00140-" + Формат(ДатаДоставки, "ДФ=yyyyMMdd") + "-" + НомерФайлаЗаДень + "P" + Формат(ТекущаяДата(), "ДФ=ddMMyy");
			Файл = Новый Файл(СокрЛП(КаталогФайл) + "\" + СокрЛП(пИмяФайла) + ".xls");
			Если Не Файл.Существует() Тогда
				СвободныйНомерНайден = Истина;
			Иначе
				НомерФайлаЗаДень = НомерФайлаЗаДень + 1;
			КонецЕсли;
		КонецЦикла;
		//пИмяФайла = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + " Заявка на комплектацию Москва";
		///
		
		//ТабДокумент.Записать(КаталогФайл+"\"+СокрЛП(Рез.ЗаданиеНаПодбор.Получатель.Код)+"_"+СокрЛП(Рез.ЗаданиеНаПодбор.Номер)+".xls",ТипФайлаТабличногоДокумента.XLS);
		//Сообщить("Сформирован файл: "+СокрЛП(КаталогФайл)+"\"+СокрЛП(Рез.ЗаданиеНаПодбор.Получатель.Код)+"_"+СокрЛП(Рез.ЗаданиеНаПодбор.Номер)+".xls");
		ТабДокумент.Записать(СокрЛП(КаталогФайл)+"\"+СокрЛП(пИмяФайла)+".xls",ТипФайлаТабличногоДокумента.XLS);
		Сообщить("Сформирован файл: "+СокрЛП(КаталогФайл)+"\"+СокрЛП(пИмяФайла)+".xls");
		// <- Шевченков #69436 20170810   
		//Попытка
		//	Excel = Новый COMОбъект("Excel.Application");
		//	Книга = Excel.Application.Workbooks.Open(СокрЛП(КаталогФайл)+"\"+СокрЛП(пИмяФайла)+".xls");
		//	Лист = Книга.WorkSheets(1);
		//	Лист.Cells(1,1).NumberFormat = "@";
		//	Лист.Cells(3,1).NumberFormat = "@";
		//	Лист.Cells(4,1).NumberFormat = "@";
		//	Лист.Cells(1,1).Value = "01";
		//	Лист.Cells(3,1).Value = "00140";
		//	Книга.Save();
		//	Excel.Quit();
		//Исключение
		//КонецПопытки;
		
		
		Если СписокАдресатов.Количество() > 0 Тогда  
			Отправлен = Ложь;
			мИмяФайла = СокрЛП(КаталогФайл)+"\"+СокрЛП(пИмяФайла)+".xls";
			ОправитьФайл("Рассылка по заданиям на подбор",СписокАдресатов,"",мИмяФайла, Отправлен, "robot1s@progressfood.ru");
			
			Если Отправлен Тогда
				Для Каждого ТекЗадание Из мМассивЗаданийНаПодбор Цикл
					СтрокаРегистра = РегистрыСведений.ПРГ_ОтправленыеДокументы.СоздатьМенеджерЗаписи();
					СтрокаРегистра.Документ = ТекЗадание;
					СтрокаРегистра.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		// ->		
	КонецЕсли;
	
	
КонецПроцедуры
 
//

//Blik 130917 67870 н
Процедура	ФормированиеРассылкиПоЗаказам_Дегустация_ДегустацияПР()
	
	ДатаФормированияН =  ТекущаяДата()-86400*2;
	ДатаФормированияК =  ТекущаяДата();
		
	СписокВидовЗаказа = Новый СписокЗначений;
	СписокВидовЗаказа.Добавить(Перечисления.КП_ВидыЗаказовПокупателей.Дегустация);
	СписокВидовЗаказа.Добавить(Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР);
	
	СписокСостоянияРезервирования = Новый СписокЗначений;
	СписокСостоянияРезервирования.Добавить(Перечисления.АП_СтатусыЗаказов.Зарезервирован);
	СписокСостоянияРезервирования.Добавить(Перечисления.АП_СтатусыЗаказов.ЗарезервированЧастично);

	СпсАдресатов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	//Blik 181017 70933 н новый текст запроса
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ КАК Заказ,
	|	ВложенныйЗапрос.ЗаданиеНаПодбор КАК ЗаданиеНаПодбор,
	|	ВложенныйЗапрос.Документ КАК Документ,
	|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента,
	|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента.Наименование КАК НаименованиеПриказа,
	|	ВложенныйЗапрос.Заказ.КП_ВидЗаказаПокупателя КАК ВидЗаказа,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра КАК СогласующийБухгалтер,
	|	ВЫРАЗИТЬ(ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра2 КАК СТРОКА(200)) КАК ЭлАдресСогласующегоБухгалтера,
	|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента.Код,
	|	ВложенныйЗапрос.Заказ.Номер КАК НомерЗаказа,
	|	ВложенныйЗапрос.Заказ.Дата КАК ДатаЗаказа,
	|	ЗНАЧЕНИЕ(Перечисление.ПРГ_ВариантыРассылки.ОтправленоНаСогласование) КАК ВидРассылки,
	|	NULL КАК статуссогласования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Ссылка КАК Заказ,
	|		ЗаказПокупателя.АП_СтатусЗаказа КАК АП_СтатусЗаказа,
	|		ЗаказПокупателя.КП_ВидЗаказаПокупателя КАК КП_ВидЗаказаПокупателя,
	|		СП_ЗаданиеНаПодбор.Ссылка КАК ЗаданиеНаПодбор,
	|		ПРГ_ОтправленыеДокументы.Документ КАК Документ
	|	ИЗ
	|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|			ПО ЗаказПокупателя.Ссылка = ПРГ_ОтправленыеДокументы.Документ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
	|			ПО ЗаказПокупателя.Ссылка = СП_ЗаданиеНаПодбор.Заказ
	|	ГДЕ
	|		ЗаказПокупателя.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНач, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ)
	|		И ЗаказПокупателя.КП_ВидЗаказаПокупателя В(&КП_ВидЗаказаПокупателя)
	|		И ЗаказПокупателя.АП_СтатусЗаказа В(&АП_СтатусЗаказа)
	|		И НЕ ЗаказПокупателя.Ссылка В
	|					(ВЫБРАТЬ
	|						КП_СтатусыСогласованияЗаказаСрезПоследних.Документ
	|					ИЗ
	|						РегистрСведений.КП_СтатусыСогласованияЗаказа.СрезПоследних(&ДатаКон, ) КАК КП_СтатусыСогласованияЗаказаСрезПоследних
	|					ГДЕ
	|						КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеБухгалтерией = ЗНАЧЕНИЕ(Перечисление.КП_СогласованиеБухгалтерией.Согласовано))) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|		ПО ВложенныйЗапрос.КП_ВидЗаказаПокупателя = ПРГ_СлужебныйТаблицаПараметров.Параметр
	|ГДЕ
	|	ВложенныйЗапрос.Документ ЕСТЬ NULL 
	|	И НЕ ВложенныйЗапрос.ЗаданиеНаПодбор ЕСТЬ NULL 
	|	И ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""ПолучателиРассылкиЗаказовДегустация_ПР""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.ЗаданиеНаПодбор,
	|	ВложенныйЗапрос.Документ,
	|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента,
	|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента.Наименование,
	|	ВложенныйЗапрос.Заказ.КП_ВидЗаказаПокупателя,
	|	ВложенныйЗапрос.Заказ.Ответственный,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200)),
	|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента.Код,
	|	ВложенныйЗапрос.Заказ.Номер,
	|	ВложенныйЗапрос.Заказ.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ПРГ_ВариантыРассылки.Согласовано),
	|	ВложенныйЗапрос.Заказ.КП_СогласованиеБухгалтерией
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Ссылка КАК Заказ,
	|		ЗаказПокупателя.АП_СтатусЗаказа КАК АП_СтатусЗаказа,
	|		ЗаказПокупателя.КП_ВидЗаказаПокупателя КАК КП_ВидЗаказаПокупателя,
	|		СП_ЗаданиеНаПодбор.Ссылка КАК ЗаданиеНаПодбор,
	|		ПРГ_ОтправленыеДокументы.Документ КАК Документ
	|	ИЗ
	|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	|			ПО ЗаказПокупателя.Ссылка = ПРГ_ОтправленыеДокументы.Документ
	|				И (НЕ ПРГ_ОтправленыеДокументы.ВариантРассылки = ЗНАЧЕНИЕ(Перечисление.ПРГ_ВариантыРассылки.ОтправленоНаСогласование))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
	|			ПО ЗаказПокупателя.Ссылка = СП_ЗаданиеНаПодбор.Заказ
	|	ГДЕ
	|		ЗаказПокупателя.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНач, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ)
	|		И ЗаказПокупателя.КП_ВидЗаказаПокупателя В(&КП_ВидЗаказаПокупателя)
	|		И ЗаказПокупателя.АП_СтатусЗаказа В(&АП_СтатусЗаказа)
	|		И ЗаказПокупателя.Ссылка В
	|				(ВЫБРАТЬ
	|					КП_СтатусыСогласованияЗаказаСрезПоследних.Документ
	|				ИЗ
	|					РегистрСведений.КП_СтатусыСогласованияЗаказа.СрезПоследних(&ДатаКон, ) КАК КП_СтатусыСогласованияЗаказаСрезПоследних
	|				ГДЕ
	|					(КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеБухгалтерией = ЗНАЧЕНИЕ(Перечисление.КП_СогласованиеБухгалтерией.Согласовано)
	|						ИЛИ КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеБухгалтерией = ЗНАЧЕНИЕ(Перечисление.КП_СогласованиеБухгалтерией.НеСогласован)))) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|		ПО ВложенныйЗапрос.КП_ВидЗаказаПокупателя = ПРГ_СлужебныйТаблицаПараметров.Параметр
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ВложенныйЗапрос.Заказ.Ответственный.ФизЛицо = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	ВложенныйЗапрос.Документ ЕСТЬ NULL 
	|	И НЕ ВложенныйЗапрос.ЗаданиеНаПодбор ЕСТЬ NULL 
	|	И ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""ПолучателиРассылкиЗаказовДегустация_ПР""";
	//Blik 181017 70933 к
	Запрос.УстановитьПараметр("ДатаНач",ДатаФормированияН);
	Запрос.УстановитьПараметр("ДатаКон",ДатаФормированияК);
	Запрос.УстановитьПараметр("КП_ВидЗаказаПокупателя",СписокВидовЗаказа);
	Запрос.УстановитьПараметр("АП_СтатусЗаказа",СписокСостоянияРезервирования);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		отправлено = Ложь;
		ТемаПисьма="Оповещение о необходимости  согласования заказа";
		//Blik 181017 70933 н		
		Если  Результат.ВидРассылки = Перечисления.ПРГ_ВариантыРассылки.ОтправленоНаСогласование Тогда
			ТекстПисьма = "Добрый день!
			|Информируем Вас о необходимости согласования заказа покупателя. "+Символы.ПС +
			"Номер заказа покупателя " + СокрЛП(СТрока(Результат.НомерЗаказа)) +" от "+ Формат(Результат.ДатаЗаказа,"ДФ=dd.MM.yyyy")+ " по "+ СокрЛП(СТрока(Результат.НаименованиеПриказа))+" ."+Символы.ПС +"
			|
			|Данное письмо отправлено автоматически.";
			СпсАдресатов.Добавить(СокрЛП(СТрока(Результат.ЭлАдресСогласующегоБухгалтера)));  //закком обработка тестовая
			СпсАдресатов.Добавить(СокрЛП(Строка("IKalmatskaya@progressfood.ru")));//временно для проверки
			Сообщить(ТекстПисьма);
			//Сообщить("получатель по запросу "+СокрЛП(СТрока(Результат.ЭлАдресСогласующегоБухгалтера)));
		КонецЕсли;
		Если  Результат.ВидРассылки = Перечисления.ПРГ_ВариантыРассылки.Согласовано Тогда
			ТекстПисьма = "Добрый день!
			|Информируем Вас что заказ покупателя был "+ СокрЛП(СТрока(Результат.статуссогласования))+ Символы.ПС +
			"Номер заказа покупателя " + СокрЛП(СТрока(Результат.НомерЗаказа)) +" от "+ Формат(Результат.ДатаЗаказа,"ДФ=dd.MM.yyyy")+ " по "+ СокрЛП(СТрока(Результат.НаименованиеПриказа))+" ."+Символы.ПС +"
			|
			|Данное письмо отправлено автоматически.";
			СпсАдресатов.Добавить(СокрЛП(СТрока(Результат.ЭлАдресСогласующегоБухгалтера)));  //закком обработка тестовая
			СпсАдресатов.Добавить(СокрЛП(Строка("IKalmatskaya@progressfood.ru")));//временно для проверки
			Сообщить(ТекстПисьма);
			//Сообщить("получатель по запросу "+СокрЛП(СТрока(Результат.ЭлАдресСогласующегоБухгалтера)));
		КонецЕсли;
		//Blik 181017 70933 к
		Попытка
			ПРГ_Регламентый.ОправитьФайл(ТемаПисьма,СпсАдресатов,ТекстПисьма);
			отправлено = Истина;
		Исключение 
		конецПопытки;
		Если отправлено Тогда
			//Blik 181017 70933 н
			наборзаписей=РегистрыСведений.ПРГ_ОтправленыеДокументы.СоздатьНаборЗаписей();	
			нов=наборзаписей.Добавить();
			нов.Документ=Результат.Заказ;
			нов.ВариантРассылки =  Результат.ВидРассылки;
			наборзаписей.Записать(ложь);
			//ЗаписатьДокументПоОтправке(Результат.Заказ); 
			//Blik 181017 70933 к
			
		КонецЕсли;
		СпсАдресатов.Очистить();
	КонецЦИкла;
	
КонецПроцедуры


Процедура ПРГ_КруглосуточнаяРассылка() Экспорт
	// Вставить содержимое обработчика.
	// <- Шевченков #69694 20170925
	РассылкиИнформацииПоЗаявкамНаКомплектацию();
	// ->
	
КонецПроцедуры
//Blik 130917 67870 к
