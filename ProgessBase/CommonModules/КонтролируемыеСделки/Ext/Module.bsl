Процедура ЗаполнитьГраницыКонтролируемости() Экспорт
	
	Записи = РегистрыСведений.ГраницыКонтролируемостиСделок.СоздатьНаборЗаписей();
	Записи.Записать();
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20120101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛица;
	Запись.ПредельнаяСумма = 3000000000;

	Запись = Записи.Добавить();
	Запись.Период = Дата('20130101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛица;
	Запись.ПредельнаяСумма = 2000000000;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20140101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛица;
	Запись.ПредельнаяСумма = 1000000000;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20120101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаНаСпецрежимах;
	Запись.ПредельнаяСумма = 100000000;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20120101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаОсобаяЭкономическаяЗона;
	Запись.ПредельнаяСумма = 999999999999999;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20140101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаОсобаяЭкономическаяЗона;
	Запись.ПредельнаяСумма = 60000000;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20120101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаПлательщикиНалогаНаПрибыль;
	Запись.ПредельнаяСумма = 60000000;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20120101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаПлательщикиНДПИ;
	Запись.ПредельнаяСумма = 60000000;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20120101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.МинимальнаяСуммаДляВключенияВУведомление;
	Запись.ПредельнаяСумма = 100000000;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20130101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.МинимальнаяСуммаДляВключенияВУведомление;
	Запись.ПредельнаяСумма = 80000000;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20140101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.МинимальнаяСуммаДляВключенияВУведомление;
	Запись.ПредельнаяСумма = 0;
	
	Запись = Записи.Добавить();
	Запись.Период = Дата('20120101');
	Запись.ОсобенностьОтнесенияСделкиККонтролируемой = Перечисления.ОсобенностиОтнесенияСделокККонтролируемым.НезависимыеИностранныеЛица;
	Запись.ПредельнаяСумма = 60000000;
	
	Записи.Записать();
	
КонецПроцедуры

Процедура СтрокаВПараметрыМакета(Строка, ПрефиксПараметра, ПараметрыМакета, ДлинаОбластиМакета)
	
	СтрокаПараметра = ВРЕГ(Строка);
	
	ДлинаСтроки = Мин(СтрДлина(СтрокаПараметра), ДлинаОбластиМакета);
	Индекс = 1;
	
	Пока Индекс <= ДлинаСтроки Цикл 
		ИмяПараметра = ПрефиксПараметра + Индекс;
		ПараметрыМакета[ИмяПараметра] = Сред(СтрокаПараметра, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЧислоВНомерСтраницы(Число, ПрефиксПараметра, ПараметрыМакета)
	
	СтрокаЧисла = Формат(Число, "ЧЦ=5; ЧДЦ=0; ЧН=0; ЧВН=; ЧГ=0");
	Для Позиция = 1 По СтрДлина(СтрокаЧисла) Цикл
		ИмяПараметра = ПрефиксПараметра + Позиция;
		ПараметрыМакета[ИмяПараметра] = Сред(СтрокаЧисла, Позиция, 1);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЧислоВПараметрыМакета(Число, ПрефиксПараметра, ПараметрыМакета, КоличествоЗнаков)
	
	СтрокаЧисла = Формат(Число, "ЧН=0; ЧГ=0");
	ДлинаСтроки = СтрДлина(СтрокаЧисла);
	
	Индекс = 1;
	Пока Индекс <= ДлинаСтроки Цикл
		ИмяПараметра = ПрефиксПараметра + Индекс;
		ПараметрыМакета[ИмяПараметра] = Сред(СтрокаЧисла, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДатаВПараметрыМакета( Дата, ПрефиксПараметра, ПараметрыМакета)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Возврат;
	КонецЕсли;
	
	День = День(Дата);
	Месяц = Месяц(Дата);
	Год = Год(Дата);
	
	Если День < 10 Тогда
		ПараметрыМакета[ПрефиксПараметра + "1"] = "0";
		ПараметрыМакета[ПрефиксПараметра + "2"] = "" + День;
	Иначе
		ПараметрыМакета[ПрефиксПараметра + "1"] = "" + Цел(День/10);
		ПараметрыМакета[ПрефиксПараметра + "2"] = "" + День%10;
	КонецЕсли;
	
	Если Месяц < 10 Тогда
		ПараметрыМакета[ПрефиксПараметра + "3"] = "0";
		ПараметрыМакета[ПрефиксПараметра + "4"] = "" + Месяц;
	Иначе
		ПараметрыМакета[ПрефиксПараметра + "3"] = "1";
		ПараметрыМакета[ПрефиксПараметра + "4"] = "" + (Месяц - 10);
	КонецЕсли;
	
	ГТ = Цел(Год/1000);
	ГС = Цел((Год%1000)/100);
	ГД = Цел((Год%100)/10);
	ГЕ = Год%10;
	
	ПараметрыМакета[ПрефиксПараметра + "5"] = "" + ГТ;
	ПараметрыМакета[ПрефиксПараметра + "6"] = "" + ГС;
	ПараметрыМакета[ПрефиксПараметра + "7"] = "" + ГД;
	ПараметрыМакета[ПрефиксПараметра + "8"] = "" + ГЕ;

КонецПроцедуры

Функция РазложитьОКВЭДВСтроку(ИсходныйКодСТочками)
	
	Результат = "";
	ДлиннаИсходнойСтроки = СтрДлина(ИсходныйКодСТочками);
	ИндексПервойТочки = Найти(ИсходныйКодСТочками, ".");
	Если ИндексПервойТочки = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	ИндексВторойТочки = Найти(Прав(ИсходныйКодСТочками, ДлиннаИсходнойСтроки - ИндексПервойТочки), ".");
	ПерваяПодстрока = Лев(ИсходныйКодСТочками, Мин(ИндексПервойТочки-1, 2));
	ВтораяПодстрока = ""; ТретьяПодстрока = "";
	
	Если ИндексВторойТочки = 0 Тогда
		ВтораяПодстрока = Лев(Прав(ИсходныйКодСТочками, ДлиннаИсходнойСтроки - ИндексПервойТочки), 2);
	Иначе
		ВтораяПодстрока = Лев(Прав(ИсходныйКодСТочками, ДлиннаИсходнойСтроки - ИндексПервойТочки), Мин(ИндексВторойТочки - 1, 2));
		ТретьяПодстрока = Лев(Прав(ИсходныйКодСТочками, ДлиннаИсходнойСтроки - ИндексПервойТочки - ИндексВторойТочки), 2);
	КонецЕсли;
	
	Длинна = СтрДлина(ПерваяПодстрока);
	Если Длинна=0 Тогда
		ПерваяПодстрока = "  ";
	ИначеЕсли Длинна =1 Тогда
		ПерваяПодстрока = " " + ПерваяПодстрока;
	КонецЕсли;
	
	Длинна = СтрДлина(ВтораяПодстрока);
	Если Длинна=0 Тогда
		ВтораяПодстрока = "  ";
	ИначеЕсли Длинна =1 Тогда
		ВтораяПодстрока = " " + ВтораяПодстрока;
	КонецЕсли;
	
	Длинна = СтрДлина(ТретьяПодстрока);
	Если Длинна=0 Тогда
		ТретьяПодстрока = "  ";
	ИначеЕсли Длинна =1 Тогда
		ТретьяПодстрока = " " + ТретьяПодстрока;
	КонецЕсли;
	
	Возврат ПерваяПодстрока + ВтораяПодстрока + ТретьяПодстрока;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляЛиста1А(Лист1А, Номер, ОбщийНумераторСтраниц, СтруктураШапки, Количество1Б) Экспорт 
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Страница1А");
	Макет.Параметры.Сделка = Лист1А.Сделка;
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(ОбщийНумераторСтраниц, "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(Номер, "НомерЛиста1А_", Макет.Параметры, 6);
	
	Макет.Параметры.П100 = Лист1А.Строка100Взаимозависимость;
	
	Макет.Параметры.П121 = Лист1А.Строка121СтороныВзаимозависимыПоКодексу;
	Макет.Параметры.П122 = Лист1А.Строка122СделкаВОбластиВнешнейТорговли;
	Макет.Параметры.П123 = Лист1А.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением;
	Макет.Параметры.П124 = Лист1А.Строка124СделкаСНезависимымПосредником;
	
	Макет.Параметры.П131 = Лист1А.Строка131СуммаДоходовПоСделкамПревышаетПредел;
	Макет.Параметры.П132 = Лист1А.Строка132СделкаСПлательщикомНДПИ;
	Макет.Параметры.П133 = Лист1А.Строка133СделкаСКонтрагентомНаСпецрежимах;
	Макет.Параметры.П134 = Лист1А.Строка134СделкаСПлательщикомНалогаНаПрибыль;
	Макет.Параметры.П135 = Лист1А.Строка135СделкаСРезидентомОЭЗ;
	
	Макет.Параметры.П200 = ?(Количество1Б > 1, "1", "0");
	СтрокаВПараметрыМакета(Лист1А.Строка210КодНаименованияСделки, "П210_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Лист1А.Строка211КодСтороныСделки, "П211_", Макет.Параметры, 3);
	Макет.Параметры.П220 = Лист1А.Строка220ПризнакОпределенияЦеныСделки;
	ВРег220 = ВРег(Лист1А.Строка220ПризнакОпределенияЦеныСделки);
	
	Макет.Параметры.П2201 = Лист1А.Строка220_1Комментарий;
	Макет.Параметры.П230 = Лист1А.Строка230КодОпределенияЦены;
	Макет.Параметры.П2301 = Лист1А.Строка230_1Комментарий;
	СтрокаВПараметрыМакета(Лист1А.Строка240КодМетодовЦенообразования, "П240_", Макет.Параметры, 2);
	Макет.Параметры.П2401 = Лист1А.Строка240_1Комментарий;
	
	Макет.Параметры.П251 = Лист1А.Строка251;
	Макет.Параметры.П252 = Лист1А.Строка252;
	Макет.Параметры.П253 = Лист1А.Строка253;
	Макет.Параметры.П254 = Лист1А.Строка254;
	Макет.Параметры.П255 = Лист1А.Строка255;
	Макет.Параметры.П256 = Лист1А.Строка256;
	Макет.Параметры.П257 = Лист1А.Строка257;
	Макет.Параметры.П258 = Лист1А.Строка258;
	Макет.Параметры.П259 = Лист1А.Строка259;
	
	ЧислоВПараметрыМакета(Лист1А.Строка260КоличествоУчастниковСделки, "П260_", Макет.Параметры, 3);
	Макет.Параметры.П2601 = Лист1А.Строка260_1Комментарий;
	
	ЧислоВПараметрыМакета(Лист1А.Строка300СуммаДоходов, "П300_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1А.Строка301СуммаРегулируемыхДоходов, "П301_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1А.Строка310СуммаРасходов, "П310_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1А.Строка311СуммаРегулируемыхРасходов, "П311_", Макет.Параметры, 15);

	ОбщийНумераторСтраниц = ОбщийНумераторСтраниц + 1;
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляЛиста1Б(Лист1Б, Номер, ОбщийНумераторСтраниц, СтруктураШапки) Экспорт 
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Страница1Б");
	Макет.Параметры.Сделка = Лист1Б.Сделка;
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(ОбщийНумераторСтраниц, "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(Номер, "НомерСделки1А_", Макет.Параметры, 6);
	ОбщийНумераторСтраниц = ОбщийНумераторСтраниц + 1;
	
	Макет.Параметры.П020 = "" + Лист1Б.Строка020ТипПредмета;
	СтрокаВПараметрыМакета(Лист1Б.Строка030НаименованиеПредмета, "П030_", Макет.Параметры, 156);
	СтрокаВПараметрыМакета(Лист1Б.Строка040КодПоТНВЭД, "П040_", Макет.Параметры, 10);
	СтрокаВПараметрыМакета(Лист1Б.Строка043КодПоОКП, "П043_", Макет.Параметры, 6);
	СтрокаВПараметрыМакета(РазложитьОКВЭДВСтроку(Лист1Б.Строка045КодОКВЭД), "П045_", Макет.Параметры, 6);
	
	ЧислоВПараметрыМакета(Лист1Б.Строка050НомерУчастникаСделки, "П050_", Макет.Параметры, 4);
	СтрокаВПараметрыМакета(Лист1Б.Строка060НомерДоговора, "П060_", Макет.Параметры, 117);
	ДатаВПараметрыМакета(Лист1Б.Строка065ДатаДоговора, "П065_", Макет.Параметры);
	
	СтрокаВПараметрыМакета(Лист1Б.Строка070КодСтраныПроисхождения, "П070_", Макет.Параметры, 3);
	
	СтрокаВПараметрыМакета(Лист1Б.Строка080КодСтраныОтправки, "П080_С_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Лист1Б.Строка080КодРегионаОтправки, "П080_Р_", Макет.Параметры, 2);
	СтрокаВПараметрыМакета(Лист1Б.Строка080ГородОтправки, "П080_Г_", Макет.Параметры, 31);
	СтрокаВПараметрыМакета(Лист1Б.Строка080НаселенныйПунктОтправки, "П080_Н_", Макет.Параметры, 31);
	
	СтрокаВПараметрыМакета(Лист1Б.Строка090КодСтраныСовершенияСделки, "П090_С_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Лист1Б.Строка090КодРегионаСовершенияСделки, "П090_Р_", Макет.Параметры, 2);
	СтрокаВПараметрыМакета(Лист1Б.Строка090ГородСовершенияСделки, "П090_Г_", Макет.Параметры, 31);
	СтрокаВПараметрыМакета(Лист1Б.Строка090НаселенныйПунктСовершенияСделки, "П090_Н_", Макет.Параметры, 31);
	
	СтрокаВПараметрыМакета(Лист1Б.Строка100КодУсловийПоставки, "П100_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Лист1Б.Строка110КодЕдиницыИзмерения, "П110_", Макет.Параметры, 3);
	
	ЧислоВПараметрыМакета(Лист1Б.Строка120Количество, "П120_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1Б.Строка130Цена, "П130_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1Б.Строка140Стоимость, "П140_", Макет.Параметры, 15);
	ДатаВПараметрыМакета(Лист1Б.Строка150ДатаСовершения, "П150_", Макет.Параметры);
	
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляРаздела2(Раздел2, ДанныеРаздела2, Номер, ОбщийНумераторСтраниц, СтруктураШапки) Экспорт 
	
	СведенияОКонтрагенте = ДанныеРаздела2.Найти(Раздел2.Контрагент, "Контрагент");
	Если СведенияОКонтрагенте = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Раздел2");
	Макет.Параметры.Сделка = Раздел2.Сделка;
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(ОбщийНумераторСтраниц, "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(Номер, "П010_", Макет.Параметры, 6);
	ЧислоВПараметрыМакета(СведенияОКонтрагенте.НомерКонтрагента, "П015_", Макет.Параметры, 4);
	ОбщийНумераторСтраниц = ОбщийНумераторСтраниц + 1;
	
	Макет.Параметры.П020 = "" + СведенияОКонтрагенте.Строка020ТипОрганизации;
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка030КакКодСтраныРегистрации, "П030_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка040Наименование, "П040_", Макет.Параметры, 160);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка050ИНН, "П050_", Макет.Параметры, 10);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка060КПП, "П060_", Макет.Параметры, 9);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка070РегНомерВСтрокеРегистрации, "П070_", Макет.Параметры, 50);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка080КодНалогВСтранеРегистрации, "П080_", Макет.Параметры, 50);
	
	Если СведенияОКонтрагенте.Строка020ТипОрганизации = 2 Тогда
		СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка090АдресИностраннойОрганизации, "П090_", Макет.Параметры, 240);
	КонецЕсли;
		
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляРаздела3(Раздел3, ДанныеРаздела3, Номер, ОбщийНумераторСтраниц, СтруктураШапки, ДатаКонца) Экспорт 
	
	СведенияОФизическомЛице = ДанныеРаздела3.Найти(Раздел3.Контрагент, "Контрагент");
	Если СведенияОФизическомЛице = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Раздел3");
	Макет.Параметры.Сделка = Раздел3.Сделка;
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(ОбщийНумераторСтраниц, "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(Номер, "НомерСделки_", Макет.Параметры, 6);
	ЧислоВПараметрыМакета(СведенияОФизическомЛице.НомерКонтрагента, "НомерУчастника_", Макет.Параметры, 4);
	ОбщийНумераторСтраниц = ОбщийНумераторСтраниц + 1;
	
	Макет.Параметры.КодВидаДеятельности = СведенияОФизическомЛице.Строка020КодВидаДеятельности;
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.Строка030ИНН, "ИННФизлица_", Макет.Параметры, 12);
	
	Контрагент = СведенияОФизическомЛице.Контрагент;
	ФизическоеЛицо = СведенияОФизическомЛице.ФизическоеЛицо;
	
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.Фамилия, "Фамилия_", Макет.Параметры, 33);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.Имя, "Имя_", Макет.Параметры, 33);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.Отчество, "Отчество_", Макет.Параметры, 33);
	ДатаВПараметрыМакета(ФизическоеЛицо.ДатаРождения, "ДатаРождения_", Макет.Параметры);
	СтрокаВПараметрыМакета(ФизическоеЛицо.МестоРождения, "МестоРождения_", Макет.Параметры, 66);
	
	Если ЗначениеЗаполнено(СведенияОФизическомЛице.ГражданствоФизЛицСтрана) 
		И СведенияОФизическомЛице.ГражданствоФизЛицСтрана <> Справочники.КлассификаторСтранМира.ЛицоБезГражданства Тогда 
		
		Макет.Параметры.Гражданство = "1";
		СтрокаВПараметрыМакета(СведенияОФизическомЛице.ГражданствоФизЛицСтрана.Код, "КодОКСМ_", Макет.Параметры, 3);
		
	Иначе
		Макет.Параметры.Гражданство = "2";
	КонецЕсли;
	
	СтрокаВПараметрыМакета(КонтролируемыеСделкиПовтИсп.ПолучитьКодВидаДокументаПоВидуДокумента(СведенияОФизическомЛице.ДокументВид),
								"КодВидаДокумента_", Макет.Параметры, 2);
	
								
	Если ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументСерия) Или ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументНомер) Тогда 
		СтрокаВПараметрыМакета(СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер, "СерияНомер_", Макет.Параметры, 25);
	КонецЕсли;
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.ДокументКемВыдан, "ОрганВыдвшийДокумент_", Макет.Параметры, 80);
	ДатаВПараметрыМакета(СведенияОФизическомЛице.ДокументДатаВыдачи, "ДатаВыдачи_", Макет.Параметры);
	
	Если ЗначениеЗаполнено(СведенияОФизическомЛице.ГражданствоФизЛицСтрана) 
		И СведенияОФизическомЛице.ГражданствоФизЛицСтрана <> Справочники.КлассификаторСтранМира.ЛицоБезГражданства Тогда 
		Макет.Параметры.МестоЖительства = "1";
	Иначе
		Макет.Параметры.МестоЖительства = "2";
	КонецЕсли;
	
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияПоле1, "Индекс_", Макет.Параметры, 6);
	СтрокаВПараметрыМакета(РегламентированнаяОтчетность.КодРегионаПоНазванию(СведенияОФизическомЛице.КонтактнаяИнформацияПоле2), "РегионКод_", Макет.Параметры, 2);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияПоле3, "Район_", Макет.Параметры, 30);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияПоле4, "Город_", Макет.Параметры, 30);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияПоле5, "НаселенныйПункт_", Макет.Параметры, 30);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияПоле6, "Улица_", Макет.Параметры, 30);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияПоле7, "Дом_", Макет.Параметры, 8);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияПоле8, "Корпус_", Макет.Параметры, 8);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияПоле9, "Квартира_", Макет.Параметры, 8);
	
	
	Если ЗначениеЗаполнено(СведенияОФизическомЛице.ГражданствоФизЛицСтрана) 
		И СведенияОФизическомЛице.ГражданствоФизЛицСтрана <> Справочники.КлассификаторСтранМира.ЛицоБезГражданства Тогда 
		НаименованиеСтраны = СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФПоле1;
		Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
			НайденнаяСтрана = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НаименованиеСтраны);
			Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
				СтрокаВПараметрыМакета(НайденнаяСтрана.Код, "КодСтраныОКСМ_", Макет.Параметры, 3);
				СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФПредставление, "АдресЗаПределамиРФ_", Макет.Параметры, 160);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляЛиста1(Уведомление, ОбщийНумераторСтраниц, СтруктураШапки, ВсегоЛистов) Экспорт 
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Лист1");
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(ОбщийНумераторСтраниц, "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(ВсегоЛистов, "СтраницВсего_", Макет.Параметры, 5);
	ОбщийНумераторСтраниц = ОбщийНумераторСтраниц + 1;
	
	Организация = Уведомление.Организация;
	ОбъектУведомления = Уведомление.ПолучитьОбъект();
	СведенияОбОрганизации = ОбъектУведомления.СведенияОбОрганизации();
	СведенияОбОрганизации.Вставить("ДатаДок", ТекущаяДатаСеанса());
	ОбъектУведомления.ДобавитьСведенияОПодписанте(СведенияОбОрганизации);
	
	ТелефонОрганизации = СтрЗаменить(СведенияОбОрганизации.ТелОрганизации.Представление, " ", "");
	СтрокаВПараметрыМакета(ТелефонОрганизации, "НомерКонтактногоТелефона_", Макет.Параметры, 20);
	ЧислоВПараметрыМакета(Уведомление.НомерКорректировки, "НомерКорректировки_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(СтруктураШапки.КодНалоговогоОргана, "КодНО_", Макет.Параметры, 4);
	СтрокаВПараметрыМакета("" + Формат(Год(Уведомление.ОтчетныйГод), "ЧЦ=4; ЧГ=0"), "ОтчетныйГод_", Макет.Параметры, 4);
	СтрокаВПараметрыМакета(СтруктураШапки.КодМестаПредставления, "КодМестаПредставления_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Уведомление.Организация.КодПоОКАТО, "КодПоОКАТО_", Макет.Параметры, 11);
	СтрокаВПараметрыМакета(РазложитьОКВЭДВСтроку(Организация.КодОКВЭД), "ОКВЭД_", Макет.Параметры, 6);
	СтрокаВПараметрыМакета(Организация.НаименованиеПолное, "Налогоплательщик_", Макет.Параметры, 160);
	
	СтрокаВПараметрыМакета(СведенияОбОрганизации.ПрПодп, "ПрПодп_", Макет.Параметры, 1);
	Если СведенияОбОрганизации.Свойство("ПодпФамилия") Тогда
		СтрокаВПараметрыМакета(СведенияОбОрганизации.ПодпФамилия, "ОргПодписантФамилия_", Макет.Параметры, 20);
	КонецЕсли;
	Если СведенияОбОрганизации.Свойство("ПодпИмя") Тогда
		СтрокаВПараметрыМакета(СведенияОбОрганизации.ПодпИмя, "ОргПодписантИмя_", Макет.Параметры, 20);
	КонецЕсли;
	Если СведенияОбОрганизации.Свойство("ПодпОтчество") Тогда
		СтрокаВПараметрыМакета(СведенияОбОрганизации.ПодпОтчество, "ОргПодписантОтчество_", Макет.Параметры, 20);
	КонецЕсли;
	Если СведенияОбОрганизации.Свойство("НаимДокПодп") Тогда
		СтрокаВПараметрыМакета(СведенияОбОрганизации.НаимДокПодп, "ДокУпПред_", Макет.Параметры, 40);
	КонецЕсли;
	Если СведенияОбОрганизации.Свойство("НаимОргПодп") Тогда
		СтрокаВПараметрыМакета(СведенияОбОрганизации.НаимОргПодп, "ОргУп_", Макет.Параметры, 160);
	КонецЕсли;
	
	ДатаВПараметрыМакета(ТекущаяДатаСеанса(), "ДатаПодписи", Макет.Параметры);
	
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляЛиста2(Уведомление, ОбщийНумераторСтраниц, СтруктураШапки) Экспорт 
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Лист2");
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(ОбщийНумераторСтраниц, "СчетчикСтраниц_", Макет.Параметры);
	ОбщийНумераторСтраниц = ОбщийНумераторСтраниц + 1;
	
	СведенияОбУведомлении = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Уведомление, "Организация, ОтчетныйГод");
	Организация = СведенияОбУведомлении.Организация;
	ДатаОкончания = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	
	ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Уведомление, "ИндивидуальныйПредприниматель");
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда 
		Возврат Макет;
	КонецЕсли;
	
	Записи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	Записи.Объект = ФизЛицо;
	Записи.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Записи.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица;
	Записи.Прочитать();
	
	Если ЗначениеЗаполнено(Записи.Объект) Тогда 
		
		Макет.Параметры.МестоЖительства = "1";
		СтрокаВПараметрыМакета(Записи.Поле1, "Индекс_", Макет.Параметры, 6);
		СтрокаВПараметрыМакета(РегламентированнаяОтчетность.КодРегионаПоНазванию(Записи.Поле2), "РегионКод_", Макет.Параметры, 2);
		СтрокаВПараметрыМакета(Записи.Поле3, "Район_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(Записи.Поле4, "Город_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(Записи.Поле5, "НаселенныйПункт_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(Записи.Поле6, "Улица_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(Записи.Поле7, "Дом_", Макет.Параметры, 8);
		СтрокаВПараметрыМакета(Записи.Поле8, "Корпус_", Макет.Параметры, 8);
		СтрокаВПараметрыМакета(Записи.Поле9, "Квартира_", Макет.Параметры, 8);
		
	КонецЕсли;
	
	Записи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	Записи.Объект = ФизЛицо;
	Записи.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Записи.Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица;
	Записи.Прочитать();
	
	Если ЗначениеЗаполнено(Записи.Объект) Тогда 
		
		НаименованиеСтраны = Записи.Поле1;
		Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
			НайденнаяСтрана = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НаименованиеСтраны);
			Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
				СтрокаВПараметрыМакета(НайденнаяСтрана.Код, "КодСтраныОКСМ_", Макет.Параметры, 3);
				СтрокаВПараметрыМакета(Записи.Представление, "АдресЗаПределамиРФ_", Макет.Параметры, 160);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Срез = РегистрыСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(ДатаОкончания, Новый Структура("ФизЛицо", ФизЛицо));
	Если Срез.Количество() > 0 Тогда 
		СтрокаСреза = Срез[0];
		ПредопределенныйИмя = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьИмяПредопределенного(СтрокаСреза.ДокументВид);
		Если ЗначениеЗаполнено(ПредопределенныйИмя) и СтрДлина(ПредопределенныйИмя) = 6 Тогда 
			СтрокаВПараметрыМакета(Прав(ПредопределенныйИмя, 2), "КодВидаДокумента_", Макет.Параметры, 2);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСреза.ДокументСерия) Или ЗначениеЗаполнено(СтрокаСреза.ДокументНомер) Тогда 
			СтрокаВПараметрыМакета(СтрокаСреза.ДокументСерия + " " + СтрокаСреза.ДокументНомер, "СерияНомер_", Макет.Параметры, 25);
		КонецЕсли;
		СтрокаВПараметрыМакета(СтрокаСреза.ДокументКемВыдан, "ОрганВыдвшийДокумент_", Макет.Параметры, 80);
		ДатаВПараметрыМакета(СтрокаСреза.ДокументДатаВыдачи, "ДатаВыдачи_", Макет.Параметры);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ПолучитьЛистыУведомления(Уведомление, Лист1АДляПечати = Неопределено) Экспорт
	
	Реквизиты = Новый Структура("ОтчетныйГод, ЮрФизЛицо",
								"ОтчетныйГод", "Организация.ЮрФизЛицо");
	СведенияОбУведомлении = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Уведомление, Реквизиты);
	
	ДатаАктуальностиСведений = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УведомлениеОКонтролируемойСделке", Уведомление);
	Запрос.УстановитьПараметр("ДатаАктуальностиСведений", ДатаАктуальностиСведений);
	Запрос.Текст = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстЗапросаПоКонтролируемымСделкам();
	Если Лист1АДляПечати <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ КонтролируемаяСделка.ПометкаУдаления", "И НЕ КонтролируемаяСделка.ПометкаУдаления И КонтролируемаяСделка.Ссылка = &Лист1АДляПечати");
		Запрос.УстановитьПараметр("Лист1АДляПечати", Лист1АДляПечати);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Листы1А.*
	|ИЗ
	|	Листы1А КАК Листы1А
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Листы1Б.*
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|УПОРЯДОЧИТЬ ПО
	|	Листы1Б.НомерЛиста1А, Листы1Б.НомерСтроки
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел2.*
	|ИЗ
	|	Раздел2 КАК Раздел2
	|УПОРЯДОЧИТЬ ПО
	|	Раздел2.Строка040Наименование
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел3.*
	|ИЗ
	|	Раздел3 КАК Раздел3
	|УПОРЯДОЧИТЬ ПО
	|	Раздел3.Фамилия, Раздел3.Имя, Раздел3.Отчество;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Контрагент
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Контрагент
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А";
	
	Результат = Запрос.ВыполнитьПакет();
	Листы1А = Результат[0].Выгрузить(); 
	Листы1Б = Результат[1].Выгрузить(); 
	Раздел2 = Результат[2].Выгрузить(); 
	Раздел3 = Результат[3].Выгрузить();
	Листы2 = Результат[4].Выгрузить(); 
	Листы3 = Результат[5].Выгрузить();

	Листы1А.Индексы.Добавить("Сделка");
	Листы1Б.Индексы.Добавить("Сделка");
	Раздел2.Индексы.Добавить("Контрагент");
	Раздел3.Индексы.Добавить("Контрагент");
	Листы2.Индексы.Добавить("Сделка");
	Листы3.Индексы.Добавить("Сделка");
	
	Раздел2.Колонки.Добавить("НомерКонтрагента", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(4,0)));
	Раздел3.Колонки.Добавить("НомерКонтрагента", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(4,0)));
	
	НомерКонтрагента = 1;
	Для Каждого Контрагент Из Раздел2 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;
	Для Каждого Контрагент Из Раздел3 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;

	
	ТипНомераСтраницы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Листы1А.Колонки.Добавить("НомерЛиста", ТипНомераСтраницы);
	Листы1А.Колонки.Добавить("Количество1Б", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Листы1Б.Колонки.Добавить("НомерЛиста", ТипНомераСтраницы);
	Листы1Б.Колонки.Добавить("Строка050НомерУчастникаСделки", 
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Листы2.Колонки.Добавить("НомерЛиста", ТипНомераСтраницы);
	Листы3.Колонки.Добавить("НомерЛиста", ТипНомераСтраницы);
	
	//Для организации физического-лица титульные листы содержат 2 листа
	Если СведенияОбУведомлении.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
		ТекущийЛист1А = 3;
	Иначе 
		ТекущийЛист1А = 2;
	КонецЕсли;
	ТекущийЛист1Б = ТекущийЛист1А + Листы1А.Количество();
	ТекущийЛист2  = ТекущийЛист1Б + Листы1Б.Количество();
	ТекущийЛист3  = ТекущийЛист2  + Листы2.Количество();
	
	//нумерация листов раздела 1А и 1Б
	Для каждого Лист1А Из Листы1А Цикл
		
		Отбор = Новый Структура("Сделка", Лист1А.Сделка);
		
		СписокЛистов1Б = Листы1Б.НайтиСтроки(Отбор);
		Лист1А.НомерЛиста = ТекущийЛист1А;
		Лист1А.Количество1Б = СписокЛистов1Б.Количество();
		
		Для Каждого Лист1Б Из СписокЛистов1Б Цикл
			Лист1Б.НомерЛиста   = ТекущийЛист1Б;
			ТекущийЛист1Б = ТекущийЛист1Б + 1;
			
			Если Лист1Б.ТипКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				СведенияОКонтрагенте = Раздел3.Найти(Лист1Б.Контрагент, "Контрагент");
			Иначе
				СведенияОКонтрагенте = Раздел2.Найти(Лист1Б.Контрагент, "Контрагент");
			КонецЕсли;
			Если СведенияОКонтрагенте <> Неопределено Тогда
				Лист1Б.Строка050НомерУчастникаСделки = СведенияОКонтрагенте.НомерКонтрагента;
			КонецЕсли;
		КонецЦикла;
		
		СписокЛистов2 = Листы2.НайтиСтроки(Отбор);
		Для Каждого Лист2 Из СписокЛистов2 Цикл
			Лист2.НомерЛиста   = ТекущийЛист2;
			ТекущийЛист2 = ТекущийЛист2 + 1;
		КонецЦикла;
		
		СписокЛистов3 = Листы3.НайтиСтроки(Отбор);
		Для Каждого Лист3 Из СписокЛистов3 Цикл
			Лист3.НомерЛиста   = ТекущийЛист3;
			ТекущийЛист3 = ТекущийЛист3 + 1;
		КонецЦикла;
		
		ТекущийЛист1А = ТекущийЛист1А + 1;
		
	КонецЦикла;
	
	Листы1Б.Сортировать("НомерЛиста");
	Листы2.Сортировать("НомерЛиста");
	Листы3.Сортировать("НомерЛиста");
	
	Возврат Новый Структура("ЛистыРаздела1А, ЛистыРаздела1Б, ЛистыРаздела2, ЛистыРаздела3, ДанныеРаздела2, ДанныеРаздела3", 
		Листы1А, Листы1Б, Листы2, Листы3, Раздел2, Раздел3);
	
КонецФункции

Функция ПечатьКонтролируемойСделки(КонтролируемаяСделка, ОбъектыПечати) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(КонтролируемаяСделка) Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Уведомление = ОбщегоНазначения.ПолучитьЗначениеРеквизита(КонтролируемаяСделка, "УведомлениеОКонтролируемойСделке");
	
	Реквизиты = Новый Структура("Организация, ИНН, КПП, ОтчетныйГод, ЮрФизЛицо, КодНалоговогоОргана, КодМестаПредставления",
								"Организация", "Организация.ИНН", "Организация.КПП", "ОтчетныйГод", "Организация.ЮрФизЛицо", "Организация.КодИМНС", "КодМестаПредставления");
	СведенияОбУведомлении = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Уведомление, Реквизиты);
	
	ДатаАктуальностиСведений = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(Уведомление, КонтролируемаяСделка);
	
	Листы1А = ЛистыУведомления.ЛистыРаздела1А;
	Листы1Б = ЛистыУведомления.ЛистыРаздела1Б;
	Раздел2 = ЛистыУведомления.ЛистыРаздела2;
	Раздел3 = ЛистыУведомления.ЛистыРаздела3;
	ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
	ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
	
	ОтборПоСделке = Новый Структура("Сделка");
	ОтборПоКонтрагенту = Новый Структура("Контрагент");
	
	ТабДокумент = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;	
	
	СчетчикЛистов1А = 1;
	ОбщийНумераторСтраниц = 1;
	Для Каждого Лист1А Из Листы1А Цикл
		ОтборПоСделке.Сделка = Лист1А.Сделка;
		ОтобранныеЛисты1Б = Листы1Б.НайтиСтроки(ОтборПоСделке);
		
		ОтборПоКонтрагенту.Контрагент = Лист1А.Контрагент;
		ИнформацияОКонтрагентеРаздел2 = Раздел2.НайтиСтроки(ОтборПоКонтрагенту);
		ИнформацияОКонтрагентеРаздел3 = Раздел3.НайтиСтроки(ОтборПоКонтрагенту);
		
		Макет = ВернутьЗаполненныйМакетДляЛиста1А(Лист1А, СчетчикЛистов1А, ОбщийНумераторСтраниц, СведенияОбУведомлении, ОтобранныеЛисты1Б.Количество());
		ТабДокумент.Вывести(Макет);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		Для Каждого Лист1Б Из ОтобранныеЛисты1Б Цикл
			Макет = ВернутьЗаполненныйМакетДляЛиста1Б(Лист1Б, СчетчикЛистов1А, ОбщийНумераторСтраниц, СведенияОбУведомлении);
			ТабДокумент.Вывести(Макет);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
		Если ИнформацияОКонтрагентеРаздел2.Количество() > 0 Тогда
			Макет = ВернутьЗаполненныйМакетДляРаздела2(ИнформацияОКонтрагентеРаздел2[0], ДанныеРаздела2, СчетчикЛистов1А, ОбщийНумераторСтраниц, СведенияОбУведомлении);
			ТабДокумент.Вывести(Макет);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ИнформацияОКонтрагентеРаздел3.Количество() > 0 Тогда
			Макет = ВернутьЗаполненныйМакетДляРаздела3(ИнформацияОКонтрагентеРаздел3[0], ДанныеРаздела3, СчетчикЛистов1А, ОбщийНумераторСтраниц, СведенияОбУведомлении, ДатаАктуальностиСведений);
			ТабДокумент.Вывести(Макет);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СчетчикЛистов1А = СчетчикЛистов1А + 1;
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Уведомление);
	Возврат ТабДокумент;
	
КонецФункции

//Возвращает уведомление оргнанизации в отчетном году
//Параметры
//Организация - Справочник Организации
//ОтчетныйГод - Число(4,0)
//ТипУведомления - Число(1,0)
//	0 - Уведомление
//	1 - Корректировка
//НомерКорректировки - Число(3,0)
//ТипПоиска - Строка
//	Последний 	- Искать корректировку с наибольшим номером
//	Следующий 	- Искать коректировку с номером "НомерКорректировки" или следующую
//	Предыдущий 	- Искать коректировку с номером "НомерКорректировки" или предидущую
//	Указанный 	- Искать только указанный номер корректировки 
//	(Возвращает неопределено если уведомление  не найдено)
Функция НайтиУведомлениеОрганизацииВОтчетномГоду(Организация, ОтчетныйГод, ТипУведомления = Неопределено, НомерКорректировки = Неопределено, ТипПоиска = "Последний") Экспорт
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ОтчетныйГод", Дата(ОтчетныйГод, 1, 1));
		Запрос.Параметры.Вставить("НомерКорректировки", ?(ТипУведомления = 0, 0, ?(НомерКорректировки = Неопределено,0,НомерКорректировки)));
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка КАК Уведомление,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.Организация,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ДатаФормированияСпискаСделок,
		|	УведомлениеОКонтролируемыхСделках.ДатаЗаполненияУведомления
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
		|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
		|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки
		|	И НЕ УведомлениеОКонтролируемыхСделках.ПометкаУдаления";
		
		Если ТипУведомления = Неопределено и ТипПоиска = "Последний" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки","");	
		КонецЕсли;
		
		Если ТипПоиска = "Последний" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
		ИначеЕсли ТипПоиска = "Следующий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки ВОЗР";
		ИначеЕсли ТипПоиска = "Предыдущий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки <= &НомерКорректировки");	
		ИначеЕсли ТипПоиска = "Указанный" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки");	
		КонецЕсли;	
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ТипУведомления = ?(Результат.НомерКорректировки = 0, 0, 1);
			НомерКорректировки = ?(ТипУведомления = 0, 0, Результат.НомерКорректировки);
			Возврат Результат.Уведомление;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

	КонецФункции	

Процедура ЗаполнитьТаблицуОфшоров(Таблица) Экспорт
	
	МассивКодов = Новый Массив;
	
	Макет = РегистрыСведений.УчастникиКонтролируемыхСделок.ПолучитьМакет("ПереченьОфшоров");
	ОбластьМакета = Макет.ПолучитьОбласть("ПереченьТерриторий");
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		ТекКод = ОбластьМакета.Область(Ном,1, Ном, 1).Текст;
		МассивКодов.Добавить(СокрЛП(ТекКод));
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКодов", МассивКодов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторСтранМира.Ссылка КАК СтранаРегистрации
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	КлассификаторСтранМира.Код В(&МассивКодов)";
	
	Таблица.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Таблица.Добавить().СтранаРегистрации = Выборка.СтранаРегистрации;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеУведомления(Уведомление, ШаблонТекста) Экспорт
	
	Если Уведомление = ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		Возврат НСтр("ru = ''");
	КонецЕсли;
	
	ПараметрыУведомления = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Уведомление, "Организация, НомерКорректировки, ОтчетныйГод");
	
	Представление = ?(ПараметрыУведомления.НомерКорректировки > 0, 
		НСтр("ru = '%ШаблонТекста% коректировки №%НомерКорректировки% уведомления ""%Организация%"" за %Год%'"),
		НСтр("ru = '%ШаблонТекста% уведомления ""%Организация%"" за %Год%'"));
	Представление = СтрЗаменить(Представление, "%НомерКорректировки%", ПараметрыУведомления.НомерКорректировки);
	Представление = СтрЗаменить(Представление, "%Организация%", ПараметрыУведомления.Организация);
	Представление = СтрЗаменить(Представление, "%Год%", Формат(ПараметрыУведомления.ОтчетныйГод,"ДФ=yyyy"));
	Представление = СтрЗаменить(Представление, "%ШаблонТекста%", ШаблонТекста);
	
	Возврат Представление;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ ДВИЖЕНИЙ

Процедура СформироватьДвиженияКонтролируемыхСделокОрганизаций(КонтролируемыеСделкиОрганизаций, Движения, Отказ) Экспорт
	
	Движения.КонтролируемыеСделкиОрганизаций.Загрузить(КонтролируемыеСделкиОрганизаций);
	
	Движения.КонтролируемыеСделкиОрганизаций.Записывать = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
//НУМЕРАЦИЯ ДОКУМЕНТОВ

Процедура ПеренумерацияКонтролируемыхСделокУведомления(Уведомление) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтролируемаяСделка.Ссылка КАК Документ
	               |ИЗ
	               |	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	               |ГДЕ
	               |	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	               |	И НЕ КонтролируемаяСделка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтролируемаяСделка.Номер";
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	
	Сч = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СчетчикТранзакции = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Документ.Номер <> Сч Тогда
			КонтролируемаяСделка = Выборка.Документ.ПолучитьОбъект();
			КонтролируемаяСделка.Номер = Сч;
			КонтролируемаяСделка.Записать();
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры	

Функция НомераКонтролируемыхСделокУведомленияКоректны(Уведомление) Экспорт
	
	НомераКорректны = Истина;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
					|	КОЛИЧЕСТВО(КонтролируемаяСделка.Ссылка) КАК Количество,
					|	МАКСИМУМ(КонтролируемаяСделка.Номер) КАК МаксимальныйНомер,
					|    КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтролируемаяСделка.Номер) КАК КоличествоРазличных
					|ИЗ
					|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
					|ГДЕ
					|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
					|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
				   
			   
				   
				   
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	РезультатПроверки = Запрос.Выполнить().Выбрать();			   
	
	Если РезультатПроверки.Следующий() Тогда
		
		НомераКорректны	= (РезультатПроверки.МаксимальныйНомер = РезультатПроверки.Количество 
							И РезультатПроверки.МаксимальныйНомер = РезультатПроверки.КоличествоРазличных);
		
	КонецЕсли;	
				   
	Возврат НомераКорректны;	
	
КонецФункции	

Функция ПолучитьСледующийНомерКонтролируемойСделкиУведомления(Уведомление) Экспорт
	
	Номер = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
					|	МАКСИМУМ(КонтролируемаяСделка.Номер) КАК Номер
					|ИЗ
					|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
					|ГДЕ
					|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
					|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
			   
				   
				   
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Результат = Запрос.Выполнить().Выбрать();			   
	
	Если Результат.Следующий() Тогда
		
		Номер = Результат.Номер;
		
	КонецЕсли;	
				   
	Возврат Номер + 1;	
	
	
КонецФункции	

Процедура ПроверитьПравильностьЗаполненияКонтрагентаРегистра(Отказ, ТаблицаЗаписей, ОписаниеКлючаЗаписи) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КлючиРегистра", ТаблицаЗаписей);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ КлючиРегистра
	|ИЗ
	|	&КлючиРегистра КАК КлючиРегистра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиРегистра КАК КлючиРегистра
	|		ПО Контрагенты.Ссылка = КлючиРегистра.Контрагент
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				КлючиРегистра.Контрагент
	|			ИЗ
	|				КлючиРегистра КАК КлючиРегистра)
	|	И Контрагенты.ОбособленноеПодразделение = ИСТИНА";
	
	ПоляКлюча = "";
	Для Каждого ОписаниеКлюча Из ОписаниеКлючаЗаписи Цикл
		ПоляКлюча = ПоляКлюча + ?(ПоляКлюча = "", "", ", ") + ОписаниеКлюча.Ключ + " КАК " + ОписаниеКлюча.Ключ;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "КлючиРегистра.Контрагент КАК Контрагент", ПоляКлюча);
	
	Ошибка = Запрос.Выполнить().Выбрать();
	
	Пока Ошибка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Контрагент ""%1"" является обособленным подразделением. Можно выбирать только головного контрагента'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Ошибка.Наименование);
		
		ЗаполнитьЗначенияСвойств(ОписаниеКлючаЗаписи, Ошибка);
		КлючЗаписи = РегистрыСведений.ВзаимозависимыеЛица.СоздатьКлючЗаписи(ОписаниеКлючаЗаписи);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючЗаписи, "Запись.Контрагент", , Отказ);
		
	КонецЦикла;

	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
//ЗАПОЛНЕНИЕ ТАБЛИЧНЫХ ЧАСТЕЙ

Процедура ВыполнитьЗаполнениеТабличнойЧасти(Объект, ИмяТабличнойЧасти, ТабличноеПоле, ВыполняемаяОбработка, ДополнительныеПараметры) Экспорт
	
	// Проверка корректности переданных параметров
	Если ТипЗнч(ВыполняемаяОбработка) <> Тип("СправочникСсылка.ВнешниеОбработки") 
		ИЛИ ВыполняемаяОбработка = Справочники.ВнешниеОбработки.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ВыполняемаяОбработка.ХранилищеВнешнейОбработки.Получить());
	
	ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Истина);
	
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки);
	
	// Передать внешней обработке дополнительные параметры
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
		Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
			Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Обработка.Инициализировать(Объект, ИмяТабличнойЧасти, ТабличноеПоле);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаполнитьДеревоКнопокЗаполненияТабличныхЧастей(ДеревоКомандЗаполненияТабличныхЧастей, МетаданныеОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.МетаданныеОбъекта = &МетаданныеОбъекта
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок(ДеревоКомандЗаполненияТабличныхЧастей);
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Документ." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Справочник." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Отчет." + МетаданныеОбъекта.Имя);
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Выборка.ТабличнаяЧастьИмя, , , , , , , Истина);
		ВыборкаДействий            = Выборка.Выбрать();
		
		Пока ВыборкаДействий.Следующий() Цикл
			
			НомерКнопки = НомерКнопки + 1;
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, ДополнительныеПараметрыОбработки", ВыборкаДействий.Ссылка, ВыборкаДействий.ДополнительныеПараметрыОбработки.Получить());
			
			ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+Выборка.ТабличнаяЧастьИмя+НомерКнопки, ВыборкаДействий.Наименование, СтруктураРасшифровки, , , , , Истина);
			
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

Функция ИнициализироватьДеревоДополнительныхКнопок(ДеревоКнопок)
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	
	ДеревоКнопок.Колонки.Добавить("ИзменяетДанные");
	
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции

Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Текст = "", Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, Позиция = Неопределено, ИзменяетДанные = Ложь)
	
	Если Позиция = Неопределено Тогда
		СтрокаКнопки         = СтрокаПодменю.Строки.Добавить();
	Иначе
		СтрокаКнопки         = СтрокаПодменю.Строки.Вставить(Позиция);
	КонецЕсли;
	
	СтрокаКнопки.Имя                = Имя;
	СтрокаКнопки.Текст              = Текст;
	СтрокаКнопки.Картинка           = Картинка;
	СтрокаКнопки.Подсказка          = Подсказка;
	СтрокаКнопки.Пометка            = Пометка;
	СтрокаКнопки.ИзменяетДанные     = ИзменяетДанные;
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	
	Возврат СтрокаКнопки;
	
КонецФункции

Процедура СоздатьКомандыЗаполненияТабличныхЧастей(Форма, МетаданныеОбъекта, ТабличныеЧасти) Экспорт
	
	Перем ЭлементыТабличнойЧасти;
	
	ЗаполнитьДеревоКнопокЗаполненияТабличныхЧастей(Форма.ДеревоКомандЗаполненияТабличныхЧастей, МетаданныеОбъекта);
	
	Для Каждого ТабличнаяЧасть Из Форма.ДеревоКомандЗаполненияТабличныхЧастей.Строки Цикл
		
		ТабличныеЧасти.Свойство(ТабличнаяЧасть.Имя, ЭлементыТабличнойЧасти);
		
		Если ЭлементыТабличнойЧасти <> Неопределено Тогда
			ТабличнаяЧасть.Расшифровка = ЭлементыТабличнойЧасти.ИмяТабличногоПоля;
			
			Для Каждого КомандаТабличнойЧасти ИЗ ТабличнаяЧасть.Строки Цикл
				Команда = Форма.Команды.Добавить(КомандаТабличнойЧасти.Имя);
				Команда.Заголовок = КомандаТабличнойЧасти.Текст;
				Команда.Действие = "ЗаполнениеТабличныхЧастей_Подключаемый";
				Команда.Подсказка = КомандаТабличнойЧасти.Подсказка;
				Команда.ИзменяетСохраняемыеДанные = КомандаТабличнойЧасти.ИзменяетДанные;
				Кнопка = Форма.Элементы.Добавить(КомандаТабличнойЧасти.Имя, Тип("КнопкаФормы"), Форма.Элементы[ЭлементыТабличнойЧасти.ИмяГруппыКоманд]);
				Кнопка.ИмяКоманды = КомандаТабличнойЧасти.Имя;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
