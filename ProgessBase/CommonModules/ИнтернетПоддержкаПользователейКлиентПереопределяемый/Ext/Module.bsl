
///////////////////////////////////////////////////////////////////////////////////////////////////
///////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ ОБНОВЛЕНИЕ КОНФИГУРАЦИИ

// Переопределяет имя обработки для выполнения обновления конфигурации.
//
// Параметры: 
//	Имя - Строка - имя обработки обновление конфигурации (по умолчанию установлено: "ОбновлениеКонфигурации").
//
Процедура ОпределитьИмяОбработкиОбновленияКонфигурации(Имя) Экспорт 
	
	Имя = "ОбновлениеКонфигурации";
	
КонецПроцедуры

// Процедура определяет логи и пароль в системе интернет-поддержки пользователей.
//
// Параметры;
// 	Логин - Строка - логин.
// 	Пароль - Строка - пароль.
//
Процедура ЗагрузкаЛогинаИПароля(Логин, Пароль) Экспорт
	
	ИнтернетПоддержкаПользователейВызовСервера.ЗагрузкаЛогинаИПароляИзПараметровИнтернетПоддержкиПользователей(Логин, Пароль);
	
КонецПроцедуры

// Процедура очищает настройки для обработки "Обновление конфигурации".
//
Процедура ОчиститьЛогинИПарольВНастройкахОбновления() Экспорт
	
	НастройкиОбновления = ВосстановитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления");
	Если НастройкиОбновления <> Неопределено Тогда
		НастройкиОбновления.КодПользователяСервераОбновлений  = "";
		НастройкиОбновления.ПарольСервераОбновлений           = "";
	КонецЕсли;
	
	СохранитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления", НастройкиОбновления);
	
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////////////////////////
///////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ

// Вызывает процедуру обновления реготчетнсоти.
//
Процедура ВызватьПроцедуруОбновленияРегОтчетности() Экспорт
	
	РегламентированнаяОтчетность.ПередОткрытиемОсновнойФормыРаботыСОтчетностью(Неопределено);
	РегламентированнаяОтчетность.ОткрытьФормуДоступныхОбновленийРО();
	
КонецПроцедуры

// Открытвает форму регламентированной отчетности.
//
Процедура ОткрытьФормуРегламентированныхОтчетов() Экспорт 
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью");
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
///////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ДРУГИХ ОБРАБОТОК

// Запускает интерент-старницу в обозревателе конфигурации.
//
Процедура ЗапуститьИнтернетСтраницуВОбозревателе(АдресСтраницы, ЗаголовокОкна) Экспорт
	
	Попытка
		Обозреватель = Обработки.Обозреватель.Создать();
		Форма = Обозреватель.ПолучитьФорму();
		Форма.СтартоваяСтраница = АдресСтраницы;
		Если ЗаголовокОкна <> Неопределено Тогда
			Форма.Заголовок = ЗаголовокОкна;
		КонецЕсли;
		Форма.Открыть();
	Исключение
		АдресСтраницы = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интернет-поддержка пользователей: Ошибка'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕКТРОННОГО ДОКУМЕНТООБОРОТА

// Процедура рашифровки зашифрованного маркера, полученного с сервера ИПП, на
// клиенте на основе выбранного сертификата.
//
// Параметры
//	ЗашифрованныеДвоичныеДанные - зашифрованные двоичные данные, полученные с сервера
//	СертификатЭЦП - выбранный сертификат, при помощи которого было выполнено шифрование
//	МаркерИдентификации - возвращаемый расшифрованный маркер идентификации
//
Процедура РасшифроватьМаркерИдентификацииВладельцаСертификатаНаКлиенте(ЗашифрованныеДвоичныеДанные, СертификатЭЦП, МаркерИдентификации, Знач ПарольДоступа) Экспорт
	
	// Инициализация менеджера криптографии
	НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
	ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		// менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки, либо
		// отсутствует ПО криптопровайдера
		Возврат;
	КонецПопытки;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольДоступа;
	
	// Расшифровка
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныеДвоичныеДанные);
	Исключение
		МаркерИдентификации = "НесовпадениеПароля";
		Возврат;
	КонецПопытки;
	ИмяФайлаДвоичныхДанных = ПолучитьИмяВременногоФайла("txt");
	РасшифрованныеДвоичныеДанные.Записать(ИмяФайлаДвоичныхДанных);
	ТекстовыйДок = Новый ТекстовыйДокумент;
	ТекстовыйДок.Прочитать(ИмяФайлаДвоичныхДанных);
	МаркерИдентификации = ТекстОвыйДок.ПолучитьТекст();
	
	Попытка
		УдалитьФайлы(ИмяФайлаДвоичныхДанных);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура для ввода пароля к сертификату ЭЦП
// В случае его отсутствия
// Параметры
// ХранилищеСертификатаЭЦП - Временное хранилище значений для хранения сертификата ЭЦП
// ПарольСертификатаЭЦП    - Переопределяемое значение пароля к сертификату
//
Процедура ПолучитьПарольЭЦП(ХранилищеСертификатаЭЦП, ПарольСертификатаЭЦП) Экспорт
	
	СертификатЭЦП = ПолучитьИзВременногоХранилища(ХранилищеСертификатаЭЦП);
	
	ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата", 
									 НСтр("ru = 'Введите пароль для закрытого ключа сертификата'"), СертификатЭЦП);
	КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
	
	Если КодВозврата <> Неопределено Тогда
		ПарольСертификатаЭЦП = КодВозврата;
	КонецЕсли;

КонецПроцедуры

