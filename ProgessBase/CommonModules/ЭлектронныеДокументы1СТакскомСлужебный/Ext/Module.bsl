////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументы1СТакскомСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Только для внутреннего использования
Функция ОпределитьСертификатПодписиСлужебногоДокумента(СсылкаНаЭД, ИмяВидаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СертификатПодписи = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД.СоглашениеЭД) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыЭЦПВидыДокументов.Ссылка
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
		|ГДЕ
		|	СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
		|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
		|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
		|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
		|	И (СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = &Пользователь
		|			ИЛИ СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = &ПустойПользователь)
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	СертификатыЭЦПВидыДокументов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СертификатыЭЦПВидыДокументов.Ссылка.ПарольПользователя УБЫВ,
		|	СертификатыЭЦПВидыДокументов.Ссылка.Пользователь УБЫВ";
		
		Запрос.УстановитьПараметр("ВидДокумента",       Перечисления.ВидыЭД[ИмяВидаЭД]);
		Запрос.УстановитьПараметр("Пользователь",       ПользователиСервер.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("Организация",        СсылкаНаЭД.Организация);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выгрузка = Результат.Выгрузить();
			НайденнаяСтрока = Неопределено;
			Если СсылкаНаЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				И ЗначениеЗаполнено(СсылкаНаЭД.СоглашениеЭД.СертификатАбонента) Тогда
				НайденнаяСтрока = Выгрузка.Найти(СсылкаНаЭД.СоглашениеЭД.СертификатАбонента);
			КонецЕсли;
			СертификатПодписи = ?(НайденнаяСтрока = Неопределено, Выгрузка[0].Ссылка, НайденнаяСтрока.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если СертификатПодписи = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Нет доступного сертификата ЭЦП для организации %1, по виду документов %2.
		|Необходимо открыть настройки обмена и задать сертификат для организации %1 и вида документов %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
		СсылкаНаЭД.Организация.Наименование, "Уведомление об уточнении");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат СертификатПодписи;
	
КонецФункции

// Только для внутреннего использования
Функция ОпределитьДокументПоПараметрам(Параметры) Экспорт
	
	ВозвращаемыйПараметр = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	УникальныйИД        = "";
	Направление         = "";
	ВидЭД               = "";
	ТипЭлементаВерсииЭД = "";
	СоюзУсловий         = "";
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|";
	
	Если Параметры.Свойство("УникальныйИД", УникальныйИД) Тогда
		Запрос.УстановитьПараметр("УникальныйИД", УникальныйИД);
		ТекстЗапроса = ТекстЗапроса + "ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД";
		СоюзУсловий = " И ";
	КонецЕсли;
	Если Параметры.Свойство("Направление", Направление) Тогда
		Запрос.УстановитьПараметр("НаправлениеЭД", Направление);
		ТекстЗапроса = ТекстЗапроса + СоюзУсловий + "ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
		СоюзУсловий = " И ";
	КонецЕсли;
	Если Параметры.Свойство("ВидЭД", ВидЭД) Тогда
		Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
		ТекстЗапроса = ТекстЗапроса + СоюзУсловий + "ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД";
		СоюзУсловий = " И ";
	КонецЕсли;
	Если Параметры.Свойство("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД) Тогда
		Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		ТекстЗапроса = ТекстЗапроса + СоюзУсловий + "ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	КонецЕсли;
	
	Если Запрос.Параметры.Количество() > 0 Тогда
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ВозвращаемыйПараметр = Результат.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оператор ЭДО Такском

// Только для внутреннего использования
Функция СтруктураНастроекТакском() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Наименование", "ООО Такском");
	СтруктураНастроек.Вставить("АдресВебСервиса", "https://1C-api.taxcom.ru/v1.2/API/");
	СтруктураНастроек.Вставить("ИНН", "7704211201");
	СтруктураНастроек.Вставить("ИдентификаторОператора", "2AL");
	
	Возврат СтруктураНастроек;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование контейнера

// Только для внутреннего использования
Функция СформироватьЭДПрисоединенныйФайлПакетаТакском(Конверт) Экспорт
	
	КонтейнерСформирован = Ложь;
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	Если ПодготовленныеДокументы.Количество() = 1 Тогда
		ЭтоПроизвольныйДокумент = Ложь;
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ДеревоДанных            = Новый ДеревоЗначений;
		
		ДеревоДанных.Колонки.Добавить("НомерЭД");
		ДеревоДанных.Колонки.Добавить("ЭтоПодпись");
		ДеревоДанных.Колонки.Добавить("ПсевдонимФайла");
		ДеревоДанных.Колонки.Добавить("ИмяФайла");
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("Отправка");
		
		Для Каждого ДокументНаОтправку Из ПодготовленныеДокументы Цикл
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ДокументНаОтправку);
			Если ДокументНаОтправку.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий  Тогда
				ЭлектронныеДокументыСлужебный.СохранитьВместеСПоследнейЭЦП(ДокументНаОтправку, ДанныеФайла, УникальныйИдентификатор,
					АдресКаталога, ДеревоДанных);
			Иначе
				ЭлектронныеДокументыСлужебный.СохранитьВместеСЭЦП(ДокументНаОтправку, ДанныеФайла, УникальныйИдентификатор, АдресКаталога,
					Конверт, ДеревоДанных, ЭтоПроизвольныйДокумент);
			КонецЕсли;
			ЭлектронныеДокументыСлужебный.СохранитьФайлыДопДанныхЭД(ДокументНаОтправку, АдресКаталога, ДеревоДанных);
		КонецЦикла;
		
		Файлы = НайтиФайлы(АдресКаталога, "*");
		Если Файлы.Количество() <> 0 Тогда
			
			ЗипКонтейнер = Новый ЗаписьZipФайла();
			ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
			ЗипКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
			
			ТранспортнаяИнформация = СоздатьОписаниеСтруктурыДанныхТИ();
			ПодготовитьТранспортнуюИнформацию(Конверт, ДеревоДанных, ТранспортнаяИнформация);
			Если ТранспортнаяИнформация.Количество() > 0 Тогда
				
				ДополнительныеПараметры = Новый Структура;
				Карточка = СформироватьКарточкуТакскомCML(ТранспортнаяИнформация, ДополнительныеПараметры);
				КопироватьФайл(Карточка, АдресКаталога + "card.xml");
				
				ДополнительныеПараметры = Новый Структура;
				ИмяФайлаТранспортнойИнформации = СформироватьТранспортнуюИнформациюТакскомCML(ТранспортнаяИнформация, ДополнительныеПараметры);
				КопироватьФайл(ИмяФайлаТранспортнойИнформации, АдресКаталога + "meta.xml");
				ОбъектыДобавляемыеВАрхив = АдресКаталога + "*";
				ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив, РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
					РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
				
				Попытка
					ЗипКонтейнер.Записать();
					// Сохраним зип-контейнер в присоединенных файлах к конверту.
					ЭлектронныеДокументыСлужебный.ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
					КонтейнерСформирован = Истина;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			УдалитьФайлы(АдресКаталога);
		КонецЕсли;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Ошибка при обработке пакета ЭД %1!
		|Для передачи через оператора Такском, пакет ЭД должен содержать 1 электронный документ!
		|Необхомидо повторно сформировать электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Конверт.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КонтейнерСформирован;
	
КонецФункции

// Только для внутреннего использования
Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен с такском

// Только для внутреннего использования
Процедура ТестСвязиСТакском(Соглашение, ПарольКСертификатуОператора = Неопределено) Экспорт
	
	// Блок проверки соединения с Такском.
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Тест. Проверка связи с сервисом Такском.'"));
	Соединение = ПолучитьСоединение();
	Маркер = ПолучитьМаркерОЭДО(Соглашение, Соединение, ПарольКСертификатуОператора);
	
	РезультатТеста = НСтр("ru = 'Не пройден.'");
	Если ЗначениеЗаполнено(Маркер) Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
	
КонецПроцедуры

Процедура ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, Имя, Значение) Экспорт
	
	ЗаголовокЗапроса = ЗаголовокЗапроса + Имя + ": "+ Значение + Символы.ВК + Символы.ПС;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

// Функция выполняет отправку файлов, находящихся в каталоге "АдресКаталогаОтправки".
//
// Параметры:
//  Соглашение                  - элемент справочника "СоглашенияОбИспользованииЭД";
//  АдресКаталогаОтправки       - строка, полный путь к каталогу с передаваемыми файлами;
//  АдресРесурса                - строка, адрес веб-сервиса;
//  ПарольКСертификатуОператора - строка, пароль к сертификату.
//
// Возвращаемое значение:
//  РезультатОтправки - Число (количество отправленных документов)
//
Функция ОтправитьЧерезТакском(Соглашение, АдресКаталогаОтправки, АдресРесурса, ПарольКСертификату, ФлагОтладки = Ложь) Экспорт
	
	РезультатОтправки = 0;
	
	Соединение = ПолучитьСоединение();
	Маркер = ПолучитьМаркерОЭДО(Соглашение, Соединение, ПарольКСертификату);
	
	Если ЗначениеЗаполнено(Маркер) Тогда
		ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
		Для Каждого Файл Из ФайлыОтправки Цикл
			ПромежуточныйРезультат = ПередатьПакетЭДОператораЭДО(Файл, Маркер, Соединение, АдресРесурса, ФлагОтладки);
			РезультатОтправки = РезультатОтправки + ПромежуточныйРезультат;
		КонецЦикла;
	КонецЕсли;
	
	УдалитьФайлы(АдресКаталогаОтправки);
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

// Получить новые электронные документы от Такском
//
// Параметры:
//  СтруктураВозврата - структура с полями: "ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение"
//  СоответствиеПаролейДляЭДО - структура - соответствие паролей для ЭДО
//  ПолучитьВесьСписок - получить список ЭД без ограничения выборки по дате
//
Процедура ПолучитьНовыеЭДОператорТакском(СтруктураВозврата, СоответствиеПаролейДляЭДО, ПолучитьВесьСписок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияЧерезОЭДО.Ссылка КАК Соглашение,
	|	МАКСИМУМ(СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭД) КАК ДатаПолученияЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЧерезОЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|		ПО (СостоянияОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашенияЧерезОЭДО.Ссылка)
	|ГДЕ
	|	СоглашенияЧерезОЭДО.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И СоглашенияЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|	И НЕ СоглашенияЧерезОЭДО.ПометкаУдаления
	|	И (ВЫБОР
	|			КОГДА СоглашенияЧерезОЭДО.СертификатАбонента = &ПустойСправочникСертификатов
	|					ИЛИ НЕ СоглашенияЧерезОЭДО.СертификатАбонента.ЗапомнитьПарольКСертификату
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоглашенияЧерезОЭДО.Ссылка";
	
	Запрос.УстановитьПараметр("ПустойСправочникСертификатов", Справочники.СертификатыЭЦП.ПустаяСсылка());
	
	Если СоответствиеПаролейДляЭДО <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОНЕЦ)",
			"КОНЕЦ ИЛИ СоглашенияЧерезОЭДО.СертификатАбонента В (&МассивСертификатов))");
		МассивСертификатов = Новый Массив;
		Для Каждого Элемент Из СоответствиеПаролейДляЭДО Цикл
			МассивСертификатов.Добавить(Элемент.Ключ);
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСертификатов", МассивСертификатов);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если СоответствиеПаролейДляЭДО = Неопределено Тогда
			ПарольКСертификату = Неопределено;
		Иначе
			ПарольКСертификату = СоответствиеПаролейДляЭДО.Получить(Выборка.Соглашение.СертификатАбонента);
		КонецЕсли;
		Соединение = ПолучитьСоединение();
		Маркер = ПолучитьМаркерОЭДО(Выборка.Соглашение, Соединение, ПарольКСертификату);
		
		Если ЗначениеЗаполнено(Маркер) Тогда
			
			ПолученыВсеДокументы = Ложь;
			ДатаВремяЗапроса = Формат(Выборка.ДатаПолученияЭД, "ДФ='yyyy-MM-dd HH:mm:ss'");
			ЕстьОшибкиОбработкиЭД = Ложь;
			
			Пока НЕ ПолученыВсеДокументы Цикл
				
				СписокЭД_XML = ПолучитьСписокЭДОператораЭДО(Маркер, Соединение, "GetMessageList",
					ДатаВремяЗапроса);
				
				СписокИДДокументов = "";
				ДатаВремяЗапроса   = РазобратьТекстСпискаЭД(СписокЭД_XML, СписокИДДокументов);
				
				Если СписокИДДокументов.Количество() = 0 Тогда
					ПолученыВсеДокументы = Истина;
					Прервать;
				КонецЕсли;
				
				Для Каждого Стр Из СписокИДДокументов Цикл
					
					Если НЕ ПакетЭДУжеЗагружен(Стр.ИДДокумента) Тогда
						
						// Если один из входящих документов не будет успешно загружен,
						// то дату получения ЭД в регистре состояния обменов не обновляем.
						ПрисоединенныйФайлСформирован = Ложь;
						
						ФайлЭД = ПолучитьЭДОператораЭДО(Маркер, Соединение, ПарольКСертификату, Стр.ИДДокумента, Выборка.Соглашение);
						
						Если ФайлЭД <> Неопределено Тогда
							ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ФайлЭД);
							
							СтруктураПараметров = ПолучитьДанныеВходящегоЭД(ДвоичныеДанныеЭлемента, Стр.КодТранзакции, Стр.ИДДокументооборота, Стр.ИДДокумента);
							Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
								ПакетЭД = ЭлектронныеДокументыСлужебный.СформироватьНовыйПакетЭД(СтруктураПараметров);
								
								Если ЗначениеЗаполнено(ПакетЭД.Ссылка) Тогда
									ИмяФайла = "EDI_" + СтруктураПараметров.ВнешнийУИД;
									АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
									
									ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, ИмяФайла, "zip", ТекущаяДатаСеанса(),
										ТекущаяДатаСеанса(), АдресВХранилище, , , "ЭДПрисоединенныеФайлы");
									
									СтруктураВозврата.МассивВозврата.Добавить(ПрисоединенныйФайл);
									СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", НЕ СтруктураПараметров.Зашифрован, ПакетЭД.Ссылка);
									СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
									
									ПрисоединенныйФайлСформирован = Истина;
								КонецЕсли;
							КонецЕсли;
							УдалитьФайлы(ФайлЭД);
						КонецЕсли;
						
						Если НЕ ЕстьОшибкиОбработкиЭД И НЕ ПрисоединенныйФайлСформирован Тогда
							ЕстьОшибкиОбработкиЭД = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЕстьОшибкиОбработкиЭД И ЗначениеЗаполнено(ДатаВремяЗапроса) И СписокИДДокументов.Количество() > 0 Тогда
					
					Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
					Запись.СоглашениеОбИспользованииЭД = Выборка.Соглашение;
					Запись.Прочитать();
					Запись.ДатаПолученияЭД = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Сред(ДатаВремяЗапроса, 0, Найти(ДатаВремяЗапроса, ".")
						- 1), "-", ""), " ", ""), ":", ""));
					Запись.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получить новые электронные документы от Такском
//
// Параметры:
//  Соглашение - СправочникСсылка.СоглашенияОбИспользованииЭД - исходное соглашение
//  АдресРесурса - строка - адрес ресурса
//  ПарольКСертификату - строка - пароль к сертификату
//  ДатаПоследнегоЗапроса - дата - дата последнего запроса
//
// Возвращаемое значение:
//  СписокЭД_XML - список электронных документов
//
Функция ПолучитьЧерезТакском(Соглашение, АдресРесурса, ПарольКСертификату, ДатаПоследнегоЗапроса) Экспорт
	
	Соединение = ПолучитьСоединение();
	Маркер = ПолучитьМаркерОЭДО(Соглашение, Соединение, ПарольКСертификату);
	
	СписокЭД_XML = ПолучитьСписокЭДОператораЭДО(Маркер, Соединение, АдресРесурса, ДатаПоследнегоЗапроса);
	
	Возврат СписокЭД_XML;
	
КонецФункции

// Отправляет в такском информацию об принятии или отклонении приглашения
Функция ПринятьОтклонитьКонтактЧерезТакском(Соглашение, Идентификатор, ПриглашениеПринято, ПарольКСертификату, Маркер = Неопределено) Экспорт
	
	Соединение = ПолучитьСоединение();
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		Маркер = ПолучитьМаркерОЭДО(Соглашение, Соединение, ПарольКСертификату);
	КонецЕсли;
	
	ОперацияВыполнена = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		Если ПриглашениеПринято Тогда
			АдресРесурса = "AcceptContact?id=" + Идентификатор;
		Иначе
			АдресРесурса = "RejectContact?id=" + Идентификатор;
		КонецЕсли;
		
		Заголовки = "";
		ДобавитьпараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ОперацияВыполнена = Истина;
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка обработки %1 приглашения на сервере Такском!
			|(подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				?(ПриглашениеПринято, "принятия", "отклонения"));
			
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Получение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
			УдалитьФайлы(ИмяФайлаРезультата);
			ОперацияВыполнена = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОперацияВыполнена;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Изменение статусов ЭД пакета

// Только для внутреннего использования
Процедура ОбновитьСтатусыДокументовПакетаЭДТакском(ПакетЭД, НовыйСтатусПакета, ДатаИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			
			Если Документ.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
				ИЛИ Документ.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
				ИЛИ Документ.ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				ЭлектронныйДокументВладелец = Документ.ЭлектронныйДокумент;
				Если НовыйСтатусПакета = Перечисления.СтатусыПакетовЭД.Доставлен Тогда 
					ЭлектронныеДокументыСлужебный.ЗаписатьДатуПолучения(ЭлектронныйДокументВладелец, ДатаИзменения);
				ИначеЕсли НовыйСтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
					ЭлектронныеДокументыСлужебный.ЗаписатьДатуОтправки(ЭлектронныйДокументВладелец, ДатаИзменения);
				КонецЕсли;
				
			Иначе
				
				Если Документ.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
					ИЛИ Документ.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					ЭлектронныйДокументВладелец = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
						Новый УникальныйИдентификатор(Документ.ЭлектронныйДокумент.УникальныйИД));
					Если ЭлектронныйДокументВладелец.ПолучитьОбъект() = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
				ИначеЕсли Документ.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
					ИЛИ Документ.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
					ИЛИ Документ.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
					ИЛИ Документ.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Параметры = Новый Структура;
					Параметры.Вставить("Направление",  Перечисления.НаправленияЭД.Входящий);
					Параметры.Вставить("УникальныйИД", Документ.ЭлектронныйДокумент.УникальныйИД);
					Параметры.Вставить("ВидЭД",        Перечисления.ВидыЭД.СчетФактура);
					ЭлектронныйДокументВладелец = ОпределитьДокументПоПараметрам(Параметры);
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				// Изменение статуса отправленного служебного ЭД
				СтруктураОбновленияПараметров = Новый Структура;
				СтруктураОбновленияПараметров.Вставить("ВладелецЭД",    Документ.ЭлектронныйДокумент.ВладелецФайла);
				СтруктураОбновленияПараметров.Вставить("ВидЭД",         Документ.ЭлектронныйДокумент.ВидЭД);
				СтруктураОбновленияПараметров.Вставить("НаправлениеЭД", Документ.ЭлектронныйДокумент.НаправлениеЭД);
				СтруктураОбновленияПараметров.Вставить("Контрагент",    Документ.ЭлектронныйДокумент.Контрагент);
				СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",  Документ.ЭлектронныйДокумент.СоглашениеЭД);
				СтруктураОбновленияПараметров.Вставить("СтатусЭД",
					ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, Документ.ЭлектронныйДокумент));
				ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(Документ.ЭлектронныйДокумент, СтруктураОбновленияПараметров);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлектронныйДокументВладелец) Тогда
				ЭлектронныеДокументыСлужебный.ОбновитьВерсиюЭД(ЭлектронныйДокументВладелец);
			КонецЕсли;
			
		КонецЦикла;
		Если ТипЗнч(Документ.ОбъектВладелец) = Тип("ДокументСсылка.ПроизвольныйЭД")
			И (НовыйСтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен
			ИЛИ НовыйСтатусПакета = Перечисления.СтатусыПакетовЭД.Доставлен) Тогда
			
			Объект = Документ.ОбъектВладелец.ПолучитьОбъект();
			Если НовыйСтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.Отправлен, Документ.ОбъектВладелец);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ОтправленоПодтверждение, Документ.ОбъектВладелец);
				КонецЕсли;
			ИначеЕсли НовыйСтатусПакета = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.Доставлен, Документ.ОбъектВладелец);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ДоставленоПодтверждение, Документ.ОбъектВладелец);
				КонецЕсли;
			КонецЕсли;
			Объект.Записать();
		КонецЕсли;
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакета;
		ПакетОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
// ПакетЭД             - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов,
// ПапкаДляРаспаковки  - строка - пусть к папке,
// ПараметрыШифрования - Структура, настройки шифрования, применимые к данному пакету электронных документов.
//
// Возвращаемое значение:
//  СтруктураВозврата - массив двоичных данных.
//
Функция ВернутьМассивДвоичныхДанныхПакетаТакском(ПакетЭД, ПапкаДляРаспаковки = "", ПараметрыШифрования) Экспорт
	
	ФайлАрхива = "";
	ФайлРасшифрованногоАрхива = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Распаковка");
	КонецЕсли;
	
	Попытка
		// Проверим, что соглашение, указанное в пакете, до сих пор действует.
		Соглашение = ПакетЭД.Соглашение;
		Если Соглашение.Пустая() ИЛИ Соглашение.СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует Тогда
			СообщениеИсключения = НСтр("ru = 'По данному пакету электронных документов нет действующего соглашения.
			|Распаковка невозможна.'");
			ВызватьИсключение(СообщениеИсключения);
			
			Возврат Неопределено;
		КонецЕсли;
		
		// Необходимо получить архив пакета из присоединенных файлов к документу.
		ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Для каждого из пакетов необходимо определить файл с данными.
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки, "*"); 
		Для Каждого Элемент Из ЗИПЧтение Цикл
			ДоступнаяДлинаИмени = 256 - СтрДлина(ФайлАрхива);
			Если СтрДлина(Элемент.Имя) > ДоступнаяДлинаИмени Тогда
				ТекстСообщения = НСтр("ru = 'Невозможно извлечь данные из файла, имена вложенных файлов слишком длинные!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		
		// Расшифровать файл с данными
		МассивФайлИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
		
		Если МассивФайлИнформации.Количество() > 0 Тогда
			ФайлИнформации = МассивФайлИнформации[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		МассивФайлКарточки = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
		
		Если МассивФайлКарточки.Количество() > 0 Тогда
			ФайлКарточки = МассивФайлКарточки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		СоответствиеФайлПараметры = ПолучитьСоответствиеФайлПараметры(ФайлИнформации, ФайлКарточки);
		
		Если СоответствиеФайлПараметры.Количество() = 0 Тогда
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			Возврат Неопределено;
		КонецЕсли;
		
		// Определим соглашение
		НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		Попытка
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			// Менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки,
			// либо отсутствует ПО криптопровайдера, в этом случае менеджерам присваиваем "Неопределено"
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
		
		МассивФайловИзвещений = НайтиФайлы(ПапкаДляРаспаковки, "*ИзвещениеОПолученииДокумента*.xml", Истина);
		МассивФайловДанных = Новый Массив;
		
		ЭтоПроизвольныйЭД = Ложь;
		
		Для Каждого ЭлементСоответствия Из СоответствиеФайлПараметры Цикл
			ТипДанных = ОпределитьТипДанныхПоКодуТранзакции(ЭлементСоответствия.Значение.КодТранзакции);
			
			// Получена подпись второй стороны (подтверждение)
			Если ТипДанных = "Подпись" Тогда
				
			Иначе
				МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствия.Ключ, Истина);
				ДобавитьЭлементыМассиваИсточникаВМассивПриемник(МассивФайловДанных, МассивФайловИсточник);
				ТекстПроизвольногоЭД = "";
				ЭтоПроизвольныйЭД = ЭлементСоответствия.Значение.ДопДанные.Свойство("ПроизвольныйДокумент", ТекстПроизвольногоЭД);
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПроизвольныйЭД Тогда
			СоответствиеФайлПараметры.Вставить("Текст", ТекстПроизвольногоЭД);
			ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
			ЭлектронныеДокументыСлужебный.ОбработатьВходящийПроизвольныйЭД(ПапкаДляРаспаковки, ПараметрыШифрования,
				МассивФайловДанных, МенеджерКриптографии, МенеджерКриптографии, ПакетЭДОбъект, СоответствиеФайлПараметры);
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ТипДанных", ТипДанных);
		СтруктураВозврата.Вставить("СоответствиеФайлПараметры", СоответствиеФайлПараметры);
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанных", ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайловДанных));
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанныхИзвещений",
			ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайловИзвещений));
		Возврат СтруктураВозврата;
		
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Только для внутреннего использования
Функция ОбработатьДвоичныеДанныеПакетаТакском(ПакетЭД,
											  ДанныеРаспаковки,
											  ПапкаДляРаспаковки,
											  ЕстьКриптосредствоНаКлиенте,
											  МассивДобавленныхФайловДляИзвещений) Экспорт
	
	КоличествоОбработанныхДокументов = 0;
	
	МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
	МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
	
	ЕстьОшибкаРаспаковки = Ложь;
	
	Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
		
		МассивСтруктурПодписей = ЭлектронныеДокументыСлужебный.ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки,
			СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
		
		МассивДобавленныхФайлов = ДобавитьДанныеПоПакетуЭД(ПакетЭД,
														   МассивСтруктурПодписей,
														   СтруктураДанных,
														   ДанныеРаспаковки.СоответствиеФайлПараметры,
														   ПапкаДляРаспаковки,
														   ЕстьОшибкаРаспаковки,
														   ЕстьКриптосредствоНаКлиенте,
														   Истина,
														   МассивДобавленныхФайловДляИзвещений);
		
		Если НЕ ЕстьОшибкаРаспаковки И ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") Тогда
			КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + МассивДобавленныхФайлов.Количество();
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОшибкаРаспаковки Тогда
		
		ЭлектронныеДокументыСлужебный.УстановитьСтатусПакета(ПакетЭД,
			ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
		ЭлектронныеДокументыСлужебный.УдалитьПапкуНаСервере(ПапкаДляРаспаковки);
		
	Иначе
		КоличествоОбработанныхДокументов = 0;
	КонецЕсли;
	
	Возврат КоличествоОбработанныхДокументов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Приглашения к обмену

// Только для внутреннего использования
Функция ИсходящийЗапросПриглашенияТакском(ТаблицаОбработки, СтруктураДопПараметров) Экспорт
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/contacts}.Contacts";
	Попытка
		Контакты = ПолучитьОбъектТипаCML(ПутьКОписанию);
		ЗаполнитьСвойствоXDTO(Контакты, "Asof", ТекущаяДатаСеанса(), , ТекстОшибки);
		Для Каждого ТекСтрока Из ТаблицаОбработки Цикл
			Контакт = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Contact");
			ЗаполнитьСвойствоXDTO(Контакт, "Name", ТекСтрока.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Inn", ТекСтрока.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Kpp", ТекСтрока.КПП, , ТекстОшибки);  
			ЗаполнитьСвойствоXDTO(Контакт, "Email", ТекСтрока.АдресЭП, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "ExternalContactId", ТекСтрока.ВнешнийКод, , ТекстОшибки);
			Контакты.Contact.Добавить(Контакт);
		КонецЦикла;
		Контакты.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ВыгрузитьЭДвФайл(Контакты, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
	Исключение
		
		ТекстСообщения = ТекстОшибки + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование приглашения к обмену'"),
			ТекстОшибки, ТекстСообщения);
			
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Только для внутреннего использования
Процедура ПрочитатьЗапросПриглашенияТакском(ИмяФайла, ТаблицаКонтрагентов) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	ТекстСообщения = Неопределено;
	
	Попытка
		
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			ВызватьИсключение(ТекстСообщения);
			
		КонецЕсли;
		
		Если ЭД.Свойства().Получить("Contact") <> Неопределено Тогда
			
			Если ТипЗнч(ЭД.Contact) = Тип("СписокXDTO") Тогда
				
				Для Каждого Контакт Из ЭД.Contact Цикл
					
					Строка = ТаблицаКонтрагентов.Добавить();
					ЗаполнитьСтрокуТаблицыКонтактов(Строка, Контакт);
					
				КонецЦикла;
			Иначе
				
				Строка = ТаблицаКонтрагентов.Добавить();
				ЗаполнитьСтрокуТаблицыКонтактов(Строка, ЭД.Contact);
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		ОбъектXML.Закрыть();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСоединение() Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	НастройкиОператора = СтруктураНастроекТакском();
	ОпределитьПараметрыСайта(НастройкиОператора.АдресВебСервиса, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = ЭлектронныеДокументыСлужебный.СформироватьПрокси(Протокол);
	
	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВыгрузитьЭДвФайл(ЭД, ИмяФайла, УказаниеТипа = Истина)
	
	ЭлектронныеДокументыФорматОбмена.ВыгрузитьЭДвФайл(ЭД, ИмяФайла, УказаниеТипа);
	
КонецПроцедуры

Функция ПреобразоватьТекстСтатуса(КодСтатуса)
	
	Если КодСтатуса = "InvalidINN" Тогда
		ВозвращаемоеЗначение = "Неправильный ИНН";
	ИначеЕсли КодСтатуса = "InvalidEmail" Тогда
		ВозвращаемоеЗначение = "Неправильный адрес электронной почты";
	ИначеЕсли КодСтатуса = "Incoming" Тогда
		ВозвращаемоеЗначение = "Входящий запрос";
	ИначеЕсли КодСтатуса = "Rejected" Тогда
		ВозвращаемоеЗначение = "Отсоединен";
	ИначеЕсли КодСтатуса = "Accepted" Тогда
		ВозвращаемоеЗначение = "Присоединен";
	Иначе
		ВозвращаемоеЗначение = КодСтатуса;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование контейнера

Процедура СформироватьОписаниеПередаваемыхДокументовИПодписей(Конверт, СоответствиеВложений, ТЗ_Документы, Ст_Карточки)
	
	ТЗ_ДопДанных  = Новый ТаблицаЗначений;
	ТЗ_ДопДанных.Колонки.Добавить("ДопФайл");
	
	Ст_Вложений = СоздатьСтруктуруОписанияВложений();
	
	СтрокаЭД = Конверт.ЭлектронныеДокументы[0];
	ЭлектронныйДокумент = СтрокаЭД.ЭлектронныйДокумент;
	ВидЭД          = ЭлектронныйДокумент.ВидЭД;
	НаименованиеЭД = ЭлектронныйДокумент.Наименование;
	ПризнакПодписи = ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
	Если ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		
		ТЗ_Документы.Очистить();
		Ст_Карточки.Очистить();
		Возврат;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
		ИЛИ ПризнакПодписи Тогда
		
		РасширениеФайлаДанных = ".xml";
		ИДДокументооборота    = ЭлектронныйДокумент.УникальныйИД;
		
		Если ПризнакПодписи  Тогда
			// Подтверждение не имеет отдельной схемы ЭД, передаётся списком ЭЦП первичного ЭД.
			ВнешнийИдентификатор = ЭлектронныйДокумент.НомерЭД;
		Иначе
			ВнешнийИдентификатор = ЭлектронныйДокумент.ЭлектронныйДокументВладелец.НомерЭД;
		КонецЕсли;
		
		Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			И (ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ) Тогда
			
			Получатель = Ст_Карточки.Получатель;
			Получатель.Тип = "SpecOperator";
			Получатель.Имя = "tkc";
			Получатель.ИД  = "";
			Получатель.ИНН = "";
			Получатель.КПП = "";
		КонецЕсли;
		
	Иначе
		РасширениеФайлаДанных = ".zip";
		ВнешнийИдентификатор = ЭлектронныйДокумент.НомерЭД;
		
		// Изменим заполнение уникального индентификатора для документооборота при использовании версии регламента 20.
		Если ЭлектронныйДокумент.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			ИДДокументооборота = ЭлектронныйДокумент.УникальныйИД;
		Иначе
			ИДДокументооборота = Строка(ЭлектронныйДокумент.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	КодРегламента = ПолучитьКодРегламента(ЭлектронныйДокумент);
	
	СтрТЗ = ТЗ_Документы.Добавить();
	
	СтрокаДерева = СоответствиеВложений.Строки.Найти(ЭлектронныйДокумент.НомерЭД, "НомерЭД");
	Если НЕ ПризнакПодписи Тогда
		Ст_Вложений.Имя  = ИмяВложенияВТИ(Конверт, ВидЭД);
		Ст_Вложений.Путь = СтрокаДерева.ИмяФайла;
		
		СтрТЗ.Документ = СоздатьСтруктуруОписанияВложений();
		ЗаполнитьЗначенияСвойств(СтрТЗ.Документ, Ст_Вложений);
	КонецЕсли;
	
	ФайлДопДанных = СтрокаДерева.Строки.Найти(Ложь, "ЭтоПодпись");
	Если ФайлДопДанных <> Неопределено Тогда
		Ст_Вложений.Имя  = "";
		Ст_Вложений.Путь = ФайлДопДанных.ИмяФайла;
		СтрТЗ.Данные = СоздатьСтруктуруОписанияВложений();
		ЗаполнитьЗначенияСвойств(СтрТЗ.Данные, Ст_Вложений);
		
		ТЗ_ДопДанных.Очистить();
		Подписи = ФайлДопДанных.Строки.НайтиСтроки(Новый Структура("ЭтоПодпись", Истина));
		Для Каждого Подпись Из Подписи Цикл
			СтрПодпись = ТЗ_ДопДанных.Добавить();
			Ст_Вложений.Имя  = "";
			Ст_Вложений.Путь = Подпись.ИмяФайла;
			СтрПодпись.ДопФайл = СоздатьСтруктуруОписанияВложений();
			ЗаполнитьЗначенияСвойств(СтрПодпись.ДопФайл, Ст_Вложений);
		КонецЦикла;
		СтрТЗ.ПодписьДанных = ТЗ_ДопДанных.ВыгрузитьКолонку("ДопФайл");
	КонецЕсли;
	
	ТЗ_ДопДанных.Очистить();
	Подписи = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("ЭтоПодпись", Истина));
	Для Каждого Подпись Из Подписи Цикл
		СтрПодпись = ТЗ_ДопДанных.Добавить();
		Ст_Вложений.Имя  = "";
		Ст_Вложений.Путь = Подпись.ИмяФайла;
		СтрПодпись.ДопФайл = СоздатьСтруктуруОписанияВложений();
		ЗаполнитьЗначенияСвойств(СтрПодпись.ДопФайл, Ст_Вложений);
	КонецЦикла;
	
	СтрТЗ.ПодписьДокумента = ТЗ_ДопДанных.ВыгрузитьКолонку("ДопФайл");
	
	ОпределениеДок = Ст_Карточки["Определение"];
	ОпределениеДок.ВнешнийИдентификатор = ВнешнийИдентификатор;
	
	ВидДокумента = "Other";
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		
		ВидДокумента = "Statement";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		
		ВидДокумента = "FormalizedStatementCustomer";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ВидДокумента = "FormalizedStatementVendor";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		
		ВидДокумента = "Consignment";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорДокументПолучатель Тогда
		
		ВидДокумента = "FormalizedConsignmentCustomer";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорДокументОтправитель Тогда
		ВидДокумента = "FormalizedConsignmentVendor";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		ВидДокумента = "Invoice";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		ВидДокумента = "Account";
	КонецЕсли;
	ОпределениеДок.Имя = ВидДокумента;
	
	МассивВидовЭДБезПереподписи = Новый Массив;
	Если ПризнакПодписи ИЛИ МассивВидовЭДБезПереподписи.Найти(ВидЭД) <> Неопределено
		ИЛИ ЭлектронныеДокументыСлужебный.ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		ОпределениеДок.ТребуетсяПереподпись = Ложь;
	Иначе
		ОпределениеДок.ТребуетсяПереподпись = Истина;
	КонецЕсли;
	
	ОписаниеДок = Ст_Карточки["Описание"];
	ОписаниеДок.Заголовок = Строка(ВидЭД);
	ОписаниеДок.Дата = ?(ПризнакПодписи, ТекущаяДатаСеанса(), ЭлектронныйДокумент.ДатаСоздания);
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ОписаниеДок.Комментарий = СтрокаЭД.ОбъектВладелец.Текст;
	КонецЕсли;
	
	Если ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		СтрокаДопДанных = ОписаниеДок.ДополнительныеДанные.Добавить();
		СтрокаДопДанных.Имя = "Номер";
		СтрокаДопДанных.Значение = ?(ЗначениеЗаполнено(ЭлектронныйДокумент.НомерДокументаОтправителя),
			ЭлектронныйДокумент.НомерДокументаОтправителя, "Без номера");
	КонецЕсли;
	
	СтрТЗ.ВнешняяКарточка = СоздатьСтруктуруОписанияВложений();
	СтрТЗ.ВнешняяКарточка.Путь = "card.xml";
	
	СтрТЗ.Карточка = СоздатьСтруктуруДанныхКарточки();
	ЗаполнитьЗначенияСвойств(СтрТЗ.Карточка, Ст_Карточки);
	
	СтрТЗ.Определение = СоздатьСтруктуруДанныхОпределенияДокумента();
	СтрТЗ.Определение.ВнешнийИдентификатор = ИДДокументооборота;
	
	СтрТЗ.КодРегламента = КодРегламента;
	СтрТЗ.КодТранзакции = ПолучитьКодТранзакции(ЭлектронныйДокумент, КодРегламента, ПризнакПодписи);
	
	Если СтрТЗ.КодТранзакции = Неопределено Тогда
		
		ТЗ_Документы.Очистить();
		ШаблонСообщения = НСтр("ru = 'Ошибка при формировании пакета ЭД %1.
		|Не удалось определить Код транзакции по типу ЭД %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Конверт,
			ЭлектронныйДокумент.ТипЭлементаВерсииЭД);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранспортнуюИнформацию(Конверт, СоответствиеВложений, ТранспортнаяИнформация)
	
	ТЗ_Документы    = СоздатьОписаниеСтруктурыДокумента();
	Ст_Карточки     = СоздатьСтруктуруДанныхКарточки();
	Отправитель     = Ст_Карточки["Отправитель"];
	Отправитель.ИД  = Конверт.Отправитель;
	Отправитель.Имя = Конверт.Организация.Наименование;
	Отправитель.ИНН = Конверт.Организация.ИНН;
	Отправитель.КПП = Конверт.Организация.КПП;
	Получатель      = Ст_Карточки["Получатель"];
	Получатель.ИД   = Конверт.Получатель;
	Получатель.Имя  = Конверт.Контрагент.Наименование;
	Получатель.ИНН  = Конверт.Контрагент.ИНН;
	Получатель.КПП  = Конверт.Контрагент.КПП;
	
	СформироватьОписаниеПередаваемыхДокументовИПодписей(Конверт, СоответствиеВложений, ТЗ_Документы, Ст_Карточки);
	
	Если ТЗ_Документы.Количество() > 0 Тогда
		
		СтрТИ = ТранспортнаяИнформация.Добавить();
		СтрТИ.ИД       = Строка(Новый УникальныйИдентификатор);
		СтрТИ.Документ = ТЗ_Документы;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодТранзакции(ЭлектронныйДокумент, КодРегламента, ПризнакПодписи = Ложь)
	
	КодТранзакции = Неопределено;
	ТекущийТипЭлементаВерсииЭД = ЭлектронныйДокумент.ТипЭлементаВерсииЭД;
	ТекущийВидЭД = ЭлектронныйДокумент.ВидЭД;
	
	Если КодРегламента = "Invoice" Тогда
		
		Если ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
			КодТранзакции = "SendConfirmationReceiveNotice";
		ИначеЕсли ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
			КодТранзакции = "PostDateConfirmationReceiveNotice";
		ИначеЕсли ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
			КодТранзакции = "ReceiveNotice";
		ИначеЕсли ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
			КодТранзакции = "ReceiveNoticePostDateConfirmationReceiveNotice";
		ИначеЕсли ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			КодТранзакции = "CorrectionNotice";
		ИначеЕсли ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
			КодТранзакции = "CorrectionNoticeReceiveNotice";
		ИначеЕсли ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			КодТранзакции = "Invoice";
		КонецЕсли;
		
	ИначеЕсли КодРегламента = "Formalized" Тогда
		Если ТекущийВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ТекущийВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ТекущийВидЭД = Перечисления.ВидыЭД.КорДокументОтправитель Тогда
			
			КодТранзакции = "VendorTitle";
		ИначеЕсли ТекущийВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ТекущийВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ТекущийВидЭД = Перечисления.ВидыЭД.КорДокументПолучатель Тогда
			
			КодТранзакции = "CustomerTitle";
		КонецЕсли;
		
		Если ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП Тогда
			КодТранзакции = "ReceiveNotice";
		ИначеЕсли ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ Тогда
			КодТранзакции = "MainDocumentReject"; // VendorTitleReject
		КонецЕсли;
		
	ИначеЕсли КодРегламента = "Nonformalized" Тогда
		КодТранзакции = "MainDocument";
		Если ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП Тогда
			КодТранзакции = "ReceiveNotice";
		ИначеЕсли ТекущийТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ Тогда
			КодТранзакции = "MainDocumentReject";
		КонецЕсли;
		
		Если ПризнакПодписи Тогда
			КодТранзакции = "MainDocumentResign";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КодТранзакции;
	
КонецФункции

Функция ПолучитьКодРегламента(ЭлектронныйДокумент)
	
	ПараметрыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭлектронныйДокумент,
		"ВерсияРегламентаЭДО, ТипЭлементаВерсииЭД");
	
	КодРегламента = "Nonformalized";
	// Изменим код регламента при использовании версии регламента 20.
	Если ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		КодРегламента = "Formalized";
	КонецЕсли;
	
	Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		КодРегламента = "Invoice";
	КонецЕсли;
	
	Возврат КодРегламента;
	
КонецФункции

Функция СоздатьСтруктуруДанныхОписанияДокумента()
	
	Ст_Описание = Новый Структура;
	
	ТЗ_ДопДанные = Новый ТаблицаЗначений;
	ТЗ_ДопДанные.Колонки.Добавить("Имя");
	ТЗ_ДопДанные.Колонки.Добавить("Значение");
	
	Ст_Описание.Вставить("Заголовок");
	Ст_Описание.Вставить("Дата");
	Ст_Описание.Вставить("Комментарий");
	Ст_Описание.Вставить("ДополнительныеДанные", ТЗ_ДопДанные);
	Ст_Описание.Вставить("ОбязательныеПараметры", "Заголовок, Дата, Комментарий, ДополнительныеДанные");
	
	Возврат Ст_Описание;
	
КонецФункции

Функция СоздатьСтруктуруДанныхОпределенияДокумента()
	
	Ст_Определение = Новый Структура;
	
	Ст_Определение.Вставить("ВнутреннийИдентификатор");      //InternalId
	Ст_Определение.Вставить("ВнешнийИдентификатор");         //ExternalIdentifier
	Ст_Определение.Вставить("ИДДокументаВладельца");         //ParentDocumentId
	Ст_Определение.Вставить("ВнутреннийИДГруппыДокументов"); //InternalDocumentGroupId
	Ст_Определение.Вставить("ВнешнийИДГруппыДокументов");    //ExternalDocumentGroupIdentifier
	Ст_Определение.Вставить("Имя");                          //Name
	Ст_Определение.Вставить("ТребуетсяПереподпись");         //ResignRequired
	
	Возврат Ст_Определение;
	
КонецФункции

Функция СоздатьСтруктуруДанныхУчастниковОбмена()
	
	Ст_УчастникОбмена = Новый Структура;
	Ст_УчастникОбмена.Вставить("ИД");                //ID
	Ст_УчастникОбмена.Вставить("Имя");               //Name
	Ст_УчастникОбмена.Вставить("ИНН");               //Inn
	Ст_УчастникОбмена.Вставить("КПП");               //Kpp
	Ст_УчастникОбмена.Вставить("КонтактныйТелефон"); //ContractNumber
	Ст_УчастникОбмена.Вставить("Тип");               //Type
	
	Возврат Ст_УчастникОбмена;
	
КонецФункции

Функция СоздатьСтруктуруДанныхКарточки()
	
	Ст_Карточка = Новый Структура;
	
	Ст_Карточка.Вставить("Определение", СоздатьСтруктуруДанныхОпределенияДокумента()); //Definition
	Ст_Карточка.Вставить("Описание",    СоздатьСтруктуруДанныхОписанияДокумента());    //Description
	Ст_Карточка.Вставить("Отправитель", СоздатьСтруктуруДанныхУчастниковОбмена());     //Sender
	Ст_Карточка.Вставить("Получатель",  СоздатьСтруктуруДанныхУчастниковОбмена());     //Receiver
	Ст_Карточка.Вставить("ОбязательныеПараметры", "Отправитель, Получатель, Определение");
	
	Возврат Ст_Карточка;
	
КонецФункции

Функция СоздатьСтруктуруОписанияВложений()
	
	Ст_Описания = Новый Структура;
	
	Ст_Описания.Вставить("Путь"); //Path
	Ст_Описания.Вставить("Имя");  //Name
	
	Возврат Ст_Описания;
	
КонецФункции

Функция СоздатьОписаниеСтруктурыДокумента()
	
	ТЗ_Документы = Новый ТаблицаЗначений;
	ТЗ_Документы.Колонки.Добавить("КодТранзакции");         //TransactionCode
	ТЗ_Документы.Колонки.Добавить("КодРегламента");         //ReglamentCode
	ТЗ_Документы.Колонки.Добавить("Определение");           //Definition Определение документа: СоздатьСтруктуруДанныхОпределенияДокумента()
	ТЗ_Документы.Колонки.Добавить("Карточка");              //Card Карточка: СоздатьСтруктуруДанныхКарточки()
	ТЗ_Документы.Колонки.Добавить("СтатусПорядок");         //OrderInDocFlow
	ТЗ_Документы.Колонки.Добавить("СтатусНаправление");     //Direction
	ТЗ_Документы.Колонки.Добавить("СтатусТипРезультата");   //TransactionResultType
	ТЗ_Документы.Колонки.Добавить("Документ");              //MainImage
	ТЗ_Документы.Колонки.Добавить("ПодписьДокумента");      //MainImageSignature
	ТЗ_Документы.Колонки.Добавить("Данные");                //DataImage
	ТЗ_Документы.Колонки.Добавить("ПодписьДанных");         //DataImageSignature
	ТЗ_Документы.Колонки.Добавить("ВнешняяКарточка");       //ExternalCard
	
	Возврат ТЗ_Документы;
	
КонецФункции

Функция СоздатьОписаниеСтруктурыДанныхТИ()
	
	ТЗ_ТранспортнаяИнформация = Новый ТаблицаЗначений;
	ТЗ_ТранспортнаяИнформация.Колонки.Добавить("Описание");                  //Description Описание структуры данных: СоздатьСтруктуруДанныхОписанияДокумента()
	ТЗ_ТранспортнаяИнформация.Колонки.Добавить("ИД");                        //Id
	ТЗ_ТранспортнаяИнформация.Колонки.Добавить("Статус");                    //Status
	ТЗ_ТранспортнаяИнформация.Колонки.Добавить("ТипОшибки");                 //ErrorType
	ТЗ_ТранспортнаяИнформация.Колонки.Добавить("ДатаВремяИзмененияСтатуса"); //StatusChangeDateTime
	ТЗ_ТранспортнаяИнформация.Колонки.Добавить("Документ");                  //Document Структура документов: СоздатьОписаниеСтруктурыДокументаТИ()
	
	Возврат ТЗ_ТранспортнаяИнформация;
	
КонецФункции

Функция ИмяВложенияВТИ(Конверт, ВидЭД)
	
	ИмяВложения = "";
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура И Конверт.ЭлектронныеДокументы.Количество() > 0 Тогда
		СтрокаЭД = Конверт.ЭлектронныеДокументы[0];
		Если ЗначениеЗаполнено(СтрокаЭД.ОбъектВладелец) И ЗначениеЗаполнено(СтрокаЭД.ЭлектронныйДокумент) Тогда
			Префикс = ?(ЭлектронныеДокументыПереопределяемый.ЭтоКорректировочныйСчетФактура(СтрокаЭД.ОбъектВладелец),
				"ON_KORSFAKT", "ON_SFAKT");
				
			ЭД = СтрокаЭД.ЭлектронныйДокумент;
			ГГГГММДД = СтрЗаменить(Формат(ЭД.ДатаСоздания, "ДФ=yyyy-MM-dd"), "-", "");
			ИмяВложения = ФНСИмяФайла(Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
				Префикс, Конверт.Получатель, Конверт.Отправитель, ГГГГММДД, ЭД.УникальныйИдентификатор()));
			ИмяВложения = ИмяВложения + ".xml";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяВложения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен с такском

Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол);
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
	
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта,8);
		ЗащищенноеСоединение = ложь;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол =  "https";
		Адрес = Сред(АдресСайта,9);
		ЗащищенноеСоединение = истина;
	КонецЕсли;
	
КонецПроцедуры 

Функция РасшифроватьМаркер(ИмяФайлаРезультата, СертификатПодписи, ПарольКСертификатуОператора)
	
	НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
	ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ПарольКСертификатуОператора) Тогда
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольКСертификатуОператора;
	КонецЕсли;
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("103");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	ФайлРасшифрованногоМаркера = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("txt");
	РасшифрованныеДвоичныеДанные.Записать(ФайлРасшифрованногоМаркера);
	
	ФайлРезультата = Новый ТекстовыйДокумент;
	ФайлРезультата.Прочитать(ФайлРасшифрованногоМаркера, КодировкаТекста.UTF8);
	УдалитьФайлы(ФайлРасшифрованногоМаркера);
	Результат = ФайлРезультата.ПолучитьТекст();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМаркерОЭДО(Соглашение, Соединение, ПарольКСертификату = Неопределено)
	
	Маркер = Неопределено;
	
	ПараметрыСоглашения = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Соглашение, "СертификатАбонента, Наименование");
	Если ЗначениеЗаполнено(ПараметрыСоглашения.СертификатАбонента) Тогда
		
		ПараметрыСертификата = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПараметрыСоглашения.СертификатАбонента,
			"ФайлСертификата, ЗапомнитьПарольКСертификату, ПарольПользователя");
		Если ПарольКСертификату = Неопределено Тогда
			Если ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
				ПарольКСертификату = ПараметрыСертификата.ПарольПользователя;
			КонецЕсли;
		КонецЕсли;
		Если ПарольКСертификату <> Неопределено Тогда
			АдресРесурса = "CertificateLogin";
			
			ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("txt");
			СертификатПодписи = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("cer");
			
			ДвоичныеДанныеСертификата = ПараметрыСертификата.ФайлСертификата.Получить();
			ДвоичныеДанныеСертификата.Записать(СертификатПодписи);
			
			Заголовки = "";
			ДобавитьпараметрВЗаголовок(Заголовки, "Integrator-Id", "1C_22BFE9D5-E77D-424A-BC6D-D8A3496C05FE");
			
			Попытка
				Соединение.ОтправитьДляОбработки(СертификатПодписи, АдресРесурса, ИмяФайлаРезультата, Заголовки);
			Исключение
				ТекстСообщения = НСтр("ru = 'Ошибка авторизации на сервере оператора электронного документооборота Такском!
				|(подробности см. в Журнале регистрации).'");
				ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'авторизация на сервере Такском'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
					
				Возврат Неопределено;
			КонецПопытки;
			
			Маркер = РасшифроватьМаркер(ИмяФайлаРезультата, СертификатПодписи, ПарольКСертификату);
			
			УдалитьФайлы(ИмяФайлаРезультата);
			УдалитьФайлы(СертификатПодписи);
		КонецЕсли;
		
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не указан сертификат оператора электронного документооборота Такском,
		|в соглашении об обмене электронными документами %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПараметрыСоглашения.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат Маркер;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

Функция ПередатьПакетЭДОператораЭДО(Файл, Маркер, Соединение, Знач АдресРесурса, ФлагОтладки)
	
	ПараметрВозврата = 0;
	Если ЗначениеЗаполнено(Маркер) Тогда
		Заголовки = "";
		ДобавитьпараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("txt");
		
		АдресРесурса = АдресРесурса + ?(АдресРесурса = "SendMessage", "/" + СтрЗаменить(Файл.Имя, "-", ""), "");
		
		Если ФлагОтладки Тогда 
			КопироватьФайл(Файл.ПолноеИмя, ЭлектронныеДокументыСлужебный.ТекущийКаталогВременныхФайлов() + Файл.Имя);
		КонецЕсли;
		
		Попытка
			Соединение.ОтправитьДляОбработки(Файл.ПолноеИмя, АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ПараметрВозврата = 1;
		Исключение
			ПараметрВозврата = 0;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			Если ЗначениеЗаполнено(Результат) Тогда
				КодОшибки = Сред(Результат, Найти(Результат, "ApiErrorCode") + 15, 4);
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке(КодОшибки, Результат);
				
				ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'отправка пакета ЭД'"), Результат, ТекстСообщения);
			КонецЕсли;
			
		КонецПопытки;
		
		УдалитьФайлы(ИмяФайлаРезультата);
	КонецЕсли;
	
	Возврат ПараметрВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

Функция ПолучитьСписокЭДОператораЭДО(Маркер, Соединение, Знач АдресРесурса, ДатаПоследнегоЗапроса)
	
	ИмяФайлаРезультата = Неопределено;
	Если ЗначениеЗаполнено(Маркер) Тогда
		АдресРесурса = АдресРесурса + ?(ЗначениеЗаполнено(ДатаПоследнегоЗапроса), "?date=" + ДатаПоследнегоЗапроса, "");
		Заголовки = "";
		
		ДобавитьпараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Ошибка получения входящих электронных документов на сервере Такском!
			|(подробности см. в Журнале регистрации).'");
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Получение ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
				
			УдалитьФайлы(ИмяФайлаРезультата);
			ИмяФайлаРезультата = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

Функция РазобратьТекстСпискаЭД(СписокЭД_XML, ТЗ)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДДокументооборота");
	ТЗ.Колонки.Добавить("КодТранзакции");
	ТЗ.Колонки.Добавить("ИДДокумента");
	ТЗ.Колонки.Добавить("Приоритет");
	
	ДатаВремяЗапроса = Неопределено;
	
	Если ЗначениеЗаполнено(СписокЭД_XML) Тогда
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(СписокЭД_XML);
		
		ИДДокументооборота = Неопределено;
		КодТранзакции      = Неопределено;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ContainerDescription" Тогда
				ДатаВремяЗапроса = ЧтениеХМЛ.ПолучитьАтрибут("LastRecordDateTime");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "DocFlow" Тогда
				ИДДокументооборота = ЧтениеХМЛ.ПолучитьАтрибут("Id");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Document" Тогда
				КодТранзакции      = ЧтениеХМЛ.ПолучитьАтрибут("TransactionCode");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Identifiers" Тогда
				СтрТЗ = ТЗ.Добавить();
				СтрТЗ.ИДДокументооборота = ИДДокументооборота;
				СтрТЗ.КодТранзакции      = КодТранзакции;
				
				Если КодТранзакции = "Invoice" ИЛИ КодТранзакции = "MainDocument"
					ИЛИ КодТранзакции = "VendorTitle" ИЛИ КодТранзакции = "CustomerTitle" Тогда
					
					СтрТЗ.Приоритет = 0;
				ИначеЕсли КодТранзакции = "PostDateConfirmation"
					ИЛИ КодТранзакции = "SendConfirmation"
					ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
					
					СтрТЗ.Приоритет = 1;
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					
					СтрТЗ.Приоритет = 2;
				ИначеЕсли КодТранзакции = "MainDocumentReject" Тогда
					
					СтрТЗ.Приоритет = 3;
				Иначе
					
					СтрТЗ.Приоритет = 4;
				КонецЕсли;
				
				СтрТЗ.ИДДокумента = ЧтениеХМЛ.ПолучитьАтрибут("InternalId");
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ТЗ.Сортировать("Приоритет");
	КонецЕсли;
	
	Возврат ДатаВремяЗапроса;
	
КонецФункции

Функция ПолучитьЭДОператораЭДО(Маркер, Соединение, ПарольКСертификату, ИДДокумента, Соглашение, Рекурсия = Ложь)
	
	ИмяФайлаРезультата = Неопределено;
	Если ЗначениеЗаполнено(Маркер) Тогда
		АдресРесурса = "GetMessage/" + ИДДокумента;
		Заголовки = "";
		
		ДобавитьпараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
		Исключение
			// Если возникла ошибка по причине истечения времени действия маркера,
			// то пробуем получить новый маркер и повторить попытку получения ЭД.
			УдалитьФайлы(ИмяФайлаРезультата);
			ИмяФайлаРезультата = Неопределено;
			Если НЕ Рекурсия Тогда
				Маркер = ПолучитьМаркерОЭДО(Соглашение, Соединение, ПарольКСертификату);
				ИмяФайлаРезультата = ПолучитьЭДОператораЭДО(Маркер, Соединение, ПарольКСертификату, ИДДокумента, Соглашение, Истина);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

Функция ПакетЭДУжеЗагружен(ИДДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийУИД = &ВнешнийУИД
	|	И ПакетЭД.Направление = &Направление";
	Запрос.УстановитьПараметр("Направление", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("ВнешнийУИД",  ИДДокумента);
	
	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Возврат НЕ РезультатПустой;
	
КонецФункции

Функция ПолучитьДанныеВходящегоЭД(ДвоичныеДанные, КодТранзакции, ИДДокументооборота, ИДДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	
	Если КодТранзакции = "PostDateConfirmation"
		ИЛИ КодТранзакции = "SendConfirmation" 
		ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation"
		ИЛИ КодТранзакции = "ErrorMessage" Тогда
		
		Если КодТранзакции = "PostDateConfirmation" Тогда
			ЭДСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДДокументооборота));
			ЭДНайден = (ЭДСсылка.ПолучитьОбъект() <> Неопределено);
			
		ИначеЕсли КодТранзакции = "ErrorMessage" Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("УникальныйИД", ИДДокументооборота);
			ЭДСсылка = ОпределитьДокументПоПараметрам(Параметры);
			ЭДНайден = (ЭДСсылка <> Неопределено);
		Иначе
			Параметры = Новый Структура;
			Параметры.Вставить("Направление",  Перечисления.НаправленияЭД.Входящий);
			Параметры.Вставить("УникальныйИД", ИДДокументооборота);
			Параметры.Вставить("ВидЭД",        Перечисления.ВидыЭД.СчетФактура);
			ЭДСсылка = ОпределитьДокументПоПараметрам(Параметры);
			ЭДНайден = (ЭДСсылка <> Неопределено);
		КонецЕсли;
		
		Если ЭДНайден Тогда
			НастройкиСоглашения = Новый Структура;
			НастройкиСоглашения.Вставить("Основание",   ЭДСсылка.СоглашениеЭД);
			НастройкиСоглашения.Вставить("Организация", ЭДСсылка.Организация);
			НастройкиСоглашения.Вставить("Контрагент",  ЭДСсылка.Контрагент);
			ИДОтправителя = ЭДСсылка.ОтправительЭД;
			ИДПолучателя  = ЭДСсылка.ПолучательЭД;
		КонецЕсли;
	Иначе
		
		ИмяВременногоФайлаЗИП = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
		КлючУникальности = Новый УникальныйИдентификатор();
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ВходящийПакет");
		ОшибкаПути = Ложь;
		Для Каждого Элемент Из ЗИПЧтение Цикл
			ДоступнаяДлинаИмени = 256 - СтрДлина(ИмяВременногоФайлаЗИП);
			Если СтрДлина(Элемент.Имя) > ДоступнаяДлинаИмени Тогда
				ТекстСообщения = НСтр("ru = 'Невозможно извлечь данные из файла, имена вложенных файлов слишком длинные!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОшибкаПути = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ОшибкаПути Тогда
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			
			МассФайлКарточки  = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
			
			Если МассФайлКарточки.Количество() > 0 Тогда
				ФайлКарточки = МассФайлКарточки[0];
			Иначе
				ФайлКарточки = Неопределено;
			КонецЕсли;
			
			ИДПолучателя  = Неопределено;
			ИДОтправителя = Неопределено;
			Если ФайлКарточки <> Неопределено Тогда
				
				ОбъектXML = Новый ЧтениеXML;
				СтруктураЗначений = Новый Структура;
				
				Попытка
					ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					ОбъектXML.Закрыть();
					ИДОтправителя = ЭД.Sender.Abonent.ID;
					ИДПолучателя  = ЭД.Receiver.Abonent.ID;
					НастройкиСоглашения = ЭлектронныеДокументыСлужебный.ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя, Истина);
				Исключение
					ОбъектXML.Закрыть();
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИДДокумента, ОписаниеОшибки());
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					НастройкиСоглашения = Неопределено;
					
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		УдалитьФайлы(ИмяВременногоФайлаЗИП);
		УдалитьФайлы(ПапкаДляРаспаковки);
	КонецЕсли;
	
	
	Если НастройкиСоглашения <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Получатель",       ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",      ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",      НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",       НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("Соглашение",       НастройкиСоглашения.Основание);
		СтруктураПараметров.Вставить("АдресОтправителя", Неопределено);
		СтруктураПараметров.Вставить("АдресПолучателя",  Неопределено);
		СтруктураПараметров.Вставить("Зашифрован",       Ложь);
		СтруктураПараметров.Вставить("ВнешнийУИД",       ИДДокумента);
		СтруктураПараметров.Вставить("СтатусПакета",     Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтруктураПараметров.Вставить("НаправленияЭД",    Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("СпособОбменаЭД",   Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

Процедура ПрочитатьШапкуФайлаCMLпоXDTO(ИмяФайла, КодРегламента, КодТранзакции, СтруктураФайлаЭД)
	
	ОбъектXML = Новый ЧтениеXML;
	ИдЭД                      = Неопределено;
	ВидЭД                     = Неопределено;
	НаправлениеЭД             = Неопределено;
	НомерДокументаОтправителя = Неопределено;
	ДатаДокументаОтправителя  = Неопределено;
	ТипЭлементаВерсииЭД       = Неопределено;
	СтатусЭДВладельца         = Неопределено;
	ТекстСообщения            = Неопределено;
	ОписаниеОшибки            = Неопределено;
	ТекстУточнения            = Неопределено;
	
	СтруктураУчастников = Новый Структура;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		
		Если КодТранзакции = "ErrorMessage" Тогда
			ОписаниеОшибки      = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке(ЭД.КодОшибки, ЭД.Описание);
			ВидЭД               = Перечисления.ВидыЭД.Ошибка;
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка;
			СтатусЭДВладельца   = Перечисления.СтатусыЭД.ОшибкаПередачи;
		Иначе
			ИдЭД = ЭД.ИдФайл;
			НомерВерсииЭД = 0;
			
			Если КодРегламента = "Nonformalized" ИЛИ КодРегламента = "Formalized" Тогда
				
				Если КодТранзакции = "PostDateConfirmation" Тогда
					ВидЭД               = Перечисления.ВидыЭД.Подтверждение;
					Если ЭД.Документ.КНД = "1115112" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
					Иначе
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО;
					КонецЕсли;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя  = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "CorrectionNotice" ИЛИ КодТранзакции = "MainDocumentReject" Тогда
					ВидЭД               = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.ОтклоненПолучателем;
					ДатаДокументаОтправителя  = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвУведУточ.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвУведУточ.ВремяПол, ".", ""));
					ТекстУточнения      = ЭД.Документ.СвУведУточ.ТекстУведУточ;
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					ВидЭД               = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.Доставлен;
					ДатаДокументаОтправителя  = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());
				КонецЕсли;
				
			Иначе
				Если КодТранзакции = "PostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "SendConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Получен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Получен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Доставлен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
				ИначеЕсли КодТранзакции = "CorrectionNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.ОтклоненПолучателем;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвУведУточ.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвУведУточ.ВремяПол, ".", ""));
					ТекстУточнения           = ЭД.Документ.СвУведУточ.ТекстУведУточ;
				ИначеЕсли КодТранзакции = "CorrectionNoticeReceiveNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отклонен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		
		СтруктураФайлаЭД.НомерВерсииЭД             = НомерВерсииЭД;
		СтруктураФайлаЭД.ВидЭд                     = ВидЭД;
		СтруктураФайлаЭД.НомерЭД                   = ИдЭД;
		СтруктураФайлаЭД.НаправлениеЭД             = НаправлениеЭД;
		СтруктураФайлаЭД.СтатусЭДВладельца         = СтатусЭДВладельца;
		СтруктураФайлаЭД.ТипЭлементаВерсииЭД       = ТипЭлементаВерсииЭД;
		СтруктураФайлаЭД.НомерДокументаОтправителя = НомерДокументаОтправителя;
		СтруктураФайлаЭД.ДатаДокументаОтправителя  = ДатаДокументаОтправителя;
		СтруктураФайлаЭД.ОписаниеОшибки            = ОписаниеОшибки;
		СтруктураФайлаЭД.ТекстУточнения            = ТекстУточнения;
	Исключение
		ОбъектXML.Закрыть();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьЭлементыМассиваИсточникаВМассивПриемник(МассивПриемник, МассивИсточник)
	
	Для Каждого ЭлементМассива Из МассивИсточник Цикл
		
		МассивПриемник.Добавить(ЭлементМассива);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеВСоответствие(СоответствиеВозврата, ПредставлениеДокумента, ВложеннаяСтруктура)
	
	СоответствиеВозврата.Вставить(ПредставлениеДокумента, ВложеннаяСтруктура);
	ПредставлениеДокумента = "";
	
КонецПроцедуры

// В данной функции обрабатываются входящие служебные документы:
// ПДО, ИОП, УОУ - т.е. документы пришедшие в ответ на ранее отправленный ЭД.
//
// Параметры:
// МассивДобавленныхФайловДляИзвещений - Добавленные ЭД, на основании которых надо сформировать извещения о получении
//
Функция ДобавитьДанныеПоПакетуЭД(ПакетЭД,
								СтруктураДанныхПодписей,
								СтруктураДанных,
								СоответствиеФайлПараметры,
								ПапкаДляРаспаковки,
								ФлагОшибки = Ложь,
								ЕстьКриптосредствоНаКлиенте = Неопределено,
								ЭтоXML = Ложь,
								МассивДобавленныхФайловДляИзвещений)
	
	Если Найти(СтруктураДанных.ИмяФайла, "ИзвещениеОПолученииДокумента") > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДобавленныхФайлов = Новый Массив;
	Попытка
		
		НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	Если НЕ ЕстьКриптосредствоНаКлиенте = Истина
		И СтруктураДанныхПодписей.Количество() > 0 И МенеджерКриптографии = Неопределено Тогда
		
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки пакета:
		|%1
		|Пакет содержит электронные цифровые подписи. Для распаковки требуется наличие криптосредства на компьютере.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
		
		// Если распаковка на клиенте, тогда выводить сообщение
		Если НЕ ЕстьКриптосредствоНаКлиенте = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Распаковка пакета'"), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		ФлагОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		Соглашение = ПакетЭД.Соглашение;
		
		ФайлДанных = СтруктураДанных.ДвоичныеДанные;
		ФайлРасшифрованногоАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(?(ЭтоXML, "xml", "zip"));
		ФайлДанных.Записать(ФайлРасшифрованногоАрхива);
		
		РасшифрованныйФайлДанных = Новый Файл(ФайлРасшифрованногоАрхива);
		
		СтруктураФайлаЭД = СформироватьСтруктуруФайлаЭД();
		
		ПапкаДляРасшифровки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Расшифровка");
		ЭлектронныеДокументыСлужебный.УдалитьЛишнийСлэшВПути(ПапкаДляРасшифровки);
		УдалитьФайлы(ПапкаДляРасшифровки, "*");
		
		Если ЭтоXML Тогда
			КопироватьФайл(РасшифрованныйФайлДанных.ПолноеИмя, ПапкаДляРасшифровки + СтруктураДанных.ИмяФайла);
		Иначе
			ЧтениеЗИП = Новый ЧтениеZIPФайла(РасшифрованныйФайлДанных.ПолноеИмя);
			ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРасшифровки);
		КонецЕсли;
		
		ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*.xml");
		Если ФайлыРасшифровки.Количество() = 0 Тогда
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		Иначе
			ФайлСДанными = ФайлыРасшифровки[0];
			
			СтруктураСлужебныхДанных = СоответствиеФайлПараметры.Получить(ФайлСДанными.Имя);
			КодРегламента = СтруктураСлужебныхДанных.КодРегламента;
			КодТранзакции = СтруктураСлужебныхДанных.КодТранзакции;
			Попытка
				
				ПрочитатьШапкуФайлаCMLпоXDTO(ФайлСДанными.ПолноеИмя, КодРегламента, КодТранзакции, СтруктураФайлаЭД);
				СтруктураФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
				СтруктураФайлаЭД.СоглашениеЭД  = Соглашение;
				СтруктураФайлаЭД.Организация   = ПакетЭДОбъект.Организация;
				СтруктураФайлаЭД.Контрагент    = ПакетЭДОбъект.Контрагент;
			Исключение
				УдалитьФайлы(ПапкаДляРасшифровки);
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		// Для служебных документов, в НомерЭД помещается DocFlow.Id
		// УИД первичного ЭД в ИБ отправителя, он же УникальныйИД в ИБ получателя.
		ГУИДПервичногоЭД = СтруктураСлужебныхДанных.НомерЭД;
		
		ЭлектронныйДокументВладелец = Неопределено;
		Параметры = Новый Структура;
		
		// Для неформализованного документооборота служебные документы поступают только в ИБ отправителя
		Если КодРегламента = "Nonformalized" ИЛИ КодРегламента = "Formalized"
			ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
			ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			
			ПервичныйЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДПервичногоЭД));
			ЭлектронныйДокументВладелец = ПервичныйЭД;
			ПервичныйЭДНайден = (ПервичныйЭД.ПолучитьОбъект() <> Неопределено);
			
		Иначе
			
			Параметры.Вставить("Направление",  Перечисления.НаправленияЭД.Входящий);
			Параметры.Вставить("УникальныйИД", ГУИДПервичногоЭД);
			Параметры.Вставить("ВидЭД",        Перечисления.ВидыЭД.СчетФактура);
			ПервичныйЭД = ОпределитьДокументПоПараметрам(Параметры);
			ПервичныйЭДНайден = ПервичныйЭД <> Неопределено;
			
			Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				ИЛИ СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.Ошибка Тогда
				
				ЭлектронныйДокументВладелец = ПервичныйЭД;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПервичныйЭДНайден Тогда
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЭлектронныйДокументВладелец = Неопределено Тогда
			
			Параметры.Направление = Перечисления.НаправленияЭД.Исходящий;
			
			Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
				
				Параметры.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
			Иначе
				
				Параметры.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;
				Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ);
			КонецЕсли;
			
			ЭлектронныйДокументВладелец = ОпределитьДокументПоПараметрам(Параметры);
		КонецЕсли;
		
		Если ЭлектронныйДокументВладелец = Неопределено Тогда
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		КонецЕсли;
		
		ВладелецЭД = ПервичныйЭД.ВладелецФайла;
		
		Если СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.Ошибка Тогда
			
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при передаче электронного документа %1, получатель %2.
			|(подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПервичныйЭД,
				ПервичныйЭД.Контрагент);
			
			ПодробныйШаблонОшибки = НСтр("ru = 'При передаче электронного документа %1, возникла ошибка: %2.
			|Документ информационной базы (владелец электронного документа) - %3;
			|Соглашение об обмене электронными документами - %4.'");
			ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодробныйШаблонОшибки, ПервичныйЭД,
				СтруктураФайлаЭД.ОписаниеОшибки, ВладелецЭД, ПервичныйЭД.СоглашениеЭД);

			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Передача электронного документа'"),
				ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураОбновленияПараметров = Новый Структура;
			СтруктураОбновленияПараметров.Вставить("ВладелецЭД",     ВладелецЭД);
			СтруктураОбновленияПараметров.Вставить("ВидЭД",          ПервичныйЭД.ВидЭД);
			СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",  ПервичныйЭД.НаправлениеЭД);
			СтруктураОбновленияПараметров.Вставить("Контрагент",     ПервичныйЭД.Контрагент);
			СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",   ПервичныйЭД.СоглашениеЭД);
			СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ОписаниеОшибки);
			СтруктураОбновленияПараметров.Вставить("СтатусЭД", ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
				СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
			
			ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров);
			
		Иначе
			
			// Поместим файл данных в присоединенные файлы к документу БД.
			ДобавленныйФайл = ЭлектронныеДокументыСлужебный.ОпределитьДокументПоНомеруЭД(СтруктураФайлаЭД.НомерЭД,
				СтруктураФайлаЭД.НаправлениеЭД);
			
			Если Не ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлДанных);
				ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ФайлСДанными.Имя).Подписи;
				
				ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецЭД, ФайлСДанными.ИмяБезРасширения,
					СтрЗаменить(РасшифрованныйФайлДанных.Расширение, ".", ""), ТекущаяДатаСеанса(), ТекущаяДатаСеанса(),
					АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы");
				
				Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПакетЭД.Контрагент, Соглашение);
				
				Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
					
					Если Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
						ПараметрыУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(Соглашение,
							СтруктураФайлаЭД.Контрагент);
						
						Если НЕ ПараметрыУчастника.Свойство("ИдентификаторКонтрагента") Тогда
							УдалитьФайлы(ПапкаДляРасшифровки);
							Возврат Неопределено;
						Иначе
							ИдентификаторКонтрагента = ПараметрыУчастника.ИдентификаторКонтрагента;
						КонецЕсли;
					Иначе
						ИдентификаторКонтрагента = Соглашение.ИдентификаторКонтрагента;
					КонецЕсли;
					
					СтруктураОбновленияПараметров = Новый Структура;
					СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                  ВладелецЭД);
					СтруктураОбновленияПараметров.Вставить("ВидЭД",                       СтруктураФайлаЭД.ВидЭД);
					СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
					СтруктураОбновленияПараметров.Вставить("НомерЭД",                     СтруктураФайлаЭД.НомерЭД);
					СтруктураОбновленияПараметров.Вставить("Организация",                 СтруктураФайлаЭД.Организация);
					СтруктураОбновленияПараметров.Вставить("Контрагент",                  СтруктураФайлаЭД.Контрагент);
					СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",               СтруктураФайлаЭД.НомерВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("НомерДокументаОтправителя",   СтруктураФайлаЭД.НомерДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("ДатаДокументаОтправителя",    СтруктураФайлаЭД.ДатаДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("Ответственный",               Ответственный);
					СтруктураОбновленияПараметров.Вставить("Отправитель",                 ИдентификаторКонтрагента);
					СтруктураОбновленияПараметров.Вставить("Получатель",                  Соглашение.ИдентификаторОрганизации);
					СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",                Соглашение);
					СтруктураОбновленияПараметров.Вставить("УникальныйИД",                ГУИДПервичногоЭД);
					СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
					СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",         СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("СтатусЭД",
						ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Получен, ДобавленныйФайл));
					Если СтруктураОбновленияПараметров.Свойство("Организация")
						И СтруктураОбновленияПараметров.Организация <> Соглашение.Организация Тогда
						
						УдалитьФайлы(ПапкаДляРасшифровки);
						ВызватьИсключение(НСтр("ru = 'Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении!'"));
						
					КонецЕсли;
					
					ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров);
					
					СтруктураОбновленияПараметров = Новый Структура;
					СтруктураОбновленияПараметров.Вставить("ВладелецЭД",    ВладелецЭД);
					СтруктураОбновленияПараметров.Вставить("ВидЭД",         ПервичныйЭД.ВидЭД);
					СтруктураОбновленияПараметров.Вставить("НаправлениеЭД", ПервичныйЭД.НаправлениеЭД);
					СтруктураОбновленияПараметров.Вставить("Контрагент",    СтруктураФайлаЭД.Контрагент);
					СтруктураОбновленияПараметров.Вставить("СтатусЭД",
						ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
					СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",  ПервичныйЭД.СоглашениеЭД);
					
					Если ЗначениеЗаполнено(СтруктураФайлаЭД.ТекстУточнения) Тогда
						СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ТекстУточнения);
					КонецЕсли;
					
					ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров);
					
					Если КодРегламента = "Invoice" Тогда
						
						Если КодТранзакции <> "ReceiveNotice" И КодТранзакции <> "CorrectionNoticeReceiveNotice" Тогда
							
							МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
							
						КонецЕсли;
						
						Если КодТранзакции = "PostDateConfirmation" ИЛИ КодТранзакции = "SendConfirmation"
							ИЛИ КодТранзакции = "ReceiveNotice" ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
							
							ЭлектронныеДокументыПереопределяемый.ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ДобавленныйФайл);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// Добавим информацию о подписях
				Если ЗначениеЗаполнено(ПодписиФайлаДанных) И (МенеджерКриптографии <> Неопределено) Тогда
					Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
						ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
						ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
						
						// Определим сертификаты криптографии из подписи
						СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
						Если СертификатыПодписи.Количество() <> 0 Тогда
							Сертификат = СертификатыПодписи[0];
							
							ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ДобавленныйФайл, ДвоичныеДанныеПодписи,
								Base64Строка(Сертификат.Отпечаток), ТекущаяДатаСеанса(), "", ИмяФайлаПодписи,
								ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
								Сертификат.Выгрузить());
								
						КонецЕсли;
					КонецЦикла;
					ЭлектронныеДокументыСлужебный.ОпределитьСтатусыПодписей(ДобавленныйФайл);
				КонецЕсли;
				МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УдалитьФайлы(ПапкаДляРасшифровки);
		
		// Добавим информацию о присоединенном файле в документ пакета электронных документов.
		Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
			НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
			НовыйЭлектронныйДокумент.ОбъектВладелец = ДобавленныйФайл.ВладелецФайла;
		КонецЦикла;
		
		Если МенеджерКриптографии <> Неопределено Тогда
			ПодтвержденныеДокументы = ЭлектронныеДокументыСлужебный.ОбработатьПодтвержденияДокументов(ПапкаДляРаспаковки,
				СоответствиеФайлПараметры, ПакетЭДОбъект);
			Для Каждого ПодтвержденныйДокумент Из ПодтвержденныеДокументы Цикл
				МассивДобавленныхФайлов.Добавить("Подтверждение " + Строка(ПодтвержденныйДокумент));
			КонецЦикла;
		КонецЕсли;
		
		ПакетЭДОбъект.Записать();
		
		Возврат МассивДобавленныхФайлов;
	Исключение
		УдалитьФайлы(ФайлРасшифрованногоАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ВернутьМассивПредставленийПодписей(МассивПредставления)
	
	МассивВозврата = Новый Массив;
	Для Каждого Элемент Из МассивПредставления Цикл
		МассивВозврата.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ПолучитьИмяФайлаДанных(СтрокаПути)
	
	ПозицияСлэш = Найти(СтрокаПути, "/");
	Пока ПозицияСлэш > 0 Цикл
		СтрокаПути = Сред(СтрокаПути, ПозицияСлэш + 1);
		ПозицияСлэш = Найти(СтрокаПути, "/");
	КонецЦикла;
	Возврат СтрокаПути;
	
КонецФункции

Функция ПолучитьСоответствиеФайлПараметры(ФайлТранспИнф, ФайлКарточки)
	
	ПредставленияПодписей = Новый Массив;
	ПодписиДопДанных = Новый Массив;
	СоответствиеВозврата  = Новый Соответствие;
	КодТранзакции = "";
	КодРегламента = "";
	НомерЭДКарточки = "";
	НомерЭД = "";
	СтруктураДопДанных = Новый Структура;
	
	ОбъектXML = Новый ЧтениеXML;
	СтруктураЗначений = Новый Структура;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
			ЭлектронныеДокументыФорматОбмена.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card"));
		ОбъектXML.Закрыть();
		Если ЭД.Identifiers.ExternalIdentifier <> Неопределено Тогда
			НомерЭДКарточки = ЭД.Identifiers.ExternalIdentifier;
		КонецЕсли;
		Если ЭД.Description <> Неопределено Тогда
			Если ЭД.Description.AdditionalData <> Неопределено И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
				СтруктураДопПараметров = Новый Структура;
				Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
					СтруктураДопПараметров.Вставить(Свойство.Name, Свойство.Value);
				КонецЦикла;
				Если СтруктураДопПараметров.Количество() > 0 Тогда
					СтруктураДопДанных.Вставить("ДопПараметры", СтруктураДопПараметров);
				КонецЕсли;
			КонецЕсли;
			КомментарийЭД = ЭД.Description.Comment;
		КонецЕсли;
		Если ЭД.Type <> Неопределено Тогда
			ТипКарточкиЭД = ЭД.Type.Name;
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ФайлКарточки.ПолноеИмя, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ФайлТранспИнф.ПолноеИмя);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
			ЭлектронныеДокументыФорматОбмена.ПолучитьТипЗначенияCML("ContainerDescription", "http://api-invoice.taxcom.ru/meta"));
		ОбъектXML.Закрыть();
		Для Каждого ДокОборот Из ЭД.DocFlow Цикл
			НомерЭДТИ = ДокОборот.Id;
			Для Каждого Документ Из ДокОборот.Documents.Document Цикл
				КодТранзакции = Документ.TransactionCode;
				КодРегламента = Документ.ReglamentCode;
				НомерЭД = ?(КодТранзакции = "MainDocumentResign", НомерЭДКарточки, НомерЭДТИ);
				
				// Опеределим произвольный документ по типу ЭД в карточке и по коду транзакции в мете.
				Если ТипКарточкиЭД = "Other" И КодТранзакции = "MainDocument" Тогда
					СтруктураДопДанных.Вставить("ПроизвольныйДокумент", КомментарийЭД);
				КонецЕсли;
				
				ПредставлениеДокумента = "";
				Если Документ.Files.MainImage <> Неопределено Тогда
					ПредставлениеДокумента = ПолучитьИмяФайлаДанных(Документ.Files.MainImage.Path);
				КонецЕсли;
				Если Документ.Files.MainImageSignature <> Неопределено Тогда
					ПредставленияПодписей.Очистить();
					Для Каждого Подпись Из Документ.Files.MainImageSignature Цикл 
						ПредставлениеПодписи = ПолучитьИмяФайлаДанных(Подпись.Path);
						Если НЕ ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
							// Если MainImage - пустое, значит пришел контейнер с подтверждением (подписью).
							ДобавитьДанныеВСоответствие(СоответствиеВозврата, ПредставлениеПодписи,
								Новый Структура("Подписи, НомерЭД, КодТранзакции, КодРегламента, ДопДанные",
								ВернутьМассивПредставленийПодписей(ПредставленияПодписей), НомерЭД, КодТранзакции, КодРегламента, СтруктураДопДанных));
						Иначе
							ПредставленияПодписей.Добавить(ПредставлениеПодписи);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Документ.Files.DataImage <> Неопределено Тогда
					ПодписиДопДанных.Очистить();
					Если Документ.Files.DataImageSignature <> Неопределено Тогда
						Для Каждого Подпись Из Документ.Files.DataImageSignature Цикл 
							ПодписиДопДанных.Добавить(ПолучитьИмяФайлаДанных(Подпись.Path));
						КонецЦикла;
					КонецЕсли;
					СтруктураДопДанных.Вставить("ФайлДопДанных", ПолучитьИмяФайлаДанных(Документ.Files.DataImage.Path));
					СтруктураДопДанных.Вставить("ПодписиДопДанных", ПодписиДопДанных);
				КонецЕсли;
				Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
					ДобавитьДанныеВСоответствие(СоответствиеВозврата, ПредставлениеДокумента,
						Новый Структура("Подписи, НомерЭД, КодТранзакции, КодРегламента, ДопДанные",
						ВернутьМассивПредставленийПодписей(ПредставленияПодписей), НомерЭД, КодТранзакции, КодРегламента, СтруктураДопДанных));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		ОбъектXML.Закрыть();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ФайлТранспИнф.ПолноеИмя, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайлов)
	
	МассивВозврата = Новый Массив;
	Для Каждого ФайлДанных Из МассивФайлов Цикл
		
		СтруктураМассива = Новый Структура;
		СтруктураМассива.Вставить("ДвоичныеДанные",        Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя));
		СтруктураМассива.Вставить("ИмяФайлаБезРасширения", ФайлДанных.ИмяБезРасширения);
		СтруктураМассива.Вставить("ИмяФайла",              ФайлДанных.Имя);
		МассивВозврата.Добавить(СтруктураМассива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции)
	
	// Виды входящих ЭД и соответствующие коды транзакций:
	// ЭД       MainDocument
	// Подпись  MainDocumentResign
	// ЭД(ЭСФ)  Invoice
	// ПДПЭСФ   PostDateConfirmation
	// ИПЭСФ    ReceiveNotice
	// УУЭСФ    CorrectionNotice
	// ИПУУЭСФ  CorrectionNoticeReceiveNotice
	// ПДОЭСФ   SendConfirmation
	// ПДОИПЭСФ ReceiveNoticePostDateConfirmation
	
	Если КодТранзакции = "MainDocument" ИЛИ КодТранзакции = "Invoice"
		ИЛИ КодТранзакции = "VendorTitle" ИЛИ КодТранзакции = "CustomerTitle" Тогда
		
		ВозвращаемоеЗначение = "ЭД";
	ИначеЕсли КодТранзакции = "MainDocumentResign" Тогда
		ВозвращаемоеЗначение = "Подпись";
	Иначе
		ВозвращаемоеЗначение = "СлужебныйЭД";
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РазобратьСтрокуДаты(ПараметрРазбора)
	
	Возврат Сред(ПараметрРазбора, 7, 4) + Сред(ПараметрРазбора, 4, 2) + Сред(ПараметрРазбора, 1, 2);
	
КонецФункции

Функция СформироватьСтруктуруФайлаЭД()
	
	СтруктураФайлаЭД = Новый Структура();
	СтруктураФайлаЭД.Вставить("ВладелецЭД");
	СтруктураФайлаЭД.Вставить("Контрагент");
	СтруктураФайлаЭД.Вставить("ВидЭД");
	СтруктураФайлаЭД.Вставить("НаправлениеЭД");
	
	СтруктураФайлаЭД.Вставить("СоглашениеЭД");
	СтруктураФайлаЭД.Вставить("Организация");
	СтруктураФайлаЭД.Вставить("НомерЭД");
	СтруктураФайлаЭД.Вставить("НомерВерсииЭД");
	СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД");
	СтруктураФайлаЭД.Вставить("НомерДокументаОтправителя");
	СтруктураФайлаЭД.Вставить("ДатаДокументаОтправителя");
	СтруктураФайлаЭД.Вставить("Партнер");
	СтруктураФайлаЭД.Вставить("СтатусЭДВладельца");
	СтруктураФайлаЭД.Вставить("ОписаниеОшибки");
	СтруктураФайлаЭД.Вставить("ТекстУточнения");
	
	// Обязательные для заполнения параметры.
	СтруктураФайлаЭД.Вставить("ОбязательныеПараметры","ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД");
	
	Возврат СтруктураФайлаЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формат обмена

Функция СформироватьКарточкуТакскомCML(ТранспортнаяИнформация, СтруктураДопПараметров)
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/card}.Card";
	ИменаКарточек = Новый Соответствие;
	Попытка
		СтрДокумент = ТранспортнаяИнформация[0].Документ[0];
		
		Карточка = ПолучитьОбъектТипаCML(ПутьКОписанию);
		СтруктураКарточки = СтрДокумент.Карточка;
		
		АбонентОтправитель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender.Abonent");
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Id", СтруктураКарточки.Отправитель.ИД, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Name", СтруктураКарточки.Отправитель.Имя, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Inn", СтруктураКарточки.Отправитель.ИНН, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Kpp", СтруктураКарточки.Отправитель.КПП, , ТекстОшибки);
		
		Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender");
		ЗаполнитьСвойствоXDTO(Отправитель, "Abonent", АбонентОтправитель,, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураКарточки.Получатель.Тип) Тогда
			АбонентПолучатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Organization");
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Name", СтруктураКарточки.Получатель.Имя, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Type", СтруктураКарточки.Получатель.Тип, , ТекстОшибки);
			ИмяСвойства = "Organization";
		Иначе
			АбонентПолучатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Abonent");
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Id", СтруктураКарточки.Получатель.ИД, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Name", СтруктураКарточки.Получатель.Имя, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Inn", СтруктураКарточки.Получатель.ИНН, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Kpp", СтруктураКарточки.Получатель.КПП, , ТекстОшибки);
			ИмяСвойства = "Abonent";
		КонецЕсли;
		
		Получатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver");
		ЗаполнитьСвойствоXDTO(Получатель, ИмяСвойства, АбонентПолучатель, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Receiver", Получатель, , ТекстОшибки);
		
		Идентификаторы = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Identifiers");
		ЗаполнитьСвойствоXDTO(Идентификаторы, "ExternalIdentifier", СтрДокумент.Карточка.Определение.ВнешнийИдентификатор, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Identifiers", Идентификаторы, , ТекстОшибки);
		
		
		Тип = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Type");
		Описание = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description");
		ЗаполнитьСвойствоXDTO(Тип, "Name", СтрДокумент.Карточка.Определение.Имя, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Тип, "ResignRequired", СтрДокумент.Карточка.Определение.ТребуетсяПереподпись, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Описание, "Title", СтрДокумент.Карточка.Описание.Заголовок, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Описание, "Date", СтрДокумент.Карточка.Описание.Дата, , ТекстОшибки);
		Комментарий = "";
		Если СтрДокумент.Карточка.Описание.Свойство("Комментарий", Комментарий) Тогда
			ЗаполнитьСвойствоXDTO(Описание, "Comment", Комментарий, , ТекстОшибки);
		КонецЕсли;
		
		Если СтрДокумент.Карточка.Описание.ДополнительныеДанные.Количество() > 0 Тогда
			ОписаниеДопДанные = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description.AdditionalData");
			Для Каждого СтрокаДопДанных Из СтрДокумент.Карточка.Описание.ДополнительныеДанные Цикл
				ДопДанные = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description.AdditionalData.AdditionalParameter");
				ЗаполнитьСвойствоXDTO(ДопДанные, "Name", СтрокаДопДанных.Имя, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ДопДанные, "Value", СтрокаДопДанных.Значение, , ТекстОшибки);
				ОписаниеДопДанные.AdditionalParameter.Добавить(ДопДанные);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(Описание, "AdditionalData", ОписаниеДопДанные, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Карточка, "Type", Тип, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, , ТекстОшибки);
		
		Карточка.Проверить();
		
		ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ВыгрузитьЭДвФайл(Карточка, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
	Исключение
		ЭлектронныеДокументыФорматОбмена.ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураДопПараметров,
			ТекстОшибки);
			
		Возврат Новый Соответствие;
	КонецПопытки;
	
КонецФункции

Функция СформироватьТранспортнуюИнформациюТакскомCML(ТранспортнаяИнформация, СтруктураДопПараметров)
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/meta}.ContainerDescription";
	Попытка
		
		ОписаниеКонтейнера = ПолучитьОбъектТипаCML(ПутьКОписанию);
		Для Каждого СтрТИ Из ТранспортнаяИнформация Цикл
			Документооборот = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow");
			ДокументыСхемы  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents");
			Для Каждого СтрДокумент Из СтрТИ.Документ Цикл
				Документ     = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document"); 
				Определение  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Definition");
				Файлы        = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files");
				ФайлКарточки = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.ExternalCard");
				ЗаполнитьСвойствоXDTO(ФайлКарточки, "Path", СтрДокумент.ВнешняяКарточка.Путь, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Файлы, "ExternalCard", ФайлКарточки, , ТекстОшибки);
				
				Если СтрДокумент.Документ <> Неопределено Тогда
					ФайлДанных = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImage");
					ИмяФайла = "";
					Если СтрДокумент.Документ.Свойство("Имя", ИмяФайла) И ЗначениеЗаполнено(ИмяФайла) Тогда
						ЗаполнитьСвойствоXDTO(ФайлДанных, "Name", ИмяФайла, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", СтрДокумент.Документ.Путь, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Файлы, "MainImage", ФайлДанных, , ТекстОшибки);
				КонецЕсли;
				Для Каждого СтрПодпись Из СтрДокумент.ПодписьДокумента Цикл
					Подпись = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImageSignature");
					ИмяФайла = "";
					Если СтрПодпись.Свойство("Имя", ИмяФайла) И ЗначениеЗаполнено(ИмяФайла) Тогда
						ЗаполнитьСвойствоXDTO(Подпись, "Name", ИмяФайла, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Подпись, "Path", СтрПодпись.Путь, , ТекстОшибки);
					Файлы.MainImageSignature.Добавить(Подпись);
				КонецЦикла;
				
				Если СтрДокумент.Данные <> Неопределено Тогда
					ФайлДанных = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.DataImage");
					ИмяФайла = "";
					Если СтрДокумент.Данные.Свойство("Имя", ИмяФайла) И ЗначениеЗаполнено(ИмяФайла) Тогда
						ЗаполнитьСвойствоXDTO(ФайлДанных, "Name", ИмяФайла, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", СтрДокумент.Данные.Путь, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Файлы, "DataImage", ФайлДанных, , ТекстОшибки);
					Если ЗначениеЗаполнено(СтрДокумент.ПодписьДанных) Тогда
						Для Каждого СтрПодпись Из СтрДокумент.ПодписьДанных Цикл
							Подпись = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.DataImageSignature");
							ИмяФайла = "";
							Если СтрПодпись.Свойство("Имя", ИмяФайла) И ЗначениеЗаполнено(ИмяФайла) Тогда
								ЗаполнитьСвойствоXDTO(Подпись, "Name", ИмяФайла, , ТекстОшибки);
							КонецЕсли;
							ЗаполнитьСвойствоXDTO(Подпись, "Path", СтрПодпись.Путь, , ТекстОшибки);
							Файлы.DataImageSignature.Добавить(Подпись);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьСвойствоXDTO(Документ, "Files", Файлы, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Документ, "TransactionCode", СтрДокумент.КодТранзакции, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Документ, "ReglamentCode", СтрДокумент.КодРегламента, , ТекстОшибки);
				ДокументыСхемы.Document.Добавить(Документ);
				ЗаполнитьСвойствоXDTO(Документооборот, "ID", СтрДокумент.Определение.ВнешнийИдентификатор);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Документооборот, "Documents", ДокументыСхемы, , ТекстОшибки);
			ОписаниеКонтейнера.DocFlow.Добавить(Документооборот);
		КонецЦикла;
		ОписаниеКонтейнера.Проверить();
		
		ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ВыгрузитьЭДвФайл(ОписаниеКонтейнера, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
		
	Исключение
		ЭлектронныеДокументыФорматОбмена.ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки(), СтруктураДопПараметров,
			ТекстОшибки);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Приглашения к обмену

Процедура ЗаполнитьСтрокуТаблицыКонтактов(Строка, Контакт)
	
	Строка.ИНН = Контакт.Inn;
	
	Если Контакт.Свойства().Получить("Name") <> Неопределено И ТипЗнч(Контакт.Name) = Тип("Строка") Тогда
		Строка.Наименование = Контакт.Name;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("State") <> Неопределено Тогда
		Если Контакт.State.Code = "Error" Тогда
			КодОшибки = ПреобразоватьТекстСтатуса(Контакт.State.ErrorCode);
			Строка.Состояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ошибка: %1", КодОшибки);
		Иначе
			Строка.Состояние = ПреобразоватьТекстСтатуса(Контакт.State.Code);
		КонецЕсли;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("Kpp") <> Неопределено И ТипЗнч(Контакт.Kpp) = Тип("Строка") Тогда
		Строка.КПП = Контакт.Kpp;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("EDXClientId") <> Неопределено Тогда
		Строка.Идентификатор= Контакт.EDXClientId;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// CML

Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "")
	
	ЭлектронныеДокументыФорматОбмена.ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное, ТекстОшибки);
	
КонецПроцедуры

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01")
	
	Возврат ЭлектронныеДокументыФорматОбмена.ПолучитьОбъектТипаCML(Тип, ВерсияСхемы);
	
КонецФункции
