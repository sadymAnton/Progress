Функция ПолучитьЗначениеПеременной(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Экспорт
	
	Если ИмяПараметраВР = ВРег("глУчетнаяПолитикаПоПерсоналу") Тогда
		Если НЕ РаботаСОбщимиПеременными.ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
			НайденноеЗначение = РаботаСОбщимиПеременными.ЗаполнениеУчетнойПолитикиПоПерсоналу();
		КонецЕсли; 
		
	ИначеЕсли ИмяПараметраВР = ВРег("глИспользоватьУправленческийУчетЗарплаты") Тогда
		НайденноеЗначение = Истина;
		
	ИначеЕсли ИмяПараметраВР = ВРег("глЕстьВалютныеПоказатели") Тогда
		Если НЕ РаботаСОбщимиПеременными.ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
			НайденноеЗначение = ОпределитьНаличиеВалютныхПоказателей();
		КонецЕсли; 
		
	ИначеЕсли ИмяПараметраВР = ВРег("глВалютаУправленческогоУчета") Тогда
		Если НЕ РаботаСОбщимиПеременными.ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
			НайденноеЗначение = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Определяет есть ли денежные показатели с незаполненной валютой
//
Функция ОпределитьНаличиеВалютныхПоказателей()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|ГДЕ
	|	ПоказателиСхемМотивации.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	|	И ПоказателиСхемМотивации.Валюта = Значение(Справочник.Валюты.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ЭтоЮрЛицо(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.ЮрФизЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Не Выборка.Следующий() Или Выборка.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо;
	
КонецФункции // ЭтоЮрЛицо()

// Проверяет правильность заполнения ОГРН
// Возвращаемое значение:
//   Булево
//
Функция ОГРНСоответствуетТребованиям(ОГРН, ЮрФизЛицо, ТекстСообщенияОшибки) Экспорт
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если СтрДлина(СокрЛП(ОГРН)) <> 15 Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРНИП указан неверно! ОГРНИП должен состоять из 15 цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		Если НЕ ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(ОГРН) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРНИП указан неверно! ОГРН должен состоять только из цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		ОГРН14 = Число(Лев(Строка(ОГРН), 14));
		Если Прав(Формат(ОГРН14 % 13, "ЧН=0; ЧГ=0"), 1) <> Прав(ОГРН, 1) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "Возможно, ОГРНИП указан неверно (контрольный разряд не совпадает с вычисленным)!" + Символы.ПС;
		КонецЕсли;
	Иначе
		Если СтрДлина(ОГРН) <> 13 Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРН " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно! ОГРН должен состоять из 13 цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		Если НЕ ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(ОГРН) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "ОГРН " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно! ОГРН должен состоять только из цифр!" + Символы.ПС;
			Возврат Ложь;
		КонецЕсли;
		ОГРН12 = Число(Лев(Строка(ОГРН), 12));
		Если Прав(Формат(ОГРН12 % 11, "ЧН=0; ЧГ=0"), 1) <> Прав(ОГРН, 1) Тогда
			ТекстСообщенияОшибки = ТекстСообщенияОшибки + "Возможно, ОГРН " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " указан неверно (контрольный разряд не совпадает с вычисленным)!" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ОГРНСоответствуетТребованиям()

// Проверяет правильность заполнения КПП
//
// Возвращаемое значение:
//   Булево
//
Функция КППОрганизацииСоответствуетТребованиям(КПП, ТекстСообщенияОшибки) Экспорт
	
	Если НЕ ПустаяСтрока(КПП) И СтрДлина(КПП) <> 9 Тогда
		ТекстСообщенияОшибки = ТекстСообщенияОшибки +  "КПП " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " задан неверно!" + Символы.ПС;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // КППОрганизацииСоответствуетТребованиям()

Функция ДоступнаУстаревшаяРоль(ИмяУстаревшейРоли) Экспорт
	Возврат РольДоступна(ИмяУстаревшейРоли);
КонецФункции

Функция ВернутьСписокТиповСсылокДляФормированияФИО() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СотрудникиОрганизаций"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ВернутьСписокТиповОбъектовДляФормированияФИО() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникОбъект.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникОбъект.СотрудникиОрганизаций"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Пример:
// Для документ "Реализация товаров и услуг" настроена подсистема версионирования объектов,
// и подсистема свойств. При этом на экземпляр документа может быть множество ссылок 
// в информационной базе (из других документов, регистров). Часть ссылок имеют значение для бизнес-логики
// (например движения по регистрам). Другая часть ссылок - "техногенные" ссылки на объект из объектов ИБ,
// которые относятся к подсистеме версионирования объектов и подсистеме свойств. Такие "техногенные"
// ссылки должны быть отфильтрованы, например, в обработке удаления помеченных и при поиске ссылок на объект
// в подсистеме запрета редактирования ключевых реквизитов.
// Список таких "техногенных" объектов нужно перечислить в этой функции.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ПолучитьИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	Возврат Массив;
	
КонецФункции 

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеанса() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	Возврат Обработчики;
	
КонецФункции

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
КонецПроцедуры
