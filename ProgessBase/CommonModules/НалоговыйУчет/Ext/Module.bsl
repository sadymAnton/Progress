#Если Клиент Тогда

//Процедуры открытия регистра списания ТМЦ

//Процедура открывает отчет "РегистрУчетаСтоимостиСписанныхТМЦ"
//Вызывается из интерфейсов "Полный" и "Бухгалтерский и налоговый учет" 
//	(пункт меню "Регистр учета стоимости товаров, списанных в отчетном периоде") 
Процедура ОткрытьРегистрСписанияТоваров() Экспорт
	Отчет = Отчеты.РегистрУчетаСтоимостиСписанныхТМЦ.Создать();
	Отчет.ВидТМЦ = 0;
	Отчет.ПолучитьФорму().Открыть();
КонецПроцедуры

//Процедура открывает отчет "РегистрУчетаСтоимостиСписанныхТМЦ"
//Вызывается из интерфейсов "Полный" и "Бухгалтерский и налоговый учет"
//	(пункт меню "Регистр учета стоимости материалов, списанных в отчетном периоде") 
Процедура ОткрытьРегистрСписанияМатериалов() Экспорт
	Отчет = Отчеты.РегистрУчетаСтоимостиСписанныхТМЦ.Создать();
	Отчет.ВидТМЦ = 1;
	Отчет.ПолучитьФорму().Открыть();
КонецПроцедуры

//Процедура открывает отчет "РегистрУчетаСтоимостиСписанныхТМЦ"
//Вызывается из интерфейсов "Полный" и "Бухгалтерский и налоговый учет"
//	(пункт меню "Регистр учета стоимости продукции, списанной в отчетном периоде") 
Процедура ОткрытьРегистрСписанияПродукции() Экспорт
	Отчет = Отчеты.РегистрУчетаСтоимостиСписанныхТМЦ.Создать();
	Отчет.ВидТМЦ = 2;
	Отчет.ПолучитьФорму().Открыть();
КонецПроцедуры

//Процедура открывает отчет "РегистрУчетаСтоимостиСписанныхТМЦ"
//Вызывается из интерфейсов "Полный" и "Бухгалтерский и налоговый учет"
//	(пункт меню "Регистр учета стоимости полуфабрикатов, списанных в отчетном периоде") 
Процедура ОткрытьРегистрСписанияПолуфабрикатов() Экспорт
	Отчет = Отчеты.РегистрУчетаСтоимостиСписанныхТМЦ.Создать();
	Отчет.ВидТМЦ = 3;
	Отчет.ПолучитьФорму().Открыть();
КонецПроцедуры

#КонецЕсли

Процедура ОпределитьВидУчетаПоПБУ18(Значение, мВидУчета, ОтразитьНеПринимаемыеРасходы)  
	 
			Если  ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Значение.ЭтоГруппа Тогда
				
				Если Значение.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
					мВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
					ОтразитьНеПринимаемыеРасходы = Истина;
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Значение.ЭтоГруппа Тогда
				
				Если НЕ Значение.ПринятиеКналоговомуУчету Тогда
					мВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
					ОтразитьНеПринимаемыеРасходы = Истина;
				КонецЕсли;
				
			КонецЕсли;
		
КонецПроцедуры

//Определяет вид учета для проводки по налоговому учету
Процедура ВидУчетаПоПБУ18(Проводка, ОтразитьНеПринимаемыеРасходы = Ложь, ПоддержкаПБУ18 = Ложь) Экспорт

	ВидУчетаДт = ?(ЗначениеЗаполнено(Проводка.ВидУчетаДт), Проводка.ВидУчетаДт, Перечисления.ВидыУчетаПоПБУ18.НУ);
	ВидУчетаКт = ?(ЗначениеЗаполнено(Проводка.ВидУчетаКт), Проводка.ВидУчетаКт, Перечисления.ВидыУчетаПоПБУ18.НУ);
    
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
           
		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") Или ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение, ВидУчетаДт, ОтразитьНеПринимаемыеРасходы);
			
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			
			Если Не ПоддержкаПБУ18 Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СтатьяЗатрат, ВидУчетаДт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого Субконто Из Проводка.СубконтоКт Цикл

		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") Или ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			
			Если Не ПоддержкаПБУ18 Тогда
				Прервать;
			КонецЕсли;
			
			/// Кунов О.В., 20.01.2015 - 35253
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СтатьяЗатрат, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;			
			///
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ1, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ2, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ3, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		Проводка.ВидУчетаДт = ВидУчетаДт;
	КонецЕсли;

	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		Проводка.ВидУчетаКт = ВидУчетаКт;
	КонецЕсли;

КонецПроцедуры // ВидУчетаПоПБУ18


Функция ОпределитьНеПринимаемыеДоходыРасходы(Проводка,ПустойСчет = Неопределено,Список9101=Неопределено) Экспорт
	//начало изменений Ожиганов 14.05.2015 изменения по браку 
	Если ПустойСчет <>  Неопределено Тогда
		 ЭтоСубсчет9101 = Не Проводка.СчетКт = ПланыСчетов.Налоговый.ПустаяСсылка() и Список9101.Найти(Проводка.СчетКт,"Счет") <> Неопределено;
	 Иначе
		 ЭтоСубсчет9101 = Не Проводка.СчетКт = ПланыСчетов.Налоговый.ПустаяСсылка() И Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ПрочиеДоходы);
	 КонецЕсли;	
	//Если Не Проводка.СчетКт = ПланыСчетов.Налоговый.ПустаяСсылка() И Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ПрочиеДоходы) Тогда
	Если ЭтоСубсчет9101 Тогда
	//конец изменений 	
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
				
				Если НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
					Возврат  Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
	
	СписокСчетовКосвенныхРасходов = ПолучитьСчетаУчетаКосвенныхРасходов();
		
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			
			Если Субконто.Значение.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				
				// Расходы на стоительство объектов основных средств, не относятся к расходам по производству и реализации
				Если Проводка.СчетДт = ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств Или Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств) Тогда
					Возврат Ложь;
				КонецЕсли;

								
				Возврат Истина;
				Прервать;
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			Если НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
				
				Если Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходыРаспределяемые Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указан счет затрат для не принимаемых расходов (Внереализационные расходы, подлежащие распределению (ЕНВД / не ЕНВД)).
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьСчетаУчетаКосвенныхРасходов() Экспорт
	
	СчетаЗатрат = Новый СписокЗначений;
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);
	
	Возврат СчетаЗатрат;
	
КонецФункции

Функция ОпределитьСчетНУВШапке(Организация, Дата, СчетБУ, Субконто1, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт
		
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		Возврат "";
	КонецЕсли;
	
	СписокСубконто = Новый Массив;
	СписокСубконто.Добавить(Субконто1);
	Если Не Субконто2 = Неопределено Тогда
		СписокСубконто.Добавить(Субконто2);
	КонецЕсли;

	Если Не Субконто3 = Неопределено Тогда
		СписокСубконто.Добавить(Субконто3);
	КонецЕсли;
	
	Если Лев(СчетБУ.Код, 2) = "91" Тогда
		ВидЗатрат = ОпределитьВидПрочихДоходовИРасходов(СписокСубконто);
	Иначе
		ВидЗатрат = ОпределитьВидЗатрат(СписокСубконто);
	КонецЕсли;
	
	СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетБУ, ВидЗатрат), "НУ", Дата);
	
	Если ЗначениеЗаполнено(СчетУчетаНУ) Тогда
		Возврат СчетУчетаНУ;
	КонецЕсли;
	
	Возврат БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетБУ), "НУ",  Дата);
	
КонецФункции

Функция ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента, СтавкаФБ = 0, СтавкаРФ = 0, СтавкаМестный = 0) Экспорт

	Отбор = Новый Структура("Организация", СтруктураШапкиДокумента.Организация);
	СтавкиНалога = РегистрыСведений.СтавкиНалогаНаПрибыль.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата, Отбор);
	
	СтавкаНалога = (СтавкиНалога.СтавкаФБ + СтавкиНалога.СтавкаСубъектРФ + СтавкиНалога.СтавкаМестный) / 100;
	
	СтавкаФБ        = СтавкиНалога.СтавкаФБ / 100;
	СтавкаРФ        = СтавкиНалога.СтавкаСубъектРФ / 100;
	СтавкаМестный   = СтавкиНалога.СтавкаМестный / 100;
	
	Возврат СтавкаНалога;

КонецФункции // ПолучитьСтавкуНалогаНаПрибыль()

// Процедура устанавливает в строке табличной части для счета бухгалтерского учета соответствующий счет налогового учета
// по данным регистра СоответствиеСчетовБУиНУ.
// 
// Параметры:
//  СтрокаТабличнойЧасти - строка, данные которой анализируются и в которой заполняется счет
//  УчитыватьЗначенияСубконто - если Истина, то 
//    - в переданной строке должны быть реквизиты вида СубконтоХ	
//    - их данным получен Вид затрат налогового учета и выбран счет НУ, соответствующий этому виду затрат.
//  ИмяСчетаЗатрат - имя реквизита, в котором счет затрат БУ
//  ИмяСчетаЗатратНУ - имя реквизита, в котором счет затрат НУ
//  ЗаполнятьТолькоЕслиСчетЗависитОтСубконто - имеет смысл только если учитывается значение субконто.
//    Флагом определяется, что счет налогового учета будет изменен только если задано субконто подходящего вида (влияющее на выбор счета).
//    Рекомендуется передавать Истина, если счет мог быть назначен ранее, а сейчас пользователь изменил субконто
Процедура ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, УчитыватьЗначенияСубконто = Ложь, ИмяСчетаЗатрат = "СчетЗатрат", ИмяСчетаЗатратНУ = "СчетЗатратНУ", ЗаполнятьТолькоЕслиСчетЗависитОтСубконто = Истина) Экспорт
	
	СчетЗатрат = СтрокаТабличнойЧасти[ИмяСчетаЗатрат];
	
	Если НЕ УчитыватьЗначенияСубконто Тогда
		
		СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетЗатрат));
		
	Иначе // Учтем значение субконто
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Субконто1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто1.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто2.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто3.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто1.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто2.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто3.ВидПрочихДоходовИРасходов;
		Иначе
			ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
			СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетЗатрат, ВидЗатратНУ));
		Иначе
			// Нет субконто такого типа, от которых может зависеть счет НУ
			Если ЗаполнятьТолькоЕслиСчетЗависитОтСубконто Тогда
				Возврат;
			Иначе
				// Найдем счет с любым видом затрат
				СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетЗатрат));
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетЗатратНУ) И НЕ СчетЗатратНУ.ЗапретитьИспользоватьВПроводках Тогда
		СтрокаТабличнойЧасти[ИмяСчетаЗатратНУ] = СчетЗатратНУ;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля()

Процедура ЗаполнитьСчетНалоговогоУчетаВДокументе(ШапкаИлиСтрока, УчетВидаЗатрат = ЛОЖЬ, СтруктураЗатрат = Неопределено, Знач ТекущаяДата = Неопределено) Экспорт
	
	Если СтруктураЗатрат = Неопределено Тогда
		СтруктураЗатрат = Новый Структура("Счет,Субконто1,Субконто2,Субконто3,СчетНУ","СчетЗатрат","Субконто1","Субконто2","Субконто3","СчетЗатратНУ");
	КонецЕсли;
	
	ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();

	Если УчетВидаЗатрат Тогда

		Если ТипЗнч(ШапкаИлиСтрока[СтруктураЗатрат.Субконто1]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = ШапкаИлиСтрока[СтруктураЗатрат.Субконто1].ВидРасходовНУ;

		ИначеЕсли ТипЗнч(ШапкаИлиСтрока[СтруктураЗатрат.Субконто2]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = ШапкаИлиСтрока[СтруктураЗатрат.Субконто2].ВидРасходовНУ;

		ИначеЕсли ТипЗнч(ШапкаИлиСтрока[СтруктураЗатрат.Субконто3]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = ШапкаИлиСтрока[СтруктураЗатрат.Субконто3].ВидРасходовНУ;
			
		ИначеЕсли ТипЗнч(ШапкаИлиСтрока[СтруктураЗатрат.Субконто1]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатратНУ = ШапкаИлиСтрока[СтруктураЗатрат.Субконто1].ВидПрочихДоходовИРасходов;

		ИначеЕсли ТипЗнч(ШапкаИлиСтрока[СтруктураЗатрат.Субконто2]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатратНУ = ШапкаИлиСтрока[СтруктураЗатрат.Субконто2].ВидПрочихДоходовИРасходов;

		ИначеЕсли ТипЗнч(ШапкаИлиСтрока[СтруктураЗатрат.Субконто3]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатратНУ = ШапкаИлиСтрока[СтруктураЗатрат.Субконто3].ВидПрочихДоходовИРасходов;
			
		Иначе
			ВидЗатратНУ = "";

		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		ШапкаИлиСтрока[СтруктураЗатрат.СчетНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", ШапкаИлиСтрока[СтруктураЗатрат.Счет], ВидЗатратНУ), , ТекущаяДата);
		Если Не ЗначениеЗаполнено(ШапкаИлиСтрока[СтруктураЗатрат.СчетНУ]) Тогда
			ШапкаИлиСтрока[СтруктураЗатрат.СчетНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", ШапкаИлиСтрока[СтруктураЗатрат.Счет]), , ТекущаяДата);
		КонецЕсли;
	Иначе
		ШапкаИлиСтрока[СтруктураЗатрат.СчетНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", ШапкаИлиСтрока[СтруктураЗатрат.Счет]), , ТекущаяДата);

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчетаВДокументе()

	// Выполняет расчет постоянных и временных разниц в оценке амортизации имущества
//
Процедура РасчетРазницПоАмортизации(СтруктураШапкиДокумента, Актив, Объект, ТаблицаАмортизации, ТабЗатрат, ТаблицаАмортизацииБУ) Экспорт
	
	ТаблицаАмортизации.Колонки.Добавить("СуммаПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("СуммаБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("СуммаВР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаТабАмортизацииБУ Из ТаблицаАмортизацииБУ Цикл
		СтрокаТабАмортизации = ТаблицаАмортизации.Найти(СтрокаТабАмортизацииБУ.ОбъектУчета, "ОбъектУчета");
		Если СтрокаТабАмортизации = Неопределено Тогда
			СтрокаТабАмортизации             = ТаблицаАмортизации.Добавить();
			СтрокаТабАмортизации.ОбъектУчета = СтрокаТабАмортизацииБУ.ОбъектУчета;
			СтрокаТабАмортизации.НаправлениеАмортизации = СтрокаТабАмортизацииБУ.НаправлениеАмортизации;
			СтрокаТабАмортизации.ИмяСубконто       = СтрокаТабАмортизацииБУ.ИмяСубконто;
			СтрокаТабАмортизации.СчетАмортизации   = СтрокаТабАмортизацииБУ.СчетАмортизации;
			СтрокаТабАмортизации.СчетАмортизацииНУ = СтрокаТабАмортизацииБУ.СчетАмортизацииНУ;
			СтрокаТабАмортизации.СуммаБУ     = СтрокаТабАмортизацииБУ.Сумма;
			СтрокаТабАмортизации.СуммаВР     = СтрокаТабАмортизацииБУ.Сумма;
		Иначе
			СтрокаТабАмортизации.СуммаБУ     = СтрокаТабАмортизацииБУ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаАмортизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Актив = "ОС" Тогда
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
		СчетУчетаБУ       = Массив;
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
		СчетУчетаНУ       =  Массив;
		СчетАмортизацииБУ = ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств;
		СчетАмортизацииНУ = ПланыСчетов.Налоговый.АмортизацияОсновныхСредств;
	ИначеЕсли Актив = "НМА" Тогда
		СчетУчетаБУ       = ПланыСчетов.Хозрасчетный.НематериальныеАктивы;
		СчетУчетаНУ       = ПланыСчетов.Налоговый.НематериальныеАктивы;
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
		СчетАмортизацииБУ = Массив;
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
		Массив.Добавить(ПланыСчетов.Налоговый.НематериальныеАктивы);
		СчетАмортизацииНУ = Массив;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		ОбъектЕсть = Ложь;
	Иначе
		ОбъектЕсть = Истина;
	КонецЕсли;
	
	мНачДата    = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	
	Если ТабЗатрат = Неопределено Тогда
		ТаблицаЗатрат = Новый ТаблицаЗначений;
		ТаблицаЗатрат.Колонки.Добавить("ОбъектУчета");
		ТаблицаЗатрат.Колонки.Добавить("Сумма");
	Иначе
		ТаблицаЗатрат = ТабЗатрат;
	КонецЕсли;
	ТаблицаЗатрат.Колонки.Добавить("СуммаНУ");
	ТаблицаЗатрат.Колонки.Добавить("Счет02");
	
	мКэшСчетов = Новый Соответствие; 
	Для Каждого СтрокаАмортизация Из ТаблицаЗатрат Цикл
		СчетНУСоответствующийСчетуБУ = мКэшСчетов[СтрокаАмортизация.СчетАмортизации];
		Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаАмортизация.СчетАмортизации), Ложь, СтруктураШапкиДокумента.Дата);
			мКэшСчетов.Вставить(СтрокаАмортизация.СчетАмортизации, СчетНУСоответствующийСчетуБУ);
		КонецЕсли;
		СтрокаАмортизация.Счет02 = СчетНУСоответствующийСчетуБУ;
	КонецЦикла;
	
	Для Каждого СтрокаТабЗатрат Из ТаблицаАмортизации Цикл
		СтрокаАмортизация = ТаблицаЗатрат.Добавить();
		СтрокаАмортизация.ОбъектУчета = СтрокаТабЗатрат.ОбъектУчета;
		
		Если Не ЗначениеЗаполнено(СтрокаТабЗатрат.СчетАмортизацииНУ) Тогда
			СчетНУСоответствующийСчетуБУ = мКэшСчетов[СтрокаТабЗатрат.СчетАмортизации];
			Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабЗатрат.СчетАмортизации), Ложь, СтруктураШапкиДокумента.Дата);
				мКэшСчетов.Вставить(СтрокаТабЗатрат.СчетАмортизации, СчетНУСоответствующийСчетуБУ);
			КонецЕсли;
			СтрокаТабЗатрат.СчетАмортизацииНУ = СчетНУСоответствующийСчетуБУ;
		КонецЕсли;
		
		СтрокаАмортизация.Счет02 = СтрокаТабЗатрат.СчетАмортизацииНУ;
		СтрокаАмортизация.СуммаНУ = СтрокаТабЗатрат.Сумма;
	КонецЦикла;
	ТаблицаЗатрат.Свернуть("ОбъектУчета,Счет02","Сумма,СуммаНУ");
	
	Запрос = Новый Запрос;
	
	Если Актив = "ОС" Тогда
		Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		Запрос.Текст = "ВЫБРАТЬ
		               |	НалоговыйОстатки.Субконто1 КАК Субконто1,
		               |	0 КАК Сумма01БУ,
		               |	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК Сумма01НУ,
		               |	0 КАК Сумма01ПР,
		               |	0 КАК Сумма02,
		               |	0 КАК Сумма01ПРпоРБ,
		               |	0 КАК СуммаОстаток01ПР,
		               |	0 КАК СуммаОстаток02ПР
		               |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Остатки(
		               |			&КонДата,
		               |			Счет В ИЕРАРХИИ (&Счет01НУ)
		               |				И НЕ Счет = &Счет0109НУ,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И ВидУчета = &ВидУчетаНУ) КАК НалоговыйОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НалоговыйОстатки.Субконто1
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
		               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,
		               |	0,
		               |	0,
		               |	0,
		               |	0,
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачДата, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство,
		               |	0,
		               |	0,
		               |	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ПРДляВычисленияАмортизации,
		               |	0,
		               |	0,
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&НачДата, Организация = &Организация) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		               |			ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2002 КАК АмортизацияДо2002
		               |		ИЗ
		               |			РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачДата, Организация = &Организация) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних) КАК ПРдо2002года
		               |		ПО ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство = ПРдо2002года.ОсновноеСредство
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НалоговыйОбороты.Субконто1,
		               |	0,
		               |	0,
		               |	0,
		               |	СУММА(НалоговыйОбороты.СуммаОборотКт),
		               |	0,
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&Счет02НУ), &ВидСубконто, Организация = &Организация, , ) КАК НалоговыйОбороты
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НалоговыйОбороты.Субконто1
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НалоговыйОстатки.Субконто1,
		               |	0,
		               |	0,
		               |	0,
		               |	0,
		               |	СУММА(НалоговыйОстатки.СуммаОстатокДт - ПРдо2002года.АмортизацияДо2002),
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Остатки(
		               |			&НачДата,
		               |			Счет В ИЕРАРХИИ (&Счет01НУ)
		               |				И НЕ Счет = &Счет0109НУ,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И ВидУчета = &ВидУчетаПр) КАК НалоговыйОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		               |			ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2002 КАК АмортизацияДо2002
		               |		ИЗ
		               |			РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачДата, Организация = &Организация) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних) КАК ПРдо2002года
		               |		ПО НалоговыйОстатки.Субконто1 = ПРдо2002года.ОсновноеСредство
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НалоговыйОстатки.Субконто1
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
					   //{10.08.2015 Островерхий заявка №40419 
					   |ВЫБРАТЬ
		               |	ВложенныйЗапрос.Субконто1,
		               |	0,
		               |	0,
		               |	0,
		               |	0,
		               |	0,
		               |	ВложенныйЗапрос.СуммаОстаток01ПР,
		               |	ВложенныйЗапрос.СуммаОстаток02ПР
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		НалоговыйОстатки01ПР.Субконто1 КАК Субконто1,
		               |		НалоговыйОстатки01ПР.СуммаОстаток КАК СуммаОстаток01ПР,
		               |		ЕСТЬNULL(НалоговыйОстатки02ПР.СуммаОстатокКт, 0) КАК СуммаОстаток02ПР
		               |	ИЗ
		               |		РегистрБухгалтерии.Налоговый.Остатки(
		               |				&НачДата,
		               |				Счет В ИЕРАРХИИ (&Счет01НУ)
		               |					И НЕ Счет = &Счет0109НУ,
		               |				&ВидСубконто,
		               |				Организация = &Организация
		               |					И ВидУчета = &ВидУчетаПР) КАК НалоговыйОстатки01ПР
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(
		               |					&НачДата,
		               |					Счет В ИЕРАРХИИ (&Счет02НУ),
		               |					&ВидСубконто,
		               |					Организация = &Организация
		               |						И ВидУчета = &ВидУчетаПР) КАК НалоговыйОстатки02ПР
		               |			ПО НалоговыйОстатки01ПР.Субконто1 = НалоговыйОстатки02ПР.Субконто1) КАК ВложенныйЗапрос
					   //10.08.2015 Островерхий} 
					   |";
	Иначе
		Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
		Запрос.Текст = "ВЫБРАТЬ
		               |	НалоговыйОстатки.Субконто1 КАК Субконто1,
		               |	0 КАК Сумма01БУ,
		               |	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК Сумма01НУ,
		               |	0 КАК Сумма01ПР,
		               |	0 КАК Сумма02,
		               |	0 КАК Сумма01ПРпоРБ,
					   //{10.08.2015 Островерхий заявка №40419
					   |	0 КАК СуммаОстаток01ПР,
		               |	0 КАК СуммаОстаток02ПР
					   //10.08.2015 Островерхий}
					   |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Остатки(
		               |			&КонДата,
		               |			Счет В ИЕРАРХИИ (&Счет01НУ)
		               |				И НЕ Счет = &Счет0109НУ,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И ВидУчета = &ВидУчетаНУ) КАК НалоговыйОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НалоговыйОстатки.Субконто1
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НалоговыйОбороты.Субконто1,
		               |	0,
		               |	0,
		               |	0,
		               |	СУММА(НалоговыйОбороты.СуммаОборотКт),
		               |	0,
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&Счет02НУ), &ВидСубконто, Организация = &Организация, , ) КАК НалоговыйОбороты
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НалоговыйОбороты.Субконто1
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НалоговыйОстатки.Субконто1,
		               |	0,
		               |	0,
		               |	НалоговыйОстатки.СуммаОстатокДт,
		               |	0,
		               |	НалоговыйОстатки.СуммаОстатокДт,
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Остатки(
		               |			&КонДата,
		               |			Счет В ИЕРАРХИИ (&Счет01НУ)
		               |				И НЕ Счет = &Счет0109НУ,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И ВидУчета = &ВидУчетаПр) КАК НалоговыйОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НалоговыйОстатки.Субконто1,
		               |	НалоговыйОстатки.СуммаОстатокДт,
		               |	НалоговыйОстатки.СуммаОстатокДт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОстатки.Субконто1,
		               |	ХозрасчетныйОстатки.СуммаОстатокДт,
		               |	0,
		               |	0,
		               |	0,
		               |	0,
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
		               |			&НачДата,
		               |			Счет В ИЕРАРХИИ (&Счет01БУ)
		               |				И НЕ Счет = &Счет0109БУ,
		               |			&ВидСубконто,
		               |			Организация = &Организация) КАК ХозрасчетныйОстатки";		
	КонецЕсли;
	
	
	Если ОбъектЕсть  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация","Организация = &Организация И Субконто1 В (&Объект)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация И Субконто1 В (&Объект)) КАК ПервоначальныеСведенияОС", "Организация = &Организация И ОсновноеСредство В (&Объект)) КАК ПервоначальныеСведенияОС");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация И Субконто1 В (&Объект)) КАК ПараметрыАмортизацииОС", "Организация = &Организация И ОсновноеСредство В (&Объект)) КАК ПараметрыАмортизацииОС");
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("НачДата",    мНачДата);
	
	Если ОбъектЕсть Тогда
		мКонДата = Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая);
	КонецЕсли;
	Запрос.УстановитьПараметр("КонДата",      мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчетаНУ",   Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР",   Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("Счет01НУ",     СчетУчетаНУ);
	Запрос.УстановитьПараметр("Счет0109НУ",   ПланыСчетов.Налоговый.ВыбытиеОС);
	Запрос.УстановитьПараметр("Счет01БУ",     СчетУчетаБУ);	
	Запрос.УстановитьПараметр("Счет0109БУ",   ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	Запрос.УстановитьПараметр("Счет02НУ",     СчетАмортизацииНУ);
	Запрос.УстановитьПараметр("Объект",       Объект);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ТаблицаОС = РезультатЗапроса.Выгрузить();
	//{10.08.2015 Островерхий заявка №40419 
	//ТаблицаОС.Свернуть("Субконто1", "Сумма01БУ, Сумма01НУ, Сумма01ПР, Сумма01ПРпоРБ, Сумма02"); 
	ТаблицаОС.Свернуть("Субконто1", "Сумма01БУ, Сумма01НУ, Сумма01ПР, Сумма01ПРпоРБ, Сумма02, СуммаОстаток01ПР, СуммаОстаток02ПР");	
	//10.08.2015 Островерхий} 
	
	мКэшСчетов = Новый Соответствие; 
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл
		
		СтрокаТаблицыОС = ТаблицаОС.Найти(СтрокаТаблицы.ОбъектУчета,"Субконто1");
		
		Если СтрокаТаблицыОС = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// если учет постоянных разниц в оценке ОС для амортизации не ведется (запись в регистре сведений пустая)
		// то рассматриваются данные о постоянных разницах в оценке ОС 
		Сумма01ПР = ?(СтрокаТаблицыОС.Сумма01ПР = 0, СтрокаТаблицыОС.Сумма01ПРпоРБ, СтрокаТаблицыОС.Сумма01ПР);
		
		Если СтрокаТаблицы.Сумма = СтрокаТаблицы.СУммаНУ И Сумма01ПР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Амортизация по НУ уже была начислена ранее она равна амортизации по БУ
		Если СтрокаТаблицыОС.Сумма02 <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Сумма01ВР = СтрокаТаблицыОС.Сумма01БУ - СтрокаТаблицыОС.Сумма01НУ - Сумма01ПР;
		Если СтрокаТаблицыОС.Сумма01НУ = 0 И Сумма01ПР = 0 И Сумма01ВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СчетАмортизации = СтрокаТаблицы.Счет02;
		СуммаПР = 0;
		СуммаВР = 0;
		
		СтрокаТаблицаАмортизации = ТаблицаАмортизации.Найти(СтрокаТаблицы.ОбъектУчета,"ОбъектУчета");
		Если  СтрокаТаблицаАмортизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		
		// Особый случай: в БУ амортизация не начисляется или приостановлена, временные разницы 
		// равны сумме амортизации по НУ
		Если СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.СуммаНУ <> 0 Тогда
			СуммаПР = 0;
			
		Иначе
			
			// постоянная разница в оценке амортизации, возникшая вследствие постоянной разницы в оценке ОС
			// амортизация по ПР, начисленная по способу амортизации БУ
			СуммаПР = Окр((?(ЗначениеЗаполнено(СтрокаТаблицыОС.Сумма01БУ), СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ, 0)) * Сумма01ПР, 2);
			
			//{10.08.2015 Островерхий заявка №40419 
			//СтрокаТаблицаАмортизации.СуммаПР = СуммаПР;
			Если Актив = "ОС" И СтрокаТаблицыОС.СуммаОстаток01ПР-СтрокаТаблицыОС.СуммаОстаток02ПР <= 0 Тогда
				СтрокаТаблицаАмортизации.СуммаПР = 0;
			Иначе
				СтрокаТаблицаАмортизации.СуммаПР = СуммаПР;
			КонецЕсли;  
			//10.08.2015 Островерхий} 
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

 // Выполняет расчет расходов по амортизационной премии и возникающих разниц
Процедура РасчетАмортизационнойПремии(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, ТабКапитальныхВложений, мПроводкиНУ, ТаблицаДвижений, Отказ, Заголовок) Экспорт
	
	СубконтоКВ = Новый Массив();
	СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии);
	
	// Амортизационная премия учитывается на статьях затрат с видом Амортизация
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      НачалоМесяца(СтруктураШапкиДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетКВ",      ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	Запрос.УстановитьПараметр("СубконтоКВ",  СубконтоКВ);
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 КАК ОсновноеСредство,
	|	НалоговыйОстатки.СуммаОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|		&Период,
	|		Счет = &СчетКВ,
	|		&СубконтоКВ,
	|		Организация = &Организация
	|			И Субконто1 В (&СписокОС) И (Субконто2 = НЕОПРЕДЕЛЕНО)) КАК НалоговыйОстатки
	|";
	ВыборкаПоКВАмортизация = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПоКВАмортизация.Количество() > 0 Тогда
		
		ТабКапитальныхВложений.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходы.Имя = "Сумма";
		ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.СчетАмортизацииНУ);
		ТабКапитальныхВложений.Колонки.СчетУчетаНУ.Имя = "СчетАмортизацииНУ";
		
		ТабСписанияКапВложений = ТабКапитальныхВложений.СкопироватьКолонки();
	
		Пока ВыборкаПоКВАмортизация.Следующий() Цикл
			
			// Списываем амортизационную премию со счета КВ.
			Проводка = мПроводкиНУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.ПериодРегистрации;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "ОС";
			Проводка.Содержание   = "Амортизационная премия";
			Проводка.Сумма        = ВыборкаПоКВАмортизация.Сумма;
			
			Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ВыборкаПоКВАмортизация.ОсновноеСредство);
			
			СтрокаТабКапитальныхВложений = ТабКапитальныхВложений.Найти(ВыборкаПоКВАмортизация.ОсновноеСредство, "ОбъектУчета");
			Если НЕ СтрокаТабКапитальныхВложений = Неопределено Тогда
				СтрокаТабКапитальныхВложений.Сумма = ВыборкаПоКВАмортизация.Сумма; 
				НоваяСтрока = ТабСписанияКапВложений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабКапитальныхВложений);
			КонецЕсли;
		КонецЦикла;
		
		Если ВыборкаПоКВАмортизация.Количество() > 0 Тогда
			
			// Включение капитальных вложений в состав расходов.
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабСписанияКапВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Амортизационная премия");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Амортизационная премия учитывается на статьях затрат с видом Амортизационная премия
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      НачалоМесяца(СтруктураШапкиДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетКВ",      ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	Запрос.УстановитьПараметр("СубконтоКВ",  СубконтоКВ);
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 КАК ОсновноеСредство,
	|	СчетаНалоговогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
	|	НалоговыйОстатки.Субконто2 КАК ДокументАмортизационнойПремии,
	|	НалоговыйОстатки.Субконто2.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчетаЗатратПоАмортизационнойПремии,
	|	НалоговыйОстатки.Субконто2.СубконтоПоАмортизационнойПремии1 КАК СубконтоПоАмортизационнойПремии1,
	|	НалоговыйОстатки.Субконто2.СубконтоПоАмортизационнойПремии2 КАК СубконтоПоАмортизационнойПремии2,
	|	НалоговыйОстатки.Субконто2.СубконтоПоАмортизационнойПремии3 КАК СубконтоПоАмортизационнойПремии3,
	|	НалоговыйОстатки.СуммаОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|		&Период,
	|		Счет = &СчетКВ,
	|		&СубконтоКВ,
	|		Организация = &Организация
	|			И Субконто1 В (&СписокОС)
	|			И (Субконто2 ССЫЛКА Документ.ПринятиеКУчетуОС
	|				ИЛИ Субконто2 ССЫЛКА Документ.МодернизацияОС)) КАК НалоговыйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(
	|		&Период,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (&СписокОС)) КАК СчетаНалоговогоУчетаОССрезПоследних
	|		ПО НалоговыйОстатки.Субконто1 = СчетаНалоговогоУчетаОССрезПоследних.ОсновноеСредство";
	ВыборкаПоКВ = Запрос.Выполнить().Выбрать();
	
	Если НЕ ВыборкаПоКВ.Количество() = 0 Тогда
		
		ТабКапитальныхВложений = УправлениеЗатратами.СформироватьТаблицуЗатрат();
		ТабКапитальныхВложений.Колонки.Добавить("СчетАмортизации");
		ТабКапитальныхВложений.Колонки.Добавить("СчетАмортизацииНУ");
		ТабКапитальныхВложений.Колонки.Добавить("ИмяСубконто");
		ТабКапитальныхВложений.Колонки.Добавить("ОбъектУчета");
		
	КонецЕсли;		
	
	Пока ВыборкаПоКВ.Следующий() Цикл
		
		// Списываем амортизационную премию со счета КВ.
		Проводка = мПроводкиНУ.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.ПериодРегистрации;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.НомерЖурнала = "ОС";
		Проводка.Содержание   = "Амортизационная премия";
		Проводка.Сумма        = ВыборкаПоКВ.Сумма;
		
		Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ВыборкаПоКВ.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыАмортизационнойПремии", ВыборкаПоКВ.ДокументАмортизационнойПремии);
		
		
		// Начисляем амортизационную премию.
		Проводка = мПроводкиНУ.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.ПериодРегистрации;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.НомерЖурнала = "ОС";
		Проводка.Содержание   = "Амортизационная премия";
		Проводка.Сумма        = ВыборкаПоКВ.Сумма;
		
		Проводка.СчетДт       = ВыборкаПоКВ.СчетУчетаЗатратПоАмортизационнойПремии;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии3);
		
		Проводка.СчетКт       = ВыборкаПоКВ.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ВыборкаПоКВ.ОсновноеСредство);
		
		
		ЭтоНепринимаемые = ОпределитьНеПринимаемыеДоходыРасходы(Проводка);
		
		// Уменьшение стоимости ОС по налоговому учету в регистре накопления.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		СтрокаДвижений.ОсновноеСредство = ВыборкаПоКВ.ОсновноеСредство;
		СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Стоимость        = ВыборкаПоКВ.Сумма;
		
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			// Отражаем временные разницы.
			Проводка = мПроводкиНУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.ПериодРегистрации;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "ОС";
			Проводка.Содержание   = "Амортизационная премия";
			Проводка.Сумма        = -ВыборкаПоКВ.Сумма;
			
			Проводка.СчетДт       = ВыборкаПоКВ.СчетУчетаЗатратПоАмортизационнойПремии;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии3);
			
			Проводка.СчетКт       = ВыборкаПоКВ.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ВыборкаПоКВ.ОсновноеСредство);
			
			Если ЭтоНепринимаемые Тогда
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Иначе
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			КонецЕсли;
		КонецЕсли;
		СтрокаТабКапитальныхВложений = ТабКапитальныхВложений.Добавить();
		Если  ЭтоНепринимаемые Тогда
			СтрокаТабКапитальныхВложений.ПостояннаяРазница = -ВыборкаПоКВ.Сумма;
		Иначе
			СтрокаТабКапитальныхВложений.ВременнаяРазница = -ВыборкаПоКВ.Сумма;
		КонецЕсли;
		СтрокаТабКапитальныхВложений.СуммаНал = ВыборкаПоКВ.Сумма; 
		СтрокаТабКапитальныхВложений.СчетЗатратНУ = ВыборкаПоКВ.СчетУчетаЗатратПоАмортизационнойПремии;
		СтрокаТабКапитальныхВложений.СчетЗатрат   = РасширеннаяАналитикаУчета.ПолучитьСчетБУПоСчетуНУ(СтрокаТабКапитальныхВложений.СчетЗатратНУ);
		Массив = Новый Массив;
		Массив.Добавить(ВыборкаПоКВ.СубконтоПоАмортизационнойПремии1);
		Массив.Добавить(ВыборкаПоКВ.СубконтоПоАмортизационнойПремии2);
		Массив.Добавить(ВыборкаПоКВ.СубконтоПоАмортизационнойПремии3);
		СтрокаТабКапитальныхВложений.ПодразделениеОрганизации = НайтиЗначениеЗначениеСправочникаПоТипу("ПодразделенияОрганизаций",Массив);
		СтрокаТабКапитальныхВложений.НоменклатурнаяГруппа     = НайтиЗначениеЗначениеСправочникаПоТипу("НоменклатурныеГруппы",Массив);
		СтрокаТабКапитальныхВложений.СтатьяЗатрат             = НайтиЗначениеЗначениеСправочникаПоТипу("СтатьиЗатрат",Массив);
	КонецЦикла;
	Если ВыборкаПоКВ.Количество() > 0 Тогда
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(СтруктураШапкиДокумента, ТабКапитальныхВложений);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьВидЗатрат(Массив) 
	
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		ТекущееЗначение = Массив.Получить(Индекс);
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не ТекущееЗначение = Неопределено И Не ТекущееЗначение = Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
			Возврат ТекущееЗначение.ВидРасходовНУ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция НайтиЗначениеЗначениеСправочникаПоТипу(Тип, МассивПоиска) Экспорт 
	
	Для Счетчик = 0 По МассивПоиска.Количество() - 1 Цикл
		Строка = МассивПоиска[Счетчик];
		Если ТипЗнч(Строка) = Тип("СправочникСсылка." + Тип) Тогда
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Определяет коэффициент распределения
// расходов по видам деятельности (ЕНВД / не ЕНВД).
//
// Параметры
//  Организация - СправочникСсылка.Организации
//  Дата  – Дата – одна из дат того месяца,
//			в котором необходимо рассчитать коэффициент.
//
// Возвращаемое значение:
//   Число – коэффициент распределения расходов по видам деятельности.
//
Функция КоэффициентРаспределенияРасходовПоВидамДеятельности(Организация, Знач Дата, Знач НачДата = Неопределено, ВидУчета = "БУ", ПоВсемСчетам = Истина) Экспорт
	
	Если ВидУчета = "НУ" Тогда
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		 Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
            ПериодГод = Ложь;
			УчитыватьВсеДоходы = Ложь;
		Иначе
		ПериодГод          = ?(УчетнаяПолитикаРегл.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности = Перечисления.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.НарастающимИтогомСНачалаГода, Истина, Ложь);
		УчитыватьВсеДоходы = ?(УчетнаяПолитикаРегл.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности = Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализацииИВнереализационные, Истина, Ложь);
			
		КонецЕсли;
		
		Если НачДата = Неопределено Тогда
			НачДатаТекущегоМесяца = НачалоМесяца(Дата);
		Иначе
			НачДатаТекущегоМесяца = НачалоМесяца(НачДата);
		КонецЕсли;
		Если ПериодГод Тогда
			НачДата = НачалоГода(Дата);
		Иначе
			НачДата = НачалоМесяца(Дата);
		КонецЕсли;
		
	Иначе
		ПериодГод =  Ложь;
		УчитыватьВсеДоходы = Ложь;
		Если НачДата = Неопределено Тогда
			НачДата = НачалоМесяца(Дата);
		КонецЕсли;
	КонецЕсли;
	
	КонДата = КонецМесяца(Дата);      // Доходы от реализации
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД)
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД))
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаНеЕНВД,
	|	СУММА(0) КАК РасходыЕНВДПрошлыхПериодов,
	|	СУММА(0) КАК РасходыСНачалаГода,
	|	СУММА(0) КАК РасходыМесяца,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&МассивСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет";
	
	Если УчитыватьВсеДоходы Тогда   // Внереализационные доходы
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(0),
 		|   - СУММА(ХозрасчетныйОбороты.СуммаОборот),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	ХозрасчетныйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&ВнереализационныеДоходы), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(0),
		|	- СУММА(ХозрасчетныйОбороты.СуммаОборот),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	ХозрасчетныйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&ВнереализационныеРасходы), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&СчетНДС), ) КАК ХозрасчетныйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Счет";
		
	КонецЕсли;
	
	Если ПериодГод Тогда      // распределение расходов предыдущих периодов
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(НалоговыйОбороты.СуммаОборотКт),
		|	СУММА(0),
		|	СУММА(0),
		|	НалоговыйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачДата, &КонДатаМинусМесяц, Период, Счет В ИЕРАРХИИ (&СчетаУчетаРасходов), , Организация = &Организация, КорСчет = &ЕНВД, ) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(НалоговыйОбороты.СуммаОборотКт),
		|	СУММА(0),
		|	СУММА(0),
		|	НалоговыйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачДата, &КонДатаМинусМесяц, Период, Счет В ИЕРАРХИИ (&Счет91), &ВидСубконто91, Организация = &Организация, КорСчет = &ЕНВД, ) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ                 // расходы с начала года
		|
		|ВЫБРАТЬ
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),					   
		|	СУММА(НалоговыйОбороты.СуммаОборотДт), 
		|	СУММА(0),					   
		|	НалоговыйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&СчетаУчетаРасходов), , Организация = &Организация, , ) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ                
		|
		|ВЫБРАТЬ
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),					   
		|	СУММА(НалоговыйОбороты.СуммаОборотДт), 
		|	СУММА(0),					   
		|	НалоговыйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&Счет91), &ВидСубконто91, Организация = &Организация, , ) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ        // расходы текущего месяца
		|
		|ВЫБРАТЬ
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),					   
		|	СУММА(НалоговыйОбороты.СуммаОборотДт), 
		|	НалоговыйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачДатаТекущегоМесяца, &КонДата, Период, Счет В ИЕРАРХИИ (&СчетаУчетаРасходов), , Организация = &Организация, , ) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ      		
		|ВЫБРАТЬ
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),					   
		|	СУММА(НалоговыйОбороты.СуммаОборотДт), 
		|	НалоговыйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачДатаТекущегоМесяца, &КонДата, Период, Счет В ИЕРАРХИИ (&Счет91), &ВидСубконто91, Организация = &Организация, , ) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.Счет";
	КонецЕсли;
	
	//Массив счетов, по которым рассчитывается доход организации
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	РаспределяемыеСчета = Новый Массив;
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые);
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.КоммерческиеРасходыРаспределяемые);
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ВнереализационныеРасходыРаспределяемые);

	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",              НачДата);
	Запрос.УстановитьПараметр("КонДата",              КонДата);
	Запрос.УстановитьПараметр("КонДатаМинусМесяц",    КонецМесяца(НачалоМесяца(Дата) - 1));
	Запрос.УстановитьПараметр("НачДатаТекущегоМесяца",НачДатаТекущегоМесяца);
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД",      НалоговыйУчетУСН.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("МассивСчетов",         МассивСчетов);
	Запрос.УстановитьПараметр("ВнереализационныеДоходы",ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВнереализационныеРасходы",ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Счет91ЕНВД",            ПланыСчетов.Хозрасчетный.ПрочиеРасходыРаспределяемые);
	Запрос.УстановитьПараметр("СчетНДС",               ПланыСчетов.Хозрасчетный.НДС);
	Запрос.УстановитьПараметр("ЕНВД",                 ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("СчетаУчетаРасходов",   РаспределяемыеСчета);
	Запрос.УстановитьПараметр("ВидСубконто",          ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконто91",        ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Счет91",               ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат запроса пустой, то считаем, что все
	// расходы относятся к деятельности не облагаемой ЕНВД.
	Если РезультатЗапроса.Пустой() Тогда
		Коэффициент = 0;
		
	Иначе
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();
		ВыручкаЕНВД      = Макс(ТаблицаРезультат.Итог("ВыручкаЕНВД"),   0);
		ВыручкаНеЕНВД    = Макс(ТаблицаРезультат.Итог("ВыручкаНеЕНВД"), 0);
		
		Если ВыручкаНеЕНВД + ВыручкаЕНВД = 0 Тогда // нет дохода ни по одному из видов деятельности
			Коэффициент = 0;
			Возврат Коэффициент;
		КонецЕсли;
		
		
		Если Не ПериодГод Тогда
			
			Если ВыручкаНеЕНВД = 0 Тогда  // нет дохода виду деятельности не подпадающему под обложение ЕНВД
				Коэффициент = 1;
				
			Иначе
				Коэффициент = ВыручкаЕНВД / (ВыручкаНеЕНВД + ВыручкаЕНВД);
			КонецЕсли;
			
		Иначе
			Если ПоВсемСчетам Тогда
				
				РасходыЕНВДПрошлыхПериодов = ТаблицаРезультат.Итог("РасходыЕНВДПрошлыхПериодов");
				РасходыСНачалаГода         = ТаблицаРезультат.Итог("РасходыСНачалаГода");
				РасходыМесяца              = ТаблицаРезультат.Итог("РасходыМесяца");
				
				РасходыЕНВДСНачалаГода = РасходыСНачалаГода * ВыручкаЕНВД / (ВыручкаНеЕНВД + ВыручкаЕНВД);
				РасходыЕНВД = РасходыЕНВДСНачалаГода - РасходыЕНВДПрошлыхПериодов;
				Коэффициент = ?(РасходыМесяца = 0, 0, РасходыЕНВД / РасходыМесяца); 
				
			Иначе
				ТаблицаРезультат.Свернуть("Счет", "РасходыЕНВДПрошлыхПериодов,РасходыСНачалаГода,РасходыМесяца");
				ТаблицаКоэффиентов = Новый ТаблицаЗначений ;
				ТаблицаКоэффиентов.Колонки.Добавить("Счет");
				ТаблицаКоэффиентов.Колонки.Добавить("Коэффициент");
				ТаблицаКоэффиентов.Колонки.Добавить("СуммаКорректировки");
				
				Для Каждого СтрокаТаблицы ИЗ ТаблицаРезультат Цикл
					СтрокаТаблицаКоэффиентов = ТаблицаКоэффиентов.Добавить();	
					РасходыЕНВДСНачалаГода = СтрокаТаблицы.РасходыСНачалаГода * ВыручкаЕНВД / (ВыручкаНеЕНВД + ВыручкаЕНВД);
					РасходыЕНВД = РасходыЕНВДСНачалаГода - СтрокаТаблицы.РасходыЕНВДПрошлыхПериодов;
					СтрокаТаблицаКоэффиентов.Счет = СтрокаТаблицы.Счет;
					Если СтрокаТаблицы.РасходыМесяца = 0 Тогда
						СтрокаТаблицаКоэффиентов.Коэффициент = 0;
						СтрокаТаблицаКоэффиентов.СуммаКорректировки = РасходыЕНВД;
					Иначе
						СтрокаТаблицаКоэффиентов.Коэффициент = РасходыЕНВД / СтрокаТаблицы.РасходыМесяца; 
						СтрокаТаблицаКоэффиентов.СуммаКорректировки = 0;
					КонецЕсли;
				КонецЦикла;
				Возврат ТаблицаКоэффиентов;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Коэффициент;
	
КонецФункции // КоэффициентРаспределенияРасходовПоВидамДеятельности()

// Формируется таблица строк в которой задано соответствие видов активов
// (обязательства) и счетов налогового учета, на которых отражаются разницы
// по этим видам активов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьТаблицуВидовАктивовИОбязательств() Экспорт
	
	ЕстьСкладскойУчет = Константы.ВестиПартионныйУчетПоСкладамРегл.Получить();
	
	ТаблицаВидовАктивовИОбязательств = Новый ТаблицаЗначений;
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ВидАктивовОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств, Строка"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Счета",      Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Субконто",   Новый ОписаниеТипов("Массив"));
	
	//Основные средства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.АмортизацияОС_01);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	//Активы, признаемые как МПЗ в БУ и ОС в НУ
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	//ДоходныеВложенияВ_МЦ
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.АмортизацияОС_03);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	//Нематериальные активы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.НематериальныеАктивы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Оборудование 
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ОборудованиеКУстановке);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	// Внеоборотные активы   08.01
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретениеЗемельныхУчастков);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.02
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретениеОбъектовПриродопользования);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.03
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы 08.04
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретениеОбъектовОсновныхСредств);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Внеоборотные активы 08.05
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретениеНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Внеоборотные активы 08.08
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ВыполнениеНИОКР);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	
	// Внеоборотные активы 08.11 и 08.12
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.НематериальныеПоисковыеАктивы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.МатериальныеПоисковыеАктивы);
	
	// Материалы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	СчетаУчетаМатериалов = ПланыСчетов.Налоговый.ВыбратьИерархически(ПланыСчетов.Налоговый.Материалы);
	Пока СчетаУчетаМатериалов.Следующий() Цикл
		СчетУчетаМатериалов = СчетаУчетаМатериалов.Ссылка;
		КодСчета = СчетУчетаМатериалов.Код;
		Если Лев(КодСчета, 5) = "10.МЦ"
			Или Лев(КодСчета, 5) = "10.11" 
			Или Лев(КодСчета, 5) = "10.07" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Счета.Добавить(СчетУчетаМатериалов);
	КонецЦикла;
	
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
		// Материалы  в переработке
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку.Ссылка);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
		// Материалы  в эксплутации
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.СпецоснасткаИСпецодеждаВЭксплуатации.Ссылка);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Незавершенное производство
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПроизводствоИзДавальческогоСырья);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Готовая продукция
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Полуфабрикаты
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Полуфабрикаты;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.Полуфабрикаты);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Расходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	// Товары
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.Товары);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Товары отгруженные
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ТоварыОтгруженные);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Основые средства отгруженные
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	// Издержки обращения
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ИздержкиОбращения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	// Финансовые вложения (счета 58.01.1)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.Паи);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Финансовые вложения (счета 58.01.2 и Н58.02)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.Акции);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ДолговыеЦенныеБумаги);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	// Финансовые вложения (счета 58.03, 58.04, 58.05)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПредоставленныеЗаймы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ВкладыПоДоговоруПростогоТоварищества);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретенныеПрава);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Доходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ДоходыБудущихПериодов);
	
	// Курсовые разницы при оплате в рублях (пассивные счета)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоПриобретениюВУЕ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в рублях  (активные счета)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоРеализацииВУЕ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Убытки текущего периода
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
    
	// Недостачи и потери от порчи ценностей
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НедостачиПотери;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей);
    
    	// Оценочные обязательства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОценочныеОбязательства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.РезервыПредстоящихРасходов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Резервы);
	
	// Резервы по сомнительным долгам
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РезервыСомнительныхДолгов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.РезервыПоСомнительнымДолгам);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Дебиторская задолженность от продажи основных средств, требующих гос.регистрации
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоРасчетамЗаНедвижимость);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    
	Возврат ТаблицаВидовАктивовИОбязательств;
	
КонецФункции // ПолучитьТаблицуВидовАктивовИОбязательств()

// Определяются суммы временных разницы, которые отражены на плане счетов
// по конкретному виду ОНА (ОНО) и распределяются на вычитаемые и налогооблагемые разницы.
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в каторой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Функция ОборотыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, СтруктураДопПараметров, ЭтоОтчет = Ложь) Экспорт
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	
	МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
    Если НЕ КоличествоОбъектовАналитики = 0 Тогда
        СвернутьПоСчету = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
        СвернутьПоСчету = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, СвернутьПоСчету);
        ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
        ФлагНЗП = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
        СвернутьПоСчету = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы, 1, СвернутьПоСчету);
    Иначе
        СвернутьПоСчету = Ложь;
        ФлагОбъектовСтроительства = Ложь;
        ФлагНЗП = Ложь;
    КонецЕсли;
	
	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоМесяца",   СтруктураДопПараметров.НачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",    СтруктураДопПараметров.КонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("МассивСчетов",   СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидУчета", 	    Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидСубконто",    МассивСубконто);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ);
	Массив.Добавить(ПланыСчетов.Налоговый.ОСвСоставеМПЗвБУ);
	Если Не ЭтоОтчет Тогда
		Массив.Добавить(ПланыСчетов.Налоговый.УбыткиПрошлыхЛет);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетМЦ",       Массив);
	Запрос.УстановитьПараметр("СчетЕН",       ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	РаспределяемыеСчета = Новый Массив;
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые);
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ВнереализационныеРасходыРаспределяемые);
	Запрос.УстановитьПараметр("РаспределяемыеСчета",    РаспределяемыеСчета);
	Запрос.УстановитьПараметр("СчетПрочихРасходов",ПланыСчетов.Налоговый.ПрочиеРасходы);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстаткиИОбороты.Счет КАК Счет,
	               |	НалоговыйОстаткиИОбороты.Субконто1 КАК Субконто1,
	               |	НалоговыйОстаткиИОбороты.Субконто2 КАК Субконто2,
	               |	НалоговыйОстаткиИОбороты.Субконто3 КАК Субконто3,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК НачОстатокДт,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОстаткиИОбороты.Счет В (&СчетМЦ)
	               |				ТОГДА НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт - НалоговыйОстаткиИОбороты.СуммаОборотДт
	               |			ИНАЧЕ НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |		КОНЕЦ) КАК КонОстатокДт,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК НачОстатокКт,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК КонОстатокКт,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОстаткиИОбороты.Счет В (&СчетМЦ)
	               |				ТОГДА 0
	               |			ИНАЧЕ НалоговыйОстаткиИОбороты.СуммаОборотДт
	               |		КОНЕЦ) КАК ОборотДт,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаОборотКт) КАК ОборотКт,
	               |	СУММА(0) КАК ОборотЕН,
	               |	СУММА(0) КАК СуммаЗатрат
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			,
	               |			,
	               |			Счет В ИЕРАРХИИ (&МассивСчетов),
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И ВидУчета = &ВидУчета) КАК НалоговыйОстаткиИОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстаткиИОбороты.Счет,
	               |	НалоговыйОстаткиИОбороты.Субконто1,
	               |	НалоговыйОстаткиИОбороты.Субконто2,
	               |	НалоговыйОстаткиИОбороты.Субконто3
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Субконто2,
	               |	НалоговыйОбороты.Субконто3,
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт),
	               |	СУММА(0)
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			,
	               |			Счет В ИЕРАРХИИ (&МассивСчетов),
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И ВидУчета = &ВидУчета,
	               |			КорСчет = &СчетЕН,
	               |			) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Субконто2,
	               |	НалоговыйОбороты.Субконто3
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Субконто2,
	               |	НалоговыйОбороты.Субконто3,
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборотКт, 0))
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			,
	               |			Счет В ИЕРАРХИИ (&МассивСчетов),
	               |			,
	               |			Организация = &Организация
	               |				И ВидУчета = &ВидУчета,
	               |			КорСчет В ИЕРАРХИИ (&РаспределяемыеСчета),
	               |			) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Субконто2,
	               |	НалоговыйОбороты.Субконто3";
	
	
	Если СвернутьПоСчету = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НалоговыйОстаткиИОбороты.Счет КАК Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НалоговыйОстаткиИОбороты.Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НалоговыйОбороты.Счет,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОстаткиИОбороты.Субконто3 КАК Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОстаткиИОбороты.Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОбороты.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОстаткиИОбороты.Субконто2 КАК Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОстаткиИОбороты.Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОбороты.Субконто2", "");
	КонецЕсли;
    
	Если КоличествоОбъектовАналитики < 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОстаткиИОбороты.Субконто1 КАК Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОстаткиИОбороты.Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	НалоговыйОбороты.Субконто1", "");
	КонецЕсли;
    
	Результат = Запрос.Выполнить();
	ТаблицаРезультатов = Результат.Выгрузить();
	ТаблицаРезультатов.Свернуть("" + ?(СвернутьПоСчету = 1, "", "Счет,") + ?(КоличествоОбъектовАналитики = 0, "",",Субконто1") + ?(ФлагОбъектовСтроительства = 1, "", ?(КоличествоОбъектовАналитики = 2, ",Субконто2","")) + ?(ФлагНЗП = 1, "", ?(КоличествоОбъектовАналитики = 3, ",Субконто3","")),"НачОстатокКт,КонОстатокКт,НачОстатокДт,КонОстатокДт,ОборотДт,ОборотКт,ОборотЕН,СуммаЗатрат");
	ТаблицаРезультатов.Колонки.Добавить("СуммаДт09");
	ТаблицаРезультатов.Колонки.Добавить("СуммаКт09");
	ТаблицаРезультатов.Колонки.Добавить("СуммаДт77");
	ТаблицаРезультатов.Колонки.Добавить("СуммаКт77");
	ТаблицаРезультатов.Колонки.Добавить("СуммаЕНВД");
	
	
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		
		Для Каждого Строка Из ТаблицаРезультатов Цикл
			СводноеСальдоКон = ?(Строка.КонОстатокДт = NULL, 0, Строка.КонОстатокДт) - ?(Строка.КонОстатокКт = NULL, 0, Строка.КонОстатокКт);
			СводноеСальдоНач = ?(Строка.НачОстатокДт = NULL, 0, Строка.НачОстатокДт) - ?(Строка.НачОстатокКт = NULL, 0, Строка.НачОстатокКт);
			
			Разница = ?(Строка.ОборотДт = NULL, 0, Строка.ОборотДт) - ?(Строка.ОборотКт = NULL, 0, Строка.ОборотКт);
			
			// Определим сумму временных разниц, приходящуюся на деятельность, облагаемую ЕНВД,
			// для распределяемых затрат, связанных с амортизацией и списанием РБП.
			Строка.СуммаЕНВД = Строка.СуммаЗатрат * СтруктураДопПараметров.КоэффициентЕНВД + Строка.ОборотЕН;
			
			// Специальная обработка для специального счета 10.ТЦ
			Если  СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства И ТипЗнч(Строка.Субконто1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка.СуммаКт77 = 0;
				Строка.СуммаДт77 = 0;
				Строка.СуммаКт09 = 0;
				Строка.СуммаДт09 = - Разница;
				Продолжить;
			КонецЕсли;		 
			
			Если СводноеСальдоНач > 0 Тогда
				Если  СводноеСальдоКон - СводноеСальдоНач > 0 Тогда
					Строка.СуммаКт77 = Разница;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
				ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
					Иначе  Если (СводноеСальдоКон < 0) И (СводноеСальдоНач >= 0) Тогда
						Строка.СуммаДт09 = - СводноеСальдоКон;
						Строка.СуммаДт77 = СводноеСальдоНач;
						Строка.СуммаКт09 = 0;
						Строка.СуммаКт77 = 0;
					Иначе
						Строка.СуммаКт77 = 0;
						Строка.СуммаДт77 = - Разница;
						Строка.СуммаКт09 = 0;
						Строка.СуммаДт09 = 0;
						
						
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если  СводноеСальдоКон - СводноеСальдоНач < 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = - СводноеСальдоКон + СводноеСальдоНач;
				ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 =  0;
					Иначе  Если (СводноеСальдоКон > 0) И (СводноеСальдоНач <= 0) Тогда
						Строка.СуммаКт77 = СводноеСальдоКон;
						Строка.СуммаДт77 = 0;
						Строка.СуммаКт09 = - СводноеСальдоНач;
						Строка.СуммаДт09 = 0;
					Иначе
						Строка.СуммаКт77 = 0;
						Строка.СуммаДт77 = 0;
						Строка.СуммаКт09 = Разница;
						Строка.СуммаДт09 = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	 	 
	
	Возврат  ТаблицаРезультатов;
	
КонецФункции // ОборотыВременныхРазницПоВидуАктивовОбязательств()

Функция ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, Организация, НачалоГода, КонецГода) Экспорт
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	
	Если Не КоличествоОбъектовАналитики = 0 Тогда
		
		МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
		СвернутьПоСчету = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
		СвернутьПоСчету = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, СвернутьПоСчету);
		ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
		ФлагНЗП = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
        СвернутьПоСчету = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы, 1, 0);
	Иначе
		СвернутьПоСчету = Ложь;
		ФлагОбъектовСтроительства = Ложь;
		ФлагНЗП = Ложь;
	КонецЕсли;
 
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("НачалоГода",     НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",      КонецГода);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("МассивСчетов",   СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидУчета", 	    Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидСубконто",    МассивСубконто);
	Запрос.УстановитьПараметр("Счет09",         ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Счет77",         ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
    Запрос.УстановитьПараметр("ВидАктивовОбязательств",СтрокаВидАктиваОбязательства.ВидАктивовОбязательств);
	Запрос.УстановитьПараметр("АктивыИОбязательства",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств);
    
    Массив = Новый Массив;
    Массив.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
    Массив.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
	Запрос.УстановитьПараметр("КорСчет",         Массив);
    
	Запрос.Текст = "ВЫБРАТЬ
                   |    ОстаткиВР.Счет КАК Счет,
                   |    ОстаткиВР.Субконто1 КАК Субконто1,
                   |    ОстаткиВР.Субконто2 КАК Субконто2,
                   |    ОстаткиВР.Субконто3 КАК Субконто3,
                   |    &Счет09 КАК СчетОНАОНО,
                   |    ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОбороты.СуммаОборот КАК СтараяСумма,
                   |    СУММА(ВЫБОР
                   |            КОГДА ОстаткиВР.СуммаОстатокДт < 0
                   |                    ИЛИ ОстаткиВР.СуммаОстатокКт > 0
                   |                ТОГДА -ОстаткиВР.СуммаОстаток
                   |            ИНАЧЕ 0
                   |        КОНЕЦ) КАК Сумма
                   |ИЗ
                   |    РегистрБухгалтерии.Налоговый.Остатки(
                   |            &КонецГода,
                   |            Счет В ИЕРАРХИИ (&МассивСчетов),
                   |            &ВидСубконто,
                   |            Организация = &Организация
                   |                И ВидУчета = &ВидУчета) КАК ОстаткиВР,
                   |    РегистрБухгалтерии.Хозрасчетный.Остатки(
                   |            &КонецГода,
                   |            Счет В ИЕРАРХИИ (&Счет09),
                   |            &АктивыИОбязательства,
                   |            Организация = &Организация
                   |                И Субконто1 = &ВидАктивовОбязательств) КАК ХозрасчетныйОстатки,
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты(
                   |            &НачалоГода,
                   |            &КонецГода,
                   |            Период,
                   |            Счет В ИЕРАРХИИ (&Счет09),
                   |            &АктивыИОбязательства,
                   |            Организация = &Организация
                   |                И Субконто1 = &ВидАктивовОбязательств,
                   |            КорСчет В ИЕРАРХИИ (&КорСчет),
                   |            ) КАК ХозрасчетныйОбороты
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    ОстаткиВР.Счет,
                   |    ОстаткиВР.Субконто1,
                   |    ОстаткиВР.Субконто2,
                   |    ОстаткиВР.Субконто3,
                   |    ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОбороты.СуммаОборот
                   |
                   |ДЛЯ ИЗМЕНЕНИЯ
                   |
                   |ОБЪЕДИНИТЬ ВСЕ
                   |
                   |ВЫБРАТЬ
                   |    ОстаткиВР.Счет,
                   |    ОстаткиВР.Субконто1,
                   |    ОстаткиВР.Субконто2,
                   |    ОстаткиВР.Субконто3,
                   |    &Счет77,
                   |    ХозрасчетныйОстатки.СуммаОстатокКт + ХозрасчетныйОбороты.СуммаОборот,
                   |    СУММА(ВЫБОР
                   |            КОГДА ОстаткиВР.СуммаОстатокДт > 0
                   |                    ИЛИ ОстаткиВР.СуммаОстатокКт < 0
                   |                ТОГДА ОстаткиВР.СуммаОстаток
                   |            ИНАЧЕ 0
                   |        КОНЕЦ)
                   |ИЗ
                   |    РегистрБухгалтерии.Налоговый.Остатки(
                   |            &КонецГода,
                   |            Счет В ИЕРАРХИИ (&МассивСчетов),
                   |            &ВидСубконто,
                   |            Организация = &Организация
                   |                И ВидУчета = &ВидУчета) КАК ОстаткиВР,
                   |    РегистрБухгалтерии.Хозрасчетный.Остатки(
                   |            &КонецГода,
                   |            Счет В ИЕРАРХИИ (&Счет77),
                   |            &АктивыИОбязательства,
                   |            Организация = &Организация
                   |                И Субконто1 = &ВидАктивовОбязательств) КАК ХозрасчетныйОстатки,
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты(
                   |            &НачалоГода,
                   |            &КонецГода,
                   |            Период,
                   |            Счет В ИЕРАРХИИ (&Счет77),
                   |            &АктивыИОбязательства,
                   |            Организация = &Организация
                   |                И Субконто1 = &ВидАктивовОбязательств,
                   |            КорСчет В ИЕРАРХИИ (&КорСчет),
                   |            ) КАК ХозрасчетныйОбороты
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    ОстаткиВР.Счет,
                   |    ОстаткиВР.Субконто1,
                   |    ОстаткиВР.Субконто2,
                   |    ОстаткиВР.Субконто3,
                   |    ХозрасчетныйОстатки.СуммаОстатокКт + ХозрасчетныйОбороты.СуммаОборот
                   |
                   |ДЛЯ ИЗМЕНЕНИЯ";
	
	
	Если СвернутьПоСчету = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОстаткиВР.Счет КАК Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОстаткиВР.Счет,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|    ОстаткиВР.Субконто3 КАК Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|    ОстаткиВР.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|    ОстаткиВР.Субконто2 КАК Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|    ОстаткиВР.Субконто2", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|    ОстаткиВР.Субконто1 КАК Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|    ОстаткиВР.Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|    ОстаткиВР.Субконто1", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатов = Результат.Выгрузить();
	ТаблицаРезультатов.Свернуть("СчетОНАОНО,СтараяСумма," + ?(СвернутьПоСчету = 1, "", "Счет,") + ?(КоличествоОбъектовАналитики = 0, "","Субконто1") + ?(ФлагОбъектовСтроительства = 1, "", ?(КоличествоОбъектовАналитики = 2, ",Субконто2","")) + ?(ФлагНЗП = 1, "", ?(КоличествоОбъектовАналитики = 3, ",Субконто3","")),"Сумма");
	
	
	Возврат  ТаблицаРезультатов;
КонецФункции // ОборотыВременныхРазницПоВидуАктивовОбязательств()

Функция ПолучитьТекстВидаДеятельности(ПрименяетсяЕНВД, ЕстьОборотЕНВД, ЭтоЕНВД) Экспорт
	
	
	Если ПрименяетсяЕНВД Тогда
		
			Если ЭтоЕНВД  Тогда
				Возврат " по видам деятельности, облагаемым ЕНВД";
			Иначе
				Возврат " по видам деятельности, не облагаемым ЕНВД";
			КонецЕсли;
		
		
		Иначе  // Если ЕНВД не применятся, но обороты по счетам - ЕНВД есть, то будем уточнять вид налогообложения
			   // у видов деятельности
		
		Если ЕстьОборотЕНВД Тогда
			
			Если ЭтоЕНВД  Тогда
				Возврат " по видам деятельности, облагаемым ЕНВД";
			Иначе
				Возврат " по видам деятельности, не облагаемым ЕНВД";
			КонецЕсли;
			
		Иначе
			
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции

Функция ОпределитьВидПрочихДоходовИРасходов(Список) 
	
	Для Индекс = 0 По Список.Количество() - 1 Цикл
		ТекущееЗначение = Список.Получить(Индекс);
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не ТекущееЗначение = Неопределено И Не ТекущееЗначение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() Тогда
			Возврат ТекущееЗначение.ВидПрочихДоходовИРасходов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Процедура проверяет глобальную переменную УчетнаяПолитикаОтраженияЗарплатыВУчете
// на наличие в ней структуры на конец квартала указанной даты по данной организации
// Параметры:
//  Период - Дата.
//  Организация - Организация.
//
Процедура ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(УчетнаяПолитикаПоНалоговомуУчету, Период, Организация) Экспорт
	
	ДатаПериода = ?(ЗначениеЗаполнено(Период),КонецМесяца(Период),Период);

	ПустаяУчетнаяПолитикаПоНалоговомуУчету = НалоговыйУчетПереопределяемый.СоздатьПустуюУчетнуюПолитикуПоНалоговомуУчету();
	
	Если УчетнаяПолитикаПоНалоговомуУчету[ДатаПериода] = Неопределено Тогда
		УчетнаяПолитика = Новый Соответствие;
		УчетнаяПолитика.Вставить(Справочники.Организации.ПустаяСсылка(), ПустаяУчетнаяПолитикаПоНалоговомуУчету);
		УчетнаяПолитикаПоНалоговомуУчету.Вставить(ДатаПериода,УчетнаяПолитика);
	Иначе
		УчетнаяПолитика = УчетнаяПолитикаПоНалоговомуУчету[ДатаПериода]
	КонецЕсли;
	
	Если УчетнаяПолитика[Организация] = Неопределено Тогда
		УчетнаяПолитика.Вставить(Организация, ПустаяУчетнаяПолитикаПоНалоговомуУчету);
		ДатаОсмотра = '00010101';
		Для Каждого ПериодыУчетнойПолитики Из УчетнаяПолитикаПоНалоговомуУчету Цикл
			Если ПериодыУчетнойПолитики.Значение[Организация] <> Неопределено 
				И ДатаПериода > ПериодыУчетнойПолитики.Ключ 
				И ПериодыУчетнойПолитики.Ключ > ДатаОсмотра Тогда
				ДатаОсмотра = ПериодыУчетнойПолитики.Ключ;
				УчетнаяПолитика.Вставить(Организация, ПериодыУчетнойПолитики.Значение[Организация]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	#Если Сервер Тогда
		глЗначениеПеременнойУстановить("УчетнаяПолитикаОтраженияЗарплатыВУчете", УчетнаяПолитикаПоНалоговомуУчету);
	#КонецЕсли
	
КонецПроцедуры

// Определяет, является ли организация плательщиком ЕНВД
//
// Параметры:
//  Организация  - Справочник.Ссылка - Организация
//  Дата         - Дата - Дата, на которую получаются сведения
//
// Возвращаемое значение:
//  Булево.
//
Функция ПрименениеЕНВД(Организация, Знач Дата) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);

	Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		Возврат УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПрименениеЕНВД

//Процедура предназначена для сворачивания набора записей регистра бухгалтерии "Налоговый":
//1) Формирует исходные данные для сворачивания: 
//  	список колонок для группировки и для суммирования
//2) Вызывает универсальную процедуру сворачивания набора записей
//Параметры: НаборЗаписейРегистраБухгалтерии, тип - набор записей регистров бухгалтерии Налоговый
Процедура СвернутьНаборЗаписейРегистраБухгалтерии(НаборЗаписейРегистраБухгалтерии) Экспорт
	
	//колонки таблицы значений, которые будут суммироваться
    СтрокаСуммирование = "Сумма, КоличествоДт, КоличествоКт";
    //колонки таблицы значений, по которым будет выполняться группировка
	СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
		"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
		"Содержание, НомерЖурнала, СписаниеПартий, ДатаЗаписи, "+
		"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
		"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
		"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
		"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
	    "ВидУчетаДт, ВидУчетаКт, СписаниеПартийНДС";
	
	ВестиРеглУчетРасчетовСПерсоналомСводно = глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
	
	МассивСчетовРасчетовСПерсоналом = Новый Массив;
	// Если способ ведения расчетов с персоналом - сводно,
	// то перед сворачиванием могут потребоваться дополнительные действия по очистке аналитики в проводках
	Если ВестиРеглУчетРасчетовСПерсоналомСводно Тогда
		// Подготовка массива счетов учета расчетов с персоналом
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда);
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Налоговый.РасходыНаОплатуТрудаБудущихПериодов);
	КонецЕсли;
	
	ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(НаборЗаписейРегистраБухгалтерии,
								СтрокаГруппировка, СтрокаСуммирование,
								ВестиРеглУчетРасчетовСПерсоналомСводно, МассивСчетовРасчетовСПерсоналом);
	
КонецПроцедуры

Процедура ОтразитьНеПринимаемыеРасходы(Проводка, СчетУчетаНепринимаемыхРасходов)
	
	Проводка.КоличествоДт = 0;
	Проводка.СчетДт       =  СчетУчетаНепринимаемыхРасходов;
	Проводка.СубконтоДт.Очистить();	
	Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
	
КонецПроцедуры

Процедура ОтразитьНеПринимаемыеДоходы(Проводка)
	
	Проводка.КоличествоКт = 0;
	Проводка.СчетКт       =  ПланыСчетов.Налоговый.ДоходыНеУчитываемые;
	Проводка.СубконтоКт.Очистить();	
	Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
	
КонецПроцедуры

//Процедура заполняет данные налогового учета по бухгалтерскому
//
// Параметры
// 		ДанныеНУ	- Таблица значений или набор записей, где будет заполнены данные налогового учета
//					  Структура должна быть аналогична набору записей регистра бухгалтерии Налоговый 
// 		ДанныеБУ	- Таблица значений или набор записей, с данными бухгалтерского учета
//					  Структура должна быть аналогична набору записей регистра бухгалтерии Хозрасчетный 
//		Дата		- Дата, на которую берется соответствие счетов БУ и НУ
//
Процедура ЗаполнитьДанныеНалоговогоУчетаПоБухгалтерскомуУчету(ДанныеНУ, ДанныеБУ, Дата) Экспорт

	Если ДанныеБУ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаТЧ = Новый Структура("СчетЗатрат,Субконто1,Субконто2,Субконто3,СчетЗатратНУ");
	
	//Период записей одинаковый
	ПериодЗаписей = ДанныеБУ[0].Период;
	
	СоответствиеОрганизацияПоддержкаПБУ18 = Новый Соответствие;
	ТаблицаОрганизаций = ДанныеБУ.Выгрузить(,"Организация");
	ТаблицаОрганизаций.Свернуть("Организация");
	
	Для каждого СтрокаОрганизаций Из ТаблицаОрганизаций Цикл
		ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ПериодЗаписей, СтрокаОрганизаций.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			ПоддержкаПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
		Иначе
			ПоддержкаПБУ18 = Ложь;
		КонецЕсли; 
		СоответствиеОрганизацияПоддержкаПБУ18.Вставить(СтрокаОрганизаций.Организация, ПоддержкаПБУ18);
	КонецЦикла; 
    ТаблицаОрганизаций = Неопределено;
	
	Для Каждого Выборка из ДанныеБУ Цикл

		ПоддержкаПБУ18 = СоответствиеОрганизацияПоддержкаПБУ18.Получить(Выборка.Организация);
		
		СтрокаТЧ.СчетЗатрат = Выборка.СчетДт;
		Если ЗначениеЗаполнено(Выборка.СубконтоДт.СтатьиЗатрат) Тогда
			СтрокаТЧ.Субконто1 = Выборка.СубконтоДт.СтатьиЗатрат;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СубконтоДт.ПрочиеДоходыИРасходы) Тогда
			СтрокаТЧ.Субконто1 = Выборка.СубконтоДт.ПрочиеДоходыИРасходы;
		КонецЕсли;
		
		ЗаполнитьСчетНалоговогоУчетаВДокументе(СтрокаТЧ, Истина, Неопределено, Дата);
		СчетДт = СтрокаТЧ.СчетЗатратНУ;
		
		СтрокаТЧ.СчетЗатрат = Выборка.СчетКт;
		Если ЗначениеЗаполнено(Выборка.СубконтоКт.СтатьиЗатрат) Тогда
			СтрокаТЧ.Субконто1 = Выборка.СубконтоКт.СтатьиЗатрат;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СубконтоКт.ПрочиеДоходыИРасходы) Тогда
			СтрокаТЧ.Субконто1 = Выборка.СубконтоКт.ПрочиеДоходыИРасходы;
		КонецЕсли;
		
		ЗаполнитьСчетНалоговогоУчетаВДокументе(СтрокаТЧ, Истина, Неопределено, Дата);
		СчетКт = СтрокаТЧ.СчетЗатратНУ;
		
		Если НЕ ЗначениеЗаполнено(СчетДт) И НЕ ЗначениеЗаполнено(СчетКт) Тогда
			Продолжить; // оба счета в НУ не транслируются
		КонецЕсли;

		Проводка = ДанныеНУ.Добавить();
        //начало изменений
		//Если   Не Выборка.СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка() И (Выборка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) ИЛИ Выборка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) ИЛИ Выборка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)) Тогда
		Если Не ЗначениеЗаполнено(СчетДт)  и  Не Выборка.СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка() И (Выборка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) ИЛИ Выборка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) ИЛИ Выборка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)) Тогда
		//конец изменений 	
			СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
		КонецЕсли;
		
		//Если  Не Выборка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка() И (Выборка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) ИЛИ Выборка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) ИЛИ Выборка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)) Тогда
		Если Не ЗначениеЗаполнено(СчетКт) и Не Выборка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка() И (Выборка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) ИЛИ Выборка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) ИЛИ Выборка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)) Тогда
			СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоКт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
		КонецЕсли;

		Если ЗначениеЗаполнено(СчетДт) Тогда

			Проводка.СчетДт       = СчетДт;
			
			Если Проводка.СчетДт.Количественный Тогда
				Проводка.КоличествоДт = Выборка.КоличествоДт;
			КонецЕсли;

			Для каждого Субконто Из Выборка.СубконтоДт Цикл
				Если СчетДт.ВидыСубконто.Найти(Субконто.Ключ, "ВидСубконто") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
            
		КонецЕсли;

		Если ЗначениеЗаполнено(СчетКт) Тогда

			Проводка.СчетКт       = СчетКт;
			
			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = Выборка.КоличествоКт;
			КонецЕсли;

			Для каждого Субконто Из Выборка.СубконтоКт Цикл
				Если СчетКт.ВидыСубконто.Найти(Субконто.Ключ, "ВидСубконто") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;

			Для Индекс = 1 По СчетКт.ВидыСубконто.Количество() Цикл
				Если Проводка.СубконтоКт[СчетКт.ВидыСубконто[Индекс-1].ВидСубконто] = Неопределено Тогда
					Проводка.СубконтоКт[СчетКт.ВидыСубконто[Индекс-1].ВидСубконто] = Новый(СчетКт.ВидыСубконто[Индекс-1].ВидСубконто.ТипЗначения.Типы()[0]);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;


		Проводка.НомерЖурнала = Выборка.НомерЖурнала;
		Проводка.Организация  = Выборка.Организация;
		Проводка.Содержание   = Выборка.Содержание;
		Проводка.Сумма        = Выборка.Сумма;
		Проводка.Активность   = Выборка.Активность;

		/// Кунов О.В., 20.01.2015 - 35253
		ВидУчетаПоПБУ18(Проводка, , ПоддержкаПБУ18);
		///

		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			Если Субконто.Ключ.ТипЗначения.Типы().Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			Если Субконто.Ключ.ТипЗначения.Типы().Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Проводка.ВидУчетаДт) ИЛИ НЕ ЗначениеЗаполнено(Проводка.ВидУчетаКт)  Тогда
			
			ВидУчетаДт = Проводка.ВидУчетаДт;
			ВидУчетаКт = Проводка.ВидУчетаКт;
			
			ВидУчетаПоПБУ18(Проводка, , ПоддержкаПБУ18);
			
			Если (ЗначениеЗаполнено(ВидУчетаДт)) И
				(ЗначениеЗаполнено(Проводка.СчетДт)) Тогда
				Проводка.ВидУчетаДт = ВидУчетаДт;
			КонецЕсли;		
			
			Если (ЗначениеЗаполнено(ВидУчетаКт)) И
				(ЗначениеЗаполнено(Проводка.СчетКт))  Тогда
				Проводка.ВидУчетаКт = ВидУчетаКт;
			КонецЕсли;
		КонецЕсли;
		
		ФлагОпределитьНеПринимаемыеДоходыРасходы = ОпределитьНеПринимаемыеДоходыРасходы(Проводка);
		
		Если Не Проводка.СчетКт = ПланыСчетов.Налоговый.ПустаяСсылка() 
			  И Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ПрочиеДоходы) Тогда
			ФлагОтразитьНеПринимаемыеДоходы = ФлагОпределитьНеПринимаемыеДоходыРасходы;
		Иначе
			ФлагОтразитьНеПринимаемыеДоходы = Ложь;
		КонецЕсли;

		Если Не ФлагОтразитьНеПринимаемыеДоходы И ФлагОпределитьНеПринимаемыеДоходыРасходы Тогда 
			Если ПоддержкаПБУ18 Тогда
				ПроводкаПоНеПринимаемымРасходам = ДанныеНУ.Добавить();
				ПроводкаПоНеПринимаемымРасходам.Организация = Проводка.Организация;
				ПроводкаПоНеПринимаемымРасходам.Период      = Проводка.Период;
				ПроводкаПоНеПринимаемымРасходам.Содержание  = Проводка.Содержание;
				ПроводкаПоНеПринимаемымРасходам.Сумма       = Проводка.Сумма;
			Иначе
				ПроводкаПоНеПринимаемымРасходам = Проводка;
			КонецЕсли;
			
				Если Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходы Или Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ВнереализационныеРасходы) Тогда
					СчетУчетаНепринимаемыхРасходов     =   ПланыСчетов.Налоговый.ВнереализационныеРасходыНеУчитываемые;
				ИначеЕсли Проводка.СчетДт = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда Или Проводка.СчетКт = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда Тогда				
					СчетУчетаНепринимаемыхРасходов     =  ПланыСчетов.Налоговый.ВыплатыВпользуФизЛицПоП_1_48;
				Иначе
					СчетУчетаНепринимаемыхРасходов     =  ПланыСчетов.Налоговый.ДругиеВыплатыПоП_1_48;
				КонецЕсли;
				
			ОтразитьНеПринимаемыеРасходы(ПроводкаПоНеПринимаемымРасходам, СчетУчетаНепринимаемыхРасходов);
		КонецЕсли;
		
		Если ФлагОтразитьНеПринимаемыеДоходы Тогда 
			Если ПоддержкаПБУ18 Тогда
				ПроводкаПоНеПринимаемымРасходам = ДанныеНУ.Добавить();
				ПроводкаПоНеПринимаемымРасходам.Организация = Проводка.Организация;
				ПроводкаПоНеПринимаемымРасходам.Период      = Проводка.Период;
				ПроводкаПоНеПринимаемымРасходам.Содержание  = Проводка.Содержание;
				ПроводкаПоНеПринимаемымРасходам.Сумма       = Проводка.Сумма;
			Иначе
				ПроводкаПоНеПринимаемымРасходам = Проводка;
			КонецЕсли;
			
			ОтразитьНеПринимаемыеДоходы(ПроводкаПоНеПринимаемымРасходам);
		КонецЕсли;

		Если Не ПоддержкаПБУ18 И ((Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР Или 
			                        Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР Или 
									Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР Или 
									Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР)) Тогда
			Сообщить("Для организации " + Проводка.Организация + " не применяется ПБУ 18/02, проведение по виду учета ""ПР"" и ""ВР"" некорректно");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеНалоговогоУчетаПоБухгалтерскомуУчету
 
// Готовит временную таблицу ВыручкаНУ с данными о выручке по налоговому учету.
// Применяется при Расширенной аналитике. 
// Данные выбираются из регистра УчетПродажИСебестоимости.
//
// Параметры:
//  МенеджерВременныхТаблиц - в него будет помещена таблица ВыручкаНУ
//  Организация   - организация для отбора
//  НачалоПериода,
//  КонецПериода  - даты, определяют период, за который будут получены данные о выручке
//  ОтборСчетов   - массив счетов налогового учета, по которым будет дополнительно отобрана выручка,
//                  или Неопределено, если отбор не нужен
//  ДляФормированияПроводок - Булево - для формирования проводок не нужны данные документа КорректировкаРеализации,
//					т.к. проводки по выручке формируются самим первичным документом
//
Процедура СформироватьВременнуюТаблицуВыручкаНУ(
			МенеджерВременныхТаблиц, Организация, НачалоПериода, КонецПериода,
			ОтборСчетов = Неопределено, ДляФормированияПроводок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АналитикаВидаУчета.Ссылка
	|ПОМЕСТИТЬ ОтборПоАналитикеВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|ГДЕ
	|	АналитикаВидаУчета.Организация = &Организация
	|	И АналитикаВидаУчета.СчетУчетаНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасходыПоДеятельностиЕНВД)
	|	И (&НетОтбораСчетов
	|		ИЛИ АналитикаВидаУчета.СчетУчетаНУ В (&ОтборСчетов))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаУчетаПрочихЗатрат.Ссылка
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПрочихЗатрат КАК АналитикаУчетаПрочихЗатрат
	|ГДЕ
	|	АналитикаУчетаПрочихЗатрат.Организация = &Организация
	|	И АналитикаУчетаПрочихЗатрат.СчетУчетаНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасходыПоДеятельностиЕНВД)
	|	И (&НетОтбораСчетов
	|		ИЛИ АналитикаУчетаПрочихЗатрат.СчетУчетаНУ В (&ОтборСчетов))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетПродажИСебестоимостиОбороты.АналитикаВидаУчета 			КАК АналитикаВидаУчета,
	|	УчетПродажИСебестоимостиОбороты.АналитикаУчетаПартий 		КАК АналитикаУчетаПартий,
	|	УчетПродажИСебестоимостиОбороты.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	СУММА(УчетПродажИСебестоимостиОбороты.КоличествоОборот) 	КАК Количество,
	|	СУММА(УчетПродажИСебестоимостиОбороты.СтоимостьОборот
	|			- УчетПродажИСебестоимостиОбороты.НДСОборот) 		КАК Сумма,
	|	СУММА(УчетПродажИСебестоимостиОбороты.КорректировкаОборот) 	КАК Корректировка
	|
	|ПОМЕСТИТЬ УчетПродажИСебестоимостиОбороты
	|ИЗ
	|	РегистрНакопления.УчетПродажИСебестоимости.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|//ДляФормированияПроводок Регистратор
	|			, АналитикаВидаУчета В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитикеВидаУчета.Ссылка
	|				ИЗ
	|					ОтборПоАналитикеВидаУчета КАК ОтборПоАналитикеВидаУчета)
	|	) КАК УчетПродажИСебестоимостиОбороты
	|
	|//ДляФормированияПроводок ГДЕ
	|//ДляФормированияПроводок 	НЕ (УчетПродажИСебестоимостиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|//ДляФормированияПроводок 	 	ИЛИ УчетПродажИСебестоимостиОбороты.Регистратор ССЫЛКА Документ.ОтчетКомитентуОПродажах)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетПродажИСебестоимостиОбороты.АналитикаВидаУчета,
	|	УчетПродажИСебестоимостиОбороты.АналитикаУчетаПартий,
	|	УчетПродажИСебестоимостиОбороты.АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаПартий.Комиссионер 				 КАК Контрагент,
	|	РегистрАналитикаУчетаПартий.ДоговорКомиссионера 		 КАК ДоговорКонтрагента,
	|	РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РегистрАналитикаРаспределенияЗатрат.Продукция 			 КАК Номенклатура,
	|	РегистрАналитикаУчетаПрочихЗатрат.СубконтоНУ1 			 КАК СтатьяПрочихДоходовИРасходов,
	|
	|	ЕСТЬNULL(РегистрАналитикаВидаУчета.СчетУчетаНУ, РегистрАналитикаУчетаПрочихЗатрат.СчетУчетаНУ) 		КАК СчетУчетаНУ,
	|	ЕСТЬNULL(РегистрАналитикаУчетаПартий.ДоговорКомиссионера.РасчетыВУсловныхЕдиницах, ЛОЖЬ) 			КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА &ОценкаДоходовРасходовПоКурсуАвансов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(РегистрАналитикаУчетаПартий.ДоговорКомиссионера.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|	КОНЕЦ 																								КАК КорректировкуВключатьВДоходы,
	|
	|	СУММА(УчетПродажИСебестоимостиОбороты.Количество) 		 КАК Количество,
	|	СУММА(УчетПродажИСебестоимостиОбороты.Сумма) 			 КАК Сумма,
	|	СУММА(УчетПродажИСебестоимостиОбороты.Корректировка) 	 КАК Корректировка
	|
	|ПОМЕСТИТЬ ВыручкаНУ
	|ИЗ
	|	УчетПродажИСебестоимостиОбороты КАК УчетПродажИСебестоимостиОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|		ПО УчетПродажИСебестоимостиОбороты.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПрочихЗатрат КАК РегистрАналитикаУчетаПрочихЗатрат
	|		ПО УчетПродажИСебестоимостиОбороты.АналитикаВидаУчета = РегистрАналитикаУчетаПрочихЗатрат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|		ПО УчетПродажИСебестоимостиОбороты.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|		ПО УчетПродажИСебестоимостиОбороты.АналитикаУчетаНоменклатуры = РегистрАналитикаРаспределенияЗатрат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрАналитикаУчетаПартий.Комиссионер,
	|	РегистрАналитикаУчетаПартий.ДоговорКомиссионера,
	|	РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	РегистрАналитикаРаспределенияЗатрат.Продукция,
	|	РегистрАналитикаУчетаПрочихЗатрат.СубконтоНУ1,
	|	ЕСТЬNULL(РегистрАналитикаВидаУчета.СчетУчетаНУ, РегистрАналитикаУчетаПрочихЗатрат.СчетУчетаНУ),
	|	ЕСТЬNULL(РегистрАналитикаУчетаПартий.ДоговорКомиссионера.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА &ОценкаДоходовРасходовПоКурсуАвансов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(РегистрАналитикаУчетаПартий.ДоговорКомиссионера.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УчетПродажИСебестоимостиОбороты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборПоАналитикеВидаУчета";
	
	Если ДляФормированияПроводок Тогда
		// "Включим" в запросе отбор по регистратору
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляФормированияПроводок", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация",                         Организация);
	Запрос.УстановитьПараметр("НачалоПериода",                       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                        КонецПериода);
	Запрос.УстановитьПараметр("НетОтбораСчетов",                     ОтборСчетов = Неопределено);
	Запрос.УстановитьПараметр("ОтборСчетов",                         ОтборСчетов);
	Запрос.УстановитьПараметр("ОценкаДоходовРасходовПоКурсуАвансов", БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьОценкуДоходовРасходовПоКурсуАвансов(НачалоПериода));
	
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьВременнуюТаблицуВыручкаНУ()

// Возвращает значение нормы, соответствующее проценту от выручки
//
Функция ОпределитьНормуРасходовПоВыручке(СтруктураШапкиДокумента, Процент) Экспорт
	
	// Формируем массив счетов учета выручки
	СписокВидовДоходов = Новый Массив;
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОбъектовСтроительства);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг);
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	// Формируем запрос по счетам учета выручки
	ЗапросПоВыручке = Новый Запрос;
	ЗапросПоВыручке.УстановитьПараметр("НачалоМесяца", мНачГода);
	ЗапросПоВыручке.УстановитьПараметр("КонецМесяца",  мКонГраница);
	ЗапросПоВыручке.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	ЗапросПоВыручке.УстановитьПараметр("Выручка90", ПланыСчетов.Налоговый.Выручка);
	ЗапросПоВыручке.УстановитьПараметр("Выручка91", ПланыСчетов.Налоговый.ПрочиеДоходы);
	ЗапросПоВыручке.УстановитьПараметр("ПрочиеДоходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ЗапросПоВыручке.УстановитьПараметр("СписокВидовДоходов", СписокВидовДоходов);
	
	ЗапросПоВыручке.Текст = "ВЫБРАТЬ
	                        |	НалоговыйОбороты.СуммаОборотКт КАК ОборотКт
	                        |ИЗ
	                        |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&Выручка90), , Организация = &Организация И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ), , ) КАК НалоговыйОбороты
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	НалоговыйОбороты.СуммаОборотКт
	                        |ИЗ
	                        |	РегистрБухгалтерии.Налоговый.Обороты(
	                        |			&НачалоМесяца,
	                        |			&КонецМесяца,
	                        |			,
	                        |			Счет В ИЕРАРХИИ (&Выручка91),
	                        |			&ПрочиеДоходы,
	                        |			Организация = &Организация
	                        |				И Субконто1.ВидПрочихДоходовИРасходов В (&СписокВидовДоходов)
	                        |				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)
	                        |			,
	                        |			) КАК НалоговыйОбороты";
	ВыборкаВыручки = ЗапросПоВыручке.Выполнить().Выбрать();
	
	// Собираем выручку
	ВыручкаНУ = 0;
	Пока ВыборкаВыручки.Следующий() Цикл
		ВыручкаНУ = ВыручкаНУ + ?(ВыборкаВыручки.ОборотКт = Null, 0, ВыборкаВыручки.ОборотКт);
	КонецЦикла;
	
	// Определяем норму
	Возврат Окр((ВыручкаНУ * Процент / 100), 2, 1);
	
КонецФункции // ОпределитьНормуРасходовПоВыручке()
