
Функция СравнитьТаблицыНаборовЗаписей(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим поля
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	// сформируем строку индекса для оптимизации поиска по таблице значений
	СтрокаИндекса = "";
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если СтрокаИндекса = "" Тогда
			СтрокаИндекса = Колонка.Имя;
		Иначе
			СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	// добавим индекс
	ТаблицаЗначений2.Индексы.Добавить(СтрокаИндекса);
	
	// Проверим записи
	Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	// сформируем строку индекса для оптимизации поиска по таблице значений
	СтрокаИндекса = "";
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если СтрокаИндекса = "" Тогда
			СтрокаИндекса = Колонка.Имя;
		Иначе
			СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	// добавим индекс
	ТаблицаЗначений1.Индексы.Добавить(СтрокаИндекса);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СравнитьТаблицыЗначений()


Функция ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей)
	
	СтруктураОтбора = Новый Структура;
	
	Для каждого ЭлементОтбора Из ПраваДоступаПользователей.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			СтруктураОтбора.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА НАСТРОЙКИ ПРАВ ДОСТУПА


// Возвращает вид объекта доступа
//
Функция ПолучитьВидОбъектаДоступа(ОбъектДоступа) Экспорт

	Если ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ФизическиеЛица
	ИначеЕсли      ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Контрагенты
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Организации;	
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ГруппыДоступаКонтрагентов") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Контрагенты;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Проекты") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Проекты;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Склады") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Склады;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ГруппыДоступаФизическихЛиц") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ФизическиеЛица;		
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ВнешниеОбработки;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Подразделения") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Подразделения;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ПодразделенияОрганизаций;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ТипыЗаписейЗаметок") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Заметки;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ГруппыЗаявокКандидатов") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ЗаявкиКандидатов;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Номенклатура;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.НазначенияИспользованияСпецификаций") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Спецификации;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ЦеныНоменклатуры;
	Иначе
		Возврат Перечисления.ВидыОбъектовДоступа.ПустаяСсылка();
	КонецЕсли; 

КонецФункции

// Возвращает тип объекта по виду объекта доступа
//
Функция ПолучитьТипВидаОбъектаДоступа(ВидОбъектаДоступа)
	
	Если ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.ФизическиеЛица Тогда
		Возврат Тип("СправочникСсылка.ФизическиеЛица");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Контрагенты Тогда
		Возврат Тип("СправочникСсылка.Контрагенты");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Организации Тогда
		Возврат Тип("СправочникСсылка.Организации");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Проекты Тогда
		Возврат Тип("СправочникСсылка.Проекты");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Склады Тогда
		Возврат Тип("СправочникСсылка.Склады");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.ВнешниеОбработки Тогда
		Возврат Тип("СправочникСсылка.ВнешниеОбработки");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Подразделения Тогда
		Возврат Тип("СправочникСсылка.Подразделения");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.ПодразделенияОрганизаций Тогда
		Возврат Тип("СправочникСсылка.ПодразделенияОрганизаций");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Заметки Тогда
		Возврат Тип("СправочникСсылка.ТипыЗаписейЗаметок");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.ЗаявкиКандидатов Тогда
		Возврат Тип("СправочникСсылка.ГруппыЗаявокКандидатов");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Номенклатура Тогда
		Возврат Тип("СправочникСсылка.Номенклатура");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Спецификации Тогда
		Возврат Тип("СправочникСсылка.НазначенияИспользованияСпецификаций");
		
	ИначеЕсли ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.ЦеныНоменклатуры Тогда
		Возврат Тип("СправочникСсылка.ТипыЦенНоменклатуры");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

// Проверка доступности права администрирования
// это или полные права или право администрирования
// Применяется для проверки прав на доступ к соотв. данным
// Возвращаемое значение:
//	булево - истина если есть доступ
Функция ДоступноПравоАдминистрирования() Экспорт
	
	Возврат РольДоступна("ПравоАдминистрирования")
			или РольДоступна("ПолныеПрава");
	
КонецФункции // ДоступнаРольМенеджераПоНабору

// Проверка необходимости наследуемые права только группами справочника
Функция ЗаполнениеДочернихТолькоГруппами(ВидОбъектаДоступа) Экспорт
	Если ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.Номенклатура Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ НАСЛЕДСТВЕННОСТЬ ПРАВ ДОСТУПА ПОЛЬЗОВАТЕЛЕЙ К ОБЪЕКТАМ 

Функция ПолучитьМассивРодительскихЭлементов(Ссылка, МассивРодительскихЭлементов = Неопределено) Экспорт
	
	ИмяРеквизитаРодителя = ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка);
	Если МассивРодительскихЭлементов = Неопределено Тогда
		МассивРодительскихЭлементов = Новый Массив;
	КонецЕсли;
	
	Если Не ИмяРеквизитаРодителя = "Родитель" или Ссылка.Метаданные().Иерархический Тогда
		ТекущийРодитель = Ссылка[ИмяРеквизитаРодителя];
		Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
			МассивРодительскихЭлементов.Добавить(ТекущийРодитель);
			ТекущийРодитель = ТекущийРодитель[ИмяРеквизитаРодителя];
		КонецЦикла; 
	КонецЕсли;
	
	Возврат МассивРодительскихЭлементов;
	
КонецФункции

Функция ПолучитьМассивДочернихЭлементов(Родитель, МассивЭлементов = Неопределено, ТолькоГруппы = Ложь) Экспорт
	
	Если МассивЭлементов = Неопределено Тогда
		МассивЭлементов = Новый Массив;
	КонецЕсли;
	
	ИмяРеквизитаРодителя = ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Родитель);
	
	МетаданныеРодителя = Родитель.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + МетаданныеРодителя.Имя + " КАК _Таблица";
	
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		Если ИмяРеквизитаРодителя = "Родитель" Тогда
			Если Не МетаданныеРодителя.Иерархический или МетаданныеРодителя.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов и Не Родитель.ЭтоГруппа Тогда
				Возврат МассивЭлементов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	_Таблица.Ссылка В ИЕРАРХИИ(&Родитель)
			|	И _Таблица.Ссылка <> &Родитель";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	_Таблица.Ссылка." + ИмяРеквизитаРодителя + " = &Родитель";
		КонецЕсли;
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	
	Если ТолькоГруппы Тогда
		Если ЗначениеЗаполнено(Родитель) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И _Таблица.Ссылка.ЭтоГруппа";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	_Таблица.Ссылка.ЭтоГруппа";
		КонецЕсли;	
	КонецЕсли;	
	
	
	ДобавлятьРекурсивно = Не ИмяРеквизитаРодителя = "Родитель" и ЗначениеЗаполнено(Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивЭлементов.Добавить(Выборка.Ссылка);
		
		Если ДобавлятьРекурсивно Тогда
			ПолучитьМассивДочернихЭлементов(Выборка.Ссылка, МассивЭлементов, ТолькоГруппы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЭлементов;
	
КонецФункции // () 

Процедура ДополнитьНаборПравДоступаУнаследованнымиЗаписями(ПраваДоступаПользователей, ОбъектДоступа, Родитель) Экспорт
	
	ОбъектДоступаМетаданные = ОбъектДоступа.Метаданные();
	
	// Добавим записи, унаследованные от родителей
	Родители = Новый Массив;
	ТекущийРодитель = Родитель;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
		Родители.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	Родители.Добавить(ТекущийРодитель);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК ПраваДоступаПользователей
	|ГДЕ
	|	ПраваДоступаПользователей.ОбъектДоступа В(&Родители)
	|	И ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников = &РаспространитьНаПодчиненных";
		
	Если ПраваДоступаПользователей.Отбор.ОбластьДанных.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных";
		Запрос.УстановитьПараметр("ОбластьДанных", ПраваДоступаПользователей.Отбор.ОбластьДанных.Значение);
	КонецЕсли;

	Если ПраваДоступаПользователей.Отбор.Пользователь.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПраваДоступаПользователей.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", ПраваДоступаПользователей.Отбор.Пользователь.Значение);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Родители", Родители);
	Запрос.УстановитьПараметр("РаспространитьНаПодчиненных", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = ПраваДоступаПользователей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка,,"ОбъектДоступа, ВидНаследованияПравДоступаИерархическихСправочников");
		Запись.ОбъектДоступа = ОбъектДоступа;
		Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
	КонецЦикла;
	
КонецПроцедуры // () 

Функция ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка) Экспорт
	
	Если ТипЗНЧ(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат "ГоловнаяОрганизация"
	Иначе
		Возврат "Родитель"
	КонецЕсли;
	
КонецФункции // () 

Процедура ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав) Экспорт
	
	ИсходнаяТаблица = ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(НаборПрав);
	
	СоответствиеМассивовДочернихЭлементов     = Новый Соответствие;
	СоответствиеМассивовРодительскихЭлементов = Новый Соответствие;
	
	Для каждого СтрокаНабора Из ИсходнаяТаблица Цикл
		
		Если СтрокаНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных Тогда
			
			//Дополним набор записями для дочерних элементов
			МассивЭлементов = СоответствиеМассивовДочернихЭлементов[СтрокаНабора.ОбъектДоступа];
			Если МассивЭлементов = Неопределено Тогда
				МассивЭлементов = ПолучитьМассивДочернихЭлементов(СтрокаНабора.ОбъектДоступа, ,ЗаполнениеДочернихТолькоГруппами(ПолучитьВидОбъектаДоступа(СтрокаНабора.ОбъектДоступа)));
				СоответствиеМассивовДочернихЭлементов.Вставить(СтрокаНабора.ОбъектДоступа, МассивЭлементов);
			КонецЕсли;
			
			Для каждого Ссылка Из МассивЭлементов Цикл
				Запись = НаборПрав.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаНабора,,"ОбъектДоступа, ВидНаследованияПравДоступаИерархическихСправочников");
				Запись.ОбъектДоступа = Ссылка;
				Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ()

Процедура ДополнитьНаборПравДоступаГруппамиПользователей(НаборПрав) Экспорт
	
	РезультатЗапросаВсеГруппы = ПолучитьРезультатЗапросаКоВсемГруппамПользователей();
	Если РезультатЗапросаВсеГруппы.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаВсеГруппы = РезультатЗапросаВсеГруппы.Выбрать();
	ИсходноеКолвоЗаписейВНаборе = НаборПрав.Количество();
	
	Для индекс = 0 по ИсходноеКолвоЗаписейВНаборе - 1 Цикл		
		СтрокаНабора = НаборПрав[индекс];
		Если Не ЗначениеЗаполнено(СтрокаНабора.Пользователь) Тогда //И ЗначениеЗаполнено(СтрокаНабора.ОбъектДоступа) Тогда
			ВыборкаВсеГруппы.Сбросить();
			Пока ВыборкаВсеГруппы.Следующий() Цикл
				Запись = НаборПрав.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаНабора,,"Пользователь");
				Запись.Пользователь = ВыборкаВсеГруппы.Ссылка;
				Запись.НаследованаОтВсеПользователи = Истина;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаКоВсемГруппамПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователей.Ссылка
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ПраваДоступаПользователей) Экспорт
	
	ТаблицаПравДоступа = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей().Выгрузить();
	
	Для каждого СтрокаТаблицыНабора Из ПраваДоступаПользователей Цикл
		
		Если (СтрокаТаблицыНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава 
			 ИЛИ СтрокаТаблицыНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных)
			 И НЕ СтрокаТаблицыНабора.НаследованаОтВсеПользователи Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПравДоступа.Добавить(), СтрокаТаблицыНабора);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПравДоступа;
	
КонецФункции

Процедура ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель, СсылкаНового = Неопределено) Экспорт

	Если ЭтотОбъект.ЭтоНовый() Тогда
		
		СсылкаНового = ЭтотОбъект.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(СсылкаНового) Тогда
			СсылкаНового = Справочники[ЭтотОбъект.Метаданные().Имя].ПолучитьСсылку();
		КонецЕсли;
		
		ПолныеПрава.ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ);

		Если НЕ Отказ И НЕ ЗначениеЗаполнено(ЭтотОбъект.ПолучитьСсылкуНового()) Тогда
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка) Экспорт

	// Снимем все отборы
	Для каждого Отбор Из ПраваДоступаПользователей.Отбор Цикл
		Отбор.Использование = Ложь;
	КонецЦикла;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ПраваДоступаПользователей.Отбор.Пользователь.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.Пользователь.Использование = Истина;
	Иначе
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Истина;
		
		ПраваДоступаПользователей.Отбор.НаследованаОтВсеПользователи.Значение = Ложь;
		ПраваДоступаПользователей.Отбор.НаследованаОтВсеПользователи.Использование = Истина;
		
	КонецЕсли;
	
	ПраваДоступаПользователей.Прочитать();
	
КонецПроцедуры

Процедура ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ) Экспорт
	
	//В объекте не был изменен родитель. Обновлять права доступа нет необходимости
	Если ПрошлыйИзмененныйРодительОбъектаДоступа = Неопределено Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновляемыеОбъекты = Новый Массив;
	ОбновляемыеОбъекты.Добавить(Ссылка);
	
	ПолучитьМассивРодительскихЭлементов(Ссылка, ОбновляемыеОбъекты);
	
	Если ЗначениеЗаполнено(ПрошлыйИзмененныйРодительОбъектаДоступа) Тогда
		ПолныеПрава.ОбновитьПраваДоступаКПрошлымРодителям(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ШапкаОшибки = "Права " + Ссылка + " не записан!";
		
	ОбновляемыеОбъекты = ПолныеПрава.ПолучитьСписокОбновляемыхОбъектовПриПереносеВГруппу(Ссылка, ОбновляемыеОбъекты);
	
	Для каждого ОбновляемыйОбъект Из ОбновляемыеОбъекты Цикл
		
		Отказ = Не ПолныеПрава.ОбновитьПраваДоступаПользователейПоВладельцуДоступа(ОбновляемыйОбъект, ?(ОбновляемыйОбъект = Ссылка ИЛИ ОбновляемыйОбъект.ПринадлежитЭлементу(Ссылка), Неопределено, Ссылка));		
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки()+Символы.ПС+ " .Не записаны права доступа к объекту: " + Ссылка);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости 

Процедура ЗаписатьПраваДоступаПользователейКОбъекту(ПраваДоступаПользователей, Ссылка, Отказ, ПрошлыйИзмененныйРодительОбъектаДоступа = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоПользователю = ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей");
		
	Если ОтборПоПользователю Тогда
		ПраваДоступаПользователей.Отбор.Пользователь.Установить(Ссылка);
	Иначе
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Установить(Ссылка);
	КонецЕсли;
	
	ТаблицаПравДоступа = ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ПраваДоступаПользователей);
	
	Для каждого СтрокаТаблицы Из ТаблицаПравДоступа Цикл
		Если ОтборПоПользователю Тогда
			СтрокаТаблицы.Пользователь  = Ссылка;
		Иначе
			СтрокаТаблицы.ОбъектДоступа = Ссылка;
		КонецЕсли;
		СтрокаТаблицы.ВладелецПравДоступа = СтрокаТаблицы.ОбъектДоступа;
	КонецЦикла;
	
	СтруктураОтбора = ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей);
	
	ПолныеПрава.ЗаписатьПраваДоступаПользователей(ТаблицаПравДоступа,СтруктураОтбора, Отказ, "Не записаны права доступа к объекту """+ Ссылка + """!");
	
	Если НЕ Отказ Тогда
		ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ СОБЫТИЯ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМ

#Если Клиент Тогда

Процедура РедактироватьПраваДоступа(Ссылка = Неопределено) Экспорт
	
	ТипЗначенияВыбора = ТипЗнч(Ссылка);
	
	НастройкаДляГруппПользователей = (Ссылка = Неопределено ИЛИ (ТипЗначенияВыбора = Тип("СправочникСсылка.ГруппыПользователей")));
	
	ОбработкаНастройкаПравДоступа = Обработки.НастройкаПравДоступа;
	
	Если НастройкаДляГруппПользователей Тогда
		// Настройка для групп пользователей выполняется в одной форме
		ФормаРедактирования = ОбработкаНастройкаПравДоступа.ПолучитьФорму(,, "НастройкаПравДоступа");
	Иначе
		// Для остальных настройка выполняется в отдельной форме
		ФормаРедактирования = ОбработкаНастройкаПравДоступа.ПолучитьФорму(, , Ссылка);
	КонецЕсли; 
	ФормаРедактирования.НачальноеЗначениеВыбора = Ссылка;
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

Процедура СформироватьВариантОтчетаПоСистемеПрав(ИмяВариантаОтчета) Экспорт
	
	ОтчетОбъект = Отчеты.ОтчетПоСистемеПрав.Создать();
	ФормаОтчета = ОтчетОбъект.ПолучитьФорму();
	
	ФормаОтчета.Открыть();
	
	ФормаОтчета.СохраненнаяНастройка = Справочники.СохраненныеНастройки[ИмяВариантаОтчета];
	ФормаОтчета.ПрименитьНастройку();
	Если Не ФормаОтчета.РежимРедактированияНастройки Тогда
		ТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);
		ТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки,  ФормаОтчета.РежимРедактированияНастройки);
	КонецЕсли;
	
	ФормаОтчета.Модифицированность = Ложь;
	
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры // СформироватьВариантТиповогоОтчета

#КонецЕсли

Функция ПолучитьСписокВидовНаследованияПравДоступа(ОбъектДоступа) Экспорт
	
	СписокПеречисления = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДоступа) или ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Организации") Тогда
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	Иначе
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектДоступа)) Тогда
			МетаданныеОбъекта = ОбъектДоступа.Метаданные();
			Если МетаданныеОбъекта.Иерархический Тогда
				Если МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Если ОбъектДоступа.ЭтоГруппа Тогда
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
					Иначе
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					КонецЕсли;
				Иначе
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
				КонецЕсли;
			Иначе
				СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
			КонецЕсли;
		Иначе
			СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокПеречисления;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ  - ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ МЕХАНИЗМА ДАТЫ ЗАПРЕТА РЕДАКТИРОВАНИЯ

// Процедура выполняет проверку возможности записи документов
// с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПроверкаПериодаДокумента(ДокументОбъект, Отказ, РежимЗаписи)
	
	//начало изменений МСФО
	//СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	Если ПРГ_ДопФункцииКлиентСервер.ЭтоДокМСФО(ДокументОбъект) Тогда
		ПРГСоотвествие= ПараметрыСеанса.ПРГ_ГраницыЗапретаИзмененияДанныхМСФО;
		СоответствиеГраницЗапрета =  ?(ПРГСоотвествие.Количество()=0, Неопределено, ПРГСоотвествие);
	Иначе
		СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	КонецЕсли;	
	//конец изменений 
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыПроверкиДокумента = ПолучитьПараметрыПроверкиДокумента(ДокументОбъект);
	
	Если Не ДокументОбъект.ЭтоНовый() Тогда
		СтараяВерсияДокумента = ПолучитьВерсиюДокументаПередИзменением(ДокументОбъект, ПараметрыПроверкиДокумента);
    	ПроверитьВерсиюДокумента(СтараяВерсияДокумента, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ);
	КонецЕсли;
			
	Если Не Отказ Тогда
		ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ, РежимЗаписи);
	КонецЕсли; 
    
КонецПроцедуры // ПроверкаПериодаДокумента

// Функция возвращает "эффективную" дату документа, которая будет сравниваться с установленной датой запрета
Функция ПолучитьДатуДляПроверкиДокумента(ДокументОбъект, ПараметрыПроверкиДокумента) Экспорт
	
	// Определение даты для "особых" случаев.
	ДатаДляПроверки = НастройкаПравДоступаПереопределяемый.ПолучитьДатуПроверкиПоТипуДокумента(ДокументОбъект, ПараметрыПроверкиДокумента);
	
	Если ЗначениеЗаполнено(ДатаДляПроверки) Тогда
		Возврат ДатаДляПроверки;
	КонецЕсли;
	
	// Значение даты не определено. Рассчитывается для общему алгоритму.
	Если ПараметрыПроверкиДокумента.Свойство("ИмяПоляПериодаРегистрации") Тогда
		Возврат Мин(ДокументОбъект.Дата, ДокументОбъект[ПараметрыПроверкиДокумента.ИмяПоляПериодаРегистрации]);
	Иначе
		Возврат ДокументОбъект.Дата;
	КонецЕсли;
	
КонецФункции

// Процедура проверки версии документа на нарушение даты запрета
//
Процедура ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ, РежимЗаписи = Неопределено)
	
	Если ПараметрыПроверкиДокумента.ПроверятьПроведениеДокумента Тогда		
		ДокументПроведен = ДокументОбъект.Проведен ИЛИ ?(РежимЗаписи = Неопределено, Ложь, РежимЗаписи = РежимЗаписиДокумента.Проведение);
		Если НЕ ДокументПроведен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	// Не выполняется проверка дат запрета редактирования
	Если НЕ ПараметрыПроверкиДокумента.ПроверятьУправленческуюДатуЗапрета
		И НЕ ПараметрыПроверкиДокумента.ПроверятьРегламентированнуюДатуЗапрета Тогда
		Возврат;
	КонецЕсли;	
	
	ДатаДляПроверки = ПолучитьДатуДляПроверкиДокумента(ДокументОбъект, ПараметрыПроверкиДокумента);
	
	// Проверка даты запрета по организации
	Если ПараметрыПроверкиДокумента.ПроверятьРегламентированнуюДатуЗапрета Тогда	
		ГраницаПериода = СоответствиеГраницЗапрета[ДокументОбъект.Организация];
		
		// Если дата запрета по организации не определена, то используется основная дата запрета для пользователя
		Если НЕ ЗначениеЗаполнено(ГраницаПериода) Тогда
			ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];       
		КонецЕсли;
		
		// Если основная дата запрета для пользователя не определена, то используется общая дата запрета
		Если НЕ ЗначениеЗаполнено(ГраницаПериода) Тогда
			ГраницаПериода = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГраницаПериода)
			И ДатаДляПроверки <= КонецДня(ГраницаПериода)	Тогда
			Отказ = Истина;			
		КонецЕсли;		
	КонецЕсли;		    
	
	// Проверка основной даты запрета
	Если ПараметрыПроверкиДокумента.ПроверятьУправленческуюДатуЗапрета Тогда	
		ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];       
		
		// Если основная дата для пользователя не определена, то используется общая дата запрета
		Если НЕ ЗначениеЗаполнено(ГраницаПериода) Тогда
			ГраницаПериода = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГраницаПериода) Тогда
			Если ДатаДляПроверки <= КонецДня(ГраницаПериода) Тогда
				Отказ = Истина;				
			КонецЕсли;         			
		КонецЕсли;
	КонецЕсли;		    
	
КонецПроцедуры

// Функция возвращает из БД версию документа до его изменения
//
Функция ПолучитьВерсиюДокументаПередИзменением(ДокументОбъект, ПараметрыПроверкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|Дата" 
	+ ?(ПараметрыПроверкиДокумента.ЕстьОрганизация, "," + Символы.ПС + "Организация КАК Организация", "")
	+ ?(ПараметрыПроверкиДокумента.ЕстьУправленческийУчет, "," + Символы.ПС + "ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете", "")
	+ ?(ПараметрыПроверкиДокумента.ЕстьБухгалтерскийУчет, "," + Символы.ПС + "ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете", "")
	+ ?(ПараметрыПроверкиДокумента.Свойство("ИмяПоляПериодаРегистрации"), "," + Символы.ПС + ПараметрыПроверкиДокумента.ИмяПоляПериодаРегистрации + " КАК " + ПараметрыПроверкиДокумента.ИмяПоляПериодаРегистрации, "")
	+ ?(ПараметрыПроверкиДокумента.ПроверятьПроведениеДокумента, "," + Символы.ПС + "Проведен КАК Проведен", "");
	
	ДополнитьТекстЗапросаПоТипуДокумета(Запрос.Текст, ПараметрыПроверкиДокумента);
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ Документ." + ПараметрыПроверкиДокумента.МетаданныеДокумента.Имя + "
	|ГДЕ Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции // ПолучитьВерсиюДокументаПередИзменением()

Процедура ДополнитьТекстЗапросаПоТипуДокумета(ТекстЗапроса, ПараметрыПроверкиДокумента)
	Если ПараметрыПроверкиДокумента.МетаданныеДокумента = Метаданные.Документы.ВводПроцентаДеятельностиЕНВД Тогда
		ДополнитьТекстЗапросаВводПроцентаДеятельностиЕНВД(ТекстЗапроса);
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьТекстЗапросаВводПроцентаДеятельностиЕНВД(ТекстЗапроса)
	ТекстЗапроса = ТекстЗапроса + ",
	|ВводДанныхПоПериодам КАК ВводДанныхПоПериодам,
	|РаботникиОрганизации.(МесяцРегистрации) КАК РаботникиОрганизации";
КонецПроцедуры

Процедура ОпределитьНеобходимостьПроверкиПоПериодуРегистрации(ПараметрыПроверкиДокумента, МетаданныеДокумента)
	
	Если МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		ПараметрыПроверкиДокумента.Вставить("ИмяПоляПериодаРегистрации", "ПериодРегистрации");
		Возврат;
	КонецЕсли;
	
	ИмяПоляПериодРегистрацииДокуметнов = Новый Соответствие;
	ИмяПоляПериодРегистрацииДокуметнов.Вставить(Метаданные.Документы.ВводПроцентаДеятельностиЕНВД,								"Период");
	ИмяПоляПериодРегистрацииДокуметнов.Вставить(Метаданные.Документы.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации,	"Период");
	
	АльтернативноеИмяРеквизита = ИмяПоляПериодРегистрацииДокуметнов[МетаданныеДокумента];
	Если АльтернативноеИмяРеквизита <> Неопределено Тогда
		ПараметрыПроверкиДокумента.Вставить("ИмяПоляПериодаРегистрации", АльтернативноеИмяРеквизита);
	КонецЕсли;		
	
КонецПроцедуры

// Функция возвращает структуру с параметрами проверки документа по умолчанию
//
Функция ПолучитьПараметрыПроверкиДокумента(ДокументОбъект)
	
	ПараметрыПроверкиДокумента = Новый Структура;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ПараметрыПроверкиДокумента.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	
	// если  в документе есть реквизит организация, дата запрета оперделяется с учетом организации
	ПараметрыПроверкиДокумента.Вставить("ЕстьОрганизация", 			(МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено));	
	ПараметрыПроверкиДокумента.Вставить("ЕстьУправленческийУчет",	(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено));
	ПараметрыПроверкиДокумента.Вставить("ЕстьБухгалтерскийУчет", 	(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено));
	ПараметрыПроверкиДокумента.Вставить("ЕстьНалоговыйУчет", 		(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено));

	ОпределитьНеобходимостьПроверкиПоПериодуРегистрации(ПараметрыПроверкиДокумента, МетаданныеДокумента);
	
	// Если для документа проведение запрещено, проверка на дату запрета редактирования
	//проверяется без учета проведенности
	ПараметрыПроверкиДокумента.Вставить("ПроверятьПроведениеДокумента", (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить));
		
	Если ЗаполнитьПараметрыПроверкиПоВидуДокумента(ДокументОбъект, ПараметрыПроверкиДокумента) Тогда
		Возврат ПараметрыПроверкиДокумента;
	КонецЕсли;
	
	
	ПроверятьУправленческуюДатуЗапрета      = (НЕ ПараметрыПроверкиДокумента.ЕстьОрганизация) или (ПараметрыПроверкиДокумента.ЕстьУправленческийУчет и ДокументОбъект["ОтражатьВУправленческомУчете"]);
	
	УстановленФлагБУилиНУ = (ПараметрыПроверкиДокумента.ЕстьБухгалтерскийУчет И ДокументОбъект["ОтражатьВБухгалтерскомУчете"])
						ИЛИ (ПараметрыПроверкиДокумента.ЕстьНалоговыйУчет И ДокументОбъект["ОтражатьВНалоговомУчете"]);
	ОтсутствуютРеквизитыБУиНУ = НЕ (ПараметрыПроверкиДокумента.ЕстьБухгалтерскийУчет ИЛИ ПараметрыПроверкиДокумента.ЕстьНалоговыйУчет);

	ПроверятьРегламентированнуюДатуЗапрета  = ПараметрыПроверкиДокумента.ЕстьОрганизация И (ОтсутствуютРеквизитыБУиНУ ИЛИ УстановленФлагБУилиНУ);
			
	ПараметрыПроверкиДокумента.Вставить("ПроверятьУправленческуюДатуЗапрета", 		ПроверятьУправленческуюДатуЗапрета);
	ПараметрыПроверкиДокумента.Вставить("ПроверятьРегламентированнуюДатуЗапрета", 	ПроверятьРегламентированнуюДатуЗапрета);	
	
	Возврат ПараметрыПроверкиДокумента;
	
КонецФункции // ПолучитьПараметрыПроверкиДокумента()

//Функция возвращает структуру параметров проверки документа для нетиповых случаев
//
Функция ЗаполнитьПараметрыПроверкиПоВидуДокумента(ДокументОбъект, ПараметрыПроверкиДокумента)  Экспорт
		
	//Если ПараметрыПроверкиДокумента.МетаданныеДокумента.Имя = "<ИмяДокумента>" Тогда		
	//	ЗаполнитьПараметрыПроверкиДокумента<ИмяДокумента>(ДокументОбъект, ПараметрыПроверкиДокумента);
	//Иначе
		Возврат Ложь;
	//КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПараметрыПроверкиПоВидуДокумента()

Функция ДокументВЗакрытомПериоде(ДокументОбъект) Экспорт
	
	Результат = Ложь;
	//начало изменений МСФО
	//СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();	
	Если ПРГ_ДопФункцииКлиентСервер.ЭтоДокМСФО(ДокументОбъект) Тогда
		ПРГСоотвествие= ПараметрыСеанса.ПРГ_ГраницыЗапретаИзмененияДанныхМСФО;
		СоответствиеГраницЗапрета =  ?(ПРГСоотвествие.Количество()=0, Неопределено, ПРГСоотвествие);
	Иначе
		СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	КонецЕсли;	
	//конец изменений 
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПроверкиДокумента = ПолучитьПараметрыПроверкиДокумента(ДокументОбъект);
	ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Результат);
	
	Возврат Результат;
	
КонецФункции // ДокументВЗакрытомПериоде()

Функция ПолучитьИмяПоляПериодаДляРегистра(ВидРегистра, РегистрМетаданные)
	
	ПолеПериод = "Период";
	
	Если ВидРегистра = "РегистрРасчета" Тогда
		ПолеПериод = "ПериодРегистрации";		
	ИначеЕсли ВидРегистра = "РегистрСведений" Тогда
		Если РегистрМетаданные.Имя = "ПроцентДеятельностиЕНВДСотрудников" ИЛИ 
			РегистрМетаданные.Имя = "РаспределениеЗаработкаРаботников" Тогда
			ПолеПериод = "ПериодРегистрации";
		КонецЕсли; 
	ИначеЕсли ВидРегистра = "РегистрНакопления" Тогда
		Если РегистрМетаданные.Имя = "НДФЛСведенияОДоходах" Тогда
			ПолеПериод = "ПериодРегистрации";
		КонецЕсли; 
	КонецЕсли;			
	
	Возврат ПолеПериод;
	
КонецФункции

// Процедура выполняет проверку возможности записи регистров сведений, регистров накопления
// регистров бухгалтерии и регистров расчета
// с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПроверкаПериодаЗаписейРегистров(НаборЗаписей, Отказ, ВидРегистра = "РегистрНакопления") Экспорт
	
	//начало изменений МСФО
	//СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	ЭтоМСФО = Ложь;
	Если НаборЗаписей.Отбор.Найти("Регистратор") <> Неопределено Тогда
		Если ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение)
		 и 	(ТипЗнч(НаборЗаписей.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.РасчетСебестоимостиВыпуска")
		 или ТипЗнч(НаборЗаписей.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров")) Тогда
		 ЭтоМСФО = НаборЗаписей.Отбор.Регистратор.Значение.ОтражатьВМеждународномУчете;
		КонецЕсли; 
	КонецЕсли;	
	Если ПРГ_ДопФункцииКлиентСервер.ЭтоРегистрМСФО(НаборЗаписей) или ЭтоМСФО Тогда
		ПРГСоотвествие= ПараметрыСеанса.ПРГ_ГраницыЗапретаИзмененияДанныхМСФО;
		СоответствиеГраницЗапрета =  ?(ПРГСоотвествие.Количество()=0, Неопределено, ПРГСоотвествие);
	Иначе
		СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	КонецЕсли;	
	//конец изменений 
	
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений курсы валют можно править на начало месяца
	МетаданныеНабора = НаборЗаписей.Метаданные();		
	Если МетаданныеНабора.Имя = "КурсыВалют" Тогда
		 ПРГ_ДатаЗапрета = НачалоМесяца(ТекущаяДата())-1;
		 ПРГ_НовоеСоответсвие = Новый Соответствие;
		 Для каждого ПР_Тек  Из СоответствиеГраницЗапрета  Цикл
			ПРГ_НовоеСоответсвие.Вставить(ПР_Тек.Ключ,Мин(ПРГ_ДатаЗапрета,ПР_Тек.Значение));
		КонецЦикла; 
		СоответствиеГраницЗапрета = ПРГ_НовоеСоответсвие;
	КонецЕсли;	
	//конец изменений 
	
	// Проверку существующих записей выполняем только для регистров, подчиненных регистратору.
	// Проверка необходима, так как недопустимо удаление записей прошлого периода (в результате перезаписи набора).
	ПроверятьСуществующиеЗаписиПоРегистратору =
		НРег(ВидРегистра) <> НРег("РегистрСведений")
		ИЛИ МетаданныеНабора.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
		
	Если ПроверятьСуществующиеЗаписиПоРегистратору Тогда
		
		Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
		// Для регламентного документа расчета себестоимости проверять период записей не нужно
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасчетСебестоимостиВыпуска") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьОрганизация = (МетаданныеНабора.Измерения.Найти("Организация") <> Неопределено);
	// В регистре расчета проверяется системное поле ПериодДействия, в остальных регистрах проверяется поле Период
	ПолеПериод 		= ПолучитьИмяПоляПериодаДляРегистра(ВидРегистра, МетаданныеНабора);
	
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("СоответствиеГраницЗапрета", 	СоответствиеГраницЗапрета);
    СтруктураПараметров.Вставить("МетаданныеНабора", 			МетаданныеНабора);
    СтруктураПараметров.Вставить("ЕстьОрганизация", 			ЕстьОрганизация);
    СтруктураПараметров.Вставить("ПолеПериод", 					ПолеПериод);
    
    Если ПроверятьСуществующиеЗаписиПоРегистратору Тогда
        ПроверкаСуществующихЗаписейРегистра(НаборЗаписей, СтруктураПараметров, Отказ);
    Иначе
        ПроверкаСуществующихЗаписейРегистраСведений(НаборЗаписей, СтруктураПараметров, Отказ)
    КонецЕсли;
	
    // Проверка периода текущих записей набора	
	Если НЕ Отказ И НаборЗаписей.Количество() > 0 Тогда				
		
		ГраницаПериодаОсновная 	= СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
		ГраницаПериодаОбщая 	= СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];
		
		Если ЕстьОрганизация Тогда
			
			Для Каждого Запись Из НаборЗаписей Цикл
				
				ГраницаПериода = СоответствиеГраницЗапрета[Запись.Организация];
				
				Если НЕ ЗначениеЗаполнено(ГраницаПериода) Тогда
					Если ЗначениеЗаполнено(ГраницаПериодаОсновная) Тогда
						// Если дата запрета по организации не определена, то используется основная дата запрета для пользователя
						ГраницаПериода = ГраницаПериодаОсновная;
					Иначе
						// Если основная дата запрета для пользователя не определена, то используется общая дата запрета
						ГраницаПериода = ГраницаПериодаОбщая;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ГраницаПериода) И Запись[ПолеПериод] <= ГраницаПериода Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
                
			КонецЦикла;
			
		Иначе
			
			ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
			
            Если НЕ ЗначениеЗаполнено(ГраницаПериода) Тогда
				// Если основная дата запрета для пользователя не определена, то используется общая дата запрета
               ГраницаПериода = ГраницаПериодаОбщая;
            КонецЕсли;
			
			Если ЗначениеЗаполнено(ГраницаПериода) Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись[ПолеПериод] <= ГраницаПериода Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСуществующихЗаписейРегистра(НаборЗаписей, СтруктураПараметров, Отказ)
	Перем ИмяПоляПериода;
	
	ИмяРегистра = СтруктураПараметров.МетаданныеНабора.ПолноеИмя();
	
	СтруктураПараметров.Свойство("ПолеПериод", 	ИмяПоляПериода);
		
	Запрос = Новый Запрос;
	ВложенныйЗапрос = "";
	Если СтруктураПараметров.ЕстьОрганизация Тогда
		Индекс = 1;
		ИмяПоляОрганизации = "Организация";
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ") +"
			|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));
			индекс = индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
        
        Если ГраницаПериода = Неопределено Тогда
            ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];    
        КонецЕсли;    
        
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));			
	КонецЕсли;			
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(" + ИмяПоляПериода + ") КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
	|ГДЕ Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);				
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Отказ = Истина;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСуществующихЗаписейРегистраСведений(НаборЗаписей, СтруктураПараметров, Отказ)
	
    ИмяРегистра = СтруктураПараметров.МетаданныеНабора.ПолноеИмя();
    
    // Формируем текст условия блока ГДЕ основного запроса,
    // в соответствии с установленным отбором для набора записей
    
    Запрос = Новый Запрос;
       
    СписокПолейУсловияОтбораТекст = "";
    Итерация = 0;
    Для каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл                
        Если не ЭлементОтбора.Использование Тогда
            Продолжить;
        КонецЕсли;                
        
        Если НЕ Итерация = 0  Тогда            
            СписокПолейУсловияОтбораТекст = СписокПолейУсловияОтбораТекст  + " И ";
        КонецЕсли;        
        
        СписокПолейУсловияОтбораТекст = СписокПолейУсловияОтбораТекст +" Набор." + ЭлементОтбора.Имя + " = &" + ЭлементОтбора.Имя;                       
        Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);        
        
        Итерация = 1;
    КонецЦикла; 
    
    Если Итерация = 1 Тогда
        СписокПолейУсловияОтбораТекст = " ГДЕ " + СписокПолейУсловияОтбораТекст;    	            
    КонецЕсли;                   
    
    ВложенныйЗапрос = "";
    Если СтруктураПараметров.ЕстьОрганизация Тогда
    	индекс = 1;
    	ИмяПоляОрганизации = "Организация";
    	Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
    		ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
    		|ОБЪЕДИНИТЬ ВСЕ") +"
    		|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
    		Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
    		ГраницаПериода = КлючИЗначение.Значение;
    		Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));
    		индекс = индекс + 1;
    	КонецЦикла;
    Иначе
    	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
    	ИмяПоляОрганизации = "&ПустаяОрганизация";
    	ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
    	Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
    	ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
        Если ГраницаПериода = Неопределено Тогда
            ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];    
        КонецЕсли;    
    	Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));			
    КонецЕсли;			    
    
    
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1 1
    |ИЗ
    |(
    |ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(Период) КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
    | "+ СписокПолейУсловияОтбораТекст + "
    |СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
    |) КАК НаборЗаписей
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |(" + ВложенныйЗапрос + "		
    |) КАК ДатыЗапрета
    |ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
    |ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
    
      
    Если НЕ Запрос.Выполнить().Пустой() Тогда
    	Отказ = Истина;
    Иначе
    	Отказ = Ложь;
    КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ  - ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ МЕХАНИЗМА ДАТЫ ЗАПРЕТА РЕДАКТИРОВАНИЯ

// Проверка возможности записи данных документа с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПередЗаписьюДокументаПроверкаДоступностиПериода(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	// <- Шевченков
	Если ПРГ_Обработки.ПроверкаПроведенияДокументаНаДатуЗапрета(Источник.Метаданные().Имя) Тогда
		Возврат;
	КонецЕсли;
	// ->	
	ПроверкаПериодаДокумента(Источник, Отказ, РежимЗаписи);
	#Если НЕ ВнешнееСоединение Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры	// ПередЗаписьюДокументовПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	// <- Шевченков
	Попытка
		Если ПРГ_Обработки.ПроверкаПроведенияДокументаНаДатуЗапрета(Источник.Отбор.Регистратор.Значение.Метаданные().Имя) Тогда
			Возврат;
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	// ->
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрНакопления");	
	#Если НЕ ВнешнееСоединение Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода

Процедура ПередЗаписьюРегистраБухгалтерииПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрБухгалтерии");	
	#Если НЕ ВнешнееСоединение Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода


// Проверка возможности изменения записей регистров (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраРасчетаПроверкаДоступностиПериода(Источник, Отказ, Замещение, ТолькоЗапись) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	// <- Шевченков
	Попытка
		Если ПРГ_Обработки.ПроверкаПроведенияДокументаНаДатуЗапрета(Источник.Отбор.Регистратор.Значение.Метаданные().Имя) Тогда
			Возврат;
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	// ->
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрРасчета");	
	#Если НЕ ВнешнееСоединение Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраРасчетаПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраСведенийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	// <- Шевченков
	Если ПРГ_Обработки.ПроверкаПроведенияРегистраСведенийНаДатуЗапрета(Источник) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Если ПРГ_Обработки.ПроверкаПроведенияДокументаНаДатуЗапрета(Источник.Отбор.Регистратор.Значение.Метаданные().Имя) Тогда
			Возврат;
		КонецЕсли;
		Сообщить(Источник);		
	Исключение
		
	КонецПопытки;
	// ->
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрСведений");	
	#Если НЕ ВнешнееСоединение Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраСведенийПроверкаДоступностиПериода

Процедура ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ФормаДокумента) Экспорт
	
	// <- Шевченков
	Если ПРГ_Обработки.ПроверкаПроведенияДокументаНаДатуЗапрета(ДокументОбъект.Метаданные().Имя) Тогда
		ФормаДокумента.ТолькоПросмотр = Ложь;
		Возврат;
	КонецЕсли;
	// ->
	
	Если НЕ ФормаДокумента.ТолькоПросмотр Тогда
		ФормаДокумента.ТолькоПросмотр = НастройкаПравДоступа.ДокументВЗакрытомПериоде(ДокументОбъект);
	КонецЕсли;
		
	//++ Spl_Апроф 23.09.2014 (k.russkih@a-prof.ru)
	#Если Клиент Тогда	 
	 	АП_ОбщегоНазначенияКлиент.ПроверкаБлокировкиФормыДокумента(ДокументОбъект, ФормаДокумента);		 
	#КонецЕсли 		
	//-- Spl_Апроф
	
КонецПроцедуры	// ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета

Функция ПолучитьОбъектыДоступаДокумента(ИмяДокумента)
	
	Результат = Новый Соответствие;
	
	Если ИмяДокумента = "АктОбОказанииПроизводственныхУслуг" Тогда
		Результат.Вставить("Проект", Перечисления.ВидыОбъектовДоступа.Проекты);

	ИначеЕсли ИмяДокумента = "АктОтбораПробНоменклатуры" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);

	ИначеЕсли ИмяДокумента = "АнкетаЗастрахованногоЛица" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВводПроцентаДеятельностиЕНВД" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций" Тогда
		Результат.Вставить("Удержания.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВыдачаДенежныхДокументов" Тогда
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводПостоянногоНачисленияИлиУдержания" Тогда
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводПостоянногоНачисленияИлиУдержанияСотрудникамОрганизации" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВозвратНаРаботуОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВозвратПереданныхТоваров" Тогда
		Результат.Вставить("СкладОрдер", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ВозвратТоваровОтПокупателя" Тогда
		Результат.Вставить("СкладОрдер", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ВозвратТоваровПоставщику" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ВозвратТоваровПоставщикуИзНТТ" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ДепонированиеОрганизаций" Тогда
		Результат.Вставить("Работники.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ЗаказПокупателя" Тогда
		Результат.Вставить("СкладГруппа", Перечисления.ВидыОбъектовДоступа.Склады);
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "ЗаказПоставщику" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "ЗакрытиеПланируемыхПоступленийДенежныхСредств" Тогда
		Результат.Вставить("Проект", Перечисления.ВидыОбъектовДоступа.Проекты);

	ИначеЕсли ИмяДокумента = "ЗапросВПФРОЗаработкеСотрудника" Тогда
		Результат.Вставить("Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ЗапросВФССОПроверкеРаботодателя" Тогда
		Результат.Вставить("Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ЗарплатаКВыплате" Тогда
		Результат.Вставить("Зарплата.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ЗарплатаКВыплатеОрганизаций" Тогда
		Результат.Вставить("Зарплата.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ЗаявкаНаОткрытиеСчетов" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ЗаявкаНаЗакрытиеСчетов" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ЗаявкаНаСертификациюНоменклатуры" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);
		
	ИначеЕсли ИмяДокумента = "ЗаявлениеВФССНаДетейИнвалидов" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ЗаявлениеВФССОВозмещенииРасходовНаПогребение" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ЗаявлениеОНаправленииЗапросаВПФР" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ИзменениеУсловийИсполнительногоЛиста" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ИсполнительныйЛист" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "КадровоеПеремещение" Тогда
		Результат.Вставить("Работники.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "КадровоеПеремещениеОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "КомандировкиОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "КорректировкаДолга" Тогда
		Результат.Вставить("КонтрагентКредитор", Перечисления.ВидыОбъектовДоступа.Контрагенты);
		Результат.Вставить("КонтрагентДебитор", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "КорректировкаЗаказаНаПроизводство" Тогда
		Результат.Вставить("Исполнитель", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "КорректировкаЗаказаПокупателя" Тогда
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "КорректировкаЗаказаПоставщику" Тогда
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "НачислениеДивидендовОрганизаций" Тогда
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НачислениеЕдиновременныхПособийЗаСчетФСС" Тогда
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
		Результат.Вставить("ДоговорыНаВыполнениеРабот.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ПогашениеЗаймов.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Удержания.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("НДФЛ.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НачислениеОтпускаРаботникамОрганизаций" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НачислениеПоБольничномуЛисту" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НДФЛВозвратНалога" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НДФЛиЕСНДоходыИНалоги" Тогда
		Результат.Вставить("ЕСНСведенияОДоходах.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("НДФЛСведенияОДоходах.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НДФЛПерерасчет" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НДФЛПодтверждениеПраваНаИмущественныйВычет" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НевыходыВОрганизациях" Тогда
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "НеявкиИБолезниОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОписьПособийПоСтрахованиюОтНесчастныхСлучаевИПрофзаболеваний" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОплатаПоСреднемуЗаработку" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОплатаПраздничныхИВыходныхДнейОрганизаций" Тогда
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОплатаСверхурочныхЧасов" Тогда
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОтпускаОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОтпускПоУходуЗаРебенком" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВРеглУчете" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОтчетКомиссионераОПродажах" Тогда
		Результат.Вставить("Проект", Перечисления.ВидыОбъектовДоступа.Проекты);

	ИначеЕсли ИмяДокумента = "ОтчетКомитентуОПродажах" Тогда
		Результат.Вставить("Проект", Перечисления.ВидыОбъектовДоступа.Проекты);

	ИначеЕсли ИмяДокумента = "ПачкаДокументовСЗВ_6_4" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
 		Результат.Вставить("СведенияОЗаработке.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ПередачаДСВвПФР" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ПередачаОС" Тогда
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "ПередачаТоваров" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПеремещениеОС" Тогда
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);
		Результат.Вставить("МОЛ", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ПеремещениеТоваров" Тогда
		Результат.Вставить("СкладПолучатель", Перечисления.ВидыОбъектовДоступа.Склады);
		Результат.Вставить("СкладОтправитель", Перечисления.ВидыОбъектовДоступа.Склады);
		
	ИначеЕсли ИмяДокумента = "ПеречислениеНДФЛвБюджет" Тогда
		Результат.Вставить("СотрудникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);
		Результат.Вставить("Работники.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		Результат.Вставить("ПеречислениеЗаработнойПлаты.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "ПоступлениеДенежныхДокументов" Тогда
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровИзПереработки" Тогда
		Результат.Вставить("СкладОрдер", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		Результат.Вставить("СкладОрдер", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровУслугВНТТ" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПремииРаботниковОрганизаций" Тогда
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ПриемНаРаботу" Тогда
		Результат.Вставить("Работники.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ПриемНаРаботуВОрганизацию" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ПринятиеКУчетуОС" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);

	ИначеЕсли ИмяДокумента = "ПриходныйКассовыйОрдер" Тогда
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РасходныйКассовыйОрдер" Тогда
		Результат.Вставить("ВыплатаДепонентов.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РасчетЕСН" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РасчетСтраховыхВзносов" Тогда
		Результат.Вставить("ИсчисленныеСтраховыеВзносы.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("НеоблагаемыеСуммыДоходов.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ПособияПоСоциальномуСтрахованию.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ПособияПоУходуЗаРебенкомДоПолутораЛет.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РасчетПриУвольненииРаботникаОрганизаций" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РеализацияТоваровУслуг" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "РеализацияУслугПоПереработке" Тогда
		Результат.Вставить("Проект", Перечисления.ВидыОбъектовДоступа.Проекты);

	ИначеЕсли ИмяДокумента = "РегистрацияПростоевРаботниковОрганизаций" Тогда
		Результат.Вставить("Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РегистрацияРазовыхНачисленийРаботниковОрганизаций" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РегистрацияРазовыхУдержанийРаботниковОрганизаций" Тогда
		Результат.Вставить("Удержания.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РеестрСведенийВФССОЕжемесячныхПособияхПоУходу" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РеестрСведенийВФССОПособияхПоНетрудоспособности" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РеестрСведенийВФССОПособияхПриРожденииРебенка" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РеестрДСВ3" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РезервированиеТоваров" Тогда
		Результат.Вставить("Контрагент", Перечисления.ВидыОбъектовДоступа.Контрагенты);

	ИначеЕсли ИмяДокумента = "РезультатИспытательногоСрока" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "СведенияОДоходахФизлиц" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "СведенияОВзносахИСтраховомСтажеСПВ1" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "СведенияОНачисленномЗаработкеСЗВ63" Тогда
		Результат.Вставить("СотрудникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("СведенияОЗаработке.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "СведенияОТрудовомСтажеИЗаработкеСЗВ4" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "СдельныйНаряд" Тогда
		Результат.Вставить("Исполнители.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);

	ИначеЕсли ИмяДокумента = "СертификацияНоменклатуры" Тогда
		Результат.Вставить("ОрганПоСертификации", Перечисления.ВидыОбъектовДоступа.Контрагенты);
		Результат.Вставить("Подразделение", Перечисления.ВидыОбъектовДоступа.Подразделения);

	ИначеЕсли ИмяДокумента = "Событие" Тогда
		Результат.Вставить("КонтактноеЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Проект", Перечисления.ВидыОбъектовДоступа.Проекты);

	ИначеЕсли ИмяДокумента = "СписаниеДепонентовВДоходыОрганизаций" Тогда
		Результат.Вставить("ВыплатаДепонентов.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "СправкаДругогоСтрахователяОЗаработке" ИЛИ
		  ИмяДокумента = "СправкаОЗаработкеДляРасчетаПособий" Тогда
		Результат.Вставить("ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "СправкаПоНДФЛВНалоговыйОрган" Тогда
		Результат.Вставить("СотрудникиОрганизации.Сотрудник", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "СправкаПоНДФЛСотруднику" Тогда
		Результат.Вставить("Сотрудник", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "Увольнение" Тогда
		Результат.Вставить("Работники.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "УвольнениеИзОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "УчастиеВМероприятиях" Тогда
		Результат.Вставить("Работники.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Записывает объекты доступа для документа
//
Процедура ВыполнитьРегистрациюОбъектовДоступаДокумента(Источник) Экспорт

	ИсточникИмя = Источник.Метаданные().Имя;	
	ОбъектыДоступаДокумента = ПолучитьОбъектыДоступаДокумента(ИсточникИмя);
	Если ОбъектыДоступаДокумента.Количество() = 0 Тогда
		ВызватьИсключение "Не определено правило регистрации объектов доступа для документа: " + ИсточникИмя;
	КонецЕсли;
	
	ОбъектыДоступа = Новый ТаблицаЗначений;
	ОбъектыДоступа.Колонки.Добавить("ВидОбъектаДоступа");
	ОбъектыДоступа.Колонки.Добавить("ОбъектДоступа");
	
	Для Каждого ВидДоступа ИЗ ОбъектыДоступаДокумента Цикл
		ПозицияТочки = Найти(ВидДоступа.Ключ, ".");
		Если  ПозицияТочки <> 0 Тогда
			// реквизит в табличной части
			ИмяТЧ = Лев(ВидДоступа.Ключ, ПозицияТочки - 1);
			ИмяРеквизита = Сред(ВидДоступа.Ключ, ПозицияТочки + 1);
			ЗначенияВТЧ = Источник[ИмяТЧ].ВыгрузитьКолонку(ИмяРеквизита);
			Для Каждого ЗначениеРеквизита ИЗ ЗначенияВТЧ Цикл
				Если ЗначениеРеквизита <> Неопределено Тогда
					СтрокаОбъектаДоступа = ОбъектыДоступа.Добавить();
					СтрокаОбъектаДоступа.ВидОбъектаДоступа = ВидДоступа.Значение;
					СтрокаОбъектаДоступа.ОбъектДоступа = ЗначениеРеквизита;
				КонецЕсли;
			КонецЦикла;		
		Иначе
			ЗначениеРеквизита = Источник[ВидДоступа.Ключ];
			Если ЗначениеРеквизита <> Неопределено Тогда
				СтрокаОбъектаДоступа = ОбъектыДоступа.Добавить();
				СтрокаОбъектаДоступа.ВидОбъектаДоступа = ВидДоступа.Значение;
				СтрокаОбъектаДоступа.ОбъектДоступа = ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПараметрыЗаписиОбъектовДоступа") Тогда
		Замещать = Источник.ДополнительныеСвойства.ПараметрыЗаписиОбъектовДоступа.Замещать;
	Иначе
		Замещать = Истина;
	КонецЕсли;
	
	Для Сч = -ОбъектыДоступа.Количество() По -1  Цикл
		СтрокаОбъектаДоступа = ОбъектыДоступа.Получить(-Сч-1);
		
		ТипВидаОбъектаДоступа = ПолучитьТипВидаОбъектаДоступа(СтрокаОбъектаДоступа.ВидОбъектаДоступа);
		Если ТипВидаОбъектаДоступа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОбъектаДоступа.ОбъектДоступа = Неопределено Тогда
			// Преобразуем к пустой ссылке
			СтрокаОбъектаДоступа.ОбъектДоступа = ОбщегоНазначения.ПустоеЗначениеТипа(ТипВидаОбъектаДоступа);
			
		ИначеЕсли ТипВидаОбъектаДоступа <> ТипЗнч(СтрокаОбъектаДоступа.ОбъектДоступа) Тогда
			// Удалим объект доступа, чтобы по данному виду объектов не был ограничен доступ
			ОбъектыДоступа.Удалить(СтрокаОбъектаДоступа);
		КонецЕсли; 
	КонецЦикла;
	
	ПолныеПрава.РегистрацияОбъектовДоступаДокумента(Источник.Ссылка, ОбъектыДоступа, Замещать);
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписиДокументаРегистрацияОбъектовДоступа
//
Процедура ПриЗаписиДокументаРегистрацияОбъектовПравДоступа(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРегистрациюОбъектовДоступаДокумента(Источник);

КонецПроцедуры

Процедура ПриЗаписиДокументаРегистрацияОбъектовДоступаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПараметрыЗаписиОбъектовДоступа", Новый Структура("Замещать"));
	ДополнительныеСвойства.ПараметрыЗаписиОбъектовДоступа.Замещать = НЕ Источник.ЭтоНовый();
	
КонецПроцедуры

// Выполняет регистрацию объектов доступа по списку документов
// Процедура может использоваться при обновлении ИБ
//
// Параметры
//  ТипыДокументов			- массив - содержит названия документов, для которых нужно выпонить регистрацию объектов доступа
//
//  ЗаменятьСуществующие	- булево - признак замены существующих объектов доступа
//
Процедура ВыполнитьРегистрациюОбъектовДоступа(ТипыДокументов, ЗаменятьСуществующие = Истина) Экспорт

	ТекстЗапроса = "";
	
	ПервыйРаз = Истина; //Первый проход цикла
		
	Для каждого ИмяДокумента Из ТипыДокументов Цикл
		
		Если ПервыйРаз Тогда
			ПервыйРаз = Ложь;
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК Док";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК Док";
		КонецЕсли;
		
		Если НЕ ЗаменятьСуществующие Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыДоступаДокументов КАК ОбъектыДоступаДокументов
			|	ПО ОбъектыДоступаДокументов.ДокументСсылка = Док.Ссылка
			|ГДЕ 
			|	ОбъектыДоступаДокументов.ДокументСсылка ЕСТЬ NULL";
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	    ВыполнитьРегистрациюОбъектовДоступаДокумента(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры
 

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ  - МЕХАНИЗМА КОНТРОЛЯ ОТРАЖЕНИЯ В РЕГЛ УЧЕТЕ

// Функция проверяет наличие права пользователя отразить в регл. учете
// Если пользователю разрешено отражать в регл. учете, то функция возвращает ИСТИНА
// Если пользователю запрещено отражать в регл. учете, то
//  - если в документе установлен признак отражения в регл. учете, то функция возвращает ЛОЖЬ
//  - если в документе не установлен признак отражения в регл. учете, то необходимо проверить 
//    версию документа до изменений
//
Функция ПроверитьВозможностьОтраженияВРеглУчете(ДокументОбъект, РежимЗаписи)
	
	// Если пользователю разрешено отражать в регл учете, то выполнение процедуры завершается
	ЗаписьРазрешена = УправлениеДопПравамиПользователей.РазрешеноОтражениеВРеглУчете();
	Если ЗаписьРазрешена Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Blik 71540 011117 н
	Если ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьПроводитьПоБуСкладыNavision") Тогда
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаРеализации")
			или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров")
			или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПРГ_СторноНакладной") Тогда
			ЗаписьРазрешена = ИСТИНА;
			Возврат ЗаписьРазрешена;
		КонецЕсли;
	КонецЕсли;
	//Blik 71540 011117 к
	
	// Пользователю запрешено отражать в регл. учете
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ЕстьРеквизитБУ      = (МетаданныеДокумента.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено);
	ЕстьРеквизитНУ      = (МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено);
	РазрешеноПроведение = (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	
	// Проверим текущую версию документа	
	Если НЕ ЕстьРеквизитБУ 
		ИЛИ ЕстьРеквизитБУ И ДокументОбъект.ОтражатьВБухгалтерскомУчете
		ИЛИ ЕстьРеквизитНУ И ДокументОбъект.ОтражатьВНалоговомУчете Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			// Если отмена проведения, то нужно проверить версию документа до изменений
			ЗаписьРазрешена = Истина;
		Иначе
			Если РежимЗаписи = РежимЗаписиДокумента.Запись И РазрешеноПроведение Тогда
				// Текущую версию документа можно только записать
				ЗаписьРазрешена = Истина;
			Иначе
				ЗаписьРазрешена = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		// Запись разрешена, т.к. документ отражается только в УУ
		ЗаписьРазрешена = Истина;
	КонецЕсли; 
	
		
	// Проверим версию документа до изменений
	Если ЗаписьРазрешена И НЕ ДокументОбъект.ЭтоНовый() Тогда
		
		Запрос = Новый Запрос;
	
		ТекстЗапроса = "ВЫБРАТЬ
			|	" + ?(ЕстьРеквизитБУ, "Док.ОтражатьВБухгалтерскомУчете ", "ИСТИНА") + " КАК ОтражатьВБухгалтерскомУчете,
			|	" + ?(ЕстьРеквизитНУ, "Док.ОтражатьВНалоговомУчете", "ЛОЖЬ") + " КАК ОтражатьВНалоговомУчете,
			|	" + ?(РазрешеноПроведение, "Док.Проведен", "ИСТИНА") + " КАК Проведен
			|ИЗ
			|	Документ." + МетаданныеДокумента.Имя + " КАК Док
			|ГДЕ 
			|	Док.Ссылка = &Ссылка";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если НЕ ЕстьРеквизитБУ 
			ИЛИ ЕстьРеквизитБУ И Выборка.ОтражатьВБухгалтерскомУчете
			ИЛИ ЕстьРеквизитНУ И Выборка.ОтражатьВНалоговомУчете Тогда
			
			Если НЕ Выборка.Проведен И РазрешеноПроведение Тогда
				// Можно изменить только непроведенный документ
				ЗаписьРазрешена = Истина;
			Иначе
				ЗаписьРазрешена = Ложь;
			КонецЕсли; 
		Иначе
			// Запись разрешена, т.к. документ отражен только в УУ
			ЗаписьРазрешена = Истина;
		КонецЕсли;	
		
	КонецЕсли;

	Если НЕ ЗаписьРазрешена Тогда
		СтруктураПараметровПроведения = ОтложенноеПроведениеДокументов.ПолучитьПараметрыПроведенияДокумента(ДокументОбъект);
			
		// Документ можно отразить в регл учете,
		// если документ проводится отложенно 
		// и предыдущая версия документа не проведена полностью
		ЗаписьРазрешена = СтруктураПараметровПроведения.ДокументИспользуетсяВОтложенномПроведении
							И СтруктураПараметровПроведения.ВыполняетсяОтложенноеПроведение
							И (ДокументОбъект.ЭтоНовый()
								ИЛИ НЕ ОтложенноеПроведениеДокументов.ПроверитьДокументПроведенПолностью(ДокументОбъект.Ссылка));
		
	КонецЕсли; 
	
	Возврат ЗаписьРазрешена;
	
КонецФункции //ПроверитьВозможностьОтраженияВРеглУчете
 
Процедура ПередЗаписьюДокументаОтражениеВРеглУчетеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		//{16.04.2015 Островерхий заявка №37886 
		ИЛИ (Источник.ДополнительныеСвойства.Свойство("НеПроверятьПравоНаОтражениеВРегламентированномУчете") И Источник.ДополнительныеСвойства.НеПроверятьПравоНаОтражениеВРегламентированномУчете) 
		//16.04.2015 Островерхий} 
		Тогда
		Возврат;
	КонецЕсли;
	
	ЗапретитьЗапись = НЕ ПроверитьВозможностьОтраженияВРеглУчете(Источник, РежимЗаписи);
	
	Отказ = Отказ ИЛИ ЗапретитьЗапись;
	
	#Если Клиент Тогда
		Если ЗапретитьЗапись Тогда
			ТекстСообщения = "Недостаточно прав для отражения в регламентированном учете. Изменения не могут быть записаны...";
			Заголовок = "Запись документа: " + Строка(Источник);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Важное, Источник.Ссылка);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - АДМИНИСТРИРОВАНИЯ ПОЛЬЗОВАТЕЛЕЙ

#Если Клиент Тогда
	
Процедура ОткрытьПараметрыДоступаНаУровнеЗаписей() Экспорт

	Обработки.НастройкиПрограммы.ПолучитьФорму("ПараметрыДоступаНаУровнеЗаписей").Открыть();
	
КонецПроцедуры //

#КонецЕсли
 

// Функция возвращает массив используемых видов объектов доступа 
//	для конфигурации в целом или для группы пользователя
//
Функция ПолучитьИспользуемыеВидыОбъектовДоступа(ГруппаПользователя = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Если ГруппаПользователя = Неопределено Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ИспользуемыеВидыОбъектовДоступа.ВидОбъектаДоступа КАК ВидОбъектаДоступа
		               |ИЗ
		               |	РегистрСведений.ИспользуемыеВидыОбъектовДоступа КАК ИспользуемыеВидыОбъектовДоступа";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
					   |	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа КАК ВидОбъектаДоступа
					   |ИЗ
					   |	РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
					   |ГДЕ
					   |	НазначениеВидовОбъектовДоступа.ГруппаПользователей = &ГруппаПользователей";
		 
		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователя);
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОбъектаДоступа");
	
	Возврат Результат;

КонецФункции // ПолучитьИспользуемыеВидыОбъектовДоступа


Процедура ПРГПередЗаписьюДокументаЗапретРедактированияЗаднимЧисломПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//{01.09.2015 Островерхий заявка №43535 
	РазрешитьЗаписьПроведениеОтменуПроведенияДокумента(Источник, Отказ, РежимЗаписи); 
	//01.09.2015 Островерхий} 
	
КонецПроцедуры

Процедура РазрешитьЗаписьПроведениеОтменуПроведенияДокумента(Источник, Отказ, РежимЗаписи) Экспорт 

	//начало изменений Ожиганов 02.09.2015 не забываем про МСФО
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка ИЛИ ПараметрыСеанса.ПроведениеДокументов Тогда
		Возврат;
	КонецЕсли;
	//конец изменений 
	
	//{10.08.2015 Островерхий заявка №б/н
	//+ действие возможно, - действие запрещено
	//+1) Новый, запись текущим числом
	//+2) Новый, проведение текущим числом
	//+3) Новый, запись задним числом
	//-4) Новый, проведение задним числом
	//+5) НЕ Новый, запись задним числом
	//+6) НЕ Новый, запись текущим числом
	//-7) НЕ Новый, проведение задним числом
	//+8) НЕ Новый, проведение текущим числом
	//-9) НЕ Новый, отмена проведения задним числом
	//+10) НЕ Новый, отмена проведения текущим числом 
	//10.08.2015 Островерхий} 
	
	Если АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии)
		ИЛИ РольДоступна(Метаданные.ОсновнаяРоль.Имя)
		ИЛИ ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПРГРазрешитьПроведениеЗаднимЧислом)
			Тогда
		Возврат;
	КонецЕсли; 
	
	//начало изменений Ожиганов 29.01.2016 48463 ограничение по требованию ГБ, не даем отменить проведение  проведенного документа
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров")
		или ТипЗнч(Источник) = Тип("ДокументОбъект.ТребованиеНакладная")
		//{05.05.2016 Островерхий заявка №52142 
		или ТипЗнч(Источник) = Тип("ДокументОбъект.СчетФактураВыданный") 
		//05.05.2016 Островерхий} 
		или ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Если НачалоДня(Источник.Дата) = НачалоДня(ТекущаяДата()) и Не Источник.ЭтоНовый() тогда
			 СтруктДок  = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Источник.Ссылка,Новый Структура("Проведен")); 
			 Если СтруктДок <> Неопределено Тогда
				 Если СтруктДок.Проведен и РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
					 ОбщегоНазначения.СообщитьОбОшибке("Проводить или отменять проведение документа (" + СокрЛП(Источник.Ссылка) + ") задним числом может только сотрудник бухгалтерии!", Отказ);
				 КонецЕсли;	 
			 КонецЕсли;	 
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 

	ПроводитсяЗаднимЧислом = ДействиеСДокументомЗаднимЧислом(Источник);
	
	Если ПроводитсяЗаднимЧислом
		И (РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда //4,7,9
	    ОбщегоНазначения.СообщитьОбОшибке("Проводить или отменять проведение документа (" + СокрЛП(Источник.Ссылка) + ") задним числом может только сотрудник бухгалтерии!", Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Функция ДействиеСДокументомЗаднимЧислом(Объект)

	Если Объект.ЭтоНовый() Тогда
		
		Возврат НЕ НачалоДня(Объект.Дата)= НачалоДня(ТекущаяДата());
		
	Иначе
		
		//{01.09.2015 Островерхий заявка №43535 
		СтруктРевизитаЗаказа = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Объект.Ссылка,Новый Структура("Дата,Проведен",Объект.Дата)); 
		
		Если НЕ СтруктРевизитаЗаказа.Проведен И НачалоДня(Объект.Дата)= НачалоДня(ТекущаяДата()) Тогда
			Возврат Ложь;
		Иначе	
			Возврат НЕ НачалоДня(СтруктРевизитаЗаказа.Дата) = НачалоДня(ТекущаяДата());
		КонецЕсли; 
		//01.09.2015 Островерхий} 
		
	КонецЕсли; 

КонецФункции // ДействиеСДокументомЗаднимЧислом()

