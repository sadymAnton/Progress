
// Функция возвращает сумму скидки.
//
// Параметры:
//  Сумма - Число, сумма со скидкой.
//  Скидка - Число, процент скидки.
//
// Возвращаемое значение:
//  Число - сумма скидки.
//
Функция ПолучитьСуммуСкидки(Сумма, Скидка) Экспорт

	Если ЗначениеЗаполнено(Скидка) И Скидка <> 100 Тогда
		СуммаСкидки = Сумма / (100 - Скидка) * Скидка;
	Иначе
		СуммаСкидки = 0;
	КонецЕсли;

	Возврат СуммаСкидки;

КонецФункции // ПолучитьСуммуСкидки()

// 
//
// Параметры:
//  ДатаЦен - исходная дата.
//
// Возвращаемое значение:
//  Дата - дата (со временем), на которую будут рассчитаны цены.
//
Функция ПолучитьАктуальнуюДатуРасчетаЦен(ДатаЦен) Экспорт

	ТекДата = ТекущаяДата();

	Если НЕ ЗначениеЗаполнено(ДатаЦен) Тогда
		Результат = ТекДата;
	ИначеЕсли ДатаЦен = НачалоДня(ТекДата) Тогда
		Результат = ТекДата;
	Иначе
		Результат = ДатаЦен;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьАктуальнуюДатуРасчетаЦен()

// Функция возвращает массив получателей скидки, для которых необходимо рассчитать скидки.
//
// Параметры:
//  ВидРеализации - значение перечисления "ВидыСкидок".
//  ДокументОбъект - объект документа.
//
// Возвращаемое значение:
//  Массив - массив с получателями скидки.
//
Функция ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект) Экспорт

	МассивПолучателей = Новый Массив;

	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		МассивПолучателей.Добавить(ДокументОбъект.Склад);
		МассивПолучателей.Добавить(Справочники.Склады.ПустаяСсылка());
	Иначе
		МассивПолучателей.Добавить(ДокументОбъект.Контрагент);
		МассивПолучателей.Добавить(ДокументОбъект.ДоговорКонтрагента);
		МассивПолучателей.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;

	Возврат МассивПолучателей;

КонецФункции // ПолучитьМассивПолучателейСкидки()

// Функция проверяет, является ли набор-комплект спец. предложением на указанную дату.
//
// Параметры:
//  Номенклатура - набор-комплект, который нужно проверить.
//  Дата - дата, на которую нужно проверить.
//
// Возвращаемое значение:
//  Булево - Истина, если переданный набор-комплект является спец. предложением.
//
Функция ЭтоСпецПредложение(Дата, Номенклатура, ХарактеристикаНоменклатуры, МассивПолучателей) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата,
	|	   ПолучательСкидки В (&МассивПолучателей)) КАК СкидкиНатуральные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|ПО
	|	СкидкиНатуральные.Регистратор = ВремяДействия.Регистратор
	|ГДЕ
	|	СкидкиНатуральные.СпецПредложение = &Номенклатура
	|	И СкидкиНатуральные.ХарактеристикаСпецПредложения = &ХарактеристикаНоменклатуры
	|	И (ВремяДействия.Регистратор ЕСТЬ NULL
	|	ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
	|	И (&ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|	И (СкидкиНатуральные.ДатаОкончания = &ПустаяДата
	|	ИЛИ СкидкиНатуральные.ДатаОкончания >= &Дата))
	|");

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("МассивПолучателей", МассивПолучателей);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	Запрос.УстановитьПараметр("ДеньНедели", Перечисления.ДниНедели[ДеньНедели(Дата) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя", Дата(1, 1, 1, Час(Дата), Минута(Дата), Секунда(Дата)));

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции // ЭтоСпецПредложение()

// Изменяет переданную цену по условию продаж.
//
// Параметры:
//  Дата - дата, на которую нужно брать условие продаж.
//  Номенклатура - переданная номенклатура.
//  УсловиеПродаж - переданное условие продаж.
//  ПолученнаяЦена - цена, которую надо изменить. В эту переменную возвращается новая цена.
//
Процедура ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена) Экспорт

	Если ПолученнаяЦена <> 0 И ЗначениеЗаполнено(УсловиеПродаж) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("УсловиеПродаж", УсловиеПродаж);
		Запрос.УстановитьПараметр("Группы", ПолучитьМассивГруппНоменклатуры(Номенклатура));

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НаценкиПоУсловиямПродаж.ПроцентНаценки КАК ПроцентНаценки
		|ИЗ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж
		|	   И НоменклатурнаяЦеноваяГруппа В (&Группы)) КАК НаценкиПоУсловиямПродаж
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПолученнаяЦена * (1 + Выборка.ПроцентНаценки / 100);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ИзменитьЦенуПоУсловиюПродаж()

// Возвращает массив из двух элементов: номенклатурной и ценовой группы, к которым принадлежит
// переданная номенклатура.
//
// Параметры:
//  Номенклатура - переданная номенклатура.
//
// Возвращаемое значение:
//  Массив - номенклатурная и ценовая группа к которым принадлежит переданная номенклатура.
//
Функция ПолучитьМассивГруппНоменклатуры(Номенклатура)

	Группы = Новый Массив;
	Группы.Добавить(Номенклатура.ЦеноваяГруппа);
	Группы.Добавить(Номенклатура.НоменклатурнаяГруппа);

	Возврат Группы;

КонецФункции // ПолучитьМассивГруппНоменклатуры()

// Возвращает массив характеристик: ПустаяХарактеристика + ХарактеристикаНоменклатуры,
// если ХарактеристикаНоменклатуры <> Неопределено
//
// Параметры:
//  ХарактеристикаНоменклатуры - переданная характеристика номенклатуры.
//
// Возвращаемое значение:
//  Массив - если ХарактеристикаНоменклатуры = Неопределено, то в массиве только ПустаяХарактеристика.
//
Функция ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры) Экспорт

	Характеристики = Новый Массив;
	Характеристики.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Если ХарактеристикаНоменклатуры <> Неопределено Тогда
		Характеристики.Добавить(ХарактеристикаНоменклатуры);
	КонецЕсли;

	Возврат Характеристики;

КонецФункции // ПолучитьМассивХарактеристик()

// Округляет число по заданному порядку. Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки окгугления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЦену(Число, ПараметрПорядокОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;

	Если НЕ ЗначениеЗаполнено(Число) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПараметрПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПараметрПорядокОкругления;
	КонецЕсли;
	
	Порядок = Число(Строка(ПорядокОкругления));
		
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлитья до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе

			// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания  «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НП для избежания ошибок округления, то это не значит, 
// что при отпуске без НП мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Параметры: 
//  Цена                - число, пересчитваемое значение цены, 
//  СпособЗаполненияЦен - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//						  "при продаже" или "при покупке", см описание функции,
//  ЦенаВключаетНДС     - булево, определяет содержит ли переданное значение цены НДС,
//  УчитыватьНДС        - булево, определяет должно ли новое значение цены учитвать НДС,
//  СуммаВключаетНДС    - булево, определяет должно ли новое значение цены включать НДС,
//  СтавкаНДС           - число, ставка НДС, 
//
// Возвращаемое значение:
//  Числое, новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ЦенаВключаетНДС,
						УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт


	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	НоваяЦена		 = Цена;
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе // Надо пересчитывать строго по флагам включения
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		Иначе
			Если ЦенаВключаетНДС Тогда
				// Надо исключать НДС
				НадоИсключитьНДС = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	
	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	
	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()

// Пересчитывает цену для другой единицы измерения
//
// Параметры: 
//  Цена         - число, значение цены, которое надо пересчитать,
//  ЕдиницаЦены  - ссылка на справочник "ЕдиницыИзмерения", определяет единицу, за которую назначена Цена
//  НоваяЕдиница - ссылка на справочник "ЕдиницыИзмерения", определяет единицу, за которую надо получить
//                 новое значение цены. Если не заполнено, то устанавливается равной ЕдиницаЦены без пересчета.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииЕдиницы(Цена, ЕдиницаЦены, НоваяЕдиница) Экспорт

	НовоеЗначениеЦены = Цена;

	Если ЕдиницаЦены <> НоваяЕдиница Тогда
		Если НЕ ЗначениеЗаполнено(НоваяЕдиница) Тогда // параметр единицы не задан, значить надо возвращать в единице цены
			Если НЕ ЗначениеЗаполнено(ЕдиницаЦены) Тогда // если не задана единица цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе
				НоваяЕдиница = ЕдиницаЦены;
			КонецЕсли;
		Иначе // если единица цены не совпадает с параметром, то надо пересчитать
			Если НЕ ЗначениеЗаполнено(ЕдиницаЦены) Тогда // если не задана единица цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе
				КоэффициентЦены = ЕдиницаЦены.Коэффициент;
				НовоеЗначениеЦены  = ?(НЕ ЗначениеЗаполнено(КоэффициентЦены), 0, 
									 НовоеЗначениеЦены * НоваяЕдиница.Коэффициент / КоэффициентЦены)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат НовоеЗначениеЦены;

КонецФункции // ПересчитатьЦенуПриИзмененииЕдиницы()

// Пересчитывает цену в другую валюту
//
//  Цена            - число, значение цены, которое надо пересчитать,
//  ВалютаЦены      - ссылка на справочник "Валюты", определяет валюту, в которой назначена Цена
//  НоваяВалюта     - ссылка на справочник "Валюты", определяет валюту, в которой надо получить
//                    новое значение цены. Если не заполнено, то устанавливается равной ВалютаЦены без пересчета,
//  КурсНовойВалюты - курс новой валюты, по которому надо пересчитать цену, если не задан, то берем курс по справочнику
//  КратностьНовойВалюты - кратность новой валюты, по которой надо пересчитать цену, если не задана, то берем курс по справочнику
//  Дата            - дата, на которую надо пересчитать цену.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, НоваяВалюта, КурсНовойВалюты = 0, КратностьНовойВалюты = 1, Дата = Неопределено ) Экспорт

	НовоеЗначениеЦены = Цена;
	Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда // параметр валюты не задан, значить надо возвращать в валюте цены
		НоваяВалюта = ВалютаЦены;
	Иначе
		Если НоваяВалюта <> ВалютаЦены Тогда // если валюта цены не совпадает с параметром, то надо пересчитать
			Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда // если не задана валюта цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе // валюты заданы и не совпадают, надо пересчитывать
				СтруктураКурсЦены = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЦены, Дата);
				КурсЦены          = СтруктураКурсЦены.Курс;
				КратностьЦены     = СтруктураКурсЦены.Кратность;

				Если НЕ ЗначениеЗаполнено(КурсНовойВалюты) Тогда // если не задан курс, то курс берем по справочнику
					СтруктураКурсНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяВалюта, Дата);
					КурсНовойВалюты          = СтруктураКурсНовойВалюты.Курс;
					КратностьНовойВалюты     = СтруктураКурсНовойВалюты.Кратность;
				КонецЕсли;

				НовоеЗначениеЦены = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НовоеЗначениеЦены, ВалютаЦены, НоваяВалюта,
				   КурсЦены, КурсНовойВалюты,КратностьЦены,КратностьНовойВалюты);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат НовоеЗначениеЦены;

КонецФункции // ПересчитатьЦенуПриИзмененииВалюты()

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значене:
//  Сформированная структура реквизитов документа.
//
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Зададим, какие реквизиты вообще нам могут быть нужны.
	СтруктураВозможныхВариантовРеквизитов = Новый Структура;
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ИспользоватьПлановуюСебестоимость");
	СтруктураВозможныхВариантовРеквизитов.Вставить("РегистрироватьЦеныПоставщика");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УсловиеПродаж");

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Новый Структура;
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если МетаданныеДокумента.Реквизиты.Найти(НужныйРеквизитДокумента) <> Неопределено Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;

	// Теперь проверим исключения.
	Если СтруктураИсключений <> Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда // надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе // надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРеквизитовДокумента;

КонецФункции // ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования()

// Формирует и выполняет запрос по ценовым диапазонам
// Параметры:
//  ТипЦен - тип цен, для которого нужно получить шкалу диапазонов
//  Дата - дата, на которую требуется получить актуальную шкалу
//
Функция ПолучитьЗапросПоЦеновымДиапазонам(ТипЦен, Дата) Экспорт

	ЗапросДиапазоны = Новый Запрос;

	ЗапросДиапазоны.УстановитьПараметр("Дата", Дата);
	ЗапросДиапазоны.УстановитьПараметр("ТипЦен", ТипЦен);

	ЗапросДиапазоны.Текст = "
	|ВЫБРАТЬ
	|	ДиапазоныЦен.ВерхняяГраница,
	|	ДиапазоныЦен.Цена,
	|	ДиапазоныЦен.Валюта
	|ИЗ
	|	РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦен
	|СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ДиапазоныЦенМакс.Период) КАК Период
	|	ИЗ
	|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦенМакс
	|	) КАК ДиапазоныЦенМакс
	|ПО
	|	ДиапазоныЦен.Период = ДиапазоныЦенМакс.Период
	|УПОРЯДОЧИТЬ ПО
	|	ДиапазоныЦен.ВерхняяГраница
	|";

	Возврат ЗапросДиапазоны.Выполнить();

КонецФункции // ПолучитьЗапросПоЦеновымДиапазонам()

// Получает цену по ценовым диапазонам.
// Параметры:
//  ТипЦен - тип цен, для которого нужно получить шкалу диапазонов.
//  Дата - дата, на которую требуется получить актуальную шкалу.
//  Цена - входящая цена.
//  Валюта - переменная, куда функция возвращает валюту найденной цены.
//
Функция ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, Знач Цена, Валюта, ВалютаВходящая) Экспорт

	Если ВалютаВходящая <> ТипЦен.БазовыйТипЦен.ВалютаЦены Тогда
		СтруктураКурсВходящейВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВходящая, Дата);
		СтруктураКурсНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ТипЦен.БазовыйТипЦен.ВалютаЦены, Дата);

		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, ВалютаВходящая, ТипЦен.БазовыйТипЦен.ВалютаЦены,
		                                  СтруктураКурсВходящейВалюты.Курс, СтруктураКурсНовойВалюты.Курс,
		                                  СтруктураКурсВходящейВалюты.Кратность, СтруктураКурсНовойВалюты.Кратность);
	КонецЕсли;

	РасчетнаяЦена = 0;

	Если Цена > 0 Тогда
		ЗапросДиапазоны = Новый Запрос;

		ЗапросДиапазоны.УстановитьПараметр("Дата", Дата);
		ЗапросДиапазоны.УстановитьПараметр("ТипЦен", ТипЦен);
		ЗапросДиапазоны.УстановитьПараметр("Цена", Цена);

		ЗапросДиапазоны.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДиапазоныЦен.Цена,
		|	ДиапазоныЦен.Валюта
		|ИЗ
		|	РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦен
		|СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ДиапазоныЦенМакс.Период) КАК Период
		|	ИЗ
		|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦенМакс
		|	) КАК ДиапазоныЦенМакс
		|ПО
		|	ДиапазоныЦен.Период = ДиапазоныЦенМакс.Период
		|ГДЕ &Цена < ДиапазоныЦен.ВерхняяГраница
		|УПОРЯДОЧИТЬ ПО
		|	ДиапазоныЦен.ВерхняяГраница
		|";

		Выборка = ЗапросДиапазоны.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			РасчетнаяЦена = Выборка.Цена;
			Валюта = Выборка.Валюта;
		КонецЕсли;
	КонецЕсли;

	Возврат РасчетнаяЦена;

КонецФункции // ПолучитьЦенуПоЦеновымДиапазонам()

// Функция возвращает цену номенклатуры для требуемой номенклатуры в указанном типе цен,
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры:
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "ХарактеристикаНоменклатуры",
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра
//                         сведений "Курсы валют",
//  ПроцентСкидкиНаценки - число, процент наценки (скидки) на базовый тип цен, заполняется процентом
//                         наценки (скидки) цены для цен, которые не рассчитываются автоматически.
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Знач ТипЦен, ДатаПараметр = Неопределено, ЕдиницаИзмерения = Неопределено,
	                             Валюта = Неопределено, Курс = 0, Кратность = 1, ПроцентСкидкиНаценки = 0, ДоговорКонтрагента = Неопределено,
	                             УсловиеПродаж = Неопределено, АдресПоставки = Неопределено, Контрагент = Неопределено) Экспорт //m.ionov@a-prof.ru 02.10.2014: Добавили передачу адреса поставки, и контрагента если для определения цены нет данных по договору контрагента

	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка(); // для услуг
	КонецЕсли;

	ХарактеристикиНоменклатуры = ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры);

	Дата = ПолучитьАктуальнуюДатуРасчетаЦен(ДатаПараметр);

	ПолученнаяЦена = 0;
	
	//m.ionov@a-prof.ru 30.10.2014
	Если ТипЦен = Неопределено ИЛИ Не ЗначениеЗаполнено(ТипЦен) Тогда
		Возврат ПолученнаяЦена;
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	//m.ionov@a-prof.ru 07.10.2014
	//Если ДоговорКонтрагента <> Неопределено Тогда
	Если ДоговорКонтрагента <> Неопределено ИЛИ Контрагент <> Неопределено Тогда
		Если Контрагент = Неопределено Тогда //Значит передан договор
			Контрагент = ДоговорКонтрагента.Владелец;			
		КонецЕсли;
	//----m.ionov@a-prof.ru---
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);

		//m.ionov@a-prof.ru 01.10.2014
		//ТекстЗапроса = "
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		//|	УсловияПоставок.Цена                   КАК Цена,
		//|	ВЫБОР	КОГДА сНоменклатура.Услуга И УсловияПоставок.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		//|			ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
		//|			ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения
		//|	КОНЕЦ                                  КАК ЕдиницаИзмерения,
		//|	УсловияПоставок.ВалютаЦены             КАК ВалютаЦены
		//|ИЗ
		//|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата,
		//|	   ДоговорКонтрагента = &Договор И Номенклатура = &Номенклатура
		//|	   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)) КАК УсловияПоставок
		//|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		//|	Справочник.Номенклатура КАК сНоменклатура
		//|ПО
		//|	сНоменклатура.Ссылка = УсловияПоставок.Номенклатура
		//|ГДЕ
		//|	УсловияПоставок.Цена <> 0 И сНоменклатура.Ссылка = &Номенклатура
		//|УПОРЯДОЧИТЬ ПО
		//|	УсловияПоставок.ХарактеристикаНоменклатуры УБЫВ
		//|";
		
		Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("Контрагент", Контрагент); 
		
		Если Не АдресПоставки = Неопределено И ТипЗнч(АдресПоставки) = Тип("СправочникСсылка.АдресаПоставки") Тогда
			Запрос.УстановитьПараметр("Регион", АдресПоставки.НСИ_Регион);
			Запрос.УстановитьПараметр("КаналПродаж", АдресПоставки.НСИ_КаналПродаж);
		Иначе
			Запрос.УстановитьПараметр("Регион", Контрагент.НСИ_Регион);
			Запрос.УстановитьПараметр("КаналПродаж", Контрагент.НСИ_КаналПродаж);			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПустойРегион", Справочники.Регионы.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойКаналПродаж", Справочники.НСИ_КаналыПродаж.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);

		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ВложенныйЗапрос.ТипЦен,
		               |	ВложенныйЗапрос.ПорядокДоговор + ВложенныйЗапрос.ПорядокРегион + ВложенныйЗапрос.ПорядокКаналПродаж + ВложенныйЗапрос.ПорядокХарактеристикаНоменклатуры КАК Порядок,
		               |	ВложенныйЗапрос.Цена,
		               |	ВложенныйЗапрос.ЕдиницаИзмерения,
		               |	ВложенныйЗапрос.ВалютаЦены
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		УсловияПоставок.ПЦ_ТипЦен КАК ТипЦен,
		               |		УсловияПоставок.Цена КАК Цена,
		               |		ВЫБОР
		               |			КОГДА сНоменклатура.Услуга
		               |					И УсловияПоставок.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		               |				ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
		               |			ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения
		               |		КОНЕЦ КАК ЕдиницаИзмерения,
		               |		УсловияПоставок.ВалютаЦены КАК ВалютаЦены,
		               |		ВЫБОР
		               |			КОГДА УсловияПоставок.ДоговорКонтрагента = &Договор
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК ПорядокДоговор,
		               |		ВЫБОР
		               |			КОГДА УсловияПоставок.ПЦ_Регион = &Регион
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК ПорядокРегион,
		               |		ВЫБОР
		               |			КОГДА УсловияПоставок.ПЦ_КаналПродаж = &КаналПродаж
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК ПорядокКаналПродаж,
		               |		ВЫБОР
		               |			КОГДА УсловияПоставок.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК ПорядокХарактеристикаНоменклатуры
		               |	ИЗ
		               |		РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(
		               |				&Дата,
		               |				((ДоговорКонтрагента = &Договор И НЕ &Договор = &ПустойДоговор)
		               |					ИЛИ (ПЦ_Контрагент = &Контрагент
		               |						И ДоговорКонтрагента = &ПустойДоговор))
		               |					И (ПЦ_Регион = &Регион
		               |						ИЛИ ПЦ_Регион = &ПустойРегион)
		               |					И (ПЦ_КаналПродаж = &КаналПродаж
		               |						ИЛИ ПЦ_КаналПродаж = &ПустойКаналПродаж)
		               |					И Номенклатура = &Номенклатура
		               |					И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)) КАК УсловияПоставок
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК сНоменклатура
		               |			ПО (сНоменклатура.Ссылка = УсловияПоставок.Номенклатура)
		               |	ГДЕ
		               |		УсловияПоставок.Цена <> 0
		               |		И сНоменклатура.Ссылка = &Номенклатура) КАК ВложенныйЗапрос
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Порядок УБЫВ";
        //----m.ionov@a-prof.ru---
		
		Запрос.Текст = ТекстЗапроса;

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.ВалютаЦены, Валюта, Курс, Кратность, Дата);
		КонецЕсли;

		//m.ionov@a-prof.ru 02.10.2014
		//Данный функционал не используем
		//// Проверим, не установлены ли по этому договору типы цен для групп.
		//Если ПолученнаяЦена = 0 Тогда
		//	Запрос = Новый Запрос;
		//	Запрос.УстановитьПараметр("Дата", Дата);
		//	Запрос.УстановитьПараметр("Контрагент", ДоговорКонтрагента.Владелец);
		//	Запрос.УстановитьПараметр("Группы", ПолучитьМассивГруппНоменклатуры(Номенклатура));

		//	Запрос.Текст = "
		//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//	|	ТипыЦенПоГруппам.ТипЦен КАК ТипЦен
		//	|ИЗ
		//	|	РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент = &Контрагент
		//	|	   И НоменклатурнаяЦеноваяГруппа В (&Группы)) КАК ТипыЦенПоГруппам
		//	|";

		//	Выборка = Запрос.Выполнить().Выбрать();
		//	Если Выборка.Следующий() Тогда
		//		Если Не Выборка.ТипЦен.Пустая() Тогда // переопределим тип цен для расчета
		//			ТипЦен = Выборка.ТипЦен;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		//----m.ionov@a-prof.ru---
	КонецЕсли;

	Если ПолученнаяЦена = 0 И ЗначениеЗаполнено(ТипЦен) Тогда // особых условий нет
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);

		Если ТипЦен.Рассчитывается Тогда // надо достать цену базового типа и рассчитать по наценке
			//m.ionov@a-prof.ru 24.10.2014
			//Запрос.УстановитьПараметр("ТипЦен", ТипЦен.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦен", ПЦ_Ценообразование.ВернутьБазовыйТипЦен(ТипЦен));
			//----m.ionov@a-prof.ru---
			Запрос.УстановитьПараметр("ТипЦенРасчетный", ТипЦен);
			Запрос.УстановитьПараметр("СпособРасчета", ТипЦен.СпособРасчетаЦены);
			Запрос.УстановитьПараметр("ПроцентНаценки", ТипЦен.ПроцентСкидкиНаценки);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		КонецЕсли;

		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
		|	ВЫБОР	КОГДА сНоменклатура.Услуга И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
		|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
		|	КОНЕЦ                               КАК ЕдиницаИзмерения,
		|";
		Если ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(ВложенныйЗапрос.ПроцентСкидкиНаценки, &ПроцентНаценки) КАК ПроцентСкидкиНаценки,
			|	ЕСТЬNULL(ВложенныйЗапрос.СпособРасчетаЦены, &СпособРасчета) КАК СпособРасчетаЦены,
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	ЦеныНоменклатурыСрезПоследних.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура
		|	   И ТипЦен = &ТипЦен И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
		|	   ) КАК ЦеныНоменклатурыСрезПоследних
		|";
		Если ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|		ЦеныНоменклатурыСрезПоследних.СпособРасчетаЦены КАК СпособРасчетаЦены,
			|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура
			|		   И ТипЦен = &ТипЦенРасчетный
			|		   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
			|		   ) КАК ЦеныНоменклатурыСрезПоследних
			|	) КАК ВложенныйЗапрос
			|ПО
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.Номенклатура КАК сНоменклатура
		|ПО
		|	сНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	сНоменклатура.Ссылка = &Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
				
			Если ТипЦен.Рассчитывается Тогда
				ВалютаТекущая = ТипЦен.ВалютаЦены;
				
				ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(Выборка.Цена, Выборка.Валюта, ВалютаТекущая, 0, 0, Дата);

				Если Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					ПолученнаяЦена = ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, ПолученнаяЦена, ВалютаТекущая, ВалютаТекущая);
				ИначеЕсли Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					//m.ionov@a-prof.ru 24.10.2014
					//ПолученнаяЦена = ПолученнаяЦена * (1 + Выборка.ПроцентСкидкиНаценки / 100);
					Если Не ТипЦен.БазовыйТипЦен.Рассчитывается Тогда
						ПолученнаяЦена = ПолученнаяЦена * (1 + Выборка.ПроцентСкидкиНаценки / 100);
					Иначе
						СписокРазузлования = Новый СписокЗначений;
						ТипЦенБаза = ТипЦен; 
						Сч = 0;
						Пока Сч < 4 И ТипЦенБаза.Рассчитывается Цикл
							Сч = Сч + 1;
							
							Если ТипЦенБаза.Рассчитывается Тогда
								СписокРазузлования.Вставить(0, ТипЦенБаза.ПроцентСкидкиНаценки); 
								ТипЦенБаза = ТипЦенБаза.БазовыйТипЦен;
							КонецЕсли;
						КонецЦикла;
						
						Для каждого ПроцентСкидкиНаценки Из СписокРазузлования Цикл
							
							ПолученнаяЦена = ПолученнаяЦена * (1 + ПроцентСкидкиНаценки.Значение / 100)	
							
						КонецЦикла; 
					КонецЕсли;					
					//----m.ionov@a-prof.ru---
				КонецЕсли;
			Иначе
				ВалютаТекущая = Выборка.Валюта;
				
				ПолученнаяЦена = Выборка.Цена;
			КонецЕсли;

			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, Валюта, Курс, Кратность, Дата);
			
		КонецЕсли;
	КонецЕсли;

	ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена);
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ПолученнаяЦена = ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
	КонецЕсли;
	
	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуНоменклатуры()

// Функция возвращает процент скидки (наценки) для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, используется, например, для.получения наценки цены в рознице.
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "Характеристики номенклатуры",
//  ТипЦен                     - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                       - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата.
//  ТолькоИзРегистра           - булево, "Истина" если необходимо получать данные только из регистра.
//  НетДанных                  - булево, устанавливается в "Ложь" если нет данных в регистре сведений, "Истина" если есть.
//
// Возвращаемое значение:
//  Число, значение процента скидки (наценки).
//
Функция ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ТипЦен, Дата = Неопределено, ТолькоИзРегистра = Ложь, НетДанных = Истина, ВернутьВсегда = Ложь) Экспорт

	НетДанных = Истина;

	ХарактеристикиНоменклатуры = ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры);

	// Если дата не заполнена, возьмем рабочую дату.
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;

	ПроцентСкидкиНаценки = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроцентСкидкиНаценки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен
	|                                                         И ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикаНоменклатуры УБЫВ
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		НетДанных = Ложь;
	КонецЕсли;

	Если (ТипЦен.Рассчитывается И Не ТолькоИзРегистра) Или ВернутьВсегда Тогда
		Если НЕ ЗначениеЗаполнено(ПроцентСкидкиНаценки) Тогда // процент скидки задан в типе цен
			ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;

	Возврат ПроцентСкидкиНаценки;

КонецФункции // ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры()

// Функция возвращает цену контрагента для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "Характеристики номенклатуры",
//  Контрагент                 - ссылка на элемент справочника "Контрагенты", для которого надо получить цену,
//  ТипЦен                     - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                       - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения           - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                               цену, если не заполнен, то заполняется единицей цены
//  Валюта                     - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                               если не заполнен, то заполняется валютой цены
//  Курс                       - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                               сведений "Курсы валют".
//  Кратность                  - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                               сведений "Курсы валют".
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуКонтрагента(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Контрагент,
	                            ТипЦен, Дата = Неопределено, ЕдиницаИзмерения = Неопределено,
	                            Валюта = Неопределено, Курс = 0, Кратность = 1,
	                            ДоговорКонтрагента = Неопределено, УсловиеПродаж = Неопределено, Спецификация = Неопределено) Экспорт  //m.ionov@a-prof.ru 26/11/2013 - Добавили передачу спецификации из заказа поставщику

	ХарактеристикиНоменклатуры = ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры);

	Дата = ПолучитьАктуальнуюДатуРасчетаЦен(Дата);

	ПолученнаяЦена = 0;

	Если ДоговорКонтрагента <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
		
		Запрос.УстановитьПараметр("Спецификация", Спецификация); //m.ionov@a-prof.ru 26/11/2013

		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПоставок.Цена,
		|	УсловияПоставок.ЕдиницаИзмерения,
		|	УсловияПоставок.ВалютаЦены
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата,
		|	   ДоговорКонтрагента = &Договор И Номенклатура = &Номенклатура
		|	   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)"
		+ ?(Спецификация = Неопределено ИЛИ Не ЗначениеЗаполнено(Спецификация), "","
		|      И Регистратор = &Спецификация") + "
		|) КАК УсловияПоставок
		|ГДЕ
		|	УсловияПоставок.Цена <> 0
		|УПОРЯДОЧИТЬ ПО
		|	УсловияПоставок.ХарактеристикаНоменклатуры УБЫВ
		|";

		Запрос.Текст = ТекстЗапроса;

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.ВалютаЦены, Валюта, Курс, Кратность, Дата);
		КонецЕсли;
	КонецЕсли;

	Если ПолученнаяЦена = 0 Тогда // особых условий нет
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);

		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыКонтрагентов.Цена,
		|	ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения,
		|	ЦеныНоменклатурыКонтрагентов.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен
		|	   И ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)) КАК ЦеныНоменклатурыКонтрагентов
		|УПОРЯДОЧИТЬ ПО
		|	ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.Валюта, Валюта, Курс, Кратность, КонецДня(Дата));
		КонецЕсли;
	КонецЕсли;

	ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена);

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуКонтрагента()

// Выполняем пересчет документа после изменений в форме "Цены и валюта".
//
// Параметры: 
//  ДокументОбъект                 - документ; 
//  СпособЗаполненияЦен            - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//                                  "при продаже" или "при покупке".
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СкидкаУстановлена              - переменная мСкидкаУстановлена модуля формы документа.
//  СтруктураЗначений              - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                                   документа до и после их изменеия в общей форме).
//  Автозаполнение                 - признак автозаполнения
//
Процедура ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект, СпособЗаполненияЦен,
	                                            СтруктураРеквизитовДокумента,
	                                            ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,
	                                            СкидкаУстановлена, СтруктураЗначений, Автозаполнение) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

	ИспользоватьКолонкуСкладПриПродаже = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	                                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	НеРассчитыватьПоРозничнымСкладам = (ТипЗнч(ДокументОбъект) = Тип ("ДокументОбъект.ОтчетОРозничныхПродажах"))
	                                    И (ИспользоватьКолонкуСкладПриПродаже);

	// если в табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		НадоПересчитывать = Истина;
	КонецЕсли;

	СтруктураПоиска = Новый Структура; // Для поиска в результате запроса
	ПересчитатьЦенуПоФлагамНалогов = Ложь; // Инициализация переменной

	ЕстьЦена                       = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСумма                      = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПередачи               = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПередачи              = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПоступления            = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПоступления           = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаСтарая                 = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаСтарая                = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьФактурнаяСтоимость         = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьХарактеристикаНоменклатуры = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаТовара                = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаТовара", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаНДС                   = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьПлановаяСебестоимость      = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПлановаяСебестоимость", МетаданныеДокумента, ИмяТабличнойЧасти);

	// Определим необходимость перерасчета цены.
	ПересчитатьЦенуПоФлагамНалогов = ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений);

	// Если задано пользователем, то надо перезаполнить табличную часть по новому типу цен
	Если СтруктураЗначений.ПерезаполнитьЦеныПоТипу и ЕстьЦена Тогда

		СкладИзДокумента = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента);

		Если СкладИзДокумента = Неопределено Тогда
			СкладИзДокумента = ОбщегоНазначения.ПолучитьРеквизитШапки("СкладОрдер", ДокументОбъект, МетаданныеДокумента);
		КонецЕсли;

		Спецификация = ОбщегоНазначения.ПолучитьРеквизитШапки("УЗ_Спецификация", ДокументОбъект, МетаданныеДокумента);  //m.ionov@a-prof.ru 26/11/2013
		
		//m.ionov@a-prof.ru 01.10.2014
		//Делаем чтобы цены определялись только по строчно и в одном запросе
		//// Получить нужные цены запросом
		Если Не СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
			РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначений,
														СпособЗаполненияЦен,
														ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Номенклатура"),
														ДокументОбъект.Дата,
														ОбщегоНазначения.ПолучитьРеквизитШапки("Контрагент", ДокументОбъект, МетаданныеДокумента),
														?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаЗаказаПоставщику"),ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект.ЗаказПоставщику, ДокументОбъект.ЗаказПоставщику.Метаданные()),ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента)),    //m.ionov@a-prof.ru 26/11/2013
														СкладИзДокумента, Спецификация);

			ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();
		КонецЕсли;
		//----m.ionov@a-prof.ru---

		СтруктураПоиска = Новый Структура; // структура для поиска в результате запроса

		// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			// В Отчете о розничных продажах по "Цены и валюта" цена пересчитывается только для оптовых складов.
			Если НеРассчитыватьПоРозничнымСкладам
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад)
			   И СтрокаТабличнойЧасти.Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				Продолжить;
			КонецЕсли;

			// Если у нас способ заполнения цен "по розничным ценам", то перезаполнять по типу можно
			// только для услуг, для Товаров на розничном складе цена является измерением регистра остатков.
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам
			   И Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтарыйКоэффициент = 0;
			Если Автозаполнение И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтарыйКоэффициент = СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
			Иначе
				ХарактеристикаНоменклатуры = Неопределено;
			КонецЕсли;

			//m.ionov@a-prof.ru 01.10.2014
			//ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект, СтрокаТабличнойЧасти, СтруктураПоиска,
			//								   ВыборкаРезультатЗапросаЦен, СтруктураЗначений,
			//								   СпособЗаполненияЦен, ХарактеристикаНоменклатуры);
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
				
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПЦ_ТипЦен", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					//Тип цен берем только из табличной части, если тип цен не задан то и цены не будет
					ТекТипЦен = СтрокаТабличнойЧасти.ПЦ_ТипЦен;
		
				Иначе
					ТекТипЦен = СтруктураЗначений.НовыйТипЦен;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
										ТекТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
										СтруктураЗначений.НовыйВалютаДокумента, СтруктураЗначений.НовыйКурсДокумента, СтруктураЗначений.НовыйКратностьДокумента, ,
										ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
										ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента),
										ОбщегоНазначения.ПолучитьРеквизитШапки("Грузополучатель", ДокументОбъект, МетаданныеДокумента), //m.ionov@a-prof.ru 02.10.2014 Добавили передачу адреса поставки
										ОбщегоНазначения.ПолучитьРеквизитШапки("Контрагент", ДокументОбъект, МетаданныеДокумента)); //m.ionov@a-prof.ru 02.10.2014 Добавили передачу контрагента
										
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
						СтруктураЗначений.НовыйТипЦен.ЦенаВключаетНДС,
						МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
						И ДокументОбъект.УчитыватьНДС,
						МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
						И ДокументОбъект.СуммаВключаетНДС,
						?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));

			Иначе
				ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект, СтрокаТабличнойЧасти, СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен, СтруктураЗначений,
			                                   СпособЗаполненияЦен, ХарактеристикаНоменклатуры);
			КонецЕсли;

			Если Автозаполнение И СтарыйКоэффициент > 0 Тогда
				Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * СтарыйКоэффициент
					                                  /СтрокаТабличнойЧасти.Коэффициент;
				КонецЕсли;
			КонецЕсли;

			Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
				Если ЕстьЦенаПередачи Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
					                                    СтруктураЗначений.ТекущийВалютаДокумента,
					                                    СтруктураЗначений.НовыйВалютаДокумента,
					                                    СтруктураЗначений.ТекущийКурсДокумента,
					                                    СтруктураЗначений.НовыйКурсДокумента,
					                                    СтруктураЗначений.ТекущийКратностьДокумента,
					                                    СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаПоступления Тогда
					СтрокаТабличнойЧасти.ЦенаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
					                                       СтруктураЗначений.ТекущийВалютаДокумента,
					                                       СтруктураЗначений.НовыйВалютаДокумента,
					                                       СтруктураЗначений.ТекущийКурсДокумента,
					                                       СтруктураЗначений.НовыйКурсДокумента,
					                                       СтруктураЗначений.ТекущийКратностьДокумента,
					                                       СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаПоступления Тогда
						СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаСтарая Тогда
					СтрокаТабличнойЧасти.ЦенаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
					                                  СтруктураЗначений.ТекущийВалютаДокумента,
					                                  СтруктураЗначений.НовыйВалютаДокумента,
					                                  СтруктураЗначений.ТекущийКурсДокумента,
					                                  СтруктураЗначений.НовыйКурсДокумента,
					                                  СтруктураЗначений.ТекущийКратностьДокумента,
					                                  СтруктураЗначений.НовыйКратностьДокумента);

					Если ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;

				ИначеЕсли ЕстьСуммаСтарая Тогда
					СтрокаТабличнойЧасти.СуммаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
					                                   СтруктураЗначений.ТекущийВалютаДокумента,
					                                   СтруктураЗначений.НовыйВалютаДокумента,
					                                   СтруктураЗначений.ТекущийКурсДокумента,
					                                   СтруктураЗначений.НовыйКурсДокумента,
					                                   СтруктураЗначений.ТекущийКратностьДокумента,
					                                   СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
				Если ЕстьФактурнаяСтоимость Тогда
					СтрокаТабличнойЧасти.ЕстьФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
					                                              СтруктураЗначений.ТекущийВалютаДокумента,
					                                              СтруктураЗначений.НовыйВалютаДокумента,
					                                              СтруктураЗначений.ТекущийКурсДокумента,
					                                              СтруктураЗначений.НовыйКурсДокумента,
					                                              СтруктураЗначений.ТекущийКратностьДокумента,
					                                              СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;

				Если ЕстьПлановаяСебестоимость Тогда
					Если ЕстьПлановаяСебестоимость Тогда
						СтрокаТабличнойЧасти.ПлановаяСебестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ПлановаяСебестоимость,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);

						Если ПересчитатьЦенуПоФлагамНалогов Тогда
								СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ПлановаяСебестоимость,
								                                                                     Неопределено,
								                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
								                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
								                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС,
								                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Выполним действия при изменении цены
			// Розничную цену будем рассчитывать только тогда, когда задается процент наценки.
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентРозничнойНаценки", МетаданныеДокумента, ИмяТабличнойЧасти)
			   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
			КонецЕсли;

			Если ЕстьСумма Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			
			Если ЕстьСуммаНДС И ЕстьСумма Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

		КонецЦикла; // Цикл по ТЧ для заполнения цен при изменении типа цен

	ИначеЕсли (ИмяТабличнойЧасти = "ОбъектыСтроительства" или ИмяТабличнойЧасти = "НематериальныеАктивы") И ЕстьСумма И ЕстьСуммаНДС И НЕ ЕстьЦена Тогда // таб. часть ОбъектыСтроительства
	
		Если ПересчитатьЦенуПоФлагамНалогов
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		   
			Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти]Цикл
			
				СтрокаТабличнойЧасти.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Сумма, 
					Неопределено,
					СтруктураЗначений.ТекущийСуммаВключаетНДС,
					СтруктураЗначений.НовыйУчитыватьНДС,
					СтруктураЗначений.НовыйСуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					
				//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				
				Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
					СтрокаТабличнойЧасти.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
						СтруктураЗначений.ТекущийВалютаДокумента,
						СтруктураЗначений.НовыйВалютаДокумента,
						СтруктураЗначений.ТекущийКурсДокумента,
						СтруктураЗначений.НовыйКурсДокумента,
						СтруктураЗначений.ТекущийКратностьДокумента,
						СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
			Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти]Цикл
			
				СтрокаТабличнойЧасти.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
					СтруктураЗначений.ТекущийВалютаДокумента,
					СтруктураЗначений.НовыйВалютаДокумента,
					СтруктураЗначений.ТекущийКурсДокумента,
					СтруктураЗначений.НовыйКурсДокумента,
					СтруктураЗначений.ТекущийКратностьДокумента,
					СтруктураЗначений.НовыйКратностьДокумента);
			КонецЦикла;
		КонецЕсли;
	
	Иначе

		Если СтруктураЗначений.ПересчитатьЦеныПоВалюте ИЛИ ПересчитатьЦенуПоФлагамНалогов Тогда


			// В цикле по табличной части перезаполняем цены, приводя их к текущим валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти]Цикл

				// В случае, если поменялась валюта
				Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
					Если ЕстьЦена Тогда
						СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);

						Если ЕстьПлановаяСебестоимость Тогда
							СтрокаТабличнойЧасти.ПлановаяСебестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ПлановаяСебестоимость,
							                                     СтруктураЗначений.ТекущийВалютаДокумента,
							                                     СтруктураЗначений.НовыйВалютаДокумента,
							                                     СтруктураЗначений.ТекущийКурсДокумента,
							                                     СтруктураЗначений.НовыйКурсДокумента,
							                                     СтруктураЗначений.ТекущийКратностьДокумента,
							                                     СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
							                                                                     Неопределено,
							                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
							                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС,
							                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

							Если ЕстьПлановаяСебестоимость Тогда
								СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ПлановаяСебестоимость,
								                                                                     Неопределено,
								                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
								                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
								                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС,
								                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
							КонецЕсли;
						КонецЕсли;

						Если ЕстьСумма Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						Если ЕстьСуммаНДС И ЕстьСумма Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;

					Иначе
						Если ЕстьСуммаТовара Тогда
							СтрокаТабличнойЧасти.СуммаТовара = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаТовара,
							                                     СтруктураЗначений.ТекущийВалютаДокумента,
							                                     СтруктураЗначений.НовыйВалютаДокумента,
							                                     СтруктураЗначений.ТекущийКурсДокумента,
							                                     СтруктураЗначений.НовыйКурсДокумента,
							                                     СтруктураЗначений.ТекущийКратностьДокумента,
							                                     СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						Если ЕстьСумма Тогда
							СтрокаТабличнойЧасти.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
							                                     СтруктураЗначений.ТекущийВалютаДокумента,
							                                     СтруктураЗначений.НовыйВалютаДокумента,
							                                     СтруктураЗначений.ТекущийКурсДокумента,
							                                     СтруктураЗначений.НовыйКурсДокумента,
							                                     СтруктураЗначений.ТекущийКратностьДокумента,
							                                     СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						Если ЕстьСуммаНДС И ЕстьСумма Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
					КонецЕсли;

					Если ЕстьЦенаПередачи Тогда
						СтрокаТабличнойЧасти.ЦенаПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						
						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.ЦенаПередачи = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ЦенаПередачи,
							                                                                     Неопределено,
							                                                                     СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                                                                     СтруктураЗначений.НовыйУчитыватьНДС,
							                                                                     СтруктураЗначений.НовыйСуммаВключаетНДС,
							                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						Если ЕстьСуммаПередачи Тогда
							СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
						
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДСПередачи", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЕстьЦенаПоступления Тогда
						СтрокаТабличнойЧасти.ЦенаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаПоступления Тогда
							СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьЦенаСтарая Тогда
						СтрокаТабличнойЧасти.ЦенаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаСтарая Тогда
							СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					ИначеЕсли ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
						                                     СтруктураЗначений.ТекущийВалютаДокумента,
						                                     СтруктураЗначений.НовыйВалютаДокумента,
						                                     СтруктураЗначений.ТекущийКурсДокумента,
						                                     СтруктураЗначений.НовыйКурсДокумента,
						                                     СтруктураЗначений.ТекущийКратностьДокумента,
						                                     СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;
					Если ЕстьФактурнаяСтоимость Тогда
						СтрокаТабличнойЧасти.ФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
						                                             СтруктураЗначений.ТекущийВалютаДокумента,
						                                             СтруктураЗначений.НовыйВалютаДокумента,
						                                             СтруктураЗначений.ТекущийКурсДокумента,
						                                             СтруктураЗначений.НовыйКурсДокумента,
						                                             СтруктураЗначений.ТекущийКратностьДокумента,
						                                             СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;

				Иначе
					Если ЕстьЦена Тогда

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
							                            Неопределено,
							                            СтруктураЗначений.ТекущийСуммаВключаетНДС,
							                            СтруктураЗначений.НовыйУчитыватьНДС,
							                            СтруктураЗначений.НовыйСуммаВключаетНДС,
							                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						Если ЕстьСумма Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

							Если ЕстьСуммаНДС Тогда
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если ЕстьЦенаПередачи Тогда

					// Если надо пересчитать цены при изменении флагов налогообложения
					Если ПересчитатьЦенуПоФлагамНалогов
					   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						СтрокаТабличнойЧасти.ЦенаПередачи = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ЦенаПередачи,
																							 Неопределено,
																							 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																							 СтруктураЗначений.НовыйУчитыватьНДС,
																							 СтруктураЗначений.НовыйСуммаВключаетНДС,
																							 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					КонецЕсли;

					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;

					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДСПередачи", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
					КонецЕсли;

				КонецЕсли;

				// Розничную цену будем рассчитывать только тогда, когда задается процент наценки.
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентРозничнойНаценки", МетаданныеДокумента, ИмяТабличнойЧасти)
				   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныВалюта()

// Рассчитываем итоговую плановую себестоимость по документу
//
// Параметры: 
//  ДокументОбъект - объект документа, в котором надо рассчитать итоговую плановую себестоимость
//
// Возвращаемое значение:
//  Итоговая плановая себестоимость по документу со всеми налогами.
//
Функция ИтогПлановаяСебестоимость(ДокументОбъект) Экспорт

	Перем СуммаПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается
		Возврат Неопределено;
	КонецЕсли;

	ИтогПлановаяСебестоимость = 0;

	// Суммируем значения плановой себестоимости по каждой строке табличной части
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл

		ОбработкаТабличныхЧастей.ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СуммаПлановойСебестоимости);

		// Если хотя бы в одной строке плановая себестоимость будет неопределенной,
		// то считаем, что и итоговая плановая себестоимость по документу
		// также будет неопределенной.
		Если СуммаПлановойСебестоимости = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость + СуммаПлановойСебестоимости;

	КонецЦикла;

	Возврат ИтогПлановаяСебестоимость;

КонецФункции // ИтогПлановаяСебестоимость()

// Рассчитываем итоговое отклонение от плановой себестоимости по документу
//
// Параметры: 
//  ДокументОбъект                           - объект документа, в котором надо рассчитать 
//                                             итоговое отклонение от плановой себестоимости
//  ПроцентОтклоненияОтПлановойСебестоимости - в этот параметр будет помещено значение.
//
// Возвращаемое значение:
//  Итоговое отклонение от плановой себестоимости по документу со всеми налогами.
//
Функция ПолучитьИтоговоеОтклонениеОтПлановойСебестоимости(ДокументОбъект, ПроцентОтклоненияОтПлановойСебестоимости = 0) Экспорт

	Перем ИтогОтклонениеОтПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается
		Возврат Неопределено;
	КонецЕсли;

	ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость(ДокументОбъект);
	
	Если ИтогПлановаяСебестоимость = Неопределено Тогда

		// Если итоговая плановая себестоимость неопределена, 
		// информация об отклонение от плановой себестоимости будет неопределенной.
		ИтогОтклонениеОтПлановойСебестоимости		= Неопределено;
		ПроцентОтклоненияОтПлановойСебестоимости	= Неопределено;
	Иначе
		
		// Если итоговая плановая себестоимость определена, рассчитываем отклонение.
		ИтогОтклонениеОтПлановойСебестоимости		= УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект, "Товары") - ИтогПлановаяСебестоимость;

	КонецЕсли;

	Если ИтогПлановаяСебестоимость = 0 Тогда
		ПроцентОтклоненияОтПлановойСебестоимости = Неопределено;
	Иначе
		ПроцентОтклоненияОтПлановойСебестоимости = (ИтогОтклонениеОтПлановойСебестоимости / ИтогПлановаяСебестоимость) * 100;
	КонецЕсли;

	Возврат ИтогОтклонениеОтПлановойСебестоимости;

КонецФункции // ПолучитьИтоговоеОтклонениеОтПлановойСебестоимости()

// По реквизитам редактируемого документа устанавливает реквизиты общей формы "Цены и Валюта".
//
// Параметры: 
//  ФормаЦеныВалюты                - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                 - объект редактируемого документа
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//                                   Множество возможных ключей: (ТипЦен, ВалютаДокумента, КурсДокумента, 
//								     КратностьДокумента, УчитыватьНДС, СуммаВключаетНДС);
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать, 
//                                   по умолчанию - "Товары".
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  НовыйТипЦенДляУстановки        - тип цен, который по возможности нужно установить как новый в форме;
//
Процедура УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект,
	                                                СтруктураРеквизитовДокумента, ИмяТабличнойЧасти,
	                                                ВалютаРегламентированногоУчета,
	                                                НовыйТипЦенДляУстановки = Неопределено)

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	НадоПересчитывать   = Ложь;

	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ФормаЦеныВалюты.ТабличнаяЧастьПуста = Не НадоПересчитывать;

	// Для получения курса на дату
	ФормаЦеныВалюты.ДатаКурса = ДокументОбъект.Дата;

	// определим текущую валюту взиморасчетов
	ТекущийВалютаВзаиморасчетов = "";
	Контрагент                  = "";

	Если СтруктураРеквизитовДокумента.Свойство("БезКонтроляВалютыВзаиморасчетов") Тогда
		ТекущийВалютаВзаиморасчетов                 = СтруктураРеквизитовДокумента.БезКонтроляВалютыВзаиморасчетов;
		ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
		ФормаЦеныВалюты.ПересчитатьЦеныПоВалюте     = Истина;

		Запрос = Новый Запрос;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|УПОРЯДОЧИТЬ ПО
		|	Валюта";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(Выборка.Валюта);
		КонецЕсли;

		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаОчистки = Ложь;
	Иначе
		Если СтруктураРеквизитовДокумента.Свойство("ГТДИмпорт") Тогда
			//В документе ГТДИмпорт возможны два варианта указания договора - в реквизите ДоговорКонтрагента и в реквитите ДоговорКонтрагентаРегл
			Если ДокументОбъект.ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ИначеЕсли ДокументОбъект.ДоговорКонтрагентаРегл <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагентаРегл.ВалютаВзаиморасчетов;
				ФормаЦеныВалюты.ТекущийКурсВзаиморасчетов = 1;
				ФормаЦеныВалюты.ТекущийКратностьВзаиморасчетов = 1;
			КонецЕсли;
			ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;

		ИначеЕсли НЕ СтруктураРеквизитовДокумента.Свойство("ВызовКорректировкаЗаказа")
		   И ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если ДокументОбъект.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;

			ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
		ИначеЕсли СтруктураРеквизитовДокумента.Свойство("Контрагент", Контрагент) Тогда
			ДоговорКонтрагента = "";

			Если СтруктураРеквизитовДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) Тогда
				ТекущийВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ТекущийВалютаВзаиморасчетов = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;

			ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
		КонецЕсли;

		// может быть, надо ограничить список доступных валют для документа?
		// сделаем это, если, во-первых, существует валюта документа, во-вторых, существует валюта взаиморасчетов
		// (т.е. передается курс взаиморасчетов)
		Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов")
		   И НЕ СтруктураРеквизитовДокумента.Свойство("КурсДокумента")
		   И СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента") Тогда
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = Истина;
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(ТекущийВалютаВзаиморасчетов);

			Если ВалютаРегламентированногоУчета <> ТекущийВалютаВзаиморасчетов Тогда
				ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(ВалютаРегламентированногоУчета);
			КонецЕсли;

			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаВыбора  = Ложь;
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаОчистки = Ложь;
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если ФормаЦеныВалюты.ЭлементыФормы.Найти("Текущий" + ЭлементСтруктуры.Ключ) <> Неопределено
		 Или ЭлементСтруктуры.Ключ = "КратностьВзаиморасчетов" Или ЭлементСтруктуры.Ключ = "КратностьДокумента" Тогда
			ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ] = ОбщегоНазначения.ПолучитьРеквизитШапки(ЭлементСтруктуры.Ключ,
			   ДокументОбъект, МетаданныеДокумента, ЭлементСтруктуры.Значение);

			Если ЭлементСтруктуры.Значение = Неопределено Тогда
				ФормаЦеныВалюты["Новый" + ЭлементСтруктуры.Ключ] = ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ];
			Иначе
				ФормаЦеныВалюты["Новый" + ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Установить текущий курс и кратность
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		ФормаЦеныВалюты.ТекущийКурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		ФормаЦеныВалюты.ТекущийКратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;

	// Вызов при изменении значения договора
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииЗначенияДоговора") Тогда
		ФормаЦеныВалюты.НовыйВалютаДокумента    = ТекущийВалютаВзаиморасчетов;
		ФормаЦеныВалюты.ПересчитатьЦеныПоВалюте = Истина;
	КонецЕсли;

	// Вызов при изменении учетной политики розничная торговля облагается ЕНВД
	ЗначениеВызова = Неопределено;
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииУчетнойПолитикиЕНВД", ЗначениеВызова) Тогда
		Если ЗначениеВызова = "Покупка" Тогда
			ФормаЦеныВалюты.НовыйНДСВключенВСтоимость = Истина;
		Иначе
			ФормаЦеныВалюты.НовыйУчитыватьНДС     = Истина;
			ФормаЦеныВалюты.НовыйСуммаВключаетНДС = Ложь;
		КонецЕсли;
	КонецЕсли;

	// если в списке есть тип цен
	// и
	// если ТипЦен в документе имеет тип ТипЦенКонтрагентов, надо установить владельца
	// предполагаем, что если существует реквизит ТипЦен, то он может принимать два значения - 
	// типы цен номенклатуры и типы цен контрагентов
	Если СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
	   и Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = "ТипыЦенНоменклатурыКонтрагентов" Тогда

		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Контрагент = ДокументОбъект.Контрагент;
		Иначе
			СтруктураРеквизитовДокумента.Свойство("Контрагент", Контрагент);
		КонецЕсли;

		ФормаЦеныВалюты.ЭлементыФормы.НовыйТипЦен.ВыборПоВладельцу = Контрагент;
		// сохраним владельца для дальнейшего использования
		ФормаЦеныВалюты.ВладелецТипаЦен = Контрагент;

	КонецЕсли;

	// если уже при открытии новый тип цен отличается от текущего, надо обработать изменения реквизитов формы
	Если ФормаЦеныВалюты.НовыйТипЦен <> ФормаЦеныВалюты.ТекущийТипЦен 
	   и ЗначениеЗаполнено(ФормаЦеныВалюты.НовыйТипЦен) Тогда
		// надо установить флаг СуммаВключаемНДС из типа цены
		ФормаЦеныВалюты.НовыйСуммаВключаетНДС = ФормаЦеныВалюты.НовыйТипЦен.ЦенаВключаетНДС;
	КонецЕсли;

	// если мы используем режим выбора из списка для новой валюты документа
	// и в списке нет нужной валюты, установим новую валюту в валюту взаиморасчетов
	Если ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = Истина
	   И ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.НайтиПоЗначению(ФормаЦеныВалюты.НовыйВалютаДокумента) = Неопределено Тогда
		ФормаЦеныВалюты.НовыйВалютаДокумента = ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора[0].Значение;
	КонецЕсли;

	// Если передан НовыйТипЦенДляУстановки и он подходит по параметрам, установим его в форме
	Если НовыйТипЦенДляУстановки <> Неопределено
	   И СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
	   И Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = НовыйТипЦенДляУстановки.Метаданные().Имя Тогда
		ФормаЦеныВалюты.НовыйТипЦен = НовыйТипЦенДляУстановки;
	КонецЕсли;

КонецПроцедуры // УстановитьТекущиеРеквизитыФормаЦеныВалюты()

// Устанавливает доступность реквизитов общей формы "Цены и Валюта" согласно переданной структуре.
//
// Параметры: 
//  ФормаЦеныВалюты                    - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//
Процедура УстановитьДоступностьРеквизитовФормаЦеныВалюты(ФормаЦеныВалюты, СтруктураРеквизитовДокумента,	СтруктураНеРедактируемыхРеквизитов = Неопределено)

	ФормаЦеныВалюты.ЭлементыФормы.НовыйТипЦен.Доступность                       = СтруктураРеквизитовДокумента.Свойство("ТипЦен");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.Доступность              = СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсДокумента.Доступность                = СтруктураРеквизитовДокумента.Свойство("КурсДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность           = СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйУчитыватьНДС.Доступность                 = СтруктураРеквизитовДокумента.Свойство("УчитыватьНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйСуммаВключаетНДС.Доступность             = СтруктураРеквизитовДокумента.Свойство("СуммаВключаетНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйНДСВключенВСтоимость.Доступность         = СтруктураРеквизитовДокумента.Свойство("НДСВключенВСтоимость");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйРегистрироватьЦеныПоставщика.Доступность = СтруктураРеквизитовДокумента.Свойство("РегистрироватьЦеныПоставщика");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйИспользоватьПлановуюСебестоимость.Доступность = СтруктураРеквизитовДокумента.Свойство("ИспользоватьПлановуюСебестоимость");

	// Если задана структура исключений, то сделаем недоступными соответствующие реквизиты.
	Если СтруктураНеРедактируемыхРеквизитов <> Неопределено Тогда

		Для каждого ЭлементСтруктуры Из СтруктураНеРедактируемыхРеквизитов Цикл
			ФормаЦеныВалюты.ЭлементыФормы["Новый" + ЭлементСтруктуры.Ключ].Доступность = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьРеквизитовФормаЦеныВалюты()

// Устанавливает новые значения реквизитов документа по значениям, выбранным в общей форме "Цены и Валюта"
//
// Параметры: 
//  СтруктураРезультирующихЗначений	- структура, содержащая значения реквизитов документа до и после их 
//									  изменеия в форме "Цены и валюта",
//  ДокументОбъект					- объект редактируемого документа,
//  СтруктураРеквизитовДокумента	- структура, задает список обрабатываемых реквизитов документа,
// 									  если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//
Процедура УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураРезультирующихЗначений, ДокументОбъект, 
	                                                             СтруктураРеквизитовДокумента) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если СтруктураРезультирующихЗначений.Свойство("Новый" + ЭлементСтруктуры.Ключ)
		   И МетаданныеДокумента.Реквизиты.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
			НовоеЗначениеРеквизита = СтруктураРезультирующихЗначений["Новый" + ЭлементСтруктуры.Ключ];

			Если ДокументОбъект[ЭлементСтруктуры.Ключ] <> НовоеЗначениеРеквизита Тогда
				ДокументОбъект[ЭлементСтруктуры.Ключ] = НовоеЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта()

// Определяет необходимость пересчета табличной части документа при изменении флагов налогообложения 
// в форме "Цены и валюты".
//
// Параметры: 
//  СтруктураЗначений	- структура, содержащая значения реквизитов документа до и после их 
//						  изменеия в форме "Цены и валюта".
//
Функция ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений)

		Возврат (СтруктураЗначений.НовыйУчитыватьНДС <> СтруктураЗначений.ТекущийУчитыватьНДС) ИЛИ
		        (СтруктураЗначений.НовыйСуммаВключаетНДС <> СтруктураЗначений.ТекущийСуммаВключаетНДС);

КонецФункции // ОпределитьНеобходимостьПерерасчетаЦены()

// Получает контекст общей формы "Цены и Валюта", устанавливает в ней значения и доступность реквизитов 
// по значениям, заданным в документе, и открывает форму. 
//
// Параметры: 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать, 
//                                       по умолчанию - "Товары".
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//
// Возвращаемое значение:
//  Структура, содержащая значения текущих и устанавливаемых значений для реквизитов документа.
//
Функция ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
	                              СтруктураНеРедактируемыхРеквизитов = Неопределено,
	                              ИмяТабличнойЧасти, НовыйТипЦенДляУстановки = Неопределено, ВсегдаУчитыватьНДС = Ложь) Экспорт

	ФормаЦеныВалюты = ПолучитьОбщуюФорму("ФормаЦеныИВалюта"); 

	// Установим текущие реквизиты.
	УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект, 
	                                          СтруктураРеквизитовДокумента, ИмяТабличнойЧасти, 
	                                          ВалютаРегламентированногоУчета, НовыйТипЦенДляУстановки);

	// передача в форму списка реквизитов документа 											   
	СписокРеквизитов = новый СписокЗначений;
	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		СписокРеквизитов.Добавить("Новый"+ЭлементСтруктуры.Ключ);
	КонецЦикла;
	ФормаЦеныВалюты.СписокРеквизитов = СписокРеквизитов;
										  
											  
	// Доступность реквизитов формы.
	УстановитьДоступностьРеквизитовФормаЦеныВалюты(ФормаЦеныВалюты, СтруктураРеквизитовДокумента, 
	                                               СтруктураНеРедактируемыхРеквизитов);

	Если ВсегдаУчитыватьНДС Тогда
		ФормаЦеныВалюты.ЗапретитьОтключениеУчитыватьНДС = Истина;
	КонецЕсли;
											   
	// Теперь можно и открывать форму, она вернет результат своей работы.
	Возврат ФормаЦеныВалюты.ОткрытьМодально();

КонецФункции // ОткрытьФормуЦеныИВалюта()

// Формирует запрос, возвращающий цены для заданных позиций номенклатуры.
// Используется для получения цен по ТЧ редактирумого документа для последующего пересчета ТЧ
//
// Параметры: 
//  СтруктураЗначений   - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                        документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен - значение перечисления "Способы заполнения цен", определяет по какому из регистров
//                       ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос.
//  МассивНоменклатуры  - массив, содержащий ссылки на элементы номенклатуры, по которым надо узнать цены.
//  ДатаДокумента       - дата, на которую надо узнать цены 
//  Контрагент          - ссылка на справочник контрагентов, определяет для какого когнтрагента надо узнать цены,
//  ДоговорКонтрагента  - ссылка на договор контрагента.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоЦенам(СтруктураЗначений, СпособЗаполненияЦен, МассивНоменклатуры,
                                  ДатаДокумента, Контрагент, ДоговорКонтрагента = Неопределено,
                                  Склад = Неопределено, Спецификация = Неопределено) Экспорт  //m.ionov@a-prof.ru 26/11/2013

	Перем УсловиеПродаж;

	СтруктураЗначений.Свойство("НовыйУсловиеПродаж", УсловиеПродаж);

	// Достанем нужные цены запросом.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Дата", ПолучитьАктуальнуюДатуРасчетаЦен(ДатаДокумента));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("УсловиеПродаж", УсловиеПродаж);

	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
		Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	БазовыеЦены.Номенклатура                                     КАК Номенклатура,
		|	БазовыеЦены.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
		|	БазовыеЦены.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
		|	БазовыеЦены.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	БазовыеЦены.ТипЦен                                           КАК ТипЦен,
		|	ЕСТЬNULL(	ВЫБОР	КОГДА БазовыеЦены.Цена = 0.00 И БазовыеЦены.ТипЦен.Рассчитывается	
		|						ТОГДА ЦеныНоменклатурыРассчитываемые.Цена
		|						ИНАЧЕ БазовыеЦены.Цена
		|				КОНЕЦ, 0.00)                                     КАК Цена,
		|	ВЫБОР	КОГДА БазовыеЦены.Цена = 0.00 И БазовыеЦены.ТипЦен.Рассчитывается
		|			ТОГДА ЕСТЬNULL(БазовыеЦены.СпособРасчетаЦены, БазовыеЦены.ТипЦен.СпособРасчетаЦены)
		|			ИНАЧЕ NULL
		|	КОНЕЦ                                                        КАК СпособРасчетаЦены,
		|	ВЫБОР	КОГДА БазовыеЦены.Цена = 0.00 И БазовыеЦены.ТипЦен.Рассчитывается
		|			ТОГДА ЕСТЬNULL(БазовыеЦены.ПроцентСкидкиНаценки, БазовыеЦены.ТипЦен.ПроцентСкидкиНаценки)
		|			ИНАЧЕ 0.00
		|	КОНЕЦ                                                        КАК ПроцентСкидкиНаценки,
		|	ВЫБОР	КОГДА БазовыеЦены.Цена = 0.00 И БазовыеЦены.ТипЦен.Рассчитывается
		|			ТОГДА ЦеныНоменклатурыРассчитываемые.Валюта
		|			ИНАЧЕ БазовыеЦены.Валюта
		|	КОНЕЦ                                                        КАК ВалютаЦены,
		|	ВЫБОР	КОГДА БазовыеЦены.Цена = 0.00 И БазовыеЦены.ТипЦен.Рассчитывается
		|			ТОГДА ЦеныНоменклатурыРассчитываемые.ЕдиницаИзмерения
		|			ИНАЧЕ БазовыеЦены.ЕдиницаИзмерения
		|	КОНЕЦ                                                        КАК ЕдиницаИзмеренияЦены,
		|	ВЫБОР	КОГДА БазовыеЦены.Цена = 0.00 И БазовыеЦены.ТипЦен.Рассчитывается
		|			ТОГДА ЦеныНоменклатурыРассчитываемые.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ БазовыеЦены.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ                                                        КАК КоэффициентЕдиницыЦены,
		|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0.00)       КАК ПроцентНаценкиПоУсловиямПродаж,
		|	КурсыВалютСрезПоследних.Кратность                            КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс                                 КАК КурсВалютыЦены
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СпрНоменклатура.Номенклатура КАК Номенклатура,
		|		ЕСТЬNULL(УсловияПоставок.ХарактеристикаНоменклатуры, ЕСТЬNULL(ЦеныНоменклатуры.ХарактеристикаНоменклатуры, СпрНоменклатура.ХарактеристикаНоменклатуры)) КАК ХарактеристикаНоменклатуры,
		|		ВЫБОР	КОГДА ТипыЦенПоГруппам.ТипЦен ЕСТЬ NULL
		|						ИЛИ ТипыЦенПоГруппам.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
		|				ТОГДА &ТипЦен
		|				ИНАЧЕ ТипыЦенПоГруппам.ТипЦен
		|		КОНЕЦ КАК ТипЦен,
		|		ВЫБОР	КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL ИЛИ ЕСТЬNULL(УсловияПоставок.Цена, 0.00) = 0.00
		|				ТОГДА ЦеныНоменклатуры.СпособРасчетаЦены
		|				ИНАЧЕ NULL
		|		КОНЕЦ КАК СпособРасчетаЦены,
		|		ВЫБОР	КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL ИЛИ ЕСТЬNULL(УсловияПоставок.Цена, 0.00) = 0.00
		|				ТОГДА ЦеныНоменклатуры.ПроцентСкидкиНаценки
		|				ИНАЧЕ 0.00
		|		КОНЕЦ КАК ПроцентСкидкиНаценки,
		|		ВЫБОР	КОГДА ЕСТЬNULL(УсловияПоставок.Цена, 0.00) = 0.00
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0.00)
		|				ИНАЧЕ ЕСТЬNULL(УсловияПоставок.Цена, 0.00)
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР	КОГДА ЕСТЬNULL(УсловияПоставок.Цена, 0.00) = 0.00
		|				ТОГДА ЦеныНоменклатуры.ЕдиницаИзмерения
		|				ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения
		|		КОНЕЦ КАК ЕдиницаИзмерения,
		|		ВЫБОР	КОГДА ЕСТЬNULL(УсловияПоставок.Цена, 0.00) = 0.00
		|				ТОГДА ЦеныНоменклатуры.Валюта
		|				ИНАЧЕ УсловияПоставок.ВалютаЦены
		|		КОНЕЦ КАК Валюта
		|		ИЗ
		|		(	ВЫБРАТЬ
		|				СпрХарактеристики.Владелец КАК Номенклатура,
		|				СпрХарактеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|			ГДЕ
		|				СпрХарактеристики.Владелец В (&МассивНоменклатуры)
					
		|			ОБЪЕДИНИТЬ ВСЕ
					
		|			ВЫБРАТЬ
		|				СпрНоменклатура.Ссылка КАК Номенклатура,
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.Номенклатура КАК СпрНоменклатура
		|			ГДЕ
		|				СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
		|		) КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ТипыЦенПоГруппам
		|		ПО
		|			ТипыЦенПоГруппам.НоменклатурнаяЦеноваяГруппа = СпрНоменклатура.Номенклатура.ЦеноваяГруппа
		|			ИЛИ ТипыЦенПоГруппам.НоменклатурнаяЦеноваяГруппа = СпрНоменклатура.Номенклатура.НоменклатурнаяГруппа
		|		ЛЕВОЕ СОЕДИНЕНИЕ
				
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатуры
		|		ПО
		|			ЦеныНоменклатуры.Номенклатура = СпрНоменклатура.Номенклатура
		|			И ((ЦеныНоменклатуры.ТипЦен = ТипыЦенПоГруппам.ТипЦен ИЛИ (ТипыЦенПоГруппам.ТипЦен ЕСТЬ NULL ИЛИ ТипыЦенПоГруппам.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка))
		|			И ЦеныНоменклатуры.ТипЦен = &ТипЦен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, ДоговорКонтрагента = &ДоговорКонтрагента И Номенклатура В (&МассивНоменклатуры)) КАК УсловияПоставок
		|		ПО
		|			(УсловияПоставок.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И УсловияПоставок.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры)
		|			ИЛИ УсловияПоставок.Номенклатура = СпрНоменклатура.Номенклатура
		|		ГДЕ
		|			СпрНоменклатура.Номенклатура в (&МассивНоменклатуры)
		|	) КАК БазовыеЦены
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыРассчитываемые
		|ПО
		|	БазовыеЦены.Номенклатура = ЦеныНоменклатурыРассчитываемые.Номенклатура
		|	И БазовыеЦены.ХарактеристикаНоменклатуры = ЦеныНоменклатурыРассчитываемые.ХарактеристикаНоменклатуры
		|	И БазовыеЦены.ТипЦен.БазовыйТипЦен = ЦеныНоменклатурыРассчитываемые.ТипЦен
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ПО
		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.Валюта
		|	ИНАЧЕ
		|		БазовыеЦены.Валюта
		|	КОНЕЦ = КурсыВалютСрезПоследних.Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
		|ПО
		|	БазовыеЦены.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|	ИЛИ БазовыеЦены.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|ГДЕ
		|	ЕСТЬNULL(ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.Цена
		|	ИНАЧЕ
		|		БазовыеЦены.Цена
		|	КОНЕЦ, 0) <> 0
		|";
	ИначеЕсли СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);
		
		Запрос.УстановитьПараметр("Спецификация", Спецификация); //m.ionov@a-prof.ru 26/11/2013

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура,
		|	ЦеныКонтрагентаСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	ЦеныКонтрагентаСрезПоследних.Валюта КАК ВалютаЦены,
		|	ЦеныКонтрагентаСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияЦены,
		|	ЦеныКонтрагентаСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК КоэффициентЕдиницыЦены,
		|	ЦеныКонтрагентаСрезПоследних.Цена,
		|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0) КАК ПроцентНаценкиПоУсловиямПродаж,
		|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
		|ИЗ
		|(
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ЕСТЬNULL(УсловияПоставок.Номенклатура, ЦеныКонтрагента.Номенклатура) КАК Номенклатура,
		|			ЕСТЬNULL(УсловияПоставок.ХарактеристикаНоменклатуры, ЦеныКонтрагента.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|			ЕСТЬNULL(УсловияПоставок.ВалютаЦены, ЦеныКонтрагента.Валюта) КАК Валюта,
		|			ЕСТЬNULL(УсловияПоставок.Цена, ЦеныКонтрагента.Цена) КАК Цена,
		|			ЕСТЬNULL(УсловияПоставок.ЕдиницаИзмерения, ЦеныКонтрагента.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|	ИЗ
		|	(	
		|		ВЫБРАТЬ
		|			  ХарактеристикаНоменклатуры.Владелец КАК Номенклатура
		|			, ХарактеристикаНоменклатуры.ССЫЛКА КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаНоменклатуры
		|		ГДЕ ХарактеристикаНоменклатуры.Владелец В (&МассивНоменклатуры)
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			  Номенклатура.ССЫЛКА КАК Номенклатура
		|			, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			Справочник.Номенклатура КАК Номенклатура
		|		ГДЕ Номенклатура.Ссылка В (&МассивНоменклатуры)
		|	) КАК УсловияПоставокЦеныКонтрагента
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен) КАК ЦеныКонтрагента
		|	ПО
		|		ЦеныКонтрагента.Номенклатура = УсловияПоставокЦеныКонтрагента.Номенклатура
		|		И ЦеныКонтрагента.ХарактеристикаНоменклатуры = УсловияПоставокЦеныКонтрагента.ХарактеристикаНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ДоговорКонтрагента = &ДоговорКонтрагента" + ?(Спецификация = Неопределено ИЛИ Не ЗначениеЗаполнено(Спецификация),""," И Регистратор = &Спецификация") + ") КАК УсловияПоставок
		|	ПО
		|		УсловияПоставок.Номенклатура = УсловияПоставокЦеныКонтрагента.Номенклатура
		|		И УсловияПоставок.ХарактеристикаНоменклатуры = УсловияПоставокЦеныКонтрагента.ХарактеристикаНоменклатуры
		|		И УсловияПоставок.Цена <> 0
		|) КАК ЦеныКонтрагентаСрезПоследних
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ПО
		|	ЦеныКонтрагентаСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
		|ПО
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|	ИЛИ ЦеныКонтрагентаСрезПоследних.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|ГДЕ
		|	ЦеныКонтрагентаСрезПоследних.Цена <> 0
		|";
	ИначеЕсли СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
		Запрос.УстановитьПараметр("Склад", Склад);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныПродажные.Номенклатура,
		|	ЦеныПродажные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	ТаблицаКонстант.ВалютаРегламентированногоУчета КАК ВалютаЦены,
		|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияЦены,
		|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыЦены,
		|	ЦеныПродажные.Цена,
		|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0) КАК ПроцентНаценкиПоУсловиямПродаж,
		|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
		|ИЗ
		|	РегистрСведений.ЦеныАТТ.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И Склад = &Склад) КАК ЦеныПродажные
		|СОЕДИНЕНИЕ
		|	Константы КАК ТаблицаКонстант
		|ПО
		|	ИСТИНА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ПО
		|	ТаблицаКонстант.ВалютаРегламентированногоУчета = КурсыВалютСрезПоследних.Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
		|ПО
		|	ЦеныПродажные.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|	ИЛИ ЦеныПродажные.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|";
	КонецЕсли;

	// Результат запроса.
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоЦенам()

// Заполняет цену в строке ТЧ документа по реквизитам документа и текущим ценам в регистре сведений.
//
// Параметры: 
//  ДокументОбъект             - документ; 
//  СтрокаТабличнойЧасти       - строка табличной части редактируемого документа, 
//  СтруктураПоиска            - структра, содержит значение Номенклатуры для поиска в результате запроса, 
//  ВыборкаИзРезультатаЗапроса - результат запроса по текущим ценам, 
//  СтруктураЗначений          - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//						         документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен        - значение перечисления "Способы заполнения цен", влияет на расчет цен
//						         (см. описание в ПересчитатьЦенуПриИзмененииФлаговНалогов),
//  ХарактеристикаНоменклатуры - характеристика номенклатуры, для которой ищем цену
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект, СтрокаТабличнойЧасти, СтруктураПоиска, ВыборкаИзРезультатаЗапроса, 
											СтруктураЗначений, СпособЗаполненияЦен, ХарактеристикаНоменклатуры = Неопределено) Экспорт

	Перем НДСВСтроке;

	// получим имя табличной части и имя документа
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Родитель();

	Если Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Реквизиты.Найти("Цена") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Найдем товар из текущей строки документа в выборке из результата запроса.
	Если НЕ ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
		Возврат; // Искать нечего.
	КонецЕсли;

	ВыборкаИзРезультатаЗапроса.Сбросить(); 
	Если ХарактеристикаНоменклатуры = Неопределено 
	 Или ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
	Иначе
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
		Если Не НашлиВВыборке Тогда
			ВыборкаИзРезультатаЗапроса.Сбросить(); 
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			НашлиВВыборке = ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска);
		КонецЕсли;
	КонецЕсли;

	Если НашлиВВыборке Тогда // Нашли запись

		// Если для данного товара есть цена данного типа
		// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
		Если НЕ ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе // присваиваем значение цены и единицы цены
			СтруктураНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураЗначений.НовыйТипЦен.ВалютаЦены, ДокументОбъект.Дата);
			ТекущаяВалюта        = СтруктураЗначений.НовыйТипЦен.ВалютаЦены;
			ТекущийКурс          = СтруктураНовойВалюты.Курс;
			ТекущаяКратность     = СтруктураНовойВалюты.Кратность;

			ЭтоЦеныНоменклатуры = (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);

			// Переоределим тип цен, когда цены рассчитываются по типам цен номенклатуры
			Если ЭтоЦеныНоменклатуры Тогда
				СтруктураЗначений.НовыйТипЦен = ВыборкаИзРезультатаЗапроса.ТипЦен;
			КонецЕсли;

			Цена = ВыборкаИзРезультатаЗапроса.Цена;

			Если ЭтоЦеныНоменклатуры И СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда
				Если ВыборкаИзРезультатаЗапроса.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					Цена = Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентСкидкиНаценки / 100);
					Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, ВыборкаИзРезультатаЗапроса.ВалютаЦены,
					   ТекущаяВалюта, ВыборкаИзРезультатаЗапроса.КурсВалютыЦены, ТекущийКурс,
					   ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены, ТекущаяКратность);
				ИначеЕсли ВыборкаИзРезультатаЗапроса.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					Цена = ПолучитьЦенуПоЦеновымДиапазонам(СтруктураЗначений.НовыйТипЦен, ДокументОбъект.Дата, Цена, ТекущаяВалюта, ВыборкаИзРезультатаЗапроса.ВалютаЦены);

					СтруктураНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалюта, ДокументОбъект.Дата);
					ТекущийКурс          = СтруктураНовойВалюты.Курс;
					ТекущаяКратность     = СтруктураНовойВалюты.Кратность;
				КонецЕсли;
			Иначе
				ТекущаяВалюта = ВыборкаИзРезультатаЗапроса.ВалютаЦены;
				СтруктураТекущейВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалюта, ДокументОбъект.Дата);
				ТекущийКурс            = СтруктураТекущейВалюты.Курс;
				ТекущаяКратность       = СтруктураТекущейВалюты.Кратность;
			КонецЕсли;

			Цена = Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентНаценкиПоУсловиямПродаж / 100);

			// Пересчитываем цену в единицу измерения количества
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				Если СтрокаТабличнойЧасти.ЕдиницаИзмерения <> ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены Тогда
					КоэффициентКоличества = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					КоэффициентЦены       = ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены.Коэффициент;
					Цена = Цена * КоэффициентКоличества / КоэффициентЦены;
				КонецЕсли;
			КонецЕсли;

			Если ЭтоЦеныНоменклатуры Тогда
				Цена = ОкруглитьЦену(Цена, СтруктураЗначений.НовыйТипЦен.ПорядокОкругления,
				                     СтруктураЗначений.НовыйТипЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли;

			// Пересчитываем цену в валюту документа
			Если СтруктураЗначений.НовыйВалютаДокумента <> ТекущаяВалюта Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураЗначений.НовыйВалютаДокумента) Тогда

					ВалютаДокумента = глЗначениеПеременной("ВалютаУправленческогоУчета");
					СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
					КурсДокумента      = СтруктураВалюты.Курс;
					КратностьДокумента = СтруктураВалюты.Кратность;

					// В документе нет валюты, возьмем валюту регламентированного учета
					Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, 
														ТекущаяВалюта,
														ВалютаДокумента,
														ТекущийКурс,
														КурсДокумента,
														ТекущаяКратность,
														КратностьДокумента);

				Иначе

					Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, 
														ТекущаяВалюта,
														СтруктураЗначений.НовыйВалютаДокумента,
														ТекущийКурс,
														СтруктураЗначений.НовыйКурсДокумента,
														ТекущаяКратность,
														СтруктураЗначений.НовыйКратностьДокумента);

				КонецЕсли;
			КонецЕсли;

			// Пересчитываем цену по параметрам налогообложения.
			// Ставку определяем исходя из переданных параметров
			СтруктураЗначений.Свойство("ЕстьСтавкаНДСВТабличнойЧасти", НДСВСтроке);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
									СпособЗаполненияЦен,
									СтруктураЗначений.НовыйТипЦен.ЦенаВключаетНДС,
									СтруктураЗначений.НовыйУчитыватьНДС, СтруктураЗначений.НовыйСуммаВключаетНДС, 
									?(СтруктураЗначений.НовыйУчитыватьНДС, ?(НДСВСтроке = Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС), УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС)),0));

		КонецЕсли;

	Иначе // информации по цене этого товара нет в запросе 

		// Установим цену в ноль.
		СтрокаТабличнойЧасти.Цена = 0;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВСтрокеТабличнойЧасти()

// Рассчитываем сумму документа без учета скидки
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в котором надо посчитать сумму без скидки.
//
// Возвращаемое значение:
//  Сумма документа со всеми налогамии без учета скидки.
//
Функция ПолучитьСуммуДокументаБезСкидки(ТабличнаяЧасть) Экспорт

	СуммаДокумента = 0;

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СуммаПоСтроке = Окр(СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество, 2);
		СуммаДокумента = СуммаДокумента + СуммаПоСтроке;
	КонецЦикла;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаБезСкидки()

//ПолучитьЦенуНоменклатурыНоваяМетодика(..)
//Функция предназначена для формирования таблицы АП+Номенклатура+ТипЦены+Цена с и без НДС
//
//Параметры:
//Период - период получения данных по ценам (например срез последних к ценам номенклатуры),
//ПериодПолученияКурсовВалют - срез последних к курсам валют,
//ПересчитыватьЦеныВВалютуРегламентированногоУчета - пересчитывать в валюту рег. учета (рубли),
//Дивизион, Регион итд - могут принимать ссылку или массив значений
//
//На выходе таблица значений
Функция ПолучитьЦенуНоменклатурыНоваяМетодика(Период='00010101', ПериодПолученияКурсовВалют='00010101', ПересчитыватьЦеныВВалютуРегламентированногоУчета=Ложь,
	Дивизион=Неопределено, Регион=Неопределено, КаналПродаж=Неопределено, Контрагент=Неопределено, УсловиеПоставки=Неопределено, АдресПоставки=Неопределено,
	Проект=Неопределено, ТоварнаяКатегория=Неопределено, Брендообъем=Неопределено, Номенклатура=Неопределено, ТипЦен=Неопределено) Экспорт
	
	//АНОТАЦИЯ.
	//Запрос только на превый взгляд кажется сложным! :-))
	//Принцип работы:
	//Формируем таблицы все адреса поставки + вся номенклатура ГП
	//Получаем срез последних по регистру ценовых эшелонов (РегистрСведений.ПЦ_ЦеновыеЭшелоны.СрезПоследних(&Период, ))
	//Получаем срез последних по регистру исключений из ценовых эшелонов (РегистрСведений.ПЦ_ИсключенияИзЦеновыхЭшелонов.СрезПоследних(&Период, ))
	//Затем приводим ценовые эшелоны и исключения к полному дереву вида:
	//+Регион
	//	+Дивизион
	//		+КаналПродаж
	//			+Контрагент
	//				+УсловиеПоставки
	//					+АдресПоставки
	//						+ПроектГП
	//							+ТоварнаяКатегория
	//								+Брендообъем
	//									-Номенклатура
	//
	//На выходе у нас получается таблица АП+Номенклатура+ТипЦен
	//Затем получаем индивидуальные цены (по фильтру контрагент + номенклатура) и цены номенклатуры (по фильтру номенклатура)
	//Формируем таблицу АП+Номенклатура+ТипЦен+Цена без НДС
	//Полученные данные пересчитываем в валюту регламентированного учета (при необходимости)
	//Возвращаем результат.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресаПоставки.Владелец.Дивизион КАК Дивизион,
		|	АдресаПоставки.НСИ_Регион КАК Регион,
		|	АдресаПоставки.Владелец.НСИ_КаналПродаж КАК КаналПродаж,
		|	АдресаПоставки.Владелец КАК Контрагент,
		|	АдресаПоставки.НСИ_УсловияПоставки КАК УсловияПоставки,
		|	АдресаПоставки.Ссылка КАК АдресПоставки,
		|	ВЫБОР
		|		КОГДА АдресаПоставки.Владелец.НСИ_КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|				ИЛИ АдресаПоставки.НСИ_Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкаВПостроениеДерева
		|ПОМЕСТИТЬ втКонтрагентыИАП
		|ИЗ
		|	Справочник.АдресаПоставки КАК АдресаПоставки
		|ГДЕ
		|	АдресаПоставки.Владелец ССЫЛКА Справочник.Контрагенты
		|	И НЕ АдресаПоставки.Владелец.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|	И (НЕ &ФильтроватьПоДивизион
		|			ИЛИ АдресаПоставки.Владелец.Дивизион В (&Дивизион))
		|	И (НЕ &ФильтроватьПоРегион
		|			ИЛИ АдресаПоставки.НСИ_Регион В (&Регион))
		|	И (НЕ &ФильтроватьПоКаналПродаж
		|			ИЛИ АдресаПоставки.Владелец.НСИ_КаналПродаж В (&КаналПродаж))
		|	И (НЕ &ФильтроватьПоКонтрагент
		|			ИЛИ АдресаПоставки.Владелец В (&Контрагент))
		|	И (НЕ &ФильтроватьПоУсловиеПоставки
		|			ИЛИ АдресаПоставки.НСИ_УсловияПоставки В (&УсловиеПоставки))
		|	И (НЕ &ФильтроватьПоАдресПоставки
		|			ИЛИ АдресаПоставки.Ссылка В (&АдресПоставки))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтрагентыИАП.Контрагент,
		|	ПЦ_КатегорииТиповЦен.Ссылка КАК КатегорияТиповЦен
		|ПОМЕСТИТЬ втДоступныеКатегорииТиповЦен
		|ИЗ
		|	втКонтрагентыИАП КАК втКонтрагентыИАП,
		|	Справочник.ПЦ_КатегорииТиповЦен КАК ПЦ_КатегорииТиповЦен
		|ГДЕ
		|	втКонтрагентыИАП.Контрагент.НСИ_КатегорияТиповЦен = ЗНАЧЕНИЕ(Справочник.ПЦ_КатегорииТиповЦен.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	втКонтрагентыИАП.Контрагент,
		|	ПЦ_КатегорииТиповЦен.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втКонтрагентыИАП.Контрагент,
		|	втКонтрагентыИАП.Контрагент.НСИ_КатегорияТиповЦен
		|ИЗ
		|	втКонтрагентыИАП КАК втКонтрагентыИАП
		|ГДЕ
		|	НЕ втКонтрагентыИАП.Контрагент.НСИ_КатегорияТиповЦен = ЗНАЧЕНИЕ(Справочник.ПЦ_КатегорииТиповЦен.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	втКонтрагентыИАП.Контрагент,
		|	втКонтрагентыИАП.Контрагент.НСИ_КатегорияТиповЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДоступныеКатегорииТиповЦен.Контрагент КАК Контрагент,
		|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен
		|ПОМЕСТИТЬ втДоступныеТипыЦен
		|ИЗ
		|	втДоступныеКатегорииТиповЦен КАК втДоступныеКатегорииТиповЦен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
		|		ПО втДоступныеКатегорииТиповЦен.КатегорияТиповЦен = ТипыЦенНоменклатуры.ПЦ_Категория
		|
		|СГРУППИРОВАТЬ ПО
		|	втДоступныеКатегорииТиповЦен.Контрагент,
		|	ТипыЦенНоменклатуры.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	ТипЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Проект КАК Проект,
		|	СпрНоменклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	СпрНоменклатура.НСИ_Брендообъем КАК Брендообъем,
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Услуга,
		|	СпрНоменклатура.ЕдиницаХраненияОстатков,
		|	СпрНоменклатура.СтавкаНДС,
		|	СпрНоменклатура.Код,
		|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО (Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13))
		|			И (Штрихкоды.ЕдиницаИзмерения = СпрНоменклатура.ЕдиницаХраненияОстатков)
		|			И (Штрихкоды.Владелец = СпрНоменклатура.Ссылка)
		|ГДЕ
		|	НЕ СпрНоменклатура.МКЮ = ЗНАЧЕНИЕ(Справочник.ПРГ_МКЮ.ПустаяСсылка)
		|	И СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
		|	И НЕ СпрНоменклатура.ПометкаУдаления
		|	И (НЕ &ФильтроватьПоПроект
		|			ИЛИ СпрНоменклатура.Проект В (&Проект))
		|	И (НЕ &ФильтроватьПоТоварнаяКатегория
		|			ИЛИ СпрНоменклатура.НСИ_ТоварнаяКатегория В (&ТоварнаяКатегория))
		|	И (НЕ &ФильтроватьПоБрендообъем
		|			ИЛИ СпрНоменклатура.НСИ_Брендообъем В (&Брендообъем))
		|	И (НЕ &ФильтроватьПоНоменклатура
		|			ИЛИ СпрНоменклатура.Ссылка В (&Номенклатура))
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрНоменклатура.Проект,
		|	СпрНоменклатура.НСИ_ТоварнаяКатегория,
		|	СпрНоменклатура.НСИ_Брендообъем,
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Услуга,
		|	СпрНоменклатура.ЕдиницаХраненияОстатков,
		|	СпрНоменклатура.СтавкаНДС,
		|	СпрНоменклатура.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.Дивизион,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.Регион,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.КаналПродаж,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.Контрагент,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.УсловиеПоставки,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.АдресПоставки,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.ПроектГП КАК ПроектГП,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.Брендообъем КАК Брендообъем,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.Номенклатура КАК Номенклатура,
		|	ПЦ_ЦеновыеЭшелоныСрезПоследних.ТипЦен,
		|	ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоКонтрагенту,
		|	ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоНоменклатуре,
		|	ВЫБОР
		|		КОГДА ПЦ_ЦеновыеЭшелоныСрезПоследних.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ втИсходныеДанные
		|ИЗ
		|	РегистрСведений.ПЦ_ЦеновыеЭшелоны.СрезПоследних(&Период, ) КАК ПЦ_ЦеновыеЭшелоныСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки.Владелец.Дивизион
		|		ИНАЧЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Дивизион
		|	КОНЕЦ КАК Дивизион,
		|	ВЫБОР
		|		КОГДА НЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки.НСИ_Регион
		|		ИНАЧЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Регион
		|	КОНЕЦ КАК Регион,
		|	ВЫБОР
		|		КОГДА НЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки.Владелец.НСИ_КаналПродаж
		|		ИНАЧЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.КаналПродаж
		|	КОНЕЦ КАК КаналПродаж,
		|	ВЫБОР
		|		КОГДА НЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки.Владелец
		|		ИНАЧЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА НЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки.НСИ_УсловияПоставки
		|		ИНАЧЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.УсловиеПоставки
		|	КОНЕЦ КАК УсловияПоставки,
		|	ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки КАК АдресПоставки,
		|	ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.ПроектГП КАК Проект,
		|	ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.ТоварнаяКатегория,
		|	ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Брендообъем,
		|	ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Номенклатура,
		|	ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.ТипЦен,
		|	ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоКонтрагенту,
		|	ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоНоменклатуре,
		|	ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоТипуЦен
		|ПОМЕСТИТЬ втИсключения
		|ИЗ
		|	РегистрСведений.ПЦ_ИсключенияИзЦеновыхЭшелонов.СрезПоследних(&Период, ) КАК ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних
		|ГДЕ
		|	НЕ ПЦ_ИсключенияИзЦеновыхЭшелоновСрезПоследних.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсключения.Дивизион,
		|	втИсключения.Регион,
		|	втИсключения.КаналПродаж,
		|	втИсключения.Контрагент,
		|	втИсключения.УсловияПоставки КАК УсловиеПоставки,
		|	втИсключения.АдресПоставки,
		|	втИсключения.Проект КАК ПроектГП,
		|	втИсключения.ТоварнаяКатегория,
		|	втИсключения.Брендообъем,
		|	втИсключения.Номенклатура,
		|	втИсключения.ТипЦен,
		|	втИсключения.ПриоритетПоКонтрагенту,
		|	втИсключения.ПриоритетПоНоменклатуре,
		|	втИсключения.ПриоритетПоТипуЦен
		|ПОМЕСТИТЬ вт12
		|ИЗ
		|	втИсключения КАК втИсключения
		|ГДЕ
		|	НЕ втИсключения.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	втИсключения.Регион,
		|	втИсключения.КаналПродаж,
		|	втИсключения.Контрагент,
		|	втИсключения.УсловияПоставки,
		|	втИсключения.АдресПоставки,
		|	втИсключения.Проект,
		|	втИсключения.ТоварнаяКатегория,
		|	втИсключения.Брендообъем,
		|	втИсключения.Номенклатура,
		|	втИсключения.ТипЦен,
		|	втИсключения.ПриоритетПоКонтрагенту,
		|	втИсключения.ПриоритетПоНоменклатуре,
		|	втИсключения.ПриоритетПоТипуЦен
		|ИЗ
		|	втИсключения КАК втИсключения,
		|	(ВЫБРАТЬ
		|		втКонтрагентыИАП.Дивизион КАК Дивизион
		|	ИЗ
		|		втКонтрагентыИАП КАК втКонтрагентыИАП
		|	ГДЕ
		|		НЕ втКонтрагентыИАП.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		втКонтрагентыИАП.Дивизион) КАК ВложенныйЗапрос
		|ГДЕ
		|	втИсключения.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт12.Дивизион,
		|	вт12.Регион,
		|	вт12.КаналПродаж,
		|	вт12.Контрагент,
		|	вт12.УсловиеПоставки,
		|	вт12.АдресПоставки,
		|	вт12.ПроектГП,
		|	вт12.ТоварнаяКатегория,
		|	вт12.Брендообъем,
		|	вт12.Номенклатура,
		|	вт12.ТипЦен,
		|	вт12.ПриоритетПоКонтрагенту,
		|	вт12.ПриоритетПоНоменклатуре
		|ПОМЕСТИТЬ вт13
		|ИЗ
		|	вт12 КАК вт12
		|ГДЕ
		|	НЕ вт12.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт12.Дивизион КАК Дивизион,
		|		ВложенныйЗапрос.Регион КАК Регион,
		|		вт12.КаналПродаж КАК КаналПродаж,
		|		вт12.Контрагент КАК Контрагент,
		|		вт12.УсловиеПоставки КАК УсловиеПоставки,
		|		вт12.АдресПоставки КАК АдресПоставки,
		|		вт12.ПроектГП КАК ПроектГП,
		|		вт12.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт12.Брендообъем КАК Брендообъем,
		|		вт12.Номенклатура КАК Номенклатура,
		|		вт12.ТипЦен КАК ТипЦен,
		|		вт12.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт12.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре
		|	ИЗ
		|		вт12 КАК вт12
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.Регион КАК Регион
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.Дивизион) КАК ВложенныйЗапрос
		|			ПО вт12.Дивизион = ВложенныйЗапрос.Дивизион
		|	ГДЕ
		|		вт12.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт13.Дивизион,
		|	вт13.Регион,
		|	вт13.КаналПродаж,
		|	вт13.Контрагент,
		|	вт13.УсловиеПоставки,
		|	вт13.АдресПоставки,
		|	вт13.ПроектГП,
		|	вт13.ТоварнаяКатегория,
		|	вт13.Брендообъем,
		|	вт13.Номенклатура,
		|	вт13.ТипЦен,
		|	вт13.ПриоритетПоКонтрагенту,
		|	вт13.ПриоритетПоНоменклатуре
		|ПОМЕСТИТЬ вт14
		|ИЗ
		|	вт13 КАК вт13
		|ГДЕ
		|	НЕ вт13.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт13.Регион КАК Регион,
		|		вт13.Дивизион КАК Дивизион,
		|		ВложенныйЗапрос.КаналПродаж КАК КаналПродаж,
		|		вт13.Контрагент КАК Контрагент,
		|		вт13.УсловиеПоставки КАК УсловиеПоставки,
		|		вт13.АдресПоставки КАК АдресПоставки,
		|		вт13.ПроектГП КАК ПроектГП,
		|		вт13.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт13.Брендообъем КАК Брендообъем,
		|		вт13.Номенклатура КАК Номенклатура,
		|		вт13.ТипЦен КАК ТипЦен,
		|		вт13.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт13.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре
		|	ИЗ
		|		вт13 КАК вт13
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Регион КАК Регион,
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.КаналПродаж КАК КаналПродаж
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.Дивизион,
		|				втКонтрагентыИАП.КаналПродаж) КАК ВложенныйЗапрос
		|			ПО вт13.Регион = ВложенныйЗапрос.Регион
		|				И вт13.Дивизион = ВложенныйЗапрос.Дивизион
		|	ГДЕ
		|		вт13.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт14.Дивизион,
		|	вт14.Регион,
		|	вт14.КаналПродаж,
		|	вт14.Контрагент,
		|	вт14.УсловиеПоставки,
		|	вт14.АдресПоставки,
		|	вт14.ПроектГП,
		|	вт14.ТоварнаяКатегория,
		|	вт14.Брендообъем,
		|	вт14.Номенклатура,
		|	вт14.ТипЦен,
		|	вт14.ПриоритетПоКонтрагенту,
		|	вт14.ПриоритетПоНоменклатуре
		|ПОМЕСТИТЬ вт15
		|ИЗ
		|	вт14 КАК вт14
		|ГДЕ
		|	НЕ вт14.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт14.Регион КАК Регион,
		|		вт14.Дивизион КАК Дивизион,
		|		вт14.КаналПродаж КАК КаналПродаж,
		|		ВложенныйЗапрос.Контрагент КАК Контрагент,
		|		вт14.УсловиеПоставки КАК УсловиеПоставки,
		|		вт14.АдресПоставки КАК АдресПоставки,
		|		вт14.ПроектГП КАК ПроектГП,
		|		вт14.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт14.Брендообъем КАК Брендообъем,
		|		вт14.Номенклатура КАК Номенклатура,
		|		вт14.ТипЦен КАК ТипЦен,
		|		вт14.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт14.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре
		|	ИЗ
		|		вт14 КАК вт14
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Регион КАК Регион,
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|				втКонтрагентыИАП.Контрагент КАК Контрагент
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Дивизион,
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.КаналПродаж,
		|				втКонтрагентыИАП.Контрагент) КАК ВложенныйЗапрос
		|			ПО вт14.Регион = ВложенныйЗапрос.Регион
		|				И вт14.Дивизион = ВложенныйЗапрос.Дивизион
		|				И вт14.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|	ГДЕ
		|		вт14.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре
		|ПОМЕСТИТЬ вт16
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт15.Дивизион КАК Дивизион,
		|		вт15.Регион КАК Регион,
		|		вт15.КаналПродаж КАК КаналПродаж,
		|		вт15.Контрагент КАК Контрагент,
		|		вт15.УсловиеПоставки КАК УсловиеПоставки,
		|		вт15.АдресПоставки КАК АдресПоставки,
		|		вт15.ПроектГП КАК ПроектГП,
		|		вт15.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт15.Брендообъем КАК Брендообъем,
		|		вт15.Номенклатура КАК Номенклатура,
		|		вт15.ТипЦен КАК ТипЦен,
		|		вт15.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт15.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре
		|	ИЗ
		|		вт15 КАК вт15
		|	ГДЕ
		|		НЕ вт15.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВложенныйЗапрос.Дивизион,
		|		ВложенныйЗапрос.Регион,
		|		ВложенныйЗапрос.КаналПродаж,
		|		ВложенныйЗапрос.Контрагент,
		|		ВложенныйЗапрос.УсловияПоставки,
		|		ВложенныйЗапрос.АдресПоставки,
		|		ВложенныйЗапрос.ПроектГП,
		|		ВложенныйЗапрос.ТоварнаяКатегория,
		|		ВложенныйЗапрос.Брендообъем,
		|		ВложенныйЗапрос.Номенклатура,
		|		ВложенныйЗапрос.ТипЦен,
		|		ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|		ВложенныйЗапрос.ПриоритетПоНоменклатуре
		|	ИЗ
		|		(ВЫБРАТЬ
		|			вт15.Дивизион КАК Дивизион,
		|			вт15.Регион КАК Регион,
		|			вт15.КаналПродаж КАК КаналПродаж,
		|			вт15.Контрагент КАК Контрагент,
		|			ВложенныйЗапрос.УсловияПоставки КАК УсловияПоставки,
		|			вт15.АдресПоставки КАК АдресПоставки,
		|			вт15.ПроектГП КАК ПроектГП,
		|			вт15.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			вт15.Брендообъем КАК Брендообъем,
		|			вт15.Номенклатура КАК Номенклатура,
		|			вт15.ТипЦен КАК ТипЦен,
		|			вт15.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|			вт15.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре
		|		ИЗ
		|			вт15 КАК вт15
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					втКонтрагентыИАП.Дивизион КАК Дивизион,
		|					втКонтрагентыИАП.Регион КАК Регион,
		|					втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|					втКонтрагентыИАП.Контрагент КАК Контрагент,
		|					втКонтрагентыИАП.УсловияПоставки КАК УсловияПоставки
		|				ИЗ
		|					втКонтрагентыИАП КАК втКонтрагентыИАП
		|				ГДЕ
		|					НЕ втКонтрагентыИАП.УсловияПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					втКонтрагентыИАП.Регион,
		|					втКонтрагентыИАП.Дивизион,
		|					втКонтрагентыИАП.КаналПродаж,
		|					втКонтрагентыИАП.Контрагент,
		|					втКонтрагентыИАП.УсловияПоставки) КАК ВложенныйЗапрос
		|				ПО вт15.Дивизион = ВложенныйЗапрос.Дивизион
		|					И вт15.Регион = ВложенныйЗапрос.Регион
		|					И вт15.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|					И вт15.Контрагент = ВложенныйЗапрос.Контрагент
		|		ГДЕ
		|			вт15.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтрагентыИАП.Дивизион,
		|	втКонтрагентыИАП.Регион,
		|	втКонтрагентыИАП.КаналПродаж,
		|	втКонтрагентыИАП.Контрагент,
		|	втКонтрагентыИАП.УсловияПоставки КАК УсловиеПоставки,
		|	вт16.АдресПоставки,
		|	вт16.ПроектГП,
		|	вт16.ТоварнаяКатегория,
		|	вт16.Брендообъем,
		|	вт16.Номенклатура,
		|	вт16.ТипЦен,
		|	вт16.ПриоритетПоКонтрагенту,
		|	вт16.ПриоритетПоНоменклатуре
		|ПОМЕСТИТЬ вт17
		|ИЗ
		|	вт16 КАК вт16
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ПО вт16.АдресПоставки = втКонтрагентыИАП.АдресПоставки
		|			И (НЕ вт16.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт16.Дивизион,
		|	вт16.Регион,
		|	вт16.КаналПродаж,
		|	вт16.Контрагент,
		|	вт16.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	вт16.ПроектГП,
		|	вт16.ТоварнаяКатегория,
		|	вт16.Брендообъем,
		|	вт16.Номенклатура,
		|	вт16.ТипЦен,
		|	вт16.ПриоритетПоКонтрагенту,
		|	вт16.ПриоритетПоНоменклатуре
		|ИЗ
		|	вт16 КАК вт16
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втКонтрагентыИАП.Дивизион КАК Дивизион,
		|			втКонтрагентыИАП.Регион КАК Регион,
		|			втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|			втКонтрагентыИАП.Контрагент КАК Контрагент,
		|			втКонтрагентыИАП.УсловияПоставки КАК УсловияПоставки,
		|			втКонтрагентыИАП.АдресПоставки КАК АдресПоставки
		|		ИЗ
		|			втКонтрагентыИАП КАК втКонтрагентыИАП
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втКонтрагентыИАП.Дивизион,
		|			втКонтрагентыИАП.Регион,
		|			втКонтрагентыИАП.КаналПродаж,
		|			втКонтрагентыИАП.Контрагент,
		|			втКонтрагентыИАП.УсловияПоставки,
		|			втКонтрагентыИАП.АдресПоставки) КАК ВложенныйЗапрос
		|		ПО вт16.Дивизион = ВложенныйЗапрос.Дивизион
		|			И вт16.Регион = ВложенныйЗапрос.Регион
		|			И вт16.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|			И вт16.Контрагент = ВложенныйЗапрос.Контрагент
		|			И вт16.УсловиеПоставки = ВложенныйЗапрос.УсловияПоставки
		|ГДЕ
		|	вт16.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт17.Дивизион,
		|	вт17.Регион,
		|	вт17.КаналПродаж,
		|	вт17.Контрагент,
		|	вт17.УсловиеПоставки,
		|	вт17.АдресПоставки,
		|	вт17.ПроектГП,
		|	вт17.ТоварнаяКатегория,
		|	вт17.Брендообъем,
		|	вт17.Номенклатура,
		|	вт17.ТипЦен,
		|	вт17.ПриоритетПоКонтрагенту,
		|	вт17.ПриоритетПоНоменклатуре
		|ПОМЕСТИТЬ вт18
		|ИЗ
		|	вт17 КАК вт17
		|ГДЕ
		|	НЕ вт17.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт17.Дивизион,
		|	вт17.Регион,
		|	вт17.КаналПродаж,
		|	вт17.Контрагент,
		|	вт17.УсловиеПоставки,
		|	вт17.АдресПоставки,
		|	ВложенныйЗапрос.Проект,
		|	вт17.ТоварнаяКатегория,
		|	вт17.Брендообъем,
		|	вт17.Номенклатура,
		|	вт17.ТипЦен,
		|	вт17.ПриоритетПоКонтрагенту,
		|	вт17.ПриоритетПоНоменклатуре
		|ИЗ
		|	вт17 КАК вт17,
		|	(ВЫБРАТЬ
		|		втНоменклатура.Проект КАК Проект
		|	ИЗ
		|		втНоменклатура КАК втНоменклатура
		|	ГДЕ
		|		НЕ втНоменклатура.Проект = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		втНоменклатура.Проект) КАК ВложенныйЗапрос
		|ГДЕ
		|	вт17.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт18.Дивизион,
		|	вт18.Регион,
		|	вт18.КаналПродаж,
		|	вт18.Контрагент,
		|	вт18.УсловиеПоставки,
		|	вт18.АдресПоставки,
		|	вт18.ПроектГП,
		|	вт18.ТоварнаяКатегория,
		|	вт18.Брендообъем,
		|	вт18.Номенклатура,
		|	вт18.ТипЦен,
		|	вт18.ПриоритетПоКонтрагенту,
		|	вт18.ПриоритетПоНоменклатуре
		|ПОМЕСТИТЬ вт19
		|ИЗ
		|	вт18 КАК вт18
		|ГДЕ
		|	НЕ вт18.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт18.Дивизион,
		|	вт18.Регион,
		|	вт18.КаналПродаж,
		|	вт18.Контрагент,
		|	вт18.УсловиеПоставки,
		|	вт18.АдресПоставки,
		|	вт18.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	вт18.Брендообъем,
		|	вт18.Номенклатура,
		|	вт18.ТипЦен,
		|	вт18.ПриоритетПоКонтрагенту,
		|	вт18.ПриоритетПоНоменклатуре
		|ИЗ
		|	вт18 КАК вт18
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втНоменклатура.Проект КАК Проект,
		|			втНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория
		|		ИЗ
		|			втНоменклатура КАК втНоменклатура
		|		ГДЕ
		|			НЕ втНоменклатура.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втНоменклатура.Проект,
		|			втНоменклатура.ТоварнаяКатегория) КАК ВложенныйЗапрос
		|		ПО вт18.ПроектГП = ВложенныйЗапрос.Проект
		|ГДЕ
		|	вт18.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт19.Дивизион,
		|	вт19.Регион,
		|	вт19.КаналПродаж,
		|	вт19.Контрагент,
		|	вт19.УсловиеПоставки,
		|	вт19.АдресПоставки,
		|	вт19.ПроектГП,
		|	вт19.ТоварнаяКатегория,
		|	вт19.Брендообъем,
		|	вт19.Номенклатура,
		|	вт19.ТипЦен,
		|	вт19.ПриоритетПоКонтрагенту,
		|	вт19.ПриоритетПоНоменклатуре
		|ПОМЕСТИТЬ вт20
		|ИЗ
		|	вт19 КАК вт19
		|ГДЕ
		|	НЕ вт19.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт19.Дивизион,
		|	вт19.Регион,
		|	вт19.КаналПродаж,
		|	вт19.Контрагент,
		|	вт19.УсловиеПоставки,
		|	вт19.АдресПоставки,
		|	вт19.ПроектГП,
		|	вт19.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	вт19.Номенклатура,
		|	вт19.ТипЦен,
		|	вт19.ПриоритетПоКонтрагенту,
		|	вт19.ПриоритетПоНоменклатуре
		|ИЗ
		|	вт19 КАК вт19
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втНоменклатура.Проект КАК Проект,
		|			втНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			втНоменклатура.Брендообъем КАК Брендообъем
		|		ИЗ
		|			втНоменклатура КАК втНоменклатура
		|		ГДЕ
		|			НЕ втНоменклатура.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втНоменклатура.Проект,
		|			втНоменклатура.ТоварнаяКатегория,
		|			втНоменклатура.Брендообъем) КАК ВложенныйЗапрос
		|		ПО вт19.ПроектГП = ВложенныйЗапрос.Проект
		|			И вт19.ТоварнаяКатегория = ВложенныйЗапрос.ТоварнаяКатегория
		|ГДЕ
		|	вт19.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт20.Дивизион,
		|	вт20.Регион,
		|	вт20.КаналПродаж,
		|	вт20.Контрагент,
		|	вт20.УсловиеПоставки,
		|	вт20.АдресПоставки,
		|	вт20.ПроектГП,
		|	вт20.ТоварнаяКатегория,
		|	вт20.Брендообъем,
		|	вт20.Номенклатура,
		|	вт20.ТипЦен,
		|	вт20.ПриоритетПоКонтрагенту,
		|	вт20.ПриоритетПоНоменклатуре,
		|	вт20.ПриоритетПоКонтрагенту + вт20.ПриоритетПоНоменклатуре КАК ПриоритетТипаЦен
		|ПОМЕСТИТЬ вт21
		|ИЗ
		|	вт20 КАК вт20
		|ГДЕ
		|	НЕ вт20.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт20.Дивизион,
		|	вт20.Регион,
		|	вт20.КаналПродаж,
		|	вт20.Контрагент,
		|	вт20.УсловиеПоставки,
		|	вт20.АдресПоставки,
		|	вт20.ПроектГП,
		|	вт20.ТоварнаяКатегория,
		|	вт20.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	вт20.ТипЦен,
		|	вт20.ПриоритетПоКонтрагенту,
		|	вт20.ПриоритетПоНоменклатуре,
		|	вт20.ПриоритетПоКонтрагенту + вт20.ПриоритетПоНоменклатуре
		|ИЗ
		|	вт20 КАК вт20
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втНоменклатура.Проект КАК Проект,
		|			втНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			втНоменклатура.Брендообъем КАК Брендообъем,
		|			втНоменклатура.Номенклатура КАК Номенклатура
		|		ИЗ
		|			втНоменклатура КАК втНоменклатура
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втНоменклатура.Проект,
		|			втНоменклатура.ТоварнаяКатегория,
		|			втНоменклатура.Брендообъем,
		|			втНоменклатура.Номенклатура) КАК ВложенныйЗапрос
		|		ПО вт20.ПроектГП = ВложенныйЗапрос.Проект
		|			И вт20.ТоварнаяКатегория = ВложенныйЗапрос.ТоварнаяКатегория
		|			И вт20.Брендообъем = ВложенныйЗапрос.Брендообъем
		|ГДЕ
		|	вт20.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсходныеДанные.Дивизион,
		|	втИсходныеДанные.Регион,
		|	втИсходныеДанные.КаналПродаж,
		|	втИсходныеДанные.Контрагент,
		|	втИсходныеДанные.УсловиеПоставки,
		|	втИсходныеДанные.АдресПоставки,
		|	втИсходныеДанные.ПроектГП,
		|	втИсходныеДанные.ТоварнаяКатегория,
		|	втИсходныеДанные.Брендообъем,
		|	втИсходныеДанные.Номенклатура,
		|	втИсходныеДанные.ТипЦен,
		|	втИсходныеДанные.ПриоритетПоКонтрагенту,
		|	втИсходныеДанные.ПриоритетПоНоменклатуре,
		|	втИсходныеДанные.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт1
		|ИЗ
		|	втИсходныеДанные КАК втИсходныеДанные
		|ГДЕ
		|	НЕ втИсходныеДанные.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	(ВЫБРАТЬ
		|		втИсходныеДанные.Регион КАК Регион,
		|		ВложенныйЗапрос.Дивизион КАК Дивизион,
		|		втИсходныеДанные.КаналПродаж КАК КаналПродаж,
		|		втИсходныеДанные.Контрагент КАК Контрагент,
		|		втИсходныеДанные.УсловиеПоставки КАК УсловиеПоставки,
		|		втИсходныеДанные.АдресПоставки КАК АдресПоставки,
		|		втИсходныеДанные.ПроектГП КАК ПроектГП,
		|		втИсходныеДанные.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		втИсходныеДанные.Брендообъем КАК Брендообъем,
		|		втИсходныеДанные.Номенклатура КАК Номенклатура,
		|		втИсходныеДанные.ТипЦен КАК ТипЦен,
		|		втИсходныеДанные.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		втИсходныеДанные.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		втИсходныеДанные.ПриоритетПоУсловиюПоставки КАК ПриоритетПоУсловиюПоставки
		|	ИЗ
		|		втИсходныеДанные КАК втИсходныеДанные,
		|		(ВЫБРАТЬ
		|			втКонтрагентыИАП.Дивизион КАК Дивизион
		|		ИЗ
		|			втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ГДЕ
		|			НЕ втКонтрагентыИАП.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втКонтрагентыИАП.Дивизион) КАК ВложенныйЗапрос
		|	ГДЕ
		|		втИсходныеДанные.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт1.Дивизион,
		|	вт1.Регион,
		|	вт1.КаналПродаж,
		|	вт1.Контрагент,
		|	вт1.УсловиеПоставки,
		|	вт1.АдресПоставки,
		|	вт1.ПроектГП,
		|	вт1.ТоварнаяКатегория,
		|	вт1.Брендообъем,
		|	вт1.Номенклатура,
		|	вт1.ТипЦен,
		|	вт1.ПриоритетПоКонтрагенту,
		|	вт1.ПриоритетПоНоменклатуре,
		|	вт1.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт2
		|ИЗ
		|	вт1 КАК вт1
		|ГДЕ
		|	НЕ вт1.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт1.Дивизион КАК Дивизион,
		|		ВложенныйЗапрос.Регион КАК Регион,
		|		вт1.КаналПродаж КАК КаналПродаж,
		|		вт1.Контрагент КАК Контрагент,
		|		вт1.УсловиеПоставки КАК УсловиеПоставки,
		|		вт1.АдресПоставки КАК АдресПоставки,
		|		вт1.ПроектГП КАК ПроектГП,
		|		вт1.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт1.Брендообъем КАК Брендообъем,
		|		вт1.Номенклатура КАК Номенклатура,
		|		вт1.ТипЦен КАК ТипЦен,
		|		вт1.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт1.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт1.ПриоритетПоУсловиюПоставки КАК ПриоритетПоУсловиюПоставки
		|	ИЗ
		|		вт1 КАК вт1
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.Регион КАК Регион
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.Дивизион) КАК ВложенныйЗапрос
		|			ПО вт1.Дивизион = ВложенныйЗапрос.Дивизион
		|	ГДЕ
		|		вт1.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт2.Дивизион,
		|	вт2.Регион,
		|	вт2.КаналПродаж,
		|	вт2.Контрагент,
		|	вт2.УсловиеПоставки,
		|	вт2.АдресПоставки,
		|	вт2.ПроектГП,
		|	вт2.ТоварнаяКатегория,
		|	вт2.Брендообъем,
		|	вт2.Номенклатура,
		|	вт2.ТипЦен,
		|	вт2.ПриоритетПоКонтрагенту,
		|	вт2.ПриоритетПоНоменклатуре,
		|	вт2.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт3
		|ИЗ
		|	вт2 КАК вт2
		|ГДЕ
		|	НЕ вт2.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт2.Регион КАК Регион,
		|		вт2.Дивизион КАК Дивизион,
		|		ВложенныйЗапрос.КаналПродаж КАК КаналПродаж,
		|		вт2.Контрагент КАК Контрагент,
		|		вт2.УсловиеПоставки КАК УсловиеПоставки,
		|		вт2.АдресПоставки КАК АдресПоставки,
		|		вт2.ПроектГП КАК ПроектГП,
		|		вт2.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт2.Брендообъем КАК Брендообъем,
		|		вт2.Номенклатура КАК Номенклатура,
		|		вт2.ТипЦен КАК ТипЦен,
		|		вт2.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт2.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт2.ПриоритетПоУсловиюПоставки КАК ПриоритетПоУсловиюПоставки
		|	ИЗ
		|		вт2 КАК вт2
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Регион КАК Регион,
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.КаналПродаж КАК КаналПродаж
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.Дивизион,
		|				втКонтрагентыИАП.КаналПродаж) КАК ВложенныйЗапрос
		|			ПО вт2.Регион = ВложенныйЗапрос.Регион
		|				И вт2.Дивизион = ВложенныйЗапрос.Дивизион
		|	ГДЕ
		|		вт2.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт3.Дивизион,
		|	вт3.Регион,
		|	вт3.КаналПродаж,
		|	вт3.Контрагент,
		|	вт3.УсловиеПоставки,
		|	вт3.АдресПоставки,
		|	вт3.ПроектГП,
		|	вт3.ТоварнаяКатегория,
		|	вт3.Брендообъем,
		|	вт3.Номенклатура,
		|	вт3.ТипЦен,
		|	вт3.ПриоритетПоКонтрагенту,
		|	вт3.ПриоритетПоНоменклатуре,
		|	вт3.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт4
		|ИЗ
		|	вт3 КАК вт3
		|ГДЕ
		|	НЕ вт3.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт3.Регион КАК Регион,
		|		вт3.Дивизион КАК Дивизион,
		|		вт3.КаналПродаж КАК КаналПродаж,
		|		ВложенныйЗапрос.Контрагент КАК Контрагент,
		|		вт3.УсловиеПоставки КАК УсловиеПоставки,
		|		вт3.АдресПоставки КАК АдресПоставки,
		|		вт3.ПроектГП КАК ПроектГП,
		|		вт3.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт3.Брендообъем КАК Брендообъем,
		|		вт3.Номенклатура КАК Номенклатура,
		|		вт3.ТипЦен КАК ТипЦен,
		|		вт3.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт3.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт3.ПриоритетПоУсловиюПоставки КАК ПриоритетПоУсловиюПоставки
		|	ИЗ
		|		вт3 КАК вт3
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Регион КАК Регион,
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|				втКонтрагентыИАП.Контрагент КАК Контрагент
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Дивизион,
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.КаналПродаж,
		|				втКонтрагентыИАП.Контрагент) КАК ВложенныйЗапрос
		|			ПО вт3.Регион = ВложенныйЗапрос.Регион
		|				И вт3.Дивизион = ВложенныйЗапрос.Дивизион
		|				И вт3.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|	ГДЕ
		|		вт3.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт5
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт4.Дивизион КАК Дивизион,
		|		вт4.Регион КАК Регион,
		|		вт4.КаналПродаж КАК КаналПродаж,
		|		вт4.Контрагент КАК Контрагент,
		|		вт4.УсловиеПоставки КАК УсловиеПоставки,
		|		вт4.АдресПоставки КАК АдресПоставки,
		|		вт4.ПроектГП КАК ПроектГП,
		|		вт4.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт4.Брендообъем КАК Брендообъем,
		|		вт4.Номенклатура КАК Номенклатура,
		|		вт4.ТипЦен КАК ТипЦен,
		|		вт4.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт4.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт4.ПриоритетПоУсловиюПоставки КАК ПриоритетПоУсловиюПоставки
		|	ИЗ
		|		вт4 КАК вт4
		|	ГДЕ
		|		НЕ вт4.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВложенныйЗапрос.Дивизион,
		|		ВложенныйЗапрос.Регион,
		|		ВложенныйЗапрос.КаналПродаж,
		|		ВложенныйЗапрос.Контрагент,
		|		ВложенныйЗапрос.УсловияПоставки,
		|		ВложенныйЗапрос.АдресПоставки,
		|		ВложенныйЗапрос.ПроектГП,
		|		ВложенныйЗапрос.ТоварнаяКатегория,
		|		ВложенныйЗапрос.Брендообъем,
		|		ВложенныйЗапрос.Номенклатура,
		|		ВложенныйЗапрос.ТипЦен,
		|		ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|		ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|		ВложенныйЗапрос.ПриоритетПоУсловиюПоставки
		|	ИЗ
		|		(ВЫБРАТЬ
		|			вт4.Дивизион КАК Дивизион,
		|			вт4.Регион КАК Регион,
		|			вт4.КаналПродаж КАК КаналПродаж,
		|			вт4.Контрагент КАК Контрагент,
		|			ВложенныйЗапрос.УсловияПоставки КАК УсловияПоставки,
		|			вт4.АдресПоставки КАК АдресПоставки,
		|			вт4.ПроектГП КАК ПроектГП,
		|			вт4.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			вт4.Брендообъем КАК Брендообъем,
		|			вт4.Номенклатура КАК Номенклатура,
		|			вт4.ТипЦен КАК ТипЦен,
		|			вт4.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|			вт4.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|			вт4.ПриоритетПоУсловиюПоставки КАК ПриоритетПоУсловиюПоставки
		|		ИЗ
		|			вт4 КАК вт4
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					втКонтрагентыИАП.Дивизион КАК Дивизион,
		|					втКонтрагентыИАП.Регион КАК Регион,
		|					втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|					втКонтрагентыИАП.Контрагент КАК Контрагент,
		|					втКонтрагентыИАП.УсловияПоставки КАК УсловияПоставки
		|				ИЗ
		|					втКонтрагентыИАП КАК втКонтрагентыИАП
		|				ГДЕ
		|					НЕ втКонтрагентыИАП.УсловияПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					втКонтрагентыИАП.Регион,
		|					втКонтрагентыИАП.Дивизион,
		|					втКонтрагентыИАП.КаналПродаж,
		|					втКонтрагентыИАП.Контрагент,
		|					втКонтрагентыИАП.УсловияПоставки) КАК ВложенныйЗапрос
		|				ПО вт4.Дивизион = ВложенныйЗапрос.Дивизион
		|					И вт4.Регион = ВложенныйЗапрос.Регион
		|					И вт4.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|					И вт4.Контрагент = ВложенныйЗапрос.Контрагент
		|		ГДЕ
		|			вт4.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ПриоритетПоУсловиюПоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтрагентыИАП.Дивизион,
		|	втКонтрагентыИАП.Регион,
		|	втКонтрагентыИАП.КаналПродаж,
		|	втКонтрагентыИАП.Контрагент,
		|	втКонтрагентыИАП.УсловияПоставки КАК УсловиеПоставки,
		|	вт5.АдресПоставки,
		|	вт5.ПроектГП,
		|	вт5.ТоварнаяКатегория,
		|	вт5.Брендообъем,
		|	вт5.Номенклатура,
		|	вт5.ТипЦен,
		|	вт5.ПриоритетПоКонтрагенту,
		|	вт5.ПриоритетПоНоменклатуре,
		|	вт5.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт6
		|ИЗ
		|	вт5 КАК вт5
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ПО вт5.АдресПоставки = втКонтрагентыИАП.АдресПоставки
		|			И (НЕ вт5.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт5.Дивизион,
		|	вт5.Регион,
		|	вт5.КаналПродаж,
		|	вт5.Контрагент,
		|	вт5.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	вт5.ПроектГП,
		|	вт5.ТоварнаяКатегория,
		|	вт5.Брендообъем,
		|	вт5.Номенклатура,
		|	вт5.ТипЦен,
		|	вт5.ПриоритетПоКонтрагенту,
		|	вт5.ПриоритетПоНоменклатуре,
		|	вт5.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	вт5 КАК вт5
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втКонтрагентыИАП.Дивизион КАК Дивизион,
		|			втКонтрагентыИАП.Регион КАК Регион,
		|			втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|			втКонтрагентыИАП.Контрагент КАК Контрагент,
		|			втКонтрагентыИАП.УсловияПоставки КАК УсловияПоставки,
		|			втКонтрагентыИАП.АдресПоставки КАК АдресПоставки
		|		ИЗ
		|			втКонтрагентыИАП КАК втКонтрагентыИАП
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втКонтрагентыИАП.Дивизион,
		|			втКонтрагентыИАП.Регион,
		|			втКонтрагентыИАП.КаналПродаж,
		|			втКонтрагентыИАП.Контрагент,
		|			втКонтрагентыИАП.УсловияПоставки,
		|			втКонтрагентыИАП.АдресПоставки) КАК ВложенныйЗапрос
		|		ПО вт5.Дивизион = ВложенныйЗапрос.Дивизион
		|			И вт5.Регион = ВложенныйЗапрос.Регион
		|			И вт5.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|			И вт5.Контрагент = ВложенныйЗапрос.Контрагент
		|			И вт5.УсловиеПоставки = ВложенныйЗапрос.УсловияПоставки
		|ГДЕ
		|	вт5.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт6.Дивизион,
		|	вт6.Регион,
		|	вт6.КаналПродаж,
		|	вт6.Контрагент,
		|	вт6.УсловиеПоставки,
		|	вт6.АдресПоставки,
		|	вт6.ПроектГП,
		|	вт6.ТоварнаяКатегория,
		|	вт6.Брендообъем,
		|	вт6.Номенклатура,
		|	вт6.ТипЦен,
		|	вт6.ПриоритетПоКонтрагенту,
		|	вт6.ПриоритетПоНоменклатуре,
		|	вт6.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт7
		|ИЗ
		|	вт6 КАК вт6
		|ГДЕ
		|	НЕ вт6.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт6.Дивизион,
		|	вт6.Регион,
		|	вт6.КаналПродаж,
		|	вт6.Контрагент,
		|	вт6.УсловиеПоставки,
		|	вт6.АдресПоставки,
		|	ВложенныйЗапрос.Проект,
		|	вт6.ТоварнаяКатегория,
		|	вт6.Брендообъем,
		|	вт6.Номенклатура,
		|	вт6.ТипЦен,
		|	вт6.ПриоритетПоКонтрагенту,
		|	вт6.ПриоритетПоНоменклатуре,
		|	вт6.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	вт6 КАК вт6,
		|	(ВЫБРАТЬ
		|		втНоменклатура.Проект КАК Проект
		|	ИЗ
		|		втНоменклатура КАК втНоменклатура
		|	ГДЕ
		|		НЕ втНоменклатура.Проект = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		втНоменклатура.Проект) КАК ВложенныйЗапрос
		|ГДЕ
		|	вт6.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт7.Дивизион,
		|	вт7.Регион,
		|	вт7.КаналПродаж,
		|	вт7.Контрагент,
		|	вт7.УсловиеПоставки,
		|	вт7.АдресПоставки,
		|	вт7.ПроектГП,
		|	вт7.ТоварнаяКатегория,
		|	вт7.Брендообъем,
		|	вт7.Номенклатура,
		|	вт7.ТипЦен,
		|	вт7.ПриоритетПоКонтрагенту,
		|	вт7.ПриоритетПоНоменклатуре,
		|	вт7.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт8
		|ИЗ
		|	вт7 КАК вт7
		|ГДЕ
		|	НЕ вт7.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт7.Дивизион,
		|	вт7.Регион,
		|	вт7.КаналПродаж,
		|	вт7.Контрагент,
		|	вт7.УсловиеПоставки,
		|	вт7.АдресПоставки,
		|	вт7.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	вт7.Брендообъем,
		|	вт7.Номенклатура,
		|	вт7.ТипЦен,
		|	вт7.ПриоритетПоКонтрагенту,
		|	вт7.ПриоритетПоНоменклатуре,
		|	вт7.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	вт7 КАК вт7
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втНоменклатура.Проект КАК Проект,
		|			втНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория
		|		ИЗ
		|			втНоменклатура КАК втНоменклатура
		|		ГДЕ
		|			НЕ втНоменклатура.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втНоменклатура.Проект,
		|			втНоменклатура.ТоварнаяКатегория) КАК ВложенныйЗапрос
		|		ПО вт7.ПроектГП = ВложенныйЗапрос.Проект
		|ГДЕ
		|	вт7.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт8.Дивизион,
		|	вт8.Регион,
		|	вт8.КаналПродаж,
		|	вт8.Контрагент,
		|	вт8.УсловиеПоставки,
		|	вт8.АдресПоставки,
		|	вт8.ПроектГП,
		|	вт8.ТоварнаяКатегория,
		|	вт8.Брендообъем,
		|	вт8.Номенклатура,
		|	вт8.ТипЦен,
		|	вт8.ПриоритетПоКонтрагенту,
		|	вт8.ПриоритетПоНоменклатуре,
		|	вт8.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт9
		|ИЗ
		|	вт8 КАК вт8
		|ГДЕ
		|	НЕ вт8.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт8.Дивизион,
		|	вт8.Регион,
		|	вт8.КаналПродаж,
		|	вт8.Контрагент,
		|	вт8.УсловиеПоставки,
		|	вт8.АдресПоставки,
		|	вт8.ПроектГП,
		|	вт8.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	вт8.Номенклатура,
		|	вт8.ТипЦен,
		|	вт8.ПриоритетПоКонтрагенту,
		|	вт8.ПриоритетПоНоменклатуре,
		|	вт8.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	вт8 КАК вт8
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втНоменклатура.Проект КАК Проект,
		|			втНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			втНоменклатура.Брендообъем КАК Брендообъем
		|		ИЗ
		|			втНоменклатура КАК втНоменклатура
		|		ГДЕ
		|			НЕ втНоменклатура.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втНоменклатура.Проект,
		|			втНоменклатура.ТоварнаяКатегория,
		|			втНоменклатура.Брендообъем) КАК ВложенныйЗапрос
		|		ПО вт8.ПроектГП = ВложенныйЗапрос.Проект
		|			И вт8.ТоварнаяКатегория = ВложенныйЗапрос.ТоварнаяКатегория
		|ГДЕ
		|	вт8.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт9.Дивизион,
		|	вт9.Регион,
		|	вт9.КаналПродаж,
		|	вт9.Контрагент,
		|	вт9.УсловиеПоставки,
		|	вт9.АдресПоставки,
		|	вт9.ПроектГП,
		|	вт9.ТоварнаяКатегория,
		|	вт9.Брендообъем,
		|	вт9.Номенклатура,
		|	вт9.ТипЦен,
		|	вт9.ПриоритетПоКонтрагенту,
		|	вт9.ПриоритетПоНоменклатуре,
		|	вт9.ПриоритетПоКонтрагенту + вт9.ПриоритетПоНоменклатуре КАК ПриоритетТипаЦен,
		|	вт9.ПриоритетПоУсловиюПоставки
		|ПОМЕСТИТЬ вт10
		|ИЗ
		|	вт9 КАК вт9
		|ГДЕ
		|	НЕ вт9.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И НЕ (вт9.АдресПоставки, вт9.Номенклатура, вт9.ТипЦен) В
		|				(ВЫБРАТЬ
		|					вт21.АдресПоставки,
		|					вт21.Номенклатура,
		|					вт21.ТипЦен
		|				ИЗ
		|					вт21 КАК вт21
		|				СГРУППИРОВАТЬ ПО
		|								вт21.ТипЦен,
		|					вт21.АдресПоставки,
		|					вт21.Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт9.Контрагент,
		|	вт9.ТипЦен,
		|	вт9.Дивизион,
		|	вт9.Регион,
		|	вт9.КаналПродаж,
		|	вт9.УсловиеПоставки,
		|	вт9.АдресПоставки,
		|	вт9.ПроектГП,
		|	вт9.ТоварнаяКатегория,
		|	вт9.Брендообъем,
		|	вт9.Номенклатура,
		|	вт9.ПриоритетПоКонтрагенту,
		|	вт9.ПриоритетПоНоменклатуре,
		|	вт9.ПриоритетПоУсловиюПоставки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт9.Дивизион,
		|	вт9.Регион,
		|	вт9.КаналПродаж,
		|	вт9.Контрагент,
		|	вт9.УсловиеПоставки,
		|	вт9.АдресПоставки,
		|	вт9.ПроектГП,
		|	вт9.ТоварнаяКатегория,
		|	вт9.Брендообъем,
		|	втНоменклатура.Номенклатура,
		|	вт9.ТипЦен,
		|	вт9.ПриоритетПоКонтрагенту,
		|	вт9.ПриоритетПоНоменклатуре,
		|	вт9.ПриоритетПоКонтрагенту + вт9.ПриоритетПоНоменклатуре,
		|	вт9.ПриоритетПоУсловиюПоставки
		|ИЗ
		|	вт9 КАК вт9
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО вт9.ПроектГП = втНоменклатура.Проект
		|			И вт9.ТоварнаяКатегория = втНоменклатура.ТоварнаяКатегория
		|			И вт9.Брендообъем = втНоменклатура.Брендообъем
		|ГДЕ
		|	вт9.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И НЕ (вт9.АдресПоставки, втНоменклатура.Номенклатура, вт9.ТипЦен) В
		|				(ВЫБРАТЬ
		|					вт21.АдресПоставки,
		|					вт21.Номенклатура,
		|					вт21.ТипЦен
		|				ИЗ
		|					вт21 КАК вт21
		|				СГРУППИРОВАТЬ ПО
		|								вт21.ТипЦен,
		|					вт21.АдресПоставки,
		|					вт21.Номенклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт10.Дивизион КАК Дивизион,
		|	вт10.Регион КАК Регион,
		|	вт10.КаналПродаж КАК КаналПродаж,
		|	вт10.Контрагент КАК Контрагент,
		|	вт10.УсловиеПоставки КАК УсловиеПоставки,
		|	вт10.АдресПоставки КАК АдресПоставки,
		|	вт10.ПроектГП КАК ПроектГП,
		|	вт10.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	вт10.Брендообъем КАК Брендообъем,
		|	вт10.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(вт10.ПриоритетПоУсловиюПоставки) КАК ПриоритетПоУсловиюПоставки,
		|	МАКСИМУМ(вт10.ПриоритетТипаЦен) КАК ПриоритетТипаЦен
		|ПОМЕСТИТЬ вт10_1
		|ИЗ
		|	вт10 КАК вт10
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДоступныеТипыЦен КАК втДоступныеТипыЦен
		|		ПО вт10.Контрагент = втДоступныеТипыЦен.Контрагент
		|			И вт10.ТипЦен = втДоступныеТипыЦен.ТипЦен
		|
		|СГРУППИРОВАТЬ ПО
		|	вт10.Дивизион,
		|	вт10.Регион,
		|	вт10.КаналПродаж,
		|	вт10.Контрагент,
		|	вт10.УсловиеПоставки,
		|	вт10.АдресПоставки,
		|	вт10.ПроектГП,
		|	вт10.ТоварнаяКатегория,
		|	вт10.Брендообъем,
		|	вт10.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт10.Дивизион КАК Дивизион,
		|	вт10.Регион КАК Регион,
		|	вт10.КаналПродаж КАК КаналПродаж,
		|	вт10.Контрагент КАК Контрагент,
		|	вт10.УсловиеПоставки КАК УсловиеПоставки,
		|	вт10.АдресПоставки КАК АдресПоставки,
		|	вт10.ПроектГП КАК ПроектГП,
		|	вт10.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	вт10.Брендообъем КАК Брендообъем,
		|	вт10.Номенклатура КАК Номенклатура,
		|	вт10.ТипЦен КАК ТипЦен,
		|	вт10.ПриоритетТипаЦен
		|ПОМЕСТИТЬ вт11
		|ИЗ
		|	вт10 КАК вт10
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт10_1 КАК вт10_1
		|		ПО вт10.Дивизион = вт10_1.Дивизион
		|			И вт10.Регион = вт10_1.Регион
		|			И вт10.КаналПродаж = вт10_1.КаналПродаж
		|			И вт10.Контрагент = вт10_1.Контрагент
		|			И вт10.УсловиеПоставки = вт10_1.УсловиеПоставки
		|			И вт10.АдресПоставки = вт10_1.АдресПоставки
		|			И вт10.ПроектГП = вт10_1.ПроектГП
		|			И вт10.ТоварнаяКатегория = вт10_1.ТоварнаяКатегория
		|			И вт10.Брендообъем = вт10_1.Брендообъем
		|			И вт10.Номенклатура = вт10_1.Номенклатура
		|			И вт10.ПриоритетТипаЦен = вт10_1.ПриоритетТипаЦен
		|			И вт10.ПриоритетПоУсловиюПоставки = вт10_1.ПриоритетПоУсловиюПоставки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	ТипЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт11.Дивизион,
		|	вт11.Регион,
		|	вт11.КаналПродаж,
		|	вт11.Контрагент,
		|	вт11.УсловиеПоставки,
		|	вт11.АдресПоставки,
		|	вт11.ПроектГП,
		|	вт11.ТоварнаяКатегория,
		|	вт11.Брендообъем,
		|	вт11.Номенклатура,
		|	МАКСИМУМ(вт11.ТипЦен) КАК ТипЦен,
		|	вт11.ПриоритетТипаЦен,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт11.ТипЦен) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НесколькоТиповЦен
		|ПОМЕСТИТЬ втТипыЦен
		|ИЗ
		|	вт11 КАК вт11
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДоступныеТипыЦен КАК втДоступныеТипыЦен
		|		ПО вт11.Контрагент = втДоступныеТипыЦен.Контрагент
		|			И вт11.ТипЦен = втДоступныеТипыЦен.ТипЦен
		|
		|СГРУППИРОВАТЬ ПО
		|	вт11.КаналПродаж,
		|	вт11.Контрагент,
		|	вт11.Регион,
		|	вт11.Дивизион,
		|	вт11.УсловиеПоставки,
		|	вт11.АдресПоставки,
		|	вт11.ТоварнаяКатегория,
		|	вт11.Номенклатура,
		|	вт11.Брендообъем,
		|	вт11.ПроектГП,
		|	вт11.ПриоритетТипаЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ПОМЕСТИТЬ втКурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ПериодПолученияКурсовВалют, ) КАК КурсыВалютСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияПоставок.ПЦ_Контрагент КАК Контрагент,
		|	УсловияПоставок.Номенклатура,
		|	ВЫБОР
		|		КОГДА втНоменклатура.Услуга
		|				И УсловияПоставок.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА втНоменклатура.ЕдиницаХраненияОстатков
		|		ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	УсловияПоставок.ПЦ_ТипЦен КАК ТипЦен,
		|	УсловияПоставок.Цена КАК Цена,
		|	УсловияПоставок.ВалютаЦены КАК ВалютаЦены
		|ПОМЕСТИТЬ втИндивидуальныеЦены
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(
		|			&Период,
		|			ПЦ_Контрагент В
		|				(ВЫБРАТЬ
		|					втКонтрагентыИАП.Контрагент КАК Контрагент
		|				ИЗ
		|					втКонтрагентыИАП КАК втКонтрагентыИАП
		|				СГРУППИРОВАТЬ ПО
		|							втКонтрагентыИАП.Контрагент)) КАК УсловияПоставок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО УсловияПоставок.Номенклатура = втНоменклатура.Номенклатура
		|ГДЕ
		|	УсловияПоставок.Цена <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИндивидуальныеЦены.Контрагент,
		|	втИндивидуальныеЦены.Номенклатура,
		|	втИндивидуальныеЦены.ТипЦен,
		|	ВЫБОР
		|		КОГДА &ПересчитыватьЦеныВВалютуРегламентированногоУчета
		|			ТОГДА ВЫРАЗИТЬ(втИндивидуальныеЦены.Цена * втКурсыВалют.Курс / втКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ втИндивидуальныеЦены.Цена
		|	КОНЕЦ КАК Цена,
		|	втИндивидуальныеЦены.Цена КАК ЦенаВВалюте,
		|	втИндивидуальныеЦены.ВалютаЦены,
		|	ВЫБОР
		|		КОГДА &ПересчитыватьЦеныВВалютуРегламентированногоУчета
		|			ТОГДА &ВалютаРегламентированногоУтчета
		|		ИНАЧЕ втИндивидуальныеЦены.ВалютаЦены
		|	КОНЕЦ КАК Валюта
		|ПОМЕСТИТЬ втИндивидуальныеТипыЦенВРуб
		|ИЗ
		|	втИндивидуальныеЦены КАК втИндивидуальныеЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК втКурсыВалют
		|		ПО втИндивидуальныеЦены.ВалютаЦены = втКурсыВалют.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	втИндивидуальныеЦены.Контрагент,
		|	втИндивидуальныеЦены.Номенклатура,
		|	втИндивидуальныеЦены.ТипЦен,
		|	втИндивидуальныеЦены.ВалютаЦены,
		|	втИндивидуальныеЦены.Цена,
		|	ВЫБОР
		|		КОГДА &ПересчитыватьЦеныВВалютуРегламентированногоУчета
		|			ТОГДА ВЫРАЗИТЬ(втИндивидуальныеЦены.Цена * втКурсыВалют.Курс / втКурсыВалют.Кратность КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ втИндивидуальныеЦены.Цена
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапросПрайс.Номенклатура КАК Номенклатура,
		|	ЗапросПрайс.ТипЦен КАК ТипЦен,
		|	ВЫБОР
		|		КОГДА &ПересчитыватьЦеныВВалютуРегламентированногоУчета
		|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
		|						КОГДА ЗапросПрайс.Валюта = ЗапросПрайс.ВалютаПрайса
		|								ИЛИ ЗапросПрайс.Цена = 0
		|							ТОГДА ЗапросПрайс.Цена
		|						ИНАЧЕ ЗапросПрайс.Цена * ВЫБОР
		|								КОГДА КурсыВалютСрезПоследних.Курс = 0
		|									ТОГДА 1
		|								ИНАЧЕ КурсыВалютСрезПоследних.Курс
		|							КОНЕЦ * ВЫБОР
		|								КОГДА КурсыВалютСрезПоследнихОтчет.Кратность = 0
		|									ТОГДА 1
		|								ИНАЧЕ КурсыВалютСрезПоследнихОтчет.Кратность
		|							КОНЕЦ / ВЫБОР
		|								КОГДА КурсыВалютСрезПоследнихОтчет.Курс = 0
		|									ТОГДА 1
		|								ИНАЧЕ КурсыВалютСрезПоследнихОтчет.Курс
		|							КОНЕЦ / ВЫБОР
		|								КОГДА КурсыВалютСрезПоследних.Кратность = 0
		|									ТОГДА 1
		|								ИНАЧЕ КурсыВалютСрезПоследних.Кратность
		|							КОНЕЦ
		|					КОНЕЦ КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗапросПрайс.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА &ПересчитыватьЦеныВВалютуРегламентированногоУчета
		|			ТОГДА &ВалютаРегламентированногоУтчета
		|		ИНАЧЕ ЗапросПрайс.Валюта
		|	КОНЕЦ КАК Валюта,
		|	ЗапросПрайс.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
		|	ЗапросПрайс.ПорядокОкругления КАК ПорядокОкругления
		|ПОМЕСТИТЬ втЦеныНоменклатурыБезНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЦеныБазовые.ТипЦен КАК ТипЦен,
		|		ВЫБОР
		|			КОГДА ЛОЖЬ
		|				ТОГДА ВЫБОР
		|						КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|							ТОГДА ЦеныБазовые.ТипЦен.ВалютаЦены
		|						ИНАЧЕ МИНИМУМ(ВЫБОР
		|									КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|										ТОГДА ВЫБОР
		|												КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL 
		|													ТОГДА ЦеныБазовые.Валюта
		|												ИНАЧЕ ВЫБОР
		|														КОГДА ЦеныБазовые.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|															ТОГДА ЦеныРасчетные.Валюта
		|														ИНАЧЕ ЦеныБазовые.ВалютаДиапазона
		|													КОНЕЦ
		|											КОНЕЦ
		|									ИНАЧЕ ЦеныБазовые.Валюта
		|								КОНЕЦ)
		|					КОНЕЦ
		|			ИНАЧЕ &ВалютаРегламентированногоУтчета
		|		КОНЕЦ КАК ВалютаПрайса,
		|		ЦеныБазовые.Номенклатура КАК Номенклатура,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|					ТОГДА ЦеныРасчетные.ЕдиницаИзмерения
		|				ИНАЧЕ ЦеныБазовые.ЕдиницаИзмерения
		|			КОНЕЦ) КАК ЕдиницаИзмерения,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|					ТОГДА ВЫБОР
		|							КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL 
		|								ТОГДА ЦеныБазовые.Валюта
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ЦеныБазовые.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|										ТОГДА ЦеныРасчетные.Валюта
		|									ИНАЧЕ ЦеныБазовые.ВалютаДиапазона
		|								КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныБазовые.Валюта
		|			КОНЕЦ) КАК Валюта,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|					ТОГДА ВЫБОР
		|							КОГДА ЦеныБазовые.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|								ТОГДА ВЫБОР
		|										КОГДА ЦеныРасчетные.Цена ЕСТЬ NULL 
		|											ТОГДА 0
		|										ИНАЧЕ ВЫРАЗИТЬ(ЦеныРасчетные.Цена * (1 + ЦеныБазовые.ПроцентСкидкиНаценки / 100) КАК ЧИСЛО(15, 2))
		|									КОНЕЦ
		|							ИНАЧЕ ЦеныБазовые.ЦенаДиапазона
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныБазовые.Цена
		|			КОНЕЦ) КАК Цена,
		|		ЦеныБазовые.ПорядокОкругления КАК ПорядокОкругления,
		|		ЦеныБазовые.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СписокНоменклатуры.Номенклатура КАК Номенклатура,
		|			СпрТипЦен.ТипЦен КАК ТипЦен,
		|			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|			ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL 
		|					ТОГДА СпрТипЦен.ПроцентСкидкиНаценки
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ПроцентСкидкиНаценки, ЦеныНоменклатуры.ТипЦен.ПроцентСкидкиНаценки)
		|			КОНЕЦ КАК ПроцентСкидкиНаценки,
		|			ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL 
		|					ТОГДА СпрТипЦен.СпособРасчетаЦены
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.СпособРасчетаЦены, ЦеныНоменклатуры.ТипЦен.СпособРасчетаЦены)
		|			КОНЕЦ КАК СпособРасчетаЦены,
		|			ЕСТЬNULL(ШкалыДиапазонов.Цена, 0) КАК ЦенаДиапазона,
		|			ЕСТЬNULL(ШкалыДиапазонов.ВерхняяГраница, 0) КАК ВерхняяГраница,
		|			ЕСТЬNULL(ЦеныНоменклатуры.Валюта, СпрТипЦен.Валюта) КАК Валюта,
		|			ШкалыДиапазонов.Валюта КАК ВалютаДиапазона,
		|			СпрТипЦен.ПорядокОкругления КАК ПорядокОкругления,
		|			СпрТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону
		|		ИЗ
		|			(ВЫБРАТЬ
		|				втНоменклатура.Номенклатура КАК Номенклатура
		|			ИЗ
		|				втНоменклатура КАК втНоменклатура) КАК СписокНоменклатуры
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СправочникЦен.Ссылка КАК ТипЦен,
		|					СправочникЦен.ВалютаЦены КАК Валюта,
		|					СправочникЦен.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|					СправочникЦен.СпособРасчетаЦены КАК СпособРасчетаЦены,
		|					СправочникЦен.ПорядокОкругления КАК ПорядокОкругления,
		|					СправочникЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону
		|				ИЗ
		|					Справочник.ТипыЦенНоменклатуры КАК СправочникЦен
		|				ГДЕ
		|					НЕ СправочникЦен.ПометкаУдаления) КАК СпрТипЦен
		|				ПО (ИСТИНА)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|						&Период,
		|						Номенклатура В
		|							(ВЫБРАТЬ
		|								втНоменклатура.Номенклатура КАК Номенклатура
		|							ИЗ
		|								втНоменклатура КАК втНоменклатура)) КАК ЦеныНоменклатуры
		|				ПО (ЦеныНоменклатуры.Номенклатура = СписокНоменклатуры.Номенклатура)
		|					И (ЦеныНоменклатуры.ТипЦен = СпрТипЦен.ТипЦен)
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДиапазоныЦен.ТипЦен КАК ТипЦен,
		|					ДиапазоныЦен.ВерхняяГраница КАК ВерхняяГраница,
		|					ДиапазоныЦен.Цена КАК Цена,
		|					ДиапазоныЦен.Валюта КАК Валюта,
		|					ДиапазоныЦен.Период КАК Период
		|				ИЗ
		|					РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Период, ) КАК ДиапазоныЦен
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен КАК ТипЦен,
		|							МАКСИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.Период) КАК Период
		|						ИЗ
		|							РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Период, ) КАК ДиапазоныЦенДляНаценкиСрезПоследних
		|						
		|						СГРУППИРОВАТЬ ПО
		|							ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен) КАК МаксДиапазоныЦен
		|						ПО ДиапазоныЦен.ТипЦен = МаксДиапазоныЦен.ТипЦен
		|							И ДиапазоныЦен.Период = МаксДиапазоныЦен.Период) КАК ШкалыДиапазонов
		|				ПО (ШкалыДиапазонов.ТипЦен = СпрТипЦен.ТипЦен)) КАК ЦеныБазовые
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|					&Период,
		|					Номенклатура В
		|						(ВЫБРАТЬ
		|							втНоменклатура.Номенклатура КАК Номенклатура
		|						ИЗ
		|							втНоменклатура КАК втНоменклатура)) КАК ЦеныРасчетные
		|			ПО ЦеныБазовые.Номенклатура = ЦеныРасчетные.Номенклатура
		|				И ЦеныБазовые.ТипЦен.БазовыйТипЦен = ЦеныРасчетные.ТипЦен
		|	ГДЕ
		|		(НЕ ЦеныБазовые.ТипЦен.Рассчитывается
		|				ИЛИ ЦеныБазовые.СпособРасчетаЦены <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|				ИЛИ ЦеныБазовые.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|					И (ЦеныРасчетные.Цена МЕЖДУ 0.000001 И ЦеныБазовые.ВерхняяГраница - 0.000001))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЦеныБазовые.ТипЦен,
		|		ЦеныБазовые.Номенклатура,
		|		ЦеныБазовые.ПорядокОкругления,
		|		ЦеныБазовые.ОкруглятьВБольшуюСторону,
		|		ЦеныБазовые.ТипЦен.Рассчитывается,
		|		ЦеныБазовые.ТипЦен.ВалютаЦены) КАК ЗапросПрайс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПериодПолученияКурсовВалют, ) КАК КурсыВалютСрезПоследних
		|		ПО ЗапросПрайс.Валюта = КурсыВалютСрезПоследних.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПериодПолученияКурсовВалют, ) КАК КурсыВалютСрезПоследнихОтчет
		|		ПО ЗапросПрайс.ВалютаПрайса = КурсыВалютСрезПоследнихОтчет.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ЦенаБезНДС,
		|	ВложенныйЗапрос.Валюта,
		|	ЛОЖЬ КАК ЭтоИндивидуальнаяЦена
		|ПОМЕСТИТЬ вт22
		|ИЗ
		|	(ВЫБРАТЬ
		|		втТипыЦен.Дивизион КАК Дивизион,
		|		втТипыЦен.Регион КАК Регион,
		|		втТипыЦен.КаналПродаж КАК КаналПродаж,
		|		втТипыЦен.Контрагент КАК Контрагент,
		|		втТипыЦен.УсловиеПоставки КАК УсловиеПоставки,
		|		втТипыЦен.АдресПоставки КАК АдресПоставки,
		|		втТипыЦен.ПроектГП КАК ПроектГП,
		|		втТипыЦен.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		втТипыЦен.Брендообъем КАК Брендообъем,
		|		втТипыЦен.Номенклатура КАК Номенклатура,
		|		втТипыЦен.ТипЦен КАК ТипЦен,
		|		втТипыЦен.ПриоритетТипаЦен КАК ПриоритетТипаЦен,
		|		втТипыЦен.НесколькоТиповЦен КАК НесколькоТиповЦен,
		|		втЦеныНоменклатурыБезНДС.Цена КАК ЦенаБезНДС,
		|		втЦеныНоменклатурыБезНДС.Валюта КАК Валюта
		|	ИЗ
		|		втТипыЦен КАК втТипыЦен
		|			ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатурыБезНДС КАК втЦеныНоменклатурыБезНДС
		|			ПО (втЦеныНоменклатурыБезНДС.Номенклатура = втТипыЦен.Номенклатура)
		|				И (втЦеныНоменклатурыБезНДС.ТипЦен = втТипыЦен.ТипЦен)) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.ЦенаБезНДС <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втКонтрагентыИАП.Дивизион,
		|	втКонтрагентыИАП.Регион,
		|	втКонтрагентыИАП.КаналПродаж,
		|	втИндивидуальныеТипыЦенВРуб.Контрагент,
		|	втКонтрагентыИАП.УсловияПоставки,
		|	втКонтрагентыИАП.АдресПоставки,
		|	втНоменклатура.Проект,
		|	втНоменклатура.ТоварнаяКатегория,
		|	втНоменклатура.Брендообъем,
		|	втИндивидуальныеТипыЦенВРуб.Номенклатура,
		|	втИндивидуальныеТипыЦенВРуб.ТипЦен,
		|	втИндивидуальныеТипыЦенВРуб.Цена,
		|	втИндивидуальныеТипыЦенВРуб.Валюта,
		|	ИСТИНА
		|ИЗ
		|	втИндивидуальныеТипыЦенВРуб КАК втИндивидуальныеТипыЦенВРуб
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ПО втИндивидуальныеТипыЦенВРуб.Контрагент = втКонтрагентыИАП.Контрагент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО втИндивидуальныеТипыЦенВРуб.Номенклатура = втНоменклатура.Номенклатура
		|ГДЕ
		|	втИндивидуальныеТипыЦенВРуб.Цена <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт22.Дивизион,
		|	вт22.Регион,
		|	вт22.КаналПродаж,
		|	вт22.Контрагент,
		|	вт22.УсловиеПоставки,
		|	вт22.АдресПоставки,
		|	вт22.ПроектГП,
		|	вт22.ТоварнаяКатегория,
		|	вт22.Брендообъем,
		|	вт22.Номенклатура,
		|	вт22.ТипЦен,
		|	вт22.ЦенаБезНДС,
		|	вт22.ЦенаБезНДС * (1 + ВЫБОР
		|		КОГДА вт22.Дивизион.Код = ""ЗАРУБЕЖЬЕ_ПРГ""
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА втНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|						ИЛИ втНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|					ТОГДА 0.18
		|				КОГДА втНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|						ИЛИ втНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|					ТОГДА 0.1
		|				КОГДА втНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|						ИЛИ втНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|					ТОГДА 0.2
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ) КАК ЦенаСНДС,
		|	вт22.Валюта,
		|	вт22.ЭтоИндивидуальнаяЦена,
		|	ВложенныйЗапрос.КоличествоЦен,
		|	втНоменклатура.Код КАК КодНоменклатуры,
		|	втНоменклатура.Штрихкод
		|ИЗ
		|	вт22 КАК вт22
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			вт22.Дивизион КАК Дивизион,
		|			вт22.Регион КАК Регион,
		|			вт22.КаналПродаж КАК КаналПродаж,
		|			вт22.Контрагент КАК Контрагент,
		|			вт22.УсловиеПоставки КАК УсловиеПоставки,
		|			вт22.АдресПоставки КАК АдресПоставки,
		|			вт22.ПроектГП КАК ПроектГП,
		|			вт22.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			вт22.Брендообъем КАК Брендообъем,
		|			вт22.Номенклатура КАК Номенклатура,
		|			вт22.ТипЦен КАК ТипЦен,
		|			МАКСИМУМ(вт22.ЭтоИндивидуальнаяЦена) КАК ЭтоИндивидуальнаяЦена,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт22.ЭтоИндивидуальнаяЦена) КАК КоличествоЦен
		|		ИЗ
		|			вт22 КАК вт22
		|		
		|		СГРУППИРОВАТЬ ПО
		|			вт22.Дивизион,
		|			вт22.Регион,
		|			вт22.КаналПродаж,
		|			вт22.Контрагент,
		|			вт22.УсловиеПоставки,
		|			вт22.АдресПоставки,
		|			вт22.ПроектГП,
		|			вт22.ТоварнаяКатегория,
		|			вт22.Брендообъем,
		|			вт22.Номенклатура,
		|			вт22.ТипЦен) КАК ВложенныйЗапрос
		|		ПО вт22.Дивизион = ВложенныйЗапрос.Дивизион
		|			И вт22.Регион = ВложенныйЗапрос.Регион
		|			И вт22.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|			И вт22.Контрагент = ВложенныйЗапрос.Контрагент
		|			И вт22.УсловиеПоставки = ВложенныйЗапрос.УсловиеПоставки
		|			И вт22.АдресПоставки = ВложенныйЗапрос.АдресПоставки
		|			И вт22.ПроектГП = ВложенныйЗапрос.ПроектГП
		|			И вт22.ТоварнаяКатегория = ВложенныйЗапрос.ТоварнаяКатегория
		|			И вт22.Брендообъем = ВложенныйЗапрос.Брендообъем
		|			И вт22.Номенклатура = ВложенныйЗапрос.Номенклатура
		|			И вт22.ТипЦен = ВложенныйЗапрос.ТипЦен
		|			И вт22.ЭтоИндивидуальнаяЦена = ВложенныйЗапрос.ЭтоИндивидуальнаяЦена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО вт22.Номенклатура = втНоменклатура.Номенклатура
		|ГДЕ
		|	(НЕ &ФильтроватьПоТипЦен
		|			ИЛИ вт22.ТипЦен В (&ТипЦен))";

	//Общие	
	Запрос.УстановитьПараметр("Период",?(Период='00010101',КонецДня(ТекущаяДата()),КонецДня(Период)));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУтчета",глЗначениеПеременной("ВалютаРегламентированногоУчета"));	
	Запрос.УстановитьПараметр("ПересчитыватьЦеныВВалютуРегламентированногоУчета",ПересчитыватьЦеныВВалютуРегламентированногоУчета);	
	Запрос.УстановитьПараметр("ПериодПолученияКурсовВалют",?(ПериодПолученияКурсовВалют='00010101',Запрос.Параметры.Период,ПериодПолученияКурсовВалют));	
	
	//Кому
	Запрос.УстановитьПараметр("Дивизион",?(Дивизион=Неопределено,Справочники.ПРГДивизионы.ПустаяСсылка(),Дивизион));
	Запрос.УстановитьПараметр("ФильтроватьПоДивизион",НЕ Дивизион=Неопределено);
	Запрос.УстановитьПараметр("Регион",?(Регион=Неопределено,Справочники.Регионы.ПустаяСсылка(),Регион));
	Запрос.УстановитьПараметр("ФильтроватьПоРегион",НЕ Регион=Неопределено);
	Запрос.УстановитьПараметр("КаналПродаж",?(КаналПродаж=Неопределено,Справочники.НСИ_КаналыПродаж.ПустаяСсылка(),КаналПродаж));
	Запрос.УстановитьПараметр("ФильтроватьПоКаналПродаж",НЕ КаналПродаж=Неопределено);
	Запрос.УстановитьПараметр("Контрагент",?(Контрагент=Неопределено,Справочники.Контрагенты.ПустаяСсылка(),Контрагент));
	Запрос.УстановитьПараметр("ФильтроватьПоКонтрагент",НЕ Контрагент=Неопределено);
	Запрос.УстановитьПараметр("УсловиеПоставки",?(УсловиеПоставки=Неопределено,Перечисления.ПТЛ_УсловияПоставки.ПустаяСсылка(),УсловиеПоставки));
	Запрос.УстановитьПараметр("ФильтроватьПоУсловиеПоставки",НЕ УсловиеПоставки=Неопределено);
	Запрос.УстановитьПараметр("АдресПоставки",?(АдресПоставки=Неопределено,Справочники.АдресаПоставки.ПустаяСсылка(),АдресПоставки));
	Запрос.УстановитьПараметр("ФильтроватьПоАдресПоставки",НЕ АдресПоставки=Неопределено);
	
	//Что
	Запрос.УстановитьПараметр("Проект",?(Проект=Неопределено,Справочники.ПРГ_ПроектыГП.ПустаяСсылка(),Проект));
	Запрос.УстановитьПараметр("ФильтроватьПоПроект",НЕ Проект=Неопределено);
	Запрос.УстановитьПараметр("ТоварнаяКатегория",?(ТоварнаяКатегория=Неопределено,Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка(),ТоварнаяКатегория));
	Запрос.УстановитьПараметр("ФильтроватьПоТоварнаяКатегория",НЕ ТоварнаяКатегория=Неопределено);
	Запрос.УстановитьПараметр("Брендообъем",?(Брендообъем=Неопределено,Справочники.НСИ_Брендообъемы.ПустаяСсылка(),Брендообъем));
	Запрос.УстановитьПараметр("ФильтроватьПоБрендообъем",НЕ Брендообъем=Неопределено);	
	Запрос.УстановитьПараметр("Номенклатура",?(Номенклатура=Неопределено,Справочники.Номенклатура.ПустаяСсылка(),Номенклатура));
    Запрос.УстановитьПараметр("ФильтроватьПоНоменклатура",НЕ Номенклатура=Неопределено);
	
	//Тип цен
	Запрос.УстановитьПараметр("ТипЦен",?(ТипЦен=Неопределено,Справочники.ТипыЦенНоменклатуры.ПустаяСсылка(),ТипЦен));
	Запрос.УстановитьПараметр("ФильтроватьПоТипЦен",НЕ ТипЦен=Неопределено);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//СформироватьТаблицуОтсрочкиЦенНоменклатурыНоваяМетодика
//
Функция СформироватьТаблицуОтсрочкиЦенНоменклатурыНоваяМетодика(Период='00010101',
	Дивизион=Неопределено, Регион=Неопределено, КаналПродаж=Неопределено, Контрагент=Неопределено, УсловиеПоставки=Неопределено, АдресПоставки=Неопределено,
	Проект=Неопределено, ТоварнаяКатегория=Неопределено, Брендообъем=Неопределено, Номенклатура=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресаПоставки.Владелец.Дивизион КАК Дивизион,
		|	АдресаПоставки.НСИ_Регион КАК Регион,
		|	АдресаПоставки.Владелец.НСИ_КаналПродаж КАК КаналПродаж,
		|	АдресаПоставки.Владелец КАК Контрагент,
		|	АдресаПоставки.НСИ_УсловияПоставки КАК УсловияПоставки,
		|	АдресаПоставки.Ссылка КАК АдресПоставки,
		|	АдресаПоставки.Владелец.НСИ_Вывеска КАК Вывеска
		|ПОМЕСТИТЬ втКонтрагентыИАП
		|ИЗ
		|	Справочник.АдресаПоставки КАК АдресаПоставки
		|ГДЕ
		|	АдресаПоставки.Владелец ССЫЛКА Справочник.Контрагенты
		|	И НЕ АдресаПоставки.Владелец.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|	И (НЕ &ФильтроватьПоДивизион
		|			ИЛИ АдресаПоставки.Владелец.Дивизион В (&Дивизион))
		|	И (НЕ &ФильтроватьПоРегион
		|			ИЛИ АдресаПоставки.НСИ_Регион В (&Регион))
		|	И (НЕ &ФильтроватьПоКаналПродаж
		|			ИЛИ АдресаПоставки.Владелец.НСИ_КаналПродаж В (&КаналПродаж))
		|	И (НЕ &ФильтроватьПоКонтрагент
		|			ИЛИ АдресаПоставки.Владелец В (&Контрагент))
		|	И (НЕ &ФильтроватьПоУсловиеПоставки
		|			ИЛИ АдресаПоставки.НСИ_УсловияПоставки В (&УсловиеПоставки))
		|	И (НЕ &ФильтроватьПоАдресПоставки
		|			ИЛИ АдресаПоставки.Ссылка В (&АдресПоставки))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Проект КАК Проект,
		|	СпрНоменклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	СпрНоменклатура.НСИ_Брендообъем КАК Брендообъем,
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Услуга,
		|	СпрНоменклатура.ЕдиницаХраненияОстатков,
		|	СпрНоменклатура.СтавкаНДС,
		|	СпрНоменклатура.Код,
		|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО (Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13))
		|			И (Штрихкоды.ЕдиницаИзмерения = СпрНоменклатура.ЕдиницаХраненияОстатков)
		|			И (Штрихкоды.Владелец = СпрНоменклатура.Ссылка)
		|ГДЕ
		|	НЕ СпрНоменклатура.МКЮ = ЗНАЧЕНИЕ(Справочник.ПРГ_МКЮ.ПустаяСсылка)
		|	И СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
		|	И НЕ СпрНоменклатура.ПометкаУдаления
		|	И (НЕ &ФильтроватьПоПроект
		|			ИЛИ СпрНоменклатура.Проект В (&Проект))
		|	И (НЕ &ФильтроватьПоТоварнаяКатегория
		|			ИЛИ СпрНоменклатура.НСИ_ТоварнаяКатегория В (&ТоварнаяКатегория))
		|	И (НЕ &ФильтроватьПоБрендообъем
		|			ИЛИ СпрНоменклатура.НСИ_Брендообъем В (&Брендообъем))
		|	И (НЕ &ФильтроватьПоНоменклатура
		|			ИЛИ СпрНоменклатура.Ссылка В (&Номенклатура))
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрНоменклатура.Проект,
		|	СпрНоменклатура.НСИ_ТоварнаяКатегория,
		|	СпрНоменклатура.НСИ_Брендообъем,
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Услуга,
		|	СпрНоменклатура.ЕдиницаХраненияОстатков,
		|	СпрНоменклатура.СтавкаНДС,
		|	СпрНоменклатура.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.Дивизион,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.НСИ_Регион КАК Регион,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.НСИ_КаналПродаж КАК КаналПродаж,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.НСИ_Вывеска КАК Вывеска,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.Контрагент,
		|	ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка) КАК УсловиеПоставки,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.Грузополучатель КАК АдресПоставки,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.Проект КАК ПроектГП,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ПЦ_ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ПЦ_Брендообъем КАК Брендообъем,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка) КАК ТипЦен,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ДатаНачала,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ДатаОкончания,
		|	ПЦ_ОтменаОтсрочкиПовышенияЦенДокументы.ДатаОтмены,
		|	ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ДатаЦены
		|ПОМЕСТИТЬ втОтсрочкаПовышенияЦен
		|ИЗ
		|	РегистрСведений.ПЦ_ОтсрочкаПовышенияЦен.СрезПоследних КАК ПЦ_ОтсрочкаПовышенияЦенСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПЦ_ОтменаОтсрочкиПовышенияЦен.Документы КАК ПЦ_ОтменаОтсрочкиПовышенияЦенДокументы
		|		ПО ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ОтсрочкаПовышенияЦен = ПЦ_ОтменаОтсрочкиПовышенияЦенДокументы.ОтсрочкаПовышенияЦен
		|			И (ПЦ_ОтменаОтсрочкиПовышенияЦенДокументы.Ссылка.Проведен)
		|ГДЕ
		|	(ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ДатаОкончания >= &Период
		|			ИЛИ ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|	И (ПЦ_ОтменаОтсрочкиПовышенияЦенДокументы.ДатаОтмены ЕСТЬ NULL 
		|			ИЛИ ПЦ_ОтменаОтсрочкиПовышенияЦенДокументы.ДатаОтмены > &Период)
		|	И ПЦ_ОтсрочкаПовышенияЦенСрезПоследних.ДатаЦены < &Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтсрочкаПовышенияЦен.Дивизион,
		|	втОтсрочкаПовышенияЦен.Регион,
		|	втОтсрочкаПовышенияЦен.КаналПродаж,
		|	втОтсрочкаПовышенияЦен.Вывеска,
		|	втОтсрочкаПовышенияЦен.Контрагент,
		|	втОтсрочкаПовышенияЦен.УсловиеПоставки,
		|	втОтсрочкаПовышенияЦен.АдресПоставки,
		|	втОтсрочкаПовышенияЦен.ПроектГП КАК ПроектГП,
		|	втОтсрочкаПовышенияЦен.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	втОтсрочкаПовышенияЦен.Брендообъем КАК Брендообъем,
		|	втОтсрочкаПовышенияЦен.Номенклатура КАК Номенклатура,
		|	втОтсрочкаПовышенияЦен.ТипЦен,
		|	ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.Вывеска = ЗНАЧЕНИЕ(Справочник.НСИ_Вывески.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоКонтрагенту,
		|	ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА втОтсрочкаПовышенияЦен.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоНоменклатуре,
		|	втОтсрочкаПовышенияЦен.ДатаНачала,
		|	втОтсрочкаПовышенияЦен.ДатаОкончания,
		|	втОтсрочкаПовышенияЦен.ДатаОтмены,
		|	втОтсрочкаПовышенияЦен.ДатаЦены
		|ПОМЕСТИТЬ втИсходныеДанные
		|ИЗ
		|	втОтсрочкаПовышенияЦен КАК втОтсрочкаПовышенияЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсходныеДанные.Дивизион,
		|	втИсходныеДанные.Регион,
		|	втИсходныеДанные.КаналПродаж,
		|	втИсходныеДанные.Вывеска,
		|	втИсходныеДанные.Контрагент,
		|	втИсходныеДанные.УсловиеПоставки,
		|	втИсходныеДанные.АдресПоставки,
		|	втИсходныеДанные.ПроектГП,
		|	втИсходныеДанные.ТоварнаяКатегория,
		|	втИсходныеДанные.Брендообъем,
		|	втИсходныеДанные.Номенклатура,
		|	втИсходныеДанные.ТипЦен,
		|	втИсходныеДанные.ПриоритетПоКонтрагенту,
		|	втИсходныеДанные.ПриоритетПоНоменклатуре,
		|	втИсходныеДанные.ДатаНачала,
		|	втИсходныеДанные.ДатаОкончания,
		|	втИсходныеДанные.ДатаОтмены,
		|	втИсходныеДанные.ДатаЦены
		|ПОМЕСТИТЬ вт1
		|ИЗ
		|	втИсходныеДанные КАК втИсходныеДанные
		|ГДЕ
		|	НЕ втИсходныеДанные.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Вывеска,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания,
		|	ВложенныйЗапрос.ДатаОтмены,
		|	ВложенныйЗапрос.ДатаЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		втИсходныеДанные.Регион КАК Регион,
		|		ВложенныйЗапрос.Дивизион КАК Дивизион,
		|		втИсходныеДанные.КаналПродаж КАК КаналПродаж,
		|		втИсходныеДанные.Контрагент КАК Контрагент,
		|		втИсходныеДанные.УсловиеПоставки КАК УсловиеПоставки,
		|		втИсходныеДанные.АдресПоставки КАК АдресПоставки,
		|		втИсходныеДанные.ПроектГП КАК ПроектГП,
		|		втИсходныеДанные.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		втИсходныеДанные.Брендообъем КАК Брендообъем,
		|		втИсходныеДанные.Номенклатура КАК Номенклатура,
		|		втИсходныеДанные.ТипЦен КАК ТипЦен,
		|		втИсходныеДанные.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		втИсходныеДанные.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		втИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|		втИсходныеДанные.ДатаОкончания КАК ДатаОкончания,
		|		втИсходныеДанные.ДатаОтмены КАК ДатаОтмены,
		|		втИсходныеДанные.ДатаЦены КАК ДатаЦены,
		|		втИсходныеДанные.Вывеска КАК Вывеска
		|	ИЗ
		|		втИсходныеДанные КАК втИсходныеДанные,
		|		(ВЫБРАТЬ
		|			втКонтрагентыИАП.Дивизион КАК Дивизион
		|		ИЗ
		|			втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ГДЕ
		|			НЕ втКонтрагентыИАП.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втКонтрагентыИАП.Дивизион) КАК ВложенныйЗапрос
		|	ГДЕ
		|		втИсходныеДанные.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт1.Дивизион,
		|	вт1.Регион,
		|	вт1.КаналПродаж,
		|	вт1.Вывеска,
		|	вт1.Контрагент,
		|	вт1.УсловиеПоставки,
		|	вт1.АдресПоставки,
		|	вт1.ПроектГП,
		|	вт1.ТоварнаяКатегория,
		|	вт1.Брендообъем,
		|	вт1.Номенклатура,
		|	вт1.ТипЦен,
		|	вт1.ПриоритетПоКонтрагенту,
		|	вт1.ПриоритетПоНоменклатуре,
		|	вт1.ДатаНачала,
		|	вт1.ДатаОкончания,
		|	вт1.ДатаОтмены,
		|	вт1.ДатаЦены
		|ПОМЕСТИТЬ вт2
		|ИЗ
		|	вт1 КАК вт1
		|ГДЕ
		|	НЕ вт1.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Вывеска,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания,
		|	ВложенныйЗапрос.ДатаОтмены,
		|	ВложенныйЗапрос.ДатаЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт1.Дивизион КАК Дивизион,
		|		ВложенныйЗапрос.Регион КАК Регион,
		|		вт1.КаналПродаж КАК КаналПродаж,
		|		вт1.Контрагент КАК Контрагент,
		|		вт1.УсловиеПоставки КАК УсловиеПоставки,
		|		вт1.АдресПоставки КАК АдресПоставки,
		|		вт1.ПроектГП КАК ПроектГП,
		|		вт1.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт1.Брендообъем КАК Брендообъем,
		|		вт1.Номенклатура КАК Номенклатура,
		|		вт1.ТипЦен КАК ТипЦен,
		|		вт1.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт1.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт1.ДатаНачала КАК ДатаНачала,
		|		вт1.ДатаОкончания КАК ДатаОкончания,
		|		вт1.ДатаОтмены КАК ДатаОтмены,
		|		вт1.ДатаЦены КАК ДатаЦены,
		|		вт1.Вывеска КАК Вывеска
		|	ИЗ
		|		вт1 КАК вт1
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.Регион КАК Регион
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.Дивизион) КАК ВложенныйЗапрос
		|			ПО вт1.Дивизион = ВложенныйЗапрос.Дивизион
		|	ГДЕ
		|		вт1.Регион = ЗНАЧЕНИЕ(Справочник.Регионы.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт2.Дивизион,
		|	вт2.Регион,
		|	вт2.КаналПродаж,
		|	вт2.Вывеска,
		|	вт2.Контрагент,
		|	вт2.УсловиеПоставки,
		|	вт2.АдресПоставки,
		|	вт2.ПроектГП,
		|	вт2.ТоварнаяКатегория,
		|	вт2.Брендообъем,
		|	вт2.Номенклатура,
		|	вт2.ТипЦен,
		|	вт2.ПриоритетПоКонтрагенту,
		|	вт2.ПриоритетПоНоменклатуре,
		|	вт2.ДатаНачала,
		|	вт2.ДатаОкончания,
		|	вт2.ДатаОтмены,
		|	вт2.ДатаЦены
		|ПОМЕСТИТЬ вт3
		|ИЗ
		|	вт2 КАК вт2
		|ГДЕ
		|	НЕ вт2.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Вывеска,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания,
		|	ВложенныйЗапрос.ДатаОтмены,
		|	ВложенныйЗапрос.ДатаЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт2.Регион КАК Регион,
		|		вт2.Дивизион КАК Дивизион,
		|		ВложенныйЗапрос.КаналПродаж КАК КаналПродаж,
		|		вт2.Контрагент КАК Контрагент,
		|		вт2.УсловиеПоставки КАК УсловиеПоставки,
		|		вт2.АдресПоставки КАК АдресПоставки,
		|		вт2.ПроектГП КАК ПроектГП,
		|		вт2.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт2.Брендообъем КАК Брендообъем,
		|		вт2.Номенклатура КАК Номенклатура,
		|		вт2.ТипЦен КАК ТипЦен,
		|		вт2.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт2.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт2.ДатаНачала КАК ДатаНачала,
		|		вт2.ДатаОкончания КАК ДатаОкончания,
		|		вт2.ДатаОтмены КАК ДатаОтмены,
		|		вт2.ДатаЦены КАК ДатаЦены,
		|		вт2.Вывеска КАК Вывеска
		|	ИЗ
		|		вт2 КАК вт2
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Регион КАК Регион,
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.КаналПродаж КАК КаналПродаж
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.Дивизион,
		|				втКонтрагентыИАП.КаналПродаж) КАК ВложенныйЗапрос
		|			ПО вт2.Регион = ВложенныйЗапрос.Регион
		|				И вт2.Дивизион = ВложенныйЗапрос.Дивизион
		|	ГДЕ
		|		вт2.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт3.Дивизион,
		|	вт3.Регион,
		|	вт3.КаналПродаж,
		|	вт3.Вывеска,
		|	вт3.Контрагент,
		|	вт3.УсловиеПоставки,
		|	вт3.АдресПоставки,
		|	вт3.ПроектГП,
		|	вт3.ТоварнаяКатегория,
		|	вт3.Брендообъем,
		|	вт3.Номенклатура,
		|	вт3.ТипЦен,
		|	вт3.ПриоритетПоКонтрагенту,
		|	вт3.ПриоритетПоНоменклатуре,
		|	вт3.ДатаНачала,
		|	вт3.ДатаОкончания,
		|	вт3.ДатаОтмены,
		|	вт3.ДатаЦены
		|ПОМЕСТИТЬ вт3_1
		|ИЗ
		|	вт3 КАК вт3
		|ГДЕ
		|	НЕ вт3.Вывеска = ЗНАЧЕНИЕ(Справочник.НСИ_Вывески.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Вывеска,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания,
		|	ВложенныйЗапрос.ДатаОтмены,
		|	ВложенныйЗапрос.ДатаЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт3.Регион КАК Регион,
		|		вт3.Дивизион КАК Дивизион,
		|		вт3.КаналПродаж КАК КаналПродаж,
		|		вт3.Контрагент КАК Контрагент,
		|		вт3.УсловиеПоставки КАК УсловиеПоставки,
		|		вт3.АдресПоставки КАК АдресПоставки,
		|		вт3.ПроектГП КАК ПроектГП,
		|		вт3.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт3.Брендообъем КАК Брендообъем,
		|		вт3.Номенклатура КАК Номенклатура,
		|		вт3.ТипЦен КАК ТипЦен,
		|		вт3.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт3.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт3.ДатаНачала КАК ДатаНачала,
		|		вт3.ДатаОкончания КАК ДатаОкончания,
		|		вт3.ДатаОтмены КАК ДатаОтмены,
		|		вт3.ДатаЦены КАК ДатаЦены,
		|		ВложенныйЗапрос.Вывеска КАК Вывеска
		|	ИЗ
		|		вт3 КАК вт3
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Регион КАК Регион,
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|				втКонтрагентыИАП.Вывеска КАК Вывеска
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.КаналПродаж = ЗНАЧЕНИЕ(Справочник.НСИ_КаналыПродаж.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.Дивизион,
		|				втКонтрагентыИАП.КаналПродаж,
		|				втКонтрагентыИАП.Вывеска) КАК ВложенныйЗапрос
		|			ПО вт3.Регион = ВложенныйЗапрос.Регион
		|				И вт3.Дивизион = ВложенныйЗапрос.Дивизион
		|				И вт3.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|	ГДЕ
		|		вт3.Вывеска = ЗНАЧЕНИЕ(Справочник.НСИ_Вывески.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт3_1.Дивизион,
		|	вт3_1.Регион,
		|	вт3_1.КаналПродаж,
		|	вт3_1.Вывеска,
		|	вт3_1.Контрагент,
		|	вт3_1.УсловиеПоставки,
		|	вт3_1.АдресПоставки,
		|	вт3_1.ПроектГП,
		|	вт3_1.ТоварнаяКатегория,
		|	вт3_1.Брендообъем,
		|	вт3_1.Номенклатура,
		|	вт3_1.ТипЦен,
		|	вт3_1.ПриоритетПоКонтрагенту,
		|	вт3_1.ПриоритетПоНоменклатуре,
		|	вт3_1.ДатаНачала,
		|	вт3_1.ДатаОкончания,
		|	вт3_1.ДатаОтмены,
		|	вт3_1.ДатаЦены
		|ПОМЕСТИТЬ вт4
		|ИЗ
		|	вт3_1 КАК вт3_1
		|ГДЕ
		|	НЕ вт3_1.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Вывеска,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания,
		|	ВложенныйЗапрос.ДатаОтмены,
		|	ВложенныйЗапрос.ДатаЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт3_1.Регион КАК Регион,
		|		вт3_1.Дивизион КАК Дивизион,
		|		вт3_1.КаналПродаж КАК КаналПродаж,
		|		ВложенныйЗапрос.Контрагент КАК Контрагент,
		|		вт3_1.УсловиеПоставки КАК УсловиеПоставки,
		|		вт3_1.АдресПоставки КАК АдресПоставки,
		|		вт3_1.ПроектГП КАК ПроектГП,
		|		вт3_1.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт3_1.Брендообъем КАК Брендообъем,
		|		вт3_1.Номенклатура КАК Номенклатура,
		|		вт3_1.ТипЦен КАК ТипЦен,
		|		вт3_1.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт3_1.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт3_1.ДатаНачала КАК ДатаНачала,
		|		вт3_1.ДатаОкончания КАК ДатаОкончания,
		|		вт3_1.ДатаОтмены КАК ДатаОтмены,
		|		вт3_1.ДатаЦены КАК ДатаЦены,
		|		вт3_1.Вывеска КАК Вывеска
		|	ИЗ
		|		вт3_1 КАК вт3_1
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				втКонтрагентыИАП.Регион КАК Регион,
		|				втКонтрагентыИАП.Дивизион КАК Дивизион,
		|				втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|				втКонтрагентыИАП.Вывеска КАК Вывеска,
		|				втКонтрагентыИАП.Контрагент КАК Контрагент
		|			ИЗ
		|				втКонтрагентыИАП КАК втКонтрагентыИАП
		|			ГДЕ
		|				НЕ втКонтрагентыИАП.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				втКонтрагентыИАП.Дивизион,
		|				втКонтрагентыИАП.Регион,
		|				втКонтрагентыИАП.КаналПродаж,
		|				втКонтрагентыИАП.Контрагент,
		|				втКонтрагентыИАП.Вывеска) КАК ВложенныйЗапрос
		|			ПО вт3_1.Регион = ВложенныйЗапрос.Регион
		|				И вт3_1.Дивизион = ВложенныйЗапрос.Дивизион
		|				И вт3_1.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|				И вт3_1.Вывеска = ВложенныйЗапрос.Вывеска
		|	ГДЕ
		|		вт3_1.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Вывеска,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания,
		|	ВложенныйЗапрос.ДатаОтмены,
		|	ВложенныйЗапрос.ДатаЦены
		|ПОМЕСТИТЬ вт5
		|ИЗ
		|	(ВЫБРАТЬ
		|		вт4.Дивизион КАК Дивизион,
		|		вт4.Регион КАК Регион,
		|		вт4.КаналПродаж КАК КаналПродаж,
		|		вт4.Контрагент КАК Контрагент,
		|		вт4.УсловиеПоставки КАК УсловиеПоставки,
		|		вт4.АдресПоставки КАК АдресПоставки,
		|		вт4.ПроектГП КАК ПроектГП,
		|		вт4.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		вт4.Брендообъем КАК Брендообъем,
		|		вт4.Номенклатура КАК Номенклатура,
		|		вт4.ТипЦен КАК ТипЦен,
		|		вт4.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|		вт4.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|		вт4.ДатаНачала КАК ДатаНачала,
		|		вт4.ДатаОкончания КАК ДатаОкончания,
		|		вт4.ДатаОтмены КАК ДатаОтмены,
		|		вт4.ДатаЦены КАК ДатаЦены,
		|		вт4.Вывеска КАК Вывеска
		|	ИЗ
		|		вт4 КАК вт4
		|	ГДЕ
		|		НЕ вт4.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВложенныйЗапрос.Дивизион,
		|		ВложенныйЗапрос.Регион,
		|		ВложенныйЗапрос.КаналПродаж,
		|		ВложенныйЗапрос.Контрагент,
		|		ВложенныйЗапрос.УсловияПоставки,
		|		ВложенныйЗапрос.АдресПоставки,
		|		ВложенныйЗапрос.ПроектГП,
		|		ВложенныйЗапрос.ТоварнаяКатегория,
		|		ВложенныйЗапрос.Брендообъем,
		|		ВложенныйЗапрос.Номенклатура,
		|		ВложенныйЗапрос.ТипЦен,
		|		ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|		ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|		ВложенныйЗапрос.ДатаНачала,
		|		ВложенныйЗапрос.ДатаОкончания,
		|		ВложенныйЗапрос.ДатаОтмены,
		|		ВложенныйЗапрос.ДатаЦены,
		|		ВложенныйЗапрос.Вывеска
		|	ИЗ
		|		(ВЫБРАТЬ
		|			вт4.Дивизион КАК Дивизион,
		|			вт4.Регион КАК Регион,
		|			вт4.КаналПродаж КАК КаналПродаж,
		|			вт4.Контрагент КАК Контрагент,
		|			ВложенныйЗапрос.УсловияПоставки КАК УсловияПоставки,
		|			вт4.АдресПоставки КАК АдресПоставки,
		|			вт4.ПроектГП КАК ПроектГП,
		|			вт4.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			вт4.Брендообъем КАК Брендообъем,
		|			вт4.Номенклатура КАК Номенклатура,
		|			вт4.ТипЦен КАК ТипЦен,
		|			вт4.ПриоритетПоКонтрагенту КАК ПриоритетПоКонтрагенту,
		|			вт4.ПриоритетПоНоменклатуре КАК ПриоритетПоНоменклатуре,
		|			вт4.ДатаНачала КАК ДатаНачала,
		|			вт4.ДатаОкончания КАК ДатаОкончания,
		|			вт4.ДатаОтмены КАК ДатаОтмены,
		|			вт4.ДатаЦены КАК ДатаЦены,
		|			вт4.Вывеска КАК Вывеска
		|		ИЗ
		|			вт4 КАК вт4
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					втКонтрагентыИАП.Дивизион КАК Дивизион,
		|					втКонтрагентыИАП.Регион КАК Регион,
		|					втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|					втКонтрагентыИАП.Контрагент КАК Контрагент,
		|					втКонтрагентыИАП.УсловияПоставки КАК УсловияПоставки
		|				ИЗ
		|					втКонтрагентыИАП КАК втКонтрагентыИАП
		|				ГДЕ
		|					НЕ втКонтрагентыИАП.УсловияПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					втКонтрагентыИАП.Регион,
		|					втКонтрагентыИАП.Дивизион,
		|					втКонтрагентыИАП.КаналПродаж,
		|					втКонтрагентыИАП.Контрагент,
		|					втКонтрагентыИАП.УсловияПоставки) КАК ВложенныйЗапрос
		|				ПО вт4.Дивизион = ВложенныйЗапрос.Дивизион
		|					И вт4.Регион = ВложенныйЗапрос.Регион
		|					И вт4.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|					И вт4.Контрагент = ВложенныйЗапрос.Контрагент
		|		ГДЕ
		|			вт4.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ПустаяСсылка)) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Регион,
		|	ВложенныйЗапрос.ТипЦен,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.КаналПродаж,
		|	ВложенныйЗапрос.Дивизион,
		|	ВложенныйЗапрос.УсловиеПоставки,
		|	ВложенныйЗапрос.ПриоритетПоКонтрагенту,
		|	ВложенныйЗапрос.ПриоритетПоНоменклатуре,
		|	ВложенныйЗапрос.ДатаОтмены,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания,
		|	ВложенныйЗапрос.ДатаЦены,
		|	ВложенныйЗапрос.Вывеска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтрагентыИАП.Дивизион,
		|	втКонтрагентыИАП.Регион,
		|	втКонтрагентыИАП.КаналПродаж,
		|	вт5.Вывеска,
		|	втКонтрагентыИАП.Контрагент,
		|	втКонтрагентыИАП.УсловияПоставки КАК УсловиеПоставки,
		|	вт5.АдресПоставки,
		|	вт5.ПроектГП,
		|	вт5.ТоварнаяКатегория,
		|	вт5.Брендообъем,
		|	вт5.Номенклатура,
		|	вт5.ТипЦен,
		|	вт5.ПриоритетПоКонтрагенту,
		|	вт5.ПриоритетПоНоменклатуре,
		|	вт5.ДатаНачала,
		|	вт5.ДатаОкончания,
		|	вт5.ДатаОтмены,
		|	вт5.ДатаЦены
		|ПОМЕСТИТЬ вт6
		|ИЗ
		|	вт5 КАК вт5
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ПО вт5.АдресПоставки = втКонтрагентыИАП.АдресПоставки
		|			И (НЕ вт5.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт5.Дивизион,
		|	вт5.Регион,
		|	вт5.КаналПродаж,
		|	вт5.Вывеска,
		|	вт5.Контрагент,
		|	вт5.УсловиеПоставки,
		|	ВложенныйЗапрос.АдресПоставки,
		|	вт5.ПроектГП,
		|	вт5.ТоварнаяКатегория,
		|	вт5.Брендообъем,
		|	вт5.Номенклатура,
		|	вт5.ТипЦен,
		|	вт5.ПриоритетПоКонтрагенту,
		|	вт5.ПриоритетПоНоменклатуре,
		|	вт5.ДатаНачала,
		|	вт5.ДатаОкончания,
		|	вт5.ДатаОтмены,
		|	вт5.ДатаЦены
		|ИЗ
		|	вт5 КАК вт5
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втКонтрагентыИАП.Дивизион КАК Дивизион,
		|			втКонтрагентыИАП.Регион КАК Регион,
		|			втКонтрагентыИАП.КаналПродаж КАК КаналПродаж,
		|			втКонтрагентыИАП.Контрагент КАК Контрагент,
		|			втКонтрагентыИАП.УсловияПоставки КАК УсловияПоставки,
		|			втКонтрагентыИАП.АдресПоставки КАК АдресПоставки
		|		ИЗ
		|			втКонтрагентыИАП КАК втКонтрагентыИАП
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втКонтрагентыИАП.Дивизион,
		|			втКонтрагентыИАП.Регион,
		|			втКонтрагентыИАП.КаналПродаж,
		|			втКонтрагентыИАП.Контрагент,
		|			втКонтрагентыИАП.УсловияПоставки,
		|			втКонтрагентыИАП.АдресПоставки) КАК ВложенныйЗапрос
		|		ПО вт5.Дивизион = ВложенныйЗапрос.Дивизион
		|			И вт5.Регион = ВложенныйЗапрос.Регион
		|			И вт5.КаналПродаж = ВложенныйЗапрос.КаналПродаж
		|			И вт5.Контрагент = ВложенныйЗапрос.Контрагент
		|			И вт5.УсловиеПоставки = ВложенныйЗапрос.УсловияПоставки
		|ГДЕ
		|	вт5.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт6.Дивизион,
		|	вт6.Регион,
		|	вт6.КаналПродаж,
		|	вт6.Вывеска,
		|	вт6.Контрагент,
		|	вт6.УсловиеПоставки,
		|	вт6.АдресПоставки,
		|	вт6.ПроектГП,
		|	вт6.ТоварнаяКатегория,
		|	вт6.Брендообъем,
		|	вт6.Номенклатура,
		|	вт6.ТипЦен,
		|	вт6.ПриоритетПоКонтрагенту,
		|	вт6.ПриоритетПоНоменклатуре,
		|	вт6.ДатаНачала,
		|	вт6.ДатаОкончания,
		|	вт6.ДатаОтмены,
		|	вт6.ДатаЦены
		|ПОМЕСТИТЬ вт7
		|ИЗ
		|	вт6 КАК вт6
		|ГДЕ
		|	НЕ вт6.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт6.Дивизион,
		|	вт6.Регион,
		|	вт6.КаналПродаж,
		|	вт6.Вывеска,
		|	вт6.Контрагент,
		|	вт6.УсловиеПоставки,
		|	вт6.АдресПоставки,
		|	ВложенныйЗапрос.Проект,
		|	вт6.ТоварнаяКатегория,
		|	вт6.Брендообъем,
		|	вт6.Номенклатура,
		|	вт6.ТипЦен,
		|	вт6.ПриоритетПоКонтрагенту,
		|	вт6.ПриоритетПоНоменклатуре,
		|	вт6.ДатаНачала,
		|	вт6.ДатаОкончания,
		|	вт6.ДатаОтмены,
		|	вт6.ДатаЦены
		|ИЗ
		|	вт6 КАК вт6,
		|	(ВЫБРАТЬ
		|		втНоменклатура.Проект КАК Проект
		|	ИЗ
		|		втНоменклатура КАК втНоменклатура
		|	ГДЕ
		|		НЕ втНоменклатура.Проект = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		втНоменклатура.Проект) КАК ВложенныйЗапрос
		|ГДЕ
		|	вт6.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт7.Дивизион,
		|	вт7.Регион,
		|	вт7.КаналПродаж,
		|	вт7.Вывеска,
		|	вт7.Контрагент,
		|	вт7.УсловиеПоставки,
		|	вт7.АдресПоставки,
		|	вт7.ПроектГП,
		|	вт7.ТоварнаяКатегория,
		|	вт7.Брендообъем,
		|	вт7.Номенклатура,
		|	вт7.ТипЦен,
		|	вт7.ПриоритетПоКонтрагенту,
		|	вт7.ПриоритетПоНоменклатуре,
		|	вт7.ДатаНачала,
		|	вт7.ДатаОкончания,
		|	вт7.ДатаОтмены,
		|	вт7.ДатаЦены
		|ПОМЕСТИТЬ вт8
		|ИЗ
		|	вт7 КАК вт7
		|ГДЕ
		|	НЕ вт7.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт7.Дивизион,
		|	вт7.Регион,
		|	вт7.КаналПродаж,
		|	вт7.Вывеска,
		|	вт7.Контрагент,
		|	вт7.УсловиеПоставки,
		|	вт7.АдресПоставки,
		|	вт7.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	вт7.Брендообъем,
		|	вт7.Номенклатура,
		|	вт7.ТипЦен,
		|	вт7.ПриоритетПоКонтрагенту,
		|	вт7.ПриоритетПоНоменклатуре,
		|	вт7.ДатаНачала,
		|	вт7.ДатаОкончания,
		|	вт7.ДатаОтмены,
		|	вт7.ДатаЦены
		|ИЗ
		|	вт7 КАК вт7
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втНоменклатура.Проект КАК Проект,
		|			втНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория
		|		ИЗ
		|			втНоменклатура КАК втНоменклатура
		|		ГДЕ
		|			НЕ втНоменклатура.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втНоменклатура.Проект,
		|			втНоменклатура.ТоварнаяКатегория) КАК ВложенныйЗапрос
		|		ПО вт7.ПроектГП = ВложенныйЗапрос.Проект
		|ГДЕ
		|	вт7.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт8.Дивизион,
		|	вт8.Регион,
		|	вт8.КаналПродаж,
		|	вт8.Вывеска,
		|	вт8.Контрагент,
		|	вт8.УсловиеПоставки,
		|	вт8.АдресПоставки,
		|	вт8.ПроектГП,
		|	вт8.ТоварнаяКатегория,
		|	вт8.Брендообъем,
		|	вт8.Номенклатура,
		|	вт8.ТипЦен,
		|	вт8.ПриоритетПоКонтрагенту,
		|	вт8.ПриоритетПоНоменклатуре,
		|	вт8.ДатаНачала,
		|	вт8.ДатаОкончания,
		|	вт8.ДатаОтмены,
		|	вт8.ДатаЦены
		|ПОМЕСТИТЬ вт9
		|ИЗ
		|	вт8 КАК вт8
		|ГДЕ
		|	НЕ вт8.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт8.Дивизион,
		|	вт8.Регион,
		|	вт8.КаналПродаж,
		|	вт8.Вывеска,
		|	вт8.Контрагент,
		|	вт8.УсловиеПоставки,
		|	вт8.АдресПоставки,
		|	вт8.ПроектГП,
		|	вт8.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	вт8.Номенклатура,
		|	вт8.ТипЦен,
		|	вт8.ПриоритетПоКонтрагенту,
		|	вт8.ПриоритетПоНоменклатуре,
		|	вт8.ДатаНачала,
		|	вт8.ДатаОкончания,
		|	вт8.ДатаОтмены,
		|	вт8.ДатаЦены
		|ИЗ
		|	вт8 КАК вт8
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втНоменклатура.Проект КАК Проект,
		|			втНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			втНоменклатура.Брендообъем КАК Брендообъем
		|		ИЗ
		|			втНоменклатура КАК втНоменклатура
		|		ГДЕ
		|			НЕ втНоменклатура.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втНоменклатура.Проект,
		|			втНоменклатура.ТоварнаяКатегория,
		|			втНоменклатура.Брендообъем) КАК ВложенныйЗапрос
		|		ПО вт8.ПроектГП = ВложенныйЗапрос.Проект
		|			И вт8.ТоварнаяКатегория = ВложенныйЗапрос.ТоварнаяКатегория
		|ГДЕ
		|	вт8.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт9.Дивизион,
		|	вт9.Регион,
		|	вт9.КаналПродаж,
		|	вт9.Вывеска,
		|	вт9.Контрагент,
		|	вт9.УсловиеПоставки,
		|	вт9.АдресПоставки,
		|	вт9.ПроектГП,
		|	вт9.ТоварнаяКатегория,
		|	вт9.Брендообъем,
		|	вт9.Номенклатура,
		|	вт9.ПриоритетПоКонтрагенту,
		|	вт9.ПриоритетПоНоменклатуре,
		|	вт9.ПриоритетПоКонтрагенту + вт9.ПриоритетПоНоменклатуре КАК Приоритет,
		|	вт9.ДатаНачала,
		|	вт9.ДатаОкончания,
		|	вт9.ДатаОтмены,
		|	вт9.ДатаЦены
		|ПОМЕСТИТЬ вт10
		|ИЗ
		|	вт9 КАК вт9
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО вт9.Номенклатура = втНоменклатура.Номенклатура
		|ГДЕ
		|	НЕ вт9.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт9.Контрагент,
		|	вт9.Дивизион,
		|	вт9.Регион,
		|	вт9.КаналПродаж,
		|	вт9.УсловиеПоставки,
		|	вт9.АдресПоставки,
		|	вт9.ПроектГП,
		|	вт9.ТоварнаяКатегория,
		|	вт9.Брендообъем,
		|	вт9.Номенклатура,
		|	вт9.ПриоритетПоКонтрагенту,
		|	вт9.ПриоритетПоНоменклатуре,
		|	вт9.ДатаНачала,
		|	вт9.ДатаОкончания,
		|	вт9.ДатаОтмены,
		|	вт9.ДатаЦены,
		|	вт9.Вывеска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт9.Дивизион,
		|	вт9.Регион,
		|	вт9.КаналПродаж,
		|	вт9.Вывеска,
		|	вт9.Контрагент,
		|	вт9.УсловиеПоставки,
		|	вт9.АдресПоставки,
		|	вт9.ПроектГП,
		|	вт9.ТоварнаяКатегория,
		|	вт9.Брендообъем,
		|	втНоменклатура.Номенклатура,
		|	вт9.ПриоритетПоКонтрагенту,
		|	вт9.ПриоритетПоНоменклатуре,
		|	вт9.ПриоритетПоКонтрагенту + вт9.ПриоритетПоНоменклатуре,
		|	вт9.ДатаНачала,
		|	вт9.ДатаОкончания,
		|	вт9.ДатаОтмены,
		|	вт9.ДатаЦены
		|ИЗ
		|	вт9 КАК вт9
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО вт9.ПроектГП = втНоменклатура.Проект
		|			И вт9.ТоварнаяКатегория = втНоменклатура.ТоварнаяКатегория
		|			И вт9.Брендообъем = втНоменклатура.Брендообъем
		|ГДЕ
		|	вт9.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт10.Дивизион,
		|	вт10.Регион,
		|	вт10.КаналПродаж,
		|	вт10.Вывеска,
		|	вт10.Контрагент,
		|	вт10.УсловиеПоставки,
		|	вт10.АдресПоставки,
		|	вт10.ПроектГП,
		|	вт10.ТоварнаяКатегория,
		|	вт10.Брендообъем,
		|	вт10.Номенклатура,
		|	МАКСИМУМ(вт10.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ вт10_МаксимальныйПриоритет
		|ИЗ
		|	вт10 КАК вт10
		|
		|СГРУППИРОВАТЬ ПО
		|	вт10.Дивизион,
		|	вт10.Регион,
		|	вт10.КаналПродаж,
		|	вт10.Контрагент,
		|	вт10.УсловиеПоставки,
		|	вт10.АдресПоставки,
		|	вт10.ПроектГП,
		|	вт10.ТоварнаяКатегория,
		|	вт10.Брендообъем,
		|	вт10.Номенклатура,
		|	вт10.Вывеска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт10.Дивизион,
		|	вт10.Регион,
		|	вт10.КаналПродаж,
		|	вт10.Вывеска,
		|	вт10.Контрагент,
		|	вт10.УсловиеПоставки,
		|	вт10.АдресПоставки,
		|	вт10.ПроектГП,
		|	вт10.ТоварнаяКатегория,
		|	вт10.Брендообъем,
		|	вт10.Номенклатура,
		|	вт10.Приоритет,
		|	вт10.ДатаНачала,
		|	вт10.ДатаОкончания,
		|	вт10.ДатаОтмены,
		|	вт10.ДатаЦены
		|ИЗ
		|	вт10 КАК вт10
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт10_МаксимальныйПриоритет КАК вт10_МаксимальныйПриоритет
		|		ПО вт10.Дивизион = вт10_МаксимальныйПриоритет.Дивизион
		|			И вт10.Регион = вт10_МаксимальныйПриоритет.Регион
		|			И вт10.КаналПродаж = вт10_МаксимальныйПриоритет.КаналПродаж
		|			И вт10.Контрагент = вт10_МаксимальныйПриоритет.Контрагент
		|			И вт10.УсловиеПоставки = вт10_МаксимальныйПриоритет.УсловиеПоставки
		|			И вт10.АдресПоставки = вт10_МаксимальныйПриоритет.АдресПоставки
		|			И вт10.ПроектГП = вт10_МаксимальныйПриоритет.ПроектГП
		|			И вт10.ТоварнаяКатегория = вт10_МаксимальныйПриоритет.ТоварнаяКатегория
		|			И вт10.Брендообъем = вт10_МаксимальныйПриоритет.Брендообъем
		|			И вт10.Номенклатура = вт10_МаксимальныйПриоритет.Номенклатура
		|			И вт10.Приоритет = вт10_МаксимальныйПриоритет.Приоритет
		|			И вт10.Вывеска = вт10_МаксимальныйПриоритет.Вывеска";

	//Общие	
	Запрос.УстановитьПараметр("Период",?(Период='00010101',НачалоДня(ТекущаяДата()),НачалоДня(Период)));
	
	//Кому
	Запрос.УстановитьПараметр("Дивизион",?(Дивизион=Неопределено,Справочники.ПРГДивизионы.ПустаяСсылка(),Дивизион));
	Запрос.УстановитьПараметр("ФильтроватьПоДивизион",НЕ Дивизион=Неопределено);
	Запрос.УстановитьПараметр("Регион",?(Регион=Неопределено,Справочники.Регионы.ПустаяСсылка(),Регион));
	Запрос.УстановитьПараметр("ФильтроватьПоРегион",НЕ Регион=Неопределено);
	Запрос.УстановитьПараметр("КаналПродаж",?(КаналПродаж=Неопределено,Справочники.НСИ_КаналыПродаж.ПустаяСсылка(),КаналПродаж));
	Запрос.УстановитьПараметр("ФильтроватьПоКаналПродаж",НЕ КаналПродаж=Неопределено);
	Запрос.УстановитьПараметр("Контрагент",?(Контрагент=Неопределено,Справочники.Контрагенты.ПустаяСсылка(),Контрагент));
	Запрос.УстановитьПараметр("ФильтроватьПоКонтрагент",НЕ Контрагент=Неопределено);
	Запрос.УстановитьПараметр("УсловиеПоставки",?(УсловиеПоставки=Неопределено,Перечисления.ПТЛ_УсловияПоставки.ПустаяСсылка(),УсловиеПоставки));
	Запрос.УстановитьПараметр("ФильтроватьПоУсловиеПоставки",НЕ УсловиеПоставки=Неопределено);
	Запрос.УстановитьПараметр("АдресПоставки",?(АдресПоставки=Неопределено,Справочники.АдресаПоставки.ПустаяСсылка(),АдресПоставки));
	Запрос.УстановитьПараметр("ФильтроватьПоАдресПоставки",НЕ АдресПоставки=Неопределено);
	
	//Что
	Запрос.УстановитьПараметр("Проект",?(Проект=Неопределено,Справочники.ПРГ_ПроектыГП.ПустаяСсылка(),Проект));
	Запрос.УстановитьПараметр("ФильтроватьПоПроект",НЕ Проект=Неопределено);
	Запрос.УстановитьПараметр("ТоварнаяКатегория",?(ТоварнаяКатегория=Неопределено,Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка(),ТоварнаяКатегория));
	Запрос.УстановитьПараметр("ФильтроватьПоТоварнаяКатегория",НЕ ТоварнаяКатегория=Неопределено);
	Запрос.УстановитьПараметр("Брендообъем",?(Брендообъем=Неопределено,Справочники.НСИ_Брендообъемы.ПустаяСсылка(),Брендообъем));
	Запрос.УстановитьПараметр("ФильтроватьПоБрендообъем",НЕ Брендообъем=Неопределено);	
	Запрос.УстановитьПараметр("Номенклатура",?(Номенклатура=Неопределено,Справочники.Номенклатура.ПустаяСсылка(),Номенклатура));
    Запрос.УстановитьПараметр("ФильтроватьПоНоменклатура",НЕ Номенклатура=Неопределено);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//ПолучитьЦенуНоменклатурыНоваяМетодика(..)
//Функция предназначена для формирования таблицы АП+Номенклатура+ТипЦены+Цена с и без НДС
//
//Параметры:
//Период - период получения данных по ценам (например срез последних к ценам номенклатуры),
//ПериодПолученияКурсовВалют - срез последних к курсам валют,
//ПересчитыватьЦеныВВалютуРегламентированногоУчета - пересчитывать в валюту рег. учета (рубли),
//Дивизион, Регион итд - могут принимать ссылку или массив значений
//
//На выходе таблица значений
Функция ПолучитьУсловияДопИзмененияЦеныНоменклатурыНоваяМетодика(Период='00010101', 
	Контрагент=Неопределено, АдресПоставки=Неопределено,
	Проект=Неопределено, ТоварнаяКатегория=Неопределено, Брендообъем=Неопределено) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Проект КАК Проект,
		|	СпрНоменклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	СпрНоменклатура.НСИ_Брендообъем КАК Брендообъем
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.МКЮ = ЗНАЧЕНИЕ(Справочник.ПРГ_МКЮ.ПустаяСсылка)
		|	И СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
		|	И НЕ СпрНоменклатура.ПометкаУдаления
		|	И (НЕ &ФильтроватьПоПроект
		|			ИЛИ СпрНоменклатура.Проект В (&Проект))
		|	И (НЕ &ФильтроватьПоТоварнаяКатегория
		|			ИЛИ СпрНоменклатура.НСИ_ТоварнаяКатегория В (&ТоварнаяКатегория))
		|	И (НЕ &ФильтроватьПоБрендообъем
		|			ИЛИ СпрНоменклатура.НСИ_Брендообъем В (&Брендообъем))
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрНоменклатура.Проект,
		|	СпрНоменклатура.НСИ_ТоварнаяКатегория,
		|	СпрНоменклатура.НСИ_Брендообъем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаПоставки.Владелец КАК Контрагент,
		|	АдресаПоставки.Ссылка КАК АдресПоставки
		|ПОМЕСТИТЬ втКонтрагентыИАП
		|ИЗ
		|	Справочник.АдресаПоставки КАК АдресаПоставки
		|ГДЕ
		|	АдресаПоставки.Владелец ССЫЛКА Справочник.Контрагенты
		|	И НЕ АдресаПоставки.Владелец.Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
		|	И (НЕ &ФильтроватьПоКонтрагент
		|			ИЛИ АдресаПоставки.Владелец В (&Контрагент))
		|	И (НЕ &ФильтроватьПоАдресПоставки
		|			ИЛИ АдресаПоставки.Ссылка В (&АдресПоставки))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Контрагент,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.АдресПоставки,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.ПроектГП,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.ТоварнаяКатегория,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Брендообъем,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияС,
		|	КОНЕЦПЕРИОДА(ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияПо, ДЕНЬ) КАК ПериодДействияПо,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Условие,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.ПроцентИзмененияЦены,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Комментарий,
		|	ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоКонтрагенту,
		|	ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоНоменклатуре,
		|	ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_УсловияДополнительногоИзмененияЦены.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетОбщий,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Регистратор
		|ПОМЕСТИТЬ втИсходныеДанныеУсловия
		|ИЗ
		|	РегистрСведений.ПЦ_УсловияДополнительногоИзмененияЦены КАК ПЦ_УсловияДополнительногоИзмененияЦены
		|ГДЕ
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Активность
		|	И (НЕ &ФильтроватьПоКонтрагент
		|			ИЛИ ПЦ_УсловияДополнительногоИзмененияЦены.Контрагент В (&Контрагент))
		|	И ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияС <= &Период
		|	И КОНЕЦПЕРИОДА(ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияПо, ДЕНЬ) >= &Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсходныеДанныеУсловия.Контрагент,
		|	втИсходныеДанныеУсловия.АдресПоставки,
		|	втИсходныеДанныеУсловия.ПроектГП,
		|	втИсходныеДанныеУсловия.ТоварнаяКатегория,
		|	втИсходныеДанныеУсловия.Брендообъем,
		|	втИсходныеДанныеУсловия.ПериодДействияС,
		|	втИсходныеДанныеУсловия.ПериодДействияПо,
		|	втИсходныеДанныеУсловия.Условие,
		|	втИсходныеДанныеУсловия.ПроцентИзмененияЦены,
		|	втИсходныеДанныеУсловия.Комментарий,
		|	втИсходныеДанныеУсловия.ПриоритетОбщий,
		|	втИсходныеДанныеУсловия.Регистратор
		|ПОМЕСТИТЬ вт10
		|ИЗ
		|	втИсходныеДанныеУсловия КАК втИсходныеДанныеУсловия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ПО (НЕ втИсходныеДанныеУсловия.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка))
		|			И втИсходныеДанныеУсловия.АдресПоставки = втКонтрагентыИАП.АдресПоставки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втИсходныеДанныеУсловия.Контрагент,
		|	втКонтрагентыИАП.АдресПоставки,
		|	втИсходныеДанныеУсловия.ПроектГП,
		|	втИсходныеДанныеУсловия.ТоварнаяКатегория,
		|	втИсходныеДанныеУсловия.Брендообъем,
		|	втИсходныеДанныеУсловия.ПериодДействияС,
		|	втИсходныеДанныеУсловия.ПериодДействияПо,
		|	втИсходныеДанныеУсловия.Условие,
		|	втИсходныеДанныеУсловия.ПроцентИзмененияЦены,
		|	втИсходныеДанныеУсловия.Комментарий,
		|	втИсходныеДанныеУсловия.ПриоритетОбщий,
		|	втИсходныеДанныеУсловия.Регистратор
		|ИЗ
		|	втИсходныеДанныеУсловия КАК втИсходныеДанныеУсловия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ПО втИсходныеДанныеУсловия.Контрагент = втКонтрагентыИАП.Контрагент
		|			И (втИсходныеДанныеУсловия.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	втИсходныеДанныеУсловия.Контрагент,
		|	втКонтрагентыИАП.АдресПоставки,
		|	втИсходныеДанныеУсловия.ПроектГП,
		|	втИсходныеДанныеУсловия.ТоварнаяКатегория,
		|	втИсходныеДанныеУсловия.Брендообъем,
		|	втИсходныеДанныеУсловия.ПериодДействияС,
		|	втИсходныеДанныеУсловия.ПериодДействияПо,
		|	втИсходныеДанныеУсловия.Условие,
		|	втИсходныеДанныеУсловия.Комментарий,
		|	втИсходныеДанныеУсловия.ПроцентИзмененияЦены,
		|	втИсходныеДанныеУсловия.ПриоритетОбщий,
		|	втИсходныеДанныеУсловия.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт10.Контрагент,
		|	вт10.АдресПоставки,
		|	вт10.ПроектГП,
		|	вт10.ТоварнаяКатегория,
		|	вт10.Брендообъем,
		|	вт10.ПериодДействияС,
		|	вт10.ПериодДействияПо,
		|	вт10.Условие,
		|	вт10.ПроцентИзмененияЦены,
		|	вт10.Комментарий,
		|	вт10.ПриоритетОбщий,
		|	вт10.Регистратор
		|ПОМЕСТИТЬ вт11
		|ИЗ
		|	вт10 КАК вт10
		|ГДЕ
		|	НЕ вт10.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт10.Контрагент,
		|	вт10.АдресПоставки,
		|	втНоменклатура.Проект,
		|	вт10.ТоварнаяКатегория,
		|	вт10.Брендообъем,
		|	вт10.ПериодДействияС,
		|	вт10.ПериодДействияПо,
		|	вт10.Условие,
		|	вт10.ПроцентИзмененияЦены,
		|	вт10.Комментарий,
		|	вт10.ПриоритетОбщий,
		|	вт10.Регистратор
		|ИЗ
		|	вт10 КАК вт10,
		|	втНоменклатура КАК втНоменклатура
		|ГДЕ
		|	вт10.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт10.Контрагент,
		|	вт10.АдресПоставки,
		|	втНоменклатура.Проект,
		|	вт10.ТоварнаяКатегория,
		|	вт10.Брендообъем,
		|	вт10.ПериодДействияС,
		|	вт10.ПериодДействияПо,
		|	вт10.Условие,
		|	вт10.Комментарий,
		|	вт10.ПроцентИзмененияЦены,
		|	вт10.ПриоритетОбщий,
		|	вт10.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт11.Контрагент,
		|	вт11.АдресПоставки,
		|	вт11.ПроектГП,
		|	вт11.ТоварнаяКатегория,
		|	вт11.Брендообъем,
		|	вт11.ПериодДействияС,
		|	вт11.ПериодДействияПо,
		|	вт11.Условие,
		|	вт11.ПроцентИзмененияЦены,
		|	вт11.Комментарий,
		|	вт11.ПриоритетОбщий,
		|	вт11.Регистратор
		|ПОМЕСТИТЬ вт12
		|ИЗ
		|	вт11 КАК вт11
		|ГДЕ
		|	НЕ вт11.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт11.Контрагент,
		|	вт11.АдресПоставки,
		|	вт11.ПроектГП,
		|	втНоменклатура.ТоварнаяКатегория,
		|	вт11.Брендообъем,
		|	вт11.ПериодДействияС,
		|	вт11.ПериодДействияПо,
		|	вт11.Условие,
		|	вт11.ПроцентИзмененияЦены,
		|	вт11.Комментарий,
		|	вт11.ПриоритетОбщий,
		|	вт11.Регистратор
		|ИЗ
		|	вт11 КАК вт11
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО вт11.ПроектГП = втНоменклатура.Проект
		|ГДЕ
		|	вт11.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт11.Контрагент,
		|	вт11.АдресПоставки,
		|	вт11.ПроектГП,
		|	втНоменклатура.ТоварнаяКатегория,
		|	вт11.Брендообъем,
		|	вт11.ПериодДействияС,
		|	вт11.ПериодДействияПо,
		|	вт11.Условие,
		|	вт11.Комментарий,
		|	вт11.ПроцентИзмененияЦены,
		|	вт11.ПриоритетОбщий,
		|	вт11.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт12.Контрагент,
		|	вт12.АдресПоставки,
		|	вт12.ПроектГП,
		|	вт12.ТоварнаяКатегория,
		|	вт12.Брендообъем,
		|	вт12.ПериодДействияС,
		|	вт12.ПериодДействияПо,
		|	вт12.Условие,
		|	вт12.ПроцентИзмененияЦены,
		|	вт12.Комментарий,
		|	вт12.ПриоритетОбщий,
		|	вт12.Регистратор
		|ПОМЕСТИТЬ вт13
		|ИЗ
		|	вт12 КАК вт12
		|ГДЕ
		|	НЕ вт12.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт12.Контрагент,
		|	вт12.АдресПоставки,
		|	вт12.ПроектГП,
		|	вт12.ТоварнаяКатегория,
		|	втНоменклатура.Брендообъем,
		|	вт12.ПериодДействияС,
		|	вт12.ПериодДействияПо,
		|	вт12.Условие,
		|	вт12.ПроцентИзмененияЦены,
		|	вт12.Комментарий,
		|	вт12.ПриоритетОбщий,
		|	вт12.Регистратор
		|ИЗ
		|	вт12 КАК вт12
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО вт12.ПроектГП = втНоменклатура.Проект
		|			И вт12.ТоварнаяКатегория = втНоменклатура.ТоварнаяКатегория
		|ГДЕ
		|	вт12.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт12.Контрагент,
		|	вт12.АдресПоставки,
		|	вт12.ПроектГП,
		|	вт12.ТоварнаяКатегория,
		|	втНоменклатура.Брендообъем,
		|	вт12.ПериодДействияС,
		|	вт12.ПериодДействияПо,
		|	вт12.Условие,
		|	вт12.Комментарий,
		|	вт12.ПроцентИзмененияЦены,
		|	вт12.ПриоритетОбщий,
		|	вт12.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт13.Контрагент,
		|	вт13.АдресПоставки,
		|	вт13.ПроектГП,
		|	вт13.ТоварнаяКатегория,
		|	вт13.Брендообъем,
		|	вт13.ПериодДействияС,
		|	вт13.ПериодДействияПо,
		|	вт13.Условие,
		|	МАКСИМУМ(вт13.ПриоритетОбщий) КАК ПриоритетОбщий
		|ПОМЕСТИТЬ втУсловиияМаксПриоритет
		|ИЗ
		|	вт13 КАК вт13
		|
		|СГРУППИРОВАТЬ ПО
		|	вт13.Брендообъем,
		|	вт13.ТоварнаяКатегория,
		|	вт13.АдресПоставки,
		|	вт13.ПериодДействияС,
		|	вт13.Условие,
		|	вт13.ПроектГП,
		|	вт13.ПериодДействияПо,
		|	вт13.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт13.Контрагент,
		|	вт13.АдресПоставки,
		|	вт13.ПроектГП,
		|	вт13.ТоварнаяКатегория,
		|	вт13.Брендообъем,
		|	вт13.ПериодДействияС,
		|	вт13.ПериодДействияПо,
		|	вт13.Условие,
		|	вт13.ПроцентИзмененияЦены,
		|	вт13.Комментарий,
		|	вт13.Регистратор
		|ПОМЕСТИТЬ втУсловиия
		|ИЗ
		|	вт13 КАК вт13
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУсловиияМаксПриоритет КАК втУсловиияМаксПриоритет
		|		ПО вт13.Контрагент = втУсловиияМаксПриоритет.Контрагент
		|			И вт13.АдресПоставки = втУсловиияМаксПриоритет.АдресПоставки
		|			И вт13.ПроектГП = втУсловиияМаксПриоритет.ПроектГП
		|			И вт13.ТоварнаяКатегория = втУсловиияМаксПриоритет.ТоварнаяКатегория
		|			И вт13.Брендообъем = втУсловиияМаксПриоритет.Брендообъем
		|			И вт13.ПериодДействияС = втУсловиияМаксПриоритет.ПериодДействияС
		|			И вт13.ПериодДействияПо = втУсловиияМаксПриоритет.ПериодДействияПо
		|			И вт13.ПриоритетОбщий = втУсловиияМаксПриоритет.ПриоритетОбщий
		|			И вт13.Условие = втУсловиияМаксПриоритет.Условие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Контрагент,
		|	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.АдресПоставки,
		|	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ПроектГП,
		|	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ТоварнаяКатегория,
		|	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Брендообъем,
		|	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ПериодДействияС,
		|	КОНЕЦПЕРИОДА(ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ПериодДействияПо, ДЕНЬ) КАК ПериодДействияПо,
		|	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Условие,
		|	ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоКонтрагенту,
		|	ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПоНоменклатуре,
		|	ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетОбщий
		|ПОМЕСТИТЬ втИсходныеДанныеИсключения
		|ИЗ
		|	РегистрСведений.ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены КАК ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены
		|ГДЕ
		|	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Активность
		|	И (НЕ &ФильтроватьПоКонтрагент
		|			ИЛИ ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Контрагент В (&Контрагент))
		|	И ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ПериодДействияС <= &Период
		|	И КОНЕЦПЕРИОДА(ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.ПериодДействияПо, ДЕНЬ) >= &Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсходныеДанныеИсключения.Контрагент,
		|	втИсходныеДанныеИсключения.АдресПоставки,
		|	втИсходныеДанныеИсключения.ПроектГП,
		|	втИсходныеДанныеИсключения.ТоварнаяКатегория,
		|	втИсходныеДанныеИсключения.Брендообъем,
		|	втИсходныеДанныеИсключения.ПериодДействияС,
		|	втИсходныеДанныеИсключения.ПериодДействияПо,
		|	втИсходныеДанныеИсключения.Условие,
		|	втИсходныеДанныеИсключения.ПриоритетОбщий
		|ПОМЕСТИТЬ вт20
		|ИЗ
		|	втИсходныеДанныеИсключения КАК втИсходныеДанныеИсключения
		|ГДЕ
		|	НЕ втИсходныеДанныеИсключения.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втИсходныеДанныеИсключения.Контрагент,
		|	втКонтрагентыИАП.АдресПоставки,
		|	втИсходныеДанныеИсключения.ПроектГП,
		|	втИсходныеДанныеИсключения.ТоварнаяКатегория,
		|	втИсходныеДанныеИсключения.Брендообъем,
		|	втИсходныеДанныеИсключения.ПериодДействияС,
		|	втИсходныеДанныеИсключения.ПериодДействияПо,
		|	втИсходныеДанныеИсключения.Условие,
		|	втИсходныеДанныеИсключения.ПриоритетОбщий
		|ИЗ
		|	втИсходныеДанныеИсключения КАК втИсходныеДанныеИсключения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагентыИАП КАК втКонтрагентыИАП
		|		ПО втИсходныеДанныеИсключения.Контрагент = втКонтрагентыИАП.Контрагент
		|ГДЕ
		|	втИсходныеДанныеИсключения.АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	втИсходныеДанныеИсключения.ПериодДействияС,
		|	втИсходныеДанныеИсключения.ТоварнаяКатегория,
		|	втИсходныеДанныеИсключения.ПроектГП,
		|	втКонтрагентыИАП.АдресПоставки,
		|	втИсходныеДанныеИсключения.Условие,
		|	втИсходныеДанныеИсключения.Контрагент,
		|	втИсходныеДанныеИсключения.ПериодДействияПо,
		|	втИсходныеДанныеИсключения.Брендообъем,
		|	втИсходныеДанныеИсключения.ПриоритетОбщий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт20.Контрагент,
		|	вт20.АдресПоставки,
		|	вт20.ПроектГП,
		|	вт20.ТоварнаяКатегория,
		|	вт20.Брендообъем,
		|	вт20.ПериодДействияС,
		|	вт20.ПериодДействияПо,
		|	вт20.Условие,
		|	вт20.ПриоритетОбщий
		|ПОМЕСТИТЬ вт21
		|ИЗ
		|	вт20 КАК вт20
		|ГДЕ
		|	НЕ вт20.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт20.Контрагент,
		|	вт20.АдресПоставки,
		|	втНоменклатура.Проект,
		|	вт20.ТоварнаяКатегория,
		|	вт20.Брендообъем,
		|	вт20.ПериодДействияС,
		|	вт20.ПериодДействияПо,
		|	вт20.Условие,
		|	вт20.ПриоритетОбщий
		|ИЗ
		|	вт20 КАК вт20,
		|	втНоменклатура КАК втНоменклатура
		|ГДЕ
		|	вт20.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт20.Контрагент,
		|	вт20.АдресПоставки,
		|	втНоменклатура.Проект,
		|	вт20.ТоварнаяКатегория,
		|	вт20.Брендообъем,
		|	вт20.ПериодДействияС,
		|	вт20.ПериодДействияПо,
		|	вт20.Условие,
		|	вт20.ПриоритетОбщий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт21.Контрагент,
		|	вт21.АдресПоставки,
		|	вт21.ПроектГП,
		|	вт21.ТоварнаяКатегория,
		|	вт21.Брендообъем,
		|	вт21.ПериодДействияС,
		|	вт21.ПериодДействияПо,
		|	вт21.Условие,
		|	вт21.ПриоритетОбщий
		|ПОМЕСТИТЬ вт22
		|ИЗ
		|	вт21 КАК вт21
		|ГДЕ
		|	НЕ вт21.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт21.Контрагент,
		|	вт21.АдресПоставки,
		|	вт21.ПроектГП,
		|	втНоменклатура.ТоварнаяКатегория,
		|	вт21.Брендообъем,
		|	вт21.ПериодДействияС,
		|	вт21.ПериодДействияПо,
		|	вт21.Условие,
		|	вт21.ПриоритетОбщий
		|ИЗ
		|	вт21 КАК вт21
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО вт21.ПроектГП = втНоменклатура.Проект
		|ГДЕ
		|	вт21.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт21.Контрагент,
		|	вт21.АдресПоставки,
		|	вт21.ПроектГП,
		|	втНоменклатура.ТоварнаяКатегория,
		|	вт21.Брендообъем,
		|	вт21.ПериодДействияС,
		|	вт21.ПериодДействияПо,
		|	вт21.Условие,
		|	вт21.ПриоритетОбщий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт22.Контрагент,
		|	вт22.АдресПоставки,
		|	вт22.ПроектГП,
		|	вт22.ТоварнаяКатегория,
		|	вт22.Брендообъем,
		|	вт22.ПериодДействияС,
		|	вт22.ПериодДействияПо,
		|	вт22.Условие,
		|	вт22.ПриоритетОбщий
		|ПОМЕСТИТЬ вт23
		|ИЗ
		|	вт22 КАК вт22
		|ГДЕ
		|	НЕ вт22.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт22.Контрагент,
		|	вт22.АдресПоставки,
		|	вт22.ПроектГП,
		|	вт22.ТоварнаяКатегория,
		|	втНоменклатура.Брендообъем,
		|	вт22.ПериодДействияС,
		|	вт22.ПериодДействияПо,
		|	вт22.Условие,
		|	вт22.ПриоритетОбщий
		|ИЗ
		|	вт22 КАК вт22
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО вт22.ПроектГП = втНоменклатура.Проект
		|			И вт22.ТоварнаяКатегория = втНоменклатура.ТоварнаяКатегория
		|ГДЕ
		|	вт22.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт22.Контрагент,
		|	вт22.АдресПоставки,
		|	вт22.ПроектГП,
		|	вт22.ТоварнаяКатегория,
		|	втНоменклатура.Брендообъем,
		|	вт22.ПериодДействияС,
		|	вт22.ПериодДействияПо,
		|	вт22.Условие,
		|	вт22.ПриоритетОбщий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт23.Контрагент,
		|	вт23.АдресПоставки,
		|	вт23.ПроектГП,
		|	вт23.ТоварнаяКатегория,
		|	вт23.Брендообъем,
		|	вт23.ПериодДействияС,
		|	вт23.ПериодДействияПо,
		|	вт23.Условие,
		|	МАКСИМУМ(вт23.ПриоритетОбщий) КАК ПриоритетОбщий
		|ПОМЕСТИТЬ втИсключенияМаксПриоритет
		|ИЗ
		|	вт23 КАК вт23
		|
		|СГРУППИРОВАТЬ ПО
		|	вт23.Контрагент,
		|	вт23.АдресПоставки,
		|	вт23.ПроектГП,
		|	вт23.ТоварнаяКатегория,
		|	вт23.Брендообъем,
		|	вт23.ПериодДействияС,
		|	вт23.ПериодДействияПо,
		|	вт23.Условие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт23.Контрагент,
		|	вт23.АдресПоставки,
		|	вт23.ПроектГП,
		|	вт23.ТоварнаяКатегория,
		|	вт23.Брендообъем,
		|	вт23.ПериодДействияС,
		|	вт23.ПериодДействияПо,
		|	вт23.Условие,
		|	вт23.ПриоритетОбщий
		|ПОМЕСТИТЬ втИсключения
		|ИЗ
		|	вт23 КАК вт23
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИсключенияМаксПриоритет КАК втИсключенияМаксПриоритет
		|		ПО вт23.Контрагент = втИсключенияМаксПриоритет.Контрагент
		|			И вт23.АдресПоставки = втИсключенияМаксПриоритет.АдресПоставки
		|			И вт23.ПроектГП = втИсключенияМаксПриоритет.ПроектГП
		|			И вт23.ТоварнаяКатегория = втИсключенияМаксПриоритет.ТоварнаяКатегория
		|			И вт23.Брендообъем = втИсключенияМаксПриоритет.Брендообъем
		|			И вт23.ПериодДействияС = втИсключенияМаксПриоритет.ПериодДействияС
		|			И вт23.ПериодДействияПо = втИсключенияМаксПриоритет.ПериодДействияПо
		|			И вт23.Условие = втИсключенияМаксПриоритет.Условие
		|			И вт23.ПриоритетОбщий = втИсключенияМаксПриоритет.ПриоритетОбщий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втУсловиия.Контрагент,
		|	втУсловиия.АдресПоставки,
		|	втУсловиия.ПроектГП,
		|	втУсловиия.ТоварнаяКатегория,
		|	втУсловиия.Брендообъем,
		|	втУсловиия.ПериодДействияС,
		|	втУсловиия.ПериодДействияПо,
		|	втУсловиия.Условие,
		|	втУсловиия.ПроцентИзмененияЦены,
		|	втУсловиия.Комментарий,
		|	втУсловиия.Регистратор
		|ИЗ
		|	втУсловиия КАК втУсловиия
		|ГДЕ
		|	НЕ (втУсловиия.АдресПоставки, втУсловиия.Брендообъем, втУсловиия.Условие) В
		|				(ВЫБРАТЬ
		|					втИсключения.АдресПоставки,
		|					втИсключения.Брендообъем,
		|					втИсключения.Условие
		|				ИЗ
		|					втИсключения КАК втИсключения
		|				СГРУППИРОВАТЬ ПО
		|								втИсключения.АдресПоставки,
		|					втИсключения.Брендообъем,
		|					втИсключения.Условие)";

	//Общие	
	Запрос.УстановитьПараметр("Период",?(Период='00010101',КонецДня(ТекущаяДата()),КонецДня(Период)));
	
	//Кому
	Запрос.УстановитьПараметр("Контрагент",?(Контрагент=Неопределено,Справочники.Контрагенты.ПустаяСсылка(),Контрагент));
	Запрос.УстановитьПараметр("ФильтроватьПоКонтрагент",НЕ Контрагент=Неопределено);
	Запрос.УстановитьПараметр("АдресПоставки",?(АдресПоставки=Неопределено,Справочники.АдресаПоставки.ПустаяСсылка(),АдресПоставки));
	Запрос.УстановитьПараметр("ФильтроватьПоАдресПоставки",НЕ АдресПоставки=Неопределено);
	
	//Что
	Запрос.УстановитьПараметр("Проект",?(Проект=Неопределено,Справочники.ПРГ_ПроектыГП.ПустаяСсылка(),Проект));
	Запрос.УстановитьПараметр("ФильтроватьПоПроект",НЕ Проект=Неопределено);
	Запрос.УстановитьПараметр("ТоварнаяКатегория",?(ТоварнаяКатегория=Неопределено,Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка(),ТоварнаяКатегория));
	Запрос.УстановитьПараметр("ФильтроватьПоТоварнаяКатегория",НЕ ТоварнаяКатегория=Неопределено);
	Запрос.УстановитьПараметр("Брендообъем",?(Брендообъем=Неопределено,Справочники.НСИ_Брендообъемы.ПустаяСсылка(),Брендообъем));
	Запрос.УстановитьПараметр("ФильтроватьПоБрендообъем",НЕ Брендообъем=Неопределено);	
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//ПолучитьУсловияДопИзмененияЦеныПоАПИНоменклатуре
//На входе массив АдресПоставки и Номенклатура
Функция ПолучитьУсловияДопИзмененияЦеныПоАПИНоменклатуре(Период='00010101', АдресПоставки=Неопределено, Номенклатура=Неопределено) Экспорт 

	ТаблицаАПИНоменклатура = Новый ТаблицаЗначений;
	
	ТаблицаАПИНоменклатура.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаАПИНоменклатура.Колонки.Добавить("АдресПоставки", Новый ОписаниеТипов("СправочникСсылка.АдресаПоставки"));
	ТаблицаАПИНоменклатура.Колонки.Добавить("Брендообъем", Новый ОписаниеТипов("СправочникСсылка.НСИ_Брендообъемы"));
	ТаблицаАПИНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаАПИНоменклатура.Колонки.Добавить("Условие", Новый ОписаниеТипов("СправочникСсылка.ПЦ_УсловияДополнительногоИзмененияЦены"));
	ТаблицаАПИНоменклатура.Колонки.Добавить("ПериодДействияС", Новый ОписаниеТипов("Число"));
	ТаблицаАПИНоменклатура.Колонки.Добавить("ПериодДействияПо", Новый ОписаниеТипов("Число"));
	ТаблицаАПИНоменклатура.Колонки.Добавить("ПроцентИзмененияЦены", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));

	ТаблицаУсловийПоБрендообъемам = ПолучитьУсловияДопИзмененияЦеныНоменклатурыНоваяМетодика(Период,,АдресПоставки);		

	Если ТаблицаУсловийПоБрендообъемам.Количество() = 0 Тогда
		Возврат ТаблицаАПИНоменклатура;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Контрагент,
		|	Таблица.АдресПоставки,
		|	Таблица.Брендообъем,
		|	Таблица.ПериодДействияС,
		|	Таблица.ПериодДействияПо,
		|	Таблица.Условие,
		|	Таблица.ПроцентИзмененияЦены
		|ПОМЕСТИТЬ втТаблица
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Проект КАК Проект,
		|	СпрНоменклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	СпрНоменклатура.НСИ_Брендообъем КАК Брендообъем,
		|	СпрНоменклатура.Ссылка
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.МКЮ = ЗНАЧЕНИЕ(Справочник.ПРГ_МКЮ.ПустаяСсылка)
		|	И СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
		|	И НЕ СпрНоменклатура.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрНоменклатура.Проект,
		|	СпрНоменклатура.НСИ_ТоварнаяКатегория,
		|	СпрНоменклатура.НСИ_Брендообъем,
		|	СпрНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблица.Контрагент,
		|	втТаблица.АдресПоставки,
		|	втТаблица.Брендообъем,
		|	втТаблица.ПериодДействияС,
		|	втТаблица.ПериодДействияПо,
		|	втТаблица.Условие,
		|	втТаблица.ПроцентИзмененияЦены,
		|	втНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	втТаблица КАК втТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО втТаблица.Брендообъем = втНоменклатура.Брендообъем
		|ГДЕ
		|	(НЕ &ФильтроватьПоНоменклатуре
		|			ИЛИ втНоменклатура.Ссылка В (&Номенклатура))";

	Запрос.УстановитьПараметр("Таблица",ТаблицаУсловийПоБрендообъемам);
   	Запрос.УстановитьПараметр("Номенклатура",?(Номенклатура=Неопределено,Справочники.Номенклатура.ПустаяСсылка(),Номенклатура));
	Запрос.УстановитьПараметр("ФильтроватьПоНоменклатуре",НЕ Номенклатура=Неопределено);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		тНоваяСтрока = ТаблицаАПИНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(тНоваяСтрока,ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	Возврат ТаблицаАПИНоменклатура;
	
КонецФункции // ПолучитьУсловияДопИзмененияЦеныПоНоменклатуре()

//УдалимИзНесоответствующиеУсловияДопИзмененияЦены
//
Процедура УдалимИзНесоответствующиеУсловияДопИзмененияЦены(ДокументОбъект, ТаблицаУсловийДопИзмененияЦены, УсловиеПоставки = Неопределено) Экспорт 

	Если ТаблицаУсловийДопИзмененияЦены.Количество() > 0 Тогда
		
		Если НЕ УсловиеПоставки = Неопределено Тогда
			КП_УсловиеПоставки = УсловиеПоставки;
		Иначе
			КП_УсловиеПоставки = ДокументОбъект.КП_УсловиеПоставки; 
		КонецЕсли; 
		
		//Удалим из таблицы ТаблицаУсловийДопИзмененияЦены строки не соответствующие условию поставки
		Если КП_УсловиеПоставки=Перечисления.ПТЛ_УсловияПоставки.Самовывоз
			ИЛИ КП_УсловиеПоставки=Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Условие", ?(КП_УсловиеПоставки=Перечисления.ПТЛ_УсловияПоставки.Самовывоз,Справочники.ПЦ_УсловияДополнительногоИзмененияЦены.ДоставкаДоРЦ,Справочники.ПЦ_УсловияДополнительногоИзмененияЦены.Самовывоз));
			НайденныеСтроки = ТаблицаУсловийДопИзмененияЦены.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого ТекСтрокаДляУдаления Из НайденныеСтроки Цикл
				ТаблицаУсловийДопИзмененияЦены.Удалить(ТекСтрокаДляУдаления);
			КонецЦикла; 			
			
		Иначе
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Условие", Справочники.ПЦ_УсловияДополнительногоИзмененияЦены.Самовывоз);
			НайденныеСтроки = ТаблицаУсловийДопИзмененияЦены.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого ТекСтрокаДляУдаления Из НайденныеСтроки Цикл
				ТаблицаУсловийДопИзмененияЦены.Удалить(ТекСтрокаДляУдаления);
			КонецЦикла; 
			
			ПараметрыОтбора.Вставить("Условие", Справочники.ПЦ_УсловияДополнительногоИзмененияЦены.ДоставкаДоРЦ);
			НайденныеСтроки = ТаблицаУсловийДопИзмененияЦены.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого ТекСтрокаДляУдаления Из НайденныеСтроки Цикл
				ТаблицаУсловийДопИзмененияЦены.Удалить(ТекСтрокаДляУдаления);
			КонецЦикла;
			
		КонецЕсли; 
		
		//Удалим из таблицы ТаблицаУсловийДопИзмененияЦены строки не соответствующие предоплате
		Если НЕ ДокументОбъект.ДоговорКонтрагента.ПЦ_ПредоставлятьСкидкиПоПредоплате Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Условие", Справочники.ПЦ_УсловияДополнительногоИзмененияЦены.Предоплата);
			НайденныеСтроки = ТаблицаУсловийДопИзмененияЦены.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого ТекСтрокаДляУдаления Из НайденныеСтроки Цикл
				ТаблицаУсловийДопИзмененияЦены.Удалить(ТекСтрокаДляУдаления);
			КонецЦикла;	
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

#Если Клиент Тогда
// Функция формирует и выполняет запрос по спец. предложениям.
//
// Параметры:
//  ДатаДокумента - дата, на которую необходимо сформировать запрос.
//
// Возвращаемое значение:
//  ДеревоЗначений – дерево значений с актуальными спец. предложениями и их комплектующими.
//
Функция ПолучитьЗапросПоСпецПредложениям(ДатаДокумента, МассивПолучателей)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	Запрос.УстановитьПараметр("ДеньНедели", Перечисления.ДниНедели[ДеньНедели(ДатаДокумента) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя", Дата(1, 1, 1, Час(ДатаДокумента), Минута(ДатаДокумента), Секунда(ДатаДокумента)));
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивПолучателей", МассивПолучателей);

	ТекстЗапроса = "ВЫБРАТЬ
	               |	СпецПредложения.Номенклатура КАК Номенклатура,
	               |	СпецПредложения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СкидкиНатуральные.Качество КАК Качество,
	               |	СпецПредложения.Комплектующая КАК Комплектующая,
	               |	СпецПредложения.ХарактеристикаКомплектующей КАК ХарактеристикаКомплектующей,
	               |	СпецПредложения.ЭтоБонус КАК ЭтоБонус,
	               |	СпецПредложения.Количество КАК Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СкидкиНатуральные.СпецПредложение КАК СпецПредложение,
	               |		СкидкиНатуральные.ХарактеристикаСпецПредложения КАК ХарактеристикаСпецПредложения,
	               |		СкидкиНатуральные.Качество КАК Качество,
	               |		МАКСИМУМ(СкидкиНатуральные.Регистратор) КАК Регистратор
	               |	ИЗ
	               |		РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата, ПолучательСкидки В (&МассивПолучателей)) КАК СкидкиНатуральные
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	               |			ПО СкидкиНатуральные.Регистратор = ВремяДействия.Регистратор
	               |	ГДЕ
	               |		СкидкиНатуральные.СпецПредложение <> &ПустаяНоменклатура
	               |		И (ВремяДействия.Регистратор ЕСТЬ NULL 
	               |				ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
	               |					И (&ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	               |					И (СкидкиНатуральные.ДатаОкончания = &ПустаяДата
	               |						ИЛИ СкидкиНатуральные.ДатаОкончания >= &Дата))
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СкидкиНатуральные.СпецПредложение,
	               |		СкидкиНатуральные.ХарактеристикаСпецПредложения,
	               |		СкидкиНатуральные.Качество) КАК СкидкиНатуральные
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецПредложения КАК СпецПредложения
	               |		ПО СкидкиНатуральные.Регистратор = СпецПредложения.Регистратор
	               |			И СкидкиНатуральные.СпецПредложение = СпецПредложения.Номенклатура
	               |			И СкидкиНатуральные.ХарактеристикаСпецПредложения = СпецПредложения.ХарактеристикаНоменклатуры
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура
	               |ИТОГИ
	               |	МИНИМУМ(Комплектующая),
	               |	МИНИМУМ(ХарактеристикаКомплектующей),
	               |	МИНИМУМ(ЭтоБонус),
	               |	СУММА(Количество)
	               |ПО
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	Качество";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции // ПолучитьЗапросПоСпецПредложениям()

// Проверяет табличную часть на возможность составить спец. предложения.
//
// Параметры:
//  ТоварыНазвание - название ТЧ "Товары" в документах продажи.
//  ДокументОбъект - документ-объект, из которого вызвана процедура
//  ТолькоСерые - переменная, куда функция вернет значение Истина,
//   если можно составить только "серые" комплекты.
//
// Возвращаемое значение:
//  Булево - Истина, если можно составить комплекты, в том числе "серые".
//
Функция ЕстьСпецПредложения(ТоварыНазвание, ДокументОбъект, ТолькоСерые, ВидРеализации) Экспорт

	МаксИНТ = 999999999999;

	Товары = ДокументОбъект[ТоварыНазвание];
	ТолькоСерые = Ложь;
	МожноСоставитьКомплекты = Ложь;

	//При работе с качеством будем поступать следующим образом:
	//Если в документе есть качество - то выполняем полноценную работу с качеством;
	//Если в документе качества нет - то бонусы ищем только с качеством <Новый>.
	ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", ДокументОбъект.Метаданные(), ТоварыНазвание);
	КачествоНовый = Справочники.Качество.Новый;

	//В ДеревоЗначений поместим все актуальные бонусные комплекты и их комплектующие.
	ДЗСпецПредложения = ПолучитьЗапросПоСпецПредложениям(ДокументОбъект.Дата,
	   ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект));

	Для Каждого Комплект0 Из ДЗСпецПредложения.Строки Цикл // определена Номенклатура.
		Для Каждого Комплект1 Из Комплект0.Строки Цикл // определена Характеристика.
			Для Каждого Комплект Из Комплект1.Строки Цикл // определено Качество.
				ЕстьВсеКомплектующие = Истина;
				МаксКоличествоКомплектов = МаксИНТ;

				Для Каждого Комлектующие Из Комплект.Строки Цикл
					Если Не Комлектующие.ЭтоБонус Тогда
						Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
							СтруктураСтроки = Новый Структура;
							СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
							СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

							Если ЕстьКачество Тогда
								СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
							КонецЕсли;

							СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
						Иначе
							СтрокаТабличнойЧасти = Неопределено;
						КонецЕсли;

						Если СтрокаТабличнойЧасти <> Неопределено Тогда
							КолвоВЕдиницахХранения = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							МаксКоличествоКомплектов = Мин(МаксКоличествоКомплектов, Цел(КолвоВЕдиницахХранения/ Комлектующие.Количество));
						Иначе
							ЕстьВсеКомплектующие = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				//Если в ТЧ содержатся все комплектующие текущего комплекта,
				//и можно составить хотя бы один комплект - 
				//дальше считать нет смысла.
				Если ЕстьВсеКомплектующие И МаксКоличествоКомплектов > 0 Тогда
					ТолькоСерые = Ложь;
					Возврат Истина;
				ИначеЕсли МаксКоличествоКомплектов <> МаксИНТ Тогда //Серые бонусы
					МожноСоставитьКомплекты = Истина;
					ТолькоСерые = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат МожноСоставитьКомплекты;

КонецФункции // ЕстьСпецПредложения()

// Рассчитывает возможные натуральные скидки (бонусные комплекты).
// Если такие есть, то открывает форму для подбора бонусных комплектов.
//
// Параметры:
//  ТоварыНазвание - название ТЧ "Товары" в документах продажи.
//  ДокументОбъект - документ-объект, из которого вызвана процедура
//
Процедура РассчитатьНатуральныеСкидки(ТоварыНазвание, ДокументОбъект, ФормаДокумента, ВидРеализации) Экспорт

	МаксИНТ = 999999999999;

	Товары = ДокументОбъект[ТоварыНазвание];

	//При работе с качеством будем поступать следующим образом:
	//Если в документе есть качество - то выполняем полноценную работу с качеством;
	//Если в документе качества нет - то бонусы ищем только с качеством <Новый>.
	ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", ДокументОбъект.Метаданные(), ТоварыНазвание);
	КачествоНовый = Справочники.Качество.Новый;

	//В ДеревоЗначений поместим все актуальные бонусные комплекты и их комплектующие.
	ДЗСпецПредложения = ПолучитьЗапросПоСпецПредложениям(ДокументОбъект.Дата,
	   ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект));

	НачатьВыборкуЗаново = Истина;
	Пока НачатьВыборкуЗаново Цикл
		НачатьВыборкуЗаново = Ложь;

		//Создадим ДеревоЗначений для хранения доступных бонусных комплектов.
		ДЗНовыеБонусы = Новый ДеревоЗначений;
		ДЗНовыеБонусы.Колонки.Добавить("Номенклатура");
		ДЗНовыеБонусы.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ДЗНовыеБонусы.Колонки.Добавить("Качество");
		ДЗНовыеБонусы.Колонки.Добавить("Количество");
		ДЗНовыеБонусы.Колонки.Добавить("Комплектующая");
		ДЗНовыеБонусы.Колонки.Добавить("ХарактеристикаКомплектующей");
		ДЗНовыеБонусы.Колонки.Добавить("ЭтоБонус");
		ДЗНовыеБонусы.Колонки.Добавить("СерыйБонус");
		ДЗНовыеБонусы.Колонки.Добавить("КоличествоЕсть");

		Для Каждого Комплект0 Из ДЗСпецПредложения.Строки Цикл // определена Номенклатура.
			Для Каждого Комплект1 Из Комплект0.Строки Цикл // определена Характеристика.
				Для Каждого Комплект Из Комплект1.Строки Цикл // определено Качество.
					ЕстьВсеКомплектующие = Истина;
					МаксКоличествоКомплектов = МаксИНТ;

					Для Каждого Комлектующие Из Комплект.Строки Цикл
						Если Не Комлектующие.ЭтоБонус Тогда
							Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
								СтруктураСтроки = Новый Структура;
								СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
								СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

								Если ЕстьКачество Тогда
									СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
								КонецЕсли;

								СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
							Иначе
								СтрокаТабличнойЧасти = Неопределено;
							КонецЕсли;

							Если СтрокаТабличнойЧасти <> Неопределено Тогда
								КолвоВЕдиницахХранения = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
								МаксКоличествоКомплектов = Мин(МаксКоличествоКомплектов, Цел(КолвоВЕдиницахХранения/ Комлектующие.Количество));
							Иначе
								ЕстьВсеКомплектующие = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

					//Если в документе содержатся все комплектующие текущего комплекта,
					//и можно составить хотя бы один комплект - 
					//добавим комплект и его комплектующие в Дерево доступных бонусных комплектов.
					Если ЕстьВсеКомплектующие И МаксКоличествоКомплектов > 0 Тогда
						НовыйБонус = ДЗНовыеБонусы.Строки.Добавить();
						НовыйБонус.Номенклатура = Комплект.Номенклатура;
						НовыйБонус.ХарактеристикаНоменклатуры = Комплект.ХарактеристикаНоменклатуры;
						НовыйБонус.Качество = Комплект.Качество;
						НовыйБонус.Количество = МаксКоличествоКомплектов;
						НовыйБонус.СерыйБонус = Ложь;

						Для Каждого Комлектующие Из Комплект.Строки Цикл
							НовыйБонусКомплектующие = НовыйБонус.Строки.Добавить();
							НовыйБонусКомплектующие.Качество = Комлектующие.Качество;
							НовыйБонусКомплектующие.Количество = Комлектующие.Количество;
							НовыйБонусКомплектующие.Комплектующая = Комлектующие.Комплектующая;
							НовыйБонусКомплектующие.ХарактеристикаКомплектующей = Комлектующие.ХарактеристикаКомплектующей;
							НовыйБонусКомплектующие.ЭтоБонус = Комлектующие.ЭтоБонус;
							НовыйБонусКомплектующие.КоличествоЕсть = НовыйБонусКомплектующие.Количество;
						КонецЦикла;
					ИначеЕсли МаксКоличествоКомплектов <> МаксИНТ Тогда //Серые бонусы
						НовыйБонус = ДЗНовыеБонусы.Строки.Добавить();
						НовыйБонус.Номенклатура = Комплект.Номенклатура;
						НовыйБонус.ХарактеристикаНоменклатуры = Комплект.ХарактеристикаНоменклатуры;
						НовыйБонус.Качество = Комплект.Качество;
						НовыйБонус.Количество = 0;
						НовыйБонус.СерыйБонус = Истина;

						Для Каждого Комлектующие Из Комплект.Строки Цикл
							НовыйБонусКомплектующие = НовыйБонус.Строки.Добавить();
							НовыйБонусКомплектующие.Качество = Комлектующие.Качество;
							НовыйБонусКомплектующие.Количество = Комлектующие.Количество;
							НовыйБонусКомплектующие.Комплектующая = Комлектующие.Комплектующая;
							НовыйБонусКомплектующие.ХарактеристикаКомплектующей = Комлектующие.ХарактеристикаКомплектующей;
							НовыйБонусКомплектующие.ЭтоБонус = Комлектующие.ЭтоБонус;
							НовыйБонусКомплектующие.СерыйБонус = Истина;

							Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
								СтруктураСтроки = Новый Структура;
								СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
								СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

								Если ЕстьКачество Тогда
									СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
								КонецЕсли;

								СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
							Иначе
								СтрокаТабличнойЧасти = Неопределено;
							КонецЕсли;

							Если СтрокаТабличнойЧасти <> Неопределено Тогда
								НовыйБонусКомплектующие.КоличествоЕсть = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							Иначе
								НовыйБонусКомплектующие.КоличествоЕсть = 0;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		//Если есть доступные бонусные комплекты - откроем форму для выбора комплекта.
		Если ДЗНовыеБонусы.Строки.Количество() > 0 Тогда
			ФормаВыбораБонуса = ПолучитьОбщуюФорму("ВыборБонуснойНоменклатуры");
			ФормаВыбораБонуса.СпецПредложения = ДЗНовыеБонусы.Скопировать();

			ВыбранныйБонус = ФормаВыбораБонуса.ОткрытьМодально();

			//Если пользователь выбрал бонусный комплект,
			//то заменим комплектующие из таблицы документа этим комплектом,
			//иначе - вернемся в форму документа.
			Если ВыбранныйБонус <> Неопределено Тогда
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Номенклатура"              , ВыбранныйБонус.Номенклатура);
				СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", ВыбранныйБонус.ХарактеристикаНоменклатуры);
				СтруктураСтроки.Вставить("Качество"                  , ВыбранныйБонус.Качество);

				МассивБонусов = ДЗНовыеБонусы.Строки.НайтиСтроки(СтруктураСтроки, Ложь);
				Бонус = МассивБонусов[0];

				Бонус.Количество = ВыбранныйБонус.ВыбранноеКоличество;

				//Уберем комплектующие бонусного комплекта из таблицы документа.
				Для Каждого Комлектующие Из Бонус.Строки Цикл
					Если Не Комлектующие.ЭтоБонус Тогда
						СтруктураСтроки = Новый Структура;
						СтруктураСтроки.Вставить("Номенклатура"              , Комлектующие.Комплектующая);
						СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

						Если ЕстьКачество Тогда
							СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
						КонецЕсли;

						СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);

						//Переведем строку в количество за единицу хранения остатков.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Комлектующие.Количество * Бонус.Количество;

						//Если в строке количество стало нулевым, то строку надо удалить,
						//иначе - нужно вызвать обработчик события при изменении Количества.
						Если СтрокаТабличнойЧасти.Количество = 0 Тогда
							ФормаДокумента.УдалениеСтрокиПрограммное(СтрокаТабличнойЧасти);
						Иначе
							ФормаДокумента.ИзменениеСтрокиПрограммное(СтрокаТабличнойЧасти, "Количество");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Номенклатура"              , Бонус.Номенклатура);
				СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Бонус.ХарактеристикаНоменклатуры);

				Если ЕстьКачество Тогда
					СтруктураСтроки.Вставить("Качество", Бонус.Качество);
				КонецЕсли;

				НовыйБонус = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);

				//Если такого бонусного комплекта в таблице документа нет, то добавим его,
				//иначе - просто увеличим количество.
				Если НовыйБонус = Неопределено Тогда
					НовыйБонус = Товары.Добавить();
					НовыйБонус.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ДокументОбъект);
					НовыйБонус.Номенклатура = Бонус.Номенклатура;
					НовыйБонус.ХарактеристикаНоменклатуры = Бонус.ХарактеристикаНоменклатуры;
					НовыйБонус.Количество = Бонус.Количество;
					НовыйБонус.ЕдиницаИзмерения = НовыйБонус.Номенклатура.ЕдиницаХраненияОстатков;

					Если ЕстьКачество Тогда
						НовыйБонус.Качество = Бонус.Качество;
					КонецЕсли;
				Иначе
					НовыйБонус.Количество = НовыйБонус.Количество + Бонус.Количество;
				КонецЕсли;

				//Нужно вызвать обработчик события при изменении Номенклатуры.
				ФормаДокумента.ИзменениеСтрокиПрограммное(НовыйБонус, "Номенклатура");

				//Запустим проверку на возможные бонусные комплекты еще раз.
				НачатьВыборкуЗаново = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура проверяет, можно ли покупателю заменить дисконтную карту на карту более высокого уровня.
// Если такая замена возможна, то выдается соответствующее предупреждение.
//
// Параметры:
//  ДокументОбъект - Объект документа, из которого вызвана процедура.
//  УчетнаяПолитика - Структура, содержащая данные учетной политики.
//
Процедура ПроверитьВозможностьЗаменыДисконтнойКарты(ДокументОбъект, УчетнаяПолитика) Экспорт

	Если ДокументОбъект.Проведен
	   И ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта)
	   И УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
	   И УчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоВладельцуДисконтнойКарты Тогда

		ПериодНакопления = ОбработкаТабличныхЧастей.ПолучитьПериодРасчетаНакопительныхСкидок(ДокументОбъект.Дата, УчетнаяПолитика);

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РегПродажи.СуммаОборот КАК Сумма,
		|	РегПороги.ЗначениеПорога КАК ЗначениеПорога
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|	   ВладелецДисконтнойКарты = &ВладелецДисконтнойКарты) КАК РегПродажи
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Пороги.НижняяГраница,
		|		Пороги.ЗначениеПорога
		|	ИЗ
		|		РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|	) КАК ПорогиМакс
		|	ПО
		|		Пороги.Период = ПорогиМакс.Период
		|) КАК РегПороги
		|ПО
		|	РегПороги.НижняяГраница <= ЕСТЬNULL(РегПродажи.СуммаОборот, 0)
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|		   ВладелецДисконтнойКарты = &ВладелецДисконтнойКарты) КАК РегПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Пороги.НижняяГраница
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|			) КАК ПорогиМакс
		|		ПО
		|			Пороги.Период = ПорогиМакс.Период
		|		) КАК РегПороги
		|	ПО
		|		РегПороги.НижняяГраница <= ЕСТЬNULL(РегПродажи.СуммаОборот, 0)
		|	) КАК РегПорогиМакс
		|ПО
		|	РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница
		|");

		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.ДатаКон);
		Запрос.УстановитьПараметр("ВладелецДисконтнойКарты", ДокументОбъект.ДисконтнаяКарта.ВладелецКарты);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекВидКарты = ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты;
			Если Выборка.ЗначениеПорога <> ТекВидКарты Тогда
				Предупреждение("Сумма, накопленная покупателем, составила " + (ОбщегоНазначения.ФорматСумм(Выборка.Сумма,
				глЗначениеПеременной("ВалютаУправленческогоУчета")))+"." + Символы.ПС + Символы.ПС
				   + "Покупателю можно обменять дисконтную карту" + Символы.ПС
				   + """" + СокрЛП(ТекВидКарты) + """ на """ + СокрЛП(Выборка.ЗначениеПорога) + """.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьВозможностьЗаменыДисконтнойКарты()

#КонецЕсли

