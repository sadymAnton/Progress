////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры, функции

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеРаботникиОрганизации(ЭтотОбъект, Отказ, Заголовок = "")

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , ЭтотОбъект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.ФизЛицо,
	|	ТЧРаботникиОрганизации.МесяцНалоговогоПериода,
	|	ТЧРаботникиОрганизации.НалогПоСтавке09,
	|	ТЧРаботникиОрганизации.НалогПоСтавке13,
	|	ТЧРаботникиОрганизации.НалогПоСтавке35,
	|	ТЧРаботникиОрганизации.ПримененныйВычетЛичный,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетей,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейДвойной,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейДвойнойВторой,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенка,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаВторогоРебенка,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаВторогоРебенкаДвойной,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидов,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидовДвойной,
	|	ТЧРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	ТЧРаботникиОрганизации.ПримененныйВычетИмущественныйРасход,
	|	ТЧРаботникиОрганизации.ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	ТЧРаботникиОрганизации.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> ТЧРаботникиОрганизации.Ссылка.Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка";

	ВыборкаПоРаботникиОрганизации = Запрос.Выполнить().Выбрать();
									
	Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл								
		
		НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +
										""" табл. части ""Сотрудники организации"": ";
										
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ФизЛицо) Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.МесяцНалоговогоПериода) Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке(НачалоСообщения + "не указана дата получения дохода!", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НалогПоСтавке09 + ВыборкаПоРаботникиОрганизации.НалогПоСтавке13 + ВыборкаПоРаботникиОрганизации.НалогПоСтавке35 
			+ ВыборкаПоРаботникиОрганизации.ПримененныйВычетЛичный + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаДетей + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаВторогоРебенка + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенка + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидов 
			+ ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаДетейДвойной + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаВторогоРебенкаДвойной + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенкаДвойной + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидовДвойной
			+ ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаДетейДвойнойВторой + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаВторогоРебенкаДвойнойВторой + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой + ВыборкаПоРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидовДвойнойВторой
			+ ВыборкаПоРаботникиОрганизации.ПримененныйВычетИмущественныйРасход + ВыборкаПоРаботникиОрганизации.ПримененныйВычетИмущественныйПроцентыПоКредитам + ВыборкаПоРаботникиОрганизации.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании) Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке(НачалоСообщения + "не указаны суммы перерасчета налога!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации) И ВыборкаПоРаботникиОрганизации.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке(НачалоСообщения + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРаботникиОрганизации()

// По документу формируем движения по НДФЛРасчетыСБюджетом
//
// Параметры: 
//  ШапкаДокумента				- выборка по данным шапки документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьВзаиморасчетыСБюджетом(ЭтотОбъект, ШапкаДокумента)
	
	// получим учетную политику
	УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ЭтотОбъект.Организация, "УпрощенныйУчетНДФЛ");
	
	// Заполним записи в наборах записей регистров
	Для Каждого ВыборкаПоТЧ Из ЭтотОбъект.РаботникиОрганизации Цикл 				
		
		Если ВыборкаПоТЧ.НалогПоСтавке09 <> 0 Тогда
			Движение = ЭтотОбъект.Движения.НДФЛРасчетыСБюджетом.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоТЧ, "ФизЛицо, ПодразделениеОрганизации");  
			// Свойства
			Движение.Период                 		= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.ГоловнаяОрганизация;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
			Движение.МесяцНалоговогоПериода 		= ВыборкаПоТЧ.МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке09; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ШапкаДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Истина;
			Движение.КодДохода					  	= Справочники.ДоходыНДФЛ.Код1010;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке09 <> 0 Тогда
			
			Движение = ЭтотОбъект.Движения.НДФЛРасчетыСБюджетом.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоТЧ, "ФизЛицо, ПодразделениеОрганизации");  
			// Свойства
			Движение.Период                 		= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.ГоловнаяОрганизация;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
			Движение.МесяцНалоговогоПериода 		= ВыборкаПоТЧ.МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке09; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ШапкаДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ЗачетАвансовыхПлатежей;
			Движение.ИсчисленоИзЗарплаты			= Истина;
			Движение.КодДохода					  	= Справочники.ДоходыНДФЛ.Код1010;
			
			ДвижениеАвансов = ЭтотОбъект.Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеАвансов, Движение);
			// Ресурсы
			ДвижениеАвансов.Сумма	= Движение.Налог; 
			// Измерения
			ДвижениеАвансов.Год 	= Год(ВыборкаПоТЧ.МесяцНалоговогоПериода);
			
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке13 <> 0 Тогда
			Движение = ЭтотОбъект.Движения.НДФЛРасчетыСБюджетом.Добавить();
			// Свойства
			Движение.Период                 		= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			Движение.МесяцНалоговогоПериода      	= ВыборкаПоТЧ.МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке13; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ШапкаДокумента.Организация;
			Движение.ПодразделениеОрганизации  		= ВыборкаПоТЧ.ПодразделениеОрганизации;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Истина;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке13 <> 0 Тогда
			
			Движение = ЭтотОбъект.Движения.НДФЛРасчетыСБюджетом.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоТЧ, "ФизЛицо, ПодразделениеОрганизации");  
			// Свойства
			Движение.Период                 		= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.ГоловнаяОрганизация;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			Движение.МесяцНалоговогоПериода 		= ВыборкаПоТЧ.МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке13; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ШапкаДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ЗачетАвансовыхПлатежей;
			Движение.ИсчисленоИзЗарплаты			= Истина;
			
			ДвижениеАвансов = ЭтотОбъект.Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеАвансов, Движение);
			// Ресурсы
			ДвижениеАвансов.Сумма	= Движение.Налог; 
			// Измерения
			ДвижениеАвансов.Год 	= Год(ВыборкаПоТЧ.МесяцНалоговогоПериода);
			
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке35 <> 0 Тогда
			Движение = ЭтотОбъект.Движения.НДФЛРасчетыСБюджетом.Добавить();
			// Свойства
			Движение.Период                 		= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
			Движение.МесяцНалоговогоПериода 		= ВыборкаПоТЧ.МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке35; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ШапкаДокумента.Организация;
			Движение.ПодразделениеОрганизации  		= ВыборкаПоТЧ.ПодразделениеОрганизации;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ИсчисленоИзЗарплаты			= Истина;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке35 <> 0 Тогда
			
			Движение = ЭтотОбъект.Движения.НДФЛРасчетыСБюджетом.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоТЧ, "ФизЛицо, ПодразделениеОрганизации");  
			// Свойства
			Движение.Период                 		= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.ГоловнаяОрганизация;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
			Движение.МесяцНалоговогоПериода 		= ВыборкаПоТЧ.МесяцНалоговогоПериода;
			// Ресурсы
			Движение.Налог							= ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке35; 
			// Реквизиты
			Движение.ОбособленноеПодразделение  	= ШапкаДокумента.Организация;
			Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ЗачетАвансовыхПлатежей;
			Движение.ИсчисленоИзЗарплаты			= Истина;
			
			ДвижениеАвансов = ЭтотОбъект.Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеАвансов, Движение);
			// Ресурсы
			ДвижениеАвансов.Сумма	= Движение.Налог; 
			// Измерения
			ДвижениеАвансов.Год 	= Год(ВыборкаПоТЧ.МесяцНалоговогоПериода);
			
		КонецЕсли;
		
		// сразу же, не дожидаясь выплаты, регистрируем факт удержания налога по ставкам 9 и 35%
		Если УпрощенныйУчетНДФЛ Тогда 
			
			Если ВыборкаПоТЧ.НалогПоСтавке09 <> 0 Тогда
				Движение = ЭтотОбъект.Движения.НДФЛРасчетыСБюджетом.Добавить();
				// Свойства
				Движение.Период                 		= ШапкаДокумента.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				// Измерения
				Движение.Организация					= ШапкаДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
				Движение.МесяцНалоговогоПериода 		= ВыборкаПоТЧ.МесяцНалоговогоПериода;
				// Ресурсы
				Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке09; 
				// Реквизиты
				Движение.ОбособленноеПодразделение  	= ШапкаДокумента.Организация;
				Движение.ПодразделениеОрганизации  		= ВыборкаПоТЧ.ПодразделениеОрганизации;
				Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
				Движение.КодДохода					  	= Справочники.ДоходыНДФЛ.Код1010;
			КонецЕсли;
			
			Если ВыборкаПоТЧ.НалогПоСтавке35 <> 0 Тогда
				Движение = ЭтотОбъект.Движения.НДФЛРасчетыСБюджетом.Добавить();
				// Свойства
				Движение.Период                 		= ШапкаДокумента.Дата;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
				// Измерения
				Движение.Организация					= ШапкаДокумента.ГоловнаяОрганизация;
				Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
				Движение.МесяцНалоговогоПериода 		= ВыборкаПоТЧ.МесяцНалоговогоПериода;
				// Ресурсы
				Движение.Налог							= ВыборкаПоТЧ.НалогПоСтавке35; 
				// Реквизиты
				Движение.ОбособленноеПодразделение  	= ШапкаДокумента.Организация;
				Движение.ПодразделениеОрганизации  		= ВыборкаПоТЧ.ПодразделениеОрганизации;
				Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьНаборЗаписейНДФЛПоНачислениям

// По документу формируем движения по взаиморасчетам с работником
//
// Параметры: 
//  ШапкаДокумента				- выборка по данным шапки документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьВзаиморасчетыСРаботниками(ЭтотОбъект, ШапкаДокумента)
	
	// Заполним записи в наборах записей регистров
	Для Каждого ВыборкаПоТЧ Из ЭтотОбъект.РаботникиОрганизации Цикл 				
		
		// регистрация перерасчета во взаиморасчетах с работниками
		Если ВыборкаПоТЧ.НалогПоСтавке09 - ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке09 > 0 Тогда
			Движение = ЭтотОбъект.Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			// Свойства
			Движение.Период           				= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.ПериодВзаиморасчетов           = ШапкаДокумента.ПериодВзаиморасчетов;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= - ВыборкаПоТЧ.НалогПоСтавке09 + ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке09; 
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке13 - ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке13 > 0 Тогда
			Движение = ЭтотОбъект.Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			// Свойства
			Движение.Период           				= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.ПериодВзаиморасчетов			= ШапкаДокумента.ПериодВзаиморасчетов;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= - ВыборкаПоТЧ.НалогПоСтавке13 + ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке13; 
		КонецЕсли;
		
		Если ВыборкаПоТЧ.НалогПоСтавке35 - ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке35 > 0 Тогда
			Движение = ЭтотОбъект.Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			// Свойства
			Движение.Период           				= ШапкаДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация					= ШапкаДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.ПериодВзаиморасчетов           = ШапкаДокумента.ПериодВзаиморасчетов;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= - ВыборкаПоТЧ.НалогПоСтавке35 + ВыборкаПоТЧ.ЗачтеноАвансовыхПлатежейПоСтавке35; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьНаборЗаписейНДФЛПоНачислениям

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции объекта

Процедура РассчитатьДополнительно(ЭтотОбъект, ГоловнаяОрганизация, МесяцНалоговогоПериода) Экспорт
	
	// В этой конфигурации дополнительных действий не предусмотрено

КонецПроцедуры

// Формирует запрос для расчета сумм НДФЛ к зачету
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛКЗачету(ЭтотОбъект)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Организация", 		ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ЭтотОбъект.ПериодВзаиморасчетов);
	Запрос.УстановитьПараметр("Ставка13", 			Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	Запрос.УстановитьПараметр("Ставка09", 			Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09);
	Запрос.УстановитьПараметр("Ставка35", 			Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛПерерасчетРаботникиОрганизации.ФизЛицо,
	|	СУММА(НДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке13 - НДФЛПерерасчетРаботникиОрганизации.ЗачтеноАвансовыхПлатежейПоСтавке13) КАК НалогПоСтавке13,
	|	СУММА(НДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке35 - НДФЛПерерасчетРаботникиОрганизации.ЗачтеноАвансовыхПлатежейПоСтавке35) КАК НалогПоСтавке35,
	|	СУММА(НДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке09 - НДФЛПерерасчетРаботникиОрганизации.ЗачтеноАвансовыхПлатежейПоСтавке09) КАК НалогПоСтавке09
	|ПОМЕСТИТЬ ВТСтрокиНДФЛ
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК НДФЛПерерасчетРаботникиОрганизации
	|ГДЕ
	|	НДФЛПерерасчетРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛПерерасчетРаботникиОрганизации.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НалогПоСтавке13 КАК Налог,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ВЫБОР
	|				КОГДА СтрокиНДФЛ.НалогПоСтавке13 > 0
	|					ТОГДА СтрокиНДФЛ.НалогПоСтавке13
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА СтрокиНДФЛ.НалогПоСтавке13
	|		ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
	|	КОНЕЦ КАК НДФЛКЗачетуУчтено,
	|	СтрокиНДФЛ.ФизЛицо,
	|	&Ставка13 КАК СтавкаНалогообложенияРезидента
	|ИЗ
	|	ВТСтрокиНДФЛ КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКЗачету.Остатки(
	|				&ПериодРегистрации,
	|				Физлицо В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							НДФЛПерерасчетРаботникиОрганизации.ФизЛицо
	|						ИЗ
	|							ВТСтрокиНДФЛ КАК НДФЛПерерасчетРаботникиОрганизации)
	|					И Организация = &Организация) КАК НДФЛКЗачету
	|		ПО СтрокиНДФЛ.ФизЛицо = НДФЛКЗачету.ФизЛицо
	|ГДЕ
	|	(СтрокиНДФЛ.НалогПоСтавке13 < 0
	|			ИЛИ ВЫБОР
	|				КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ВЫБОР
	|						КОГДА СтрокиНДФЛ.НалогПоСтавке13 > 0
	|							ТОГДА СтрокиНДФЛ.НалогПоСтавке13
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|					ТОГДА СтрокиНДФЛ.НалогПоСтавке13
	|				ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
	|			КОНЕЦ <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НалогПоСтавке09,
	|	0,
	|	СтрокиНДФЛ.ФизЛицо,
	|	&Ставка09
	|ИЗ
	|	ВТСтрокиНДФЛ КАК СтрокиНДФЛ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НалогПоСтавке35,
	|	0,
	|	СтрокиНДФЛ.ФизЛицо,
	|	&Ставка35
	|ИЗ
	|	ВТСтрокиНДФЛ КАК СтрокиНДФЛ";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛКЗачету

Функция СформироватьЗапросПоНДФЛудержанный(ЭтотОбъект)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Организация", 		ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ЭтотОбъект.ПериодВзаиморасчетов);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке13 - СтрокиНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13) КАК Налог,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) КАК СтавкаНалогообложенияРезидента
	|ИЗ
	|	Документ.НДФЛПерерасчет.РаботникиОрганизации КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтрокиНДФЛ.НалогПоСтавке13 - СтрокиНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛудержанный()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛКЗачету(ЭтотОбъект, ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента)

    // НДФЛ к зачету
    Если ВыборкаПоСтрокамДокумента.Налог < 0 Тогда
    	Движение = ЭтотОбъект.Движения.НДФЛКЗачету.Добавить();

    	// Свойства
    	Движение.Период						= ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

    	// Измерения
    	Движение.ФизЛицо                        = ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Движение.Организация				    = ВыборкаПоШапкеДокумента.Организация;
    	Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияРезидента;

    	// Ресурсы
    	Движение.СуммаНДФЛКЗачету			= - ВыборкаПоСтрокамДокумента.Налог;
        
    ИначеЕсли ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено <> 0 Тогда
		
		Движение = ЭтотОбъект.Движения.НДФЛКЗачету.Добавить();

		// Свойства
		Движение.Период		 = ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо                        = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				    = ВыборкаПоШапкеДокумента.Организация;
    	Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияРезидента;
		
		// Ресурсы
		Движение.СуммаНДФЛКЗачету			= ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено;
	        
    КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛКЗачету

Процедура ОбработкаПроведенияДополнительно(ЭтотОбъект, ВыборкаПоШапкеДокумента, Отказ, Режим, Заголовок) Экспорт
	
	// проверим строки табличной части РаботникиОрганизации
	ПроверитьЗаполнениеРаботникиОрганизации(ЭтотОбъект, Отказ, Заголовок);	
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
	Если НЕ Отказ Тогда
		
		// получим учетную политику
		УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ЭтотОбъект.Организация, "УпрощенныйУчетНДФЛ");

 		СформироватьВзаиморасчетыСБюджетом(ЭтотОбъект, ВыборкаПоШапкеДокумента);
		
		СформироватьВзаиморасчетыСРаботниками(ЭтотОбъект, ВыборкаПоШапкеДокумента);
		
		// Вычеты предоставленные (стандартные и имущественные)
		ЭтотОбъект.СформироватьВычетыПоНДФЛ(ВыборкаПоШапкеДокумента, УпрощенныйУчетНДФЛ, Отказ, Заголовок);
		
		// НДФЛ к зачету
		// получим реквизиты табличной части
		Если НЕ Отказ Тогда
			
			ВыборкаПоНДФЛКЗачету = СформироватьЗапросПоНДФЛКЗачету(ЭтотОбъект).Выбрать();
			Пока ВыборкаПоНДФЛКЗачету.Следующий() Цикл 
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуНДФЛКЗачету(ЭтотОбъект, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента);
			КонецЦикла;
			
			Если УпрощенныйУчетНДФЛ Тогда
				
				ВыборкаПоНДФЛуд = СформироватьЗапросПоНДФЛудержанный(ЭтотОбъект).Выбрать();
				Пока ВыборкаПоНДФЛуд.Следующий() Цикл 

					// Заполним записи в наборах записей регистров
					ЭтотОбъект.ДобавитьСтрокуНДФЛудержанный(ВыборкаПоНДФЛуд, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПоиска(СтруктураПоиска) Экспорт
	
	// В этой конфигурации структура поиска не дополняется
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы документа

#Если ТолстыйКлиентОбычноеПриложение Тогда

#КонецЕсли