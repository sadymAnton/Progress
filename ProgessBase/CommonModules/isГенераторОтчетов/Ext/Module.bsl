////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СТРОКАМИ

// возвращает количество группировок для строки, которая используется в блоке динамических строк
// Параметры:
//	РодительСсылка - ссылка на родителя обрабатываемой строки
// Описание:
//	функция возвращает число, отличное от нуля, если строка в иерархии входит в состав строки, для которой установлено количество динамических строк
//	данная функция работает только в режиме динамических строк "по отдельным строкам"
//
Функция КоличествоГруппировокСверху(РодительСсылка) Экспорт
	Если НЕ ЗначениеЗаполнено(РодительСсылка) Тогда
		Возврат 0;
	ИначеЕсли РодительСсылка.КоличествоГруппировокВСтроке = 0 Тогда
		Возврат КоличествоГруппировокСверху(РодительСсылка.Родитель);
	Иначе
	    Возврат РодительСсылка.КоличествоГруппировокВСтроке;
	КонецЕсли;
КонецФункции // ()

Процедура УстановитьПараметрыДинамическихСтрокВПодстроках(Строка, ЗначениеКоличестваГруппировок, ЗначениеРежима, Отказ) Экспорт 
	Выборка = Справочники.isСтрокиОтчетовПЭО.ВыбратьИерархически(Строка, Строка.Владелец);
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоГруппировокВСтроке <> ЗначениеКоличестваГруппировок Тогда
		//Если Выборка.КоличествоГруппировокВСтроке <> ЗначениеКоличестваГруппировок
		//	ИЛИ Выборка.РежимДинамическихСтрок <> ЗначениеРежима Тогда
			Объект = Выборка.ПолучитьОбъект();
			Объект.КоличествоГруппировокВСтроке = ЗначениеКоличестваГруппировок;
//			Объект.РежимДинамическихСтрок = ЗначениеРежима;
			Попытка
				Объект.Записать();
			Исключение
				Сообщить("Ошибка записи строки "+Выборка+" при установке количества динамических группировок"+
								Символы.ПС + ИнформацияОбОшибке());
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// возвращает максимальное количество группировок для выражения, которое используется в блоке динамических строк
// Параметры:
//	Выражение - ссылка на выражение
// Описание:
//	функция возвращает число, отличное от нуля, если выражение используется в строке, которое используется в иерархии в составе строки, для которой установлено количество динамических строк
//	данная функция работает только в режиме динамических строк "по отдельным строкам" и если описание группировок не будет перенесено в строки 
//
Функция КоличествоГруппировокДляВыраженияСверху(Выражение) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Выражение", Выражение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	isСтрокиОтчетовПЭОИсточники.Ссылка КАК Строка,
	|	isСтрокиОтчетовПЭОИсточники.Ссылка.КоличествоГруппировокВСтроке
	|ИЗ
	|	Справочник.isСтрокиОтчетовПЭО.Источники КАК isСтрокиОтчетовПЭОИсточники
	|ГДЕ
	|	isСтрокиОтчетовПЭОИсточники.Источник = &Выражение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	isВыраженияОтчетовПЭОИсточники.Ссылка,
	|	0
	|ИЗ
	|	Справочник.isВыраженияОтчетовПЭО.Источники КАК isВыраженияОтчетовПЭОИсточники
	|ГДЕ
	|	isВыраженияОтчетовПЭОИсточники.Источник = &Выражение
	|	И isВыраженияОтчетовПЭОИсточники.Ссылка.ВидВыражения = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	isВыраженияОтчетовПЭО.Ссылка,
	|	0
	|ИЗ
	|	Справочник.isВыраженияОтчетовПЭО КАК isВыраженияОтчетовПЭО
	|ГДЕ
	|	isВыраженияОтчетовПЭО.ВидВыражения = 0
	|	И (isВыраженияОтчетовПЭО.Источник1 = &Выражение
	|			ИЛИ isВыраженияОтчетовПЭО.Источник2 = &Выражение)";
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = 0;
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Строка) = тип("СправочникСсылка.isСтрокиОтчетовПЭО") Тогда
			Кол = КоличествоГруппировокДляВыраженияСверху(Выборка.Строка);
		ИначеЕсли ТипЗнч(Выборка.Строка) = тип("СправочникСсылка.isВыраженияОтчетовПЭО") Тогда
		    Кол = Выборка.КоличествоГруппировокВСтроке;
		Иначе
			Кол = 0;
		КонецЕсли;
		Результат = Макс(Результат, Кол);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ()

Функция НужныГруппировкиДляВыражения(Источник) Экспорт
	Возврат Ложь;
	Результат = Ложь;
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.isВыраженияОтчетовПЭО") Тогда
		Если Источник.ВидВыражения = 0 Тогда
			Для каждого ТекСтр Из Источник.Источники Цикл
				Если ТекСтр.ТипСтроки = 0 Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;			
			КонецЦикла;	
		ИначеЕсли Источник.ТипИсточника1 = 0 
			ИЛИ Источник.ТипИсточника2 = 0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;	
	Возврат Результат;
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ ОБЪЕКТОВ
Функция ЕстьВалюта() Экспорт
	Возврат Метаданные.Справочники.Найти("Валюты")<>Неопределено;
КонецФункции // ()

Функция ВалютаРегламентированногоУчета() Экспорт
	Если Метаданные.Справочники.Найти("Валюты")<>Неопределено  Тогда
		Если Метаданные.Константы.Найти("ВалютаРегламентированногоУчета")<>Неопределено Тогда
			Возврат Константы.ВалютаРегламентированногоУчета.Получить();		
		Иначе
			Возврат Справочники.Валюты.ПустаяСсылка();		
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

Процедура ПриОткрытииФормыОтчета(Форма) Экспорт
	Список=Форма.ЭлементыФормы.СписокПараметров.Колонки.ВидСравнения.ЭлементУправления.СписокВыбора;
	Список.Добавить(ВидСравнения.Равно);
	Список.Добавить(ВидСравнения.ВИерархии);
	Список.Добавить(ВидСравнения.НеРавно);
	Список.Добавить(ВидСравнения.НеВИерархии);
	Если НЕ ЗначениеЗаполнено(Форма.ОтчетОбъект.ЕдиницаИзмерения) Тогда
		Форма.ОтчетОбъект.ЕдиницаИзмерения = Перечисления.isПорядкиОкругленияОтчетности.Окр1;
	КонецЕсли;
	Если ЕстьВалюта() Тогда
		Форма.ОтчетОбъект.ВалютаОтчета = ВалютаРегламентированногоУчета();
	Иначе	
		Форма.ЭлементыФормы.НадписьВалютаДляКроса.Видимость = Ложь;
		Форма.ЭлементыФормы.ВалютаДляКроса.Видимость 		= Ложь;
	КонецЕсли;
	//++ИС Куприянова Е.В. 31.01.2013
	//задача: 000002229 инц.: I-1С_КОРП-MSC-2012-01672
	//по-умолчанию режим выборки  данных = 1 (по аналитике), так как это рекомендуемый вариант
	Форма.ОтчетОбъект.РежимВыборкиДанных = 1;
	//--ИС Куприянова Е.В. 31.01.2013
	//++ИС Куприянова Е.В. 20.06.2013
	//задача: 000002556 инц.: I-1С_КОРП-MSC-2013-00543
	Форма.ОтчетОбъект.ВыводитьКолонкуНомера = Истина;
	Форма.ОтчетОбъект.ВыводитьКолонкуИтогов = Истина;
	//--ИС Куприянова Е.В. 20.06.2013
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТИПАМИ
Функция ПолучитьРежимРаботы() Экспорт
	Возврат 0;
КонецФункции // ()

// Проверяет дату на заполненность по аналогии с системной функцией "ПустаяСтрока".
// 
Функция ПустаяДата(ПроверяемаяДата) Экспорт
	
	Если ТипЗнч(ПроверяемаяДата) = Тип("Дата") 
	   И ПроверяемаяДата = Дата(1,1,1) Тогда
	   
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ПустаяДата()

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//  ЗнакЧисла				- ДопустимыйЗнак, знак числа
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции // ПолучитьОписаниеТиповДаты() 

Функция СоздатьДеревоПоРезультатуЗапроса(РезультатЗапроса)
	Результат = Новый ДеревоЗначений;
	Для каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
		НоваяКолонка = Результат.Колонки.Добавить(ТекКолонка.Имя, ТекКолонка.ТипЗначения);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ()

///////// ПРОЦЕДУРЫ ГЕНЕРАТОРА ОТЧЕТОВ ПЭО
Процедура ЗаполнитьСписокВыбораСтраниц(СписокВыбора,Настройка) Экспорт
	СписокВыбора.Очистить();
	Для каждого ТекСтр Из Настройка.Макеты Цикл
		СписокВыбора.Добавить(ТекСтр.НомерСтраницы,ТекСтр.Имя);
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораВидаПериода(СписокВыбора) Экспорт
	СписокВыбора.Добавить(0, "Текущий");
	СписокВыбора.Добавить(1, "Предыдущий");
	СписокВыбора.Добавить(2, "Прошлого года");
	СписокВыбора.Добавить(3, "С начала года");
	СписокВыбора.Добавить(4, "С начала пред. года");
	СписокВыбора.Добавить(5, "По начало текущего периода");
	СписокВыбора.Добавить(6, "По начало текущего года");
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораСпособаРасчетаИтоговойКолонки(СписокВыбора) Экспорт
	СписокВыбора.Добавить(0, "Итог по колонкам");
	СписокВыбора.Добавить(1, "Итог по строкам нижнего уровня");
	СписокВыбора.Добавить(2, "Итог за период отчета");
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораПараметровОтчета(СписокВыбора) Экспорт
	СписокВыбора.Добавить(0,"Дата формирования отчета");
	СписокВыбора.Добавить(1,"Период отчета");
	//СписокВыбора.Добавить(2,"Периодичность отчета");
	СписокВыбора.Добавить(3,"Дата начала периода");
	СписокВыбора.Добавить(4,"Дата окончания периода");
	СписокВыбора.Добавить(5,"Организация");
	СписокВыбора.Добавить(6,"Валюта отчета");
	СписокВыбора.Добавить(7,"Единица измерения");
КонецПроцедуры

Функция ПолучитьДеревоСтрокОтчета(Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Строки.Ссылка КАК Строка,
	|	Строки.Номер КАК Номер,
	|	Строки.Родитель КАК Батя,
	|	ВЫБОР
	|		КОГДА Строки.Владелец.ДинамическиеСтроки
	|			ТОГДА Строки.КоличествоГруппировокВСтроке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоГруппировок,
	|	Строки.НеВыводитьПустыеГруппировки1,
	|	Строки.НеВыводитьПустыеГруппировки2,
	|	Строки.НеВыводитьПустыеГруппировки3,
//++ИС Куприянова Е.В. 05.05.2013
//новое свойство НеВыводитьСтрокуВОтчет
	|	Строки.НеВыводитьСтрокуВОтчет,
//--ИС Куприянова Е.В. 05.05.2013
	|	Строки.НеВыводитьПриПустомЗначении
	|ИЗ
	|	Справочник.isСтрокиОтчетовПЭО КАК Строки
	|ГДЕ
	|	Строки.Владелец = &Настройка
	|	И НЕ Строки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|ИТОГИ ПО
	|	Строка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Настройка",Настройка );
	Результат = Запрос.Выполнить();
	ДеревоСтрок= Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);  
	ДеревоСтрок.Строки.Очистить();
	ДеревоСтрок.Колонки.Добавить("Уровень",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2,0));
	ДеревоСтрок.Колонки.Добавить("ДинамическаяСтрока",Новый ОписаниеТипов("Булево"));
	ДеревоСтрок.Колонки.Добавить("ИзмерениеДинамическойСтроки");
	Если Настройка.ВидНастройки = 0 И Настройка.ДинамическиеСтроки Тогда
		ДеревоСтрок.Колонки.Добавить("НомерГруппировки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
	КонецЕсли;
	Табл = Результат.Выгрузить();
	Для каждого Выборка Из Табл Цикл
		Если НайтиСтрокуДерева(Выборка.Строка,ДеревоСтрок.Строки)<>Неопределено ИЛИ
			НЕ ЗначениеЗаполнено(Выборка.Строка) Тогда
			Продолжить;
		КонецЕсли;	

		Батя=НайтиСтрокуДерева(Выборка.Батя,ДеревоСтрок.Строки);
		Если Батя=Неопределено Тогда
			Строки=ДеревоСтрок.Строки;
			Уровень=1;
		Иначе
			Строки=Батя.Строки;		
			Уровень=Батя.Уровень+1;
		КонецЕсли;
		Строка=Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Строка,Выборка);
		Строка.Уровень=Уровень;
	КонецЦикла;
	Возврат ДеревоСтрок;
КонецФункции // ()

Функция НайтиСтрокуДерева(Строка,Строки) Экспорт
	Для каждого ТекСтр Из Строки Цикл
		Если ТекСтр.Строка=Строка Тогда
		    Возврат ТекСтр;
		Иначе
			Результат = НайтиСтрокуДерева(Строка,ТекСтр.Строки);
			Если Результат<>Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;

КонецФункции // НайтиСтрокуДерева()

//// процедуры форм строки отчета и выражения (в части сумматора)
Процедура СумматорВидИсточникаНачалоВыбора(Элемент, ТипСтроки, ВидНастройки, СтандартнаяОбработка)  Экспорт
	Если ТипСтроки > 3 Тогда
		ВыбратьЭлементСправочника(Элемент, Новый Структура("ВидНастройки",ВидНастройки), СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

Процедура СумматорВидИсточникаПриИзменении(Источник, Элемент)  Экспорт
	Если ЗначениеЗаполнено(Источник) И Источник.Владелец <> Элемент.Значение Тогда
		Источник = Справочники[Источник.Метаданные().Имя].ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

Процедура СумматорНачалоВыбораИсточника(Владелец, ТекСтр, Элемент, СтандартнаяОбработка, КореньДинамическойСтроки)  Экспорт
	ОбновитьТипИсточник(ТекСтр.ТипСтроки,ТекСтр.ВидИсточника, ТекСтр.Источник);

	Если ТекСтр.ТипСтроки = 0 ИЛИ ТекСтр.ТипСтроки > 3 Тогда
		ВыбратьЭлементСправочника(Элемент,Новый Структура("Владелец",ТекСтр.ВидИсточника), СтандартнаяОбработка);
	ИначеЕсли ТекСтр.ТипСтроки = 1 Тогда
		ВидДанных = ?(Владелец.ВидНастройки = 0, 0, 1);
		ВыбратьЭлементСправочника(Элемент,Новый Структура("Владелец, НомерСтраницы, ВидДанных",Владелец, ТекСтр.НомерСтраницы, ВидДанных),СтандартнаяОбработка);
	Иначе
		СтруктураОтбора = Новый Структура("Владелец",Владелец);
		//Если ТипЗнч(ТекСтр) = Тип("СправочникТабличнаяЧастьСтрока.isСтрокиОтчетовПЭО.Источники") 
		//	И КоличествоГруппировокСтроки > 0 Тогда
		//Если КоличествоГруппировокСтроки > 0 Тогда
		//	СтруктураОтбора.Вставить("ВидВыражения",0);
		//КонецЕсли;
		ВыбратьЭлементСправочника(Элемент,СтруктураОтбора,СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

Процедура СумматорПриНачалеРедактированияСтроки(Владелец, Элемент, НоваяСтрока, Копирование) Экспорт
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекСтр=Элемент.ТекущаяСтрока;	
		ТекСтр.Коэффициент 	= 1;
		ТекСтр.ВидИсточника = Владелец.ВидИсточника;
		ПривестиВидИсточника(ТекСтр);
	КонецЕсли;
КонецПроцедуры

Процедура ПривестиВидИсточника(ТекСтр) Экспорт
	Если ТекСтр.ТипСтроки = 0 Тогда
		ОТ = Новый ОписаниеТипов("СправочникСсылка.isВидыИсточниковОтчетовПЭО");
		ТекСтр.ВидИсточника = ОТ.ПривестиЗначение(ТекСтр.ВидИсточника);
	ИначеЕсли ТекСтр.ТипСтроки > 3 Тогда
		ОТ = Новый ОписаниеТипов("СправочникСсылка.isНастройкиОтчетовПЭО");
		ТекСтр.ВидИсточника = ОТ.ПривестиЗначение(ТекСтр.ВидИсточника);
	КонецЕсли;
КонецПроцедуры

//Процедура СумматорПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, Настройка) Экспорт
Процедура СумматорПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, Владелец, Объект, КоличествоГруппировок=0) Экспорт
	УстановитьТекстИзСпискаВыбора(ОформлениеСтроки.Ячейки.ТипСтроки,Элемент,ДанныеСтроки) ;
	УстановитьТекстИзСпискаВыбора(ОформлениеСтроки.Ячейки.НомерСтраницы,Элемент,ДанныеСтроки) ;
	ОформлениеСтроки.Ячейки.ВидИсточника.Видимость 	= ДанныеСтроки.ТипСтроки = 0 ИЛИ ДанныеСтроки.ТипСтроки > 3;
	ОформлениеСтроки.Ячейки.НомерСтраницы.Видимость = ДанныеСтроки.ТипСтроки = 1;
	Если ДанныеСтроки.ТипСтроки = 0 Тогда
		УстановитьТекстИзСпискаВыбора(ОформлениеСтроки.Ячейки.ВидОтбораПоПодразделению,Элемент,ДанныеСтроки);
	КонецЕсли;
	
	НеВидимостьГруппировки = КоличествоГруппировок = 0
						ИЛИ ДанныеСтроки.ТипСтроки = 1
						ИЛИ ДанныеСтроки.ТипСтроки = 3
						ИЛИ ДанныеСтроки.ТипСтроки = 2 И НЕ НужныГруппировкиДляВыражения(ДанныеСтроки.Источник);
	ОформлениеСтроки.Ячейки.НомерСубконто1.Видимость = НЕ НеВидимостьГруппировки;
	ОформлениеСтроки.Ячейки.НомерСубконто2.Видимость = НЕ НеВидимостьГруппировки И КоличествоГруппировок > 1;
	ОформлениеСтроки.Ячейки.НомерСубконто3.Видимость = НЕ НеВидимостьГруппировки И КоличествоГруппировок > 2;
	ОформлениеСтроки.Ячейки.НомерСубконто4.Видимость = НЕ НеВидимостьГруппировки И КоличествоГруппировок > 3;
	ОформлениеСтроки.Ячейки.НомерСубконто5.Видимость = НЕ НеВидимостьГруппировки И КоличествоГруппировок > 4;
	ОформлениеСтроки.Ячейки.НомерСубконто1.ТолькоПросмотр = НеВидимостьГруппировки;
	ОформлениеСтроки.Ячейки.НомерСубконто2.ТолькоПросмотр = НеВидимостьГруппировки ИЛИ КоличествоГруппировок < 2;
	ОформлениеСтроки.Ячейки.НомерСубконто3.ТолькоПросмотр = НеВидимостьГруппировки ИЛИ КоличествоГруппировок < 3;
	ОформлениеСтроки.Ячейки.НомерСубконто4.ТолькоПросмотр = НеВидимостьГруппировки ИЛИ КоличествоГруппировок < 4;
	ОформлениеСтроки.Ячейки.НомерСубконто5.ТолькоПросмотр = НеВидимостьГруппировки ИЛИ КоличествоГруппировок < 5;
	
	//Если Владелец.ДинамическиеСтроки И ДанныеСтроки.ТипСтроки = 0 Тогда
	//	Если Объект.КоличествоГруппировокВСтроке > 0 Тогда
	//		isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоСчету1", 		Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
	//		isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоКорСчету1", 	Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
	//	КонецЕсли;
	//	Если Объект.КоличествоГруппировокВСтроке > 1 Тогда
	//		isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоСчету2", 		Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
	//		isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоКорСчету2", 	Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
	//	КонецЕсли;
	//	Если Объект.КоличествоГруппировокВСтроке > 2 Тогда
	//		isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоСчету3", 		Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
	//		isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоКорСчету3", 	Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Процедура ОбновитьТипИсточник(ТипСтроки,ВидИсточника,Источник) Экспорт
	Если ТипСтроки=0  Тогда
		ОП=Новый ОписаниеТипов("СправочникСсылка.isИсточникиОтчетовПЭО");	
		Источник=ОП.ПривестиЗначение(Источник);
		Если ЗначениеЗаполнено(Источник) И Источник.Владелец <> ВидИсточника Тогда
			Источник = "";
		КонецЕсли;
	ИначеЕсли ТипСтроки=1 ИЛИ ТипСтроки=4 Тогда
		ОП=Новый ОписаниеТипов("СправочникСсылка.isСтрокиОтчетовПЭО");	
		Источник=ОП.ПривестиЗначение(Источник);
	ИначеЕсли ТипСтроки=2 ИЛИ ТипСтроки=5 Тогда
		ОП=Новый ОписаниеТипов("СправочникСсылка.isВыраженияОтчетовПЭО");	
		Источник=ОП.ПривестиЗначение(Источник);
	ИначеЕсли ТипСтроки=3 ИЛИ ТипСтроки=5 Тогда
		ОП=Новый ОписаниеТипов("СправочникСсылка.isПараметрыОтчетовПЭО");	
		Источник=ОП.ПривестиЗначение(Источник);
	КонецЕсли;
КонецПроцедуры

Функция ЕстьИзмерениеОрганизация(ИмяРегистра) Экспорт

	Возврат Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти("Организация") <> Неопределено;

КонецФункции // ()

Функция ПолучитьСписокИменМакета(Макет, ТипОбласти = Неопределено) Экспорт
	ТО = ?(ТипОбласти = Неопределено, ТипОбластиЯчеекТабличногоДокумента.Строки, ТипОбласти);
	Результат = Новый СписокЗначений;
	Для каждого ТекИмя Из Макет.Области Цикл
		Если ТекИмя.ТипОбласти = ТО Тогда
			Результат.Добавить(ТекИмя.Имя);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
КонецФункции // ()

Функция ПолучитьМассивМакетовОбычныхСекцийСтраницыНастройки(Настройка, Макет) Экспорт
	Результат = Новый Массив;
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	Результат.Добавить(Макет);
	Возврат Результат;	
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	
	Если Настройка.ВидНастройки = 1 Тогда
		Результат.Добавить(Макет);
		Возврат Результат;	
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	isСекцииОтчетов.ИмяСекции
	|ИЗ
	|	Справочник.isСекцииОтчетов КАК isСекцииОтчетов
	|ГДЕ
	|	isСекцииОтчетов.Владелец = &Владелец
	|	И НЕ isСекцииОтчетов.ПометкаУдаления
	|	И isСекцииОтчетов.ВидСекции = 0";
	ТаблицаОбычныхСекций = Запрос.Выполнить().Выгрузить();
	Для каждого ТекИмя Из Макет.Области Цикл
		Если ТекИмя.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки 
			И ТаблицаОбычныхСекций.Найти(ТекИмя.Имя,"ИмяСекции") <> Неопределено Тогда
			НовыйМакет = Новый ТабличныйДокумент;
			НовыйМакет.ВставитьОбласть(ТекИмя,,,Ложь);
			Результат.Добавить(НовыйМакет);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции // ()

Функция ПолучитьМакетИзМакета(ИмяОбласти, Макет) Экспорт
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	Область = Макет.Области.Найти(ИмяОбласти);
	Если Область = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		Возврат Макет.ПолучитьОбласть(ИмяОбласти);
	КонецЕсли;
	// пример тупизма по причине переутомления
	//НовыйМакет = Новый ТабличныйДокумент;
	//НовыйМакет.ВставитьОбласть(Область,,,Ложь);
	//Возврат НовыйМакет;
КонецФункции // ()

Процедура Инк(Что,НаСколько=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Что) И НаСколько<>Неопределено Тогда
		Что=НаСколько;
	Иначе	
		Если ТипЗнч(Что)=Тип("Строка") Тогда
			Если НаСколько=Неопределено Тогда
				Сч=1;
				Индекс="";
		    Пока Сч<=СтрДлина(Что) Цикл
		    	Попытка
						Инд=Число(Прав(Что,Сч));	
						Индекс=Инд;
					Исключение
						Прервать;
					КонецПопытки;
				КонецЦикла;
				Если Индекс="" Тогда
					Что=Что+"1";
				Иначе
					Что=Лев(Что,СтрДлина(Что)-СтрДлина(СокрЛП(Индекс)))+СокрЛП(Индекс+1);
				КонецЕсли;
			Иначе
			  Что=Что+СокрЛП(НаСколько);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Что)=Тип("Число") Тогда
		  Если НаСколько=Неопределено Тогда
				Что=Что+1;
			ИначеЕсли НаСколько<>Null Тогда
			  Что=Что+НаСколько;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Что)=Тип("Дата") Тогда
		  Если НаСколько=Неопределено Тогда
				Что=Что+ДобавитьДень(1);
			ИначеЕсли НаСколько<>Null Тогда
			  Что=Что+ДобавитьДень(НаСколько);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьДень(КолДней=1) Экспорт
	Возврат 86400*КолДней; 
КонецФункции // 

Процедура ЗаполнитьСписокВидамиИсточников(Список) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	isВидыИсточниковОтчетовПЭО.Ссылка
	|ИЗ
	|	Справочник.isВидыИсточниковОтчетовПЭО КАК isВидыИсточниковОтчетовПЭО
	|ГДЕ
	|	НЕ isВидыИсточниковОтчетовПЭО.ПометкаУдаления";
	
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
КонецПроцедуры

Процедура ЗаполнитьСписокВидамиОтбораПоПодразделению(Список) Экспорт
	Список.Очистить();
	Список.Добавить(0, "По счету");
	Список.Добавить(1, "По кор. счету");
	Список.Добавить(2, "По счету и кор. счету");
КонецПроцедуры

Процедура ЗаполнитьСписокВидамиСравненияОтбораПоПодразделению(Список) Экспорт
	Список.Очистить();
	Список.Добавить(ВидСравнения.Равно);
	Список.Добавить(ВидСравнения.НеРавно);
	Список.Добавить(ВидСравнения.ВСписке);
	Список.Добавить(ВидСравнения.НеВСписке);
	Список.Добавить(ВидСравнения.ВИерархии);
	Список.Добавить(ВидСравнения.НеВИерархии);
	Список.Добавить(ВидСравнения.ВСпискеПоИерархии);
	Список.Добавить(ВидСравнения.НеВСпискеПоИерархии);
КонецПроцедуры

Процедура ЗаполнитьСписокТиповИсточников(Список, ВидИсточников) Экспорт
	Список.Очистить();
	Если ВидИсточников.ТипРегистра = 0 Тогда
		Список.Добавить(3,"Начальный остаток");
		Список.Добавить(4,"Начальный остаток (кредитовый)");
		Список.Добавить(5,"Начальный остаток (дебетовый)");
		Список.Добавить(1,"Оборот по дебету");
		Список.Добавить(2,"Оборот по кредиту");
		Список.Добавить(0,"Конечный остаток");
		Список.Добавить(6,"Конечный остаток (кредитовый)");
		Список.Добавить(7,"Конечный остаток (дебетовый)");
	ИначеЕсли ЭтоРегистрНакопленияОборотный(ВидИсточников.РегистрБухгалтерии) Тогда
		Список.Добавить(0,"Оборот");
	Иначе
		Список.Добавить(1,"Начальный остаток");
		Список.Добавить(2,"Приход");
		Список.Добавить(3,"Расход");
		Список.Добавить(4,"Конечный остаток");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСписокРежимовДополнительногоОтбора(Список) Экспорт
	Список.Очистить();
	Список.Добавить(0, "Дополнительно к основному");
	Список.Добавить(1, "Вместо основного");
	Список.Добавить(2, "По равенству с основным");
	Список.Добавить(3, "0 при равенстве с основным");
КонецПроцедуры

// Параметры:
//	РежимДинамическихСтрок - может принимать следующие значения
//		0 - режим динамических строк По иерархии
//		1 - режим динамических строк По строке
//		-1 - нет режима динамических строк
Процедура ЗаполнитьСписокТиповСтроки(Список, РежимДинамическихСтрок = -1) Экспорт
	Список.Очистить();
	Список.Добавить(0, "Источник");
	Если РежимДинамическихСтрок <> 1 Тогда
		Список.Добавить(1, "Строка");
		Список.Добавить(2, "Выражение");
	КонецЕсли;
	Если РежимДинамическихСтрок = -1 Тогда
		Список.Добавить(3, "Параметр настройки");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСписокЕдиницИзмеренийВОтчетах(Список) Экспорт
	Список.Очистить();
	Список.Добавить(Перечисления.isПорядкиОкругленияОтчетности.Окр1,       "в рублях");
	Список.Добавить(Перечисления.isПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
	Список.Добавить(Перечисления.isПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");
КонецПроцедуры

Функция ПолучитьИмяФункцииИсточника(КодФункции, ВидИсточников) Экспорт
	Список = Новый СписокЗначений;
	ЗаполнитьСписокТиповИсточников(Список, ВидИсточников);
	СтрокаФункции = СПисок.НайтиПоЗначению(КодФункции);
	Возврат ?(СтрокаФункции = Неопределено, "", СтрокаФункции.Представление);
КонецФункции // ()

Функция ЭтоФункцияОстатка(КодФункции) Экспорт
	Возврат ЭтоОстаток(КодФункции);
КонецФункции // ()

Функция ПолучитьТаблицуСредневзвешенныхКурсов(Валюта, ДатаНачала, ДатаКонца, Периодичность ) Экспорт
	Запрос = Новый Запрос;
	СтрокаПериодичности = ПериодичностьДляЗапроса(Периодичность);
	ДатаНач = ПолучитьНачалоПериода(ДатаНачала,Периодичность);
	ДатаКон = ПолучитьКонецПериода(ДатаКонца,Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКонца", 	ДатаКон);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ПолучитьТаблицуПериодов(ДатаНачала,ДатаКонца,Периодичность));
	Запрос.УстановитьПараметр("Валюта", 	Валюта);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПериодов.Период,
	|	КОНЕЦПЕРИОДА(ТаблицаПериодов.Период, "+СтрокаПериодичности+") КАК КонецПериода
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Период1 КАК ПериодНач,
	|	ВложенныйЗапрос.Период2 КАК ПериодКон,
	|	ВложенныйЗапрос.Курс КАК Курс
	|ПОМЕСТИТЬ ТаблицаКурсов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КурсыВалют1.Период КАК Период1,
	|		МИНИМУМ(ДОБАВИТЬКДАТЕ(КурсыВалют2.Период, СЕКУНДА, -1)) КАК Период2,
	|		КурсыВалют1.Курс * КурсыВалют1.Кратность КАК Курс
	|	ИЗ
	|		РегистрСведений.КурсыВалют КАК КурсыВалют2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют1
	|			ПО КурсыВалют2.Период > КурсыВалют1.Период,
	|		РегистрСведений.КурсыВалют.СрезПоследних(ДОБАВИТЬКДАТЕ(&Датаначала, СЕКУНДА, -1), валюта = &валюта) КАК ПоследняяЗаписьПередДатойНачала
	|	ГДЕ
	|		КурсыВалют1.Валюта = &Валюта
	|		И КурсыВалют2.Валюта = &Валюта
	|		И (КурсыВалют1.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|				ИЛИ КурсыВалют1.Период = ПоследняяЗаписьПередДатойНачала.Период)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КурсыВалют1.Курс * КурсыВалют1.Кратность,
	|		КурсыВалют1.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КонецПериодаБольшеПоследнейЗаписи.Период,
	|		&ДатаКонца,
	|		КонецПериодаБольшеПоследнейЗаписи.Курс * КонецПериодаБольшеПоследнейЗаписи.Кратность
	|	ИЗ
	|		РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КонецПериодаБольшеПоследнейЗаписи
	|	ГДЕ
	|		КонецПериодаБольшеПоследнейЗаписи.Период < &ДатаКонца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДатаНачала,
	|		ДОБАВИТЬКДАТЕ(НачалоПериодаМеньшаяПервойЗаписи.Период, СЕКУНДА, -1),
	|		НачалоПериодаМеньшаяПервойЗаписи.Курс * НачалоПериодаМеньшаяПервойЗаписи.Кратность
	|	ИЗ
	|		РегистрСведений.КурсыВалют.СрезПервых(, Валюта = &Валюта) КАК НачалоПериодаМеньшаяПервойЗаписи
	|	ГДЕ
	|		НачалоПериодаМеньшаяПервойЗаписи.Период > &ДатаНачала) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Курс / ВложенныйЗапрос.Дней КАК ЧИСЛО(10, 4)) КАК Курс
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Период КАК Период,
	|		СУММА(ВложенныйЗапрос.Дней) КАК Дней,
	|		СУММА(ВложенныйЗапрос.Курс) КАК Курс
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаПериодов.Период КАК Период,
	|			РАЗНОСТЬДАТ(ТаблицаКурсов.ПериодНач, ДОБАВИТЬКДАТЕ(ТаблицаКурсов.ПериодКон, СЕКУНДА, 1), ДЕНЬ) КАК Дней,
	|			ТаблицаКурсов.Курс * РАЗНОСТЬДАТ(ТаблицаКурсов.ПериодНач, ДОБАВИТЬКДАТЕ(ТаблицаКурсов.ПериодКон, СЕКУНДА, 1), ДЕНЬ) КАК Курс
	|		ИЗ
	|			ТаблицаКурсов КАК ТаблицаКурсов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|				ПО (ТаблицаКурсов.ПериодНач МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)
	|					И (ТаблицаКурсов.ПериодКон МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаПериодов.Период,
	|			РАЗНОСТЬДАТ(ТаблицаКурсов.ПериодНач, ДОБАВИТЬКДАТЕ(ТаблицаПериодов.КонецПериода, СЕКУНДА, 1), ДЕНЬ),
	|			ТаблицаКурсов.Курс * РАЗНОСТЬДАТ(ТаблицаКурсов.ПериодНач, ДОБАВИТЬКДАТЕ(ТаблицаПериодов.КонецПериода, СЕКУНДА, 1), ДЕНЬ)
	|		ИЗ
	|			ТаблицаКурсов КАК ТаблицаКурсов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|				ПО (ТаблицаКурсов.ПериодНач МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)
	|					И ((НЕ(ТаблицаКурсов.ПериодКон МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаПериодов.Период,
	|			РАЗНОСТЬДАТ(ТаблицаПериодов.Период, ДОБАВИТЬКДАТЕ(ТаблицаКурсов.ПериодКон, СЕКУНДА, 1), ДЕНЬ),
	|			ТаблицаКурсов.Курс * РАЗНОСТЬДАТ(ТаблицаПериодов.Период, ДОБАВИТЬКДАТЕ(ТаблицаКурсов.ПериодКон, СЕКУНДА, 1), ДЕНЬ)
	|		ИЗ
	|			ТаблицаКурсов КАК ТаблицаКурсов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|				ПО (ТаблицаКурсов.ПериодКон МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)
	|					И ((НЕ(ТаблицаКурсов.ПериодНач МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаПериодов.Период,
	|			РАЗНОСТЬДАТ(ТаблицаПериодов.Период, ДОБАВИТЬКДАТЕ(ТаблицаПериодов.КонецПериода, СЕКУНДА, 1), ДЕНЬ),
	|			ТаблицаКурсов.Курс * РАЗНОСТЬДАТ(ТаблицаПериодов.Период, ДОБАВИТЬКДАТЕ(ТаблицаПериодов.КонецПериода, СЕКУНДА, 1), ДЕНЬ)
	|		ИЗ
	|			ТаблицаКурсов КАК ТаблицаКурсов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|				ПО (ТаблицаПериодов.КонецПериода < ТаблицаКурсов.ПериодКон
	|						И ТаблицаПериодов.Период > ТаблицаКурсов.ПериодНач
	|						И ТаблицаПериодов.КонецПериода > ТаблицаКурсов.ПериодНач
	|						И ТаблицаПериодов.Период < ТаблицаКурсов.ПериодКон)) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Возврат Запрос.Выполнить().Выгрузить();	
	

КонецФункции // ()

Функция ПолучитьСредневзвешенныйКурсВалюты(Валюта, ДатаНачала, ДатаКонца) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюта", 	Валюта);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", 	ДатаКонца);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Дней * ВложенныйЗапрос.Курс КАК Курс,
	|	ВложенныйЗапрос.Дней КАК Дней
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РАЗНОСТЬДАТ(ВложенныйЗапрос.Период1, ВложенныйЗапрос.Период2, ДЕНЬ)) КАК Дней,
	|		ВложенныйЗапрос.Курс КАК Курс
	|	ИЗ
	|		(ВЫБРАТЬ
	|			КурсыВалют1.Период КАК Период1,
	|			МИНИМУМ(КурсыВалют2.Период) КАК Период2,
	|			КурсыВалют1.Курс КАК Курс
	|		ИЗ
	|			РегистрСведений.КурсыВалют КАК КурсыВалют2
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют1
	|				ПО КурсыВалют2.Период > КурсыВалют1.Период
	|		ГДЕ
	|			КурсыВалют1.Валюта = &Валюта
	|			И КурсыВалют2.Валюта = &Валюта
	|			И КурсыВалют1.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КурсыВалют1.Период,
	|			КурсыВалют1.Курс) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Курс) КАК ВложенныйЗапрос
	|ИТОГИ
	|	СУММА(Курс),
	|	СУММА(Дней)
	|ПО
	|	ОБЩИЕ";
	ВыборкаО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Общие");
	Если ВыборкаО.Следующий() Тогда
		Возврат ОКР(ВыборкаО.Курс/ВыборкаО.Дней,4);	
	Иначе
		ВОзврат 1;
	КонецЕсли;
	

КонецФункции // ()

// заполняет список поля списка именами регистров бухгалтерии
Процедура ЗаполнитьСписокРегистрамиБухгалтерии(Список)  Экспорт
	Для каждого ТекРегистр Из Метаданные.РегистрыБухгалтерии Цикл
		Список.Добавить(ТекРегистр.Имя);
	КонецЦикла;
КонецПроцедуры

// заполняет список поля списка именами регистров бухгалтерии
Процедура ЗаполнитьСписокРесурсамиРегистраБухгалтерии(ИмяРегистра, Список)  Экспорт
	Для каждого ТекРесурс Из Метаданные.РегистрыБухгалтерии[ИмяРегистра].Ресурсы Цикл
		Список.Добавить(ТекРесурс.Имя,ТекРесурс.Синоним);
	КонецЦикла;
КонецПроцедуры

// заполняет список поля списка именами регистров бухгалтерии
Процедура ЗаполнитьСписокРесурсамиРегистраНакопления(ИмяРегистра, Список)  Экспорт
	Для каждого ТекРесурс Из Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы Цикл
		Список.Добавить(ТекРесурс.Имя,ТекРесурс.Синоним);
	КонецЦикла;
КонецПроцедуры

// заполняет список поля списка именами регистров накопления
Процедура ЗаполнитьСписокРегистрамиНакопления(Список)  Экспорт
	Для каждого ТекРегистр Из Метаданные.РегистрыНакопления Цикл
		Список.Добавить(ТекРегистр.Имя);
	КонецЦикла;
КонецПроцедуры

Функция СоздатьПостроительОтчета(РегистрБухгалтерии,Счет,Ресурс,Настройки,ОтборПоКор) Экспорт
	Результат=Новый ПостроительОтчета;
	ЗаполнитьНастройкиПостроителя(РегистрБухгалтерии,Счет,Ресурс,Результат,ОтборПоКор);
	Результат.ЗаполнитьНастройки();
	Сч=0;
	Пока Сч<Результат.ДоступныеПоля.Количество() Цикл
		ТекПоле=Результат.ДоступныеПоля[Сч];
		Если ((Найти(ТекПоле.Имя,"Субконто")=1 И НЕ ОтборПоКор) ИЛИ
				(Найти(ТекПоле.Имя,"КорСубконто")=1 И ОтборПоКор)) И 
				ТекПоле.Имя<>"Субконто" И ТекПоле.Имя<>"КорСубконто" Тогда
			НомерСубконто=Число(Прав(ТекПоле.Имя,1));
			Если НомерСубконто>Счет.ВидыСубконто.Количество() Тогда
				Результат.ДоступныеПоля.Удалить(ТекПоле);
			Иначе
				Элемент=Счет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				ТекПоле.Представление=Элемент.Наименование;
				ТекПоле.ТипЗначения=Элемент.ТипЗначения;
				Инк(Сч);
			КонецЕсли;
		Иначе
			Результат.ДоступныеПоля.Удалить(ТекПоле);
		КонецЕсли;
	КонецЦикла;
	НастройкиПостроителя = Настройки.Получить();
	Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
		Результат.УстановитьНастройки(НастройкиПостроителя);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СоздатьПостроительОтчетаДляИзмерений(РегистрБухгалтерии,Настройки) Экспорт
	Результат=Новый ПостроительОтчета;
	Результат.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
	|ИЗ
	|	РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(, , ,, , , , ) КАК Регистр";

	Результат.ЗаполнитьНастройки();
	Сч=0;
	
	Пока Сч<Результат.ДоступныеПоля.Количество() Цикл
		ТекПоле=Результат.ДоступныеПоля[Сч];
		ТекИзмерение = Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии].Измерения.Найти(ТекПоле.Имя);
		Если ТекИзмерение=Неопределено 
			ИЛИ НЕ ТекИзмерение.Балансовый Тогда
			Результат.ДоступныеПоля.Удалить(ТекПоле);
		Иначе
			Инк(Сч);
		КонецЕсли;
	КонецЦикла;
	НастройкиПостроителя = Настройки.Получить();
	Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
		Результат.УстановитьНастройки(НастройкиПостроителя);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция СоздатьПостроительОтчетаДляРегистраНакопления(РегистрНакопления,Настройки) Экспорт
	Результат=Новый ПостроительОтчета;
	ЗаполнитьНастройкиПостроителяДляРегистраНакопления(РегистрНакопления,Результат,ЭтоРегистрНакопленияОборотный(РегистрНакопления));
	ПолеОтбораПоРесурсу=Результат.Отбор;
	ДоступныеПоля = ПолеОтбораПоРесурсу.ПолучитьДоступныеПоля();
	Сч = 0;
	Пока Сч < ДоступныеПоля.Количество() Цикл
		ТекПоле=ДоступныеПоля[Сч];
		ТекИзмерение = Метаданные.РегистрыНакопления[РегистрНакопления].Измерения.Найти(ТекПоле.Имя);
		
		Если ТекИзмерение = Неопределено Тогда
			ДоступныеПоля.Удалить(ТекПоле);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	ПолеОтбораПоРесурсу.УстановитьДоступныеПоля(ДоступныеПоля);
	НастройкиПостроителя = Настройки.Получить();
	Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
		Результат.УстановитьНастройки(НастройкиПостроителя);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ЭтоРегистрНакопленияОборотный(ИмяРегистра) Экспорт
	Возврат Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
КонецФункции // ()

Процедура ЗаполнитьНастройкиПостроителяДляРегистраНакопления(ИмяРегистра,Построитель,ЭтоРегистрОборотов) Экспорт
		Если ЭтоРегистрОборотов Тогда
			Построитель.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+".Обороты КАК Регистр";
		Иначе
			Построитель.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+".ОстаткиИОбороты КАК Регистр";
		КонецЕсли;	
		Построитель.ЗаполнитьНастройки();
КонецПроцедуры // ()

// Заполняет настройки построителя отчета для загрузки настроек отбора по счету или корсчету 
//
// Параметры
//  <Построитель>  - <ПостроительОтчета> - настраиваемый построитель отчета
//  <ЭтоКорСчет>  - <Булево> - если флаг установлен, то оьбор производится по корсчету
//                 <продолжение описания параметра>
//
Процедура ЗаполнитьНастройкиПостроителя(РегистрБухгалтерии,Счет,Ресурс,Построитель,ЭтоКорСчет) Экспорт
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			Возврат;
		КонецЕсли;
		Построитель.Параметры.Вставить("Счет",Счет);
		Если ЭтоКорСчет Тогда
			Построитель.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Регистр.КорСчет,
			|	Регистр.КорСубконто1,
			|	Регистр.КорСубконто2,
			|	Регистр.КорСубконто3,
			|	Регистр."+Ресурс+"ОборотДт
			|ИЗ
			|	РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(, , , , , , КорСчет = &Счет, ) КАК Регистр";
		Иначе
			Построитель.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Регистр.Счет,
			|	Регистр.Субконто1,
			|	Регистр.Субконто2,
			|	Регистр.Субконто3,
			|	Регистр."+Ресурс+"ОборотДт
			|ИЗ
			|	РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(, , ,&Счет = &Счет , , , , ) КАК Регистр";
		КонецЕсли;	
		Построитель.ЗаполнитьНастройки();
КонецПроцедуры // ()
	
Функция ПериодичностьДляЗапроса(Периодичность) Экспорт
	Если Периодичность=1 Тогда
		ПериодичностьСтр="Месяц";
	ИначеЕсли Периодичность=2 Тогда
		ПериодичностьСтр="Квартал";
	ИначеЕсли Периодичность=3 Тогда
		ПериодичностьСтр="Полугодие";
	ИначеЕсли Периодичность=4 Тогда
		ПериодичностьСтр="Год";
	ИначеЕсли Периодичность=5 Тогда
		ПериодичностьСтр="Неделя";
	ИначеЕсли Периодичность=6 Тогда
		ПериодичностьСтр="День";
	Иначе
		ПериодичностьСтр="Период";
	КонецЕсли;
	Возврат ПериодичностьСтр;
КонецФункции // 
//
Функция ЭтоОстаток(ТипИсточника)
	Возврат ТипИсточника<>1 И ТипИсточника<>2;
КонецФункции // ЭтоОстаток()

//"ВЫБРАТЬ
//|	НалоговыйОстаткиИОбороты.Счет,
//|	НалоговыйОстаткиИОбороты.Субконто1,
//|	НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
//|	НалоговыйОстаткиИОбороты.Период КАК Период
//|ИЗ
//|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(, , Месяц, , , , ) КАК НалоговыйОстаткиИОбороты
//|ИТОГИ
//|	СУММА(СуммаНачальныйОстатокДт)
//|ПО
//|	Период ПЕРИОДАМИ(МЕСЯЦ, , )"
// обеспечивает создание поля списка отбора настройки или отчета по разделителям учета
// Параметры:
// ТипРегистра - Число - 0 - регистр бухгалтерии, 1 - регистр накопления
// Регистр - строка - имя регистра бухгалтерии
// ПостроительОтчета - построитель отчета, который используется для поля списка отбора
// Настройки - Настройки построителя отчета, которые выбираются из хранилища
// 
Процедура ОбновитьНастройкиПостроителяОтчета(ТипРегистра, Регистр,ПостроительОтчета,Настройки) Экспорт
//	Ресурс=?(РегистрБухгалтерии="Бюджетирование","СуммаУпрОстаток","СуммаОстаток");

  Если ТипРегистра = 0 Тогда
		ПостроительОтчета.Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
		|ИЗ
		|	РегистрБухгалтерии."+Регистр+".Остатки(, , , ) КАК Регистр";
	Иначе
		ПостроительОтчета.Текст=
	  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
	 |ИЗ
	 |	РегистрНакопления."+Регистр+".Остатки КАК Регистр"
	КонецЕсли;
	ПостроительОтчета.ЗаполнитьНастройки();
	Сч=0;
	Пока Сч<ПостроительОтчета.ДоступныеПоля.Количество() Цикл
		ТекПоле=ПостроительОтчета.ДоступныеПоля[Сч];
		Если ТипРегистра=0 Тогда
			Измерения=Метаданные.РегистрыБухгалтерии[Регистр].Измерения;
		Иначе
			Измерения=Метаданные.РегистрыНакопления[Регистр].Измерения;
		КонецЕсли;
		ТекИзмерение=Измерения.Найти(ТекПоле.Имя);
		Если ТекИзмерение=Неопределено Тогда
			ПостроительОтчета.ДоступныеПоля.Удалить(ТекПоле);
		Иначе
			Инк(Сч);
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(Настройки) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаголовокПериодами(ТаблДок,Вывод,НачПериода,КонПериода,Периодичность) Экспорт
	Если Периодичность=1 Тогда
		СтрокаФормата="ДФ='MMMM yyyy'";
	ИначеЕсли Периодичность=2 Тогда
		СтрокаФормата="ДФ='q ""квартал"" yyyy'";
	ИначеЕсли Периодичность=3 Тогда
		СтрокаФормата="ДФ=MM.yyyy";
	ИначеЕсли Периодичность=4 Тогда
		СтрокаФормата="ДФ='yyyy'";
	ИначеЕсли Периодичность=5 Тогда
		СтрокаФормата="ДФ=dd.MM";
	ИначеЕсли Периодичность=6 Тогда
		СтрокаФормата="ДФ=dd.MM.yyyy";
	ИначеЕсли Периодичность=7 Тогда
		СтрокаФормата="";
	КонецЕсли;
	Мас=ПолучитьМассивПериодов(НачПериода,КонПериода,Периодичность);
	Для Сч=0 По Мас.Количество()-1 Цикл
		Если Периодичность = 7 Тогда
			Вывод.Параметры.Период=ПредставлениеПериода(НачПериода,КонПериода);
		Иначе	
			Вывод.Параметры.Период=Формат(Мас[Сч],СтрокаФормата);
		КонецЕсли;
		ТаблДок.Присоединить(Вывод);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьМассивПериодов(НачПериода,КонПериода,Периодичность) Экспорт
	Результат=Новый Массив;
	Если Периодичность = 7 Тогда
		Результат.Добавить(НачалоДня(НачПериода));
		Возврат Результат;
	Иначе
		ТекДата=НачПериода;
		Пока Истина Цикл
			ТекДата=ПолучитьКонецПериода(ТекДата,Периодичность);
			Результат.Добавить(ПолучитьНачалоПериода(ТекДата,Периодичность));
			Если ТекДата>=КонПериода Тогда
				Возврат Результат;
			КонецЕсли;
			ТекДата=ТекДата+1;
		КонецЦикла;
	КонецЕсли;
КонецФункции // 

Функция ПолучитьТаблицуПериодов(НачПериода,КонПериода,Периодичность) Экспорт
	Результат=Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Период",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	Если Периодичность = 7 Тогда
		Результат.Добавить().Период = НачалоДня(НачПериода);
		Возврат Результат;
	Иначе
		ТекДата=НачПериода;
		Пока Истина Цикл
			ТекДата=ПолучитьКонецПериода(ТекДата,Периодичность);
			Результат.Добавить().Период = ПолучитьНачалоПериода(ТекДата,Периодичность);
			Если ТекДата>=КонПериода Тогда
				Возврат Результат;
			КонецЕсли;
			ТекДата=ТекДата+1;
		КонецЦикла;
	КонецЕсли;

	

КонецФункции // ()

Функция ПолучитьКонецПериода(Дата,Периодичность) Экспорт
	Если Периодичность=1 Тогда
		Возврат КонецМесяца(Дата);
	ИначеЕсли Периодичность=2 Тогда
		Возврат КонецКвартала(Дата);
	ИначеЕсли Периодичность=3 Тогда
		Конец1=КонецДня(Дата(Год(Дата),6,30));
		Если Дата>Конец1 Тогда
		  Возврат КонецДня(Дата(Год(Дата),12,31))
		Иначе
			Возврат Конец1;
		КонецЕсли;
	ИначеЕсли Периодичность=4 Тогда
		Возврат КонецГода(Дата);
	ИначеЕсли Периодичность=5 Тогда
		Возврат КонецНедели(Дата);
	ИначеЕсли Периодичность=6 Тогда
		Возврат КонецДня(Дата);
	Иначе
		Возврат Дата;
	КонецЕсли;
КонецФункции // 

Функция ПолучитьНачалоПериода(Дата,Периодичность) Экспорт
	Если Периодичность=1 Тогда
		Возврат НачалоМесяца(Дата);
	ИначеЕсли Периодичность=2 Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли Периодичность=3 Тогда
		Конец1=КонецДня(Дата(Год(Дата),6,30));
		Если Дата>Конец1 Тогда
		  Возврат Дата(Год(Дата),7,1);
		Иначе
			Возврат Дата(Год(Дата),1,1);
		КонецЕсли;
	ИначеЕсли Периодичность=4 Тогда
		Возврат НачалоГода(Дата);
	ИначеЕсли Периодичность=5 Тогда
		Возврат НачалоНедели(Дата);
	ИначеЕсли Периодичность=6 Тогда
		Возврат НачалоДня(Дата);
	Иначе
		Возврат Дата;
	КонецЕсли;
КонецФункции // 
 
Функция ВидимостьОтбораПоИзмерениям(Форма) Экспорт
#Если Клиент Тогда
	ТекСтр = Форма.ЭлементыФормы.Источники.ТекущаяСтрока;
	Если ТекСтр = Неопределено Тогда
		РежимСвертки = РежимСверткиЭлементаУправления.Право;	
	Иначе
		РежимСвертки = ?(Форма.СправочникОбъект.Владелец.ДополнительныйОтборПоИзмерениям И ТекСтр.ТипСтроки = 0,
							РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Право)
	КонецЕсли;
	Форма.ЭлементыФормы.ПанельОтбораПоИзмерениям.Свертка = РежимСвертки;
	Возврат РежимСвертки = РежимСверткиЭлементаУправления.Нет;
#КонецЕсли
КонецФункции

Процедура ПриАктивизацииСтрокиИсточникаСтроки(Форма, ПостроительОтчета) Экспорт
	Если ВидимостьОтбораПоИзмерениям(Форма) Тогда
		ТекСтр = Форма.ЭлементыФормы.Источники.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекСтр.Источник) Тогда
			Если ТекСтр.Источник.Владелец.ТипРегистра = 0 Тогда
				ПостроительОтчета=СоздатьПостроительОтчетаДляИзмерений(ТекСтр.ВидИсточника.РегистрБухгалтерии,ТекСтр.ОтборПоИзмерениям);
			Иначе
				ПостроительОтчета=СоздатьПостроительОтчетаДляРегистраНакопления(ТекСтр.ВидИсточника.РегистрБухгалтерии,ТекСтр.ОтборПоИзмерениям);
			КонецЕсли;
			Форма.ОтборПоИзмерениям=ПостроительОтчета.Отбор;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьНастройкиПостроителяОтбораПоИзмерениям(Форма, ПостроительОтчета) Экспорт
	ТекСтр=Форма.ЭлементыФормы.Источники.ТекущаяСтрока ;
	ТекСтр.ОтборПоИзмерениям = Новый ХранилищеЗначения(ПостроительОтчета.ПолучитьНастройки());
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
Процедура ВыбратьЭлементСправочника(Элемент,СтруктураОтбора, СтандартнаяОбработка, ФормаВыбора = Неопределено, Заголовок="") Экспорт
	СтандартнаяОбработка = Ложь;
	Фрм=Справочники[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(ФормаВыбора,Элемент);	
	Для каждого ТекОтбор Из СтруктураОтбора Цикл
		Если ТипЗнч(ТекОтбор.Значение)=Тип("СписокЗначений") Тогда
			Фрм.Отбор[ТекОтбор.Ключ].Использование=Истина;
			Фрм.Отбор[ТекОтбор.Ключ].ВидСравнения=ВидСравнения.ВСписке;
			Фрм.Отбор[ТекОтбор.Ключ].Значение=ТекОтбор.Значение;
		Иначе
			Фрм.Отбор[ТекОтбор.Ключ].Установить(ТекОтбор.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Фрм.Заголовок=Заголовок;
	КонецЕсли;
	//Фрм.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	// is ЯннуровВФ нач 20140529
	//Фрм.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	// is ЯннуровВФ кон 20140529
	Фрм.НачальноеЗначениеВыбора=Элемент.Значение;
	Фрм.Открыть();
КонецПроцедуры

Процедура УстановитьТекстИзСпискаВыбора(Ячейка,ТабличноеПоле,ДанныеСтроки) Экспорт
	Значение = ДанныеСтроки[Ячейка.Имя];
	СписокВыбора = ТабличноеПоле.Колонки[Ячейка.Имя].ЭлементУправления.СписокВыбора;
	СтрокаСписка = СписокВыбора.НайтиПоЗначению(Значение);
	Ячейка.УстановитьТекст(?(СтрокаСписка<>Неопределено,СтрокаСписка.Представление,"..."));	
КонецПроцедуры

Процедура ДобавитьТаблицуКТаблице(ТаблицаПриемник, ТаблицаИсточник) Экспорт
	Для каждого ТекСтр Из ТаблицаИсточник Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), ТекСтр);	
	КонецЦикла;
КонецПроцедуры
