////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки электронных документов.
// 
/////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает номер версии библиотеки ЭлектронныеДокументы.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.1.9.4";
	
КонецФункции

// Неинтерактивное обновление данных ИБ при смене версии библиотеки.
// Обязательная "точка входа" обновления ИБ в библиотеке.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления(
		"БиблиотекаЭлектронныхДокументов", ВерсияБиблиотеки(), ОбработчикиОбновления());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает список процедур-обработчиков обновления библиотеки для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//    Обработчик.Опциональный = Истина;
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ОбработчикиОбновления()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Возврат Обработчики;
	
КонецФункции

Процедура ПриДобавленииОбработчиковОбновления(Обработчики)
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ПервыйЗапуск";
	Обработчик.Опциональный = Ложь;
	
	// Обработчики обновления новых версий
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.0";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ОбновитьВидыДокументов";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.0";
	Обработчик.Процедура = "РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.ОбновитьВерсиюРегламентаЭДО";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ЗаполнитьКонтекстРаботыСКриптографией";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.7";
	Обработчик.Процедура = "РегистрыСведений.ЖурналСобытийЭД.ОбновитьСтатусыЭД";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ОбработатьКорректировочныеСчетаФактуры";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.6.3";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ЗаполнитьВерсииФорматов";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.7.1";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ПеренестиСертификатАвторизацииВТЧ";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.7.4";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ЗаполнитьВерсииФорматовИсходящихЭДИПакета";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.9.1";
	Обработчик.Процедура = "Справочники.СертификатыЭЦП.ЗаполнитьСрокДействия";
	Обработчик.Опциональный = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнения пустой ИБ

// Обработчик заполнения пустой ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	Константы.КонтекстАвторизации.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	Константы.КонтекстКриптографии.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление новых версий ИБ

// Обработчик заполнения контекста работы с криптографией.
//
Процедура ЗаполнитьКонтекстРаботыСКриптографией() Экспорт
	
	Константы.КонтекстАвторизации.Установить(Перечисления.КонтекстыРаботыСЭД.НаСервере);
	Константы.КонтекстКриптографии.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	
КонецПроцедуры

// Добавился новый вид ЭД - корректировочный счет фактура
Процедура ОбработатьКорректировочныеСчетаФактуры() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.Наименование ПОДОБНО ""ON_KORSFAKT%""
	               |	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Объект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СертификатыЭЦПВидыДокументов.Ссылка
	               |ПОМЕСТИТЬ СертификатыИсключения
	               |ИЗ
	               |	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	               |ГДЕ
	               |	СертификатыЭЦПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	               |	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СертификатыЭЦПВидыДокументов.Ссылка
	               |ИЗ
	               |	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	               |ГДЕ
	               |	СертификатыЭЦПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	               |	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					СертификатыИсключения.Ссылка
	               |				ИЗ
	               |					СертификатыИсключения)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сертификат = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаКорСчФ = Сертификат.ВидыДокументов.Найти(Перечисления.ВидыЭД.КорректировочныйСчетФактура, "ВидДокумента");
		Если СтрокаКорСчФ = Неопределено Тогда
			СтрокаКорСчФ = Сертификат.ВидыДокументов.Добавить();
			СтрокаКорСчФ.ВидДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
		СтрокаКорСчФ.ИспользоватьДляПодписи = Истина;
		Сертификат.Записать();
	КонецЦикла;
	
КонецПроцедуры
