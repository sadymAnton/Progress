
Процедура ВыполнитьПереносПроводокВЦикле(ПериодНачало,
										 ПериодКонец,
										 Организация,
										 ДокументСсылка,
										 ПоказатьПротоколПереноса) Экспорт

	Итерация = 1;
	ДокументСформирован = Ложь;									 
	Пока ДокументСформирован = Ложь Цикл
		Попытка
			Н = ТекущаяДата();
			
			ВыполнитьПереносПроводок(ПериодНачало,
								     ПериодКонец,
								     Организация,
								     ДокументСсылка,
								     ПоказатьПротоколПереноса,
									 Ложь);
									
			ВремяФормирования = ТекущаяДата() - Н;
			
			О = ДокументСсылка.ПолучитьОбъект();
			О.Комментарий = "Время формирования: "+ВремяФормирования+" сек. Итерация "+Итерация;
			О.Записать();
			
			ДокументСформирован = Истина;
		Исключение
			Итерация = Итерация + 1;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры
										 
Функция   ВыполнитьПереносПроводок(ПериодНачало,
								   ПериодКонец,
								   Организация,
								   ДокументСсылка,
								   ПоказатьПротоколПереноса,
								   ВыполнятьПроверку=Истина) Экспорт
								   
	// Хранит значения курсов.
	Перем мКэшКурсов;
	
	НЗ = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(ДокументСсылка);
	
	Если ВыполнятьПроверку Тогда
		//Проверка операция переноса за выбранный период
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПереносПроводок.Ссылка
		               |ИЗ
		               |	Документ.ПереносПроводокМеждународный КАК ПереносПроводок
		               |
		               |ГДЕ
		               |	(ПереносПроводок.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ ПереносПроводок.ПериодКонец МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ ПереносПроводок.ПериодНачало < &ДатаНачала И ПереносПроводок.ПериодКонец > &ДатаНачала ИЛИ ПереносПроводок.ПериодНачало < &ДатаОкончания И ПереносПроводок.ПериодКонец > &ДатаОкончания) И
		               |	ПереносПроводок.Организация = &Организация И
		               |	ПереносПроводок.ПометкаУдаления = ЛОЖЬ И
		               |	ПереносПроводок.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("ДатаНачала", ПериодНачало);
		Запрос.УстановитьПараметр("ДатаОкончания", ПериодКонец);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Сообщить(Выборка.Ссылка);
		КонецЦикла;
		
		Если Выборка.Количество() > 0 Тогда
			Возврат "По выбранной организации и периоду уже имеются перенесенные проводки. Перенос не выполнен.";
		КонецЕсли;
	КонецЕсли;
	
	// Начало переноса
	
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	ИсключениеПроводок.Период,
	        |	ИсключениеПроводок.СчетДт КАК СчетДт,
	        |	ИсключениеПроводок.СубконтоДт1,
	        |	ИсключениеПроводок.СубконтоДт2,
	        |	ИсключениеПроводок.СубконтоДт3,
	        |	ИсключениеПроводок.СчетКт КАК СчетКт,
	        |	ИсключениеПроводок.СубконтоКт1,
	        |	ИсключениеПроводок.СубконтоКт2,
	        |	ИсключениеПроводок.СубконтоКт3
	        |ПОМЕСТИТЬ ИсключениеПроводокСрезПоследних
	        |ИЗ
	        |	РегистрСведений.ИсключениеПроводок.СрезПоследних(&ПериодНач, Учитывается = ИСТИНА) КАК ИсключениеПроводок
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	СчетДт,
	        |	СчетКт
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СоответствиеСчетовСрезПоследних.Регистратор,
	        |	СоответствиеСчетовСрезПоследних.НомерСтроки,
	        |	СоответствиеСчетовСрезПоследних.СчетХозрасчетный КАК СчетХозрасчетный,
	        |	СоответствиеСчетовСрезПоследних.ВидДвижения КАК ВидДвижения,
	        |	СоответствиеСчетовСрезПоследних.СубконтоХозр1 КАК СубконтоХозр1,
	        |	СоответствиеСчетовСрезПоследних.СубконтоХозр2 КАК СубконтоХозр2,
	        |	СоответствиеСчетовСрезПоследних.СубконтоХозр3 КАК СубконтоХозр3,
	        |	СоответствиеСчетовСрезПоследних.Реквизит,
	        |	СоответствиеСчетовСрезПоследних.Значение,
	        |	СоответствиеСчетовСрезПоследних.ТипРегистратора,
	        |	СоответствиеСчетовСрезПоследних.СчетМеждународный,
	        |	СоответствиеСчетовСрезПоследних.СубконтоМежд1,
	        |	СоответствиеСчетовСрезПоследних.СубконтоМежд2,
	        |	СоответствиеСчетовСрезПоследних.СубконтоМежд3,
	        |	СоответствиеСчетовСрезПоследних.ис_БезСуммы,
	        |	СоответствиеСчетовСрезПоследних.ис_БезВалютнойСуммы,
	        |	СоответствиеСчетовСрезПоследних.ис_БезКоличества,
	        |	СоответствиеСчетовСрезПоследних.Приоритет
	        |ПОМЕСТИТЬ СоответствиеСчетовСрезПоследних
	        |ИЗ
	        |	РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&ПериодНач, Учитывается = ИСТИНА) КАК СоответствиеСчетовСрезПоследних
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	СчетХозрасчетный,
	        |	ВидДвижения,
	        |	СубконтоХозр1,
	        |	СубконтоХозр2,
	        |	СубконтоХозр3
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ИсключениеСчетовСрезПоследних.Счет КАК Счет,
	        |	ИсключениеСчетовСрезПоследних.ВидДвижения КАК ВидДвижения,
	        |	ИсключениеСчетовСрезПоследних.Субконто1 КАК Субконто1,
	        |	ИсключениеСчетовСрезПоследних.Субконто2 КАК Субконто2,
	        |	ИсключениеСчетовСрезПоследних.Субконто3 КАК Субконто3,
	        |	ИсключениеСчетовСрезПоследних.Реквизит,
	        |	ИсключениеСчетовСрезПоследних.Значение,
	        |	ИсключениеСчетовСрезПоследних.ТипРегистратора
	        |ПОМЕСТИТЬ ИсключениеСчетовСрезПоследних
	        |ИЗ
	        |	РегистрСведений.ДС_ИсключениеСчетов.СрезПоследних(&ПериодНач, Учитывается = ИСТИНА) КАК ИсключениеСчетовСрезПоследних
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Счет,
	        |	ВидДвижения,
	        |	Субконто1,
	        |	Субконто2,
	        |	Субконто3
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ХозрасчетныйДвиженияССубконто.Период,
	        |	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	        |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	        |	ХозрасчетныйДвиженияССубконто.СчетДт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	        |	ХозрасчетныйДвиженияССубконто.СчетКт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	        |	ХозрасчетныйДвиженияССубконто.Сумма,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	        |	ХозрасчетныйДвиженияССубконто.НомерЖурнала,
	        |	ХозрасчетныйДвиженияССубконто.Содержание,
	        |	СоответствиеСчетовСрезПоследнихДт.СчетМеждународный КАК СчетМеждународныйДт,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд1 КАК СубконтоМеждДт1,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд2 КАК СубконтоМеждДт2,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд3 КАК СубконтоМеждДт3,
	        |	СоответствиеСчетовСрезПоследнихДт.Реквизит КАК РеквизитДт,
	        |	СоответствиеСчетовСрезПоследнихДт.Значение КАК ЗначениеДт,
	        |	СоответствиеСчетовСрезПоследнихКт.СчетМеждународный КАК СчетМеждународныйКт,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд1 КАК СубконтоМеждКт1,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд2 КАК СубконтоМеждКт2,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд3 КАК СубконтоМеждКт3,
	        |	СоответствиеСчетовСрезПоследнихКт.Реквизит КАК РеквизитКт,
	        |	СоответствиеСчетовСрезПоследнихКт.Значение КАК ЗначениеКт,
	        |	ИсключениеСчетовСрезПоследнихДт.Реквизит КАК РеквизитИсклДТ,
	        |	ИсключениеСчетовСрезПоследнихДт.Значение КАК ЗначениеИсклДТ,
	        |	ИсключениеСчетовСрезПоследнихКт.Реквизит КАК РеквизитИсклКт,
	        |	ИсключениеСчетовСрезПоследнихКт.Значение КАК ЗначениеИсклКт,
	        |	ВЫБОР
	        |		КОГДА ИсключениеСчетовСрезПоследнихДт.Значение ЕСТЬ NULL 
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК ОтменитьИсключениеДт,
	        |	ВЫБОР
	        |		КОГДА ИсключениеСчетовСрезПоследнихКт.Значение ЕСТЬ NULL 
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК ОтменитьИсключениеКт,
	        |	ЕСТЬNULL(ИсключениеСчетовСрезПоследнихДт.ТипРегистратора, ИсключениеСчетовСрезПоследнихКт.ТипРегистратора) КАК ТипРегистратора,
	        |	ЕСТЬNULL(СоответствиеСчетовСрезПоследнихДт.ТипРегистратора, СоответствиеСчетовСрезПоследнихКт.ТипРегистратора) КАК ТипРегистратораСоответствия,
	        |	ВЫБОР
	        |		КОГДА СоответствиеСчетовСрезПоследнихДт.ис_БезСуммы
	        |				И СоответствиеСчетовСрезПоследнихКт.ис_БезСуммы
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК ис_БезСуммы,
	        |	ЕСТЬNULL(СоответствиеСчетовСрезПоследнихДт.ис_БезВалютнойСуммы, ЛОЖЬ) КАК ис_БезВалютнойСуммыДт,
	        |	ЕСТЬNULL(СоответствиеСчетовСрезПоследнихКт.ис_БезВалютнойСуммы, ЛОЖЬ) КАК ис_БезВалютнойСуммыКт,
	        |	ЕСТЬNULL(СоответствиеСчетовСрезПоследнихДт.ис_БезКоличества, ЛОЖЬ) КАК ис_БезКоличестваДт,
	        |	ЕСТЬNULL(СоответствиеСчетовСрезПоследнихКт.ис_БезКоличества, ЛОЖЬ) КАК ис_БезКоличестваКт,
	        |	СоответствиеСчетовСрезПоследнихДт.Регистратор КАК ПравилоПереносаДт,
	        |	СоответствиеСчетовСрезПоследнихДт.НомерСтроки КАК НомерСтрокиПравилаПереносаДт,
	        |	СоответствиеСчетовСрезПоследнихКт.Регистратор КАК ПравилоПереносаКт,
	        |	СоответствиеСчетовСрезПоследнихКт.НомерСтроки КАК НомерСтрокиПравилаПереносаКт,
	        |	СоответствиеСчетовСрезПоследнихДт.Приоритет КАК ПриоритетДт,
	        |	СоответствиеСчетовСрезПоследнихКт.Приоритет КАК ПриоритетКт
	        |ПОМЕСТИТЬ ВТДанныеДляТрансялции
	        |ИЗ
	        |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	        |			&ПериодНач,
	        |			&ПериодКон,
	        |			Активность = &Активность
	        |				И Организация = &Организация
	        |				И НЕ Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска,
	        |			,
	        |			) КАК ХозрасчетныйДвиженияССубконто
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ИсключениеПроводокСрезПоследних КАК ИсключениеПроводокСрезПоследних
	        |		ПО (ИсключениеПроводокСрезПоследних.СубконтоДт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ИсключениеПроводокСрезПоследних.СчетКт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт
	        |					И ИсключениеПроводокСрезПоследних.СчетДт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеСчетовСрезПоследних КАК СоответствиеСчетовСрезПоследнихДт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетДт = СоответствиеСчетовСрезПоследнихДт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихДт.ВидДвижения = &ВидДвиженияДебет)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеСчетовСрезПоследних КАК СоответствиеСчетовСрезПоследнихКт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетКт = СоответствиеСчетовСрезПоследнихКт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихКт.ВидДвижения = &ВидДвиженияКредит)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ИсключениеСчетовСрезПоследних КАК ИсключениеСчетовСрезПоследнихДт
	        |		ПО (ИсключениеСчетовСрезПоследнихДт.ВидДвижения = &ВидДвиженияДебет)
	        |			И (ИсключениеСчетовСрезПоследнихДт.Субконто1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеСчетовСрезПоследнихДт.Субконто2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеСчетовСрезПоследнихДт.Субконто3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеСчетовСрезПоследнихДт.Субконто3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеСчетовСрезПоследнихДт.Счет
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ИсключениеСчетовСрезПоследних КАК ИсключениеСчетовСрезПоследнихКт
	        |		ПО (ИсключениеСчетовСрезПоследнихКт.ВидДвижения = &ВидДвиженияКредит)
	        |			И (ИсключениеСчетовСрезПоследнихКт.Субконто1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеСчетовСрезПоследнихКт.Субконто2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеСчетовСрезПоследнихКт.Субконто3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеСчетовСрезПоследнихКт.Субконто3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеСчетовСрезПоследнихКт.Счет
	        |ГДЕ
	        |	ИсключениеПроводокСрезПоследних.Период ЕСТЬ NULL 
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТДанныеДляТрансялции.Период,
	        |	ВТДанныеДляТрансялции.НомерСтроки,
	        |	ВТДанныеДляТрансялции.Регистратор,
	        |	ВТДанныеДляТрансялции.СчетДт,
	        |	ВТДанныеДляТрансялции.СубконтоДт1,
	        |	ВТДанныеДляТрансялции.СубконтоДт2,
	        |	ВТДанныеДляТрансялции.СубконтоДт3,
	        |	ВТДанныеДляТрансялции.СчетКт,
	        |	ВТДанныеДляТрансялции.СубконтоКт1,
	        |	ВТДанныеДляТрансялции.СубконтоКт2,
	        |	ВТДанныеДляТрансялции.СубконтоКт3,
	        |	ВТДанныеДляТрансялции.ВалютаДт,
	        |	ВТДанныеДляТрансялции.ВалютаКт,
	        |	ВТДанныеДляТрансялции.Сумма,
	        |	ВТДанныеДляТрансялции.ВалютнаяСуммаДт,
	        |	ВТДанныеДляТрансялции.ВалютнаяСуммаКт,
	        |	ВТДанныеДляТрансялции.КоличествоДт,
	        |	ВТДанныеДляТрансялции.КоличествоКт,
	        |	ВТДанныеДляТрансялции.НомерЖурнала,
	        |	ВТДанныеДляТрансялции.Содержание,
	        |	ВТДанныеДляТрансялции.СчетМеждународныйДт,
	        |	ВТДанныеДляТрансялции.СубконтоМеждДт1,
	        |	ВТДанныеДляТрансялции.СубконтоМеждДт2,
	        |	ВТДанныеДляТрансялции.СубконтоМеждДт3,
	        |	ВТДанныеДляТрансялции.РеквизитДт,
	        |	ВТДанныеДляТрансялции.ЗначениеДт,
	        |	ВТДанныеДляТрансялции.СчетМеждународныйКт,
	        |	ВТДанныеДляТрансялции.СубконтоМеждКт1,
	        |	ВТДанныеДляТрансялции.СубконтоМеждКт2,
	        |	ВТДанныеДляТрансялции.СубконтоМеждКт3,
	        |	ВТДанныеДляТрансялции.РеквизитКт,
	        |	ВТДанныеДляТрансялции.ЗначениеКт,
	        |	ВТДанныеДляТрансялции.РеквизитИсклДТ,
	        |	ВТДанныеДляТрансялции.ЗначениеИсклДТ,
	        |	ВТДанныеДляТрансялции.РеквизитИсклКт,
	        |	ВТДанныеДляТрансялции.ЗначениеИсклКт,
	        |	ВТДанныеДляТрансялции.ОтменитьИсключениеДт,
	        |	ВТДанныеДляТрансялции.ОтменитьИсключениеКт,
	        |	ВТДанныеДляТрансялции.ТипРегистратора,
	        |	ВТДанныеДляТрансялции.ТипРегистратораСоответствия,
	        |	ВТДанныеДляТрансялции.ис_БезСуммы,
	        |	ВТДанныеДляТрансялции.ис_БезВалютнойСуммыДт,
	        |	ВТДанныеДляТрансялции.ис_БезВалютнойСуммыКт,
	        |	ВТДанныеДляТрансялции.ис_БезКоличестваДт,
	        |	ВТДанныеДляТрансялции.ис_БезКоличестваКт,
	        |	ВТДанныеДляТрансялции.ПравилоПереносаДт,
	        |	ВТДанныеДляТрансялции.НомерСтрокиПравилаПереносаДт,
	        |	ВТДанныеДляТрансялции.ПравилоПереносаКт,
	        |	ВТДанныеДляТрансялции.НомерСтрокиПравилаПереносаКт,
	        |	ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.ПравилоПереноса
	        |ИЗ
	        |	ВТДанныеДляТрансялции КАК ВТДанныеДляТрансялции
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_НастройкиПравилПереносаПроводокМУ.СрезПоследних(&ПериодНач, ) КАК ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних
	        |		ПО ВТДанныеДляТрансялции.ПравилоПереносаДт = ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.ПравилоПереносаДт
	        |			И ВТДанныеДляТрансялции.НомерСтрокиПравилаПереносаДт = ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.НомерСтрокиПравилаПереносаДт
	        |			И ВТДанныеДляТрансялции.ПравилоПереносаКт = ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.ПравилоПереносаКт
	        |			И ВТДанныеДляТрансялции.НомерСтрокиПравилаПереносаКт = ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.НомерСтрокиПравилаПереносаКт";

	Если НЕ ПоказатьПротоколПереноса Тогда 
		Текст = Текст + " И 
		| ((ВТДанныеДляТрансялции.СчетМеждународныйДт) ЕСТЬ НЕ NULL ) И 
		| ((ВТДанныеДляТрансялции.СчетМеждународныйКт) ЕСТЬ НЕ NULL )"; 
	КонецЕсли; 

	Текст = Текст + " 
		|УПОРЯДОЧИТЬ ПО 
		| ВТДанныеДляТрансялции.ПриоритетДт, 
		| ВТДанныеДляТрансялции.ПриоритетКт 
		| 
		|ИТОГИ ПО 
		| НомерСтроки, 
		| Регистратор"; 


	Запрос.Текст = Текст;			   
	Запрос.УстановитьПараметр("Активность", Истина);
	Запрос.УстановитьПараметр("ПериодНач", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКон", ПериодКонец);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеСубконто", ис_МеждународныйУчет.ПолучитьСписокПустыхСубконто());
	Запрос.УстановитьПараметр("ВидДвиженияДебет", Перечисления.ВидыДвиженийБухгалтерии.Дебет);
	Запрос.УстановитьПараметр("ВидДвиженияКредит", Перечисления.ВидыДвиженийБухгалтерии.Кредит);

	Результат = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Международный.Ссылка,
	               |	Международный.Валютный,
	               |	Международный.Количественный
	               |ИЗ
	               |	ПланСчетов.Международный КАК Международный";
	СвойстваСчетовМеждународный = Запрос.Выполнить().Выгрузить();
	СвойстваСчетовМеждународный.Индексы.Добавить("Ссылка");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МеждународныйВидыСубконто.Ссылка КАК Ссылка,
	               |	МеждународныйВидыСубконто.ВидСубконто,
	               |	МеждународныйВидыСубконто.ВидСубконто.ТипЗначения
	               |ИЗ
	               |	ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	МеждународныйВидыСубконто.НомерСтроки";
				   
	ПараметрыСубконтоМеждународный = Запрос.Выполнить().Выгрузить();			   
	ПараметрыСубконтоМеждународный.Индексы.Добавить("Ссылка");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка,
	               |	ХозрасчетныйВидыСубконто.ВидСубконто,
	               |	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	ХозрасчетныйВидыСубконто.НомерСтроки";
				   
	ПараметрыСубконтоХозрасчетный = Запрос.Выполнить().Выгрузить();			   
	ПараметрыСубконтоХозрасчетный.Индексы.Добавить("Ссылка");
		
	МассивСтруктурНаУдаление = Новый Массив;
	
	Если ПоказатьПротоколПереноса Тогда
		ТабДок = Новый ТабличныйДокумент;
		Макет = Документы.ПереносПроводокМеждународный.ПолучитьМакет("Макет");
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заголовок = "Список не перенесенных проводок";
		Область.Параметры.Информация = "Организация: " + Организация.НаименованиеПолное + "; Период: " + ПредставлениеПериода(ПериодНачало,ПериодКонец);
		ТабДок.Вывести(Область);
		
	// is ЯннуровВФ нач 20140624 0И-001285
	КонецЕсли;
	// is ЯннуровВФ кон 20140624
		
	ТаблицаНетранслированныхПроводок = Новый ТаблицаЗначений;
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("СчетДт");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоДт1");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоДт2");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоДт3");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("ВалютаДт");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("КоличествоДт");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("ВалютнаяСуммаДт");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("СчетКт");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоКт1");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоКт2");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоКт3");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("ВалютаКт");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("КоличествоКт");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("ВалютнаяСуммаКт");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("Сумма");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("Регистратор");
	ТаблицаНетранслированныхПроводок.Колонки.Добавить("Причина");
	
	ИндексированныеКолонки = "СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, ВалютаДт, ВалютнаяСуммаДт, КоличествоДт," 
									+ "СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, ВалютаКт, ВалютнаяСуммаКт, КоличествоКт,"
									+ "Сумма, Регистратор";
	
	СтруктураПоиска = Новый Структура(ИндексированныеКолонки);
									
	// is ЯннуровВФ нач 20140624 0И-001285
	//КонецЕсли;
	// is ЯннуровВФ кон 20140624
	
	// AAA 20150723+
	ТабЗначВрем = Неопределено;
	// AAA 20150723-
	
	Ном = 1;
	ВыборкаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтроки",);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		
		ВыборкаРегистратор = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор",);
		Пока ВыборкаРегистратор.Следующий() Цикл      
			
			// AAA 20150723+
			//ТабЗначВрем = ис_МеждународныйУчет.ВыполнитьПереносПроводок_СоздатьТабЗначВрем(ИндексированныеКолонки);
			Если ТабЗначВрем = Неопределено Тогда
				ТабЗначВрем = ис_МеждународныйУчет.ВыполнитьПереносПроводок_СоздатьТабЗначВрем(ИндексированныеКолонки);
			Иначе
				ТабЗначВрем.Очистить();
			КонецЕсли;
			// AAA 20150723-
			
			// is ЯннуровВФ нач 20140922
			МассивСтруктурНаУдаление.Очистить();
			// is ЯннуровВФ кон 20140922

			Выборка = ВыборкаРегистратор.Выбрать(,);
			СоответствиеНайдено = Ложь;
			НомерВыборки = 0;
			Пока Выборка.Следующий() Цикл
				
				// is ЯннуровВФ нач 20141112
				Если МассивСтруктурНаУдаление.Количество() > 0 Тогда 
					Прервать;
				КонецЕсли;
				// is ЯннуровВФ кон 20141112
				
				НомерВыборки = НомерВыборки + 1;
				Если НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) или НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Прервать;
				КонецЕсли;
				
				//+ДС 19.12.2013
				//Исключения счетов. Если найден счет с субконто и реквизитом, который должен быть исключен,
				//то переходим на следующую итерацию
				
				// is ЯннуровВФ нач 20140625 0И-001285 Неисправлено
				// В случае если в выборке в соответствие нет реквизита и есть >=2 исключения счетов, из которых не все подходят, 
				// то в случае неподходяшего исключения поток выполнения доходить до строки
				// Если НЕ ЗначениеЗаполнено(Выборка.РеквизитДт) и НЕ ЗначениеЗаполнено(Выборка.РеквизитКт) И Не ЗначениеЗаполнено(Выборка.ТипРегистратораСоответствия) Тогда
				// и добавляет проводку.
				// is ЯннуровВФ кон 20140625
				//Изменено Перов Андрей 12.10.2017 - Корректировка долга транслируется всегда. Заявка 67344
				//Если Не Выборка.ОтменитьИсключениеДт или Не Выборка.ОтменитьИсключениеКт Тогда
				Если (Не Выборка.ОтменитьИсключениеДт или Не Выборка.ОтменитьИсключениеКт) и ТипЗнч(Выборка.Регистратор) <> Тип("ДокументСсылка.КорректировкаДолга") Тогда
					//Конец изменения
					
					//Условие проверки совпадения реквизита по Дт
					Если ЗначениеЗаполнено(Выборка.РеквизитИсклДТ) Тогда
						НомерСубконто = Число(Сред(Выборка.РеквизитИсклДт,9,1));
						РеквИскл = Сред(Выборка.РеквизитИсклДт,Найти(Выборка.РеквизитИсклДт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоДт1[РеквИскл] = Выборка.ЗначениеИсклДт) или
								(НомерСубконто = 2) и (Выборка.СубконтоДт2[РеквИскл] = Выборка.ЗначениеИсклДт) или
								(НомерСубконто = 3) и (Выборка.СубконтоДт3[РеквИскл] = Выборка.ЗначениеИсклДт) Тогда
								Если ПоказатьПротоколПереноса Тогда
									ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
									Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
										НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
										НоваяСтрока.Причина = "Счет пропущен: " + Выборка.СчетДт
										+ " по реквизиту " + Выборка.РеквизитИсклДт;
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									КонецЕсли;
								КонецЕсли; 
								Если Выборка.ТипРегистратора = "" Тогда
									// is ЯннуровВФ нач 20140529 ЗР-0И-001285 Неинициализированная переменная
									ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
									// is ЯннуровВФ кон 20140529
									МассивСтруктурНаУдаление.Добавить(СтруктураПоиска);
									// is ЯннуровВФ нач 20141112
									//Продолжить;
									Прервать;
									// is ЯннуровВФ кон 20141112
								КонецЕсли;	                  
							КонецЕсли;	
						Исключение
						КонецПопытки;
						// is ЯннуровВФ нач 20140625 0И-001285
					ИначеЕсли Не Выборка.ОтменитьИсключениеДт Тогда 
						Если ПоказатьПротоколПереноса Тогда
							ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
							Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
								НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
								НоваяСтрока.Причина = "Счет пропущен: " + Выборка.СчетДт;
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							КонецЕсли;
						КонецЕсли; 
						Если Выборка.ТипРегистратора = "" Тогда
							ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
							МассивСтруктурНаУдаление.Добавить(СтруктураПоиска);
							// is ЯннуровВФ нач 20141112
							//Продолжить;
							Прервать;
							// is ЯннуровВФ кон 20141112
						КонецЕсли;	                  
						// is ЯннуровВФ кон 20140625
					КонецЕсли;
					
					//Условие проверки совпадения реквизита по Кт
					Если ЗначениеЗаполнено(Выборка.РеквизитИсклКТ) Тогда
						НомерСубконто = Число(Сред(Выборка.РеквизитИсклКт,9,1));
						РеквИскл = Сред(Выборка.РеквизитИсклКт,Найти(Выборка.РеквизитИсклКт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоКт1[РеквИскл] = Выборка.ЗначениеИсклКт) или
								(НомерСубконто = 2) и (Выборка.СубконтоКт2[РеквИскл] = Выборка.ЗначениеИсклКт) или
								(НомерСубконто = 3) и (Выборка.СубконтоКт3[РеквИскл] = Выборка.ЗначениеИсклКт) Тогда
								Если ПоказатьПротоколПереноса Тогда
									ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
									Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
										НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
										НоваяСтрока.Причина = "Счет пропущен: " + Выборка.СчетКт
										+ " по реквизиту " + Выборка.РеквизитИсклКт;
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									КонецЕсли;
								КонецЕсли; 
								Если Выборка.ТипРегистратора = "" Тогда
									// is ЯннуровВФ нач 20140529 ЗР-0И-001285 Неинициализированная переменная
									ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
									// is ЯннуровВФ кон 20140529
									МассивСтруктурНаУдаление.Добавить(СтруктураПоиска);
									// is ЯннуровВФ нач 20141112
									//Продолжить;
									Прервать;
									// is ЯннуровВФ кон 20141112
								КонецЕсли;	
							КонецЕсли;
						Исключение
						КонецПопытки;
						// is ЯннуровВФ нач 20140625 0И-001285
					ИначеЕсли Не Выборка.ОтменитьИсключениеКт Тогда 
						Если ПоказатьПротоколПереноса Тогда
							ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
							Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
								НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
								НоваяСтрока.Причина = "Счет пропущен: " + Выборка.СчетКт;
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							КонецЕсли;
						КонецЕсли; 
						Если Выборка.ТипРегистратора = "" Тогда
							ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
							МассивСтруктурНаУдаление.Добавить(СтруктураПоиска);
							// is ЯннуровВФ нач 20141112
							//Продолжить;
							Прервать;
							// is ЯннуровВФ кон 20141112
						КонецЕсли;	
						// is ЯннуровВФ кон 20140625
					КонецЕсли;
					
				КонецЕсли;	
				//Изменено Перов Андрей 12.10.2017 - Корректировка долга транслируется всегда. Заявка 67344
				//Если Не Выборка.ТипРегистратора = "" Тогда
				Если Не Выборка.ТипРегистратора = "" И ТипЗнч(Выборка.Регистратор) <> Тип("ДокументСсылка.КорректировкаДолга") Тогда
					//Конец изменения
					Попытка
						Если ТипЗнч(Выборка.Регистратор) = Тип(Выборка.ТипРегистратора) Тогда
							Если ПоказатьПротоколПереноса Тогда
								ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
								Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
									НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
									НоваяСтрока.Причина = "Счет пропущен: " + Выборка.СчетДт
									+ " по регистратору: " + Тип(Выборка.ТипРегистратора);
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								КонецЕсли;
							КонецЕсли; 
							// is ЯннуровВФ нач 20140529 ЗР-0И-001285 Неинициализированная переменная
							ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
							// is ЯннуровВФ кон 20140529
							МассивСтруктурНаУдаление.Добавить(СтруктураПоиска);
							// is ЯннуровВФ нач 20141112
							//Продолжить;
							Прервать;
							// is ЯннуровВФ кон 20141112
						КонецЕсли;
					Исключение
					КонецПопытки;	
				КонецЕсли;	
				
				//-ДС
				Если НЕ ЗначениеЗаполнено(Выборка.РеквизитДт) и НЕ ЗначениеЗаполнено(Выборка.РеквизитКт) И Не ЗначениеЗаполнено(Выборка.ТипРегистратораСоответствия) Тогда				
					// is ЯннуровВФ нач 20140625 0И-001285
					//ДобавитьПроводку(Выборка);
					НовСтрокаВремТаб = ТабЗначВрем.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаВремТаб, Выборка);
					// is ЯннуровВФ кон 20140625
					СоответствиеНайдено = Истина;
					// is ЯннуровВФ нач 20141112
					//Прервать; // нашли нужное правило!
					// is ЯннуровВФ кон 20141112
				Иначе
					
					Если ЗначениеЗаполнено(Выборка.РеквизитДт) Тогда // Условие по дебету
						НомерСубконто = Число(Сред(Выборка.РеквизитДт,9,1));
						Рекв = Сред(Выборка.РеквизитДт,Найти(Выборка.РеквизитДт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоДт1[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоДт2[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоДт3[Рекв] <> Выборка.ЗначениеДт) Тогда
								 
								Если ПоказатьПротоколПереноса и НомерВыборки = Выборка.Количество() Тогда
									ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
									Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
										НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
										НоваяСтрока.Причина = "Не найдено соответствие по дебету счета" + Выборка.СчетДт
															+ " по реквизиту " + Выборка.РеквизитДт;
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									КонецЕсли;
								КонецЕсли;
								Продолжить;
							ИначеЕсли ПоказатьПротоколПереноса Тогда
								
								ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
								СтрокиУдаления = ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска);
								Если СтрокиУдаления.Количество()> 0 Тогда
									ТаблицаНетранслированныхПроводок.Удалить(СтрокиУдаления[0]);
								КонецЕсли;

							КонецЕсли
							
						Исключение
							Сообщить("В правиле соответствия для проводки по дебету счета "+Выборка.СчетДт+" не найден реквизит "+Рекв);
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда // Условие по кредиту
						
						НомерСубконто = Число(Сред(Выборка.РеквизитКт,9,1));
						Рекв = Сред(Выборка.РеквизитКт,Найти(Выборка.РеквизитКт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоКт1[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоКт2[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоКт3[Рекв] <> Выборка.ЗначениеКт) Тогда
								 
								Если ПоказатьПротоколПереноса и НомерВыборки = Выборка.Количество() Тогда
									ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
									Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
										НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
										НоваяСтрока.Причина = "Не найдено соответствие по кредиту счета " + Выборка.СчетКт
															+ " по реквизиту " + Выборка.РеквизитКт;
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									КонецЕсли;
								КонецЕсли;
								Продолжить;
								
							ИначеЕсли ПоказатьПротоколПереноса Тогда
								
								ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
								СтрокиУдаления = ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска);
								Если СтрокиУдаления.Количество()> 0 Тогда
									ТаблицаНетранслированныхПроводок.Удалить(СтрокиУдаления[0]);
								КонецЕсли;

							КонецЕсли
							
						Исключение
							Сообщить("В правиле соответствия для проводки по кредиту счета "+Выборка.СчетКт+" не найден реквизит "+Рекв);
						КонецПопытки;
						
					ИначеЕсли ПоказатьПротоколПереноса Тогда
								
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
						СтрокиУдаления = ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска);
						Если СтрокиУдаления.Количество()> 0 Тогда
							ТаблицаНетранслированныхПроводок.Удалить(СтрокиУдаления[0]);
						КонецЕсли;

					КонецЕсли;
					
					
					//+ДС 24.12.2013
					Если ЗначениеЗаполнено(Выборка.ТипРегистратораСоответствия) Тогда
						Если Не ТипЗнч(Выборка.Регистратор)= Тип(Выборка.ТипРегистратораСоответствия) Тогда
							Если ПоказатьПротоколПереноса Тогда
								ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
								Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
									НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
									НоваяСтрока.Причина = "Не соответствие по регистратору: " + ТипЗнч(Выборка.Регистратор) + "(проводка) " 
									+ " - " + Тип(Выборка.ТипРегистратораСоответствия) + "(в соответствии счетов)";
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								КонецЕсли;
							КонецЕсли;
							Продолжить;
						КонецЕсли;
					КонецЕсли;	

					//-ДС
					
					//+ДС 28.02.14				
					//ДобавитьПроводку(Выборка);
					НовСтрокаВремТаб = ТабЗначВрем.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаВремТаб, Выборка);
					//-ДС
					СоответствиеНайдено = Истина;
					// is ЯннуровВФ нач 20141112
					//Прервать; // нашли нужное правило!
					// is ЯннуровВФ кон 20141112
				КонецЕсли;
			КонецЦикла;
			
			//+ДС 28.02.14
			Для Каждого Строка Из МассивСтруктурНаУдаление Цикл
				
				МассивУдаляемыхСтрок = ТабЗначВрем.НайтиСтроки(Строка);
				Для каждого Стр Из МассивУдаляемыхСтрок Цикл
					ТабЗначВрем.Удалить(Стр);
				КонецЦикла;
				
				НайдСтрокаВТаблицеНераспПроводок = ТаблицаНетранслированныхПроводок.НайтиСтроки(Строка);
				Если НайдСтрокаВТаблицеНераспПроводок.Количество() = 0 Тогда
					СтрокаВТаблицеНераспПроводок = ТаблицаНетранслированныхПроводок.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВТаблицеНераспПроводок, Строка);
				    СтрокаВТаблицеНераспПроводок.Причина = "Исключена проводка Дт:" + Строка.СчетДт + " - Кт: " + Строка.СчетКт;
				КонецЕсли;	
			КонецЦикла;	
			
			// is ЯннуровВФ нач 20141113
			//Попытка	
			//	ТабЗначВрем.Колонки.Удалить("РеквизитИсклДТ");
			//	ТабЗначВрем.Колонки.Удалить("ЗначениеИсклДТ");
			//	ТабЗначВрем.Колонки.Удалить("РеквизитИсклКт");
			//	ТабЗначВрем.Колонки.Удалить("ЗначениеИсклКт");
			//	ТабЗначВрем.Колонки.Удалить("ОтменитьИсключениеДт");
			//	ТабЗначВрем.Колонки.Удалить("ОтменитьИсключениеКт");
			//	ТабЗначВрем.Колонки.Удалить("ТипРегистратора");
			//	ТабЗначВрем.Колонки.Удалить("ТипРегистратораСоответствия");
			//	
			//	ТабЗначВрем.Свернуть("Период, НомерСтроки, Регистратор, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, ВалютаДт, ВалютаКт, Сумма, ВалютнаяСуммаДт, ВалютнаяСуммаКт, КоличествоДт, КоличествоКт, НомерЖурнала, Содержание, СчетМеждународныйДт, СубконтоМеждДт1, СубконтоМеждДт2, СубконтоМеждДт3, РеквизитДт, ЗначениеДт, СчетМеждународныйКт, СубконтоМеждКт1, СубконтоМеждКт2, СубконтоМеждКт3, РеквизитКт, ЗначениеКт"
			//	// is ЯннуровВФ нач 20140528
			//		+", ис_БезСуммы, ис_БезВалютнойСуммыДт, ис_БезВалютнойСуммыКт, ис_БезКоличестваДт, ис_БезКоличестваКт"
			//	// is ЯннуровВФ кон 20140528
			//	// is ЯннуровВФ нач 20141002
			//		+", ПравилоПереносаДт, НомерСтрокиПравилаПереносаДт, ПравилоПереносаКт, НомерСтрокиПравилаПереносаКт");
			//	// is ЯннуровВФ кон 20141002
			//Исключение
			//КонецПопытки;	
			//
			//Для Каждого Строка Из ТабЗначВрем Цикл
			//	ДобавитьПроводку(Строка);
			//КонецЦикла;	
			Если ТабЗначВрем.Количество() > 0 Тогда 
				ВыполнитьПереносПроводок_ДобавитьПроводку(мКэшКурсов,
														  СвойстваСчетовМеждународный,
														  ПараметрыСубконтоМеждународный,
														  ПараметрыСубконтоХозрасчетный,
														  ДокументСсылка,
														  НЗ,
														  Организация,
														  ТабЗначВрем[0]);
			КонецЕсли;
			// is ЯннуровВФ кон 20141113
			//-ДС 28.02.14
			
			// Соответствие не найдено
			Если (НЕ СоответствиеНайдено) и ПоказатьПротоколПереноса Тогда
				Область = Макет.ПолучитьОбласть("Строка");
				
				Область.Параметры.Номер = Ном;
				Область.Параметры.СчетДт = Выборка.СчетДт;
				Область.Параметры.СубконтоДт1 = Выборка.СубконтоДт1;
				Область.Параметры.СубконтоДт2 = Выборка.СубконтоДт2;
				Область.Параметры.СубконтоДт3 = Выборка.СубконтоДт3;
				Область.Параметры.КоличествоДт = Выборка.КоличествоДт;
				Область.Параметры.ВалютаДт = Выборка.ВалютаДт;
				Область.Параметры.ВалСуммаДт = Выборка.ВалютнаяСуммаДт;
				Область.Параметры.СчетКт = Выборка.СчетКт;
				Область.Параметры.СубконтоКт1 = Выборка.СубконтоКт1;
				Область.Параметры.СубконтоКт2 = Выборка.СубконтоКт2;
				Область.Параметры.СубконтоКт3 = Выборка.СубконтоКт3;
				Область.Параметры.КоличествоКт = Выборка.КоличествоКт;
				Область.Параметры.ВалютаКт = Выборка.ВалютаКт;
				Область.Параметры.ВалСуммаКт = Выборка.ВалютнаяСуммаКт;
				Область.Параметры.Сумма = Выборка.Сумма;
				Область.Параметры.Расшифровка = Выборка.Регистратор;
				
				Если НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) и НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счетам Дт и Кт.";
				ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счету Дт.";
				ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счету Кт.";
				Иначе
					Область.Параметры.Причина = "Нет подходящего условия по счету Дт или Кт.";
				КонецЕсли;

				Если НЕ ((""+Выборка.СчетДт="") И (""+Выборка.СчетКт="")) Тогда
					ТабДок.Вывести(Область);
				КонецЕсли;

				Ном = Ном + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Итерация = 1;
	ЗаписьВыполнена = Ложь;
	//Пока     ЗаписьВыполнена = Ложь   Веснина 2015.07.09
	//	 ИЛИ Итерация < 15 Цикл
	Пока     ЗаписьВыполнена = Ложь   Цикл 
		Если  Итерация < 15 тогда
			
			Попытка
				НЗ.Записать();
				
				ЗаписьВыполнена = Истина;
			Исключение
				Итерация = Итерация + 1;			
			КонецПопытки;
		КонецЕсли; //Веснина 2015.07.09
	КонецЦикла;
	
	Если ПоказатьПротоколПереноса Тогда
		Для Каждого Элемент Из ТаблицаНетранслированныхПроводок Цикл
			Ном = Ном + 1;
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(Элемент);
			Область.Параметры.Номер = Ном;
			Область.Параметры.ВалСуммаДт = Элемент.ВалютнаяСуммаДт;
			Область.Параметры.ВалСуммаКт = Элемент.ВалютнаяСуммаКт;
			Область.Параметры.Расшифровка = Элемент.Регистратор;
			ТабДок.Вывести(Область);
		КонецЦикла;
		
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.ОтображатьЗаголовки = Ложь;
		
		возврат ТабДок;
	Иначе
		возврат Неопределено;
	КонецЕсли;
	
КонецФункции
Процедура ВыполнитьПереносПроводок_ДобавитьПроводку(мКэшКурсов,
													СвойстваСчетовМеждународный,
													ПараметрыСубконтоМеждународный,
													ПараметрыСубконтоХозрасчетный,
													Регистратор,
													НЗ,
													Организация,
													Выборка)
													
	//Заполняем основные реквизиты записи регистра
	Движение = НЗ.Добавить();
	Движение.Регистратор = Регистратор;
	Движение.Период = Выборка.Период;
	Движение.СчетДт = Выборка.СчетМеждународныйДт;
	Движение.СчетКт = Выборка.СчетМеждународныйКт;
	Движение.Организация = Организация;
	Движение.Содержание = Выборка.Содержание;
	Движение.ПервичныйДокумент = Выборка.Регистратор;
	Движение.НомерЖурнала = Выборка.НомерЖурнала;
	// is ЯннуровВФ нач 20141002
	Движение.ис_ПервичныйНомерСтроки = Выборка.НомерСтроки;
	Движение.ис_ПравилоПереносаДт = Выборка.ПравилоПереносаДт;
	Движение.ис_НомерСтрокиПравилаПереносаДт = Выборка.НомерСтрокиПравилаПереносаДт;
	Движение.ис_ПравилоПереносаКт = Выборка.ПравилоПереносаКт;
	Движение.ис_НомерСтрокиПравилаПереносаКт = Выборка.НомерСтрокиПравилаПереносаКт;
	// is ЯннуровВФ кон 20141002
	
	ПараметрыСчетаДт = СвойстваСчетовМеждународный.Найти(Движение.СчетДт, "Ссылка");
	ПараметрыСчетаКт = СвойстваСчетовМеждународный.Найти(Движение.СчетКт, "Ссылка");
	
	// Заполняем количество
	Если ПараметрыСчетаДт.Количественный 
		// is ЯннуровВФ нач 20140528
		И Не Выборка.ис_БезКоличестваДт
		// is ЯннуровВФ кон 20140528
		Тогда
		Движение.КоличествоДт = Выборка.КоличествоДт;
	КонецЕсли;
	Если ПараметрыСчетаКт.Количественный
		// is ЯннуровВФ нач 20140528
		И Не Выборка.ис_БезКоличестваКт
		// is ЯннуровВФ кон 20140528
		Тогда
		Движение.КоличествоКт = Выборка.КоличествоКт;
	КонецЕсли;
	
	// Заполняем суммы и валюту
	Если ис_МеждународныйУчет.ВалютыМеждународного_и_РегламентированногоУчетаСовпадают() Тогда
		// is ЯннуровВФ нач 20140528
		Если Не Выборка.ис_БезСуммы Тогда 
		// is ЯннуровВФ кон 20140528
			Движение.Сумма = Выборка.Сумма;
		КонецЕсли;
		
		Если ПараметрыСчетаДт.Валютный Тогда
			Движение.ВалютаДт = Выборка.ВалютаДт;
			// is ЯннуровВФ нач 20140528
			Если Не Выборка.ис_БезВалютнойСуммыДт Тогда 
			// is ЯннуровВФ кон 20140528
				Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыСчетаКт.Валютный Тогда
			Движение.ВалютаКт = Выборка.ВалютаКт;
			// is ЯннуровВФ нач 20140528
			Если Не Выборка.ис_БезВалютнойСуммыКт Тогда 
			// is ЯннуровВФ кон 20140528
				Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
			КонецЕсли;
		КонецЕсли;

	Иначе
		Если НЕ ЗначениеЗаполнено(Выборка.ВалютаДт) Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				// is ЯннуровВФ нач 20140528
				Если Не Выборка.ис_БезВалютнойСуммыДт Тогда 
				// is ЯннуровВФ кон 20140528
					Движение.ВалютнаяСуммаДт = Выборка.Сумма;
				КонецЕсли;
			КонецЕсли;
			// is ЯннуровВФ нач 20140528
			Если Не Выборка.ис_БезСуммы Тогда 
			// is ЯннуровВФ кон 20140528
				Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
																				 глЗначениеПеременной("ВалютаРегламентированногоУчета"),
																				 глЗначениеПеременной("ВалютаМеждународногоУчета"),
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Движение.Период).Курс,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Курс, 
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Движение.Период).Кратность, 
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Кратность);
			КонецЕсли;
	
		ИначеЕсли Движение.ВалютаДт = глЗначениеПеременной("ВалютаМеждународногоУчета") Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаДт;
			
		ИначеЕсли Движение.ВалютаДт <> глЗначениеПеременной("ВалютаМеждународногоУчета") Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = Выборка.ВалютаДт;
				// is ЯннуровВФ нач 20140528
				Если Не Выборка.ис_БезВалютнойСуммыДт Тогда 
				// is ЯннуровВФ кон 20140528
					Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
				КонецЕсли;
			КонецЕсли;
			// is ЯннуровВФ нач 20140528
			Если Не Выборка.ис_БезСуммы Тогда 
			// is ЯннуровВФ кон 20140528
				Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаДт,
																				 Выборка.ВалютаДт,
																				 глЗначениеПеременной("ВалютаМеждународногоУчета"),
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, Выборка.ВалютаДт, Движение.Период).Курс, 
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Курс,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, Выборка.ВалютаДт, Движение.Период).Кратность,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Кратность);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВалютаКт) Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				// is ЯннуровВФ нач 20140528
				Если Не Выборка.ис_БезВалютнойСуммыКт Тогда 
				// is ЯннуровВФ кон 20140528
					Движение.ВалютнаяСуммаКт = Выборка.Сумма;
				КонецЕсли;
			КонецЕсли;
			// is ЯннуровВФ нач 20140528
			Если Не Выборка.ис_БезСуммы Тогда 
			// is ЯннуровВФ кон 20140528
				Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
																				 глЗначениеПеременной("ВалютаРегламентированногоУчета"),
																				 глЗначениеПеременной("ВалютаМеждународногоУчета"),
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Движение.Период).Курс,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Курс,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Движение.Период).Кратность,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Кратность);
			КонецЕсли;
			
		ИначеЕсли Движение.ВалютаКт = глЗначениеПеременной("ВалютаМеждународногоУчета") Тогда
			// is ЯннуровВФ нач 20140528
			Если Не Выборка.ис_БезСуммы Тогда 
			// is ЯннуровВФ кон 20140528
				Движение.Сумма = Выборка.ВалютнаяСуммаКт;
			КонецЕсли;
			
		ИначеЕсли Движение.ВалютаКт <> глЗначениеПеременной("ВалютаМеждународногоУчета") Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = Выборка.ВалютаКт;
				// is ЯннуровВФ нач 20140528
				Если Не Выборка.ис_БезВалютнойСуммыКт Тогда 
				// is ЯннуровВФ кон 20140528
					Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
				КонецЕсли;
			КонецЕсли;
			// is ЯннуровВФ нач 20140528
			Если Не Выборка.ис_БезСуммы Тогда 
			// is ЯннуровВФ кон 20140528
				Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаКт,
																				 Выборка.ВалютаКт,
																				 глЗначениеПеременной("ВалютаМеждународногоУчета"),
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, Выборка.ВалютаКт, Движение.Период).Курс,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Курс,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, Выборка.ВалютаКт, Движение.Период).Кратность,
																				 ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Кратность);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//Изменено Андрей Перов 18.10.2017 - найдем в соотвествии аналитик подмену аналитики
	Если ЗначениеЗаполнено(Выборка.ПравилоПереноса) Тогда		
		ТаблицаПравилаПереноса = Выборка.ПравилоПереноса.СоответсвиеАналитики.Выгрузить();
		КолонкиИндекса = "СубконтоДтИсточник1,СубконтоДтИсточник2,СубконтоДтИсточник3,СубконтоКтИсточник1,СубконтоКтИсточник2,СубконтоКтИсточник3";
		СтруктураАналитикиИсточник = Новый Структура(КолонкиИндекса);
		
		ТаблицаПравилаПереноса.Индексы.Добавить(КолонкиИндекса);
		
		Для ДТ = 0 по 1 Цикл
			Если ДТ = 0 Тогда
				СтрокаДТ = "Дт";
			Иначе
				СтрокаДТ = "Кт";
			КонецЕсли;
			
			Для Ном = 1 по 3 Цикл
				МассивСубконтоМеждународный = ПараметрыСубконтоМеждународный.НайтиСтроки(Новый Структура("Ссылка", Выборка["СчетМеждународный"+СтрокаДТ]));
				
				Если Ном <= МассивСубконтоМеждународный.Количество() Тогда
					ВидСубконтоМежд = МассивСубконтоМеждународный[Ном-1];
					
					Если НЕ ЗначениеЗаполнено(Выборка["СубконтоМежд"+СтрокаДТ+Ном]) Тогда
						МассивСубконтоХозрасчетный = ПараметрыСубконтоХозрасчетный.НайтиСтроки(Новый Структура("Ссылка", Выборка["Счет"+СтрокаДТ]));
						
						// Заполняем значением из исходной проводки (если совпадают типы)
						Для НомБух = 1 по 3 Цикл
							Если НомБух <= МассивСубконтоХозрасчетный.Количество() Тогда
								Если ВидСубконтоМежд.ТипЗначения = МассивСубконтоХозрасчетный[НомБух-1].ТипЗначения Тогда
									СтруктураАналитикиИсточник["Субконто"+СтрокаДТ+"Источник"+НомБух] = Выборка["Субконто"+СтрокаДТ+НомБух];
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						// Заполняем как указано в соответствиях
						СтруктураАналитикиИсточник["Субконто"+СтрокаДТ+"Источник"+Ном] = Выборка["СубконтоМежд"+СтрокаДТ+Ном];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтрокаТаблицыПравила Из ТаблицаПравилаПереноса Цикл				
			Для ДТ = 0 по 1 Цикл
				Если ДТ = 0 Тогда
					СтрокаДТ = "Дт";
				Иначе
					СтрокаДТ = "Кт";
				КонецЕсли;				
				Для Ном = 1 по 3 Цикл					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицыПравила["Субконто"+СтрокаДТ+"Источник"+Ном]) Тогда					
						СтрокаТаблицыПравила["Субконто"+СтрокаДТ+"Источник"+Ном] = СтруктураАналитикиИсточник["Субконто"+СтрокаДТ+"Источник"+Ном]					
					КонецЕсли;					
				КонецЦикла
			КонецЦикла
		КонецЦикла;
		
		МассивСтрок = ТаблицаПравилаПереноса.НайтиСтроки(СтруктураАналитикиИсточник);
		
		ЕстьСтрокиВПравилеПереноса = МассивСтрок.Количество() > 0;
		
		//Заполняем субконто
		Для ДТ = 0 по 1 Цикл
			Если ДТ = 0 Тогда
				СтрокаДТ = "Дт";
			Иначе
				СтрокаДТ = "Кт";
			КонецЕсли;
			
			Для Ном = 1 по 3 Цикл
				МассивСубконтоМеждународный = ПараметрыСубконтоМеждународный.НайтиСтроки(Новый Структура("Ссылка", Выборка["СчетМеждународный"+СтрокаДТ]));
				
				Если Ном <= МассивСубконтоМеждународный.Количество() Тогда
					ВидСубконтоМежд = МассивСубконтоМеждународный[Ном-1];
					
					Если ЕстьСтрокиВПравилеПереноса Тогда						
						Если НЕ ЗначениеЗаполнено(МассивСтрок[0]["Субконто"+СтрокаДТ+"Приемник"+Ном]) Тогда
							Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд.ВидСубконто] = МассивСтрок[0]["Субконто"+СтрокаДТ+"Источник"+Ном];							
						Иначе
							// Заполняем как указано в соответствиях
							Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд.ВидСубконто] = МассивСтрок[0]["Субконто"+СтрокаДТ+"Приемник"+Ном];
						КонецЕсли;
					Иначе
						Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд.ВидСубконто] = СтруктураАналитикиИсточник["Субконто"+СтрокаДТ+"Источник"+Ном];													
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		
	Иначе
		//Заполняем субконто
		Для ДТ = 0 по 1 Цикл
			Если ДТ = 0 Тогда
				СтрокаДТ = "Дт";
			Иначе
				СтрокаДТ = "Кт";
			КонецЕсли;
			
			Для Ном = 1 по 3 Цикл
				МассивСубконтоМеждународный = ПараметрыСубконтоМеждународный.НайтиСтроки(Новый Структура("Ссылка", Выборка["СчетМеждународный"+СтрокаДТ]));
				
				Если Ном <= МассивСубконтоМеждународный.Количество() Тогда
					ВидСубконтоМежд = МассивСубконтоМеждународный[Ном-1];
					
					Если НЕ ЗначениеЗаполнено(Выборка["СубконтоМежд"+СтрокаДТ+Ном]) Тогда
						МассивСубконтоХозрасчетный = ПараметрыСубконтоХозрасчетный.НайтиСтроки(Новый Структура("Ссылка", Выборка["Счет"+СтрокаДТ]));
						
						// Заполняем значением из исходной проводки (если совпадают типы)
						Для НомБух = 1 по 3 Цикл
							Если НомБух <= МассивСубконтоХозрасчетный.Количество() Тогда
								Если ВидСубконтоМежд.ТипЗначения = МассивСубконтоХозрасчетный[НомБух-1].ТипЗначения Тогда
									Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд.ВидСубконто] = Выборка["Субконто"+СтрокаДТ+НомБух];
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						// Заполняем как указано в соответствиях
						Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд.ВидСубконто] = Выборка["СубконтоМежд"+СтрокаДТ+Ном];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
	//Конец изменения
КонецПроцедуры

Функция ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, Валюта, ДатаКурса)
	СтруктураПоиска = Новый Структура("Валюта, ДатаКурса", Валюта, ДатаКурса);
	Если ТипЗнч(мКэшКурсов) = Тип("ТаблицаЗначений") Тогда
		НайденныеСтроки = мКэшКурсов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].СтруктураОтвета;
		КонецЕсли;
	Иначе
		мКэшКурсов = Новый ТаблицаЗначений;
		мКэшКурсов.Колонки.Добавить("Валюта");
		мКэшКурсов.Колонки.Добавить("ДатаКурса");
		мКэшКурсов.Колонки.Добавить("СтруктураОтвета");
	КонецЕсли;
	
	НоваяСтрока = мКэшКурсов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
	НоваяСтрока.СтруктураОтвета = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ДатаКурса);
	
	Возврат НоваяСтрока.СтруктураОтвета;
КонецФункции

//

Функция ЗапуститьФоновоеЗадание(ИмяМетода,МассивПараметров) Экспорт
	ФоновоеЗадание = ФоновыеЗадания.Выполнить(ИмяМетода,МассивПараметров);
	
	возврат ФоновоеЗадание.УникальныйИдентификатор;
КонецФункции

Функция ФоновоеЗаданиеВыполняется(КлючЗадания) Экспорт
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючЗадания);
	Если ФоновоеЗадание = Неопределено Тогда
		возврат ЛОЖЬ;
	КонецЕсли;
	
	возврат (ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно);	
КонецФункции


// Веснина 2015.07.08 +
Процедура   ВыполнитьПереносПартий(ПериодНачало,
								   ПериодКонец,
								   Организация,
								   ЗапросТрансляции,
								   ДокументСсылка,
								   ПоказатьПротоколПереноса = Ложь,
								   ВыполнятьПроверку=Истина) Экспорт
								   
	// Начало переноса
	
	//Партии товаров на складах:
	// Поступление за период по организации,
	// кроме поступления, сформированного процедурой списания партий
	// Хранит значения курсов.
	Перем мКэшКурсов;
	
	Если ВыполнятьПроверку Тогда
		//Проверка операция переноса за выбранный период
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереносПартийМеждународный.Ссылка
		|ИЗ
		|	Документ.ПереносПартийМеждународный КАК ПереносПартийМеждународный
		|ГДЕ
		|	(ПереносПартийМеждународный.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ПереносПартийМеждународный.ПериодКонец МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ПереносПартийМеждународный.ПериодНачало < &ДатаНачала
		|				И ПереносПартийМеждународный.ПериодКонец > &ДатаНачала
		|			ИЛИ ПереносПартийМеждународный.ПериодНачало < &ДатаОкончания
		|				И ПереносПартийМеждународный.ПериодКонец > &ДатаОкончания)
		|	И ПереносПартийМеждународный.Проведен = ИСТИНА
		|	И ПереносПартийМеждународный.Организация = &Организация
		|	И ПереносПартийМеждународный.Ссылка <> &Ссылка ";
		
		Запрос.УстановитьПараметр("ДатаНачала", ПериодНачало);
		Запрос.УстановитьПараметр("ДатаОкончания", ПериодКонец);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Сообщить(Выборка.Ссылка);
		КонецЦикла;
		
		Если Выборка.Количество() > 0 Тогда
			Сообщить("По выбранной организации и периоду уже имеются перенесенные партии. Перенос не выполнен.");
		КонецЕсли;
		 Возврат ;
	 КонецЕсли;
	 	
	ПартииТоваровНаСкладах = ДокументСсылка.ПартииТоваровНаСкладах.Выгрузить();
	ПартииТоваровНаСкладах.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииБух.Период КАК Период,
	|	ПартииБух.Номенклатура,
	|	ПартииБух.СчетУчета,
	|	ПартииБух.Организация,
	|	ПартииБух.Склад,
	|	ПартииБух.ДокументОприходования,
	|	ПартииБух.ХарактеристикаНоменклатуры,
	|	ПартииБух.СерияНоменклатуры,
	|	ПартииБух.Заказ,
	|	ПартииБух.Качество,
	|	СУММА(ПартииБух.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость)
	|				ТОГДА 0
	|			ИНАЧЕ ПартииБух.Стоимость
	|		КОНЕЦ) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииБух
	|ГДЕ
	|	ПартииБух.Организация = &Организация
	|	И ПартииБух.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|	И ПартииБух.Активность
	|	И ПартииБух.ВидДвижения = &ВидДвижения
	|	И ((НЕ ПартииБух.СписаниеПартий)
	|			ИЛИ ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость)
	//Изменено Перов Андрей 02.10.2017	
	//|			ИЛИ ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад))
	|			ИЛИ ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад)
	|			ИЛИ ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВозвратТарыЗалогСтоимость))
	//Конец изменения
	|	И ((НЕ ПартииБух.Количество = 0)
	|	  ИЛИ (НЕ ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость)))
	// is ЯннуровВФ нач 20141026
	|	И НЕ ПартииБух.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
	// is ЯннуровВФ кон 20141026
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииБух.Период,
	|	ПартииБух.Номенклатура,
	|	ПартииБух.СчетУчета,
	|	ПартииБух.Организация,
	|	ПартииБух.Склад,
	|	ПартииБух.ДокументОприходования,
	|	ПартииБух.ХарактеристикаНоменклатуры,
	|	ПартииБух.СерияНоменклатуры,
	|	ПартииБух.Заказ,
	|	ПартииБух.Качество
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодНачало", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКонец", ПериодКонец);
	Запрос.УстановитьПараметр("Активность", Истина);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ВидДБ = Перечисления.ВидыДвиженийБухгалтерии.Дебет;
	СчетаМСФО = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
				
		Если НЕ (ТипЗнч(Выборка.ДокументОприходования)=Тип("ДокументСсылка.ВозвратПереданныхТоваров") ИЛИ
			ТипЗнч(Выборка.ДокументОприходования)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
			
			СчетМУ = СчетаМСФО[Выборка.СчетУчета];
			ЕСли СчетМУ = Неопределено Тогда
				СтруктураСчетов = МеждународныйУчет.ПреобразоватьСчетаБУвСчетМСФО(Выборка.СчетУчета, Неопределено, Неопределено, Неопределено, ДокументСсылка.Дата);	            
				СчетаМСФО[Выборка.СчетУчета] = СтруктураСчетов.Счет;
				СчетМУ = СтруктураСчетов.Счет;
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(СчетМУ) Тогда 
				Продолжить;
			КонецЕсли;
			СтрокаТП = ПартииТоваровНаСкладах.Добавить();
			СтрокаТП.Период = Выборка.Период;
			СтрокаТП.ВидДвижения = Перечисления.ВидыДвиженийПартий.Поступление;
			СтрокаТП.Номенклатура = Выборка.Номенклатура;
			СтрокаТП.Склад = Выборка.Склад;
			СтрокаТП.ДокументОприходования = Выборка.ДокументОприходования;
			СтрокаТП.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТП.СерияНоменклатуры = Выборка.СерияНоменклатуры;
			СтрокаТП.Заказ = Выборка.Заказ;
			СтрокаТП.Качество = Выборка.Качество;
			СтрокаТП.СчетУчета = СчетМУ;
			СтрокаТП.Количество = Выборка.Количество;
			//СтрокаТП.Стоимость = ПересчитатьСумму(Выборка.Стоимость, Выборка.Период);
			
			СтрокаТП.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Стоимость,
									глЗначениеПеременной("ВалютаРегламентированногоУчета"),
									глЗначениеПеременной("ВалютаМеждународногоУчета"),
									ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Выборка.Период).Курс,
									ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Выборка.Период).Курс, 
									ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Выборка.Период).Кратность, 
									ПолучитьКурсВалютыСУчетомКэша(мКэшКурсов, глЗначениеПеременной("ВалютаМеждународногоУчета"), Выборка.Период).Кратность);

		КонецЕсли;
	КонецЦикла;
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ПартииТоваровНаСкладах.Загрузить(ПартииТоваровНаСкладах);						   
	
	Попытка 		
		ДокументОбъект.Записать();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Текст = ОписаниеОшибки();
		Сообщение.УстановитьДанные(ДокументСсылка);
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьПереносЗатратПоПроводкам(ПериодНачало,
								     ПериодКонец,
								     Организация,
									 ЗапросТрансляции,
								     ДокументСсылка,
								     ПоказатьПротоколПереноса = Ложь,
									 ВыполнятьПроверку = Ложь) Экспорт
									 
	 ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	 Попытка
		 ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	 Исключение
		 Сообщить(ОписаниеОшибки());
	 КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьПереносЗатратВЦикле(ПериодНачало,
										 ПериодКонец,
										 Организация,
										 ЗапросТрансляции,
										 ДокументСсылка,
										 ПоказатьПротоколПереноса) Экспорт

	Итерация = 1;
	ДокументСформирован = Ложь;									 
	Пока ДокументСформирован = Ложь Цикл
		Попытка
			Н = ТекущаяДата();
			
			ВыполнитьПереносЗатратПоПроводкам(ПериодНачало,
								     ПериодКонец,
								     Организация,
									 ЗапросТрансляции,
								     ДокументСсылка,
								     ПоказатьПротоколПереноса,
									 Ложь);
									
			//ВремяФормирования = ТекущаяДата() - Н;
			//
			//О = ДокументСсылка.ПолучитьОбъект();
			//О.Комментарий = "Время формирования: "+ВремяФормирования+" сек. Итерация "+Итерация;
			//О.Записать();
			
			ДокументСформирован = Истина;
		Исключение
			Итерация = Итерация + 1;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры
	
Функция ПолучитьСписокПустыхСубконто(ВидыСубконто) 
	лСписок = Новый Массив; 
	лСписок.Добавить(Неопределено); 
	
	лВыборка = ВидыСубконто.Выбрать(); 
	Пока лВыборка.Следующий() Цикл 
		лСписок.Добавить(лВыборка.ТипЗначения.ПривестиЗначение()); 
	КонецЦикла; 
	
	Возврат лСписок; 
КонецФункции // () 


Процедура ВыполнитьСписаниеМПЗ(ПериодНачало,
										 ПериодКонец,
										 Организация,
										 ЗапросТрансляции,
										 ДокументСсылка,
										 ПоказатьПротоколПереноса) Экспорт
	 ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	 Попытка
		 ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	 Исключение
		 Сообщить(ОписаниеОшибки());
	 КонецПопытки;

	
КонецПроцедуры

 //AAA 20150621+
Функция   ОбработкаПроведения_ОпределитьПараметрыТрансляции(МассивПериодов)
	Начало = Неопределено;
	Окончание = Неопределено;
	
	Для Каждого ПериодСписания из МассивПериодов Цикл
		Если     Начало = Неопределено
			 ИЛИ ПериодСписания < Начало Тогда
			 
			Начало = ПериодСписания;
		КонецЕсли;
		
		Если	 Окончание = Неопределено
			 ИЛИ ПериодСписания > Окончание Тогда
			 
			Окончание = ПериодСписания;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СоответствиеСчетовБУиМСФО.Период,
	               |	СоответствиеСчетовБУиМСФО.СчетХозрасчетный КАК Счет,
	               |	ВЫБОР
	               |		КОГДА СоответствиеСчетовБУиМСФО.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Приход,
	               |	СоответствиеСчетовБУиМСФО.СубконтоХозр1 КАК Субконто1,
	               |	СоответствиеСчетовБУиМСФО.СубконтоХозр2 КАК Субконто2,
	               |	СоответствиеСчетовБУиМСФО.СубконтоХозр3 КАК Субконто3
	               |ИЗ
	               |	РегистрСведений.СоответствиеСчетовБУиМСФО КАК СоответствиеСчетовБУиМСФО
	               |ГДЕ
	               |	СоответствиеСчетовБУиМСФО.Учитывается
	               |	И СоответствиеСчетовБУиМСФО.Период МЕЖДУ &П1 И &П2";
				   
	ДопЗапрос =    "ВЫБРАТЬ
	               |	&П1 КАК Период,
	               |	СоответствиеСчетовБУиМСФО.СчетХозрасчетный КАК Счет,
	               |	ВЫБОР
	               |		КОГДА СоответствиеСчетовБУиМСФО.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Приход,
	               |	СоответствиеСчетовБУиМСФО.СубконтоХозр1 КАК Субконто1,
	               |	СоответствиеСчетовБУиМСФО.СубконтоХозр2 КАК Субконто2,
	               |	СоответствиеСчетовБУиМСФО.СубконтоХозр3 КАК Субконто3
	               |ИЗ
	               |	РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&П1, ) КАК СоответствиеСчетовБУиМСФО
	               |ГДЕ
	               |	СоответствиеСчетовБУиМСФО.Учитывается";
				   
	УсловияТрансляции = Новый Соответствие;
	
	ОбработкаПроведения_ОпределитьПараметрыТрансляции_ДляТаблицы(Запрос,
																 Начало,
																 Окончание,
																 "СоответствиеСчетовБУиМСФО",
																 ДопЗапрос,
																 УсловияТрансляции);
				   
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ДС_ИсключениеСчетов.Период,
	               |	ДС_ИсключениеСчетов.Счет,
	               |	ВЫБОР
	               |		КОГДА ДС_ИсключениеСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Приход,
	               |	ДС_ИсключениеСчетов.Субконто1,
	               |	ДС_ИсключениеСчетов.Субконто2,
	               |	ДС_ИсключениеСчетов.Субконто3
	               |ИЗ
	               |	РегистрСведений.ДС_ИсключениеСчетов КАК ДС_ИсключениеСчетов
	               |ГДЕ
	               |	ДС_ИсключениеСчетов.Учитывается
	               |	И ДС_ИсключениеСчетов.Период МЕЖДУ &П1 И &П2";
				   
	ДопЗапрос =    "ВЫБРАТЬ
	               |	&П1 КАК Период,
	               |	ДС_ИсключениеСчетов.Счет,
	               |	ВЫБОР
	               |		КОГДА ДС_ИсключениеСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Приход,
	               |	ДС_ИсключениеСчетов.Субконто1,
	               |	ДС_ИсключениеСчетов.Субконто2,
	               |	ДС_ИсключениеСчетов.Субконто3
	               |ИЗ
	               |	РегистрСведений.ДС_ИсключениеСчетов.СрезПоследних(&П1, ) КАК ДС_ИсключениеСчетов
	               |ГДЕ
	               |	ДС_ИсключениеСчетов.Учитывается";
				
	ОбработкаПроведения_ОпределитьПараметрыТрансляции_ДляТаблицы(Запрос,
																 Начало,
																 Окончание,
																 "ДС_ИсключениеСчетов",
																 ДопЗапрос,
																 УсловияТрансляции);
																					 
	возврат УсловияТрансляции;
КонецФункции
Функция   ОбработкаПроведения_ОпределитьПараметрыТрансляции_ДляТаблицы(Запрос,
																	   Начало,
																	   Окончание,
																	   НаименованиеТаблицы,
																	   ДопЗапрос,
																	   Соответствие_Результат)
	
	Если   ЗначениеЗаполнено(Начало)
		 И ЗначениеЗаполнено(Окончание) Тогда
		 
		Запрос.УстановитьПараметр("П1", Начало);
		Запрос.УстановитьПараметр("П2", Окончание);
								   
		Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС +
					   "ОБЪЕДИНИТЬ ВСЕ" +
					   Символы.ПС + Символы.ПС +
					   ДопЗапрос;
		
	ИначеЕсли ЗначениеЗаполнено(Начало) Тогда
		
		Запрос.УстановитьПараметр("П1", Начало);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
								   НаименованиеТаблицы+".Период МЕЖДУ &П1 И &П2",
								   НаименованиеТаблицы+".Период > &П1");
								   
		Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС +
					   "ОБЪЕДИНИТЬ ВСЕ" +
					   Символы.ПС + Символы.ПС +
					   ДопЗапрос;
			
	ИначеЕсли ЗначениеЗаполнено(Окончание) Тогда
		
		Запрос.УстановитьПараметр("П2", Окончание);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
								   НаименованиеТаблицы+".Период МЕЖДУ &П1 И &П2",
								   НаименованиеТаблицы+".Период <= &П2");
			
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
								   НаименованиеТаблицы+".Период МЕЖДУ &П1 И &П2",
								   "");
	КонецЕсли;

	Для Каждого ЗначенияНастроек из Запрос.Выполнить().Выгрузить() Цикл
		Если   ЗначениеЗаполнено(ЗначенияНастроек.Субконто1) = Ложь
			 И ЗначениеЗаполнено(ЗначенияНастроек.Субконто2) = Ложь
			 И ЗначениеЗаполнено(ЗначенияНастроек.Субконто3) = Ложь Тогда
			 
			продолжить;
		КонецЕсли;
		
		Результат = Соответствие_Результат.Получить(ЗначенияНастроек.Счет);
		Если Результат = Неопределено Тогда
			Результат = Новый Структура("Субконто1Приход,Субконто2Приход,Субконто3Приход,Субконто1Расход,Субконто2Расход,Субконто3Расход",Ложь,Ложь,Ложь,Ложь,Ложь,Ложь);
		КонецЕсли;
		
		НаименованиеРеквизита = ?(ЗначенияНастроек.Приход,"Приход","Расход");
		
		Если ЗначениеЗаполнено(ЗначенияНастроек.Субконто1) Тогда
			Результат["Субконто1"+НаименованиеРеквизита] = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияНастроек.Субконто2) Тогда
			Результат["Субконто2"+НаименованиеРеквизита] = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияНастроек.Субконто3) Тогда
			Результат["Субконто3"+НаименованиеРеквизита] = Истина;
		КонецЕсли;
		
		Соответствие_Результат.Вставить(ЗначенияНастроек.Счет,Результат);
	КонецЦикла;
	
	возврат Соответствие_Результат;
КонецФункции
Процедура ОбработкаПроведения_ОптимизироватьСубконто(УсловияТрансляции,
													 Счет,
													 Субконто1,
													 Субконто2,
													 Субконто3,
													 Приход)
													 
	Результат = УсловияТрансляции.Получить(Счет);
	Если Результат = Неопределено Тогда
		ОбработкаПроведения_ОптимизироватьСубконто_КонвертацияЗначения(Субконто1);
		ОбработкаПроведения_ОптимизироватьСубконто_КонвертацияЗначения(Субконто2);
		ОбработкаПроведения_ОптимизироватьСубконто_КонвертацияЗначения(Субконто3);
	Иначе
		НаименованиеРеквизита = ?(Приход,"Приход","Расход");
		
		Если Результат["Субконто1"+НаименованиеРеквизита] = Ложь Тогда
			ОбработкаПроведения_ОптимизироватьСубконто_КонвертацияЗначения(Субконто1);
		КонецЕсли;
		Если Результат["Субконто2"+НаименованиеРеквизита] = Ложь Тогда
			ОбработкаПроведения_ОптимизироватьСубконто_КонвертацияЗначения(Субконто2);
		КонецЕсли;
		Если Результат["Субконто3"+НаименованиеРеквизита] = Ложь Тогда
			ОбработкаПроведения_ОптимизироватьСубконто_КонвертацияЗначения(Субконто3);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОбработкаПроведения_ОптимизироватьСубконто_КонвертацияЗначения(ЗначениеСубконто)
	Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
		ЗначениеСубконто = Новый(ТипЗнч(ЗначениеСубконто));
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения_ПодготовитьПустыеСубконто()
	НЗ = РегистрыСведений.ис_ПустыеСубконто.СоздатьНаборЗаписей();
	Для Каждого ПустоеЗначение из ис_МеждународныйУчет.ПолучитьСписокПустыхСубконто() Цикл
		Запись = НЗ.Добавить();
		Запись.ЗначениеПустогоСубконто = ПустоеЗначение;
	КонецЦикла;
	НЗ.Записать();
КонецПроцедуры
//AAA 20150621-


//Веснина 2015.07.08 -
//начало изменений Ожиганов А. процедура для тестирования выполнения на сервере 05.12.2016  б/н 07.12.2016
Процедура ВыполнитьКодНаСервере(ПрогКод) Экспорт
	Выполнить(ПрогКод);
КонецПроцедуры	
//конец изменений 