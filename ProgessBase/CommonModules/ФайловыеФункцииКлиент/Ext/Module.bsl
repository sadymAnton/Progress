// Показывает стандартное предупреждение.
// 
// Параметры:
//  ПредставлениеКоманды - Строка, если указано то будет уточнена команда,
//                         для которой необходимо расширение.
//
Процедура ПредупредитьОНеобходимостиРасширенияРаботыСФайлами(ПредставлениеКоманды = "") Экспорт
	
	Если ЗначениеЗаполнено(ПредставлениеКоманды) Тогда
		
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для выполнения команды ""%1"" необходимо
			           |установить расширение работы с файлами.'"),
			ПредставлениеКоманды));
	Иначе
		Предупреждение(НСтр("ru = 'Для выполнения команды необходимо
		                          |установить расширение работы с файлами.'"));
	КонецЕсли;
	
КонецПроцедуры

// Показывает стандартное предупреждение.
// 
// Параметры:
//  ПредставлениеКоманды - Строка, если указано то будет уточнена команда,
//                         для которой необходимо расширение.
//
Процедура ПредупредитьОНеобходимостиРасширенияРаботыСКриптографией(ПредставлениеКоманды = "") Экспорт
	
	Если ЗначениеЗаполнено(ПредставлениеКоманды) Тогда
		
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для выполнения команды ""%1"" необходимо
			           |установить расширение работы с криптографией.'"),
			ПредставлениеКоманды));
	Иначе
		Предупреждение(НСтр("ru = 'Для выполнения команды необходимо
		                          |установить расширение работы с криптографией.'"));
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет подпись на диск
Процедура СохранитьПодпись(АдресПодписи) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
		
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Фильтр = НСтр("ru = 'Все файлы(*.p7s)|*.p7s'");
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		// Сохраним Файл из БД на диск
		ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
			
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подпись сохранена в файл ""%1""'"),
			ДиалогОткрытияФайла.ПолноеИмяФайла);
		Состояние(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

// Проинициализировать параметр сеанса ПутьКРабочемуКаталогуПользователя, проверив корректность пути, и откорректировав если нужно
// 
Процедура ПроинициализироватьПутьКРабочемуКаталогу() Экспорт
	
	ИмяКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьРабочийКаталогПользователя();
	
	// уже проинициализировано
	Если ИмяКаталога <> Неопределено И НЕ ПустаяСтрока(ИмяКаталога) И ПроверкаДоступаКРабочемуКаталогуВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяКаталога = Неопределено Тогда
		ИмяКаталога = ПолучитьПутьККаталогуДанныхПользователя();
		Если Не ПустаяСтрока(ИмяКаталога) Тогда
			СохранитьПутьККаталогуВНастройках(ИмяКаталога);
		Иначе
			ПроверкаДоступаКРабочемуКаталогуВыполнена = Истина;
			Возврат; //  веб клиент без расширения работы с файлами
		КонецЕсли;
	КонецЕсли;
	
#Если Не ВебКлиент Тогда
	// Создать каталог для файлов
	Попытка
		СоздатьКаталог(ИмяКаталога);
		ИмяКаталогаТестовое = ИмяКаталога + "ПроверкаДоступа\";
		СоздатьКаталог(ИмяКаталогаТестовое);
		УдалитьФайлы(ИмяКаталогаТестовое);
	Исключение
		// нет прав на создание каталога, или такой путь отсутствует - сбрасываем в настройки по умолчанию
		ИмяКаталога = ПолучитьПутьККаталогуДанныхПользователя();
		СохранитьПутьККаталогуВНастройках(ИмяКаталога);
	КонецПопытки;
#КонецЕсли
	
	ПроверкаДоступаКРабочемуКаталогуВыполнена = Истина;
	
КонецПроцедуры

// Функция получает путь к каталогу вида "C:\Documents and Settings\ИМЯ ПОЛЬЗОВАТЕЛЯ\Application Data\1C\ФайлыА8\"
//
Функция ПолучитьПутьККаталогуДанныхПользователя() Экспорт
	
	ИмяКаталога = "";
	
#Если Не ВебКлиент Тогда
	
	Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		Оболочка = Новый COMОбъект("WScript.Shell");
		Путь = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
		Путь = Путь + "\1C\Файлы\";
		Путь = Путь + ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИмяКонфигурации + "\";
		
		ИмяПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
		ИмяКаталога = Путь + ИмяПользователя;
		ИмяКаталога = СтрЗаменить(ИмяКаталога, "<", " ");
		ИмяКаталога = СтрЗаменить(ИмяКаталога, ">", " ");
		ИмяКаталога = СокрЛП(ИмяКаталога);
		ИмяКаталога = ИмяКаталога + "\";
	КонецЕсли;
	
#Иначе // ВебКлиент
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Каталог = "";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь к локальному кэшу файлов'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ИмяКаталога = ДиалогОткрытияФайла.Каталог;
			ИмяКаталога = ИмяКаталога + "\";
		КонецЕсли;
		
	КонецЕсли;
	
#КонецЕсли
	
	Возврат ИмяКаталога;

КонецФункции

// Сохраняет путь к рабочему каталогу в настройках
//
Процедура СохранитьПутьККаталогуВНастройках(ИмяКаталога)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов", ИмяКаталога);
	
КонецПроцедуры

// открыть Windows проводник, выбрав в нем указанный файл
//
Функция ОткрытьПроводникСФайлом(Знач ПолноеИмяФайла) Экспорт
	
#Если НЕ ВебКлиент Тогда
	ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
	
	Если ФайлНаДиске.Существует() Тогда
		
		Если Лев(ПолноеИмяФайла, 0) <> """" Тогда
			ПолноеИмяФайла = """" + ПолноеИмяФайла + """";
		КонецЕсли;
		
		ЗапуститьПриложение("explorer.exe /select, " + ПолноеИмяФайла);
		
		Возврат Истина;
		
	КонецЕсли;
#КонецЕсли
	
	Возврат Ложь;
	
КонецФункции
    
// Добавляет ЭЦП из файла (файлов)
//
// Параметры
//  ФайлСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭЦП
//  МассивФайловПодписей  - Массив структур - массив структур (ПутьКФайлу, Комментарий)
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//  ВладелецФайла  - любая ссылка - значение реквизита ВладелецФайла у ФайлСсылка
Функция СформироватьПодписиДляЗанесениюВБазу(ФайлСсылка, МассивФайловПодписей, УникальныйИдентификатор = Неопределено) Экспорт
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	
	Если Отказ Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДатаПодписи = ТекущаяДата();
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	Для Каждого Элемент Из МассивФайловПодписей Цикл
		
		ИмяФайлаСПутем = Элемент.ПутьКФайлу;
		
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ИмяФайлаСПутем);
		
		Если Сертификаты.Количество() <> 0 Тогда
			
			Сертификат = Сертификаты[0];
			
			НоваяПодписьДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСПутем);
			
			Файл = Новый Файл(ИмяФайлаСПутем);
			ИмяФайлаПодписи = Файл.Имя;
			
			Отпечаток = Base64Строка(Сертификат.Отпечаток);
			КомуВыданСертификат = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
			ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
			
			ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
				ФайлСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Элемент.Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				"", // АдресФайла
				ДвоичныеДанныеСертификата);
			
			МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанныхДляЗанесенияВБазу;
	
КонецФункции

 // Рекурсивно обойти каталоги и посчитать количество файлов и их суммарный размер
//
Процедура ОбходФайловРазмер(Путь, МассивФайлов, РазмерСуммарный, КоличествоСуммарное) Экспорт
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			НовыйПуть = Строка(Путь);
			НовыйПуть = НовыйПуть + "\";
			НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
			МассивФайловВКаталоге = НайтиФайлы(НовыйПуть, "*.*");
			
			Если МассивФайловВКаталоге.Количество() <> 0 Тогда
				ОбходФайловРазмер(НовыйПуть, МассивФайловВКаталоге, РазмерСуммарный, КоличествоСуммарное);
			КонецЕсли;
		
			Продолжить;
		КонецЕсли;
		
		РазмерСуммарный = РазмерСуммарный + ВыбранныйФайл.Размер();
		КоличествоСуммарное = КоличествоСуммарное + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет имя файла на наличие некорректных символов.
//
// Параметры:
//  ИмяФайла - Строка- проверяемое имя файла.
//
//  УдалятьНекорректныеСимволы - Булево - Истина указывает удалять некорректные
//             символы из переданной строки.
//
Процедура КорректноеИмяФайла(ИмяФайла, УдалятьНекорректныеСимволы = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	
	СтрИсключения = ОбщегоНазначенияКлиентСервер.ПолучитьНедопустимыеСимволыВИмениФайла();
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В имени файла не должно быть следующих символов: %1'"), СтрИсключения);
	
	Результат = Истина;
	
	МассивНайденныхНедопустимыхСимволов =
		ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	Если МассивНайденныхНедопустимыхСимволов.Количество() <> 0 Тогда
		
		Результат = Ложь;
		
		Если УдалятьНекорректныеСимволы Тогда
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Результат Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры


