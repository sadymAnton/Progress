
////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Сохранение на диск Файла
// 
// Параметры
//  ДанныеФайла  - структура с данными файла (ключи структуры: "Расширение, ПолноеНаименование, АдресХранилища");
//
// Возвращаемое значение:
//   Строка - выбранный полный путь файла
Функция СохранитьКак(ДанныеФайла) Экспорт
	
	
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		
		ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
			ДанныеФайла.Расширение);
		
		Расширение = ДанныеФайла.Расширение;
		
		// выбираем путь к файлу на диске
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение,
			Расширение);
		ВыборФайла.Фильтр = Фильтр;
		
		Если ВыборФайла.Выбрать() Тогда
			
			АдресФайла = ДанныеФайла.АдресХранилища;
			
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
				ДанныеФайла.Расширение);
			
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется сохранение файла ""%1""...
				|Пожалуйста, подождите.'"), ИмяФайла);
				
			Состояние(ТекстПояснения);
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу,
				ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// Сохраним Файл из БД на диск
			Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
				
				// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
				Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
					УдалитьИзВременногоХранилища(АдресФайла);
				КонецЕсли;
				
				НовыйФайл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
				
				Состояние(НСтр("ru = 'Файл успешно сохранен.'"), , ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			ПутьВыбора = Файл.Путь;
			
			Возврат ВыборФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	Иначе  // веб клиент
		АдресФайла = ДанныеФайла.АдресХранилища;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии,
			ДанныеФайла.Расширение);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется сохранение файла ""%1""...
			|Пожалуйста, подождите.'"), ИмяФайла);
			
		Состояние(ТекстПояснения);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Только для внутреннего использования
Функция УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Для дальнейшей работы необходимо установить ""Расширения для работы с криптографией"".'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	УстановитьРасширениеРаботыСКриптографией();
	РасширениеПодключено = ПодключитьРасширениеРаботыСКриптографией();
	
	Если НЕ РасширениеПодключено Тогда
	
		ТекстСообщения = НСтр("ru = '""Расширение для работы с криптографией"" не подключено, операция прервана.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Результат = РасширениеПодключено;
	
КонецФункции

// Только для внутреннего использования
Функция ПроверитьИспользованиеИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	Если Использование = Неопределено Тогда
		Использование = Ложь;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
				Использование = Истина;
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаНаЭД        - ссылка на электронный документ, открываемый для просмотра
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра
//  ВладелецФормы     - управляемая форма
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
	
	СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект, СсылкаНаМассивСертификатов",
		СсылкаНаЭД, СсылкаНаМассивСертификатов);
	Если ВладелецФормы = Неопределено Тогда
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, , СсылкаНаЭД);
	Иначе
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, ВладелецФормы, СсылкаНаЭД);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы,
				ВладелецФормы, ПараметрыОткрытия.Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает данные по сертификатам, разрешенным для использования для авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов, массив соглашений передаётся явно в параметрах, либо "вытаскивается"
// из массива ЭД (для передачи которых требуется авторизация на сервере Такском).
//
// Параметры:
//  МассивСоглашений - массив ссылок - ссылки на соглашения, по которым требуется определить сертификаты;
//  МассивЭД - массив ссылок - ссылки на ЭД, по соглашениям из которых, требуется определить сертификаты;
//
// Возвращаемое значение:
//  Структура соответствий - ключ - соглашение об обмене ЭД, значение - структура параметров сертификата авторизации.
//
Функция СоотвСоглашенийИСтруктурСертификатовДляАвторизации(МассивСоглашений = Неопределено, МассивЭД = Неопределено) Экспорт
	
	ВозврСоответствие = Новый Соответствие;
	Отказ = Ложь;
	МассивСтруктурСертификатов = Новый Массив;
	ВыполнятьАвторизациюНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
	СтМассивовСтруктурСертификатов = Новый Структура;
	Если НЕ ВыполнятьАвторизациюНаСервере Тогда
		Попытка
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		Исключение
			МассивСтруктурСертификатов = Новый Массив;
		КонецПопытки;
		
		Если МассивСтруктурСертификатов.Количество() = 0 Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("105");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		Иначе
			СтМассивовСтруктурСертификатов.Вставить("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатов);
		КонецЕсли;
		
		Попытка
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ЗначениеЗаполнено(МассивЭД) Тогда
			СтСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатовПоМассивуЭД(
				МассивЭД, СтМассивовСтруктурСертификатов, , Ложь, Истина);
		Иначе
			СтСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатов(
				МассивСоглашений, СтМассивовСтруктурСертификатов, , Ложь, Истина);
		КонецЕсли;
		// Структура соответствий содержит соответствия: соглашений и сертификатов подписи, соглашений и сертификатов авторизации,
		// сертификатов и структур параметров этих сертификатов (структура параметров сертификатов содержит: ссылку на сертификат,
		// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
		// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
		// На основании соответствия соглашений и сертификатов авторизации и соглашения сертификатов и структур параметров,
		// сформируем соответствие соглашений и структур сертификатов, необходимое для выполнения отправки ЭД через ОЭДО.
		СоотвСертификатовИИхСтруктур = Неопределено;
		СоотвСоглашенийИСертификатовАвторизации = Неопределено;
		Если СтСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И СтСоответствий.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
			И СоотвСоглашенийИСертификатовАвторизации.Количество() > 0 Тогда
			Если НЕ ВыполнятьАвторизациюНаСервере Тогда
				Попытка
					МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
			Если НЕ Отказ Тогда
				Для Каждого Элемент Из СоотвСоглашенийИСертификатовАвторизации Цикл
					СоглашениеЭД = Элемент.Ключ;
					Сертификат = Элемент.Значение;
					Если НЕ (ЗначениеЗаполнено(Сертификат) И ЗначениеЗаполнено(СоглашениеЭД))Тогда
						Продолжить;
					КонецЕсли;
					СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, ВыполнятьАвторизациюНаСервере) Тогда
						ВозврСоответствие.Вставить(СоглашениеЭД, СтруктураСертификата);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозврСоответствие;
	
КонецФункции

// Только для внутреннего использования
Функция ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, ВыводитьСообщения = Истина) Экспорт
	
	ЗашифрованныйМаркер = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера);
	Если ЗашифрованныйМаркер <> Неопределено Тогда
		МенеджерКриптографииСоздан = Истина;
		Попытка
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровЗапросаМаркера.ПарольПользователя;
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МенеджерКриптографииСоздан = Ложь;
		КонецПопытки;
		Если МенеджерКриптографииСоздан Тогда
			ДанныеРасшифрованы = Истина;
			Попытка
				РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныйМаркер);
			Исключение
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ДанныеРасшифрованы = Ложь;
			КонецПопытки;
			Если ДанныеРасшифрованы Тогда
				Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныеДвоичныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	РезультатТеста = НСтр("ru = 'Не пройден.'");
	ПройденУспешно = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ПройденУспешно = Истина;
	КонецЕсли;
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
	КонецЕсли;

	Возврат ПройденУспешно;
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера);
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + Строка(Новый УникальныйИдентификатор) + ".test";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ЭлектронныеДокументыСлужебныйВызовСервера.ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ШаблонСообщения = НСтр("ru = 'Указанный каталог ""%1"" не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПутьККаталогу);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			УдалитьФайлы(Каталог.ПолноеИмя);
		Иначе
			УдалитьФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Выводит сообщение пользователю о нехватке прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыКлиентПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Выводит результат проверки корректности сертификата криптографии.
//
// Параметры
//  Сертификат - СправочникСсылка.СертификатыЭЦП - ссылка на сертификат
//  Контекст - ПеречислениеСсылка.КонтекстыРаботыСЭД - где выполнять проверку
//  ПарольПользователя - строка - пароль к сертификату
//
Процедура ТестНастроекСертификата(
					Сертификат,
					Контекст,
					ПарольПользователя = Неопределено,
					ВыводитьТолькоОшибки = Ложь,
					Отказ = Ложь) Экспорт
					
	ПроверитьСрокДействияСертификата(Сертификат);
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.ПараметрыСертификата(Сертификат);
	
	Если НЕ ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда

		ПараметрыФормы = Новый Структура("ПредставлениеСертификата, ВидОперации",
			Сертификат, НСтр("ru = 'Тестовая проверка шифрования'"));
		КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
		
		Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
			ПарольПользователя = КодВозврата;
		КонецЕсли;
	Иначе
		
		ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
	КонецЕсли;
	
	Если ПарольПользователя = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте") Тогда
		ТестСертификатаНаКлиенте(ПараметрыСертификата.Отпечаток, ПарольПользователя, ВыводитьТолькоОшибки, Отказ);
	Иначе
		ЭлектронныеДокументыСлужебныйВызовСервера.ТестСертификатаНаСервере(
				ПараметрыСертификата.Отпечаток,
				ПарольПользователя,
				ВыводитьТолькоОшибки,
				Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Проверяет срок действия сертификата
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыЭЦП - ссылка на проверяемый сертификат
//
Процедура ПроверитьСрокДействияСертификата(Сертификат) Экспорт
	
	РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
	РазностьДат = РеквизитыСертификата.ДатаОкончания - ОбщегоНазначенияКлиент.ДатаСеанса();
	Если НЕ РеквизитыСертификата.ОповещенОСрокеДействия И РазностьДат > 0 И РазностьДат < 60*60*24*31 Тогда
		ПараметрыФормы = Новый Структура("Сертификат", Сертификат);
		ИдентификаторФормы = Сертификат.УникальныйИдентификатор();
		ОткрытьФорму(
				"Справочник.СертификатыЭЦП.Форма.ОповещениеОбОкончанииСрокаДействия",
				ПараметрыФормы,
				,
				ИдентификаторФормы,
				);
		Операция = НСтр("ru = 'Проверка срока действия сертификата'");
		ТекстОшибки = НСтр("ru = 'Заканчивается срок действия сертификата'")+ " " + Сертификат
					+ Символы.ПС + НСтр("ru = 'Необходимо получить новый'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьПарольКСертификату(Сертификат, ПарольПользователя, ВидОперации, ПараметрыСертификата = Неопределено, Отпечаток = Неопределено, ДокументыЭД = Неопределено) Экспорт
	
	ПарольПолучен = Ложь;
	Если ПараметрыСертификата = Неопределено Тогда
		ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
	КонецЕсли;
	
	Если ПараметрыСертификата.Отозван Тогда
		ШаблонСообщения = НСтр("ru = 'Невозможно подписать документы. Сертификат (%1) отозван.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Сертификат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ПарольПользователя = Неопределено;
	Иначе
		Если ПарольПользователя <> Неопределено Тогда
			ПарольПолучен = Истина;
		ИначеЕсли ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
			ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
			ПарольПолучен = Истина;
		Иначе
			ПараметрыФормы = Новый Структура("ПредставлениеСертификата, ВидОперации, Документы", Сертификат, ВидОперации, ДокументыЭД);
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				ПарольПользователя = КодВозврата;
				ПарольПолучен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Отпечаток = ПараметрыСертификата.Отпечаток;
	
	Возврат ПарольПолучен;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Только для внутреннего использования
Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", , ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина, НовыйЭД = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ (ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД()) Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	ДопПараметры = Новый Структура;
	ОбработатьЭД(МассивСсылок, ИмяКоманды, ДопПараметры, ЭД);
	
	ДопПараметры.Свойство("НовыйЭД", НовыйЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Функция получает массив ссылок на объекты.
//
// Параметры:
//  ПараметрКоманды - ссылка на объект или массив
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же
//                 если передана пустая ссылка возвращает неопределено
//
Функция ПолучитьМассивПараметров(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Элемент ИЗ ПараметрКоманды Цикл
				МассивСсылок.Добавить(Элемент);
			КонецЦикла
	#КонецЕсли
	Иначе // пришла единичная ссылка на объект
		Если ПараметрКоманды.Пустая() Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Только для внутреннего использования
Функция ВыбратьПоместитьФайлЭДВХранилище(АдресВХранилище, Файл, УникальныйИдентификатор) Экспорт
	
	ФайлПомещенВХранилище = Ложь;
	#Если НЕ ВебКлиент Тогда

		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Текст = НСтр("ru = 'XML файл'");
		Фильтр = Текст + "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			Если МассивФайлов.Количество() <> 0 Тогда
				Файл = МассивФайлов[0];
				ФайлПомещенВХранилище = ПоместитьФайл(АдресВХранилище,Файл,, Ложь, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		
	#Иначе
		
		ФайлПомещенВХранилище = ПоместитьФайл(АдресВХранилище,, Файл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли
	
	Возврат ФайлПомещенВХранилище;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПарольПользователя - Строка, пароль установки ЭЦП данным сертификатом.
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПарольПользователя = Неопределено,
											ПараметрыСертификата = Неопределено) Экспорт
			
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	ФлагИспользованияЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.
							ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
	Если НЕ ФлагИспользованияЭЦП Тогда
		Возврат 0;
	КонецЕсли;

	Отпечаток = "";
	
	Если НЕ ПолучитьПарольКСертификату(СертификатПодписи, ПарольПользователя, НСтр("ru = 'Подписать электронные документы'"),
		ПараметрыСертификата, Отпечаток, ДобавленныеФайлы) Тогда
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ДобавленныеФайлы);
		Возврат 0;
	КонецЕсли;
	
	ПроверитьСрокДействияСертификата(СертификатПодписи);
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ПодписатьЭДОпределеннымСертификатом(
																ДобавленныеФайлы,
																СертификатПодписи,
																ПарольПользователя,
																ПараметрыСертификата);
	КонецЕсли;
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат 0;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'проверка сертификата на корректность'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
			Возврат 0;
		КонецПопыткИ;
		
		Для Каждого ТекДокумент Из ДобавленныеФайлы Цикл
			Если ЭлектронныеДокументыКлиентПереопределяемый.ЭлектронныйДокументГотовКПодписи(ТекДокумент) Тогда
				СтруктураДанныхПодписи = Новый Структура("Сертификат, Пароль, Комментарий", КриптоСертификат, ПарольПользователя,
					НСтр("ru = 'Подписание электронного документа'"));
				Попытка
					ДвоичныеДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
					ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(МенеджерКриптографии,
						ТекДокумент, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
					
					ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
					КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
					ОпределитьСтатусыПодписей(ТекДокумент);
				Исключение
					ШаблонСообщения = НСтр("ru = 'Ошибка подписи. Необходимо провести тест сертификата криптографии для: %1.
					|%2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭЦП'"),
																								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																								ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭЦП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, ВыполнятьАвторизациюНаСервере) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		СертификатПодписи = Неопределено;
		Отказ = Ложь;
		МенеджерКриптографии = Неопределено;
		Если НЕ ВыполнятьАвторизациюНаСервере Тогда
			Попытка
				МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
			Исключение
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный)
			И СтруктураСертификата.Свойство("СертификатПодписи", СертификатПодписи) Тогда
			ПарольПользователя = Неопределено;
			ЗапомнитьПарольКСертификату = Неопределено;
			ПроверитьСрокДействияСертификата(СертификатПодписи);
			Если СтруктураСертификата.Свойство("ЗапомнитьПарольКСертификату", ЗапомнитьПарольКСертификату)
				И ЗапомнитьПарольКСертификату = Истина Тогда
				СтруктураСертификата.Свойство("ПарольПользователя", ПарольПользователя);
			ИначеЕсли ПолучитьПарольКСертификату(СертификатПодписи, ПарольПользователя, НСтр("ru = 'Авторизация на сервере Такском'"), СтруктураСертификата) Тогда
				СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", Истина);
				СтруктураСертификата.Вставить("ПарольПользователя", ПарольПользователя);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			Если Не Отказ Тогда
				Если МенеджерКриптографии <> Неопределено Тогда
					Попытка
						СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
						Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
						Если ЗначениеЗаполнено(Маркер) Тогда
							Расшифрован = Истина;
							СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
						КонецЕсли;
					Исключение
					КонецПопытки;
				Иначе
					// Авторизация выполняется на сервере, все необходимые данные для расшифровки маркера есть в структуре
					// сертификата, считаем, что расшифровка маркера прошла успешно. Перед отправкой ЭД с сервера выполним
					// сам процесс расшифровки.
					Расшифрован = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка пакетов

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД,
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭЦП
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров
//
Функция ПодготовитьИОтправитьПЭД(ДобавленныеФайлы,
								 ПризнакПодписи,
								 СоотвСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	СтруктураРезультата = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(ДобавленныеФайлы,
																								ПризнакПодписи,
																								СоотвСоглашенийИСтруктурСертификатов);

	Если СтруктураРезультата.МассивПакетовДляОбработкиНаКлиенте.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ФайловыеФункцииКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСФайлами();
			Возврат СтруктураРезультата;
		КонецЕсли;

		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
				Возврат СтруктураРезультата;
			КонецЕсли;
		КонецЕсли;
		
		// По концепции БЭД электронный документ в пакете один.
		СоответствиеДанныхПакетов = ЭлектронныеДокументыСлужебныйВызовСервера.СоответствиеДанныхПакетов(
												СтруктураРезультата.МассивПакетовДляОбработкиНаКлиенте);
		Для Каждого ЭлементПакет Из СоответствиеДанныхПакетов Цикл
			Для Каждого ДанныеЭД ИЗ ЭлементПакет.Значение Цикл
				
				Если ДанныеЭД.ЭтоОтправкаПодтверждения Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыШифрования = ДанныеЭД.ПараметрыШифрования;
				Если ПараметрыШифрования = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат СтруктураРезультата;
				КонецПопытки;
				
				МассивСертификатов = Новый Массив;
				Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
					ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
					Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
				НеЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ЗашифрованныеДвоичныеДанные = МенеджерКриптографии.Зашифровать(НеЗашифрованныеДанные, МассивСертификатов);
				ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДвоичныеДанные);
			КонецЦикла;
		КонецЦикла;
		КолОтправленных = 0;
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанныхПакетов,
			СоотвСоглашенийИСтруктурСертификатов,
			КолОтправленных);
		СтруктураРезультата.КолОтправленных = СтруктураРезультата.КолОтправленных + КолОтправленных;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьМассивПакетовЭД(Знач МассивПЭД, СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	Оповестить("ОбновитьСостояниеЭД");
	
	Возврат Результат;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
Процедура ОпределитьСтатусыПодписей(ЭД) Экспорт
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	СтруктураСодержимогоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	
	РезультатПроверки = Новый Массив;
	
	Для Каждого СтрокаЭЦП Из СтруктураСодержимогоЭД.Подписи Цикл
		СтруктураЗаписи = Новый Структура("НомерСтроки", СтрокаЭЦП.НомерСтроки);
		Попытка
			ДвоичныеДанныеЭЦП = СтрокаЭЦП.Подпись;
			МенеджерКриптографии.ПроверитьПодпись(СтруктураСодержимогоЭД.ДанныеЭД, СтрокаЭЦП.Подпись);
			СтруктураЗаписи.Вставить("Результат", Истина);
			РезультатПроверки.Добавить(СтруктураЗаписи);
		Исключение
			СтруктураЗаписи.Вставить("Результат", Ложь);
			РезультатПроверки.Добавить(СтруктураЗаписи);
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'проверка электронной подписи'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(ЭД, РезультатПроверки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  КолСформированных - число, количество сформированных электронных документов,
//  КолПодписанных - число, количество подписанных электронных документов,
//  КолОтправленных - число, количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных, КолОтправленных = 0) Экспорт
	
	Если КолПодготовленных + КолОтправленных > 0 Тогда
		ДопТекст = ?(КолОтправленных > 0, "отправлено", "подготовлено к отправке");
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), %4 пакетов: (%5)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных, ДопТекст,
						КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), %2 пакетов: (%3)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, ДопТекст, КолПодготовленных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных,
						КолУтвержденных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), %2 пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, ДопТекст, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = '%1 пакетов: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДопТекст, КолПодготовленных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
		
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать,
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами,
//  ДопПараметры - структура, дополнительные параметры обработки электронных документов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы,
//       если нужно обработать только один ЭД
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект, Действие, ДопПараметры = "", ЭД = Неопределено) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолУтвержденныхЭД = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
	
	СтруктураСоответствий = Новый Структура;
	
	Если МассивСсылокНаОбъект.Количество() > 0
		И ТипЗнч(МассивСсылокНаОбъект[0]) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		СтруктураДействий = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьЭДПрисоединенныеФайлы(МассивСсылокНаОбъект,
																									  МассивСтруктурСертификатов,
																									  Действие,
																									  ДопПараметры,
																									  СтруктураСоответствий);
		Если СтруктураДействий = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
	Иначе
		СтруктураДействий = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
																							МассивСтруктурСертификатов,
																							Действие,
																							ДопПараметры,
																							ЭД,
																							СтруктураСоответствий);
	КонецЕсли;
	
	Если СтруктураДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьАвторизациюНаСервере = Неопределено;
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	НемедленнаяОтправкаЭД = Неопределено;
	
	Если ТипЗнч(СтруктураДействий) = Тип("Структура") Тогда
		СтруктураДействий.Свойство("ВыполнятьАвторизациюНаСервере", ВыполнятьАвторизациюНаСервере);
		СтруктураДействий.Свойство("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		СтруктураДействий.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		
		Если НЕ СтруктураДействий.Свойство("КолПодписанных", ИтогКолПодписанных) Тогда
			ИтогКолПодписанных = 0;
		КонецЕсли;
		
		Если НЕ СтруктураДействий.Свойство("КолПодготовленных", ИтогКолПодготовленных) Тогда
			ИтогКолПодготовленных = 0;
		КонецЕсли;
		
		Если НЕ СтруктураДействий.Свойство("КолОтправленных", ИтогКолОтправленных) Тогда
			ИтогКолОтправленных = 0;
		КонецЕсли;
		
		Если НЕ СтруктураДействий.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД) Тогда
			ИтогКолНовыхЭД = 0;
		КонецЕсли;
		
		Если ИтогКолУтвержденныхЭД = 0 И СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		// Подписание ЭД:
		
		СоотвСертификатовИИхСтруктур = Неопределено;
		СоотвСертификатовИМассивовЭДКПодписи = Неопределено;
		Если СтруктураСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И СтруктураДействий.Свойство("СоотвСертификатовИМассивовЭДКПодписи", СоотвСертификатовИМассивовЭДКПодписи) Тогда
			МассивКУдалению = Новый Массив;
			Для Каждого ТекЭл Из СоотвСертификатовИМассивовЭДКПодписи Цикл
				ПарольПользователя = Неопределено;
				СертификатПодписи = ТекЭл.Ключ;
				СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(СертификатПодписи);
				ПроверитьСрокДействияСертификата(СертификатПодписи);
				ЗапомнитьПарольКСертификату = Неопределено;
				Если СтруктураСертификата.Свойство("ЗапомнитьПарольКСертификату", ЗапомнитьПарольКСертификату)
					И ЗапомнитьПарольКСертификату = Истина Тогда
					СтруктураСертификата.Свойство("ПарольПользователя", ПарольПользователя);
				ИначеЕсли ПолучитьПарольКСертификату(СертификатПодписи, ПарольПользователя,
					НСтр("ru = 'Подписать электронные документы'"), СтруктураСертификата, , ТекЭл.Значение) Тогда
					
					СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", Истина);
					СтруктураСертификата.Вставить("ПарольПользователя", ПарольПользователя);
				Иначе
					МассивКУдалению.Добавить(СертификатПодписи);
					Продолжить;
				КонецЕсли;
				МассивЭД = ТекЭл.Значение;
				МассивЭДСбербанка = Новый Массив();
				ЭлектронныеДокументыСлужебныйВызовСервера.ПеренестиЭДСбербанкаВОтдельныйМассив(МассивЭД, МассивЭДСбербанка);
				КолПодписанныхДокументовСбербанка = 0;
				Если МассивЭДСбербанка.Количество() > 0 Тогда
					#Если НЕ ВебКлиент Тогда
						ПодписатьЭДСбербанкаОпределеннымСертификатом(
								МассивЭДСбербанка,
								СертификатПодписи,
								КолПодписанныхДокументовСбербанка);
					#Иначе
						ТекстСообщения = Нстр("ru = 'Подписать документы Сбербанка в веб-клиенте невозможно.
													|Необходимо использовать режим тонкого или толстого клиента'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					#КонецЕсли
				КонецЕсли;
				
				КолПодписанных = 0;
				Если НЕ ВыполнятьКриптооперацииНаСервере И МассивЭД.Количество() > 0 Тогда
					КолПодписанных = ПодписатьЭДОпределеннымСертификатом(МассивЭД, СертификатПодписи, ПарольПользователя, СтруктураСертификата);
				КонецЕсли;
				ИтогКолПодписанных = ИтогКолПодписанных + КолПодписанных + КолПодписанныхДокументовСбербанка;
			КонецЦикла;
			Для Каждого Элемент Из МассивКУдалению Цикл
				СоотвСертификатовИМассивовЭДКПодписи.Удалить(Элемент);
			КонецЦикла;
			Если ВыполнятьКриптооперацииНаСервере И СоотвСертификатовИМассивовЭДКПодписи.Количество() > 0 Тогда
				РезультатПодписания = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписатьЭДНаСервере(СоотвСертификатовИМассивовЭДКПодписи,
					СоотвСертификатовИИхСтруктур);
			КонецЕсли;
		КонецЕсли;
		
		// Отправка ЭД:
		
		СоотвСоглашенийИСертификатовАвторизации = Неопределено;
		СоотвСоглашенийИМассивовЭДКОтправке = Неопределено;
		СтруктураКОтправке = Неопределено;
		Если СтруктураДействий.Свойство("СтруктураКОтправке", СтруктураКОтправке) Тогда
			
			МассивКОтправке = Неопределено;
			Если СтруктураКОтправке.Свойство("БезПодписи", МассивКОтправке) И ТипЗнч(МассивКОтправке) = Тип("Массив") Тогда
				СтРезультат = ПодготовитьИОтправитьПЭД(МассивКОтправке, Ложь);
				ИтогКолОтправленных = ИтогКолОтправленных + СтРезультат.КолОтправленных;
				ИтогКолПодготовленных = ИтогКолПодготовленных + СтРезультат.КолПодготовленных;
			КонецЕсли;
			
			Если НЕ (СтруктураКОтправке.Свойство("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке)
				И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие")) Тогда
				СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
			КонецЕсли;
			Если НЕ (СтруктураКОтправке.Свойство("СПодписью", МассивКОтправке) И ТипЗнч(МассивКОтправке) = Тип("Массив")) Тогда
				МассивКОтправке = Новый Массив;
			КонецЕсли;
			
			СоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
			Если НЕ (СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
				И ТипЗнч(СоотвСоглашенийИСертификатовАвторизации) = Тип("Соответствие")) Тогда
				СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
			КонецЕсли;
			
			Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				СоглашениеЭД = ТекЭл.Ключ;
				МассивЭД = ТекЭл.Значение;
				СертификатАвторизации = СоотвСоглашенийИСертификатовАвторизации.Получить(СоглашениеЭД);
				Если НемедленнаяОтправкаЭД И ЗначениеЗаполнено(СертификатАвторизации) Тогда
					// На клиента массив ЭД к отправке через ОЭДО, может прийти только в том случае,
					// если не было возможности отправить эти ЭД с сервера (нет пароля к сертификату)
					СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(СертификатАвторизации);
					ПарольПользователя = Неопределено;
					ЗапомнитьПарольКСертификату = Неопределено;
					ДобавитьВСоответствие = Истина;
					ПроверитьСрокДействияСертификата(СертификатАвторизации);
					Если СтруктураСертификата.Свойство("ЗапомнитьПарольКСертификату", ЗапомнитьПарольКСертификату)
						И ЗапомнитьПарольКСертификату = Истина Тогда
						СтруктураСертификата.Свойство("ПарольПользователя", ПарольПользователя);
					ИначеЕсли ПолучитьПарольКСертификату(СертификатПодписи, ПарольПользователя,
							НСтр("ru = 'Авторизация на сервере Такском'"), СтруктураСертификата) Тогда
						СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", Истина);
						СтруктураСертификата.Вставить("ПарольПользователя", ПарольПользователя);
					Иначе
						ДобавитьВСоответствие = Ложь;
					КонецЕсли;
					Если ДобавитьВСоответствие
						И НЕ РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, ВыполнятьАвторизациюНаСервере) Тогда
						ДобавитьВСоответствие = Ложь;
					КонецЕсли;
					// Если нет расшифрованного маркера, то ЭД к отправке упакуем в ПЭД и поставим статус "ПодготовленКОтправке".
					Если ДобавитьВСоответствие Тогда
						СоотвСоглашенийИСтруктурСертификатов.Вставить(СоглашениеЭД, СтруктураСертификата);
					КонецЕсли;
				КонецЕсли;
				Для Каждого Элемент Из МассивЭД Цикл
					МассивКОтправке.Добавить(Элемент);
				КонецЦикла;
			КонецЦикла;
			Если МассивКОтправке.Количество() > 0 Тогда
				СтРезультата = ПодготовитьИОтправитьПЭД(МассивКОтправке, Истина, СоотвСоглашенийИСтруктурСертификатов);
				ИтогКолОтправленных = ИтогКолОтправленных + СтРезультата.КолОтправленных;
				ИтогКолПодготовленных = ИтогКолПодготовленных + СтРезультата.КолПодготовленных;
			КонецЕсли;
		КонецЕсли;
		
		Оповестить("ОбновитьСостояниеЭД");
		
		Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Показать") Тогда
			МассивОбработки = "";
			Если СтруктураДействий.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
				Для Каждого ТекЭл Из МассивОбработки Цикл
					ОткрытьЭДДляПросмотра(ТекЭл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	ВывестиИнформациюОбОбработанныхЭД(
			ИтогКолНовыхЭД,
			ИтогКолУтвержденныхЭД,
			ИтогКолПодписанных,
			ИтогКолПодготовленных,
			ИтогКолОтправленных);
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Выполняется отправка и получение пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Отправка и получение.'"), , ТекстСообщения);
	
	// Получение и отправка документов.
	СоотвСоглашенийИСтруктурСертификатов = СоотвСоглашенийИСтруктурСертификатовДляАвторизации();
	СтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(СоотвСоглашенийИСтруктурСертификатов);
	
	// Распаковываем принятые пакеты с электронными документами.
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
	
	// Распаковываем принятые пакеты с электронными документами.
	НовыеДокументы = СтруктураВозврата.НовыеДокументы;
	КоличествоНовыхЭД = НовыеДокументы.МассивВозврата.Количество();
	Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
		Если СтруктураРаспаковки.Распаковывать Тогда
			ПараметрыШифрования = Неопределено;
			ДанныеРаспаковки    = Неопределено;
			СтруктураРаспаковки.Свойство("СтруктураШифрования", ПараметрыШифрования);
			СтруктураРаспаковки.Свойство("ДанныеРаспаковки",    ДанныеРаспаковки);
			РаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД, ДанныеРаспаковки, ПараметрыШифрования);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолОтправленныхПакетов,
		КоличествоНовыхЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен электронными документами с банками

//только для внутреннего использования
Процедура РазобратьЭДВыпискаБанка(ЭД) Экспорт
	
	СсылкаНаХранилище = "";
	НомерСчета        = "";
	СоглашениеЭД      = Неопределено;
	ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеВыписки(ЭД, СсылкаНаХранилище, НомерСчета, СоглашениеЭД);
	Если НЕ ЗначениеЗаполнено(СсылкаНаХранилище) Тогда
		Возврат;
	КонецЕсли;
	ЭлектронныеДокументыКлиентПереопределяемый.РазобратьФайлВыписки(СсылкаНаХранилище, СоглашениеЭД);
	УдалитьИзВременногоХранилища(СсылкаНаХранилище);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

// Только для внутреннего использования
Процедура РаспаковатьМассивПакетовЭД(МассивПЭД) Экспорт
	
	СписокДокументов = Новый Массив;
	ПараметрыШифрования = ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьШифрованиеИСтатус(МассивПЭД);
	
	Если ПараметрыШифрования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Индекс = 0;
	
	Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
		Если СтруктураШифрования.ПарольДоступа = Неопределено Тогда
			ПарольДоступа = Неопределено;
			Если СтруктураШифрования.Зашифрован И НЕ ПарольЗадан(СтруктураШифрования, ПараметрыШифрования, ПарольДоступа) Тогда
				ПараметрыФормы = Новый Структура("ПредставлениеСертификата, ВидОперации, ПакетЭД",
					СтруктураШифрования.Сертификат, НСтр("ru = 'Расшифровать пакет электронных документов'"),
					СтруктураШифрования.Документ);
				
				КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
				Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
					ПарольДоступа = КодВозврата;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураШифрования.ПарольДоступа = ПарольДоступа;
			ПараметрыШифрования.Установить(Индекс, СтруктураШифрования);
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВсегоРаспакованоЭД = 0;
	Для Каждого ТекЭл Из МассивПЭД Цикл
		КоличествоРаспакованныхДокументов = РаспаковатьПакетЭДНаКлиенте(ТекЭл, , СтруктураШифрования);
		Если Не КоличествоРаспакованныхДокументов = Неопределено Тогда
			ВсегоРаспакованоЭД = ВсегоРаспакованоЭД + КоличествоРаспакованныхДокументов;
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Распаковано электронных документов: (%1)'"), ВсегоРаспакованоЭД);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с извещением о получении

// В функции выполняются действия по служебным ЭД (извещение о получении, уведомление об уточнении):
// формирование, утверждение, подписание, отправка.
//
// Параметры:
//  МассивЭД - массив - содержит ссылки на ЭД, по которым требуется сформировать служебные ЭД (электронные
//    документы, владельцы обрабатываемых служебных ЭД).
//  ВидЭД - перечисление - вид ЭД, которые надо обработать (может принимать значения: Извещение о получении
//    и уведомление об уточнении).
//  ТекстУведомления - строка - текст уведомления, введённый пользователем, отклонившим ЭД (имеет смысл,
//    только для ВидЭД = УведомлениеОбУточнении).
//
// Возвращаемое значение:
//  Булево - Истина - действия со служебными ЭД выполнены, иначе - Ложь.
//
Функция СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУведомления = "") Экспорт
	
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	КолОтправленных   = 0;
	
	Если ТипЗнч(МассивЭД) = Тип("Массив") Тогда
		// Структура соответствий содержит соответствия: соглашений и сертификатов подписи, соглашений и сертификатов авторизации,
		// сертификатов и структур параметров этих сертификатов (структура параметров сертификатов содержит: ссылку на сертификат,
		// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
		// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
		НемедленнаяОтправкаЭД = Неопределено;
		ВыполнятьАвторизациюНаСервере = Неопределено;
		ВыполнятьКриптооперацииНаСервере = Неопределено;
		ЭлектронныеДокументыСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере,
			ВыполнятьАвторизациюНаСервере, НемедленнаяОтправкаЭД);
		СтМассивовСтруктурСертификатов = Новый Структура;
		Если НЕ ВыполнятьКриптооперацииНаСервере ИЛИ (НЕ ВыполнятьАвторизациюНаСервере И НемедленнаяОтправкаЭД) Тогда
			Попытка
				МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
			Исключение
				МассивСтруктурСертификатов = Новый Массив;
			КонецПопытки;
			СтМассивовСтруктурСертификатов.Вставить("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатов);
		КонецЕсли;
		СтруктураСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатовПоМассивуЭД(
			МассивЭД, СтМассивовСтруктурСертификатов, ВидЭД, Истина, НемедленнаяОтправкаЭД);
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если СтруктураСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур) Тогда
			Попытка
				МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
			МассивКУдалению = Новый Массив;
			Для Каждого Элемент Из СоотвСертификатовИИхСтруктур Цикл
				СтруктураСертификата = Элемент.Значение;
				Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
					ЗапомнитьПарольКСертификату = Неопределено;
					ПарольПользователя = Неопределено;
					ПроверитьСрокДействияСертификата(Элемент.Ключ);
					Если СтруктураСертификата.Свойство("ЗапомнитьПарольКСертификату", ЗапомнитьПарольКСертификату)
						И НЕ ЗапомнитьПарольКСертификату Тогда
						Если НЕ ПолучитьПарольКСертификату(Элемент.Ключ, ПарольПользователя,
							НСтр("ru = 'Подписать(отправить) служебные ЭД'"), СтруктураСертификата) Тогда
							МассивКУдалению.Добавить(Элемент.Ключ);
							Продолжить;
						КонецЕсли;
						СтруктураСертификата.ПарольПользователя = ПарольПользователя;
						СтруктураСертификата.ЗапомнитьПарольКСертификату = Истина;
					КонецЕсли;
					
					// Если в системе настроена отложенная отправка, то маркеры не нужны.
					Если НЕ НемедленнаяОтправкаЭД Тогда
						Продолжить;
					КонецЕсли;
					Маркер = Неопределено;
					МаркерЗашифрованный = Неопределено;
					Если НЕ СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер)
						И СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
						И МенеджерКриптографии <> Неопределено Тогда
						Попытка
							СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
							Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
							СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Удалим из соответствия сертификаты, по которым пользователь отказался ввести пароль.
			Для Каждого Элемент Из МассивКУдалению Цикл
				СоотвСертификатовИИхСтруктур.Удалить(Элемент);
			КонецЦикла;
		КонецЕсли;
		
		СтСоотвСоглашенийИМассивовЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияСоСлужебнымиЭД(МассивЭД,
			ВидЭД, СтруктураСоответствий, ТекстУведомления);
		
		СтруктураСчетчиков = СтСоотвСоглашенийИМассивовЭД.СтруктураСчетчиков;
		КолСформированных = КолСформированных + СтруктураСчетчиков.КолСформированных;
		КолУтвержденных   = КолУтвержденных + СтруктураСчетчиков.КолУтвержденных;
		КолПодписанных    = КолПодписанных + СтруктураСчетчиков.КолПодписанных;
		КолПодготовленных = КолПодготовленных + СтруктураСчетчиков.КолПодготовленных;
		КолОтправленных   = КолОтправленных + СтруктураСчетчиков.КолОтправленных;
		
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если СтруктураСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
			
			СоотвСоглашенийИСертификатовПодписи = Неопределено;
			СоотвСоглашенийИСертификатовАвторизации = Неопределено;
			СоотвСоглашенийИМассивовЭД = Неопределено;
			МассивЭДКОтправке = Новый Массив;
			СоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
			
			Если СтСоотвСоглашенийИМассивовЭД.Свойство("СоотвСоглашенийИМассивовЭДКПодписи", СоотвСоглашенийИМассивовЭД)
				И СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовПодписи", СоотвСоглашенийИСертификатовПодписи)
				И СоотвСоглашенийИМассивовЭД.Количество() > 0 И СоотвСоглашенийИСертификатовПодписи.Количество() > 0
				И НЕ ВыполнятьКриптооперацииНаСервере Тогда
				
				Если НЕ СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовАвторизации",
					СоотвСоглашенийИСертификатовАвторизации) Тогда
					СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
				КонецЕсли;
				
				Для Каждого Элемент Из СоотвСоглашенийИМассивовЭД Цикл
					СоглашениеЭД = Элемент.Ключ;
					Сертификат = СоотвСоглашенийИСертификатовПодписи.Получить(СоглашениеЭД);
					Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
					Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
						Продолжить;
					КонецЕсли;
					МассивЭДкОбработке = Элемент.Значение;
					Если МассивЭДкОбработке.Количество() > 0 Тогда
						Подписан = ПодписатьЭДОпределеннымСертификатом(МассивЭДкОбработке, Сертификат, , СтруктураСертификата);
						// Добавим подписанные ЭД в массив к отправке и сформируем соответствие соглашений и структур сертификатов.
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
							ДобавитьВМассивКОтправке = Ложь;
							Сертификат = СоотвСоглашенийИСертификатовАвторизации.Получить(СоглашениеЭД);
							Если ЗначениеЗаполнено(Сертификат) ИЛИ НЕ НемедленнаяОтправкаЭД Тогда
								СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
								Если ЗначениеЗаполнено(СтруктураСертификата) Тогда
									СоотвСоглашенийИСтруктурСертификатов.Вставить(СоглашениеЭД, СтруктураСертификата);
									ДобавитьВМассивКОтправке = Истина;
								КонецЕсли;
							КонецЕсли;
							// Если в системе настроена отложенная отправка, то сертификаты авторизации не нужны.
							Если НЕ НемедленнаяОтправкаЭД ИЛИ ДобавитьВМассивКОтправке Тогда
								Для Каждого ПодписанныйЭД Из МассивЭДкОбработке Цикл
									МассивЭДКОтправке.Добавить(ПодписанныйЭД);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если МассивЭДКОтправке.Количество() > 0 Тогда
				СтруктураРезультата = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправке,
					Истина, СоотвСоглашенийИСтруктурСертификатов);
				Отправленных = 0;
				Если СтруктураРезультата.Свойство("КолОтправленных", Отправленных) И Отправленных > 0 Тогда
					КолОтправленных = КолОтправленных + Отправленных;
				КонецЕсли;
				Подготовленных = 0;
				Если СтруктураРезультата.Свойство("КолПодготовленных", Подготовленных) И Подготовленных > 0 Тогда
					КолПодготовленных = КолПодготовленных + Подготовленных;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОбработанныеЭД = Ложь;
	
	Если КолСформированных + КолПодписанных + КолОтправленных > 0 Тогда
		Оповестить("ОбновитьСостояниеЭД");
		ЕстьОбработанныеЭД = Истина;
	КонецЕсли;
	
	Возврат ЕстьОбработанныеЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда

// Осуществляет отправку платежных поручений в банк
//
// Параметры
//  <МассивЭД>  - <массив> - массив ссылок на электронные документы к отправке
//  <КолОтправленных>  - <число> - количество отправленных платежных документов
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//
Процедура ОтправитьПлатежныеПорученияСбербанк(МассивЭД, КолОтправленных, СоглашениеЭД) Экспорт

	КаналСоздан = Ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан);
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолОтправленных = МассивЭД.Количество();
	 
	Попытка
		
		ИнициализироватьWSОпределение();
		URI = "http://upg.sbns.bssys.com/";
		ИмяСервиса = "UniversalPaymentGateImplService";
		ИмяТочкиПодключения = "UniversalPaymentGateImplPort";
		WSПрокси = Новый WSПрокси(глWSОпределениеСбербанк, URI, ИмяСервиса, ИмяТочкиПодключения);
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema","string");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		Для Каждого ЭД Из МассивЭД Цикл
			ВремФайл = ПолучитьИмяВременногоФайла();
			СтруктураДанныхЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьФайлПакетаСберБанка(ЭД, СоглашениеЭД);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураДанныхЭД.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(ВремФайл);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайл);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип,СтрокаXML);
			ВыбЭл.requests.Добавить(СтрокаЗначение);
			УдалитьФайлы(ВремФайл);
		КонецЦикла;
		
		ВыбЭл.Проверить();
		
		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл); 
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Отправка платежных поручений'"),
														ТекстСообщения);
		
		XDTOРезультат.Проверить();
				
		МассивИдентификаторов = Новый Массив;
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			МассивИдентификаторов.Добавить(Ответ);
		КонецЦикла;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
														МассивИдентификаторов,
														СоглашениеЭД,
														ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение"));
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Получены идентификаторы отправки платежных поручений'"),
														ТекстСообщения);
			
		Для Каждого ЭД Из МассивЭД Цикл
			ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусЭД(
														ЭД,
														ПредопределенноеЗначение("Перечисление.СтатусыЭД.Отправлен"));
		КонецЦикла;
			
	Исключение
		
		ВидОперации = НСтр("ru='Отправка платежных поручений в банк'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения);
		КолОтправленных = 0;
		
	КонецПопытки;

КонецПроцедуры

// Только для внутреннего использования
Процедура ПолучитьСостоянияПлатежныхПоручений(СоглашениеЭД) Экспорт

	МассивЗапросов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивЗапросовСостоянийПлатежныхПоручений(СоглашениеЭД);
	
	Попытка
		
		ИнициализироватьWSОпределение();
		URI = "http://upg.sbns.bssys.com/";
		ИмяСервиса = "UniversalPaymentGateImplService";
		ИмяТочкиПодключения = "UniversalPaymentGateImplPort";
		WSПрокси = Новый WSПрокси(глWSОпределениеСбербанк, URI, ИмяСервиса, ИмяТочкиПодключения);
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
		
		Для Каждого Элемент ИЗ МассивЗапросов Цикл
			
			ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);

			ВыбЭл.requests.Добавить(Элемент);
			
			ВыбЭл.Проверить();

			XDTOРезультат = WSПрокси.sendRequests(ВыбЭл);
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															Нстр("ru = 'Оправлен запрос статуса документа'"),
															ТекстСообщения);
			
			XDTOРезультат.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															Нстр("ru = 'Получены идентификатор запроса статуса документа'"),
															ТекстСообщения);
			
			МассивИдентификаторов = Новый Массив;
			Для Каждого Ответ Из XDTOРезультат.return Цикл
				МассивИдентификаторов.Добавить(Ответ);
			КонецЦикла;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
															МассивИдентификаторов,
															СоглашениеЭД,
															ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение"));
		КонецЦикла;
	Исключение
		
		ВидОперации = НСтр("ru = 'Получение информации о состоянии платежных поручений'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
						+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения);
		КолОтправленных = 0;
		
	КонецПопытки;

КонецПроцедуры

// Проверяет наличие связи с банком и выводит сообщение о результате
//
//
Процедура ПроверитьНаличиеСвязиСБанком(СоглашениеЭД) Экспорт
	
	КаналСоздан = Ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан);
	
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		
		ИнициализироватьWSОпределение();
		URI = "http://upg.sbns.bssys.com/";
		ИмяСервиса = "UniversalPaymentGateImplService";
		ИмяТочкиПодключения = "UniversalPaymentGateImplPort";
		WSПрокси = Новый WSПрокси(глWSОпределениеСбербанк, URI, ИмяСервиса, ИмяТочкиПодключения);
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		СтрокаХМЛ = "Test from 1C";
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
		СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип,СтрокаХМЛ);
			
		ВыбЭл.requests.Добавить(СтрокаЗначение);
		ВыбЭл.Проверить();
		
		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл); 
		
		ТекстСообщения = НСтр("ru = 'Тест выполнен успешно !'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	Исключение
		
		ВидОперации = НСтр("ru = 'Тест соединения'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
						+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Отправляет в банк запрос на ночные выписки
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение
//
Процедура ОтправитьЗапросНаНочныеВыписки(СоглашениеЭД) Экспорт
	
	ПодключитьМенеджерДляРаботыСБанком();
		
	Если глКриптоДЛЛСбербанк = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПовторнаяАвторизация = Ложь;
	
	Если НЕ СоглашениеЭД = глТекущееСоглашениеСбербанк И ЗначениеЗаполнено(глТекущееСоглашениеСбербанк) Тогда
		СессияЗавершена = Ложь;
		ЗавершитьСессиюНаТокене(СессияЗавершена);
		Если НЕ СессияЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(глТекущееСоглашениеСбербанк) ИЛИ глНомерКонтейнераСбербанк = 0 Тогда
		ДанныеАвторизации = ОткрытьФормуМодально(
									"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ФормаЗапросаДанныхАвторизации");
		ПовторнаяАвторизация = Истина;
	КонецЕсли;
	
	Если ПовторнаяАвторизация Тогда
		
		Если НЕ глНомерКонтейнераСбербанк = 0 Тогда
			СессияЗавершена = Ложь;
			ЗавершитьСессиюНаТокене(СессияЗавершена);
			Если НЕ СессияЗавершена Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если (ДанныеАвторизации = Неопределено ИЛИ ДанныеАвторизации.НомерКонтейнера = 0) Тогда
			Возврат
		КонецЕсли;
		глНомерКонтейнераСбербанк   = ДанныеАвторизации.НомерКонтейнера;
		глПинКодСбербанк            = ДанныеАвторизации.ПинКод;
		глТекущееСоглашениеСбербанк = СоглашениеЭД;
	КонецЕсли;
	СертификатПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.СертификатИзСоглашенияЭД(
																	СоглашениеЭД,
																	глНомерКонтейнераСбербанк);
	Если Не ЗначениеЗаполнено(СертификатПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	ПинКод = глПинКодСбербанк;
	
	КаналСоздан = ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан);
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
		
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	ИдентификаторОрганизации = ЭлектронныеДокументыСлужебныйВызовСервера.ИдентификаторОрганизации(СоглашениеЭД);
	СтрокаПодписи = "Incoming" + Символ(10) + "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
					+ "RequestId=" + ИдентификаторЗапроса;

	СтрокаПодписиBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаBase64(СтрокаПодписи);

	Операция = Нстр("ru = 'Формирование запроса на ночную выписку'");
	ЭЦП="";
	Попытка
		ИдентификаторСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.ИдентификаторСертификата(СертификатПодписи);
		Рез = глКриптоДЛЛСбербанк.ПодписатьДанныеЧерезVPNKeyTLS(СтрокаПодписиBase64, ИдентификаторСертификата, ЭЦП);
		Если Рез <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'При подписании ЭЦП произошла ошибка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
			ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при подписании вернула код ошибки'") + " " + Рез;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
			ОчиститьДанныеАвторизации();
			Возврат;
		КонецЕсли;
	Исключение
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'При подписании ЭЦП произошла ошибка'") + Символы.ПС
						+ НСтр("ru='Подробности в журнале регистрации'");
		ТекстОшибки = ОписаниеОшибки();
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
		Возврат;
	КонецПопытки;

	СтрокаЗапроса = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(ИдентификаторЗапроса,
																						ИдентификаторОрганизации,
																						ЭЦП,
																						СертификатПодписи);
		
	Если Не ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ИнициализироватьWSОпределение();
		URI = "http://upg.sbns.bssys.com/";
		ИмяСервиса = "UniversalPaymentGateImplService";
		ИмяТочкиПодключения = "UniversalPaymentGateImplPort";
		WSПрокси = Новый WSПрокси(глWSОпределениеСбербанк, URI, ИмяСервиса, ИмяТочкиПодключения);
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип,СтрокаЗапроса);
		
		ВыбЭл.requests.Добавить(СтрокаЗначение);

		ВыбЭл.Проверить();

		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл);
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Запрос на ночную выписку отправлен в банк'"),
														ТекстСообщения);
		
		МассивИдентификаторов = Новый Массив;
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			МассивИдентификаторов.Добавить(Ответ);
		КонецЦикла;
	
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
														МассивИдентификаторов,
														СоглашениеЭД,
														ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки"));
				
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Получен идентификатор отправки запроса на ночную выписку'"),
														ТекстСообщения);
		
	Исключение

		ВидОперации = НСтр("ru = 'Запрос ночной выписки банка'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

// Получает статусы и идентификаторы отправленных платежных документов
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисление.ВидыЭД> - вид электронного документа
//
Процедура ПолучитьРезультатыОбработкиЗапросов(СоглашениеЭД, ВидЭД) Экспорт
		
	СтрокаЗапроса = "";
	ИдентификаторЗапроса = "";
	МассивИдентификаторов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивИдентификаторовЗапроса(СоглашениеЭД, ВидЭД);
		
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Идентификатор ИЗ МассивИдентификаторов Цикл
	
		Попытка
			
			ИнициализироватьWSОпределение();
			URI = "http://upg.sbns.bssys.com/";
			ИмяСервиса = "UniversalPaymentGateImplService";
			ИмяТочкиПодключения = "UniversalPaymentGateImplPort";
			WSПрокси = Новый WSПрокси(глWSОпределениеСбербанк, URI, ИмяСервиса, ИмяТочкиПодключения);
			
			ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "getRequestStatus");
			СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
			ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
			СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип, Идентификатор);

			ВыбЭл.requests.Добавить(СтрокаЗначение);
			
			ВыбЭл.Проверить();
			
			XDTOРезультат = WSПрокси.getRequestStatus(ВыбЭл); 
			
			Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного платежного поручения'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного платежного поручения'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного запроса банковской выписки'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного запроса банковской выписки'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного запроса ночной выписки'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного запроса ночной выписки'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор запроса готовой выписки банка'");
				ОписаниеПолучения = Нстр("ru = 'Получена банковская выписка'");
			КонецЕсли;
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															ОписаниеОтправки,
															ТекстСообщения);
			
			XDTOРезультат.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															ОписаниеПолучения,
															ТекстСообщения);
			
			МассивНовыхЭД = Новый Массив;
			
			МассивОтветов = Новый Массив;
			
			Для Каждого Ответ ИЗ XDTOРезультат.Return Цикл
				
				Если  Ответ = "<!--NOT PROCESSED YET-->" Тогда
					Продолжить; // Запрос еще не был обработан
				КонецЕсли;
				
				МассивОтветов.Добавить(Ответ);
	
			КонецЦикла;
			
			Если МассивОтветов.Количество() > 0 Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОтветыСбербанка(
																	МассивОтветов,
																	СоглашениеЭД,
																	ВидЭД,
																	МассивНовыхЭД,
																	Идентификатор);
			КонецЕсли;
			
			Для Каждого НовыйЭД ИЗ МассивНовыхЭД Цикл
				ОпределитьСтатусыПодписейСбербанка(НовыйЭД);
			КонецЦикла

		Исключение
			
			ВидОперации = НСтр("ru = 'Получение информации о результатах обработки документов'");
			ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																						ОписаниеОшибки(),
																						ТекстСообщения);
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;

	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Отправляет в банк запрос на получение готовых  выписок банка
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//
Процедура ОтправитьЗапросНаПолучениеГотовыхВыписок(СоглашениеЭД) Экспорт
	
	Попытка
		
		СтрокаЗначение = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстЗапросаСостоянияЗапросовВыпискиБанка(СоглашениеЭД);
		
		Если ПустаяСтрока(СтрокаЗначение) Тогда
			Возврат;
		КонецЕсли;
		
		ИнициализироватьWSОпределение();
		URI = "http://upg.sbns.bssys.com/";
		ИмяСервиса = "UniversalPaymentGateImplService";
		ИмяТочкиПодключения = "UniversalPaymentGateImplPort";
		WSПрокси = Новый WSПрокси(глWSОпределениеСбербанк, URI, ИмяСервиса, ИмяТочкиПодключения);
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		ВыбЭл.requests.Добавить(СтрокаЗначение);
		
		ВыбЭл.Проверить();
		
		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл); 
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														НСтр("ru = 'Оправлен запрос на получение готовой выписки'"),
														ТекстСообщения);
			
		XDTOРезультат.Проверить();
		
		МассивИдентификаторов = Новый Массив;
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			МассивИдентификаторов.Добавить(Ответ);
		КонецЦикла;
	
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
														МассивИдентификаторов,
														СоглашениеЭД,
														ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка"));
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														НСтр("ru = 'Получены идентификаторы банковских выписок"),
														ТекстСообщения);
	Исключение
		
		ВидОперации = НСтр("ru = 'Получение банковских выписок'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
						+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// только для внутреннего использования
Процедура ЗапроситьВыпискуСбербанк(СоглашениеЭД, Организация, ДатаНачала, ДатаОкончания, Ночная = Ложь, ЭД = Неопределено) Экспорт
	
	ЭД = "";
	ИдентификаторЗапроса = "";
	СтрокаЗапроса = "";
	
	ДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДоступныеБанковскиеСертификаты(
													СоглашениеЭД,
													ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки"));
	Если ДоступныеСертификаты.Количество()=0 Тогда
		ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат подписи для организации <%1> и вида документа <Запрос выписки>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьЭДЗапросаВыписки(
															СоглашениеЭД,
															ДатаНачала,
															ДатаОкончания,
															ЭД);
			
	Если Не ЗначениеЗаполнено(ЭД) Тогда
		Возврат;
	КонецЕсли;
		
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ЭД);
	
	КоличествоПодписанных = 0;
	Если ДоступныеСертификаты.Количество()=1 Тогда
		ПодписатьЭДСбербанкаОпределеннымСертификатом(МассивЭД, ДоступныеСертификаты[0], КоличествоПодписанных);
	Иначе
		ПодписатьЭДСбербанкаОпределеннымСертификатом(МассивЭД, Неопределено, КоличествоПодписанных);
	КонецЕсли;
	Если КоличествоПодписанных = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КаналСоздан = ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан);
	
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ИнициализироватьWSОпределение();
		URI = "http://upg.sbns.bssys.com/";
		ИмяСервиса = "UniversalPaymentGateImplService";
		ИмяТочкиПодключения = "UniversalPaymentGateImplPort";
		WSПрокси = Новый WSПрокси(глWSОпределениеСбербанк, URI, ИмяСервиса, ИмяТочкиПодключения);
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema","string");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		ВремФайл = ПолучитьИмяВременногоФайла();
		СтруктураДанныхЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьФайлПакетаБанка(ЭД, СоглашениеЭД);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураДанныхЭД.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанные.Записать(ВремФайл);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ВремФайл);
		УдалитьФайлы(ВремФайл);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();

		СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип,СтрокаXML);
		
		ВыбЭл.requests.Добавить(СтрокаЗначение);
						
		ВыбЭл.Проверить();
				
		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл); 
	
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Запрос на выписку отправлен в банк'"),
														ТекстСообщения);
		
		МассивИдентификаторов = Новый Массив;
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			МассивИдентификаторов.Добавить(Ответ);
		КонецЦикла;
	
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
														МассивИдентификаторов,
														СоглашениеЭД,
														ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки"));
				
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Получен идентификатор отправки запроса на выписку'"),
														ТекстСообщения);
				
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусЭД(ЭД, Перечисления.СтатусыЭД.Отправлен);
				
	Исключение
		
		ВидОперации = НСтр("ru = 'Запрос выписки банка'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС + НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ОписаниеОшибки(), ТекстСообщения);
	КонецПопытки;
		
КонецПроцедуры

#КонецЕсли

#Если НЕ ВебКлиент Тогда

//Получает данные сертификата с токена банка
//
// Возвращаемое значение:
//  Структура - содержит двоичные данные и идентификатор сертификата банка
//
Функция ПолучитьДанныеСертификатаНаТокене() Экспорт
	
	АвторизацияВыполнена = Ложь;
	АвторизоватьсяНаТокене(Неопределено, АвторизацияВыполнена);
	Если НЕ АвторизацияВыполнена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерБизнесСистемы = ПолучитьНомерБизнесСистемы();
	Если НомерБизнесСистемы = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИдентификаторСертификата = ПолучитьИдентификаторСертификата();
	Если Не ЗначениеЗаполнено(ИдентификаторСертификата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификата(ИдентификаторСертификата);
	
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	СтруктураВозврата.Вставить("ИдентификаторСертификата",  ИдентификаторСертификата);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Добавляет подпись для документа сбербанка с использованием токена
//
// Параметры
//  <ДобавленныеФайлы>  - <Массив> - содержит ссылки на электронные документы
//  <СертификатПодписи>  - <СправочникСсылка.СертификатыЭЦП> - ссылка на сертификат подписи
//  <КоличествоПодписанныхЭД>  - <Число> - количество удачно подписанных ЭД
//
Процедура ПодписатьЭДСбербанкаОпределеннымСертификатом(
								ДобавленныеФайлы,
								СертификатПодписи,
								КоличествоПодписанныхЭД) Экспорт
	
	Операция = Нстр("ru = 'Подписание электронного документа'");
	
	ПодключитьМенеджерДляРаботыСБанком();
		
	Если глКриптоДЛЛСбербанк = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоглашениеЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СоглашениеЭД(ДобавленныеФайлы[0]);
	ПовторнаяАвторизация = Ложь;
	
	Если НЕ СоглашениеЭД = глТекущееСоглашениеСбербанк И ЗначениеЗаполнено(глТекущееСоглашениеСбербанк) Тогда
		СессияЗавершена = Ложь;
		ЗавершитьСессиюНаТокене(СессияЗавершена);
		Если НЕ СессияЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		НомерКонтейнера = ЭлектронныеДокументыСлужебныйВызовСервера.НомерКонтейнера(СертификатПодписи, СоглашениеЭД);
		Если НЕ НомерКонтейнера = глНомерКонтейнераСбербанк Тогда
			Параметры = Новый Структура("НомерКонтейнера", НомерКонтейнера);
			ДанныеАвторизации = ОткрытьФормуМодально(
										"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ФормаЗапросаДанныхАвторизации",
										Параметры);
			ПовторнаяАвторизация = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(глТекущееСоглашениеСбербанк) ИЛИ глНомерКонтейнераСбербанк = 0 Тогда
		ДанныеАвторизации = ОткрытьФормуМодально(
									"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ФормаЗапросаДанныхАвторизации");
		ПовторнаяАвторизация = Истина;
	КонецЕсли;
	
	Если ПовторнаяАвторизация Тогда
		
		Если НЕ глНомерКонтейнераСбербанк = 0 Тогда
			СессияЗавершена = Ложь;
			ЗавершитьСессиюНаТокене(СессияЗавершена);
			Если НЕ СессияЗавершена Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если (ДанныеАвторизации = Неопределено ИЛИ ДанныеАвторизации.НомерКонтейнера = 0) Тогда
			Возврат
		КонецЕсли;
		глНомерКонтейнераСбербанк   = ДанныеАвторизации.НомерКонтейнера;
		глПинКодСбербанк            = ДанныеАвторизации.ПинКод;
		глТекущееСоглашениеСбербанк = СоглашениеЭД;
	КонецЕсли;
	СертификатПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.СертификатИзСоглашенияЭД(
																	СоглашениеЭД,
																	глНомерКонтейнераСбербанк);
	Если Не ЗначениеЗаполнено(СертификатПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.ПараметрыСертификата(СертификатПодписи);
	
	ПинКод = глПинКодСбербанк;
	
	КаналУстановлен = Ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналУстановлен);
	Если Не КаналУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭД ИЗ ДобавленныеФайлы Цикл
		СтрокаПодписиBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписанныеДанныеBase64(ЭД);
		ЭЦП="";
		Попытка
			ИдентификаторСертификата = ПараметрыСертификата.Идентификатор;
			Рез = глКриптоДЛЛСбербанк.ПодписатьДанныеЧерезVPNKeyTLS(СтрокаПодписиBase64, ИдентификаторСертификата, ЭЦП);
			Если Рез <> 0 Тогда
				ТекстСообщения = НСтр("ru = 'При подписании ЭЦП произошла ошибка'") + Символы.ПС
								+ НСтр("ru = 'Подробности в журнале регистрации'");
				ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при подписании вернула код ошибки'")+ " " + Рез;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
				ОчиститьДанныеАвторизации();
				Возврат;
			КонецЕсли;
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'При подписании ЭЦП произошла ошибка'") + Символы.ПС
							+ НСтр("ru='Подробности в журнале регистрации'");
			ТекстОшибки = ОписаниеОшибки();
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		ДвоичныеДанныеЭЦП = Base64Значение(ЭЦП);
		
		ДанныеПодписи = Новый Структура("НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи,
										|КомуВыданСертификат, ДвоичныеДанныеСертификата");
		
		ДанныеПодписи.Отпечаток                  = ПараметрыСертификата.Отпечаток;
		ДанныеПодписи.ДатаПодписи                = ОбщегоНазначенияКлиент.ДатаСеанса();
		ДанныеПодписи.ДвоичныеДанныеСертификата  = ПараметрыСертификата.ФайлСертификата.Получить();
		ДанныеПодписи.НоваяПодписьДвоичныеДанные = ДвоичныеДанныеЭЦП;
		ДанныеПодписи.КомуВыданСертификат        = ПараметрыСертификата.Наименование;

		ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ЭД, ДанныеПодписи);
		
		Комментарий = НСтр("ru = 'Установил подпись: %1, сертификат: %2'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														Комментарий,
														ПользователиКлиентСервер.АвторизованныйПользователь(),
														СертификатПодписи);
		
		ШаболонСообщения = НСтр("ru = 'Выполнение операции: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаболонСообщения, Операция);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьВЖурналРегистрации(
														ТекстСообщения,
														"Информация",
														ЭД,
														Комментарий);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭД);
		
		ОпределитьСтатусыПодписейСбербанка(ЭД);
		
		КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает зашифрованный канал с банком через токен
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <КаналСоздан>  - <Булево> - признак, что канал создан
//
Процедура УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан) Экспорт
	
	КаналСоздан = Ложь;
	Операция = Нстр("ru = 'Установка виртуального канала'");
	
	ПодключитьМенеджерДляРаботыСБанком();
	Если глКриптоДЛЛСбербанк = Неопределено Тогда
		глУстановленКаналСоСбербанком = Ложь;
		Возврат;
	КонецЕсли;
	
	Если глУстановленКаналСоСбербанком И глТекущееСоглашениеСбербанк = СоглашениеЭД Тогда
		КаналСоздан = Истина;
		Возврат;
	КонецЕсли;
	
	Если глНомерКонтейнераСбербанк = 0 Тогда
		ДанныеАвторизации = ОткрытьФормуМодально(
								"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ФормаЗапросаДанныхАвторизации");
		Если ДанныеАвторизации=Неопределено ИЛИ ДанныеАвторизации.НомерКонтейнера = 0 Тогда
			глУстановленКаналСоСбербанком = Ложь;
			Возврат;
		КонецЕсли;
		глНомерКонтейнераСбербанк = ДанныеАвторизации.НомерКонтейнера;
		глПинКодСбербанк = ДанныеАвторизации.ПинКод;
		глТекущееСоглашениеСбербанк = СоглашениеЭД;
	КонецЕсли;
	
	АвторизацияВыполнена = Ложь;
	АвторизоватьсяНаТокене(СоглашениеЭД, АвторизацияВыполнена);
	Если НЕ АвторизацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	НомерБизнесСистемы = ПолучитьНомерБизнесСистемы();
	
	Если НомерБизнесСистемы = -1 Тогда //не удалось определить бизнес систему
		Возврат;
	КонецЕсли;
	РезультатПодключения = глКриптоДЛЛСбербанк.УстановитьTLSКаналСБизнесСистемой(НомерБизнесСистемы);
	
	Если НЕ РезультатПодключения = 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не удалось установить связь с сервером.'") + Символы.ПС
			+ Нстр("ru = 'Необходимо проверить работу TLS VPN Key.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при установке виртуального канала вернула код ошибки'")
		+ " " + РезультатПодключения;
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
		ОчиститьДанныеАвторизации();
		Возврат;
	КонецЕсли;
	
	глУстановленКаналСоСбербанком = Истина;
	КаналСоздан = Истина;
	
КонецПроцедуры

// Определяет валидность установленных подписей и сохраняет результат в ЭД
//
// Параметры: 
// <СправочникСсылка.ЭДПрисоединенныеФайлы> - ссылка на электронный документ
//
Процедура ОпределитьСтатусыПодписейСберБанка(ЭД) Экспорт
	
	ПодключитьМенеджерДляРаботыСБанком();
	
	ДопИнформацияПоЭД = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
	
	СоответствиеПодписейИСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеУстановленныхПодписейИСертификатов(ЭД);
	
	СтрокаФорматBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписанныеДанныеBase64(ЭД);
	
	РезультатПроверки = Новый Массив();
	
	СоглашениеЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СоглашениеЭД(ЭД);

	КаналУстановлен = Ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналУстановлен);
	Если Не КаналУстановлен Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого Элемент Из СоответствиеПодписейИСертификатов Цикл
		СтрокаСертификат = Элемент.Значение;
		Подпись = Элемент.Ключ;
		Попытка
			КодВозврата = глКриптоДЛЛСбербанк.ПроверитьПодписьДанныхЧерезVPNKeyTLS(
																СтрокаФорматBase64,
																Подпись,
																СтрокаСертификат);
			Если КодВозврата = 0 Тогда
				РезультатПроверки.Добавить(Истина);
			Иначе
				РезультатПроверки.Добавить(Ложь);
			КонецЕсли;
			ТекстДляЖурнала = НСтр("ru = 'Проверена подпись для электронного документа: " + ЭД + Символы.ПС
							+ "Результат проверки: " + "подпись " + ?(КодВозврата = 0, "верна","неверна") + "'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьВЖурналРегистрации(
															НСтр("ru = 'Выполнение операции: Проверка подписи.'"),
															"Информация",
															ЭД,
															ТекстДляЖурнала);
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Во время проверки валидности электронной подписи произошла ошибка.
								|Дополнительное описание:
								|%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьВЖурналРегистрации(
															НСтр("ru = 'Проверка валидности электронной подписи'"),
															"Ошибка",
															,
															ОписаниеОшибки);
			РезультатПроверки.Добавить(Неопределено);
		КонецПопытки;
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ЗафиксироватьРезультатПроверкиЭЦП(ЭД, РезультатПроверки);

КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

// Расшифровывает и распаковывает пакет электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, исследуемый пакет электронных документов.
//  ДанныеРаспаковки - Структура, содержит распакованные данные пакета
//  ПараметрыШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//
Функция РаспаковатьПакетЭДНаКлиенте(ПакетЭД, ДанныеРаспаковки = Неопределено, ПараметрыШифрования = "")
	
	Перем ПапкаДляРаспаковки;
	МассивВозврата = Новый Массив;
	
	Попытка
		
		Если ДанныеРаспаковки = Неопределено Тогда
			ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ,
				ПараметрыШифрования);
		КонецЕсли;
		
		Если ДанныеРаспаковки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьКриптосредствоНаКлиенте = Ложь;
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				ЕстьКриптосредствоНаКлиенте = Истина;
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		ДанныеРаспаковки.Свойство("ПапкаДляРаспаковки", ПапкаДляРаспаковки);
		
		ТипДанных = Неопределено;
		ЕстьТипДанных = ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных);
		Если ЕстьТипДанных И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
			СтруктураВозврата       = Новый Структура;
			СоответствиеЭДИПодписей = Новый Соответствие;
			КоличествоОбработанныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
																									ПакетЭД,
																									ДанныеРаспаковки,
																									ПапкаДляРаспаковки,
																									ЕстьКриптосредствоНаКлиенте,
																									СоответствиеЭДИПодписей,
																									СтруктураВозврата);
			МассивДобавленныхФайлов             = СтруктураВозврата.МассивДобавленныхФайлов;
			МассивДобавленныхФайловДляИзвещений = СтруктураВозврата.МассивДобавленныхФайловДляИзвещений;
			МассивВладельцев                    = СтруктураВозврата.МассивВладельцев;
			Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") И МассивДобавленныхФайлов.Количество() > 0
				И НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
				И НЕ МенеджерКриптографии = Неопределено Тогда
				
					Если СоответствиеЭДИПодписей.Количество()>0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;

			Если КоличествоОбработанныхДокументов > 0 Тогда
				Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивВладельцев);
			КонецЕсли;
			
			// Получили данные от оператора ЭДО
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
				СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, ВидЭД);
			КонецЕсли;
			
			Возврат КоличествоОбработанныхДокументов;
		КонецЕсли;
		
		МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
		МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
		
		Если МассивДвоичныхДанных.Количество() = 0 Тогда
			МассивЭДИДанныхПодписей = Новый Массив;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьПодтвержденияДокументовНаСервере(
															ДанныеРаспаковки.СоответствиеФайлПараметры,
															ПакетЭД,
															ПапкаДляРаспаковки,
															МассивЭДИДанныхПодписей);
			Если МассивЭДИДанныхПодписей.Количество() > 0 Тогда
				Для Каждого Элемент ИЗ МассивЭДИДанныхПодписей Цикл
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Элемент.ДанныеПодписи);
					Если СертификатыПодписи.Количество() <> 0 Тогда
						Сертификат = СертификатыПодписи[0];
						ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.ЭлектронныйДокумент,
															Элемент.ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
															Сертификат.Субъект),
															Сертификат.Выгрузить());
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
			Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
				
				// Обработать пришедшие извещения от оператора
				// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
				МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
					СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки, СтруктураДанных.ДвоичныеДанные,
					ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
				
				Если МассивСтруктурПодписей <> Неопределено Тогда
					ФлагОшибки = Ложь;
					Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
						Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда
							Попытка
								ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла,
									СтруктураПодписи.ДвоичныеДанныеПодписи);
							Исключение
								ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
								ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									НСтр("ru = 'проверка подписи'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
								ФлагОшибки = Истина;
								Прервать;
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
					
					Если ФлагОшибки Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(ПакетЭД,
																								 МассивСтруктурПодписей,
																								 СтруктураДанных,
																								 ДанныеРаспаковки.СоответствиеФайлПараметры,
																								 ПапкаДляРаспаковки);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьОшибкаРаспаковки = Ложь;
		
		Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
			СтруктураШифрования = НайтиСтруктуруВПараметрах(СтруктураДанных.ИмяФайлаБезРасширения, ПараметрыШифрования);
			Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда
				Если СтруктураШифрования.Свойство("ПарольДоступа") И НЕ СтруктураШифрования.ПарольДоступа = Неопределено Тогда
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						РасшифрованныеДвоичныеДанные = ЭлектронныеДокументыСлужебныйВызовСервера.РасшифрованныеДанные(
																								СтруктураДанных.ДвоичныеДанные,
																								СтруктураШифрования.ПарольДоступа);
						Если РасшифрованныеДвоичныеДанные = Неопределено Тогда
							Возврат Неопределено;
						КонецЕсли;
					Иначе
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураШифрования.ПарольДоступа;
						// Метод расшифровки генерирует исключение в случае ошибки.
						Попытка
							РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(СтруктураДанных.ДвоичныеДанные);
						Исключение
							ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
							ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
																		НСтр("ru = 'расшифровка пакета ЭД'"),
																		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																		ТекстСообщения);
							Возврат Неопределено;
						КонецПопытки;
					КонецЕсли;
					СтруктураДанных.ДвоичныеДанные = РасшифрованныеДвоичныеДанные;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
																					СтруктураДанных.ИмяФайла,
																					ПапкаДляРаспаковки,
																					СтруктураДанных.ДвоичныеДанные,
																					ДанныеРаспаковки.СоответствиеФайлПараметры);
			
			СоответствиеЭДИПодписей = Новый Соответствие;
			МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
																					ПакетЭД,
																					МассивСтруктурПодписей,
																					СтруктураДанных,
																					ДанныеРаспаковки.СоответствиеФайлПараметры,
																					ПапкаДляРаспаковки,
																					ЕстьОшибкаРаспаковки,
																					ЕстьКриптосредствоНаКлиенте,
																					СоответствиеЭДИПодписей);
																					
			Если Не МассивДобавленныхФайлов = Неопределено И МассивДобавленныхФайлов.Количество() > 0
				И Не МенеджерКриптографии = Неопределено
				И Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
					Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;
			Если Не ЕстьОшибкаРаспаковки Тогда
				Если ЗначениеЗаполнено(ТипДанных)
					И ДанныеРаспаковки.СоответствиеФайлПараметры.Получить("ЭтоПроизвольныйЭД") = Неопределено
					И ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСпособОбменаЭДИзПакетаЭД(
						ПакетЭД) = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
					
					ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
					СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайлов, ВидЭД);
				КонецЕсли;
				
				ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
			КонецЕсли;
		КонецЦикла;
		ЭлектронныеДокументыСлужебныйВызовСервера.УдалитьКаталог(ПапкаДляРаспаковки);
		
		Если ЕстьОшибкаРаспаковки Тогда
			Возврат 0;
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД,
			ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки входящего пакета ЭД.
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'распаковка входящего пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	
	Возврат МассивВозврата.Количество();
	
КонецФункции

Функция ПарольЗадан(ТекущаяСтруктура, ПараметрыШифрования, ПарольДоступа)
	
	СертификатПоиска = ТекущаяСтруктура.Сертификат;
	ВозвращаемоеЗначение = Ложь;
	Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
		Если СтруктураШифрования.Сертификат = СертификатПоиска
			И СтруктураШифрования.Свойство("ПарольДоступа", ПарольДоступа)
			И ПарольДоступа <> Неопределено Тогда
			
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСтруктуруВПараметрах(ИмяПоиска, ПараметрыШифрования)
	
	ВозвращаемыйПараметр = Неопределено;
	
	Если ТипЗнч(ПараметрыШифрования) = Тип("Массив") Тогда
		Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
			Если СокрЛП(ИмяПоиска) = СокрЛП(СтруктураШифрования.Документ) Тогда
				ВозвращаемыйПараметр = СтруктураШифрования;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрыШифрования) = Тип("Структура") Тогда
		ВозвращаемыйПараметр = ПараметрыШифрования;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ТестСертификатаНаКлиенте(Отпечаток, Пароль, ВыводитьТолькоОшибки, Отказ)
									
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ШаблонСообщения = НСтр("ru = '%1
	|%2'");
	
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на компьютере.'");
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонРезультата,
								ТекстОшибки,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на компьютере.'");
	
	Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток);
	Если Сертификат <> Неопределено Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Иначе
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("101");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата на компьютере.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(
									Сертификат,
									РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокДвоичныеДанные = Base64Значение(Отпечаток);
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки на компьютере.'");
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭЦП.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭЦП на компьютере.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(ОтпечатокДвоичныеДанные, Сертификат);
		ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ОтпечатокДвоичныеДанные, ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

#Если НЕ ВебКлиент Тогда

Процедура ПодключитьМенеджерДляРаботыСБанком()
	
	Если глКриптоДЛЛСбербанк = Неопределено Тогда
		Попытка
			ПодключитьВнешнююКомпоненту("AddIn.Bicrypt");
			глКриптоДЛЛСбербанк = Новый("AddIn.Bicrypt");
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Необходимо установить компоненту AddIn.dll'")
									+ Символы.ПС + НСтр("ru = 'Подробности в журнале регистрации'");
			Операция = Нстр("ru = 'Подключение компоненты для работы с банком'");
			ТекстОшибки = ОписаниеОшибки();
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция АдресWSDLСхемыСбербанк(Тестовый = Ложь)
	
	Если Тестовый Тогда
		Возврат "http://localhost:28016/ic46/upg?wsdl";
	КонецЕсли;
	
	Возврат "http://localhost:28016/sbns-upg/upg?wsdl"
	
КонецФункции

Процедура АвторизоватьсяНаТокене(СоглашениеЭД, АвторизацияВыполнена, ПовторнаяАвторизация = Ложь)
	
	АвторизацияВыполнена = Ложь;
	ПодключитьМенеджерДляРаботыСБанком();
	Если глКриптоДЛЛСбербанк = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если глНомерКонтейнераСбербанк < 1 ИЛИ НЕ глТекущееСоглашениеСбербанк = СоглашениеЭД
		ИЛИ НЕ ЗначениеЗаполнено(СоглашениеЭД) Тогда
			ДанныеАвторизации = ОткрытьФормуМодально("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ФормаЗапросаДанныхАвторизации");
			Если ДанныеАвторизации = Неопределено ИЛИ ДанныеАвторизации.НомерКонтейнера = 0 Тогда
				Возврат;
			КонецЕсли;
			Если глНомерКонтейнераСбербанк > 0 Тогда
				СессияЗавершена = Ложь;
				ЗавершитьСессиюНаТокене(СессияЗавершена);
				Если НЕ СессияЗавершена Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			глНомерКонтейнераСбербанк   = ДанныеАвторизации.НомерКонтейнера;
			глПинКодСбербанк            = ДанныеАвторизации.ПинКод;
			глТекущееСоглашениеСбербанк = СоглашениеЭД;
	КонецЕсли;
	
	ПодключитьМенеджерДляРаботыСБанком();
	Если глКриптоДЛЛСбербанк = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатАвторизации = глКриптоДЛЛСбербанк.ПредъявитьПин(глНомерКонтейнераСбербанк, глПинКодСбербанк);
	Если Не (РезультатАвторизации = 0) Тогда
		Если ПовторнаяАвторизация ИЛИ НЕ (глВыполненаАвторизацияСбербанк = Истина) Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Не удалось авторизоваться на токене.'") + Символы.ПС
				+ Нстр("ru = 'Необходимо выполнить перезапуск банковского ключа'");
			ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при авторизации на токене вернула код ошибки'")
				+ " " + РезультатАвторизации;
			Операция = НСтр("ru = 'Авторизация на токене'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
			ОчиститьДанныеАвторизации();
			глВыполненаАвторизацияСбербанк = Ложь;
			Возврат;
		Иначе
			СессияЗавершена = Ложь;
			Если глВыполненаАвторизацияСбербанк = Истина Тогда
				ЗавершитьСессиюНаТокене(СессияЗавершена);
			КонецЕсли;
			Если СессияЗавершена Тогда
				АвторизоватьсяНаТокене(СоглашениеЭД, АвторизацияВыполнена, Истина);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	глВыполненаАвторизацияСбербанк = Истина;
	АвторизацияВыполнена = Истина;
	
КонецПроцедуры

Функция ПолучитьНомерБизнесСистемы()
	
	НомерБизнесСистемы = -1;
	НазваниеБизнесСистемы = """УПШ СББОЛ""";
	
	БизнесСистемы = "";
	Рез = глКриптоДЛЛСбербанк.ПолучитьСписокБизнесСистемVPNKeyTLS(БизнесСистемы);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка при получении списка бизнес систем.
									|Подробности в журнале регистрации.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка бизнес систем вернула код ошибки'")
					  + " " + Рез;
		Операция = НСтр("ru = 'Получение списка бизнес систем.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
		ОчиститьДанныеАвторизации();
		Возврат НомерБизнесСистемы;
	КонецЕсли;
	Попытка
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(БизнесСистемы, Символы.ПС);
		Для Каждого Строка из МассивСтрок Цикл
			Если Найти(ВРег(Строка), ВРег(НазваниеБизнесСистемы)) > 0 Тогда
				ПозПервойКавычки = Найти(Строка, """");
				БизнесСистемаСтрокой = Сред(Строка, ПозПервойКавычки + 1);
				ПозВторойКавычки = Найти(БизнесСистемаСтрокой, """");
				БизнесСистемаСтрокой = Сред(БизнесСистемаСтрокой, 1 , ПозВторойКавычки - 1);
				НомерБизнесСистемы = Число(БизнесСистемаСтрокой);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка чтения списка бизнес систем.
									|Подробности в журнале регистрации.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка бизнес систем код ошибки'") + Рез
						+ Символы.ПС + Нстр("ru = 'Содержимое списка возврата:'") + " " + Символы.ПС + БизнесСистемы + "'";
		Операция = НСтр("ru = 'Получение списка бизнес систем.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
	КонецПопытки;

	Если НомерБизнесСистемы = -1 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена бизнес система на банковском ключе.
									|Необходимо проверить работу TLS VPN Key.'");
		Операция = Нстр("ru = 'Поиск бизнес системы на электронном ключе.'");
		ТекстОшибки = Нстр("ru = 'На электронном ключе не найдена бизнес система:'") + " " + НазваниеБизнесСистемы 
					+ Символы.ПС
					+ Нстр("ru = 'Содержимое списка возврата:'") + " " + Символы.ПС + БизнесСистемы + "'";
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
	КонецЕсли;
	
	Возврат НомерБизнесСистемы;
	
КонецФункции

Процедура ОчиститьДанныеАвторизации()
	
	глПинКодСбербанк            = "";
	глНомерКонтейнераСбербанк   = 0;
	глКриптоДЛЛСбербанк         = Неопределено;
	глТекущееСоглашениеСбербанк = Неопределено;
	
КонецПроцедуры

Процедура ЗавершитьСессиюНаТокене(СессияЗавершена)
	
	Рез = глКриптоДЛЛСбербанк.ЗавершитьСессию();
	ОчиститьДанныеАвторизации();
	ЕстьОшибка = НЕ (Рез = 0);
	Если ЕстьОшибка Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не удалось завершить сессию на токене.
									|Необходим перезапуск токена'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при завершении сессии на токене вернула код ошибки'") + Рез;
		Операция = НСтр("ru = 'Завершение сессии на токене.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
	Иначе
		глУстановленКаналСоСбербанком = Ложь;
	КонецЕсли;
	
	СессияЗавершена = НЕ ЕстьОшибка;
	
КонецПроцедуры

Функция ПолучитьИдентификаторСертификата()

	ИдентификаторыСертификатов = "";
	Рез = глКриптоДЛЛСбербанк.ПолучитьСписокИдентСертификатовVPNKeyTLS(0, ИдентификаторыСертификатов);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка получения списка доступных сертификатов.
									|Подробности в журнале регистрации'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка доступных сертификатов вернула код ошибки'")
						+ Рез;
		Операция = НСтр("ru = 'Подписание электронного документа.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
		ОчиститьДанныеАвторизации();
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеСертификатов = Новый Соответствие;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИдентификаторыСертификатов);
	Индекс = 2;
	Пока Индекс < ТекстовыйДокумент.КоличествоСтрок() Цикл
		Текст = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Текст = СтрЗаменить(Текст, ",", "");
		Текст = СтрЗаменить(Текст, ";", "");
		СоответствиеСертификатов.Вставить(Текст);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		Возврат ТекстовыйДокумент.ПолучитьСтроку(Индекс - 1)
	КонецЕсли;
	
	Для Каждого Элемент ИЗ СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификата(ИдентификаторСертификата);
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			СоответствиеСертификатов.Вставить(
										ИдентификаторСертификата,
										ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект));
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Ошибка чтения сертификата.
										|Подробности см. в журнале регистрации.'");
			ТекстОшибки = ОписаниеОшибки();
			Операция = Нстр("ru = 'Чтение данных сертификата.'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
	КонецЦикла;

	СписокСертификатов = Новый СписокЗначений;
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Значение, Элемент.Ключ);
	КонецЦикла;
	СтруктураПараметров = Новый Структура("Сертификаты", СписокСертификатов);
	ИдентификаторСертификата = ОткрытьФормуМодально(
									"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ФормаВыбораСертификата",
									СтруктураПараметров);
	Возврат ИдентификаторСертификата;
	
КонецФункции

Функция ДвоичныеДанныеСертификата(ИдентификаторСертификата)
	
	СертификатBase64 = "";
	Рез = глКриптоДЛЛСбербанк.ПолучитьСертификатVPNKeyTLS(ИдентификаторСертификата, СертификатBase64);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'При получении данных сертификата произошла ошибка.
									|Подробности в журнале регистрации'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении сертификата вернула код ошибки'") + Рез;
		Операция = НСтр("ru = 'Получение сертификата криптографии.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	СертификатBase64 = СтрЗаменить(СертификатBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
	СертификатBase64 = СтрЗаменить(СертификатBase64, Символы.ПС + "-----END CERTIFICATE-----","");
	
	ДвоичныеДанныеСертификата = Base64Значение(СертификатBase64);
	Возврат ДвоичныеДанныеСертификата;

КонецФункции

#КонецЕсли

#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда

Процедура ИнициализироватьWSОпределение()
	
	Если глWSОпределениеСбербанк = Неопределено Тогда
		АдресСхемыWSDL = АдресWSDLСхемыСбербанк();
		глWSОпределениеСбербанк = Новый WSОпределения(АдресСхемыWSDL);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

// Выводит оповещение о смене ответственного
Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры





