////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает список кодов операций для документа
//
// Параметры:
//  Документ - ссылка на документ, для которого нужно определить код операции,
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  ИмяТабличнойЧасти - имя табличной части, для которой определяется код операции,
//  ИмяДокумента - переменная, в которую возвращается строковое представление имени документа.
//
// Возвращаемое значение:
//  Структра, содержащая список кодов операций.
//
Функция ПолучитьКодОперацииПоДокументу(Документ, СтруктураШапкиДокумента, ИмяТабличнойЧасти, ИмяДокумента = "")
	СтруктураКодовОпераций = Новый Структура();
	ИмяДокумента = "";
	// Важно: перечисления, описанные в этой функции должны быть в составе типов колонки
	// "КодОперации" таблицы значений "ТаблицаДляФормированияДвижений", формируемой в ПодготовитьТаблицуДляФормированияДвижений() 
	// В противном случае не будет заполнен код операции в регистре.
	ИмяПеречисления = "КодыОперацийПартииТоваров"; 
	
	Если ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ИмяДокумента = "ОтчетОРозничныхПродажах";
		СтруктураКодовОпераций.Вставить("Реализация");
		
		Если ИмяТабличнойЧасти = "ТаблицаПоКомплектам" Тогда
			СтруктураКодовОпераций.Вставить("Комплектация");			
		КонецЕсли;	
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяДокумента = "РеализацияТоваровУслуг";
		Если ИмяТабличнойЧасти = "ТаблицаПоТоварам" Тогда	
			Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СтруктураКодовОпераций.Вставить("РеализацияКомиссия");
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
				СтруктураКодовОпераций.Вставить("ОтгрузкаБезПереходаПраваСобственности");
			Иначе	
				СтруктураКодовОпераций.Вставить("Реализация");
			КонецЕсли;	
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоТаре" Тогда	
			СтруктураКодовОпераций.Вставить("ПередачаТарыКонтрагенту");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоКомплектам" Тогда
			СтруктураКодовОпераций.Вставить("Комплектация");
		КонецЕсли;
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИмяДокумента = "КорректировкаРеализации";
		СтруктураКодовОпераций.Вставить("Реализация");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ИмяДокумента = "ОприходованиеТоваров";
		СтруктураКодовОпераций.Вставить("Оприходование");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ИмяДокумента = "ПоступлениеДопРасходов";
		СтруктураКодовОпераций.Вставить("ПоступлениеДопРасходов");
		
		Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
			СтруктураКодовОпераций.Вставить("СписаниеНаЗатраты");
		КонецЕсли;	
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ИмяДокумента = "ПеремещениеТоваров";
		СтруктураКодовОпераций.Вставить("ПеремещениеМеждуСкладами");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		ИмяДокумента = "ТребованиеНакладная";
		СтруктураКодовОпераций.Вставить("СписаниеПартийВПроизводствоОперативно");
		СтруктураКодовОпераций.Вставить("СписаниеНаСтроительствоОбъектовОС");
		СтруктураКодовОпераций.Вставить("СписаниеНаЗатраты");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		ИмяДокумента = "ОтчетПроизводстваЗаСмену";
		СтруктураКодовОпераций.Вставить("ВыпускПоОперацииСтоимость");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяДокумента = "ВозвратТоваровОтПокупателя";
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтруктураКодовОпераций.Вставить("ВозвратОтКомиссионера");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоТоварам" Тогда	
			СтруктураКодовОпераций.Вставить("ВозвратОтПокупателя");
			СтруктураКодовОпераций.Вставить("Реализация");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоТаре" Тогда	
			СтруктураКодовОпераций.Вставить("ВозвратТарыОтКонтрагента");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоКомплектам" Тогда
            СтруктураКодовОпераций.Вставить("Комплектация");			
		КонецЕсли;
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		ИмяДокумента = "ПоступлениеТоваровУслуг";		
		Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			Если НЕ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				Если Документ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
					СтруктураКодовОпераций.Вставить("Поступление");
				Иначе
					СтруктураКодовОпераций.Вставить("ПоступлениеПоОрдеру");
				КонецЕсли;	
				Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
					СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксНаСклад");
				КонецЕсли;	
			КонецЕсли;
		Иначе
			СтруктураКодовОпераций.Вставить("ПоступлениеНаКомиссию");
		КонецЕсли;
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
		ИмяДокумента = "КорректировкаПоступления";
		Если ТипЗнч(СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				СтруктураКодовОпераций.Вставить("Поступление");
				Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
					СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксНаСклад");
					СтруктураКодовОпераций.Вставить("ВыпускПоОперацииСтоимость");
				КонецЕсли;
			Иначе
				СтруктураКодовОпераций.Вставить("ПоступлениеНаКомиссию");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			СтруктураКодовОпераций.Вставить("ПоступлениеДопРасходов");
			Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
				СтруктураКодовОпераций.Вставить("СписаниеНаЗатраты");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки")) Тогда
		ИмяДокумента = "ПоступлениеТоваровИзПереработки";
		СтруктураКодовОпераций.Вставить("Поступление");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) Тогда
		ИмяДокумента = "ВозвратТоваровПоставщику";
		Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			Если Документ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
			  ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда	
			  	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
					Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
						СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксНаСклад");
						СтруктураКодовОпераций.Вставить("ВыпускПоОперацииСтоимость");
						СтруктураКодовОпераций.Вставить("ВозвратПоставщикуФикс");
					КонецЕсли;
					СтруктураКодовОпераций.Вставить("ВозвратПоставщику");
				КонецЕсли;	
			КонецЕсли;
		Иначе
			СтруктураКодовОпераций.Вставить("ВозвратКомитенту");
		КонецЕсли;	
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.КорректировкаСерийИХарактеристикТоваров")) Тогда
		ИмяДокумента = "КорректировкаСерийИХарактеристикТоваров";
		СтруктураКодовОпераций.Вставить("КорректировкаСерийИХарактеристик");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.КорректировкаКачестваТоваров")) Тогда
		ИмяДокумента = "КорректировкаКачестваТоваров";
		СтруктураКодовОпераций.Вставить("КорректировкаКачества");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
		ИмяДокумента = "ОтчетКомиссионераОПродажах";
		СтруктураКодовОпераций.Вставить("Реализация");
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")) Тогда
		ИмяДокумента = "РеализацияОтгруженныхТоваров";
		СтруктураКодовОпераций.Вставить("Реализация");
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.КомплектацияНоменклатуры")) Тогда
		ИмяДокумента = "КомплектацияНоменклатуры";
		Если Документ.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			СтруктураКодовОпераций.Вставить("Комплектация");
		ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда	
			СтруктураКодовОпераций.Вставить("СписаниеПартийВПроизводствоОперативно");
		ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда	
			СтруктураКодовОпераций.Вставить("СписаниеПартийПереданныхВПроизводство");
		КонецЕсли;
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.АвансовыйОтчет"))	Тогда
		ИмяДокумента = "АвансовыйОтчет";
		Если Документ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			СтруктураКодовОпераций.Вставить("Поступление");
		Иначе
			СтруктураКодовОпераций.Вставить("ПоступлениеПоОрдеру");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
			СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксНаСклад");
			СтруктураКодовОпераций.Вставить("ВыпускПоОперацииСтоимость");
		КонецЕсли;	
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию"))	Тогда
		ИмяДокумента = "ПередачаМатериаловВЭксплуатацию";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";
		СтруктураКодовОпераций.Вставить("ПередачаМатериаловВЭксплуатацию");
		СтруктураКодовОпераций.Вставить("ПогашениеСтоимости");
		СтруктураКодовОпераций.Вставить("СписаниеПартийВЭксплуатацию");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПеремещениеМатериаловВЭксплуатации"))	Тогда
		ИмяДокумента = "ПеремещениеМатериаловВЭксплуатации";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";
		СтруктураКодовОпераций.Вставить("ПеремещениеВЭксплуатации");
		СтруктураКодовОпераций.Вставить("ПеремещениеВЭксплуатацииФикс");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации"))	Тогда
		ИмяДокумента = "ВозвратМатериаловИзЭксплуатации";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";
		СтруктураКодовОпераций.Вставить("ВозвратИзЭксплуатации");
		СтруктураКодовОпераций.Вставить("ВозвратИзЭксплуатацииФикс");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации"))	Тогда
		ИмяДокумента = "СписаниеМатериаловИзЭксплуатации";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";
		СтруктураКодовОпераций.Вставить("СписаниеИзЭксплуатации");
		СтруктураКодовОпераций.Вставить("СписаниеИзЭксплуатацииФикс");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПередачаТоваров"))	Тогда
		ИмяДокумента = "ПередачаТоваров";
		Если Документ.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			СтруктураКодовОпераций.Вставить("ПередачаВПереработку");
		ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			СтруктураКодовОпераций.Вставить("ПередачаИзПереработки");
		КонецЕсли;	
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке"))	Тогда
		ИмяДокумента = "ПолучениеУслугПоПереработке";
		СтруктураКодовОпераций.Вставить("СписаниеПартийПереданныхВПроизводство");
		СтруктураКодовОпераций.Вставить("СписаниеНаСтроительствоОбъектовОС");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратПереданныхТоваров"))	Тогда
		ИмяДокумента = "ВозвратПереданныхТоваров";
		СтруктураКодовОпераций.Вставить("ВозвратОтПереработчика");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ГТДИмпорт"))	Тогда
		ИмяДокумента = "ГТДИмпорт";
		СтруктураКодовОпераций.Вставить("ПоступлениеДопРасходов");
		
		Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
			СтруктураКодовОпераций.Вставить("СписаниеНаЗатраты");
		КонецЕсли;	
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.СписаниеТоваров"))	Тогда
		ИмяДокумента = "СписаниеТоваров";
		СтруктураКодовОпераций.Вставить("СписаниеПоИнвентаризации");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПринятиеКУчетуОС"))	Тогда
		ИмяДокумента = "ПринятиеКУчетуОС";
		СтруктураКодовОпераций.Вставить("ПринятиеКУчетуОССоСписаниемНаЗатраты");					
		СтруктураКодовОпераций.Вставить("ПринятиеКУчетуОССоСписаниемНаЗатратыНУ");					
		СтруктураКодовОпераций.Вставить("ПринятиеКУчетуОС");
		СтруктураКодовОпераций.Вставить("ПринятиеКУчетуОСНУ");
		
		Если Документ.ОтразитьВСоставеМПЗ Тогда
			
			СтруктураКодовОпераций.Вставить("ВключениеАктиваВСоставМПЗ");
		КонецЕсли;	
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПередачаОборудованияВМонтаж"))	Тогда
		ИмяДокумента = "ПередачаОборудованияВМонтаж";
		СтруктураКодовОпераций.Вставить("ПередачаОборудованияВМонтаж");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"))	Тогда
		ИмяДокумента = "ПоступлениеТоваровУслугВНТТ";
		Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтруктураКодовОпераций.Вставить("Поступление");
			Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
				СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксНаСклад");
				СтруктураКодовОпераций.Вставить("ВыпускПоОперацииСтоимость");
			КонецЕсли;	
		Иначе	
			СтруктураКодовОпераций.Вставить("ПоступлениеНаКомиссию");
		КонецЕсли;	
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ИмяДокумента = "ВозвратТоваровПоставщикуИзНТТ";
		Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			Если СтруктураШапкиДокумента.ТЗРНаСчете15 Тогда
				СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксНаСклад");
				СтруктураКодовОпераций.Вставить("ВыпускПоОперацииСтоимость");
				СтруктураКодовОпераций.Вставить("ВозвратПоставщикуФикс");
			Иначе
				СтруктураКодовОпераций.Вставить("ВозвратПоставщику");
			КонецЕсли;	
		Иначе
			СтруктураКодовОпераций.Вставить("ВозвратКомитенту");
		КонецЕсли;	
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ИмяДокумента = "РеализацияУслугПоПереработке";
		СтруктураКодовОпераций.Вставить("Реализация");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВводНачальныхОстатковМатериаловВЭксплуатации") Тогда
		ИмяДокумента = "ВводНачальныхОстатковМатериаловВЭксплуатации";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";		
		СтруктураКодовОпераций.Вставить("СписаниеПартийВЭксплуатацию");		
		СтруктураКодовОпераций.Вставить("ПогашениеСтоимости");		
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВыпускПродукции") Тогда
		ИмяДокумента    = "ВыпускПродукции";
		ИмяПеречисления = "КодыОперацийВыпускПродукции";
		
		СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксНаСклад");
		СтруктураКодовОпераций.Вставить("ОприходованиеНЗП");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.УслугиСобственнымПодразделениям") Тогда
		ИмяДокумента    = "УслугиСобственнымПодразделениям";
		ИмяПеречисления = "КодыОперацийВыпускПродукции";
		
		СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксВнутрУслугиНаПроизводство");
		СтруктураКодовОпераций.Вставить("ОприходованиеНЗП");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		ИмяДокумента = "ОприходованиеМатериаловИзПроизводства";
		
		Если Документ.ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы Тогда
			ИмяПеречисления = "КодыОперацийВыпускПродукции";	
			СтруктураКодовОпераций.Вставить("ВозвратМатериаловИзПроизводстваФикс");
			СтруктураКодовОпераций.Вставить("ВозвратМатериаловИзПроизводстваРасч");
		Иначе
			ИмяПеречисления = "КодыОперацийЗатратыНаВыпускПродукции";	
			СтруктураКодовОпераций.Вставить("ОтрицательныеЗатраты");
			СтруктураКодовОпераций.Вставить("ФактСебестоимостьБракВПроизводстве");
		КонецЕсли;	
		
	КонецЕсли;
	
	Для Каждого ТекущийКодОперации Из СтруктураКодовОпераций Цикл
		СтруктураКодовОпераций.Вставить(ТекущийКодОперации.Ключ, Перечисления[ИмяПеречисления][ТекущийКодОперации.Ключ]);
	КонецЦикла;	
	
	Если НЕ СтруктураКодовОпераций.Количество() = 0 Тогда
		Возврат СтруктураКодовОпераций;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьКодОперацииПоДокументу()

// Функция возвращает структуру наборов записей в зависимости от видов учета, в которых отражается данный документ
//
// Параметры:
//  Источник - документ, для которого определяются наборы записей,
//
// Возвращаемое значение:
//  Структура, содержащая список наборов записей.
//
Функция ПолучитьСтруктуруНаборовЗаписейПоВидамУчета(Источник)
	СтруктураНаборов = Новый Структура();
	Если Источник.мСтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если УправлениеЗапасами.ИспользуетсяУправленческийУчетЗатрат() Тогда
			Если ТипЗНЧ(Источник.Движения) = Тип("Структура") Тогда
				Если НЕ Источник.Движения.Свойство("УчетЗатрат") Тогда
					Источник.Движения.Вставить("УчетЗатрат", РегистрыНакопления.УчетЗатрат.СоздатьНаборЗаписей());
					Источник.Движения.УчетЗатрат.Отбор.Регистратор.Установить(Источник.Ссылка);
				КонецЕсли;
			КонецЕсли;	
			
			СтруктураНаборов.Вставить("УчетЗатрат", Источник.Движения.УчетЗатрат);
		КонецЕсли;	
	КонецЕсли;
	
	Если Источник.мСтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ТипЗНЧ(Источник.Движения) = Тип("Структура") Тогда
			Если НЕ Источник.Движения.Свойство("УчетЗатратРегл") Тогда
				Источник.Движения.Вставить("УчетЗатратРегл", РегистрыНакопления.УчетЗатратРегл.СоздатьНаборЗаписей());
				Источник.Движения.УчетЗатратРегл.Отбор.Регистратор.Установить(Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;	
		
		СтруктураНаборов.Вставить("УчетЗатратРегл", Источник.Движения.УчетЗатратРегл);
	КонецЕсли;
	Возврат СтруктураНаборов;	
КонецФункции //ПолучитьСтруктуруНаборовЗаписейПоВидамУчета()	

// Процедура дополняет структуру шапки документа дополнительными полями, необходимыми для проведения по регистрам УчетЗатрат и УчетЗатратРегл
//
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа.
//
Процедура ДополнитьСтруктуруШапкиДополнительнымиПолямиУчетаЗатрат(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		СтруктураШапкиДокумента.Вставить("ОрганизацияУправленческийУчет",УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ));
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитика)
		  ИЛИ УчетнаяПолитика.ВидУчетаТЗР = Перечисления.ВариантыУчетаТЗР.ВключениеВФактическуюСтоимость Тогда
			СтруктураШапкиДокумента.Вставить("ТЗРНаСчете15",Ложь);
		Иначе
			СтруктураШапкиДокумента.Вставить("ТЗРНаСчете15",Истина);
		КонецЕсли;
	Иначе
		СтруктураШапкиДокумента.Вставить("ТЗРНаСчете15",Ложь);
	КонецЕсли;	
	
КонецПроцедуры //ДополнитьСтруктуруШапкиДополнительнымиПолямиУчетаЗатрат()	

// Процедура очищает, в таблице "Результат" колонки, которые не должны заполняться в соответствии с настройками учетной политики
//
// Параметры:
//  ИмяРегистра - имя регистра "УчетЗатрат" или "УчетЗатратРегл" по которому будут выполняться движения,
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  Результат - таблица значений, по которой будут формироваться движения по регистру,
//  НаборСтрокТабличнойЧасти - массив строк исходной табличной части документа, по которому была сформирована таблица "Результат".
//
Процедура ОчиститьКолонкиВСоответствииСНастройкамиУчетнойПолитики(ИмяРегистра, СтруктураШапкиДокумента, Результат, НаборСтрокТабличнойЧасти)
	//Очистим склад
	УчетнаяПолитика = глЗначениеПеременной("ПараметрыПартионногоУчета");
	Если ИмяРегистра = "УчетЗатрат" Тогда
		ВестиПартионныйУчетПоСкладам = УчетнаяПолитика.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВестиПартионныйУчетПоСкладам = УчетнаяПолитика.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;
	Если НЕ ВестиПартионныйУчетПоСкладам Тогда
		Результат.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;	
	
	//Очистим серию
	НомерТекущейСтроки = 0;
	Для Каждого ТекущаяСтрока Из НаборСтрокТабличнойЧасти Цикл
		Если Результат[НомерТекущейСтроки].РазделУчета = Перечисления.РазделыУчета.Затраты Тогда
			Если ТекущаяСтрока.Владелец().Колонки.Найти("ВестиУчетПоСериямВНЗП") <> Неопределено Тогда
				ВестиПартионныйУчетПоСериям = ТекущаяСтрока.ВестиУчетПоСериямВНЗП;
			ИначеЕсли ЗначениеЗаполнено(Результат[НомерТекущейСтроки].Затрата) Тогда
				ВестиПартионныйУчетПоСериям = Результат[НомерТекущейСтроки].Затрата.ВестиУчетПоСериямВНЗП;
			Иначе
				ВестиПартионныйУчетПоСериям = Ложь;
			КонецЕсли;
		Иначе	
			Если (НЕ ТекущаяСтрока.Владелец().Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено)
			  И (ЗначениеЗаполнено(ТекущаяСтрока.ВестиПартионныйУчетПоСериям)) Тогда
				ВестиПартионныйУчетПоСериям = ТекущаяСтрока.ВестиПартионныйУчетПоСериям;
			ИначеЕсли ЗначениеЗаполнено(Результат[НомерТекущейСтроки].Затрата) Тогда
				ВестиПартионныйУчетПоСериям = Результат[НомерТекущейСтроки].Затрата.ВестиПартионныйУчетПоСериям;
			Иначе
				ВестиПартионныйУчетПоСериям = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ВестиПартионныйУчетПоСериям Тогда
			Результат[НомерТекущейСтроки].СерияЗатраты = Неопределено;
		КонецЕсли;	
		НомерТекущейСтроки = НомерТекущейСтроки + 1;	
	КонецЦикла	
КонецПроцедуры //ОчиститьКолонкиВСоответствииСНастройкамиУчетнойПолитики	

// Функция выполняет общие для всех документов проверки на необходимость формировать движения по строке документа
//
// Параметры:
//  СтрокаДокумента - строка таблицы значений,
//  ТабличнаяЧасть - таблица значений
//
// Возвращаемое значение:
//  Булево, если движения формировать нужно, то Истина.
//
Функция ПроверитьНеобходимостьФормированияДвиженийПоСтрокеДокумента(СтрокаДокумента, ТабличнаяЧасть)
	//По принятым МПЗ движения по регистрам учета затрат не формируются
	Если ТабличнаяЧасть.Колонки.Найти("ПринадлежностьНоменклатуры") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ПринадлежностьНоменклатуры) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Колонки.Найти("СтатусМатериальныхЗатрат") <> Неопределено Тогда
		Если СтрокаДокумента.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Колонки.Найти("СтатьяЗатрат") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СтатьяЗатрат)
		  И СтрокаДокумента.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции //ПроверитьНеобходимостьФормированияДвиженийПоСтрокеДокумента() 	

// Функция возвращает таблицу значений в соответствии правилам преобразования
//
// Параметры:
//
//	Шаблон						- mxl документ, содержащий правила преобразования. Хранить такой Шаблон предлагается в метаданных для каждого регистра. Образец такого шаблона представлен в приложении 1.
//	СтруктураШапкиДокумента		- структра в которой закэшированы параметры шапки
//	ТабличнаяЧасть				- таблица значений, содержащая нужную табличную часть из переменной СтруктураТабличныхЧастей.
//	ИмяПравилаПреобразования	- строка, содержащая имя правила (ключ) по которому будет производиться поиск в шаблоне.
//
Функция ПолучитьСтруктуруДанныхВСоответствииСШаблоном(ИмяРегистра, СтруктураШапкиДокумента, ТабличнаяЧасть, ИмяПравилаПреобразования)
    Перем ЗначениеКолонки;
	
	Шаблон = РегистрыНакопления[ИмяРегистра].ПолучитьМакет("ПараметрыФормированияДвижений");
	
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(Шаблон.Область("ПравилаПреобразования"));
    ПЗ.Выполнить();
	
	ВсеПравилаПреобразования = ПЗ.Результат.Выгрузить();
	ПравилаПреобразования = ВсеПравилаПреобразования.Найти(ИмяПравилаПреобразования, "ИмяПравилаПреобразования");
	
	Если ПравилаПреобразования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТекстСтрокаДокумента = НРег("СтрокаДокумента.");
	ДлинаТекстСтрокаДокумента = СтрДлина(ТекстСтрокаДокумента);
	
	// Получим список колонок табличной части
	КолонкиТабличнойЧасти = "";
	СписокКолонокТабличнойЧасти = Новый СписокЗначений;
	СтруктураЗначенийСвойств = Новый Структура;
	
	НаборСтрокТабличнойЧасти = Новый Массив();
	Для Каждого СтрокаДокумента Из ТабличнаяЧасть Цикл
		Если ПроверитьНеобходимостьФормированияДвиженийПоСтрокеДокумента(СтрокаДокумента, ТабличнаяЧасть) Тогда
			Если ПустаяСтрока(ПравилаПреобразования.УсловиеОтбораСтрок) Тогда
				НаборСтрокТабличнойЧасти.Добавить(СтрокаДокумента);
			Иначе	
				УсловиеПроверки = Истина;
				Выполнить("УсловиеПроверки = " + ПравилаПреобразования.УсловиеОтбораСтрок);
				Если УсловиеПроверки Тогда
					 НаборСтрокТабличнойЧасти.Добавить(СтрокаДокумента);
				 КонецЕсли;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
	
	Если НаборСтрокТабличнойЧасти.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	//Составим список колонок результирующей таблицы, которые можно получить из исходной переименованием
	Для каждого КолонкаПравилПреобразования Из ВсеПравилаПреобразования.Колонки Цикл
		
		СтруктураЗначенийСвойств.Вставить(КолонкаПравилПреобразования.Имя);
		
		Правило = НРег(ПравилаПреобразования[КолонкаПравилПреобразования.Имя]);
		
		Если Лев(Правило, ДлинаТекстСтрокаДокумента) = ТекстСтрокаДокумента Тогда
			ИмяКолонкиТабличнойЧасти = Сред(Правило, ДлинаТекстСтрокаДокумента + 1);
			Если СписокКолонокТабличнойЧасти.НайтиПоЗначению(ИмяКолонкиТабличнойЧасти) = Неопределено Тогда
				КолонкиТабличнойЧасти = КолонкиТабличнойЧасти + "," + ИмяКолонкиТабличнойЧасти;
			КонецЕсли; 
			СписокКолонокТабличнойЧасти.Добавить(ИмяКолонкиТабличнойЧасти, КолонкаПравилПреобразования.Имя);
		КонецЕсли; 
		
	КонецЦикла;	
	
	// На основании полученного списка колонок табличной части скопируем табличную часть.
	Если КолонкиТабличнойЧасти = "" Тогда
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("СтрокаИсходнойТаблицы");
		Для Каждого СтрокаДокумента Из НаборСтрокТабличнойЧасти Цикл
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.СтрокаИсходнойТаблицы = СтрокаДокумента;
		КонецЦикла;	
	Иначе
		КолонкиТабличнойЧасти = Сред(КолонкиТабличнойЧасти, 2);
		
		Результат = ТабличнаяЧасть.СкопироватьКолонки(КолонкиТабличнойЧасти);
		Результат.Колонки.Добавить("СтрокаИсходнойТаблицы");
		Для Каждого СтрокаДокумента Из НаборСтрокТабличнойЧасти Цикл
			 НоваяСтрока = Результат.Добавить();
			 НоваяСтрока.СтрокаИсходнойТаблицы = СтрокаДокумента;
			 ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
		КонецЦИкла;	
		
		//Переименуем колонки в копии табличной части
		Для каждого КолонкаТабличнойЧасти Из СписокКолонокТабличнойЧасти Цикл
			Если Результат.Колонки.Найти(КолонкаТабличнойЧасти.Значение) <> Неопределено Тогда
				Результат.Колонки[КолонкаТабличнойЧасти.Значение].Имя = КолонкаТабличнойЧасти.Представление;
			КонецЕсли;
		КонецЦикла;
		
		// Если в копии табличной части нет нужной колонки (возможно при соответствии многие-к-одному)
		// скопируем аналогичную колонку
		Для каждого КолонкаТабличнойЧасти Из СписокКолонокТабличнойЧасти Цикл
			Если Результат.Колонки.Найти(КолонкаТабличнойЧасти.Представление) = Неопределено Тогда
				Правило = НРег(ПравилаПреобразования[КолонкаТабличнойЧасти.Представление]);
				ИмяКолонкиТабличнойЧасти = Сред(Правило, ДлинаТекстСтрокаДокумента + 1);
				Результат.Колонки.Добавить(КолонкаТабличнойЧасти.Представление, ТабличнаяЧасть.Колонки[ИмяКолонкиТабличнойЧасти].ТипЗначения);
				Для Каждого СтрокаРезультата Из Результат Цикл
					СтрокаРезультата[КолонкаТабличнойЧасти.Представление] = СтрокаРезультата.СтрокаИсходнойТаблицы[ИмяКолонкиТабличнойЧасти];
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	// Заполним остальные колонки данными (из шапки, значения перечисления и т.п.)
	МассивТипов = Новый Массив;	
	Для каждого КолонкаПравилПреобразования Из ВсеПравилаПреобразования.Колонки Цикл
		Если (Нрег(КолонкаПравилПреобразования.Имя) = Нрег("ИмяПравилаПреобразования"))
		  ИЛИ (Нрег(КолонкаПравилПреобразования.Имя) = Нрег("УсловиеОтбораСтрок")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.Колонки.Найти(КолонкаПравилПреобразования.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Правило = НРег(ПравилаПреобразования[КолонкаПравилПреобразования.Имя]);
		Если ПустаяСтрока(Правило) Тогда
			Результат.Колонки.Добавить(КолонкаПравилПреобразования.Имя);
			Продолжить;
		КонецЕсли;
		
		Результат.Колонки.Добавить(КолонкаПравилПреобразования.Имя);
		НомерСтрокиНабораСтрокТЧ = 0;
		Для Каждого СтрокаДокумента Из НаборСтрокТабличнойЧасти Цикл
			Выполнить("ЗначениеКолонки = " + Правило);
			Результат[НомерСтрокиНабораСтрокТЧ][КолонкаПравилПреобразования.Имя] = ЗначениеКолонки;
			НомерСтрокиНабораСтрокТЧ = НомерСтрокиНабораСтрокТЧ + 1;
		КонецЦикла;
	КонецЦикла;
	
	//Очистим колонки в соответствии с настройками учетной политики
	ОчиститьКолонкиВСоответствииСНастройкамиУчетнойПолитики(ИмяРегистра, СтруктураШапкиДокумента, Результат, НаборСтрокТабличнойЧасти);
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтруктуруДанныхВСоответствииСШаблоном

// Функция возвращает счет НУ соответствующий переданному счету БУ
//
// Параметры:
//  СчетУчетаБУ - счет БУ,
//
// Возвращаемое значение:
//  Счет НУ.
//
Функция ПолучитьСчетНУ(СчетУчетаБУ)
	Возврат РасширеннаяАналитикаУчета.ПолучитьСчетУчетаНУ(СчетУчетаБУ);
КонецФункции //ПолучитьСчетНУ()	

// Функция определяет наличие разницы согласно ПБУ18/02
//
// Параметры:
//  СчетУчетаБУ - счет БУ,
//  СчетУчетаНУ - счет НУ.
//
// Возвращаемое значение:
//  Булево, Истина - в случае если разница есть.
//
Функция ЕстьНалоговаяРазница(СчетУчетаБУ, СчетУчетаНУ)
	СчетУчетаНУ2 = ПолучитьСчетНУ(СчетУчетаБУ);
	Если ЗначениеЗаполнено(СчетУчетаНУ2) Тогда
		Если СчетУчетаНУ2.Родитель = СчетУчетаНУ.Родитель Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;	
КонецФункции //ЕстьНалоговаяРазница()

// Функция определяет сумму для заполнения ресурсов "СтоимостьНУ", "ПостояннаяРазница" регистра "Учет затрат организаций"
//
// Параметры:
//  СчетУчетаБУ - счет БУ,
//  СчетУчетаНУ - счет НУ,
//  СтатьяЗатратНУ - ссылка на статью затрат,
//  ВидСуммы - строка, определяющая какую сумму нужно вернуть. Возможные значения: "НУ", "ВР", "ПР",
//  Сумма - сумма по БУ.
//
// Возвращаемое значение:
//  Сумма по НУ.
//
Функция ПолучитьСуммуНУ(СчетУчетаБУ, СчетУчетаНУ, СтатьяЗатратНУ, ВидСуммы, Сумма, СтруктураШапкиДокумента)
	СтруктураСумм = Новый Структура("НУ, ВР, ПР",Сумма,0,0);
	
	Если Не СтруктураШапкиДокумента.Свойство("ПоддержкаПБУ18") Тогда
		ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18);
		Иначе
			СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", Ложь);
		КонецЕсли; 
	КонецЕсли;	
		
	//Сформируем движения по разницам в НУ при приходе
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		Если ЕстьНалоговаяРазница(СчетУчетаБУ,СчетУчетаНУ) Тогда
			Если ЗначениеЗаполнено(СтатьяЗатратНУ) Тогда
				СтруктураСумм.НУ = 0;
				Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда 
					ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
					Если ТипЗНЧ(СтатьяЗатратНУ) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						ВидРасходовНУ = СтатьяЗатратНУ.ВидРасходовНУ;
					ИначеЕсли ТипЗНЧ(СтатьяЗатратНУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда	
						Если СтатьяЗатратНУ.ПринятиеКналоговомуУчету Тогда
							ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
						Иначе
							ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
						КонецЕсли;
					КонецЕсли;	
					
					Если НЕ ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
						СтруктураСумм.ВР = Сумма; 
						СтруктураСумм.ПР = 0;
					Иначе
						СтруктураСумм.ПР = Сумма; 
						СтруктураСумм.ВР = 0;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;	
	Возврат СтруктураСумм[ВидСуммы];
КонецФункции //ПолучитьСуммуНУ()

// Преобразует характер затрат в направление списания
//
// Параметры:
//	ХарактерЗатрат - характер затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоХарактеруЗатрат(ХарактерЗатрат,ВидОтраженияВУчете)
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
		Возврат "ВложенияВоВнеоборотныеАктивы";
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
			Возврат "НаПроизводство";
		Иначе
			Возврат "Прочие";
		КонецЕсли;	
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете Тогда
		Возврат "Прочие";
	Иначе
		Возврат "НаПроизводство";
	КонецЕсли;
КонецФункции	

// Преобразует статью в направление списания
// Применяется только для упр. учета
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоСтатьеЗатрат(СтатьяЗатрат)
	Если ЗначениеЗаполнено(СтатьяЗатрат) ТОгда
		ХарактерЗатрат  = СтатьяЗатрат.ХарактерЗатрат;
	Иначе
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	КонецЕсли;	
	Возврат ПолучитьНаправлениеСписанияПоХарактеруЗатрат(ХарактерЗатрат, Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
КонецФункции	

// Преобразует счет учета в направление списания
// Применяется только для регл. учета
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоСчетуУчета(СтатьяЗатрат = Неопределено, СчетЗатрат = Неопределено)
	ХарактерЗатрат  = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат);
	Возврат ПолучитьНаправлениеСписанияПоХарактеруЗатрат(ХарактерЗатрат, Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете);
КонецФункции	

// Формирует дополнительные суммовые движения по документам поступления для ПБУ 03
//
// Параметры:
//	ДокументПоступления   	- ссылка на документ, движения которого нужно корректировать,
//	СтруктураСумм  			- структура, содержащая суммы, которые необходимо записать в регистр (Стоимость, СтоимостьНУ, ПостояннаяРазница),
//
//
Процедура СформироватьДвиженияПоПереоценкеТоваров(ДокументПоступления, СтруктураСумм) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	0 КАК Стоимость,
	               |	0 КАК СтоимостьНУ,
	               |	0 КАК ПостояннаяРазница,
	               |	0 КАК Количество,
	               |	0 КАК КоличествоНУ,
	               |	ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансов) КАК КодОперации,
	               |	УчетЗатратРегл.АналитикаВидаУчета КАК АналитикаВидаУчета,
	               |	УчетЗатратРегл.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	               |	УчетЗатратРегл.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	               |	УчетЗатратРегл.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
	               |	УчетЗатратРегл.КорАналитикаВидаУчета КАК КорАналитикаВидаУчета,
	               |	УчетЗатратРегл.КорАналитикаУчетаЗатрат КАК КорАналитикаУчетаЗатрат,
	               |	УчетЗатратРегл.КорАналитикаУчетаПартий КАК КорАналитикаУчетаПартий,
	               |	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат КАК КорАналитикаРаспределенияЗатрат,
	               |	УчетЗатратРегл.Активность КАК Активность,
	               |	УчетЗатратРегл.Регистратор КАК Регистратор,
	               |	УчетЗатратРегл.Период КАК Период,
	               |	УчетЗатратРегл.ВидДвижения КАК ВидДвижения,
	               |	УчетЗатратРегл.Стоимость КАК БазаРаспределения
	               |ИЗ
	               |	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	               |ГДЕ
	               |	УчетЗатратРегл.Регистратор = &Регистратор
	               |	И УчетЗатратРегл.ВидДвижения = &ВидДвижения
				   |	И УчетЗатратРегл.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УчетЗатратРегл.НомерСтроки";
	Запрос.УстановитьПараметр("Регистратор",ДокументПоступления);			   
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		НаборЗаписей = РегистрыНакопления.УчетЗатратРегл.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументПоступления);
		НаборЗаписей.Прочитать();
		
		СчетчикЦикла = НаборЗаписей.Количество();
		Пока СчетчикЦикла >0 Цикл
			СчетчикЦикла = СчетчикЦикла - 1;
			Если НаборЗаписей[СчетчикЦикла].КодОперации = Перечисления.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансов Тогда
				НаборЗаписей.Удалить(СчетчикЦикла);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСписания = Результат.Выгрузить();
		БазаРаспределения = ТаблицаСписания.Итог("БазаРаспределения");
		СтоимостьКРаспределению = СтруктураСумм.Стоимость;
		СтоимостьНУКРаспределению = СтруктураСумм.СтоимостьНУ;
		ПостояннаяРазницаКРаспределению = СтруктураСумм.ПостояннаяРазница;
		
		Для СчетчикЦикла = 0 По ТаблицаСписания.Количество()-1 цикл
			ТекущаяСтрока = ТаблицаСписания[СчетчикЦикла];
			НоваяЗапись 			= НаборЗаписей.Добавить();
			Если СчетчикЦикла = ТаблицаСписания.Количество() - 1 Тогда
				//Последняя строка
				ТекущаяСтрока.Стоимость = СтоимостьКРаспределению;
				ТекущаяСтрока.СтоимостьНУ = СтоимостьНУКРаспределению;
				ТекущаяСтрока.ПостояннаяРазница = ПостояннаяРазницаКРаспределению;
			Иначе	
				Коэффициент = ?(БазаРаспределения = 0,0, ТекущаяСтрока.БазаРаспределения /БазаРаспределения); 
				ТекущаяСтрока.Стоимость = Окр(СтоимостьКРаспределению*Коэффициент,2,1);
				ТекущаяСтрока.СтоимостьНУ = Окр(СтоимостьНУКРаспределению*Коэффициент,2,1);
				ТекущаяСтрока.ПостояннаяРазница = Окр(ПостояннаяРазницаКРаспределению*Коэффициент,2,1);
			Конецесли;	
			ЗаполнитьЗначенияСвойств(НоваяЗапись,ТекущаяСтрока);
			
			СтоимостьКРаспределению = СтоимостьКРаспределению - ТекущаяСтрока.Стоимость;
			СтоимостьНУКРаспределению = СтоимостьНУКРаспределению - ТекущаяСтрока.СтоимостьНУ;
			ПостояннаяРазницаКРаспределению = ПостояннаяРазницаКРаспределению - ТекущаяСтрока.ПостояннаяРазница;
			БазаРаспределения = БазаРаспределения - ТекущаяСтрока.БазаРаспределения;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры

// Формирует дополнительные суммовые движения по документам реализации для ПБУ 03
//
// Параметры:
//	ДокументПоступления   	- ссылка на документ, движения которого нужно корректировать,
//	СтруктураСумм  			- структура, содержащая суммы, которые необходимо записать в регистр (Стоимость, СтоимостьНУ, ПостояннаяРазница),
//
//
Процедура СформироватьДвиженияПоПереоценкеТоваровРеализация(ДокументРеализации, СтруктураСумм) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	0 КАК Стоимость,
	               |	0 КАК СтоимостьНУ,
	               |	0 КАК Корректировка,
	               |	0 КАК Количество,
	               |	0 КАК КоличествоНУ,
	               |	ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансов) КАК КодОперации,
	               |	УчетЗатратРегл.АналитикаВидаУчета КАК АналитикаВидаУчета,
	               |	УчетЗатратРегл.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	               |	УчетЗатратРегл.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	               |	УчетЗатратРегл.Активность КАК Активность,
	               |	УчетЗатратРегл.Регистратор КАК Регистратор,
	               |	УчетЗатратРегл.Период КАК Период,
	               |	УчетЗатратРегл.Стоимость КАК БазаРаспределения
	               |ИЗ
	               |	РегистрНакопления.УчетПродажИСебестоимости КАК УчетЗатратРегл
	               |ГДЕ
	               |	УчетЗатратРегл.Регистратор = &Регистратор
				   |	И УчетЗатратРегл.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УчетЗатратРегл.НомерСтроки";
	Запрос.УстановитьПараметр("Регистратор",ДокументРеализации);			   
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		НаборЗаписей = РегистрыНакопления.УчетПродажИСебестоимости.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументРеализации);
		НаборЗаписей.Прочитать();
		
		СчетчикЦикла = НаборЗаписей.Количество();
		Пока СчетчикЦикла >0 Цикл
			СчетчикЦикла = СчетчикЦикла - 1;
			Если НаборЗаписей[СчетчикЦикла].КодОперации = Перечисления.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансов Тогда
				НаборЗаписей.Удалить(СчетчикЦикла);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСписания = Результат.Выгрузить();
		БазаРаспределения = ТаблицаСписания.Итог("БазаРаспределения");
		КорректировкаКРаспределению = СтруктураСумм.Корректировка;
		
		Для СчетчикЦикла = 0 По ТаблицаСписания.Количество()-1 цикл
			ТекущаяСтрока = ТаблицаСписания[СчетчикЦикла];
			НоваяЗапись 			= НаборЗаписей.Добавить();
			Если СчетчикЦикла = ТаблицаСписания.Количество() - 1 Тогда
				//Последняя строка
				ТекущаяСтрока.Корректировка = КорректировкаКРаспределению;
			Иначе	
				Коэффициент = ?(БазаРаспределения = 0,0, ТекущаяСтрока.БазаРаспределения /БазаРаспределения); 
				ТекущаяСтрока.Корректировка = Окр(КорректировкаКРаспределению*Коэффициент,2,1);
			Конецесли;	
			ЗаполнитьЗначенияСвойств(НоваяЗапись,ТекущаяСтрока);
			
			КорректировкаКРаспределению = КорректировкаКРаспределению - ТекущаяСтрока.Корректировка;
			БазаРаспределения = БазаРаспределения - ТекущаяСтрока.БазаРаспределения;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры


// Процедура удаляет мутабельные значения из параметра "Источник"
//
// Параметры:
//	Источник  - структура.
Процедура ПодготовитьИсточникДляВозвратаКлиенту(Источник)
	Если ТипЗНЧ(Источник) = Тип("Структура") Тогда
		Источник.Движения = Новый Структура();
	КонецЕсли;	
КонецПроцедуры

// Процедура записывает наборы записей в базу данных
//
// Параметры:
//	Движения  - структура наборов записей.
Процедура ЗаписатьСтруктуруДвиженийВБазуДанных(Движения)
	//Запись движений в БД
	Для Каждого ТекущийНабор Из Движения Цикл
		Если ТекущийНабор.Значение.Модифицированность() Тогда
			ТекущийНабор.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

Процедура ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДСРасширеннаяАналитика(СтруктураШапкиДокумента, ТаблицаДляПроводок, Отказ, Заголовок) Экспорт
	//Чтобы избежать дублирования движений по регистру НДСПаритииЗапасов при работе обработки ПроведениеДокументовПоРегистрамНДС
	ТаблицаДляПроводок.Колонки.Добавить("СписаниеПартий");
	ТаблицаДляПроводок.ЗаполнитьЗначения(Истина,"СписаниеПартий");
	УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, , ТаблицаДляПроводок, Отказ, Заголовок, Истина);
	//Чтобы избежать дублирования движений по регистрам НДСНачисленный и НДСПредъявленный при работе обработки ПроведениеДокументовПоРегистрамНДС
	ДвиженияНДСНачисленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураШапкиДокумента.Ссылка,РегистрыНакопления.НДСНачисленный,истина);
	ДвиженияНДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураШапкиДокумента.Ссылка,РегистрыНакопления.НДСПредъявленный,истина);
	Если ДвиженияНДСНачисленный.Количество()>0 Тогда
		Для Каждого ТекущееДвижение Из ДвиженияНДСНачисленный Цикл
			ТекущееДвижение.СписаниеПартий = Истина;
		КонецЦикла;
		ДвиженияНДСНачисленный.Записать();
	КонецЕсли;	
	Если ДвиженияНДСПредъявленный.Количество()>0 Тогда
		Для Каждого ТекущееДвижение Из ДвиженияНДСПредъявленный Цикл
			ТекущееДвижение.СписаниеПартий = Истина;
		КонецЦикла;
		ДвиженияНДСПредъявленный.Записать();
	КонецЕсли;	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО АНАЛИТИЧЕСКИМ РЕГИСТРАМ

// Функция возвращает структуру содержащую реквизиты ключа аналитики
//
// Параметры:
//  ИмяКлючаАналитики - строка, содержащая имя ключа аналитики,
//  КлючАналитики - ссылка, на ключ аналитики,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики.
//
// Возвращаемое значение:
//  Структура содержащая аналитику.
//
Функция ПолучитьАналитикуПоКлючуАналитики(ИмяКлючаАналитики, КлючАналитики, СтруктураКлючиАналитики)
	//Попробуем получить данные из кэша
	Если (НЕ СтруктураКлючиАналитики = Неопределено) И СтруктураКлючиАналитики.Свойство(ИмяКлючаАналитики) Тогда
		СтрокаАналитики = СтруктураКлючиАналитики[ИмяКлючаАналитики].Найти(КлючАналитики,"КлючАналитики");
	Иначе
		СтрокаАналитики = Неопределено;
	КонецЕсли;	
	
	//Если не получилось, получим из БД
	Если СтрокаАналитики = Неопределено Тогда
		//Извлекаем данные из регистра
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений." + ИмяКлючаАналитики + " КАК Аналитика ГДЕ Аналитика.Ссылка = &КлючАналитики");
		Запрос.УстановитьПараметр("КлючАналитики",КлючАналитики);
		ТаблицаАналитики = Запрос.Выполнить().Выгрузить();
		Если ТаблицаАналитики.Количество() > 0 Тогда
			СтрокаАналитики = ТаблицаАналитики[0];
		КонецЕсли;
	КонецЕсли;	
	Возврат СтрокаАналитики; 
КонецФункции //ПолучитьАналитикуПоКлючуАналитики()	

// Процедура заполняет значения свойств в структуре "Получатель" по схеме
//
// Параметры:
//  Получатель - структура, которая формируется в результате выполнения процедуры,
//  Источник - структура, содержащая исходную информацию,
//  Схема - структура, соответствие полей структуры "Источник" и структуры "Получатель".
//
Процедура ЗаполнитьЗначенияСвойствПоСхеме(Получатель,Источник,Схема)
	Для Каждого ТекущийЭлементСхемы Из Схема Цикл
		Если НЕ Источник.Владелец().Колонки.Найти(ТекущийЭлементСхемы.Ключ) = Неопределено Тогда
			Если ТекущийЭлементСхемы.Значение = Неопределено Тогда
				ИмяПоляПолучателя = ТекущийЭлементСхемы.Ключ;
			Иначе
				ИмяПоляПолучателя = ТекущийЭлементСхемы.Значение;
			КонецЕсли;
			Получатель[ИмяПоляПолучателя] = Источник[ТекущийЭлементСхемы.Ключ];
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	//ЗаполнитьЗначенияСвойствПоСхеме()

// Процедура добавляет и заполняет в таблице затрат колонки по реквизитам свернутым в ключах аналитики
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураАналитики - структура, содержащая список разворачиваемых колонок,
//  Отказ - булево, признак возникновения ошибки,
//  СтруктураКлючиАналитики - структура, кэш по ключам аналитики,
//  КорАналитика - булево, признак того что аналитику нужно разворачивать из кор. аналитики.
//
Процедура ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаЗатрат, СтруктураАналитики, Отказ=Ложь, СтруктураКлючиАналитики=Неопределено, КорАналитика = Ложь) Экспорт
	
	Если КорАналитика Тогда
		ПрефиксКолонок = "Кор";
	Иначе
		ПрефиксКолонок = "";
	КонецЕсли;	
	
	//Добавляем дополнительные колонки в таблицу затрат
	Для Каждого ЭлементСтруктурыАналитики Из СтруктураАналитики Цикл
		Если ЭлементСтруктурыАналитики.Значение = Неопределено Тогда
			ИмяПоляПолучателя = ЭлементСтруктурыАналитики.Ключ;
		Иначе
			ИмяПоляПолучателя = ЭлементСтруктурыАналитики.Значение;
		КонецЕсли;
		
		Если ТаблицаЗатрат.Колонки.Найти(ИмяПоляПолучателя) = Неопределено Тогда
			ТаблицаЗатрат.Колонки.Добавить(ИмяПоляПолучателя);
		КонецЕсли;
	КонецЦикла;	
	
	//Заполняем новые колонки в таблице затрат
	Для Каждого ТекущаяСтрока Из ТаблицаЗатрат Цикл
		АналитикаВидаУчета = ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", ТекущаяСтрока[ПрефиксКолонок + "АналитикаВидаУчета"], СтруктураКлючиАналитики);
		Если НЕ АналитикаВидаУчета = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаВидаУчета,СтруктураАналитики);		
		КонецЕсли;
		
		АналитикаУчетаПрочихЗатрат = ПолучитьАналитикуПоКлючуАналитики("АналитикаУчетаПрочихЗатрат", ТекущаяСтрока[ПрефиксКолонок + "АналитикаВидаУчета"], СтруктураКлючиАналитики);
		Если НЕ АналитикаУчетаПрочихЗатрат = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаУчетаПрочихЗатрат,СтруктураАналитики);		
		КонецЕсли;		
		 
		АналитикаУчетаЗатрат = ПолучитьАналитикуПоКлючуАналитики("АналитикаУчетаЗатрат", ТекущаяСтрока[ПрефиксКолонок + "АналитикаУчетаЗатрат"], СтруктураКлючиАналитики);
		Если НЕ АналитикаУчетаЗатрат = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаУчетаЗатрат,СтруктураАналитики);		
		КонецЕсли;	
		
		АналитикаУчетаПартий = ПолучитьАналитикуПоКлючуАналитики("АналитикаУчетаПартий", ТекущаяСтрока[ПрефиксКолонок + "АналитикаУчетаПартий"], СтруктураКлючиАналитики);
		Если НЕ АналитикаУчетаПартий = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаУчетаПартий,СтруктураАналитики);		
		КонецЕсли;
		
		АналитикаРаспределенияЗатрат = ПолучитьАналитикуПоКлючуАналитики("АналитикаРаспределенияЗатрат", ТекущаяСтрока[ПрефиксКолонок + "АналитикаРаспределенияЗатрат"], СтруктураКлючиАналитики);
		Если НЕ АналитикаРаспределенияЗатрат = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаРаспределенияЗатрат,СтруктураАналитики);				
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры //ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой()	

// Функция возвращает таблицу для формирования движений по регистру ПродажиСебестоимость
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструПродажиСебестоимость(ТаблицаЗатрат,СтруктураКлючиАналитики)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И (СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.Реализация
		  ИЛИ СтрокаДвижений.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги)
		Тогда
		  
		    НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;	
		
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход)
		  И СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя Тогда
		  
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
			НоваяСтрока.Количество = -НоваяСтрока.Количество;
			НоваяСтрока.Стоимость = -НоваяСтрока.Стоимость;
			
		КонецЕсли;		
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		СтруктураАналитики = Новый Структура();
	
		СтруктураАналитики.Вставить("Организация");
		СтруктураАналитики.Вставить("Подразделение");
		СтруктураАналитики.Вставить("Проект");
		СтруктураАналитики.Вставить("Затрата", "Номенклатура");
		СтруктураАналитики.Вставить("ХарактеристикаЗатраты", "ХарактеристикаНоменклатуры");
		СтруктураАналитики.Вставить("Заказ", "ЗаказПокупателя");

		Отказ = Ложь;
		
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, СтруктураАналитики, Отказ, СтруктураКлючиАналитики);
		
		ТаблицаСписания.Свернуть("Организация,Подразделение,Проект,Номенклатура,ХарактеристикаНоменклатуры,ЗаказПокупателя","Стоимость,Количество");
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструПродажиСебестоимость()

// Функция возвращает таблицу для формирования движений по регистру ПараметрыАмортизацииОС
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики,
//  ДатаДокумента - дата, на которую будут формироваться движения,
//  ВидОтраженияВУчете - перечисление, определяет вид учета по которому будут формироваться движения.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС(ТаблицаЗатрат,СтруктураКлючиАналитики,ДатаДокумента, ВидОтраженияВУчете)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	// Определим код операции принятия к учету ОС по виду отражения в учете
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		КодОперацииПринятиеКУчету = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОСНУ;
	Иначе
		КодОперацииПринятиеКУчету = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС;
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если СтрокаДвижений.КодОперации = КодОперацииПринятиеКУчету 
			И (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
				ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
				
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		ТаблицаСписания.Колонки.Добавить("ОрганизацияНовая",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаСписания.Колонки.Добавить("ОсновноеСредство",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация","ОрганизацияНовая"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Субконто1","ОсновноеСредство"), Отказ, СтруктураКлючиАналитики,Истина);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТаблицаСписания.Свернуть("ОрганизацияНовая,ОсновноеСредство",
			?(ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,"СтоимостьНУ,ПостояннаяРазница","Стоимость"));
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ.ОрганизацияНовая КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ТЗ.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство,
		|	//ДляНалУчета	ТЗ.ПостояннаяРазница	КАК ПостояннаяРазница,
		|	//ДляУпрУчета	ТЗ.Стоимость			КАК Стоимость
		|	//ДляБухУчета	ТЗ.Стоимость			КАК Стоимость
		|	//ДляНалУчета	ТЗ.СтоимостьНУ			КАК Стоимость
		|ПОМЕСТИТЬ 
		|	ТаблицаКорректировкиСтоимостиОС
		|ИЗ
		|	&ТаблицаЗначений КАК ТЗ";
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		
		Запрос.УстановитьПараметр("ТаблицаЗначений",ТаблицаСписания);
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	&ДатаДокумента КАК Период,
		|	//ДляБухУчета	ТаблицаКорректировкиСтоимостиОС.Организация,
		|	//ДляНалУчета	ТаблицаКорректировкиСтоимостиОС.Организация,
		|	ТаблицаКорректировкиСтоимостиОС.ОсновноеСредство,
		|	//ДляУпрУчета	ТаблицаКорректировкиСтоимостиОС.Стоимость + ЕСТЬNULL(ПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации,0) КАК СтоимостьДляВычисленияАмортизации,
		|	//ДляБухУчета	ТаблицаКорректировкиСтоимостиОС.Стоимость + ЕСТЬNULL(ПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации,0) КАК СтоимостьДляВычисленияАмортизации,
		|	//ДляУпрУчета	ПараметрыАмортизацииОС.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
		|	//ДляБухУчета	ПараметрыАмортизацииОС.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
		|	//ДляУпрУчета	ПараметрыАмортизацииОС.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
		|	//ДляБухУчета	ПараметрыАмортизацииОС.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
		|	//ДляУпрУчета	ПараметрыАмортизацииОС.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	//ДляБухУчета	ПараметрыАмортизацииОС.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	//ДляУпрУчета	ПараметрыАмортизацииОС.КоэффициентАмортизации КАК КоэффициентАмортизации,
		|	//ДляБухУчета	ПараметрыАмортизацииОС.КоэффициентАмортизации КАК КоэффициентАмортизации,
		|	//ДляУпрУчета	ПараметрыАмортизацииОС.ПрименитьВТекущемМесяце КАК ПрименитьВТекущемМесяце,
		|	//ДляНалУчета	ТаблицаКорректировкиСтоимостиОС.ПостояннаяРазница + ЕСТЬNULL(ПараметрыАмортизацииОС.ПРДляВычисленияАмортизации,0) КАК ПРДляВычисленияАмортизации,
		|	//ДляУпрУчета	ПараметрыАмортизацииОС.КоэффициентУскорения КАК КоэффициентУскорения,
		|	//ДляБухУчета	ПараметрыАмортизацииОС.КоэффициентУскорения КАК КоэффициентУскорения,
		|	ПараметрыАмортизацииОС.СрокПолезногоИспользования КАК СрокПолезногоИспользования
		|ИЗ
		|	ТаблицаКорректировкиСтоимостиОС КАК ТаблицаКорректировкиСтоимостиОС
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.ПараметрыАмортизацииОС%СуффиксУчета%.СрезПоследних(
		|				&ДатаДокумента, 
		|				(ОсновноеСредство
		|				//ДляБухУчета, Организация
		|				//ДляНалУчета, Организация
		|				) В (ВЫБРАТЬ 
		|						ОсновноеСредство
		|						//ДляБухУчета, Организация
		|						//ДляНалУчета, Организация
		|					ИЗ 
		|						ТаблицаКорректировкиСтоимостиОС)) КАК ПараметрыАмортизацииОС
		|	ПО 
		|		ПараметрыАмортизацииОС.ОсновноеСредство = ТаблицаКорректировкиСтоимостиОС.ОсновноеСредство
		|		//ДляБухУчета	И ПараметрыАмортизацииОС.Организация = ТаблицаКорректировкиСтоимостиОС.Организация
		|		//ДляНалУчета	И ПараметрыАмортизацииОС.Организация = ТаблицаКорректировкиСтоимостиОС.Организация";

		Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
		
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		Иначе	
		    Возврат Результат.Выгрузить();
		КонецЕсли;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС()

// Функция возвращает таблицу для формирования движений по регистру ПервоначальныеСведенияОС
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики,
//  ДатаДокумента - дата, на которую будут формироваться движения,
//  ВидОтраженияВУчете - перечисление, определяет вид учета по которому будут формироваться движения.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС(ТаблицаЗатрат,СтруктураКлючиАналитики,ДатаДокумента, ВидОтраженияВУчете)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	// Определим код операции принятия к учету ОС по виду отражения в учете
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		КодОперацииПринятиеКУчету = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОСНУ;
	Иначе
		КодОперацииПринятиеКУчету = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС;
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если СтрокаДвижений.КодОперации = КодОперацииПринятиеКУчету 
			И (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
				ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
				
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		ТаблицаСписания.Колонки.Добавить("ОрганизацияНовая",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаСписания.Колонки.Добавить("ОсновноеСредство",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация","ОрганизацияНовая"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Субконто1","ОсновноеСредство"), Отказ, СтруктураКлючиАналитики,Истина);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТаблицаСписания.Свернуть("ОрганизацияНовая,ОсновноеСредство",
			?(ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете, "СтоимостьНУ", "Стоимость"));
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ.ОрганизацияНовая КАК Справочник.Организации) 		КАК Организация,
		|	ВЫРАЗИТЬ(ТЗ.ОсновноеСредство КАК Справочник.ОсновныеСредства) 	КАК ОсновноеСредство,
		|	//ДляУпрУчета ТЗ.Стоимость		КАК Стоимость
		|	//ДляБухУчета ТЗ.Стоимость		КАК Стоимость
		|	//ДляНалУчета ТЗ.СтоимостьНУ	КАК Стоимость
		|ПОМЕСТИТЬ 
		|	ТаблицаКорректировкиСтоимостиОС
		|ИЗ
		|	&ТаблицаЗначений КАК ТЗ";
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		Запрос.УстановитьПараметр("ТаблицаЗначений",ТаблицаСписания);
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	&ДатаДокумента КАК Период,
		|	//ДляБухУчета	ТаблицаКорректировкиСтоимостиОС.Организация,
		|	//ДляНалУчета	ТаблицаКорректировкиСтоимостиОС.Организация,
		|	//ДляБухУчета	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	//ДляБухУчета	ПервоначальныеСведенияОС.СпособПоступления КАК СпособПоступления,
		|	//ДляНалУчета	ПервоначальныеСведенияОС.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
		|	//ДляУпрУчета	ПервоначальныеСведенияОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	//ДляБухУчета	ПервоначальныеСведенияОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	//ДляУпрУчета	ТаблицаКорректировкиСтоимостиОС.Стоимость + ЕСТЬNULL(ПервоначальныеСведенияОС.ПервоначальнаяСтоимость,0) КАК ПервоначальнаяСтоимость,
		|	//ДляБухУчета	ТаблицаКорректировкиСтоимостиОС.Стоимость + ЕСТЬNULL(ПервоначальныеСведенияОС.ПервоначальнаяСтоимость,0) КАК ПервоначальнаяСтоимость,
		|	//ДляНалУчета	ТаблицаКорректировкиСтоимостиОС.Стоимость + ЕСТЬNULL(ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ,0) КАК ПервоначальнаяСтоимостьНУ,
		|	//ДляНалУчета	ПервоначальныеСведенияОС.СтоимостьДо2002 КАК СтоимостьДо2002,
		|	//ДляНалУчета	ПервоначальныеСведенияОС.АмортизацияДо2002 КАК АмортизацияДо2002,
		|	//ДляНалУчета	ПервоначальныеСведенияОС.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
		|	//ДляУпрУчета	ПервоначальныеСведенияОС.ПараметрВыработки КАК ПараметрВыработки,
		|	//ДляБухУчета	ПервоначальныеСведенияОС.ПараметрВыработки КАК ПараметрВыработки,
		|	ТаблицаКорректировкиСтоимостиОС.ОсновноеСредство
		|ИЗ	
		|	ТаблицаКорректировкиСтоимостиОС КАК ТаблицаКорректировкиСтоимостиОС
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.ПервоначальныеСведенияОС%СуффиксУчета%.СрезПоследних(
		|				&ДатаДокумента, 
		|				(ОсновноеСредство
		|				//ДляБухУчета, Организация
		|				//ДляНалУчета, Организация
		|				) В (ВЫБРАТЬ 
		|						ОсновноеСредство
		|						//ДляБухУчета, Организация
		|						//ДляНалУчета, Организация
		|					ИЗ 
		|						ТаблицаКорректировкиСтоимостиОС)) КАК ПервоначальныеСведенияОС
		|	ПО 
		|		ПервоначальныеСведенияОС.ОсновноеСредство = ТаблицаКорректировкиСтоимостиОС.ОсновноеСредство
		|		//ДляБухУчета	И ПервоначальныеСведенияОС.Организация = ТаблицаКорректировкиСтоимостиОС.Организация
		|		//ДляНалУчета	И ПервоначальныеСведенияОС.Организация = ТаблицаКорректировкиСтоимостиОС.Организация";

		Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
		
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		Иначе	
		    Возврат Результат.Выгрузить();
		КонецЕсли;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС()


// Функция возвращает таблицу для формирования движений по регистрам ЗатратыНаСтроительствоОбъектовОсновныхСредств и СтроительствоОбъектовОсновныхСредств
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(ТаблицаЗатрат,СтруктураКлючиАналитики)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И (СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж
		    ИЛИ СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.СписаниеНаСтроительствоОбъектовОС
			ИЛИ СтрокаДвижений.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты) Тогда
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("ОбъектСтроительства, Субконто1","ОбъектСтроительства","СтатьяЗатрат"), Отказ, СтруктураКлючиАналитики,Истина);
		
		ТаблицаСписания.Свернуть("Организация,ОбъектСтроительства, СтатьяЗатрат, КодОперации","Стоимость");
		
		ТаблицаСписания.Колонки.Стоимость.Имя = "Сумма";
		
		СчетчикЦикла = 0;
		Пока СчетчикЦикла < ТаблицаСписания.Количество() Цикл
			Если ((ТаблицаСписания[СчетчикЦикла].КодОперации <> Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты)
				ИЛИ	(ЗначениеЗаполнено(ТаблицаСписания[СчетчикЦикла].СтатьяЗатрат) 
					И (ТаблицаСписания[СчетчикЦикла].СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы))) 
			  И ТаблицаСписания[СчетчикЦикла].Сумма <> 0 Тогда
				СчетчикЦикла = СчетчикЦикла + 1;
			Иначе
				ТаблицаСписания.Удалить(СчетчикЦикла);
			КонецЕсли;
		КонецЦикла;	
		
		ТаблицаСписания.Свернуть("Организация,ОбъектСтроительства, СтатьяЗатрат","Сумма");
		
		Если Отказ  ИЛИ ТаблицаСписания.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств()

// Функция возвращает таблицу для формирования движений по регистру СтоимостьОС
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики,
//  ОтражатьВНУ - булево.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструСтоимостьОС(ТаблицаЗатрат,СтруктураКлючиАналитики,ОтражатьВНУ=Ложь)
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	// Определим код операции принятия к учету ОС по признаку отражения в учете
	КодОперацииПринятиеКУчету = ?(ОтражатьВНУ, Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОСНУ, Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС);
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если СтрокаДвижений.КодОперации = КодОперацииПринятиеКУчету
				И (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
					ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
					
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Субконто1","ОсновноеСредство"), Отказ, СтруктураКлючиАналитики,Истина);
		
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		Если ОтражатьВНУ Тогда
			ТаблицаСписания.Колонки.Удалить("Стоимость");
			ТаблицаСписания.Колонки.СтоимостьНУ.Имя = "Стоимость";
			ТаблицаСписания.Колонки.Удалить("Количество");
			ТаблицаСписания.Колонки.КоличествоНУ.Имя = "Количество";
		КонецЕсли;
		
		ТаблицаСписания.Свернуть("Организация,ОсновноеСредство","Стоимость,Количество");
		
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструСтоимостьОС()

// Функция возвращает таблицу для формирования движений по регистру ОССписанныеНаЗатраты
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструОССписанныеНаЗатраты(ТаблицаЗатрат,СтруктураКлючиАналитики)
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОССоСписаниемНаЗатраты Тогда
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Субконто1","ОсновноеСредство"), Отказ, СтруктураКлючиАналитики,Истина);
		
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТаблицаСписания.Свернуть("Организация,ОсновноеСредство","Стоимость");
		
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструОССписанныеНаЗатраты()

// Процедура формирует движения по аналитическим регистрам, по результатам движений по регистрам УчетЗатрат и УчетЗатратРегл
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  Регистратор - ссылка на документ, который формирует движения по регистрам,
//  Отказ - булево, признак возникновения ошибки,
//  Период - дата формирования движений,
//  СтруктураКлючиАналитики - структура, кэш по ключам аналитики,
//  Движения - коллекция наборов записей регистров,
//  ВидОтраженияВУчете 
//
Процедура СформироватьДвиженияПоАналитическимРегистрам(
	ТаблицаЗатрат,
	Регистратор,
	Отказ=Ложь,
	Период,
	СтруктураКлючиАналитики,
	Движения, 
	ВидОтраженияВУчете) Экспорт
	
	СтруктруаНаборовЗаписей = Новый Соответствие();
	
	ТаблицаДвиженийПоРегиструСтоимостьОС = ПолучитьТаблицуДвиженийПоРегиструСтоимостьОС(ТаблицаЗатрат,СтруктураКлючиАналитики);
	ТаблицаДвиженийПоРегиструОССписанныеНаЗатраты = ПолучитьТаблицуДвиженийПоРегиструОССписанныеНаЗатраты(ТаблицаЗатрат,СтруктураКлючиАналитики);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		ТаблицаДвиженийПоРегиструПродажиСебестоимость = ПолучитьТаблицуДвиженийПоРегиструПродажиСебестоимость(ТаблицаЗатрат,СтруктураКлючиАналитики);
		ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств = ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(ТаблицаЗатрат,СтруктураКлючиАналитики);
		ТаблицаДвиженийПоРегиструПараметрыАмортизацииОС = ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
		ТаблицаДвиженийПоРегиструПервоначальныеСведенияОС = ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);

		Если НЕ ТаблицаДвиженийПоРегиструПродажиСебестоимость = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПродажиСебестоимость")) Тогда
				Движения.Вставить("ПродажиСебестоимость",РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
				Движения.ПродажиСебестоимость.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПродажиСебестоимость, ТаблицаДвиженийПоРегиструПродажиСебестоимость);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструСтоимостьОС = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("СтоимостьОС")) Тогда
				Движения.Вставить("СтоимостьОС",РегистрыНакопления.СтоимостьОС.СоздатьНаборЗаписей());
				Движения.СтоимостьОС.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.СтоимостьОС, ТаблицаДвиженийПоРегиструСтоимостьОС);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструОССписанныеНаЗатраты = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ОССписанныеНаЗатраты")) Тогда
				Движения.Вставить("ОССписанныеНаЗатраты",РегистрыНакопления.ОССписанныеНаЗатраты.СоздатьНаборЗаписей());
				Движения.ОССписанныеНаЗатраты.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ОССписанныеНаЗатраты, ТаблицаДвиженийПоРегиструОССписанныеНаЗатраты);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ЗатратыНаСтроительствоОбъектовОсновныхСредств")) Тогда
				Движения.Вставить("ЗатратыНаСтроительствоОбъектовОсновныхСредств",РегистрыНакопления.ЗатратыНаСтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());
				Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			СтруктруаНаборовЗаписей.Вставить(Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств, ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств);
			
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("СтроительствоОбъектовОсновныхСредств")) Тогда
				Движения.Вставить("СтроительствоОбъектовОсновныхСредств",РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());
				Движения.СтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			СтруктруаНаборовЗаписей.Вставить(Движения.СтроительствоОбъектовОсновныхСредств, ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструПараметрыАмортизацииОС = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПараметрыАмортизацииОС")) Тогда
				Движения.Вставить("ПараметрыАмортизацииОС",РегистрыСведений.ПараметрыАмортизацииОС.СоздатьНаборЗаписей());
				Движения.ПараметрыАмортизацииОС.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПараметрыАмортизацииОС, ТаблицаДвиженийПоРегиструПараметрыАмортизацииОС);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструПервоначальныеСведенияОС = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПервоначальныеСведенияОС")) Тогда
				Движения.Вставить("ПервоначальныеСведенияОС",РегистрыСведений.ПервоначальныеСведенияОС.СоздатьНаборЗаписей());
				Движения.ПервоначальныеСведенияОС.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПервоначальныеСведенияОС, ТаблицаДвиженийПоРегиструПервоначальныеСведенияОС);			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСБухгалтерскийУчет = ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете); 
		ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСБухгалтерскийУчет = ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
		
		Если НЕ ТаблицаДвиженийПоРегиструСтоимостьОС = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("СтоимостьОСБухгалтерскийУчет")) Тогда
				Движения.Вставить("СтоимостьОСБухгалтерскийУчет",РегистрыНакопления.СтоимостьОСБухгалтерскийУчет.СоздатьНаборЗаписей());
				Движения.СтоимостьОСБухгалтерскийУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.СтоимостьОСБухгалтерскийУчет, ТаблицаДвиженийПоРегиструСтоимостьОС);
			
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструОССписанныеНаЗатраты = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ОССписанныеНаЗатратыОрганизаций")) Тогда
				Движения.Вставить("ОССписанныеНаЗатратыОрганизаций",РегистрыНакопления.ОССписанныеНаЗатратыОрганизаций.СоздатьНаборЗаписей());
				Движения.ОССписанныеНаЗатратыОрганизаций.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ОССписанныеНаЗатратыОрганизаций, ТаблицаДвиженийПоРегиструОССписанныеНаЗатраты);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСБухгалтерскийУчет = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПараметрыАмортизацииОСБухгалтерскийУчет")) Тогда
				Движения.Вставить("ПараметрыАмортизацииОСБухгалтерскийУчет",РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СоздатьНаборЗаписей());
				Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПараметрыАмортизацииОСБухгалтерскийУчет, ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСБухгалтерскийУчет);
		КонецЕсли;		
		
		Если НЕ ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСБухгалтерскийУчет = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПервоначальныеСведенияОСБухгалтерскийУчет")) Тогда
				Движения.Вставить("ПервоначальныеСведенияОСБухгалтерскийУчет",РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СоздатьНаборЗаписей());
				Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПервоначальныеСведенияОСБухгалтерскийУчет, ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСБухгалтерскийУчет);					
		КонецЕсли;	
	КонецЕсли;	
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСНалоговыйУчет = ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете); 
		ТаблицаДвиженийПоРегиструСтоимостьОСНУ = ПолучитьТаблицуДвиженийПоРегиструСтоимостьОС(ТаблицаЗатрат,СтруктураКлючиАналитики,Истина);
		ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСНалоговыйУчет = ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете);
		Если НЕ ТаблицаДвиженийПоРегиструСтоимостьОСНУ = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("СтоимостьОСНалоговыйУчет")) Тогда
				Движения.Вставить("СтоимостьОСНалоговыйУчет",РегистрыНакопления.СтоимостьОСНалоговыйУчет.СоздатьНаборЗаписей());
				Движения.СтоимостьОСНалоговыйУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.СтоимостьОСНалоговыйУчет, ТаблицаДвиженийПоРегиструСтоимостьОСНУ);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСНалоговыйУчет = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПервоначальныеСведенияОСНалоговыйУчет")) Тогда
				Движения.Вставить("ПервоначальныеСведенияОСНалоговыйУчет",РегистрыСведений.ПервоначальныеСведенияОСНалоговыйУчет.СоздатьНаборЗаписей());
				Движения.ПервоначальныеСведенияОСНалоговыйУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПервоначальныеСведенияОСНалоговыйУчет, ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСНалоговыйУчет);			
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСНалоговыйУчет = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПараметрыАмортизацииОСНалоговыйУчет")) Тогда
				Движения.Вставить("ПараметрыАмортизацииОСНалоговыйУчет",РегистрыСведений.ПараметрыАмортизацииОСНалоговыйУчет.СоздатьНаборЗаписей());
				Движения.ПараметрыАмортизацииОСНалоговыйУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПараметрыАмортизацииОСНалоговыйУчет, ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСНалоговыйУчет);
		КонецЕсли;		
	КонецЕсли;		
	
	Для Каждого ЭлементСоответствия Из СтруктруаНаборовЗаписей Цикл
		ТекущийНабор = ЭлементСоответствия.Ключ;
		ТекущаяТаблицаДвижений = ЭлементСоответствия.Значение;
		
		ТаблицаДвижений = ТекущийНабор.ВыгрузитьКолонки();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТекущаяТаблицаДвижений, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения( Период, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения( Истина, "Активность");
		
		ТекущийНабор.Загрузить(ТаблицаДвижений);
		
		ТекущийНабор.Записать(Ложь);
     КонецЦикла;
			
КонецПроцедуры //СформироватьДвиженияПоАналитическимРегистрам()


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ ПРОВОДОК

// Функция определяет наличие реквизита в строке движения
//
// Параметры:
//  Движение - строка таблицы значений, набора записей или структура,
//  Реквизит - строка - имя реквизита.
//
// Возвращаемое значение:
//  Булево - признак наличия реквизита в строке движения
//
Функция ЕстьРеквизитВТаблицеДвижений(Движение,Реквизит)
	Если ТипЗНЧ(Движение) = Тип("Структура") Тогда
		Возврат Движение.Свойство(Реквизит);
	Иначе
		Возврат (Движение.Владелец().Колонки.Найти(Реквизит) <> Неопределено)
	КонецЕсли;	
КонецФункции	

// Процедура заполняет аналитику (счета и субконто) в проводке по переданной структуре
//
// Параметры:
//  Проводка - запись регистра бухгалтерии,
//  СтрокаДокумента - структра, содержащая данные для записи в регистр,
//  СтруктураПараметров - структура, содержащая структуру наборов записей и важные реквизиты шапки документа,
//  ВидУчета - строка, принимающая следующие значения "Бух" и "Нал".
//
Процедура ЗаполнитьСубконтоПоСписаниюТоваровРеглРасширеннаяАналитика(Проводка, СтрокаДокумента, СтруктураПараметров, ВидУчета)
	
	Если ВидУчета = "Бух" тогда
		
		СчетТоварыПринятые    = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		СуффиксУчетаДляСубконто = "";
		
	ИначеЕсли ВидУчета = "Нал" тогда		
		
		СчетТоварыПринятые    = ПланыСчетов.Налоговый.ТоварыПринятыеНаКомиссию;
		СуффиксУчетаДляСубконто = "НУ";
		
	КонецЕсли;	
	
	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	ВидСубконтоСклады       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	ВидСубконтоПодразделения= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
	ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	ВидСубконтоДоговоры     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	ВидСубконтоКонтрагенты  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоКомиссионеры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Комиссионеры;
	ВидСубконтоОбъектыСтроительства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
	ВидСубконтоСпособСтроительства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства;
	ВидСубконтоОсновныеСредства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	ВидСубконтоСчетФактура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные;
	
	// Заполняем дебет:
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		НомерСубконто = 0;
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			НомерСубконто = НомерСубконто + 1;
			СубконтоЗаполнено = Ложь;
			Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Затрата);
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорЗатрата) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорЗатрата);
					СубконтоЗаполнено = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорПодразделениеОрганизации) Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорПодразделениеОрганизации);
					СубконтоЗаполнено = Истина;
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СкладПолучатель);
				
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорСтатьяЗатрат) Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорСтатьяЗатрат);
					СубконтоЗаполнено = Истина;
				КонецЕсли;	
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорНоменклатурнаяГруппа) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорНоменклатурнаяГруппа);
					СубконтоЗаполнено = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорДоговорКомиссионера);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоОбъектыСтроительства Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорОбъектСтроительства) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорОбъектСтроительства);
					СубконтоЗаполнено = Истина;
					
				КонецЕсли;	
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСпособСтроительства Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорСпособСтроительства) Тогда
				
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорСпособСтроительства);				
					СубконтоЗаполнено = Истина;
					
				КонецЕсли;	
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
				
				Контрагент = Неопределено;
				
				// Для товаров принятых субконто Контрагент - это комитент
				Если УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СчетВИерархии(Проводка.СчетДт, СчетТоварыПринятые, СтруктураПараметров) Тогда
					
					Если ЗначениеЗаполнено(СтрокаДокумента.КорДоговорКомитента) Тогда
						Контрагент = СтрокаДокумента.КорДоговорКомитента.Владелец;
					Иначе
						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;	
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДокумента.КорКомиссионер) Тогда
						Контрагент = СтрокаДокумента.КорКомиссионер;
					Иначе
						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;					
					
				КонецЕсли;
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКомиссионеры Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорКомиссионер) Тогда
					Комиссионер = СтрокаДокумента.КорКомиссионер;
				Иначе
					Комиссионер = Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;									
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Комиссионер);
				СубконтоЗаполнено = Истина;
				
			КонецЕсли;
			
			Если НЕ СубконтоЗаполнено Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(НомерСубконто)]) ТОгда
					//Если указано субконто с нужным номером
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(НомерСубконто)]);
				Иначе
					//Проверим по типу другие субконто
					Для СчетчикСубконто = 1 По 3 Цикл
						Если НЕ СчетчикСубконто = НомерСубконто
						  И	ЗначениеЗаполнено(СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(СчетчикСубконто)])
						  И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗНЧ(СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(СчетчикСубконто)])) Тогда
							  Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(СчетчикСубконто)]);
							  Прервать;
						КонецЕсли;
					КонецЦикла;	  
				КонецЕсли
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполняем кредит
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			СубконтоЗаполнено = Ложь;
			
			Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Затрата);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ПодразделениеОрганизации);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяЗатрат);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
					
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатурнаяГруппа);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКомиссионера);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
				
				Контрагент = Неопределено;
				
				// Для товаров принятых субконто Контрагент - это комитент
				Если УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СчетВИерархии(Проводка.СчетКт, СчетТоварыПринятые, СтруктураПараметров) Тогда
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКомитента) Тогда
						Контрагент = СтрокаДокумента.ДоговорКомитента.Владелец;
					Иначе
						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;						
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДокумента.Комиссионер) Тогда
						Контрагент = СтрокаДокумента.Комиссионер;
					Иначе
						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;						

				КонецЕсли;
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКомиссионеры Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.Комиссионер) Тогда
					Комиссионер = СтрокаДокумента.Комиссионер;
				Иначе
					Комиссионер = Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;						

				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Комиссионер);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСчетФактура Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.СчетФактура) Тогда
				
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СчетФактура);				
					СубконтоЗаполнено = Истина;
					
				КонецЕсли;					
				
			КонецЕсли;
			
			//Для субконто не составного типа явно запишем пустое значение нужного типа
			Если НЕ ЗначениеЗаполнено(Проводка.СубконтоКт[ВидСубконто.ВидСубконто])
			  И ВидСубконто.ВидСубконто.ТипЗначения.Типы().Количество() = 1 Тогда
				ПустоеЗначениеТипа = ОбщегоНазначения.ПустоеЗначениеТипа(ВидСубконто.ВидСубконто.ТипЗначения.Типы()[0]);
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, ПустоеЗначениеТипа);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры //ЗаполнитьСубконтоПоСписаниюТоваровРеглРасширеннаяАналитика()

// Функция определяет идентичность корреспонденций дебета и кредита
//
// Параметры:
//  Проводка - запись регистра бухгалтерии.
//
// Возвращаемое значение:
//  Булево - признак идентичности аналитики дебета и кредита
//
Функция СовпадаетАналитикаДтКт(Проводка)
	
	Если Проводка.СчетДт = Проводка.СчетКт 
	  И Проводка.КоличествоКт = Проводка.КоличествоДт Тогда
		
		Если ТипЗНЧ(Проводка.СчетДт) = Тип("ПланСчетовСсылка.Налоговый")
		  И Проводка.ВидУчетаДт <> Проводка.ВидУчетаКт Тогда
		  	АналитикаСовпадает = Ложь;
		Иначе	
			АналитикаСовпадает = Истина;
			
			Для Каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				
				СубконтоДт = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
				СубконтоКт = Проводка.СубконтоКт[ВидСубконто.ВидСубконто];
				
				Если (ЗначениеЗаполнено(СубконтоДт) ИЛИ ЗначениеЗаполнено(СубконтоКт))
				   И СубконтоДт <> СубконтоКт
				Тогда
					АналитикаСовпадает = Ложь;
					Прервать;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;	
	Иначе
		АналитикаСовпадает = Ложь;
	КонецЕсли;
	
	Возврат АналитикаСовпадает;
	
КонецФункции // СовпадаетАналитикаДтКт()	

// Определяет по виду учета, является ли проводка (часть проводки) отражением налоговой разницы
//
// Параметры:
//  ВидУчета - значение перечисления ВидыУчетаПоПБУ18
//
// Возвращаемое значение:
//  Истина - проводка (часть проводки) является отражением налоговой разницы
//  Ложь   - в остальных случаях
Функция	НалоговыеРазницы(ВидУчета)
	Возврат (ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР) ИЛИ (ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР);
КонецФункции

// Процедура добавляет проводку в регистр
//
// Параметры:
//  СтруктураПараметров - структура, содержащая структуру наборов записей и важные реквизиты шапки документа,
//  ИмяРегистра - имя регистра, в который нужно добавить проводку,
//  Движение - структра, содержащая данные строки движения по регистру УчетЗатратРегл,
//  КэшПоИерархииСчетов - структура, содержащая кэш по иерархии счетов,
//  Сумма - сумма проводки,
//  ВидУчета - перечисление ВидыУчетаПоПБУ18 (указывается только для проводок по нал. учету).
//
Процедура ДобавитьПроводку(СтруктураПараметров, ИмяРегистра, Движение,КэшПоИерархииСчетов, Сумма, ВидУчета = Неопределено) Экспорт
	
	//Проверим, чтобы не было проводки между балансовым и забалансовым счетом
	Если ИмяРегистра = "Хозрасчетный" И
	  ((ЗначениеЗаполнено(Движение.СчетУчета) И Движение.СчетУчета.Забалансовый
	  И ЗначениеЗаполнено(Движение.КорСчетУчета) И НЕ Движение.КорСчетУчета.Забалансовый)
	  ИЛИ (ЗначениеЗаполнено(Движение.КорСчетУчета) И Движение.КорСчетУчета.Забалансовый
	  И ЗначениеЗаполнено(Движение.СчетУчета) И НЕ Движение.СчетУчета.Забалансовый)) Тогда
	  	Отказ = Ложь;
		Заголовок = "Проведение документа """ + СокрЛП(СтруктураПараметров.Ссылка) + """: ";
		ОбщегоНазначения.СообщитьОбОшибке("Корреспонденция между балансовыми и забалансовыми счетами не допустима!
		|Проводка Дт " + Движение.СчетУчета + " Кт " + Движение.КорСчетУчета + " сформирована не будет",Отказ, Заголовок);
		Возврат;
	КонецЕсли;	
	
	Проводка = СтруктураПараметров.Движения[ИмяРегистра].Добавить();
	
	Если ИмяРегистра = "Хозрасчетный" Тогда
		Количество = Движение.Количество;
	Иначе
		Количество = Движение.КоличествоНУ;
	КонецЕсли;	
	
	// Заполняем вид учета
	Если ИмяРегистра = "Налоговый" И ВидУчета <> Неопределено Тогда
	  
		Проводка.ВидУчетаКт = ВидУчета;
		
		// Вид учета Дт может отличаться от вида учета в Кт в следующих случаях:
		
		// - если речь о расходах, не учитываемых в НУ
		Если (ТипЗНЧ(Движение) <> Тип("Структура"))
			И ЕстьРеквизитВТаблицеДвижений(Движение,"КорСтатьяЗатрат")
			И ЗначениеЗаполнено(Движение.КорСтатьяЗатрат)
			И Движение.КорСтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			НеУчитываемые = Истина;
		ИначеЕсли (ТипЗНЧ(Движение) = Тип("Структура"))
			И Движение.Свойство("КорСтатьяЗатрат") <> Неопределено
			И ЗначениеЗаполнено(Движение.КорСтатьяЗатрат)
			И Движение.КорСтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			НеУчитываемые = Истина;
		Иначе
			НеУчитываемые = Ложь;
		КонецЕсли;
		
		// - если временную разницу в доходах (расходах) отразить нельзя
		ОтразитьПостояннуюРазницуВДоходах = 
			ЕстьРеквизитВТаблицеДвижений(Движение,"СчитатьРазницыПостоянными")
			И ЗначениеЗаполнено(Движение.СчитатьРазницыПостоянными)
			И Движение.СчитатьРазницыПостоянными;
		
		Если (НеУчитываемые И ВидУчета = Перечисления.ВидыУчетаПоПБУ18.НУ) 
				ИЛИ (ОтразитьПостояннуюРазницуВДоходах И ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР) Тогда
			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
		Иначе
			Проводка.ВидУчетаДт = ВидУчета;
		КонецЕсли;
		
	КонецЕсли;	
	
	Проводка.Период = СтруктураПараметров.Дата;
	// Исправительная запись может выполняться предыдущим периодом
	Если ЕстьРеквизитВТаблицеДвижений(Движение,"ДатаИсправительнойЗаписи") 
		И ЗначениеЗаполнено(Движение.ДатаИсправительнойЗаписи) Тогда
		Проводка.Период = Движение.ДатаИсправительнойЗаписи;
	КонецЕсли;
	
	Проводка.Регистратор   = СтруктураПараметров.Ссылка;
	Проводка.Активность    = Истина;
	Проводка.Организация   = Движение.Организация;
	
	Если ИмяРегистра = "Хозрасчетный" Тогда
		Проводка.СчетКт    	= Движение.СчетУчета;
		Проводка.СчетДт		= Движение.КорСчетУчета;
		ЗаполнитьСубконтоПоСписаниюТоваровРеглРасширеннаяАналитика(Проводка, Движение, КэшПоИерархииСчетов, "Бух");
	Иначе
		Проводка.СчетКт    	= Движение.СчетУчетаНУ;
		Проводка.СчетДт		= Движение.КорСчетУчетаНУ;
		
		// На счете 41.К не следует отражать ВР и/или ПР, так как
		// - этот счет служит для отражения корректировок в предыдущих периодах
		// - в предыдущих периодах проводки по разницам не следует формировать
		СчетКорректировки = ПланыСчетов.Налоговый.КорректировкаТоваровПрошлогоПериода;
		
		Если НалоговыеРазницы(Проводка.ВидУчетаДт) И Проводка.СчетДт = СчетКорректировки Тогда
			Проводка.СчетДт = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;		
		
		Если НалоговыеРазницы(Проводка.ВидУчетаКт) И Проводка.СчетКт = СчетКорректировки Тогда
			Проводка.СчетКт = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
		
		ЗаполнитьСубконтоПоСписаниюТоваровРеглРасширеннаяАналитика(Проводка, Движение, КэшПоИерархииСчетов, "Нал");
		
	КонецЕсли;	
	
	Проводка.Сумма = Сумма;
	
	Если Проводка.СчетКт.Количественный Тогда
		Если НЕ НалоговыеРазницы(ВидУчета) Тогда
			Проводка.КоличествоКт  = Количество;
		КонецЕсли;	
	КонецЕсли;
	
	// Количество
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		
		Если Проводка.СчетДт.Количественный  Тогда
			
			Если НЕ НалоговыеРазницы(ВидУчета) Тогда
				Если ИмяРегистра = "Хозрасчетный" Тогда
					Если ЕстьРеквизитВТаблицеДвижений(Движение,"КоличествоПолучатель") Тогда
						Проводка.КоличествоДт  = Движение.КоличествоПолучатель;
					Иначе
						Проводка.КоличествоДт  = Движение.Количество;
					КонецЕсли;
				Иначе	
					Если ЕстьРеквизитВТаблицеДвижений(Движение,"КоличествоНУПолучатель") Тогда
						Проводка.КоличествоДт  = Движение.КоличествоНУПолучатель;
					Иначе
						Проводка.КоличествоДт  = Движение.КоличествоНУ;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ИмяРегистра = "Хозрасчетный" И Проводка.СчетДт.Валютный  Тогда
			Если ЕстьРеквизитВТаблицеДвижений(Движение,"СуммаВал") Тогда
				Проводка.ВалютнаяСуммаДт  = Движение.СуммаВал;
			КонецЕсли;	
			Если ЕстьРеквизитВТаблицеДвижений(Движение,"Валюта") Тогда
				Проводка.ВалютаДт  = Движение.Валюта;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		Если ИмяРегистра = "Хозрасчетный" И Проводка.СчетКт.Валютный  Тогда
			Если ЕстьРеквизитВТаблицеДвижений(Движение,"СуммаВал") Тогда
				Проводка.ВалютнаяСуммаКт  = Движение.СуммаВал;
			КонецЕсли;	
			Если ЕстьРеквизитВТаблицеДвижений(Движение,"Валюта") Тогда
				Проводка.ВалютаКт  = Движение.Валюта;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	// В проводке должна отличаться аналитика и быть заполнен хотя бы один ресурс
	НезначащаяПроводка = 
		СовпадаетАналитикаДтКт(Проводка) 
		ИЛИ ((Проводка.Сумма = 0) И (Проводка.КоличествоДт = 0) И (Проводка.КоличествоКт = 0));
		
	// Как правило, должны быть заполнены оба счета ... 
	ПустыеСчета = (НЕ ЗначениеЗаполнено(Проводка.СчетДт)) ИЛИ (НЕ ЗначениеЗаполнено(Проводка.СчетКт));
	
	// ... но для НУ есть исключения
	Если ПустыеСчета И ИмяРегистра = "Налоговый" Тогда
		
		// Если проводка по разницам, то достаточно, чтобы был заполнен хотя бы один счет
		Если ЗначениеЗаполнено(Проводка.СчетДт) И НалоговыеРазницы(Проводка.ВидУчетаДт) Тогда
			ПустыеСчета = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Проводка.СчетКт) И НалоговыеРазницы(Проводка.ВидУчетаКт) Тогда
			ПустыеСчета = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НезначащаяПроводка ИЛИ ПустыеСчета Тогда
		СтруктураПараметров.Движения[ИмяРегистра].Удалить(Проводка);
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметровДляСодержания = Новый Структура("КодыОпераций, ТипЗначенияРегистратора",Перечисления.КодыОперацийПартииТоваров, ТипЗНЧ(СтруктураПараметров.Ссылка));
	СтрокаДвиженияДляСодержания = Новый Структура("КодОперацииПартииТоваров",Движение.КодОперации);
	Проводка.Содержание = УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ПолучитьСодержаниеПроводки(СтрокаДвиженияДляСодержания, СтруктураПараметровДляСодержания);
	
КонецПроцедуры

// Функция определяет, надо ли для переданного документа формировать проводки по выпуску 
// на основании движений по регистру УчетЗатратРегл, либо они были сформированы ранее.
//
// Движения ряда документов по разделу выпуск формируются в процедуре
// УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска()
// Одновременно формируются и проводки.
// 
// Параметры:
//  Ссылка - ссылка на документ, для которого надо определить момент формирования движений
//
// Возвращаемое значение: булево
//
Функция	ПроводкиПоВыпускуФормируютсяОдновременноСДвижениями(Ссылка)
	
	// Список типов документов, движения по выпуску которых формируются в модуле УправлениеПроизводствомДвиженияПоРегистрам
	МассивТиповДокументов = Новый Массив(); 
	
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.КомплектацияНоменклатуры"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.КорректировкаНЗП"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОприходованиеНЗП"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.СписаниеНЗП"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства"));

	Если МассивТиповДокументов.Найти(ТипЗнч(Ссылка)) = Неопределено Тогда
		// По этому документу проводки по выпуску формируются отдельно от движений по УчетЗатратРегл
		Возврат Ложь;
	Иначе
		// По этому документу проводки уже сформированы (одновременно с движениями по УчетЗатратРегл)
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
	
// Процедура формирует проводки, по результатам проведения по регистру УчетЗатратРегл
//
// Параметры:
//  СтруктураПараметров - структура, содержащая структуру наборов записей и важные реквизиты шапки документа,
//  ТаблицаСписания - таблица расходных движений по регистру УчетЗатратРегл (модифицируется в процедуре)
//  ТаблицаОприходования - таблица приходных движений по регистру УчетЗатратРегл,
//  Отказ - булево, признак возникновения ошибки в процедуре,
//  СтруктураКлючиАналитики - структура, для кэширования ключей аналитики,
//  ПолучатьАналитикуИзТаблицыСписания - булево, признак того, что аналитику не нужно разворачивать из ключей, а можно получить напрямую из таблицы ТаблицаСписания.
//
Процедура СформироватьПроводкиПоРезультатамСписания(СтруктураПараметров, ТаблицаСписания, ТаблицаОприходования = Неопределено, Отказ=Ложь, СтруктураКлючиАналитики, ПолучатьАналитикуИзТаблицыСписания = Ложь) Экспорт
	
	Если ПолучатьАналитикуИзТаблицыСписания Тогда
		ПрефиксКорАналитики = "Кор";
	Иначе
		ПрефиксКорАналитики = "";
	КонецЕсли;	
	
	Если НЕ ПолучатьАналитикуИзТаблицыСписания Тогда
	
		//Формирование аналитики дебета
		СтруктураАналитики = Новый Структура();
		
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Затрата", "КорЗатрата");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СчетУчета","КорСчетУчета");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СчетУчетаНУ","КорСчетУчетаНУ");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СтатьяЗатрат","КорСтатьяЗатрат");	
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"ОбъектСтроительства","КорОбъектСтроительства");	
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СпособСтроительства","КорСпособСтроительства");	
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"НоменклатурнаяГруппа", "КорНоменклатурнаяГруппа");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"ПодразделениеОрганизации", "КорПодразделениеОрганизации");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"ДоговорКомиссионера", "КорДоговорКомиссионера");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Комиссионер", "КорКомиссионер");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Субконто1", "КорСубконто1");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Субконто2", "КорСубконто2");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Субконто3", "КорСубконто3");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СубконтоНУ1", "КорСубконтоНУ1");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СубконтоНУ2", "КорСубконтоНУ2");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СубконтоНУ3", "КорСубконтоНУ3");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"ДатаИсправительнойЗаписи", "ДатаИсправительнойЗаписи");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СчитатьРазницыПостоянными", "СчитатьРазницыПостоянными");
		
		Если НЕ ПолучатьАналитикуИзТаблицыСписания Тогда
			ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, СтруктураАналитики, Отказ, СтруктураКлючиАналитики,Истина);
			СтруктураАналитики = Новый Структура();
		КонецЕсли;	
		
		//Формирование аналитики кредита
		СтруктураАналитики = Новый Структура();
		
		СтруктураАналитики.Вставить("Организация");
		СтруктураАналитики.Вставить("СчетУчета");
		СтруктураАналитики.Вставить("СчетУчетаНУ");
		СтруктураАналитики.Вставить("Затрата", "Затрата");
		СтруктураАналитики.Вставить("ДоговорКомитента");
		СтруктураАналитики.Вставить("Комиссионер");
		СтруктураАналитики.Вставить("ДоговорКомиссионера");
		СтруктураАналитики.Вставить("РазделУчета");
		СтруктураАналитики.Вставить("СтатьяЗатрат","СтатьяЗатрат");	
		СтруктураАналитики.Вставить("ОбъектСтроительства","ОбъектСтроительства");	
		СтруктураАналитики.Вставить("СпособСтроительства","СпособСтроительства");	
		СтруктураАналитики.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
		СтруктураАналитики.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
		
		Если НЕ ПолучатьАналитикуИзТаблицыСписания Тогда
			ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, СтруктураАналитики, Отказ, СтруктураКлючиАналитики);
		КонецЕсли;	
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	// Дополним таблицу списания исправительными записями, сформируем проводки по отражению исправлений в финансовом результате
	СформироватьИсправительныеЗаписи(ТаблицаСписания, СтруктураПараметров);
	
	КэшПоИерархииСчетов = Новый Структура();
	
	ПроводкиПоВыпускуУжеСформированы = ПроводкиПоВыпускуФормируютсяОдновременноСДвижениями(СтруктураПараметров.Ссылка);
	
	Для Каждого Движение Из ТаблицаСписания Цикл
		
		Если ПроводкиПоВыпускуУжеСформированы И Движение.РазделУчета = Перечисления.РазделыУчета.Выпуск Тогда
			Продолжить;
		КонецЕсли;	
		
		//Проводка по БУ
		Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете Тогда
			ДобавитьПроводку(СтруктураПараметров,"Хозрасчетный",Движение,КэшПоИерархииСчетов,Движение.Стоимость);
		КонецЕсли;	
		
		//Проводка по НУ
		Если СтруктураПараметров.ОтражатьВНалоговомУчете Тогда
			Если НЕ Движение.СтоимостьНУ = 0 Тогда
				ДобавитьПроводку(СтруктураПараметров,"Налоговый",Движение,КэшПоИерархииСчетов, Движение.СтоимостьНУ, );
			КонецЕсли;	
			Если НЕ Движение.ПостояннаяРазница = 0 Тогда
				ДобавитьПроводку(СтруктураПараметров,"Налоговый",Движение,КэшПоИерархииСчетов, Движение.ПостояннаяРазница, Перечисления.ВидыУчетаПоПБУ18.ПР);
			КонецЕсли;	
			Если Движение.СтоимостьНУ = 0 И Движение.ПостояннаяРазница = 0 Тогда
				ДобавитьПроводку(СтруктураПараметров,"Налоговый",Движение, КэшПоИерархииСчетов, 0, );
			КонецЕсли;	
		КонецЕсли;	
		
		//Проводка по ВР
		Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете
		  И СтруктураПараметров.ОтражатьВНалоговомУчете 
		  И НЕ ЗначениеЗаполнено(Движение.ДатаИсправительнойЗаписи) Тогда // Записи прошлого периода не приводят к образованию разниц
		  	Если СтруктураПараметров.ПоддержкаПБУ18 Тогда
			  	Если Движение.Стоимость - Движение.СтоимостьНУ - Движение.ПостояннаяРазница <> 0 Тогда
			  		ДобавитьПроводку(
						СтруктураПараметров,
						"Налоговый",
						Движение, 
						КэшПоИерархииСчетов, 
						Движение.Стоимость - Движение.СтоимостьНУ - Движение.ПостояннаяРазница, 
						Перечисления.ВидыУчетаПоПБУ18.ВР);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Убедимся, что не сформированы проводки по Кт91.01
	// Механизмы регл. отчетности обрабатывают проводки только по Дт91.01
	РазвернутьПроводкиДт9101(СтруктураПараметров.Движения);
		
КонецПроцедуры //СформироватьПроводкиПоРезультатамСписания()	

// Дополняет наборы записей регистров бухгалтерии и записи в таблице проводками,
// связанными с исправительными записями прошлыми датами
//
// Параметры:
//  ТаблицаПроводок - таблица расходных движений по регистру УчетЗатратРегл (модифицируется в процедуре)
//  СтруктураПараметров - структура, содержит наборы записей и необходимые реквизиты шапки документа
Процедура СформироватьИсправительныеЗаписи(ТаблицаПроводок, СтруктураПараметров)
	
	// Обрабатываем только строки, в которых заполнена ДатаИсправительнойЗаписи.
	// В отдельных случаях в таблице такой колонки может не быть - тогда ничего не обрабатываем.
	
	Если ТаблицаПроводок.Колонки.Найти("ДатаИсправительнойЗаписи") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДополнительныхПроводок = ТаблицаПроводок.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицыПроводок Из ТаблицаПроводок Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыПроводок.ДатаИсправительнойЗаписи) Тогда
			// Исправительная запись делается текущим периодом
			Продолжить;
		КонецЕсли;
		// Исправительная запись делается прошлым периодом
		
		// Сформируем проводки по корректировке финансового результата прошлого периода
		Если СтрокаТаблицыПроводок.Стоимость <> 0 Тогда
			Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат(
				"БУ",
				СтруктураПараметров.Движения.Хозрасчетный,
				СтрокаТаблицыПроводок.ДатаИсправительнойЗаписи,
				СтрокаТаблицыПроводок.Организация,
				-СтрокаТаблицыПроводок.Стоимость);
		КонецЕсли;
			
		Если СтрокаТаблицыПроводок.СтоимостьНУ <> 0 Тогда 
			Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат(
				"НУ",
				СтруктураПараметров.Движения.Налоговый,
				СтрокаТаблицыПроводок.ДатаИсправительнойЗаписи,
				СтрокаТаблицыПроводок.Организация,
				-СтрокаТаблицыПроводок.СтоимостьНУ);
		КонецЕсли;
			
		// В прошлом периоде формируем проводку по Кт промежуточного счета 41.К (добавляем дополнительную проводку)
		Счет41К   = ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода;
		СчетНУ41К = ПланыСчетов.Налоговый.КорректировкаТоваровПрошлогоПериода;
		
		НоваяСтрока = ТаблицаДополнительныхПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПроводок);
		НоваяСтрока.СчетУчета   = Счет41К;
		НоваяСтрока.СчетУчетаНУ = СчетНУ41К;
		
		// В текущем периоде - по Дт промежуточного счета 41.К (изменяем текущую строку таблицы проводок)
		СтрокаТаблицыПроводок.ДатаИсправительнойЗаписи    = Неопределено;
		СтрокаТаблицыПроводок.КорСчетУчета                = Счет41К;
		СтрокаТаблицыПроводок.КорСчетУчетаНУ              = СчетНУ41К;
		СтрокаТаблицыПроводок.КоличествоПолучатель        = СтрокаТаблицыПроводок.Количество;
		СтрокаТаблицыПроводок.КоличествоНУПолучатель      = СтрокаТаблицыПроводок.КоличествоНУ;
		// Значения субконто будут взяты из реквизитов Номенклатура, СкладПолучатель
		СтрокаТаблицыПроводок.СкладПолучатель             = СтрокаТаблицыПроводок.Склад;
		СтрокаТаблицыПроводок.КорСубконто1                = Неопределено;
		СтрокаТаблицыПроводок.КорСубконто2                = Неопределено;
		СтрокаТаблицыПроводок.КорСубконто3                = Неопределено;
		СтрокаТаблицыПроводок.КорСубконтоНУ1              = Неопределено;
		СтрокаТаблицыПроводок.КорСубконтоНУ2              = Неопределено;
		СтрокаТаблицыПроводок.КорСубконтоНУ3              = Неопределено;
			
	КонецЦикла;
	
	// Перенесем дополнительные проводки в основную таблицу
	Для Каждого СтрокаТаблицыПроводок Из ТаблицаДополнительныхПроводок Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПроводок.Добавить(), СтрокаТаблицыПроводок);
	КонецЦикла;
	
КонецПроцедуры

// В проводках по Дт 91.01 меняет Дт и Кт, так чтобы записи по счету 91.01 были только по Кт (сторно)
// Параметры:
//  НаборыЗаписей - структура, содержит наборы записей регистров бухгалтерии
Процедура РазвернутьПроводкиДт9101(НаборыЗаписей)
	
	СчетаТолькоКт = Новый Массив;
	СчетаТолькоКт.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	СчетаТолькоКт.Добавить(ПланыСчетов.Налоговый.ВнереализационныеДоходы);
	
	Для Каждого ТекущийРегистр Из НаборыЗаписей Цикл
		
		НаборЗаписей = ТекущийРегистр.Значение;
		
		МетаданныеРегистра = НаборЗаписей.Метаданные();
		
		Если НЕ ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистра) Тогда
			// Обрабатываем только наборы записей регистров бухгалтерии
			Продолжить;
		КонецЕсли;
		
		// У ресурсов будем менять знак
		Ресурсы = Новый Массив;
		Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			Если Ресурс.Балансовый Тогда
				Ресурсы.Добавить(Ресурс.Имя);
			Иначе
				Ресурсы.Добавить(Ресурс.Имя + "Дт");
				Ресурсы.Добавить(Ресурс.Имя + "Кт");
			КонецЕсли;
		КонецЦикла;
		
		// Счета, небалансовые измерения и небалансовые ресурсы меняем местами
		Реквизиты = Новый Массив();
		Реквизиты.Добавить("Счет");
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если НЕ Измерение.Балансовый Тогда
				Реквизиты.Добавить(Измерение.Имя);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			Если НЕ Ресурс.Балансовый Тогда
				Реквизиты.Добавить(Ресурс.Имя);
			КонецЕсли;
		КонецЦикла;
		
		// Структуры данных для обмена субконто
		НаправленияОбмена = Новый Структура;
		// Ключ - куда, значение - откуда
		НаправленияОбмена.Вставить("Дт","Кт");
		НаправленияОбмена.Вставить("Кт","Дт");
		
		ЗначенияСубконто = Новый Соответствие;
		// Ключ - куда, значение - коллекция значений субконто
		Для Каждого НаправлениеОбмена Из НаправленияОбмена Цикл
			ЗначенияСубконто[НаправлениеОбмена.Ключ] = Новый Соответствие;
		КонецЦикла;
		
		// Проверим каждую запись
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если СчетаТолькоКт.Найти(Запись.СчетДт) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Перенесем реквизиты Кт в Дт.
			// Предварительно запомним реквизиты Дт, которые нужно перенести в Кт.
			РеквизитыКт = Новый Структура;
			Для Каждого ИмяРеквизита Из Реквизиты Цикл
				РеквизитыКт.Вставить(ИмяРеквизита + "Кт", Запись[ИмяРеквизита + "Дт"]);
				Запись[ИмяРеквизита + "Дт"] = Запись[ИмяРеквизита + "Кт"];
			КонецЦикла;
			// Перенесем реквизиты Дт в Кт
			ЗаполнитьЗначенияСвойств(Запись, РеквизитыКт);
			
			// Запомним значения субконто, которые нужно перенести
			Для Каждого НаправлениеОбмена Из НаправленияОбмена Цикл
				Субконто = ЗначенияСубконто[НаправлениеОбмена.Ключ];
				Субконто.Очистить();
				Для Каждого ЗначениеСубконто Из Запись["Субконто" + НаправлениеОбмена.Значение] Цикл
					Субконто.Вставить(ЗначениеСубконто.Ключ, ЗначениеСубконто.Значение);
				КонецЦикла;
			КонецЦикла;
			
			// Перенесем значения субконто
			Для Каждого НаправлениеОбмена Из НаправленияОбмена Цикл
				Субконто = Запись["Субконто" + НаправлениеОбмена.Ключ];
				Субконто.Очистить();
				Для Каждого ЗначениеСубконто Из ЗначенияСубконто[НаправлениеОбмена.Ключ] Цикл
					Субконто.Вставить(ЗначениеСубконто.Ключ, ЗначениеСубконто.Значение);
				КонецЦикла;
			КонецЦикла;
			
			// Поменяем знак у ресурсов
			Для Каждого ИмяРесурса Из Ресурсы Цикл
				Запись[ИмяРесурса] = - Запись[ИмяРесурса];
			КонецЦикла;
			
		КонецЦикла; // По записям
		
	КонецЦикла; // По наборам записей
		
КонецПроцедуры

// Процедура формирует проводки, по счету 40 ,если установлен соответствующий вариант выпуска готовой продукции
//
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  Движения - структура, содержащая наборы записей документа, в. т.ч. по регистрам Хозрасчетный и Налоговый
//
Процедура СформироватьПроводкиПоСчету40(СтруктураШапкиДокумента,Движения)
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика)
	  ИЛИ УчетнаяПолитика.ВариантУчетаВыпускаГотовойПродукции <> Перечисления.ВариантыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40 Тогда
		Возврат;
	КонецЕсли; 
	
	//Для документа "Оприходование материалов из производства" проводки через счет 40 формировать не нужно
	//т.к. Оприходование материалов из производства это сторно документа Требование-накладная (это не выпуск)
	Если ТипЗНЧ(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ТекущийРегистр Из Движения Цикл
		ЭтоРегистрСПроводками = Ложь;
		Если ТекущийРегистр.Ключ = "Хозрасчетный" Тогда
			ЭтоРегистрСПроводками = Истина;
			СчетОсновноеПроизводство = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
			СчетВспомогательныеПроизводства = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства; //23.01
			СчетВыпускПродукции = ПланыСчетов.Хозрасчетный.ВыпускПродукции;
		ИначеЕсли ТекущийРегистр.Ключ = "Налоговый" Тогда	
			ЭтоРегистрСПроводками = Истина;
			СчетОсновноеПроизводство = ПланыСчетов.Налоговый.ОсновноеПроизводство;
			СчетВспомогательныеПроизводства = ПланыСчетов.Налоговый.ВспомогательныеПроизводства; //23.01
			СчетВыпускПродукции = ПланыСчетов.Налоговый.ВыпускПродукции;
		КонецЕсли;
		
		Если НЕ ЭтоРегистрСПроводками Тогда
			Продолжить;
		КонецЕсли;	
		
		НомерПроводки = 0;
		Пока НомерПроводки < ТекущийРегистр.Значение.Количество() Цикл
			ТекущаяСтрока = ТекущийРегистр.Значение[НомерПроводки];
			
			// Не заменяем проводки вида Дт 40 Кт ХХ
			Если ТекущаяСтрока.СчетДт = СчетВыпускПродукции Тогда
				НомерПроводки = НомерПроводки + 1;
				Продолжить;
			КонецЕсли;
			
			// Заменяем проводки вида Дт ХХ Кт 20
			Если ТекущаяСтрока.СчетКт.ПринадлежитЭлементу(СчетОсновноеПроизводство)
			  ИЛИ ТекущаяСтрока.СчетКт.ПринадлежитЭлементу(СчетВспомогательныеПроизводства) Тогда
			  
			  	НоваяПроводка = ТекущийРегистр.Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПроводка,ТекущаяСтрока); //Субконто заполнены не будут
				
				// Заменим счет Кт
				НоваяПроводка.СчетКт = СчетВыпускПродукции;
				
				Для Каждого ТекущийВидСубконто Из ТекущаяСтрока.СчетДт.ВидыСубконто Цикл
					Если ЗначениеЗаполнено(ТекущаяСтрока.СубконтоДт[ТекущийВидСубконто.ВидСубконто]) Тогда
						НоваяПроводка.СубконтоДт[ТекущийВидСубконто.ВидСубконто] = ТекущаяСтрока.СубконтоДт[ТекущийВидСубконто.ВидСубконто];
					КонецЕсли;	
				КонецЦикла;	
				
				// Сейчас на счете 40 отражается плановая стоимость
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Плановая);
				// Номенклатурную группу берем из заменяемой проводки
				Если ЗначениеЗаполнено(ТекущаяСтрока.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы]) Тогда
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ТекущаяСтрока.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы]);
				КонецЕсли;	
				
				НоваяПроводка.КоличествоДт = ТекущаяСтрока.КоличествоДт;
				НоваяПроводка.КоличествоКт = 0;	// На счете 40 не ведется количественный учет.				
				
				//Удалим старую проводку
				ТекущийРегистр.Значение.Удалить(НомерПроводки);
			Иначе
				НомерПроводки = НомерПроводки + 1;
			КонецЕсли;
		КонецЦикла;// по записям в наборе
	КонецЦикла;	// по наборам записей
КонецПроцедуры // СформироватьПроводкиПоСчету40()	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ ДОПОЛНИТЕЛЬНЫХ ДВИЖЕНИЙ ПО ЗАТРАТАМ

Процедура СформироватьДополнительныеДвиженияПоРегистрамУчетаЗатрат(Источник,СтруктураНаборовЗаписейПоВидамУчета,ТаблицаДляФормированияДвиженийПоРегистру)  
	//Передача материалов в эксплуатацию
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Период", Источник.Дата);
		СтруктураПараметров.Вставить("Регистратор", Источник.Ссылка);
		СтруктураПараметров.Вставить("Организация", Источник.мСтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", Источник.ОтражатьВУправленческомУчете);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", Источник.ОтражатьВБухгалтерскомУчете);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", Источник.ОтражатьВНалоговомУчете);
		
		СтруктураПараметров.Вставить("НаборыЗаписейРегистров", СтруктураНаборовЗаписейПоВидамУчета);
		
		ПроцедурыПогашенияСтоимости.ПогашениеСтоимостиПриПередачеВЭксплуатацию(
			СтруктураПараметров,
			ТаблицаДляФормированияДвиженийПоРегистру
		);
		
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации") Тогда
		ТаблицаОшибок = УправлениеЗатратами.СформироватьТаблицуОшибок();
		ПроцедурыПогашенияСтоимости.СформироватьДвиженияПоСписаниюИзЭксплуатации(
			Источник.мСтруктураШапкиДокумента,
			ТаблицаДляФормированияДвиженийПоРегистру,
			ТаблицаОшибок
		);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ СЧЕТА 16

//Функция определяет субсчет счета 15 в зависимости от счета учета МПЗ:
//Счет МПЗ - 41 -- Субсчет 2
//В остальных случаях - Субсчет 1
//СчетУчетаМПЗ - ссылка на счет (ПланыСчетов.Налоговый либо ПланСчетов.Хозрасчетный)
//Возвращаемое значение - ссылка на счет (один из субсчетов счета 15 соответствующего плана счетов)
Функция ОпределитьСубсчетСчета15(СчетУчетаМПЗ) Экспорт
	Если ТипЗнч(СчетУчетаМПЗ) = Тип("ПланСчетовСсылка.Хозрасчетный")
	  И ЗначениеЗаполнено(СчетУчетаМПЗ)	Тогда
		Если СчетУчетаМПЗ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары) Тогда
			Возврат ПланыСчетов.Хозрасчетный.ПриобретениеТоваров;
		Иначе
			Возврат ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМатериалов;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СчетУчетаМПЗ) = Тип("ПланСчетовСсылка.Налоговый") 
	  И ЗначениеЗаполнено(СчетУчетаМПЗ)	Тогда
		Если СчетУчетаМПЗ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.Товары) Тогда
			Возврат ПланыСчетов.Налоговый.ПриобретениеТоваров;
		Иначе
			Возврат ПланыСчетов.Налоговый.ЗаготовлениеИПриобретениеМатериалов;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура РаспределитьТЗРСоСчета16(СтруктураШапкиДокумента) Экспорт
	
	СтруктураНаборыЗаписей = РасширеннаяАналитикаУчета.ПолучитьНаборыЗаписейРегистров(СтруктураШапкиДокумента);
	
	НаборЗаписей = СтруктураНаборыЗаписей.УчетЗатрат;
	
	СтруктураКлючиАналитики = Новый Структура();
	
	//Закрытие счета 15 на счет 16
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетЗатратРеглОстатки.АналитикаВидаУчета,
	|	УчетЗатратРеглОстатки.АналитикаУчетаЗатрат,
	|	УчетЗатратРеглОстатки.АналитикаУчетаПартий,
	|	УчетЗатратРеглОстатки.АналитикаРаспределенияЗатрат,
	|ВЫБОР КОГДА 
	|		КлючАналитикаВидаУчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМатериалов) ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиМатериалов)
	|ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиТоваров)
	|КОНЕЦ КАК СчетУчетаОтклонений,
	|	УчетЗатратРеглОстатки.КоличествоОстаток,
	|	УчетЗатратРеглОстатки.СтоимостьОстаток
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Остатки(
	|			&ДатаДокумента,
	|			АналитикаВидаУчета В
	|				(ВЫБРАТЬ
	|					КлючАналитикаВидаУчета.Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК КлючАналитикаВидаУчета
	|				ГДЕ
	|					КлючАналитикаВидаУчета.Организация = &Организация
	|					И КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ)))) КАК УчетЗатратРеглОстатки
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.АналитикаВидаУчета КАК КлючАналитикаВидаУчета
	|ПО УчетЗатратРеглОстатки.АналитикаВидаУчета = КлючАналитикаВидаУчета.Ссылка");
	  
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента",СтруктураШапкиДокумента.мКонГраница);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеОстаткиНаСчете16 = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		КорАналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							СтруктураШапкиДокумента,
							Новый Структура("РазделУчета, СчетУчета, Организация",Перечисления.РазделыУчета.Затраты, Выборка.СчетУчетаОтклонений, СтруктураШапкиДокумента.Организация),
							Перечисления.КлючиАналитики.АналитикаВидаУчета,
							Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
							СтруктураКлючиАналитики
						);

		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			Выборка.АналитикаВидаУчета, // АналитикаВидаУчета
			Выборка.АналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
			Выборка.АналитикаУчетаПартий, // АналитикаУчетаПартий
			Выборка.АналитикаРаспределенияЗатрат, // АналитикаУчетаВыпуска
			КорАналитикаВидаУчета, // КорАналитикаВидаУчета
			Неопределено, // КорАналитикаУчетаЗатрат
			Неопределено, // КорАналитикаУчетаПартий
			Неопределено, // КорАналитикаУчетаВыпуска
			ВидДвиженияНакопления.Расход,
			Неопределено,
			Выборка.КоличествоОстаток,
			Выборка.СтоимостьОстаток,
			0,
			0,
			0,
			НаборЗаписей
		);
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			КорАналитикаВидаУчета, // КорАналитикаВидаУчета
			Неопределено, // КорАналитикаУчетаЗатрат
			Неопределено, // КорАналитикаУчетаПартий
			Неопределено, // КорАналитикаУчетаВыпуска
			Выборка.АналитикаВидаУчета, // АналитикаВидаУчета
			Выборка.АналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
			Выборка.АналитикаУчетаПартий, // АналитикаУчетаПартий
			Выборка.АналитикаРаспределенияЗатрат, // АналитикаУчетаВыпуска
			ВидДвиженияНакопления.Приход,
			Неопределено,
			0,
			Выборка.СтоимостьОстаток,
			0,
			0,
			0,
			НаборЗаписей
		);
		
		ОстатокНаСубсчете16 = СоответствиеОстаткиНаСчете16[Выборка.СчетУчетаОтклонений];
		СоответствиеОстаткиНаСчете16.Вставить(Выборка.СчетУчетаОтклонений, ?(ОстатокНаСубсчете16 = Неопределено, 0, ОстатокНаСубсчете16) + Выборка.СтоимостьОстаток);
	КонецЦикла;	
	
	//Остатки по счету 16 с прошлого периода
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлючАналитикаВидаУчета.СчетУчета КАК СчетУчетаОтклонений,
	|	СУММА(УчетЗатратРеглОстатки.СтоимостьОстаток) КАК СтоимостьОстаток
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Остатки(
	|			&ДатаДокумента,
	|			АналитикаВидаУчета В
	|				(ВЫБРАТЬ
	|					КлючАналитикаВидаУчета.Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК КлючАналитикаВидаУчета
	|				ГДЕ
	|					КлючАналитикаВидаУчета.Организация = &Организация
	|					И КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиМЦ)))) КАК УчетЗатратРеглОстатки
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.АналитикаВидаУчета КАК КлючАналитикаВидаУчета
	|ПО УчетЗатратРеглОстатки.АналитикаВидаУчета = КлючАналитикаВидаУчета.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	КлючАналитикаВидаУчета.СчетУчета");
	  
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента",СтруктураШапкиДокумента.мКонГраница);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОстатокНаСубсчете16 = СоответствиеОстаткиНаСчете16[Выборка.СчетУчетаОтклонений];
		СоответствиеОстаткиНаСчете16.Вставить(Выборка.СчетУчетаОтклонений, ?(ОстатокНаСубсчете16 = Неопределено, 0, ОстатокНаСубсчете16) + Выборка.СтоимостьОстаток);
	КонецЦикла;	
	
	//Распределение счета 16
	
	//Определим остаток по разделу учета МПЗ на конец периода
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.СтоимостьОстаток) КАК СтоимостьОстаток,
	|	ВложенныйЗапрос.СчетУчетаОтклонений
	|ИЗ
	|	(ВЫБРАТЬ
	|		УчетЗатратРегл.СтоимостьОстаток КАК СтоимостьОстаток,
	|		КлючАналитикаВидаУчета.РазделУчета КАК РазделУчета,
	|		ВЫБОР
	|			КОГДА КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары))
	|				ИЛИ КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыОтгруженные))
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиТоваров)
	|			ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиМатериалов)
	|		КОНЕЦ КАК СчетУчетаОтклонений
	|	ИЗ
	|		РегистрНакопления.УчетЗатратРегл.Остатки(&ДатаДокумента, ) КАК УчетЗатратРегл
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК КлючАналитикаВидаУчета
	|			ПО УчетЗатратРегл.АналитикаВидаУчета = КлючАналитикаВидаУчета.Ссылка
	|	ГДЕ
	|		КлючАналитикаВидаУчета.Организация = &Организация
	|		И (КлючАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ)
	|			ИЛИ КлючАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ТоварыОтгруженные))
	|		И (КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары))
	|			ИЛИ КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
	|			ИЛИ КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыОтгруженные)))
	|		И (НЕ КлючАналитикаВидаУчета.СчетУчета.Забалансовый)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетУчетаОтклонений");
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента",СтруктураШапкиДокумента.мКонГраница);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеОстаткиПоРазделуУчетаМПЗ 			= Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		СоответствиеОстаткиПоРазделуУчетаМПЗ.Вставить(Выборка.СчетУчетаОтклонений, Выборка.СтоимостьОстаток);
	КонецЦикла;
	
	// Определим направления списания МПЗ
	// Первый запрос пакета выбирает данные о списании МПЗ,
	// второй - собирает итоги по счетам учета отклонений
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетЗатратРегл.КодОперации,
	|	УчетЗатратРегл.КорАналитикаВидаУчета,
	|	УчетЗатратРегл.КорАналитикаУчетаЗатрат,
	|	УчетЗатратРегл.КорАналитикаУчетаПартий,
	|	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат,
	|	КлючАналитикаВидаУчета.СчетУчета,
	|	СУММА(УчетЗатратРегл.Стоимость) КАК Стоимость
	|ПОМЕСТИТЬ НаправленияСписания
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК КлючАналитикаВидаУчета
	|		ПО УчетЗатратРегл.АналитикаВидаУчета = КлючАналитикаВидаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК КлючАналитикаУчетаПартий
	|		ПО УчетЗатратРегл.АналитикаУчетаПартий = КлючАналитикаУчетаПартий.Ссылка
	|ГДЕ
	|	КлючАналитикаВидаУчета.Организация = &Организация
	|	И (КлючАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ)
	|			ИЛИ КлючАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ТоварыОтгруженные))
	|	И (КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары))
	|			ИЛИ КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
	|			ИЛИ КлючАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыОтгруженные)))
	|	И УчетЗатратРегл.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И УчетЗатратРегл.Активность
	|	И УчетЗатратРегл.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И (УчетЗатратРегл.КорАналитикаВидаУчета ССЫЛКА Справочник.КлючиАналитикиУчетаПрочихЗатрат
	|			ИЛИ УчетЗатратРегл.КорАналитикаВидаУчета В
	|				(ВЫБРАТЬ
	|					КлючКорАналитикаВидаУчета.Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК КлючКорАналитикаВидаУчета
	|				ГДЕ
	|					(НЕ КлючКорАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ))
	|					И (НЕ КлючКорАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ТоварыОтгруженные))))
	|	И (НЕ КлючАналитикаВидаУчета.СчетУчета.Забалансовый)
	|	И УчетЗатратРегл.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту)
	|	И УчетЗатратРегл.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатратРегл.КодОперации,
	|	УчетЗатратРегл.КорАналитикаВидаУчета,
	|	УчетЗатратРегл.КорАналитикаУчетаЗатрат,
	|	УчетЗатратРегл.КорАналитикаУчетаПартий,
	|	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат,
	|	КлючАналитикаВидаУчета.СчетУчета;
	|////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияСписания.КодОперации,
	|	НаправленияСписания.КорАналитикаВидаУчета,
	|	НаправленияСписания.КорАналитикаУчетаЗатрат,
	|	НаправленияСписания.КорАналитикаУчетаПартий,
	|	НаправленияСписания.КорАналитикаРаспределенияЗатрат,
	|	ВЫБОР
	|		КОГДА НаправленияСписания.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары))
	|				ИЛИ НаправленияСписания.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыОтгруженные))
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиМатериалов)
	|	КОНЕЦ КАК СчетУчетаОтклонений,
	|	НаправленияСписания.Стоимость
	|ИЗ
	|	НаправленияСписания КАК НаправленияСписания
	|ИТОГИ СУММА(НаправленияСписания.Стоимость) 
	|	ПО СчетУчетаОтклонений;
	|//////////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НаправленияСписания");
						  
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачалоМесяца",СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",СтруктураШапкиДокумента.мКонДата);
	
	ОбщийИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбщийИтог.Следующий() Цикл
		СчетУчетаОтклонений = ОбщийИтог.СчетУчетаОтклонений;
		
		ОстатокПоРазделуУчетаМПЗ = СоответствиеОстаткиПоРазделуУчетаМПЗ[СчетУчетаОтклонений];
		ОстатокНаСчете16 = СоответствиеОстаткиНаСчете16[СчетУчетаОтклонений];
		
		Если ОстатокПоРазделуУчетаМПЗ = Неопределено Тогда
			ОстатокПоРазделуУчетаМПЗ = 0;
		КонецЕсли;
		Если ОстатокНаСчете16 = Неопределено Тогда
			ОстатокНаСчете16 = 0;
		КонецЕсли;

		СуммаСписанияМПЗ = ОбщийИтог.Стоимость;
		Если ОстатокПоРазделуУчетаМПЗ = 0 Тогда
			Если СуммаСписанияМПЗ = 0 Тогда
				СуммаСписанияТЗР = 0;
			Иначе
				СуммаСписанияТЗР = ОстатокНаСчете16;//Списываем весь остаток по счету 16
			КонецЕсли;
		Иначе
			Если ОстатокПоРазделуУчетаМПЗ + СуммаСписанияМПЗ = 0 Тогда
				//МПЗ полностью списались в "-". 
				//Нет базы для распределения ТЗР
				//Сообщение об ошибке будет выдано специальным механизмом расчета себестоимости
				Возврат;
			Иначе	
				//Списываем часть остатка на счете 16 пропорционально движению МПЗ
				СуммаСписанияТЗР = Окр(ОстатокНаСчете16*СуммаСписанияМПЗ/(ОстатокПоРазделуУчетаМПЗ + СуммаСписанияМПЗ),2);
			КонецЕсли;	
		КонецЕсли;	
		
		//Спишем оставшуюся на счете 16 сумму по направлениям
		Если СуммаСписанияМПЗ > 0 И СуммаСписанияТЗР <> 0 Тогда
			Выборка = ОбщийИтог.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СуммаСписанияМПЗ = 0 Тогда
					ОбщегоНазначения.Сообщение("Распределение счета 16 выполнено не полностью. Проверьте базу распределения.",СтатусСообщения.Внимание);
					Прервать;
				КонецЕсли;				
				СуммаСписанияТЗРПоНаправлению = Окр(Выборка.Стоимость * СуммаСписанияТЗР/СуммаСписанияМПЗ,2);
				
				АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
									СтруктураШапкиДокумента,
									Новый Структура("РазделУчета, СчетУчета, Организация",Перечисления.РазделыУчета.Затраты, СчетУчетаОтклонений, СтруктураШапкиДокумента.Организация),
									Перечисления.КлючиАналитики.АналитикаВидаУчета,
									Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
									СтруктураКлючиАналитики
								);

				РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
					СтруктураШапкиДокумента,
					АналитикаВидаУчета, // КорАналитикаВидаУчета
					Неопределено, // КорАналитикаУчетаЗатрат
					Неопределено, // КорАналитикаУчетаПартий
					Неопределено, // КорАналитикаУчетаВыпуска
					Выборка.КорАналитикаВидаУчета, // АналитикаВидаУчета
					Выборка.КорАналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
					Выборка.КорАналитикаУчетаПартий, // АналитикаУчетаПартий
					Выборка.КорАналитикаРаспределенияЗатрат, // АналитикаУчетаВыпуска
					ВидДвиженияНакопления.Расход,
					Выборка.КодОперации,
					0,
					СуммаСписанияТЗРПоНаправлению,
					0,
					0,
					0,
					НаборЗаписей
				);
				РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
					СтруктураШапкиДокумента,
					Выборка.КорАналитикаВидаУчета, // АналитикаВидаУчета
					Выборка.КорАналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
					Выборка.КорАналитикаУчетаПартий, // АналитикаУчетаПартий
					Выборка.КорАналитикаРаспределенияЗатрат, // АналитикаУчетаВыпуска
					АналитикаВидаУчета, // КорАналитикаВидаУчета
					Неопределено, // КорАналитикаУчетаЗатрат
					Неопределено, // КорАналитикаУчетаПартий
					Неопределено, // КорАналитикаУчетаВыпуска
					ВидДвиженияНакопления.Приход,
					Выборка.КодОперации,
					0,
					СуммаСписанияТЗРПоНаправлению,
					0,
					0,
					0,
					НаборЗаписей
				);
				СуммаСписанияМПЗ = СуммаСписанияМПЗ - Выборка.Стоимость;
				СуммаСписанияТЗР = СуммаСписанияТЗР - СуммаСписанияТЗРПоНаправлению;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтруктураНаборыЗаписей.УчетЗатрат.Модифицированность() Тогда
		СтруктураНаборыЗаписей.УчетЗатрат.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ВКЛЮЧЕНИЯ НДС В ЗАТРАТЫ

Процедура ВключитьНДСВЗатраты(СтруктураШапкиДокумента) Экспорт
	
	СтруктураНаборыЗаписей 	= РасширеннаяАналитикаУчета.ПолучитьНаборыЗаписейРегистров(СтруктураШапкиДокумента);
	СтруктураКлючиАналитики = Новый Структура;
	КэшПоИерархииСчетов 	= Новый Структура;
	
	СпособОтраженияВключенияНДСВСтоимость = СтруктураШапкиДокумента.УчетнаяПолитика.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
	
	// 1. Обрабатываем только документы перемещения и комплектации.
	// 2. Необходимость включения НДС в стоимость или списания на расходы определяется учетной политикой.
	// 3. Для включения/исключения НДС из стоимости нужно формировать движения с разным знаком.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата",	 СтруктураШапкиДокумента.мНачДата);  
	Запрос.УстановитьПараметр("КонДата",	 СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСПартииТоваровОбороты.Организация,
	|	НДСПартииТоваровОбороты.СчетУчета,
	|	НДСПартииТоваровОбороты.Номенклатура,
	|	НДСПартииТоваровОбороты.ХарактеристикаНоменклатуры,
	|	НДСПартииТоваровОбороты.СерияНоменклатуры,
	|	НДСПартииТоваровОбороты.Склад,
	|	НДСПартииТоваровОбороты.СчетФактура,
	|	НДСПартииТоваровОбороты.Регистратор,
	|	НДСПартииТоваровОбороты.НДСВключенВСтоимость,
	|	НДСПартииТоваровОбороты.НДСОборот КАК НДСПриход
	|ПОМЕСТИТЬ НДСПартииТоваровОбороты
	|ИЗ
	|	РегистрНакопления.НДСПартииТоваров.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			Регистратор,
	|			Организация = &Организация) КАК НДСПартииТоваровОбороты
	|ГДЕ
	|	(НДСПартииТоваровОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|			ИЛИ НДСПартииТоваровОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры)
	|;";
	Запрос.Выполнить();
	
	Если СпособОтраженияВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВключатьВСтоимость
		ИЛИ СпособОтраженияВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ Тогда
		
		// Отразим в учете затрат включение НДС в стомость МПЗ
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваровОбороты.Организация						КАК Организация,
		|	НДСПартииТоваровОбороты.СчетУчета 						КАК КорСчетУчета,
		|	НДСПартииТоваровОбороты.Номенклатура					КАК Номенклатура,
		|	НДСПартииТоваровОбороты.ХарактеристикаНоменклатуры		КАК ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОбороты.СерияНоменклатуры				КАК СерияНоменклатуры,
		|	НДСПартииТоваровОбороты.Склад							КАК Склад,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПартииТоваровОбороты.Регистратор.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость)
		|					И НДСПартииТоваровОбороты.НДСВключенВСтоимость
		|				ТОГДА НДСПартииТоваровОбороты.НДСПриход
		|			КОГДА НДСПартииТоваровОбороты.Регистратор.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости)
		|					И (НЕ НДСПартииТоваровОбороты.НДСВключенВСтоимость)
		|				ТОГДА -НДСПартииТоваровОбороты.НДСПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ) 												КАК НДСПриход
		|ИЗ
		|	НДСПартииТоваровОбороты КАК НДСПартииТоваровОбороты
		|ГДЕ
		|	(НДСПартииТоваровОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|			ИЛИ НДСПартииТоваровОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
		|				И НДСПартииТоваровОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры))
		|	И (&ВключатьНДСВСтоимость ИЛИ НДСПартииТоваровОбороты.СчетФактура <> НЕОПРЕДЕЛЕНО)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПартииТоваровОбороты.Склад,
		|	НДСПартииТоваровОбороты.ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОбороты.Номенклатура,
		|	НДСПартииТоваровОбороты.СерияНоменклатуры,
		|	НДСПартииТоваровОбороты.СчетУчета,
		|	НДСПартииТоваровОбороты.СчетФактура,
		|	НДСПартииТоваровОбороты.Организация
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА НДСПартииТоваровОбороты.Регистратор.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость)
		|					И НДСПартииТоваровОбороты.НДСВключенВСтоимость
		|				ТОГДА НДСПартииТоваровОбороты.НДСПриход
		|			КОГДА НДСПартииТоваровОбороты.Регистратор.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости)
		|					И (НЕ НДСПартииТоваровОбороты.НДСВключенВСтоимость)
		|				ТОГДА -НДСПартииТоваровОбороты.НДСПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ) <> 0";
		
		Запрос.УстановитьПараметр("ВключатьНДСВСтоимость", СпособОтраженияВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВключатьВСтоимость);
		
		ТаблицаВключенияВСтоимость = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекущаяСтрока Из ТаблицаВключенияВСтоимость Цикл
			
			АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Новый Структура("Организация, СчетУчета, СчетУчетаНУ, Склад, РазделУчета", 
					ТекущаяСтрока.Организация, 
					ТекущаяСтрока.КорСчетУчета,
					РасширеннаяАналитикаУчета.ПолучитьСчетУчетаНУ(ТекущаяСтрока.КорСчетУчета),
					ТекущаяСтрока.Склад,
					Перечисления.РазделыУчета.МПЗ),
				Перечисления.КлючиАналитики.АналитикаВидаУчета,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
				СтруктураКлючиАналитики
			);
			АналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Новый Структура("Затрата, ХарактеристикаЗатраты, СерияЗатраты, Качество", 
					ТекущаяСтрока.Номенклатура,
					ТекущаяСтрока.ХарактеристикаНоменклатуры,
					ТекущаяСтрока.СерияНоменклатуры,
					Справочники.Качество.Новый),
				Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
				СтруктураКлючиАналитики
			);
			АналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Новый Структура("СтатусПартии",
					Перечисления.СтатусыПартийТоваров.Купленный),
				Перечисления.КлючиАналитики.АналитикаУчетаПартий,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
				СтруктураКлючиАналитики
			);
			АналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Новый Структура,
				Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
				СтруктураКлючиАналитики
			);		
		    РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				АналитикаВидаУчета,
				АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаРаспределенияЗатрат,
				Неопределено, // КорАналитикаВидаУчета
				Неопределено, // КорАналитикаУчетаЗатрат
				Неопределено, // КорАналитикаУчетаПартий
				Неопределено, // КорАналитикаУчетаВыпуска
				ВидДвиженияНакопления.Приход,
				Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов,
				0,// Количество
				ТекущаяСтрока.НДСПриход,
				0,// Количество НУ
				ТекущаяСтрока.НДСПриход,
				0,// Постоянная разница
				СтруктураНаборыЗаписей.УчетЗатрат
			);
		КонецЦикла;
	КонецЕсли;
	
	Если СпособОтраженияВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы
		ИЛИ СпособОтраженияВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ Тогда
		
		// Отразим в учете затрат списание НДС на расходы
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваровОбороты.Организация								КАК Организация,
		|	НДСПартииТоваровОбороты.Регистратор.СчетСписанияНДС 			КАК КорСчетУчета,
		|	НДСПартииТоваровОбороты.Регистратор.ПодразделениеОрганизации 	КАК Подразделение,
		|	НДСПартииТоваровОбороты.Регистратор.СтатьяЗатратСписанияНДС 	КАК СтатьяЗатрат,
		|	НДСПартииТоваровОбороты.Регистратор.НоменклатурнаяГруппа		КАК НоменклатурнаяГруппа,
		|	СУММА(ВЫБОР
		|			КОГДА НДСПартииТоваровОбороты.Регистратор.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость)
		|					И НДСПартииТоваровОбороты.НДСВключенВСтоимость
		|				ТОГДА НДСПартииТоваровОбороты.НДСПриход
		|			КОГДА НДСПартииТоваровОбороты.Регистратор.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости)
		|					И (НЕ НДСПартииТоваровОбороты.НДСВключенВСтоимость)
		|				ТОГДА -НДСПартииТоваровОбороты.НДСПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ) 														КАК НДСПриход
		|ИЗ
		|	НДСПартииТоваровОбороты КАК НДСПартииТоваровОбороты
		|ГДЕ
		|	(НДСПартииТоваровОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|		ИЛИ НДСПартииТоваровОбороты.Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
		|			И НДСПартииТоваровОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры))
		|	И (&СписыватьНДСНаРасходы ИЛИ НДСПартииТоваровОбороты.СчетФактура = НЕОПРЕДЕЛЕНО)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПартииТоваровОбороты.Организация,
		|	НДСПартииТоваровОбороты.Регистратор.СчетСписанияНДС,
		|	НДСПартииТоваровОбороты.Регистратор.ПодразделениеОрганизации,
		|	НДСПартииТоваровОбороты.Регистратор.СтатьяЗатратСписанияНДС,
		|	НДСПартииТоваровОбороты.Регистратор.НоменклатурнаяГруппа
		|	
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА НДСПартииТоваровОбороты.Регистратор.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость)
		|					И НДСПартииТоваровОбороты.НДСВключенВСтоимость
		|				ТОГДА НДСПартииТоваровОбороты.НДСПриход
		|			КОГДА НДСПартииТоваровОбороты.Регистратор.НДСвСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости)
		|					И (НЕ НДСПартииТоваровОбороты.НДСВключенВСтоимость)
		|				ТОГДА -НДСПартииТоваровОбороты.НДСПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ) <> 0";
		
		Запрос.УстановитьПараметр("СписыватьНДСНаРасходы", СпособОтраженияВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы);
		
		ТаблицаСписанияНДСНаРасходы = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекущаяСтрока Из ТаблицаСписанияНДСНаРасходы Цикл
			
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ТекущаяСтрока.КорСчетУчета, ТекущаяСтрока.СтатьяЗатрат);
			
			Если НЕ ЗначениеЗаполнено(ХарактерЗатрат)
				ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				// Счет не участвует в учете затрат - движения формировать не требуется.
				Продолжить;
			КонецЕсли;
			
			АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Новый Структура("РазделУчета, Организация, Подразделение, СчетУчета, СчетУчетаНУ", 
					Перечисления.РазделыУчета.Затраты,
					ТекущаяСтрока.Организация, 
					ТекущаяСтрока.Подразделение,
					ТекущаяСтрока.КорСчетУчета,
					РасширеннаяАналитикаУчета.ПолучитьСчетУчетаНУ(ТекущаяСтрока.КорСчетУчета)
					),
				Перечисления.КлючиАналитики.АналитикаВидаУчета,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
				СтруктураКлючиАналитики
			);
			
			АналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Новый Структура("СтатьяЗатрат, ХарактерЗатрат", 
					ТекущаяСтрока.СтатьяЗатрат,
					ХарактерЗатрат),
				Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
				СтруктураКлючиАналитики
			);
			
			АналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Новый Структура(),
				Перечисления.КлючиАналитики.АналитикаУчетаПартий,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
				СтруктураКлючиАналитики
			);
			
			АналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Новый Структура("НоменклатурнаяГруппа",
					ТекущаяСтрока.НоменклатурнаяГруппа),
				Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
				СтруктураКлючиАналитики
			);
			
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				АналитикаВидаУчета,
				АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаРаспределенияЗатрат,
				Неопределено, // КорАналитикаВидаУчета
				Неопределено, // КорАналитикаУчетаЗатрат
				Неопределено, // КорАналитикаУчетаПартий
				Неопределено, // КорАналитикаУчетаВыпуска
				ВидДвиженияНакопления.Приход,
				Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов,
				0,// Количество
				ТекущаяСтрока.НДСПриход,
				0,// Количество НУ
				ТекущаяСтрока.НДСПриход,
				0,// Постоянная разница
				СтруктураНаборыЗаписей.УчетЗатрат
			);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекущийНабор Из СтруктураНаборыЗаписей Цикл
		Если ТекущийНабор.Значение.Модифицированность() Тогда
			ТекущийНабор.Значение.Записать(Ложь);  
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРУЮЩИЕ ДВИЖЕНИЯ ПО ПРИНЯТЫМ ТМЦ ДЛЯ РА

// Функция формирует структуру, содержащую наборы записей бухгалтерских регистров
//
Функция ПолучитьСтруктуруДвиженийПоБухгалтерскимРегистрам(Регистратор)
	Движения = Новый Структура();
	Движения.Вставить("Хозрасчетный",РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
	Движения.Хозрасчетный.Отбор.Регистратор.Установить(Регистратор);
	Движения.Вставить("Налоговый",РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей());
	Движения.Налоговый.Отбор.Регистратор.Установить(Регистратор);	
	Возврат Движения;
КонецФункции	

// Процедура - 	формирует движения по принятым товарам по документу ОтчетКомитетну для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура содержащая реквизиты шапки документа,
//  ТаблицаПоТоварам - таблица значений, соответствующая табличной части,
//  Движения - коллекция движений документа.
//
Процедура СформироватьДвиженияПоОтчетуКомитенту(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Движения = ПолучитьСтруктуруДвиженийПоБухгалтерскимРегистрам(СтруктураШапкиДокумента.Ссылка);
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		//Определим дату первого поступления на комиссию, за которое отчитываемся
		ДатаПервогоПоступления = СтруктураШапкиДокумента.Дата;
		ДатаПереходаНаРасширеннуюАналитику = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
		Для Каждого ТекущаяСтрока Из ТаблицаПоТоварам Цикл
			//Определим дату самого раннего поступления
			Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументПоставки) Тогда
				Если ТекущаяСтрока.ДокументПоставки.Дата < ДатаПервогоПоступления Тогда
					ДатаПервогоПоступления = ТекущаяСтрока.ДокументПоставки.Дата;
				КонецЕсли;
			Иначе
				Если ДатаПереходаНаРасширеннуюАналитику < ДатаПервогоПоступления Тогда
					ДатаПервогоПоступления = ДатаПереходаНаРасширеннуюАналитику;
				КонецЕсли;	
			КонецЕсли;	
			
			//Закрытие счета 004
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			
			СебестоимостьБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.СуммаПоступления
										,СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
										,СтруктураШапкиДокумента.КурсВзаиморасчетов,1
										,СтруктураШапкиДокумента.КратностьВзаиморасчетов,1);
			
			Проводка.Сумма = СебестоимостьБУ;
			Проводка.КоличествоКт = ТекущаяСтрока.Количество;
			
			Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока.Номенклатура);
		КонецЦикла;	
			
		//Переформируем проводки по счету расчетов с комитентом
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		                      |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
		                      |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
		                      |	ХозрасчетныйОборотыДтКт.ВалютаДт КАК ВалютаДт,
		                      |	ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотДт,
		                      |	ХозрасчетныйОборотыДтКт.СуммаОборот
		                      |ИЗ
		                      |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		                      |			&ДатаПервогоПоступления,
		                      |			&ТекущаяДата,
		                      |			,
		                      |			,
		                      |			,
		                      |			СчетКт = &СчетРасчетовСКомитентом,
		                      |			,
		                      |			Организация = &Организация
		                      |				И СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	СчетДт,
		                      |	СубконтоДт1,
		                      |	СубконтоДт2,
		                      |	ВалютаКт");
	    Запрос.УстановитьПараметр("ДатаПервогоПоступления",ДатаПервогоПоступления);
		Запрос.УстановитьПараметр("СчетРасчетовСКомитентом",ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
		Запрос.УстановитьПараметр("ТекущаяДата",СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
		
		СуммыВыручки = ТаблицаПоТоварам.Итог("Выручка");
		СуммыВыручкиБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммыВыручки
									,СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
									,СтруктураШапкиДокумента.КурсВзаиморасчетов,1
									,СтруктураШапкиДокумента.КратностьВзаиморасчетов,1);
		
		ТаблицаРеализованныхТоваровКомитента = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекущаяСтрока Из ТаблицаРеализованныхТоваровКомитента Цикл
			Если СуммыВыручкиБУ = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СуммаКСторнированию = Мин(ТекущаяСтрока.СуммаОборот, СуммыВыручкиБУ);
			
			// Сторнирующая проводка
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			//Проводка.Содержание 			= ?(СтрокаТЧ.СписаниеПартий, "Выручка (без распределения товаров по партиям)" , "Выручка от реализации услуг");
			Проводка.СписаниеПартий         = Истина;
			Проводка.Сумма = -СуммаКСторнированию;
			
			Проводка.СчетДт                 = ТекущаяСтрока.СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ТекущаяСтрока.СубконтоДт2);
			
			Если ТекущаяСтрока.СчетДт.Валютный Тогда
				Проводка.ВалютаДт           = ТекущаяСтрока.ВалютаДт;
				Проводка.ВалютнаяСуммаДт	= -ТекущаяСтрока.ВалютнаяСуммаОборотДт;
			КонецЕсли; 
			
			Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			
			// Корректная проводка
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			//Проводка.Содержание 			= ?(СтрокаТЧ.СписаниеПартий, "Выручка (без распределения товаров по партиям)" , "Выручка от реализации услуг");
			Проводка.СписаниеПартий         = Истина;
			Проводка.Сумма = СуммаКСторнированию;
			
			Проводка.СчетДт                 = ТекущаяСтрока.СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ТекущаяСтрока.СубконтоДт2);
			
			Если ТекущаяСтрока.СчетДт.Валютный Тогда
				Проводка.ВалютаДт           = ТекущаяСтрока.ВалютаДт;
				Проводка.ВалютнаяСуммаДт	= ТекущаяСтрока.ВалютнаяСуммаОборотДт;
			КонецЕсли; 
			
			Проводка.СчетКт                 = СчетаУчета.СчетРасчетовСКомитентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			СуммыВыручкиБУ = СуммыВыручкиБУ - СуммаКСторнированию;
			
		КонецЦикла;
		
		ЗаписатьСтруктуруДвиженийВБазуДанных(Движения);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоОтчетуКомитенту()

// Процедура - 	формирует движения по принятым в переработку материалам по документу РеализацияУслугПоПереработке для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура содержащая реквизиты шапки документа,
//  ТаблицаПоТоварам - таблица значений, соответствующая табличной части,
//  Движения - коллекция движений документа.
//
Процедура СформироватьДвиженияПоРеализацииУслугПоПереработке(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Движения = ПолучитьСтруктуруДвиженийПоБухгалтерскимРегистрам(СтруктураШапкиДокумента.Ссылка);
		
		Для Каждого ТекущаяСтрока Из ТаблицаПоТоварам Цикл
			//Закрытие счета 003
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			
			СебестоимостьБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.Сумма
										,СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
										,СтруктураШапкиДокумента.КурсВзаиморасчетов,1
										,СтруктураШапкиДокумента.КратностьВзаиморасчетов,1);
			
			Проводка.Сумма = 0;
			Проводка.КоличествоКт = -ТекущаяСтрока.Количество;
			Проводка.КоличествоДт = -ТекущаяСтрока.Количество;
			
			Проводка.СчетДт                 = ТекущаяСтрока.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока.Номенклатура);
			
			Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока.Номенклатура);
			
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			
			Проводка.Сумма = СебестоимостьБУ;
			Проводка.КоличествоКт = ТекущаяСтрока.Количество;
			Проводка.КоличествоДт = ТекущаяСтрока.Количество;
			
			Проводка.СчетДт                 = ТекущаяСтрока.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока.Номенклатура);
			
			Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока.Номенклатура);
		КонецЦикла;	
		
		ЗаписатьСтруктуруДвиженийВБазуДанных(Движения);
		
	КонецЕсли;    	
КонецПроцедуры	

// Процедура - 	формирует движения реализации принятого на комиссию товара для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура содержащая реквизиты шапки документа,
//  СтруктураТабличныхЧастей - структура, содержащая табличные части документа,
//  Ссылка - ссылка на документ,
//  Движения - коллекция движений документа,
//  ЕстьБезналичныеРасчеты - булево.
//
Процедура СформироватьДвиженияПоРеализацииПринятогоНаКомиссиюТовара(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения, ЕстьБезналичныеРасчеты)
	
		
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		  //Сформируем движения по реализованным товарам комитента
		
		НаборДвиженийРеализованныеТовары = Движения.РеализованныеТовары;
		НаборДвиженийПродажиСебестоимость = Движения.ПродажиСебестоимость;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийРеализованныеТовары = НаборДвиженийРеализованныеТовары.Выгрузить();
		ТаблицаДвиженийПродажиСебестоимость = НаборДвиженийПродажиСебестоимость.Выгрузить();
		
		// Дополним таблицу товаров сведениями о конечных покупателях
		Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			УчетНДС.ДополнитьСписанныеТоварыДаннымиПоКомиссии(Ссылка, СтруктураТабличныхЧастей.ТаблицаПоТоварам);
		КонецЕсли;
		
		// Заполним таблицу движений.
		Для Каждого ТекущаяСтрока Из СтруктураТабличныхЧастей.ТаблицаПоТоварам Цикл
			
			Если ТекущаяСтрока.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
				Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					Количество = ТекущаяСтрока.МинусКоличество;
					Выручка = ТекущаяСтрока.СтоимостьПродажи;
				Иначе	
					Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
						Выручка = ТекущаяСтрока.СтоимостьБезСкидок;
					Иначе	
						Выручка = ТекущаяСтрока.Стоимость;
					КонецЕсли;						
					Количество = ТекущаяСтрока.Количество;
				КонецЕсли;	
				
				// Получим сведения о покупателе и дате продажи
				Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
					Покупатель 		= Справочники.Контрагенты.ПустаяСсылка();
					ДатаРеализации 	= Ссылка.Дата;
				ИначеЕсли ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда 
					Покупатель 		= ТекущаяСтрока.Покупатель;
					ДатаРеализации 	= ТекущаяСтрока.ДатаСФ;
				Иначе
					Покупатель 		= Ссылка.Контрагент;
					ДатаРеализации 	= Ссылка.Дата;
				КонецЕсли;
				
				//Движения по регистру РеализованныеТовары				
				СтрокаДвижений = ТаблицаДвиженийРеализованныеТовары.Добавить();
				СтрокаДвижений.Номенклатура = ТекущаяСтрока.Номенклатура;
				СтрокаДвижений.ХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатуры;
				СтрокаДвижений.СерияНоменклатуры = ТекущаяСтрока.СерияНоменклатуры;
				СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
				СтрокаДвижений.Покупатель = Покупатель;
				СтрокаДвижений.ДатаРеализации = ДатаРеализации;
				СтрокаДвижений.Количество = Количество;
				СтрокаДвижений.Выручка = Выручка;
				
				//Движения по регистру ПродажиСебестоимость
				СтрокаДвижений = ТаблицаДвиженийПродажиСебестоимость.Добавить();
				СтрокаДвижений.Номенклатура = ТекущаяСтрока.Номенклатура;
				СтрокаДвижений.ХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатуры;
				Если СтруктураТабличныхЧастей.ТаблицаПоТоварам.Колонки.Найти("ЗаказПокупателя") <> Неопределено Тогда
					СтрокаДвижений.ЗаказПокупателя = ТекущаяСтрока.ЗаказПокупателя;
				ИначеЕсли СтруктураШапкиДокумента.Свойство("Сделка") Тогда	
					СтрокаДвижений.ЗаказПокупателя = СтруктураШапкиДокумента.Сделка;
				КонецЕсли;	
				СтрокаДвижений.Проект = СтруктураШапкиДокумента.Проект;
				СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
				СтрокаДвижений.Подразделение = СтруктураШапкиДокумента.Подразделение;
				
				СтрокаДвижений.Количество = Количество;
				СтрокаДвижений.Стоимость = Выручка;	
				
			КонецЕсли;
		КонецЦикла;	
			
		НаборДвиженийРеализованныеТовары.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийРеализованныеТовары.мТаблицаДвижений = ТаблицаДвиженийРеализованныеТовары;
		НаборДвиженийРеализованныеТовары.ВыполнитьПриход();
		
		НаборДвиженийПродажиСебестоимость.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПродажиСебестоимость.мТаблицаДвижений = ТаблицаДвиженийПродажиСебестоимость;
		НаборДвиженийПродажиСебестоимость.ВыполнитьДвижения();
	КонецЕсли;	
	                              
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		//Сформируем проводки по принятому товару
		Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Если ЕстьБезналичныеРасчеты Тогда
				СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
			Иначе
				СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизации;
			КонецЕсли;
		Иначе
			СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;	
		
		Если СчетДт.Валютный Тогда
			СписокВалютныхСумм = ", СуммаБезНДСВал, НДСВал";
		Иначе
			СписокВалютныхСумм = "";
		КонецЕсли;	
		
		ТаблицаВыручкиДляБУ = СтруктураТабличныхЧастей.ТаблицаПоТоварам.Скопировать(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.Принятый), "СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СуммаБезНДС, НДС"+СписокВалютныхСумм);
		ТаблицаВыручкиДляБУ.Колонки.Добавить("СписаниеПартий", Новый ОписаниеТипов("Булево"));
		ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СписаниеПартий", "СуммаБезНДС, НДС"+СписокВалютныхСумм);
		Для каждого СтрокаТЧ из ТаблицаВыручкиДляБУ Цикл
			
			// Выручка
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			//Проводка.Содержание 			= ?(СтрокаТЧ.СписаниеПартий, "Выручка (без распределения товаров по партиям)" , "Выручка от реализации услуг");
			Проводка.СписаниеПартий         = СтрокаТЧ.СписаниеПартий;
			Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				Проводка.Сумма = -(СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС);
			Иначе	
				Проводка.Сумма = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
			КонецЕсли;	
			
			Проводка.СчетДт                 = СчетДт;
			Если СтруктураШапкиДокумента.Свойство("Контрагент") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			КонецЕсли;	
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.НДСВал;
			КонецЕсли; 
			
			Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
		КонецЦикла;			
	КонецЕсли;	
	
КонецПроцедуры		

// Процедура - 	формирует движения по передаче в производство и возврату из производства принятых для переработки материалов для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура содержащая реквизиты шапки документа,
//  СтруктураТабличныхЧастей - структура, содержащая табличные части документа,
//  Ссылка - ссылка на документ,
//  Движения - коллекция движений документа.
//
Процедура СформироватьДвиженияПоПередачеДавальческихМатериаловВПроизводство(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Для оприходования материалов из производства количество в проводке будет отрицательным.
		Коэффициент = ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства"), -1, 1);
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
			ИмяТаблицыМатериалов = "ТаблицаПоТоварам";
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
			ИмяТаблицыМатериалов = "ТаблицаПоМатериалам";
		Иначе //Комплектация
			ИмяТаблицыМатериалов = "ТаблицаПоКомплектующим";
		КонецЕсли;
		
		ТаблицаСписания = СтруктураТабличныхЧастей[ИмяТаблицыМатериалов].Скопировать(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.Принятый), "Номенклатура, СчетУчетаБУ, Количество");
		ТаблицаСписания.Свернуть("Номенклатура, СчетУчетаБУ", "Количество");
		
		Для Каждого СтрокаТЧ Из ТаблицаСписания Цикл
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			Проводка.СписаниеПартий         = Истина;
			
			Проводка.Сумма 					= 0;
			Проводка.КоличествоДт 			= Коэффициент * СтрокаТЧ.Количество;
			Проводка.КоличествоКт 			= Коэффициент * СтрокаТЧ.Количество;
			
			Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
			Проводка.СчетКт                 = СтрокаТЧ.СчетУчетаБУ;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - 	формирует движения по возврату принятых для переработки материалов давальцу для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура содержащая реквизиты шапки документа,
//  СтруктураТабличныхЧастей - структура, содержащая табличные части документа,
//  Ссылка - ссылка на документ,
//  Движения - коллекция движений документа.
//
Процедура СформироватьДвиженияВозвратаПринятыхМатериалов(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения, ВидОперации)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Для Каждого ТекущаяСтрока Из СтруктураТабличныхЧастей.ТаблицаПоТоварам Цикл
			//Закрытие счета 003
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			
			СебестоимостьБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.Сумма
										,СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
										,СтруктураШапкиДокумента.КурсВзаиморасчетов,1
										,СтруктураШапкиДокумента.КратностьВзаиморасчетов,1);
			
			Проводка.Сумма = СебестоимостьБУ;
			Проводка.КоличествоКт = ТекущаяСтрока.Количество;
			Проводка.Содержание = "Возврат поставщику";
			
			Проводка.СчетКт = ТекущаяСтрока.СчетУчетаБУ;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока.Номенклатура);			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - 	обработчик подписки на событие
//  Движения - коллекция движений документа.
//
Процедура СформироватьДвиженияПоУчетуПринятыхТМЦ(Источник, Отказ, РежимПроведения) Экспорт
	
	СтруктураШапкиДокумента = Источник.мСтруктураШапкиДокумента;
	СтруктураТабличныхЧастей = Источник.мСтруктураТабличныхЧастей;
	Ссылка = Источник.Ссылка;
	
    Движения = ПолучитьСтруктуруДвиженийПоБухгалтерскимРегистрам(Ссылка);
	
	Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
	  ИЛИ ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")	
	  ИЛИ ((ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	  			ИЛИ (ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") И СтруктураШапкиДокумента.КорректироватьБУиНУ)
	  			ИЛИ ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
	  		И СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда	
	  
	 	Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ЕстьБезналичныеРасчеты = СтруктураШапкиДокумента.ЕстьБезналичныеРасчеты;
		Иначе
			ЕстьБезналичныеРасчеты = Ложь;
		КонецЕсли;
		
		Движения.Вставить("РеализованныеТовары",РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей());
		Движения.РеализованныеТовары.Отбор.Регистратор.Установить(Ссылка);
		Движения.Вставить("ПродажиСебестоимость",РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
		Движения.ПродажиСебестоимость.Отбор.Регистратор.Установить(Ссылка);	
		
		СформироватьДвиженияПоРеализацииПринятогоНаКомиссиюТовара(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения, ЕстьБезналичныеРасчеты);
		
	ИначеЕсли ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ТребованиеНакладная")
	  ИЛИ ((ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")) И (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы))
	  ИЛИ ((ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")) И (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции)) Тогда
	  
	 	СформироватьДвиженияПоПередачеДавальческихМатериаловВПроизводство(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения);
	  
	ИначеЕсли ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
	  И (Ссылка.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		ИЛИ (Ссылка.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		  И СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))Тогда
		  
		СформироватьДвиженияВозвратаПринятыхМатериалов(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения, Источник.Ссылка.ВидОперации);
		
	КонецЕсли;	
	
	//Запись движений в БД
	ЗаписатьСтруктуруДвиженийВБазуДанных(Движения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ОБСЛУЖИВАНИЯ ФУНКЦИЙ УЧЕТА ЗАТРАТ

Процедура РасчетЦеныНоменклатурыНаСервере(Настройка, ВызываетсяИзФормыНастройки = Ложь) Экспорт
	МодульРегламентныхЗаданий.РасчетЦеныНоменклатуры(Настройка, ВызываетсяИзФормыНастройки);
КонецПроцедуры	

Процедура РасчитатьЦенуНоменклатуры(СтруктураПараметров, ТекстЗапроса, ПараметрыЗапроса) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураПараметров.НастройкаРасчетаСебестоимости) Тогда
		
		//Сначала расчитаем себестоимость	
		СтруктураПараметровРасчетаСебестоимости = Новый Структура("Организация, НастройкаЗакрытияМесяца, ВидОтраженияВУчете, Задержка");
		ЗаполнитьЗначенияСвойств(СтруктураПараметровРасчетаСебестоимости, СтруктураПараметров.НастройкаРасчетаСебестоимости);
		
		СтруктураПараметровРасчетаСебестоимости.Вставить("ВыполняемыеДействия", СтруктураПараметров.НастройкаРасчетаСебестоимости.ВыполняемыеДействия.Выгрузить());
		
		РасчитатьСебестоимость(СтруктураПараметровРасчетаСебестоимости);
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ОписаниеПараметраЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Ключ, ОписаниеПараметраЗапроса.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Если СтруктураПараметров.СоздаватьНовыйДокумент Тогда
			
			ДокументОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			ДокументОбъект.Дата = НачалоДня(ТекущаяДата());
			СтрокаСТипомЦен = ДокументОбъект.ТипыЦен.Добавить();
			СтрокаСТипомЦен.ТипЦен = СтруктураПараметров.ТипЦен;
			
        Иначе
		
			ЗапросПоДокументам = Новый Запрос;
			ЗапросПоДокументам.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УстановкаЦенНоменклатурыТипыЦен.Ссылка
			|ИЗ
			|	Документ.УстановкаЦенНоменклатуры.ТипыЦен КАК УстановкаЦенНоменклатурыТипыЦен
			|ГДЕ
			|	УстановкаЦенНоменклатурыТипыЦен.Ссылка.Проведен
			|	И УстановкаЦенНоменклатурыТипыЦен.Ссылка.Дата = &ДатаНачала
			|	И УстановкаЦенНоменклатурыТипыЦен.ТипЦен = &ТипЦен";
			
			ЗапросПоДокументам.УстановитьПараметр("ТипЦен",		СтруктураПараметров.ТипЦен);
			ЗапросПоДокументам.УстановитьПараметр("ДатаНачала",	НачалоМесяца(ТекущаяДата()));
			
			Выборка = ЗапросПоДокументам.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если ДокументОбъект.ТипыЦен.Количество() > 1 Тогда
					ВызватьИсключение("В документе " + ДокументОбъект.Ссылка + " используется более одного типа цен. Документ не перезаполнен");
				КонецЕсли;
				
			Иначе
				
				ДокументОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ДокументОбъект.Дата = НачалоМесяца(ТекущаяДата());
				СтрокаСТипомЦен = ДокументОбъект.ТипыЦен.Добавить();
				СтрокаСТипомЦен.ТипЦен = СтруктураПараметров.ТипЦен;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если СтруктураПараметров.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
			Валюта = глЗначениеПеременной("ВалютаУправленческогоУчета");
		Иначе
			Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		КонецЕсли;
		
		ДокументОбъект.Товары.Очистить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) ТОгда
				
				Если СтруктураПараметров.ПорядокФормированияЦены = 0 Тогда
					Цена = ?(Выборка.КоличествоРасход = 0, 0, Выборка.СтоимостьРасход/Выборка.КоличествоРасход);
				Иначе
					Цена = ?(Выборка.КоличествоПриход = 0, 0, Выборка.СтоимостьПриход/Выборка.КоличествоПриход);
				КонецЕсли;
				
				Цена = Ценообразование.ОкруглитьЦену(
					Цена,
					СтруктураПараметров.ТипЦен.ПорядокОкругления,
					СтруктураПараметров.ТипЦен.ОкруглятьВБольшуюСторону);
				
				Если Цена <> 0 Тогда
					
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					НоваяСтрока.Номенклатура 			= Выборка.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения 		= НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
					НоваяСтрока.Валюта 					= Валюта;
					НоваяСтрока.ТипЦен 					= СтруктураПараметров.ТипЦен;
					НоваяСтрока.Цена 					= Цена;
					НоваяСтрока.ИндексСтрокиТаблицыЦен 	= НоваяСтрока.НомерСтроки-1;
					НоваяСтрока.СпособРасчетаЦены 		= СтруктураПараметров.ТипЦен.СпособРасчетаЦены;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура РасчитатьСебестоимость(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетСебестоимостиВыпуска.Ссылка
	|ИЗ
	|	Документ.РасчетСебестоимостиВыпуска КАК РасчетСебестоимостиВыпуска
	|ГДЕ
	|	РасчетСебестоимостиВыпуска.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|	И РасчетСебестоимостиВыпуска.Проведен
	|	И РасчетСебестоимостиВыпуска.Организация = &Организация
	|	И РасчетСебестоимостиВыпуска.ОтражатьВУправленческомУчете = &ОтражатьВУправленческомУчете
	|	И РасчетСебестоимостиВыпуска.ОтражатьВБухгалтерскомУчете = &ОтражатьВБухгалтерскомУчете
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетСебестоимостиВыпуска.Дата,
	|	РасчетСебестоимостиВыпуска.Ссылка";
						  
	ДатаДокумента = ДобавитьМесяц(ТекущаяДата(), - СтруктураПараметров.Задержка);					  
	
	Если СтруктураПараметров.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете ТОгда
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете = Ложь;
	Иначе	
		ОтражатьВУправленческомУчете = Ложь;
		ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",							ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", 					СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ОтражатьВУправленческомУчете", 	ОтражатьВУправленческомУчете);
	Запрос.УстановитьПараметр("ОтражатьВБухгалтерскомУчете", 	ОтражатьВБухгалтерскомУчете);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() ТОгда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
	Иначе
		
		ДокументОбъект = Документы.РасчетСебестоимостиВыпуска.СоздатьДокумент();
		ДокументОбъект.Дата 						= ДатаДокумента;
		ДокументОбъект.ПериодРегистрации 			= НачалоМесяца(ДатаДокумента);
		ДокументОбъект.Организация 					= СтруктураПараметров.Организация;
		ДокументОбъект.НастройкаЗакрытияМесяца 		= СтруктураПараметров.НастройкаЗакрытияМесяца;
		ДокументОбъект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
		ДокументОбъект.ОтражатьВБухгалтерскомУчете 	= ОтражатьВБухгалтерскомУчете;
		
	КонецЕсли;	
	
	ДокументОбъект.ВыполняемыеДействия.Загрузить(СтруктураПараметров.ВыполняемыеДействия);
	
	Если ДокументОбъект.Проведен Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе	
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Отказ = Ложь;
	
	//Переменная используется при проведении документа.
	//Т.к. вне транзакции могут проводиться только непроведенные документы, то движения очищать не нужно.
	ДокументОбъект.мУдалятьДвижения = Ложь;
	
	ДокументОбъект.ОбработкаПроведения(Отказ,РежимПроведенияДокумента.Неоперативный);
	
	Если НЕ Отказ Тогда
		
		//Если при выполнении процедуры ОбработкаПроведения() были добавлены движения в коллекцию Движения, то их нужно записать
		Для Каждого ТекущееДвижение Из ДокументОбъект.Движения Цикл
			Если ТекущееДвижение.Модифицированность() ТОгда
				ТекущееДвижение.Записать();
			КонецЕсли;
		КонецЦикла;	
		
		ДокументОбъект.Проведен = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ОСНОВНЫЕ ПРОЦЕДУРЫ

// Функция инициализирует структуру таблицы списания затрат
//
Функция ПодготовитьТаблицуДляФормированияДвижений(СтруктураНаборовЗаписейПоВидамУчета, Источник)
	
	ТаблицаДляФормированияДвижений = Новый ТаблицаЗначений();
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ИмяРегистра", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(15)));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВыполнятьСписание", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВыполнятьОприходование", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВыполнятьДвижениеСписание", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВыполнятьДвижениеОприходование", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ФормироватьПроводки", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("РассчитыватьСуммы", Новый ОписаниеТипов("Булево"));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("АналитикаВидаУчета", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("АналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("АналитикаУчетаПартий", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("АналитикаРаспределенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ОписаниеТиповСтоимость = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("Количество", ОписаниеТиповКоличество);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КоличествоНУ", ОписаниеТиповКоличество);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("Стоимость", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СтоимостьНУ", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ПостояннаяРазница", ОписаниеТиповСтоимость);
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КоличествоПолучатель", ОписаниеТиповКоличество);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КоличествоНУПолучатель", ОписаниеТиповКоличество);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СтоимостьПолучатель", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СтоимостьНУПолучатель", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ПостояннаяРазницаПолучатель", ОписаниеТиповСтоимость);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийПартииТоваров"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийВыпускПродукции"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийЗатратыНаВыпускПродукции"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КодОперации", Новый ОписаниеТипов(МассивТипов));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КорАналитикаВидаУчета", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета, СправочникСсылка.КлючиАналитикиУчетаПрочихЗатрат"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КорАналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КорАналитикаУчетаПартий", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КорАналитикаРаспределенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ХарактерЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерЗатрат"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВидЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗатрат"));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СуммаВал", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));

	
	Если СтруктураНаборовЗаписейПоВидамУчета.Свойство("УчетЗатратРегл") Тогда
		//Дополнительные реквизиты, которые могут не отражаться в регистре "Учет затрат организаций" (в случае если не ведется партионный учет по складам) 
		//но нужны для формирования проводок
		ТаблицаДляФормированияДвижений.Колонки.Добавить("СкладПолучатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;	
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию")
	 ИЛИ ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации")
	Тогда
		ТаблицаДляФормированияДвижений.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("СпособОтраженияРасходов", Новый ОписаниеТипов(МассивТипов));
		
		ТаблицаДляФормированияДвижений.Колонки.Добавить("СчетУчетаБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("СчетУчетаНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	КонецЕсли;
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ДатаИсправительнойЗаписи", Новый ОписаниеТипов("Дата"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СчитатьРазницыПостоянными", Новый ОписаниеТипов("Булево"));
		
	Возврат ТаблицаДляФормированияДвижений;
	
КонецФункции	

// Процедура заполняет строку в таблице списания затрат
//
Процедура ЗаполнитьСтрокуВТаблицеДляФормированияДвижений(
	ТаблицаДляФормированияДвижений,
	ТекущаяСтрокаСписания,
	ТекущаяСтрокаОприходования,
	ИмяРегистра,
	КодОперацииПартийТоваров,
	Источник,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаУчетаПартий,
	АналитикаРаспределенияЗатрат,
	АналитикаВидаУчетаПолучатель,
	АналитикаУчетаЗатратПолучатель,
	АналитикаУчетаПартийПолучатель,
	АналитикаРаспределенияЗатратПолучатель
	)
						
	НоваяСтрока = ТаблицаДляФормированияДвижений.Добавить();					
	
	НоваяСтрока.ИмяРегистра = ИмяРегистра;
	НоваяСтрока.ВыполнятьСписание = (НЕ ТекущаяСтрокаСписания = Неопределено);
	НоваяСтрока.ВыполнятьДвижениеСписание = ?(НоваяСтрока.ВыполнятьСписание, ТекущаяСтрокаСписания.ВыполнятьДвижение,Ложь);
	НоваяСтрока.ВыполнятьОприходование = (НЕ ТекущаяСтрокаОприходования = Неопределено);
	НоваяСтрока.ВыполнятьДвижениеОприходование = ?(НоваяСтрока.ВыполнятьОприходование, ТекущаяСтрокаОприходования.ВыполнятьДвижение,Ложь);
	Если НЕ ТекущаяСтрокаСписания = Неопределено Тогда
		НоваяСтрока.РассчитыватьСуммы = ТекущаяСтрокаСписания.РассчитыватьСуммы;
	Иначе
		НоваяСтрока.РассчитыватьСуммы = Истина;
	КонецЕсли;	
	
	Если КодОперацииПартийТоваров = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПогашениеСтоимости Тогда
		НоваяСтрока.ФормироватьПроводки = НоваяСтрока.ВыполнятьСписание;
	ИначеЕсли КодОперацииПартийТоваров = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеПартийВЭксплуатацию Тогда
		НоваяСтрока.ФормироватьПроводки = Ложь;
	Иначе
		НоваяСтрока.ФормироватьПроводки = НоваяСтрока.ВыполнятьДвижениеСписание;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = КодОперацииПартийТоваров;
						
	//Кэширование информации для последующего формирования проводок
	НоваяСтрока.АналитикаВидаУчета = АналитикаВидаУчета;
	НоваяСтрока.АналитикаУчетаЗатрат = АналитикаУчетаЗатрат;
	НоваяСтрока.АналитикаУчетаПартий = АналитикаУчетаПартий;
	НоваяСтрока.АналитикаРаспределенияЗатрат = АналитикаРаспределенияЗатрат;
	
	НоваяСтрока.КорАналитикаВидаУчета = АналитикаВидаУчетаПолучатель;
	НоваяСтрока.КорАналитикаУчетаЗатрат = АналитикаУчетаЗатратПолучатель;
	НоваяСтрока.КорАналитикаУчетаПартий = АналитикаУчетаПартийПолучатель;
	НоваяСтрока.КорАналитикаРаспределенияЗатрат = АналитикаРаспределенияЗатратПолучатель;
	
	Если НЕ ТекущаяСтрокаСписания = Неопределено Тогда
		Если ИмяРегистра = "УчетЗатратРегл" Тогда
			НоваяСтрока.Склад = ТекущаяСтрокаСписания.СкладДляФормированияПроводок;
			НоваяСтрока.СуммаВал = ТекущаяСтрокаСписания.СуммаВал;
			НоваяСтрока.Валюта = ТекущаяСтрокаСписания.Валюта;
		КонецЕсли;	
	
		НоваяСтрока.Количество = ТекущаяСтрокаСписания.Количество;
		НоваяСтрока.Стоимость = ТекущаяСтрокаСписания.Стоимость;
		НоваяСтрока.КоличествоНУ = ТекущаяСтрокаСписания.КоличествоНУ;
		НоваяСтрока.Стоимость = ТекущаяСтрокаСписания.Стоимость;
		НоваяСтрока.СтоимостьНУ = ТекущаяСтрокаСписания.СтоимостьНУ;
		НоваяСтрока.ПостояннаяРазница = ТекущаяСтрокаСписания.ПостояннаяРазница;
		
		// Запомним движения для расчета погашенной стоимости.
		Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию")
		 ИЛИ ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации")
		Тогда
			НоваяСтрока.Номенклатура = ТекущаяСтрокаСписания.Затрата;
			НоваяСтрока.СпособОтраженияРасходов = ТекущаяСтрокаСписания.СпособОтраженияРасходов;
			
			Если ИмяРегистра = "УчетЗатратРегл" Тогда
				НоваяСтрока.СчетУчетаБУ = ТекущаяСтрокаСписания.СчетУчета;
				НоваяСтрока.СчетУчетаНУ = ТекущаяСтрокаСписания.СчетУчетаНУ;
				
				НоваяСтрока.ОтражатьВБухгалтерскомУчете = Истина;
				НоваяСтрока.ОтражатьВНалоговомУчете = Источник.ОтражатьВНалоговомУчете;
			Иначе
				НоваяСтрока.ОтражатьВУправленческомУчете = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
		
	Если НЕ ТекущаяСтрокаОприходования = Неопределено Тогда
		Если ИмяРегистра = "УчетЗатратРегл" Тогда
			НоваяСтрока.СкладПолучатель = ТекущаяСтрокаОприходования.СкладДляФормированияПроводок;
		КонецЕсли;	
			
		НоваяСтрока.ХарактерЗатрат = ТекущаяСтрокаОприходования.ХарактерЗатрат;
		НоваяСтрока.ВидЗатрат = ТекущаяСтрокаОприходования.ВидЗатрат;
		
		НоваяСтрока.КоличествоПолучатель = ТекущаяСтрокаОприходования.Количество;
		НоваяСтрока.СтоимостьПолучатель = ТекущаяСтрокаОприходования.Стоимость;
		НоваяСтрока.КоличествоНУПолучатель = ТекущаяСтрокаОприходования.КоличествоНУ;
		НоваяСтрока.СтоимостьПолучатель = ТекущаяСтрокаОприходования.Стоимость;
		НоваяСтрока.СтоимостьНУПолучатель = ТекущаяСтрокаОприходования.СтоимостьНУ;
		НоваяСтрока.ПостояннаяРазницаПолучатель = ТекущаяСтрокаОприходования.ПостояннаяРазница;
	КонецЕсли;	
			
КонецПроцедуры	

// Функция возвращает значения ресурса для записи в регистр по налоговому учету. 
// Если документ по налоговому учету не проводиться, то в соответствующие ресурсы всегда должен писаться 0
// 
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  СтароеЗначениеРесурса - значение ресурса которое нужно писать в регистр, если документ проводиться по НУ.
//  
// Возвращаемое значение:
//  значение ресурса для записи в регистр.		
//
Функция ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, СтароеЗначениеРесурса)
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") Тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Возврат СтароеЗначениеРесурса;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат СтароеЗначениеРесурса;
	КонецЕсли;	
КонецФункции	

// Процедура добавляет движения в регистры учета затрат
// 
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  ТекущаяСтрока - строка таблицы значений, описывающая затрату,
//  ТекущийНабор - набор записей, в который добавляются записи по затратам.
//
Процедура СформироватьДвиженияПоСтрокеДляСписания(СтруктураШапкиДокумента,ТекущаяСтрока,ТекущийНабор)
	
	//Формирование расходных движений по регистру УчетЗатрат или УчетЗатратРегл
	Если ТекущаяСтрока.ВыполнятьСписание И ТекущаяСтрока.ВыполнятьДвижениеСписание Тогда					
	  
		  РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			ТекущаяСтрока.АналитикаВидаУчета, // АналитикаВидаУчета
			ТекущаяСтрока.АналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
			ТекущаяСтрока.АналитикаУчетаПартий, // АналитикаУчетаПартий
			ТекущаяСтрока.АналитикаРаспределенияЗатрат, // АналитикаУчетаВыпуска
			ТекущаяСтрока.КорАналитикаВидаУчета, // КорАналитикаВидаУчета
			ТекущаяСтрока.КорАналитикаУчетаЗатрат, // КорАналитикаУчетаЗатрат
			ТекущаяСтрока.КорАналитикаУчетаПартий, // КорАналитикаУчетаПартий
			ТекущаяСтрока.КорАналитикаРаспределенияЗатрат, // КорАналитикаУчетаВыпуска
			ВидДвиженияНакопления.Расход,
			ТекущаяСтрока.КодОперации,
			ТекущаяСтрока.Количество,
			ТекущаяСтрока.Стоимость,
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.КоличествоНУ),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.СтоимостьНУ),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.ПостояннаяРазница),
			ТекущийНабор,
			Ложь // ЗаписыватьДвижения
		);
	
	КонецЕсли;
	
	Если ТекущаяСтрока.ВыполнятьОприходование И ТекущаяСтрока.ВыполнятьДвижениеОприходование Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ХарактерЗатрат) Тогда
			УчетЗатратПоНоменклатуре = РасширеннаяАналитикаУчета.УчитыватьЗатратыПоНоменклатуре(
				ТекущаяСтрока.ХарактерЗатрат,
				ТекущаяСтрока.ВидЗатрат
			);
		Иначе
			УчетЗатратПоНоменклатуре = Истина;
		КонецЕсли;
	
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			ТекущаяСтрока.КорАналитикаВидаУчета, // АналитикаВидаУчета
			ТекущаяСтрока.КорАналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
			ТекущаяСтрока.КорАналитикаУчетаПартий, // АналитикаУчетаПартий
			ТекущаяСтрока.КорАналитикаРаспределенияЗатрат, // АналитикаУчетаВыпуска
			ТекущаяСтрока.АналитикаВидаУчета, // КорАналитикаВидаУчета
			ТекущаяСтрока.АналитикаУчетаЗатрат, // КорАналитикаУчетаЗатрат
			ТекущаяСтрока.АналитикаУчетаПартий, // КорАналитикаУчетаПартий
			ТекущаяСтрока.АналитикаРаспределенияЗатрат, // КорАналитикаУчетаВыпуска
			ВидДвиженияНакопления.Приход,
			ТекущаяСтрока.КодОперации,
			?(УчетЗатратПоНоменклатуре, ТекущаяСтрока.КоличествоПолучатель, 0),
			ТекущаяСтрока.СтоимостьПолучатель,
			?(УчетЗатратПоНоменклатуре, ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.КоличествоНУПолучатель), 0),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.СтоимостьНУПолучатель),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.ПостояннаяРазницаПолучатель),
			ТекущийНабор,
			Ложь // ЗаписыватьДвижения
		);
	КонецЕсли;
КонецПроцедуры	

// Процедура расчитывает стоимость списания по затратам
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  ТаблицаДляФормированияДвижений - таблица значений, содержащая перечень списываемых затрат,
//  СтруктураНаборовЗаписейПоВидамУчета - структура, содержащая перечень регистров, по которым производиться списание.
//
Процедура ЗаполнитьСуммыВДвижениях(СтруктураШапкиДокумента, ТаблицаДляФормированияДвижений, СтруктураНаборовЗаписейПоВидамУчета)
	
	Для Каждого ТекущийНаборЗаписей Из СтруктураНаборовЗаписейПоВидамУчета Цикл
		
		ИмяРегистраУчетаЗатрат = ТекущийНаборЗаписей.Ключ;
		
		//Определим способ рассчета себестоимости
	    Если ИмяРегистраУчетаЗатрат = "УчетЗатрат" Тогда
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента.Дата);
			ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
			ТекстУчета = "управленческому";
		Иначе	
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
			ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
			ТекстУчета = "регламентированному";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитика)
		 ИЛИ НЕ ЗначениеЗаполнено(УчетнаяПолитика.СпособРасчетаСебестоимостиВыпускаПоОперациям)
		 ИЛИ УчетнаяПолитика.СпособРасчетаСебестоимостиВыпускаПоОперациям = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоНулевойСтоимости Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТаблицаДляФормированияДвижений.Колонки.Найти("ИдентификаторСтроки") = Неопределено Тогда
			//Пронумеруем строки
			ТаблицаДляФормированияДвижений.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
			Для Каждого ТекущаяСтрока Из ТаблицаДляФормированияДвижений Цикл
				ТекущаяСтрока.ИдентификаторСтроки = ТаблицаДляФормированияДвижений.Индекс(ТекущаяСтрока);
			КонецЦикла;	
		КонецЕсли;
		
		СпособРасчетаСебестоимостиСписанияМПЗ = УчетнаяПолитика.СпособРасчетаСебестоимостиВыпускаПоОперациям;
		
		//Для документов выпуска определяем себестоимость только по плановым ценам или нулевой стоимости
		ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
		Если ТипДокумента = Тип("ДокументСсылка.УслугиСобственнымПодразделениям")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ВыпускПродукции") Тогда
			Если СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам Тогда
				СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПлановойСебестоимости;
			КонецЕсли;	
		КонецЕсли;	
		
		//Подготовим таблицу списанных товаров
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗ.ИдентификаторСтроки КАК НомерСтроки,
		|	ТЗ.АналитикаВидаУчета,
		|	ТЗ.АналитикаУчетаЗатрат,
		|	ТЗ.АналитикаУчетаПартий,
		|	ТЗ.АналитикаРаспределенияЗатрат
		|ПОМЕСТИТЬ ТаблицаСписания
		|ИЗ
		|	&ТаблицаДвижений КАК ТЗ
		|ГДЕ
		|	ТЗ.ВыполнятьСписание
		|	И ТЗ.РассчитыватьСуммы
		|	И ТЗ.ИмяРегистра = &ИмяРегистраУчетаЗатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаСписания.НомерСтроки
		|ИЗ
		|	ТаблицаСписания КАК ТаблицаСписания";
		
		Запрос.УстановитьПараметр("ТаблицаДвижений", 		ТаблицаДляФормированияДвижений);                                             
		Запрос.УстановитьПараметр("ИмяРегистраУчетаЗатрат", ИмяРегистраУчетаЗатрат);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	УчетЗатратОстатки.АналитикаВидаУчета,
			|	УчетЗатратОстатки.АналитикаРаспределенияЗатрат,
			|	УчетЗатратОстатки.АналитикаУчетаЗатрат,
			|	УчетЗатратОстатки.АналитикаУчетаПартий,
			|	//ДляРеглУчета УчетЗатратОстатки.КоличествоНУОстаток,
			|	//ДляРеглУчета УчетЗатратОстатки.СтоимостьНУОстаток,
			|	//ДляРеглУчета УчетЗатратОстатки.ПостояннаяРазницаОстаток,
			|	УчетЗатратОстатки.КоличествоОстаток,
			|	УчетЗатратОстатки.СтоимостьОстаток
			|	
			|ПОМЕСТИТЬ УчетЗатратОстатки
			|ИЗ
			|	РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&ДатаДокумента,
			|		(
			|		АналитикаВидаУчета, 
			|		АналитикаРаспределенияЗатрат, 
			|		АналитикаУчетаЗатрат, 
			|		АналитикаУчетаПартий
			|		) В (
			|			ВЫБРАТЬ 
			|				ТаблицаСписания.АналитикаВидаУчета, 
			|				ТаблицаСписания.АналитикаРаспределенияЗатрат, 
			|				ТаблицаСписания.АналитикаУчетаЗатрат, 
			|				ТаблицаСписания.АналитикаУчетаПартий 
			|			ИЗ 
			|				ТаблицаСписания КАК ТаблицаСписания
			|			)
			|	) КАК УчетЗатратОстатки
			|;
			|///////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	ТаблицаСписания.НомерСтроки,
			|	//ДляРеглУчета ВЫБОР КОГДА ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0) = 0 
			|	//ДляРеглУчета ТОГДА 0
			|	//ДляРеглУчета ИНАЧЕ ЕСТЬNULL(УчетЗатратОстатки.СтоимостьНУОстаток,0) / ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0)
			|	//ДляРеглУчета КОНЕЦ КАК ЦенаНУ,
			|	//ДляРеглУчета ВЫБОР КОГДА ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0) = 0 
			|	//ДляРеглУчета ТОГДА 0
			|	//ДляРеглУчета ИНАЧЕ ЕСТЬNULL(УчетЗатратОстатки.ПостояннаяРазницаОстаток,0) / ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0)
			|	//ДляРеглУчета КОНЕЦ КАК ЦенаПР,					  
			|	ВЫБОР КОГДА ЕСТЬNULL(УчетЗатратОстатки.КоличествоОстаток,0) = 0 
			|	ТОГДА 0
			|	ИНАЧЕ ЕСТЬNULL(УчетЗатратОстатки.СтоимостьОстаток,0) / ЕСТЬNULL(УчетЗатратОстатки.КоличествоОстаток,0)
			|	КОНЕЦ КАК Цена
			|ИЗ
			|	ТаблицаСписания КАК ТаблицаСписания
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		УчетЗатратОстатки КАК УчетЗатратОстатки
			|	ПО 
			|		УчетЗатратОстатки.АналитикаВидаУчета = ТаблицаСписания.АналитикаВидаУчета
			|		И УчетЗатратОстатки.АналитикаРаспределенияЗатрат = ТаблицаСписания.АналитикаРаспределенияЗатрат
			|		И УчетЗатратОстатки.АналитикаУчетаЗатрат = ТаблицаСписания.АналитикаУчетаЗатрат
			|		И УчетЗатратОстатки.АналитикаУчетаПартий = ТаблицаСписания.АналитикаУчетаПартий";
			
		ИначеЕсли СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПлановойСебестоимости Тогда	
			
			Запрос.Текст =
			"ВЫБРАТЬ 
			|	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура, 
			|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры 
			|ПОМЕСТИТЬ ОтборПоНоменклатуре
			|ИЗ 
			|	РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	ТаблицаСписания КАК ТаблицаСписания
			|		ПО РегистрАналитикаУчетаЗатрат.Ссылка  = ТаблицаСписания.АналитикаУчетаЗатрат
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	РегистрАналитикаРаспределенияЗатрат.Продукция, 
			|	РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции 
			|ИЗ
			|	РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	ТаблицаСписания КАК ТаблицаСписания
			|		ПО РегистрАналитикаРаспределенияЗатрат.Ссылка  = ТаблицаСписания.АналитикаРаспределенияЗатрат
			|;
			|///////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Номенклатура,
			|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры,
			|	ЦеныНоменклатуры.ЕдиницаИзмерения,
			|	ЦеныНоменклатуры.Валюта,
			|	ЦеныНоменклатуры.Цена
			|	
			|ПОМЕСТИТЬ ЦеныНоменклатуры
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента,
			|		ТипЦен В (
			|			ВЫБРАТЬ
			|				Константы.ТипЦенПлановойСебестоимостиНоменклатуры
			|			ИЗ
			|				Константы КАК Константы
			|			)
			|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
			|			ВЫБРАТЬ 
			|				ОтборПоНоменклатуре.Номенклатура, 
			|				ОтборПоНоменклатуре.ХарактеристикаНоменклатуры 
			|			ИЗ 
			|				ОтборПоНоменклатуре КАК ОтборПоНоменклатуре)
			|	) КАК ЦеныНоменклатуры
			|;
			|///////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	КурсыВалют.Валюта,
			|	КурсыВалют.Курс,
			|	КурсыВалют.Кратность
			|	
			|ПОМЕСТИТЬ КурсыВалют
			|ИЗ 
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента) КАК КурсыВалют
			|;
			|///////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	КурсВалютыУчета.Курс,
			|	КурсВалютыУчета.Кратность
			|	
			|ПОМЕСТИТЬ КурсВалютыУчета
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, 
			|			ВАЛЮТА В (
			|				ВЫБРАТЬ
			|					//ДляУпрУчета Константы.ВалютаУправленческогоУчета 
			|					//ДляРеглУчета Константы.ВалютаРегламентированногоУчета
			|				ИЗ
			|					Константы КАК Константы
			|				)
			|	) КАК КурсВалютыУчета
			|;
			|///////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Номенклатура,
			|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры,
			|	(ЦеныНоменклатуры.Цена 
			|	* ЕСТЬNULL(КурсыВалют.Курс, 0)
			|	* (ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL 
			|			ИЛИ ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент = 0 ТОГДА
			|		1
			|	ИНАЧЕ
			|		ЦеныНоменклатуры.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / 
			|		ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент
			|	КОНЕЦ)
			|	* ЕСТЬNULL(КурсВалютыУчета.Кратность, 1)
			|	/ ( ЕСТЬNULL(КурсВалютыУчета.Курс, 1)
			|		* (ВЫБОР КОГДА КурсыВалют.Кратность ЕСТЬ NULL ИЛИ КурсыВалют.Кратность = 0 Тогда
			|			1
			|		ИНАЧЕ 
			|			КурсыВалют.Кратность
			|		КОНЕЦ) 
			|		)
			|	) КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦен
			|ИЗ
			|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		КурсыВалют КАК КурсыВалют
			|	ПО 
			|		КурсыВалют.Валюта = ЦеныНоменклатуры.Валюта
			|		
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		КурсВалютыУчета КАК КурсВалютыУчета
			|	ПО 
			|		ИСТИНА
			|;
			|///////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	ТаблицаСписания.НомерСтроки,
			|	//ДляРеглУчета ЕСТЬNULL(ТаблицаЦенПоЗатратам.Цена,0) + ЕСТЬNULL(ТаблицаЦенПоВыпуску.Цена,0) КАК ЦенаНУ,
			|	//ДляРеглУчета 0 КАК ЦенаПР,					  
			|	ЕСТЬNULL(ТаблицаЦенПоЗатратам.Цена,0) + ЕСТЬNULL(ТаблицаЦенПоВыпуску.Цена,0) КАК Цена,
			|	РегистрАналитикаРаспределенияЗатрат.Продукция,
			|	ТаблицаЦенПоВыпуску.Цена
			|ИЗ
			|	ТаблицаСписания КАК ТаблицаСписания
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
			|	ПО 
			|		РегистрАналитикаВидаУчета.Ссылка = ТаблицаСписания.АналитикаВидаУчета
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ 
			|			ТаблицаЦен КАК ТаблицаЦенПоЗатратам
			|		ПО 
			|			ТаблицаЦенПоЗатратам.Номенклатура = РегистрАналитикаУчетаЗатрат.Затрата
			|			И ТаблицаЦенПоЗатратам.ХарактеристикаНоменклатуры = РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты
			|	ПО 
			|		РегистрАналитикаУчетаЗатрат.Ссылка = ТаблицаСписания.АналитикаУчетаЗатрат
			|		И РегистрАналитикаВидаУчета.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Выпуск)
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ 
			|			ТаблицаЦен КАК ТаблицаЦенПоВыпуску
			|		ПО 
			|			ТаблицаЦенПоВыпуску.Номенклатура = РегистрАналитикаРаспределенияЗатрат.Продукция
			|			И ТаблицаЦенПоВыпуску.ХарактеристикаНоменклатуры = РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции
			|	ПО 
			|		РегистрАналитикаРаспределенияЗатрат.Ссылка = ТаблицаСписания.АналитикаРаспределенияЗатрат
			|		И РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Выпуск)";
			
		КонецЕсли;
		
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);			
		Запрос.УстановитьПараметр("ДатаДокумента",СтруктураШапкиДокумента.Дата);					  			
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицы = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки];
			
			СтрокаТаблицы.Стоимость 		  = СтрокаТаблицы.Количество * Выборка.Цена;
			СтрокаТаблицы.СтоимостьПолучатель = СтрокаТаблицы.Стоимость;
			
			Если ИмяРегистраУчетаЗатрат = "УчетЗатратРегл" Тогда
				СтрокаТаблицы.СтоимостьНУ 				  = СтрокаТаблицы.КоличествоНУ * Выборка.ЦенаНУ;
				СтрокаТаблицы.СтоимостьНУПолучатель 	  = СтрокаТаблицы.СтоимостьНУ;
				СтрокаТаблицы.ПостояннаяРазница 		  = СтрокаТаблицы.КоличествоНУ * Выборка.ЦенаПР;
				СтрокаТаблицы.ПостояннаяРазницаПолучатель = СтрокаТаблицы.ПостояннаяРазница;
			КонецЕсли;
			
			Если СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам
			 И СтрокаТаблицы.Стоимость = 0 Тогда
				Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				 И СтрокаТаблицы.КодОперации = Перечисления.КодыОперацийПартииТоваров.Реализация Тогда
					//Возврат на основании реализации, сообщение не выдаем, т.к. себестоимость будет корректироваться до себестоимости из реализации
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС")
				 И (СтрокаТаблицы.СтоимостьНУ <> 0 ИЛИ СтрокаТаблицы.ПостояннаяРазница <> 0) Тогда
					//Движения документа по БУ и НУ формируются отдельно, двумя строками
				Иначе	
					ОбщегоНазначения.Сообщение(
						"Для номенклатуры """ + ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].АналитикаУчетаЗатрат + """ движения сформировались без суммовой оценки по "+ ТекстУчета + " учету",СтатусСообщения.Внимание,
						"Проведение документа """ + СокрЛП(СтруктураШапкиДокумента.Ссылка) + """: ");
				КонецЕсли;		
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры	

// Процедура сворачивает таблицу для формирования движений по регистрам учета затрат
// Параметры:
//  ТаблицаДляФормированияДвижений - таблица значений для формирования движений.
//
Процедура СвернутьТаблицуДляФормированияДвижений(ТаблицаДляФормированияДвижений)
	СписокСуммируемыхКолонок = "Количество, КоличествоНУ, Стоимость, СтоимостьНУ, ПостояннаяРазница, КоличествоПолучатель, КоличествоНУПолучатель, СтоимостьПолучатель, СтоимостьНУПолучатель, ПостояннаяРазницаПолучатель,";
	СписокКолонокДляГруппировки = "";
	Для Каждого ТекущаяКолонка Из ТаблицаДляФормированияДвижений.Колонки Цикл
		Если Найти(СписокСуммируемыхКолонок,ТекущаяКолонка.Имя+",") = 0 Тогда
			СписокКолонокДляГруппировки = СписокКолонокДляГруппировки + ТекущаяКолонка.Имя+",";
		КонецЕсли;
	КонецЦикла;	
	
	//Удалим последнюю запятую
	СписокСуммируемыхКолонок = Лев(СписокСуммируемыхКолонок, СтрДлина(СписокСуммируемыхКолонок)-1);
	СписокКолонокДляГруппировки = Лев(СписокКолонокДляГруппировки, СтрДлина(СписокКолонокДляГруппировки)-1);
	
	ТаблицаДляФормированияДвижений.Свернуть(СписокКолонокДляГруппировки,СписокСуммируемыхКолонок);
	
	//Удалим движения с одинаковой аналитикой источника и получателя
	НомерТекущейСтроки = 0;
	Пока НомерТекущейСтроки < ТаблицаДляФормированияДвижений.Количество() Цикл
	    ТекущаяСтрока = ТаблицаДляФормированияДвижений[НомерТекущейСтроки];
		Если ТекущаяСтрока.АналитикаВидаУчета = ТекущаяСтрока.КорАналитикаВидаУчета
		  И ТекущаяСтрока.АналитикаРаспределенияЗатрат = ТекущаяСтрока.КорАналитикаРаспределенияЗатрат
		  И ТекущаяСтрока.АналитикаУчетаЗатрат = ТекущаяСтрока.КорАналитикаУчетаЗатрат
		  И ТекущаяСтрока.АналитикаУчетаПартий = ТекущаяСтрока.КорАналитикаУчетаПартий 
		  И ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоПолучатель Тогда
		  Если ТаблицаДляФормированияДвижений.Колонки.Найти("Склад") <> Неопределено
			И ТаблицаДляФормированияДвижений.Колонки.Найти("СкладПолучатель") <> Неопределено  
			И ТекущаяСтрока.Склад <> ТекущаяСтрока.СкладПолучатель Тогда
			  //Это перемещение между складами когда партионный учет по складам не ведется, строки нужно оставить для формирования проводки
			  ТекущаяСтрока.ВыполнятьДвижениеОприходование = Ложь;
			  ТекущаяСтрока.ВыполнятьДвижениеСписание = Ложь;
			  НомерТекущейСтроки = НомерТекущейСтроки + 1;
		  Иначе			  
			ТаблицаДляФормированияДвижений.Удалить(НомерТекущейСтроки);
		  КонецЕсли;	
		Иначе
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

// Процедура - 	обработчик, вызывается подпиской на событие "ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостояния".
//				Содержит общий алгоритм формриования движений по регистрам "Учет затрат" и "Учет затрат организаций"
// Параметры:
//  Источник - структура или ДокументОбъект, содержащая реквизиты необходимы для проведения по затратам,
//  Отказ - флаг, устанавливается в случае если произошла ошибка,
//  РежимПроведения - режим проведения документа.
//
Процедура РасширеннаяАналитикаЗапасовИзменениеСостояния(Источник, Отказ, РежимПроведения) Экспорт
	
	Если ТипЗнч(Источник.мСтруктураШапкиДокумента) = Тип("Структура") Тогда 
		Если (Источник.мСтруктураШапкиДокумента.Свойство("ДокументОтгрузки") И ТипЗнч(Источник.мСтруктураШапкиДокумента.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"))
			ИЛИ (ТипЗнч(Источник.мСтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") И НЕ Источник.мСтруктураШапкиДокумента.КорректироватьБУиНУ)
			ИЛИ (ТипЗнч(Источник.мСтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации")  И НЕ Источник.мСтруктураШапкиДокумента.КорректироватьБУиНУ) Тогда
			// Формировать движения по изменению состояния запасов не нужно
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьСтруктуруШапкиДополнительнымиПолямиУчетаЗатрат(Источник.мСтруктураШапкиДокумента);
	
	СтруктураНаборовЗаписейПоВидамУчета = ПолучитьСтруктуруНаборовЗаписейПоВидамУчета(Источник);
	
	//Создадим таблицу значений, в которой будет кэшироваться информация для последующего формирования проводок
	ТаблицаДляФормированияДвижений = ПодготовитьТаблицуДляФормированияДвижений(СтруктураНаборовЗаписейПоВидамУчета, Источник);
		
	Для Каждого ТекущаяТабличнаяЧасть Из Источник.мСтруктураТабличныхЧастей Цикл
		
		//Ести в табличной части нет строк, то пропускаем
		Если ТекущаяТабличнаяЧасть.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//Определение списка кодов операций
		СтроковоеПредставлениеКодаОперации = "";
		ИмяДокумента = "";
		СтруктураКодовОперацийПартийТоваров = ПолучитьКодОперацииПоДокументу(Источник.Ссылка, Источник.мСтруктураШапкиДокумента, ТекущаяТабличнаяЧасть.Ключ, ИмяДокумента);
		Если СтруктураКодовОперацийПартийТоваров = Неопределено Тогда
			ОбщегоНазначения.Сообщение("Документ " + Источник.Ссылка + ". Операция не поддерживается в режиме использования расширенной аналитики и не будет учтена при расчете себестоимости");
			ПодготовитьИсточникДляВозвратаКлиенту(Источник);
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекущийКодОперацииПартийТоваров Из СтруктураКодовОперацийПартийТоваров Цикл
			
			КодОперацииПартийТоваров = ТекущийКодОперацииПартийТоваров.Значение;
			СтроковоеПредставлениеКодаОперации = ТекущийКодОперацииПартийТоваров.Ключ;
			
			Для Каждого ТекущийНабор Из СтруктураНаборовЗаписейПоВидамУчета Цикл
				СтруктураКлючиАналитики = Новый Структура;
				ОсновнаяТаблицаДляФормированияДвижений = Неопределено;
				
				Если ТекущийНабор.Ключ = "УчетЗатрат" Тогда
					ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
				Иначе
					ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
				КонецЕсли;
				
				// Получение таблицы для формирования расходных движений по регистру				
				ТаблицаДанныхДляСписания = ПолучитьСтруктуруДанныхВСоответствииСШаблоном(
					ТекущийНабор.Ключ, 
					Источник.мСтруктураШапкиДокумента, 
					ТекущаяТабличнаяЧасть.Значение, 
					ИмяДокумента + "." + СтроковоеПредставлениеКодаОперации + "." + ТекущаяТабличнаяЧасть.Ключ + ".Источник");
					
				Если НЕ ТаблицаДанныхДляСписания = Неопределено Тогда
					ОсновнаяТаблицаДляФормированияДвижений = ТаблицаДанныхДляСписания;
				КонецЕсли;	
				
				// Получение таблицы для формирования приходных движений по регистру
				ТаблицаДанныхДляОприходования = ПолучитьСтруктуруДанныхВСоответствииСШаблоном(
					ТекущийНабор.Ключ, 
					Источник.мСтруктураШапкиДокумента, 
					ТекущаяТабличнаяЧасть.Значение, 
					ИмяДокумента + "." + СтроковоеПредставлениеКодаОперации + "." + ТекущаяТабличнаяЧасть.Ключ + ".Получатель");
				
				Если НЕ ТаблицаДанныхДляОприходования = Неопределено Тогда
					Если ОсновнаяТаблицаДляФормированияДвижений = Неопределено Тогда
						ОсновнаяТаблицаДляФормированияДвижений = ТаблицаДанныхДляОприходования;
					КонецЕсли;	
				КонецЕсли;	
				
				// Проверка необходимости формирования движений
				Если ОсновнаяТаблицаДляФормированияДвижений = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				СтруктураДанныхДляПеремещения = Новый Структура();
				Для Каждого ТекущаяСтрока Из ОсновнаяТаблицаДляФормированияДвижений Цикл
					
					Если ТаблицаДанныхДляСписания = Неопределено Тогда
						
						//Это внешнее поступление
						//Определение аналитики поступления
						ТекущаяСтрокаОприходования = ТекущаяСтрока;
						АналитикаВидаУчета = Неопределено;
						АналитикаУчетаЗатрат = Неопределено;
						АналитикаУчетаПартий = Неопределено;
						АналитикаРаспределенияЗатрат = Неопределено;
						
						АналитикаВидаУчетаПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаВидаУчета,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаУчетаЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаУчетаПартийПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаУчетаПартий,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаРаспределенияЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
					Иначе
						//Это или списание или перемещение
						//Определение аналитики списания
						АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаВидаУчета,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаУчетаПартий,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						
						Если НЕ ТаблицаДанныхДляОприходования = Неопределено Тогда
							
							//Это перемещение
							//Определение аналитики поступления
							ТекущаяСтрокаОприходования = ТаблицаДанныхДляОприходования.Получить(ОсновнаяТаблицаДляФормированияДвижений.Индекс(ТекущаяСтрока));
							
							Если ТекущаяСтрокаОприходования.ИспользоватьАналитикуВидаУчета Тогда
								АналитикаВидаУчетаПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
									Источник.мСтруктураШапкиДокумента,
									ТекущаяСтрокаОприходования,
									Перечисления.КлючиАналитики.АналитикаВидаУчета,
									ВидОтраженияВУчете,
									СтруктураКлючиАналитики
								);
							Иначе	
								АналитикаВидаУчетаПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
									Источник.мСтруктураШапкиДокумента,
									ТекущаяСтрокаОприходования,
									Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат,
									ВидОтраженияВУчете,
									СтруктураКлючиАналитики
								);
							КонецЕсли;
							
							АналитикаУчетаЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
								Источник.мСтруктураШапкиДокумента,
								ТекущаяСтрокаОприходования,
								Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
								ВидОтраженияВУчете,
								СтруктураКлючиАналитики
							);
							АналитикаУчетаПартийПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
								Источник.мСтруктураШапкиДокумента,
								ТекущаяСтрокаОприходования,
								Перечисления.КлючиАналитики.АналитикаУчетаПартий,
								ВидОтраженияВУчете,
								СтруктураКлючиАналитики
							);
							АналитикаРаспределенияЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
								Источник.мСтруктураШапкиДокумента,
								ТекущаяСтрокаОприходования,
								Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
								ВидОтраженияВУчете,
								СтруктураКлючиАналитики
							);
						Иначе
							//Аналитика поступления - пустая
							АналитикаВидаУчетаПолучатель = Неопределено;
							АналитикаУчетаЗатратПолучатель = Неопределено;
							АналитикаУчетаПартийПолучатель = Неопределено;
							АналитикаРаспределенияЗатратПолучатель = Неопределено;
						КонецЕсли;
					КонецЕсли;	
					
					ЗаполнитьСтрокуВТаблицеДляФормированияДвижений(ТаблицаДляФормированияДвижений,
						?(ТаблицаДанныхДляСписания = Неопределено, Неопределено, ТекущаяСтрока),
						?(ТаблицаДанныхДляОприходования = Неопределено, Неопределено, ТекущаяСтрокаОприходования),
						ТекущийНабор.Ключ,
						КодОперацииПартийТоваров,
						Источник,
						АналитикаВидаУчета,
						АналитикаУчетаЗатрат,
						АналитикаУчетаПартий,
						АналитикаРаспределенияЗатрат,
						АналитикаВидаУчетаПолучатель,
						АналитикаУчетаЗатратПолучатель,
						АналитикаУчетаПартийПолучатель,
						АналитикаРаспределенияЗатратПолучатель);
					
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	//Формирование движений по регистрам учета затрат и подготовка таблицы проводок
	СвернутьТаблицуДляФормированияДвижений(ТаблицаДляФормированияДвижений);
	ТаблицаДляФормированияПроводок = ТаблицаДляФормированияДвижений.СкопироватьКолонки();
	ЗаполнитьСуммыВДвижениях(Источник.мСтруктураШапкиДокумента,ТаблицаДляФормированияДвижений, СтруктураНаборовЗаписейПоВидамУчета);
	
	Для Каждого ТекущийНабор Из СтруктураНаборовЗаписейПоВидамУчета Цикл
		ТаблицаДляФормированияДвиженийПоРегистру = ТаблицаДляФормированияДвижений.НайтиСтроки(Новый Структура("ИмяРегистра",ТекущийНабор.Ключ));
				
		Для Каждого ТекущаяСтрока Из ТаблицаДляФормированияДвиженийПоРегистру Цикл
			СформироватьДвиженияПоСтрокеДляСписания(Источник.мСтруктураШапкиДокумента,ТекущаяСтрока,ТекущийНабор.Значение);
			
			Если ТекущийНабор.Ключ = "УчетЗатратРегл"
			   И ТекущаяСтрока.ВыполнятьСписание
			   И ТекущаяСтрока.ФормироватьПроводки
			Тогда
				НоваяСтрока = ТаблицаДляФормированияПроводок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;	
	
	//формирование движений по управленческим аналитическим регистрам
	Если СтруктураНаборовЗаписейПоВидамУчета.Свойство("УчетЗатрат") Тогда
		СформироватьДвиженияПоАналитическимРегистрам(
					СтруктураНаборовЗаписейПоВидамУчета.УчетЗатрат,
					Источник.Ссылка,
					Отказ,
					Источник.Дата,
					СтруктураКлючиАналитики,
					Источник.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
	КонецЕсли;				
	
	//формирование движений по регламентированным аналитическим регистрам
	Если СтруктураНаборовЗаписейПоВидамУчета.Свойство("УчетЗатратРегл") Тогда
		СформироватьДвиженияПоАналитическимРегистрам(
					СтруктураНаборовЗаписейПоВидамУчета.УчетЗатратРегл,
					Источник.Ссылка,
					Отказ,
					Источник.Дата,
					СтруктураКлючиАналитики,
					Источник.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
		СформироватьДвиженияПоАналитическимРегистрам(
					СтруктураНаборовЗаписейПоВидамУчета.УчетЗатратРегл,
					Источник.Ссылка,
					Отказ,
					Источник.Дата,
					СтруктураКлючиАналитики,
					Источник.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете);					
	КонецЕсли;				
	
	//формирование дополнительных движений по регистрам учета затрат
	СформироватьДополнительныеДвиженияПоРегистрамУчетаЗатрат(
		Источник, 
		СтруктураНаборовЗаписейПоВидамУчета, 
		ТаблицаДляФормированияДвижений
	);  
	
	//Формирование проводок
	Если НЕ СтруктураНаборовЗаписейПоВидамУчета.Свойство("УчетЗатратРегл") = Неопределено 
	  И ТаблицаДляФормированияПроводок.Количество() > 0	Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете",Источник.ОтражатьВБухгалтерскомУчете);
		СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете",Источник.ОтражатьВНалоговомУчете);
		СтруктураПараметров.Вставить("Дата",Источник.Дата);
		СтруктураПараметров.Вставить("Ссылка",Источник.Ссылка);
		
		Если Не Источник.мСтруктураШапкиДокумента.Свойство("ПоддержкаПБУ18") Тогда
			ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Источник.мСтруктураШапкиДокумента.Дата, Источник.мСтруктураШапкиДокумента.Организация, Ложь);
			Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
				СтруктураПараметров.Вставить("ПоддержкаПБУ18", ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18);
			Иначе
				СтруктураПараметров.Вставить("ПоддержкаПБУ18", Ложь);
			КонецЕсли; 
		Иначе 
			СтруктураПараметров.Вставить("ПоддержкаПБУ18", Источник.мСтруктураШапкиДокумента.ПоддержкаПБУ18);
		КонецЕсли;			
		
		СтруктураПараметров.Вставить("Движения",Новый Структура());
		
		Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураПараметров.Движения.Вставить("Хозрасчетный",РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
			СтруктураПараметров.Движения.Хозрасчетный.Отбор.Регистратор.Установить(СтруктураПараметров.Ссылка);
		КонецЕсли;
		
		Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураПараметров.Движения.Вставить("Налоговый",РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей());
			СтруктураПараметров.Движения.Налоговый.Отбор.Регистратор.Установить(СтруктураПараметров.Ссылка);
		КонецЕсли;		
		
		СформироватьПроводкиПоРезультатамСписания(СтруктураПараметров, ТаблицаДляФормированияПроводок,, Отказ, СтруктураКлючиАналитики);				
		
		СформироватьПроводкиПоСчету40(Источник.мСтруктураШапкиДокумента, СтруктураПараметров.Движения);
		
		Для Каждого Движение Из СтруктураПараметров.Движения Цикл
			Если Движение.Значение.Модифицированность()
			  И Движение.Значение.Количество() > 0 Тогда
				Движение.Значение.Записать(Ложь);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	//Запись движений в БД
	ЗаписатьСтруктуруДвиженийВБазуДанных(СтруктураНаборовЗаписейПоВидамУчета);
	
	ПодготовитьИсточникДляВозвратаКлиенту(Источник);	
	
КонецПроцедуры //ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостоянияОбработкаПроведения()
