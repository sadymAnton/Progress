////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыПовтИсп: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Только для внутреннего использования
Функция ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра) Экспорт
	
	СоответствиеРеквизитовОбъекта = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеНаименованийОбъектовМДиРеквизитов(СоответствиеРеквизитовОбъекта);
	
	Возврат СоответствиеРеквизитовОбъекта.Получить(ИмяПараметра);
	
КонецФункции

// Возвращает пустую ссылку на справочник.
//
// Параметры:
//  ИмяСправочника - строка, название справочника.
//
// Возвращаемое значение:
//  Ссылка - пустая ссылка на справочник.
//
Функция ПолучитьПустуюСсылку(ИмяСправочника) Экспорт
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ПолучитьИмяПрикладногоСправочника(ИмяСправочника);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Результат = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет массив актуальными видами электронных документов.
//
// Возвращаемое значение:
//  Массив - виды актуальных ЭД.
//
Функция ПолучитьАктуальныеВидыЭД() Экспорт
	
	МассивЭД = Новый Массив;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАктуальныеВидыЭД(МассивЭД);
	
	Если ЗначениеЗаполнено(МассивЭД) Тогда
		МассивЭД.Добавить(Перечисления.ВидыЭД.Подтверждение);
		МассивЭД.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
		МассивЭД.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
	КонецЕсли;
	
	МассивЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	
	Возврат МассивЭД;
	
КонецФункции

// Возвращает имя прикладного справочника по имени библиотечного справочника.
//
// Параметры:
//  ИмяСправочника - строка - название справочника из библиотеки.
//
// Возвращаемое значение:
//  ИмяПрикладногоСправочника - строковое имя прикладного справочника.
//
Функция ПолучитьИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	СоответствиеСправочников = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеСправочников(СоответствиеСправочников);
	
	ИмяПрикладногоСправочника = СоответствиеСправочников.Получить(ИмяСправочника);
	Если ИмяПрикладногоСправочника = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = НСтр("ru = 'В коде прикладного решения необходимо указать соответствие для справочника %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСправочника);
		ЗаписьЖурналаРегистрации(ЭлектронныеДокументыСлужебный.ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
	КонецЕсли;
	
	Возврат ИмяПрикладногоСправочника;
	
КонецФункции

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  Наименование - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//
// Возвращаемое значение:
//  НайденноеЗначение - значение искомого перечисления.
//
Функция НайтиПеречисление(Знач ИмяПеречисления, ПредставлениеПеречисления) Экспорт
	
	НайденноеЗначение = Неопределено;
	
	СоответствиеПеречислений = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеПеречислений(СоответствиеПеречислений);
	
	ИмяПрикладногоПеречисления = СоответствиеПеречислений.Получить(ИмяПеречисления);
	Если ИмяПрикладногоПеречисления = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = НСтр("ru = 'В коде прикладного решения необходимо указать соответствие для перечисления %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяПеречисления);
		ЗаписьЖурналаРегистрации(ЭлектронныеДокументыСлужебный.ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
	ИначеЕсли ЗначениеЗаполнено(ИмяПрикладногоПеречисления) Тогда // задано какое-то значение
		ЭлектронныеДокументыПереопределяемый.ПолучитьЗначениеПеречисления(
			ИмяПрикладногоПеречисления, ПредставлениеПеречисления, НайденноеЗначение);
		Если НайденноеЗначение = Неопределено Тогда
			Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПрикладногоПеречисления].ЗначенияПеречисления Цикл
				Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления)
					ИЛИ Врег(ЭлПеречисления.Имя) = Врег(ПредставлениеПеречисления) Тогда
					НайденноеЗначение = Перечисления[ИмяПрикладногоПеречисления][ЭлПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Возвращает описание параметра для прикладного решения.
//
// Параметры:
//  Источник - ссылка, к которой относится параметр.
//  Параметр - строка, наименование реквизита.
//
// Возвращаемое значение:
//  Результат - строка - пользовательское описание реквизита.
//
Функция ПолучитьПользовательскоеПредставление(Источник, Параметр) Экспорт
	
	Результат = Параметр;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипИсточника", ТипЗнч(Источник));
	ПараметрыОтбора.Вставить("Параметр", Параметр);
	
	ТаблицаЗначений = ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям();
	
	НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(ПараметрыОтбора);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		
		ПользовательскоеПредставление = НайденныеСтроки[0].Представление;
		Если ЗначениеЗаполнено(ПользовательскоеПредставление) Тогда
			Результат = ПользовательскоеПредставление;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает таблицу с ключевыми реквизитами объекта
// 
// Параметры 
//  ИмяОбъекта - строка, имя объекта конфигурации, ключевые реквизиты которого необходимо получить.
//
Функция ПолучитьТаблицуКлючевыхРеквизитовОбъекта(ИмяОбъекта) Экспорт
	
	ТаблицаРеквизитов = ИнициализацияТаблицыРеквизитовОбъектов();
	
	Если ИмяОбъекта = "Документ.ПакетЭД" Тогда
		Возврат ТаблицаРеквизитов;
	КонецЕсли;
	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	Если ИмяОбъекта = "Документ.ПроизвольныйЭД" Тогда
		СтрокаРеквизитовОбъекта = "Дата, Номер, Организация, Контрагент, Текст";
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	Иначе
		ЭлектронныеДокументыПереопределяемый.ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураКлючевыхРеквизитов) Тогда
		ШаблонСообщения = НСтр("ru = 'Не определена структура ключевых реквизитов для объекта %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяОбъекта);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ТекПорядок = -50;
	Для Каждого ТекЭлемент Из СтруктураКлючевыхРеквизитов Цикл
		НовСтрока                            = ТаблицаРеквизитов.Добавить();
		НовСтрока.Порядок                    = ТекПорядок;
		НовСтрока.ИмяОбъекта                 = ИмяОбъекта;
		НовСтрока.ИмяТабличнойЧасти          = ?(ТекЭлемент.Ключ = "Шапка", "", ТекЭлемент.Ключ);
		НовСтрока.РеквизитыОбъекта           = ТекЭлемент.Значение;
		НовСтрока.СтруктураРеквизитовОбъекта = Новый Структура(ТекЭлемент.Значение);
		ТекПорядок = ТекПорядок + 100;
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Экспорт

	ИспользуетсяСправочникПартнеры = Ложь;
	ЭлектронныеДокументыПереопределяемый.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры);
	
	Возврат ИспользуетсяСправочникПартнеры;
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - строка, код ошибки;
//  СтороннееОписаниеОшибки - строка, описание ошибки переданное другой системой.
//
// Возвращаемое значение:
//  ТекстСообщения - строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонСообщения = НСтр("ru = 'Код ошибки %1. %2'");
	
	СообщенияОшибок = Новый Соответствие;
	ИнициализацияСообщенийОшибок(СообщенияОшибок);
	
	СообщениеОбОшибке = СообщенияОшибок.Получить(КодОшибки);
	Если СообщениеОбОшибке = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		СообщениеОбОшибке = СтороннееОписаниеОшибки;
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ИзменитьСообщениеОбОшибке(КодОшибки, СообщениеОбОшибке);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КодОшибки, СообщениеОбОшибке);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ДатаСоздания > &ДатаСоздания
	|	И НЕ ЭДПрисоединенныеФайлы.Наименование ПОДОБНО ""%2AL%""
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|	И ЭДПрисоединенныеФайлы.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)";
	
	Запрос.УстановитьПараметр("ДатаСоздания", Дата("20130101000000"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1000 Тогда
		ТекстСообщения = "";
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - таблица - соответствие параметров для типов метаданных их пользовательским представлениям.
//
Функция ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ТипИсточника");
	ТаблицаЗначений.Колонки.Добавить("Параметр");
	ТаблицаЗначений.Колонки.Добавить("Представление");
	
	ЭлектронныеДокументыПереопределяемый.ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(
		ТаблицаЗначений);
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ИнициализацияТаблицыРеквизитовОбъектов()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаРеквизитов.Колонки;
	Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыОбъекта",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовОбъекта", Новый ОписаниеТипов("Структура"));
	
	ТаблицаРеквизитов.Индексы.Добавить("ИмяОбъекта");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Только для внутреннего использования
Процедура ИнициализацияСообщенийОшибок(СообщенияОшибок)
	
	// Общие коды ошибок
	СообщенияОшибок.Вставить("001", );
	СообщенияОшибок.Вставить("002", );
	СообщенияОшибок.Вставить("003", );
	СообщенияОшибок.Вставить("004", );
	СообщенияОшибок.Вставить("005", );
	
	// Коды ошибок 1С
	СообщенияОшибок.Вставить("0", НСтр("ru = 'Одна из имеющихся в запросе подписей принадлежит неизвестному лицу.'"));
	СообщенияОшибок.Вставить("2", НСтр("ru = 'Одна из подписей неверна'"));
	СообщенияОшибок.Вставить("3", НСтр("ru = 'Должны быть представлены две разные подписи.'"));
	СообщенияОшибок.Вставить("4", НСтр("ru = 'Неверный тип содержимого: двоичный.'"));
	СообщенияОшибок.Вставить("5", НСтр("ru = 'Должна быть предоставлена хотя бы одна подпись.'"));
	СообщенияОшибок.Вставить("6", НСтр("ru = 'Не все подписи отличаются.'"));
	СообщенияОшибок.Вставить("7", НСтр("ru = 'Все подписи не обеспечивают уровень полномочий, необходимых для операции.'"));
	СообщенияОшибок.Вставить("8", НСтр("ru = 'Один из подписантов неизвестен.'"));
	СообщенияОшибок.Вставить("9", НСтр("ru = 'Содержимое типа транспортного сообщения является неправильным, ожидается: application/xml.'"));
	СообщенияОшибок.Вставить("10", НСтр("ru = 'Содержимое типа делового сообщения неверно, ожидается: application/xml.'"));
	СообщенияОшибок.Вставить("11", НСтр("ru = 'Не все подписи соответствуют одному и тому же клиенту.'"));
	СообщенияОшибок.Вставить("12", НСтр("ru = 'Всех имеющихся в запросе подписей недостаточно для того, чтобы получить право на доступ к запрашиваемому счету.'"));
	СообщенияОшибок.Вставить("13", НСтр("ru = 'HTTP запрос URL неверный. Поддерживаются только запросы ресурсов и состояния.'"));
	СообщенияОшибок.Вставить("14", НСтр("ru = 'Ошибка проверки транспортного контейнера.'"));
	СообщенияОшибок.Вставить("15", НСтр("ru = 'Ошибка проверки контейнера бизнес данных.'"));
	СообщенияОшибок.Вставить("16", НСтр("ru = 'В выписке счета слишком малая начальная дата.'"));
	СообщенияОшибок.Вставить("17", НСтр("ru = 'В выписке счета слишком большая конечная дата.'"));
	СообщенияОшибок.Вставить("18", НСтр("ru = 'Неверная дата документа.'"));
	СообщенияОшибок.Вставить("19", НСтр("ru = 'Счет банка не соответствует БИК.'"));
	СообщенияОшибок.Вставить("21", НСтр("ru = 'Неразрешенная инструкция.'"));
	
	СообщенияОшибок.Вставить("100", НСтр("ru = 'Не удалось создать менеджер криптографии на компьютере.'"));
	СообщенияОшибок.Вставить("101", НСтр("ru = 'Сертификат не найден в хранилище сертификатов на компьютере.'"));
	СообщенияОшибок.Вставить("102", НСтр("ru = 'Сертификат не действителен.'"));
	СообщенияОшибок.Вставить("103", НСтр("ru = 'Не удалось выполнить операции шифрования/расшифровки на компьютере.'"));
	СообщенияОшибок.Вставить("104", НСтр("ru = 'Не удалось выполнить операции формирования/проверки ЭЦП на компьютере.'"));
	СообщенияОшибок.Вставить("105", НСтр("ru = 'Нет доступных сертификатов в хранилище сертификатов на компьютере.'"));
	
	СообщенияОшибок.Вставить("110", НСтр("ru = 'Не удалось создать менеджер криптографии на сервере.'"));
	СообщенияОшибок.Вставить("111", НСтр("ru = 'Сертификат не найден в хранилище сертификатов на сервере.'"));
	СообщенияОшибок.Вставить("112", НСтр("ru = 'Сертификат не действителен.'"));
	СообщенияОшибок.Вставить("113", НСтр("ru = 'Не удалось выполнить операции шифрования/расшифровки на сервере.'"));
	СообщенияОшибок.Вставить("114", НСтр("ru = 'Не удалось выполнить операции формирования/проверки ЭЦП на сервере.'"));
	СообщенияОшибок.Вставить("115", НСтр("ru = 'Нет доступных сертификатов в хранилище сертификатов на сервере.'"));
	
	СообщенияОшибок.Вставить("105", НСтр("ru = 'Не удалось создать каталоги обмена.'"));
	СообщенияОшибок.Вставить("106", НСтр("ru = 'Версия платформы 1С ниже ""8.2.16"".'"));
	
	СообщенияОшибок.Вставить("121", НСтр("ru = 'Не удалось соединиться с FTP сервером.'"));
	СообщенияОшибок.Вставить("122", НСтр("ru = 'Невозможно создать каталог, так как на FTP ресурсе существует файл с таким именем.'"));
	СообщенияОшибок.Вставить("123", НСтр("ru = 'Невозможно создать каталог.'"));
	СообщенияОшибок.Вставить("124", НСтр("ru = 'Невозможно открыть каталог.'"));
	СообщенияОшибок.Вставить("125", НСтр("ru = 'Произошла ошибка при поиске файлов на FTP ресурсе.'"));
	СообщенияОшибок.Вставить("126", НСтр("ru = 'Различаются данные записанного, а затем прочитанного тестового файла в каталоге.'"));
	СообщенияОшибок.Вставить("127", НСтр("ru = 'Не удалось записать файл в каталог.'"));
	СообщенияОшибок.Вставить("128", НСтр("ru = 'Не удалось прочитать файл в каталоге."));
	СообщенияОшибок.Вставить("129", НСтр("ru = 'Не удалось удалить файл.'"));
	СообщенияОшибок.Вставить("130", НСтр("ru = 'Нет действующего сертификата ЭЦП для организации <%1>, по виду документов <%2>.
		|Перейдите в настройки обмена, задайте вид документа <%2> для действующего сертификата организации <%1>.'"));
	
	// Коды ошибок оператора Такском
	// Метод CertificateLogin: идентификация и авторизация
	// Синхронный режим без обращения к БД
	СообщенияОшибок.Вставить("2501", ); // Не указан идентификатор вендора (название параметра?) 400 0501
	СообщенияОшибок.Вставить("3109", ); // Не указан сертификат 403 3100
	СообщенияОшибок.Вставить("3107", ); // Некорректное тело сертификата 403 3107
	СообщенияОшибок.Вставить("3101", ); // Сертификат просрочен 403 3101
	СообщенияОшибок.Вставить("3102", ); // Для указанного сертификата не удалось построить цепочку доверия 403 3102
	
	// Синхронный режим с обращением в БД
	СообщенияОшибок.Вставить("1301", ); // Вендор с указанным идентификатором не прошел авторизацию 401 1300
	СообщенияОшибок.Вставить("3103", ); // Сертификат не связан ни с одним абонентом Такском 403 3103
	СообщенияОшибок.Вставить("3104", ); // Сертификат связан с несколькими абонентами, но не указан идентификатор абонента (TaxcomID) 403 3104
	СообщенияОшибок.Вставить("3105", ); // Сертификат связан с несколькими абонентами, но указанный идентификатор абонента (TaxcomID) имеет неправильный формат 403 3105
	СообщенияОшибок.Вставить("3106", ); // Сертификат связан с несколькими абонентами, но указанный идентификатор абонента (TaxcomID) не связан ни с одним абонентом Такском 403 3106
	СообщенияОшибок.Вставить("1102", ); // Абоненту запрещен доступ к API 401 1100
	СообщенияОшибок.Вставить("1101", ); // Доступ для данного абонента заблокирован 401 1101
	СообщенияОшибок.Вставить("3108", ); // Сертификат отозван (в будущем) 403 3108
	
	// Метод SendMessage: загрузка транспортных контейнеров
	// Синхронный режим без обращения к БД
	СообщенияОшибок.Вставить("1201", ); // Истек 5-ти минутный срок действия токена (требуется повторная авторизация) 401 1200
	СообщенияОшибок.Вставить("2118", ); // Размер отправляемого контейнера не соответствует допустимому диапазону от 0 до (цифра!) 400 0100
	СообщенияОшибок.Вставить("2107", ); // Отправляемый контейнер не является ZIP-архивом 400 0107
	СообщенияОшибок.Вставить("2108", ); // В контейнере отсутствует необходимый файл meta.xml 400 0108
	СообщенияОшибок.Вставить("2109", ); // Файл meta.xml не является XML-файлом (стандарты?) 400 0109
	СообщенияОшибок.Вставить("2111", ); // Структура файла meta.xml не соответствует принятой схеме 400 0111
	СообщенияОшибок.Вставить("2101", ); // В файле meta.xml не указан корректный идентификатор документооборота (DocFlowID) 400 0101
	СообщенияОшибок.Вставить("2102", ); // В отправляемом контейнере обнаружены файлы, связанные более чем с одним документооборотом 400 0102
	СообщенияОшибок.Вставить("2113", ); // В данном документообороте возможна отправка только одного файла 400 0113
	СообщенияОшибок.Вставить("2103", ); // В файле meta.xml отсутствует код регламента (ReglamentCode) 400 0103
	СообщенияОшибок.Вставить("2114", ); // В файле meta.xml указан некорректный код регламента (ReglamentCode) 400 0114
	СообщенияОшибок.Вставить("2104", ); // В файле meta.xml отсутствует код транзакции (TransactionCode) 400 0104
	СообщенияОшибок.Вставить("2303", ); // Транзакция с кодом <TransactionCode> недопустима в документообороте < ReglamentCode > 400 0300
	СообщенияОшибок.Вставить("3108", ); // Файл <имя файла>, указанный в meta.xml, не найден в отправляемом контейнере 400 0105
	СообщенияОшибок.Вставить("0110", ); // Файл card.xml не является XML-файлом 400 0110
	СообщенияОшибок.Вставить("0112", ); // Структура файла card.xml не соответствует принятой схеме 400 0112
	СообщенияОшибок.Вставить("0106", НСтр("ru = 'В соглашении указан идентификатор организации некорректного формата.'")); // Неверный формат идентификатора отправителя (название параметра?) в файле card.xml 400 0106
	СообщенияОшибок.Вставить("0115", ); // Неверный формат идентификатора получателя (название параметра?) в файле card.xml 400 0115
	
	// Синхронный режим с обращением к БД
	СообщенияОшибок.Вставить("0201", ); // Идентификатор отправителя (название параметра?) соответствует учетной записи 400 0201
	СообщенияОшибок.Вставить("0401", ); // Документооборот с указанным идентификатором уже зарегистрирован (DocFlowID) 400 0401
	СообщенияОшибок.Вставить("0402", ); // Документооборот с указанным идентификатором не зарегистрирован (DocFlowID) 400 0402
	СообщенияОшибок.Вставить("0301", ); // Данная транзакция <код транзакции> уже была осуществлена для данного документооборота < DocFlowID > 400 0301
	
	// Асинхронный режим
	СообщенияОшибок.Вставить("0202", НСтр("ru = 'В соглашении указан идентификатор контрагента не зарегистрированный в Такском.'")); // Получатель с указанным идентификатором не зарегистрирован 0202
	СообщенияОшибок.Вставить("0203", ); // Получатель с указанным идентификатором не является контрагентом отправителя 0203
	СообщенияОшибок.Вставить("3200", ); // Документ не может быть отправлен в связи с ограничениями тарификации 3200
	
	// Метод GetMessageList: получение входящих транспортных контейнеров
	// Синхронный режим без обращения к БД
	СообщенияОшибок.Вставить("0503", ); // Отсутствует обязательный параметр «метка времени (название параметра)» 400 0503
	СообщенияОшибок.Вставить("0504", ); // Некорректный формат метки времени 400 0504
	
	// Метод GetMessage: выгрузка входящих транспортных контейнеров
	// Синхронный режим без обращения к БД
	СообщенияОшибок.Вставить("0505", ); // Отсутствует обязательный параметр идентификатор контейнера (документооборота) 400 0505
	СообщенияОшибок.Вставить("0502", ); // Неправильный формат идентификатора документооборота 400 0502
	
	// Синхронный режим с обращением к БД
	СообщенияОшибок.Вставить("4100", ); // Сообщение с данным <DocFlowID> идентификатором документооборота не найдено 404 4100
	
	// Общие ошибки сервера Такском
	СообщенияОшибок.Вставить("5101", ); // Внутренняя ошибка сервера 500 0000
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПрикладноеПредставлениеРеквизита(Код) Экспорт
	
	СоответствиеКодовРеквизитовИПредставлений = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.СоответствиеКодовРеквизитовИПредставлений(СоответствиеКодовРеквизитовИПредставлений);
	Возврат СоответствиеКодовРеквизитовИПредставлений.Получить(Код);
	
КонецФункции

