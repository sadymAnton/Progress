
// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,НаименованиеСокращенное,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", 		" ");
	СоответствиеПараметров.Вставить("НаименованиеСокращенное", 	" ");
	СоответствиеПараметров.Вставить("ИНН",                		" ИНН ");
	СоответствиеПараметров.Вставить("КПП",                		" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   		" ");
	СоответствиеПараметров.Вставить("ФактическийАдрес",   		" ");
	СоответствиеПараметров.Вставить("Телефоны",           		" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",         		" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Преобразует числовое описание шкалы в строку для вывода в печатные формы
//
// Параметры
//  СтавкаВРублях - число в рублях, соответствует накопленной 
//                 по предыдущим ставкам сумме налога
//  СтавкаВПроцентах - число в %, одна из ставок регрессивной шкалы
//
// Возвращаемое значение:
//   Строка 
//
// Пример:
//     ПолучитьОписаниеРегрессивнойСтавки(5600, 7) = "5 600 руб. + 7%"
//
Функция ПолучитьОписаниеРегрессивнойСтавки(СтавкаВРублях, СтавкаВПроцентах) Экспорт

	Возврат Формат(СтавкаВРублях,"ЧЦ=10; ЧДЦ=0; ЧН=' '") 
			+ ?(ЗначениеЗаполнено(СтавкаВРублях)," руб.","")
			+ ?(ЗначениеЗаполнено(СтавкаВРублях) и ЗначениеЗаполнено(СтавкаВПроцентах)," +" + Символы.ПС,"")
			+ Формат(СтавкаВПроцентах,"ЧН=' '")
			+ ?(ЗначениеЗаполнено(СтавкаВПроцентах)," %","");

КонецФункции // ОписаниеРегрессивнойСтавки()

////////////////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ЗАПРОСОВ ВЫПОЛНЯЮЩИХСЯ ПОД РЛС

#Если Клиент Тогда
	
// Процедура копирует параметры запроса в массив данных для последующей проверки отчета
//
Процедура ЗапомнитьПараметрыЗапроса(Запрос, МассивПарамтеровЗапроса) Экспорт
	СтруктураЗапроса = Новый Структура("Текст", Запрос.Текст);
	
	Для каждого ПараметрЗапроса из Запрос.Параметры Цикл
		СтруктураЗапроса.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивПарамтеровЗапроса.Добавить(СтруктураЗапроса);
КонецПроцедуры

Процедура ПроверитьОшибкуЗапрос(Запрос, ИнформацияОбОшибке, ОшибкаДоступа = ложь, ЗадаватьВопрос = ложь) Экспорт
	
	Если ПолныеПрава.ИспользуетсяОграниченияПравДоступаНаУровнеЗаписей() тогда
		Если НЕ ТранзакцияАктивна() и (НЕ ЗадаватьВопрос ИЛИ РаботаСДиалогами.ЗадатьВопрос("Внимание! При формировании отчета произошла неизвестная ошибка. " + Символы.ПС
			+ "Вы можете настроить и повторно сформировать отчет, " + Символы.ПС 
			+ "или запустить поиск точной причины ошибки. Найти точную причину ошибки " + Символы.ПС
			+ "(может занять продолжительное время)?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Нет) тогда
			
			Если ПолныеПрава.ОшибкаДоступа(Запрос) тогда
				Если НЕ ТранзакцияАктивна() тогда
					РаботаСДиалогами.ВывестиПредупреждение("Внимание! Для формирования отчета недостаточно прав. "+ Символы.ПС +"Настройте отчет или обратитесь к администратору системы");
				КонецЕсли;
				Возврат;
			Иначе
				Если НЕ ТранзакцияАктивна() тогда
					РаботаСДиалогами.ВывестиПредупреждение("Ошибка при формировании отчета не связана с ограничением Ваших прав доступа: " + Символы.ПС+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ОбщегоНазначенияЗК.СообщитьОбОшибке("Ошибка при формировании отчета не связана с ограничением Ваших прав доступа: " + Символы.ПС+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), СтатусСообщения.Важное);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияЗК.ПоказатьДиалогСИнформациейОбОшибке(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Функция собирает фамилию, имя и отчество физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ФамилияИмяОтчество(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Фамилия, Имя, Отчество");

	Результат.Фамилия  = ?(НЕ ЗначениеЗаполнено(Шапка.Фамилия),  "", Шапка.Фамилия);
	Результат.Имя      = ?(НЕ ЗначениеЗаполнено(Шапка.Имя),      "", Шапка.Имя);
	Результат.Отчество = ?(НЕ ЗначениеЗаполнено(Шапка.Отчество), "", Шапка.Отчество);

	Возврат Результат;

КонецФункции // ФамилияИмяОтчество()

// Формирует описание серий и характеристик ТМЦ для печати
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание серий и характеристик ТМЦ
//
Функция ПредставлениеСерий(Выборка) Экспорт

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
		Результат = СтрЗаменить(Результат, "<>", "");
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
		Результат = СтрЗаменить(Результат,  "(<>", "(");
		Результат = СтрЗаменить(Результат, "; <>",  "");
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат);

КонецФункции // ПредставлениеСерий()

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Формируется текст плательщика или получателя для печатной формы платежного документа
//
// Параметры
//  ТекстНаименования  	– <строка> – значение реквизита документа, если реквизит заполнен, он и выводится на печать
//  ВладелецСчета  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – владелец банковского счета
//  БанковскийСчет		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика или получателя
//  ВБюджет				– <Булево> – признак перечисления денежных средств в бюджет
//
// Возвращаемое значение:
//   <Строка>			– наименование плательщика или получателя, которое будет выводиться в печатной форме платежного документа
//
Функция СформироватьТекстНаименованияПлательшикаПолучателя(ТекстНаименования, ВладелецСчета, БанковскийСчет, ВБюджет = Ложь)
	
	ТекстРезультат = ТекстНаименования;
	Если ПустаяСтрока(ТекстРезультат) Тогда
		
		Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Организации") 
		  И ВБюджет 
		  И НЕ ПустаяСтрока(ВладелецСчета.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		  
			ТекстРезультат = ВладелецСчета.НаименованиеПлательщикаПриПеречисленииНалогов;
			
		ИначеЕсли ПустаяСтрока(БанковскийСчет.ТекстКорреспондента) Тогда
			
			РеквизитыВладельцаСчета =
				ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВладелецСчета, "Наименование,НаименованиеПолное");
			ТекстРезультат = ?(ПустаяСтрока(РеквизитыВладельцаСчета.НаименованиеПолное), 
			                   РеквизитыВладельцаСчета.Наименование, РеквизитыВладельцаСчета.НаименованиеПолное);
			Если ЗначениеЗаполнено(БанковскийСчет.БанкДляРасчетов) Тогда
				ТекстРезультат = ТекстРезультат + " р/с " + БанковскийСчет.НомерСчета
				+ " в " + БанковскийСчет.Банк + " " + БанковскийСчет.Банк.Город;
			КонецЕсли;	
			
		Иначе
			
			ТекстРезультат = БанковскийСчет.ТекстКорреспондента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстРезультат;
	
КонецФункции // СформироватьТекстНаименованияПлательшикаПолучателя()

// Формирует значения по умолчанию реквизитов плательщика и получателя для банковских платежных документов
//
// Параметры
//  Плательщик  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – плательщик, владелец банковского счета
//  СчетПлательщика		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика
//  Получатель  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – получатель, владелец банковского счета
//  СчетПолучателя		– <СправочникСсылка.БанковскиеСчета> – банковский счет получателя
//  ВидОперации			– <Перечисление.ВидыОпераций...> – вид операции документа
//
// Возвращаемое значение:
//   <Структура>		– структура строковых реквизитов плательщика и получателя
//						  ключи структуры: 
//							ТекстПлательщика, ИННПлательщика, КПППлательщика, 
//							ТекстПолучателя, ИННПолучателя, КПППолучателя
//							НаименованиеБанкаПлательщика, НомерСчетаПлательщика, БикБанкаПлательщика, СчетБанкаПлательщика 
//							НаименованиеБанкаПолучателя, НомерСчетаПолучателя, БикБанкаПолучателя, СчетБанкаПолучателя
//
Функция СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(Плательщик, СчетПлательщика, Получатель, СчетПолучателя, ВидОперации, ПеречислениеВБюджет = Ложь) Экспорт

	РеквизитыПлательщика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Плательщик, "ИНН,КПП");
	ЗначенияРеквизитов = Новый Структура;
	
	ВБюджет = (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога)
		ИЛИ ПеречислениеВБюджет;
		
	ЗначенияРеквизитов.Вставить("ТекстПлательщика", 
		СформироватьТекстНаименованияПлательшикаПолучателя(
			"", Плательщик, СчетПлательщика, ВБюджет));
	
	ЗначенияРеквизитов.Вставить("ИННПлательщика", РеквизитыПлательщика.ИНН);

	УказаниеКППплательщикаОбязательно = ВБюджет;
	
	ЗначенияРеквизитов.Вставить("КПППлательщика", 
		?(УказаниеКППплательщикаОбязательно, 
		?(НЕ ПустаяСтрока(РеквизитыПлательщика.КПП), РеквизитыПлательщика.КПП, "0"), 
		""));
									
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ВладелецСчетаПолучателя = Плательщик;
	Иначе
		ВладелецСчетаПолучателя = Получатель;
	КонецЕсли;
	РеквизитыВладельцаСчетаПолучателя = 
		ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВладелецСчетаПолучателя, "ИНН,КПП");
	
	ЗначенияРеквизитов.Вставить("ТекстПолучателя", 
		СформироватьТекстНаименованияПлательшикаПолучателя(
			"", ВладелецСчетаПолучателя, СчетПолучателя, ВБюджет));
	
	ЗначенияРеквизитов.Вставить("ИННПолучателя", РеквизитыВладельцаСчетаПолучателя.ИНН);

	УказаниеКППполучателяОбязательно = ВБюджет;
	
	ЗначенияРеквизитов.Вставить("КПППолучателя", 
		?(УказаниеКППполучателяОбязательно, 
		?(НЕ ПустаяСтрока(РеквизитыВладельцаСчетаПолучателя.КПП), РеквизитыВладельцаСчетаПолучателя.КПП, "0"),
		""));
								
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СчетПлательщика.БанкДляРасчетов);
	БанкПлательщика = 
		?(НепрямыеРасчетыУПлательщика, СчетПлательщика.БанкДляРасчетов, СчетПлательщика.Банк);
	ЗначенияРеквизитов.Вставить("НаименованиеБанкаПлательщика", 
		БанкПлательщика.Наименование + " " + БанкПлательщика.Город);
	ЗначенияРеквизитов.Вставить("НомерСчетаПлательщика", 
		?(НепрямыеРасчетыУПлательщика, СчетПлательщика.Банк.КоррСчет, СчетПлательщика.НомерСчета));
	ЗначенияРеквизитов.Вставить("БикБанкаПлательщика", БанкПлательщика.Код);
	ЗначенияРеквизитов.Вставить("СчетБанкаПлательщика", БанкПлательщика.КоррСчет);
									
	НепрямыеРасчетыУПолучателя = ЗначениеЗаполнено(СчетПолучателя.БанкДляРасчетов);
	БанкПолучателя = 
		?(НепрямыеРасчетыУПолучателя, СчетПолучателя.БанкДляРасчетов, СчетПолучателя.Банк);
	ЗначенияРеквизитов.Вставить("НаименованиеБанкаПолучателя", 
		БанкПолучателя.Наименование + " " + БанкПолучателя.Город);
	ЗначенияРеквизитов.Вставить("НомерСчетаПолучателя", 
		?(НепрямыеРасчетыУПолучателя, СчетПолучателя.Банк.КоррСчет, СчетПолучателя.НомерСчета));
	ЗначенияРеквизитов.Вставить("БикБанкаПолучателя", БанкПолучателя.Код);
	ЗначенияРеквизитов.Вставить("СчетБанкаПолучателя", БанкПолучателя.КоррСчет);
									
	Возврат ЗначенияРеквизитов;
	
КонецФункции //СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  ФормаДиалога        - форма редактируемого объекта,
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Процедура СоздатьКнопкиПечати(ДокументОбъект, ФормаДокумента) Экспорт

	Попытка
		СтруктураВнутреннихПечатныхФорм = ДокументОбъект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(ДокументОбъект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = УниверсальныеМеханизмы.ПолучитьСтрокуДереваМакетовПоУмолчанию(ДокументОбъект.Метаданные().Имя, ДеревоМакетов);
	
	Если ДеревоМакетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПанельКнопок = ФормаДокумента.ЭлементыФормы.ОсновныеДействияФормы;
	КнопкиСправа = (ПанельКнопок.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право);
	
	Если ПанельКнопок.Кнопки.Найти("Печать") = Неопределено Тогда
		Если КнопкиСправа Тогда
			ПанельКнопок.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Вставить(0,"Печать", ТипКнопкиКоманднойПанели.Действие, "Печать", Новый Действие("ОсновныеДействияФормыПечать"));
		Иначе
			ПанельКнопок.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Добавить("Печать", ТипКнопкиКоманднойПанели.Действие, "Печать", Новый Действие("ОсновныеДействияФормыПечать"));
		КонецЕсли;
	КонецЕсли;
	
	Если (СтрокаПоУмолчанию <> Неопределено) И (ПанельКнопок.Кнопки.Найти("ДействиеПечать") = Неопределено) Тогда
		Если КнопкиСправа Тогда
			ПанельКнопок.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Вставить(0,"ДействиеПечать", ТипКнопкиКоманднойПанели.Действие, СтрокаПоУмолчанию.Текст, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
		Иначе
			ПанельКнопок.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Добавить("ДействиеПечать", ТипКнопкиКоманднойПанели.Действие, СтрокаПоУмолчанию.Текст, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УстановитьКнопкуПечати()

#КонецЕсли