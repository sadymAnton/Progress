
Функция ПолучитьМассивВсехУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля КАК ОбменУправлениеПредприятиемРозничнаяТорговля
				   |
				   |ГДЕ
				   |
				   |	ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.ЭтотУзел());			   
				   
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ВернутьМассивВсехУзловИзПараметровСеанса()
	
	Возврат ПараметрыСеанса.ВсеУзлыОбменаСРозничнойТорговлей;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовИУзлов() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеРеквизитовИУзловОбменаСРозничнойТорговлей;
		
	СоответствиеРеквизитовИУзлов = Хранилище.Получить();
	
	Возврат СоответствиеРеквизитовИУзлов;
	
КонецФункции

Функция ПолучитьТаблицуУзловИДат()
	
	Хранилище = ПараметрыСеанса.СоответствиеУзловИДатДляОбменаУправлениеПредприятиемРозничнаяТорговля;
		
	ТаблицаУзловИДат = Хранилище.Получить();
	
	Возврат ТаблицаУзловИДат;
	
КонецФункции

Функция ВернутьМассивУзловПоОдномуРеквизиту(Реквизит, СоответствиеРеквизитовИУзлов = Неопределено)
	
	Если СоответствиеРеквизитовИУзлов = Неопределено Тогда
		
		СоответствиеРеквизитовИУзлов = ПолучитьСоответствиеРеквизитовИУзлов();
	
	КонецЕсли;
	
	Возврат СоответствиеРеквизитовИУзлов[Реквизит];	
	
КонецФункции


Функция ПолучитьЗапросомМассивУзловПоТипуЦен(ТипЦеныНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбменУправлениеПредприятиемРозничнаяТорговляТипыЦенНоменклатуры.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.ТипыЦенНоменклатуры КАК ОбменУправлениеПредприятиемРозничнаяТорговляТипыЦенНоменклатуры
	|ГДЕ
	|	ОбменУправлениеПредприятиемРозничнаяТорговляТипыЦенНоменклатуры.ТипЦеныНоменклатуры = &ТипЦеныНоменклатуры
	|	И ОбменУправлениеПредприятиемРозничнаяТорговляТипыЦенНоменклатуры.Ссылка <> &ЭтотУзел
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля КАК ОбменУправлениеПредприятиемРозничнаяТорговля
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.ТипыЦенНоменклатуры КАК ОбменУправлениеПредприятиемРозничнаяТорговляТипыЦенНоменклатуры
	|		ПО (ОбменУправлениеПредприятиемРозничнаяТорговляТипыЦенНоменклатуры.Ссылка = ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка)
	|ГДЕ
	|	ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка <> &ЭтотУзел
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОбменУправлениеПредприятиемРозничнаяТорговляТипыЦенНоменклатуры.ТипЦеныНоменклатуры) = 0";
	
	Запрос.УстановитьПараметр("ТипЦеныНоменклатуры", ТипЦеныНоменклатуры);
	Запрос.УстановитьПараметр("ЭтотУзел"           , ПланыОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоСкладу(Склад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.СоответствияМагазиновИСкладов КАК ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов
	|ГДЕ
	|	(ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.СкладМагазина = &Склад
	|			ИЛИ ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.СкладМагазина ЕСТЬ NULL )
	|	И ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка <> &ЭтотУзел";
	
	Если ТипЗнч(Склад) = Тип("Массив") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Склад", "В (&Склад)");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склад"   , Склад);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля КАК ОбменУправлениеПредприятиемРозничнаяТорговля
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.Организации КАК СписокОрганизаций
	               |		ПО ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка = СписокОрганизаций.Ссылка
	               |ГДЕ
	               |	(СписокОрганизаций.Организация В (&СсылкаНаОрганизацию)
	               |			ИЛИ СписокОрганизаций.Организация ЕСТЬ NULL )
	               |	И ОбменУправлениеПредприятиемРозничнаяТорговля.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("СсылкаНаОрганизацию", Организация);
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.ЭтотУзел());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;	
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоКассе(Касса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.СоответствияМагазиновИСкладов КАК ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов
	|ГДЕ
	|	(ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.КассаМагазина = &Касса
	|			ИЛИ ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.КассаМагазина ЕСТЬ NULL )
	|	И ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("Касса"   , Касса);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоКассеККМ(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.СоответствияМагазиновИСкладов КАК ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов
	|ГДЕ
	|	(ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.КассаККММагазина = &КассаККМ
	|			ИЛИ ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.КассаККММагазина ЕСТЬ NULL )
	|	И ОбменУправлениеПредприятиемРозничнаяТорговляСоответствияМагазиновИСкладов.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьМассивУзловПоКассе(Касса, СоответствиеРеквизитовИУзлов = Неопределено)
	
	Если ТипЗнч(Касса) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = Касса.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			КассаДляПоиска = Справочники.Кассы.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			КассаДляПоиска = Касса[0];
			
		Иначе
			
			КассаДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		КассаДляПоиска = Касса;
		
	КонецЕсли;
	
	//Если КассаДляПоиска - неопределилась до сих пор, то значит
	//передан был массив касс при обращении к функции
	Если КассаДляПоиска <> Неопределено Тогда
		
		//В МассивУзлов запишем все узлы, в которые данная касса может мигрировать
		//
		МассивУзлов = ВернутьМассивУзловПоОдномуРеквизиту(КассаДляПоиска, СоответствиеРеквизитовИУзлов);
		
	Иначе	
		//В МассивУзлов запишем все узлы в которую кассы из массива могут мигрировать
		//
		МассивУзлов = ПолучитьЗапросомМассивУзловПоКассе(Касса);
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции

Функция ПолучитьМассивУзловПоТипуЦенНоменклатуры(ТипЦенНоменклатуры, СоответствиеРеквизитовИУзлов = Неопределено)
	

	Если ТипЗнч(ТипЦенНоменклатуры) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = ТипЦенНоменклатуры.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			ТипЦенНоменклатурыДляПоиска = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			ТипЦенНоменклатурыДляПоиска = ТипЦенНоменклатуры[0];
			
		Иначе
			
			ТипЦенНоменклатурыДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ТипЦенНоменклатурыДляПоиска = ТипЦенНоменклатуры;
		
	КонецЕсли;
	
	Если ТипЦенНоменклатурыДляПоиска <> Неопределено Тогда
		
		МассивУзлов = ВернутьМассивУзловПоОдномуРеквизиту(ТипЦенНоменклатурыДляПоиска, СоответствиеРеквизитовИУзлов);
		
	Иначе	
		
		МассивУзлов = Новый Массив;
		
		Для Каждого ОдинТипЦенНоменклатуры Из ТипЦенНоменклатуры Цикл
			
			МассивУзловОдногоТипаЦенНоменклатуры = ВернутьМассивУзловПоОдномуРеквизиту(ОдинТипЦенНоменклатуры, СоответствиеРеквизитовИУзлов);
			
			ДополнитьМассивСсылками(МассивУзлов, МассивУзловОдногоТипаЦенНоменклатуры);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции

Функция ПолучитьМассивУзловПоОрганизации(Организация, СоответствиеРеквизитовИУзлов = Неопределено)
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = Организация.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			ОрганизацияДляПоиска = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			ОрганизацияДляПоиска = Организация[0];
			
		Иначе
			
			ОрганизацияДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ОрганизацияДляПоиска = Организация;
		
	КонецЕсли;
	
	Если ОрганизацияДляПоиска <> Неопределено Тогда
		
		МассивУзлов = ВернутьМассивУзловПоОдномуРеквизиту(ОрганизацияДляПоиска, СоответствиеРеквизитовИУзлов);
		
	Иначе	
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции



Функция ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, ИмяБазовогоТипа, ТипЭлемента, НужноОпределятьЭтоГруппа = Ложь, ЭтоГруппа = Ложь)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Если НужноОпределятьЭтоГруппа Тогда
			
			ЭтоГруппа = Элемент.ЭтоГруппа;
			
			Если ЭтоГруппа = Неопределено Тогда
				ЭтоГруппа = Ложь;
			КонецЕсли;
			
		Конецесли;
		
		Возврат Элемент.Ссылка;
		
	КонецЕсли;
	
	Если НужноОпределятьЭтоГруппа Тогда
		
		ЭтоГруппа = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, "ЭтоГруппа");	
		Если ЭтоГруппа = Неопределено Тогда
			ЭтоГруппа = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса)
	
	МетаданныеЭлемента = Элемент.Метаданные();
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ТипСсылки = Тип("СправочникСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Справочник." + МетаданныеЭлемента.Имя;
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ТипСсылки = Тип("ДокументСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Документ." + МетаданныеЭлемента.Имя; 
		
	Иначе
		
		ТипСсылки = Неопределено;
		
	КонецЕсли;
	
	Возврат ТипЭлемента = ТипСсылки;	
	
КонецФункции


Функция ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяПараметра)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
		
	Если НЕ ЭтоСсылка Тогда
		Возврат Элемент[ИмяПараметра]
	КонецЕсли;
			
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектДанных." + ИмяПараметра + "
				   |
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();	
	
	Возврат Выборка[ИмяПараметра];		
		
КонецФункции

Процедура ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеРеквизитовИУзлов = Неопределено, НужноАнализироватьОграниченияПоДатам = Ложь)
	
	Если ТипЭлемента = Неопределено Тогда
		ТипЭлемента = ТипЗнч(Элемент);
	КонецЕсли;
	
	Если ТипЭлемента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.УстановкаЦенНоменклатуры")  Тогда
		
		МассивТиповЦен = Элемент.ТипыЦен.ВыгрузитьКолонку("ТипЦен");
		ДополнитьМассивУзламиПоТипуЦенНоменклатуры(МассивУзловДляПередачи, МассивТиповЦен);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВнутреннееПеремещениеНаличныхДенежныхСредств") Тогда
		
		//фильтр по кассе предусматривает фильтр по организациям		
		ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, Элемент.Касса,           СоответствиеРеквизитовИУзлов);
		ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, Элемент.КассаПолучатель, СоответствиеРеквизитовИУзлов);
				
	Иначе
		//Фильтр по организациям
		
		//документы, у которых нет реквизита "Организация" рассматривать не будем
		Если Элемент.Метаданные().Реквизиты.Найти("Организация") <> Неопределено тогда
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Элемент.Организация, СоответствиеРеквизитовИУзлов);
		КонецЕсли;
		
		Если МассивУзловДляПередачи.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЭлемента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") 
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладе")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОприходованиеТоваров")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОприходованиеТоваров")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВозвратТоваровПоставщику")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") 
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.РеализацияТоваровУслуг")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.СписаниеТоваров")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.СписаниеТоваров")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.КомплектацияНоменклатуры")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.КомплектацияНоменклатуры") 
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.РасходныйОрдерНаТовары") 	Тогда
			
			МассивУзловСкладов = Новый Массив;
			ДополнитьМассивУзламиПоСкладу(МассивУзловСкладов, Элемент.Склад, СоответствиеРеквизитовИУзлов);
			ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловСкладов);
							
		ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ВнутреннийЗаказ")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВнутреннийЗаказ") Тогда
			
			Если Элемент.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
				
				МассивУзловСкладов = Новый Массив;
				ДополнитьМассивУзламиПоСкладу(МассивУзловСкладов, Элемент.Заказчик, СоответствиеРеквизитовИУзлов);
				ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловСкладов);
				
			Иначе
				
				МассивУзловДляПередачи = Новый Массив;
				
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
						
			Если ТипЗнч(Элемент.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
				
				
				МассивУзловСкладов = Новый Массив;
				ДополнитьМассивУзламиПоСкладу(МассивУзловСкладов, Элемент.СкладОрдер, СоответствиеРеквизитовИУзлов);
				ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловСкладов);
            							
			Иначе
				
				ТаблицаПриходныхОрдеров = Элемент.Товары.Выгрузить(,"ПриходныйОрдер");
				ТаблицаПриходныхОрдеров.Свернуть("ПриходныйОрдер");
				
				МассивУзловОрдеров = Новый Массив;
				
				Для Каждого СтрокаТаблицы Из ТаблицаПриходныхОрдеров Цикл
					
					ДополнитьМассивУзламиПоСкладу(МассивУзловОрдеров, СтрокаТаблицы.ПриходныйОрдер.Склад, СоответствиеРеквизитовИУзлов);
                				 
				КонецЦикла;
				
				ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловОрдеров);
				
			КонецЕсли;
			    			
		ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
						
			Если Элемент.Оплачено И Элемент.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
				
				МассивУзловКасс = Новый Массив;
				ДополнитьМассивУзламиПоКассе(МассивУзловКасс, Элемент.Касса, СоответствиеРеквизитовИУзлов);
                ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловКасс);
 				
			Иначе
				
				МассивУзловДляПередачи = Новый Массив;
				
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			
			Если Элемент.Оплачено И Элемент.ВидОперации <> Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
				
				МассивУзловКасс = Новый Массив;
				ДополнитьМассивУзламиПоКассе(МассивУзловКасс, Элемент.Касса, СоответствиеРеквизитовИУзлов);
                ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловКасс);
                				
			Иначе 
				
				МассивУзловДляПередачи = Новый Массив;
				
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПеремещениеТоваров")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			
			МассивУзловСкладов = Новый Массив;
			ДополнитьМассивУзламиПоСкладу(МассивУзловСкладов, Элемент.СкладОтправитель,  СоответствиеРеквизитовИУзлов);
			ДополнитьМассивУзламиПоСкладу(МассивУзловСкладов, Элемент.СкладПолучатель,  СоответствиеРеквизитовИУзлов);
			ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловСкладов);
			
		ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПереоценкаТоваровВРознице")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПереоценкаТоваровВРознице") Тогда
			
			Если Элемент.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице
				И Элемент.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				
				МассивУзловСкладов = Новый Массив;
				ДополнитьМассивУзламиПоСкладу(МассивУзловСкладов, Элемент.Склад,  СоответствиеРеквизитовИУзлов);
                ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловСкладов);
				
			Иначе
				
				МассивУзловДляПередачи = Новый Массив;
				
			КонецЕсли;
			  			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НужноАнализироватьОграниченияПоДатам Тогда
		
		// ограничение по датам смотрим
		ТаблицаДатИУзлов = ПолучитьТаблицуУзловИДат();
		
		Номер = МассивУзловДляПередачи.Количество() - 1;
		Пока Номер >= 0  Цикл
			
			СтрокаТаблицы = ТаблицаДатИУзлов.Найти(МассивУзловДляПередачи[Номер], "ссылка");
			
			Если СтрокаТаблицы = Неопределено
				ИЛИ Элемент.Дата < СтрокаТаблицы.ДатаНачалаВыгрузкиДокументов
				ИЛИ Элемент.Дата < СтрокаТаблицы.ДатаСвертки Тогда
				
				Если СтрокаТаблицы <> Неопределено И Элемент.Дата < СтрокаТаблицы.ДатаСвертки Тогда
					
					//зарегистрировать изменения для свертки
					НаборЗаписей = РегистрыСведений.СверткаУзлаРозницы.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.УзелРозницы.Установить(МассивУзловДляПередачи[Номер]);
					
					НаборЗаписей.Прочитать();
					
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляПередачи[Номер], НаборЗаписей);
					
				КонецЕсли;
				
				МассивУзловДляПередачи.Удалить(Номер);
				
			КонецЕсли;
						
			Номер = Номер - 1;
			
		КонецЦикла;
		
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ОбъединитьМассивыУзловПоИ(ИсходныйМассив, МассивОграничений)
	
	Если МассивОграничений = Неопределено Тогда
		ИсходныйМассив.Очистить();
		Возврат;
	КонецЕсли;
	
	Если МассивОграничений.Количество() = 0 Тогда
		ИсходныйМассив.Очистить();
		Возврат;
	КонецЕсли;
	
	НомерВмассиве = ИсходныйМассив.Количество() - 1;
	Пока НомерВМассиве >= 0 Цикл
		
		Если МассивОграничений.Найти(ИсходныйМассив[НомерВМассиве]) = Неопределено Тогда
			ИсходныйМассив.Удалить(НомерВМассиве);
		КонецЕсли;
	
		НомерВМассиве = НомерВМассиве - 1;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДополнитьМассивСсылками(ТекущийМассив, МассивДляДобавления)
	
	Если МассивДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивДляДобавления Цикл
		
		Если ТекущийМассив.Найти(Элемент) = Неопределено Тогда
		
			ТекущийМассив.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


Функция ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита)
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = НаборЗаписей.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	Массив = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат Массив;	
	
КонецФункции

Процедура ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи)
	
	МассивУзлов = ВернутьМассивВсехУзловИзПараметровСеанса();
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, Склад, СоответствиеРеквизитовИУзлов = Неопределено)
	
	МассивУзлов = ВернутьМассивУзловПоОдномуРеквизиту(Склад, СоответствиеРеквизитовИУзлов);
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, Касса, СоответствиеРеквизитовИУзлов = Неопределено)
	
	МассивУзлов = ПолучитьМассивУзловПоКассе(Касса, СоответствиеРеквизитовИУзлов);
	
	//Объединим массивы переданный в процедуру и полученный в теле процедуры
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Организация, СоответствиеРеквизитовИУзлов = Неопределено)
	
	МассивУзлов = ПолучитьМассивУзловПоОрганизации(Организация, СоответствиеРеквизитовИУзлов);
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры


Процедура ДополнитьМассивУзламиПоТипуЦенНоменклатуры(МассивУзловДляПередачи, ТипЦенНоменклатуры, СоответствиеРеквизитовИУзлов = Неопределено)
	
	
	МассивУзлов = ПолучитьМассивУзловПоТипуЦенНоменклатуры(ТипЦенНоменклатуры, СоответствиеРеквизитовИУзлов);
	
	//Объединим массивы переданный в процедуру и полученный в теле процедуры
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено)
	
	Перем ЭтоГруппа, СсылкаНаЭлемент;
	
	Если ТипЭлемента = Неопределено Тогда
	
		ТипЭлемента = ТипЗнч(Элемент);
	
	КонецЕсли;
	
	// предопределенные элементы выгружаем и загружаем послностью
	Если Элемент.Предопределенный 
	   И Не (ТипЭлемента = Тип("СправочникОбъект.КатегорииОбъектов") ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииОбъектов"))
	   И НЕ (ТипЭлемента = Тип("СправочникОбъект.ВидыКонтактнойИнформации") Или ТипЭлемента = Тип("СправочникСсылка.ВидыКонтактнойИнформации"))Тогда
		 
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		Возврат;
		
	КонецЕсли;
	
	ВыгружатьДляВсехУзлов = Ложь;
	
	Если ТипЭлемента = Тип("СправочникОбъект.Кассы")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Кассы") Тогда
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
			
			
			
			ДополнитьМассивУзламиПоКассе(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеРеквизитовИУзлов);
			
			//если массив узлов - пустой, это касса компании, которая посылается во все узлы
			Если МассивУзловДляПередачи.Количество() = 0 Тогда
				
				ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Склады")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Склады") Тогда
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
			
			ДополнитьМассивУзламиПоСкладу(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеРеквизитовИУзлов);
			
			//если массив узлов - пустой, это склад компании, который посылается во все узлы
			Если МассивУзловДляПередачи.Количество() = 0 Тогда
				
				ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ТипыЦенНоменклатуры")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Ложь);
		
		ДополнитьМассивУзламиПоТипуЦенНоменклатуры(МассивУзловДляПередачи, СсылкаНаЭлемент);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ИнформационныеКарты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		
		// все узлы
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда		
		
		Если ТипЗнч(Элемент.Объект) = Тип("СправочникСсылка.Номенклатура")
		   И Не Элемент.Объект.Набор Тогда
		   
		   ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		   
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.КатегорииОбъектов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииОбъектов")
		ИЛИ ТипЭлемента = Тип("СправочникОбъект.ЗначенияСвойствОбъектов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		
		Если ТипЭлемента = Тип("СправочникОбъект.КатегорииОбъектов")
			ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииОбъектов") Тогда
			
			ОписаниеТипаНазначения = Элемент.НазначениеКатегории.ТипЗначения;
			
		Иначе

			ОписаниеТипаНазначения = Элемент.Владелец.НазначениеСвойства.ТипЗначения;
			
		КонецЕсли;
		
		Если ОписаниеТипаНазначения <> Неопределено 
			И (ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.Номенклатура"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.Контрагенты"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.Организации"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("СправочникСсылка.Склады"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.КомплектацияНоменклатуры"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ОприходованиеТоваров"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ОтменаСкидокНоменклатуры"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ПеремещениеТоваров"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.РасходныйОрдерНаТовары"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.СписаниеТоваров"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.УстановкаСкидокНоменклатуры"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"))
			ИЛИ ОписаниеТипаНазначения.СодержитТип(Тип("ДокументСсылка.ЧекККМ")))Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ВидыНоменклатуры")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		
		Если Элемент.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Номенклатура")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если Не Элемент.Набор Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ХарактеристикиНоменклатуры")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		
		Если Не Элемент.Владелец.Набор Тогда
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ЕдиницыИзмерения")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		
		Если ТипЗнч(Элемент.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ВидыКонтактнойИнформации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		
		МенеджерСправочника = Справочники.ВидыКонтактнойИнформации;
		
		Если Элемент = МенеджерСправочника.ФактАдресФизЛица
		 Или Элемент = МенеджерСправочника.ТелефонСлужебный
		 Или Элемент = МенеджерСправочника.ТелефонФизЛица
		 Или Элемент = МенеджерСправочника.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента
		 Или Элемент = МенеджерСправочника.ФактАдресКонтрагента
		 Или Элемент = МенеджерСправочника.ЮрАдресКонтрагента
		 Или Элемент = МенеджерСправочника.ТелефонКонтрагента
		 Или Элемент = МенеджерСправочника.ФаксКонтрагента
		 Или Элемент = МенеджерСправочника.ФактАдресОрганизации
		 Или Элемент = МенеджерСправочника.ЮрАдресОрганизации
		 Или Элемент = МенеджерСправочника.ФаксОрганизации
		 Или Элемент = МенеджерСправочника.ТелефонОрганизации Тогда
		
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Организации") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Ложь);
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеРеквизитовИУзлов);
	    		
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи)
	
	ВыгружатьДляВсехУзлов = Истина;
			
	Если ВозвращатьМассивВсехУзлов Тогда
		ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи);
	КонецЕсли;	
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиСправочника(Элемент, ТипЭлемента = Неопределено, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, ТипЭлемента, ВыгружатьДляВсехУзлов, 
	                                           ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиДокумента(Элемент, ТипРеквизита = Неопределено, ВыгружатьДляВсехУзлов = Ложь, 
	ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено,
	НужноАнализироватьОграниченияПоДатам = Ложь)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
		ТипРеквизита, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов, НужноАнализироватьОграниченияПоДатам);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Данные, ИмяБазовогоТипа, ТипЭлемента = Неопределено, МетаданныеОбъекта = Неопределено,
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено,
	НужноАнализироватьОграниченияПоДатам = Истина) Экспорт
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
			
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиСправочника(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
		                                                                         СоответствиеРеквизитовИУзлов);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиДокумента(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
		                                                                       СоответствиеРеквизитовИУзлов, НужноАнализироватьОграниченияПоДатам);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
		                                                                                           ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов);
			
	ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
		                                                                                           ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов);
			
	ИначеЕсли ИмяБазовогоТипа = "ПланыВидовХарактеристик" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиПланаВидовХарактеристик(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
		                                                                                     ВозвращатьМассивВсехУзлов, СоответствиеРеквизитовИУзлов);
		
	КонецЕсли;		
			
	Возврат МассивУзловДляРегистрацииСсылки;
	
КонецФункции

Процедура ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(НаборЗаписей, МассивУзловДляПередачи, 
	ИмяРеквизита, ТипЭлемента = Неопределено, СоответствиеРеквизитовИУзлов = Неопределено, ИмяБазовогоТипа = "Справочники")
	
	МассивРазличныхЗначенийРеквизита = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита);
	
	МассивУзловДляПередачи = Новый Массив();
	
	Для Каждого Элемент Из МассивРазличныхЗначенийРеквизита Цикл 
		
		// для каждого элемента массива нужно определить набор узлов куда он может передаваться
		ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, ТипЭлемента, , , СоответствиеРеквизитовИУзлов);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеРеквизитовИОрганизаций = Неопределено)
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоответствиеРеквизитовИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоответствиеРеквизитовИОрганизаций, Истина);
		
	КонецЕсли;
	
КонецПроцедуры


Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено)
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.КатегорииОбъектов")
		Или ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов")
		Или ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.НазначенияСвойствОбъектов") Тогда
		
		ЭлементОтборОбъектЗначение = Элемент.Отбор.Объект.Значение;
		
		Если Не Элемент.Отбор.Объект.Использование Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		ИначеЕсли ТипЗнч(Элемент.Отбор.Объект.Значение) = Тип("СправочникСсылка.Номенклатура") 
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.ФизическиеЛица")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("СправочникСсылка.Склады")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ОприходованиеТоваров")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ОтменаСкидокНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ПеремещениеТоваров")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.СписаниеТоваров")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.УстановкаСкидокНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")
			ИЛИ ТипЗнч(ЭлементОтборОбъектЗначение) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
				ЕстьНепереносимыеЗначения = Ложь;
				
				Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов") Тогда 
					//придется еще проверить на значения
					
					Для Каждого Запись Из Элемент Цикл
						
						ЗаписьЗначение = Запись.Значение;
						
						Если ТипЗнч(ЗаписьЗначение) <> Тип("Булево") 
							И ТипЗнч(ЗаписьЗначение) <> Тип("Строка")
							И ТипЗнч(ЗаписьЗначение) <> Тип("Дата")
							И ТипЗнч(ЗаписьЗначение) <> Тип("Число")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Контрагенты")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Номенклатура")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Склады")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.Пользователи")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.КлассификаторСтранМира")
							И ТипЗнч(ЗаписьЗначение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
							
							ЕстьНепереносимыеЗначения = Истина;
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЕстьНепереносимыеЗначения Тогда
					
					ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
					
				КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.КомплектующиеНоменклатуры") Тогда
		
		Если Не Элемент.Отбор.Номенклатура.Значение.Набор Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);

		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.Штрихкоды") Тогда
		
		Если Не Элемент.Отбор.Владелец.Значение.Набор Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);

		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ГраницыЗапретаИзмененияДанных") Тогда	
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Организация", 
			Тип("СправочникСсылка.Организации"), СоответствиеРеквизитовИУзлов);	
			

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ОтветственныеЛицаОрганизаций") Тогда		
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "СтруктурнаяЕдиница", 
			Тип("СправочникСсылка.Организации"), СоответствиеРеквизитовИУзлов);	
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Объект",, СоответствиеРеквизитовИУзлов);
		
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено)
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	СпособНеВыгружать = Перечисления.СпособыВыгрузкиСебестоимостиВРозничнуюТорговлю.НеВыгружать;
	
	//Если ТипЭлемента = Тип("РегистрНакопленияНаборЗаписей.ПродажиСебестоимость") Тогда
		
				
		ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи);
				
		// не по всем узлам нужно выгружать себестоимость
		ТаблицаДатИУзлов = ПолучитьТаблицуУзловИДат();
		
		Номер = МассивУзловДляПередачи.Количество() - 1;
		Пока Номер >= 0  Цикл
			
			СтрокаТаблицы = ТаблицаДатИУзлов.Найти(МассивУзловДляПередачи[Номер], "ссылка");
			Если СтрокаТаблицы = Неопределено
				ИЛИ МассивУзловДляПередачи[Номер].СпособВыгрузкиСебестоимости = СпособНеВыгружать Тогда
				
				МассивУзловДляПередачи.Удалить(Номер);
				
			КонецЕсли;
			
			Номер = Номер - 1;
			
		КонецЦикла;
		
		
	//КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции


Функция ОпределениеУзловДляВыгрузкиПланаВидовХарактеристик(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеРеквизитовИУзлов = Неопределено)
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов")
		Или ТипЭлемента = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		
		Если Элемент.НазначениеСвойства.ТипЗначения = Неопределено 
			ИЛИ 
			//(
			Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) 
			//	  И Элемент.НазначениеСвойства <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры)
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.КомплектацияНоменклатуры"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОприходованиеТоваров"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОтменаСкидокНоменклатуры"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПеремещениеТоваров"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РасходныйОрдерНаТовары"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.СписаниеТоваров"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаСкидокНоменклатуры"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"))
			ИЛИ Элемент.НазначениеСвойства.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЧекККМ")) Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ПланВидовХарактеристикСсылка.НазначенияСвойствКатегорийОбъектов")
		Или ТипЭлемента = Тип("ПланВидовХарактеристикОбъект.НазначенияСвойствКатегорийОбъектов") Тогда
		
		Если Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) 
			ИЛИ 
			//(
			Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) 
			//     И Элемент <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры)
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.КомплектацияНоменклатуры"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОприходованиеТоваров"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОтменаСкидокНоменклатуры"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПеремещениеТоваров"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РасходныйОрдерНаТовары"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.СписаниеТоваров"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаПороговНакопительныхСкидок"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаСкидокНоменклатуры"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"))
			ИЛИ Элемент.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ЧекККМ")) Тогда
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ПланВидовХарактеристикСсылка.ТипыШтрихкодов")
		Или ТипЭлемента = Тип("ПланВидовХарактеристикОбъект.ТипыШтрихкодов") Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции


Процедура ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииПередЗаписью, МассивУзловДляРегистрацииПриЗаписи)
	
	ПроцедурыОбменаДанными.ДополнитьМассивПолучателейУзламиАвторегистрации(Источник);
	
	// для регистрации ссылки
	Для Каждого Элемент Из МассивУзловДляРегистрацииПередЗаписью Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
	// для регистрации объекта
	Для Каждого Элемент Из МассивУзловДляРегистрацииПриЗаписи Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;	
	
КонецПроцедуры


Процедура ЗарегистрироватьИзмененияДляСебестоимости(УзелОбменаОбъект) Экспорт
	
	//найдем периоды, за которые нужно регистрировать
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Календарь.ДатаКалендаря, МЕСЯЦ) КАК Период
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
	|ГДЕ
	|	Календарь.ДатаКалендаря МЕЖДУ &ДатаНачалаВыгрузки И &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МЕСЯЦ", УзелОбменаОбъект.ПериодичностьПередачиСебестоимости);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", УзелОбменаОбъект.ДатаНачалаВыгрузкиСебестоимости);
	Запрос.УстановитьПараметр("ТекущаяДата",		ТекущаяДата());
	
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
	
	ЗарегистрироватьИзмененияПериодаВыгрузкиСебестоимости(ТаблицаПериодов, УзелОбменаОбъект.Ссылка);
	
КонецПроцедуры


Процедура ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, ИмяБазовогоТипа, 
	МассивУзловДляРегистрацииСсылки = Неопределено, МассивУзловДляРегистрацииОбъекта = Неопределено)
	
	Если Отказ ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		
		// элемент еще никуда не передавался
		МассивУзловДляРегистрацииСсылки = Новый Массив;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник.Ссылка, ИмяБазовогоТипа);
		
	КонецЕсли;
	
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);	
	
КонецПроцедуры

Процедура ПередЗаписьюНабораЗаписейДляОбменаСРозничнойТорговлей(Источник, Отказ, Замещение, ИмяБазовогоТипа)
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	Если Замещение Тогда
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			СтарыйНаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
			СтарыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, ИмяБазовогоТипа,  , МетаданныеРегистра);		
				
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа,  , МетаданныеРегистра);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
	
КонецПроцедуры

Процедура ПередЗаписьСправочникаДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Справочники");	
		
КонецПроцедуры

Процедура ПередЗаписьюДокументаДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Документы");	
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраСведенийДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюНабораЗаписейДляОбменаСРозничнойТорговлей(Источник, Отказ, Замещение, "РегистрыСведений");
	
КонецПроцедуры

Процедура ПередУдалениемСправочникаДляОбменаСРозничнойТорговлейПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Справочники");	
	
КонецПроцедуры

Процедура ПередУдалениемДокументаДляОбменаСРозничнойТорговлейПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "Документы");	
	
КонецПроцедуры

Процедура ПередЗаписьюПланаВидовХарактеристикДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаСРозничнойТорговлей(Источник, Отказ, "ПланыВидовХарактеристик");
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраНакопленияДляОбменаСРозничнойТорговлейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	ЭтоКорректировкаСтоимостиСписанияТоваров = ТипЗнч(Источник.Отбор.Регистратор) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров");
	РеквизитОпределяющийПериод = ?(ЭтоКорректировкаСтоимостиСписанияТоваров, "ДокументДвижения", "Период");
	
	СтарыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	
	Если Замещение Тогда
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, "РегистрыНакопления",  , МетаданныеРегистра);		
		
		ТаблицаСтарогоНабораЗаписей = СтарыйНаборЗаписей.Выгрузить(, РеквизитОпределяющийПериод);
		ТаблицаСтарогоНабораЗаписей.Свернуть(РеквизитОпределяющийПериод);
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
		ТаблицаСтарогоНабораЗаписей = СтарыйНаборЗаписей.Выгрузить(, РеквизитОпределяющийПериод);
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, "РегистрыНакопления",  , МетаданныеРегистра);
	
	ТаблицаНовогоНабораЗаписей = Источник.Выгрузить(, РеквизитОпределяющийПериод);
	ТаблицаНовогоНабораЗаписей.Свернуть(РеквизитОпределяющийПериод);
	
	//если оба набора записей пустые, то возврат
	Если (ТаблицаСтарогоНабораЗаписей.Количество() = 0) И (ТаблицаНовогоНабораЗаписей.Количество() = 0) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//если нет узлов, для которых нужно регистрировать изменения - возврат
	Если МассивУзловДляРегистрацииОбъекта.Количество() = 0 И МассивУзловДляРегистрацииСсылки.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//получим общий массив узлов для регистрации
	Для Каждого Узел Из МассивУзловДляРегистрацииСсылки Цикл
		
		Если МассивУзловДляРегистрацииОбъекта.Найти(Узел) = Неопределено Тогда
			
			МассивУзловДляРегистрацииОбъекта.Добавить(Узел);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//зарегистрируем изменения для РС ПериодыВыгрузкиСебестоимостиВРозницу
	Для Каждого Узел Из МассивУзловДляРегистрацииОбъекта Цикл
		
		//получим запросом массив дат
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ТаблицаСтарогоНабораЗаписей.Период, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ТаблицаСтарогоНабораЗаписей
		|ИЗ
		|	&ТаблицаСтарогоНабораЗаписей КАК ТаблицаСтарогоНабораЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ТаблицаНовогоНабораЗаписей.Период, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ТаблицаНовогоНабораЗаписей
		|ИЗ
		|	&ТаблицаНовогоНабораЗаписей КАК ТаблицаНовогоНабораЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНовогоНабораЗаписей.Период
		|ИЗ
		|	ТаблицаНовогоНабораЗаписей КАК ТаблицаНовогоНабораЗаписей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСтарогоНабораЗаписей.Период
		|ИЗ
		|	ТаблицаСтарогоНабораЗаписей КАК ТаблицаСтарогоНабораЗаписей";
		
		Запрос.УстановитьПараметр("ТаблицаСтарогоНабораЗаписей", ТаблицаСтарогоНабораЗаписей);
		Запрос.УстановитьПараметр("ТаблицаНовогоНабораЗаписей" , ТаблицаНовогоНабораЗаписей);
		
		Если ЭтоКорректировкаСтоимостиСписанияТоваров Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НАЧАЛОПЕРИОДА(ТаблицаСтарогоНабораЗаписей.Период, ДЕНЬ)", "НАЧАЛОПЕРИОДА(ТаблицаСтарогоНабораЗаписей.ДокументДвижения.Дата, ДЕНЬ)");
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДЕНЬ", Узел.ПериодичностьПередачиСебестоимости);
		
		ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
		
		ЗарегистрироватьИзмененияПериодаВыгрузкиСебестоимости(ТаблицаПериодов, Узел);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПериодаВыгрузкиСебестоимости(ТаблицаПериодов, Узел)
	
	НаборЗаписей = РегистрыСведений.ПериодыВыгрузкиСебестоимостиВРозницу.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаПериод Из ТаблицаПериодов Цикл
		
		НаборЗаписей.Отбор.Дата.Установить(СтрокаПериод.Период);
		
		НаборЗаписей.Прочитать();
		
		НовыйНабор = НаборЗаписей.Количество() = 0;
		
		Если НовыйНабор Тогда
			
			НоваяЗапись      = НаборЗаписей.Добавить();
			НоваяЗапись.Дата = СтрокаПериод.Период;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьТаблицуПоОтбору(ИмяСправочника, ПредставлениеЭлемента, ХранилищеСОтбором)
	
	ПостроительЗапроса      = Новый ПостроительЗапроса;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИмяСправочника.Ссылка КАК ПредставлениеЭлемента
	|ИЗ
	|	Справочник.ИмяСправочника КАК ИмяСправочника
	|ГДЕ
	|	НЕ ИмяСправочника.ЭтоГруппа";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочника"       , ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПредставлениеЭлемента", ПредставлениеЭлемента);
	
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	СтруктураСОтбором = ХранилищеСОтбором.Получить();
	
	Если СтруктураСОтбором <> Неопределено Тогда
		
		ОтборУзла = СтруктураСОтбором.Отбор;
		
		Если ОтборУзла.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	
		Для Каждого ЭлементОтбора Из ОтборУзла Цикл
			
			Если ПустаяСтрока(ЭлементОтбора.ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.ПутьКДанным);
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора, , "Значение");
			НовыйЭлементОтбора.Значение = ЭлементОтбора.Значение;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
	ПостроительЗапроса.Выполнить();
	ТаблицаЭлементов = ПостроительЗапроса.Результат.Выгрузить();
	
	Возврат ТаблицаЭлементов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА СЕБЕСТОИМОСТИ
////////////////////////////////////////////////////////////////////////

// Возвращает таблицу значений, содержащую данные о себестоимости номенклатуры для указанного узла обмена.
//
// Параметры
//	Узел - ПланОбменаСсылка.ОбменУправлениеПредприятиемРозничнаяТорговля - ссылка на узел обмена с 1С:Розница
//
// Возвращаемые значения
//	Соответствие
//		Ключ - Дата сведений о себестоимости
//		Значение - Соотвтетствие
//			Ключ - Код магазина
//			Значение - Таблица значений с колонками
//				- Номенклатура
//				- ХарактеристикаНоменклатуры
//				- Цена
//
Функция ПолучитьСебестоимостьНоменклатурыДляВыгрузкиВРозничнуюТорговлю(Узел) Экспорт
	Перем ДатаНачалаВыгрузки, ДатаОкончанияВыгрузки;
	
	// Получим реквизиты узла обмена с 1С:Розница
	РеквизитыУзла = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Узел,
		"СпособВыгрузкиСебестоимости, ДатаНачалаВыгрузкиСебестоимости, ПериодичностьПередачиСебестоимости");
		
	// Проверим, надо ли выгружать себестоимость в этот узел
	Если РеквизитыУзла.СпособВыгрузкиСебестоимости <> Перечисления.СпособыВыгрузкиСебестоимостиВРозничнуюТорговлю.ВыгружатьСебестоимостьУпр
	 И РеквизитыУзла.СпособВыгрузкиСебестоимости <> Перечисления.СпособыВыгрузкиСебестоимостиВРозничнуюТорговлю.ВыгружатьСебестоимостьРегл Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Определим даты начала и окончания периода выгрузки себестоимости.
	Запрос 					= Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Узел", 				Узел);
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", РеквизитыУзла.ДатаНачалаВыгрузкиСебестоимости);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПериодыВыгрузкиСебестоимостиВРозницуИзменения.Дата КАК Дата
	|ПОМЕСТИТЬ ДатыВыгрузкиСебестоимости
	|ИЗ
	|	РегистрСведений.ПериодыВыгрузкиСебестоимостиВРозницу.Изменения КАК ПериодыВыгрузкиСебестоимостиВРозницуИзменения
	|ГДЕ
	|	ПериодыВыгрузкиСебестоимостиВРозницуИзменения.Дата >= &ДатаНачалаВыгрузки
	|	И ПериодыВыгрузкиСебестоимостиВРозницуИзменения.Узел = &Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПериодыВыгрузки.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ПериодыВыгрузки.ДатаОкончания) КАК ДатаОкончания
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ДатыВыгрузкиСебестоимости.Дата) КАК ДатаНачала,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
	|	ИЗ
	|		ДатыВыгрузкиСебестоимости КАК ДатыВыгрузкиСебестоимости
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДАТАВРЕМЯ(1, 1, 1),
	|		МАКСИМУМ(КОНЕЦПЕРИОДА(ДатыВыгрузкиСебестоимости.Дата, МЕСЯЦ))
	|	ИЗ
	|		ДатыВыгрузкиСебестоимости КАК ДатыВыгрузкиСебестоимости) КАК ПериодыВыгрузки";
	
	// Установим требуемую периодичность выгрузки себестоимости.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МЕСЯЦ", СокрЛП(РеквизитыУзла.ПериодичностьПередачиСебестоимости));
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаНачалаВыгрузки	  = Выборка.ДатаНачала;
		ДатаОкончанияВыгрузки = Выборка.ДатаОкончания;
	КонецЕсли;
	
	// Проверим, надо ли выгружать себестоимость (есть ли зарегистрированные изменения себестоимости).
	Если НЕ ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки",    Новый Граница(ДатаНачалаВыгрузки,    ВидГраницы.Включая)); // переопределим ранее установенный параметр
	Запрос.УстановитьПараметр("ДатаОкончанияВыгрузки", Новый Граница(ДатаОкончанияВыгрузки, ВидГраницы.Включая));
	
	// Определим настройки параметров учета.
	ВыгружатьСебестоимостьУпр 		 = (РеквизитыУзла.СпособВыгрузкиСебестоимости = Перечисления.СпособыВыгрузкиСебестоимостиВРозничнуюТорговлю.ВыгружатьСебестоимостьУпр);
	ИспользоватьРасширеннуюАналитику = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(ДатаОкончанияВыгрузки);
	
	// Подготовим временные таблицы для отбора выгружаемых данных по организации, складу, номенклатуре.
	СтруктураОтборов = СформироватьВременныеТаблицыОтборовДляВыгрузкиСебестоимости(Узел, МенеджерВременныхТаблиц);
	
	// Создадим временную таблицу соответствия складов и кодов магазинов.
	// Если склада нет в таблице СоответствияМагазиновИСкладов или для склада указан пустой код магазина,
	// то себестоимость по этому складу выгружаться не должна.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СоответствияМагазиновИСкладов.СкладМагазина КАК Склад,
	|	СоответствияМагазиновИСкладов.КодМагазина
	|ПОМЕСТИТЬ СоответствияМагазиновИСкладов
	|ИЗ
	|	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.СоответствияМагазиновИСкладов КАК СоответствияМагазиновИСкладов
	|ГДЕ
	|	СоответствияМагазиновИСкладов.Ссылка = &Узел
	|	И СоответствияМагазиновИСкладов.КодМагазина <> """"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Сформируем текст запроса в зависимости от режима учета затрат.
	Если ИспользоватьРасширеннуюАналитику Тогда
		
		// Отбор по аналитике вида учета нужен всегда, т.к. всегда требуется как минимум один отбор по ключу этой аналитики (РазделУчета = МПЗ).
		// Сначала выберем ключи аналитики, по которым были остатки или обороты за период выгрузки себестоимости,
		// потом отберем только подходящие ключи по организации и/или складу.
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	РегистрУчетаСебестоимости.АналитикаВидаУчета КАК Ссылка
		|ПОМЕСТИТЬ ИспользуемыеАналитикиВидаУчета
		|ИЗ
		|	РегистрНакопления.УчетЗатратРегл.ОстаткиИОбороты(&ДатаНачалаВыгрузки, &ДатаОкончанияВыгрузки, , , ) КАК РегистрУчетаСебестоимости
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АналитикаВидаУчета.Ссылка КАК Значение
		|ПОМЕСТИТЬ ОтборАналитикаВидаУчета
		|ИЗ
		|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеАналитикиВидаУчета КАК ИспользуемыеАналитикиВидаУчета
		|		ПО АналитикаВидаУчета.Ссылка = ИспользуемыеАналитикиВидаУчета.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствияМагазиновИСкладов КАК СоответствияМагазиновИСкладов
		|		ПО АналитикаВидаУчета.Склад = СоответствияМагазиновИСкладов.Склад
		|
		|//ЕстьОтборПоОрганизации	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборОрганизация КАК ОтборОрганизация
		|//ЕстьОтборПоОрганизации	ПО АналитикаВидаУчета.Организация = ОтборОрганизация.Значение
		|
		|//ЕстьОтборПоСкладу		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборСклад КАК ОтборСклад
		|//ЕстьОтборПоСкладу		ПО АналитикаВидаУчета.Склад = ОтборСклад.Значение
		|
		|ГДЕ
		|	АналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ИспользуемыеАналитикиВидаУчета
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		// Отбор по аналитике учета затрат нужен только если используется отбор по номенклатуре.
		// Сначала выберем ключи аналитики, по которым были остатки или обороты за период выгрузки себестоимости,
		// потом отберем только подходящие ключи по номенклатуре.
		Если СтруктураОтборов.Номенклатура Тогда
			
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	РегистрУчетаСебестоимости.АналитикаУчетаЗатрат КАК Ссылка
			|ПОМЕСТИТЬ ИспользуемыеАналитикиУчетаЗатрат
			|ИЗ
			|	РегистрНакопления.УчетЗатратРегл.ОстаткиИОбороты(&ДатаНачалаВыгрузки, &ДатаОкончанияВыгрузки, , , ) КАК РегистрУчетаСебестоимости
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АналитикаУчетаЗатрат.Ссылка КАК Значение
			|ПОМЕСТИТЬ ОтборАналитикаУчетаЗатрат
			|ИЗ
			|	РегистрСведений.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеАналитикиУчетаЗатрат КАК ИспользуемыеАналитикиУчетаЗатрат
			|		ПО АналитикаУчетаЗатрат.Ссылка = ИспользуемыеАналитикиУчетаЗатрат.Ссылка
			|
			|//ЕстьОтборПоНоменклатуре		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборНоменклатура КАК ОтборНоменклатура
			|//ЕстьОтборПоНоменклатуре		ПО АналитикаУчетаЗатрат.Затрата = ОтборНоменклатура.Значение
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИспользуемыеАналитикиУчетаЗатрат
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
		КонецЕсли;
		
		// Выберем остатки по периодам из регистра учета затрат.
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	РегистрУчетаСебестоимости.Период,
		|	РегистрУчетаСебестоимости.АналитикаВидаУчета,
		|	РегистрУчетаСебестоимости.АналитикаУчетаЗатрат,
		|	РегистрУчетаСебестоимости.КоличествоКонечныйОстаток КАК Количество,
		|	РегистрУчетаСебестоимости.СтоимостьКонечныйОстаток КАК Стоимость
		|ПОМЕСТИТЬ ОстаткиПоАналитикам
		|ИЗ
		|	РегистрНакопления.УчетЗатратРегл.ОстаткиИОбороты(
		|			&ДатаНачалаВыгрузки,
		|			&ДатаОкончанияВыгрузки,
		|			МЕСЯЦ,
		|			ДвиженияИГраницыПериода,
		|			АналитикаВидаУчета В (ВЫБРАТЬ ОтборАналитикаВидаУчета.Значение ИЗ ОтборАналитикаВидаУчета)
		|//ЕстьОтборПоНоменклатуре	И АналитикаУчетаЗатрат В (ВЫБРАТЬ ОтборАналитикаУчетаЗатрат.Значение ИЗ ОтборАналитикаУчетаЗатрат)
		|	) КАК РегистрУчетаСебестоимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоАналитикам.Период КАК Дата,
		|	СоответствияМагазиновИСкладов.КодМагазина КАК КодМагазина,
		|	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
		|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
		|	СУММА(ОстаткиПоАналитикам.Количество) КАК Количество,
		|	СУММА(ОстаткиПоАналитикам.Стоимость) КАК Стоимость
		|ИЗ
		|	ОстаткиПоАналитикам КАК ОстаткиПоАналитикам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствияМагазиновИСкладов КАК СоответствияМагазиновИСкладов
		|			ПО РегистрАналитикаВидаУчета.Склад = СоответствияМагазиновИСкладов.Склад
		|		ПО ОстаткиПоАналитикам.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
		|		ПО ОстаткиПоАналитикам.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыВыгрузкиСебестоимости КАК ДатыВыгрузкиСебестоимости
		|		ПО ОстаткиПоАналитикам.Период = ДатыВыгрузкиСебестоимости.Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоАналитикам.Период,
		|	СоответствияМагазиновИСкладов.КодМагазина,
		|	РегистрАналитикаУчетаЗатрат.Затрата,
		|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты
		|
		|ИМЕЮЩИЕ
		|	СУММА(ОстаткиПоАналитикам.Количество) > 0 И
		|	СУММА(ОстаткиПоАналитикам.Стоимость) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	КодМагазина,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|ИТОГИ ПО
		|	Дата ПЕРИОДАМИ(МЕСЯЦ, , ),
		|	КодМагазина
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Если выгружается упр. себестоимость, то поменяем в тексте запроса имя регистра.
		Если ВыгружатьСебестоимостьУпр Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УчетЗатратРегл", "УчетЗатрат");
		КонецЕсли;
		
	Иначе
		
		// Выберем остатки по периодам из регистра партий товаров на складах.
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	РегистрУчетаСебестоимости.Период,
		|	РегистрУчетаСебестоимости.Склад,
		|	РегистрУчетаСебестоимости.Номенклатура,
		|	РегистрУчетаСебестоимости.ХарактеристикаНоменклатуры,
		|	РегистрУчетаСебестоимости.КоличествоКонечныйОстаток КАК Количество,
		|	РегистрУчетаСебестоимости.СтоимостьКонечныйОстаток КАК Стоимость
		|ПОМЕСТИТЬ ОстаткиПоПартиям
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.ОстаткиИОбороты(
		|			&ДатаНачалаВыгрузки,
		|			&ДатаОкончанияВыгрузки,
		|			МЕСЯЦ,
		|			ДвиженияИГраницыПериода,
		|			Истина
		|//ЕстьОтборПоОрганизации	И Организация  В (ВЫБРАТЬ ОтборОрганизация.Значение  ИЗ ОтборОрганизация)
		|//ЕстьОтборПоСкладу		И Склад 	   В (ВЫБРАТЬ ОтборСклад.Значение 		 ИЗ ОтборСклад)
		|//ЕстьОтборПоНоменклатуре	И Номенклатура В (ВЫБРАТЬ ОтборНоменклатура.Значение ИЗ ОтборНоменклатура)
		|	) КАК РегистрУчетаСебестоимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоПартиям.Период КАК Дата,
		|	СоответствияМагазиновИСкладов.КодМагазина КАК КодМагазина,
		|	ОстаткиПоПартиям.Номенклатура,
		|	ОстаткиПоПартиям.ХарактеристикаНоменклатуры,
		|	СУММА(ОстаткиПоПартиям.Количество) КАК Количество,
		|	СУММА(ОстаткиПоПартиям.Стоимость) КАК Стоимость
		|ИЗ
		|	ОстаткиПоПартиям КАК ОстаткиПоПартиям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыВыгрузкиСебестоимости КАК ДатыВыгрузкиСебестоимости
		|		ПО ОстаткиПоПартиям.Период = ДатыВыгрузкиСебестоимости.Дата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствияМагазиновИСкладов КАК СоответствияМагазиновИСкладов
		|		ПО ОстаткиПоПартиям.Склад = СоответствияМагазиновИСкладов.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоПартиям.Период,
		|	СоответствияМагазиновИСкладов.КодМагазина,
		|	ОстаткиПоПартиям.Номенклатура,
		|	ОстаткиПоПартиям.ХарактеристикаНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	СУММА(ОстаткиПоПартиям.Количество) > 0 И
		|	СУММА(ОстаткиПоПартиям.Стоимость) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	КодМагазина,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|ИТОГИ ПО
		|	Дата ПЕРИОДАМИ(МЕСЯЦ, , ),
		|	КодМагазина
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Если выгружается упр. себестоимость, то поменяем в тексте запроса имя регистра.
		Если ВыгружатьСебестоимостьУпр Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПартииТоваровНаСкладахБухгалтерскийУчет", "ПартииТоваровНаСкладах");
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим требуемую периодичность выгрузки себестоимости.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МЕСЯЦ", СокрЛП(РеквизитыУзла.ПериодичностьПередачиСебестоимости));
	
	// "Включим" в тексте запроса отборы.
	Если НЕ ВыгружатьСебестоимостьУпр И СтруктураОтборов.Организация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕстьОтборПоОрганизации", "");
	КонецЕсли;
	Если СтруктураОтборов.Склад Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕстьОтборПоСкладу", "");
	КонецЕсли;
	Если СтруктураОтборов.Номенклатура Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕстьОтборПоНоменклатуре", "");
	КонецЕсли;
	
	// Выполним запрос и заполним возвращаемые функцией данные.
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСебестоимость = Новый ТаблицаЗначений;
	ТаблицаСебестоимость.Колонки.Добавить("Номенклатура");
	ТаблицаСебестоимость.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаСебестоимость.Колонки.Добавить("Цена");
	
	// Сначала обходим результат запроса по датам.
	ВыборкаПоДатам 				= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеСебестоимостьПоДатам 	= Новый Соответствие;
	
	Пока ВыборкаПоДатам.Следующий() Цикл
		
		// Затем - по кодам магазинов.
		ВыборкаПоМагазинам 			  = ВыборкаПоДатам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеСебестоимостьПоМагазинам = Новый Соответствие;
		
		Пока ВыборкаПоМагазинам.Следующий() Цикл

			// Затем - детальные записи по номенклатуре.
			ВыборкаДетальныеЗаписи = ВыборкаПоМагазинам.Выбрать();
			ТаблицаСебестоимость.Очистить();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				// Заполним строки таблицы себестоимости по номенклатуре.
				НоваяСтрока = ТаблицаСебестоимость.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
				НоваяСтрока.Цена = Окр(ВыборкаДетальныеЗаписи.Стоимость / ВыборкаДетальныеЗаписи.Количество, 2);
				
			КонецЦикла;
			
			// Заполним соответствие "Код магазина" - "Таблица себестоимости номенклатуры".
			ДанныеСебестоимостьПоМагазинам.Вставить(ВыборкаПоМагазинам.КодМагазина, ТаблицаСебестоимость.Скопировать());
			
		КонецЦикла;
		
		// Заполним соответствие "Дата себестоимости" - "Соответствие кода магазина и себестоимости номенклатуры".
		ДанныеСебестоимостьПоДатам.Вставить(ВыборкаПоДатам.Дата, ДанныеСебестоимостьПоМагазинам);
		
	КонецЦикла;
	
	Возврат ДанныеСебестоимостьПоДатам;
	
КонецФункции

// Формирует временные таблицы, используемые для отбора данных при выгрузке себестоимости номенклатуры.
// Возможно формирование следующих таблиц: ОтборОрганизация, ОтборСклад, ОтборНоменклатура
// Сформированные временные таблицы помещаются в МенеджерВременныхТаблиц
//
// Параметры
//	Узел - ПланОбменаСсылка.ОбменУправлениеПредприятиемРозничнаяТорговля - ссылка на узел обмена с 1С:Розница
//  МенеджерВременныхТаблиц - менеджер временных таблиц
//
// Возвращаемые значения
//	Структура, содержащая ключи
//		- Организация
//		- Склад
//		- Номенклатура
// 	Значения этих ключей (тип - булево) указывают на то, была ли сформирована соответствующая временная таблица.
//
Функция СформироватьВременныеТаблицыОтборовДляВыгрузкиСебестоимости(Узел, МенеджерВременныхТаблиц)
	
	СтруктураОтборов = Новый Структура("Организация, Склад, Номенклатура", Ложь, Ложь, Ложь);
	
	// Формирование временных таблиц для отборов, указанных в настройке обмена с РТ.
	// Если в настройке обмена используется отбор по Организация/Склад/Номенклатура, то
	//	- создаем соответствующую временную таблицу с префиксом "Отбор", например ОтборНоменклатура
	//		= в таблице должна быть только одна колонка с именем Значение
	//		= в этой колонке должны быть указаны элементы (не группы!) соответствующего справочника, по которым будет 
	//		  выполняться отбор для выгрузки себестоимости
	//	- устанавливаем соответствующий ключ в СтруктураОтборов в Истина
	// Временные таблицы помещаем в МенеджерВременныхТаблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаСкладов 		= ЗаполнитьТаблицуПоОтбору("Склады", "Склад", Узел.ОтборПоСкладам);
	ТаблицаНоменклатуры = ЗаполнитьТаблицуПоОтбору("Номенклатура", "Номенклатура", Узел.ОтборПоНоменклатуре);
	
	Запрос.Текст = "";
	
	Если Узел.Организации.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Значение
		|ПОМЕСТИТЬ ОтборОрганизация
		|ИЗ
		|	ПланОбмена.ОбменУправлениеПредприятиемРозничнаяТорговля.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &ЭтотУзел
		|;";
		Запрос.УстановитьПараметр("ЭтотУзел", Узел);
		СтруктураОтборов.Вставить("Организация", Истина);
	КонецЕсли;
	
	Если ТаблицаСкладов <> Неопределено И ТаблицаСкладов.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Таб.Склад КАК Значение
		|ПОМЕСТИТЬ ОтборСклад
		|ИЗ
		|	&ТаблицаСкладов КАК Таб
		|;";
		Запрос.УстановитьПараметр("ТаблицаСкладов", ТаблицаСкладов);
		СтруктураОтборов.Вставить("Склад", Истина);
	КонецЕсли;
	
	Если ТаблицаНоменклатуры <> Неопределено И ТаблицаНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Таб.Номенклатура КАК Значение
		|ПОМЕСТИТЬ ОтборНоменклатура
		|ИЗ
		|	&ТаблицаНоменклатуры КАК Таб
		|;";
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
		СтруктураОтборов.Вставить("Номенклатура", Истина);
	КонецЕсли;
	
	Если Запрос.Текст <> "" Тогда
		Запрос.Выполнить();
	КонецЕсли;
	
	Возврат СтруктураОтборов;
	
КонецФункции
