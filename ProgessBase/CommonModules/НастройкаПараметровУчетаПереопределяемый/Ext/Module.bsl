
#Если ТолстыйКлиентОбычноеПриложение Тогда

// В процедуре производится оформление колонок табличного поля истории значений
Процедура ОформитьДополнительныеКолонки(ФормаОбработки) Экспорт

	Если ФормаОбработки.ИмяТаблицыИсторииЗначений = "УчетнаяПолитикаНалоговыйУчет" Тогда
		
		ЕстьКолонкаНУ = НЕ ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.Найти("ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете") = Неопределено;
		
		ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.СистемаНалогообложения.ТекстШапки = "Система налогообложения";
		ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.СистемаНалогообложения.ЭлементУправления.Формат = "БЛ=Общая; БИ=Упрощенная";
		ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.СистемаНалогообложения.Формат = "БЛ=Общая; БИ=Упрощенная";
		
		Если ЕстьКолонкаНУ Тогда
			ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.Сдвинуть(ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, -2);
			ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете.Положение = ПоложениеКолонки.НаСледующейСтроке;
			ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете.ЭлементУправления.КнопкаОчистки = Ложь;
			ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете.АвтоОтметкаНезаполненного = Истина;
			ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете.ТекстШапки = "Учет расходов по налогам с ФОТ";
			ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете.ЭлементУправления.ШиринаСпискаВыбора = 40;
		КонецЕсли;
		
		ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ОбъектНалогообложенияУСН.ЭлементУправления.КнопкаОчистки = Ложь;
		ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ОбъектНалогообложенияУСН.АвтоОтметкаНезаполненного = Истина;
		ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.ОбъектНалогообложенияУСН.ТекстШапки = "Объект налогообложения УСН";
		
	КонецЕсли;

КонецПроцедуры

// В процедуре производится оформление ячеек табличного поля истории значений
Процедура ОформитьЯчейкиДополнительныхКолонк(ФормаОбработки, ОформлениеСтроки) Экспорт

	Если ФормаОбработки.ИмяТаблицыИсторииЗначений = "УчетнаяПолитикаНалоговыйУчет" Тогда
		
		ЕстьКолонкаНУ = НЕ ФормаОбработки.ЭлементыФормы.ТабличноеПоле.Колонки.Найти("ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете") = Неопределено;
		
		ЯчейкиУСНЗначение = ОформлениеСтроки.Ячейки.СистемаНалогообложения.Значение = Перечисления.СистемыНалогообложения.Упрощенная;
		ОформлениеСтроки.Ячейки.ОбъектНалогообложенияУСН.Видимость = ЯчейкиУСНЗначение;
		ОформлениеСтроки.Ячейки.ОбъектНалогообложенияУСН.ТолькоПросмотр = Не ЯчейкиУСНЗначение И НЕ ЕстьКолонкаНУ;
		Если ЕстьКолонкаНУ Тогда
			ОформлениеСтроки.Ячейки.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете.Видимость = Не ЯчейкиУСНЗначение;
		КонецЕсли;
		ОформлениеСтроки.Ячейки.УплачиватьДобровольныеВзносыВФСС.ТолькоПросмотр = Не ОформлениеСтроки.Ячейки.ОрганизацияЯвляетсяПлательщикомЕНВД.Значение и Не ЯчейкиУСНЗначение;
	
	КонецЕсли;

КонецПроцедуры

// Функция проверяет заполнение обязательных реквилитов в строках ТаблицаИсторииЗначений
Функция ТаблицаИсторииЗаполненаБезОшибок(ФормаОбработки, ТаблицаИсторииЗначений) Экспорт

	 //проверим заполнение данных
	Для каждого СтрокаТЗ Из ТаблицаИсторииЗначений Цикл
		Для каждого КолонкаТП Из ФормаОбработки.мКолонкиДляПроверки Цикл
			
			ДопУсловие = Истина;
			Если ФормаОбработки.ИмяТаблицыИсторииЗначений = "УчетнаяПолитикаНалоговыйУчет" Тогда
				СтрокаТЗУСН =  СтрокаТЗ.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
				ДопУсловие = ?(КолонкаТП = "ОбъектНалогообложенияУСН" и НЕ СтрокаТЗУСН, Ложь, ?(КолонкаТП = "ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете" и СтрокаТЗУСН, Ложь, Истина));
			КонецЕсли;	
				
			Если ДопУсловие и НЕ ЗначениеЗаполнено(СтрокаТЗ[КолонкаТП]) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не заполнены обязательные поля в таблице!");
				Возврат Ложь;
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;

	Возврат Истина;

КонецФункции // ТаблицаИсторииЗаполненаБезОшибок()

// Функция фомирует спискок доступных видов Тарифов страховых взносов
//
Функция ПолучитьСписокДоступныхТарифов(ФормаОбработки, ТекущиеДанные = Неопределено) Экспорт

	Если Не ТекущиеДанные = Неопределено Тогда
		УСН = ТекущиеДанные.УСН;
	Иначе
		УСН = ФормаОбработки.УСН;
	КонецЕсли;	
	
	СписокДляВыбора = Новый СписокЗначений;
	Если Не УСН Тогда
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.СельХозПроизводители);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ITОрганизации);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.СМИ);
	Иначе
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ITОрганизации);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.СМИ);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.НекоммерческиеОрганизации);
		СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.БлаготворительныеОрганизации);
	КонецЕсли;
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны);
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.УчастникПроектаИнновационныйЦентрСколково);
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.УчастникОсобойЗоныВКрыму);
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.РезидентПортаВладивосток);
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.РезидентТерриторииОпережающегоСоциальноЭкономическогоРазвития);
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов);
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ОрганизацииОказывающиеИнжиниринговыеУслуги);
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.ЕСХН);
	СписокДляВыбора.Добавить(Перечисления.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы);
	Возврат СписокДляВыбора;

КонецФункции // ПолучитьСписокДоступныхТарифов()

#КонецЕсли
