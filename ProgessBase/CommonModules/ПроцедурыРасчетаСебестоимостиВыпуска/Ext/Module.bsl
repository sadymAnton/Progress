
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция получает вид отражения в учете в зависимости от флажков документа.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Функция ПолучитьВидОтраженияВУчете(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете;
		
	КонецЕсли;
	
	Возврат ВидОтраженияВУчете;
	
КонецФункции // ПолучитьВидОтраженияВУчете()

// Определяет, следует ли заполнять оборотные субконто (статью затрат и подразделение) в проводках
// по данным учетной политики
Функция ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.Свойство("УчетнаяПолитика") Тогда
		// Учетная политика в структуре должна быть
		Возврат Ложь; 
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.Свойство("ЗаполнятьСтатьиИПодразделенияВПроводкахПриРаспределенииЗатрат") Тогда
		// В учетной политике регл. учета ресурс должен быть
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента.УчетнаяПолитика.ЗаполнятьСтатьиИПодразделенияВПроводкахПриРаспределенииЗатрат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ДВИЖЕНИЯМИ ОБЪЕКТА

// Функция получает наборы движений регистров.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтруктураИмен - Структура - Перечень необходимых регистров
//
// Возвращаемое значение:
//	Структура - Наборы движений по регистрам
//
Функция ПолучитьНаборыДвижений(
	СтруктураШапкиДокумента, 
	СтруктураИмен = Неопределено
	) Экспорт
	
	СтруктураДвижений = Новый Структура;
	
	ДокументОбъект = СтруктураШапкиДокумента.Ссылка.ПолучитьОбъект();
	Движения = ДокументОбъект.Движения;
	
	// Наборы движений по регистрам.
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвиженияВыпуск                   = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ВыпускПродукции"), 					Движения.ВыпускПродукции, Неопределено);
		ДвиженияЗатраты                  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Затраты"), 							Движения.Затраты, Неопределено);
		ДвиженияЗатратыОбороты           = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыОбороты"), 					Движения.ЗатратыОбороты, Неопределено);
		ДвиженияЗатратыНаВыпуск          = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукции"), 			Движения.ЗатратыНаВыпускПродукции, Неопределено);
		ДвиженияЗатратыНаВыпускНаработка = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукцииНаработка"), 	Движения.ЗатратыНаВыпускПродукцииНаработка, Неопределено);
		ДвиженияБракВПроизводстве        = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БракВПроизводстве"), 					Движения.БракВПроизводстве, Неопределено);
		ДвиженияНЗП		              	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("НезавершенноеПроизводство"), 			Движения.НезавершенноеПроизводство, Неопределено);
		ДвиженияПартии			         = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПартииТоваровНаСкладах"), 			Движения.ПартииТоваровНаСкладах, Неопределено);
		ДвиженияПродажиСебестоимость	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПродажиСебестоимость"), 				Движения.ПродажиСебестоимость, Неопределено);
		ДвиженияБазаРаспределенияЗатрат  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БазаРаспределенияЗатрат"), 			Движения.БазаРаспределенияЗатрат, Неопределено);
		
		ЗатратыНаСтроительствоОбъектовОсновныхСредств = 
			?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаСтроительствоОбъектовОсновныхСредств"), 
			Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств, Неопределено);
			
		СтроительствоОбъектовОсновныхСредств = 
			?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("СтроительствоОбъектовОсновныхСредств"), 
			Движения.СтроительствоОбъектовОсновныхСредств, Неопределено);
		
		Операция                         = Неопределено;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ДвиженияВыпуск                   = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ВыпускПродукции"),					Движения.ВыпускПродукцииБухгалтерскийУчет, Неопределено);
		ДвиженияЗатраты                  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Затраты"),							Движения.ЗатратыБухгалтерскийУчет, Неопределено);
		ДвиженияЗатратыНаВыпуск          = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукции"),			Движения.ЗатратыНаВыпускПродукцииБухгалтерскийУчет, Неопределено);
		ДвиженияЗатратыНаВыпускНаработка = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукцииНаработка"),	Движения.ЗатратыНаВыпускПродукцииНаработкаБухгалтерскийУчет, Неопределено);
		ДвиженияБракВПроизводстве        = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БракВПроизводстве"),					Движения.БракВПроизводствеБухгалтерскийУчет, Неопределено);
		ДвиженияНЗП		              	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("НезавершенноеПроизводство"),			Движения.НезавершенноеПроизводствоБухгалтерскийУчет, Неопределено);
		ДвиженияПартии			         = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПартииТоваровНаСкладах"),				Движения.ПартииТоваровНаСкладахБухгалтерскийУчет, Неопределено);
		ДвиженияБазаРаспределенияЗатрат  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БазаРаспределенияЗатрат"),			Движения.БазаРаспределенияЗатратБухгалтерскийУчет, Неопределено);
		
		ДвиженияЗатратыОбороты           = Неопределено;
		ДвиженияПродажиСебестоимость	 = Неопределено;
		
		ЗатратыНаСтроительствоОбъектовОсновныхСредств = Неопределено;
		СтроительствоОбъектовОсновныхСредств = Неопределено;
		
		Операция                         = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Операция"), 							Движения.Хозрасчетный, Неопределено);
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ДвиженияВыпуск                   = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ВыпускПродукции"), 					Движения.ВыпускПродукцииНалоговыйУчет, Неопределено);
		ДвиженияЗатраты                  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Затраты"), 							Движения.ЗатратыНалоговыйУчет, Неопределено);
		ДвиженияЗатратыНаВыпуск          = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукции"), 			Движения.ЗатратыНаВыпускПродукцииНалоговыйУчет, Неопределено);
		ДвиженияЗатратыНаВыпускНаработка = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукцииНаработка"), 	Движения.ЗатратыНаВыпускПродукцииНаработкаНалоговыйУчет, Неопределено);
		ДвиженияБракВПроизводстве        = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БракВПроизводстве"), 					Движения.БракВПроизводствеНалоговыйУчет, Неопределено);
		ДвиженияНЗП		              	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("НезавершенноеПроизводство"), 			Движения.НезавершенноеПроизводствоНалоговыйУчет, Неопределено);
		ДвиженияПартии			         = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПартииТоваровНаСкладах"), 			Движения.ПартииТоваровНаСкладахНалоговыйУчет, Неопределено);
		ДвиженияБазаРаспределенияЗатрат  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БазаРаспределенияЗатрат"), 			Движения.БазаРаспределенияЗатратНалоговыйУчет, Неопределено);
		
		ДвиженияЗатратыОбороты           = Неопределено;
		ДвиженияПродажиСебестоимость	 = Неопределено;
		
		ЗатратыНаСтроительствоОбъектовОсновныхСредств = Неопределено;
		СтроительствоОбъектовОсновныхСредств = Неопределено;
		
		Операция                         = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Операция"), 							Движения.Налоговый, Неопределено);
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		
		ДвиженияВыпуск            		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ВыпускПродукции"), 					Движения.ВыпускПродукцииМеждународныйУчет, Неопределено);
		ДвиженияЗатраты           		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Затраты"), 							Движения.ЗатратыМеждународныйУчет, Неопределено);
		ДвиженияЗатратыНаВыпуск   		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукции"),			Движения.ЗатратыНаВыпускПродукцииМеждународныйУчет, Неопределено);
		ДвиженияБракВПроизводстве 		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БракВПроизводстве"), 					Движения.БракВПроизводствеМеждународныйУчет, Неопределено);
		ДвиженияНЗП		       		  	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("НезавершенноеПроизводство"), 			Движения.НезавершенноеПроизводствоМеждународныйУчет, Неопределено);
		ДвиженияПартии			   		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПартииТоваровНаСкладах"), 			Движения.ПартииТоваровНаСкладахМеждународныйУчет, Неопределено);
		ДвиженияБазаРаспределенияЗатрат  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БазаРаспределенияЗатрат"), 			Движения.БазаРаспределенияЗатратМеждународныйУчет, Неопределено);
		
		ДвиженияЗатратыОбороты           = Неопределено;
		ДвиженияПродажиСебестоимость	 = Неопределено;
		
		ЗатратыНаСтроительствоОбъектовОсновныхСредств = Неопределено;
		СтроительствоОбъектовОсновныхСредств = Неопределено;
		
		Операция                  		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Операция"),							Движения.Международный, Неопределено);
		
	КонецЕсли;
	
	Если Операция <> Неопределено Тогда
		Операция.Очистить();
	КонецЕсли;
	
	СтруктураДвижений.Вставить("ДокументОбъект", 					ДокументОбъект);
	СтруктураДвижений.Вставить("ДвиженияВыпуск", 					ДвиженияВыпуск);
	СтруктураДвижений.Вставить("ДвиженияЗатраты", 					ДвиженияЗатраты);
	СтруктураДвижений.Вставить("ДвиженияЗатратыОбороты", 			ДвиженияЗатратыОбороты);
	СтруктураДвижений.Вставить("ДвиженияЗатратыНаВыпуск", 			ДвиженияЗатратыНаВыпуск);
	СтруктураДвижений.Вставить("ДвиженияЗатратыНаВыпускНаработка", 	ДвиженияЗатратыНаВыпускНаработка);
	СтруктураДвижений.Вставить("ДвиженияБракВПроизводстве", 		ДвиженияБракВПроизводстве);
	СтруктураДвижений.Вставить("ДвиженияНЗП", 						ДвиженияНЗП);
	СтруктураДвижений.Вставить("ДвиженияПартии", 					ДвиженияПартии);
	СтруктураДвижений.Вставить("ДвиженияПродажиСебестоимость", 		ДвиженияПродажиСебестоимость);
	СтруктураДвижений.Вставить("ДвиженияБазаРаспределенияЗатрат", 	ДвиженияБазаРаспределенияЗатрат);
	
	СтруктураДвижений.Вставить("ЗатратыНаСтроительствоОбъектовОсновныхСредств", ЗатратыНаСтроительствоОбъектовОсновныхСредств);
	СтруктураДвижений.Вставить("СтроительствоОбъектовОсновныхСредств", СтроительствоОбъектовОсновныхСредств);
	
	СтруктураДвижений.Вставить("Операция", 							Операция);
	// is ЯннуровВФ нач 20140609
	Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		СтруктураДвижений.Вставить("ДвиженияРасходыБудущихПериодов", Движения.ис_РасходыБудущихПериодовМеждународныйУчет);
	КонецЕсли;
	// is ЯннуровВФ кон 20140609
	Возврат СтруктураДвижений;
	
КонецФункции // ПолучитьНаборыДвижений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ БУХГАЛТЕРИИ

// Функция проверяет заполнение счета затрат и счета дебета выпуска продукции.
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//  СтрокаОбхода - ОбходРезультатаЗапроса - Текущая строка обхода результата запроса
//	Сумма - Число - сумма затрат на выпуск продукции. Используется для формирования сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетЗатратИСчетДебета(
	ВидОтраженияВУчете,
	СтрокаОбхода, 
	Сумма
	)
	
	ПроверкаПройдена = Истина;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		СчетДт = СтрокаОбхода.СчетДтНУ;
		СчетЗатрат = СтрокаОбхода.СчетЗатратНУ;
	Иначе
		СчетДт = СтрокаОбхода.СчетДт;
		СчетЗатрат = СтрокаОбхода.СчетЗатрат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетДт) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет дебета выпуска продукции (услуг):
		|Организация: " + СтрокаОбхода.Организация + "
		|Подразделение: " + СтрокаОбхода.Подразделение + "
		|Номенклатурная группа: " + СтрокаОбхода.НоменклатурнаяГруппа + "
		|Продукция: " + СтрокаОбхода.Продукция + ", " + 
			СтрокаОбхода.ХарактеристикаПродукции + ", " + 
			СтрокаОбхода.СерияПродукции + "
		|Заказ: " + СтрокаОбхода.Заказ + "
		|Спецификация: " + СтрокаОбхода.Спецификация + "
		|Код операции: " + СтрокаОбхода.КодОперации + "
		|Проводка по выпуску продукции (услуг) на сумму: " + Сумма + " не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет затрат выпуска продукции (услуг):
		|Организация: " + СтрокаОбхода.Организация + "
		|Подразделение: " + СтрокаОбхода.Подразделение + "
		|Номенклатурная группа: " + СтрокаОбхода.НоменклатурнаяГруппа + "
		|Продукция: " + СтрокаОбхода.Продукция + ", " + 
			СтрокаОбхода.ХарактеристикаПродукции + ", " + 
			СтрокаОбхода.СерияПродукции + "
		|Заказ: " + СтрокаОбхода.Заказ + "
		|Спецификация: " + СтрокаОбхода.Спецификация + "
		|Код операции: " + СтрокаОбхода.КодОперации + "
		|Проводка по выпуску продукции (услуг) на сумму: " + Сумма + " не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетЗатратИСчетДебета()

// Функция формирует содержание проводки по коду операции.
//
// Параметры
//  КодОперацииВыпускПродукции - Перечисления.КодыОперацийВыпускПродукции - Код операции выпуска
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки.
//
// Возвращаемое значение:
//   Строка – текст содержания проводки.
//
Функция ПолучитьСодержаниеПроводкиПоКодуОперации(КодОперацииВыпускПродукции, СоответствиеКодОперацииСодержание) Экспорт
	
	// Если соответствие не заполнено, произведем инициализацию.
	Если СоответствиеКодОперацииСодержание = Неопределено Тогда
		
		СоответствиеКодОперацииСодержание = Новый Соответствие;
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад,
			"Выпуск продукции на склад");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты,
			"Оказание услуг собственным подразделениям");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство,
			"Оказание услуг собственным подразделениям");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги,
			"Оказание услуг сторонним организациям");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет,
			"Списание выпущенной продукции на расходы производства");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч,
			"Списание материалов в производство сторно");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс,
			"Оприходование возвратных отходов");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч,
			"Распределение производственных расходов");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс,
			"Распределение производственных расходов");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП,
			"Списание НЗП");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс,
			"Списание НЗП");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП,
			"Излишки НПЗ, выявленные в результате инвентаризации");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости,
			"Оприходованы возвратные отходы");
			
	КонецЕсли;
	
	Содержание = СоответствиеКодОперацииСодержание.Получить(КодОперацииВыпускПродукции);
		
	Если Содержание = Неопределено Тогда
		Содержание = "";
		ОбщегоНазначения.СообщитьОбОшибке("Не определено содержание проводки для кода операции: """ + КодОперацииВыпускПродукции + """.
					|Процедура <ПолучитьСодержаниеПроводкиПоКодуОперации>");
	КонецЕсли;
		
	Возврат Содержание;

КонецФункции // ПолучитьСодержаниеПроводкиПоКодуОперации()

// Функция формирует содержание проводки по характеру затрат.
//
// Параметры
//  ХарактерЗатрат - Перечисления.ХарактерыЗатрат - Характер затрат
//
// Возвращаемое значение:
//   Строка – текст содержания проводки.
//
Функция ПолучитьСодержаниеПроводкиПоХарактеруЗатрат(ХарактерЗатрат)
	
	СодержаниеПроводки = "";
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
		СодержаниеПроводки = "Распределение общехозяйственных расходов";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		СодержаниеПроводки = "Распределение общепроизводственных расходов";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		СодержаниеПроводки = "Распределение расходов по браку в производстве";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		СодержаниеПроводки = "Распределение производственных расходов";	
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения Тогда
		СодержаниеПроводки = "Распределение издержек обращения";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы Тогда
		СодержаниеПроводки = "Распределение коммерческих расходов";
		
	ИначеЕсли ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПустаяСсылка() Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не определено содержание операции для характера затрат: """ + ХарактерЗатрат + """");
		
	КонецЕсли;
	
	Возврат СодержаниеПроводки;
	
КонецФункции

// Процедура формирует проводку по списанию производственных затрат на счет 40 "Выпуск продукции".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  Сумма - Число - Сумма проводки
//  ВидУчетаПоПБУ18 - ПеречислениеСсылка.ВидыУчетаПоПБУ18 - Вид учета по ПБУ18/02, для которого формируется проводка
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоСписаниюЗатратНа40Счет(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	Сумма,
	ВидУчетаПоПБУ18,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		СчетЗатрат = СтрокаВыборки.СчетЗатратНУ;
	Иначе
		СчетЗатрат = СтрокаВыборки.СчетЗатрат;
	КонецЕсли;
	
	// Проводка не формируется для операций оприходования, списания и корректировки НЗП.
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч 
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП
	Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	НоваяПроводка.Содержание = "Расчет фактической себестоимости";
														
	НоваяПроводка.Сумма = Сумма;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.ВыпускПродукции;
			
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		СчетДт = ПланыСчетов.Налоговый.ВыпускПродукции;
			
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Списание затрат на 40 счет используется только при отражении документа в бухгалтерском или налоговом учете!
			|Процедура <СформироватьПроводкуПоСписаниюЗатратНа40Счет>");
		СчетДт = СтрокаВыборки.СчетЗатрат;
	КонецЕсли;
														
	НоваяПроводка.СчетДт = СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Фактическая);
													
	НоваяПроводка.СчетКт = СчетЗатрат;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	
	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкуПоСписаниюЗатратНа40Счет()

// Процедура формирует проводку по выпуску продукции.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости".
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы.
//  ВидУчетаПоПБУ18 - ПеречислениеСсылка.ВидыУчетаПоПБУ18 - Вид учета по ПБУ18/02, для которого формируется проводка.
//  Сумма - Число - Сумма проводки.
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки.
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоВыпускуПродукции(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	ХарактерЗатрат,
	ВидУчетаПоПБУ18,
	Сумма,
	СоответствиеКодОперацииСодержание,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		СчетДт = СтрокаВыборки.СчетДтНУ;
		СчетЗатрат = СтрокаВыборки.СчетЗатратНУ;
	Иначе
		СчетДт = СтрокаВыборки.СчетДт;
		СчетЗатрат = СтрокаВыборки.СчетЗатрат;
	КонецЕсли;
	
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет
	Тогда
	
		Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад Тогда
			Содержание = ПолучитьСодержаниеПроводкиПоКодуОперации(СтрокаВыборки.КодОперации, СоответствиеКодОперацииСодержание);
		Иначе
			Содержание = "" + СтрокаВыборки.Продукция;
		КонецЕсли;
	
	    НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		НоваяПроводка.Содержание = Содержание;
	
		НоваяПроводка.Сумма = Сумма;
		НоваяПроводка.СчетДт = СчетДт;
		
		Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаВыборки.Продукция);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады", СтрокаВыборки.СкладПолучатель);
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы
			Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			
			Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
			   И ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
			Тогда
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДтНУ1);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДтНУ2);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДтНУ3);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
			КонецЕсли;
			
		ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги Тогда	
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не определено заполнение субконто в проводке по счету: """ + СтрокаВыборки.СчетДт + """.
			|Процедура <СформироватьПроводкуПоВыпускуПродукции>");
			
		КонецЕсли;
			
		Если СтруктураШапкиДокумента.ВариантУчетаВыпускаГотовойПродукции = Перечисления.ВариантыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40 Тогда
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
				СчетКт = ПланыСчетов.Хозрасчетный.ВыпускПродукции;
			
			ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
				СчетКт = ПланыСчетов.Налоговый.ВыпускПродукции;
				
			Иначе
				СчетКт = СчетЗатрат;
				
			КонецЕсли;
			
		Иначе
			СчетКт = СчетЗатрат;
		КонецЕсли;
				
		НоваяПроводка.СчетКт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ВариантУчетаВыпускаГотовойПродукции = Перечисления.ВариантыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40 Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Отклонение);
		КонецЕсли;
		
		Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
		 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
			НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
			НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		КонецЕсли;
		
	// Формирование проводки для операций корректировки и списания незавершенного производства.	
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч
		  ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс
		  ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП
		  ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс
		Тогда
		
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		НоваяПроводка.Содержание = ПолучитьСодержаниеПроводкиПоКодуОперации(СтрокаВыборки.КодОперации, СоответствиеКодОперацииСодержание);
	
		НоваяПроводка.Сумма = Сумма;
		НоваяПроводка.СчетДт = СчетДт;
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы
		Тогда
		
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не определено заполнение субконто в проводке по счету: """ + СтрокаВыборки.СчетДт + """.
			|Для кода операции: " + СтрокаВыборки.КодОперации + "
			|Процедура <СформироватьПроводкуПоВыпускуПродукции>");
			
		КонецЕсли;
		  
		НоваяПроводка.СчетКт = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПоВозврату);
		
		Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
		 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
			НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
			НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		КонецЕсли;
		
	// Формирование проводки для операции оприходования	незавершенного производства.
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
	
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		НоваяПроводка.Содержание = ПолучитьСодержаниеПроводкиПоКодуОперации(СтрокаВыборки.КодОперации, СоответствиеКодОперацииСодержание);
		
		НоваяПроводка.Сумма = Сумма;
		
		НоваяПроводка.СчетДт = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеПолучатель);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
		
		НоваяПроводка.СчетКт = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1, СтрокаВыборки.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 2, СтрокаВыборки.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 3, СтрокаВыборки.СубконтоДт3);
		
		Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
		 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
			НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
			НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		КонецЕсли;
		
	// Формирование проводки "красным" для операции возврата материалов из производства.
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс Тогда
		
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		НоваяПроводка.Содержание = ПолучитьСодержаниеПроводкиПоКодуОперации(СтрокаВыборки.КодОперации, СоответствиеКодОперацииСодержание);
		
		НоваяПроводка.Сумма = - Сумма;
	 
		НоваяПроводка.СчетДт = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
		
		НоваяПроводка.СчетКт = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаВыборки.Продукция);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", СтрокаВыборки.СкладПолучатель);
		
		Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
		 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
			НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
			НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		КонецЕсли;
		
	// Выдача сообщения об ошибке по коду операции, который не предусмотрен в процедуре.
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не сформирована проводка по коду операции: """ + СтрокаВыборки.КодОперации + """.
			|Процедура <СформироватьПроводкуПоВыпускуПродукции>");
		
	КонецЕсли;
		
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
 	
КонецПроцедуры // СформироватьПроводкуПоВыпускуПродукции()

// Процедура формирует движения по регистру бухгалтерии.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СуммаЗатрат - Число - Полная сумма затрат на выпуск продукции
//  СуммаКорректировки - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца
//  СуммаЗатратПостояннаяРазница - Число - Полная сумма затрат на выпуск продукции в части постоянной разницы
//  СуммаКорректировкиПостояннаяРазница - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца,
//		в части постоянной разницы
//  СуммаЗатратВременнаяРазница - Число - Полная сумма затрат на выпуск продукции в части временной разницы
//  СуммаКорректировкиВременнаяРазница - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца,
//		в части временной разницы
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	СуммаЗатрат,
	СуммаКорректировки,
	СуммаЗатратПостояннаяРазница,
	СуммаКорректировкиПостояннаяРазница,
	СуммаЗатратВременнаяРазница,
	СуммаКорректировкиВременнаяРазница,
	ХарактерЗатрат,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	СоответствиеКодОперацииСодержание,
	РегистрБухгалтерииНаборЗаписей
	) Экспорт
	
	Если СуммаЗатрат = 0
	   И СуммаКорректировки = 0
	   И СуммаЗатратПостояннаяРазница = 0
	   И СуммаКорректировкиПостояннаяРазница = 0
	   И СуммаЗатратВременнаяРазница = 0
	   И СуммаКорректировкиВременнаяРазница = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// При УСН формировать проводки по налоговому учету не требуется
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете 
		И (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим заполнение счета дебета и счета затрат.
	ПроверкаПройдена = ПроверитьСчетЗатратИСчетДебета(
		ВидОтраженияВУчете,
		СтрокаВыборки, 
		СуммаКорректировки
	);
	Если Не ПроверкаПройдена Тогда
		Возврат;
	КонецЕсли;
	
	Если КосвенныеЗатраты ИЛИ ЗатратыВстречногоВыпуска Тогда
		СуммаСписанияНа40счет = СуммаКорректировки;
		ПостояннаяРазницаСписанияНа40счет = СуммаКорректировкиПостояннаяРазница;
		ВременнаяРазницаСписанияНа40счет = СуммаКорректировкиВременнаяРазница;
	Иначе
		СуммаСписанияНа40счет = СуммаЗатрат;
		ПостояннаяРазницаСписанияНа40счет = СуммаЗатратПостояннаяРазница;
		ВременнаяРазницаСписанияНа40счет = СуммаЗатратВременнаяРазница;
	КонецЕсли;
			
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		 
		 // Сформируем проводку по списанию затрат на 40 счет.
		// Проводка не формируется для операций оприходования, списания и корректировки НЗП.
		Если СтруктураШапкиДокумента.ВариантУчетаВыпускаГотовойПродукции 
			= Перечисления.ВариантыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40 Тогда
			   
		   СформироватьПроводкуПоСписаниюЗатратНа40Счет(
				СтруктураШапкиДокумента,
				ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаСписанияНа40счет,
				Неопределено, // ВидУчетаПоПБУ18
				РегистрБухгалтерииНаборЗаписей
			);
				
		КонецЕсли;
		 
		СформироватьПроводкуПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			СтрокаВыборки,
			ХарактерЗатрат,
			Неопределено, // ВидУчетаПоПБУ18
			СуммаКорректировки,
			СоответствиеКодОперацииСодержание,
			РегистрБухгалтерииНаборЗаписей
		);
			
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			
		// Сформируем проводку по списанию затрат на 40 счет.
		Если СтруктураШапкиДокумента.ВариантУчетаВыпускаГотовойПродукции
			= Перечисления.ВариантыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40 Тогда
			   
			СформироватьПроводкуПоСписаниюЗатратНа40Счет(
				СтруктураШапкиДокумента,
				ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаСписанияНа40счет,
				Перечисления.ВидыУчетаПоПБУ18.НУ,
				РегистрБухгалтерииНаборЗаписей
			);
				
			СформироватьПроводкуПоСписаниюЗатратНа40Счет(
				СтруктураШапкиДокумента,
				ВидОтраженияВУчете,
				СтрокаВыборки,
				ПостояннаяРазницаСписанияНа40счет,
				Перечисления.ВидыУчетаПоПБУ18.ПР,
				РегистрБухгалтерииНаборЗаписей
			);
				
			СформироватьПроводкуПоСписаниюЗатратНа40Счет(
				СтруктураШапкиДокумента,
				ВидОтраженияВУчете,
				СтрокаВыборки,
				ВременнаяРазницаСписанияНа40счет,
				Перечисления.ВидыУчетаПоПБУ18.ВР,
				РегистрБухгалтерииНаборЗаписей
			);
				
		КонецЕсли;
			
		СформироватьПроводкуПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			СтрокаВыборки,
			ХарактерЗатрат,
			Перечисления.ВидыУчетаПоПБУ18.НУ,
			СуммаКорректировки,
			СоответствиеКодОперацииСодержание,
			РегистрБухгалтерииНаборЗаписей
		);
		СформироватьПроводкуПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			СтрокаВыборки,
			ХарактерЗатрат,
			Перечисления.ВидыУчетаПоПБУ18.ПР,
			СуммаКорректировкиПостояннаяРазница,
			СоответствиеКодОперацииСодержание,
			РегистрБухгалтерииНаборЗаписей
		);
		СформироватьПроводкуПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			СтрокаВыборки,
			ХарактерЗатрат,
			Перечисления.ВидыУчетаПоПБУ18.ВР,
			СуммаКорректировкиВременнаяРазница,
			СоответствиеКодОперацииСодержание,
			РегистрБухгалтерииНаборЗаписей
		);
				
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
			
		СформироватьПроводкуПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			СтрокаВыборки,
			ХарактерЗатрат,
			Неопределено, // ВидУчетаПоПБУ18
			СуммаКорректировки,
			СоответствиеКодОперацииСодержание,
			РегистрБухгалтерииНаборЗаписей
		);
			
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАКРЫТИЯ СЧЕТОВ КОСВЕННЫХ РАСХОДОВ ПО НАЛОГОВОМУ УЧЕТУ

// Процедура формирует проводку по закрытию счетов косвенных расходов.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СчетУчета - ПланСчетовСсылка.Налоговый - Счет учета затрат
//  ВидУчетаПоПБУ18 - ПеречислениеСсылка.ВидыУчетаПоПБУ18 - Вид учета по ПБУ18/02, для которого формируется проводка
//  Сумма - Число - Сумма проводки
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоЗакрытиюСчетовКосвенныхРасходов(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетУчета,
	ВидУчетаПоПБУ18,
	Сумма,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	
	НоваяПроводка.Содержание = "Закрытие счетов косвенных расходов";
	НоваяПроводка.Сумма = Сумма;
	
	Если СтрокаВыборки.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) 
	 ИЛИ СтрокаВыборки.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу
	Тогда
		СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
	Иначе
		СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
	КонецЕсли;
	
	НоваяПроводка.СчетДт = СчетДт;
	НоваяПроводка.СчетКт = СчетУчета;
										
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	КонецЕсли;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);
	
 	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		
	ИначеЕсли СтрокаВыборки.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
		
		НоваяПроводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
		НоваяПроводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
		
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкуПоЗакрытиюСчетовКосвенныхРасходов()

// Процедура формирует движения по регистру бухгалтерии.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СчетУчета - ПланСчетовСсылка.Налоговый - Счет учета затрат
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииЗакрытиеКосвенныхРасходов(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетУчета,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	РегистрБухгалтерииНаборЗаписей
	) Экспорт
	
	// Закрытие косвенных расходов в части НУ.
	СформироватьПроводкуПоЗакрытиюСчетовКосвенныхРасходов(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		СчетУчета,
		Перечисления.ВидыУчетаПоПБУ18.НУ,
		Сумма,
		РегистрБухгалтерииНаборЗаписей
	);
	
	Если Не СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;
			
	// Закрытие косвенных расходов в части постоянной разницы.
	СформироватьПроводкуПоЗакрытиюСчетовКосвенныхРасходов(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		СчетУчета,
		Перечисления.ВидыУчетаПоПБУ18.ПР,
		ПостояннаяРазница,
		РегистрБухгалтерииНаборЗаписей
	);
	
	// Закрытие косвенных расходов в части временной разницы.
	СформироватьПроводкуПоЗакрытиюСчетовКосвенныхРасходов(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		СчетУчета,
		Перечисления.ВидыУчетаПоПБУ18.ВР,
		ВременнаяРазница,
		РегистрБухгалтерииНаборЗаписей
	);
			
КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииЗакрытиеКосвенныхРасходов

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ОТНЕСЕНИЯ НЕРАСПРЕДЕЛЕННЫХ ЗАТРАТ НА РАСХОДЫ БУДУЩИХ ПЕРИОДОВ

// Функция создает новый элемент справочника "Расходы будущих периодов".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  Сумма - Число - Сумма затрат
//
// Возвращаемое значение:
//	СправочникСсылка.РасходыБудущихПериодов - Элемент расходов будущих периодов
//
Функция СоздатьЭлементРасходовБудущихПериодов(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатрат,
	Сумма
	) Экспорт
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
		НаименованиеРБП = "ОХР";
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		НаименованиеРБП = "ОПР";
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		НаименованиеРБП = "ПР";
	Иначе
		НаименованиеРБП = "";
	КонецЕсли;
	НаименованиеРБП = НаименованиеРБП + " за " + 
		ПредставлениеПериода(СтруктураШапкиДокумента.мНачДата, СтруктураШапкиДокумента.мКонДата);
	
	ДатаНачалаСписания = НачалоДня(ДобавитьМесяц(СтруктураШапкиДокумента.мНачДата, 1));
	ДатаОкончанияСписания = НачалоДня(ДобавитьМесяц(СтруктураШапкиДокумента.мКонДата, 1));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|
	|ГДЕ
	|	РасходыБудущихПериодов.ПодразделениеОрганизации = &ПодразделениеОрганизации
	|	И РасходыБудущихПериодов.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|	И РасходыБудущихПериодов.ДатаНачалаСписания = &ДатаНачалаСписания
	|	И РасходыБудущихПериодов.ДатаОкончанияСписания = &ДатаОкончанияСписания
	|	И РасходыБудущихПериодов.СтатьяЗатрат = &СтатьяЗатрат
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", СтрокаВыборки.Подразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатрат);
	Запрос.УстановитьПараметр("ДатаНачалаСписания", ДатаНачалаСписания);
	Запрос.УстановитьПараметр("ДатаОкончанияСписания", ДатаОкончанияСписания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СправочникОбъектРБП = Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
		СправочникОбъектРБП.Наименование = НаименованиеРБП;
		
		СправочникОбъектРБП.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппа;
		СправочникОбъектРБП.ПодразделениеОрганизации = СтрокаВыборки.Подразделение;
		СправочникОбъектРБП.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
		СправочникОбъектРБП.ДатаНачалаСписания = ДатаНачалаСписания;
		СправочникОбъектРБП.ДатаОкончанияСписания = ДатаОкончанияСписания;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СправочникОбъектРБП = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	//начало изменений Ожиганов 20.05.2016 52690 заполнение значения Вид РБП МСФО - прочее 
	СправочникОбъектРБП.ПРГ_ВидыРБПМСФО = Перечисления.ПРГ_ВидыРБПМСФО.Прочее;
	//конец изменений 
	СправочникОбъектРБП.ВидРБП = Перечисления.ВидыРБП.Прочие;
	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СправочникОбъектРБП.СчетБУ = СтрокаВыборки.СчетУчета;
	КонецЕсли;	

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СправочникОбъектРБП.СчетНУ =СтрокаВыборки.СчетУчета;
	Иначе
		СправочникОбъектРБП.СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаВыборки.СчетУчета));
	КонецЕсли;	
		
	СправочникОбъектРБП.Сумма = Сумма;
	
	СправочникОбъектРБП.Записать();
	
	Возврат СправочникОбъектРБП.Ссылка;
	
КонецФункции // СоздатьЭлементРасходовБудущихПериодов()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО СПОСОБАМ РАСПРЕДЕЛЕНИЯ И ОТБОРА РЕЗУЛЬТАТА ЗАПРОСА

// Процедура формирует временную таблицу "СпособыРаспределения".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьВременнуюТаблицуСпособыРаспределенияРасширеннаяАналитика(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц
	) 
	
	ТекстЗапросаСКомментариями =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетЗатратОстатки.АналитикаВидаУчета 	КАК АналитикаВидаУчета,
	|	УчетЗатратОстатки.АналитикаУчетаЗатрат 	КАК АналитикаУчетаЗатрат
	|ПОМЕСТИТЬ ТаблицаИспользуемыхКлючей
	|
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&НачГраница, ) КАК УчетЗатратОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат
	|
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|ГДЕ
	|	УчетЗатрат.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УчетЗатрат.Активность
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	УчетЗатрат.КорАналитикаВидаУчета,
	|	УчетЗатрат.КорАналитикаУчетаЗатрат
	|
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|ГДЕ
	|	УчетЗатрат.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УчетЗатрат.Активность
	|	И УчетЗатрат.КорАналитикаВидаУчета ССЫЛКА Справочник.КлючиАналитикиВидаУчета
	|;
	|/////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИспользуемыхКлючей.АналитикаВидаУчета	               КАК АналитикаВидаУчета,
	|	ТаблицаИспользуемыхКлючей.АналитикаУчетаЗатрат                 КАК АналитикаУчетаЗатрат,
	|	//ДляУпрУчета КлючАналитикаВидаУчета.Подразделение             КАК Подразделение,
	|	//ДляРеглУчета КлючАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	|	//ДляРеглУчета КлючАналитикаВидаУчета.СчетУчета                КАК СчетУчета,
	|	КлючАналитикаУчетаЗатрат.СтатьяЗатрат                          КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ТаблицаПодходящихКлючей
	|
	|ИЗ
	|	ТаблицаИспользуемыхКлючей КАК ТаблицаИспользуемыхКлючей
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК КлючАналитикаВидаУчета
	|	ПО
	|		ТаблицаИспользуемыхКлючей.АналитикаВидаУчета 		= КлючАналитикаВидаУчета.Ссылка
	|		И КлючАналитикаВидаУчета.РазделУчета 				= ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|		//ДляУпрУчета И КлючАналитикаВидаУчета.СчетУчета 	= ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		//ДляРеглУчета И КлючАналитикаВидаУчета.Организация = &Организация
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК КлючАналитикаУчетаЗатрат
	|	ПО
	|		ТаблицаИспользуемыхКлючей.АналитикаУчетаЗатрат 		= КлючАналитикаУчетаЗатрат.Ссылка
	|		И КлючАналитикаУчетаЗатрат.СтатьяЗатрат 			<> ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат,
	|	Подразделение
	|	//ДляРеглУчета ,СчетУчета
	|;
	|/////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаИспользуемыхКлючей
	|;
	|/////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыРаспределения.СтатьяЗатрат 															КАК СтатьяЗатрат,
	|	СпособыРаспределения.Подразделение 															КАК Подразделение,
	|	//ДляРеглУчета СпособыРаспределения.СчетЗатрат 												КАК СчетЗатрат,
	|	ЕСТЬNULL(
	|		СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения,
	|		ЛОЖЬ) 																					КАК РаспределятьНаПодчиненныеПодразделения,
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат 											КАК ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат 												КАК СпособРаспределенияЗатрат,
	|	СпособыРаспределения.НеРаспределять 														КАК НеРаспределять,
	|	СпособыРаспределения.Период 																КАК Период
	|ПОМЕСТИТЬ СпособыРаспределенияСрезПоследних
	|
	|ИЗ
	|	РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|		//ДляРеглУчета Организация = &Организация 
	|	) КАК СпособыРаспределения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат,
	|	Подразделение
	|	//ДляРеглУчета ,СчетЗатрат
	|;
	|/////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПодходящихКлючей.АналитикаВидаУчета 													КАК АналитикаВидаУчета,
	|	ТаблицаПодходящихКлючей.АналитикаУчетаЗатрат 												КАК АналитикаУчетаЗатрат,
	|
	|	СпособыРаспределения.СтатьяЗатрат 															КАК СтатьяЗатрат,
	|	ЕСТЬNULL(ТаблицаПодходящихКлючей.Подразделение, СпособыРаспределения.Подразделение) 		КАК Подразделение,
	|	//ДляРеглУчета ЕСТЬNULL(ТаблицаПодходящихКлючей.СчетУчета, СпособыРаспределения.СчетЗатрат) КАК СчетЗатрат,
	|	
	|	СпособыРаспределения.РаспределятьНаПодчиненныеПодразделения 								КАК РаспределятьНаПодчиненныеПодразделения,
	|	
	|	ВЫБОР
	|		КОГДА ТаблицаПодходящихКлючей.Подразделение <> СпособыРаспределения.Подразделение
	|			//ДляУпрУчета И СпособыРаспределения.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета И СпособыРаспределения.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ 																						КАК ЭтоСпособРаспределенияРодителя,
	|		
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат 											КАК ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат 												КАК СпособРаспределенияЗатрат,
	|	СпособыРаспределения.НеРаспределять 														КАК НеРаспределять,
	|	СпособыРаспределения.Период 																КАК Период
	|ПОМЕСТИТЬ СпособыРаспределения%СуффиксУчета%
	|
	|ИЗ
	|	СпособыРаспределенияСрезПоследних КАК СпособыРаспределения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаПодходящихКлючей КАК ТаблицаПодходящихКлючей
	|	ПО
	|		СпособыРаспределения.СтатьяЗатрат = ТаблицаПодходящихКлючей.СтатьяЗатрат
	|		И (
	|			(
	|			//ДляУпрУчета СпособыРаспределения.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета СпособыРаспределения.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ИЛИ СпособыРаспределения.Подразделение = ТаблицаПодходящихКлючей.Подразделение
	|			ИЛИ СпособыРаспределения.РаспределятьНаПодчиненныеПодразделения
	|			И 
	|				(СпособыРаспределения.Подразделение 	 = ТаблицаПодходящихКлючей.Подразделение.Родитель
	|				  ИЛИ СпособыРаспределения.Подразделение = ТаблицаПодходящихКлючей.Подразделение.Родитель.Родитель
	|				  ИЛИ СпособыРаспределения.Подразделение = ТаблицаПодходящихКлючей.Подразделение.Родитель.Родитель.Родитель)
	|			)
	|		//ДляРеглУчета 	И (СпособыРаспределения.СчетЗатрат 		= ТаблицаПодходящихКлючей.СчетУчета
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ТаблицаПодходящихКлючей.СчетУчета.Родитель
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ТаблицаПодходящихКлючей.СчетУчета.Родитель.Родитель
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ТаблицаПодходящихКлючей.СчетУчета.Родитель.Родитель.Родитель)
	|		  )
	|;
	|/////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаПодходящихКлючей
	|;
	|/////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ СпособыРаспределенияСрезПоследних";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапросаСКомментариями, ВидОтраженияВУчете);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст 					= ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачГраница", 	СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", 	СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("ДатаНачала", 	СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("ДатаОкончания", 	СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
		
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьВременнуюТаблицуСпособыРаспределенияРасширеннаяАналитика()

// Процедура формирует временную таблицу "СпособыРаспределения".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьВременнуюТаблицуСпособыРаспределения(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц
	) 
	
	//начало изменений оптим
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете или 
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете	
	Тогда
		 ПРГ_РасчетСебестоимости.ПРГ_СформироватьВременнуюТаблицуСпособыРаспределения(
		 	СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			МенеджерВременныхТаблиц);
		возврат;
	КонецЕсли;	
		
	//конец изменений
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыРаспределения.СтатьяЗатрат,
	|	ЕСТЬNULL(Подразделения.Подразделение, СпособыРаспределения.Подразделение) КАК Подразделение,
	|	//ДляБухУчета ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.СчетЗатрат) КАК СчетЗатрат,
	|	//ДляНалУчета ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.СчетЗатратНУ) КАК СчетЗатрат,
	// is ЯннуровВФ нач 20141117
	//|	//ДляМеждУчета ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.СчетЗатрат) КАК СчетЗатрат,
	|	//ДляМеждУчета ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.ДС_СчетЗатратМСФО) КАК СчетЗатрат,
	// is ЯннуровВФ кон 20141117
	|	ЕСТЬNULL(
	|		СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения,
	|		Ложь
	|		) КАК РаспределятьНаПодчиненныеПодразделения,
	|	
	|	ВЫБОР КОГДА Подразделения.Подразделение <> СпособыРаспределения.Подразделение
	|		И СпособыРаспределения.Подразделение <>
	|			//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ЭтоСпособРаспределенияРодителя,
	|		
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат,
	|	СпособыРаспределения.НеРаспределять,
	|	СпособыРаспределения.Период
	|	
	|ПОМЕСТИТЬ СпособыРаспределения%СуффиксУчета%
	|ИЗ
	|	РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|		//ДляРеглУчета Организация = &Организация 
	|	) КАК СпособыРаспределения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Подразделения.Родитель КАК Родитель,
	|			Подразделения.Ссылка КАК Подразделение
	|		ИЗ
	|			//ДляУпрУчета 	Справочник.Подразделения КАК Подразделения
	|			//ДляРеглУчета 	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		
	|		//ДляРеглУчета 	ГДЕ
	|		//ДляРеглУчета 		Подразделения.Владелец = &Организация
	|		) КАК Подразделения
	|	ПО
	|		СпособыРаспределения.Подразделение = 
	|			//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИЛИ (СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|			И 
	|			(СпособыРаспределения.Подразделение = Подразделения.Подразделение
	|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель
	|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель
	|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель.Родитель)
	|			)
	|			
	|	//ДляРеглУчета 	ЛЕВОЕ СОЕДИНЕНИЕ (
	|	//ДляРеглУчета 		ВЫБРАТЬ
	|	//ДляРеглУчета 			ПланСчетов.Ссылка КАК Счет
	|	//ДляРеглУчета 		ИЗ
	|	//ДляРеглУчета 			ПланСчетов.%ИмяПланаСчетов% КАК ПланСчетов
	|	//ДляРеглУчета 		ГДЕ
	|	//ДляРеглУчета 			ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|	//ДляРеглУчета 		) КАК ПланСчетов
	|	//ДляРеглУчета 	ПО
	|		//ДляБухУчета 	СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет
	|		//ДляБухУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель
	|		//ДляБухУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель
	|		//ДляБухУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель.Родитель
	|		
	|		//ДляНалУчета 	СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Счет
	|		//ДляНалУчета 		ИЛИ СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Счет.Родитель
	|		//ДляНалУчета 		ИЛИ СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Счет.Родитель.Родитель
	|		//ДляНалУчета 		ИЛИ СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Счет.Родитель.Родитель.Родитель
	|		
	// is ЯннуровВФ нач 20141117
	//|		//ДляМеждУчета 	СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет
	//|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель
	//|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель
	//|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель.Родитель
	|		//ДляМеждУчета 	СпособыРаспределения.ДС_СчетЗатратМСФО = ПланСчетов.Счет
	|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.ДС_СчетЗатратМСФО = ПланСчетов.Счет.Родитель
	|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.ДС_СчетЗатратМСФО = ПланСчетов.Счет.Родитель.Родитель
	|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.ДС_СчетЗатратМСФО = ПланСчетов.Счет.Родитель.Родитель.Родитель
	// is ЯннуровВФ кон 20141117
	//начало изменений оптим р/с
	|ИНДЕКСИРОВАТЬ ПО
	|       СтатьяЗатрат,
	|       Подразделение,
	|        //ДляБухУчета СчетЗатрат,
	|        //ДляНалУчета СчетЗатрат,
	|        //ДляМеждУчета СчетЗатрат,
	|           Период	
	//конец изменений
    |";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		МассивСчетовЗатрат = Новый Массив;
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		// is ЯннуровВФ нач 2014114 Не туда вставили
		////начало изменений ДС МСФО 03.12.2013
		////МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ВспомогательноеПроизводство);
		////конец изменений ДС МСФО 03.12.2013
		//// is ЯннуровВФ нач 20141015
		//МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ВспомогательныеПроизводства);
		//// is ЯннуровВФ кон 20141015
		// is ЯннуровВФ кон 2014114

		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		МассивСчетовЗатрат = Новый Массив;
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.БракВПроизводстве);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство_);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбслуживающиеПроизводства);
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
		МассивСчетовЗатрат = Новый Массив;
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.БракВПроизводстве);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОсновноеПроизводство);
		//начало изменений ДС МСФО 03.12.2013
		//МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ВспомогательноеПроизводство);
		//конец изменений ДС МСФО 03.12.2013
		// is ЯннуровВФ нач 2014114 Изменения от 20141015
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ВспомогательныеПроизводства);
		// is ЯннуровВФ кон 20141114
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОбслуживающиеПроизводства);
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьВременнуюТаблицуСпособыРаспределения()

// Функция формирует текст запроса по регистру сведений "Способы распределения статей затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоСпособамРаспределенияЗатратРасширеннаяАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыРаспределения.СтатьяЗатрат,
	|	СпособыРаспределения.Подразделение,
	|	//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|	
	|	СпособыРаспределения.АналитикаВидаУчета,
	|	СпособыРаспределения.АналитикаУчетаЗатрат,
	|	
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	СпособыРаспределения.РаспределятьНаПодчиненныеПодразделения,
	|	
	|	СпособыРаспределения.ЭтоСпособРаспределенияРодителя,
	|	
	|	//ДляРеглУчета	ВЫБОР КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы)
	|	//ДляНалУчета		ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОбщехозяйственныеРасходы)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОбщепроизводственныеРасходы)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ОбщехозяйственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ ( 
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.%ИмяПланаСчетов%.ОбщепроизводственныеРасходы)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ОбщепроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.%ИмяПланаСчетов%.БракВПроизводстве)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.БракВПроизводстве)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство_)
	|	//ДляНалУчета		ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОсновноеПроизводство)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства)
	|	//ДляНалУчета		ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства)
	//начало изменений ДС МСФО 03.12.2013
	//|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ВспомогательноеПроизводство)
	//конец изменений ДС МСФО 03.12.2013
	// is ЯннуровВФ нач 20141015
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ВспомогательныеПроизводства)
	// is ЯннуровВФ кон 20141015
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.%ИмяПланаСчетов%.ОбслуживающиеПроизводства)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета 		СпособыРаспределения.СтатьяЗатрат.ХарактерЗатрат
	|	//ДляРеглУчета 	КОНЕЦ КАК ХарактерЗатрат,
	|	
	|	СпособыРаспределения.НеРаспределять
	|	
	|//Поместить ПОМЕСТИТЬ РаспределяемыеСтатьиЗатрат%СуффиксУчета%
	|ИЗ 
	|	СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.АналитикаВидаУчета,
	|			СпособыРаспределения.АналитикаУчетаЗатрат,
	|			СпособыРаспределения.ЭтоСпособРаспределенияРодителя,
	|			МАКСИМУМ(СпособыРаспределения.Период) КАК Период
	|		ИЗ 
	|			СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|	
	|		СГРУППИРОВАТЬ ПО
	|			СпособыРаспределения.АналитикаВидаУчета,
	|			СпособыРаспределения.АналитикаУчетаЗатрат,
	|			СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|			
	|		) КАК СпособыРаспределенияПоПериодам
	|	ПО
	|		СпособыРаспределения.АналитикаВидаУчета = СпособыРаспределенияПоПериодам.АналитикаВидаУчета
	|		И СпособыРаспределения.АналитикаУчетаЗатрат = СпособыРаспределенияПоПериодам.АналитикаУчетаЗатрат
	|		И СпособыРаспределения.ЭтоСпособРаспределенияРодителя = СпособыРаспределенияПоПериодам.ЭтоСпособРаспределенияРодителя	
	|		И СпособыРаспределения.Период = СпособыРаспределенияПоПериодам.Период
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.АналитикаВидаУчета,
	|			СпособыРаспределения.АналитикаУчетаЗатрат
	|		ИЗ 
	|			СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|
	|		) КАК УказанныеСпособыРаспределения
	|	ПО
	|		СпособыРаспределения.АналитикаВидаУчета = УказанныеСпособыРаспределения.АналитикаВидаУчета
	|		И СпособыРаспределения.АналитикаУчетаЗатрат = УказанныеСпособыРаспределения.АналитикаУчетаЗатрат
	|		И СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|
	|ГДЕ	
	|	УказанныеСпособыРаспределения.АналитикаУчетаЗатрат ЕСТЬ NULL
	|	И СпособыРаспределения.ХарактерРаспределенияЗатрат В (&МассивХарактеровРаспределения)
    |
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСпособамРаспределенияЗатратРасширеннаяАналитика()

// Функция формирует текст запроса по регистру сведений "Способы распределения статей затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоСпособамРаспределенияЗатрат()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыРаспределения.СтатьяЗатрат,
	|	СпособыРаспределения.Подразделение,
	|	//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|	
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	СпособыРаспределения.РаспределятьНаПодчиненныеПодразделения,
	|	
	|	СпособыРаспределения.ЭтоСпособРаспределенияРодителя,
	|	
	|	//ДляРеглУчета	ВЫБОР КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы)
	|	//ДляНалУчета		ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОбщехозяйственныеРасходы)
	// is ЯннуровВФ нач 20150914 
	//|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОбщепроизводственныеРасходы)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.АдминистративныеРасходы)
	// is ЯннуровВФ кон 20150914 
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ОбщехозяйственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ ( 
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.%ИмяПланаСчетов%.ОбщепроизводственныеРасходы)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ОбщепроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.%ИмяПланаСчетов%.БракВПроизводстве)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.БракВПроизводстве)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство_)
	|	//ДляНалУчета		ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОсновноеПроизводство)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства)
	|	//ДляНалУчета		ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства)
	//начало изменений ДС МСФО 03.12.2013	
	//|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ВспомогательноеПроизводство)
	//конец изменений ДС МСФО 03.12.2013
	// is ЯннуровВФ нач 20141015
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ВспомогательныеПроизводства)
	// is ЯннуровВФ кон 20141015
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.%ИмяПланаСчетов%.ОбслуживающиеПроизводства)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета 		СпособыРаспределения.СтатьяЗатрат.ХарактерЗатрат
	|	//ДляРеглУчета 	КОНЕЦ КАК ХарактерЗатрат,
	|	
	|	СпособыРаспределения.НеРаспределять
	|	
	|//Поместить ПОМЕСТИТЬ РаспределяемыеСтатьиЗатрат%СуффиксУчета%
	|ИЗ 
	|	СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|			СпособыРаспределения.СтатьяЗатрат,
	|			СпособыРаспределения.Подразделение,
	|			СпособыРаспределения.ЭтоСпособРаспределенияРодителя,
	|			МАКСИМУМ(СпособыРаспределения.Период) КАК Период
	|		ИЗ 
	|			СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|	
	|		СГРУППИРОВАТЬ ПО
	|			//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|			СпособыРаспределения.Подразделение,
	|			СпособыРаспределения.СтатьяЗатрат,
	|			СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|			
	|		) КАК СпособыРаспределенияПоПериодам
	|	ПО
	|		СпособыРаспределения.СтатьяЗатрат = СпособыРаспределенияПоПериодам.СтатьяЗатрат
	|		И СпособыРаспределения.Подразделение = СпособыРаспределенияПоПериодам.Подразделение
	|		//ДляРеглУчета И СпособыРаспределения.СчетЗатрат = СпособыРаспределенияПоПериодам.СчетЗатрат
	|		И СпособыРаспределения.Период = СпособыРаспределенияПоПериодам.Период
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|			СпособыРаспределения.СтатьяЗатрат,
	|			СпособыРаспределения.Подразделение
	|		ИЗ 
	|			СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|
	|		) КАК УказанныеСпособыРаспределения
	|	ПО
	|		СпособыРаспределения.СтатьяЗатрат = УказанныеСпособыРаспределения.СтатьяЗатрат
	|		И СпособыРаспределения.Подразделение = УказанныеСпособыРаспределения.Подразделение
	|		И СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|		//ДляРеглУчета И СпособыРаспределения.СчетЗатрат = УказанныеСпособыРаспределения.СчетЗатрат
	|
	|ГДЕ	
	|	УказанныеСпособыРаспределения.СтатьяЗатрат ЕСТЬ NULL
	|	И СпособыРаспределения.ХарактерРаспределенияЗатрат В (&МассивХарактеровРаспределения)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСпособамРаспределенияЗатрат()

// Функция формирует запрос по регистру сведений "Способы распределения статей затрат".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	МассивХарактеровРаспределения - Массив - Массив допустимых характеров распределения затрат
//	ФормироватьВременнуюТаблицу - Булево - Признак формирования временной таблицы 
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Способы распределения статей затрат".
//
Функция СформироватьЗапросПоСпособамРаспределенияЗатрат(
	СтруктураШапкиДокумента,
	МассивХарактеровРаспределения,
	ФормироватьВременнуюТаблицу = Ложь,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц = Неопределено
	) Экспорт
	
	// Если в процедуру не передан менеджер временных таблиц, то создадим новый менеджер временных таблиц.
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	// Сформируем временную таблицу по способам распределения.
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		СформироватьВременнуюТаблицуСпособыРаспределенияРасширеннаяАналитика(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			МенеджерВременныхТаблиц
		) ;
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСпособамРаспределенияЗатратРасширеннаяАналитика();
	Иначе
		СформироватьВременнуюТаблицуСпособыРаспределения(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			МенеджерВременныхТаблиц
		) ;
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСпособамРаспределенияЗатрат();
	КонецЕсли;
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		ВидОтраженияВУчете
	);
	
	Если ФормироватьВременнуюТаблицу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//Поместить", "");
		//начало изменений оптим р/с
   		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда

               ТекстЗапроса = ТекстЗапроса + "ИНДЕКСИРОВАТЬ ПО
                                             | СпособыРаспределения.СтатьяЗатрат,    
                                             | СпособыРаспределения.Подразделение";

          Иначе

               ТекстЗапроса = ТекстЗапроса + "ИНДЕКСИРОВАТЬ ПО
									   | СпособыРаспределения.СтатьяЗатрат,    
                                       | СпособыРаспределения.Подразделение,
									   | СпособыРаспределения.СчетЗатрат";

          КонецЕсли;		
		//конец изменений
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НеУчитыватьПодразделение", Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	
	Запрос.УстановитьПараметр("МассивХарактеровРаспределения", МассивХарактеровРаспределения);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоСпособамРаспределенияЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ БУХГАЛТЕРИИ

// Процедура формирует проводку по распределению затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы
//  ВидУчетаПоПБУ18 - ПеречислениеСсылка.ВидыУчетаПоПБУ18 - Вид учета по ПБУ18/02, для которого формируется проводка
//  Сумма - Число - Сумма проводки
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоРаспределениюЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	СтатьяЗатрат,
	ХарактерЗатрат,
	ВидУчетаПоПБУ18,
	Сумма,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаВыборкиБаза.СчетУчета = СтрокаВыборки.СчетУчета
	   И СтрокаВыборкиБаза.Подразделение = СтрокаВыборки.Подразделение
	   И СтрокаВыборкиБаза.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппа
	Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	
	НоваяПроводка.Содержание = ПолучитьСодержаниеПроводкиПоХарактеруЗатрат(ХарактерЗатрат);
	НоваяПроводка.Сумма = Сумма;
	
	НоваяПроводка.СчетДт = СтрокаВыборкиБаза.СчетУчета;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборкиБаза.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборкиБаза.Подразделение);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтатьяЗатрат);
										
	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
										
	// is ЯннуровВФ нач 20140609
	// is ЯннуровВФ нач 20141113
	//Если НоваяПроводка.СчетКт = ПланыСчетов.Международный._РасходыБудущихПериодов Тогда 
	Если (СтруктураШапкиДокумента.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете)
		И (НоваяПроводка.СчетКт = ПланыСчетов.Международный._РасходыБудущихПериодов Или НоваяПроводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Международный._РасходыБудущихПериодов)) Тогда 
	// is ЯннуровВФ кон 20141113
	
		лРасходыБудущихПериодов = ис_Международный.ПолучитьЭлементРБП(
			СтруктураШапкиДокумента.Организация,
			СтрокаВыборки.Подразделение,
			СтрокаВыборки.НоменклатурнаяГруппа,
			СтатьяЗатрат,
			Истина);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "РасходыБудущихПериодов", лРасходыБудущихПериодов);
	Иначе
	// is ЯннуровВФ кон 20140609
		Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
		КонецЕсли;
		Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
		КонецЕсли;
		Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "СтатьиЗатрат") Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтатьяЗатрат);
		КонецЕсли;
	КонецЕсли;
		
 	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкуПоРаспределениюЗатрат()

// Функция проверяет заполнение счетов учета затрат.
//
// Параметры:
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	Сумма - Число - сумма затрат на выпуск продукции. Используется для формирования сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетаУчетаРаспределениеЗатрат(
	СтрокаВыборки, 
	СтрокаВыборкиБаза, 
	Сумма
	)
	
	ПроверкаПройдена = Истина;
	
	Если Не ЗначениеЗаполнено(СтрокаВыборки.СчетУчета) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет учета затрат:
			|Организация: " + СтрокаВыборки.Организация + "
			|Подразделение: " + СтрокаВыборки.Подразделение + "
			|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
			|Заказ: " + СтрокаВыборки.Заказ + "
			|Проводка по списанию затрат на сумму: " + Сумма + " не сформирована!
			|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СтрокаВыборкиБаза.СчетУчета) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет учета в базе распределения затрат:
			|Способ распределения: " + СтрокаВыборкиБаза.СпособРаспределения + "
			|Организация: " + СтрокаВыборкиБаза.Организация + "
			|Подразделение: " + СтрокаВыборкиБаза.Подразделение + "
			|Номенклатурная группа: " + СтрокаВыборкиБаза.НоменклатурнаяГруппа + "
			|Заказ: " + СтрокаВыборкиБаза.Заказ + "
			|Проводка по списанию затрат на сумму: " + Сумма + " не сформирована!
			|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетаУчетаРаспределениеЗатрат()

// Процедура формирует движения по регистру бухгалтерии.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	СтатьяЗатрат,
	ХарактерЗатрат,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	РегистрБухгалтерииНаборЗаписей
	) Экспорт
	
	Если Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// При УСН формировать проводки по налоговому учету не требуется
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете 
		И (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПройдена = ПроверитьСчетаУчетаРаспределениеЗатрат(
		СтрокаВыборки, 
		СтрокаВыборкиБаза, 
		Сумма
	);
	
	Если ПроверкаПройдена Тогда
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		 
			СформироватьПроводкуПоРаспределениюЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтрокаВыборкиБаза,
				СтатьяЗатрат,
				ХарактерЗатрат,
				Неопределено, // ВидУчетаПоПБУ18
				Сумма,
				РегистрБухгалтерииНаборЗаписей
			);
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			
			СформироватьПроводкуПоРаспределениюЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтрокаВыборкиБаза,
				СтатьяЗатрат,
				ХарактерЗатрат,
				Перечисления.ВидыУчетаПоПБУ18.НУ,
				Сумма,
				РегистрБухгалтерииНаборЗаписей
			);
			СформироватьПроводкуПоРаспределениюЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтрокаВыборкиБаза,
				СтатьяЗатрат,
				ХарактерЗатрат,
				Перечисления.ВидыУчетаПоПБУ18.ПР,
				ПостояннаяРазница,
				РегистрБухгалтерииНаборЗаписей
			);
			СформироватьПроводкуПоРаспределениюЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтрокаВыборкиБаза,
				СтатьяЗатрат,
				ХарактерЗатрат,
				Перечисления.ВидыУчетаПоПБУ18.ВР,
				ВременнаяРазница,
				РегистрБухгалтерииНаборЗаписей
			);
				
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
			
			СформироватьПроводкуПоРаспределениюЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтрокаВыборкиБаза,
				СтатьяЗатрат,
				ХарактерЗатрат,
				Неопределено, // ВидУчетаПоПБУ18
				Сумма,
				РегистрБухгалтерииНаборЗаписей
			);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ БУХГАЛТЕРИИ

// Процедура формирует проводку распределения затрат по продажам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СчетСписания - ПланСчетовСсылка.Хозрасчетный или ПланСчетовСсылка.Налоговый - Счет списания затрат
//	НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - Номенклатурная группа
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  ВидУчетаПоПБУ18 - ПеречислениеСсылка.ВидыУчетаПоПБУ18 - Вид учета по ПБУ18/02, для которого формируется проводка
//  Сумма - Число - Сумма проводки
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//  СтруктураСубконтоДт - Структура - Структура для заполнения аналитики на СчетДт
//
Процедура СформироватьПроводкуРаспределениеПоПродажам(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетСписания,
	НоменклатурнаяГруппа,
	ХарактерЗатрат,
	ВидУчетаПоПБУ18,
	Сумма,
	РегистрБухгалтерииНаборЗаписей,
	СтруктураСубконтоДт = Неопределено)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	
	НоваяПроводка.Содержание = ПолучитьСодержаниеПроводкиПоХарактеруЗатрат(ХарактерЗатрат);
	НоваяПроводка.Сумма = Сумма;
	
	НоваяПроводка.СчетДт = СчетСписания;
	
	ВидыСубконтоДт = НоваяПроводка.СчетДт.ВидыСубконто;
	
	Если ВидыСубконтоДт.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(СтруктураСубконтоДт)
			И ВидыСубконтоДт[0].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтруктураСубконтоДт.Субконто1)) Тогда
		
			// Считаем, что субконто, записанные в ключе аналитики, подходят для заполнения проводки
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтруктураСубконтоДт.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтруктураСубконтоДт.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтруктураСубконтоДт.Субконто3);
		
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
		КонецЕсли
		
	КонецЕсли;
	
	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
										
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	КонецЕсли;
	
	// Заполним аналитику "СтатьяЗатрат" если:
	// 	- проводка формируется по НУ - субконто "СтатьяЗатрат" необходимо для корректного формирования декларации по налогу на прибыль
	// 	- в учетной политике установлен способ формирования проводок "Детально"
	// 	- субконто не является оборотным 
	Если ТипЗнч(РегистрБухгалтерииНаборЗаписей) = Тип("РегистрБухгалтерииНаборЗаписей.Налоговый") 
			ИЛИ ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) 
			ИЛИ НЕ УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "СтатьиЗатрат") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);
	КонецЕсли;
		
 	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкуРаспределениеПоПродажам()

// Функция проверяет заполнение счета учета затрат.
//
// Параметры
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	СчетСписания - ПланСчетовСсылка.Хозрасчетный или ПланСчетовСсылка.Налоговый - Счет списания затрат
//	Сумма - Число - сумма затрат. Используется для формирования сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетУчетаИСчетСписания(
	СтрокаВыборки,
	СчетСписания,
	Сумма
	)
	
	ПроверкаПройдена = Истина;
	
	Если Не ЗначениеЗаполнено(СтрокаВыборки.СчетУчета) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет учета затрат:
		|Организация: " + СтрокаВыборки.Организация + "
		|Подразделение: " + СтрокаВыборки.Подразделение + "
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Заказ: " + СтрокаВыборки.Заказ + "
		|Проводка по распределению затрат на сумму: " + Сумма + " не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетСписания) Тогда
		   
		ОбщегоНазначения.Сообщение("Не определен счет списания затрат:
		|Организация: " + СтрокаВыборки.Организация + "
		|Подразделение: " + СтрокаВыборки.Подразделение + "
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Заказ: " + СтрокаВыборки.Заказ + "
		|Проводка по распределению затрат на сумму: " + Сумма + " не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетУчетаИСчетСписания()

// Процедура формирует движения по регистру бухгалтерии.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СчетСписания - ПланСчетовСсылка.Хозрасчетный или ПланСчетовСсылка.Налоговый - Счет списания затрат
//	НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - Номенклатурная группа
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//  СтруктураСубконтоДт - Структура - аналитика счета Дт
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииРаспределениеПоПродажам(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	СчетСписания,
	НоменклатурнаяГруппа,
	ХарактерЗатрат,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	РегистрБухгалтерииНаборЗаписей,
	СтруктураСубконтоДт = Неопределено) Экспорт
	
	Если Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// При УСН формировать проводки по налоговому учету не требуется
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете 
		И (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПройдена = ПроверитьСчетУчетаИСчетСписания(
		СтрокаВыборки, 
		СчетСписания, 
		Сумма
	);
		
	Если ПроверкаПройдена Тогда
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			
			СформироватьПроводкуРаспределениеПоПродажам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СчетСписания,
				НоменклатурнаяГруппа,
				ХарактерЗатрат,
				Неопределено, // ВидУчетаПоПБУ18
				Сумма,
				РегистрБухгалтерииНаборЗаписей,
				СтруктураСубконтоДт
			);
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			
			СформироватьПроводкуРаспределениеПоПродажам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СчетСписания,
				НоменклатурнаяГруппа,
				ХарактерЗатрат,
				Перечисления.ВидыУчетаПоПБУ18.НУ,
				Сумма,
				РегистрБухгалтерииНаборЗаписей,
				СтруктураСубконтоДт
			);
			СформироватьПроводкуРаспределениеПоПродажам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СчетСписания,
				НоменклатурнаяГруппа,
				ХарактерЗатрат,
				Перечисления.ВидыУчетаПоПБУ18.ПР,
				ПостояннаяРазница,
				РегистрБухгалтерииНаборЗаписей,
				СтруктураСубконтоДт
			);
			СформироватьПроводкуРаспределениеПоПродажам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СчетСписания,
				НоменклатурнаяГруппа,
				ХарактерЗатрат,
				Перечисления.ВидыУчетаПоПБУ18.ВР,
				ВременнаяРазница,
				РегистрБухгалтерииНаборЗаписей,
				СтруктураСубконтоДт
			);
				
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
			
			СформироватьПроводкуРаспределениеПоПродажам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СчетСписания,
				НоменклатурнаяГруппа,
				ХарактерЗатрат,
				Неопределено, // ВидУчетаПоПБУ18
				Сумма,
				РегистрБухгалтерииНаборЗаписей,
				СтруктураСубконтоДт
			);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииРаспределениеПоПродажам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ РАСХОДОВ ПО ПРОДАЖАМ

// Функция получает счет списания затрат.
//
// Параметры:
//	СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	ЕНВД - Булево - Признак распределения по деятельности, облагаемой ЕНВД
//
// Возвращаемое значение:
// 	ПланыСчетовСсылка.Хозрасчетный или ПланыСчетовСсылка.Налоговый - Счет списания затрат
//
Функция ПолучитьСчетСписанияЗатрат(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	ХарактерЗатрат,
	ЕНВД
	) Экспорт
	
	СчетСписания = Неопределено;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
		
		СпособСписания = СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостингСпособСписания;
		Если СпособСписания = Перечисления.ДиректКостингСпособыСписания.НаСебестоимостьПродаж Тогда
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
				СчетСписания = ?(Не ЕНВД, 
					ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД,
					ПланыСчетов.Хозрасчетный.СебестоимостьПродажОблагаемаяЕНВД
				);
			ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
				СчетСписания = ?(Не ЕНВД, 
					ПланыСчетов.Налоговый.СебестоимостьПродаж,
					ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД
				);
			КонецЕсли;
			
		Иначе // списание на управленческие расходы
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
				СчетСписания = ?(Не ЕНВД, 
					ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеОблагаемыеЕНВД,
					ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыОблагаемыеЕНВД
				);
			ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
				СчетСписания = ?(Не ЕНВД, 
					ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы,
					ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД
				);
			КонецЕсли;
			
		КонецЕсли;
			
	Иначе
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			СчетСписания = ?(Не ЕНВД, 
				ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеОблагаемыеЕНВД,
				ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуОблагаемыеЕНВД
			);
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			СчетСписания = ?(Не ЕНВД, 
				ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу,
				ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СчетСписания;

КонецФункции // ПолучитьСчетСписанияЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ТРАНСПОРТНЫХ РАСХОДОВ

// Функция формирует текст запроса по себестоимости реализации и остаткам товаров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоСебестоимостиРеализацииИОстаткамТоваровРасширеннаяАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегистрАналитикаВидаУчета.Ссылка
	|	
	|ПОМЕСТИТЬ ОтборАналитикаВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|ГДЕ
	|	РегистрАналитикаВидаУчета.Организация = &Организация
	|	И РегистрАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ (&МассивСчетовУчета)
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаПрочихЗатрат.Ссылка
	|	
	|ПОМЕСТИТЬ ОтборАналитикаУчетаПрочихЗатрат
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПрочихЗатрат КАК РегистрАналитикаУчетаПрочихЗатрат
	|ГДЕ
	|	РегистрАналитикаУчетаПрочихЗатрат.Организация = &Организация
	|	И РегистрАналитикаУчетаПрочихЗатрат.СчетУчета В ИЕРАРХИИ (&СчетСебестоимостьПродаж)
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(УчетЗатрат.ОстатокТоваров, 0)) 					КАК ОстатокТоваров,
	|	СУММА(ЕСТЬNULL(УчетЗатрат.СтоимостьРеализованныхТоваров, 0)) 	КАК СтоимостьРеализованныхТоваров
	|ИЗ (
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА &ИспользоватьДанныеНалоговогоУчета ТОГДА
	|			УчетЗатрат.СтоимостьНУОстаток 
	|		ИНАЧЕ
	|			УчетЗатрат.СтоимостьОстаток 
	|		КОНЕЦ КАК ОстатокТоваров,
	|		0 КАК СтоимостьРеализованныхТоваров
	|	ИЗ
	|		РегистрНакопления.УчетЗатратРегл.Остатки(&КонГраница, 
	|			АналитикаВидаУчета В (
	|				ВЫБРАТЬ
	|					ОтборАналитикаВидаУчета.Ссылка
	|				ИЗ
	|					ОтборАналитикаВидаУчета КАК ОтборАналитикаВидаУчета
	|				)
	|		) КАК УчетЗатрат
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		СУММА(
	|		ВЫБОР КОГДА &ИспользоватьДанныеНалоговогоУчета ТОГДА
	|			УчетЗатрат.СтоимостьНУ
	|		ИНАЧЕ
	|			УчетЗатрат.Стоимость
	|		КОНЕЦ)
	|	ИЗ
	|		РегистрНакопления.УчетЗатратРегл КАК УчетЗатрат
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ОтборАналитикаВидаУчета КАК ОтборАналитикаВидаУчета
	|		ПО
	|			УчетЗатрат.АналитикаВидаУчета = ОтборАналитикаВидаУчета.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ОтборАналитикаУчетаПрочихЗатрат КАК ОтборАналитикаУчетаПрочихЗатрат
	|		ПО
	|			УчетЗатрат.КорАналитикаВидаУчета = ОтборАналитикаУчетаПрочихЗатрат.Ссылка
	|	
	|	ГДЕ
	|		УчетЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|		И УчетЗатрат.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		СУММА(
	|		ВЫБОР КОГДА &ИспользоватьДанныеНалоговогоУчета ТОГДА
	|			-УчетЗатрат.СтоимостьНУ
	|		ИНАЧЕ
	|			-УчетЗатрат.Стоимость
	|		КОНЕЦ)
	|	ИЗ
	|		РегистрНакопления.УчетЗатратРегл КАК УчетЗатрат
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ОтборАналитикаВидаУчета КАК ОтборАналитикаВидаУчета
	|		ПО
	|			УчетЗатрат.АналитикаВидаУчета = ОтборАналитикаВидаУчета.Ссылка
	|			
	|	ГДЕ
	|		УчетЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|		И УчетЗатрат.Активность
	|		И УчетЗатрат.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВозвратОтПокупателя)
	|	
	|	) КАК УчетЗатрат
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборАналитикаВидаУчета
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборАналитикаУчетаПрочихЗатрат";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСебестоимостиРеализацииИОстаткамТоваровРасширеннаяАналитика()

// Функция формирует текст запроса по себестоимости реализации и остаткам товаров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоСебестоимостиРеализацииИОстаткамТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрБухгалтерии.СуммаКонечныйОстаток КАК ОстатокТоваров,
	|	0 										КАК СтоимостьРеализованныхТоваров
	|	
	|ПОМЕСТИТЬ РегистрБухгалтерии
	|ИЗ
	|	//ДляБухУчета РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|	//ДляНалУчета РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|		&НачГраница,
	|		&КонГраница,
	|		,
	|		,
	|		Счет В ИЕРАРХИИ (&МассивСчетовУчета),
	|		,
	|		Организация = &Организация
	|		//ДляНалУчета И ВидУчета = &ВидУчета
	|	) КАК РегистрБухгалтерии
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	0,
	|	РегистрБухгалтерии.СуммаОборот
	|ИЗ
	|	//ДляБухУчета РегистрБухгалтерии.Хозрасчетный.Обороты(
	|	//ДляНалУчета РегистрБухгалтерии.Налоговый.Обороты(
	|		&НачГраница,
	|		&КонГраница, , 
	|		Счет В ИЕРАРХИИ (&СчетСебестоимостьПродаж),, 
	|		Организация = &Организация
	|		//ДляНалУчета И ВидУчета = &ВидУчета
	|		, 
	|		КорСчет В ИЕРАРХИИ (&МассивСчетовУчета),
	|	) КАК РегистрБухгалтерии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РегистрБухгалтерии.ОстатокТоваров, 0)) 					КАК ОстатокТоваров,
	|	СУММА(ЕСТЬNULL(РегистрБухгалтерии.СтоимостьРеализованныхТоваров, 0)) 	КАК СтоимостьРеализованныхТоваров
	|ИЗ 
	|	РегистрБухгалтерии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистрБухгалтерии";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСебестоимостиРеализацииИОстаткамТоваров()

// Процедура устанавливает параметры запроса по себестоимости реализации и остаткам товаров.
//
// Параметры:
//	СтруктураШапкиДокумента – Структура - Реквизиты документа
//	Запрос - Запрос
//	ИспользоватьДанныеНалоговогоУчета - Булево - Признак использования в запросе данных НУ
//
Процедура УстановитьПараметрыЗапросаПоСебестоимостиРеализацииИОстаткамТоваров(СтруктураШапкиДокумента, 
	Запрос, 
	ИспользоватьДанныеНалоговогоУчета)
	
	МассивСчетовУчета = Новый Массив;
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику ИЛИ НЕ ИспользоватьДанныеНалоговогоУчета Тогда
		
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеИзделия);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
		МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
		
		СчетСебестоимостьПродаж = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
		
	Иначе
		
		МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ТоварыНаСкладах);
		МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ТоварыВРозничнойТорговле);
		МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ТараПодТоваромИПорожняя);
		МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ПокупныеИзделия);
		МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ПокупныеТоварыОтгруженные);
		
		СчетСебестоимостьПродаж = ПланыСчетов.Налоговый.СебестоимостьПродаж;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачДата", 							СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", 							СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", 						СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", 						СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", 						СтруктураШапкиДокумента.Организация);             
	Запрос.УстановитьПараметр("МассивСчетовУчета", 					МассивСчетовУчета);
	Запрос.УстановитьПараметр("СчетСебестоимостьПродаж", 			СчетСебестоимостьПродаж);
	Запрос.УстановитьПараметр("ИспользоватьДанныеНалоговогоУчета", 	ИспользоватьДанныеНалоговогоУчета); // Параметр используется только в режиме РА
	
	Если ИспользоватьДанныеНалоговогоУчета Тогда
		
		Запрос.УстановитьПараметр("СчетПВ",  ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
		Запрос.УстановитьПараметр("ВидУчета", Перечисления.ВидыУчетаПоПБУ18.НУ);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоСебестоимостиРеализацииИОстаткамТоваров()

// Функция рассчитывает коэффициент списания транспортных расходов.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
// 
Функция ПолучитьКоэффициентСписанияТранспортныхРасходов(
	СтруктураШапкиДокумента
	) Экспорт
	
	// Для расчета коэффициента используем данные НУ (по налогу на прибыль).
	// Потому, что организация 
	// - должна их использовать для НУ (ст. 320 НК)
	// - может их использовать для БУ
	ИспользоватьДанныеНалоговогоУчета = Истина;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		// Нет данных налогового учета, поэтому для расчета используем данные БУ
		ИспользоватьДанныеНалоговогоУчета = Ложь;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		ТекстЗапроса = СформироватьТекстЗапросаПоСебестоимостиРеализацииИОстаткамТоваровРасширеннаяАналитика();
	Иначе
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСебестоимостиРеализацииИОстаткамТоваров();
		
		// Получим текст запроса в зависимости от используемых для расчета данных
		ВидОтраженияВУчете = ?(ИспользоватьДанныеНалоговогоУчета, 
			Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
		
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаСКомментариями,
			ВидОтраженияВУчете
			);
			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоСебестоимостиРеализацииИОстаткамТоваров(
		СтруктураШапкиДокумента,
		Запрос,
		ИспользоватьДанныеНалоговогоУчета
	);
	
	СтоимостьРеализованныхТоваров = 0;
	ОстатокТоваров = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтоимостьРеализованныхТоваров = Выборка.СтоимостьРеализованныхТоваров;
			ОстатокТоваров = Выборка.ОстатокТоваров;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтоимостьРеализованныхТоваров + ОстатокТоваров <> 0 Тогда
		Коэффициент = ОстатокТоваров / (СтоимостьРеализованныхТоваров + ОстатокТоваров);
	Иначе
		Коэффициент = 0;
	КонецЕсли;
	
	Возврат Коэффициент;

КонецФункции // ПолучитьКоэффициентСписанияТранспортныхРасходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ СПИСКА ДЕЙСТВИЙ РАСЧЕТА СЕБЕСТОИМОСТИ

// Функция формирует массив для заполнения табличной части "Выполняемые действия".
//
Функция ПолучитьМассивВыполняемыхДействийРасширеннаяАналитика(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете)
	
	МассивДействий = Новый Массив;
	
	Если НЕ ОтражатьВУправленческомУчете Тогда
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(ПериодРегистрации), Организация, Истина);
		Если ЗначениеЗаполнено(УчетнаяПолитикаРегл) 
		 И УчетнаяПолитикаРегл.ВидУчетаТЗР = Перечисления.ВариантыУчетаТЗР.ОтнесениеНаОтдельныйСчет Тогда
			МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеТЗР);
		КонецЕсли;	
	КонецЕсли;	
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетСебестоимостиПроизводственныхУслуг);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияРасходов);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеРасходовПоБазе);
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетФактическойСебестоимости);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.ФормированиеДвиженийПоРегистрам);
	
	Возврат МассивДействий;
	
КонецФункции // ПолучитьМассивВыполняемыхДействийРасширеннаяАналитика()

// Функция формирует массив для заполнения табличной части "Выполняемые действия".
//
Функция ПолучитьМассивВыполняемыхДействийТрадиционныйРежим(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете, СообщатьОбОшибке)
	
	Если ОтражатьВУправленческомУчете Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(ПериодРегистрации, СообщатьОбОшибке);
	Иначе
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ПериодРегистрации, Организация, СообщатьОбОшибке);
	КонецЕсли;
	
	МассивДействий = Новый Массив;
	
	Если Не ЗначениеЗаполнено(УчетнаяПолитика)  Тогда
		Возврат МассивДействий;
	КонецЕсли;
	
	РасчетПоПеределам = Ложь;
	РасчетПоПодразделениям = Ложь;
	Если УчетнаяПолитика.СпособРасчетаСебестоимостиОсновногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		РасчетПоПеределам = Истина;
	ИначеЕсли УчетнаяПолитика.СпособРасчетаСебестоимостиОсновногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		РасчетПоПодразделениям = Истина;
	КонецЕсли;
	
	Если УчетнаяПолитика.СпособРасчетаСебестоимостиВспомогательногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		РасчетПоПеределам = Истина;
	ИначеЕсли УчетнаяПолитика.СпособРасчетаСебестоимостиВспомогательногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		РасчетПоПодразделениям = Истина;
	КонецЕсли;

	ДиректКостинг = УчетнаяПолитика.ДиректКостинг;
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияПроизводственныхРасходов);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПроизводственныхРасходов);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПродукцииИЗатратПоПеределам);
	
	Если РасчетПоПодразделениям Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетПрямыхЗатратПоПодразделениям);
	КонецЕсли;
	
	Если РасчетПоПеределам Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетПрямыхЗатратПоПеределам);
	КонецЕсли;
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.ОпределениеПродукцииИсключаемойИзБазыРаспределения);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияКосвенныхРасходов);
	
	Если РасчетПоПодразделениям Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеКосвенныхРасходовПоПодразделениям);
	КонецЕсли;
	
	Если РасчетПоПеределам Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеКосвенныхРасходовПоПеределам);
	КонецЕсли;
	
	Если ДиректКостинг Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеОбщехозяйственныхРасходовПоМетодуДиректКостинг);
	КонецЕсли;
	
	Если РасчетПоПодразделениям Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетЗатратВстречногоВыпускаПоПодразделениям);
	КонецЕсли;
	
	Если РасчетПоПеределам Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетЗатратВстречногоВыпускаПоПеределам);
	КонецЕсли;
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеИздержекОбращения);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеКоммерческихРасходов);
	
	Если ОтражатьВУправленческомУчете Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеПрочихЗатрат);
	КонецЕсли;
	
	Если Не ОтражатьВУправленческомУчете Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СверткаДвиженийПоРегистрам);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции // ПолучитьМассивВыполняемыхДействийТрадиционныйРежим()

Функция ПолучитьМассивВыполняемыхДействий(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете,ОтражатьВНалоговомУчете, СообщатьОбОшибке=Ложь) Экспорт
	
	ИспользоватьРасширеннуюАналитику = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(ПериодРегистрации);
	
	Если ИспользоватьРасширеннуюАналитику Тогда
		МассивДействий = ПолучитьМассивВыполняемыхДействийРасширеннаяАналитика(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете);
	ИначеЕсли ОтражатьВНалоговомУчете И НалоговыйУчетУСН.ПрименениеУСН(Организация, ПериодРегистрации) Тогда
		МассивДействий = Новый Массив();
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.ПризнаниеМатериальныхРасходовПриУСН);
	Иначе	
		МассивДействий = ПолучитьМассивВыполняемыхДействийТрадиционныйРежим(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете, СообщатьОбОшибке);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции	

// Процедура дополняет структуру шапки документа новыми значениями.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ДополнитьСтруктуруШапкиДокумента(
	СтруктураШапкиДокумента
	)
	
	Если Не СтруктураШапкиДокумента.Свойство("ИтерационныйРасчетЗатратВстречногоВыпуска") Тогда
		СтруктураШапкиДокумента.Вставить("ИтерационныйРасчетЗатратВстречногоВыпуска", Ложь);
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруШапкиДокумента()

// Функция возвращает значение характера затрат, соответствующего счету затрат.
//
// Параметры
//  СчетЗатрат - ПланСчетовСсылка - счет затрат, по которому определяется характер затрат.
//  СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - статья затрат для уточнения характера затрат.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ХарактерЗатрат – характер затрат, соответствующий счету затрат.
//
Функция ПолучитьХарактерЗатратПоСчетуЗатратМежд(
	СчетЗатрат, 
	СтатьяЗатрат
	)
	
	// Проверка счета затрат.
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		ПравильныйСчетЗатрат = Ложь;
		
	ИначеЕсли ТипЗнч(СчетЗатрат) <> Тип("ПланСчетовСсылка.Международный") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Счет затрат " + СчетЗатрат + " не соответствует плану счетов: ""Международный"".
			|Функция <ПолучитьХарактерЗатратПоСчетуЗатратМежд>");
		ПравильныйСчетЗатрат = Ложь;
		
	// Если все проверки пройдены, значит передан правильный счет затрат.
	Иначе
		ПравильныйСчетЗатрат = Истина;
	КонецЕсли;
	
	Если ПравильныйСчетЗатрат Тогда
	
		Если СчетЗатрат = ПланыСчетов.Международный.ОсновноеПроизводство
		 //начало изменений ДС МСФО 03.12.2013
		 //ИЛИ СчетЗатрат = ПланыСчетов.Международный.ВспомогательноеПроизводство
		 //конец изменений ДС МСФО 03.12.2013
		 ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ОсновноеПроизводство)
		 //начало изменений ДС МСФО 03.12.2013
		 //ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ВспомогательноеПроизводство) Тогда
		  // is ЯннуровВФ нач 20141015
		 Или СчетЗатрат = ПланыСчетов.Международный.ВспомогательныеПроизводства
		 Или СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ВспомогательныеПроизводства) 
		 // is ЯннуровВФ кон 20141015
		 Тогда
		 //конец изменений ДС МСФО 03.12.2013
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			
		ИначеЕсли СчетЗатрат = ПланыСчетов.Международный.ОбслуживающиеПроизводства
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ОбслуживающиеПроизводства) Тогда
			Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			Иначе
				ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
			КонецЕсли;
		
		ИначеЕсли СчетЗатрат = ПланыСчетов.Международный.БракВПроизводстве
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.БракВПроизводстве) Тогда
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве;
			
		ИначеЕсли СчетЗатрат = ПланыСчетов.Международный.ОбщепроизводственныеРасходы
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ОбщепроизводственныеРасходы) Тогда
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы;
			
		Иначе
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие;
			
		КонецЕсли;
		
	Иначе
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ХарактерЗатрат;
	
КонецФункции // ПолучитьХарактерЗатратПоСчетуЗатратМежд()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ КОРРЕКТИРОВКИ ВСТРЕЧНОГО ВЫПУСКА ПРОДУКЦИИ

// Функция формирует текст запроса для заполнения корректировки встречного выпуска продукции.
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьТекстЗапросаЗаполнениеКорректировкиВстречногоВыпускаПродукции()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета Истина КАК ОтражатьВУправленческомУчете,
	|	//ДляБухУчета Истина КАК ОтражатьВБухгалтерскомУчете,
	|	//ДляНалУчета Истина КАК ОтражатьВНалоговомУчете,
	|	//ДляМеждУчета Истина КАК ОтражатьВМеждународномУчете,
	|
	|	СписанныеТовары.Регистратор КАК Документ,
	|	СписанныеТовары.НомерСтроки КАК НомерСтрокиСписанныхТоваров,
	|	
	|	//ДляРеглУчета МАКСИМУМ(ЗатратыНаВыпуск.Организация) КАК Организация,
	|	//ДляРеглУчета МАКСИМУМ(ЗатратыНаВыпуск.СчетУчета) КАК СчетУчета,
	|	МАКСИМУМ(ЗатратыНаВыпуск.Подразделение),
	|	МАКСИМУМ(ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП) КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(ЗатратыНаВыпуск.ЗаказНЗП) КАК Заказ,
	|	МАКСИМУМ(ЗатратыНаВыпуск.СтатьяЗатрат) КАК СтатьяЗатрат,
	|	МАКСИМУМ(ЗатратыНаВыпуск.Затрата) КАК Затрата,
	|	МАКСИМУМ(ЗатратыНаВыпуск.ХарактеристикаЗатраты) КАК ХарактеристикаЗатраты,
	|	МАКСИМУМ(ЗатратыНаВыпуск.СерияЗатраты) КАК СерияЗатраты
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Продукция КАК Продукция,
	|			ВстречныйВыпускПродукции.Затрата КАК Затрата,
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости КАК СпособОценкиСтоимости
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|		) КАК РегистрВстречныйВыпуск
	|	ПО
	|		ЗатратыНаВыпуск.Затрата = РегистрВстречныйВыпуск.Затрата
	|		И ЗатратыНаВыпуск.Продукция = РегистрВстречныйВыпуск.Продукция
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СписанныеТовары.Регистратор,
	|			СписанныеТовары.НомерСтроки,
	|			Ложь КАК ДокументПередачаТоваров,
	|			
	|			СписанныеТовары.СтатьяЗатрат,
	|			//ДляУпрУчета СписанныеТовары.Подразделение,
	|			//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации КАК Подразделение,
	|			
	|			//ДляУпрУчета Неопределено КАК КорСчет,
	|			//ДляБухУчета СписанныеТовары.КорСчетБУ КАК КорСчет,
	|			//ДляНалУчета СписанныеТовары.КорСчетНУ КАК КорСчет,
	|			//ДляМеждУчета СписанныеТовары.КорСчетМУ КАК КорСчет,
	|			СписанныеТовары.НоменклатурнаяГруппа,
	|			СписанныеТовары.ЗаказСписания,
	|			
	|			СписанныеТовары.Номенклатура,
	|			СписанныеТовары.ХарактеристикаНоменклатуры,
	|			ВЫБОР КОГДА СписанныеТовары.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|				СписанныеТовары.СерияНоменклатуры
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ КАК СерияНоменклатуры
	|		ИЗ
	|			РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ГДЕ 
	|			СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|			//ДляНалУчета И СписанныеТовары.ОтражатьВНалоговомУчете
	|			//ДляМеждУчета И СписанныеТовары.ОтражатьВМеждународномУчете
	|			//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|			И (СписанныеТовары.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|				ИЛИ СписанныеТовары.Регистратор ССЫЛКА Документ.ПолучениеУслугПоПереработке)
	|			И СписанныеТовары.Номенклатура В (
	|				ВЫБРАТЬ
	|					ВстречныйВыпускПродукции.Затрата
	|				ИЗ
	|					РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
	|				ГДЕ
	|					ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|				)	
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|						
	|		ВЫБРАТЬ
	|			СписанныеТовары.Регистратор,
	|			СписанныеТовары.НомерСтроки,
	|			Истина КАК ДокументПередачаТоваров,
	|			
	|			Неопределено КАК СтатьяЗатрат,
	|			Неопределено КАК Подразделение,
	|			Неопределено КАК КорСчет,
	|			Неопределено КАК НоменклатурнаяГруппа,
	|			Неопределено КАК ЗаказСписания,
	|			
	|			СписанныеТовары.Номенклатура,
	|			СписанныеТовары.ХарактеристикаНоменклатуры,
	|			ВЫБОР КОГДА СписанныеТовары.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|				СписанныеТовары.СерияНоменклатуры
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ КАК СерияНоменклатуры
	|		ИЗ
	|			РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ГДЕ 
	|			СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|			//ДляНалУчета И СписанныеТовары.ОтражатьВНалоговомУчете
	|			//ДляМеждУчета И СписанныеТовары.ОтражатьВМеждународномУчете
	|			//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|			И СписанныеТовары.Регистратор ССЫЛКА Документ.ПередачаТоваров
	|			И СписанныеТовары.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ВПереработкуБрак)
	|			И СписанныеТовары.Номенклатура В (
	|				ВЫБРАТЬ
	|					ВстречныйВыпускПродукции.Затрата
	|				ИЗ
	|					РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
	|				ГДЕ
	|					ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|				)	
	|		) КАК СписанныеТовары
	|	ПО
	|		ЗатратыНаВыпуск.Затрата = СписанныеТовары.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = СписанныеТовары.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияЗатраты = СписанныеТовары.СерияНоменклатуры
	|		И (ЗатратыНаВыпуск.СтатьяЗатрат = СписанныеТовары.СтатьяЗатрат 
	|			ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		И (ЗатратыНаВыпуск.Подразделение = СписанныеТовары.Подразделение
	|			ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		И (ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = СписанныеТовары.НоменклатурнаяГруппа
	|			ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		И (ЗатратыНаВыпуск.ЗаказНЗП = СписанныеТовары.ЗаказСписания
	|			ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		//ДляРеглУчета И (ЗатратыНаВыпуск.СчетУчета = СписанныеТовары.КорСчет
	|		//ДляРеглУчета 	ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		
	|ГДЕ 
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И Не СписанныеТовары.Регистратор ЕСТЬ NULL
	|	И ЗатратыНаВыпуск.Затрата В (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Затрата
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|		)
	|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СписанныеТовары.Регистратор,
	|	СписанныеТовары.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписанныеТовары.Регистратор,
	|	СписанныеТовары.НомерСтроки
	|";
	
	Возврат ТекстЗапроса;
		
КонецФункции // СформироватьТекстЗапросаЗаполнениеКорректировкиВстречногоВыпускаПродукции()

// Процедура формирует движение по регистру сведений "Корректировка встречного выпуска продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	НомерЗаписи - Число - Номер строки выборки
//	НаборЗаписейКорректировкаВстречногоВыпускаПродукции - РегистрСведенийНаборЗаписей - Набор записей регистра сведений "Корректировка встречного выпуска продукции".
//
Процедура СформироватьДвиженияПоРегиструКорректировкаВстречногоВыпускаПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	НомерЗаписи,
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции
	)
	
	НоваяСтрока = НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	Если СтрокаВыборки.НомерСтрокиСписанныхТоваров = 0
	   И СтрокаВыборки.Документ = Неопределено Тогда
		НоваяСтрока.НомерСтрокиСписанныхТоваров = НомерЗаписи;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Количество() = 1000 Тогда
		НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструКорректировкаВстречногоВыпускаПродукции()

// Процедура заполняет регистр сведений "Корректировка встречного выпуска продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ЗаполнениеКорректировкиВстречногоВыпускаПродукции(
	СтруктураШапкиДокумента
	) Экспорт
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска Тогда
		 Возврат;
	КонецЕсли;
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаЗаполнениеКорректировкиВстречногоВыпускаПродукции();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Запрос.УстановитьПараметр("СпособОценкиСтоимости", Перечисления.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписейКорректировкаВстречногоВыпускаПродукции = РегистрыСведений.КорректировкаВстречногоВыпускаПродукции.СоздатьНаборЗаписей();
		НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СформироватьДвиженияПоРегиструКорректировкаВстречногоВыпускаПродукции(
				СтруктураШапкиДокумента,
				Выборка,
				0,
				НаборЗаписейКорректировкаВстречногоВыпускаПродукции
			);
		КонецЦикла;
		
		Если НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Модифицированность() Тогда
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнениеКорректировкиВстречногоВыпускаПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ ТАБЛИЦЫ НОМЕНКЛАТУРЫ, ИСКЛЮЧАЕМОЙ ИЗ БАЗЫ РАСПРЕДЕЛЕНИЯ ЗАТРАТ.

// Процедура формирования запроса по продукции, полностью списанной на собственные нужды.
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоСписаниюНаСобственныеНужды()
	
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продукция 
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|	И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|";
	
	ТекстЗапросаСпособыРаспределения = "
	|						ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СпособыРаспределения.СпособРаспределенияЗатрат,
	|							СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|							СпособыРаспределения.Подразделение,
	|							СпособыРаспределения.СтатьяЗатрат
	|						ИЗ
	|							РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(
	|								&КонГраница, 
	|								//ДляРеглУчета Организация = &Организация 
	|							) КАК СпособыРаспределения
	|
	|							ЛЕВОЕ СОЕДИНЕНИЕ (
	|								ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									СпособыРаспределения.СтатьяЗатрат,
	|									СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|									СпособыРаспределения.Период
	|								ИЗ
	|									РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(
	|										&КонГраница,
	|										//ДляРеглУчета Организация = &Организация
	|										) КАК СпособыРаспределения
	|									ГДЕ
	|										Не СпособыРаспределения.НеРаспределять
	|			
	|								) КАК СпособыРаспределенияПоПериодам
	|							ПО
	|								СпособыРаспределения.ХарактерРаспределенияЗатрат
	|									<> СпособыРаспределенияПоПериодам.ХарактерРаспределенияЗатрат
	|								И СпособыРаспределения.СтатьяЗатрат = СпособыРаспределенияПоПериодам.СтатьяЗатрат
	|								И СпособыРаспределения.Период < СпособыРаспределенияПоПериодам.Период
	|	
	|						ГДЕ
	|							Не СпособыРаспределения.НеРаспределять
	|							И СпособыРаспределенияПоПериодам.СтатьяЗатрат ЕСТЬ NULL
	|							И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ПроизводственныеРасходы
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СписаниеНаСобственныеНужды.Номенклатура 				КАК Номенклатура,
	|	СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры 	КАК ХарактеристикаНоменклатуры,
	|	СписаниеНаСобственныеНужды.СерияНоменклатуры 			КАК СерияНоменклатуры,
	|	Сумма(ВЫБОР КОГДА
	|			(ВыпускПродукцииВсего.Количество - СписаниеНаСобственныеНужды.Количество +
	|			ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.Количество, 0)) <= 0 ТОГДА
	|				СписаниеНаСобственныеНужды.Количество
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		) КАК Количество
	|ИЗ (
	|	ВЫБРАТЬ
	|		СписаниеНаСобственныеНужды.Номенклатура 				КАК Номенклатура,
	|		СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры 	КАК ХарактеристикаНоменклатуры,
	|		СписаниеНаСобственныеНужды.СерияНоменклатуры 			КАК СерияНоменклатуры,
	|		СУММА(СписаниеНаСобственныеНужды.Количество) 			КАК Количество
	|	ИЗ (
	|		ВЫБРАТЬ
	|			ПартииТоваровНаСкладах.Номенклатура 				КАК Номенклатура,
	|			ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры 	КАК ХарактеристикаНоменклатуры,
	|			ПартииТоваровНаСкладах.СерияНоменклатуры 			КАК СерияНоменклатуры,
	|			СУММА(ПартииТоваровНаСкладах.Количество) 			КАК Количество
	|		ИЗ
	|			РегистрНакопления.ПартииТоваровНаСкладах%СуффиксУчета% КАК ПартииТоваровНаСкладах
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Регистратор,
	|					СписанныеТовары.НомерСтроки,
	|					СписанныеТовары.СтатьяЗатрат,
	|					СпособыРаспределенияСтатейЗатрат.СпособРаспределенияЗатрат
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				
	|					ЛЕВОЕ СОЕДИНЕНИЕ (
	|						//ТекстЗапросаСпособыРаспределения
	|						) КАК СпособыРаспределенияСтатейЗатрат
	|					ПО 
	|						СпособыРаспределенияСтатейЗатрат.СтатьяЗатрат = СписанныеТовары.СтатьяЗатрат
	|						И (
	|							//ДляУпрУчета СпособыРаспределенияСтатейЗатрат.Подразделение = СписанныеТовары.Подразделение
	|							//ДляРеглУчета СпособыРаспределенияСтатейЗатрат.Подразделение = СписанныеТовары.ПодразделениеОрганизации
	|							ИЛИ СпособыРаспределенияСтатейЗатрат.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|							ИЛИ СпособыРаспределенияСтатейЗатрат.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|							)
	|						
	|				ГДЕ
	|					СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|					//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|					//ДляРеглУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|					//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|					//ДляРеглУчета И СписанныеТовары.КорСчетБУ В ИЕРАРХИИ (&ИсключаемыеСчетаЗатрат)
	|					И СписанныеТовары.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|					И Не СпособыРаспределенияСтатейЗатрат.СпособРаспределенияЗатрат ЕСТЬ NULL
	|		    		И СписанныеТовары.Номенклатура В (
	|						//ТекстЗапросаСписокНоменклатуры
	|						)
	|
	|				) КАК СписанныеТовары
	|			ПО
	|				ПартииТоваровНаСкладах.Регистратор 						= СписанныеТовары.Регистратор
	|				И ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров 	= СписанныеТовары.НомерСтроки
	|
	|		ГДЕ
	|			ПартииТоваровНаСкладах.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И ПартииТоваровНаСкладах.Организация = &Организация
	|			И ПартииТоваровНаСкладах.КодОперации В (&КодыОперацийСписанияПартии)
	|			И Не СписанныеТовары.СпособРаспределенияЗатрат ЕСТЬ NULL
	|
	|		    И ПартииТоваровНаСкладах.Номенклатура В (
	|				//ТекстЗапросаСписокНоменклатуры
	|				)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПартииТоваровНаСкладах.Номенклатура,
	|			ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|			ПартииТоваровНаСкладах.СерияНоменклатуры
	|
	|		ОБЪЕДИНИТЬ ВСЕ
    |
	|		ВЫБРАТЬ
	|			ВыпускПродукции.Продукция               КАК Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции          КАК СерияПродукции,
	|			СУММА(ВыпускПродукции.Количество) 		КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ (
	|				//ТекстЗапросаСпособыРаспределения
	|				) КАК СпособыРаспределенияСтатейЗатрат
	|			ПО 
	|				СпособыРаспределенияСтатейЗатрат.СтатьяЗатрат = ВыпускПродукции.СтатьяЗатратПолучатель
	|				И (
	|					СпособыРаспределенияСтатейЗатрат.Подразделение = ВыпускПродукции.ПодразделениеПолучатель
	|					ИЛИ СпособыРаспределенияСтатейЗатрат.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|					ИЛИ СпособыРаспределенияСтатейЗатрат.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					)
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И ВыпускПродукции.КодОперации В (&КодыОперацийСписаниеНаЗатраты)
	|			И Не СпособыРаспределенияСтатейЗатрат.СтатьяЗатрат ЕСТЬ NULL
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|			//ДляРеглУчета И ВыпускПродукции.СчетДт В ИЕРАРХИИ (&ИсключаемыеСчетаЗатрат)
	|
	|		СГРУППИРОВАТЬ ПО
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции
	|
	|   	 ) КАК СписаниеНаСобственныеНужды
	|	    
	|	СГРУППИРОВАТЬ ПО
	|		СписаниеНаСобственныеНужды.Номенклатура,
	|		СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры,
	|		СписаниеНаСобственныеНужды.СерияНоменклатуры
	|	    
	|	) КАК СписаниеНаСобственныеНужды
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВыпускПродукции.Продукция               КАК Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции 			КАК СерияПродукции,
	|			СУММА(ВыпускПродукции.Количество) 		КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|			И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции
	|		) КАК ВыпускПродукцииВсего
	|	ПО
	|		СписаниеНаСобственныеНужды.Номенклатура               	= ВыпускПродукцииВсего.Продукция
	|		И СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры = ВыпускПродукцииВсего.ХарактеристикаПродукции
	|		И СписаниеНаСобственныеНужды.СерияНоменклатуры 			= ВыпускПродукцииВсего.СерияПродукции
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ПартииТоваровНаСкладах.Номенклатура,
	|			ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|			ПартииТоваровНаСкладах.СерияНоменклатуры,
	|			ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.ПартииТоваровНаСкладах%СуффиксУчета%.Остатки(&НачГраница, 
	|				Номенклатура В ( 
	|					//ТекстЗапросаСписокНоменклатуры 
	|					)
	|				//ДляРеглУчета И Организация = &Организация
	|
	|			) КАК ПартииТоваровНаСкладах
	|		
	|		) КАК ПартииТоваровНаСкладахОстатки
	|	ПО
	|		СписаниеНаСобственныеНужды.Номенклатура               	= ПартииТоваровНаСкладахОстатки.Номенклатура
	|		И СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры
	|		И СписаниеНаСобственныеНужды.СерияНоменклатуры 			= ПартииТоваровНаСкладахОстатки.СерияНоменклатуры
	|	
	|СГРУППИРОВАТЬ ПО
	|	СписаниеНаСобственныеНужды.Номенклатура,
	|	СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры,
	|	СписаниеНаСобственныеНужды.СерияНоменклатуры
	|	
	|ИМЕЮЩИЕ
	|	Сумма(ВЫБОР КОГДА
	|			(ВыпускПродукцииВсего.Количество - СписаниеНаСобственныеНужды.Количество +
	|			ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.Количество, 0)) <= 0 ТОГДА
	|				СписаниеНаСобственныеНужды.Количество
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеНаСобственныеНужды.Номенклатура,
	|	СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры,
	|	СписаниеНаСобственныеНужды.СерияНоменклатуры
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаСпособыРаспределения", ТекстЗапросаСпособыРаспределения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаСписокНоменклатуры", ТекстЗапросаСписокНоменклатуры);
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПоСписаниюНаСобственныеНужды()

// Процедура формирования запроса по полуфабрикатам, полностью использованным на выпуск продукции.
//
Функция СформироватьТекстЗапросаПоИспользованиюПолуфабрикатов()
	
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продукция 
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗатратыНаВыпуск.Затрата					КАК Номенклатура,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты	КАК ХарактеристикаНоменклатуры,
	|	ЗатратыНаВыпуск.СерияЗатраты			КАК СерияНоменклатуры,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП КАК НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.ЗаказНЗП КАК Заказ,
	|	//ДляУпрУчета Неопределено КАК СчетУчета,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	
	|	СписанныеТовары.Регистратор КАК Документ,
	|	СписанныеТовары.НомерСтроки КАК НомерСтрокиСписанныхТоваров,
	|	
	|	МАКСИМУМ(ЗатратыНаВыпуск.Количество) 			КАК Количество,
	|	МАКСИМУМ(ЗатратыНаВыпускВсего.Количество) 		КАК КоличествоВсего,
	|	МАКСИМУМ(НезавершенноеПроизводство.Количество) 	КАК КоличествоОстаток,
	|	МАКСИМУМ(ВыпускПродукции.Количество) 			КАК КоличествоВыпуск
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗатратыНаВыпуск.Подразделение,
	|		//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|		ЗатратыНаВыпуск.ЗаказНЗП,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|		ЗатратыНаВыпуск.СерияЗатраты,
	|		СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ИсключаемаяНоменклатура.Номенклатура,
	|				ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры,
	|				ИсключаемаяНоменклатура.СерияНоменклатуры,
	|				Истина КАК ЕстьИсключаемаяНоменклатура
	|			ИЗ
	|				РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения%СуффиксОрганизаций% КАК ИсключаемаяНоменклатура
	|			ГДЕ
	|				ИсключаемаяНоменклатура.Период МЕЖДУ &НачДата И &КонДата
	|				//ДляРеглУчета И ИсключаемаяНоменклатура.Организация = &Организация
	|			) КАК ИсключаемаяНоменклатура
	|		ПО
	|			ЗатратыНаВыпуск.Продукция               	= ИсключаемаяНоменклатура.Номенклатура
	|			И ЗатратыНаВыпуск.ХарактеристикаПродукции 	= ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры
	|			И ЗатратыНаВыпуск.СерияПродукции 			= ИсключаемаяНоменклатура.СерияНоменклатуры
	|			
	|	ГДЕ
	|		ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|		И ЗатратыНаВыпуск.КодОперации В (&ПрямыеЗатраты)
	|		И Не ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура ЕСТЬ NULL
	|		И ЗатратыНаВыпуск.Затрата В (
	|			//ТекстЗапросаСписокНоменклатуры
	|			)
	|		//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗатратыНаВыпуск.Подразделение,
	|		//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|		ЗатратыНаВыпуск.ЗаказНЗП,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|		ЗатратыНаВыпуск.СерияЗатраты
	|			
	|	) КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Распределение.Подразделение,
	|			Распределение.НоменклатурнаяГруппа,
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|		ИЗ			
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
	|		ГДЕ
	|			Распределение.Период МЕЖДУ &НачДата И &КонДата
	|			И Распределение.НомерПередела = &НомерПередела
	|			И Распределение.Затрата В (
	|				//ТекстЗапросаСписокНоменклатуры
	|				)
	|			//ДляРеглУчета И Распределение.Организация = &Организация
	|
	|		) КАК Распределение
	|	ПО 
	|		ЗатратыНаВыпуск.Подразделение			= Распределение.Подразделение
	|		И ЗатратыНаВыпуск.Затрата				= Распределение.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = Распределение.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты			= Распределение.СерияЗатраты
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа 	= Распределение.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.СтатьяЗатрат  		= Распределение.СтатьяЗатрат
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ЗатратыНаВыпуск.Подразделение,
	|			//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|			ЗатратыНаВыпуск.ЗаказНЗП,
	|			ЗатратыНаВыпуск.СтатьяЗатрат,
	|			ЗатратыНаВыпуск.Затрата,
	|			ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|			ЗатратыНаВыпуск.СерияЗатраты,
	|			СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|				
	|		ГДЕ
	|			ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|			И ЗатратыНаВыпуск.КодОперации В (&ПрямыеЗатраты)
	|			И ЗатратыНаВыпуск.Затрата В (
	|				//ТекстЗапросаСписокНоменклатуры
	|				)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			ЗатратыНаВыпуск.Подразделение,
	|			//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|			ЗатратыНаВыпуск.ЗаказНЗП,
	|			ЗатратыНаВыпуск.СтатьяЗатрат,
	|			ЗатратыНаВыпуск.Затрата,
	|			ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|			ЗатратыНаВыпуск.СерияЗатраты
	|			
	|		) КАК ЗатратыНаВыпускВсего
	|	ПО
	|		ЗатратыНаВыпуск.Затрата               	= ЗатратыНаВыпускВсего.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = ЗатратыНаВыпускВсего.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= ЗатратыНаВыпускВсего.СерияЗатраты
	|		И ЗатратыНаВыпуск.Подразделение 		= ЗатратыНаВыпускВсего.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗатратыНаВыпускВсего.НоменклатурнаяГруппаНЗП
	|		И ЗатратыНаВыпуск.СтатьяЗатрат			= ЗатратыНаВыпускВсего.СтатьяЗатрат
	|		И ЗатратыНаВыпуск.ЗаказНЗП = ЗатратыНаВыпускВсего.ЗаказНЗП
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = ЗатратыНаВыпускВсего.СчетУчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции,
	|			СУММА(ВыпускПродукции.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции
	|
	|		) КАК ВыпускПродукции
	|	ПО
	|		ЗатратыНаВыпуск.Затрата               	= ВыпускПродукции.Продукция
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = ВыпускПродукции.ХарактеристикаПродукции
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= ВыпускПродукции.СерияПродукции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			НезавершенноеПроизводство.Подразделение,
	|			//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|			НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|			НезавершенноеПроизводство.СтатьяЗатрат,
	|			НезавершенноеПроизводство.Заказ,
	|			НезавершенноеПроизводство.Затрата,
	|			НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|			НезавершенноеПроизводство.СерияЗатраты,
	|			НезавершенноеПроизводство.КоличествоОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|				Затрата В (
	|					//ТекстЗапросаСписокНоменклатуры
	|					)
	|				//ДляРеглУчета И Организация = &Организация
	|			) КАК НезавершенноеПроизводство
	|		
	|		) КАК НезавершенноеПроизводство
	|	ПО
	|		ЗатратыНаВыпуск.Затрата               	= НезавершенноеПроизводство.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = НезавершенноеПроизводство.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= НезавершенноеПроизводство.СерияЗатраты
	|		И ЗатратыНаВыпуск.Подразделение 		= НезавершенноеПроизводство.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.СтатьяЗатрат			= НезавершенноеПроизводство.СтатьяЗатрат
	|		И ЗатратыНаВыпуск.ЗаказНЗП = НезавершенноеПроизводство.Заказ
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = НезавершенноеПроизводство.СчетУчета
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СписанныеТовары.Регистратор,
	|			СписанныеТовары.НомерСтроки,
	|			СписанныеТовары.СтатьяЗатрат,
	|			//ДляУпрУчета СписанныеТовары.Подразделение,
	|			//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации КАК Подразделение,
	|			СписанныеТовары.КорСчетБУ,
	|			СписанныеТовары.НоменклатурнаяГруппа,
	|			СписанныеТовары.Номенклатура,
	|			СписанныеТовары.ЗаказСписания,
	|			СписанныеТовары.ХарактеристикаНоменклатуры,
	|			СписанныеТовары.СерияНоменклатуры
	|		ИЗ
	|			РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ГДЕ 
	|			СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|			И СписанныеТовары.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|			И СписанныеТовары.Номенклатура В (
	|				//ТекстЗапросаСписокНоменклатуры
	|				)
	|			//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|			//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|
	|		) КАК СписанныеТовары
	|	ПО
	|		ЗатратыНаВыпуск.Затрата 				= СписанныеТовары.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = СписанныеТовары.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= СписанныеТовары.СерияНоменклатуры
	|		И ЗатратыНаВыпуск.СтатьяЗатрат 			= СписанныеТовары.СтатьяЗатрат
	|		И ЗатратыНаВыпуск.Подразделение 		= СписанныеТовары.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = СписанныеТовары.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.ЗаказНЗП = СписанныеТовары.ЗаказСписания
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = СписанныеТовары.КорСчетБУ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ИсключаемаяНоменклатура.Номенклатура,
	|			ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры,
	|			ИсключаемаяНоменклатура.СерияНоменклатуры,
	|			Истина КАК ЕстьИсключаемаяНоменклатура
	|		ИЗ
	|			РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения%СуффиксОрганизаций% КАК ИсключаемаяНоменклатура
	|		ГДЕ
	|			ИсключаемаяНоменклатура.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И ИсключаемаяНоменклатура.Организация = &Организация
	|
	|		) КАК ИсключаемаяНоменклатура
	|	ПО
	|		ЗатратыНаВыпуск.Затрата               	= ИсключаемаяНоменклатура.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= ИсключаемаяНоменклатура.СерияНоменклатуры
	|
	|ГДЕ
	|	ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура ЕСТЬ NULL
	|		
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	СписанныеТовары.Регистратор,
	|	СписанныеТовары.НомерСтроки
	|	
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ЗатратыНаВыпуск.Количество) >= МАКСИМУМ(ЗатратыНаВыпускВсего.Количество))
	|	И (МАКСИМУМ(НезавершенноеПроизводство.Количество) = 0 
	|		ИЛИ МАКСИМУМ(НезавершенноеПроизводство.Количество) ЕСТЬ NULL)
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	СписанныеТовары.Регистратор,
	|	СписанныеТовары.НомерСтроки
	|
	|ИТОГИ ПО
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	//ДляУпрУчета СчетУчета,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	ЗатратыНаВыпуск.СтатьяЗатрат
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаСписокНоменклатуры", ТекстЗапросаСписокНоменклатуры);
	
	Возврат ТекстЗапроса;
		
КонецФункции // СформироватьТекстЗапросаПоИспользованиюПолуфабрикатов()

// Процедура определяет номенклатуру, которая должна быть исключена из базы распределения затрат.
// Из базы распределения исключается продукция, полностью списанная на собственные нужды (ОПР, ОХР, Брак в производстве),
// и полуфабрикаты, которые включаются в себестоимость продукции, полностью списанной на собственные нужды.
//
Процедура ОпределитьНоменклатуруИсключаемуюИзБазыРаспределения(СтруктураШапкиДокумента) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НаборЗаписейНоменклатураИсключаемаяИзБазы = РегистрыСведений.НоменклатураИсключаемаяИзБазыРаспределения.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписейНоменклатураИсключаемаяИзБазы = РегистрыСведений.НоменклатураИсключаемаяИзБазыРаспределенияОрганизаций.СоздатьНаборЗаписей();
	КонецЕсли;
	НаборЗаписейНоменклатураИсключаемаяИзБазы.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений = НаборЗаписейНоменклатураИсключаемаяИзБазы.Выгрузить();
	
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции = РегистрыСведений.КорректировкаВстречногоВыпускаПродукции.СоздатьНаборЗаписей();
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвиженийКорректировка = НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Выгрузить();
	
	МассивИсключаемыхКодовОпераций = Новый Массив;
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	МассивКодовОперацийСписанияПартии = Новый Массив;
	МассивКодовОперацийСписанияПартии.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак);
	МассивКодовОперацийСписанияПартии.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты);
	МассивКодовОперацийСписанияПартии.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно);
	
	МассивКодовПрямыеЗатраты = Новый Массив;
	МассивКодовПрямыеЗатраты.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	
	МассивКодовОперацийСписаниеНаЗатраты = Новый Массив;
	МассивКодовОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	МассивКодовОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	
	МассивИсключаемыхСчетовЗатрат = Новый Массив;
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	
	МассивИсключаемыхХарактеровЗатрат = Новый Массив;
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСписаниюНаСобственныеНужды();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ИсключаемыеКодыОпераций", 	МассивИсключаемыхКодовОпераций);
	Запрос.УстановитьПараметр("КодыОперацийСписанияПартии", МассивКодовОперацийСписанияПартии);
	Запрос.УстановитьПараметр("КодыОперацийСписаниеНаЗатраты", МассивКодовОперацийСписаниеНаЗатраты);
	Запрос.УстановитьПараметр("ИсключаемыеСчетаЗатрат", 	МассивИсключаемыхСчетовЗатрат);
	Запрос.УстановитьПараметр("ИсключаемыеХарактерыЗатрат", МассивИсключаемыхХарактеровЗатрат);
	Запрос.УстановитьПараметр("НеУчитыватьПодразделение", Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	Запрос.УстановитьПараметр("ПроизводственныеРасходы", Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("Материальные", Перечисления.ВидыЗатрат.Материальные);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТаблицаИсключаемойНоменклатуры = РезультатЗапроса.Выгрузить();
	
	ТаблицаИсключаемойНоменклатуры.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", "");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаИсключаемойНоменклатуры, ТаблицаДвижений);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 	"Организация");
	КонецЕсли;
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		НаборЗаписейНоменклатураИсключаемаяИзБазы.мПериод = СтруктураШапкиДокумента.Период;
		НаборЗаписейНоменклатураИсключаемаяИзБазы.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписейНоменклатураИсключаемаяИзБазы.ВыполнитьДвижения();
		НаборЗаписейНоменклатураИсключаемаяИзБазы.Записать();
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МИНИМУМ(РаспределениеЗатратПоПеределам.НомерПередела) КАК НачальныйПередел,
		|	МАКСИМУМ(РаспределениеЗатратПоПеределам.НомерПередела) КАК КонечныйПередел
		|ИЗ
		|	РегистрСведений.РаспределениеЗатратПоПеределам КАК РаспределениеЗатратПоПеределам
		|ГДЕ
		|	РаспределениеЗатратПоПеределам.Период МЕЖДУ &НачДата И &КонДата
		|	И РаспределениеЗатратПоПеределам.НомерПередела <> 0
		|";	
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МИНИМУМ(РаспределениеЗатратПоПеределам.НомерПередела) КАК НачальныйПередел,
		|	МАКСИМУМ(РаспределениеЗатратПоПеределам.НомерПередела) КАК КонечныйПередел
		|ИЗ
		|	РегистрСведений.РаспределениеЗатратПоПеределамОрганизаций КАК РаспределениеЗатратПоПеределам
		|ГДЕ
		|	РаспределениеЗатратПоПеределам.Период МЕЖДУ &НачДата И &КонДата
		|	И РаспределениеЗатратПоПеределам.НомерПередела <> 0
		|	И РаспределениеЗатратПоПеределам.Организация = &Организация
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",     СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",     СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	НачальныйПередел = РезультатЗапроса[0].НачальныйПередел;
	КонечныйПередел = РезультатЗапроса[0].КонечныйПередел;
	
	Если Не ЗначениеЗаполнено(НачальныйПередел) ИЛИ Не ЗначениеЗаполнено(КонечныйПередел) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаЗатратыСКомментариями = СформироватьТекстЗапросаПоИспользованиюПолуфабрикатов();
	ТекстЗапросаЗатраты = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаЗатратыСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	ЗапросЗатраты = Новый Запрос;
	ЗапросЗатраты.Текст = ТекстЗапросаЗатраты;
	ЗапросЗатраты.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	ЗапросЗатраты.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	ЗапросЗатраты.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	ЗапросЗатраты.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	ЗапросЗатраты.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросЗатраты.УстановитьПараметр("ИсключаемыеКодыОпераций", МассивИсключаемыхКодовОпераций);
	ЗапросЗатраты.УстановитьПараметр("ПрямыеЗатраты", 			МассивКодовПрямыеЗатраты);
	
	НомерЗаписи = 0;
	Для НомерПередела = НачальныйПередел По КонечныйПередел Цикл
		
		ЗапросЗатраты.УстановитьПараметр("НомерПередела", КонечныйПередел - НомерПередела + 1);
		РезультатЗапроса = ЗапросЗатраты.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбходПоЗатратам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоЗатратам.Следующий() Цикл
			ОбходПоХарактеристикам = ОбходПоЗатратам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоХарактеристикам.Следующий() Цикл
				ОбходПоСериям = ОбходПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоСериям.Следующий() Цикл
					ОбходПоПодразделениям = ОбходПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоПодразделениям.Следующий() Цикл
						ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ОбходПоНомГруппам.Следующий() Цикл
							ОбходПоЗаказам = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ОбходПоЗаказам.Следующий() Цикл
								ОбходПоСчетам = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ОбходПоСчетам.Следующий() Цикл
									ОбходПоСтатьямЗатрат = ОбходПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ОбходПоСтатьямЗатрат.Следующий() Цикл
										
										Если ОбходПоСтатьямЗатрат.Количество >= ОбходПоСтатьямЗатрат.КоличествоВыпуск Тогда
											НоваяСтрока = ТаблицаИсключаемойНоменклатуры.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоСтатьямЗатрат);
										Иначе
											Обход = ОбходПоСтатьямЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
											Пока Обход.Следующий() Цикл
												НоваяСтрока = ТаблицаДвиженийКорректировка.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
												Если Не ЗначениеЗаполнено(Обход.Документ) ТОгда
													НомерЗаписи = НомерЗаписи + 1;
													НоваяСтрока.НомерСтрокиСписанныхТоваров = НомерЗаписи;
												КонецЕсли;
											КонецЦикла;
										КонецЕсли;
										
									КонецЦикла; // по статьям затрат
								КонецЦикла; // по счетам
							КонецЦикла; // по заказам
						КонецЦикла; // по номенклатурным группам
					КонецЦикла; // по подразделениям
				КонецЦикла; // по сериям затрат
			КонецЦикла; // по характеристикам затрат
		КонецЦикла; // по затратам
		
		ТаблицаИсключаемойНоменклатуры.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", "");
		
		Если ТаблицаИсключаемойНоменклатуры.Количество() > 0 Тогда
			ТаблицаДвижений.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаИсключаемойНоменклатуры, ТаблицаДвижений);
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 	"Организация");
			КонецЕсли;
			
			Если ТаблицаДвижений.Количество() > 0 Тогда
				НаборЗаписейНоменклатураИсключаемаяИзБазы.Очистить();
				НаборЗаписейНоменклатураИсключаемаяИзБазы.Записать();
				
				НаборЗаписейНоменклатураИсключаемаяИзБазы.мПериод = СтруктураШапкиДокумента.Период;
				НаборЗаписейНоменклатураИсключаемаяИзБазы.мТаблицаДвижений = ТаблицаДвижений;
				НаборЗаписейНоменклатураИсключаемаяИзБазы.ВыполнитьДвижения();
				НаборЗаписейНоменклатураИсключаемаяИзБазы.Записать();
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Если ТаблицаДвиженийКорректировка.Количество() > 0 Тогда
		
		ТаблицаДвиженийКорректировка.Свернуть("Документ, НомерСтрокиСписанныхТоваров, Подразделение, НоменклатурнаяГруппа, Заказ, СтатьяЗатрат, Затрата, ХарактеристикаЗатраты, СерияЗатраты", "");
		
		ТаблицаДвижений = НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийКорректировка, ТаблицаДвижений);
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ОтражатьВБухгалтерскомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ОтражатьВНалоговомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ОтражатьВМеждународномУчете");
		КонецЕсли;

		Если ТаблицаДвижений.Количество() > 0 Тогда
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.мПериод          = СтруктураШапкиДокумента.Период;
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.мТаблицаДвижений = ТаблицаДвижений;
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.ВыполнитьДвижения();
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНоменклатуруИсключаемуюИзБазыРаспределения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ ТАБЛИЦЫ НОМЕНКЛАТУРЫ, СПИСАННОЙ НА СТАТЬИ ЗАТРАТ, РАСПРЕДЕЛЯЕМЫЕ ПО БАЗЕ

// Функция формирования текста запроса по продукции, списываемой на статьи затрат, распределяемые
// базе распределения, указанной в регистре сведений "Способы распределения статей затрат".
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоСписаниюНаРаспределяемыеРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета Истина КАК ОтражатьВУправленческомУчете,
	|	//ДляРеглУчета Истина КАК ОтражатьВБухгалтерскомУчете,
	|	//ДляРеглУчета Истина КАК ОтражатьВНалоговомУчете,
	|
	|	СписанныеТовары.Регистратор КАК Документ,
	|	СписанныеТовары.НомерСтроки КАК НомерСтрокиСписанныхТоваров,
	|	
	|	//ДляРеглУчета СписанныеТовары.Организация,
	|	//ДляУпрУчета СписанныеТовары.Подразделение,
	|	//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации КАК Подразделение,
	|	//ДляБухУчета СписанныеТовары.КорСчетБУ КАК СчетУчета,
	|	//ДляНалУчета СписанныеТовары.КорСчетНУ КАК СчетУчета,
	|	СписанныеТовары.СтатьяЗатрат,
	|	СписанныеТовары.НоменклатурнаяГруппа,
	|	СписанныеТовары.ЗаказСписания КАК Заказ,
	|	СписанныеТовары.Номенклатура КАК Затрата,
	|	СписанныеТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	СписанныеТовары.СерияНоменклатуры КАК СерияЗатраты
	|	
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Корректировка.Документ,
	|			Корректировка.НомерСтрокиСписанныхТоваров
	|		ИЗ
	|			РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК Корректировка
	|		ГДЕ
	|			Корректировка.Регистратор = &Ссылка
	|			//ДляУпрУчета И Корректировка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И Корректировка.ОтражатьВБухгалтерскомУчете
	|		) КАК Корректировка
	|	ПО
	|		СписанныеТовары.Регистратор = Корректировка.Документ
	|		И СписанныеТовары.НомерСтроки = Корректировка.НомерСтрокиСписанныхТоваров
	|	
	|ГДЕ 
	|	СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|	//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|	//ДляБухУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|	//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|	И СписанныеТовары.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|	И Корректировка.Документ ЕСТЬ NULL
	|	И СписанныеТовары.Номенклатура В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Продукция 
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|		)
	|		
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета Истина КАК ОтражатьВУправленческомУчете,
	|	//ДляРеглУчета Истина КАК ОтражатьВБухгалтерскомУчете,
	|	//ДляРеглУчета Истина КАК ОтражатьВНалоговомУчете,
	|
	|	Неопределено КАК Документ,
	|	0 КАК НомерСтрокиСписанныхТоваров,
	|	
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.ПодразделениеПолучатель,
	|	//ДляРеглУчета ВыпускПродукции.СчетДт КАК СчетУчета,
	|	ВыпускПродукции.СтатьяЗатратПолучатель,
	|	ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|	Неопределено КАК Заказ,
	|	ВыпускПродукции.Продукция КАК Затрата,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаЗатраты,
	|	ВыпускПродукции.СерияПродукции КАК СерияЗатраты
	|	
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Корректировка.Подразделение,
	|			//ДляРеглУчета Корректировка.СчетУчета,
	|			Корректировка.НоменклатурнаяГруппа,
	|			Корректировка.СтатьяЗатрат,
	|			Корректировка.Затрата,
	|			Корректировка.ХарактеристикаЗатраты,
	|			Корректировка.СерияЗатраты
	|		ИЗ
	|			РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК Корректировка
	|		ГДЕ
	|			Корректировка.Регистратор = &Ссылка
	|			И Корректировка.Документ = Неопределено
	|			//ДляУпрУчета И Корректировка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И Корректировка.ОтражатьВБухгалтерскомУчете
	|			//ДляРеглУчета И Корректировка.Организация = &Организация
	|		) КАК Корректировка
	|	ПО
	|		ВыпускПродукции.ПодразделениеПолучатель = Корректировка.Подразделение
	|		//ДляРеглУчета И ВыпускПродукции.СчетДт = Корректировка.СчетУчета
	|		И ВыпускПродукции.СтатьяЗатратПолучатель = Корректировка.СтатьяЗатрат
	|		И ВыпускПродукции.НоменклатурнаяГруппаПолучатель = Корректировка.НоменклатурнаяГруппа
	|		И ВыпускПродукции.Продукция = Корректировка.Затрата
	|		И ВыпускПродукции.ХарактеристикаПродукции = Корректировка.ХарактеристикаЗатраты
	|		И ВыпускПродукции.СерияПродукции = Корректировка.СерияЗатраты
	|	
	|ГДЕ 
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации В (&КодыОперацийСписаниеНаЗатраты)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|	И Корректировка.СтатьяЗатрат ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтрокиСписанныхТоваров,
	|	Подразделение,
	|	//ДляРеглУчета СчетУчета,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа,
	|	Заказ,
	|	Затрата,
	|	ХарактеристикаЗатраты,
	|	СерияЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСписаниюНаРаспределяемыеРасходы()

// Функция формирования запроса по продукции, списываемой на статьи затрат, распределяемые
// базе распределения, указанной в регистре сведений "Способы распределения статей затрат".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//	Запрос - Запрос по продукции.
//
Функция СформироватьЗапросПоСписаниюНаРаспределяемыеРасходы(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСписаниюНаРаспределяемыеРасходы();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	МассивИсключаемыхКодовОпераций = Новый Массив;
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ИсключаемыеКодыОпераций", МассивИсключаемыхКодовОпераций);
	
	МассивКодовОперацийСписаниеНаЗатраты = Новый Массив;
	МассивКодовОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	МассивКодовОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	Запрос.УстановитьПараметр("КодыОперацийСписаниеНаЗатраты", МассивКодовОперацийСписаниеНаЗатраты);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоСписаниюНаРаспределяемыеРасходы()

// Функция определяет максимальный номер, отраженный в измерении "Номер строки списанных товаров",
// регистра "Корректировка встречного выпуска продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//	Число - Максимальный номер, отраженный в регистре сведений "Корректировка встречного выпуска продукции".
//
Функция ПолучитьМаксимальныйНомерСтрокиРегистраКорректировкиВстречногоВыпуска(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(КорректировкаВстречногоВыпускаПродукции.НомерСтрокиСписанныхТоваров) КАК НомерСтрокиСписанныхТоваров
	|ИЗ
	|	РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК КорректировкаВстречногоВыпускаПродукции
	|ГДЕ
	|	КорректировкаВстречногоВыпускаПродукции.Документ = Неопределено
	|	И КорректировкаВстречногоВыпускаПродукции.Регистратор = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	НомерСтрокиСписанныхТоваров = 0;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НомерСтрокиСписанныхТоваров = Выборка.НомерСтрокиСписанныхТоваров;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерСтрокиСписанныхТоваров = NULL Тогда
		НомерСтрокиСписанныхТоваров = 0;
	КонецЕсли;
	
	Возврат НомерСтрокиСписанныхТоваров;
	
КонецФункции // ПолучитьМаксимальныйНомерСтрокиРегистраКорректировкиВстречногоВыпуска()

// Процедура определяет номенклатуру, списанную на статьи затрат, распределяемые про базе.
//
Процедура ОпределитьНоменклатуруСписаннуюНаРаспределяемыеЗатраты(СтруктураШапкиДокумента) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	МассивХарактеровРаспределения = Новый Массив;
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.УчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка());
	
	// Сформируем запрос по способам распределения статей затрат.	
	ЗапросПоСпособамРаспределенияЗатрат = СформироватьЗапросПоСпособамРаспределенияЗатрат(
		СтруктураШапкиДокумента,
		МассивХарактеровРаспределения,
		Ложь, // ФормироватьВременнуюТаблицу
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	РезультатЗапросаПоСпособамРаспределенияЗатрат = ЗапросПоСпособамРаспределенияЗатрат.Выполнить();
	
	// Сформируем запрос по списанию продукции на распределяемые расходы.
	ЗапросПоСписаниюНаРасходы = СформироватьЗапросПоСписаниюНаРаспределяемыеРасходы(СтруктураШапкиДокумента);
    РезультатЗапросаПоСписаниюНаРасходы = ЗапросПоСписаниюНаРасходы.Выполнить();
	
	Если РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	 ИЛИ РезультатЗапросаПоСписаниюНаРасходы.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции = РегистрыСведений.КорректировкаВстречногоВыпускаПродукции.СоздатьНаборЗаписей();
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();
	
	НомерЗаписи = ПолучитьМаксимальныйНомерСтрокиРегистраКорректировкиВстречногоВыпуска(СтруктураШапкиДокумента);
	
	Выборка = РезультатЗапросаПоСписаниюНаРасходы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НомерЗаписи = НомерЗаписи + 1;
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			Выборка,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Ложь, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
		);
			
		Если Не РаспределятьЗатраты
		 ИЛИ ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы Тогда
			Продолжить;
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструКорректировкаВстречногоВыпускаПродукции(
			СтруктураШапкиДокумента,
			Выборка,
			НомерЗаписи,
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции
			);
	КонецЦикла;
	
	Если НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Модифицированность() Тогда
		НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Записать(Ложь);
	КонецЕсли;
		
КонецПроцедуры // ОпределитьНоменклатуруСписаннуюНаРаспределяемыеЗатраты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ЗАТРАТ ПО НАРАБОТКЕ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСОВ ПО НАРАБОТКЕ

// Функция формирует текст запроса по регистру "Затраты на выпуск (наработка)".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоЗатратамНаВыпускНаработка()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА
	|		Неопределено
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.Затрата
	|	КОНЕЦ КАК Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	ЗатратыНаВыпуск.Заказ,
	|	
	|	ЗатратыНаВыпуск.ПодразделениеНЗП КАК ЗатратыПодразделениеНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП КАК ЗатратыНоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП КАК ЗатратыЗаказНЗП,
	|	
	|	ЕСТЬNULL(
	|		НезавершенноеПроизводство.Подразделение,
	|		НезавершенноеПроизводствоАналитикаНЗП.Подразделение
	|		) КАК ПодразделениеНЗП,
	|	ЕСТЬNULL(
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводствоАналитикаНЗП.НоменклатурнаяГруппа
	|		) КАК НоменклатурнаяГруппаНЗП,
	|	ЕСТЬNULL(
	|		НезавершенноеПроизводство.Заказ,
	|		НезавершенноеПроизводствоАналитикаНЗП.Заказ 
	|		) КАК ЗаказНЗП,
	|	
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	
	|	ЗатратыНаВыпуск.КоличествоКонечныйОстаток КАК Количество,
	|	ЗатратыНаВыпуск.СуммаКонечныйОстаток КАК Сумма,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.КоличествоПриход ЕСТЬ NULL
	|		И Не ВыпускПродукции.КоличествоРасход ЕСТЬ NULL
	|		И (ВыпускПродукции.КоличествоПриход + ВыпускПродукции.КоличествоНачальныйОстаток) <> 0 
	|	ТОГДА
	|		ВыпускПродукции.КоличествоРасход / 
	|		(ВыпускПродукции.КоличествоПриход + ВыпускПродукции.КоличествоНачальныйОстаток)
	|	Иначе
	|		0
	|	Конец КАК КоэффициентРасхода
	|		
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%СуффиксУчета%.ОстаткиИОбороты(&НачГраница, &КонГраница, , , 
	|		//ДляРеглУчета Организация = &Организация
	|	) КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ВыпускПродукцииНаработка%СуффиксУчета%.ОстаткиИОбороты(&НачГраница, &КонГраница, , , 
	|			//ДляРеглУчета Организация = &Организация
	|		) КАК ВыпускПродукции
	|	ПО  
	|		ЗатратыНаВыпуск.Подразделение = ВыпускПродукции.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.Продукция = ВыпускПродукции.Продукция
	|		И ЗатратыНаВыпуск.ХарактеристикаПродукции = ВыпускПродукции.ХарактеристикаПродукции
	|		И ЗатратыНаВыпуск.Заказ = ВыпускПродукции.Заказ
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|			//ДляРеглУчета Организация = &Организация
	|		) КАК НезавершенноеПроизводство
	|	ПО  
	|		ЗатратыНаВыпуск.СтатьяЗатрат = НезавершенноеПроизводство.СтатьяЗатрат
	|		И (ЗатратыНаВыпуск.Затрата = НезавершенноеПроизводство.Затрата
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НезавершенноеПроизводство.Затрата = Неопределено
	|			)
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = НезавершенноеПроизводство.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = НезавершенноеПроизводство.СерияЗатраты
	|		
	|		И (ЗатратыНаВыпуск.ПодразделениеНЗП = НезавершенноеПроизводство.Подразделение
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Подразделение = НезавершенноеПроизводство.Подразделение
	|			//ДляУпрУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			)
	|		
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.ЗаказНЗП = НезавершенноеПроизводство.Заказ
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = НезавершенноеПроизводство.СчетУчета
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|			//ДляРеглУчета Организация = &Организация
	|		) КАК НезавершенноеПроизводствоАналитикаНЗП
	|	ПО  
	|		НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL
	|		И ЗатратыНаВыпуск.СтатьяЗатрат = НезавершенноеПроизводствоАналитикаНЗП.СтатьяЗатрат
	|		И (ЗатратыНаВыпуск.Затрата = НезавершенноеПроизводствоАналитикаНЗП.Затрата
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НезавершенноеПроизводствоАналитикаНЗП.Затрата = Неопределено
	|			)
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = НезавершенноеПроизводствоАналитикаНЗП.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = НезавершенноеПроизводствоАналитикаНЗП.СерияЗатраты
	|		
	|		И (ЗатратыНаВыпуск.ПодразделениеНЗП = НезавершенноеПроизводствоАналитикаНЗП.Подразделение
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Подразделение = НезавершенноеПроизводствоАналитикаНЗП.Подразделение
	|			//ДляУпрУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			)
	|		
	|		И (ЗатратыНаВыпуск.НоменклатурнаяГруппа = НезавершенноеПроизводствоАналитикаНЗП.НоменклатурнаяГруппа
	|			И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			)
	|		
	|		И (ЗатратыНаВыпуск.Заказ = НезавершенноеПроизводствоАналитикаНЗП.Заказ
	|			И ЗатратыНаВыпуск.ЗаказНЗП = Неопределено
	|			)
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = НезавершенноеПроизводствоАналитикаНЗП.СчетУчета
	|		
	|ГДЕ
	|	ВыпускПродукции.КоличествоРасход <> 0
	|	И ЗатратыНаВыпуск.КоличествоРасход = 0
	|	И ЗатратыНаВыпуск.СуммаРасход = 0
	|	И (Не НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL
	|		ИЛИ Не НезавершенноеПроизводствоАналитикаНЗП.СтатьяЗатрат ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Заказ,
	|
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	
	|	ЗатратыНаВыпуск.ПодразделениеНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоЗатратамНаВыпускНаработка()

// Процедура устанавливает параметры запроса по производственным затратам.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросаПоНаработке(
	СтруктураШапкиДокумента,
	Запрос
	)
	
	Запрос.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	МассивИсключаемыхКодовОпераций = Новый Массив;
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ИсключаемыеКодыОпераций", МассивИсключаемыхКодовОпераций);
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоНаработке()

// Функция формирует запрос по регистру "Затраты на выпуск (наработка)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Затраты на выпуск (наработка)".
//
Функция СформироватьЗапросПоЗатратамНаВыпускНаработка(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоЗатратамНаВыпускНаработка();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоНаработке(
		СтруктураШапкиДокумента,
		Запрос
	);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоЗатратамНаВыпускНаработка()

// Функция формирует текст запроса по регистру "Выпуск продукции".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииДоделка()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество
	|
	|ПОМЕСТИТЬ ВыпускПродукцииДоделка
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|	И ВыпускПродукции.КоличествоДоделка <> 0
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииДоделка()

// Процедура формирует временную таблицу "Выпуск продукции доделка".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//
Процедура СформироватьВременнуюТаблицуВыпускуПродукцииДоделка(
	СтруктураШапкиДокумента,
	МенеджерВременныхТаблиц
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоВыпускуПродукцииДоделка();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПоНаработке(
		СтруктураШапкиДокумента,
		Запрос
	);
	
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьВременнуюТаблицуВыпускуПродукцииДоделка()

// Функция формирует текст запроса по временной таблице.
//
// Возвращаемое значение:
//	Запрос – Запроса по выборке выпуска продукции
//
Функция СформироватьЗапросПоВыборкеВыпускаПродукции(
	МенеджерВременныхТаблиц
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.Количество
	|ИЗ
	|	ВыпускПродукцииДоделка КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Подразделение = &Подразделение
	|	И ВыпускПродукции.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|	И ВыпускПродукции.Заказ = &Заказ
	|	И ВыпускПродукции.Продукция = &Продукция
	|	И ВыпускПродукции.ХарактеристикаПродукции = &ХарактеристикаПродукции
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоВыборкеВыпускаПродукции()

// Процедура устанавливает параметры запроса по выборке выпуска продукции.
//
// Параметры:
//	ВыборкаПоЗатратам - ВыборкаИзРезультатаЗапроса - Строка выборки
//	ЗапросПоВыпуску - ВыборкаИзРезультатаЗапроса - Строка выборки
//
Процедура УстановитьПараметрыЗапросаПоВыборкеВыпускаПродукции(
	ВыборкаПоЗатратам,
	ЗапросПоВыпуску
	)
	
	ЗапросПоВыпуску.УстановитьПараметр("Подразделение", ВыборкаПоЗатратам.Подразделение);
	ЗапросПоВыпуску.УстановитьПараметр("НоменклатурнаяГруппа", ВыборкаПоЗатратам.НоменклатурнаяГруппа);
	ЗапросПоВыпуску.УстановитьПараметр("Заказ", ВыборкаПоЗатратам.Заказ);
	ЗапросПоВыпуску.УстановитьПараметр("Продукция", ВыборкаПоЗатратам.Продукция);
	ЗапросПоВыпуску.УстановитьПараметр("ХарактеристикаПродукции", ВыборкаПоЗатратам.ХарактеристикаПродукции);
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоВыборкеВыпускаПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ" И "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ (НАРАБОТКА)"

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции (наработка)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыНаВыпускНаработка - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск (наработка)".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработкаРасход(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	Сумма,
	НаборЗаписейЗатратыНаВыпускНаработка
	)
	
	Если Количество = 0
	   И Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск (наработка)" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Заказ,
	//
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпускНаработка.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.ЗатратыПодразделениеНЗП;
	НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборки.ЗатратыНоменклатурнаяГруппаНЗП;
	НоваяСтрока.ЗаказНЗП = СтрокаВыборки.ЗатратыЗаказНЗП;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпускНаработка.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпускНаработка.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработкаРасход()

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	РаспределениеЗатратПоБазе - Булево - Признак вызова процедуры при распределении затрат по базе
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//	НаборЗаписейЗатратыНаВыпуск - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииСписаниеНаработки(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиВыпуск,
	Количество,
	Сумма,
	НаборЗаписейЗатратыНаВыпуск
	)
	
	Если Количество = 0
	   И Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты, заполняемые по распределенным затратам:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	//
	// Измерения и реквизиты, заполняемые по выпуску продукции:
	//	- СерияПродукции,
	//	- Спецификация,
	//	- ДокументВыпуска
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.СерияПродукции = СтрокаВыборкиВыпуск.СерияПродукции;
	НоваяСтрока.Спецификация = СтрокаВыборкиВыпуск.Спецификация;
	НоваяСтрока.ДокументВыпуска = СтрокаВыборкиВыпуск.ДокументВыпуска;
	
	Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты;
	Иначе
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	КонецЕсли;
	НоваяСтрока.КодОперации = КодОперации;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииСписаниеНаработки()

////////////////////////////////////////////////////////////////////////////////

// Функция проверяет было ли выполнено списание затрат на выпуск по наработке в текущем месяце.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//	Булево - Признак что было выполнено списание затрат по наработке
//
Функция ВыполненоСписаниеЗатратНаВыпускНаработка(СтруктураШапкиДокумента)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Истина КАК ВыполненоСписание
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%СуффиксУчета% КАК ЗатратыНаВыпуск
	|ГДЕ
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И ЗатратыНаВыпуск.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|	И ЗатратыНаВыпуск.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	//ДляРеглУчета И Организация = &Организация
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	РезультатЗапроса = запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции // ВыполненоСписаниеЗатратНаВыпускНаработка()

// Процедура производит распределение затрат на выпуск по наработке.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//	ЗапросПоВыпуску - Запрос - Запрос по выборке выпуска продукции
//	НаборЗаписейЗатратыНаВыпуск - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск продукции"
//	НаборЗаписейЗатратыНаВыпускНаработка - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск продукции (наработка)"
//
Процедура РаспределитьЗатратыНаВыпускНаработка(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	ЗапросПоВыпуску,
	НаборЗаписейЗатратыНаВыпуск,
	НаборЗаписейЗатратыНаВыпускНаработка
	)
	
	МассивКоэф = Новый Массив;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		Количество = ВыборкаПоЗатратам.Количество;
		Сумма = ВыборкаПоЗатратам.Сумма;
		КоэффициентРасхода = ВыборкаПоЗатратам.КоэффициентРасхода;
		КоэффициентРасхода = ?(КоэффициентРасхода > 1, 1, КоэффициентРасхода);
		
		КоличествоРасход = Количество * КоэффициентРасхода;
		СуммаРасход = Сумма * КоэффициентРасхода;
		
		УстановитьПараметрыЗапросаПоВыборкеВыпускаПродукции(
			ВыборкаПоЗатратам,
			ЗапросПоВыпуску
		);
		РезультатаЗапросаПоВыпуску = ЗапросПоВыпуску.Выполнить();
		
		МассивКоэф.Очистить();
		
		ВыборкаПоВыпуску = РезультатаЗапросаПоВыпуску.Выбрать();
		Пока ВыборкаПоВыпуску.Следующий() Цикл
			МассивКоэф.Добавить(ВыборкаПоВыпуску.Количество);
		КонецЦикла;
		
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоРасход, МассивКоэф, 3);
		МассивСумма      = ОбщегоНазначения.РаспределитьПропорционально(СуммаРасход, МассивКоэф, 2);
		
		СписаноКоличество = 0;
		СписаноСумма = 0;
		
		Индекс = 0;
		ВыборкаПоВыпуску.Сбросить();
		Пока ВыборкаПоВыпуску.Следующий() Цикл
			
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			Сумма      = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииСписаниеНаработки(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаПоВыпуску,
				Количество,
				Сумма,
				НаборЗаписейЗатратыНаВыпуск
			);
			
			СписаноКоличество = СписаноКоличество + Количество;
			СписаноСумма = СписаноСумма + Сумма;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		// Формирование движений расход по регистру "Затраты на выпуск (наработка)".
		СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработкаРасход(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			СписаноКоличество,
			СписаноСумма,
			НаборЗаписейЗатратыНаВыпускНаработка
		);
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьЗатратыНаВыпускНаработка()

// Процедура производит списание затрат на выпуск по наработке.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура СписаниеЗатратНаВыпускНаработка(
	СтруктураШапкиДокумента
	) Экспорт
	
	// Списание затрат по наработке выполняем только один раз.
	Если ВыполненоСписаниеЗатратНаВыпускНаработка(СтруктураШапкиДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СформироватьВременнуюТаблицуВыпускуПродукцииДоделка(
		СтруктураШапкиДокумента,
		МенеджерВременныхТаблиц
	);
	
	ЗапросПоВыпуску = СформироватьЗапросПоВыборкеВыпускаПродукции(МенеджерВременныхТаблиц);

	ЗапросПоЗатратам = СформироватьЗапросПоЗатратамНаВыпускНаработка(СтруктураШапкиДокумента);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если РезультатЗапросаПоЗатратам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИмен = Новый Структура("
		|ЗатратыНаВыпускПродукции, 
		|ЗатратыНаВыпускПродукцииНаработка 
		|");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	
	РаспределитьЗатратыНаВыпускНаработка(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоЗатратам,
		ЗапросПоВыпуску,
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
		СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка
	);
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВМеждународномУчете
	   И СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка.Записать(Ложь);
	КонецЕсли;
			
КонецПроцедуры // СписаниеЗатратНаВыпускНаработка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ПРАВИЛЬНОСТИ РАСПРЕДЕЛЕНИЯ ПРОИЗВОДСТВЕННЫХ ЗАТРАТ

// Функция формирует запрос о прямых затратах не соответствующих выпуску продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//	Запрос - Запрос по затратам на выпуск.
//
Функция СформироватьЗапросПоРаспределениюЗатрат(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегЗатраты.Затрата,
	|	РегЗатраты.ХарактеристикаЗатраты,
	|	РегЗатраты.СерияЗатраты,
	|	РегЗатраты.Подразделение,
	|	РегЗатраты.НоменклатурнаяГруппа,
	|	РегЗатраты.СтатьяЗатрат,
	|	РегЗатраты.Продукция,
	|	РегЗатраты.ХарактеристикаПродукции,
	|	РегЗатраты.СерияПродукции,
	|	РегЗатраты.Спецификация,
	|	РегЗатраты.Заказ,
	|	//ДляРеглУчета РегЗатраты.СчетУчета,
	|
	|	СУММА(ЕСТЬNULL(РегВыпуск.КоличествоВыпуск, 0)) КАК КоличествоВыпуск,
	|	СУММА(РегЗатраты.Количество) КАК Количество,
	|	СУММА(РегЗатраты.Сумма) КАК Стоимость
	|	
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК РегЗатраты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РегВыпуск.Подразделение,
	|			РегВыпуск.Продукция,
	|			РегВыпуск.ХарактеристикаПродукции,
	|			РегВыпуск.СерияПродукции,
	|			РегВыпуск.Спецификация,
	|			РегВыпуск.НоменклатурнаяГруппа,
	|			РегВыпуск.Заказ,
	|			//ДляРеглУчета РегВыпуск.СчетУчетаНЗП,
	|			СУММА(РегВыпуск.Количество) КАК КоличествоВыпуск
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК РегВыпуск
	|		ГДЕ
	|			РегВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|			И РегВыпуск.КодОперации <> &КодФиксСтоим
	|			//ДляРеглУчета И РегВыпуск.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			РегВыпуск.Подразделение,
	|			РегВыпуск.Продукция,
	|			РегВыпуск.ХарактеристикаПродукции,
	|			РегВыпуск.СерияПродукции,
	|			РегВыпуск.Спецификация,
	|			РегВыпуск.НоменклатурнаяГруппа,
	|			РегВыпуск.Заказ,
	|			//ДляРеглУчета РегВыпуск.СчетУчетаНЗП,
	|			РегВыпуск.Заказ
	|
	|		) КАК РегВыпуск
	|	ПО
	|		РегВыпуск.Подразделение = РегЗатраты.Подразделение
	|	 	И РегВыпуск.НоменклатурнаяГруппа = РегЗатраты.НоменклатурнаяГруппа
	|	 	И РегВыпуск.Продукция = РегЗатраты.Продукция
	|	 	И РегВыпуск.ХарактеристикаПродукции = РегЗатраты.ХарактеристикаПродукции
	|	 	И РегВыпуск.СерияПродукции = РегЗатраты.СерияПродукции
	|	 	И РегВыпуск.Спецификация = РегЗатраты.Спецификация
	|		И РегВыпуск.Заказ = РегЗатраты.Заказ
	|	 	//ДляРеглУчета И РегВыпуск.СчетУчетаНЗП = РегЗатраты.СчетУчета
	|
	|ГДЕ
	|	РегЗатраты.Период МЕЖДУ &НачДата И &КонДата
	|	И РегЗатраты.КодОперации В (&КодыОпераций)
	|	И (РегВыпуск.КоличествоВыпуск = 0 ИЛИ РегВыпуск.КоличествоВыпуск Есть NULL)
	|	И (РегЗатраты.Количество <> 0 ИЛИ РегЗатраты.Сумма <> 0)
	|	//ДляРеглУчета И РегЗатраты.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗатраты.Затрата,
	|	РегЗатраты.ХарактеристикаЗатраты,
	|	РегЗатраты.СерияЗатраты,
	|	РегЗатраты.Подразделение,
	|	РегЗатраты.Продукция,
	|	РегЗатраты.ХарактеристикаПродукции,
	|	РегЗатраты.СерияПродукции,
	|	РегЗатраты.Спецификация,
	|	РегЗатраты.ДокументВыпуска,
	|	РегЗатраты.СтатьяЗатрат,
	|	РегЗатраты.НоменклатурнаяГруппа,
	|	//ДляРеглУчета РегЗатраты.СчетУчета,
	|	РегЗатраты.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегЗатраты.Затрата,
	|	РегЗатраты.ХарактеристикаЗатраты,
	|	РегЗатраты.СерияЗатраты,
	|	РегЗатраты.Подразделение,
	|	РегЗатраты.Продукция,
	|	РегЗатраты.ХарактеристикаПродукции,
	|	РегЗатраты.СерияПродукции,
	|	РегЗатраты.Спецификация,
	|	РегЗатраты.ДокументВыпуска,
	|	РегЗатраты.СтатьяЗатрат,
	|	РегЗатраты.НоменклатурнаяГруппа,
	|	//ДляРеглУчета РегЗатраты.СчетУчета,
	|	РегЗатраты.Заказ
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	МассивКодыОпераций = Новый Массив;
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодыОпераций);
	
	Запрос.УстановитьПараметр("КодФиксСтоим", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоРаспределениюЗатрат()

// Процедура производит проверку соответствия распределения прямых затрат и выпуска продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ПроверитьПрямыеЗатраты(
	СтруктураШапкиДокумента
	) Экспорт
	
	Запрос = СформироватьЗапросПоРаспределениюЗатрат(СтруктураШапкиДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаСообщения = УправлениеЗатратами.СформироватьРасшифровкуОткрытияОтчета("АнализРаспределенияЗатрат");
	
	СтрокаГруппы = ОбщегоНазначения.Сообщение(
		"Обнаружены расхождения аналитики выпуска продукции и аналитики распределения затрат!", 
		Перечисления.ВидыСообщений.Ошибка,
		, // Заголовок
		РасшифровкаСообщения,
		, // РодительскаяСтрока
		Ложь // РаскрытьСообщение
	);
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		
		Если Обход.Количество = 0 И Обход.Стоимость = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обход.Количество <> 0 И Обход.КоличествоВыпуск = 0 Тогда
			ОбщегоНазначения.Сообщение("Количество, распределенное на выпуск, не соответствует аналитике выпуска продукции:
				|Подразделение: " + Обход.Подразделение
				+ ?(Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, "
				|Счет учета: " + Обход.СчетУчета, "") + "
				|Продукция: " + Обход.Продукция + ", " + Обход.ХарактеристикаПродукции + ", " + Обход.СерияПродукции + "
				|Номенклатурная группа: " + 	Обход.НоменклатурнаяГруппа + "
				|Спецификация: " + 	Обход.Спецификация + "
				|Заказ: " + 	Обход.Заказ + "
				|Статья затрат: " + Обход.СтатьяЗатрат + "
				|Затрата: " + Обход.Затрата + ", " + Обход.ХарактеристикаЗатраты + ", " + Обход.СерияЗатраты + "
				|Количество: " + Обход.Количество + "
				|",
				СтатусСообщения.Важное,
				, // Заголовок
				, //РасшифровкаСообщения
				СтрокаГруппы
			);
		ИначеЕсли Обход.Стоимость <> 0 И Обход.КоличествоВыпуск = 0 Тогда
			ОбщегоНазначения.Сообщение("Сумма, распределенная на выпуск, не соответствует аналитике выпуска продукции:
				|Подразделение: " + Обход.Подразделение
				+?(Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, "
				|Счет учета: " + Обход.СчетУчета, "") + "
				|Продукция: " + Обход.Продукция + ", " + Обход.ХарактеристикаПродукции + ", " + Обход.СерияПродукции + "
				|Номенклатурная группа: " + 	Обход.НоменклатурнаяГруппа + "
				|Спецификация: " + 	Обход.Спецификация + "
				|Заказ: " + 	Обход.Заказ + "
				|Статья затрат: " + Обход.СтатьяЗатрат + "
				|Сумма: " + Обход.Стоимость + "
				|",
				СтатусСообщения.Важное,
				, // Заголовок
				, //РасшифровкаСообщения
				СтрокаГруппы
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПрямыеЗатраты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА СЕБЕСТОИМОСТИ ПО ПРЯМЫМ ЗАТРАТАМ

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "НЕЗАВЕРШЕННОЕ ПРОИЗВОДСТВО"

// Функция формирует текст запроса по регистру "Незавершенное производство".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоНезавершенномуПроизводству()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	ЕСТЬNULL(НезавершенноеПроизводство.Затрата.ВестиУчетПоСериямВНЗП, Ложь) КАК ВестиУчетПоСериямВНЗП,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	НезавершенноеПроизводство.Заказ,
	|
	|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь) КАК ВстречныйВыпуск,
	|	
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	
	|	СУММА(НезавершенноеПроизводство.Количество) КАК Количество,
	|	СУММА(НезавершенноеПроизводство.Стоимость) КАК Стоимость,
	|	//ДляНалУчета СУММА(НезавершенноеПроизводство.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	//ДляНалУчета СУММА(НезавершенноеПроизводство.ВременнаяРазница) КАК ВременнаяРазница,
	|
	|	СУММА(НезавершенноеПроизводство.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(НезавершенноеПроизводство.КоличествоРасход) КАК КоличествоРасход,
	|	
	|	//ДляНалУчета СУММА(НезавершенноеПроизводство.ПостояннаяРазницаОстаток) КАК ПостояннаяРазницаОстаток,
	|	//ДляНалУчета СУММА(НезавершенноеПроизводство.ВременнаяРазницаОстаток) КАК ВременнаяРазницаОстаток,
	|	СУММА(НезавершенноеПроизводство.СтоимостьОстаток) КАК СтоимостьОстаток
	|	
	|ИЗ (
	|	
	|	// Остатки НЗП на начало месяца.
	|	ВЫБРАТЬ 
	|		НезавершенноеПроизводство.Подразделение,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.Заказ,
	|		
	|		//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|		
	|		0 КАК Количество,
	|		0 КАК Стоимость,
	|		//ДляНалУчета 0 КАК ПостояннаяРазница,
	|		//ДляНалУчета 0 КАК ВременнаяРазница,
	|		
	|		НезавершенноеПроизводство.КоличествоОстаток,
	|		0 КАК КоличествоРасход,
	|		
	|		//ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток,
	|		//ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток,
	|		НезавершенноеПроизводство.СтоимостьОстаток
	|		
	|	ИЗ
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&НачДата, 
	|			Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|			И (Затрата В (&МассивЗатрат)
	|				ИЛИ Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск
	|				ИЛИ Затрата = Неопределено)
	|			//ДляРеглУчета И Организация = &Организация
	|			
	|			) КАК НезавершенноеПроизводство
	|			
	|	ОБЪЕДИНИТЬ ВСЕ		
	|		
	|	// Добавим приход в НЗП в течение месяца.
	|	ВЫБРАТЬ 
	|		НезавершенноеПроизводство.Подразделение,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.Заказ,
	|		
	|		//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|		
	|		0,
	|		0,
	|		//ДляНалУчета 0,
	|		//ДляНалУчета 0,
	|		НезавершенноеПроизводство.КоличествоПриход,
	|		0,
	|
	|		//ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаПриход,
	|		//ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаПриход,
	|		НезавершенноеПроизводство.СтоимостьПриход
	|
	|	ИЗ
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Обороты(&НачГраница, &КонГраница, , 
	|			Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|			И (Затрата В (&МассивЗатрат)
	|				ИЛИ Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск
	|				ИЛИ Затрата = Неопределено)
	|			//ДляРеглУчета И Организация = &Организация
	|			
	|			) КАК НезавершенноеПроизводство
	|		       	
	|	ОБЪЕДИНИТЬ ВСЕ
	|		
	|	// Вычтем возврат из НЗП.
	|	ВЫБРАТЬ 
	|		НезавершенноеПроизводство.Подразделение,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.Заказ,
	|		
	|		//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|		
	|		0,
	|		0,
	|		//ДляНалУчета 0,
	|		//ДляНалУчета 0,
	|		СУММА(
	|			ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|				-НезавершенноеПроизводство.Количество
	|			ИНАЧЕ
	|				0
	|           КОНЕЦ
	|		) КАК КоличествоОстаток,
	|		СУММА(
	|			ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела = 1 ТОГДА
	|				НезавершенноеПроизводство.Количество
	|			ИНАЧЕ
	|				0
	|           КОНЕЦ
	|		) КАК КоличествоРасход,
	|		
	|		//ДляНалУчета СУММА(
	|		//ДляНалУчета 	ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|		//ДляНалУчета 		-НезавершенноеПроизводство.ПостояннаяРазница
	|		//ДляНалУчета 	ИНАЧЕ
	|		//ДляНалУчета 		0
	|       //ДляНалУчета   КОНЕЦ
	|		//ДляНалУчета ),
	|		//ДляНалУчета СУММА(
	|		//ДляНалУчета 	ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|		//ДляНалУчета 		-НезавершенноеПроизводство.ВременнаяРазница
	|		//ДляНалУчета 	ИНАЧЕ
	|		//ДляНалУчета 		0
	|       //ДляНалУчета 	КОНЕЦ
	|		//ДляНалУчета ),
	|		СУММА(
	|			ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|				-НезавершенноеПроизводство.Стоимость
	|			ИНАЧЕ
	|				0
	|           КОНЕЦ
	|		)
	|
	|	ИЗ
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета% КАК НезавершенноеПроизводство
	|	ГДЕ
	|		НезавершенноеПроизводство.Период МЕЖДУ &НачДата И &КонДата
	|		И НезавершенноеПроизводство.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И НезавершенноеПроизводство.ВидДвижения = &ВидДвиженияРасход
	|		И НезавершенноеПроизводство.КодОперации В (&КодыОперВозврата)
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости 
	|		И НезавершенноеПроизводство.Активность
//конец изменений 
	|		И (НезавершенноеПроизводство.Затрата В (&МассивЗатрат)
	|			ИЛИ НезавершенноеПроизводство.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск
	|			ИЛИ НезавершенноеПроизводство.Затрата = Неопределено)
	|			
	|		//ДляРеглУчета И НезавершенноеПроизводство.Организация = &Организация
	|
	|	СГРУППИРОВАТЬ ПО
	|		НезавершенноеПроизводство.Подразделение,
	|		//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.Заказ
	|		
	|	// Добавим данные о затратах на выпуск.
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
	|			ЗатратыНаВыпуск.Подразделение
	|		ИНАЧЕ
	|			ЗатратыНаВыпуск.ПодразделениеНЗП
	|		КОНЕЦ,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата.ВестиУчетПоСериямВНЗП ТОГДА
	|			ЗатратыНаВыпуск.СерияЗатраты
	|		ИНАЧЕ
	|			&ПустаяСерия
	|		КОНЕЦ КАК СерияЗатраты,
	|
	|		ЗатратыНаВыпуск.ЗаказНЗП,
	|			
	|		//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|			
	|		СУММА(ЗатратыНаВыпуск.Количество) КАК Количество,
	|		СУММА(ЗатратыНаВыпуск.Сумма) КАК Стоимость,
	|		//ДляНалУчета СУММА(ЗатратыНаВыпуск.ПостояннаяРазница) КАК ПостояннаяРазница,
	|		//ДляНалУчета СУММА(ЗатратыНаВыпуск.ВременнаяРазница) КАК ВременнаяРазница,
	|
	|		0,
	|		0,
	|		//ДляНалУчета 0,
	|		//ДляНалУчета 0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|	ГДЕ
	|		ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|		И ЗатратыНаВыпуск.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И ЗатратыНаВыпуск.КодОперации В (&КодыОперацийЗатратыНаВыпуск)
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости 
	|		И ЗатратыНаВыпуск.Активность
//конец изменений 
	|		И ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &СтатусМатериальныхЗатратПринятые
	|		И (ЗатратыНаВыпуск.Затрата В (&МассивЗатрат)
	|			ИЛИ ЗатратыНаВыпуск.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск
	|			ИЛИ ЗатратыНаВыпуск.Затрата = Неопределено)
	|		//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
	|			ЗатратыНаВыпуск.Подразделение
	|		ИНАЧЕ
	|			ЗатратыНаВыпуск.ПодразделениеНЗП
	|		КОНЕЦ,
	|		//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата.ВестиУчетПоСериямВНЗП ТОГДА
	|			ЗатратыНаВыпуск.СерияЗатраты
	|		ИНАЧЕ
	|			&ПустаяСерия
	|		КОНЕЦ,
	|
	|		ЗатратыНаВыпуск.ЗаказНЗП
	|		
	|	) КАК НезавершенноеПроизводство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			МИНИМУМ(Распределение.ВстречныйВыпуск) КАК ВстречныйВыпуск,
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|		ИЗ			
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
	|		ГДЕ
	|			Распределение.Период МЕЖДУ &НачДата И &КонДата
	|			И Распределение.НомерПередела = &НомерПередела
	|			//ДляРеглУчета И Распределение.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|			
	|		) КАК Распределение
	|	ПО 
	|		НезавершенноеПроизводство.Затрата = Распределение.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = Распределение.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = Распределение.СерияЗатраты
	|		И НезавершенноеПроизводство.СтатьяЗатрат = Распределение.СтатьяЗатрат
	|	
	|СГРУППИРОВАТЬ ПО
	|	НезавершенноеПроизводство.Подразделение,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	ЕСТЬNULL(НезавершенноеПроизводство.Затрата.ВестиУчетПоСериямВНЗП, Ложь),
	|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь),
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	НезавершенноеПроизводство.Заказ
	|	
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоНезавершенномуПроизводству()

// Процедура устанавливает параметры запроса по незавершенному производству.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросПоНезавершенномуПроизводству(
	СтруктураШапкиДокумента,
	СпособРасчета, 
	Запрос
	) 
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусМатериальныхЗатратПринятые", Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	МассивКодыОперацийВозврата = Новый Массив;
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс);
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПФикс);
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент);
	Запрос.УстановитьПараметр("КодыОперВозврата", МассивКодыОперацийВозврата);
	
	МассивКодыОпераций = Новый Массив;
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацийЗатратыНаВыпуск", МассивКодыОпераций);
	
КонецПроцедуры // УстановитьПараметрыЗапросПоНезавершенномуПроизводству()

// Функция формирует запрос по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Незавершенное производство".
//
Функция СформироватьЗапросПоНезавершенномуПроизводству(
	СтруктураШапкиДокумента,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоНезавершенномуПроизводству();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросПоНезавершенномуПроизводству(
		СтруктураШапкиДокумента,
		СпособРасчета,
		Запрос
		);
		
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоНезавершенномуПроизводству()()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "ЗАТРАТЫ НА ВЫПУСК"

// Функция формирует текст запроса по регистру "Затраты на выпуск".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоЗатратамНаВыпуск()
	
 ТекстЗапроса =  "ВЫБРАТЬ
         |	МИНИМУМ(Распределение.КорректировкаНЗП) КАК КорректировкаНЗП,
         |	МИНИМУМ(Распределение.ОприходованиеНЗП) КАК ОприходованиеНЗП,
         |	МИНИМУМ(Распределение.ВозвратИзНЗП) КАК ВозвратИзНЗП,
         |	МИНИМУМ(Распределение.ВстречныйВыпуск) КАК ВстречныйВыпуск,
         |	Распределение.Подразделение КАК Подразделение,
         |	Распределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
         |	Распределение.СтатьяЗатрат КАК СтатьяЗатрат,
         |	Распределение.Затрата КАК Затрата,
         |	Распределение.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
         |	Распределение.СерияЗатраты КАК СерияЗатраты
         |ПОМЕСТИТЬ Распределение
         |ИЗ
         |	РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
         |ГДЕ
         |	Распределение.Период МЕЖДУ &НачДата И &КонДата
         |	И Распределение.НомерПередела = &НомерПередела
         |	//ДляРеглУчета И Распределение.Организация = &Организация
         |
         |СГРУППИРОВАТЬ ПО
         |	Распределение.Подразделение,
         |	Распределение.НоменклатурнаяГруппа,
         |	Распределение.СтатьяЗатрат,
         |	Распределение.Затрата,
         |	Распределение.ХарактеристикаЗатраты,
         |	Распределение.СерияЗатраты
         |
         |ИНДЕКСИРОВАТЬ ПО
         |	Подразделение,
         |	Затрата,
         |	ХарактеристикаЗатраты,
         |	СерияЗатраты,
         |	НоменклатурнаяГруппа,
         |	СтатьяЗатрат
         |;
         |
         |////////////////////////////////////////////////////////////////////////////////
         |ВЫБРАТЬ
         |	ВстречныйВыпускПродукции.Продукция КАК Продукция,
         |	ВстречныйВыпускПродукции.Затрата КАК Затрата,
         |	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаЗатраты,
         |	ВыпускПродукции.СерияПродукции КАК СерияЗатраты,
         |	ИСТИНА КАК ВстречныйВыпуск
         |ПОМЕСТИТЬ РегистрВстречныйВыпуск
         |ИЗ
         |	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
         |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
         |			ВыпускПродукции.Продукция КАК Продукция,
         |			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
         |			ВЫБОР
         |				КОГДА ВыпускПродукции.Продукция.ВестиУчетПоСериямВНЗП
         |					ТОГДА ВыпускПродукции.СерияПродукции
         |				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
         |			КОНЕЦ КАК СерияПродукции
         |		ИЗ
         |			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
         |		ГДЕ
         |			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости 		 
		 |		   И 	ВыпускПродукции.Активность
//конец изменений 		 
         |			И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
         |//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
		 |		) КАК ВыпускПродукции
         |		ПО ВстречныйВыпускПродукции.Затрата = ВыпускПродукции.Продукция
         |ГДЕ
         |	ВстречныйВыпускПродукции.СпособОценкиСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости)
         |	И НЕ ВыпускПродукции.Продукция ЕСТЬ NULL 
         |
         |СГРУППИРОВАТЬ ПО
         |	ВстречныйВыпускПродукции.Продукция,
         |	ВстречныйВыпускПродукции.Затрата,
         |	ВыпускПродукции.ХарактеристикаПродукции,
         |	ВыпускПродукции.СерияПродукции
         |
         |ИНДЕКСИРОВАТЬ ПО
         |	Продукция,
         |	СерияЗатраты,
         |	Затрата,
         |	ХарактеристикаЗатраты
         |;
         |
         |////////////////////////////////////////////////////////////////////////////////
         |ВЫБРАТЬ
         |	ИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
         |	ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
         |	ИсключаемаяНоменклатура.СерияНоменклатуры КАК СерияНоменклатуры,
         |	ИСТИНА КАК ЕстьИсключаемаяНоменклатура
         |ПОМЕСТИТЬ ИсключаемаяНоменклатура
         |ИЗ
         |	РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения%СуффиксОрганизаций% КАК ИсключаемаяНоменклатура
         |ГДЕ
         |	ИсключаемаяНоменклатура.Период МЕЖДУ &НачДата И &КонДата
         |	И (&РасчетКосвенныхЗатрат
         |			ИЛИ &РасчетЗатратВстречногоВыпуска)
         |//ДляРеглУчета	И ИсключаемаяНоменклатура.Организация = &Организация
         |
         |СГРУППИРОВАТЬ ПО
         |	ИсключаемаяНоменклатура.Номенклатура,
         |	ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры,
         |	ИсключаемаяНоменклатура.СерияНоменклатуры
         |
         |ИНДЕКСИРОВАТЬ ПО
         |	Номенклатура,
         |	ХарактеристикаНоменклатуры,
         |	СерияНоменклатуры
         |;
         |
         |////////////////////////////////////////////////////////////////////////////////
         |ВЫБРАТЬ
         |	ВыпускПродукции.Подразделение КАК Подразделение,
         |	ВыпускПродукции.Продукция КАК Продукция,
         |	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
         |	ВыпускПродукции.СерияПродукции КАК СерияПродукции,
         |	ВыпускПродукции.Спецификация КАК Спецификация,
         |	ВыпускПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
         |	ВыпускПродукции.Заказ КАК Заказ,
         |//ДляРеглУчета 	ВыпускПродукции.СчетУчетаНЗП КАК СчетУчетаНЗП,
         |	ИСТИНА КАК ЕстьВыпускПродукции
         |ПОМЕСТИТЬ ВыпускПродукции
         |ИЗ
         |	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
         |ГДЕ
         |	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
         |	И ВыпускПродукции.КодОперации <> &ВыпускПродукцииПоФиксированнойСтоимости
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости 
         |	И ВыпускПродукции.Активность
//конец изменений 
         |//ДляРеглУчета	И ВыпускПродукции.Организация = &Организация
         |
         |СГРУППИРОВАТЬ ПО
         |	ВыпускПродукции.Подразделение,
         |	ВыпускПродукции.НоменклатурнаяГруппа,
         |	ВыпускПродукции.ХарактеристикаПродукции,
         |//ДляРеглУчета	ВыпускПродукции.СчетУчетаНЗП,
         |	ВыпускПродукции.Спецификация,
         |	ВыпускПродукции.СерияПродукции,
         |	ВыпускПродукции.Продукция,
         |	ВыпускПродукции.Заказ
         |
         |ИНДЕКСИРОВАТЬ ПО
         |	Подразделение,
         |	НоменклатурнаяГруппа,
         |	Продукция,
         |	ХарактеристикаПродукции,
         |	СерияПродукции,
         |	Спецификация,
         |	Заказ
         |//ДляРеглУчета	,СчетУчетаНЗП
         |;
         |
         |////////////////////////////////////////////////////////////////////////////////
         |ВЫБРАТЬ
         |//ДляРеглУчета	ЗатратыНаВыпуск.Организация,
         |//ДляРеглУчета	ЗатратыНаВыпуск.СчетУчета,
         |	ЗатратыНаВыпуск.Подразделение,
         |	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
         |	ЗатратыНаВыпуск.Продукция,
         |	ЗатратыНаВыпуск.ХарактеристикаПродукции,
         |	ЗатратыНаВыпуск.СерияПродукции,
         |	ЗатратыНаВыпуск.Спецификация,
         |	ЗатратыНаВыпуск.Заказ,
         |	ЗатратыНаВыпуск.ДокументВыпуска,
         |	ЗатратыНаВыпуск.КодОперации,
         |	ЗатратыНаВыпуск.СтатьяЗатрат,
         |	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
         |	ЗатратыНаВыпуск.Затрата,
         |	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
         |	ЗатратыНаВыпуск.СерияЗатраты,
         |	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
         |	ЗатратыНаВыпуск.ЗаказНЗП,
         |	ЗатратыНаВыпуск.ПодразделениеНЗП,
         |	ВЫБОР
         |		КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение
         |			ТОГДА ЗатратыНаВыпуск.Подразделение
         |		ИНАЧЕ ЗатратыНаВыпуск.ПодразделениеНЗП
         |	КОНЕЦ КАК ПодразделениеСписанияНЗП,
         |	Распределение.КорректировкаНЗП,
         |	Распределение.ОприходованиеНЗП,
         |	Распределение.ВозвратИзНЗП,
         |	ЕСТЬNULL(Распределение.ВстречныйВыпуск, ЛОЖЬ) КАК ВстречныйВыпуск,
         |	СУММА(ЗатратыНаВыпуск.Сумма) КАК Стоимость,
         |	СУММА(ЗатратыНаВыпуск.Количество) КАК Количество,
		 |	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ПостояннаяРазница) КАК ПостояннаяРазница,
		 |	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ВременнаяРазница) КАК ВременнаяРазница,
         |	ЕСТЬNULL(ВыпускПродукции.ЕстьВыпускПродукции, ЛОЖЬ) КАК ЕстьВыпускПродукции,
         |	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, ЛОЖЬ) КАК ЗатратаВстречногоВыпуска,
         |	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, ЛОЖЬ) КАК ЕстьИсключаемаяНоменклатура
         |ИЗ
         |	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета%  КАК ЗатратыНаВыпуск
         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Распределение КАК Распределение
         |		ПО ЗатратыНаВыпуск.Подразделение = Распределение.Подразделение
         |			И ЗатратыНаВыпуск.Затрата = Распределение.Затрата
         |			И ЗатратыНаВыпуск.ХарактеристикаЗатраты = Распределение.ХарактеристикаЗатраты
         |			И ЗатратыНаВыпуск.СерияЗатраты = Распределение.СерияЗатраты
         |			И ЗатратыНаВыпуск.НоменклатурнаяГруппа = Распределение.НоменклатурнаяГруппа
         |			И ЗатратыНаВыпуск.СтатьяЗатрат = Распределение.СтатьяЗатрат
         |		ЛЕВОЕ СОЕДИНЕНИЕ ВыпускПродукции КАК ВыпускПродукции
         |		ПО ЗатратыНаВыпуск.Подразделение = ВыпускПродукции.Подразделение
         |			И ЗатратыНаВыпуск.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
         |			И ЗатратыНаВыпуск.Продукция = ВыпускПродукции.Продукция
         |			И ЗатратыНаВыпуск.ХарактеристикаПродукции = ВыпускПродукции.ХарактеристикаПродукции
         |			И ЗатратыНаВыпуск.СерияПродукции = ВыпускПродукции.СерияПродукции
         |			И ЗатратыНаВыпуск.Спецификация = ВыпускПродукции.Спецификация
         |			И ЗатратыНаВыпуск.Заказ = ВыпускПродукции.Заказ
         |//ДляРеглУчета		И ЗатратыНаВыпуск.СчетУчета = ВыпускПродукции.СчетУчетаНЗП
         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрВстречныйВыпуск КАК РегистрВстречныйВыпуск
         |		ПО ЗатратыНаВыпуск.Продукция = РегистрВстречныйВыпуск.Продукция
         |			И ЗатратыНаВыпуск.Затрата = РегистрВстречныйВыпуск.Затрата
         |			И ЗатратыНаВыпуск.ХарактеристикаЗатраты = РегистрВстречныйВыпуск.ХарактеристикаЗатраты
         |			И ЗатратыНаВыпуск.СерияЗатраты = РегистрВстречныйВыпуск.СерияЗатраты
         |		ЛЕВОЕ СОЕДИНЕНИЕ ИсключаемаяНоменклатура КАК ИсключаемаяНоменклатура
         |		ПО ЗатратыНаВыпуск.Продукция = ИсключаемаяНоменклатура.Номенклатура
         |			И ЗатратыНаВыпуск.ХарактеристикаПродукции = ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры
         |			И ЗатратыНаВыпуск.СерияПродукции = ИсключаемаяНоменклатура.СерияНоменклатуры
         |ГДЕ
         |	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости 
		|	И ЗатратыНаВыпуск.Активность
//конец изменений 
         |	И ЗатратыНаВыпуск.КодОперации В(&КодыОпераций)
         |//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
		 |//ДляНалУчета И ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &СтатусМатериальныхЗатратПринятые
		 |//ДляНалУчета И ЗатратыНаВыпуск.СчетУчета <> &СчетЕН
         |	И (Распределение.КорректировкаНЗП
         |				И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка)
         |			ИЛИ НЕ Распределение.КорректировкаНЗП
         |				И НЕ ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка))
         |	И (Распределение.ВозвратИзНЗП
         |				И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат)
         |			ИЛИ НЕ Распределение.ВозвратИзНЗП
         |				И НЕ ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат))
         |	И (Распределение.ОприходованиеНЗП
         |				И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходованиеНЗП)
         |			ИЛИ НЕ Распределение.ОприходованиеНЗП
         |				И НЕ ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходованиеНЗП))
         |
         |СГРУППИРОВАТЬ ПО
         |//ДляРеглУчета	ЗатратыНаВыпуск.Организация,
         |//ДляРеглУчета	ЗатратыНаВыпуск.СчетУчета,
         |	ЗатратыНаВыпуск.Подразделение,
         |	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
         |	ЗатратыНаВыпуск.Продукция,
         |	ЗатратыНаВыпуск.ХарактеристикаПродукции,
         |	ЗатратыНаВыпуск.СерияПродукции,
         |	ЗатратыНаВыпуск.Спецификация,
         |	ЗатратыНаВыпуск.Заказ,
         |	ЗатратыНаВыпуск.ДокументВыпуска,
         |	ЗатратыНаВыпуск.КодОперации,
         |	ЗатратыНаВыпуск.СтатьяЗатрат,
         |	ЗатратыНаВыпуск.Затрата,
         |	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
         |	ЗатратыНаВыпуск.СерияЗатраты,
         |	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
         |	ЗатратыНаВыпуск.ЗаказНЗП,
         |	ЗатратыНаВыпуск.ПодразделениеНЗП,
         |	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат,
         |	ВЫБОР
         |		КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение
         |			ТОГДА ЗатратыНаВыпуск.Подразделение
         |		ИНАЧЕ ЗатратыНаВыпуск.ПодразделениеНЗП
         |	КОНЕЦ,
         |	Распределение.КорректировкаНЗП,
         |	Распределение.ОприходованиеНЗП,
         |	Распределение.ВозвратИзНЗП,
         |	ЕСТЬNULL(Распределение.ВстречныйВыпуск, ЛОЖЬ),
         |	ЕСТЬNULL(ВыпускПродукции.ЕстьВыпускПродукции, ЛОЖЬ),
         |	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, ЛОЖЬ),
         |	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, ЛОЖЬ)
		 |
 		 |УПОРЯДОЧИТЬ ПО
		 |	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
		 |	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
		 |	ПодразделениеСписанияНЗП,
		 |	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
		 |	ЗатратыНаВыпуск.ЗаказНЗП,
		 |	ЗатратыНаВыпуск.СтатьяЗатрат,
		 |	ЗатратыНаВыпуск.Затрата,
		 |	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
		 |	ЗатратыНаВыпуск.СерияЗатраты,
		 |	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь) Убыв,
		 |
		 |	ЗатратыНаВыпуск.Подразделение,
		 |	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
		 |	ЗатратыНаВыпуск.Продукция,
		 |	ЗатратыНаВыпуск.ХарактеристикаПродукции,
		 |	ЗатратыНаВыпуск.СерияПродукции,
		 |	ЗатратыНаВыпуск.Спецификация,
		 |	ЗатратыНаВыпуск.Заказ,
		 |	ЗатратыНаВыпуск.ДокументВыпуска,
		 |	ЗатратыНаВыпуск.КодОперации";	
		
	    возврат ТекстЗапроса;
		ТекстЗапроса = 
				//начало изменений оптим р/с
						"ВЫБРАТЬ
		               |//ДляРеглУчета	ЗатратыНаВыпуск.Организация,
		               |//ДляРеглУчета	ЗатратыНаВыпуск.СчетУчета,
		               |	ЗатратыНаВыпуск.Подразделение,
		               |	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
		               |	ЗатратыНаВыпуск.Продукция,
		               |	ЗатратыНаВыпуск.ХарактеристикаПродукции,
		               |	ЗатратыНаВыпуск.СерияПродукции,
		               |	ЗатратыНаВыпуск.Спецификация,
		               |	ЗатратыНаВыпуск.Заказ,
		               |	ЗатратыНаВыпуск.ДокументВыпуска,
		               |	ЗатратыНаВыпуск.КодОперации,
		               |	ЗатратыНаВыпуск.СтатьяЗатрат,
		               |	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
		               |	ЗатратыНаВыпуск.Затрата,
		               |	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
		               |	ЗатратыНаВыпуск.СерияЗатраты,
		               |	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
		               |	ЗатратыНаВыпуск.ЗаказНЗП,
		               |	ЗатратыНаВыпуск.ПодразделениеНЗП,
		               |	СУММА(ЗатратыНаВыпуск.Сумма) КАК Сумма,
					   |	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ПостояннаяРазница) КАК ПостояннаяРазница,
					   |	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ВременнаяРазница) КАК ВременнаяРазница,
		               |	СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
		               |ПОМЕСТИТЬ ЗатратыНаВыпуск
		               |ИЗ
		               |	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
		               |ГДЕ
		               |	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
		               |	И ЗатратыНаВыпуск.КодОперации В(&КодыОпераций)
		               |	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
		               |
		               |СГРУППИРОВАТЬ ПО
		               |//ДляРеглУчета ЗатратыНаВыпуск.Организация,
		               |//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
		               |	ЗатратыНаВыпуск.Подразделение,
		               |	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
		               |	ЗатратыНаВыпуск.Продукция,
		               |	ЗатратыНаВыпуск.ХарактеристикаПродукции,
		               |	ЗатратыНаВыпуск.СерияПродукции,
		               |	ЗатратыНаВыпуск.Спецификация,
		               |	ЗатратыНаВыпуск.Заказ,
		               |	ЗатратыНаВыпуск.ДокументВыпуска,
		               |	ЗатратыНаВыпуск.КодОперации,
		               |	ЗатратыНаВыпуск.СтатьяЗатрат,
		               |	ЗатратыНаВыпуск.Затрата,
		               |	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
		               |	ЗатратыНаВыпуск.СерияЗатраты,
		               |	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
		               |	ЗатратыНаВыпуск.ЗаказНЗП,
		               |	ЗатратыНаВыпуск.ПодразделениеНЗП,
		               |	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат
					   |;
					 //конец изменений					   
						|ВЫБРАТЬ
						|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
						|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
						|	
						|	ЗатратыНаВыпуск.Подразделение,
						|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
						|	ЗатратыНаВыпуск.Продукция,
						|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
						|	ЗатратыНаВыпуск.СерияПродукции,
						|	ЗатратыНаВыпуск.Спецификация,
						|	ЗатратыНаВыпуск.Заказ,
						|	ЗатратыНаВыпуск.ДокументВыпуска,
						|	ЗатратыНаВыпуск.КодОперации,
						|	
						|	ЗатратыНаВыпуск.СтатьяЗатрат,
						|	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
						|	ЗатратыНаВыпуск.Затрата,
						|	
						|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
						|	ЗатратыНаВыпуск.СерияЗатраты,
						|	
						|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
						|	ЗатратыНаВыпуск.ЗаказНЗП,
						|	ЗатратыНаВыпуск.ПодразделениеНЗП,
						|	
						|	ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
						|		ЗатратыНаВыпуск.Подразделение
						|	ИНАЧЕ
						|		ЗатратыНаВыпуск.ПодразделениеНЗП
						|	КОНЕЦ КАК ПодразделениеСписанияНЗП,
						|
						|	Распределение.КорректировкаНЗП,
						|	Распределение.ОприходованиеНЗП,
						|	Распределение.ВозвратИзНЗП,
						|	
						|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь) КАК ВстречныйВыпуск,
						|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь) КАК ЗатратаВстречногоВыпуска,
						|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь) КАК ЕстьИсключаемаяНоменклатура,
						|	
						|	ЕСТЬNULL(ВыпускПродукции.ЕстьВыпускПродукции, Ложь) КАК ЕстьВыпускПродукции,
						|	
						|	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ПостояннаяРазница) КАК ПостояннаяРазница,
						|	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ВременнаяРазница) КАК ВременнаяРазница,
						|	СУММА(ЗатратыНаВыпуск.Сумма) КАК Стоимость,
						|	СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
						|	
						|ИЗ
						//начало изменений оптим р/с
						//|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
						| ЗатратыНаВыпуск КАК ЗатратыНаВыпуск
						//конец изменений
						|
						|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
						|		ВЫБРАТЬ
						|			МИНИМУМ(Распределение.КорректировкаНЗП) КАК КорректировкаНЗП,
						|			МИНИМУМ(Распределение.ОприходованиеНЗП) КАК ОприходованиеНЗП,
						|			МИНИМУМ(Распределение.ВозвратИзНЗП) КАК ВозвратИзНЗП,
						|			МИНИМУМ(Распределение.ВстречныйВыпуск) КАК ВстречныйВыпуск,
						|			
						|			Распределение.Подразделение,
						|			Распределение.НоменклатурнаяГруппа,
						|			Распределение.СтатьяЗатрат,
						|			Распределение.Затрата,
						|			Распределение.ХарактеристикаЗатраты,
						|			Распределение.СерияЗатраты
						|		ИЗ			
						|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
						|		ГДЕ
						|			Распределение.Период МЕЖДУ &НачДата И &КонДата
						|			И Распределение.НомерПередела = &НомерПередела
						|			//ДляРеглУчета И Распределение.Организация = &Организация
						|			
						|		СГРУППИРОВАТЬ ПО
						|			Распределение.Подразделение,
						|			Распределение.НоменклатурнаяГруппа,
						|			Распределение.СтатьяЗатрат,
						|			Распределение.Затрата,
						|			Распределение.ХарактеристикаЗатраты,
						|			Распределение.СерияЗатраты
						|		) КАК Распределение
						|	ПО 
						|		ЗатратыНаВыпуск.Подразделение = Распределение.Подразделение
						|		И ЗатратыНаВыпуск.Затрата = Распределение.Затрата
						|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = Распределение.ХарактеристикаЗатраты
						|		И ЗатратыНаВыпуск.СерияЗатраты = Распределение.СерияЗатраты
						|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа = Распределение.НоменклатурнаяГруппа
						|		И ЗатратыНаВыпуск.СтатьяЗатрат = Распределение.СтатьяЗатрат
						|
						|	ЛЕВОЕ СОЕДИНЕНИЕ (
						|		ВЫБРАТЬ
						|			ВстречныйВыпускПродукции.Продукция,
						|			ВстречныйВыпускПродукции.Затрата,
						|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаЗатраты,
						|			ВыпускПродукции.СерияПродукции КАК СерияЗатраты,
						|			Истина КАК ВстречныйВыпуск
						|		ИЗ
						|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, 
						|				) КАК ВстречныйВыпускПродукции
						|			
						|			ЛЕВОЕ СОЕДИНЕНИЕ (
						|				ВЫБРАТЬ РАЗЛИЧНЫЕ
						|					ВыпускПродукции.Продукция,
						|					ВыпускПродукции.ХарактеристикаПродукции,
						|					ВЫБОР КОГДА ВыпускПродукции.Продукция.ВестиУчетПоСериямВНЗП ТОГДА
						|						ВыпускПродукции.СерияПродукции
						|					ИНАЧЕ
						|						ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
						|					КОНЕЦ КАК СерияПродукции
						|				ИЗ
						|					РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
						|				ГДЕ
						|					ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
						|					И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
						|					//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
						|					
						|				) КАК ВыпускПродукции
						|			ПО
						|				ВстречныйВыпускПродукции.Затрата = ВыпускПродукции.Продукция
						|
						|		ГДЕ
						|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости)
						|			И Не ВыпускПродукции.Продукция ЕСТЬ NULL
						|
						|		) КАК РегистрВстречныйВыпуск
						|	ПО
						|		ЗатратыНаВыпуск.Продукция = РегистрВстречныйВыпуск.Продукция
						|		И ЗатратыНаВыпуск.Затрата = РегистрВстречныйВыпуск.Затрата
						|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = РегистрВстречныйВыпуск.ХарактеристикаЗатраты
						|		И ЗатратыНаВыпуск.СерияЗатраты = РегистрВстречныйВыпуск.СерияЗатраты
						|
						|	ЛЕВОЕ СОЕДИНЕНИЕ (
						|		ВЫБРАТЬ
						|			ИсключаемаяНоменклатура.Номенклатура,
						|			ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры,
						|			ИсключаемаяНоменклатура.СерияНоменклатуры,
						|			Истина КАК ЕстьИсключаемаяНоменклатура
						|		ИЗ
						|			РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения%СуффиксОрганизаций% КАК ИсключаемаяНоменклатура
						|		ГДЕ
						|			ИсключаемаяНоменклатура.Период МЕЖДУ &НачДата И &КонДата
						|			И (&РасчетКосвенныхЗатрат ИЛИ &РасчетЗатратВстречногоВыпуска)
						|			//ДляРеглУчета И ИсключаемаяНоменклатура.Организация = &Организация
						|		) КАК ИсключаемаяНоменклатура
						|	ПО
						|		ЗатратыНаВыпуск.Продукция = ИсключаемаяНоменклатура.Номенклатура
						|		И ЗатратыНаВыпуск.ХарактеристикаПродукции = ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры
						|		И ЗатратыНаВыпуск.СерияПродукции = ИсключаемаяНоменклатура.СерияНоменклатуры
						|
						|	ЛЕВОЕ СОЕДИНЕНИЕ (
						|		ВЫБРАТЬ РАЗЛИЧНЫЕ
						|			ВыпускПродукции.Подразделение,
						|			ВыпускПродукции.Продукция,
						|			ВыпускПродукции.ХарактеристикаПродукции,
						|			ВыпускПродукции.СерияПродукции,
						|			ВыпускПродукции.Спецификация,
						|			ВыпускПродукции.НоменклатурнаяГруппа,
						|			ВыпускПродукции.Заказ,
						|			//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
						|			ВыпускПродукции.Заказ,
						|			Истина КАК ЕстьВыпускПродукции
						|		ИЗ
						|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
						|		ГДЕ
						|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
						|			И ВыпускПродукции.КодОперации <> &ВыпускПродукцииПоФиксированнойСтоимости
						|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
						|		
						|		) КАК ВыпускПродукции
						|	ПО
						|		ВыпускПродукции.Подразделение = ЗатратыНаВыпуск.Подразделение
						|	 	И ВыпускПродукции.НоменклатурнаяГруппа = ЗатратыНаВыпуск.НоменклатурнаяГруппа
						|	 	И ВыпускПродукции.Продукция = ЗатратыНаВыпуск.Продукция
						|	 	И ВыпускПродукции.ХарактеристикаПродукции = ЗатратыНаВыпуск.ХарактеристикаПродукции
						|	 	И ВыпускПродукции.СерияПродукции = ЗатратыНаВыпуск.СерияПродукции
						|	 	И ВыпускПродукции.Спецификация = ЗатратыНаВыпуск.Спецификация
						|		И ВыпускПродукции.Заказ = ЗатратыНаВыпуск.Заказ
						|	 	//ДляРеглУчета И ВыпускПродукции.СчетУчетаНЗП = ЗатратыНаВыпуск.СчетУчета
						|
						|ГДЕ
						//начало изменений оптим рс
						//|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
						//|	И ЗатратыНаВыпуск.КодОперации В (&КодыОпераций)
						| ЗатратыНаВыпуск.КодОперации В (&КодыОпераций)
						//конец изменений
						|	
						|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
						|	//ДляНалУчета И ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &СтатусМатериальныхЗатратПринятые
						|	//ДляНалУчета И ЗатратыНаВыпуск.СчетУчета <> &СчетЕН
						|	
						|	И ( (Распределение.КорректировкаНЗП
						|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка))
						|	   ИЛИ (Не Распределение.КорректировкаНЗП
						|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка)) )
						|	
						|	И ( (Распределение.ВозвратИзНЗП
						|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат))
						|	   ИЛИ (Не Распределение.ВозвратИзНЗП
						|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат)) )
						|	
						|	И ( (Распределение.ОприходованиеНЗП
						|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходованиеНЗП))
						|	   ИЛИ (Не Распределение.ОприходованиеНЗП
						|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходованиеНЗП)) )
						|	
						|СГРУППИРОВАТЬ ПО
						|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
						|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
						|	ЗатратыНаВыпуск.Подразделение,
						|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
						|	ЗатратыНаВыпуск.Продукция,
						|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
						|	ЗатратыНаВыпуск.СерияПродукции,
						|	ЗатратыНаВыпуск.Спецификация,
						|	ЗатратыНаВыпуск.Заказ,
						|	ЗатратыНаВыпуск.ДокументВыпуска,
						|	ЗатратыНаВыпуск.КодОперации,
						|	
						|	ЗатратыНаВыпуск.СтатьяЗатрат,
						|	ЗатратыНаВыпуск.Затрата,
						|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
						|	ЗатратыНаВыпуск.СерияЗатраты,
						|	
						|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
						|	ЗатратыНаВыпуск.ЗаказНЗП,
						|	ЗатратыНаВыпуск.ПодразделениеНЗП,
						|	
						|	ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
						|		ЗатратыНаВыпуск.Подразделение
						|	ИНАЧЕ
						|		ЗатратыНаВыпуск.ПодразделениеНЗП
						|	КОНЕЦ,
						|
						|	Распределение.КорректировкаНЗП,
						|	Распределение.ОприходованиеНЗП,
						|	Распределение.ВозвратИзНЗП,
						|	
						|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь),
						|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь),
						|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь),
						|	
						|	ЕСТЬNULL(ВыпускПродукции.ЕстьВыпускПродукции, Ложь)
						|
						|УПОРЯДОЧИТЬ ПО
						|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
						|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
						|	ПодразделениеСписанияНЗП,
						|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
						|	ЗатратыНаВыпуск.ЗаказНЗП,
						|	ЗатратыНаВыпуск.СтатьяЗатрат,
						|	ЗатратыНаВыпуск.Затрата,
						|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
						|	ЗатратыНаВыпуск.СерияЗатраты,
						|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь) Убыв,
						|
						|	ЗатратыНаВыпуск.Подразделение,
						|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
						|	ЗатратыНаВыпуск.Продукция,
						|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
						|	ЗатратыНаВыпуск.СерияПродукции,
						|	ЗатратыНаВыпуск.Спецификация,
						|	ЗатратыНаВыпуск.Заказ,
						|	ЗатратыНаВыпуск.ДокументВыпуска,
						|	ЗатратыНаВыпуск.КодОперации
						|";
	
	Возврат ТекстЗапроса;

	
	//возврат;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.ДокументВыпуска,
	|	ЗатратыНаВыпуск.КодОперации,
	|	
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.ПодразделениеНЗП,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
	|		ЗатратыНаВыпуск.Подразделение
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.ПодразделениеНЗП
	|	КОНЕЦ КАК ПодразделениеСписанияНЗП,
	|
	|	Распределение.КорректировкаНЗП,
	|	Распределение.ОприходованиеНЗП,
	|	Распределение.ВозвратИзНЗП,
	|	
	|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь) КАК ВстречныйВыпуск,
	|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь) КАК ЗатратаВстречногоВыпуска,
	|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь) КАК ЕстьИсключаемаяНоменклатура,
	|	
	|	ЕСТЬNULL(ВыпускПродукции.ЕстьВыпускПродукции, Ложь) КАК ЕстьВыпускПродукции,
	|	
	|	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ВременнаяРазница) КАК ВременнаяРазница,
	|	СУММА(ЗатратыНаВыпуск.Сумма) КАК Стоимость,
	|	СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
	|	
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			МИНИМУМ(Распределение.КорректировкаНЗП) КАК КорректировкаНЗП,
	|			МИНИМУМ(Распределение.ОприходованиеНЗП) КАК ОприходованиеНЗП,
	|			МИНИМУМ(Распределение.ВозвратИзНЗП) КАК ВозвратИзНЗП,
	|			МИНИМУМ(Распределение.ВстречныйВыпуск) КАК ВстречныйВыпуск,
	|			
	|			Распределение.Подразделение,
	|			Распределение.НоменклатурнаяГруппа,
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|		ИЗ			
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
	|		ГДЕ
	|			Распределение.Период МЕЖДУ &НачДата И &КонДата
	|			И Распределение.НомерПередела = &НомерПередела
	|			//ДляРеглУчета И Распределение.Организация = &Организация
	|			
	|		СГРУППИРОВАТЬ ПО
	|			Распределение.Подразделение,
	|			Распределение.НоменклатурнаяГруппа,
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|		) КАК Распределение
	|	ПО 
	|		ЗатратыНаВыпуск.Подразделение = Распределение.Подразделение
	|		И ЗатратыНаВыпуск.Затрата = Распределение.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = Распределение.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = Распределение.СерияЗатраты
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа = Распределение.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.СтатьяЗатрат = Распределение.СтатьяЗатрат
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Продукция,
	|			ВстречныйВыпускПродукции.Затрата,
	|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаЗатраты,
	|			ВыпускПродукции.СерияПродукции КАК СерияЗатраты,
	|			Истина КАК ВстречныйВыпуск
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, 
	|				) КАК ВстречныйВыпускПродукции
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ (
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВыпускПродукции.Продукция,
	|					ВыпускПродукции.ХарактеристикаПродукции,
	|					ВЫБОР КОГДА ВыпускПродукции.Продукция.ВестиУчетПоСериямВНЗП ТОГДА
	|						ВыпускПродукции.СерияПродукции
	|					ИНАЧЕ
	|						ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					КОНЕЦ КАК СерияПродукции
	|				ИЗ
	|					РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|				ГДЕ
	|					ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|					И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|					//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|					
	|				) КАК ВыпускПродукции
	|			ПО
	|				ВстречныйВыпускПродукции.Затрата = ВыпускПродукции.Продукция
	|
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости)
	|			И Не ВыпускПродукции.Продукция ЕСТЬ NULL
	|
	|		) КАК РегистрВстречныйВыпуск
	|	ПО
	|		ЗатратыНаВыпуск.Продукция = РегистрВстречныйВыпуск.Продукция
	|		И ЗатратыНаВыпуск.Затрата = РегистрВстречныйВыпуск.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = РегистрВстречныйВыпуск.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = РегистрВстречныйВыпуск.СерияЗатраты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ИсключаемаяНоменклатура.Номенклатура,
	|			ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры,
	|			ИсключаемаяНоменклатура.СерияНоменклатуры,
	|			Истина КАК ЕстьИсключаемаяНоменклатура
	|		ИЗ
	|			РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения%СуффиксОрганизаций% КАК ИсключаемаяНоменклатура
	|		ГДЕ
	|			ИсключаемаяНоменклатура.Период МЕЖДУ &НачДата И &КонДата
	|			И (&РасчетКосвенныхЗатрат ИЛИ &РасчетЗатратВстречногоВыпуска)
	|			//ДляРеглУчета И ИсключаемаяНоменклатура.Организация = &Организация
	|		) КАК ИсключаемаяНоменклатура
	|	ПО
	|		ЗатратыНаВыпуск.Продукция = ИсключаемаяНоменклатура.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаПродукции = ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияПродукции = ИсключаемаяНоменклатура.СерияНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВыпускПродукции.Подразделение,
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции,
	|			ВыпускПродукции.Спецификация,
	|			ВыпускПродукции.НоменклатурнаяГруппа,
	|			ВыпускПродукции.Заказ,
	|			//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|			ВыпускПродукции.Заказ,
	|			Истина КАК ЕстьВыпускПродукции
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И ВыпускПродукции.КодОперации <> &ВыпускПродукцииПоФиксированнойСтоимости
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|		
	|		) КАК ВыпускПродукции
	|	ПО
	|		ВыпускПродукции.Подразделение = ЗатратыНаВыпуск.Подразделение
	|	 	И ВыпускПродукции.НоменклатурнаяГруппа = ЗатратыНаВыпуск.НоменклатурнаяГруппа
	|	 	И ВыпускПродукции.Продукция = ЗатратыНаВыпуск.Продукция
	|	 	И ВыпускПродукции.ХарактеристикаПродукции = ЗатратыНаВыпуск.ХарактеристикаПродукции
	|	 	И ВыпускПродукции.СерияПродукции = ЗатратыНаВыпуск.СерияПродукции
	|	 	И ВыпускПродукции.Спецификация = ЗатратыНаВыпуск.Спецификация
	|		И ВыпускПродукции.Заказ = ЗатратыНаВыпуск.Заказ
	|	 	//ДляРеглУчета И ВыпускПродукции.СчетУчетаНЗП = ЗатратыНаВыпуск.СчетУчета
	|
	|ГДЕ
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И ЗатратыНаВыпуск.КодОперации В (&КодыОпераций)
	|	
	|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|	//ДляНалУчета И ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &СтатусМатериальныхЗатратПринятые
	|	//ДляНалУчета И ЗатратыНаВыпуск.СчетУчета <> &СчетЕН
	|	
	|	И ( (Распределение.КорректировкаНЗП
	|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка))
	|	   ИЛИ (Не Распределение.КорректировкаНЗП
	|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка)) )
	|	
	|	И ( (Распределение.ВозвратИзНЗП
	|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат))
	|	   ИЛИ (Не Распределение.ВозвратИзНЗП
	|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат)) )
	|	
	|	И ( (Распределение.ОприходованиеНЗП
	|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходованиеНЗП))
	|	   ИЛИ (Не Распределение.ОприходованиеНЗП
	|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходованиеНЗП)) )
	|	
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.ДокументВыпуска,
	|	ЗатратыНаВыпуск.КодОперации,
	|	
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.ПодразделениеНЗП,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
	|		ЗатратыНаВыпуск.Подразделение
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.ПодразделениеНЗП
	|	КОНЕЦ,
	|
	|	Распределение.КорректировкаНЗП,
	|	Распределение.ОприходованиеНЗП,
	|	Распределение.ВозвратИзНЗП,
	|	
	|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь),
	|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь),
	|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь),
	|	
	|	ЕСТЬNULL(ВыпускПродукции.ЕстьВыпускПродукции, Ложь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	ПодразделениеСписанияНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь) Убыв,
	|
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.ДокументВыпуска,
	|	ЗатратыНаВыпуск.КодОперации
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоЗатратамНаВыпуск()

// Процедура устанавливает параметры запроса по затратам на выпуск.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросПоЗатратамНаВыпуск(
	СтруктураШапкиДокумента,
	СпособРасчета, 
	Запрос
	)
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("СпособОценкиСтоимости", 	Перечисления.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости);
	Запрос.УстановитьПараметр("СтатусМатериальныхЗатратПринятые", Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	МассивКодыОпераций = Новый Массив;
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодыОпераций);
	
	МассивКодовОперацийКорректировка = Новый Массив;
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацииКорректировка", МассивКодовОперацийКорректировка);
	
	МассивКодовОперацийКорректировка = Новый Массив;
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацииВозврат", МассивКодовОперацийКорректировка);
	
	МассивКодовОперацийОприходованиеНЗП = Новый Массив;
	МассивКодовОперацийОприходованиеНЗП.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииОприходованиеНЗП", МассивКодовОперацийОприходованиеНЗП);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Запрос.УстановитьПараметр("СчетЕН", ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыЗапросПоЗатратамНаВыпуск()

// Функция формирует запрос по регистру "Затраты на выпуск".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Затраты на выпуск".
//
Функция СформироватьЗапросПоЗатратамНаВыпуск(
	СтруктураШапкиДокумента,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоЗатратамНаВыпуск();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросПоЗатратамНаВыпуск(
		СтруктураШапкиДокумента,
		СпособРасчета,
		Запрос
		);
		
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоНезавершенномуПроизводству()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА СУММ СПИСАНИЯ ЗАТРАТ

// Процедура выводить сообщение о превышении количества остатка в НЗП.
//
// Параметры
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КоличествоСписано - Число - Количество затрат списания на выпуск
//	КоличествоОстаток - Число - Остаток затрат в незавершенном производстве
//
Процедура ВывестиСообщениеОПревышенииКоличестваОстаткаНЗП(
	СтрокаВыборки,
	КоличествоСписано,
	КоличествоОстаток
	)
	
	РасшифровкаСообщения = УправлениеЗатратами.СформироватьРасшифровкуОткрытияОтчета("АнализРаспределенияПроизводственныхЗатрат");
	
	ОбщегоНазначения.Сообщение("Количество списываемое из производства, превышает остаток в НЗП:
		|Подразделение: " + СтрокаВыборки.Подразделение + "
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + "
		|Затрата: " + СтрокаВыборки.Затрата + ", " 
			+ СтрокаВыборки.ХарактеристикаЗатраты + ", " + СтрокаВыборки.СерияЗатраты + "
		|Заказ: " + СтрокаВыборки.Заказ + "
		|Код операции: " + СтрокаВыборки.КодОперации + "
		|Количество списания: " + КоличествоСписано + ", остаток НЗП: " + КоличествоОстаток + "
		|",
		СтатусСообщения.Важное,
		, // Заголовок
		РасшифровкаСообщения
	);
	
КонецПроцедуры // ВывестиСообщениеОПревышенииКоличестваОстаткаНЗП()

// Процедура выводить сообщение о превышении суммы остатка в НЗП.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	СуммаСписано - Число - Сумма затрат списания на выпуск
//	СуммаОстаток - Число - Сумма остаток затрат в незавершенном производстве
//	ПостояннаяРазницаОстаток - Число - Сумма остаток затрат в незавершенном производстве в части постоянной разницы
//	ВременнаяРазницаОстаток - Число - Сумма остаток затрат в незавершенном производстве в части временной разницы
//
Процедура ВывестиСообщениеОПревышенииСуммыОстаткаНЗП(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаСписано,
	СуммаОстаток,
	ПостояннаяРазницаОстаток,
	ВременнаяРазницаОстаток
	)
	
	РасшифровкаСообщения = УправлениеЗатратами.СформироватьРасшифровкуОткрытияОтчета("АнализРаспределенияПроизводственныхЗатрат");
	
	ОбщегоНазначения.Сообщение("Сумма списываемая из производства, превышает остаток в НЗП:
		|Подразделение: " + СтрокаВыборки.Подразделение + "
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + "
		|Способ распределения: " + СтрокаВыборки.Затрата + "
		|Заказ: " + СтрокаВыборки.Заказ + "
		|Код операции: " + СтрокаВыборки.КодОперации + "
		|Сумма списания: " + СуммаСписано + ", остаток НЗП: " + Окр(СуммаОстаток, 2, 1) + "
		|" + ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, "Временная разница НЗП: " + Окр(ВременнаяРазницаОстаток, 2, 1) + "
		|Постоянная разница НЗП: " + Окр(ПостояннаяРазницаОстаток, 2, 1), "") + "
		|",
		СтатусСообщения.Важное,
		, // Заголовок
		РасшифровкаСообщения
	);
		
КонецПроцедуры // ВывестиСообщениеОПревышенииСуммыОстаткаНЗП()
	
// Процедура рассчитывает суммы корректировки операций по фиксированной стоимости,
// если на конец месяца остался суммовой остаток в незавершенном производстве.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КоличествоНЗП - Число - Количество остаток незавершенного производства
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//	ПостояннаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части постоянной разницы
//	ВременнаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части временной разницы
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СуммаЗатратПостояннаяРазница - Число - Сумма для отражения в затратах на выпуск в части постоянной разницы
//	СуммаЗатратВременнаяРазница - Число - Сумма для отражения в затратах на выпуск в части временной разницы
//	СписатьСуммаИзНЗП - Число - Сумма списания из незавершенного производства
//	СписатьПостояннаяРазницаИзНЗП - Число - Сумма списания из незавершенного производства в части постоянной разницы
//	СписатьВременнаяРазницаИзНЗП - Число - Сумма списания из незавершенного производства в части временной разницы
//
Процедура РассчитатьСуммыКорректировкиФиксированнойСтоимости(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КоличествоНЗП,
	СуммаНЗП,
	ПостояннаяРазницаНЗП,
	ВременнаяРазницаНЗП,
	СуммаЗатрат,
	СуммаЗатратПостояннаяРазница,
	СуммаЗатратВременнаяРазница,
	СписатьСуммаИзНЗП,
	СписатьПостояннаяРазницаИзНЗП,
	СписатьВременнаяРазницаИзНЗП
	)
	
	Если СуммаНЗП <> 0 И КоличествоНЗП = 0 Тогда
			
		ОбщегоНазначения.Сообщение("Обнаружен суммовой остаток незавершенного производства.
			|Необходимо скорректировать сумму операции по фиксированной стоимости:
			|Подразделение: " + СтрокаВыборки.Подразделение + "
			|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
			|Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + "
			|Затрата: " + СтрокаВыборки.Затрата + ", " 
				+ СтрокаВыборки.ХарактеристикаЗатраты + ", " + СтрокаВыборки.СерияЗатраты + "
			|Заказ: " + СтрокаВыборки.Заказ + "
			|Код операции: " + СтрокаВыборки.КодОперации + "
			|Сумма корректировки: " + СуммаНЗП + "
			|", СтатусСообщения.Важное);
			
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммыКорректировкиФиксированнойСтоимости()

// Процедура рассчитывает суммы корректировки оприходования НЗП.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КоличествоНЗП - Число - Количество остаток незавершенного производства
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//	ПостояннаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части постоянной разницы
//	ВременнаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части временной разницы
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СуммаЗатратПостояннаяРазница - Число - Сумма для отражения в затратах на выпуск в части постоянной разницы
//	СуммаЗатратВременнаяРазница - Число - Сумма для отражения в затратах на выпуск в части временной разницы
//
Процедура РассчитатьСуммыКорректировкиОприходованияНЗП(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КоличествоНЗП,
	СуммаНЗП,
	ПостояннаяРазницаНЗП,
	ВременнаяРазницаНЗП,
	СуммаЗатрат,
	СуммаЗатратПостояннаяРазница,
	СуммаЗатратВременнаяРазница
	)
	
	СписаноКол = СтрокаВыборки.Количество;
	
	Если КоличествоНЗП <> 0 Тогда
		СуммаЗатрат = Окр(СписаноКол * СуммаНЗП / КоличествоНЗП, 2, 1) - СтрокаВыборки.Стоимость;
	Иначе
		СуммаЗатрат = 0;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ОбщаяСуммаНЗП = СуммаНЗП + ПостояннаяРазницаНЗП + ВременнаяРазницаНЗП;
		Если КоличествоНЗП <> 0 Тогда
			СуммаЗатратПостояннаяРазница = Окр(СписаноКол * ПостояннаяРазницаНЗП / КоличествоНЗП, 2, 1) - СтрокаВыборки.ПостояннаяРазница;
			СуммаЗатратВременнаяРазница = Окр(СписаноКол * ВременнаяРазницаНЗП / КоличествоНЗП, 2, 1) - СтрокаВыборки.ВременнаяРазница;
			ОбщаяСуммаЗатрат = Окр(СписаноКол * ОбщаяСуммаНЗП / КоличествоНЗП, 2, 1)
				- (СтрокаВыборки.Стоимость + СтрокаВыборки.ПостояннаяРазница + СтрокаВыборки.ВременнаяРазница);
		Иначе
			СуммаЗатратПостояннаяРазница = 0;
			СуммаЗатратВременнаяРазница = 0;
			ОбщаяСуммаЗатрат = 0;
		КонецЕсли;
														
		// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
		Если СуммаЗатрат + СуммаЗатратПостояннаяРазница + СуммаЗатратВременнаяРазница <> ОбщаяСуммаЗатрат Тогда
			Если СуммаЗатратВременнаяРазница <> 0 Тогда
				СуммаЗатратВременнаяРазница = ОбщаяСуммаЗатрат - (СуммаЗатрат + СуммаЗатратПостояннаяРазница);
			ИначеЕсли СуммаЗатратПостояннаяРазница <> 0 Тогда
				СуммаЗатратПостояннаяРазница = ОбщаяСуммаЗатрат - СуммаЗатрат;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммыКорректировкиОприходованияНЗП()

// Процедура рассчитывает суммы списания материальных затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КоличествоНЗП - Число - Количество остаток незавершенного производства
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//	ПостояннаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части постоянной разницы
//	ВременнаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части временной разницы
//	ОбщаяСуммаНЗП - Число - Общая сумма остатка незавершенного производства
//	КоличествоЗатратНаВыпуск - Число - Количество затрат на выпуск продукции
//	РасчетКосвенныхЗатрат - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СуммаЗатратПостояннаяРазница - Число - Сумма для отражения в затратах на выпуск в части постоянной разницы
//	СуммаЗатратВременнаяРазница - Число - Сумма для отражения в затратах на выпуск в части временной разницы
//	СписатьКоличествоИзНЗП - Число - Количество списания из незавершенного производства
//	СписатьСуммаИзНЗП - Число - Сумма списания из незавершенного производства
//	СписатьПостояннаяРазницаИзНЗП - Число - Сумма списания из незавершенного производства в части постоянной разницы
//	СписатьВременнаяРазницаИзНЗП - Число - Сумма списания из незавершенного производства в части временной разницы
//
Процедура РассчитатьСуммыСписанияМатериальныхЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КоличествоНЗП,
	СуммаНЗП,
	ПостояннаяРазницаНЗП,
	ВременнаяРазницаНЗП,
	ОбщаяСуммаНЗП,
	КоличествоЗатратНаВыпуск,
	РасчетКосвенныхЗатрат,
	РасчетЗатратВстречногоВыпуска,
	СуммаЗатрат,
	СуммаЗатратПостояннаяРазница,
	СуммаЗатратВременнаяРазница,
	СписатьКоличествоИзНЗП,
	СписатьСуммаИзНЗП,
	СписатьПостояннаяРазницаИзНЗП,
	СписатьВременнаяРазницаИзНЗП
	)
	
	СписаноКол = СтрокаВыборки.Количество;
	Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
		Знак = - 1;
//начало изменений Ожиганов А. 15.06.2017 66649 добавление в корр/стоимости возратных отходов, изменения по отрицательным материальным затратам 
	ИначеЕсли КоличествоНЗП < 0 Тогда
		Знак = - 1;
//конец изменений 
	Иначе
		Знак = 1;
	КонецЕсли;
	
	СуммаЗатрат = 0;
	СуммаЗатратПостояннаяРазница = 0;
	СуммаЗатратВременнаяРазница = 0;
	
	СписатьКоличествоИзНЗП = 0;
	СписатьСуммаИзНЗП = 0;
	СписатьПостояннаяРазницаИзНЗП = 0;
	СписатьВременнаяРазницаИзНЗП = 0;
	
	Если СписаноКол = 0 Тогда
		Возврат;
	КонецЕсли;
											
	Если Знак * КоличествоНЗП <= Знак * СписаноКол Тогда
												
		Если (Знак * КоличествоНЗП < Знак * СписаноКол)
		   И Не РасчетКосвенныхЗатрат
		   И (Не РасчетЗатратВстречногоВыпуска
		   	ИЛИ РасчетЗатратВстречногоВыпуска И СтрокаВыборки.ЗатратаВстречногоВыпуска)
		Тогда
				
			ВывестиСообщениеОПревышенииКоличестваОстаткаНЗП(
				СтрокаВыборки,
				(Знак * СписаноКол),
				(Знак * КоличествоНЗП)
				);
				
		КонецЕсли;
				
		Если КоличествоНЗП = 0 Тогда
			Возврат;
		КонецЕсли;
			
		СписаноКол = КоличествоНЗП;
		СуммаЗатрат = СуммаНЗП;
												
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаЗатратПостояннаяРазница = ПостояннаяРазницаНЗП;
			СуммаЗатратВременнаяРазница = ВременнаяРазницаНЗП;
			
			СписатьПостояннаяРазницаИзНЗП = ПостояннаяРазницаНЗП;
			СписатьВременнаяРазницаИзНЗП = СуммаЗатратВременнаяРазница;
			
		КонецЕсли;
												
		СписатьКоличествоИзНЗП = КоличествоНЗП;
		СписатьСуммаИзНЗП = СуммаЗатрат;
		
	Иначе
									
		Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СуммаЗатрат = ?(КоличествоНЗП <> 0, Окр(СписаноКол * СуммаНЗП / КоличествоНЗП, 2, 1), 0);
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
													
			Если КоличествоНЗП <> 0 Тогда
				СуммаЗатрат = Окр(СписаноКол * СуммаНЗП / КоличествоНЗП, 2, 1);
				СуммаЗатратПостояннаяРазница = Окр(СписаноКол * ПостояннаяРазницаНЗП / КоличествоНЗП, 2, 1);
				СуммаЗатратВременнаяРазница = Окр(СписаноКол * ВременнаяРазницаНЗП / КоличествоНЗП, 2, 1);
				ОбщаяСуммаЗатрат = Окр(СписаноКол * ОбщаяСуммаНЗП / КоличествоНЗП, 2, 1);
				
			Иначе
				СуммаЗатрат = 0;
				СуммаЗатратПостояннаяРазница = 0;
				СуммаЗатратВременнаяРазница = 0;
				ОбщаяСуммаЗатрат = 0;
			КонецЕсли;
													
			// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
			Если СуммаЗатрат + СуммаЗатратПостояннаяРазница + СуммаЗатратВременнаяРазница <> ОбщаяСуммаЗатрат Тогда
				Если СуммаЗатратВременнаяРазница <> 0 Тогда
					СуммаЗатратВременнаяРазница = ОбщаяСуммаЗатрат - (СуммаЗатрат + СуммаЗатратПостояннаяРазница);
				ИначеЕсли СуммаЗатратПостояннаяРазница <> 0 Тогда
					СуммаЗатратПостояннаяРазница = ОбщаяСуммаЗатрат - СуммаЗатрат;
				КонецЕсли;
			КонецЕсли;
													
			СписатьПостояннаяРазницаИзНЗП = СуммаЗатратПостояннаяРазница;
			СписатьВременнаяРазницаИзНЗП = СуммаЗатратВременнаяРазница;
													
		КонецЕсли;
												
		СписатьКоличествоИзНЗП = СписаноКол;
		СписатьСуммаИзНЗП = СуммаЗатрат;
		
		КоличествоЗатратНаВыпуск = КоличествоЗатратНаВыпуск - СписаноКол;
												
	КонецЕсли;
											
КонецПроцедуры // РассчитатьСуммыСписанияМатериальныхЗатрат()

// Процедура рассчитывает суммы списания материальных затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КодыОперацийФиксСтоимость - Соответствие - Соответствие кода операции и операции по фиксированной стоимости
//	КоличествоНЗП - Число - Количество остаток незавершенного производства
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//	ПостояннаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части постоянной разницы
//	ВременнаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части временной разницы
//	ОбщаяСуммаНЗП - Число - Общая сумма остатка незавершенного производства
//	КоличествоЗатратНаВыпуск - Число - Количество затрат на выпуск продукции
//	РасчетКосвенныхЗатрат - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СуммаЗатратПостояннаяРазница - Число - Сумма для отражения в затратах на выпуск в части постоянной разницы
//	СуммаЗатратВременнаяРазница - Число - Сумма для отражения в затратах на выпуск в части временной разницы
//	СписатьСуммаИзНЗП - Число - Сумма списания из незавершенного производства
//	СписатьПостояннаяРазницаИзНЗП - Число - Сумма списания из незавершенного производства в части постоянной разницы
//	СписатьВременнаяРазницаИзНЗП - Число - Сумма списания из незавершенного производства в части временной разницы
//
Процедура РассчитатьСуммыСписанияИКорректировкиМатериальныхЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодыОперацийФиксСтоимость,
	КоличествоНЗП,
	СуммаНЗП,
	ПостояннаяРазницаНЗП,
	ВременнаяРазницаНЗП,
	ОбщаяСуммаНЗП,
	КоличествоЗатратНаВыпуск,
	РасчетКосвенныхЗатрат,
	РасчетЗатратВстречногоВыпуска,
	СуммаЗатрат,
	СуммаЗатратПостояннаяРазница,
	СуммаЗатратВременнаяРазница,
	СписатьКоличествоИзНЗП,
	СписатьСуммаИзНЗП,
	СписатьПостояннаяРазницаИзНЗП,
	СписатьВременнаяРазницаИзНЗП
	)
	
	Если КодыОперацийФиксСтоимость.Получить(СтрокаВыборки.КодОперации) <> Неопределено Тогда
		ЭтоКодОперацииФиксСтоимость = Истина;
	Иначе
		ЭтоКодОперацииФиксСтоимость = Ложь;
	КонецЕсли;
	
	СуммаЗатрат = 0;
	СуммаЗатратПостояннаяРазница = 0;
	СуммаЗатратВременнаяРазница = 0;
	
	СписатьКоличествоИзНЗП = 0;
	СписатьСуммаИзНЗП = 0;
	СписатьПостояннаяРазницаИзНЗП = 0;
	СписатьВременнаяРазницаИзНЗП = 0;
											
	Если ЭтоКодОперацииФиксСтоимость Тогда
		
		Если Не РасчетКосвенныхЗатрат 
		   И Не РасчетЗатратВстречногоВыпуска Тогда
	   
			РассчитатьСуммыКорректировкиФиксированнойСтоимости(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				КоличествоНЗП,
				СуммаНЗП,
				ПостояннаяРазницаНЗП,
				ВременнаяРазницаНЗП,
				СуммаЗатрат,
				СуммаЗатратПостояннаяРазница,
				СуммаЗатратВременнаяРазница,
				СписатьСуммаИзНЗП,
				СписатьПостояннаяРазницаИзНЗП,
				СписатьВременнаяРазницаИзНЗП
			);
			
		КонецЕсли;
			
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
		РассчитатьСуммыКорректировкиОприходованияНЗП(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КоличествоНЗП,
			СуммаНЗП,
			ПостояннаяРазницаНЗП,
			ВременнаяРазницаНЗП,
			СуммаЗатрат,
			СуммаЗатратПостояннаяРазница,
			СуммаЗатратВременнаяРазница
		);
		
	Иначе
		РассчитатьСуммыСписанияМатериальныхЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КоличествоНЗП,
			СуммаНЗП,
			ПостояннаяРазницаНЗП,
			ВременнаяРазницаНЗП,
			ОбщаяСуммаНЗП,
			КоличествоЗатратНаВыпуск,
			РасчетКосвенныхЗатрат,
			РасчетЗатратВстречногоВыпуска,
			СуммаЗатрат,
			СуммаЗатратПостояннаяРазница,
			СуммаЗатратВременнаяРазница,
			СписатьКоличествоИзНЗП,
			СписатьСуммаИзНЗП,
			СписатьПостояннаяРазницаИзНЗП,
			СписатьВременнаяРазницаИзНЗП
		);

	КонецЕсли;
	
	СписаноКол = СтрокаВыборки.Количество;
		
	Если Не ЭтоКодОперацииФиксСтоимость 
	   И Не СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
		КоличествоНЗП = КоличествоНЗП - СписатьКоличествоИзНЗП;
		СуммаНЗП = СуммаНЗП - СписатьСуммаИзНЗП;
		ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - СписатьСуммаИзНЗП;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
			ПостояннаяРазницаНЗП = ПостояннаяРазницаНЗП - СписатьПостояннаяРазницаИзНЗП;
			ВременнаяРазницаНЗП  = ВременнаяРазницаНЗП - СписатьВременнаяРазницаИзНЗП;
			ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - СписатьПостояннаяРазницаИзНЗП - СписатьВременнаяРазницаИзНЗП;
		КонецЕсли;
	КонецЕсли;
											
	Если Не РасчетЗатратВстречногоВыпуска И Не РасчетКосвенныхЗатрат 
	   И Не ЭтоКодОперацииФиксСтоимость
	   И Не СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
	   
		СуммаЗатрат = СуммаЗатрат - СтрокаВыборки.Стоимость;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СуммаЗатратПостояннаяРазница = СуммаЗатратПостояннаяРазница - СтрокаВыборки.ПостояннаяРазница;
			СуммаЗатратВременнаяРазница = СуммаЗатратВременнаяРазница - СтрокаВыборки.ВременнаяРазница;
		КонецЕсли;
		
	ИначеЕсли (РасчетЗатратВстречногоВыпуска ИЛИ РасчетКосвенныхЗатрат) 
		И Не ЭтоКодОперацииФиксСтоимость
		И Не СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
												
		Если РасчетЗатратВстречногоВыпуска И СтрокаВыборки.ЗатратаВстречногоВыпуска Тогда
			СуммаЗатрат = СуммаЗатрат - СтрокаВыборки.Стоимость;
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СуммаЗатратПостояннаяРазница = СуммаЗатратПостояннаяРазница - СтрокаВыборки.ПостояннаяРазница;
				СуммаЗатратВременнаяРазница = СуммаЗатратВременнаяРазница - СтрокаВыборки.ВременнаяРазница;
			КонецЕсли;
		Иначе
			СписатьКоличествоИзНЗП = 0;
			СписатьСуммаИзНЗП = СписатьСуммаИзНЗП - СтрокаВыборки.Стоимость;
			СуммаЗатрат = СуммаЗатрат - СтрокаВыборки.Стоимость;
													
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СписатьПостояннаяРазницаИзНЗП = СписатьПостояннаяРазницаИзНЗП - СтрокаВыборки.ПостояннаяРазница;
				СписатьВременнаяРазницаИзНЗП = СписатьВременнаяРазницаИзНЗП - СтрокаВыборки.ВременнаяРазница;
														
				СуммаЗатратПостояннаяРазница = СуммаЗатратПостояннаяРазница - СтрокаВыборки.ПостояннаяРазница;
				СуммаЗатратВременнаяРазница = СуммаЗатратВременнаяРазница - СтрокаВыборки.ВременнаяРазница;
			КонецЕсли;
		КонецЕсли;	
											
	ИначеЕсли ЭтоКодОперацииФиксСтоимость
		  ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
		СписатьКоличествоИзНЗП = 0;
		
	КонецЕсли;
												
КонецПроцедуры // РассчитатьСуммыСписанияИКорректировкиМатериальныхЗатрат()

// Процедура рассчитывает суммы списания нематериальных затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//	ПостояннаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части постоянной разницы
//	ВременнаяРазницаНЗП - Число - Сумма остаток незавершенного производства в части временной разницы
//	ОбщаяСуммаНЗП - Число - Общая сумма остатка незавершенного производства
//	СуммаЗатратНаВыпуск - Число - Сумма затрат на выпуск продукции, отраженная в документах распределения
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СуммаЗатратПостояннаяРазница - Число - Сумма для отражения в затратах на выпуск в части постоянной разницы
//	СуммаЗатратВременнаяРазница - Число - Сумма для отражения в затратах на выпуск в части временной разницы
//	СписатьСуммаИзНЗП - Число - Сумма списания из незавершенного производства
//	СписатьПостояннаяРазницаИзНЗП - Число - Сумма списания из незавершенного производства в части постоянной разницы
//	СписатьВременнаяРазницаИзНЗП - Число - Сумма списания из незавершенного производства в части временной разницы
//
Процедура РассчитатьСуммыСписанияНематериальныхЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаНЗП,
	ПостояннаяРазницаНЗП,
	ВременнаяРазницаНЗП,
	ОбщаяСуммаНЗП,
	СуммаЗатратНаВыпуск,
	РасчетЗатратВстречногоВыпуска,
	СуммаЗатрат,
	СуммаЗатратПостояннаяРазница,
	СуммаЗатратВременнаяРазница,
	СписатьСуммаИзНЗП,
	СписатьПостояннаяРазницаИзНЗП,
	СписатьВременнаяРазницаИзНЗП
	)
	
	Если Не РасчетЗатратВстречногоВыпуска И СтрокаВыборки.ЗатратаВстречногоВыпуска
	 ИЛИ РасчетЗатратВстречногоВыпуска И Не СтрокаВыборки.ЗатратаВстречногоВыпуска
	Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСтоимость = СтрокаВыборки.Стоимость;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ОбщаяСтоимость = ОбщаяСтоимость 
			+ СтрокаВыборки.ПостояннаяРазница
			+ СтрокаВыборки.ВременнаяРазница;
	КонецЕсли;
		
	Знак = ?(ОбщаяСтоимость < 0, - 1, 1);
	
	Если Знак * ОбщаяСтоимость > Знак * (СуммаНЗП + ВременнаяРазницаНЗП + ПостояннаяРазницаНЗП)	Тогда
		ВывестиСообщениеОПревышенииСуммыОстаткаНЗП(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ОбщаяСтоимость,
			СуммаНЗП,
			ПостояннаяРазницаНЗП,
			ВременнаяРазницаНЗП
		);
	КонецЕсли;
											
	Если Знак * ОбщаяСтоимость >= Знак *(СуммаНЗП + ВременнаяРазницаНЗП + ПостояннаяРазницаНЗП)
	   И ОбщаяСтоимость <> 0
	Тогда
		СуммаЗатрат = СуммаНЗП;
		СписатьСуммаИзНЗП = СуммаНЗП;
													
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СуммаЗатратПостояннаяРазница = ПостояннаяРазницаНЗП;
			СуммаЗатратВременнаяРазница = ВременнаяРазницаНЗП;
			СписатьПостояннаяРазницаИзНЗП = ПостояннаяРазницаНЗП;
			СписатьВременнаяРазницаИзНЗП = ВременнаяРазницаНЗП;
		КонецЕсли;
	Иначе
		
		Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СуммаЗатрат = ОбщаяСтоимость;
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
													
			Если ОбщаяСуммаНЗП <> 0 И СуммаЗатратНаВыпуск <> 0 Тогда
				КоэффициентСписания = (СуммаЗатратНаВыпуск / ОбщаяСуммаНЗП) * (ОбщаяСтоимость / СуммаЗатратНаВыпуск);
				
			Иначе
				КоэффициентСписания = 1;
			КонецЕсли;
													
			Если СуммаЗатратНаВыпуск <> 0 Тогда
				СуммаЗатрат = Окр(СуммаНЗП * КоэффициентСписания, 2, 1);
				СуммаЗатратПостояннаяРазница = Окр(ПостояннаяРазницаНЗП * КоэффициентСписания, 2, 1);
				ОбщаяСуммаЗатрат = Окр(ОбщаяСуммаНЗП * КоэффициентСписания, 2, 1);
				
				СуммаЗатратВременнаяРазница = Окр(ВременнаяРазницаНЗП * КоэффициентСписания, 2, 1);
				
			ИначеЕсли СтрокаВыборки.Стоимость <> 0
				ИЛИ СтрокаВыборки.ПостояннаяРазница <> 0
				ИЛИ СтрокаВыборки.ВременнаяРазница <> 0
			Тогда
				СуммаЗатрат = СтрокаВыборки.Стоимость;
				СуммаЗатратПостояннаяРазница = СтрокаВыборки.ПостояннаяРазница;
				СуммаЗатратВременнаяРазница = СтрокаВыборки.ВременнаяРазница;
				ОбщаяСуммаЗатрат = СуммаЗатрат + СуммаЗатратПостояннаяРазница + СуммаЗатратВременнаяРазница;
			Иначе
				СуммаЗатрат = 0;
				СуммаЗатратПостояннаяРазница = 0;
				СуммаЗатратВременнаяРазница = 0;
				ОбщаяСуммаЗатрат = 0;
			КонецЕсли;
													
			// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
			Если СуммаЗатрат + СуммаЗатратПостояннаяРазница + СуммаЗатратВременнаяРазница <> ОбщаяСуммаЗатрат Тогда
				Если СуммаЗатратВременнаяРазница <> 0 Тогда
					СуммаЗатратВременнаяРазница = ОбщаяСуммаЗатрат - (СуммаЗатрат + СуммаЗатратПостояннаяРазница);
				ИначеЕсли СуммаЗатратПостояннаяРазница <> 0 Тогда
					СуммаЗатратПостояннаяРазница = ОбщаяСуммаЗатрат - СуммаЗатрат;
				КонецЕсли;
			КонецЕсли;
													
			СписатьПостояннаяРазницаИзНЗП = СуммаЗатратПостояннаяРазница;
			СписатьВременнаяРазницаИзНЗП = СуммаЗатратВременнаяРазница;
													
		КонецЕсли;
												
		СписатьСуммаИзНЗП = СуммаЗатрат;
														
	КонецЕсли;
	
	СуммаЗатратНаВыпуск = СуммаЗатратНаВыпуск - ОбщаяСтоимость;
	СуммаЗатрат = СуммаЗатрат - СтрокаВыборки.Стоимость;
												
	СуммаНЗП = СуммаНЗП - СписатьСуммаИзНЗП;
	ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - СписатьСуммаИзНЗП;
											
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СуммаЗатратПостояннаяРазница = СуммаЗатратПостояннаяРазница - СтрокаВыборки.ПостояннаяРазница;
		СуммаЗатратВременнаяРазница = СуммаЗатратВременнаяРазница - СтрокаВыборки.ВременнаяРазница;
				
		ПостояннаяРазницаНЗП = ПостояннаяРазницаНЗП - СписатьПостояннаяРазницаИзНЗП;
		ВременнаяРазницаНЗП = ВременнаяРазницаНЗП - СписатьВременнаяРазницаИзНЗП;
		ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - СписатьПостояннаяРазницаИзНЗП - СписатьВременнаяРазницаИзНЗП;
	КонецЕсли;
												
КонецПроцедуры // РассчитатьСуммыСписанияНематериальныхЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСАНИЯ ЗАТРАТ НА ВЫПУСК ПРОДУКЦИИ

// Функция получения массива затрат, рассчитываемых на текущем переделе.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	НомерПередела - Число - Текущий номер передела
//
// Возвращаемое значение:
//	Массив - Массив затрат
//
Функция ПолучитьМассивЗатрат(
	СтруктураШапкиДокумента,
	НомерПередела
	)

	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспределениеЗатрат.Затрата
	|ИЗ			
	|	РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатрат
	|ГДЕ
	|	РаспределениеЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И РаспределениеЗатрат.НомерПередела = &НомерПередела
	|	//ДляРеглУчета И РаспределениеЗатрат.Организация = &Организация
	|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НомерПередела", НомерПередела);
	
	ТаблицаЗатрат = Запрос.Выполнить().Выгрузить();
	МассивЗатрат = ТаблицаЗатрат.ВыгрузитьКолонку("Затрата");
	
	Возврат МассивЗатрат;

КонецФункции // ПолучитьМассивЗатрат()

// Функция получает структуру поиска строк результата запроса по затратам на выпуск.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса по незавершенному производству
//
// Возвращаемое значение:
//	Структура - Структура поиска
//
Функция ПолучитьСтруктуруПоискаСтрокЗатратНаВыпуск(
	СтруктураШапкиДокумента,
	СтрокаВыборки
	)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПодразделениеСписанияНЗП", СтрокаВыборки.Подразделение);
	СтруктураПоиска.Вставить("НоменклатурнаяГруппаНЗП", СтрокаВыборки.НоменклатурнаяГруппа);
	СтруктураПоиска.Вставить("ЗаказНЗП", СтрокаВыборки.Заказ);
	СтруктураПоиска.Вставить("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатрат);
	СтруктураПоиска.Вставить("Затрата", СтрокаВыборки.Затрата);
	СтруктураПоиска.Вставить("ХарактеристикаЗатраты", СтрокаВыборки.ХарактеристикаЗатраты);
		
	Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
		СтруктураПоиска.Вставить("СерияЗатраты", СтрокаВыборки.СерияЗатраты);
	КонецЕсли;
		
	Если (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете)
	   И СтрокаВыборки.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		СтруктураПоиска.Вставить("СчетУчета", СтрокаВыборки.СчетУчета);
	КонецЕсли; 
		
	Возврат СтруктураПоиска;
	
КонецФункции // ПолучитьСтруктуруПоискаСтрокЗатратНаВыпуск()

// Функция получает построитель запроса по затратам на выпуск.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратамНаВыпуск - РезультатЗапроса - Результат выполнения запроса по затратам на выпуск
//
// Возвращаемое значение:
//	ПостроительЗапроса - построитель запроса.
//
Функция ПолучитьПостроительЗапросаПоЗатратамНаВыпуск(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратамНаВыпуск
	)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапросаПоЗатратамНаВыпуск);
	ПостроительЗапроса.Отбор.Добавить("ПодразделениеСписанияНЗП");
	ПостроительЗапроса.Отбор.Добавить("НоменклатурнаяГруппаНЗП");
	// is ЯннуровВФ нач 20141105
	Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда 
		ПостроительЗапроса.Отбор.Добавить("СчетУчета");
	КонецЕсли;
	// is ЯннуровВФ кон 20141105
	
	ПостроительЗапроса.Отбор.ПодразделениеСписанияНЗП.Использование = Истина;
	ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование = Истина;
	// is ЯннуровВФ нач 20141105
	Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда 
		ПостроительЗапроса.Отбор.СчетУчета.Использование = Истина;
	КонецЕсли;
	// is ЯннуровВФ кон 20141105
	
	Возврат ПостроительЗапроса;


КонецФункции // ПолучитьПостроительЗапросаПоЗатратамНаВыпуск()

// Функция проверяет отбор и устанавливает параметры отбора построителя запроса по затратам на выпуск.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//
// Выходные параметры
//	ПостроительЗапроса - ПостроительЗапроса - построитель запроса.
//
// Возвращаемое значение:
//	Булево - Истина - установлен новый отбор,
//			 Ложь - значения отбора не изменились.
//
Функция ПроверитьИУстановитьОтборПостроителяЗапросаПоЗатратамНаВыпуск(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ПостроительЗапроса
	)
	
	ОтборСоответствуетАналитике = Ложь;
	Если ПостроительЗапроса.Отбор.ПодразделениеСписанияНЗП.Значение = СтрокаВыборки.Подразделение
	   И ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = СтрокаВыборки.НоменклатурнаяГруппа
	Тогда
		// is ЯннуровВФ нач 20141105
		Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда 
			Если ПостроительЗапроса.Отбор.СчетУчета.Значение = СтрокаВыборки.СчетУчета Тогда 
				ОтборСоответствуетАналитике = Истина;
			КонецЕсли;
		Иначе
		// is ЯннуровВФ кон 20141105
			ОтборСоответствуетАналитике = Истина;
		КонецЕсли;
	КонецЕсли;
	   
	Если Не ОтборСоответствуетАналитике Тогда
	
		ПостроительЗапроса.Отбор.ПодразделениеСписанияНЗП.Значение = СтрокаВыборки.Подразделение;
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = СтрокаВыборки.НоменклатурнаяГруппа;
		// is ЯннуровВФ нач 20141105
		Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда 
			ПостроительЗапроса.Отбор.СчетУчета.Значение = СтрокаВыборки.СчетУчета;
		КонецЕсли;
		// is ЯннуровВФ кон 20141105
		
	КонецЕсли;
	
	Возврат Не ОтборСоответствуетАналитике;

КонецФункции // ПроверитьИУстановитьОтборПостроителяЗапросаПоЗатратамНаВыпуск()

// Процедура распределения затрат из незавершенного производства за выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоНезавершенномуПроизводству - РезультатЗапроса - Результат выполнения запроса по незавершенному производству
//  РезультатЗапросаПоЗатратамНаВыпуск - РезультатЗапроса - Результат запроса по затратам на выпуск
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	РасчетКосвенныхЗатрат - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпуск - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск продукции"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыИзНезавершенногоПроизводстваНаВыпускПродукции(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоНезавершенномуПроизводству,
	РезультатЗапросаПоЗатратамНаВыпуск,
	НомерПередела,
	РасчетКосвенныхЗатрат,
	РасчетЗатратВстречногоВыпуска,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей
	)
	
	КодыОперацийФиксСтоимость = Новый Соответствие;
	КодыОперацийФиксСтоимость.Вставить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс, Истина);
	КодыОперацийФиксСтоимость.Вставить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс, Истина);
	КодыОперацийФиксСтоимость.Вставить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс, Истина);
	
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоЗатратамНаВыпуск(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоЗатратамНаВыпуск
		);
	
	ВыборкаПоЗатратам = РезультатЗапросаПоНезавершенномуПроизводству.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		КоличествоЗатратНаВыпуск = ВыборкаПоЗатратам.Количество;
		
		СуммаЗатратНаВыпуск = ВыборкаПоЗатратам.Стоимость;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СуммаЗатратНаВыпуск = СуммаЗатратНаВыпуск 
				+ ВыборкаПоЗатратам.ПостояннаяРазница
				+ ВыборкаПоЗатратам.ВременнаяРазница;
		КонецЕсли;
		
		КоличествоНЗП = ВыборкаПоЗатратам.КоличествоОстаток;
		
		СуммаНЗП = ВыборкаПоЗатратам.СтоимостьОстаток;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазницаНЗП = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВременнаяРазницаНЗП = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
		Иначе
			ПостояннаяРазницаНЗП = 0;
			ВременнаяРазницаНЗП = 0;
		КонецЕсли;
		
		ОбщаяСуммаНЗП = СуммаНЗП + ПостояннаяРазницаНЗП + ВременнаяРазницаНЗП;
		
		// Отберем строки затрат на выпуск.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоЗатратамНаВыпуск(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ПостроительЗапроса
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапроса.Выполнить();
		КонецЕсли;	
		РезультатЗапросаПоЗатратамНаВыпуск = ПостроительЗапроса.Результат;
					
		// Выберем выпуск продукции с направлениями списания.
		СтруктураПоиска = ПолучитьСтруктуруПоискаСтрокЗатратНаВыпуск(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам
			);
			
		СписатьКоличествоИзНЗП = 0;	
		СписатьСуммаИзНЗП = 0;
		СписатьПостояннаяРазницаИзНЗП = 0;
		СписатьВременнаяРазницаИзНЗП = 0;
		
		ВсегоЗатратыНаВыпуск = 0;
		ВсегоЗатратыНаВыпускПостояннаяРазница = 0;
		ВсегоЗатратыНаВыпускВременнаяРазница = 0;
		
		ВыборкаПоЗатратамНаВыпуск = РезультатЗапросаПоЗатратамНаВыпуск.Выбрать();
		Пока ВыборкаПоЗатратамНаВыпуск.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если ВыборкаПоЗатратамНаВыпуск.ЗатратаВстречногоВыпуска 
			   И Не ВыборкаПоЗатратамНаВыпуск.ВстречныйВыпуск Тогда
				Продолжить;
			ИначеЕсли Не ВыборкаПоЗатратамНаВыпуск.ЗатратаВстречногоВыпуска 
					И ВыборкаПоЗатратамНаВыпуск.ВстречныйВыпуск Тогда
				Продолжить;
			ИначеЕсли ВыборкаПоЗатратамНаВыпуск.ЗатратаВстречногоВыпуска 
					И Не РасчетЗатратВстречногоВыпуска Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем записи по которым нет выпуска продукции.
			Если Не ВыборкаПоЗатратамНаВыпуск.ЕстьВыпускПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			ВсегоЗатратыНаВыпуск = ВсегоЗатратыНаВыпуск + ВыборкаПоЗатратамНаВыпуск.Стоимость;
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ВсегоЗатратыНаВыпускПостояннаяРазница = ВсегоЗатратыНаВыпускПостояннаяРазница + ВыборкаПоЗатратамНаВыпуск.ПостояннаяРазница;
				ВсегоЗатратыНаВыпускВременнаяРазница = ВсегоЗатратыНаВыпускВременнаяРазница + ВыборкаПоЗатратамНаВыпуск.ВременнаяРазница;
			КонецЕсли;
			
			СуммаЗатрат = 0;
			СуммаЗатратПостояннаяРазница = 0;
			СуммаЗатратВременнаяРазница = 0;
			КоличествоИзНЗП = 0;
			СуммаИзНЗП = 0;
			ПостояннаяРазницаИзНЗП = 0;
			ВременнаяРазницаИзНЗП = 0;
			
			// Если производится списание затрат на продукцию, исключаемую из базы распределения,
			// стоимость такой продукции не корректируем. 
			Если ВыборкаПоЗатратамНаВыпуск.ЕстьИсключаемаяНоменклатура 
			   И (РасчетКосвенныхЗатрат ИЛИ РасчетЗатратВстречногоВыпуска) Тогда
			   
				КоличествоНЗП = КоличествоНЗП - ВыборкаПоЗатратамНаВыпуск.Количество;
				СуммаНЗП = СуммаНЗП - ВыборкаПоЗатратамНаВыпуск.Стоимость;
				ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - ВыборкаПоЗатратамНаВыпуск.Стоимость;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					ВременнаяРазницаНЗП = ВременнаяРазницаНЗП - ВыборкаПоЗатратамНаВыпуск.ВременнаяРазница;
					ПостояннаяРазницаНЗП = ПостояннаяРазницаНЗП - ВыборкаПоЗатратамНаВыпуск.ПостояннаяРазница;
					
					ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - ВыборкаПоЗатратамНаВыпуск.ВременнаяРазница
						- ВыборкаПоЗатратамНаВыпуск.ПостояннаяРазница;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ВыборкаПоЗатратамНаВыпуск.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП
			   И Не РасчетЗатратВстречногоВыпуска
			Тогда
			
				КоличествоНЗП = КоличествоНЗП - ВыборкаПоЗатратамНаВыпуск.Количество;
				СуммаНЗП = СуммаНЗП - ВыборкаПоЗатратамНаВыпуск.Стоимость;
				ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - ВыборкаПоЗатратамНаВыпуск.Стоимость;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					ВременнаяРазницаНЗП = ВременнаяРазницаНЗП - ВыборкаПоЗатратамНаВыпуск.ВременнаяРазница;
					ПостояннаяРазницаНЗП = ПостояннаяРазницаНЗП - ВыборкаПоЗатратамНаВыпуск.ПостояннаяРазница;
					
					ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - ВыборкаПоЗатратамНаВыпуск.ВременнаяРазница
						- ВыборкаПоЗатратамНаВыпуск.ПостояннаяРазница;
				КонецЕсли;
					
			КонецЕсли;
			
			Если ВыборкаПоЗатратам.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
				РассчитатьСуммыСписанияИКорректировкиМатериальныхЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратамНаВыпуск,
					КодыОперацийФиксСтоимость,
					КоличествоНЗП,
					СуммаНЗП,
					ПостояннаяРазницаНЗП,
					ВременнаяРазницаНЗП,
					ОбщаяСуммаНЗП,
					КоличествоЗатратНаВыпуск,
					РасчетКосвенныхЗатрат,
					РасчетЗатратВстречногоВыпуска,
					СуммаЗатрат,
					СуммаЗатратПостояннаяРазница,
					СуммаЗатратВременнаяРазница,
					КоличествоИзНЗП,
					СуммаИзНЗП,
					ПостояннаяРазницаИзНЗП,
					ВременнаяРазницаИзНЗП
					);
				
			// Расчет сумм списания для нематериальных затрат.		
			ИначеЕсли Не РасчетКосвенныхЗатрат Тогда
				РассчитатьСуммыСписанияНематериальныхЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратамНаВыпуск,
					СуммаНЗП,
					ПостояннаяРазницаНЗП,
					ВременнаяРазницаНЗП,
					ОбщаяСуммаНЗП,
					СуммаЗатратНаВыпуск,
					РасчетЗатратВстречногоВыпуска,
					СуммаЗатрат,
					СуммаЗатратПостояннаяРазница,
					СуммаЗатратВременнаяРазница,
					СуммаИзНЗП,
					ПостояннаяРазницаИзНЗП,
					ВременнаяРазницаИзНЗП
				);
			КонецЕсли;
			
			Если Не РасчетЗатратВстречногоВыпуска И ВыборкаПоЗатратамНаВыпуск.ЗатратаВстречногоВыпуска Тогда
				СуммаЗатрат = 0;
			КонецЕсли;
			
			СписатьКоличествоИзНЗП = СписатьКоличествоИзНЗП + КоличествоИзНЗП;	
			СписатьСуммаИзНЗП = СписатьСуммаИзНЗП + СуммаИзНЗП;
			СписатьПостояннаяРазницаИзНЗП = СписатьПостояннаяРазницаИзНЗП + ПостояннаяРазницаИзНЗП;
			СписатьВременнаяРазницаИзНЗП = СписатьВременнаяРазницаИзНЗП + ВременнаяРазницаИзНЗП;
			
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаПоЗатратамНаВыпуск,
				Ложь, // РаспределениеЗатратПоБазе,
				РасчетКосвенныхЗатрат, // КосвенныеЗатраты,
				РасчетЗатратВстречногоВыпуска, // ЗатратыВстречногоВыпуска,
				0, // Количество
				СуммаЗатрат,
				СуммаЗатратПостояннаяРазница,
				СуммаЗатратВременнаяРазница,
				НаборЗаписейЗатратыНаВыпуск
			);
			
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
			   И ВыборкаПоЗатратам.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку
			   И (ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппа <> ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппаНЗП
					ИЛИ ВыборкаПоЗатратамНаВыпуск.Подразделение <> ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП 
					И ЗначениеЗаполнено(ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП)) Тогда
					
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					ВыборкаПоЗатратам,
					ВыборкаПоЗатратамНаВыпуск,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					Перечисления.ХарактерЗатрат.ПроизводственныеРасходы,
					СуммаИзНЗП,
					ПостояннаяРазницаИзНЗП,
					ВременнаяРазницаИзНЗП,
					РегистрБухгалтерииНаборЗаписей
					);
				
			КонецЕсли;
						
		КонецЦикла;
		
		Если РасчетЗатратВстречногоВыпуска
		   И СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска
		   И ВыборкаПоЗатратам.ВстречныйВыпуск Тогда
		   
			Если ВыборкаПоЗатратам.КоличествоРасход <> 0 Тогда
			   
				СписатьКоличествоИзНЗП = 0;
				СписатьСуммаИзНЗП = СписатьСуммаИзНЗП - ВсегоЗатратыНаВыпуск;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СписатьПостояннаяРазницаИзНЗП = СписатьПостояннаяРазницаИзНЗП - ВсегоЗатратыНаВыпускПостояннаяРазница;
					СписатьВременнаяРазницаИзНЗП = СписатьВременнаяРазницаИзНЗП - ВсегоЗатратыНаВыпускВременнаяРазница;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Формирование движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоЗатратам.СтатьяЗатрат,
			Неопределено, // ХарактерЗатрат,
			ВыборкаПоЗатратам.Затрата,
			ВыборкаПоЗатратам.ХарактеристикаЗатраты,
			ВыборкаПоЗатратам.СерияЗатраты,
			НомерПередела,
			СписатьКоличествоИзНЗП,
			СписатьСуммаИзНЗП,
			СписатьПостояннаяРазницаИзНЗП,
			СписатьВременнаяРазницаИзНЗП,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство
			);
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьЗатратыИзНезавершенногоПроизводстваНаВыпускПродукции()

// Процедура списания затрат из незавершенного производства на выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ЗапросПоНезавершенномуПроизводству - Запрос - Запрос по незавершенному производству
//  ЗапросПоЗатратамНаВыпуск - Запрос - Запрос по затратам на выпуск
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	РасчетКосвенныхЗатрат - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//  СтруктураДвижений - Структура - Наборы движений по регистрам
//
Процедура СписаниеЗатратИзНезавершенногоПроизводстваНаВыпускПродукции(
	СтруктураШапкиДокумента,
	ЗапросПоНезавершенномуПроизводству,
	ЗапросПоЗатратамНаВыпуск,
	НомерПередела,
	РасчетКосвенныхЗатрат,
	РасчетЗатратВстречногоВыпуска,
	СтруктураДвижений
	)
	
	МассивЗатрат = ПолучитьМассивЗатрат(
		СтруктураШапкиДокумента,
		НомерПередела
		);
		
	ЗапросПоНезавершенномуПроизводству.УстановитьПараметр("НомерПередела", НомерПередела);
	ЗапросПоНезавершенномуПроизводству.УстановитьПараметр("МассивЗатрат",  МассивЗатрат);
	
	РезультатЗапросаПоНезавершенномуПроизводству = ЗапросПоНезавершенномуПроизводству.Выполнить();
	
	ЗапросПоЗатратамНаВыпуск.УстановитьПараметр("НомерПередела", НомерПередела);
	ЗапросПоЗатратамНаВыпуск.УстановитьПараметр("МассивЗатрат",  МассивЗатрат);
	ЗапросПоЗатратамНаВыпуск.УстановитьПараметр("РасчетКосвенныхЗатрат", РасчетКосвенныхЗатрат);
	ЗапросПоЗатратамНаВыпуск.УстановитьПараметр("РасчетЗатратВстречногоВыпуска", РасчетЗатратВстречногоВыпуска);
	
	РезультатЗапросаПоЗатратамНаВыпуск = ЗапросПоЗатратамНаВыпуск.Выполнить();
	
	Если Не РезультатЗапросаПоНезавершенномуПроизводству.Пустой()
	   И Не РезультатЗапросаПоЗатратамНаВыпуск.Пустой() Тогда
	   
	   РаспределитьЗатратыИзНезавершенногоПроизводстваНаВыпускПродукции(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоНезавершенномуПроизводству,
			РезультатЗапросаПоЗатратамНаВыпуск,
			НомерПередела,
			РасчетКосвенныхЗатрат,
			РасчетЗатратВстречногоВыпуска,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция
		);
	   
   КонецЕсли;
   
   Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СписаниеЗатратИзНезавершенногоПроизводстваНаВыпускПродукции()

// Процедура определения начального и конечного номера передела.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Выходные параметры
//	НачальныйПередел - Число - Начальный номер передела
//	КонечныйПередел - Число - Конечный номер передела
//	ВсегоПеределов - Число - Максимальный номер передела (без учета способа расчета себестоимости)
//	МинимальныйПередел - Число - Минимальный номер передела (без учета способа расчета себестоимости)
//
Процедура ПолучитьНачальныйИКонечныйНомерПередела(
	СтруктураШапкиДокумента,
	СпособРасчета,
	НачальныйПередел,
	КонечныйПередел,
	ВсегоПеределов = 0,
	МинимальныйПередел = 0
	)
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА РаспределениеЗатрат.НачальныйПередел > ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0)
	|		И ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0) <> 0
	|	ТОГДА
	|		ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0)
	|	ИНАЧЕ
	|		РаспределениеЗатрат.НачальныйПередел
	|	КОНЕЦ КАК НачальныйПередел,
	|	РаспределениеЗатрат.КонечныйПередел,
	|	РаспределениеЗатратПолное.ВсегоПеределов,
	|	РаспределениеЗатратПолное.МинимальныйПередел
	|ИЗ (	
	|	ВЫБРАТЬ
	|		МИНИМУМ(
	|			ВЫБОР КОГДА РаспределениеЗатрат.Подразделение.ВидПодразделения В (&ВидыПодразделений) ТОГДА
	|				РаспределениеЗатрат.НомерПередела
	|			ИНАЧЕ
	|				9999
	|			КОНЕЦ
	|		) КАК НачальныйПередел,
	|		МАКСИМУМ(
	|			ВЫБОР КОГДА РаспределениеЗатрат.Подразделение.ВидПодразделения В (&ВидыПодразделений) ТОГДА
	|				РаспределениеЗатрат.НомерПередела
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		) КАК КонечныйПередел
	|		
	|	ИЗ
	|		РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатрат
	|	ГДЕ
	|		РаспределениеЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|		//ДляРеглУчета И РаспределениеЗатрат.Организация = &Организация
	|		
	|	) КАК РаспределениеЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			МИНИМУМ(НомерПередела) КАК МинимальныйПередел
	|		ИЗ
	|			РегистрСведений.ПорядокЗакрытияПодразделений%СуффиксОрганизаций%.СрезПоследних(&КонДата, 
	|				Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|				//ДляРеглУчета И Организация = &Организация 
	|				) КАК ПорядокЗакрытия
	|		ГДЕ
	|			НомерПередела <> 0
	|		) КАК ПорядокЗакрытия
	|	ПО
	|		Истина
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			МИНИМУМ(РаспределениеЗатратПолное.НомерПередела) КАК МинимальныйПередел,
	|			МАКСИМУМ(РаспределениеЗатратПолное.НомерПередела) КАК ВсегоПеределов
	|		ИЗ
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатратПолное
	|		ГДЕ
	|			РаспределениеЗатратПолное.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И РаспределениеЗатратПолное.Организация = &Организация
	|
	|		) КАК РаспределениеЗатратПолное
	|	ПО
	|		ИСТИНА
	|";	
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	НачальныйПередел = 0;
	КонечныйПередел = 0;
	ВсегоПеределов = 0;
	МинимальныйПередел = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НачальныйПередел = ?(Выборка.НачальныйПередел = NULL, 0, Выборка.НачальныйПередел);
			КонечныйПередел = ?(Выборка.КонечныйПередел = NULL, 0, Выборка.КонечныйПередел);
			ВсегоПеределов = ?(Выборка.ВсегоПеределов = NULL, 0, Выборка.ВсегоПеределов);
			МинимальныйПередел = ?(Выборка.МинимальныйПередел = NULL, 0, Выборка.МинимальныйПередел);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНачальныйИКонечныйНомерПередела()

// Процедура производит расчет себестоимости по прямым затратам по переделам.
//
Процедура РасчетПрямыхЗатрат(
	СтруктураШапкиДокумента, 
	СтруктураТаблицДвижений, 
	СпособРасчета, 
	РасчетЗатратВстречногоВыпуска = Ложь,
	СтрокаДействия = Неопределено
	) Экспорт
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	НачальныйПередел = 0;
	КонечныйПередел = 0;
	
	ПолучитьНачальныйИКонечныйНомерПередела(
		СтруктураШапкиДокумента,
		СпособРасчета,
		НачальныйПередел,
		КонечныйПередел
		);
	
	Если НачальныйПередел = 0 ИЛИ КонечныйПередел = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по незавершенному производству.
	ЗапросПоНезавершенномуПроизводству = СформироватьЗапросПоНезавершенномуПроизводству(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
		
	// Формирование запроса по затратам на выпуск.
	ЗапросПоЗатратамНаВыпуск = СформироватьЗапросПоЗатратамНаВыпуск(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
		
	// Формирование запроса по выпуску продукции и затратам на выпуск.	
	ЗапросПоВыпускуПродукцииИЗатратамНаВыпуск = СформироватьЗапросПоВыпускуПродукцииИЗатратамНаВыпуск(
		СтруктураШапкиДокумента, 
		СпособРасчета,
		Ложь, // КосвенныеЗатраты
		РасчетЗатратВстречногоВыпуска
		);
		
	// Формирование запроса по направлением выпуска продукции.
	ЗапросПоВыпускуПродукции = СформироватьЗапросПоНаправлениямВыпускаПродукции(
		СтруктураШапкиДокумента, 
		СпособРасчета,
		Ложь, // КосвенныеЗатраты
		РасчетЗатратВстречногоВыпуска
		);
		
	// Формирование запроса по способам распределения.	
	ЗапросПоИсключаемымНаправлениямВыпуска = СформироватьЗапросПоИсключаемымНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		Ложь, // КосвенныеЗатраты
		РасчетЗатратВстречногоВыпуска
		);
		
	// Формирование запроса по коэффициентам распределения по проектам.
	ЗапросРаспределениеПоПроектам = СформироватьЗапросРаспределениеПоПроектам(
		СтруктураШапкиДокумента
		);
	РезультатЗапросаРаспределениеПоПроектам = ЗапросРаспределениеПоПроектам.Выполнить();
	
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента);
	
	Для НомерПередела = НачальныйПередел По КонечныйПередел Цикл
		
		ОбщегоНазначения.Сообщение("- Расчет передела № " + НомерПередела + "/" + КонечныйПередел + ".");
		
		// Списание затрат из незавершенного производства на выпуск продукции.
		СписаниеЗатратИзНезавершенногоПроизводстваНаВыпускПродукции(
			СтруктураШапкиДокумента,
			ЗапросПоНезавершенномуПроизводству,
			ЗапросПоЗатратамНаВыпуск,
			НомерПередела,
			Ложь, // РасчетКосвенныхЗатрат
			РасчетЗатратВстречногоВыпуска,
			СтруктураДвижений
		);
		
		ТабТоваров = Новый ТаблицаЗначений;
		ТабТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабТоваров.Колонки.Добавить("ДокументОприходования");
		ТабТоваров.Колонки.Добавить("СчетУчета");
		
		КорректировкаДвиженийПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ЗапросПоВыпускуПродукцииИЗатратамНаВыпуск,
			ЗапросПоВыпускуПродукции,
			ЗапросПоИсключаемымНаправлениямВыпуска,
			РезультатЗапросаРаспределениеПоПроектам,
			НомерПередела,
			Ложь, // КосвенныеЗатраты
			РасчетЗатратВстречногоВыпуска,
			СтруктураДвижений,
			ТабТоваров
			);
		
		ОбщегоНазначения.Сообщение("- Корректировка списания партий на переделе № " + НомерПередела + "/" + КонечныйПередел + ".");
		
		//+ДС 10.01.14
		Если Не СтрокаДействия = Неопределено Тогда
			ДопПараметр = Новый Структура("СтрокаДействия", СтрокаДействия);
		Иначе
			ДопПараметр = Неопределено;
		КонецЕсли;	
		//-ДС
		//начало изменений 
		ПРГ_КорректСписание = Истина;
		Если СтруктураШапкиДокумента.Свойство("ПРГ_БезКорректировкиСтоимости",ПРГ_КорректСписание) Тогда
			ПРГ_КорректСписание = ?(ПРГ_КорректСписание=Неопределено,Истина,Не ПРГ_КорректСписание);
		КонецЕсли;	
		//конец изменений 
		//начало изменений оптим р/с
		Если НЕ РасчетЗатратВстречногоВыпуска Тогда
			ПРГ_ДопПараметры = Неопределено;
			Если   СтруктураШапкиДокумента.Свойство("ПРГ_ТолькоНаЗатратыВлНаСеб") Тогда
				ПРГ_ДопПараметры = Новый Структура;
				ПРГ_ДопПараметры.Вставить("ПРГ_ТолькоНаЗатратыВлНаСеб",Истина);
				ПРГ_ДопПараметры.Вставить("НеВозвращатьДопПарметры",Истина);
			КонецЕсли;	
		Иначе
			ПРГ_ДопПараметры = Неопределено;
		КонецЕсли;	
		//конец изменений
		
		//начало изменений 
		Если ПРГ_КорректСписание Тогда
			КорректировкаСтоимости.КорректировкаСписания(
			СтруктураШапкиДокумента.мНачДата, 
			СтруктураШапкиДокумента.мКонДата, 
			ТабТоваров, 
			СтруктураШапкиДокумента.Ссылка,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.ВидОтраженияВУчете,
			?(СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска,
				Ложь,
				РасчетЗатратВстречногоВыпуска
				),
			// is ЯннуровВФ нач 20140724
			////+ДС 10.01.14
			////Неопределено,
			//ДопПараметр,
			
			//конец изменений
			////-ДС
			//начало изменений оптим р/с
			ПРГ_ДопПараметры,
			//конец изменений
			// is ЯннуровВФ кон 20140724
			НомерПередела = КонечныйПередел,
			?(СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска,
				Ложь,
				РасчетЗатратВстречногоВыпуска
				)
			);
			
		Конецесли;
		//конец изменений 
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ЗакрытиеСчетовКосвенныхРасходовПроизводство(СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений)
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры // РасчетПрямыхЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОРРЕКИРОВКИ СТОИМОСТИ ВЫПУСКА ПРОДУКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРАМ "ВЫПУСК ПРОДУКЦИИ" И "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ"

// Процедура устанавливает параметры запроса по выпуску продукции и затратам на выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//	Запрос - Запрос.
//
Процедура УстановитьПараметрыЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск(
	СтруктураШапкиДокумента, 
	СпособРасчета, 
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	Запрос
	)
	
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяПродукция", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ВидРасходовПроизводственные", Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("СтатусМатериальныхЗатратПринятые",  Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	
	Запрос.УстановитьПараметр("КодыОперацииОприходование", Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииВыпускаОприходование", Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	
	МассивКодовОперацийКорректировка = Новый Массив;
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	Запрос.УстановитьПараметр("КодыОперацииКорректировка", МассивКодовОперацийКорректировка);
	
	МассивКодовОперацийВозврат = Новый Массив;
	МассивКодовОперацийВозврат.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовОперацийВозврат.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииВозврат", МассивКодовОперацийВозврат);
	
	МассивКодовОперацийВыпускаКорректировка = Новый Массив;
	МассивКодовОперацийВыпускаКорректировка.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	Запрос.УстановитьПараметр("КодыОперацииВыпускаКорректировка", МассивКодовОперацийВыпускаКорректировка);
	
	КодыОперацииВыпускаВозврат = Новый Массив;
	КодыОперацииВыпускаВозврат.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	КодыОперацииВыпускаВозврат.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииВыпускаВозврат", КодыОперацииВыпускаВозврат);
	
	КодыОперацийФиксСтоимость = Новый Массив;
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацийФиксСтоимость", КодыОперацийФиксСтоимость);
	
	КодыОперацийВыпускаФиксСтоимость = Новый Массив;
	КодыОперацийВыпускаФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	КодыОперацийВыпускаФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	КодыОперацийВыпускаФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	КодыОперацийВыпускаФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацийВыпускаФиксСтоимость", КодыОперацийВыпускаФиксСтоимость);
	
	КодыОперацийСписаниеНаЗатраты = Новый Массив;
	КодыОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	КодыОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	Запрос.УстановитьПараметр("КодыОперацийСписаниеНаЗатраты", КодыОперацийСписаниеНаЗатраты);
	
	МассивИсключаемыхСчетовЗатрат = Новый Массив;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы);
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);
		МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.БракВПроизводстве);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивИсключаемыхСчетовЗатрат", МассивИсключаемыхСчетовЗатрат);
	
	МассивИсключаемыхХарактеровЗатрат = Новый Массив;
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	Запрос.УстановитьПараметр("МассивИсключаемыхХарактеровЗатрат", МассивИсключаемыхХарактеровЗатрат);
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск()

// Функция формирует текст запроса по регистрам "Выпуск продукции" и "Затраты на выпуск продукции".
//
// Возвращаемое значение:
//   Текст – текст запроса по регистрам "Выпуск продукции" и "Затраты на выпуск продукции".
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	| 	
	| 	ВыпускПродукции.ОприходованиеНЗП,
	| 	ВыпускПродукции.КорректировкаНЗП,
	| 	ВыпускПродукции.ВозвратИзНЗП,
	|	
	|	СУММА(ВыпускПродукции.КоличествоОприходование) КАК КоличествоОприходование,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|	
	|	//ДляНалУчета СУММА(ВыпускПродукции.СуммаЗатратПостояннаяРазница) КАК СуммаЗатратПостояннаяРазница,
	|	//ДляНалУчета СУММА(ВыпускПродукции.СуммаЗатратВременнаяРазница) КАК СуммаЗатратВременнаяРазница,
	|	СУММА(ВыпускПродукции.СуммаЗатрат) КАК СуммаЗатрат
	|	
	|ИЗ (
	|	ВЫБРАТЬ
	|		//ДляРеглУчета ВыпускПродукции.Организация,
	|		ВыпускПродукции.Подразделение,
	|		ВыпускПродукции.НоменклатурнаяГруппа,
	|		ВыпускПродукции.Продукция,
	|		ВыпускПродукции.ХарактеристикаПродукции,
	|		ВыпускПродукции.СерияПродукции,
	|		ВыпускПродукции.Спецификация,
	|		ВыпускПродукции.Заказ,
	|		//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК КорректировкаНЗП,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ВозвратИзНЗП,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ОприходованиеНЗП,
	|		
	|		СУММА(
	|			ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|				ВыпускПродукции.Количество
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|			) КАК КоличествоОприходование,
	|		
	|		СУММА(ВыпускПродукции.Количество) КАК Количество,
	|		СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|		
	|		//ДляНалУчета 0 КАК СуммаЗатратПостояннаяРазница,
	|		//ДляНалУчета 0 КАК СуммаЗатратВременнаяРазница,
	|		0 КАК СуммаЗатрат
	|	
	|	ИЗ	
	|		РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		
	|	ГДЕ
	|		ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости 
	|		И ВыпускПродукции.Активность
//конец изменений 
	|		И ВыпускПродукции.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И Не ВыпускПродукции.КодОперации В (&КодыОперацийВыпускаФиксСтоимость)
	|		//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|		И ВыпускПродукции.Продукция В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Распределение.Продукция
	|			ИЗ			
	|				РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|			ГДЕ
	|				Распределение.Период МЕЖДУ &НачДата И &КонДата
	|				И Распределение.НомерПередела = &НомерПередела
	|				//ДляРеглУчета И Распределение.Организация = &Организация
	|			)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		//ДляРеглУчета ВыпускПродукции.Организация,
	|		ВыпускПродукции.Подразделение,
	|		ВыпускПродукции.НоменклатурнаяГруппа,
	|		ВыпускПродукции.Продукция,
	|		ВыпускПродукции.ХарактеристикаПродукции,
	|		ВыпускПродукции.СерияПродукции,
	|		ВыпускПродукции.Спецификация,
	|		ВыпускПродукции.Заказ,
	|		//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ
	|		
	|	ОБЪЕДИНИТЬ ВСЕ 
	|	
	|	ВЫБРАТЬ
	|		//ДляРеглУчета ЗатратыНаВыпускПродукции.Организация,
	|		ЗатратыНаВыпускПродукции.Подразделение,
	|		ЗатратыНаВыпускПродукции.НоменклатурнаяГруппа,
	|		ЗатратыНаВыпускПродукции.Продукция,
	|		ЗатратыНаВыпускПродукции.ХарактеристикаПродукции,
	|		ЗатратыНаВыпускПродукции.СерияПродукции,
	|		ЗатратыНаВыпускПродукции.Спецификация,
	|		ЗатратыНаВыпускПродукции.Заказ,
	|		//ДляРеглУчета ЗатратыНаВыпускПродукции.СчетУчета,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииКорректировка) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК КорректировкаНЗП,
	|		
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииВозврат) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ВозвратИзНЗП,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииОприходование) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ОприходованиеНЗП,
	|		
	|		0, // КоличествоОприходование
	|		0, // Количество
	|		0, // Стоимость
	|
	|		//ДляНалУчета СУММА(ЗатратыНаВыпускПродукции.ПостояннаяРазница) КАК СуммаЗатратПостояннаяРазница,
	|		//ДляНалУчета СУММА(ЗатратыНаВыпускПродукции.ВременнаяРазница) КАК СуммаЗатратВременнаяРазница,
	|		СУММА(ЗатратыНаВыпускПродукции.Сумма) КАК СуммаЗатрат
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпускПродукции
	|	ГДЕ
	|		ЗатратыНаВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|		И ЗатратыНаВыпускПродукции.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &СтатусМатериальныхЗатратПринятые
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости  
	|		И ЗатратыНаВыпускПродукции.Активность
//конец изменений 
	|		И ЗатратыНаВыпускПродукции.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И Не ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацийФиксСтоимость)
	|		//ДляРеглУчета И ЗатратыНаВыпускПродукции.Организация = &Организация
	|
	|		И ЗатратыНаВыпускПродукции.Продукция В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Распределение.Продукция
	|			ИЗ			
	|				РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|			ГДЕ
	|				Распределение.Период МЕЖДУ &НачДата И &КонДата
	|				И Распределение.НомерПередела = &НомерПередела
	|				//ДляРеглУчета И Распределение.Организация = &Организация
	|			)
	|			
	|	СГРУППИРОВАТЬ ПО
	|		//ДляРеглУчета ЗатратыНаВыпускПродукции.Организация,
	|		ЗатратыНаВыпускПродукции.Подразделение,
	|		ЗатратыНаВыпускПродукции.НоменклатурнаяГруппа,
	|		ЗатратыНаВыпускПродукции.Продукция,
	|		ЗатратыНаВыпускПродукции.ХарактеристикаПродукции,
	|		ЗатратыНаВыпускПродукции.СерияПродукции,
	|		ЗатратыНаВыпускПродукции.Спецификация,
	|		ЗатратыНаВыпускПродукции.Заказ,
	|		//ДляРеглУчета ЗатратыНаВыпускПродукции.СчетУчета,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииКорректировка) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииОприходование) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииВозврат) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ
	|		
	|	) КАК ВыпускПродукции
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Распределение.Подразделение,
	|			Распределение.КорректировкаНЗП,
	|			Распределение.ОприходованиеНЗП,
	|			Распределение.ВозвратИзНЗП,
	|			Распределение.Продукция,
	|			Распределение.ХарактеристикаПродукции,
	|			Распределение.СерияПродукции,
	|			Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|		ИЗ			
	|			РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|		ГДЕ
	|			Распределение.Период МЕЖДУ &НачДата И &КонДата
	|			И Распределение.НомерПередела = &НомерПередела
	|			//ДляРеглУчета И Распределение.Организация = &Организация
	|		) КАК Распределение
	|	ПО 
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|		И ВыпускПродукции.КорректировкаНЗП = Распределение.КорректировкаНЗП
	|		И ВыпускПродукции.ВозвратИзНЗП = Распределение.ВозвратИзНЗП
	|		И ВыпускПродукции.ОприходованиеНЗП = Распределение.ОприходованиеНЗП
	|	
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	ВыпускПродукции.ОприходованиеНЗП,
	| 	ВыпускПродукции.КорректировкаНЗП,
	| 	ВыпускПродукции.ВозвратИзНЗП
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	ВыпускПродукции.ОприходованиеНЗП,
	| 	ВыпускПродукции.КорректировкаНЗП,
	| 	ВыпускПродукции.ВозвратИзНЗП
	|";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск()

// Функция формирует запрос по регистрам "Выпуск продукции" и "Затраты на выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска".
//
// Возвращаемое значение:
//   Запрос – Запрос по регистрам "Выпуск продукции" и "Затраты на выпуск продукции".
//
Функция СформироватьЗапросПоВыпускуПродукцииИЗатратамНаВыпуск(
	СтруктураШапкиДокумента, 
	СпособРасчета,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск(
		СтруктураШапкиДокумента, 
		СпособРасчета, 
		КосвенныеЗатраты,
		ЗатратыВстречногоВыпуска,
		Запрос
		);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоВыпускуПродукцииИЗатратамНаВыпуск()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "ВЫПУСК ПРОДУКЦИИ"

// Функция формирует текст запроса по регистру "Выпуск продукции".
//
// Возвращаемое значение:
//   Текст – текст запроса по регистру "Выпуск продукции".
//
Функция СформироватьТекстЗапросаПоВыпускуПродукции()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляУпрУчета ВыпускПродукции.ДокументВыпуска.Организация КАК Организация,
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	
	|	ВыпускПродукции.Продукция,
	|	ПРЕДСТАВЛЕНИЕ(ВыпускПродукции.Продукция),
	|	ВыпускПродукции.Продукция.Услуга КАК Услуга,
	|	ВыпускПродукции.Продукция.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВыпускПродукции.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	
	|	ВыпускПродукции.ВариантВыпускаПродукции,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.ДокументВыпуска.Дата КАК ДокументВыпускаДата,
	|	ВыпускПродукции.КодОперации,
	|
	|	//ДляУпрУчета ЕСТЬNULL(ВыпускПродукции.ДокументВыпуска.Проект, &ПустойПроект) КАК ДокументВыпускаПроект,
	|	//ДляУпрУчета ЕСТЬNULL(ПроектыНоменклатуры.Проект, &ПустойПроект) КАК Проект,
	|	
	|	ВыпускПродукции.ПодразделениеПолучатель,
	|	ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|	
	|	ВыпускПродукции.СтатьяЗатратПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПоВозврату,
	|
	|	//ДляУпрУчета ВыпускПродукции.ОбъектСтроительства,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.СтатьяЗатратПоВозврату = &ПустаяСтатьяЗатрат ТОГДА
	|		ВыпускПродукции.СтатьяЗатратПоВозврату.ВидЗатрат
	|	ИНАЧЕ
	|		ВыпускПродукции.СтатьяЗатратПолучатель.ВидЗатрат
	|	КОНЕЦ КАК ВидЗатрат,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.СтатьяЗатратПоВозврату = &ПустаяСтатьяЗатрат ТОГДА
	|		ВыпускПродукции.СтатьяЗатратПоВозврату.ХарактерЗатрат
	|	ИНАЧЕ
	|		ВыпускПродукции.СтатьяЗатратПолучатель.ХарактерЗатрат
	|	КОНЕЦ КАК ХарактерЗатрат,
	|	
	|	ВыпускПродукции.СкладПолучатель,
	|	ВыпускПродукции.Качество,
	|	//ДляУпрУчета ВыпускПродукции.СтатусПартии,
	|	
	|	ВыпускПродукции.ЗаказПолучатель,
	|	ВыпускПродукции.ЗаказПолучатель.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ВыпускПродукции.ЗаказПолучатель.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|		) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		
	|	ВыпускПродукции.ПродукцияПолучатель,
	|	ВыпускПродукции.ХарактеристикаПродукцииПолучатель,
	|	ВыпускПродукции.СерияПродукцииПолучатель,
	|		
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП КАК СчетЗатрат,
	|	//ДляРеглУчета ВыпускПродукции.СчетДт,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт1,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт2,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт3,
	|		
	|	//ДляНалУчета ВыпускПродукции.СчетУчетаНЗП КАК СчетЗатратНУ,
	|	//ДляНалУчета ВыпускПродукции.СчетДт КАК СчетДтНУ,
	|	//ДляНалУчета ВыпускПродукции.СубконтоДт1 КАК СубконтоДтНУ1,
	|	//ДляНалУчета ВыпускПродукции.СубконтоДт2 КАК СубконтоДтНУ2,
	|	//ДляНалУчета ВыпускПродукции.СубконтоДт3 КАК СубконтоДтНУ3,
	|	
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК КорректировкаНЗП,
	|			
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ВозвратИзНЗП,
	|			
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОприходованиеНЗП,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацийСписаниеНаЗатраты)
	|		//ДляУпрУчета И ВыпускПродукции.СтатьяЗатратПолучатель.ХарактерЗатрат В (&МассивИсключаемыхХарактеровЗатрат)
	|		//ДляРеглУчета И ВыпускПродукции.СчетДт В ИЕРАРХИИ (&МассивИсключаемыхСчетовЗатрат)
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ПроверятьНаправлениеВыпуска,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|			ВыпускПродукции.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|		) КАК КоличествоОприходование,
	|	
	|	//ДляНалУчета СУММА(ВыпускПродукции.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	//ДляНалУчета СУММА(ВыпускПродукции.ВременнаяРазница) КАК ВременнаяРазница,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость
	|	
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|	//ДляУпрУчета ЛЕВОЕ СОЕДИНЕНИЕ 
	|	//ДляУпрУчета 	РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&КонДата, 
	|	//ДляУпрУчета 		НоменклатураПроекта В (
	|	//ДляУпрУчета			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета				Распределение.Продукция
	|	//ДляУпрУчета			ИЗ			
	|	//ДляУпрУчета				РегистрСведений.РаспределениеПродукцииПоПеределам КАК Распределение
	|	//ДляУпрУчета			ГДЕ
	|	//ДляУпрУчета				Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	//ДляУпрУчета				И Распределение.НомерПередела = &НомерПередела
	|	//ДляУпрУчета			)
	|	//ДляУпрУчета		) КАК ПроектыНоменклатуры
	|	//ДляУпрУчета	ПО 
	|	//ДляУпрУчета		ВыпускПродукции.Продукция = ПроектыНоменклатуры.НоменклатураПроекта
	|	
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости 
	|	И ВыпускПродукции.Активность
//конец изменений 
	|	И ВыпускПродукции.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|	И Не ВыпускПродукции.КодОперации В (&КодыОперацийВыпускаФиксСтоимость)
	|	
	|	И ВыпускПродукции.Подразделение В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Распределение.Подразделение
	|			ИЗ			
	|				РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|			ГДЕ
	|				Распределение.Период МЕЖДУ &НачДата И &КонДата
	|				И Распределение.НомерПередела = &НомерПередела
	|				//ДляРеглУчета И Распределение.Организация = &Организация
	|			)
	|	И ВыпускПродукции.Продукция В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Распределение.Продукция
	|			ИЗ			
	|				РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|			ГДЕ
	|				Распределение.Период МЕЖДУ &НачДата И &КонДата
	|				И Распределение.НомерПередела = &НомерПередела
	|				//ДляРеглУчета И Распределение.Организация = &Организация
	|			)
	|
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	
	|	ВыпускПродукции.ВариантВыпускаПродукции,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.КодОперации,
	|	
	|	//ДляУпрУчета ЕСТЬNULL(ВыпускПродукции.ДокументВыпуска.Проект, &ПустойПроект),
	|	//ДляУпрУчета ЕСТЬNULL(ПроектыНоменклатуры.Проект, &ПустойПроект),
	|
	|	ВыпускПродукции.ПодразделениеПолучатель,
	|	ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПоВозврату,
	|
	|	//ДляУпрУчета ВыпускПродукции.ОбъектСтроительства,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.СтатьяЗатратПоВозврату = &ПустаяСтатьяЗатрат ТОГДА
	|		ВыпускПродукции.СтатьяЗатратПоВозврату.ВидЗатрат
	|	ИНАЧЕ
	|		ВыпускПродукции.СтатьяЗатратПолучатель.ВидЗатрат
	|	КОНЕЦ,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.СтатьяЗатратПоВозврату = &ПустаяСтатьяЗатрат ТОГДА
	|		ВыпускПродукции.СтатьяЗатратПоВозврату.ХарактерЗатрат
	|	ИНАЧЕ
	|		ВыпускПродукции.СтатьяЗатратПолучатель.ХарактерЗатрат
	|	КОНЕЦ,
	|	
	|	ВыпускПродукции.СкладПолучатель,
	|	ВыпускПродукции.Качество,
	|	//ДляУпрУчета ВыпускПродукции.СтатусПартии,
	|	
	|	ВыпускПродукции.ЗаказПолучатель,
	|	ЕСТЬNULL(
	|		ВыпускПродукции.ЗаказПолучатель.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|		),
	|	
	|	ВыпускПродукции.ПродукцияПолучатель,
	|	ВыпускПродукции.ХарактеристикаПродукцииПолучатель,
	|	ВыпускПродукции.СерияПродукцииПолучатель,
	|		
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	//ДляРеглУчета ВыпускПродукции.СчетДт,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт1,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт2,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт3,
	|	
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|	
	|	ВыпускПродукции.ВариантВыпускаПродукции,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.КодОперации,
	|	
	|	ВыпускПродукции.ПодразделениеПолучатель,
	|	ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПоВозврату,
	|	ВыпускПродукции.СкладПолучатель,
	|	ВыпускПродукции.Качество,
	|	//ДляУпрУчета ВыпускПродукции.СтатусПартии,
	|	//ДляУпрУчета ВыпускПродукции.ОбъектСтроительства,
	|	ВыпускПродукции.ЗаказПолучатель,
	|		
	|	//ДляРеглУчета ВыпускПродукции.СчетДт,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт1,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт2,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт3,
	|	
	|	ВыпускПродукции.ПродукцияПолучатель,
	|	ВыпускПродукции.ХарактеристикаПродукцииПолучатель,
	|	ВыпускПродукции.СерияПродукцииПолучатель
	|";	

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукции()

// Функция формирует запрос по регистру "Выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска".
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Выпуск продукции".
//
Функция СформироватьЗапросПоНаправлениямВыпускаПродукции(
	СтруктураШапкиДокумента, 
	СпособРасчета,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоВыпускуПродукции();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск(
		СтруктураШапкиДокумента, 
		СпособРасчета, 
		КосвенныеЗатраты,
		ЗатратыВстречногоВыпуска,
		Запрос
		);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоНаправлениямВыпускаПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСА ДЛЯ ОПРЕДЕЛЕНИЯ НАПРАВЛЕНИЙ ВЫПУСКА, ИСКЛЮЧАЕМЫХ ИЗ КОРРЕКТИРОВКИ

// Функция формирует текст запроса для получения направлений списания продукции, исключаемых из корректировки.
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоИсключаемымНаправлениямВыпуска()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.НоменклатурнаяГруппа,
	|	Распределение.СтатьяЗатрат,
	|	Распределение.Затрата,
	|	Распределение.ХарактеристикаЗатраты,
	|	Распределение.СерияЗатраты
	|ИЗ			
	|	РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И Распределение.ВстречныйВыпуск
	|	И &ЗатратыВстречногоВыпуска
	|	И Не &ИтерационныйРасчетЗатратВстречногоВыпуска
	|	//ДляРеглУчета И Распределение.Организация = &Организация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Корректировка.Подразделение,
	|	Корректировка.НоменклатурнаяГруппа,
	|	Корректировка.СтатьяЗатрат,
	|	Корректировка.Затрата,
	|	Корректировка.ХарактеристикаЗатраты,
	|	Корректировка.СерияЗатраты
	|ИЗ			
	|	РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК Корректировка
	|ГДЕ
	|	Корректировка.Период МЕЖДУ &НачДата И &КонДата
//начало изменений Ожиганов 28.01.2016 б/н исключение неактивных записей из р/с и корректировки стоимости 
	|	И Корректировка.Активность
//конец изменений 
	|	И Корректировка.Документ = Неопределено
	|	//ДляУпрУчета И Корректировка.ОтражатьВУправленческомУчете
	|	//ДляРеглУчета И Корректировка.ОтражатьВБухгалтерскомУчете
	|	//ДляРеглУчета И Корректировка.Организация = &Организация
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	СтатьяЗатрат,
	|	Затрата,
	|	ХарактеристикаЗатраты,
	|	СерияЗатраты
	|";	

	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПоИсключаемымНаправлениямВыпуска()

// Функция формирует запрос для получения направлений списания продукции, исключаемых из корректировки.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска".
//
// Возвращаемое значение:
//   Запрос – Запрос по исключаемым направлениям выпуска
//
Функция СформироватьЗапросПоИсключаемымНаправлениямВыпуска(
	СтруктураШапкиДокумента, 
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска
	)
	
	Запрос = Новый Запрос;
	
	Если КосвенныеЗатраты ИЛИ ЗатратыВстречногоВыпуска Тогда
		
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоИсключаемымНаправлениямВыпуска();
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаСКомментариями, 
			СтруктураШапкиДокумента.ВидОтраженияВУчете
		);
		Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
		Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ЗатратыВстречногоВыпуска", ЗатратыВстречногоВыпуска);
		Запрос.УстановитьПараметр("ИтерационныйРасчетЗатратВстречногоВыпуска", СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска);
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL
		|";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоИсключаемымНаправлениямВыпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ФОРМИРОВАНИЯ ЗАПРОСА ДЛЯ ОПРЕДЕЛЕНИЯ КОЭФФИЦИЕНТОВ РАСПРЕДЕЛЕНИЯ ПО ПРОЕКТАМ

// Функция формирует запрос по коэффициентам распределения по проектам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//
// Возвращаемое значение:
//	Запрос - Запрос по коэффициентам распределения по проектам.
//
Функция СформироватьЗапросРаспределениеПоПроектам(
	СтруктураШапкиДокумента
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаспределениеПоПроектам.ВидРаспределения,
		|	РаспределениеПоПроектам.Проект,
		|	РаспределениеПоПроектам.ДоляРаспределения
		|ИЗ
		|	РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&КонДата, ) КАК РаспределениеПоПроектам
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			РаспределениеПоПроектам.ВидРаспределения,
		|			МАКСИМУМ(РаспределениеПоПроектам.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&КонДата, ) КАК РаспределениеПоПроектам
		|		СГРУППИРОВАТЬ ПО
		|			РаспределениеПоПроектам.ВидРаспределения
		|		) КАК РаспределениеПоПроектамПериод
		|	ПО
		|		РаспределениеПоПроектам.ВидРаспределения = РаспределениеПоПроектамПериод.ВидРаспределения
		|		И РаспределениеПоПроектам.Период = РаспределениеПоПроектамПериод.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспределениеПоПроектам.ВидРаспределения,
		|	РаспределениеПоПроектам.Проект
		|";
	
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросРаспределениеПоПроектам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ НАКОПЛЕНИЯ ПО НАПРАВЛЕНИЯМ ВЫПУСКА

// Процедура формирует движение по регистру "Выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//  СуммаКорректировкиПостояннаяРазница - Число - Сумма корректировки в части постоянной разницы
//  СуммаКорректировкиВременнаяРазница - Число - Сумма корректировки в части временной разницы
//	НаборЗаписейВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Выпуск продукции".
//
Процедура СформироватьДвиженияПоРегиструВыпускПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаКорректировкиПостояннаяРазница,
	СуммаКорректировкиВременнаяРазница,
	НаборЗаписейВыпускПродукции
	)
	
	Если СуммаКорректировки = 0
	   И СуммаКорректировкиПостояннаяРазница = 0
	   И СуммаКорректировкиВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписейВыпускПродукции.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.Количество  = 0;
	НоваяСтрока.Стоимость = СуммаКорректировки;
		
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = СуммаКорректировкиПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = СуммаКорректировкиВременнаяРазница;
	КонецЕсли;

	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейВыпускПродукции.Количество() = 1000 Тогда
		НаборЗаписейВыпускПродукции.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатраты()

// Функция получает способ ведения партионного учета для организации по данным соответствия
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	Организация - СправочникСсылка.Организации - Текущая организация
//
Функция ПолучитьСпособВеденияПартионногоУчетаПоОрганизацииИзСоответствия(
	СтруктураШапкиДокумента,
	Организация
	)
	
	СпособыВеденияПартионногоУчетаПоОрганизациям = СтруктураШапкиДокумента.СпособыВеденияПартионногоУчетаПоОрганизациям;
	СпособВеденияПартионногоУчетаПоОрганизации = СпособыВеденияПартионногоУчетаПоОрганизациям.Получить(Организация);
	
	Возврат СпособВеденияПартионногоУчетаПоОрганизации;
	
КонецФункции // ПолучитьСпособВеденияПартионногоУчетаПоОрганизацииИзСоответствия()

// Процедура формирует движение по регистру "Партии товаров на складах".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//  СуммаКорректировкиПостояннаяРазница - Число - Сумма корректировки в части постоянной разницы
//  СуммаКорректировкиВременнаяРазница - Число - Сумма корректировки в части временной разницы
//	НаборЗаписейПартииТоваровНаСкладах - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Партии товаров на складах".
//
Процедура СформироватьДвиженияПоРегиструПартииТоваровНаСкладах(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаКорректировкиПостояннаяРазница,
	СуммаКорректировкиВременнаяРазница,
	НаборЗаписейПартииТоваровНаСкладах
	)
	
	Если СуммаКорректировки = 0
	   И СуммаКорректировкиПостояннаяРазница = 0
	   И СуммаКорректировкиВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		СпособВеденияПартионногоУчетаПоОрганизации = ПолучитьСпособВеденияПартионногоУчетаПоОрганизацииИзСоответствия(
			СтруктураШапкиДокумента,
			СтрокаВыборки.Организация
		);
		Если СпособВеденияПартионногоУчетаПоОрганизации = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// В движениях по регистру "Партии товаров на складах" должны быть заполнены измерения:
	//	- Номенклатура,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Склад - заполняется, если ведется суммовой учет по складам
	//		склад не заполняется для продукции, выпущенной из давальческого сырья (при указании заказа покупателя: переработка),
	//	- ХарактеристикаНоменклатуры,
	//	- СерияНоменклатуры - заполняется, если ведется партионный учет по сериям,
	//	- ДокументОприходования - заполняется, если не используется способ списания МПЗ "По средней",
	//	- СтатусПартии - заполняется только при отражении документа в управленческом учете,
	//	- Заказ - заполняется, если в заказе покупателя указан договор с установленным флажком "Вести учет товаров по заказам покупателей"
	//		или если указан заказ покупателя: переработка.
	//	- Качество.
	//
	// В движениях должны быть заполнены реквизиты:
	//	- КодОперации - записывается код операции "Выпуск по операции стоимость",
	//	- ДокументДвижения - документ, движения которого корректируются по фактической стоимости.
	//	- ДокументДвиженияПериод - период документа движения
	
	НоваяСтрока = НаборЗаписейПартииТоваровНаСкладах.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Номенклатура = СтрокаВыборки.Продукция;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ОрганизацияУпр = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(
			СтрокаВыборки.Организация,
			СпособВеденияПартионногоУчетаПоОрганизации
		);
		НоваяСтрока.Организация = ОрганизацияУпр;
		
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам
		   И Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		  ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		  ИЛИ СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		  
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
		  
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл
		   И Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаВыборки.ХарактеристикаПродукции;
	
	Если СтрокаВыборки.ВестиПартионныйУчетПоСериям Тогда
		НоваяСтрока.СерияНоменклатуры = СтрокаВыборки.СерияПродукции;
	Иначе
		НоваяСтрока.СерияНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчетПоСредней Тогда
		НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Если ЗначениеЗаполнено(СтрокаВыборки.СтатусПартии) Тогда
			НоваяСтрока.СтатусПартии = СтрокаВыборки.СтатусПартии;
		Иначе
			НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
		КонецЕсли;
	КонецЕсли;

	Если СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
	 ИЛИ СтрокаВыборки.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
	КонецЕсли;
		
	НоваяСтрока.Качество = СтрокаВыборки.Качество;
	
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч Тогда
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваРасч;
	Иначе
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость;
	КонецЕсли;
	
	НоваяСтрока.ДокументДвижения = СтрокаВыборки.ДокументВыпуска;	
	НоваяСтрока.ДокументДвиженияПериод = СтрокаВыборки.ДокументВыпускаДата;
	
	НоваяСтрока.Стоимость = СуммаКорректировки;
	НоваяСтрока.Количество  = 0;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = СуммаКорректировкиПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = СуммаКорректировкиВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейПартииТоваровНаСкладах.Количество() = 1000 Тогда
		НаборЗаписейПартииТоваровНаСкладах.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструПартииТоваровНаСкладах()

// Процедура формирует движение по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	НомерПередела - Число - Текущий номер передела
//  СуммаКорректировки - Число - Сумма корректировки
//  СуммаКорректировкиПостояннаяРазница - Число - Сумма корректировки в части постоянной разницы
//  СуммаКорректировкиВременнаяРазница - Число - Сумма корректировки в части временной разницы
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство".
//
Процедура СформироватьДвиженияПоРегиструНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	НомерПередела,
	СуммаКорректировки,
	СуммаКорректировкиПостояннаяРазница,
	СуммаКорректировкиВременнаяРазница,
	НаборЗаписейНезавершенноеПроизводство
	)
	
	Если СуммаКорректировки = 0
	   И СуммаКорректировкиПостояннаяРазница = 0
	   И СуммаКорректировкиВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Незавершенное производство" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - всегда заполняется в случае указания статей затрат с видом затрат "Материальные",
	//		для нематериальных статей затрат должен заполнятся способ распределения затрат.
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты - заполняется, если ведется учет по сериям в НЗП.
	
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
			НоваяСтрока.СчетУчета = СтрокаВыборки.СчетЗатрат;
		Иначе
			НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
	
	Если СтрокаВыборки.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
		
		НоваяСтрока.Затрата = СтрокаВыборки.Продукция;
		
		Если Не СтрокаВыборки.Услуга Тогда
			
			НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаПродукции;
		
			Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
				НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияПродукции;
			Иначе
				НоваяСтрока.СерияЗатраты = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ОприходованиеНЗП;
	Иначе
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ВнутренниеУслугиНаПроизводство;
	КонецЕсли;
	НоваяСтрока.НомерПередела = НомерПередела;
	
	НоваяСтрока.Стоимость = СуммаКорректировки;
	НоваяСтрока.Количество  = 0;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = СуммаКорректировкиПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = СуммаКорректировкиВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструНезавершенноеПроизводство()

// Процедура формирует движение по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//  СуммаКорректировкиПостояннаяРазница - Число - Сумма корректировки в части постоянной разницы
//  СуммаКорректировкиВременнаяРазница - Число - Сумма корректировки в части временной разницы
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты".
//
Процедура СформироватьДвиженияПоРегиструЗатраты(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаКорректировкиПостояннаяРазница,
	СуммаКорректировкиВременнаяРазница,
	НаборЗаписейЗатраты
	)
	
	Если СуммаКорректировки = 0
	   И СуммаКорректировкиПостояннаяРазница = 0
	   И СуммаКорректировкиВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтрокаВыборки.ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ.
	
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтрокаВыборки.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		НоваяСтрока.НоменклатурнаяГруппа = Неопределено;
	Иначе
		НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатраты.ВнутренниеУслугиНаПостоянныеЗатраты;
	
	НоваяСтрока.Сумма = СуммаКорректировки;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = СуммаКорректировкиПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = СуммаКорректировкиВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатраты()

// Процедура формирует движение по регистру "Брак в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//  СуммаКорректировкиПостояннаяРазница - Число - Сумма корректировки в части постоянной разницы
//  СуммаКорректировкиВременнаяРазница - Число - Сумма корректировки в части временной разницы
//	НаборЗаписейБракВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Брак в производстве".
//
Процедура СформироватьДвиженияПоРегиструБракВПроизводстве(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаКорректировкиПостояннаяРазница,
	СуммаКорректировкиВременнаяРазница,
	НаборЗаписейБракВПроизводстве
	)
	
	Если СуммаКорректировки = 0
	   И СуммаКорректировкиПостояннаяРазница = 0
	   И СуммаКорректировкиВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Брак в производстве" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции.
	
	НоваяСтрока = НаборЗаписейБракВПроизводстве.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
	
	НоваяСтрока.Продукция = СтрокаВыборки.ПродукцияПолучатель;
	НоваяСтрока.ХарактеристикаПродукции = СтрокаВыборки.ХарактеристикаПродукцииПолучатель;
	НоваяСтрока.СерияПродукции = СтрокаВыборки.СерияПродукцииПолучатель;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.ВнутренниеУслугиНаПостоянныеЗатраты;
	
	НоваяСтрока.Сумма = СуммаКорректировки;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = СуммаКорректировкиПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = СуммаКорректировкиВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейБракВПроизводстве.Количество() = 1000 Тогда
		НаборЗаписейБракВПроизводстве.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБракВПроизводстве()

// Процедура формирует движение по регистру "Продажи себестоимость".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	Проект - СправочникСсылка.Проекты - Проект
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейПродажиСебестоимость - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Продажи себестоимость".
//
Процедура СформироватьДвиженияПоРегиструПродажиСебестоимость(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Проект,
	СуммаКорректировки,
	НаборЗаписейПродажиСебестоимость
	)
	
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Продажи себестоимость" должны быть заполнены измерения:
	//	- Номенклатура
	//	- ХарактеристикаНоменклатуры
	//	- ЗаказПокупателя
	//	- ДокументОприходования
	//	- Подразделение
	//	- Проект
	//
	// Ресурсы:
	//	- Стоимость
	
	НоваяСтрока = НаборЗаписейПродажиСебестоимость.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Номенклатура = СтрокаВыборки.Продукция;
	НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаВыборки.ХарактеристикаПродукции;
	НоваяСтрока.ЗаказПокупателя = СтрокаВыборки.Заказ;
	НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
	НоваяСтрока.Подразделение = СтрокаВыборки.Подразделение;
	
	НоваяСтрока.Проект = Проект;
		
	НоваяСтрока.ДокументДвижения = СтрокаВыборки.ДокументВыпуска;
	НоваяСтрока.ДокументДвиженияПериод = СтрокаВыборки.ДокументВыпускаДата;
		
	НоваяСтрока.Стоимость = СуммаКорректировки;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейПродажиСебестоимость.Количество() = 1000 Тогда
		НаборЗаписейПродажиСебестоимость.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструПродажиСебестоимость()

// Процедура формирует движение по регистру "Строительство объектов основных средств".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейСтроительствоОбъектовОсновныхСредств - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Строительство объектов основных средств".
//
Процедура СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	НаборЗаписейСтроительствоОбъектовОсновныхСредств
	)
	
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписейСтроительствоОбъектовОсновныхСредств.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.ОбъектСтроительства = СтрокаВыборки.ОбъектСтроительства;
		
	НоваяСтрока.Сумма = СуммаКорректировки;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейСтроительствоОбъектовОсновныхСредств.Количество() = 1000 Тогда
		НаборЗаписейСтроительствоОбъектовОсновныхСредств.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств()

// Процедура формирует движение по регистру "затраты на строительство объектов основных средств".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на строительство объектов основных средств".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств
	)
	
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.ОбъектСтроительства = СтрокаВыборки.ОбъектСтроительства;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
		
	НоваяСтрока.Сумма = СуммаКорректировки;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ДОСПИСАНИЯ СТОИМОСТИ ПО НАПРАВЛЕНИЯМ ВЫПУСКА

// Процедура выполняет распределение себестоимости по проектам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по выпуску продукции
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса распределения по проектам
//	Стоимость - Число - Стоимость выпущенной продукции по управленческому учету
//	НаборЗаписейПродажиСебестоимость - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Продажи себестоимость".
//
Процедура РаспределитьПродажиСебестоимостьПоПроектам(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаРаспределениеПоПроектам,
	Стоимость,
	НаборЗаписейПродажиСебестоимость
	)
	
	Если Не СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		Проект = Справочники.Проекты.ПустаяСсылка();
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыборки.ДокументВыпускаПроект) Тогда
		Проект = СтрокаВыборки.ДокументВыпускаПроект;
	Иначе
		Проект = СтрокаВыборки.Проект;
	КонецЕсли;
	
	ВсегоБазаРаспределения = 0;
	Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
		
		СтруктураПоиска = Новый Структура("ВидРаспределения", Проект);
		
		МассивКоэф = Новый Массив;
		
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
			МассивКоэф.Добавить(ВыборкаРаспределениеПоПроектам.ДоляРаспределения);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаРаспределениеПоПроектам.ДоляРаспределения;
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			ОбщегоНазначения.Сообщение("Не удалось выполнить распределение себестоимости продаж по виду распределения """ + Проект + """", СтатусСообщения.Внимание);
			Проект = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
		
	Если ВсегоБазаРаспределения <> 0 Тогда
			
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(СтрокаВыборки.Количество, МассивКоэф, 3);
		МассивСтоимость  = ОбщегоНазначения.РаспределитьПропорционально(Стоимость, МассивКоэф, 2);
			
		Индекс = 0;
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
				
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			Сумма      = ?(МассивСтоимость = Неопределено, 0, МассивСтоимость[Индекс]);
				
			СформироватьДвиженияПоРегиструПродажиСебестоимость(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаРаспределениеПоПроектам.Проект,
				Сумма,
				НаборЗаписейПродажиСебестоимость
			);
				
			Индекс = Индекс + 1;
				
		КонецЦикла;
			
	Иначе
		
		СформироватьДвиженияПоРегиструПродажиСебестоимость(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Проект,
			Стоимость,
			НаборЗаписейПродажиСебестоимость
		);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьПродажиСебестоимостьПоПроектам()

// Процедура формирует движения по направлениям выпуска
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости".
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела
//  СуммаЗатрат - Число - Полная сумма затрат на выпуск продукции
//  СуммаКорректировки - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца
//  СуммаЗатратПостояннаяРазница - Число - Полная сумма затрат на выпуск продукции в части постоянной разницы
//  СуммаКорректировкиПостояннаяРазница - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца,
//		в части постоянной разницы
//  СуммаЗатратВременнаяРазница - Число - Полная сумма затрат на выпуск продукции в части временной разницы
//  СуммаКорректировкиВременнаяРазница - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца,
//		в части временной разницы
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//  СтруктураДвижений - Структура - Наборы движений по регистрам
//	ТабТоваров - ТаблицаЗначений - Таблица продукции для передачи в модуль партионного учета.
//
Процедура ДосписатьПоНаправлениюВыпуска(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаРаспределениеПоПроектам,
	НомерПередела,
	СуммаЗатрат,
	СуммаКорректировки,
	СуммаЗатратПостояннаяРазница,
	СуммаКорректировкиПостояннаяРазница,
	СуммаЗатратВременнаяРазница,
	СуммаКорректировкиВременнаяРазница,
	СоответствиеКодОперацииСодержание,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	СтруктураДвижений,
	ТабТоваров
	)
	
	СформироватьДвиженияПоРегиструВыпускПродукции(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		СуммаКорректировки,
		СуммаКорректировкиПостояннаяРазница,
		СуммаКорректировкиВременнаяРазница,
		СтруктураДвижений.ДвиженияВыпуск
	);
		
	// Сформируем движения по регистру "Партии товаров на складах".
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс
		 Тогда
		 
		СформироватьДвиженияПоРегиструПартииТоваровНаСкладах(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СуммаКорректировки,
			СуммаКорректировкиПостояннаяРазница,
			СуммаКорректировкиВременнаяРазница,
			СтруктураДвижений.ДвиженияПартии
		);
		
		Если СуммаКорректировки <> 0
		 ИЛИ СуммаКорректировкиПостояннаяРазница <> 0
		 ИЛИ СуммаКорректировкиВременнаяРазница <> 0 Тогда
			

			НоваяСтрока = ТабТоваров.Добавить();
			НоваяСтрока.Номенклатура = СтрокаВыборки.Продукция;
			Если НЕ СтруктураШапкиДокумента.УчетПоСредней Тогда
				НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
			КонецЕсли;
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
			КонецЕсли;
		
		КонецЕсли;
			
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
			СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаЗатрат,
				СуммаКорректировки,
				СуммаЗатратПостояннаяРазница,
				СуммаКорректировкиПостояннаяРазница,
				СуммаЗатратВременнаяРазница,
				СуммаКорректировкиВременнаяРазница,
				Неопределено, // ХарактерЗатрат
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СоответствиеКодОперацииСодержание,
				СтруктураДвижений.Операция
			);
				
		КонецЕсли;
			
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс
		Тогда
		
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
				СчетДт = СтрокаВыборки.СчетЗатрат;
			Иначе
				СчетДт = СтрокаВыборки.СчетДт;
			КонецЕсли;
		КонецЕсли;
			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
				СчетДт, 
				СтрокаВыборки.СтатьяЗатратПолучатель
			);
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
				СчетДт, 
				СтрокаВыборки.СтатьяЗатратПолучатель, 
				"Налоговый"
			);
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			ХарактерЗатрат = СтрокаВыборки.ХарактерЗатрат;
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда	
			// is ЯннуровВФ нач 20141028
			//ХарактерЗатрат = ПолучитьХарактерЗатратПоСчетуЗатратМежд(
			//	СчетДт, 
			//	СтрокаВыборки.СтатьяЗатратПолучатель
			//);
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
				СчетДт, 
				СтрокаВыборки.СтатьяЗатратПолучатель, 
				"Международный"
			);
			// is ЯннуровВФ кон 20141028
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не определен характер затрат по коду операции""" + СтрокаВыборки.КодОперации + """.
				|Процедура <ДосписатьПоНаправлениюВыпуска>");
		КонецЕсли;
				
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
			СформироватьДвиженияПоРегиструНезавершенноеПроизводство(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				НомерПередела,
				СуммаКорректировки,
				СуммаКорректировкиПостояннаяРазница,
				СуммаКорректировкиВременнаяРазница,
				СтруктураДвижений.ДвиженияНЗП
				);
					
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
					
			СформироватьДвиженияПоРегиструБракВПроизводстве(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СуммаКорректировки,
				СуммаКорректировкиПостояннаяРазница,
				СуммаКорректировкиВременнаяРазница,
				СтруктураДвижений.ДвиженияБракВПроизводстве
				);
					
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			  ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы
			  ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
			  ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
			  Тогда

			СформироватьДвиженияПоРегиструЗатраты(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СуммаКорректировки,
				СуммаКорректировкиПостояннаяРазница,
				СуммаКорректировкиВременнаяРазница,
				СтруктураДвижений.ДвиженияЗатраты
			);

		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
				СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств(
					СтруктураШапкиДокумента,
					СтрокаВыборки,
					СуммаКорректировки,
					СтруктураДвижений.СтроительствоОбъектовОсновныхСредств
				);
					
				СформироватьДвиженияПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(
					СтруктураШапкиДокумента,
					СтрокаВыборки,
					СуммаКорректировки,
					СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств
				);
					
			КонецЕсли;

		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				СформироватьДвиженияПоРегиструЗатраты(
					СтруктураШапкиДокумента,
					СтрокаВыборки,
					СуммаКорректировки,
					0, // СуммаПостоянаяРазница
					0, // СуммаВременнаяРазница
					СтруктураДвижений.ДвиженияЗатраты
					);
			КонецЕсли;
				
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете Тогда
				
			// Формировать движения не нужно.
				
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не обработан характер затрат """ + ХарактерЗатрат + """. статья затрат "+СтрокаВыборки.СтатьяЗатрат+"
			|Процедура <ДосписатьПоНаправлениюВыпуска>");
			
		КонецЕсли;
			
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
			СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаЗатрат,
				СуммаКорректировки,
				СуммаЗатратПостояннаяРазница,
				СуммаКорректировкиПостояннаяРазница,
				СуммаЗатратВременнаяРазница,
				СуммаКорректировкиВременнаяРазница,
				ХарактерЗатрат,
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СоответствиеКодОперацииСодержание,
				СтруктураДвижений.Операция
			);
				
		КонецЕсли;
			
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс Тогда
			
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаВыборки.СчетДт, СтрокаВыборки.СтатьяЗатратПолучатель);
				
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаВыборки.СчетДт, СтрокаВыборки.СтатьяЗатратПолучатель, "Налоговый");
				
			// is ЯннуровВФ нач 20141015
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаВыборки.СчетДт, СтрокаВыборки.СтатьяЗатратПолучатель, "Международный");
			// is ЯннуровВФ нач 20141015
			
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Не определен характер затрат по коду операции""" + СтрокаВыборки.КодОперации + """.
					|Процедура <ДосписатьПоНаправлениюВыпуска>.");
			КонецЕсли;
				
			СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаЗатрат,
				СуммаКорректировки,
				СуммаЗатратПостояннаяРазница,
				СуммаКорректировкиПостояннаяРазница,
				СуммаЗатратВременнаяРазница,
				СуммаКорректировкиВременнаяРазница,
				ХарактерЗатрат,
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СоответствиеКодОперацииСодержание,
				СтруктураДвижений.Операция
			);
				
		КонецЕсли;
		  
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			РаспределитьПродажиСебестоимостьПоПроектам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаРаспределениеПоПроектам,
				СуммаКорректировки,
				СтруктураДвижений.ДвиженияПродажиСебестоимость
			);
			
		КонецЕсли;
			
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
			СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаЗатрат,
				СуммаКорректировки,
				СуммаЗатратПостояннаяРазница,
				СуммаКорректировкиПостояннаяРазница,
				СуммаЗатратВременнаяРазница,
				СуммаКорректировкиВременнаяРазница,
				ХарактерЗатрат,
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СоответствиеКодОперацииСодержание,
				СтруктураДвижений.Операция
			);
				
		КонецЕсли;
			
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не обработан код операции """ + СтрокаВыборки.КодОперации + """.
			|Процедура <ДосписатьПоНаправлениюВыпуска>");
			
	КонецЕсли;
	
КонецПроцедуры // ДосписатьПоНаправлениюВыпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОРРЕКИРОВКИ СТОИМОСТИ ПРОДУКЦИИ ПО НАПРАВЛЕНИЯМ ВЫПУСКА

// Функция получает структуру поиска строк результата запроса по выпуску продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса по затратам на выпуск
//
// Возвращаемое значение:
//	Структура - Структура поиска
//
Функция ПолучитьСтруктуруПоискаСтрокВыпускаПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки
	)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	СтруктураПоиска.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппа);
	СтруктураПоиска.Вставить("Продукция", СтрокаВыборки.Продукция);
	СтруктураПоиска.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаПродукции);
	СтруктураПоиска.Вставить("СерияПродукции", СтрокаВыборки.СерияПродукции);
	СтруктураПоиска.Вставить("Спецификация", СтрокаВыборки.Спецификация);
	СтруктураПоиска.Вставить("Заказ", СтрокаВыборки.Заказ);
		
	СтруктураПоиска.Вставить("ОприходованиеНЗП", СтрокаВыборки.ОприходованиеНЗП);
	СтруктураПоиска.Вставить("КорректировкаНЗП", СтрокаВыборки.КорректировкаНЗП);
	СтруктураПоиска.Вставить("ВозвратИзНЗП", СтрокаВыборки.ВозвратИзНЗП);
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПоиска.Вставить("СчетУчетаНЗП", СтрокаВыборки.СчетУчетаНЗП);
	КонецЕсли; 
	
	Возврат СтруктураПоиска;
	
КонецФункции // ПолучитьСтруктуруПоискаСтрокВыпускаПродукции()

// Функция проверяет наличие исключаемых направлений выпуска продукции.
//
// Параметры
//	ВыборкаПоЗатратам - ВыборкаИзРезультатаЗапроса - Выборка по затратам на выпуск продукции
//	ВыборкаПоИсключаемымНаправлениямВыпуска - ВыборкаИзРезультатаЗапроса - Выборка по исключаемым направлениям выпуска
//
// Возвращаемое значение:
//	Булево –	Истина - есть направления выпуска, исключаемые из корректировки,
//				Ложь - нет направлений выпуска, исключаемых из корректировки.
//	
Функция ЕстьИсключаемыеНаправленияВыпуска(
	ВыборкаПоЗатратам,
	ВыборкаПоИсключаемымНаправлениямВыпуска
	)
	
	СтруктураПоискаРаспределение = Новый Структура;
	СтруктураПоискаРаспределение.Вставить("Затрата", ВыборкаПоЗатратам.Продукция);
	СтруктураПоискаРаспределение.Вставить("ХарактеристикаЗатраты", ВыборкаПоЗатратам.ХарактеристикаПродукции);
	СтруктураПоискаРаспределение.Вставить("СерияЗатраты", ВыборкаПоЗатратам.СерияПродукции);
				
	ВыборкаПоИсключаемымНаправлениямВыпуска.Сбросить();
	Если ВыборкаПоИсключаемымНаправлениямВыпуска.НайтиСледующий(СтруктураПоискаРаспределение) Тогда
		ИсключитьНаправлениеВыпуска = Истина;
	Иначе
		ИсключитьНаправлениеВыпуска = Ложь;
	КонецЕсли;
	
	Возврат ИсключитьНаправлениеВыпуска;
	
КонецФункции // ЕстьИсключаемыеНаправленияВыпуска()

// Функция проверяет направление выпуска на исключаемое из корректировки.
//
// Параметры
//	ВыборкаПоВыпуску - ВыборкаИзРезультатаЗапроса - Выборка по выпуску продукции
//	ВыборкаПоИсключаемымНаправлениямВыпуска - ВыборкаИзРезультатаЗапроса - Выборка по исключаемым направлениям выпуска
//
// Возвращаемое значение:
//	Булево –	Истина - направление выпуска исключается из корректировки,
//				Ложь - направление выпуска не исключается из корректировки.
//	
Функция ЭтоИсключаемоеНаправлениеВыпуска(
	ВыборкаПоВыпуску,
	ВыборкаПоИсключаемымНаправлениямВыпуска
	)
	
	ИсключитьНаправлениеВыпуска = Ложь;
	Если ВыборкаПоВыпуску.ПроверятьНаправлениеВыпуска Тогда
		
		СтруктураПоискаРаспределение = Новый Структура;
		СтруктураПоискаРаспределение.Вставить("СтатьяЗатрат", ВыборкаПоВыпуску.СтатьяЗатратПолучатель);
		СтруктураПоискаРаспределение.Вставить("Подразделение", ВыборкаПоВыпуску.ПодразделениеПолучатель);
		Если Не ВыборкаПоВыпуску.НоменклатурнаяГруппаПолучатель.Пустая() Тогда
			СтруктураПоискаРаспределение.Вставить("НоменклатурнаяГруппа", ВыборкаПоВыпуску.НоменклатурнаяГруппаПолучатель);
		КонецЕсли;
					
		СтруктураПоискаРаспределение.Вставить("Затрата", ВыборкаПоВыпуску.Продукция);
		СтруктураПоискаРаспределение.Вставить("ХарактеристикаЗатраты", ВыборкаПоВыпуску.ХарактеристикаПродукции);
		СтруктураПоискаРаспределение.Вставить("СерияЗатраты", ВыборкаПоВыпуску.СерияПродукции);
					
		ВыборкаПоИсключаемымНаправлениямВыпуска.Сбросить();
		Если ВыборкаПоИсключаемымНаправлениямВыпуска.НайтиСледующий(СтруктураПоискаРаспределение) Тогда
			ИсключитьНаправлениеВыпуска = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИсключитьНаправлениеВыпуска;
	
КонецФункции // ЭтоИсключаемоеНаправлениеВыпуска()

// Процедура формирует корректирующие движения по выпуску продукции и услуг.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  ЗапросПоЗатратамНаВыпускПродукции - Запрос - Запрос по регистру "Затраты на выпуск продукции" с учетом регистра "Выпуск продукции"
//  ЗапросПоВыпускуПродукции - Запрос - Запрос по регистру "Выпуск продукции" с направлениями списания продукции
//  ЗапросПоИсключаемымНаправлениямВыпуска - Запрос - Запрос по списанию на исключаемые направления выпуска
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//  СтруктураДвижений - Структура - Наборы движений по регистрам
//	ТабТоваров - ТаблицаЗначений - Таблица продукции для передачи в модуль партионного учета.
//
Процедура КорректировкаДвиженийПоВыпускуПродукции(
	СтруктураШапкиДокумента,
	ЗапросПоЗатратамНаВыпускПродукции,
	ЗапросПоВыпускуПродукции,
	ЗапросПоИсключаемымНаправлениямВыпуска,
	РезультатЗапросаРаспределениеПоПроектам,
	НомерПередела,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	СтруктураДвижений,
	ТабТоваров
	)
	
	Перем СоответствиеКодОперацииСодержание;
	
	// Выполним запрос по затратам на выпуск продукции.
	ЗапросПоЗатратамНаВыпускПродукции.УстановитьПараметр("НомерПередела", НомерПередела);
	РезультатЗапросаПоЗатратамНаВыпускПродукции = ЗапросПоЗатратамНаВыпускПродукции.Выполнить();
	
	// Выполним запрос по выпуску продукции.
	ЗапросПоВыпускуПродукции.УстановитьПараметр("НомерПередела", НомерПередела);
	РезультатЗапросаПоВыпускуПродукции = ЗапросПоВыпускуПродукции.Выполнить();
	ВыборкаПоВыпуску = РезультатЗапросаПоВыпускуПродукции.Выбрать();
	
	// Выполним запрос по исключаемым направлениям выпуска.
	РезультатЗапросаПоИсключаемымНаправлениямВыпуска = ЗапросПоИсключаемымНаправлениямВыпуска.Выполнить();
	ВыборкаПоИсключаемымНаправлениямВыпуска = РезультатЗапросаПоИсключаемымНаправлениямВыпуска.Выбрать();
	
	// Выберем коэффициенты распределения по проектам.
	ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
	
	ОбходПоЗатратам = РезультатЗапросаПоЗатратамНаВыпускПродукции.Выбрать();
	Пока ОбходПоЗатратам.Следующий() Цикл
		
		// Выберем выпуск продукции с направлениями списания.
		СтруктураПоискаВыпуск = ПолучитьСтруктуруПоискаСтрокВыпускаПродукции(
			СтруктураШапкиДокумента,
			ОбходПоЗатратам
		);
		
		ВсегоКоличество = ОбходПоЗатратам.Количество;
		ВсегоСуммаЗатрат = ОбходПоЗатратам.СуммаЗатрат;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ВсегоПостояннаяРазница = ОбходПоЗатратам.СуммаЗатратПостояннаяРазница;
			ВсегоВременнаяРазница = ОбходПоЗатратам.СуммаЗатратВременнаяРазница;
			ВсегоОбщаяСуммаЗатрат = ВсегоСуммаЗатрат + ВсегоПостояннаяРазница + ВсегоВременнаяРазница;
		Иначе
			ВсегоПостояннаяРазница = 0;
			ВсегоВременнаяРазница = 0;
			ВсегоОбщаяСуммаЗатрат = 0;
		КонецЕсли;
		
		// Проверим наличие исключаемых направлений выпуска.
		Если (КосвенныеЗатраты ИЛИ ЗатратыВстречногоВыпуска)
		   И Не РезультатЗапросаПоИсключаемымНаправлениямВыпуска.Пустой() Тогда
		   
			ЕстьИсключаемыеНаправления = ЕстьИсключаемыеНаправленияВыпуска(
				ОбходПоЗатратам,
				ВыборкаПоИсключаемымНаправлениямВыпуска
			);
		Иначе
			ЕстьИсключаемыеНаправления = Ложь;
		КонецЕсли;
			
		// Вычтем стоимость исключаемых направлений выпуска из общих затрат на выпуск. 
		Если ЕстьИсключаемыеНаправления Тогда
			ВыборкаПоВыпуску.Сбросить();
			Пока ВыборкаПоВыпуску.НайтиСледующий(СтруктураПоискаВыпуск) Цикл
				
				Если ВыборкаПоВыпуску.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
				 ИЛИ ВыборкаПоВыпуску.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты Тогда
			
				 	ИсключитьНаправлениеВыпуска = ЭтоИсключаемоеНаправлениеВыпуска(
						ВыборкаПоВыпуску,
						ВыборкаПоИсключаемымНаправлениямВыпуска
					);
					Если ИсключитьНаправлениеВыпуска Тогда
						
						ВсегоКоличество = ВсегоКоличество - ВыборкаПоВыпуску.Количество;
						ВсегоСуммаЗатрат = ВсегоСуммаЗатрат - ВыборкаПоВыпуску.Стоимость;
						
						Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
							ВсегоПостояннаяРазница = ВсегоПостояннаяРазница - ВыборкаПоВыпуску.ПостояннаяРазница;
							ВсегоВременнаяРазница = ВсегоВременнаяРазница - ВыборкаПоВыпуску.ВременнаяРазница;
							ВсегоОбщаяСуммаЗатрат = ВсегоОбщаяСуммаЗатрат 
								- ВыборкаПоВыпуску.Стоимость
								- ВыборкаПоВыпуску.ПостояннаяРазница
								- ВыборкаПоВыпуску.ВременнаяРазница;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Распределим затраты на выпуск продукции по направлениям выпуска.
		ВыборкаПоВыпуску.Сбросить();
		Пока ВыборкаПоВыпуску.НайтиСледующий(СтруктураПоискаВыпуск) Цикл
			
			Если ЕстьИсключаемыеНаправления Тогда
				ИсключитьНаправлениеВыпуска = ЭтоИсключаемоеНаправлениеВыпуска(
					ВыборкаПоВыпуску,
					ВыборкаПоИсключаемымНаправлениямВыпуска
				);
			Иначе
				ИсключитьНаправлениеВыпуска = Ложь;
			КонецЕсли;
			
			СуммаЗатрат = 0;
			СуммаЗатратПостояннаяРазница = 0;
			СуммаЗатратВременнаяРазница = 0;
			ОбщаяСуммаЗатрат = 0;
			
			Если ИсключитьНаправлениеВыпуска Тогда
				
				Продолжить;
				
			Иначе
			
				Если ВсегоКоличество <> 0 Тогда
					
					СуммаЗатрат = Окр(ВсегоСуммаЗатрат * ВыборкаПоВыпуску.Количество / ВсегоКоличество, 2, 1);
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						ОбщаяСуммаЗатрат = Окр(ВсегоОбщаяСуммаЗатрат * ВыборкаПоВыпуску.Количество / ВсегоКоличество, 2, 1);
						СуммаЗатратПостояннаяРазница = Окр(ВсегоПостояннаяРазница * ВыборкаПоВыпуску.Количество / ВсегоКоличество, 2, 1);
						СуммаЗатратВременнаяРазница = Окр(ВсегоВременнаяРазница * ВыборкаПоВыпуску.Количество / ВсегоКоличество, 2, 1);
						
						// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
						Если СуммаЗатрат + СуммаЗатратПостояннаяРазница + СуммаЗатратВременнаяРазница <> ОбщаяСуммаЗатрат Тогда
							Если СуммаЗатратВременнаяРазница <> 0 Тогда
								СуммаЗатратВременнаяРазница = ОбщаяСуммаЗатрат - (СуммаЗатрат + СуммаЗатратПостояннаяРазница);
							ИначеЕсли СуммаЗатратПостояннаяРазница <> 0 Тогда
								СуммаЗатратПостояннаяРазница = ОбщаяСуммаЗатрат - СуммаЗатрат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			
				ВсегоКоличество = ВсегоКоличество - ВыборкаПоВыпуску.Количество;
				ВсегоСуммаЗатрат = ВсегоСуммаЗатрат - СуммаЗатрат;
				ВсегоПостояннаяРазница = ВсегоПостояннаяРазница - СуммаЗатратПостояннаяРазница;
				ВсегоВременнаяРазница = ВсегоВременнаяРазница - СуммаЗатратВременнаяРазница;
				ВсегоОбщаяСуммаЗатрат = ВсегоОбщаяСуммаЗатрат - СуммаЗатрат
					- СуммаЗатратПостояннаяРазница
					- СуммаЗатратВременнаяРазница;
				
			КонецЕсли;
	
			СуммаКорректировки = СуммаЗатрат - ВыборкаПоВыпуску.Стоимость;
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СуммаКорректировкиПостояннаяРазница = СуммаЗатратПостояннаяРазница - ВыборкаПоВыпуску.ПостояннаяРазница;
				СуммаКорректировкиВременнаяРазница = СуммаЗатратВременнаяРазница - ВыборкаПоВыпуску.ВременнаяРазница;
			Иначе
				СуммаКорректировкиПостояннаяРазница = 0;
				СуммаКорректировкиВременнаяРазница = 0;
			КонецЕсли;
					
			Если (СуммаЗатрат + СуммаЗатратПостояннаяРазница + СуммаЗатратВременнаяРазница) < 0 Тогда
				ОбщегоНазначения.Сообщение("Обнаружена отрицательная сумма затрат на выпуск продукции:
					|Подразделение: " + ВыборкаПоВыпуску.Подразделение + "
					|Номенклатурная группа: " + ВыборкаПоВыпуску.НоменклатурнаяГруппа + "
					|Продукция: " + ВыборкаПоВыпуску.Продукция + ", " + 
						ВыборкаПоВыпуску.ХарактеристикаПродукции + ", " + 
						ВыборкаПоВыпуску.СерияПродукции + "
					|Заказ: " + ВыборкаПоВыпуску.Заказ + "
					|Сумма затрат: " + 
						(СуммаЗатрат + СуммаЗатратПостояннаяРазница + СуммаЗатратВременнаяРазница) + "
					|", СтатусСообщения.Важное);
			КонецЕсли;
					
			ДосписатьПоНаправлениюВыпуска(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпуску,
				ВыборкаРаспределениеПоПроектам,
				НомерПередела,
				СуммаЗатрат,
				СуммаКорректировки,
				СуммаЗатратПостояннаяРазница,
				СуммаКорректировкиПостояннаяРазница,
				СуммаЗатратВременнаяРазница,
				СуммаКорректировкиВременнаяРазница,
				СоответствиеКодОперацииСодержание,
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СтруктураДвижений,
				ТабТоваров
			);
												
		КонецЦикла;
		
		Если ВсегоСуммаЗатрат <> 0 Тогда 
			ОбщегоНазначения.Сообщение("Не удалось распределить по направлениям выпуска:
				|Подразделение: " + ОбходПоЗатратам.Подразделение + "
				|Номенклатурная группа: " + ОбходПоЗатратам.НоменклатурнаяГруппа + "
				|Продукция: " + ОбходПоЗатратам.Продукция + 
					", " + ОбходПоЗатратам.ХарактеристикаПродукции + 
					", " + ОбходПоЗатратам.СерияПродукции + "
				|Заказ: " + ОбходПоЗатратам.Заказ + "
				|Сумма затрат: " + ВсегоСуммаЗатрат + "
				|" + ?(ЗатратыВстречногоВыпуска, 
						"Проверьте правильность заполнения регистра ""Встречный выпуск продукции (услуг)"".", 
						""
					) + "
				|", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияПартии.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияПартии.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияБракВПроизводстве.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияБракВПроизводстве.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если СтруктураДвижений.ДвиженияПродажиСебестоимость.Модифицированность() Тогда
			СтруктураДвижений.ДвиженияПродажиСебестоимость.Записать(Ложь);
		КонецЕсли;
		Если СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Модифицированность() Тогда
			СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Записать(Ложь);
		КонецЕсли;
		Если СтруктураДвижений.СтроительствоОбъектовОсновныхСредств.Модифицированность() Тогда
			СтруктураДвижений.СтроительствоОбъектовОсновныхСредств.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ТабТоваров.Свернуть("Номенклатура, ДокументОприходования, СчетУчета");

КонецПроцедуры // КорректировкаДвиженийПоВыпускуПродукции()

// Процедура формирует движения в регистры по прочим затратам по налоговому учету.
//
Процедура ДвиженияПоПрочимЗатратамНал(ТабЧасть, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, ДопПараметры)
	
	ТаблицаДвиженийНЗП_Нал = СтруктураТаблицДвижений.ТаблицаДвиженийНЗП.СкопироватьКолонки();
	
	ТаблицаДвиженийЗатраты_Нал = СтруктураТаблицДвижений.ТаблицаДвиженийЗатраты.СкопироватьКолонки();
		
	ТаблицаДвиженийБрак_Нал = СтруктураТаблицДвижений.ТаблицаДвиженийБракВПроизводстве.СкопироватьКолонки();
	
	КодОперацииНЗП = ДопПараметры["КодОперацииНЗП"];
	КодОперацииЗатр = ДопПараметры["КодОперацииЗатр"];
	
	// Обход таб. части
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		
		СтатьяЗатрат    = СтрокаТЧ.СтатьяЗатрат;
		СчетЗатрат      = СтрокаТЧ.СчетЗатрат;
		СчетЗатратНУ    = СтрокаТЧ.СчетЗатратНУ;
		Заказ           = СтрокаТЧ.Заказ;
		Подр            = СтрокаТЧ.ПодразделениеОрганизации;
		
		ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатратНУ, СтатьяЗатрат, "Налоговый");
		
		Если ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.Прочие Тогда
			Продолжить;
		КонецЕсли;
		
		Стоимость = СтрокаТЧ.СуммаРегл;
		СуммаРегл = Стоимость;
		ПостояннаяРазница = СтрокаТЧ.ПостояннаяРазница;
		ВременнаяРазница = СтрокаТЧ.ВременнаяРазница;
		СуммаНал = СтрокаТЧ.СуммаНал;
		
		Если СуммаРегл = 0 И СуммаНал = 0 И ПостояннаяРазница = 0 И ВременнаяРазница = 0 Тогда
			Если ХарактерЗатратНУ <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СчетЗатратНУ <> ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД Тогда
			
			Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				ПостояннаяРазница = ПостояннаяРазница + СуммаНал;
				СуммаНал = 0;
			КонецЕсли;
			
			Если ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда

				Если СуммаНал <> 0 ИЛИ ВременнаяРазница <> 0 ИЛИ ПостояннаяРазница <> 0 ИЛИ СтрокаТЧ.Количество <> 0 Тогда
					НоваяСтрока = ТаблицаДвиженийНЗП_Нал.Добавить();
					НоваяСтрока.Организация        	 = СтруктураШапкиДокумента.Организация;
					НоваяСтрока.Подразделение        = Подр;
					НоваяСтрока.СчетУчета            = СчетЗатратНУ;
					НоваяСтрока.НоменклатурнаяГруппа = СтрокаТЧ.НоменклатурнаяГруппа;
					НоваяСтрока.Заказ                = Заказ;
					НоваяСтрока.СтатьяЗатрат         = СтатьяЗатрат;
					НоваяСтрока.КодОперации          = КодОперацииНЗП;
					
					НоваяСтрока.Стоимость 			= СуммаНал;
					НоваяСтрока.ПостояннаяРазница 	= ПостояннаяРазница;
					НоваяСтрока.ВременнаяРазница 	= ВременнаяРазница;
					
					Если Не СтрокаТЧ.Номенклатура.Услуга И СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
						НоваяСтрока.Количество       = СтрокаТЧ.Количество;
						НоваяСтрока.Затрата          = СтрокаТЧ.Номенклатура;
						НоваяСтрока.ХарактеристикаЗатраты = СтрокаТЧ.ХарактеристикаНоменклатуры;
						НоваяСтрока.СерияЗатраты          = СтрокаТЧ.СерияНоменклатуры;
					ИначеЕсли СтрокаТЧ.Номенклатура.Услуга И СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
						НоваяСтрока.Количество       = СтрокаТЧ.Количество;
						НоваяСтрока.Затрата          = СтрокаТЧ.Номенклатура;
					Иначе
						НоваяСтрока.Затрата = СтрокаТЧ.СпособРаспределенияЗатратНаВыпуск;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				
				// Если были услуги производственного характера по исправлению брака
				Если СуммаНал <> 0 ИЛИ ВременнаяРазница <> 0 ИЛИ ПостояннаяРазница <> 0 Тогда
					НоваяСтрока = ТаблицаДвиженийБрак_Нал.Добавить();
					НоваяСтрока.Организация        		= СтруктураШапкиДокумента.Организация;
					НоваяСтрока.Подразделение           = Подр;
					НоваяСтрока.СчетУчета               = СчетЗатратНУ;
					НоваяСтрока.НоменклатурнаяГруппа    = СтрокаТЧ.НоменклатурнаяГруппа;
					НоваяСтрока.СтатьяЗатрат            = СтатьяЗатрат;
					НоваяСтрока.Заказ                   = Заказ;
					НоваяСтрока.Продукция               = СтрокаТЧ.Продукция;
					НоваяСтрока.ХарактеристикаПродукции = СтрокаТЧ.ХарактеристикаПродукции;
					НоваяСтрока.СерияПродукции          = СтрокаТЧ.СерияПродукции;
					НоваяСтрока.СчетУчета               = СтрокаТЧ.СчетЗатратНУ;
					
					НоваяСтрока.Сумма 				= СуммаНал;
					НоваяСтрока.ПостояннаяРазница 	= ПостояннаяРазница;
					НоваяСтрока.ВременнаяРазница 	= ВременнаяРазница;
				КонецЕсли;
				
			ИначеЕсли (ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.ИздержкиОбращения
				  ИЛИ ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
				  ИЛИ ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
				  ИЛИ ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы) Тогда

				Если СуммаНал <> 0 ИЛИ ВременнаяРазница <> 0 ИЛИ ПостояннаяРазница <> 0 Тогда  
					НоваяСтрока = ТаблицаДвиженийЗатраты_Нал.Добавить();
					НоваяСтрока.Организация        	 = СтруктураШапкиДокумента.Организация;
					НоваяСтрока.Подразделение        = Подр;
					НоваяСтрока.СчетУчета            = СчетЗатратНУ;
					НоваяСтрока.НоменклатурнаяГруппа = СтрокаТЧ.НоменклатурнаяГруппа;
					НоваяСтрока.СтатьяЗатрат         = СтатьяЗатрат;
					НоваяСтрока.Заказ                = Заказ;
					
					НоваяСтрока.Сумма 				= СуммаНал;
					НоваяСтрока.ПостояннаяРазница 	= ПостояннаяРазница;
					НоваяСтрока.ВременнаяРазница 	= ВременнаяРазница;
					НоваяСтрока.КодОперации         = КодОперацииЗатр;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВидДвижения = ДопПараметры["ВидДвижения"];
	ВыполнитьПриход = (ВидДвижения = "Приход");
	
	// Записать движения.
	Если СтруктураДвижений.ДвиженияНЗП <> Неопределено Тогда
		СтруктураДвижений.ДвиженияНЗП.мПериод          = СтруктураШапкиДокумента.Период;
		СтруктураДвижений.ДвиженияНЗП.мТаблицаДвижений = ТаблицаДвиженийНЗП_Нал;
		
		Если ВыполнитьПриход Тогда
			СтруктураДвижений.ДвиженияНЗП.ВыполнитьПриход();
			СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
		Иначе
			СтруктураДвижений.ДвиженияНЗП.ВыполнитьРасход();
			СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;

	Если СтруктураДвижений.ДвиженияЗатраты <> Неопределено Тогда
		СтруктураДвижений.ДвиженияЗатраты.мПериод          = СтруктураШапкиДокумента.Период;
		СтруктураДвижений.ДвиженияЗатраты.мТаблицаДвижений = ТаблицаДвиженийЗатраты_Нал;
		
		Если ВыполнитьПриход Тогда
			СтруктураДвижений.ДвиженияЗатраты.ВыполнитьПриход();
			СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
		Иначе
			СтруктураДвижений.ДвиженияЗатраты.ВыполнитьРасход();
			СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
		
	Если СтруктураДвижений.ДвиженияБракВПроизводстве <> Неопределено Тогда
		СтруктураДвижений.ДвиженияБракВПроизводстве.мПериод          = СтруктураШапкиДокумента.Период;
		СтруктураДвижений.ДвиженияБракВПроизводстве.мТаблицаДвижений = ТаблицаДвиженийБрак_Нал;
			
		Если ВыполнитьПриход Тогда
			СтруктураДвижений.ДвиженияБракВПроизводстве.ВыполнитьПриход();
			СтруктураДвижений.ДвиженияБракВПроизводстве.Записать(Ложь);
		Иначе
			СтруктураДвижений.ДвиженияБракВПроизводстве.ВыполнитьРасход();
			СтруктураДвижений.ДвиженияБракВПроизводстве.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоПрочимЗатратамНал()

//Закрытие счетов косвенных расходов 
//Н20.01.2, Н23.02, Н25.02, Н26, Н28.02, Н29.02, Н44
Процедура ЗакрытиеСчетовКосвенныхРасходовПроизводство(СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений = Неопределено) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОчищатьСтруктуруДвижений = (СтруктураДвижений = Неопределено);
	
	Если СтруктураДвижений = Неопределено Тогда
		СтруктураИмен = Новый Структура("НезавершенноеПроизводство, Операция");
		СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	КонецЕсли;
	
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатратПриход = ТаблицаЗатрат.Скопировать();

	Нормируемые = Новый Массив;
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);

	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Нормируемые",  Нормируемые);
	Запрос.УстановитьПараметр("КонГраница",   СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаУчета",   СчетаУчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НезавершенноеПроизводство.Подразделение			КАК Подразделение,
	|	НезавершенноеПроизводство.СчетУчета				КАК СчетУчета,
	|	НезавершенноеПроизводство.СтатьяЗатрат			КАК СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа	КАК НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ					КАК Заказ,
	|	НезавершенноеПроизводство.Затрата				КАК Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты	КАК ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты			КАК СерияЗатраты,
	|	СУММА(НезавершенноеПроизводство.КоличествоОстаток)			КАК Количество,
	|	СУММА(	ВЫБОР КОГДА НезавершенноеПроизводство.СтатьяЗатрат.ВидРасходовНУ В (&Нормируемые) ТОГДА
	|				0
	|			ИНАЧЕ
	|				НезавершенноеПроизводство.СтоимостьОстаток
	|			КОНЕЦ
	|		) КАК Сумма,
	|	СУММА(НезавершенноеПроизводство.ПостояннаяРазницаОстаток)	КАК ПостояннаяРазница,
	|	СУММА(НезавершенноеПроизводство.ВременнаяРазницаОстаток)	КАК ВременнаяРазница
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводствоНалоговыйУчет.Остатки(&КонГраница, СчетУчета В(&СчетаУчета) И Организация = &Организация) КАК НезавершенноеПроизводство
	|
	|СГРУППИРОВАТЬ ПО
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.СчетУчета,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты
	|
	|УПОРЯДОЧИТЬ ПО
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.СчетУчета,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка ИЗ ТаблицаЗапроса Цикл
		
		Если Строка.Сумма <> 0 ИЛИ Строка.Количество <> 0 ИЛИ Строка.ПостояннаяРазница <> 0 ИЛИ Строка.ВременнаяРазница <> 0 Тогда
		
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= Строка.СчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			Если Строка.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
				НоваяСтрока.Номенклатура 				= Строка.Затрата;
				НоваяСтрока.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаЗатраты;
				НоваяСтрока.СерияНоменклатуры			= Строка.СерияЗатраты;
			Иначе
				Если ТипЗнч(Строка.Затрата) = Тип("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск") Тогда
					НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = Строка.Затрата;
				Иначе
					НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = Неопределено;
				КонецЕсли;
			КонецЕсли;
				
			НоваяСтрока.Количество           		= Строка.Количество;
			НоваяСтрока.СуммаНал           			= Строка.Сумма;
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				НоваяСтрока.ПостояннаяРазница       = Строка.ПостояннаяРазница;
				НоваяСтрока.ВременнаяРазница        = Строка.ВременнаяРазница;
			КонецЕсли;
			
		КонецЕсли;

		// Закрытие косвенных расходов в части НУ.
		Если Строка.Сумма <> 0 Тогда
			
			Проводка = СтруктураДвижений.Операция.Добавить();

			Проводка.Период       = СтруктураШапкиДокумента.Период;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.СчетКт       = Строка.СчетУчета;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "Подразделения") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения",	Строка.Подразделение);
			КонецЕсли;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "НоменклатурныеГруппы") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Строка.Сумма;
			
		КонецЕсли;
		
		// Закрытие косвенных расходов в части постоянной разницы.
		Если Строка.ПостояннаяРазница <> 0 И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			Проводка = СтруктураДвижений.Операция.Добавить();

			Проводка.Период       = СтруктураШапкиДокумента.Период;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.СчетКт       = Строка.СчетУчета;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "Подразделения") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения",	Строка.Подразделение);
			КонецЕсли;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "НоменклатурныеГруппы") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Строка.ПостояннаяРазница;
			
		КонецЕсли;
		
		// Закрытие косвенных расходов в части временной разницы.
		Если Строка.ВременнаяРазница <> 0 И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			Проводка = СтруктураДвижений.Операция.Добавить();

			Проводка.Период       = СтруктураШапкиДокумента.Период;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.СчетКт       = Строка.СчетУчета;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "Подразделения") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения",	Строка.Подразделение);
			КонецЕсли;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "НоменклатурныеГруппы") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Строка.ВременнаяРазница;
			
		КонецЕсли;
		
		// Зафиксируем временную разницу.
		Если Строка.Сумма <> 0 
		 ИЛИ Строка.Количество <> 0 
		 ИЛИ Строка.ПостояннаяРазница <> 0 
		 ИЛИ Строка.ВременнаяРазница <> 0
		Тогда
		
			Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗатратПриход.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= НовыйСчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			Если Строка.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
				НоваяСтрока.Номенклатура 				= Строка.Затрата;
				НоваяСтрока.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаЗатраты;
				НоваяСтрока.СерияНоменклатуры			= Строка.СерияЗатраты;
			Иначе
				Если ТипЗнч(Строка.Затрата) = Тип("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск") Тогда
					НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = Строка.Затрата;
				Иначе
					НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = Неопределено;
				КонецЕсли;
			КонецЕсли;
				
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Сумма = 0;
			
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				НоваяСтрока.ПостояннаяРазница = Строка.ПостояннаяРазница;
				НоваяСтрока.ВременнаяРазница = Строка.ВременнаяРазница + Строка.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Строка.Сумма <> 0 ИЛИ Строка.ВременнаяРазница <> 0) И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			// Сформируем проводку по временной разнице на прямые раходы.
			Проводка = СтруктураДвижений.Операция.Добавить();

			Проводка.Период       = СтруктураШапкиДокумента.Период;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.СчетКт       = НовыйСчетУчета;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "Подразделения") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения",	Строка.Подразделение);
			КонецЕсли;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "НоменклатурныеГруппы") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = - Строка.Сумма - Строка.ВременнаяРазница;
			
		КонецЕсли;
		
		Если Строка.ПостояннаяРазница <> 0 И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			// Сформируем проводку по временной разнице на прямые раходы.
			Проводка = СтруктураДвижений.Операция.Добавить();

			Проводка.Период       = СтруктураШапкиДокумента.Период;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.СчетКт       = НовыйСчетУчета;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "Подразделения") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения",	Строка.Подразделение);
			КонецЕсли;
			Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(Проводка.СчетКт, "НоменклатурныеГруппы") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.Содержание   = "ПР по косвенным расходам";
			Проводка.Сумма        = - Строка.ПостояннаяРазница;
			
		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("КодОперацииНЗП",  	Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		СтруктДопПараметры.Вставить("КодОперацииЗатр", 	Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		СтруктДопПараметры.Вставить("ВидДвижения",   	"Расход");
		
		ДвиженияПоПрочимЗатратамНал(ТаблицаЗатрат, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, СтруктДопПараметры);
	КонецЕсли;
	
	Если ТаблицаЗатратПриход.Количество() > 0 Тогда
		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("КодОперацииНЗП",  	Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		СтруктДопПараметры.Вставить("КодОперацииЗатр", 	Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		СтруктДопПараметры.Вставить("ВидДвижения",   	"Приход");
		
		ДвиженияПоПрочимЗатратамНал(ТаблицаЗатратПриход, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, СтруктДопПараметры);
	КонецЕсли;
	
	Если СтруктураДвижений.Операция.Количество() > 0 Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если ОчищатьСтруктуруДвижений Тогда
		СтруктураДвижений = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчетовКосвенныхРасходовПроизводство()

//Закрытие счетов косвенных расходов 
//Н20.01.2, Н23.02, Н25.02, Н26, Н28.02, Н29.02, Н44
Процедура ЗакрытиеСчетовКосвенныхРасходов(СтруктураШапкиДокумента, ДиректКостинг, СтруктураТаблицДвижений, СтруктураДвижений = Неопределено) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОчищатьСтруктуруДвижений = (СтруктураДвижений = Неопределено);
	
	Если СтруктураДвижений = Неопределено Тогда
		СтруктураИмен = Новый Структура("Затраты, БракВПроизводстве, Операция");
		СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	КонецЕсли;
	
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатратПриход = ТаблицаЗатрат.Скопировать();

	Нормируемые = Новый Массив;
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);

	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Нормируемые",  Нормируемые);
	Запрос.УстановитьПараметр("КонГраница",   СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаУчета",   СчетаУчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	БракВПроизводстве.Подразделение КАК Подразделение,
	|	БракВПроизводстве.СчетУчета КАК СчетУчета,
	|	БракВПроизводстве.СтатьяЗатрат КАК СтатьяЗатрат,
	|	БракВПроизводстве.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ КАК Заказ,
	|	БракВПроизводстве.Продукция КАК Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции КАК СерияПродукции,
	|	СУММА(БракВПроизводстве.СуммаОстаток) КАК Сумма,
	|	СУММА(БракВПроизводстве.ПостояннаяРазницаОстаток) 	КАК ПостояннаяРазница,
	|	СУММА(БракВПроизводстве.ВременнаяРазницаОстаток)	КАК ВременнаяРазница
	|ИЗ
	|	РегистрНакопления.БракВПроизводствеНалоговыйУчет.Остатки(&КонГраница, 
	|		СчетУчета В(&СчетаУчета) 
	|		И Организация = &Организация
	|		И СтатьяЗатрат.ВидРасходовНУ Не В (&Нормируемые)
	|	) КАК БракВПроизводстве
	|
	|СГРУППИРОВАТЬ ПО
	|	БракВПроизводстве.Подразделение,
	|	БракВПроизводстве.СчетУчета,
	|	БракВПроизводстве.СтатьяЗатрат,
	|	БракВПроизводстве.НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ,
	|	БракВПроизводстве.Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Затраты.Подразделение,
	|	Затраты.СчетУчета,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	Неопределено КАК Продукция,
	|	Неопределено КАК ХарактеристикаПродукции,
	|	Неопределено КАК СерияПродукции,
	|	СУММА(Затраты.СуммаОстаток),
	|	СУММА(Затраты.ПостояннаяРазницаОстаток),
	|	СУММА(Затраты.ВременнаяРазницаОстаток)
	|ИЗ
	|	РегистрНакопления.ЗатратыНалоговыйУчет.Остатки(&КонГраница, 
	|		СчетУчета В(&СчетаУчета)
	|		И Организация = &Организация
	|		И СтатьяЗатрат.ВидРасходовНУ Не В (&Нормируемые)
	|	) КАК Затраты
	|
	|СГРУППИРОВАТЬ ПО
	|	Затраты.Подразделение,
	|	Затраты.СчетУчета,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	СчетУчета,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа,
	|	Заказ,
	|	Продукция,
	|	ХарактеристикаПродукции,
	|	СерияПродукции
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка ИЗ ТаблицаЗапроса Цикл
		
		ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка.СчетУчета, Строка.СтатьяЗатрат, "Налоговый");
		
		Если Строка.Сумма <> 0 ИЛИ Строка.ПостояннаяРазница <> 0 ИЛИ Строка.ВременнаяРазница <> 0 Тогда
		
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= Строка.СчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			Если ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				НоваяСтрока.Продукция 				= Строка.Продукция;
				НоваяСтрока.ХарактеристикаПродукции = Строка.ХарактеристикаПродукции;
				НоваяСтрока.СерияПродукции			= Строка.СерияПродукции;
			КонецЕсли;
			
			НоваяСтрока.СуммаНал           			= Строка.Сумма;
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				НоваяСтрока.ПостояннаяРазница       = Строка.ПостояннаяРазница;
				НоваяСтрока.ВременнаяРазница        = Строка.ВременнаяРазница;
			КонецЕсли;
			
		КонецЕсли;

		СформироватьДвиженияПоРегиструБухгалтерииЗакрытиеКосвенныхРасходов(
			СтруктураШапкиДокумента,
			Строка,
			Строка.СчетУчета,
			Строка.Сумма,
			Строка.ПостояннаяРазница,
			Строка.ВременнаяРазница,
			СтруктураДвижений.Операция
		);
				
		// Зафиксируем временную разницу.
		Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы
		   И ДиректКостинг Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Строка.Сумма <> 0 ИЛИ Строка.ПостояннаяРазница <> 0 ИЛИ Строка.ВременнаяРазница <> 0) И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		
			Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗатратПриход.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= НовыйСчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			Если ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				НоваяСтрока.Продукция 				= Строка.Продукция;
				НоваяСтрока.ХарактеристикаПродукции = Строка.ХарактеристикаПродукции;
				НоваяСтрока.СерияПродукции			= Строка.СерияПродукции;
			КонецЕсли;
			
			НоваяСтрока.СуммаНал           			= 0;
			НоваяСтрока.ПостояннаяРазница           = Строка.ПостояннаяРазница;
			НоваяСтрока.ВременнаяРазница           	= Строка.Сумма + Строка.ВременнаяРазница;
			
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструБухгалтерииЗакрытиеКосвенныхРасходов(
			СтруктураШапкиДокумента,
			Строка,
			НовыйСчетУчета,
			0, // Сумма,
			- Строка.ПостояннаяРазница,
			- Строка.Сумма - Строка.ВременнаяРазница,
			СтруктураДвижений.Операция
		);
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("КодОперацииНЗП",  	Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		СтруктДопПараметры.Вставить("КодОперацииЗатр", 	Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		СтруктДопПараметры.Вставить("ВидДвижения",   	"Расход");
		
		ДвиженияПоПрочимЗатратамНал(ТаблицаЗатрат, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, СтруктДопПараметры);
	КонецЕсли;
	
	Если ТаблицаЗатратПриход.Количество() > 0 Тогда
		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("КодОперацииНЗП",  	Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		СтруктДопПараметры.Вставить("КодОперацииЗатр", 	Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		СтруктДопПараметры.Вставить("ВидДвижения",   	"Приход");
		
		ДвиженияПоПрочимЗатратамНал(ТаблицаЗатратПриход, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, СтруктДопПараметры);
	КонецЕсли;
	
	Если СтруктураДвижений.Операция.Количество() > 0 Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если ОчищатьСтруктуруДвижений Тогда
		СтруктураДвижений = Неопределено;
	КонецЕсли;

КонецПроцедуры // ЗакрытиеСчетовКосвенныхРасходов()

// Процедура формирует проводку по списанию затрат на расходы будущих периодов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	РасходыБудущихПериодов - СправочникСсылка.РасходыБудущихПериодов - Текущий элемент расходов будущих периодов
//  Сумма - Число - Сумма проводки
//  ВидУчетаПоПБУ18 - ПеречислениеСсылка.ВидыУчетаПоПБУ18 - Вид учета по ПБУ18/02, для которого формируется проводка
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоСписаниюЗатратНаРБП(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	РасходыБудущихПериодов,
	Сумма,
	ВидУчетаПоПБУ18,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СчетДт = ПланыСчетов.Налоговый.ПрочиеРасходыБудущихПериодов;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность  = Истина;
	НоваяПроводка.Период      = СтруктураШапкиДокумента.Период;
	НоваяПроводка.Содержание  = "Списание затрат на расходы будущих периодов";
		
	НоваяПроводка.Сумма  = Сумма;
		
	НоваяПроводка.СчетДт = СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "РасходыБудущихПериодов", РасходыБудущихПериодов);
		
	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "СтатьиЗатрат") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);
	КонецЕсли;
	
	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкуПоСписаниюЗатратНаРБП()

// Процедура производит отнесение затрат на расходы будущих периодов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура ОтнестиНаРасходыБудущихПериодовРегл(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатрат,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	   И НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементРасходовБудущихПериодов = СоздатьЭлементРасходовБудущихПериодов(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		ХарактерЗатрат,
		Сумма
	);
		
	// Сформируем проводку.
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И ЗначениеЗаполнено(СтрокаВыборки.СчетУчета) Тогда
	   
		СформироватьПроводкуПоСписаниюЗатратНаРБП(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ЭлементРасходовБудущихПериодов,
			Сумма,
			Перечисления.ВидыУчетаПоПБУ18.ПустаяСсылка(),
			РегистрБухгалтерииНаборЗаписей
		);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СформироватьПроводкуПоСписаниюЗатратНаРБП(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ЭлементРасходовБудущихПериодов,
				ПостояннаяРазница,
				Перечисления.ВидыУчетаПоПБУ18.ПР,
				РегистрБухгалтерииНаборЗаписей
			);
		
			СформироватьПроводкуПоСписаниюЗатратНаРБП(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ЭлементРасходовБудущихПериодов,
				ВременнаяРазница,
				Перечисления.ВидыУчетаПоПБУ18.ВР,
				РегистрБухгалтерииНаборЗаписей
			);
			
		КонецЕсли;
				
	КонецЕсли;
	
	ОбщегоНазначения.Сообщение("Сумма " + Сумма + " отнесена на расходы будущих периодов.
		 |Подразделение: " + СтрокаВыборки.Подразделение + ".
		 |Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + ".
		 |Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + ".
		 |Заказ: " + СтрокаВыборки.Заказ + ".");
	
КонецПроцедуры // ОтнестиНаРасходыБудущихПериодовРегл()

// Функция получает строку выборки по способам распределения затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  ВыборкаПоСпособамРаспределенияЗатрат - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по способам распределения затрат
//	ОпределятьПоХарактеруЗатрат - Булево - Использовать характер затрат для определения способа распределения
//	ПроверятьУказаниеСпособаРаспределения - Булево - Признак необходимости проверки указания способа распределения и вывода сообщения,
//		если способ распределения не указан
//
// Выходные параметры
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Заданный способ определения
//	ХарактерРаспределения - ПеречислениеСсылка.ХарактерРаспределения - Заданный характер распределения
//	РаспределятьНаПодчиненныеПодразделения - Булево - Признак распределения на подчиненные подразделения.
//
// Возвращаемое значение:
//	Булево – Признак необходимости распределения затрат:
//				Истина - затраты необходимо распределить по способу распределения,
//				Ложь - затраты распределять не нужно.
//
Функция ПолучитьСпособИХарактерРаспределенияЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаПоСпособамРаспределенияЗатрат,
	ОпределятьПоХарактеруЗатрат,
	ПроверятьУказаниеСпособаРаспределения,
	СпособРаспределения,
	ХарактерРаспределенияЗатрат = Неопределено,
	РаспределятьНаПодчиненныеПодразделения = Ложь
	)
	
	РаспределятьЗатраты = Ложь;
	
	// Определим способ распределения затрат.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	СтруктураПоиска.Вставить("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатрат);
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		 
		Если ОпределятьПоХарактеруЗатрат Тогда
			СтруктураПоиска.Вставить("ХарактерЗатрат", СтрокаВыборки.ХарактерЗатрат);
		Иначе 
			СтруктураПоиска.Вставить("СчетЗатрат", СтрокаВыборки.СчетУчета);
		КонецЕсли;
			
	КонецЕсли;
		
	ВыборкаПоСпособамРаспределенияЗатрат.Сбросить();
	Если ВыборкаПоСпособамРаспределенияЗатрат.НайтиСледующий(СтруктураПоиска) Тогда
			
		СпособРаспределения = ВыборкаПоСпособамРаспределенияЗатрат.СпособРаспределения;
		ХарактерРаспределенияЗатрат = ВыборкаПоСпособамРаспределенияЗатрат.ХарактерРаспределенияЗатрат;
		РаспределятьНаПодчиненныеПодразделения = ВыборкаПоСпособамРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения;
			
		Если ЗначениеЗаполнено(СпособРаспределения) Тогда
			РаспределятьЗатраты = Не ВыборкаПоСпособамРаспределенияЗатрат.НеРаспределять;
		КонецЕсли;
			
	Иначе
			
		СпособРаспределения = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПустаяСсылка();
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
	КонецЕсли;
		
	// Если не указан способ распределения, выведем сообщение об ошибке.
	Если ПроверятьУказаниеСпособаРаспределения И Не ЗначениеЗаполнено(СпособРаспределения) Тогда
		ОбщегоНазначения.Сообщение("Не указан способ распределения для:
			|Подразделение: " + СтрокаВыборки.Подразделение + "
			|Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + "
			|" + ?(Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, 
				"Счет учета: " + СтрокаВыборки.СчетУчета, "") + "", 
			СтатусСообщения.Важное
		);
			
	КонецЕсли;

	Возврат РаспределятьЗатраты;	

КонецФункции // ПолучитьСпособИХарактерРаспределенияЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "БАЗА РАСПРЕДЕЛЕНИЯ ЗАТРАТ"

// Функция формирует текст запроса по регистру сведений "База распределения затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаБазаРаспределенияЗатрат()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.Продукция,
	|	Распределение.ХарактеристикаПродукции,
	|	Распределение.СерияПродукции,
	|	Распределение.НомерПередела,
	|	Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ РаспределениеПродукцииПоПеределам
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И &РаспределениеКосвенныхЗатрат
	|	И Не Распределение.КорректировкаНЗП
	|	И Не Распределение.ОприходованиеНЗП
	|	И Не Распределение.ВозвратИзНЗП
	|	//ДляРеглУчета И Распределение.Организация = &Организация
 	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|
	|ПОМЕСТИТЬ ВыпускПродукцииПоПеределам
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|					
	|ГДЕ
	|	ВыпускПродукции.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка),
	|	МАКСИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение
	|			
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения КАК РаспределятьНаПодчиненныеПодразделения,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|	БазаРаспределенияЗатрат.Подразделение КАК ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.Заказ КАК ЗаказНЗП,
	|	ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка) КАК ХарактерРаспределенияЗатрат,
	|	
	|	МИНИМУМ(
	|		ЕСТЬNULL(ВыпускПродукции.НомерПередела, 1)
	|		) КАК НомерПередела,
	|
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|
	|	//ДляНалУчета СУММА(
	|	//ДляНалУчета 	ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 		БазаРаспределенияЗатрат.БазаПриходНУ
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		БазаРаспределенияЗатрат.БазаПриходНУ /
	|	//ДляНалУчета 		ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 			1
	|	//ДляНалУчета 		ИНАЧЕ
	|	//ДляНалУчета 			БазаРаспределенияЗатратВсего.БазаПриходНУ
	|	//ДляНалУчета 		КОНЕЦ
	|	//ДляНалУчета 	КОНЕЦ
	|	//ДляНалУчета ) КАК БазаПриходНУ,
	|	//ДляНалУчета МАКСИМУМ(
	|	//ДляНалУчета 	ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 		1
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		БазаРаспределенияНаПодчиненные.БазаПриходНУ /
	|	//ДляНалУчета 		ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 			1
	|	//ДляНалУчета 		ИНАЧЕ
	|	//ДляНалУчета 			БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ
	|	//ДляНалУчета 		КОНЕЦ
	|	//ДляНалУчета 	КОНЕЦ
	|	//ДляНалУчета ) КАК БазаНаПодчиненныеНУ,
	|
	|	СУММА(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			БазаРаспределенияЗатрат.БазаПриход
	|		ИНАЧЕ
	|			(БазаРаспределенияЗатрат.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияЗатратВсего.БазаПриход
	|			КОНЕЦ)
	|		КОНЕЦ
	|	) КАК БазаПриход,
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			БазаРаспределенияНаПодчиненные.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияНаПодчиненныеВсего.БазаПриход
	|			КОНЕЦ
	|		КОНЕЦ
	|	) КАК БазаНаПодчиненные
	|
	|ИЗ
	|	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияЗатратВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат = БазаРаспределенияЗатратВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияЗатратВсего.Подразделение			
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета = БазаРаспределенияЗатратВсего.СчетУчета
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияНаПодчиненные
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненные.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияНаПодчиненные.Подразделение
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета 	= БазаРаспределенияНаПодчиненные.СчетУчета
	|				
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат
	|
	|		) КАК БазаРаспределенияНаПодчиненныеВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненныеВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыпускПродукцииПоПеределам КАК ВыпускПродукции
	|	ПО
	|		БазаРаспределенияЗатрат.Подразделение = ВыпускПродукции.Подразделение
	|		И БазаРаспределенияЗатрат.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		БазаРаспределенияЗатрат.СчетУчета = СчетаУчетаЕНВД.Счет
	|			
	|ГДЕ
	|	БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|	И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.СпособРаспределенияЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|				//ДляРеглУчета Организация = &Организация
	|			) КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.НеРаспределять
	|			И ((&РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ХарактерРаспределенияПроизводственныеРасходы)
	|				ИЛИ 
	|				(Не &РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат = &ХарактерРаспределенияПроизводственныеРасходы)
	|				)
	|		)
	|	//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|	//ДляБухУчета И Не БазаРаспределенияЗатрат.СчетУчета.Забалансовый
	|			
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	БазаРаспределенияЗатрат.Заказ
	|			
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	НомерПередела,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ
	|";

 	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаБазаРаспределенияЗатрат()
 // is ЯннуровВФ 20140704
Функция СформироватьТекстЗапросаБазаРаспределенияЗатратКосвенныеСБазой()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.Продукция,
	|	Распределение.ХарактеристикаПродукции,
	|	Распределение.СерияПродукции,
	|	Распределение.НомерПередела,
	|	Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ РаспределениеПродукцииПоПеределам
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И &РаспределениеКосвенныхЗатрат
	|	И Не Распределение.КорректировкаНЗП
	|	И Не Распределение.ОприходованиеНЗП
	|	И Не Распределение.ВозвратИзНЗП
	|	//ДляРеглУчета И Распределение.Организация = &Организация
 	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|
	|ПОМЕСТИТЬ ВыпускПродукцииПоПеределам
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|					
	|ГДЕ
	|	ВыпускПродукции.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка),
	|	МАКСИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение
	|			
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения КАК РаспределятьНаПодчиненныеПодразделения,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|	БазаРаспределенияЗатрат.Подразделение КАК ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.Заказ КАК ЗаказНЗП,
	|	ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка) КАК ХарактерРаспределенияЗатрат,
	|	
	|	МИНИМУМ(
	|		ЕСТЬNULL(ВыпускПродукции.НомерПередела, 1)
	|		) КАК НомерПередела,
	|
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|
	|	//ДляНалУчета СУММА(
	|	//ДляНалУчета 	ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 		БазаРаспределенияЗатрат.БазаПриходНУ
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		БазаРаспределенияЗатрат.БазаПриходНУ /
	|	//ДляНалУчета 		ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 			1
	|	//ДляНалУчета 		ИНАЧЕ
	|	//ДляНалУчета 			БазаРаспределенияЗатратВсего.БазаПриходНУ
	|	//ДляНалУчета 		КОНЕЦ
	|	//ДляНалУчета 	КОНЕЦ
	|	//ДляНалУчета ) КАК БазаПриходНУ,
	|	//ДляНалУчета МАКСИМУМ(
	|	//ДляНалУчета 	ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 		1
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		БазаРаспределенияНаПодчиненные.БазаПриходНУ /
	|	//ДляНалУчета 		ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 			1
	|	//ДляНалУчета 		ИНАЧЕ
	|	//ДляНалУчета 			БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ
	|	//ДляНалУчета 		КОНЕЦ
	|	//ДляНалУчета 	КОНЕЦ
	|	//ДляНалУчета ) КАК БазаНаПодчиненныеНУ,
	|
	|	СУММА(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			БазаРаспределенияЗатрат.БазаПриход
	|		ИНАЧЕ
	|			(БазаРаспределенияЗатрат.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияЗатратВсего.БазаПриход
	|			КОНЕЦ)
	|		КОНЕЦ
	|	) КАК БазаПриход,
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			БазаРаспределенияНаПодчиненные.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияНаПодчиненныеВсего.БазаПриход
	|			КОНЕЦ
	|		КОНЕЦ
	|	) КАК БазаНаПодчиненные
	|
	|ИЗ
	|	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияЗатратВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат = БазаРаспределенияЗатратВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияЗатратВсего.Подразделение			
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета = БазаРаспределенияЗатратВсего.СчетУчета
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияНаПодчиненные
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненные.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияНаПодчиненные.Подразделение
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета 	= БазаРаспределенияНаПодчиненные.СчетУчета
	|				
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат
	|
	|		) КАК БазаРаспределенияНаПодчиненныеВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненныеВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВыпускПродукции.Подразделение,
	|			ВыпускПродукции.НоменклатурнаяГруппа,
	|			МИНИМУМ(ВыпускПродукции.НомерПередела) КАК НомерПередела
	|		ИЗ 
	|			ВыпускПродукцииПоПеределам КАК ВыпускПродукции
	|		СГРУППИРОВАТЬ ПО
	|			ВыпускПродукции.Подразделение,
	|			ВыпускПродукции.НоменклатурнаяГруппа) КАК ВыпускПродукции
	|	ПО
	|		БазаРаспределенияЗатрат.Подразделение = ВыпускПродукции.Подразделение
	|		И БазаРаспределенияЗатрат.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		БазаРаспределенияЗатрат.СчетУчета = СчетаУчетаЕНВД.Счет
	|			
	|ГДЕ
	|	БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|	И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.СпособРаспределенияЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|				//ДляРеглУчета Организация = &Организация
	|			) КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.НеРаспределять
	|			И ((&РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ХарактерРаспределенияПроизводственныеРасходы)
	|				ИЛИ 
	|				(Не &РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат = &ХарактерРаспределенияПроизводственныеРасходы)
	|				)
	|	//ДляРеглУчета 	
	|	//ДляРеглУчета Объединить все 				
	|	//ДляРеглУчета ВЫБРАТЬ
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат
	|	//ДляРеглУчета ИЗ
	|	//ДляРеглУчета 	РегистрСведений.ПРГ_НастройкиЗакрытияКосвенныхРасходов КАК ПРГ_НастройкиЗакрытияКосвенныхРасходов
	|	//ДляРеглУчета ГДЕ
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.Организация = &Организация
	|	//ДляРеглУчета 
	|	//ДляРеглУчета СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат	
	|		)
	|	//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|	//ДляБухУчета И Не БазаРаспределенияЗатрат.СчетУчета.Забалансовый
	|			
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	БазаРаспределенияЗатрат.Заказ
	|			
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	НомерПередела,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ
	|";

 	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаБазаРаспределенияЗатрат()


//начало изменений БП 04
Функция СформироватьТекстЗапросаБазаРаспределенияЗатратКосвенные()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.Продукция,
	|	Распределение.ХарактеристикаПродукции,
	|	Распределение.СерияПродукции,
	|	Распределение.НомерПередела,
	|	Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ РаспределениеПродукцииПоПеределам
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И &РаспределениеКосвенныхЗатрат
	|	И Не Распределение.КорректировкаНЗП
	|	И Не Распределение.ОприходованиеНЗП
	|	И Не Распределение.ВозвратИзНЗП
	|	//ДляРеглУчета И Распределение.Организация = &Организация
 	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|
	|ПОМЕСТИТЬ ВыпускПродукцииПоПеределам
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|					
	|ГДЕ
	|	ВыпускПродукции.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка),
	|	МАКСИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение
	|			
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения КАК РаспределятьНаПодчиненныеПодразделения,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|	БазаРаспределенияЗатрат.Подразделение КАК ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.Заказ КАК ЗаказНЗП,
	|	ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка) КАК ХарактерРаспределенияЗатрат,
	|	
	|	МИНИМУМ(
	|		ЕСТЬNULL(ВыпускПродукции.НомерПередела, 1)
	|		) КАК НомерПередела,
	|
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|
	|	//ДляНалУчета СУММА(
	|	//ДляНалУчета 	ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 		БазаРаспределенияЗатрат.БазаПриходНУ
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		БазаРаспределенияЗатрат.БазаПриходНУ /
	|	//ДляНалУчета 		ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 			1
	|	//ДляНалУчета 		ИНАЧЕ
	|	//ДляНалУчета 			БазаРаспределенияЗатратВсего.БазаПриходНУ
	|	//ДляНалУчета 		КОНЕЦ
	|	//ДляНалУчета 	КОНЕЦ
	|	//ДляНалУчета ) КАК БазаПриходНУ,
	|	//ДляНалУчета МАКСИМУМ(
	|	//ДляНалУчета 	ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 		1
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		БазаРаспределенияНаПодчиненные.БазаПриходНУ /
	|	//ДляНалУчета 		ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 			1
	|	//ДляНалУчета 		ИНАЧЕ
	|	//ДляНалУчета 			БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ
	|	//ДляНалУчета 		КОНЕЦ
	|	//ДляНалУчета 	КОНЕЦ
	|	//ДляНалУчета ) КАК БазаНаПодчиненныеНУ,
	|
	|	СУММА(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			БазаРаспределенияЗатрат.БазаПриход
	|		ИНАЧЕ
	|			(БазаРаспределенияЗатрат.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияЗатратВсего.БазаПриход
	|			КОНЕЦ)
	|		КОНЕЦ
	|	) КАК БазаПриход,
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			БазаРаспределенияНаПодчиненные.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияНаПодчиненныеВсего.БазаПриход
	|			КОНЕЦ
	|		КОНЕЦ
	|	) КАК БазаНаПодчиненные
	|
	|ИЗ
	|	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияЗатратВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат = БазаРаспределенияЗатратВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияЗатратВсего.Подразделение			
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета = БазаРаспределенияЗатратВсего.СчетУчета
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияНаПодчиненные
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненные.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияНаПодчиненные.Подразделение
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета 	= БазаРаспределенияНаПодчиненные.СчетУчета
	|				
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат
	|
	|		) КАК БазаРаспределенияНаПодчиненныеВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненныеВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыпускПродукцииПоПеределам КАК ВыпускПродукции
	|	ПО
	|		БазаРаспределенияЗатрат.Подразделение = ВыпускПродукции.Подразделение
	|		И БазаРаспределенияЗатрат.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		БазаРаспределенияЗатрат.СчетУчета = СчетаУчетаЕНВД.Счет
	|			
	|ГДЕ
	|	БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|	И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.СпособРаспределенияЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|				//ДляРеглУчета Организация = &Организация
	|			) КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.НеРаспределять
	|			И ((&РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ХарактерРаспределенияПроизводственныеРасходы)
	|				ИЛИ 
	|				(Не &РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат = &ХарактерРаспределенияПроизводственныеРасходы)
	|				)
	|	//ДляРеглУчета 	
	|	//ДляРеглУчета Объединить все 				
	|	//ДляРеглУчета ВЫБРАТЬ
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат
	|	//ДляРеглУчета ИЗ
	|	//ДляРеглУчета 	РегистрСведений.ПРГ_НастройкиЗакрытияКосвенныхРасходов КАК ПРГ_НастройкиЗакрытияКосвенныхРасходов
	|	//ДляРеглУчета ГДЕ
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.Организация = &Организация
	|	//ДляРеглУчета 
	|	//ДляРеглУчета СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат	
	|		)
	|	//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|	//ДляБухУчета И Не БазаРаспределенияЗатрат.СчетУчета.Забалансовый
	|			
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	БазаРаспределенияЗатрат.Заказ
	|			
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	НомерПередела,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ
	|";

 	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаБазаРаспределенияЗатрат()

// Функция формирует текст запроса по регистру сведений "База распределения затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукциюКосвенные()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.Продукция,
	|	Распределение.ХарактеристикаПродукции,
	|	Распределение.СерияПродукции,
	|	Распределение.НомерПередела,
	|	Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ РаспределениеПродукцииПоПеределам
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И &РаспределениеКосвенныхЗатрат
	|	И Не Распределение.КорректировкаНЗП
	|	И Не Распределение.ОприходованиеНЗП
	|	И Не Распределение.ВозвратИзНЗП
	|	//ДляРеглУчета И Распределение.Организация = &Организация
 	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|	И ВыпускПродукции.Продукция В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Продукция
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|		)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|
	|ПОМЕСТИТЬ ВыпускПродукцииПоПеределам
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|			
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения КАК РаспределятьНаПодчиненныеПодразделения,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|
	|	БазаРаспределенияЗатрат.ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.ЗаказНЗП,
	|
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	БазаРаспределенияЗатрат.ВидВыпуска,
	|	&ПустойХарактерРаспределения КАК ХарактерРаспределенияЗатрат,
	|	
	|	МИНИМУМ(
	|		ЕСТЬNULL(ВыпускПродукции.НомерПередела, 1)
	|		) КАК НомерПередела,
	|
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|
	|	//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаНУ) КАК БазаПриходНУ,
	|	//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаНУ) КАК БазаНУ,
	|	//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаОстатокНЗПНУ) КАК БазаОстатокНЗПНУ,
	|
	|	СУММА(БазаРаспределенияЗатрат.База) КАК БазаПриход,
	|	СУММА(БазаРаспределенияЗатрат.База) КАК База,
	|	СУММА(БазаРаспределенияЗатрат.БазаОстатокНЗП) КАК БазаОстатокНЗП
	|
	|ИЗ
	|	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыпускПродукцииПоПеределам КАК ВыпускПродукции
	|	ПО
	|		БазаРаспределенияЗатрат.Подразделение = ВыпускПродукции.Подразделение
	|		И БазаРаспределенияЗатрат.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|		И БазаРаспределенияЗатрат.Продукция = ВыпускПродукции.Продукция
	|		И БазаРаспределенияЗатрат.ХарактеристикаПродукции = ВыпускПродукции.ХарактеристикаПродукции
	|		И БазаРаспределенияЗатрат.СерияПродукции = ВыпускПродукции.СерияПродукции
	|			
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		БазаРаспределенияЗатрат.СчетУчета = СчетаУчетаЕНВД.Счет
	|			
	|ГДЕ
	|	БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|	И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.СпособРаспределенияЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|				//ДляРеглУчета Организация = &Организация
	|			) КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.НеРаспределять
	|			И ((&РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ХарактерРаспределенияПроизводственныеРасходы)
	|				ИЛИ 
	|				(Не &РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат = &ХарактерРаспределенияПроизводственныеРасходы)
	|				)
	|	//ДляРеглУчета 	
	|	//ДляРеглУчета Объединить все 				
	|	//ДляРеглУчета ВЫБРАТЬ
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат
	|	//ДляРеглУчета ИЗ
	|	//ДляРеглУчета 	РегистрСведений.ПРГ_НастройкиЗакрытияКосвенныхРасходов КАК ПРГ_НастройкиЗакрытияКосвенныхРасходов
	|	//ДляРеглУчета ГДЕ
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.Организация = &Организация
	|	//ДляРеглУчета 
	|	//ДляРеглУчета СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат		
	|		)
	|	//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|	//ДляБухУчета И Не БазаРаспределенияЗатрат.СчетУчета.Забалансовый
	|			
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|
	|	БазаРаспределенияЗатрат.ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.ЗаказНЗП,
	|
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	БазаРаспределенияЗатрат.ВидВыпуска
	|			
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	НомерПередела,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	БазаРаспределенияЗатрат.ВидВыпуска
	|";

 	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию()

//конец изменений БП 04 


// Функция формирует текст запроса по регистру сведений "База распределения затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.Продукция,
	|	Распределение.ХарактеристикаПродукции,
	|	Распределение.СерияПродукции,
	|	Распределение.НомерПередела,
	|	Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ РаспределениеПродукцииПоПеределам
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И &РаспределениеКосвенныхЗатрат
	|	И Не Распределение.КорректировкаНЗП
	|	И Не Распределение.ОприходованиеНЗП
	|	И Не Распределение.ВозвратИзНЗП
	|	//ДляРеглУчета И Распределение.Организация = &Организация
 	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|	И ВыпускПродукции.Продукция В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Продукция
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|		)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|
	|ПОМЕСТИТЬ ВыпускПродукцииПоПеределам
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|			
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения КАК РаспределятьНаПодчиненныеПодразделения,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|
	|	БазаРаспределенияЗатрат.ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.ЗаказНЗП,
	|
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	БазаРаспределенияЗатрат.ВидВыпуска,
	|	&ПустойХарактерРаспределения КАК ХарактерРаспределенияЗатрат,
	|	
	|	МИНИМУМ(
	|		ЕСТЬNULL(ВыпускПродукции.НомерПередела, 1)
	|		) КАК НомерПередела,
	|
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|
	|	//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаНУ) КАК БазаПриходНУ,
	|	//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаНУ) КАК БазаНУ,
	|	//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаОстатокНЗПНУ) КАК БазаОстатокНЗПНУ,
	|
	|	СУММА(БазаРаспределенияЗатрат.База) КАК БазаПриход,
	|	СУММА(БазаРаспределенияЗатрат.База) КАК База,
	|	СУММА(БазаРаспределенияЗатрат.БазаОстатокНЗП) КАК БазаОстатокНЗП
	|
	|ИЗ
	|	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыпускПродукцииПоПеределам КАК ВыпускПродукции
	|	ПО
	|		БазаРаспределенияЗатрат.Подразделение = ВыпускПродукции.Подразделение
	|		И БазаРаспределенияЗатрат.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|		И БазаРаспределенияЗатрат.Продукция = ВыпускПродукции.Продукция
	|		И БазаРаспределенияЗатрат.ХарактеристикаПродукции = ВыпускПродукции.ХарактеристикаПродукции
	|		И БазаРаспределенияЗатрат.СерияПродукции = ВыпускПродукции.СерияПродукции
	|			
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		БазаРаспределенияЗатрат.СчетУчета = СчетаУчетаЕНВД.Счет
	|			
	|ГДЕ
	|	БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|	И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.СпособРаспределенияЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|				//ДляРеглУчета Организация = &Организация
	|			) КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.НеРаспределять
	|			И ((&РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ХарактерРаспределенияПроизводственныеРасходы)
	|				ИЛИ 
	|				(Не &РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат = &ХарактерРаспределенияПроизводственныеРасходы)
	|				)
	|		)
	|	//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|	//ДляБухУчета И Не БазаРаспределенияЗатрат.СчетУчета.Забалансовый
	|			
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|
	|	БазаРаспределенияЗатрат.ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.ЗаказНЗП,
	|
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	БазаРаспределенияЗатрат.ВидВыпуска
	|			
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	НомерПередела,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	БазаРаспределенияЗатрат.ВидВыпуска
	|";

 	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию()


// Функция формирует запрос по регистру сведений "База распределения затрат".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	ТекстЗапросаСКомментариями - Текст - Текст запроса
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру сведений "База распределения затрат".
//
Функция СформироватьЗапросПоБазеРаспределенияЗатрат(
	СтруктураШапкиДокумента,
	ТекстЗапросаСКомментариями,
	КосвенныеЗатраты
	)
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("РаспределениеКосвенныхЗатрат", КосвенныеЗатраты);
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ХарактерРаспределенияПроизводственныеРасходы", Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("ПустойХарактерРаспределения", Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПродукция", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());

	Возврат Запрос;

КонецФункции // СформироватьЗапросПоБазеРаспределенияЗатрат()

// Функция получает построитель запроса по базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//
// Возвращаемое значение:
//	ПостроительЗапроса - построитель запроса.
//
Функция ПолучитьПостроительЗапросаПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаБазаРаспределения
	)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапросаБазаРаспределения);
	ПостроительЗапроса.Отбор.Добавить("СпособРаспределения");
	ПостроительЗапроса.Отбор.Добавить("ПодразделениеНЗП");
	ПостроительЗапроса.Отбор.Добавить("НоменклатурнаяГруппаНЗП");
	ПостроительЗапроса.Отбор.Добавить("ЗаказНЗП");
	ПостроительЗапроса.Отбор.Добавить("НомерПередела");
	ПостроительЗапроса.Отбор.Добавить("ХарактерРаспределенияЗатрат");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
	 //+ДС 14.03.14
	 Или СтруктураШапкиДокумента.ОтражатьВМеждународномУчете
	 //-ДС
	 Тогда
	 
		ПостроительЗапроса.Отбор.Добавить("СчетУчета");
		Если ПостроительЗапроса.ДоступныеПоля.Найти("ЕНВД") <> Неопределено Тогда
			ПостроительЗапроса.Отбор.Добавить("ЕНВД");
		КонецЕсли;
		 
	КонецЕсли;
	
	Если ПостроительЗапроса.ДоступныеПоля.Найти("Продукция") <> Неопределено Тогда
		ПостроительЗапроса.Отбор.Добавить("Продукция");
	КонецЕсли;
	Если ПостроительЗапроса.ДоступныеПоля.Найти("ХарактеристикаПродукции") <> Неопределено Тогда
		ПостроительЗапроса.Отбор.Добавить("ХарактеристикаПродукции");
	КонецЕсли;
	Если ПостроительЗапроса.ДоступныеПоля.Найти("СерияПродукции") <> Неопределено Тогда
		ПостроительЗапроса.Отбор.Добавить("СерияПродукции");
	КонецЕсли;
	
	ПостроительЗапроса.Отбор.СпособРаспределения.Использование = Истина;
	ПостроительЗапроса.Отбор.НомерПередела.Использование = Истина;
	ПостроительЗапроса.Отбор.НомерПередела.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	
	Возврат ПостроительЗапроса;

КонецФункции // ПолучитьПостроительЗапросаПоБазеРаспределения()

// Функция проверяет отбор и устанавливает параметры отбора построителя запроса по базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	НомерПередела - Число - Текущий номер передела
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Заданный способ определения
//	ХарактерРаспределенияЗатрат - ПеречислениеСсылка.ХарактерРаспределения - Заданный характер распределения
//	РаспределятьНаПодчиненныеПодразделения - Булево - Признак распределения на подчиненные подразделения
//	ЕНВД - Булево - Признак отнесения расходов на вид деятельности, облагаемый ЕНВД
//	ОпределятьПоЕНВД - Булево - Признак определения базы распределения с учетом ЕНВД
//	ОпределятьПоСчетуУчету - Булево - Признак определения базы распределения по счету учета
//	ОтборПоПродукции - Булево - Признак определения базы распределения с учетом отбора по продукции
//
// Выходные параметры
//	ПостроительЗапроса - ПостроительЗапроса - построитель запроса.
//
// Возвращаемое значение:
//	Булево - Истина - установлен новый отбор,
//			 Ложь - значения отбора не изменились.
//
Функция ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	НомерПередела,
	СпособРаспределения,
	ХарактерРаспределенияЗатрат,
	РаспределятьНаПодчиненныеПодразделения,
	ЕНВД,
	ОпределятьПоЕНВД,
	ОпределятьПоСчетуУчету,
	ОтборПоПродукции,
	ПостроительЗапроса
	)
	
	ОтборСоответствуетАналитике = Ложь;
	Если ПостроительЗапроса.Отбор.СпособРаспределения.Значение = СпособРаспределения
	   И ПостроительЗапроса.Отбор.ХарактерРаспределенияЗатрат.Значение = ХарактерРаспределенияЗатрат
	   И ПостроительЗапроса.Отбор.ПодразделениеНЗП.Значение = СтрокаВыборки.Подразделение
	   И ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = СтрокаВыборки.НоменклатурнаяГруппа
	   И ПостроительЗапроса.Отбор.ЗаказНЗП.Значение = СтрокаВыборки.Заказ
	   И ПостроительЗапроса.Отбор.НомерПередела.Значение = НомерПередела 
	Тогда
		ОтборСоответствуетАналитике = Истина;
	КонецЕсли;
	   
	Если ОтборСоответствуетАналитике
	   И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	   И ОпределятьПоЕНВД Тогда
	   
		Если ПостроительЗапроса.Отбор.ЕНВД.Значение <> ЕНВД Тогда
		   ОтборСоответствуетАналитике = Ложь;
		КонецЕсли;
	КонецЕсли;
		   
	Если ОтборСоответствуетАналитике
	   И ОпределятьПоСчетуУчету
	   И (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
			ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
			
		Если ПостроительЗапроса.Отбор.СчетУчета.Значение <> СтрокаВыборки.СчетУчета Тогда
			ОтборСоответствуетАналитике = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборСоответствуетАналитике
	   И ОтборПоПродукции
	   И ПостроительЗапроса.ДоступныеПоля.Найти("Продукция") <> Неопределено Тогда
			
		Если ПостроительЗапроса.Отбор.Продукция <> СтрокаВыборки.Продукция
		 ИЛИ ПостроительЗапроса.Отбор.ХарактеристикаПродукции <> СтрокаВыборки.ХарактеристикаПродукции
		 ИЛИ ПостроительЗапроса.Отбор.СерияПродукции <> СтрокаВыборки.СерияПродукции Тогда
			ОтборСоответствуетАналитике = Ложь;
		КонецЕсли;
	КонецЕсли;
			
	Если Не ОтборСоответствуетАналитике Тогда
	
		ПостроительЗапроса.Отбор.СпособРаспределения.Значение = СпособРаспределения;
		ПостроительЗапроса.Отбор.ХарактерРаспределенияЗатрат.Значение = ХарактерРаспределенияЗатрат;
		ПостроительЗапроса.Отбор.ПодразделениеНЗП.Значение = СтрокаВыборки.Подразделение;
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = СтрокаВыборки.НоменклатурнаяГруппа;
		ПостроительЗапроса.Отбор.ЗаказНЗП.Значение = СтрокаВыборки.Заказ;
		ПостроительЗапроса.Отбор.НомерПередела.Значение = НомерПередела;
			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ОпределятьПоЕНВД Тогда
		   
			ПостроительЗапроса.Отбор.ЕНВД.Значение = ЕНВД;
			ПостроительЗапроса.Отбор.ЕНВД.Использование = Истина;
			
		КонецЕсли; 
		
		Если ОпределятьПоСчетуУчету
		   И (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
				ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
			
			ПостроительЗапроса.Отбор.СчетУчета.Значение = СтрокаВыборки.СчетУчета;
			Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				ПостроительЗапроса.Отбор.СчетУчета.Использование = Ложь;
			Иначе	
				ПостроительЗапроса.Отбор.СчетУчета.Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;
			
		Если ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение Тогда
			ПостроительЗапроса.Отбор.ПодразделениеНЗП.Использование = Ложь;
		Иначе
			ПостроительЗапроса.Отбор.ПодразделениеНЗП.Использование = Истина;
			Если РаспределятьНаПодчиненныеПодразделения Тогда
				ПостроительЗапроса.Отбор.ПодразделениеНЗП.ВидСравнения = ВидСравнения.ВИерархии;
			Иначе
				ПостроительЗапроса.Отбор.ПодразделениеНЗП.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
		КонецЕсли;
												
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование = Не СтрокаВыборки.НоменклатурнаяГруппа.Пустая();
		ПостроительЗапроса.Отбор.ЗаказНЗП.Использование = ЗначениеЗаполнено(СтрокаВыборки.Заказ);
		
		Если ОтборПоПродукции
		   И ПостроительЗапроса.ДоступныеПоля.Найти("Продукция") <> Неопределено Тогда
			
			ПостроительЗапроса.Отбор.Продукция.Значение = СтрокаВыборки.Продукция;
			ПостроительЗапроса.Отбор.ХарактеристикаПродукции.Значение = СтрокаВыборки.ХарактеристикаПродукции;
			ПостроительЗапроса.Отбор.СерияПродукции.Значение = СтрокаВыборки.СерияПродукции;
			
			ПостроительЗапроса.Отбор.Продукция.Использование = Не СтрокаВыборки.Продукция.Пустая();
			ПостроительЗапроса.Отбор.ХарактеристикаПродукции.Использование = Не СтрокаВыборки.ХарактеристикаПродукции.Пустая();
			ПостроительЗапроса.Отбор.СерияПродукции.Использование = Не СтрокаВыборки.СерияПродукции.Пустая();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не ОтборСоответствуетАналитике;

КонецФункции // ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ ПО РАСПРЕДЕЛЕНИЮ ЗАТРАТ

// Процедура формирует движение по распределению затрат по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат или Неопределено - Текущий характер затрат
//	Затрата - ПеречислениеСсылка.ХарактерЗатрат или СправочникСсылка.Номенклатура,
//	ХарактеристикаЗатраты - СправочникСсылка.ХарактеристикиНоменклатуры (используется только для производственных расходов),
//	СерияЗатраты - СправочникСсылка.СерииНоменклатуры (используется только для производственных расходов),
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	Количество - Число - Количество затрат (используется только для производственных расходов)
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство".
//
Процедура СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтатьяЗатрат,
	ХарактерЗатрат,
	Затрата,
	ХарактеристикаЗатраты,
	СерияЗатраты,
	НомерПередела,
	Количество,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	ВидДвижения,
	НаборЗаписейНезавершенноеПроизводство,
	//начало изменений БП
	НужныйКодОперации = Неопределено
	//конец изменений БП  
	)
	
	Если Количество = 0
	   И Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Незавершенное производство" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - заполняется характер затрат или номенклатура
	//	- ХарактеристикаЗатраты - не заполняется (для косвенных затрат) или заполняется характеристика номенклатуры
	//	- СерияЗатраты - не заполняется (для косвенных затрат) или заполняется серия номенклатуры.
	
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетУчета;
	КонецЕсли;
	
	НоваяСтрока.Подразделение = СтрокаВыборки.Подразделение;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппа;
	НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
	НоваяСтрока.Заказ = СтрокаВыборки.Заказ;
	
	НоваяСтрока.Затрата = Затрата;
	НоваяСтрока.ХарактеристикаЗатраты = ХарактеристикаЗатраты;
	НоваяСтрока.СерияЗатраты = СерияЗатраты;
	
	//начало изменений БП 04
	Если НужныйКодОперации = Неопределено Тогда		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
			КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеОХР_Регламент;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеОПР_Регламент;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеБракВПроизводстве_Регламент;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.РаспределениеНЗПРегламент;
			
		ИначеЕсли ХарактерЗатрат = Неопределено Тогда
			КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент;
			
		Иначе
			КодОперации = Неопределено;
			ОбщегоНазначения.СообщитьОбОшибке("Не определен код операции для характера затрат: """ + ХарактерЗатрат + """.
						|Процедура <СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат>");
			
		КонецЕсли;
	Иначе
		КодОперации  = НужныйКодОперации;
	КонецЕсли;
	//конец изменений БП 04 
	
	НоваяСтрока.КодОперации = КодОперации;
	НоваяСтрока.НомерПередела = НомерПередела;		
	
	НоваяСтрока.Стоимость = Сумма;
	НоваяСтрока.Количество  = Количество;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты".
//
Процедура СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатрат,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	ВидДвижения,
	НаборЗаписейЗатраты
	)
	
	Если Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ
	
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатраты.СписаниеОХР_Регламент;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатраты.СписаниеОПР_Регламент;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
		ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы
		ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
	Тогда
		КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
		
	Иначе
		КодОперации = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Не определен код операции для характера затрат: """ + ХарактерЗатрат + """.
					|Процедура <СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат>");
		
	КонецЕсли;
		
	НоваяСтрока.КодОперации = КодОперации;
	
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Затраты (обороты)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	Проект - Справочник.Проекты - Текущий проект
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)".
//
Процедура СформироватьДвиженияПоРегиструЗатратыОборотыРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Проект,
	Сумма,
	НаборЗаписейЗатратыОбороты
	)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты (обороты)" должны быть заполнены измерения:
	//	- Подразделение,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Проект
	
	НоваяСтрока = НаборЗаписейЗатратыОбороты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.Проект = Проект;
	НоваяСтрока.Сумма = Сумма;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыОбороты.Количество() = 1000 Тогда
		НаборЗаписейЗатратыОбороты.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыОборотыРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Брак в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	НаборЗаписейБракВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Брак в производстве".
//
Процедура СформироватьДвиженияПоРегиструБракВПроизводствеРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	ВидДвижения,
	НаборЗаписейБракВПроизводстве
	)
	
	Если Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструБракВПроизводствеРаспределениеЗатрат>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Брак в производстве" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции
	
	НоваяСтрока = НаборЗаписейБракВПроизводстве.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.СписаниеБракВПроизводстве_Регламент;
	
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейБракВПроизводстве.Количество() = 1000 Тогда
		НаборЗаписейБракВПроизводстве.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБракВПроизводствеРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СтатусМатериальныхЗатрат - ПеречислениеСсылка.СтатусыМатериальныхЗатратНаПроизводство - Текущий статус материальных затрат
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//	НаборЗаписейЗатратыНаВыпуск - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	СтатьяЗатрат,
	ХарактерЗатрат,
	СтатусМатериальныхЗатрат,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	НаборЗаписейЗатратыНаВыпуск
	)
	
	Если Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты, заполняемые по данным базы распределения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Спецификация,
	//	- Заказ,
	//	- ДокументВыпуска,
	//
	// Измерения и реквизиты, заполняемые по распределяемым затратам:
	//	- СтатьяЗатрат,
	//	- Затрата - заполняется ХарактерЗатрат,
	//	- ХарактеристикаЗатраты - не заполняется,
	//	- СерияЗатраты - не заполняется,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборкиБаза);
	
	НоваяСтрока.Затрата = ХарактерЗатрат;
	
	НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборки.НоменклатурнаяГруппа;
	НоваяСтрока.ЗаказНЗП = СтрокаВыборки.Заказ;
	НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.Подразделение;
	
	Если СтруктураШапкиДокумента.Свойство("ДетализацияПоФиксированнойСтатьеЗатрат") Тогда
		ДетализацияПоФиксированнойСтатьеЗатрат = СтруктураШапкиДокумента.ДетализацияПоФиксированнойСтатьеЗатрат;
	Иначе
		ДетализацияПоФиксированнойСтатьеЗатрат = Ложь;
	КонецЕсли;
	
	// Заполним статью затрат.
	Если Не ДетализацияПоФиксированнойСтатьеЗатрат Тогда
		НоваяСтрока.СтатьяЗатрат  = СтатьяЗатрат;
	Иначе
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			НоваяСтрока.СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяБракВПроизводстве;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			НоваяСтрока.СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяОбщепроизводственныеРасходы;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
			НоваяСтрока.СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяОбщехозяйственныеРасходы;
			
		Иначе
			НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
			
		КонецЕсли;
	КонецЕсли;
	
	// Заполним код операции.
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьОХР;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьОПР;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьБракВПроизводстве;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		Если СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты;
		Иначе
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
		КонецЕсли;
		
	Иначе
		КодОперации = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Не определен код операции для характера затрат: """ + ХарактерЗатрат + """.
					|Процедура <СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат>");
		
	КонецЕсли;
		
	НоваяСтрока.КодОперации = КодОперации;
	НоваяСтрока.КосвенныеЗатраты = Истина;
	НоваяСтрока.ЗатратыВстречногоВыпуска = Ложь;
	
	НоваяСтрока.Количество = 0;
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	РаспределениеЗатратПоБазе - Булево - Признак вызова процедуры при распределении затрат по базе
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//	НаборЗаписейЗатратыНаВыпуск - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	РаспределениеЗатратПоБазе,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	Количество,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	НаборЗаписейЗатратыНаВыпуск
	)
	
	Если Количество = 0
	   И Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты, заполняемые по данным базы распределения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Спецификация,
	//	- Заказ,
	//	- ДокументВыпуска,
	//
	// Измерения и реквизиты, заполняемые по распределяемым затратам:
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборкиБаза);
	
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
		
	Если РаспределениеЗатратПоБазе Тогда
		НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборки.НоменклатурнаяГруппа;
		НоваяСтрока.ЗаказНЗП = СтрокаВыборки.Заказ;
		НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.Подразделение;
		
		НоваяСтрока.Затрата = СтрокаВыборки.Затрата;
		НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаЗатраты;
		НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияЗатраты;
	КонецЕсли;
	
	Если РаспределениеЗатратПоБазе Тогда
		Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты;
		Иначе
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
		КонецЕсли;
	Иначе
		КодОперации = СтрокаВыборкиБаза.КодОперации;
	КонецЕсли;
		
	НоваяСтрока.КодОперации = КодОперации;
	НоваяСтрока.КосвенныеЗатраты = КосвенныеЗатраты;
	НоваяСтрока.ЗатратыВстречногоВыпуска = ЗатратыВстречногоВыпуска;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты()

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции (наработка)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыНаВыпускНаработка - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск (наработка)".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	Количество,
	Сумма,
	НаборЗаписейЗатратыНаВыпускНаработка
	)
	
	Если Количество = 0
	   И Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск (наработка)" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты, заполняемые по данным базы распределения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Заказ,
	//
	// Измерения и реквизиты, заполняемые по распределяемым затратам:
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпускНаработка.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборкиБаза);
	
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
	НоваяСтрока.Затрата = СтрокаВыборки.Затрата;
	НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаЗатраты;
	НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияЗатраты;
	
	НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборки.НоменклатурнаяГруппа;
	НоваяСтрока.ЗаказНЗП = СтрокаВыборки.Заказ;
	НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.Подразделение;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпускНаработка.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпускНаработка.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО ПРЯМЫМ ПРОИЗВОДСТВЕННЫМ ЗАТРАТАМ

// Функция формирует текст запроса по производственным затратам.
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоПрямымПроизводственнымЗатратам()
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА
	|		Неопределено
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.Затрата
	|	КОНЕЦ КАК Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	
	|	НезавершенноеПроизводство.Подразделение КАК ПодразделениеНЗП,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|	НезавершенноеПроизводство.Заказ КАК ЗаказНЗП,
	|	
	|	//ДляРеглУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляРеглУчета ТОГДА
	|	//ДляРеглУчета 		Неопределено
	|	//ДляРеглУчета ИНАЧЕ
	|	//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета
	|	//ДляРеглУчета КОНЕЦ КАК СчетУчета,
	|	
	|	СУММА(ЗатратыНаВыпуск.КоличествоОстаток) КАК Количество,
	|	СУММА(ЗатратыНаВыпуск.СуммаОстаток) КАК Сумма
	|
	|ПОМЕСТИТЬ ЗатратыНаВыпускНаработка
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%СуффиксУчета%.Остатки(&КонГраница, 
	|		СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|		//ДляРеглУчета И Организация = &Организация
	|	) КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|			СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|			//ДляРеглУчета И Организация = &Организация
	|		) КАК НезавершенноеПроизводство
	|	ПО  
	|		ЗатратыНаВыпуск.СтатьяЗатрат = НезавершенноеПроизводство.СтатьяЗатрат
	|		И (ЗатратыНаВыпуск.Затрата = НезавершенноеПроизводство.Затрата
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НезавершенноеПроизводство.Затрата = Неопределено
	|			)
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = НезавершенноеПроизводство.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = НезавершенноеПроизводство.СерияЗатраты
	|		
	|		И (ЗатратыНаВыпуск.ПодразделениеНЗП = НезавершенноеПроизводство.Подразделение
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Подразделение = НезавершенноеПроизводство.Подразделение
	|			//ДляУпрУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			)
	|		
	|		И (ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = НезавершенноеПроизводство.НоменклатурнаяГруппа
	|			ИЛИ 
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппа = НезавершенноеПроизводство.НоменклатурнаяГруппа
	|			И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			)
	|		
	|		И (ЗатратыНаВыпуск.ЗаказНЗП = НезавершенноеПроизводство.Заказ
	|			ИЛИ
	|			ЗатратыНаВыпуск.Заказ = НезавершенноеПроизводство.Заказ
	|			И ЗатратыНаВыпуск.ЗаказНЗП = Неопределено
	|			)
	|		//ДляРеглУчета И ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|		//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|		//ДляРеглУчета ТОГДА
	|		//ДляРеглУчета 		Истина
	|		//ДляРеглУчета ИНАЧЕ
	|		//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета = НезавершенноеПроизводство.СчетУчета
	|		//ДляРеглУчета КОНЕЦ
	|		
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|
	|	//ДляРеглУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляРеглУчета ТОГДА
	|	//ДляРеглУчета 		Неопределено
	|	//ДляРеглУчета ИНАЧЕ
	|	//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета
	|	//ДляРеглУчета КОНЕЦ,
	|	
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ
    |;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЗатратыНаВыпуск.Подразделение,
	|	//ДляРеглУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляРеглУчета ТОГДА
	|	//ДляРеглУчета 		Неопределено
	|	//ДляРеглУчета ИНАЧЕ
	|	//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета
	|	//ДляРеглУчета КОНЕЦ КАК СчетУчета,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	СУММА(ЗатратыНаВыпуск.Сумма) КАК Сумма,
	|	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ВременнаяРазница)	КАК ВременнаяРазница,
	|	//ДляНалУчета СУММА(ЗатратыНаВыпуск.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
	|
	|ПОМЕСТИТЬ ЗатратыНаВыпуск
	|ИЗ 
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|ГДЕ
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И ЗатратыНаВыпуск.КодОперации В (&КодыОпераций)
	|	И ЗатратыНаВыпуск.СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|			
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыНаВыпуск.Подразделение,
	|	//ДляРеглУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляРеглУчета ТОГДА
	|	//ДляРеглУчета 		Неопределено
	|	//ДляРеглУчета ИНАЧЕ
	|	//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета
	|	//ДляРеглУчета КОНЕЦ,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты
    |;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|	
	|	(НезавершенноеПроизводство.СтоимостьОстаток
	|		- ЕСТЬNULL(ЗатратыНаВыпуск.Сумма, 0)
	|		- ЕСТЬNULL(ЗатратыНаВыпускНаработка.Сумма, 0)
	|	) КАК СуммаОстаток,
	|	
	|	//ДляНалУчета ( НезавершенноеПроизводство.ВременнаяРазницаОстаток
	|	//ДляНалУчета 	- ЕСТЬNULL(ЗатратыНаВыпуск.ВременнаяРазница, 0)
	|	//ДляНалУчета ) КАК ВременнаяРазницаОстаток,
	|
	|	//ДляНалУчета (	НезавершенноеПроизводство.ПостояннаяРазницаОстаток
	|	//ДляНалУчета 	- ЕСТЬNULL(ЗатратыНаВыпуск.ПостояннаяРазница, 0)
	|	//ДляНалУчета ) КАК ПостояннаяРазницаОстаток,
	|
	|	(НезавершенноеПроизводство.КоличествоОстаток
	|		- ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0)
	|		- ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)
	|	) КАК КоличествоОстаток,
	|	
	|	ЕСТЬNULL(ИнвентаризацияНЗП.Сумма, 0) КАК СуммаИнвентаризация,
	|	ЕСТЬNULL(ИнвентаризацияНЗП.Количество, 0) КАК КоличествоИнвентаризация
	|
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|		Не Затрата ССЫЛКА Перечисление.ХарактерЗатрат
	|		И СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|		//ДляРеглУчета И Организация = &Организация
	|		//ДляНалУчета И СчетУчета В (&МассивСчетовУчета)
	|		) КАК НезавершенноеПроизводство
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЗатратыНаВыпуск КАК ЗатратыНаВыпуск
	|	ПО 
	|		НезавершенноеПроизводство.Подразделение = ЗатратыНаВыпуск.Подразделение
	|		И НезавершенноеПроизводство.НоменклатурнаяГруппа = ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП
	|		И НезавершенноеПроизводство.Заказ = ЗатратыНаВыпуск.ЗаказНЗП
	|		И НезавершенноеПроизводство.СтатьяЗатрат = ЗатратыНаВыпуск.СтатьяЗатрат
	|		И НезавершенноеПроизводство.Затрата	= ЗатратыНаВыпуск.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = ЗатратыНаВыпуск.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = ЗатратыНаВыпуск.СерияЗатраты
	|		//ДляРеглУчета И (НезавершенноеПроизводство.СчетУчета = ЗатратыНаВыпуск.СчетУчета
	|		//ДляРеглУчета 		ИЛИ ЗатратыНаВыпуск.СчетУчета = Неопределено)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЗатратыНаВыпускНаработка КАК ЗатратыНаВыпускНаработка
	|	ПО 
	|		НезавершенноеПроизводство.Подразделение = ЗатратыНаВыпускНаработка.ПодразделениеНЗП
	|		И НезавершенноеПроизводство.НоменклатурнаяГруппа = ЗатратыНаВыпускНаработка.НоменклатурнаяГруппаНЗП
	|		И НезавершенноеПроизводство.Заказ = ЗатратыНаВыпускНаработка.ЗаказНЗП
	|		И НезавершенноеПроизводство.СтатьяЗатрат = ЗатратыНаВыпускНаработка.СтатьяЗатрат
	|		И НезавершенноеПроизводство.Затрата	= ЗатратыНаВыпускНаработка.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = ЗатратыНаВыпускНаработка.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = ЗатратыНаВыпускНаработка.СерияЗатраты	
	|		//ДляРеглУчета И (НезавершенноеПроизводство.СчетУчета = ЗатратыНаВыпускНаработка.СчетУчета
	|		//ДляРеглУчета 		ИЛИ ЗатратыНаВыпускНаработка.СчетУчета = Неопределено)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			//ДляУпрУчета ИнвентаризацияМатериалы.Ссылка.Подразделение,
	|			//ДляРеглУчета ИнвентаризацияМатериалы.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|           
	//+ДС 10.01.14
	|			//ДляМеждУчета ИнвентаризацияМатериалы.СчетЗатрат,
	//-ДС 10.01.14
	|			//ДляБухУчета ИнвентаризацияМатериалы.СчетЗатрат,
	|			//ДляНалУчета ИнвентаризацияМатериалы.СчетЗатратНУ КАК СчетЗатрат,
	|
	|			ИнвентаризацияМатериалы.Номенклатура КАК Затрата,
	|			ИнвентаризацияМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|			ИнвентаризацияМатериалы.СерияНоменклатуры КАК СерияЗатраты,
	|			ИнвентаризацияМатериалы.НоменклатурнаяГруппа,
	|			ИнвентаризацияМатериалы.СтатьяЗатрат,
	|			ВЫБОР КОГДА ИнвентаризацияМатериалы.Заказ <> &ПустойЗаказПокупателя И
	|						ИнвентаризацияМатериалы.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				ИнвентаризацияМатериалы.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ КАК Заказ,
	|
	|			СУММА(ИнвентаризацияМатериалы.Количество * 
	|				ИнвентаризацияМатериалы.Коэффициент /
	|				ИнвентаризацияМатериалы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|			) КАК Количество,
	|			0 КАК Сумма
	|			
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.Материалы КАК ИнвентаризацияМатериалы
	|			
	|		ГДЕ
	|			ИнвентаризацияМатериалы.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|			И Не ИнвентаризацияМатериалы.Ссылка.ПометкаУдаления
	|			И ИнвентаризацияМатериалы.СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|			//ДляУпрУчета И ИнвентаризацияМатериалы.Ссылка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И ИнвентаризацияМатериалы.Ссылка.ОтражатьВБухгалтерскомУчете
	|			//ДляНалУчета И ИнвентаризацияМатериалы.Ссылка.ОтражатьВНалоговомУчете
	//+ДС 10.01.14
	|			//ДляМеждУчета И ИнвентаризацияМатериалы.Ссылка.ОтражатьВБухгалтерскомУчете
	//-ДС 10.01.14
	|			//ДляРеглУчета И ИнвентаризацияМатериалы.Ссылка.Организация = &Организация
	|			
	|		СГРУППИРОВАТЬ ПО
	|			//ДляУпрУчета ИнвентаризацияМатериалы.Ссылка.Подразделение,
	|			//ДляРеглУчета ИнвентаризацияМатериалы.Ссылка.ПодразделениеОрганизации,
	|
	|			//ДляБухУчета ИнвентаризацияМатериалы.СчетЗатрат,
	//+ДС 10.01.14
	|			//ДляМеждУчета ИнвентаризацияМатериалы.СчетЗатрат,
    //-ДС 10.01.14
	|			//ДляНалУчета ИнвентаризацияМатериалы.СчетЗатратНУ,
	|			ИнвентаризацияМатериалы.Номенклатура,
	|			ИнвентаризацияМатериалы.ХарактеристикаНоменклатуры,
	|			ИнвентаризацияМатериалы.СерияНоменклатуры,
	|			ИнвентаризацияМатериалы.НоменклатурнаяГруппа,
	|			ИнвентаризацияМатериалы.СтатьяЗатрат,
	|			ВЫБОР КОГДА ИнвентаризацияМатериалы.Заказ <> &ПустойЗаказПокупателя И
	|						ИнвентаризацияМатериалы.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				ИнвентаризацияМатериалы.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ
	|			
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			//ДляУпрУчета ИнвентаризацияПрочие.Ссылка.Подразделение,
	|			//ДляРеглУчета ИнвентаризацияПрочие.Ссылка.ПодразделениеОрганизации,
	|
	|			//ДляБухУчета ИнвентаризацияПрочие.СчетЗатрат,
	//+ДС 10.01.14
	|			//ДляМеждУчета ИнвентаризацияПрочие.СчетЗатрат,
    //-ДС 10.01.14
	|			//ДляНалУчета ИнвентаризацияПрочие.СчетЗатратНУ КАК СчетЗатрат,
	|
	|			ВЫБОР КОГДА ИнвентаризацияПрочие.СпособРаспределенияЗатратНаВыпуск = &ПустойСпособРаспределения Тогда
	|				Неопределено
	|			ИНАЧЕ
	|				ИнвентаризацияПрочие.СпособРаспределенияЗатратНаВыпуск	
	|			КОНЕЦ КАК Затрата,
	|			&ПустаяХарактеристика,
	|			&ПустаяСерия,
	|			ИнвентаризацияПрочие.НоменклатурнаяГруппа,
	|			ИнвентаризацияПрочие.СтатьяЗатрат,
	|			ВЫБОР КОГДА ИнвентаризацияПрочие.Заказ <> &ПустойЗаказПокупателя И
	|						ИнвентаризацияПрочие.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				ИнвентаризацияПрочие.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ,
	|
	|			0 КАК Количество,
	|			//ДляУпрУчета СУММА(ИнвентаризацияПрочие.Сумма) КАК Сумма
	|			//ДляБухУчета СУММА(ИнвентаризацияПрочие.СуммаРегл) КАК Сумма
	//+ДС 10.01.14
	|			//ДляМеждУчета СУММА(ИнвентаризацияПрочие.СуммаРегл) КАК Сумма
    //-ДС 10.01.14
	|			//ДляНалУчета СУММА(ИнвентаризацияПрочие.СуммаНал) КАК Сумма
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.ПрочиеЗатраты КАК ИнвентаризацияПрочие
	|			
	|		ГДЕ
	|			ИнвентаризацияПрочие.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|			И Не ИнвентаризацияПрочие.Ссылка.ПометкаУдаления
	|			И ИнвентаризацияПрочие.СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|			//ДляУпрУчета И ИнвентаризацияПрочие.Ссылка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И ИнвентаризацияПрочие.Ссылка.ОтражатьВБухгалтерскомУчете
	//+ДС 10.01.14
	|			//ДляМеждУчета И ИнвентаризацияПрочие.Ссылка.ОтражатьВБухгалтерскомУчете
	//-ДС 10.01.14
	|			//ДляНалУчета И ИнвентаризацияПрочие.Ссылка.ОтражатьВНалоговомУчете
	|			//ДляРеглУчета И ИнвентаризацияПрочие.Ссылка.Организация = &Организация
	|			
	|		СГРУППИРОВАТЬ ПО
	|			//ДляУпрУчета ИнвентаризацияПрочие.Ссылка.Подразделение,
	|			//ДляРеглУчета ИнвентаризацияПрочие.Ссылка.ПодразделениеОрганизации,
	|
	|			//ДляБухУчета ИнвентаризацияПрочие.СчетЗатрат,
	//+ДС 10.01.14
	|			//ДляМеждУчета ИнвентаризацияПрочие.СчетЗатрат,
	//-ДС 10.01.14
	|			//ДляНалУчета ИнвентаризацияПрочие.СчетЗатратНУ,
	|
	|			ВЫБОР КОГДА ИнвентаризацияПрочие.СпособРаспределенияЗатратНаВыпуск = &ПустойСпособРаспределения Тогда
	|				Неопределено
	|			ИНАЧЕ
	|				ИнвентаризацияПрочие.СпособРаспределенияЗатратНаВыпуск	
	|			КОНЕЦ,
	|			ИнвентаризацияПрочие.НоменклатурнаяГруппа,
	|			ИнвентаризацияПрочие.СтатьяЗатрат,
	|			ВЫБОР КОГДА ИнвентаризацияПрочие.Заказ <> &ПустойЗаказПокупателя И
	|						ИнвентаризацияПрочие.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				ИнвентаризацияПрочие.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ
	|			
	|		) КАК ИнвентаризацияНЗП
	|	ПО 
	|		НезавершенноеПроизводство.Подразделение = ИнвентаризацияНЗП.Подразделение
	|		И НезавершенноеПроизводство.НоменклатурнаяГруппа = ИнвентаризацияНЗП.НоменклатурнаяГруппа
	|		И НезавершенноеПроизводство.Заказ = ИнвентаризацияНЗП.Заказ
	|		И НезавершенноеПроизводство.СтатьяЗатрат = ИнвентаризацияНЗП.СтатьяЗатрат
	|		И НезавершенноеПроизводство.Затрата	= ИнвентаризацияНЗП.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = ИнвентаризацияНЗП.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = ИнвентаризацияНЗП.СерияЗатраты
	|		//ДляРеглУчета И НезавершенноеПроизводство.СчетУчета = ИнвентаризацияНЗП.СчетЗатрат
	|	
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		НезавершенноеПроизводство.СчетУчета = СчетаУчетаЕНВД.Счет
	//+ДС 10.01.14
	|	//ДляМеждУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляМеждУчета		ВЫБРАТЬ
	|	//ДляМеждУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляМеждУчета			Истина КАК ЕНВД
	|	//ДляМеждУчета		ИЗ
	|	//ДляМеждУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляМеждУчета		ГДЕ
	|	//ДляМеждУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляМеждУчета		) КАК СчетаУчетаЕНВД
	|	//ДляМеждУчета	ПО
	|	//ДляМеждУчета		НезавершенноеПроизводство.СчетУчета = СчетаУчетаЕНВД.Счет
	//-ДС 10.01.14
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	//+ДС 10.01.14
	|	//ДляМеждУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	//-ДС 10.01.14
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	НезавершенноеПроизводство.Заказ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗатратыНаВыпускНаработка
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗатратыНаВыпуск
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПрямымПроизводственнымЗатратам()

// Процедура устанавливает параметры запроса по производственным затратам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	МассивСтатьиЗатрат - Массив - Массив статей затрат
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросаПоПрямымПроизводственнымЗатратам(
	СтруктураШапкиДокумента,
	МассивСтатьиЗатрат,
	Запрос
	)
	
	Запрос.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("МассивСтатьиЗатрат", МассивСтатьиЗатрат);
	
	МассивКодыОпераций = Новый Массив;
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодыОпераций);
	
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказНаПроизводство", Документы.ЗаказНаПроизводство.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСпособРаспределения", Справочники.СпособыРаспределенияЗатратНаВыпуск.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
	МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств);
	МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("МассивСчетовУчета", МассивСчетовУчета);

КонецПроцедуры // УстановитьПараметрыЗапросаПоПрямымПроизводственнымЗатратам()

// Функция формирует запрос по производственным затратам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//   Запрос – Запрос по производственным затратам.
//
Функция СформироватьЗапросПоПрямымПроизводственнымЗатратам(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоПрямымПроизводственнымЗатратам();
	

	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЗначений = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выгрузить();
	ТаблицаЗначений.Свернуть("СтатьяЗатрат", "");
	МассивСтатьиЗатрат = ТаблицаЗначений.ВыгрузитьКолонку("СтатьяЗатрат");
	
	УстановитьПараметрыЗапросаПоПрямымПроизводственнымЗатратам(
		СтруктураШапкиДокумента,
		МассивСтатьиЗатрат,
		Запрос
		);
		
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоПрямымПроизводственнымЗатратам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ПРЯМЫХ ПРОИЗВОДСТВЕННЫХ ЗАТРАТ 

// Процедура производит распределение прямых затрат по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//	НаборЗаписейЗатратыНаВыпускПродукцииНаработка - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск (наработка)"
//
Процедура РаспределитьПрямыеПроизводственныеЗатратыПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	НаборЗаписейЗатратыНаВыпуск,
	НаборЗаписейЗатратыНаВыпускНаработка
	)
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();

	МассивКоэф = Новый Массив;
	
	ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Ложь, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;		
		КонецЕсли; 
		
		// Отберем строки базы распределения.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			0, // НомерПередела
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			Ложь, // ЕНВД
			Ложь, // ОпределятьПоЕНВД
			Истина, // ОпределятьПоСчетуУчету
			Ложь, // ОтборПоПродукции
			ПостроительЗапроса
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапроса.Выполнить();
		КонецЕсли;	
		РезультатЗапросаБаза = ПостроительЗапроса.Результат;
										
		ВсегоБазаРаспределения = 0;
		ВсегоБазаРаспределенияНЗП = 0;
		
		МассивКоэф.Очистить();
		
		ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
		Пока ВыборкаБаза.Следующий() Цикл
			
			МассивКоэф.Добавить(ВыборкаБаза.База);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
			ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
			
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			// is ЯннуровВФ нач 20140715 
			Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете
			 И ВыборкаПоЗатратам.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
			 И (ВыборкаПоЗатратам.Подразделение.ВидПодразделения = Перечисления.ВидыПодразделений.ВспомогательноеПроизводство
			    Или ВыборкаПоЗатратам.Подразделение.ВидПодразделения = Перечисления.ВидыПодразделений.Прочее) Тогда 
				//
			Иначе
			// is ЯннуровВФ кон 20140715 
				ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
					|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
					|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
					|Заказ: " + ВыборкаПоЗатратам.Заказ + "
					|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа, СтатусСообщения.Важное);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток = ВыборкаПоЗатратам.КоличествоОстаток;
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазницаОстаток = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВременнаяРазницаОстаток = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
			СуммаОстаток = СуммаОстаток + ПостояннаяРазницаОстаток
				+ ВременнаяРазницаОстаток;
		Иначе
			ПостояннаяРазницаОстаток = 0;
			ВременнаяРазницаОстаток = 0;
		КонецЕсли;
		
		// Пропускаем строки с пустой суммой.
		Если КоличествоОстаток = 0
		   И ВыборкаПоЗатратам.СуммаОстаток = 0
		   И ПостояннаяРазницаОстаток = 0
		   И ВременнаяРазницаОстаток = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если (ВсегоБазаРаспределения + ВсегоБазаРаспределенияНЗП) <> 0 Тогда
			КоэффициентРаспределения = ВсегоБазаРаспределения / (ВсегоБазаРаспределения + ВсегоБазаРаспределенияНЗП);
		Иначе
			КоэффициентРаспределения = 1;
		КонецЕсли;
		КоэффициентРаспределения = ?(КоэффициентРаспределения < 0, - КоэффициентРаспределения, КоэффициентРаспределения);
		
		Если ВыборкаПоЗатратам.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
			Если ВыборкаПоЗатратам.КоличествоИнвентаризация <> 0 И КоличествоОстаток <> 0 Тогда
				СуммаИнвентаризация = Окр(ВыборкаПоЗатратам.КоличествоИнвентаризация * СуммаОстаток / КоличествоОстаток, 2, 1);
				КоличествоОстаток = КоличествоОстаток - ВыборкаПоЗатратам.КоличествоИнвентаризация;
				СуммаОстаток = СуммаОстаток - СуммаИнвентаризация;
			КонецЕсли;
		Иначе
			СуммаОстаток = СуммаОстаток - ВыборкаПоЗатратам.СуммаИнвентаризация;
		КонецЕсли;
											
		КоличествоОстаток = Окр(КоличествоОстаток * КоэффициентРаспределения, 3, 1);
		СуммаОстаток = Окр(СуммаОстаток * КоэффициентРаспределения, 2, 1);
		
		// Материальные затраты распределяются по количеству, поэтому нулевые остатки пропускаем.
		Если ВыборкаПоЗатратам.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные
		   И КоличествоОстаток = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоОстаток, МассивКоэф, 3);
		МассивСумма      = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СуммаОстатокНУ = СуммаОстаток - ПостояннаяРазницаОстаток - ВременнаяРазницаОстаток;
			
			ПостояннаяРазницаОстаток = Окр(ПостояннаяРазницаОстаток * КоэффициентРаспределения, 2, 1);
			ВременнаяРазницаОстаток = Окр(ВременнаяРазницаОстаток * КоэффициентРаспределения, 2, 1);
			СуммаОстатокНУ = Окр(СуммаОстатокНУ * КоэффициентРаспределения, 2, 1);
			
			МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаОстаток, МассивКоэф, 2);
			МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаОстаток, МассивКоэф, 2);
			МассивСуммаНУ           = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстатокНУ, МассивКоэф, 2);
		КонецЕсли;
		
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.Следующий() Цикл
			
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			Сумма      = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
				ВременнаяРазница = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
				СуммаНУ = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
				
				// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
				Если СуммаНУ + ПостояннаяРазница + ВременнаяРазница <> Сумма Тогда
					Если ВременнаяРазница <> 0 Тогда
						ВременнаяРазница = Сумма - (СуммаНУ + ПостояннаяРазница);
					ИначеЕсли ПостояннаяРазница <> 0 Тогда
						ПостояннаяРазница = Сумма - СуммаНУ;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПостояннаяРазница = 0;
				ВременнаяРазница = 0;
			КонецЕсли;
			
			Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка 
			   И Не СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
			   
				// Формирование движений по регистру "Затраты на выпуск (наработка)".
				СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					Количество,
					Сумма,
					НаборЗаписейЗатратыНаВыпускНаработка
				);
			Иначе
				
				Сумма = Сумма - ПостояннаяРазница - ВременнаяРазница;
			
				// Формирование движений по регистру "Затраты на выпуск".
				СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					Истина, // РаспределениеЗатратПоБазе,
					Ложь, // КосвенныеЗатраты,
					Ложь, //ЗатратыВстречногоВыпуска,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					НаборЗаписейЗатратыНаВыпуск
				);
			КонецЕсли;

			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьПрямыеПроизводственныеЗатратыПоБазеРаспределения()

// Процедура производит распределение прямых производственных расходов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//
Процедура РаспределениеПрямыхПроизводственныхРасходов(
	СтруктураШапкиДокумента
	) Экспорт
	
	//Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
	//	Возврат;
	//КонецЕсли;
	
	ОбщегоНазначения.Сообщение("Распределение производственных расходов");
	
	СтруктураИмен = Новый Структура("
		|ЗатратыНаВыпускПродукции, 
		|ЗатратыНаВыпускПродукцииНаработка 
		|");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	
	МассивХарактеровРаспределения = Новый Массив;
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	
	// Сформируем запрос по способам распределения статей затрат.	
	ЗапросПоСпособамРаспределенияЗатрат = СформироватьЗапросПоСпособамРаспределенияЗатрат(
		СтруктураШапкиДокумента, 
		МассивХарактеровРаспределения,
		Ложь, // ФормироватьВременнуюТаблицу
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	РезультатЗапросаПоСпособамРаспределенияЗатрат = ЗапросПоСпособамРаспределенияЗатрат.Выполнить();
	
	// Сформируем запрос по базе распределения затрат.
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию();
	
		
	ЗапросБазаРаспределения = СформироватьЗапросПоБазеРаспределенияЗатрат(СтруктураШапкиДокумента, ТекстЗапросаСКомментариями, Ложь);
	РезультатЗапросаБазаРаспределения = ЗапросБазаРаспределения.Выполнить();
	
	// Сформируем запрос по производственным расходам.
	ЗапросПоЗатратам = СформироватьЗапросПоПрямымПроизводственнымЗатратам(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоСпособамРаспределенияЗатрат
		);

	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда
		
		РаспределитьПрямыеПроизводственныеЗатратыПоБазеРаспределения(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВМеждународномУчете
	   И СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеПрямыхПроизводственныхРасходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ РАСХОДОВ НА ВЫПУСК ПРОДУКЦИИ

// Процедура рассчитывает остаток затрат с учетом коэффициента распределения на остатки НЗП.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	ВсегоБазаРаспределения - Число - Общая сумма базы распределения
//	ВсегоБазаРаспределенияНЗП - Число - Общая сумма базы распределения на НЗП
//	СуммаОстаток - Число - Сумма остатка затрат для распределения
//	ПостояннаяРазницаОстаток - Число - Сумма остатка затрат для распределения в части постоянной разницы
//	ВременнаяРазницаОстаток - Число - Сумма остатка затрат для распределения в части временной разницы
//	СуммаНаВыпуск - Число - Сумма затрат, распределяемых на выпуск продукции
//	ПостояннаяРазницаНаВыпуск - Число - Сумма затрат, распределяемых на выпуск продукции в части постоянной разницы
//	ВременнаяРазницаНаВыпуск - Число - Сумма затрат, распределяемых на выпуск продукции в части временной разницы
//
Процедура РассчитатьОстатокСуммыЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВсегоБазаРаспределения,
	ВсегоБазаРаспределенияНЗП,
	СуммаОстаток,
	ПостояннаяРазницаОстаток,
	ВременнаяРазницаОстаток,
	СуммаНаВыпуск,
	ПостояннаяРазницаНаВыпуск,
	ВременнаяРазницаНаВыпуск
	)
	
	Если (ВсегоБазаРаспределенияНЗП + ВсегоБазаРаспределения) <> 0 Тогда
		Коэффициент = ВсегоБазаРаспределения / (ВсегоБазаРаспределения + ВсегоБазаРаспределенияНЗП);
		Коэффициент = ?(Коэффициент < 0, - Коэффициент, Коэффициент);
	Иначе
		Коэффициент = 1;
	КонецЕсли;

	СуммаНаВыпуск = Окр(СуммаОстаток * Коэффициент, 2, 1);

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПостояннаяРазницаНаВыпуск = Окр(ПостояннаяРазницаОстаток * Коэффициент, 2, 1);
		ВременнаяРазницаНаВыпуск = Окр(ВременнаяРазницаОстаток * Коэффициент, 2, 1);
	Иначе
		ПостояннаяРазницаНаВыпуск = 0;
		ВременнаяРазницаНаВыпуск = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьОстатокСуммыЗатрат()

// Функция получает структуру поиска строк результата запроса по базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СтрокаВыборкиЗатраты - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Заданный способ определения
//	РаспределятьПустуюАналитику - Булево - Признак распределения пустой номенклатурной группы и пустого заказа 
//											по всем номенклатурным группам и всем заказам
//
// Возвращаемое значение:
//	Структура - Структура поиска
//
Функция ПолучитьСтруктуруПоискаСтрокБазыРаспределения(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиЗатраты,
	ХарактерЗатрат,
	СпособРаспределения,
	РаспределятьПустуюАналитику
	)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СпособРаспределения", СпособРаспределения);
	СтруктураПоиска.Вставить("ПодразделениеНЗП", СтрокаВыборки.Подразделение);
	
	Если Не РаспределятьПустуюАналитику Тогда
		СтруктураПоиска.Вставить("НоменклатурнаяГруппаНЗП", СтрокаВыборки.НоменклатурнаяГруппа);
		СтруктураПоиска.Вставить("ЗаказНЗП", СтрокаВыборки.Заказ);
	Иначе
		Если Не СтрокаВыборки.НоменклатурнаяГруппа.Пустая() Тогда
			СтруктураПоиска.Вставить("НоменклатурнаяГруппаНЗП", СтрокаВыборки.НоменклатурнаяГруппа);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаВыборки.Заказ) Тогда
			СтруктураПоиска.Вставить("ЗаказНЗП", СтрокаВыборки.Заказ);
		КонецЕсли;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПоиска.Вставить("СчетУчета", СтрокаВыборки.СчетУчета);
	КонецЕсли;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		
		Если СтрокаВыборки.Владелец().Колонки.Найти("Продукция") = Неопределено Тогда
		
			Если Не СтрокаВыборкиЗатраты.Продукция.Пустая() Тогда
				СтруктураПоиска.Вставить("Продукция", СтрокаВыборкиЗатраты.Продукция);
			КонецЕсли;
			Если Не СтрокаВыборкиЗатраты.ХарактеристикаПродукции.Пустая() Тогда
				СтруктураПоиска.Вставить("ХарактеристикаПродукции", СтрокаВыборкиЗатраты.ХарактеристикаПродукции);
			КонецЕсли;
			Если Не СтрокаВыборкиЗатраты.СерияПродукции.Пустая() Тогда
				СтруктураПоиска.Вставить("СерияПродукции", СтрокаВыборкиЗатраты.СерияПродукции);
			КонецЕсли;
			
		Иначе
			СтруктураПоиска.Вставить("Продукция", СтрокаВыборки.Продукция);
			СтруктураПоиска.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаПродукции);
			СтруктураПоиска.Вставить("СерияПродукции", СтрокаВыборки.СерияПродукции);
			СтруктураПоиска.Вставить("Спецификация", СтрокаВыборки.Спецификация);
			СтруктураПоиска.Вставить("ВидВыпуска", СтрокаВыборки.ВидВыпуска);
		КонецЕсли;
			
	КонецЕсли;
		
	Возврат СтруктураПоиска;
	
КонецФункции // ПолучитьСтруктуруПоискаСтрокБазыРаспределения()

// Процедура распределяет затраты на выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВыборкаБаза - ВыборкаИзРезультатаЗапроса - Выборка по базе распределения на продукцию
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиЗатраты - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Текущий способ распределения
//	СтатусМатериальныхЗатрат - ПеречислениеСсылка.СтатусыМатериальныхЗатратНаПроизводство - Текущий статус материальных затрат
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//  СуммаОстаток - Число - Сумма затрат
//  ПостояннаяРазницаОстаток - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазницаОстаток - Число - Сумма затрат в части временной разницы
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыНаВыпускПродукции(
	СтруктураШапкиДокумента,
	ВыборкаБаза,
	СтрокаВыборки,
	СтрокаВыборкиЗатраты,
	ХарактерЗатрат,
	СпособРаспределения,
	СтатусМатериальныхЗатрат,
	НомерПередела,
	СуммаОстаток,
	ПостояннаяРазницаОстаток,
	ВременнаяРазницаОстаток,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	//начало изменений р/с
	ПРГ_ИнформацияОПоиске
	//конец изменений 
	)
	
	Если СуммаОстаток = 0
	   И ПостояннаяРазницаОстаток = 0
	   И ВременнаяРазницаОстаток = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	//начало изменений опти р/с
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете или 
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
				 РаспределитьЗатратыНаВыпускПродукцииНАше(
					СтруктураШапкиДокумента,
					ВыборкаБаза,
					СтрокаВыборки,
					СтрокаВыборкиЗатраты,
					ХарактерЗатрат,
					СпособРаспределения,
					СтатусМатериальныхЗатрат,
					НомерПередела,
					СуммаОстаток,
					ПостояннаяРазницаОстаток,
					ВременнаяРазницаОстаток,
					НаборЗаписейНезавершенноеПроизводство,
					НаборЗаписейЗатратыНаВыпуск,
					РегистрБухгалтерииНаборЗаписей,
					ПРГ_ИнформацияОПоиске
					);
		возврат;			
	КонецЕсли;	
	//конец изменений 
	
	СтруктураПоиска = ПолучитьСтруктуруПоискаСтрокБазыРаспределения(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		СтрокаВыборкиЗатраты,
		ХарактерЗатрат,
		СпособРаспределения,
		Ложь // РаспределятьПустуюАналитику
	);
	
	МассивКоэф = Новый Массив;
	
	ВсегоБазаРаспределения = 0;
	ВсегоБазаРаспределенияНЗП = 0;
	
	ВыборкаБаза.Сбросить();
	Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
			
		Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
			МассивКоэф.Добавить(0);
			ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.База + ВыборкаБаза.БазаОстатокНЗП;
		Иначе
			МассивКоэф.Добавить(ВыборкаБаза.База);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
			ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
		КонецЕсли;
													
	КонецЦикла;
	
	// Если не удалось определить базу распределения,
	// попробуем распределить пустые номенклатурные группы и пустые заказы
	// по всем номенклатурным группам и всем заказам.
	Если ВсегоБазаРаспределения = 0 Тогда
		
		СтруктураПоиска = ПолучитьСтруктуруПоискаСтрокБазыРаспределения(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборкиЗатраты,
			ХарактерЗатрат,
			СпособРаспределения,
			Истина // РаспределятьПустуюАналитику
		);
		
		МассивКоэф = Новый Массив;
		
		ВсегоБазаРаспределения = 0;
		ВсегоБазаРаспределенияНЗП = 0;
		
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
				
			Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
				МассивКоэф.Добавить(0);
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.База + ВыборкаБаза.БазаОстатокНЗП;
			Иначе
				МассивКоэф.Добавить(ВыборкаБаза.База);
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
			КонецЕсли;
														
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВсегоБазаРаспределения <> 0 Тогда
		
		// Определим остаток затрат для распределения.
		СуммаНаВыпуск = 0;
		ПостояннаяРазницаНаВыпуск = 0;
		ВременнаяРазницаНаВыпуск = 0;
				
		РассчитатьОстатокСуммыЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ВсегоБазаРаспределения,
			ВсегоБазаРаспределенияНЗП,
			СуммаОстаток,
			ПостояннаяРазницаОстаток,
			ВременнаяРазницаОстаток,
			СуммаНаВыпуск,
			ПостояннаяРазницаНаВыпуск,
			ВременнаяРазницаНаВыпуск
			);
	
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаНаВыпуск, МассивКоэф, 2);
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
			МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаНаВыпуск, МассивКоэф, 2);
			МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаНаВыпуск, МассивКоэф, 2);
			
			ОбщаяСуммаНаВыпуск = СуммаНаВыпуск + ПостояннаяРазницаНаВыпуск + ВременнаяРазницаНаВыпуск;
			МассивОбщаяСумма   = ОбщегоНазначения.РаспределитьПропорционально(ОбщаяСуммаНаВыпуск, МассивКоэф, 2);
				
		КонецЕсли;
		
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
					
			Сумма = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
				ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
				ОбщаяСумма        = ?(МассивОбщаяСумма = Неопределено, 0, МассивОбщаяСумма[Индекс]);
				
				// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
				Если Сумма + ПостояннаяРазница + ВременнаяРазница <> ОбщаяСумма Тогда
					Если ВременнаяРазница <> 0 Тогда
						ВременнаяРазница = ОбщаяСумма - (Сумма + ПостояннаяРазница);
					ИначеЕсли ПостояннаяРазница <> 0 Тогда
						ПостояннаяРазница = ОбщаяСумма - Сумма;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПостояннаяРазница = 0;
				ВременнаяРазница  = 0;
			КонецЕсли;
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаБаза,
				СтрокаВыборкиЗатраты.СтатьяЗатрат,
				ХарактерЗатрат,
				СтатусМатериальныхЗатрат,
				Сумма,
				ПостояннаяРазница,
				ВременнаяРазница,
				НаборЗаписейЗатратыНаВыпуск
				);
				
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
			   И СтрокаВыборки.НоменклатурнаяГруппа <> ВыборкаБаза.НоменклатурнаяГруппа Тогда
				
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					СтрокаВыборки,
					ВыборкаБаза,
					СтрокаВыборкиЗатраты.СтатьяЗатрат,
					ХарактерЗатрат,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					РегистрБухгалтерииНаборЗаписей
					);
				
			КонецЕсли;
				
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		// Формирование расходных движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборкиЗатраты.СтатьяЗатрат,
			ХарактерЗатрат,
			ХарактерЗатрат, // Затрата 
			Неопределено, // ХарактеристикаЗатраты
			Неопределено, // СерияЗатраты
			НомерПередела,
			0, // Количество
			СуммаНаВыпуск,
			ПостояннаяРазницаНаВыпуск,
			ВременнаяРазницаНаВыпуск,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство
			);
			
	КонецЕсли;

КонецПроцедуры // РаспределитьЗатратыНаВыпускПродукции()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО ПРОИЗВОДСТВЕННЫМ ЗАТРАТАМ

// Функция формирует текст запроса по производственным затратам.
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоПроизводственнымЗатратам()
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|	
	|	//ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток,
	|	//ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток,
	|
	|	НезавершенноеПроизводство.СтоимостьОстаток КАК СуммаОстаток,
	|	НезавершенноеПроизводство.КоличествоОстаток КАК КоличествоОстаток
	|	
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|		Не Затрата ССЫЛКА Перечисление.ХарактерЗатрат
	|		И Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|		//ДляРеглУчета И Организация = &Организация
	|		//ДляНалУчета И СчетУчета В (&МассивСчетовУчета)
	|		) КАК НезавершенноеПроизводство
	|	
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		НезавершенноеПроизводство.СчетУчета = СчетаУчетаЕНВД.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПроизводственнымЗатратам()

// Процедура устанавливает параметры запроса по производственным затратам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	МассивСтатьиЗатрат - Массив - Массив статей затрат
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросаПоПроизводственнымЗатратам(
	СтруктураШапкиДокумента,
	МассивСтатьиЗатрат,
	СпособРасчета,
	Запрос
	)
	
	Запрос.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Запрос.УстановитьПараметр("МассивСтатьиЗатрат", МассивСтатьиЗатрат);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	МассивСчетовУчета = Новый Массив;
	МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
	МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств);
	МассивСчетовУчета.Добавить(ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("МассивСчетовУчета", МассивСчетовУчета);

КонецПроцедуры // УстановитьПараметрыЗапросаПоПроизводственнымЗатратам()

// Функция формирует запрос по производственным затратам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультЗапроса - Результат запроса по способам распределения
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//   Запрос – Запрос по производственным затратам.
//
Функция СформироватьЗапросПоПроизводственнымЗатратам(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоПроизводственнымЗатратам();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЗначений = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выгрузить();
	ТаблицаЗначений.Свернуть("СтатьяЗатрат", "");
	МассивСтатьиЗатрат = ТаблицаЗначений.ВыгрузитьКолонку("СтатьяЗатрат");
	
	УстановитьПараметрыЗапросаПоПроизводственнымЗатратам(
		СтруктураШапкиДокумента,
		МассивСтатьиЗатрат,
		СпособРасчета,
		Запрос
		);
		
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоПроизводственнымЗатратам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ПРОИЗВОДСТВЕННЫХ ЗАТРАТ

// Процедура производит распределение затрат по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Общее количество переделов
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьПроизводственныеЗатратыПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	НомерПередела,
	ВсегоПеределов,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Перем ПРГ_ИнформацияОПоиске;
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ПостроительЗапросаНаПродукцию = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределенияНаПродукцию
		);
		
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();

	МассивКоэф = Новый Массив;
	МассивКоэфНУ = Новый Массив;
	
	ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		КоличествоОстаток = ВыборкаПоЗатратам.КоличествоОстаток;
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазницаОстаток = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВременнаяРазницаОстаток = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
		Иначе
			ПостояннаяРазницаОстаток = 0;
			ВременнаяРазницаОстаток = 0;
		КонецЕсли;
		
		// Пропускаем строки с пустым количеством и пустой суммой.
		Если КоличествоОстаток = 0
		   И СуммаОстаток = 0
		   И ПостояннаяРазницаОстаток = 0
		   И ВременнаяРазницаОстаток = 0
		Тогда
			Продолжить;
		КонецЕсли; 
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Ложь, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;		
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ЕНВД = ВыборкаПоЗатратам.ЕНВД;
		Иначе
			ЕНВД = Ложь;
		КонецЕсли;
		
		// Отберем строки базы распределения.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			НомерПередела,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			ЕНВД,
			Истина, // ОпределятьПоЕНВД
			Ложь, // ОпределятьПоСчетуУчету
			Ложь, // ОтборПоПродукции
			ПостроительЗапроса
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапроса.Выполнить();
		КонецЕсли;	
		РезультатЗапросаБаза = ПостроительЗапроса.Результат;
		
		// Отберем строки базы распределения на продукцию.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			НомерПередела,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			ЕНВД,
			Истина, // ОпределятьПоЕНВД
			Ложь, // ОпределятьПоСчетуУчету
			Ложь, // ОтборПоПродукции
			ПостроительЗапросаНаПродукцию
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапросаНаПродукцию.Выполнить();
		КонецЕсли;	
		РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
		ВыборкаБазаНаПродукцию = РезультатЗапросаБазаНаПродукцию.Выбрать();
										
		ВсегоБазаРаспределения = 0;
		ВсегоБазаРаспределенияНУ = 0;
		
		МассивКоэф.Очистить();
		МассивКоэфНУ.Очистить();
		
		ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
		Пока ВыборкаБаза.Следующий() Цикл
			
			МассивКоэф.Добавить(ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + (ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				МассивКоэфНУ.Добавить(ВыборкаБаза.БазаПриходНУ * ВыборкаБаза.БазаНаПодчиненныеНУ);
				ВсегоБазаРаспределенияНУ = ВсегоБазаРаспределенияНУ + (ВыборкаБаза.БазаПриходНУ * ВыборкаБаза.БазаНаПодчиненныеНУ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 И ВсегоБазаРаспределенияНУ = 0 Тогда
			Если НомерПередела = ВсегоПеределов Тогда
				ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
					|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
					|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
					|Заказ: " + ВыборкаПоЗатратам.Заказ + "
					|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа, СтатусСообщения.Важное);
				
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоОстаток, МассивКоэф, 3);
		МассивСумма      = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаОстаток, МассивКоэф, 2);
			МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаОстаток, МассивКоэф, 2);
			МассивСуммаНУ           = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэфНУ, 2);
			
		КонецЕсли;
		
		// Формирование расходных движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоЗатратам.СтатьяЗатрат,
			ХарактерЗатрат,
			ВыборкаПоЗатратам.Затрата,
			ВыборкаПоЗатратам.ХарактеристикаЗатраты,
			ВыборкаПоЗатратам.СерияЗатраты,
			НомерПередела,
			КоличествоОстаток,
			СуммаОстаток,
			ПостояннаяРазницаОстаток,
			ВременнаяРазницаОстаток,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство
			);
		
		Индекс = 0;
		
		ВыборкаБаза.Сбросить();
		//начало изменений оптим р/с
		ПРГ_ИнформацияОПоиске = Неопределено;
		//конец изменений
		Пока ВыборкаБаза.Следующий() Цикл
			
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СуммаНУ           = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
				СуммаБУ           = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
				ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
				ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
				
				ВременнаяРазница  = ВременнаяРазница + СуммаБУ - СуммаНУ;
				Сумма             = СуммаНУ;
			Иначе
				Сумма             = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
				ПостояннаяРазница = 0;
				ВременнаяРазница  = 0;
			КонецЕсли;
			
			Если Количество <> 0
			 ИЛИ Сумма <> 0
			 ИЛИ ПостояннаяРазница <> 0 
			 ИЛИ ВременнаяРазница <> 0 Тогда
			
				// Формирование приходных движений по регистру "Незавершенное производство".
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					ХарактерЗатрат,
					ХарактерЗатрат, // Затрата 
					Неопределено, // ХарактеристикаЗатраты
					Неопределено, // СерияЗатраты
					НомерПередела,
					0, // Количество
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Приход,
					НаборЗаписейНезавершенноеПроизводство
					);
			 
			 	// Формирование движений по регистру бухгалтерии.	
				Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					
					СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
						СтруктураШапкиДокумента,
						СтруктураШапкиДокумента.ВидОтраженияВУчете,
						ВыборкаПоЗатратам,
						ВыборкаБаза,
						ВыборкаПоЗатратам.СтатьяЗатрат,
						ХарактерЗатрат,
						Сумма,
						ПостояннаяРазница,
						ВременнаяРазница,
						РегистрБухгалтерииНаборЗаписей
						);
					
				КонецЕсли;
					
				// Распределение затрат на выпуск продукции по базе.
				РаспределитьЗатратыНаВыпускПродукции(
					СтруктураШапкиДокумента,
					ВыборкаБазаНаПродукцию,
					ВыборкаБаза,
					ВыборкаПоЗатратам,
					ХарактерЗатрат,
					СпособРаспределения,
					ВыборкаПоЗатратам.СтатусМатериальныхЗатрат,
					НомерПередела,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					НаборЗаписейНезавершенноеПроизводство,
					НаборЗаписейЗатратыНаВыпуск,
					РегистрБухгалтерииНаборЗаписей,
					ПРГ_ИнформацияОПоиске
					);
			КонецЕсли;
				
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьПроизводственныеЗатратыПоБазеРаспределения()

// Процедура производит распределение производственных расходов.
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Общее количество переделов
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределениеПроизводственныхРасходов(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	СпособРасчета,
	НомерПередела,
	ВсегоПеределов,
	СтруктураДвижений
	)
	
	// Сформируем запрос по производственным расходам.
	ЗапросПоЗатратам = СформироватьЗапросПоПроизводственнымЗатратам(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоСпособамРаспределенияЗатрат,
		СпособРасчета
		);

	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда	
		
		РаспределитьПроизводственныеЗатратыПоБазеРаспределения(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			НомерПередела,
			ВсегоПеределов,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеПроизводственныхРасходов()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "ЗАТРАТЫ"

// Функция формирует текст запроса по регистру "Затраты".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоЗатратам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета Затраты.Организация,
	|	Затраты.Подразделение,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	Затраты.СтатьяЗатрат.ВидРасходовНУ КАК ВидРасходовНУ,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	//ДляУпрУчета Затраты.Проект,
	|	//ДляРеглУчета Затраты.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ПодлежитРаспределению, Ложь) КАК ПодлежитРаспределению,
	|
	|	//ДляНалУчета Ложь КАК ЕНВД,
	|	//ДляНалУчета ВЫБОР КОГДА Затраты.СчетУчета В (&МассивРаспределяемыхСчетов) ТОГДА
	|	//ДляНалУчета 	Истина
	|	//ДляНалУчета ИНАЧЕ
	|	//ДляНалУчета 	Ложь
	|	//ДляНалУчета КОНЕЦ КАК ПодлежитРаспределению,
	|	
	|	//ДляНалУчета Затраты.ПостояннаяРазницаОстаток,
	|	//ДляНалУчета Затраты.ВременнаяРазницаОстаток,
	|
	|	Затраты.СуммаОстаток
	|
	|ИЗ
	|	РегистрНакопления.Затраты%СуффиксУчета%.Остатки(&КонГраница,
	|		//ДляУпрУчета СтатьяЗатрат.ХарактерЗатрат В (&МассивХарактеровЗатрат)
	|		//ДляРеглУчета Организация = &Организация 
	|		//ДляРеглУчета И СчетУчета В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|
	|		//ДляНалУчета И СчетУчета Не В (&МассивСчетовКосвенныхРасходов)
	|		//ДляНалУчета И (СтатьяЗатрат.ВидРасходовНУ Не В (&НормируемыеВидыРасходов)
	|		//ДляНалУчета 	ИЛИ СчетУчета Не В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасходыНаПродажу))
	|		//ДляНалУчета	)
	|
//начало изменений Ожиганов А. 13.02.2017 62276 закрытие транспортных расходов только по ну 	
//	|		//РавноВидРасходовНУ И СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
//	|		//НеРавноВидРасходовНУ И СтатьяЗатрат.ВидРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|		//РавноВидТолькоПоНалРасходовНУ  И СтатьяЗатрат.ПРГ_РапределятьТранспортныеРасходыТолькоПоНУ
	|		//НЕРавноВидТолькоПоНалРасходовНУ  И Не СтатьяЗатрат.ПРГ_РапределятьТранспортныеРасходыТолькоПоНУ и СтатьяЗатрат.ВидРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы) 
	|		//РавноВидРасходовНУ И СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы) и Не СтатьяЗатрат.ПРГ_РапределятьТранспортныеРасходыТолькоПоНУ
	|		//НеРавноВидРасходовНУ И (СтатьяЗатрат.ВидРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы) или (СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы) и СтатьяЗатрат.ПРГ_РапределятьТранспортныеРасходыТолькоПоНУ))
//конец изменений 	
	|
	|		) КАК Затраты
	|	
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			СчетаУчетаЕНВД.ПодлежитРаспределению,
	|	//ДляБухУчета			(Не СчетаУчетаЕНВД.ПодлежитРаспределению) КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		Затраты.СчетУчета = СчетаУчетаЕНВД.Счет
	//начало изменений
	//|	Где Затраты.Подразделение = &Подразделение
	//конец изменений
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета Затраты.Организация,
	|	//ДляРеглУчета Затраты.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ПодлежитРаспределению, Ложь),
	|	Затраты.Подразделение,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	Затраты.СтатьяЗатрат
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоЗатратам()

// Функция формирует массив счетов затрат.
//
// Параметры
//	СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//
// Возвращаемое значение:
//	Массив – Массив счетов затрат.
//
Функция ПолучитьМассивСчетовЗатрат(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	) Экспорт
	
	МассивСчетовЗатрат = Новый Массив;
	
	Если ХарактерЗатрат.Пустая() Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
			Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
				МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы);
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбслуживающиеПроизводства);
			Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
				МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОбщепроизводственныеРасходы);
			
		КонецЕсли;
			
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда	
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ИздержкиОбращения);
			
		КонецЕсли;
			
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходы);
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда	
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.КоммерческиеРасходы);
			// is ЯннуровВФ нач 20140702 0И-001466
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда	
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.РасходыНаПродажу);
		// is ЯннуровВФ кон 20140702
		КонецЕсли;
			
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда	
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);
			// is ЯннуровВФ нач 20140702 0И-001466
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда	
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.АдминистративныеРасходы);
		// is ЯннуровВФ кон 20140702
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивСчетовЗатрат;
		
КонецФункции // ПолучитьМассивСчетовЗатрат()

// Функция формирует запрос по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для выборки остатков
//	ВидРасходовНУ - ПеречислениеСсылка.ВидыРасходовНУ - Вид расхода НУ для выборки остатков 
//	УсловиеВидРасходовНУ - ВидСравнения - Условие для вида расходов НУ
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Затраты".
//
Функция СформироватьЗапросПоЗатратам(
	СтруктураШапкиДокумента,
	ХарактерЗатрат,
	ВидРасходовНУ,
//начало изменений Ожиганов А. 13.02.2017 62276 закрытие транспортных расходов только по ну 
	УсловиеВидРасходовНУ,
	ТолькоТранспортныеПоНУ=Ложь
//конец изменений 
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоЗатратам();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Если ЗначениеЗаполнено(ВидРасходовНУ) Тогда
		//начало изменений Ожиганов А. 13.02.2017 62276 закрытие транспортных расходов только по ну
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Если ТолькоТранспортныеПоНУ Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//РавноВидТолькоПоНалРасходовНУ", "");
			ИначеЕсли УсловиеВидРасходовНУ = ВидСравнения.Равно Тогда
			//Если УсловиеВидРасходовНУ = ВидСравнения.Равно Тогда
			//конец изменений 				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//РавноВидРасходовНУ", "");
			ИначеЕсли УсловиеВидРасходовНУ = ВидСравнения.НеРавно Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//НЕРавноВидТолькоПоНалРасходовНУ", "");
			КонецЕсли;			
		ИначеЕсли УсловиеВидРасходовНУ = ВидСравнения.Равно Тогда
		//Если УсловиеВидРасходовНУ = ВидСравнения.Равно Тогда
		//конец изменений 				
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//РавноВидРасходовНУ", "");
		ИначеЕсли УсловиеВидРасходовНУ = ВидСравнения.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//НеРавноВидРасходовНУ", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	//начало изменений
	//Запрос.УстановитьПараметр("Подразделение", Справочники.ПодразделенияОрганизаций.НайтиПоКоду("ЗДП_0302    "));
	//конец изменений
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		МассивХарактеровЗатрат = Новый Массив;
		Если ХарактерЗатрат.Пустая() Тогда
			МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
			Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
				МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);
			КонецЕсли;
		Иначе
			МассивХарактеровЗатрат.Добавить(ХарактерЗатрат);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивХарактеровЗатрат", МассивХарактеровЗатрат);
		
	Иначе
		
		МассивСчетовЗатрат = ПолучитьМассивСчетовЗатрат(
			СтруктураШапкиДокумента,
			ХарактерЗатрат
		);
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		МассивРаспределяемыхСчетов = Новый Массив;
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые);
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.КоммерческиеРасходыРаспределяемые);
		Запрос.УстановитьПараметр("МассивРаспределяемыхСчетов", МассивРаспределяемыхСчетов);
		
		НормируемыеВидыРасходов = Новый Массив;
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
		Запрос.УстановитьПараметр("НормируемыеВидыРасходов", НормируемыеВидыРасходов);
		
		МассивСчетовКосвенныхРасходов = Новый Массив;
		МассивСчетовКосвенныхРасходов.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
		МассивСчетовКосвенныхРасходов.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
		МассивСчетовКосвенныхРасходов.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);
		Запрос.УстановитьПараметр("МассивСчетовКосвенныхРасходов", МассивСчетовКосвенныхРасходов);
		
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоЗатратам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА СПИСАНИЯ ОБЩЕПРОИЗВОДСТВЕННЫХ И ОБЩЕХОЗЯЙСТВЕННЫХ РАСХОДОВ НА РАСХОДЫ БУДУЩИХ ПЕРИОДОВ

Функция СформироватьТекстЗапросаПоЗатратамРБП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|//ДляБухУчета ПодрИСчетаУчета.СчетУчетаБУ как СчетУчета,
	|//ДляНалУчета ПодрИСчетаУчета.СчетУчетаНУ как СчетУчета,
	|ПодрИСчетаУчета.Подразделение
	|ПОМЕСТИТЬ ТабПодр
	|ИЗ
	|РегистрСведений.ПРГ_Подразделения97Счета.СрезПоследних(&КонГраница, Подразделение.Владелец = &Организация
	|//ДляНалУчета и не Подразделение в иерархии (&МассПодр)
	|) КАК ПодрИСчетаУчета	
	|;
	|ВЫБРАТЬ
	|	//ДляРеглУчета Затраты.Организация,
	|	Затраты.Подразделение,
//начало изменений Ожиганов 25.01.2016 б/н перенос затрат в НУ по подразделениям 97 счета 
	| //ДляНалУчета Затраты.Подразделение.Родитель Как Уровень1,
//конец изменений 
	|	Затраты.СтатьяЗатрат,
	|	Затраты.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	Затраты.СтатьяЗатрат.ВидРасходовНУ КАК ВидРасходовНУ,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	//ДляУпрУчета Затраты.Проект,
	|	//ДляРеглУчета Затраты.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ПодлежитРаспределению, Ложь) КАК ПодлежитРаспределению,
	|
	|	//ДляНалУчета Ложь КАК ЕНВД,
	|	//ДляНалУчета ВЫБОР КОГДА Затраты.СчетУчета В (&МассивРаспределяемыхСчетов) ТОГДА
	|	//ДляНалУчета 	Истина
	|	//ДляНалУчета ИНАЧЕ
	|	//ДляНалУчета 	Ложь
	|	//ДляНалУчета КОНЕЦ КАК ПодлежитРаспределению,
	|	
	|	//ДляНалУчета Затраты.ПостояннаяРазницаОстаток,
	|	//ДляНалУчета Затраты.ВременнаяРазницаОстаток,
	|
	|	Затраты.СуммаОстаток
	|
	|ИЗ
	|	РегистрНакопления.Затраты%СуффиксУчета%.Остатки(&КонГраница,
	|		//ДляУпрУчета СтатьяЗатрат.ХарактерЗатрат В (&МассивХарактеровЗатрат)
	|		//ДляРеглУчета Организация = &Организация 
	|	    //ДляРеглУчета И (СчетУчета,Подразделение) в  (выбрать ТабПодр.СчетУчета, ТабПодр.Подразделение из ТабПодр)
	|		//ДляРеглУчета И СчетУчета В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|
	|		//ДляНалУчета И СчетУчета Не В (&МассивСчетовКосвенныхРасходов)
	|		//ДляНалУчета И (СтатьяЗатрат.ВидРасходовНУ Не В (&НормируемыеВидыРасходов)
	|		//ДляНалУчета 	ИЛИ СчетУчета Не В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасходыНаПродажу))
	|		//ДляНалУчета	)
	|
	|		//РавноВидРасходовНУ И СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|		//НеРавноВидРасходовНУ И СтатьяЗатрат.ВидРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|
	|		) КАК Затраты
	|	
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			СчетаУчетаЕНВД.ПодлежитРаспределению,
	|	//ДляБухУчета			(Не СчетаУчетаЕНВД.ПодлежитРаспределению) КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		Затраты.СчетУчета = СчетаУчетаЕНВД.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета Затраты.Организация,
	|	//ДляРеглУчета Затраты.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ПодлежитРаспределению, Ложь),
	|	Затраты.Подразделение,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	Затраты.СтатьяЗатрат
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоЗатратам()


//начало изменений БП 04
Функция СформироватьЗапросПоЗатратамРБП(
	СтруктураШапкиДокумента,
	ХарактерЗатрат,
	ВидРасходовНУ,
	УсловиеВидРасходовНУ
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоЗатратамРБП();
	
	//СформироватьТекстЗапросаПоЗатратам();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Если ЗначениеЗаполнено(ВидРасходовНУ) Тогда
		
		Если УсловиеВидРасходовНУ = ВидСравнения.Равно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//РавноВидРасходовНУ", "");
		ИначеЕсли УсловиеВидРасходовНУ = ВидСравнения.НеРавно Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//НеРавноВидРасходовНУ", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		МассивХарактеровЗатрат = Новый Массив;
		Если ХарактерЗатрат.Пустая() Тогда
			МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
			Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
				МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);
			КонецЕсли;
		Иначе
			МассивХарактеровЗатрат.Добавить(ХарактерЗатрат);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивХарактеровЗатрат", МассивХарактеровЗатрат);
		
	Иначе
		
		МассивСчетовЗатрат = ПолучитьМассивСчетовЗатрат(
			СтруктураШапкиДокумента,
			ХарактерЗатрат
		);
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
		КонецЕсли;	
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		МассивРаспределяемыхСчетов = Новый Массив;
		//начало изменений
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы);
		//конец изменений 
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые);
		МассивРаспределяемыхСчетов.Добавить(ПланыСчетов.Налоговый.КоммерческиеРасходыРаспределяемые);
		Запрос.УстановитьПараметр("МассивРаспределяемыхСчетов", МассивРаспределяемыхСчетов);
		
		НормируемыеВидыРасходов = Новый Массив;
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
		НормируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
		Запрос.УстановитьПараметр("НормируемыеВидыРасходов", НормируемыеВидыРасходов);
		
		МассивСчетовКосвенныхРасходов = Новый Массив;
		//начало изменений
		//МассивСчетовКосвенныхРасходов.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
		//конец изменений 
		МассивСчетовКосвенныхРасходов.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
		МассивСчетовКосвенныхРасходов.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);
		Запрос.УстановитьПараметр("МассивСчетовКосвенныхРасходов", МассивСчетовКосвенныхРасходов);
		
		//начало изменений
		Запрос.УстановитьПараметр("МассПодр",ПРГ_РасчетСебестоимости.ПРГ_ПолучитьПодразделенияВыпуска(СтруктураШапкиДокумента));
		//конец изменений 
		
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоЗатратам()


//конец изменений БП 04 
// Процедура списания ОХР и ОПР на расходы будущих периодов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//

Процедура СписаниеОбщепроизводственныхИОбщехозяйственныхРасходовНаРБП(
	СтруктураШапкиДокумента
	) Экспорт
	
	//начало изменений в части налогового относим тоже на рб 
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		И Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ИмяПланаСчетов = "Хозрасчетный";
	ИначеЕсли 	СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ИмяПланаСчетов = "Налоговый";
	КонецЕсли;	
	//конец изменений 
	
	ПРГ_РасчетСебестоимости.ОтнесениеПрямыхНаРБП(СтруктураШапкиДокумента,Неопределено);
	
	СтруктураИмен = Новый Структура("Затраты, Операция");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	
	МассивХарактеровРаспределения = Новый Массив;
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.УчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка());
	
	// Сформируем запрос по способам распределения статей затрат.	
	ЗапросПоСпособамРаспределенияЗатрат = СформироватьЗапросПоСпособамРаспределенияЗатрат(
		СтруктураШапкиДокумента,
		МассивХарактеровРаспределения,
		Ложь, // ФормироватьВременнуюТаблицу
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	РезультатЗапросаПоСпособамРаспределенияЗатрат = ЗапросПоСпособамРаспределенияЗатрат.Выполнить();
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();
	
	// Сформируем запрос по затратам.	
	//ЗапросПоЗатратам = СформироватьЗапросПоЗатратам(
	//	СтруктураШапкиДокумента,
	//	Перечисления.ХарактерЗатрат.ПустаяСсылка(),
	//	Неопределено, // ВидРасходовНУ,
	//	Неопределено // УсловиеВидРасходовНУ
	//	);
		
	ЗапросПоЗатратам = СформироватьЗапросПоЗатратамРБП(
		СтруктураШапкиДокумента,
		Перечисления.ХарактерЗатрат.ПустаяСсылка(),
		Неопределено, // ВидРасходовНУ,
		Неопределено // УсловиеВидРасходовНУ
		);
		
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	ТаблПодрВыпуска  = Неопределено;
	Если     СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
		или  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблПодрВыпуска = ПРГ_РасчетСебестоимости.ПолучитьТаблПодрСВыпуском(СтруктураШапкиДокумента,РезультатЗапросаПоЗатратам);
	КонецЕсли;	
	
	//начало изменений Ожиганов 25.01.2016 б/н перенос затрат в НУ по подразделениям 97 счета 
	ТаблВыпускаПервогоУровня = Неопределено;
	Если     СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если СтруктураШапкиДокумента.мКонДата > '20160101' Тогда
			ТаблВыпускаПервогоУровня = ПРГ_РасчетСебестоимости. ПолучитьТаблПодрПервогоУровняСВыпуском(СтруктураШапкиДокумента,РезультатЗапросаПоЗатратам);
		КонецЕслИ;	
	КонецЕслИ;	
	//конец изменений 
	
	Если Не РезультатЗапросаПоЗатратам.Пустой() Тогда
		
		ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
		Пока ВыборкаПоЗатратам.Следующий() Цикл
			
			Если     СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
				или  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Если ТаблПодрВыпуска.Найти(ВыборкаПоЗатратам.Подразделение,"Подразделение") <> Неопределено Тогда
					 продолжить;
				КонецЕсли;	
			КонецЕсли;	
			
			//начало изменений Ожиганов 25.01.2016 б/н перенос затрат в НУ по подразделениям 97 счета 
			Если ТаблВыпускаПервогоУровня <> Неопределено тогда
				Если ТаблВыпускаПервогоУровня.Найти(ВыборкаПоЗатратам.Уровень1,"Уровень1") <> Неопределено Тогда
					продолжить;
				КонецЕслИ;	
			КонецЕслИ;	
			//конец изменений 
			
			
			СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
			
			ПостояннаяРазница = 0;
			ВременнаяРазница  = 0;
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ПостояннаяРазница = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
				ВременнаяРазница  = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
			КонецЕсли;	
			
			// Пропускаем строки с пустой суммой.
			//начало изменений 
			Если СуммаОстаток = 0 и ПостояннаяРазница = 0 и ВременнаяРазница = 0 Тогда
				Продолжить;
			КонецЕсли;
			//конец изменений
			
			// Проверим необходимость распределять затраты.
			СпособРаспределения = Неопределено;
			ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
			РаспределятьНаПодчиненныеПодразделения = Ложь;
			
			//начало изменений уберем проверку
			 Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратам,
					ВыборкаПоСпособамРаспределенияЗатрат,
					Ложь, // ОпределятьПоХарактеруЗатрат
					Истина, // ПроверятьУказаниеСпособаРаспределения
					СпособРаспределения,
					ХарактерРаспределенияЗатрат,
					РаспределятьНаПодчиненныеПодразделения
					);
				
				Если Не РаспределятьЗатраты Тогда
					Продолжить;		
				КонецЕсли; 
			КонецЕсли; 
			//конец изменений 
			
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат,ИмяПланаСчетов);
			//
			//ОтнестиНаРасходыБудущихПериодовРегл(
			//	СтруктураШапкиДокумента,
			//	ВыборкаПоЗатратам,
			//	ХарактерЗатрат,
			//	СуммаОстаток,
			//	0,
			//	0,
			//	СтруктураДвижений.Операция
			//	);
			//	
			//// Формирование движений по регистру "Затраты".
			//СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
			//	СтруктураШапкиДокумента,
			//	ВыборкаПоЗатратам,
			//	ХарактерЗатрат,
			//	СуммаОстаток,
			//	0,
			//	0,
			//	ВидДвиженияНакопления.Расход,
			//	СтруктураДвижений.ДвиженияЗатраты
			//	);
			
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат,ИмяПланаСчетов);
			//
			ОтнестиНаРасходыБудущихПериодовРегл(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ХарактерЗатрат,
				СуммаОстаток,
				ПостояннаяРазница,
				ВременнаяРазница,
				СтруктураДвижений.Операция
				);
				
					
			// Формирование движений по регистру "Затраты".
			СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ХарактерЗатрат,
				СуммаОстаток,
				ПостояннаяРазница,
				ВременнаяРазница,
				ВидДвиженияНакопления.Расход,
				СтруктураДвижений.ДвиженияЗатраты
				);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СписаниеОбщепроизводственныхИОбщехозяйственныхРасходовНаРБП()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ОБЩЕПРОИЗВОДСТВЕННЫХ И ОБЩЕХОЗЯЙСТВЕННЫХ РАСХОДОВ

// Процедура выполняет распределение затрат по проектам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса распределения по проектам
//	СуммаОстаток - Число - Сумма затрат по управленческому учету
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)".
//
Процедура РаспределитьСписанныеЗатратыПоПроектам(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаРаспределениеПоПроектам,
	СуммаОстаток,
	НаборЗаписейЗатратыОбороты
	)
	
	Если СтруктураШапкиДокумента.Свойство("ВедениеУчетаЗатратПоПроектам") И СтруктураШапкиДокумента.ВедениеУчетаЗатратПоПроектам Тогда
		Проект = СтрокаВыборки.Проект;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	ВсегоБазаРаспределения = 0;
	Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
		
		СтруктураПоиска = Новый Структура("ВидРаспределения", Проект);
		
		МассивКоэф = Новый Массив;
		
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
			МассивКоэф.Добавить(ВыборкаРаспределениеПоПроектам.ДоляРаспределения);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаРаспределениеПоПроектам.ДоляРаспределения;
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			ОбщегоНазначения.Сообщение("Не удалось выполнить распределение затрат по виду распределения """ + Проект + """", СтатусСообщения.Внимание);
			Проект = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
		
	Если ВсегоБазаРаспределения <> 0 Тогда
			
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
			
		Индекс = 0;
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
				
			Сумма = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
				
			СформироватьДвиженияПоРегиструЗатратыОборотыРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаРаспределениеПоПроектам.Проект,
				Сумма,
				НаборЗаписейЗатратыОбороты
			);
				
			Индекс = Индекс + 1;
				
		КонецЦикла;
			
	Иначе
		
		СформироватьДвиженияПоРегиструЗатратыОборотыРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Проект,
			СуммаОстаток,
			НаборЗаписейЗатратыОбороты
		);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьСписанныеЗатратыПоПроектам()

// Процедура производит распределение затрат по рассчитанной базе в незавершенное производство.
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  ВыборкаПоЗатратам - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса распределения по проектам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Текущий способ распределения
//	ХарактерРаспределенияЗатрат - ПеречислениеСсылка.ХарактерРаспределенияЗатрат - Текущий характер распределения затрат
//	РаспределятьНаПодчиненныеПодразделения - Булево - Признак распределения на подчиненные подразделения
//	ЕНВД - Булево - Признак отнесения расходов на вид деятельности, облагаемый ЕНВД
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Всего передела
//  СуммаОстаток - Число - Сумма затрат
//  ПостояннаяРазницаОстаток - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазницаОстаток - Число - Сумма затрат в части временной разницы
//	ПостроительЗапроса - ПостроительЗапроса - Построитель запроса по базе распределения
//	ПостроительЗапросаНаПродукцию - ПостроительЗапроса - Построитель запроса по базе распределения на продукцию
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты"
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыВНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	ВыборкаПоЗатратам,
	ВыборкаРаспределениеПоПроектам,
	ХарактерЗатрат,
	СпособРаспределения,
	ХарактерРаспределенияЗатрат,
	РаспределятьНаПодчиненныеПодразделения,
	ЕНВД,
	НомерПередела,
	ВсегоПеределов,
	СуммаОстаток,
	ПостояннаяРазницаОстаток,
	ВременнаяРазницаОстаток,
	ПостроительЗапроса,
	ПостроительЗапросаНаПродукцию,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатраты,
	НаборЗаписейЗатратыОбороты,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	// is ЯннуровВФ нач 20140609
	НаборЗаписейЗатратыРБП = Неопределено
	// is ЯннуровВФ кон 20140609
	)
	Перем ПРГ_ИнформацияОПоиске;
	
	Если СуммаОстаток = 0
	   И ПостояннаяРазницаОстаток = 0
	   И ВременнаяРазницаОстаток = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отберем строки базы распределения.
	УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		ВыборкаПоЗатратам,
		НомерПередела,
		СпособРаспределения,
		ХарактерРаспределенияЗатрат,
		РаспределятьНаПодчиненныеПодразделения,
		ЕНВД,
		Истина, // ОпределятьПоЕНВД
		Ложь, // ОпределятьПоСчетуУчету
		Ложь, // ОтборПоПродукции
		ПостроительЗапроса
		);

	Если УстановленНовыйОтбор Тогда	
		ПостроительЗапроса.Выполнить();
	КонецЕсли;	
	РезультатЗапросаБаза = ПостроительЗапроса.Результат;
		
	// Отберем строки базы распределения на продукцию.
	УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		ВыборкаПоЗатратам,
		НомерПередела,
		СпособРаспределения,
		ХарактерРаспределенияЗатрат,
		РаспределятьНаПодчиненныеПодразделения,
		ЕНВД,
		Истина, // ОпределятьПоЕНВД
		Ложь, // ОпределятьПоСчетуУчету
		Ложь, // ОтборПоПродукции
		ПостроительЗапросаНаПродукцию
		);

	Если УстановленНовыйОтбор Тогда	
		ПостроительЗапросаНаПродукцию.Выполнить();
	КонецЕсли;	
	РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
	ВыборкаБазаНаПродукцию = РезультатЗапросаБазаНаПродукцию.Выбрать();
										
	ВсегоБазаРаспределения = 0;
		
	МассивКоэф = Новый Массив;
	МассивКоэфНУ = Новый Массив;
		
	ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
	Пока ВыборкаБаза.Следующий() Цикл
			
		МассивКоэф.Добавить(ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			МассивКоэфНУ.Добавить(ВыборкаБаза.БазаПриходНУ * ВыборкаБаза.БазаНаПодчиненныеНУ);
		КонецЕсли;
		ВсегоБазаРаспределения = ВсегоБазаРаспределения + (ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
			
	КонецЦикла;
		
	Если ВсегоБазаРаспределения = 0 Тогда
		Если НомерПередела = ВсегоПеределов Тогда
			ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
				|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
				|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
				|Заказ: " + ВыборкаПоЗатратам.Заказ + "
				|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа, СтатусСообщения.Важное);
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
		ОбщаяСумма = СуммаОстаток + ПостояннаяРазницаОстаток + ВременнаяРазницаОстаток;
		МассивОбщаяСумма = ОбщегоНазначения.РаспределитьПропорционально(ОбщаяСумма, МассивКоэф, 2);
		
		МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаОстаток, МассивКоэф, 2);
		МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаОстаток, МассивКоэф, 2);
		МассивСуммаНУ           = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэфНУ, 2);
		
	КонецЕсли;
		
	Индекс = 0;
	//начало изменений оптим р/с
	ПРГ_ИнформацияОПоиске = неопределено;
	//конец изменений
	ВыборкаБаза.Сбросить();
	Пока ВыборкаБаза.Следующий() Цикл
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СуммаНУ           = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
			СуммаБУ           = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
			ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
			ОбщаяСумма        = ?(МассивОбщаяСумма = Неопределено, 0, МассивОбщаяСумма[Индекс]);
			
			ВременнаяРазница = ВременнаяРазница + СуммаБУ - СуммаНУ;
			Сумма = СуммаНУ;
			
			// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
			Если Сумма + ПостояннаяРазница + ВременнаяРазница <> ОбщаяСумма Тогда
				Если ВременнаяРазница <> 0 Тогда
					ВременнаяРазница = ОбщаяСумма - (Сумма + ПостояннаяРазница);
				ИначеЕсли ПостояннаяРазница <> 0 Тогда
					ПостояннаяРазница = ОбщаяСумма - Сумма;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Сумма             = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			ПостояннаяРазница = 0;
			ВременнаяРазница  = 0;
		КонецЕсли;
			
		Если Сумма <> 0
		 ИЛИ ПостояннаяРазница <> 0 
		 ИЛИ ВременнаяРазница <> 0 Тогда
			
			// Формирование приходных движений по регистру "Незавершенное производство".
			СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаБаза,
				ВыборкаПоЗатратам.СтатьяЗатрат,
				ХарактерЗатрат,
				ХарактерЗатрат, // Затрата 
				Неопределено, // ХарактеристикаЗатраты
				Неопределено, // СерияЗатраты
				НомерПередела,
				0, // Количество
				Сумма,
				ПостояннаяРазница,
				ВременнаяРазница,
				ВидДвиженияНакопления.Приход,
				НаборЗаписейНезавершенноеПроизводство
				);
								
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					ХарактерЗатрат,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					РегистрБухгалтерииНаборЗаписей
					);
					
			КонецЕсли;
					
			// Распределение затрат на выпуск продукции по базе.
			РаспределитьЗатратыНаВыпускПродукции(
				СтруктураШапкиДокумента,
				ВыборкаБазаНаПродукцию,
				ВыборкаБаза,
				ВыборкаПоЗатратам,
				ХарактерЗатрат,
				СпособРаспределения,
				Неопределено, //СтатусМатериальныхЗатрат
				НомерПередела,
				Сумма,
				ПостояннаяРазница,
				ВременнаяРазница,
				НаборЗаписейНезавершенноеПроизводство,
				НаборЗаписейЗатратыНаВыпуск,
				РегистрБухгалтерииНаборЗаписей,
				ПРГ_ИнформацияОПоиске
				);
		КонецЕсли;
				
		Индекс = Индекс + 1;
			
	КонецЦикла;
	
	// Формирование движений по регистру "Затраты".
	// is ЯннуровВФ нач 20140609
	Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете
	// is ЯннуровВФ нач 20141113
	// И ВыборкаПоЗатратам.СчетУчета = ПланыСчетов.Международный._РасходыБудущихПериодов Тогда
	 И (ВыборкаПоЗатратам.СчетУчета = ПланыСчетов.Международный._РасходыБудущихПериодов Или ВыборкаПоЗатратам.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Международный._РасходыБудущихПериодов)) Тогда
	// is ЯннуровВФ кон 20141113
	 
	 	лДвижение = НаборЗаписейЗатратыРБП.Добавить();
		лДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
		лДвижение.Период = СтруктураШапкиДокумента.Период;
		лДвижение.Организация = ВыборкаПоЗатратам.Организация;
		лДвижение.Подразделение = ВыборкаПоЗатратам.Подразделение;
		лДвижение.СтатьяЗатрат = ВыборкаПоЗатратам.СтатьяЗатрат;
		лДвижение.НоменклатурнаяГруппа = ВыборкаПоЗатратам.НоменклатурнаяГруппа;
		лДвижение.Сумма = ВыборкаПоЗатратам.СуммаОстаток;
		
		//// Проводка
		//лРасходыБудущихПериодов = ис_Международный.ПолучитьЭлементРБП(ВыборкаПоЗатратам.Организация, ВыборкаПоЗатратам.Подразделение, ВыборкаПоЗатратам.НоменклатурнаяГруппа, ВыборкаПоЗатратам.СтатьяЗатрат);
		//лПроводка = СтруктураДвижений.Операция.Добавить();
		//лПроводка.Период = СтруктураШапкиДокумента.Период;
		//лПроводка.Организация = ВыборкаПоЗатратам.Организация;
		//лПроводка.СчетДт = ВыборкаПоЗатратам.СчетУчета;
		//БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетДт, лПроводка.СубконтоДт, "Подразделения", лВыборка.Подразделение);
		//БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетДт, лПроводка.СубконтоДт, "НоменклатурныеГруппы", лВыборка.НоменклатурнаяГруппа);
		//БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетДт, лПроводка.СубконтоДт, "СтатьиЗатрат", лВыборка.СтатьяЗатрат);
		//лПроводка.СчетКт = ПланыСчетов.Международный._РасходыБудущихПериодов;
		//БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетКт, лПроводка.СубконтоКт, "РасходыБудущихПериодов", лРасходыБудущихПериодов);
		//лПроводка.Сумма = лВыборка.СуммаОстаток;
		
	Иначе
	// is ЯннуровВФ кон 20140609
		СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ХарактерЗатрат,
			СуммаОстаток,
			ПостояннаяРазницаОстаток,
			ВременнаяРазницаОстаток,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейЗатраты
			);
	КонецЕсли;
		
	// Формирование движений по регистру "Затраты (обороты)".
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		РаспределитьСписанныеЗатратыПоПроектам(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаРаспределениеПоПроектам,
			СуммаОстаток,
			НаборЗаписейЗатратыОбороты
		);
		
	КонецЕсли;

КонецПроцедуры // РаспределитьЗатратыВНезавершенноеПроизводство()
 
// Процедура производит распределение затрат по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	МинимальныйПередел - Число - Минимальный номер передела
//	ВсегоПеределов - Число - Общее количество переделов
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты"
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	РезультатЗапросаРаспределениеПоПроектам,
	НомерПередела,
	МинимальныйПередел,
	ВсегоПеределов,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатраты,
	НаборЗаписейЗатратыОбороты,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	// is ЯннуровВФ нач 20140609
	НаборЗаписейЗатратыРБП = Неопределено
	// is ЯннуровВФ кон 20140609
	)
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ПостроительЗапросаНаПродукцию = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределенияНаПродукцию
		);
		
	// Выберем способы распределения затрат.
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();
	
	// Выберем коэффициенты распределения по проектам.
	ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
	
	// Получим коэффициент распределения на ЕНВД.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(
			СтруктураШапкиДокумента.Организация, 
			СтруктураШапкиДокумента.мКонДата, 
			СтруктураШапкиДокумента.мНачДата
		);
	Иначе
		КоэффициентЕНВД = 0;
	КонецЕсли;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазницаОстаток = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВременнаяРазницаОстаток = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
		Иначе
			ПостояннаяРазницаОстаток = 0;
			ВременнаяРазницаОстаток = 0;
		КонецЕсли;
		
		// Пропускаем строки с пустой суммой.
		Если СуммаОстаток = 0
		   И ПостояннаяРазницаОстаток = 0
		   И ВременнаяРазницаОстаток = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Истина, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;		
		КонецЕсли; 
		
		// Затраты с характером распределения "Не учитывать подразделение" распределяем только на первом переделе
		// по всем подразделениям.
		Если ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение
		   И НомерПередела <> МинимальныйПередел Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат);
				
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат, "Налоговый");
			
		// is ЯннуровВФ нач 20141015
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат, "Международный");
		// is ЯннуровВФ кон 20141015
		
		Иначе
			ХарактерЗатрат = ВыборкаПоЗатратам.ХарактерЗатрат;
				
		КонецЕсли;
		
		// Распределим затраты по видам деятельности.
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Если ВыборкаПоЗатратам.ПодлежитРаспределению Тогда
				СуммаОстатокЕНВД = Окр(СуммаОстаток * КоэффициентЕНВД, 2, 1);
				СуммаОстатокНеЕНВД = СуммаОстаток - СуммаОстатокЕНВД;
			ИначеЕсли ВыборкаПоЗатратам.ЕНВД Тогда
				СуммаОстатокЕНВД = СуммаОстаток;
				СуммаОстатокНеЕНВД = 0;
			Иначе
				СуммаОстатокЕНВД = 0;
				СуммаОстатокНеЕНВД = СуммаОстаток;
			КонецЕсли;
		Иначе
			СуммаОстатокНеЕНВД = СуммаОстаток;
		КонецЕсли;
		
		РаспределитьЗатратыВНезавершенноеПроизводство(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаРаспределениеПоПроектам,
			ХарактерЗатрат,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			Ложь, // ЕНВД
			НомерПередела,
			ВсегоПеределов,
			СуммаОстатокНеЕНВД,
			ПостояннаяРазницаОстаток,
			ВременнаяРазницаОстаток,
			ПостроительЗапроса,
			ПостроительЗапросаНаПродукцию,
			НаборЗаписейНезавершенноеПроизводство,
			НаборЗаписейЗатраты,
			НаборЗаписейЗатратыОбороты,
			НаборЗаписейЗатратыНаВыпуск,
			РегистрБухгалтерииНаборЗаписей,
			НаборЗаписейЗатратыРБП
		);
		
		// Распределим затраты, относящиеся к ЕНВД.
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		   И СуммаОстатокЕНВД <> 0 Тогда
			
			РаспределитьЗатратыВНезавершенноеПроизводство(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаРаспределениеПоПроектам,
			ХарактерЗатрат,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			Истина, // ЕНВД
			НомерПередела,
			ВсегоПеределов,
			СуммаОстатокЕНВД,
			0,
			0,
			ПостроительЗапроса,
			ПостроительЗапросаНаПродукцию,
			НаборЗаписейНезавершенноеПроизводство,
			НаборЗаписейЗатраты,
			НаборЗаписейЗатратыОбороты,
			НаборЗаписейЗатратыНаВыпуск,
			РегистрБухгалтерииНаборЗаписей
		);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьЗатратыПоБазеРаспределения()

// Процедура распределения ОХР и ОПР затрат.
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	МинимальныйПередел - Число - Минимальный номер передела
//	ВсегоПеределов - Число - Общее количество переделов
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределениеОбщепроизводственныхИОбщехозяйственныхРасходов(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	РезультатЗапросаРаспределениеПоПроектам,
	НомерПередела,
	МинимальныйПередел,
	ВсегоПеределов,
	СтруктураДвижений
	)
	
	// is ЯннуровВФ нач 20140609
	Если СтруктураШапкиДокумента.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда 
		ЗапросПоЗатратам = ИС_Международный.СформироватьЗапросПоЗатратам(
			СтруктураШапкиДокумента, 
			Перечисления.ХарактерЗатрат.ПустаяСсылка(),
			Неопределено,
			Неопределено
			);
	Иначе
	// is ЯннуровВФ кон 20140609
		ЗапросПоЗатратам = СформироватьЗапросПоЗатратам(
			СтруктураШапкиДокумента,
			Перечисления.ХарактерЗатрат.ПустаяСсылка(),
			Неопределено, // ВидРасходовНУ,
			Неопределено // УсловиеВидРасходовНУ
			);
	КонецЕсли;
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда	
		
		РаспределитьЗатратыПоБазеРаспределения(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			РезультатЗапросаРаспределениеПоПроектам,
			НомерПередела,
			МинимальныйПередел,
			ВсегоПеределов,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатраты,
			СтруктураДвижений.ДвиженияЗатратыОбороты,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция,
			?(СтруктураДвижений.Свойство("ДвиженияРасходыБудущихПериодов"), СтруктураДвижений.ДвиженияРасходыБудущихПериодов, Неопределено)
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.ДвиженияЗатратыОбороты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыОбороты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	// is ЯннуровВФ нач 20140609
	Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете 
	   И СтруктураДвижений.ДвиженияРасходыБудущихПериодов.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияРасходыБудущихПериодов.Записать(Ложь);
	КонецЕсли;
	// is ЯннуровВФ кон 20140609
КонецПроцедуры // РаспределениеОбщепроизводственныхИОбщехозяйственныхРасходов()

//начало изменений БП 04 
//********************************
Функция СформироватьЗапросВспомгательное(СтруктураШапкиДокумента)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Константы.ПРГ_СпособРаспределнияДляПрямыхЗатрат КАК СпособРаспределения
	                      |ПОМЕСТИТЬ ТаблСпособов
	                      |ИЗ
	                      |	Константы КАК Константы
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Организация,
	                      |//ДляБухУчета СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат КАК СчетУчета,
						  |//ДляНалУчета  СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ КАК СчетУчета,
						  // is ЯннуровВФ нач 2014114 Изменения от 20140314
						  |//ДляМеждУчета СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.ДС_СчетЗатратМСФО КАК СчетУчета,
						  // is ЯннуровВФ кон 2014114
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СпособРаспределенияЗатрат,
	                      |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураВыпуска
	                      |ПОМЕСТИТЬ ВсмомСпособы
	                      |ИЗ
	                      |	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(
	                      |			&ДатаКонца,
	                      |			Организация = &Организация
	                      |				И СпособРаспределенияЗатрат В
	                      |					(ВЫБРАТЬ
	                      |						ТаблСпособов.СпособРаспределения
	                      |					ИЗ
	                      |						ТаблСпособов)
	                      |				И Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |				И СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	                      |//ДляБухУчета И СчетЗатрат  В (&СчетаУчета)
						  |//ДляНалУчета И СчетЗатратНУ В (&СчетаУчета)
						  // is ЯннуровВФ нач 2014114 Изменения от 20140314
						  |//ДляМеждУчета И ДС_СчетЗатратМСФО  В (&СчетаУчета)
						  // is ЯннуровВФ кон 2014114
						  |) КАК СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних
	                      |ГДЕ
	                      |	НЕ СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.НеРаспределять
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ  Различные
	                      |	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.Подразделение, ВсмомСпособы.Подразделение) КАК Подразделение,
						  |//ДляБухУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСчетБУ Как КорСчет, 
						  |//ДляБухУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоБУ1 Как КорСубконто1,
						  |//ДляБухУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоБУ2 Как КорСубконто2,
						  |//ДляБухУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоБУ3 Как КорСубконто3,
						  |//ДляНалУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСчетНУ Как КорСчет, 
						  |//ДляНалУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоНУ1 Как КорСубконто1,
						  |//ДляНалУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоНУ2 Как КорСубконто2,
						  |//ДляНалУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоНУ3 Как КорСубконто3,
						  // is ЯннуровВФ нач 2014114 Изменения от 20140314
						  |//ДляМеждУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСчетМУ Как КорСчет, 
						  |//ДляМеждУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоМУ1 Как КорСубконто1,
						  |//ДляМеждУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоМУ2 Как КорСубконто2,
						  |//ДляМеждУчета	ПРГ_НастройкиЗакрытияКосвенныхРасходов.КорСубконтоМУ3 Как КорСубконто3,						  
						  // is ЯннуровВФ кон 2014114
	                      |//ДляБухУчета	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаБУ, ВсмомСпособы.СчетУчета) КАК СчетУчета,
						  |//ДляНалУчета	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаНУ, ВсмомСпособы.СчетУчета) КАК СчетУчета,
						  // is ЯннуровВФ нач 2014114 Изменения от 20140314
						  |//ДляМеждУчета	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.ДС_СчетУчетаМСФО, ВсмомСпособы.СчетУчета) КАК СчетУчета,
						  // is ЯннуровВФ кон 2014114
	                      |	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.НоменклатурнаяГруппа, ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	                      |	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат, ВсмомСпособы.СпособРаспределенияЗатрат) КАК СпособРаспределенияЗатрат,
	                      |	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.НоменклатураВыпуска, ВсмомСпособы.НоменклатураВыпуска) КАК НоменклатураВыпуска
	                      |ПОМЕСТИТЬ НастройкиЗакрытия
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_НастройкиЗакрытияКосвенныхРасходов КАК ПРГ_НастройкиЗакрытияКосвенныхРасходов
	                      |		ПОЛНОЕ СОЕДИНЕНИЕ ВсмомСпособы КАК ВсмомСпособы
	                      |		ПО ПРГ_НастройкиЗакрытияКосвенныхРасходов.Подразделение = ВсмомСпособы.Подразделение
	                      |ГДЕ
	                      |	(ПРГ_НастройкиЗакрытияКосвенныхРасходов.Организация = &Организация
	                      |			ИЛИ ВсмомСпособы.Организация = &Организация)
	                      |	И (
						  |//ДляБухУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаБУ В (&СчетаУчета)
						  |//ДляНалУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаНУ В (&СчетаУчета)
						  // is ЯннуровВФ нач 2014114 Изменения от 20140314
						  |//ДляМеждУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.ДС_СчетУчетаМСФО В (&СчетаУчета)
						  // is ЯннуровВФ кон 2014114
	                      |			ИЛИ ВсмомСпособы.СчетУчета В (&СчетаУчета)
						  |  )
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	НезавершенноеПроизводство.Организация,
	                      |	НезавершенноеПроизводство.Подразделение,
	                      |	НезавершенноеПроизводство.СчетУчета,
	                      |	НезавершенноеПроизводство.СтатьяЗатрат,
	                      |	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	                      |	НезавершенноеПроизводство.Заказ,
	                      |	НезавершенноеПроизводство.Затрата,
	                      |	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	                      |	НезавершенноеПроизводство.СерияЗатраты,
	                      |	НезавершенноеПроизводство.КоличествоОстаток КАК Количество,
	                      |	НезавершенноеПроизводство.СтоимостьОстаток КАК СуммаОстаток,
						  |	//ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток КАК ПостояннаяРазницаОстаток,
						  |	//ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток КАК ВременнаяРазницаОстаток,
	                      |	НастройкиЗакрытия.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаРаспределения,
	                      |	НастройкиЗакрытия.СпособРаспределенияЗатрат КАК СпособРаспределенияЗатрат,
						  |	НастройкиЗакрытия.КорСчет  как КорСчет,
						  |	НастройкиЗакрытия.КорСубконто1 как КорСубконто1,
						  |	НастройкиЗакрытия.КорСубконто2 как КорСубконто2 ,
						  |	НастройкиЗакрытия.КорСубконто3 как КорСубконто3,
	                      |	НастройкиЗакрытия.НоменклатураВыпуска КАК Продукция
	                      |ИЗ
	                      |	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(
	                      |			&ДатаКонца,
	                      |			Организация = &Организация
	                      |				И (СчетУчета, Подразделение) В
	                      |					(ВЫБРАТЬ
	                      |						НастройкиЗакрытия.СчетУчета,
	                      |						НастройкиЗакрытия.Подразделение
	                      |					ИЗ
	                      |						НастройкиЗакрытия)) КАК НезавершенноеПроизводство
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиЗакрытия КАК НастройкиЗакрытия
	                      |		ПО НезавершенноеПроизводство.Подразделение = НастройкиЗакрытия.Подразделение
	                      |			И НезавершенноеПроизводство.СчетУчета = НастройкиЗакрытия.СчетУчета
	                      |ИТОГИ ПО
	                      |	СпособРаспределенияЗатрат");	
						  
	МассивСчетов = Новый Массив;					  
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		 МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
		 МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПроизводствоИзДавальческогоСырья);
		 МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
		 МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		 МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД);
		 МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД);
		 МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
		 МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваНеОблагаемоеЕНВД);
	//+ДС 14.03.14
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		 МассивСчетов.Добавить(ПланыСчетов.Международный._ОсновноеПроизводство);
		 // is ЯннуровВФ нач 20141002
		 МассивСчетов.Добавить(ПланыСчетов.Международный.ВспомогательныеПроизводства);
		 // is ЯннуровВФ кон 20141002
		 МассивСчетов.Добавить(ПланыСчетов.Международный.ОбслуживающиеПроизводства);
	//-ДС  
	КонецЕслИ;						  
	
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос.УстановитьПараметр("СчетаУчета",МассивСчетов);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаКонца",КонецДня(СтруктураШапкиДокумента.Дата)+1);
	возврат Запрос;

КонецФункции	
//конец изменений БП 04 

Функция СформироватьЗапросЗатратыОПР(СтруктураШапкиДокумента)
							  
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Константы.ПРГ_СпособРаспределнияДляПрямыхЗатрат КАК СпособРаспределения
	                      |ПОМЕСТИТЬ ТаблСпособов
	                      |ИЗ
	                      |	Константы КАК Константы
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Организация,
	                      |//ДляБухУчета СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат КАК СчетУчета,
						  |//ДляНалУчета  СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ КАК СчетУчета,
						  // is ЯннуровВФ нач 20141114 Изменения от 20140314
						  |//ДляМеждУчета СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.ДС_СчетЗатратМСФО КАК СчетУчета,
						  // is ЯннуровВФ кон 20141114
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СпособРаспределенияЗатрат,
	                      |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураВыпуска
	                      |ПОМЕСТИТЬ ВсмомСпособы
	                      |ИЗ
	                      |	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(
	                      |			&ДатаКонца,
	                      |			Организация = &Организация
	                      |				И СпособРаспределенияЗатрат В
	                      |					(ВЫБРАТЬ
	                      |						ТаблСпособов.СпособРаспределения
	                      |					ИЗ
	                      |						ТаблСпособов)
	                      |				И Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |				И СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	                      |//ДляБухУчета И СчетЗатрат  В (&СчетаУчета)
						  |//ДляНалУчета И СчетЗатратНУ В (&СчетаУчета)
						  // is ЯннуровВФ нач 20141114 Изменения от 20140314
						  |//ДляМеждУчета И ДС_СчетЗатратМСФО В (&СчетаУчета)
						  // is ЯннуровВФ кон 20141114						  
						  |) КАК СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних
	                      |ГДЕ
	                      |	НЕ СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.НеРаспределять
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ Различные
	                      |	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.Подразделение, ВсмомСпособы.Подразделение) КАК Подразделение,
	                      |//ДляБухУчета ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаБУ, ВсмомСпособы.СчетУчета) КАК СчетУчета,
						  |//ДляНалУчета ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаНУ, ВсмомСпособы.СчетУчета) КАК СчетУчета,
						  // is ЯннуровВФ нач 20141114 Изменения от 20140314
						  |//ДляМеждУчета ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.ДС_СчетУчетаМСФО, ВсмомСпособы.СчетУчета) КАК СчетУчета,
						  // is ЯннуровВФ кон 20141114
	                      |	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.НоменклатурнаяГруппа, ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	                      |	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат, ВсмомСпособы.СпособРаспределенияЗатрат) КАК СпособРаспределенияЗатрат,
	                      |	ЕСТЬNULL(ПРГ_НастройкиЗакрытияКосвенныхРасходов.НоменклатураВыпуска, ВсмомСпособы.НоменклатураВыпуска) КАК НоменклатураВыпуска
	                      |ПОМЕСТИТЬ НастройкиЗакрытия
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_НастройкиЗакрытияКосвенныхРасходов КАК ПРГ_НастройкиЗакрытияКосвенныхРасходов
	                      |		ПОЛНОЕ СОЕДИНЕНИЕ ВсмомСпособы КАК ВсмомСпособы
	                      |		ПО ПРГ_НастройкиЗакрытияКосвенныхРасходов.Подразделение = ВсмомСпособы.Подразделение
	                      |ГДЕ
	                      |	(ПРГ_НастройкиЗакрытияКосвенныхРасходов.Организация = &Организация
	                      |			ИЛИ ВсмомСпособы.Организация = &Организация)
	                      |	И (
						  |//ДляБухУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаБУ В (&СчетаУчета)
						  |//ДляНалУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаНУ В (&СчетаУчета)
						  // is ЯннуровВФ нач 20141114 Изменения от 20140314
						  |//ДляМеждУчета ПРГ_НастройкиЗакрытияКосвенныхРасходов.ДС_СчетУчетаМСФО В (&СчетаУчета)
						  // is ЯннуровВФ кон 20141114
	                      |			ИЛИ ВсмомСпособы.СчетУчета В (&СчетаУчета)
						  |  );
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗатратыБухгалтерскийУчетОстатки.Подразделение,
	                      |	ЗатратыБухгалтерскийУчетОстатки.СтатьяЗатрат,
	                      |	ЗатратыБухгалтерскийУчетОстатки.НоменклатурнаяГруппа,
						  | Неопределено Как КорСчет,
	                      |	ЗатратыБухгалтерскийУчетОстатки.Заказ,
	                      |	НастройкиЗакрытия.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаРаспределения,
	                      |	НастройкиЗакрытия.СпособРаспределенияЗатрат КАК СпособРаспределенияЗатрат,
	                      |	НастройкиЗакрытия.НоменклатураВыпуска КАК Продукция,
	                      |	ЗатратыБухгалтерскийУчетОстатки.СуммаОстаток,
						  |//ДляНалУчета ЗатратыБухгалтерскийУчетОстатки.ПостояннаяРазницаОстаток,
						  |//ДляНалУчета ЗатратыБухгалтерскийУчетОстатки.ВременнаяРазницаОстаток,
	                      |	ЗатратыБухгалтерскийУчетОстатки.СчетУчета,
	                      |	ЗатратыБухгалтерскийУчетОстатки.Организация
	                      |ИЗ
	                      |	РегистрНакопления.Затраты%СуффиксУчета%.Остатки(
	                      |			&ДатаКонца,
	                      |			Организация = &Организация
	                      |				И (СчетУчета, Подразделение) В
	                      |					(ВЫБРАТЬ
	                      |						НастройкиЗакрытия.СчетУчета,
	                      |						НастройкиЗакрытия.Подразделение
	                      |					ИЗ
	                      |						НастройкиЗакрытия)) КАК ЗатратыБухгалтерскийУчетОстатки
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиЗакрытия КАК НастройкиЗакрытия
	                      |		ПО ЗатратыБухгалтерскийУчетОстатки.Подразделение = НастройкиЗакрытия.Подразделение
	                      |			И ЗатратыБухгалтерскийУчетОстатки.СчетУчета = НастройкиЗакрытия.СчетУчета
	                      |ИТОГИ ПО
	                      |	СпособРаспределенияЗатрат ");
						  
	МассивСчетов = Новый Массив;					  
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		 МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		 МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД);
	// is ЯннуровВФ нач 20141118 Изменения от 20140314
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		 МассивСчетов.Добавить(ПланыСчетов.Международный.ОбщепроизводственныеРасходы);
	// is ЯннуровВФ кон 20141118
	КонецЕслИ;						  
	
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос.УстановитьПараметр("СчетаУчета",МассивСчетов);
						  
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаКонца",КонецДня(СтруктураШапкиДокумента.Дата)+1);
	возврат Запрос;

КонецФункции	
//конец изменений БП 04 



Функция ПроверитьУстНовыйОтбор(ПостроительЗапроса,ВыборкаПоЗатратам,СпособРаспределения)
	УстановленНовыйОтбор = Ложь;
	
	Если ПостроительЗапроса.Отбор.СпособРаспределения.Значение <> СпособРаспределения Тогда
		ПостроительЗапроса.Отбор.СпособРаспределения.Значение = СпособРаспределения;
		УстановленНовыйОтбор = Истина;
	КонецЕсли;	
	
	Если ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение <> ВыборкаПоЗатратам.НоменклатурнаяГруппаРаспределения  Тогда
		УстановленНовыйОтбор  = Истина;
		Если ЗначениеЗаполнено(ВыборкаПоЗатратам.НоменклатурнаяГруппаРаспределения) Тогда
			ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = ВыборкаПоЗатратам.НоменклатурнаяГруппаРаспределения;
			ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование = Истина;
		Иначе
			ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	возврат УстановленНовыйОтбор;
КонецФункции	

Процедура РаспределитьЗатратыВНезавершенноеПроизводствоВспомогат(
	СтруктураШапкиДокумента,
	ВыборкаПоЗатратам,
	ВыборкаРаспределениеПоПроектам,
	ХарактерЗатрат,
	СпособРаспределения,
	ХарактерРаспределенияЗатрат,
	РаспределятьНаПодчиненныеПодразделения,
	ЕНВД,
	НомерПередела,
	ВсегоПеределов,
	СуммаОстаток,
	ПостояннаяРазницаОстаток,
	ВременнаяРазницаОстаток,
	ПостроительЗапроса,
	ПостроительЗапросаНаПродукцию,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатраты,
	НаборЗаписейЗатратыОбороты,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	РаспределениеОбщепроизводственных,
	ТаблицаРаспределения
	)
	Перем ПРГ_ИнформацияОПоиске;
	
	Если СуммаОстаток = 0
	   И ПостояннаяРазницаОстаток = 0
	   И ВременнаяРазницаОстаток = 0 Тогда
		Возврат;
	КонецЕсли;
	
		
	
	// Отберем строки базы распределения.
	УстановленНовыйОтбор = ПроверитьУстНовыйОтбор(ПостроительЗапроса,ВыборкаПоЗатратам,СпособРаспределения);
	
	Если УстановленНовыйОтбор Тогда	
		ПостроительЗапроса.Выполнить();
	КонецЕсли;	
	РезультатЗапросаБаза = ПостроительЗапроса.Результат;
		
	// Отберем строки базы распределения на продукцию.
	УстановленНовыйОтбор = ПроверитьУстНовыйОтбор(ПостроительЗапросаНаПродукцию,ВыборкаПоЗатратам,СпособРаспределения);
	
	Если УстановленНовыйОтбор Тогда	
		ПостроительЗапросаНаПродукцию.Выполнить();
	КонецЕсли;	
	
	РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
	ВыборкаБазаНаПродукцию = РезультатЗапросаБазаНаПродукцию.Выбрать();
										
	ВсегоБазаРаспределения = 0;
		
	МассивКоэф = Новый Массив;
	МассивКоэфНУ = Новый Массив;
		
	ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
	Пока ВыборкаБаза.Следующий() Цикл
			
		МассивКоэф.Добавить(ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			МассивКоэфНУ.Добавить(ВыборкаБаза.БазаПриходНУ * ВыборкаБаза.БазаНаПодчиненныеНУ);
		КонецЕсли;
		ВсегоБазаРаспределения = ВсегоБазаРаспределения + (ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
			
	КонецЦикла;
		
	Если ВсегоБазаРаспределения = 0 Тогда
		Если НомерПередела = ВсегоПеределов Тогда
			ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
				|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
				|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
				|Заказ: " + ВыборкаПоЗатратам.Заказ + "
				|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа, СтатусСообщения.Важное);
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
		ОбщаяСумма = СуммаОстаток + ПостояннаяРазницаОстаток + ВременнаяРазницаОстаток;
		МассивОбщаяСумма = ОбщегоНазначения.РаспределитьПропорционально(ОбщаяСумма, МассивКоэф, 2);
		
		МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаОстаток, МассивКоэф, 2);
		МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаОстаток, МассивКоэф, 2);
		МассивСуммаНУ           = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэфНУ, 2);
		
	КонецЕсли;
		
	Индекс = 0;
	ВыборкаБаза.Сбросить();
	//Начало изменений оптим р/с
	ПРГ_ИнформацияОПоиске= Неопределено;
	//конец изменений 
	Пока ВыборкаБаза.Следующий() Цикл
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СуммаНУ           = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
			СуммаБУ           = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
			ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
			ОбщаяСумма        = ?(МассивОбщаяСумма = Неопределено, 0, МассивОбщаяСумма[Индекс]);
			
			ВременнаяРазница = ВременнаяРазница + СуммаБУ - СуммаНУ;
			Сумма = СуммаНУ;
			
			// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
			Если Сумма + ПостояннаяРазница + ВременнаяРазница <> ОбщаяСумма Тогда
				Если ВременнаяРазница <> 0 Тогда
					ВременнаяРазница = ОбщаяСумма - (Сумма + ПостояннаяРазница);
				ИначеЕсли ПостояннаяРазница <> 0 Тогда
					ПостояннаяРазница = ОбщаяСумма - Сумма;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Сумма             = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			ПостояннаяРазница = 0;
			ВременнаяРазница  = 0;
		КонецЕсли;
			
		Если Сумма <> 0
		 ИЛИ ПостояннаяРазница <> 0 
		 ИЛИ ВременнаяРазница <> 0 Тогда
			
			// Формирование приходных движений по регистру "Незавершенное производство".
			СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаБаза,
				ВыборкаПоЗатратам.СтатьяЗатрат,
				ХарактерЗатрат,
				ХарактерЗатрат, // Затрата 
				Неопределено, // ХарактеристикаЗатраты
				Неопределено, // СерияЗатраты
				НомерПередела,
				0, // Количество
				Сумма,
				ПостояннаяРазница,
				ВременнаяРазница,
				ВидДвиженияНакопления.Приход,
				НаборЗаписейНезавершенноеПроизводство,
				?(Не РаспределениеОбщепроизводственных,Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс ,Неопределено)
				);
								
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					ХарактерЗатрат,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					РегистрБухгалтерииНаборЗаписей
					);
					
			КонецЕсли;
					
			// Распределение затрат на выпуск продукции по базе.
			РаспределитьЗатратыНаВыпускПродукции(
				СтруктураШапкиДокумента,
				ВыборкаБазаНаПродукцию,
				ВыборкаБаза,
				ВыборкаПоЗатратам,
				ХарактерЗатрат,
				СпособРаспределения,
				Неопределено, //СтатусМатериальныхЗатрат
				НомерПередела,
				Сумма,
				ПостояннаяРазница,
				ВременнаяРазница,
				НаборЗаписейНезавершенноеПроизводство,
				НаборЗаписейЗатратыНаВыпуск,
				РегистрБухгалтерииНаборЗаписей,
				ПРГ_ИнформацияОПоиске
				);
			Если НЕ РаспределениеОбщепроизводственных Тогда
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
				 или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
				 // is ЯннуровВФ нач 20140715
				 Или СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
				 // is ЯннуровВФ кон 20140715
				   НоваяСтрока = ТаблицаРаспределения.Добавить();
				   НоваяСтрока.СчетУчета			= ВыборкаБаза.СчетУчета;
				   НоваяСтрока.НоменклатурнаГруппа  = ВыборкаБаза.НоменклатурнаяГруппа;
				   НоваяСтрока.Подразделение        = ВыборкаБаза.Подразделение;
				   НоваяСтрока.СтатьяЗатрат			= ВыборкаПоЗатратам.СтатьяЗатрат;
				   НоваяСтрока.Сумма				= Сумма;
				   НоваяСтрока.ПостояннаяРазница	= ПостояннаяРазница;
				   НоваяСтрока.ВременнаяРазница     = ВременнаяРазница;
			   КонецЕсли;	
			КонецЕсли;	
				
		КонецЕсли;
				
		Индекс = Индекс + 1;
			
	КонецЦикла;
	
	// Формирование движений по регистру "Затраты".
	Если РаспределениеОбщепроизводственных Тогда
		СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ХарактерЗатрат,
			СуммаОстаток,
			ПостояннаяРазницаОстаток,
			ВременнаяРазницаОстаток,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейЗатраты
			);
	КонецЕсли;	
		
	// Формирование движений по регистру "Затраты (обороты)".
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		РаспределитьСписанныеЗатратыПоПроектам(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаРаспределениеПоПроектам,
			СуммаОстаток,
			НаборЗаписейЗатратыОбороты
		);
		
	КонецЕсли;

КонецПроцедуры // РаспределитьЗатратыВНезавершенноеПроизводство()


Функция ПолучитьТаблицуРаспр()
   	  ТаблРаспр = Новый ТаблицаЗначений;
	  ТаблРаспр.Колонки.Добавить("СчетУчета");
	  ТаблРаспр.Колонки.Добавить("НоменклатурнаГруппа");
	  ТаблРаспр.Колонки.Добавить("Подразделение");
	  ТаблРаспр.Колонки.Добавить("СтатьяЗатрат");
	  ТаблРаспр.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	  ТаблРаспр.Колонки.Добавить("ПостояннаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	  ТаблРаспр.Колонки.Добавить("ВременнаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	  возврат ТаблРаспр;
КонецФункции	

Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатратВспомог(
	СтруктураШапкиДокумента,
	Продукция,
	СтрокаВыборкиЗатрат,
	Количество,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	НаборЗаписейЗатратыНаВыпуск
	)
	
	Если Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты, заполняемые по данным базы распределения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Спецификация,
	//	- Заказ,
	//	- ДокументВыпуска,
	//
	// Измерения и реквизиты, заполняемые по распределяемым затратам:
	//	- СтатьяЗатрат,
	//	- Затрата - заполняется ХарактерЗатрат,
	//	- ХарактеристикаЗатраты - не заполняется,
	//	- СерияЗатраты - не заполняется,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.Активность = Истина;
	
	НоваяСтрока.Подразделение  = СтрокаВыборкиЗатрат.Подразделение;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.СчетУчета 	= СтрокаВыборкиЗатрат.СчетУчета;
		НоваяСтрока.Организация	= СтруктураШапкиДокумента.Организация;
	КонецЕсли;	
		
	НоваяСтрока.Продукция 	= Продукция;
	
	НоваяСтрока.Затрата 	= СтрокаВыборкиЗатрат.Затрата;
	НоваяСтрока.Заказ		= СтрокаВыборкиЗатрат.Заказ;
	НоваяСтрока.ХарактеристикаЗатраты =СтрокаВыборкиЗатрат.ХарактеристикаЗатраты;
	НоваяСтрока.СерияЗатраты          = СтрокаВыборкиЗатрат.СерияЗатраты;
	
	НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборкиЗатрат.НоменклатурнаяГруппа;
	НоваяСтрока.ЗаказНЗП = СтрокаВыборкиЗатрат.Заказ;
	НоваяСтрока.ПодразделениеНЗП = СтрокаВыборкиЗатрат.Подразделение;
	
	Если СтруктураШапкиДокумента.Свойство("ДетализацияПоФиксированнойСтатьеЗатрат") Тогда
		ДетализацияПоФиксированнойСтатьеЗатрат = СтруктураШапкиДокумента.ДетализацияПоФиксированнойСтатьеЗатрат;
	Иначе
		ДетализацияПоФиксированнойСтатьеЗатрат = Ложь;
	КонецЕсли;
	
	НоваяСтрока.СтатьяЗатрат  = СтрокаВыборкиЗатрат.СтатьяЗатрат;
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	
	НоваяСтрока.КосвенныеЗатраты = Истина;
	НоваяСтрока.ЗатратыВстречногоВыпуска = Ложь;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат()


Процедура СформироватьПроводкуНаСчетУчета(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидУчетаПоПБУ18,
	Сумма,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	
	НоваяПроводка.Содержание = "распределение затрат";
	НоваяПроводка.Сумма = Сумма;
	
	НоваяПроводка.СчетДт = СтрокаВыборки.КорСчет;
	//БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", );
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.КорСубконто1);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.КорСубконто2);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.КорСубконто3);
										
	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
										
	
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);

		
 	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкуПоРаспределениюЗатрат()




// Процедура производит распределение затрат по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	МинимальныйПередел - Число - Минимальный номер передела
//	ВсегоПеределов - Число - Общее количество переделов
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты"
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыПоБазеРаспределенияКосвенные(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	РезультатЗапросаРаспределениеПоПроектам,
	НомерПередела,
	МинимальныйПередел,
	ВсегоПеределов,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатраты,
	НаборЗаписейЗатратыОбороты,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	РаспределениеОбщепроизводственных
	)
	
	ТаблРаспрЗатрат = ПолучитьТаблицуРаспр();
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ПостроительЗапросаНаПродукцию = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределенияНаПродукцию
		);
		
	// Выберем способы распределения затрат.
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();
	
	// Выберем коэффициенты распределения по проектам.
	ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
	
	// Получим коэффициент распределения на ЕНВД.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(
			СтруктураШапкиДокумента.Организация, 
			СтруктураШапкиДокумента.мКонДата, 
			СтруктураШапкиДокумента.мНачДата
		);
	Иначе
		КоэффициентЕНВД = 0;
	КонецЕсли;
	
	ВыборкаПоЗатратамПервыйУровень = РезультатЗапросаПоЗатратам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗатратамПервыйУровень.Следующий() Цикл
		ВыборкаПоЗатратам = ВыборкаПоЗатратамПервыйУровень.Выбрать();
		Пока ВыборкаПоЗатратам.Следующий() Цикл
			

			СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ПостояннаяРазницаОстаток = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
				ВременнаяРазницаОстаток = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
			Иначе
				ПостояннаяРазницаОстаток = 0;
				ВременнаяРазницаОстаток = 0;
			КонецЕсли;
			
			
			// Пропускаем строки с пустой суммой.
			Если СуммаОстаток = 0
			   И ПостояннаяРазницаОстаток = 0
			   И ВременнаяРазницаОстаток = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			//начало изменений  
			Если ЗначениеЗаполнено(ВыборкаПоЗатратам.КорСчет) Тогда
			// is ЯннуровВФ нач 20141028
			//	И Не СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
			// is ЯннуровВФ кон 20141028
			
				Если Не РаспределениеОбщепроизводственных Тогда
					
					СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
						СтруктураШапкиДокумента,
						ВыборкаПоЗатратам,
						ВыборкаПоЗатратам.СтатьяЗатрат,
						Неопределено,
						ВыборкаПоЗатратам.Затрата, // Затрата 
						ВыборкаПоЗатратам.ХарактеристикаЗатраты, // ХарактеристикаЗатраты
						ВыборкаПоЗатратам.СерияЗатраты, // СерияЗатраты
						0, ///НомерПередела
						ВыборкаПоЗатратам.Количество, // Количество
						СуммаОстаток,
						ПостояннаяРазницаОстаток,
						ВременнаяРазницаОстаток,
						ВидДвиженияНакопления.Расход,
						НаборЗаписейНезавершенноеПроизводство,
						Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс
						);
						
					Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
						 СформироватьПроводкуНаСчетУчета(
							СтруктураШапкиДокумента,
							ВыборкаПоЗатратам,
							Неопределено,
							СуммаОстаток,
							РегистрБухгалтерииНаборЗаписей
							);
					КонецЕсли;		
					
					Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						 СформироватьПроводкуНаСчетУчета(
							СтруктураШапкиДокумента,
							ВыборкаПоЗатратам,
							Перечисления.ВидыУчетаПоПБУ18.НУ,
							СуммаОстаток,
							РегистрБухгалтерииНаборЗаписей
							);
							
						 СформироватьПроводкуНаСчетУчета(
							СтруктураШапкиДокумента,
							ВыборкаПоЗатратам,
							Перечисления.ВидыУчетаПоПБУ18.ПР,
							ПостояннаяРазницаОстаток,
							РегистрБухгалтерииНаборЗаписей
							);
							
						 СформироватьПроводкуНаСчетУчета(
							СтруктураШапкиДокумента,
							ВыборкаПоЗатратам,
							Перечисления.ВидыУчетаПоПБУ18.ВР,
							ВременнаяРазницаОстаток,
							РегистрБухгалтерииНаборЗаписей
							);
							
					 КонецЕсли;		
					
					// is ЯннуровВФ нач 20150630 
					Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
						 СформироватьПроводкуНаСчетУчета(
							СтруктураШапкиДокумента,
							ВыборкаПоЗатратам,
							Неопределено,
							СуммаОстаток,
							РегистрБухгалтерииНаборЗаписей
							);
					КонецЕсли;		
					// is ЯннуровВФ кон 20150630 
						
						
				 КонецЕсли;	
				продолжить;	
			КонецЕсли;	
			//конец изменений 			
			
			
			// Определим способ и характер распределения затрат.
			СпособРаспределения = ВыборкаПоЗатратам.СпособРаспределенияЗатрат;
			ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
			РаспределятьНаПодчиненныеПодразделения = Ложь;
			РаспределятьЗатраты = Истина;
			
			//РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			//	СтруктураШапкиДокумента,
			//	ВыборкаПоЗатратам,
			//	ВыборкаПоСпособамРаспределенияЗатрат,
			//	Ложь, // ОпределятьПоХарактеруЗатрат
			//	Истина, // ПроверятьУказаниеСпособаРаспределения
			//	СпособРаспределения,
			//	ХарактерРаспределенияЗатрат,
			//	РаспределятьНаПодчиненныеПодразделения
			//	);
			//	
			//Если Не РаспределятьЗатраты Тогда
			//	Продолжить;		
			//КонецЕсли; 
			//
			// Затраты с характером распределения "Не учитывать подразделение" распределяем только на первом переделе
			// по всем подразделениям.
			Если ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение
			   И НомерПередела <> МинимальныйПередел Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат);
					
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат, "Налоговый");
			//+ДС 14.03.14
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
				// is ЯннуровВФ нач 20140715
				Если ВыборкаПоЗатратам.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
				 И (ВыборкаПоЗатратам.Подразделение.ВидПодразделения = Перечисления.ВидыПодразделений.ВспомогательноеПроизводство
				    Или ВыборкаПоЗатратам.Подразделение.ВидПодразделения = Перечисления.ВидыПодразделений.Прочее) Тогда 
            		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы;
				Иначе
				// is ЯннуровВФ кон 20140715
            		ХарактерЗатрат = ?(ВыборкаПоЗатратам.СчетУчета = ПланыСчетов.Международный.ОбщепроизводственныеРасходы, Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы, Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
				КонецЕсли;
			//-ДС
			Иначе
				ХарактерЗатрат = ВыборкаПоЗатратам.ХарактерЗатрат;
					
			КонецЕсли;
			
			СуммаОстатокЕНВД  =  0;
			СуммаОстатокНеЕНВД = СуммаОстаток;
			
			ТаблРаспрЗатрат.Очистить();
			РаспределитьЗатратыВНезавершенноеПроизводствоВспомогат(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаРаспределениеПоПроектам,
				ХарактерЗатрат,
				СпособРаспределения,
				ХарактерРаспределенияЗатрат,
				РаспределятьНаПодчиненныеПодразделения,
				Ложь, // ЕНВД
				НомерПередела,
				ВсегоПеределов,
				СуммаОстатокНеЕНВД,
				ПостояннаяРазницаОстаток,
				ВременнаяРазницаОстаток,
				ПостроительЗапроса,
				ПостроительЗапросаНаПродукцию,
				НаборЗаписейНезавершенноеПроизводство,
				НаборЗаписейЗатраты,
				НаборЗаписейЗатратыОбороты,
				НаборЗаписейЗатратыНаВыпуск,
				РегистрБухгалтерииНаборЗаписей,
				РаспределениеОбщепроизводственных,
				ТаблРаспрЗатрат
			);
			Если Не РаспределениеОбщепроизводственных Тогда
				ТаблРаспрЗатрат.Свернуть("СчетУчета,НоменклатурнаГруппа,Подразделение,СтатьяЗатрат","Сумма,ПостояннаяРазница,ВременнаяРазница");
				СуммаРаспр 			   = ТаблРаспрЗатрат.Итог("Сумма");
				ПостояннаяРазницаРаспр = ТаблРаспрЗатрат.Итог("ПостояннаяРазница");
				ВременнаяРазницаРаспр  = ТаблРаспрЗатрат.Итог("ВременнаяРазница");
				КоличествоРаспр = 0;
				Если СуммаРаспр = СуммаОстаток Тогда
					КоличествоРаспр = ВыборкаПоЗатратам.Количество;
				Иначе
					КоличествоРаспр = Окр(ВыборкаПоЗатратам.Количество*СуммаРаспр/СуммаОстаток,3);
				КонецЕсли;	
				
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратам,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					Неопределено,
					ВыборкаПоЗатратам.Затрата, // Затрата 
					ВыборкаПоЗатратам.ХарактеристикаЗатраты, // ХарактеристикаЗатраты
					ВыборкаПоЗатратам.СерияЗатраты, // СерияЗатраты
					0, ///НомерПередела
					КоличествоРаспр, // Количество
					СуммаРаспр,
					ПостояннаяРазницаРаспр,
					ВременнаяРазницаРаспр,
					ВидДвиженияНакопления.Расход,
					НаборЗаписейНезавершенноеПроизводство,
					Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс
					);
					
				//	СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатратВспомог(
				//		СтруктураШапкиДокумента,
				//		ВыборкаПоЗатратам.Продукция,
				//		ВыборкаПоЗатратам,
				//		ВыборкаПоЗатратам.Количество,
				//		СуммаРаспр,
				//		ПостояннаяРазницаРаспр,
				//		ВременнаяРазницаРаспр,
				//		НаборЗаписейЗатратыНаВыпуск);
				//	
				//Для Каждого ТекСтрока Из ТаблРаспрЗатрат Цикл
				//КонецЦикла;	
				 
			КонецЕсли;	
			
			
			// Распределим затраты, относящиеся к ЕНВД.
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
			   И СуммаОстатокЕНВД <> 0 Тогда
				
				РаспределитьЗатратыВНезавершенноеПроизводство(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаРаспределениеПоПроектам,
				ХарактерЗатрат,
				СпособРаспределения,
				ХарактерРаспределенияЗатрат,
				РаспределятьНаПодчиненныеПодразделения,
				Истина, // ЕНВД
				НомерПередела,
				ВсегоПеределов,
				СуммаОстатокЕНВД,
				0,
				0,
				ПостроительЗапроса,
				ПостроительЗапросаНаПродукцию,
				НаборЗаписейНезавершенноеПроизводство,
				НаборЗаписейЗатраты,
				НаборЗаписейЗатратыОбороты,
				НаборЗаписейЗатратыНаВыпуск,
				РегистрБухгалтерииНаборЗаписей
			);
				
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
КонецПроцедуры // РаспределитьЗатратыПоБазеРаспределения()



Процедура РаспределениеОбщепроизводственныхИОбщехозяйственныхРасходовНАШЕ(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	РезультатЗапросаРаспределениеПоПроектам,
	НомерПередела,
	МинимальныйПередел,
	ВсегоПеределов,
	СтруктураДвижений,
	РаспределениеОбщепроизводственных = Ложь
	)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
	// is ЯннуровВФ нач 20141114 Изменение от 20140609 
		и Не СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
	// is ЯннуровВФ кон 20141114
		возврат;
	КонецЕсли;	
	
	Если Не РаспределениеОбщепроизводственных Тогда
		ЗапросПоЗатратам = СформироватьЗапросВспомгательное(
			СтруктураШапкиДокумента);
	Иначе
		ЗапросПоЗатратам = СформироватьЗапросЗатратыОПР(
			СтруктураШапкиДокумента);
		
	КонецЕсли;
		
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   //И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда
	   
		РаспределитьЗатратыПоБазеРаспределенияКосвенные(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			РезультатЗапросаРаспределениеПоПроектам,
			НомерПередела,
			МинимальныйПередел,
			ВсегоПеределов,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатраты,
			СтруктураДвижений.ДвиженияЗатратыОбороты,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция,
			РаспределениеОбщепроизводственных
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.ДвиженияЗатратыОбороты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыОбороты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеОбщепроизводственныхИОбщехозяйственныхРасходов()
//конец изменений БП 04 

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "НЕЗАВЕРШЕННОЕ ПРОИЗВОДСТВО"

// Функция формирует текст запроса по регистру "Незавершенное производство".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоОстаткамЗатратВНезавершенномПроизводстве()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	НезавершенноеПроизводство.Затрата КАК ХарактерЗатрат,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	
	|	//ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаНачальныйОстаток КАК ПостояннаяРазницаОстаток,
	|	//ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаНачальныйОстаток КАК ВременнаяРазницаОстаток,
	|	
	|	НезавершенноеПроизводство.СтоимостьНачальныйОстаток КАК СуммаОстаток
	|	
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.ОстаткиИОбороты(&НачГраница, &КонГраница, , ,
	|		Затрата В (&ХарактерЗатрат)
	|		//ДляРеглУчета И Организация = &Организация
	|		) КАК НезавершенноеПроизводство
	|		
	|ГДЕ
	|	НезавершенноеПроизводство.СтоимостьРасход = 0
	|	//ДляНалУчета И НезавершенноеПроизводство.ПостояннаяРазницаРасход = 0
	|	//ДляНалУчета И НезавершенноеПроизводство.ВременнаяРазницаРасход = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.СтатьяЗатрат
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоОстаткамЗатратВНезавершенномПроизводстве()

// Функция формирует запрос по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Незавершенное производство".
//
Функция СформироватьЗапросПоОстаткамЗатратВНезавершенномПроизводстве(
	СтруктураШапкиДокумента,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоОстаткамЗатратВНезавершенномПроизводстве();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	МассивХарактерЗатрат = Новый Массив;
	МассивХарактерЗатрат.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	МассивХарактерЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	МассивХарактерЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);
	МассивХарактерЗатрат.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	
	Запрос.УстановитьПараметр("ХарактерЗатрат", МассивХарактерЗатрат);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;

	Возврат Запрос;

КонецФункции // СформироватьЗапросПоОстаткамЗатратВНезавершенномПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ОСТАТКА РАСХОДОВ В НЗП НА ВЫПУСК ПРОДУКЦИИ

// Процедура производит распределение затрат на выпуск продукции по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьОстатокКосвенныхРасходовНаВыпускПродукции(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпускПродукции,
	РегистрБухгалтерииНаборЗаписей
	)
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();
		
	МассивКоэф = Новый Массив;
	МассивКоэфНУ = Новый Массив;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Истина, // ОпределятьПоХарактеруЗатрат
			Истина, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;
		КонецЕсли;
		
		// is ЯннуровВФ нач 20141015
		Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат, "Международный");
		Иначе
			ХарактерЗатрат = ВыборкаПоЗатратам.ХарактерЗатрат;
		КонецЕсли;
		// is ЯннуровВФ кон 20141015

		// Отберем строки базы распределения.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			0, // НомерПередела
			СпособРаспределения,
			Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка(),
			Ложь, // РаспределятьНаПодчиненныеПодразделения
			Ложь, // ЕНВД
			Ложь, // ОпределятьПоЕНВД
			Истина, // ОпределятьПоСчетуУчету
			Ложь, // ОтборПоПродукции
			ПостроительЗапроса
			);
		
		Если УстановленНовыйОтбор Тогда
			ПостроительЗапроса.Выполнить();
		КонецЕсли;
		РезультатЗапросаБаза = ПостроительЗапроса.Результат;
										
		ВсегоБазаРаспределения = 0;
		ВсегоБазаРаспределенияНЗП = 0;
		МассивКоэф.Очистить();
		
		ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
		Пока ВыборкаБаза.Следующий() Цикл
			
			Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
				МассивКоэф.Добавить(0);
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.База + ВыборкаБаза.БазаОстатокНЗП;
			Иначе
				МассивКоэф.Добавить(ВыборкаБаза.База);
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
			КонецЕсли;
													
		КонецЦикла;

		Если ВсегоБазаРаспределения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим остаток затрат для распределения.
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазницаОстаток = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВременнаяРазницаОстаток = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
		Иначе
			ПостояннаяРазницаОстаток = 0;
			ВременнаяРазницаОстаток = 0;
		КонецЕсли;
		
		СуммаНаВыпуск = 0;
		ПостояннаяРазницаНаВыпуск = 0;
		ВременнаяРазницаНаВыпуск = 0;
		
		РассчитатьОстатокСуммыЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВсегоБазаРаспределения,
			ВсегоБазаРаспределенияНЗП,
			СуммаОстаток,
			ПостояннаяРазницаОстаток,
			ВременнаяРазницаОстаток,
			СуммаНаВыпуск,
			ПостояннаяРазницаНаВыпуск,
			ВременнаяРазницаНаВыпуск
			);
		
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаНаВыпуск, МассивКоэф, 2);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаНаВыпуск, МассивКоэф, 2);
			МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаНаВыпуск, МассивКоэф, 2);
			
		КонецЕсли;
		
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.Следующий() Цикл
			
			Сумма = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
				ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
			Иначе
				ПостояннаяРазница = 0;
				ВременнаяРазница  = 0;
			КонецЕсли;
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаБаза,
				ВыборкаПоЗатратам.СтатьяЗатрат,
				// is ЯннуровВФ нач 20141015
				//ВыборкаПоЗатратам.ХарактерЗатрат,
				ХарактерЗатрат,
				// is ЯннуровВФ нач 20141015
				ВыборкаПоЗатратам.СтатусМатериальныхЗатрат,
				Сумма,
				ПостояннаяРазница,
				ВременнаяРазница,
				НаборЗаписейЗатратыНаВыпускПродукции
				);
				
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
			   И ВыборкаПоЗатратам.НоменклатурнаяГруппа <> ВыборкаБаза.НоменклатурнаяГруппа Тогда
				
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					// is ЯннуровВФ нач 20141015
					//ВыборкаПоЗатратам.ХарактерЗатрат,
					ХарактерЗатрат,
					// is ЯннуровВФ нач 20141015
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					РегистрБухгалтерииНаборЗаписей
					);
				
			КонецЕсли;
				
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		// Формирование движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоЗатратам.СтатьяЗатрат,
			// is ЯннуровВФ нач 20141015
			//ВыборкаПоЗатратам.ХарактерЗатрат,
			ХарактерЗатрат,
			// is ЯннуровВФ нач 20141015
			ВыборкаПоЗатратам.ХарактерЗатрат,  // Затрата 
			Неопределено, // ХарактеристикаЗатраты
			Неопределено, // СерияЗатраты
			0, // НомерПередела
			0, // Количество
			СуммаНаВыпуск,
			ПостояннаяРазницаНаВыпуск,
			ВременнаяРазницаНаВыпуск,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство
			);
	
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьОстатокКосвенныхРасходовНаВыпускПродукции()

// Процедура распределения затрат на выпуск продукции.
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределениеОстаткаКосвенныхРасходовВПроизводстве(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	СпособРасчета,
	СтруктураДвижений
	)
	
	ЗапросПоЗатратам = СформироватьЗапросПоОстаткамЗатратВНезавершенномПроизводстве(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда	
		
		РаспределитьОстатокКосвенныхРасходовНаВыпускПродукции(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция
		);
		
	КонецЕсли;
		
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // РаспределениеОстаткаКосвенныхРасходовВПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "БРАК В ПРОИЗВОДСТВЕ"

// Функция формирует текст запроса по регистру "Брак в производстве".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоБракуВПроизводстве()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета БракВПроизводстве.Организация,
	|	//ДляРеглУчета БракВПроизводстве.СчетУчета,
	|	БракВПроизводстве.Подразделение,
	|	БракВПроизводстве.СтатьяЗатрат,
	|	БракВПроизводстве.НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ,
	|	БракВПроизводстве.Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции,
	|	
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|
	|	//ДляНалУчета БракВПроизводстве.ПостояннаяРазницаОстаток,
	|	//ДляНалУчета БракВПроизводстве.ВременнаяРазницаОстаток,
	|
	|	(БракВПроизводстве.СуммаОстаток
	|		- ЕСТЬNULL(Инвентаризация.Сумма, 0)
	|	) КАК СуммаОстаток
	|
	|ИЗ
	|	РегистрНакопления.БракВПроизводстве%СуффиксУчета%.Остатки(&КонГраница,
	|		Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		//ДляРеглУчета И Организация = &Организация
	|		//ДляНалУчета И СчетУчета = &СчетУчета
	|		) КАК БракВПроизводстве
	|	
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		БракВПроизводстве.СчетУчета = СчетаУчетаЕНВД.Счет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			//ДляУпрУчета Инвентаризация.Ссылка.Подразделение КАК Подразделение,
	|			//ДляРеглУчета Инвентаризация.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|
	|			Инвентаризация.СтатьяЗатрат,
	|			Инвентаризация.НоменклатурнаяГруппа,
	|			ВЫБОР КОГДА Инвентаризация.Заказ <> &ПустойЗаказПокупателя И
	|						Инвентаризация.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				Инвентаризация.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ КАК Заказ,
	|			Инвентаризация.Продукция,
	|			Инвентаризация.СерияПродукции,
	|			Инвентаризация.ХарактеристикаПродукции,
	|
	|			//ДляБухУчета Инвентаризация.СчетЗатрат КАК СчетЗатрат,
	|			//ДляНалУчета Инвентаризация.СчетЗатратНУ КАК СчетЗатрат,
	|			//ДляМеждУчета Инвентаризация.СчетЗатрат КАК СчетЗатрат,
	|
	|			//ДляУпрУчета Сумма(Инвентаризация.Сумма) КАК Сумма
	|			//ДляБухУчета Сумма(Инвентаризация.СуммаРегл) КАК Сумма
	|			//ДляНалУчета Сумма(Инвентаризация.СуммаНал) КАК Сумма
	|			//ДляМеждУчета Сумма(Инвентаризация.СуммаРегл) КАК Сумма
	|		ИЗ
	|			Документ.ИнвентаризацияБракаВПроизводстве.ЗатратыПоБракуВПроизводстве КАК Инвентаризация
	|		ГДЕ	
	|			Инвентаризация.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|			И НЕ Инвентаризация.Ссылка.ПометкаУдаления
	|			//ДляРеглУчета И Инвентаризация.Ссылка.Организация = &Организация
	|
	|			//ДляУпрУчета И Инвентаризация.Ссылка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И Инвентаризация.Ссылка.ОтражатьВБухгалтерскомУчете
	|			//ДляНалУчета И Инвентаризация.Ссылка.ОтражатьВНалоговомУчете
	|
	|		СГРУППИРОВАТЬ ПО
	|			//ДляУпрУчета Инвентаризация.Ссылка.Подразделение,
	|			//ДляРеглУчета Инвентаризация.Ссылка.ПодразделениеОрганизации,
	|			//ДляБухУчета Инвентаризация.СчетЗатрат,
	|			//ДляНалУчета Инвентаризация.СчетЗатратНУ,
	|			//ДляМеждУчета Инвентаризация.СчетЗатрат,
	|			Инвентаризация.СтатьяЗатрат,
	|			Инвентаризация.НоменклатурнаяГруппа,
	|			Инвентаризация.Заказ,
	|			Инвентаризация.Продукция,
	|			Инвентаризация.СерияПродукции,
	|			Инвентаризация.ХарактеристикаПродукции
	|		) КАК Инвентаризация
	|	ПО
	|		БракВПроизводстве.Подразделение = Инвентаризация.Подразделение
	|		И БракВПроизводстве.СтатьяЗатрат = Инвентаризация.СтатьяЗатрат
	|		И БракВПроизводстве.НоменклатурнаяГруппа = Инвентаризация.НоменклатурнаяГруппа
	|		И БракВПроизводстве.Заказ = Инвентаризация.Заказ
	|		И БракВПроизводстве.Продукция = Инвентаризация.Продукция
	|		И БракВПроизводстве.ХарактеристикаПродукции = Инвентаризация.ХарактеристикаПродукции
	|		И БракВПроизводстве.СерияПродукции = Инвентаризация.СерияПродукции
	|		//ДляРеглУчета И БракВПроизводстве.СчетУчета = Инвентаризация.СчетЗатрат
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаОстаток,
	|	//ДляРеглУчета БракВПроизводстве.Организация,
	|	//ДляРеглУчета БракВПроизводстве.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	БракВПроизводстве.Подразделение,
	|	БракВПроизводстве.НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ,
	|	БракВПроизводстве.Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции,
	|	БракВПроизводстве.СтатьяЗатрат
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоБракуВПроизводстве()

// Функция формирует запрос по регистру "Брак в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Брак в производстве".
//
Функция СформироватьЗапросПоБракуВПроизводстве(
	СтруктураШапкиДокумента,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоБракуВПроизводстве();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", 		Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказНаПроизводство", 	Документы.ЗаказНаПроизводство.ПустаяСсылка());
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку);
		
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоБракуВПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ РАСХОДОВ ПО БРАКУ В ПРОИЗВОДСТВЕ

// Процедура производит распределение расходов по браку по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Общее количество переделов
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейБракВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Брак в производстве"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьРасходыПоБракуВПроизводствеПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	НомерПередела,
	ВсегоПеределов,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейБракВПроизводстве,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей
	)
	Перем ПРГ_ИнформацияОПоиске;
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ПостроительЗапросаНаПродукцию = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределенияНаПродукцию
		);
		
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();

	МассивКоэф = Новый Массив;
	МассивКоэфНУ = Новый Массив;
	
	ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазницаОстаток = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВременнаяРазницаОстаток = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
		Иначе
			ПостояннаяРазницаОстаток = 0;
			ВременнаяРазницаОстаток = 0;
		КонецЕсли;
		
		// Пропускаем строки с пустой суммой.
		Если СуммаОстаток = 0
		   И ПостояннаяРазницаОстаток = 0
		   И ВременнаяРазницаОстаток = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Истина, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;		
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ЕНВД = ВыборкаПоЗатратам.ЕНВД;
		Иначе
			ЕНВД = Ложь;
		КонецЕсли;
		
		// Отберем строки базы распределения.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			НомерПередела,
			СпособРаспределения,
			Перечисления.ХарактерРаспределенияЗатрат.УчитыватьПодразделение,
			РаспределятьНаПодчиненныеПодразделения,
			ЕНВД,
			Истина, // ОпределятьПоЕНВД
			Ложь, // ОпределятьПоСчетуУчету
			Истина, // ОтборПоПродукции
			ПостроительЗапроса
			);

		Если УстановленНовыйОтбор Тогда
			ПостроительЗапроса.Выполнить();
		КонецЕсли;
		РезультатЗапросаБаза = ПостроительЗапроса.Результат;
		
		// Отберем строки базы распределения на продукцию.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			НомерПередела,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			ЕНВД,
			Истина, // ОпределятьПоЕНВД
			Ложь, // ОпределятьПоСчетуУчету
			Истина, // ОтборПоПродукции
			ПостроительЗапросаНаПродукцию
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапросаНаПродукцию.Выполнить();
		КонецЕсли;	
		РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
		//начало изменений если нет выпуска распределение на всю продукцию
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
				 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Если РезультатЗапросаБазаНаПродукцию.Пустой() и РезультатЗапросаБаза.Пустой()
				и ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.Использование 
				и ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование 
				и ЗначениеЗаполнено(ВыборкаПоЗатратам.НоменклатурнаяГруппа) Тогда
				
				ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.Использование  = Ложь;
				ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование   		   = Ложь;
				
				СтарВидСравнЗНаПр = ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.ВидСравнения;
				СтарВидСравнЗН    = ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.ВидСравнения;
				
				ПостроительЗапросаНаПродукцию.Выполнить();
				РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
				Если Не РезультатЗапросаБазаНаПродукцию.Пустой() Тогда
					Список = ПРГ_РасчетСебестоимости.ПРГ_ПолучитьСписокНомГруп(ВыборкаПоЗатратам.НоменклатурнаяГруппа,РезультатЗапросаБазаНаПродукцию);	
					Если Список.Количество() > 0 Тогда
						
						ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.ВидСравнения = ВидСравнения.ВСписке;
						ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.ВидСравнения 			 = ВидСравнения.ВСписке;
						
						ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.Значение      = Список;
						ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение 	    		  = Список;
						
						
						ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.Использование  = Истина;
						ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование   		   = Истина;
						
						ПостроительЗапросаНаПродукцию.Выполнить();
						РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
						             
					КонецЕсли;	
				КонецЕслИ;	
				
				ПостроительЗапроса.Выполнить();
				РезультатЗапросаБаза = ПостроительЗапроса.Результат;
				
				Если ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.ВидСравнения = ВидСравнения.ВСписке Тогда
					
					ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.ВидСравнения =  СтарВидСравнЗНаПр;
					ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.ВидСравнения   		  = СтарВидСравнЗН;
					
					ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.Использование  = Ложь;
					ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование   		   = Ложь;
					
					ПостроительЗапросаНаПродукцию.Отбор.НоменклатурнаяГруппаНЗП.Значение	=  Справочники.НоменклатурныеГруппы.ПустаяСсылка();
					ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение	            =  Справочники.НоменклатурныеГруппы.ПустаяСсылка();
					
				КонецЕсли;	
				
			КонецЕсли;		 
		КонецЕслИ;
		//конец изменений
		ВыборкаБазаНаПродукцию = РезультатЗапросаБазаНаПродукцию.Выбрать();
		
			// is ЯннуровВФ нач 20140704
		Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
			Если РезультатЗапросаБазаНаПродукцию.Пустой() Тогда 
				
				// Отберем строки базы распределения на продукцию без продукции.
				ПостроительЗапросаНаПродукцию.Отбор.Продукция.Использование = Ложь;
				ПостроительЗапросаНаПродукцию.Отбор.ХарактеристикаПродукции.Использование = Ложь;
				ПостроительЗапросаНаПродукцию.Отбор.СерияПродукции.Использование = Ложь;
				ПостроительЗапросаНаПродукцию.Выполнить();
				РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
				ВыборкаБазаНаПродукцию = РезультатЗапросаБазаНаПродукцию.Выбрать();
				ПостроительЗапросаНаПродукцию.Отбор.Продукция.Использование = Истина;
				ПостроительЗапросаНаПродукцию.Отбор.ХарактеристикаПродукции.Использование = Истина;
				ПостроительЗапросаНаПродукцию.Отбор.СерияПродукции.Использование = Истина;
				ПостроительЗапросаНаПродукцию.Выполнить();
		
			КонецЕсли;
		КонецЕсли;
		// is ЯннуровВФ кон 20140704
		
		ВсегоБазаРаспределения = 0;
		
		МассивКоэф.Очистить();
		МассивКоэфНУ.Очистить();
		
		Если ЗначениеЗаполнено(ВыборкаПоЗатратам.Продукция) Тогда
			ВыборкаБаза = РезультатЗапросаБазаНаПродукцию.Выбрать();
			УчитыватьБазуНаПодчиненные = Ложь;
		Иначе
			ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
			УчитыватьБазуНаПодчиненные = Истина;
		КонецЕсли;
		
		Пока ВыборкаБаза.Следующий() Цикл
			
			МассивКоэф.Добавить(ВыборкаБаза.БазаПриход * ?(УчитыватьБазуНаПодчиненные, ВыборкаБаза.БазаНаПодчиненные, 1));
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				МассивКоэфНУ.Добавить(ВыборкаБаза.БазаПриходНУ * ?(УчитыватьБазуНаПодчиненные, ВыборкаБаза.БазаНаПодчиненныеНУ, 1));
			КонецЕсли;
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + (ВыборкаБаза.БазаПриход * ?(УчитыватьБазуНаПодчиненные, ВыборкаБаза.БазаНаПодчиненные, 1));
			
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			Если НомерПередела = ВсегоПеределов Тогда
				ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
						|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
						|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
						|Заказ: " + ВыборкаПоЗатратам.Заказ + "
						|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа + "
						|Продукция: " + ВыборкаПоЗатратам.Продукция + ", " + ВыборкаПоЗатратам.ХарактеристикаПродукции + ", " + ВыборкаПоЗатратам.СерияПродукции + "
						|", СтатусСообщения.Важное);
				
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаОстаток, МассивКоэф, 2);
			МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаОстаток, МассивКоэф, 2);
			МассивСуммаНУ           = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэфНУ, 2);
			
		КонецЕсли;
		
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		//начало изменений оптим р/с
		ПРГ_ИнформацияОПоиске = Неопределено;
		//конец изменений 
		Пока ВыборкаБаза.Следующий() Цикл
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СуммаНУ           = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
				СуммаБУ           = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
				ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
				ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
				
				ВременнаяРазница  = ВременнаяРазница + СуммаБУ - СуммаНУ;
				Сумма             = СуммаНУ;
				
			Иначе
				Сумма             = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
				ПостояннаяРазница = 0;
				ВременнаяРазница  = 0;
			КонецЕсли;
			
			Если Сумма <> 0
			 ИЛИ ПостояннаяРазница <> 0 
			 ИЛИ ВременнаяРазница <> 0 Тогда
			
				// Формирование приходных движений по регистру "Незавершенное производство".
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					ХарактерЗатрат,
					ХарактерЗатрат, // Затрата 
					Неопределено, // ХарактеристикаЗатраты
					Неопределено, // СерияЗатраты
					НомерПередела,
					0,

					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Приход,
					НаборЗаписейНезавершенноеПроизводство
					);
					
				// Формирование движений по регистру бухгалтерии.	
				Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					
					СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
						СтруктураШапкиДокумента,
						СтруктураШапкиДокумента.ВидОтраженияВУчете,
						ВыборкаПоЗатратам,
						ВыборкаБаза,
						ВыборкаПоЗатратам.СтатьяЗатрат,
						ХарактерЗатрат,
						Сумма,
						ПостояннаяРазница,
						ВременнаяРазница,
						РегистрБухгалтерииНаборЗаписей
						);
						
				КонецЕсли;
				
				// Распределение затрат на выпуск продукции по базе.
				РаспределитьЗатратыНаВыпускПродукции(
					СтруктураШапкиДокумента,
					ВыборкаБазаНаПродукцию,
					ВыборкаБаза,
					ВыборкаПоЗатратам,
					ХарактерЗатрат,
					СпособРаспределения,
					Неопределено, //СтатусМатериальныхЗатрат
					НомерПередела,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					НаборЗаписейНезавершенноеПроизводство,
					НаборЗаписейЗатратыНаВыпуск,
					РегистрБухгалтерииНаборЗаписей,
					ПРГ_ИнформацияОПоиске
					);
			КонецЕсли;
				
			Индекс = Индекс + 1;
			
		КонецЦикла;
			
		// Формирование движений по регистру "Брак в производстве".
		СформироватьДвиженияПоРегиструБракВПроизводствеРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			СуммаОстаток,
			ПостояннаяРазницаОстаток,
			ВременнаяРазницаОстаток,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейБракВПроизводстве
			);
	
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьРасходыПоБракуВПроизводствеПоБазеРаспределения()

// Процедура распределения расходов по браку в производстве.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Общее количество переделов
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределениеРасходовПоБракуВПроизводстве(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	СпособРасчета,
	НомерПередела,
	ВсегоПеределов,
	СтруктураДвижений
	)
	
	ЗапросПоЗатратам = СформироватьЗапросПоБракуВПроизводстве(СтруктураШапкиДокумента, СпособРасчета);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда
		
		РаспределитьРасходыПоБракуВПроизводствеПоБазеРаспределения(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			НомерПередела,
			ВсегоПеределов,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияБракВПроизводстве,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияБракВПроизводстве.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияБракВПроизводстве.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеРасходовПоБракуВПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ РАСХОДОВ ПО СПОСОБУ РАСПРЕДЕЛЕНИЯ

// Процедура производит распределение общепроизводственных, общехозяйственных расходов и расходов по браку в производстве.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	СтруктураТаблицДвижений - Структура - Структура таблиц регистров
//	ДиректКостинг - Булево - Признак применения метода "Директ - костинг"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
Процедура РаспределениеКосвенныхРасходов(
	СтруктураШапкиДокумента, 
	СтруктураТаблицДвижений, 
	ДиректКостинг, 
	СпособРасчета
	) Экспорт
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.НУ;
	Иначе
		ВидУчетаПоПБУ18 = Неопределено;
	КонецЕсли;
	
	НачальныйПередел = 0;
	КонечныйПередел = 0;
	ВсегоПеределов = 0;
	МинимальныйПередел = 0;
	
	ПолучитьНачальныйИКонечныйНомерПередела(
		СтруктураШапкиДокумента,
		СпособРасчета,
		НачальныйПередел,
		КонечныйПередел,
		ВсегоПеределов,
		МинимальныйПередел
		);
		
	// Формирование запроса по незавершенному производству.
	ЗапросПоНезавершенномуПроизводству = СформироватьЗапросПоНезавершенномуПроизводству(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
		
	// Формирование запроса по затратам на выпуск.
	ЗапросПоЗатратамНаВыпуск = СформироватьЗапросПоЗатратамНаВыпуск(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
		
	// Формирование запроса по выпуску продукции и затратам на выпуск.		
	ЗапросПоВыпускуПродукцииИЗатратамНаВыпуск = СформироватьЗапросПоВыпускуПродукцииИЗатратамНаВыпуск(
		СтруктураШапкиДокумента, 
		СпособРасчета,
		Истина, // КосвенныеЗатраты
		Ложь // ЗатратыВстречногоВыпуска
		);
		
	// Формирование запроса по направлением выпуска продукции.
	ЗапросПоВыпускуПродукции = СформироватьЗапросПоНаправлениямВыпускаПродукции(
		СтруктураШапкиДокумента, 
		СпособРасчета,
		Истина, // КосвенныеЗатраты
		Ложь // ЗатратыВстречногоВыпуска
		);
		
	ЗапросПоИсключаемымНаправлениямВыпуска = СформироватьЗапросПоИсключаемымНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		Истина, // КосвенныеЗатраты
		Ложь // ЗатратыВстречногоВыпуска
		);
		
	// Формирование запроса по коэффициентам распределения по проектам.
	ЗапросРаспределениеПоПроектам = СформироватьЗапросРаспределениеПоПроектам(
		СтруктураШапкиДокумента
		);	
	РезультатЗапросаРаспределениеПоПроектам = ЗапросРаспределениеПоПроектам.Выполнить();
	
	МассивХарактеровРаспределения = Новый Массив;
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.УчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка());
	
	// Сформируем запрос по способам распределения статей затрат.	
	ЗапросПоСпособамРаспределенияЗатрат = СформироватьЗапросПоСпособамРаспределенияЗатрат(
		СтруктураШапкиДокумента,
		МассивХарактеровРаспределения,
		Ложь, // ФормироватьВременнуюТаблицу
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	РезультатЗапросаПоСпособамРаспределенияЗатрат = ЗапросПоСпособамРаспределенияЗатрат.Выполнить();
	
	// Сформируем запрос по базе распределения затрат.
	//начало изменений БП 04 
	//ТекстЗапросаСКомментариями = СформироватьТекстЗапросаБазаРаспределенияЗатрат();
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаБазаРаспределенияЗатратКосвенные();
	//конец изменений БП 04 
	ЗапросБазаРаспределения = СформироватьЗапросПоБазеРаспределенияЗатрат(СтруктураШапкиДокумента, ТекстЗапросаСКомментариями, Истина);
	РезультатЗапросаБазаРаспределения = ЗапросБазаРаспределения.Выполнить();
	
	//начало изменений БП 04 
	//ТекстЗапросаСКомментариями = СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию();
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукциюКосвенные();
	//конец изменений БП 04 
	ЗапросБазаРаспределенияНаПродукцию = СформироватьЗапросПоБазеРаспределенияЗатрат(СтруктураШапкиДокумента, ТекстЗапросаСКомментариями, Истина);
	РезультатЗапросаБазаРаспределенияНаПродукцию = ЗапросБазаРаспределенияНаПродукцию.Выполнить();
	
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента);
	
	// Распределение остатка расходов из незавершенного производства на выпуск продукции.
	РаспределениеОстаткаКосвенныхРасходовВПроизводстве(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоСпособамРаспределенияЗатрат,
		РезультатЗапросаБазаРаспределенияНаПродукцию,
		СпособРасчета,
		СтруктураДвижений
		);
		
	Для ТекНомПередела = НачальныйПередел По КонечныйПередел Цикл
		
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Распределение производственных расходов (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		РаспределениеПроизводственныхРасходов(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			СпособРасчета,
			ТекНомПередела,
			ВсегоПеределов,
			СтруктураДвижений
			);
		
		Если ТекНомПередела <> 0 Тогда	
			ОбщегоНазначения.Сообщение("- Распределение общепроизводственных и общехозяйственных расходов (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		//начало изменений БП 04
		РаспределениеОбщепроизводственныхИОбщехозяйственныхРасходовНАШЕ(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			РезультатЗапросаРаспределениеПоПроектам,
			ТекНомПередела,
			МинимальныйПередел,
			ВсегоПеределов,
			СтруктураДвижений,
			Ложь
			);
		РаспределениеОбщепроизводственныхИОбщехозяйственныхРасходовНАШЕ(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			РезультатЗапросаРаспределениеПоПроектам,
			ТекНомПередела,
			МинимальныйПередел,
			ВсегоПеределов,
			СтруктураДвижений,
			Истина
			);
			
		//конец изменений БП 04 
		
		РаспределениеОбщепроизводственныхИОбщехозяйственныхРасходов(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			РезультатЗапросаРаспределениеПоПроектам,
			ТекНомПередела,
			МинимальныйПередел,
			ВсегоПеределов,
			СтруктураДвижений
			);
		
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Распределение расходов по браку в производстве (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		РаспределениеРасходовПоБракуВПроизводстве(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			СпособРасчета,
			ТекНомПередела,
			ВсегоПеределов,
			СтруктураДвижений
			);
		
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Корректировка выпуска продукции (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		// Списание затрат из незавершенного производства на выпуск продукции.
		СписаниеЗатратИзНезавершенногоПроизводстваНаВыпускПродукции(
			СтруктураШапкиДокумента,
			ЗапросПоНезавершенномуПроизводству,
			ЗапросПоЗатратамНаВыпуск,
			ТекНомПередела,
			Истина, // РасчетКосвенныхЗатрат
			Ложь, // РасчетЗатратВстречногоВыпуска
			СтруктураДвижений
		);
		
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Корректировка движений по продукции (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		ТабТоваров = Новый ТаблицаЗначений;
		ТабТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабТоваров.Колонки.Добавить("ДокументОприходования");
		ТабТоваров.Колонки.Добавить("СчетУчета");
		
		КорректировкаДвиженийПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ЗапросПоВыпускуПродукцииИЗатратамНаВыпуск,
			ЗапросПоВыпускуПродукции,
			ЗапросПоИсключаемымНаправлениямВыпуска,
			РезультатЗапросаРаспределениеПоПроектам,
			ТекНомПередела,
			Истина, // КосвенныеЗатраты
			Ложь, // ЗатратыВстречногоВыпуска
			СтруктураДвижений,
			ТабТоваров
			);
			
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Корректировка стоимости партий (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")...");
		КонецЕсли;
		
		
		//начало изменений 
		ПРГ_КорректСписание = Истина;
		Если СтруктураШапкиДокумента.Свойство("ПРГ_БезКорректировкиСтоимости",ПРГ_КорректСписание) Тогда
			ПРГ_КорректСписание = ?(ПРГ_КорректСписание=Неопределено,Истина,Не ПРГ_КорректСписание);
		КонецЕсли;	
		//конец изменений 
		//начало изменений 
		Если ПРГ_КорректСписание Тогда
			
		//начало изменений Ожиганов 01.03.2016 себестоимость продукции, на которую не распределяются косвенные затраты 
		ПРГ_ДополнитьТаблицуТоваров(ТабТоваров,СтруктураШапкиДокумента,ТекНомПередела);
		//конец изменений 
			
			
		КорректировкаСтоимости.КорректировкаСписания(
			СтруктураШапкиДокумента.мНачДата, 
			СтруктураШапкиДокумента.мКонДата, 
			ТабТоваров, 
			СтруктураШапкиДокумента.Ссылка,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.ВидОтраженияВУчете,
			Ложь, // НеСписыватьНаПостоянныеЗатраты (данная переменная больше не используется)
			, // ДопПараметры
			ТекНомПередела = КонечныйПередел,
			Истина // ВстречныйВыпуск
			);
		КонецЕсли;
		//начало изменений 
		ЗакрытиеСчетовКосвенныхРасходовПроизводство(
			СтруктураШапкиДокумента, 
			СтруктураТаблицДвижений
		);
			
		ЗакрытиеСчетовКосвенныхРасходов(
			СтруктураШапкиДокумента, 
			ДиректКостинг, 
			СтруктураТаблицДвижений
		);
			
	КонецЦикла;
	
	//начало изменений Ожиганов 30.05.2016 выравнивание копеек по НУ, приведение остатков к БУ 
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		    ПРГ_ПриравнятьОстаткиНУкБУПФ = Ложь;
			
			Если СтруктураШапкиДокумента.Свойство("ПРГ_ПриравнятьОстаткиНУкБУПФ",ПРГ_ПриравнятьОстаткиНУкБУПФ)
				и ПРГ_ПриравнятьОстаткиНУкБУПФ Тогда
					Таблица = Новый ТаблицаЗначений;
					Таблица.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					Таблица.Колонки.Добавить("ДокументОприходования");
				
					КорректировкаСтоимости.ПРГ_ПопытатьсяПриравнятьНУкБУПоТМЦ(НачалоДня(СтруктураШапкиДокумента.мНачДата),КонецДня(СтруктураШапкиДокумента.мКонДата),
					СтруктураШапкиДокумента.Организация,
					Таблица,
					"НалоговыйУчет",
					СтруктураШапкиДокумента.Ссылка,
					Неопределено,
					Неопределено,
					3); //выпускаемые пф
			КонецЕсли;	
	КонецЕсли;
	//конец изменений 
	
КонецПроцедуры // РаспределениеКосвенныхРасходов()

// Процедура производит распределение расходов по базе распределения по продажам.
//
// Параметры
//	СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВыборкаПоЗатратам - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ВыборкаБазаРаспределения - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по базе распределения
//	МассивКоэф - Массив - Массив коэффициентов распределения
//	СчетСписания - ПланСчетовСсылка.Хозрасчетный или ПланСчетовСсылка.Налоговый - Счет списания затрат
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	ЕНВД - Булево - Признак распределения по деятельности, облагаемой ЕНВД
//	СуммаОстаток - Число - Сумма затрат
//  ПостояннаяРазницаОстаток - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазницаОстаток - Число - Сумма затрат в части временной разницы
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыПоБазеРаспределенияПоПродажам(
	СтруктураШапкиДокумента,
	ВыборкаПоЗатратам,
	ВыборкаБазаРаспределения,
	МассивКоэф,
	СчетСписания,
	ХарактерЗатрат,
	ЕНВД,
	СуммаОстаток,
	ПостояннаяРазницаОстаток,
	ВременнаяРазницаОстаток,
	НаборЗаписейЗатраты,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если СуммаОстаток = 0
	   И ПостояннаяРазницаОстаток = 0
	   И ВременнаяРазницаОстаток = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
		ОбщаяСумма = СуммаОстаток + ПостояннаяРазницаОстаток + ВременнаяРазницаОстаток;
		МассивОбщаяСумма        = ОбщегоНазначения.РаспределитьПропорционально(ОбщаяСумма, МассивКоэф, 2);		
		МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаОстаток, МассивКоэф, 2);
		МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаОстаток, МассивКоэф, 2);
		
	КонецЕсли;
	
	Индекс = 0;
	СуммаВсего = 0;
	ПостояннаяРазницаВсего = 0;
	ВременнаяРазницаВсего = 0;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЕНВД", ЕНВД);
	ПустаяНоменклатурнаяГруппа = Ложь;
	Если Не ВыборкаПоЗатратам.НоменклатурнаяГруппа.Пустая() Тогда
		СтруктураПоиска.Вставить("НоменклатурнаяГруппа", ВыборкаПоЗатратам.НоменклатурнаяГруппа);
		ВыборкаБазаРаспределения.Сбросить();
		Если Не ВыборкаБазаРаспределения.НайтиСледующий(СтруктураПоиска) Тогда
			ПустаяНоменклатурнаяГруппа = Истина;
			СтруктураПоиска.Удалить("НоменклатурнаяГруппа");
		КонецЕсли;	
	Иначе
		ПустаяНоменклатурнаяГруппа = Истина;
	КонецЕсли;
	
	//начало изменений
	ПослНомГруппа  = Неопределено;
	//конец изменений 
	
    ВыборкаБазаРаспределения.Сбросить();
	Пока ВыборкаБазаРаспределения.НайтиСледующий(СтруктураПоиска) Цикл
		
		Если ПустаяНоменклатурнаяГруппа Тогда
			
			Сумма = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
				ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
				ОбщаяСумма        = ?(МассивОбщаяСумма = Неопределено, 0, МассивОбщаяСумма[Индекс]);
				
				// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
				Если Сумма + ПостояннаяРазница + ВременнаяРазница <> ОбщаяСумма Тогда
					Если ВременнаяРазница <> 0 Тогда
						ВременнаяРазница = ОбщаяСумма - (Сумма + ПостояннаяРазница);
					ИначеЕсли ПостояннаяРазница <> 0 Тогда
						ПостояннаяРазница = ОбщаяСумма - Сумма;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПостояннаяРазница = 0;
				ВременнаяРазница = 0;
			КонецЕсли;
			
		Иначе
			Сумма = СуммаОстаток;
			ПостояннаяРазница = ПостояннаяРазницаОстаток;
			ВременнаяРазница = ВременнаяРазницаОстаток;
		КонецЕсли;
		
		СуммаВсего = СуммаВсего + Сумма;
		ПостояннаяРазницаВсего = ПостояннаяРазницаВсего + ПостояннаяРазница;
		ВременнаяРазницаВсего = ВременнаяРазницаВсего + ВременнаяРазница;
		
		СформироватьДвиженияПоРегиструБухгалтерииРаспределениеПоПродажам(
			СтруктураШапкиДокумента,
			СтруктураШапкиДокумента.ВидОтраженияВУчете,
			ВыборкаПоЗатратам,
			СчетСписания,
			ВыборкаБазаРаспределения.НоменклатурнаяГруппа,
			ХарактерЗатрат,
			Сумма,
			ПостояннаяРазница,
			ВременнаяРазница,
			РегистрБухгалтерииНаборЗаписей
		);
		//начало изменений
		ПослНомГруппа = ВыборкаБазаРаспределения.НоменклатурнаяГруппа;
		//конец изменений
		Если ВыборкаПоЗатратам.НоменклатурнаяГруппа.Пустая() Тогда
			Индекс = Индекс + 1;
		Иначе
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	//начало изменений 
	Если (ВременнаяРазницаОстаток - ВременнаяРазницаВсего <> 0) или (ПостояннаяРазницаОстаток - ПостояннаяРазницаВсего <> 0) Тогда
		СформироватьДвиженияПоРегиструБухгалтерииРаспределениеПоПродажам(
			СтруктураШапкиДокумента,
			СтруктураШапкиДокумента.ВидОтраженияВУчете,
			ВыборкаПоЗатратам,
			СчетСписания,
			ПослНомГруппа,
			ХарактерЗатрат,
			0,
			ПостояннаяРазницаОстаток - ПостояннаяРазницаВсего,
			ВременнаяРазницаОстаток - ВременнаяРазницаВсего,
			РегистрБухгалтерииНаборЗаписей
		);
		ВременнаяРазницаВсего  = ВременнаяРазницаОстаток;
		ПостояннаяРазницаВсего = ПостояннаяРазницаОстаток;
	КонецЕсли;	
	//конец измененйи
	
	// Формирование движений по регистру "Затраты".
	СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
		СтруктураШапкиДокумента,
		ВыборкаПоЗатратам,
		ХарактерЗатрат,
		СуммаВсего,
		ПостояннаяРазницаВсего,
		ВременнаяРазницаВсего,
		ВидДвиженияНакопления.Расход,
		НаборЗаписейЗатраты
	);
	
	Если СуммаВсего <> СуммаОстаток Тогда
		ОбщегоНазначения.Сообщение("Не удалось распределить затраты:
			|Счет учета: " + ВыборкаПоЗатратам.СчетУчета + "
			|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
			|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
			|Заказ: " + ВыборкаПоЗатратам.Заказ + "
			|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа + " 
			|Сумма: " + (СуммаОстаток - СуммаВсего) + "
			|", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры // РаспределитьЗатратыПоБазеРаспределенияПоПродажам()

// Процедура производит распределение расходов по видам деятельности (ЕНВД и не ЕНВД).
//	Используется только для регламентированного учета.
//
// Параметры:
//	СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВыборкаПоЗатратам - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ВыборкаБазаРаспределения - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по базе распределения
//	КоэффициентЕНВД - Число - Коэффициент распределения между видами деятельности (ЕНВД и не ЕНВД)
//	МассивКоэфНеЕНВД - Массив - Массив коэффициентов распределения по виду деятельсноти, не облагаемому ЕНВД
//	МассивКоэфЕНВД - Массив - Массив коэффициентов распределения по виду деятельности, облагаемому ЕНВД
//	СчетСписания - ПланСчетовСсылка.Хозрасчетный или ПланСчетовСсылка.Налоговый - Счет списания затрат
//	СчетСписанияЕНВД - ПланСчетовСсылка.Хозрасчетный или ПланСчетовСсылка.Налоговый - Счет списания затрат (ЕНВД)
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СуммаОстаток - Число - Сумма затрат
//  ПостояннаяРазницаОстаток - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазницаОстаток - Число - Сумма затрат в части временной разницы
//	СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределитьРасходыПоВидамДеятельности(
	СтруктураШапкиДокумента,
	ВыборкаПоЗатратам,
	ВыборкаБазаРаспределения,
	КоэффициентЕНВД,
	МассивКоэфНеЕНВД,
	МассивКоэфЕНВД,
	СчетСписания,
	СчетСписанияЕНВД,
	ХарактерЗатрат,
	СуммаОстаток,
	ПостояннаяРазницаОстаток,
	ВременнаяРазницаОстаток,
	СтруктураДвижений
	)
	
	Если ВыборкаПоЗатратам.ПодлежитРаспределению Тогда
		СуммаОстатокЕНВД = Окр(СуммаОстаток * КоэффициентЕНВД, 2, 1);
		СуммаОстатокНеЕНВД = СуммаОстаток - СуммаОстатокЕНВД;
		
		ПостояннаяРазницаЕНВД = Окр(ПостояннаяРазницаОстаток * КоэффициентЕНВД, 2, 1);
		ПостояннаяРазницаНеЕНВД = ПостояннаяРазницаОстаток - ПостояннаяРазницаЕНВД;
		
		ВременнаяРазницаЕНВД = Окр(ВременнаяРазницаОстаток * КоэффициентЕНВД, 2, 1);
		ВременнаяРазницаНеЕНВД = ВременнаяРазницаОстаток - ВременнаяРазницаЕНВД;
		
	ИначеЕсли ВыборкаПоЗатратам.ЕНВД Тогда
		СуммаОстатокЕНВД = СуммаОстаток;
		СуммаОстатокНеЕНВД = 0;
		
		ПостояннаяРазницаЕНВД = ПостояннаяРазницаОстаток;
		ПостояннаяРазницаНеЕНВД = 0;
		
		ВременнаяРазницаЕНВД = ВременнаяРазницаОстаток;
		ВременнаяРазницаНеЕНВД = 0;
		
	Иначе // не ЕНВД
		СуммаОстатокЕНВД = 0;
		СуммаОстатокНеЕНВД = СуммаОстаток;
		
		ПостояннаяРазницаЕНВД = 0;
		ПостояннаяРазницаНеЕНВД = ПостояннаяРазницаОстаток;
		
		ВременнаяРазницаЕНВД = 0;
		ВременнаяРазницаНеЕНВД = ВременнаяРазницаОстаток;
		
	КонецЕсли;
	
	// Распределение расходов по продажам, не облагаемым ЕНВД.
	РаспределитьЗатратыПоБазеРаспределенияПоПродажам(
		СтруктураШапкиДокумента,
		ВыборкаПоЗатратам,
		ВыборкаБазаРаспределения,
		МассивКоэфНеЕНВД,
		СчетСписания,
		ХарактерЗатрат,
		Ложь, // ЕНВД
		СуммаОстатокНеЕНВД,
		ПостояннаяРазницаНеЕНВД,
		ВременнаяРазницаНеЕНВД,
		СтруктураДвижений.ДвиженияЗатраты,
		СтруктураДвижений.Операция
	);
	
	// Распределение расходов по продажам, облагаемым ЕНВД.
	РаспределитьЗатратыПоБазеРаспределенияПоПродажам(
		СтруктураШапкиДокумента,
		ВыборкаПоЗатратам,
		ВыборкаБазаРаспределения,
		МассивКоэфЕНВД,
		СчетСписанияЕНВД,
		ХарактерЗатрат,
		Истина, // ЕНВД
		СуммаОстатокЕНВД,
		ПостояннаяРазницаЕНВД,
		ВременнаяРазницаЕНВД,
		СтруктураДвижений.ДвиженияЗатраты,
		СтруктураДвижений.Операция
	);
	
КонецПроцедуры // РаспределитьРасходыПоВидамДеятельности()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ БАЗЫ РАСПРЕДЕЛЕНИЯ ПО ПРОДАЖАМ

// Функция формирует запрос по базе распределения по продажам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//
// Возвращаемое значение:
//   Запрос – Запрос по базе распределения
//
Функция СформироватьЗапросБазаРаспределенияПоПродажам(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	)
	
	Запрос = Новый Запрос;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА СчетаУчетаЕНВД.ЕНВД ТОГДА 
		|		ИСТИНА 
		|	ИНАЧЕ 
		|		ЛОЖЬ 
		|	КОНЕЦ КАК ЕНВД,
		|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
		|	СУММА(-(ХозрасчетныйОбороты.СуммаОборот)) КАК База
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница, &КонГраница, Период, 
		|		Счет В ИЕРАРХИИ (&МассивСчетовБазы), , 
		|		Организация = &Организация
		|	) КАК ХозрасчетныйОбороты
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			СчетаУчетаЕНВД.Счет,
		|			Истина КАК ЕНВД
		|		ИЗ
		|			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
		|		ГДЕ
		|			Не СчетаУчетаЕНВД.ПодлежитРаспределению
		|		) КАК СчетаУчетаЕНВД
		|	ПО
		|		ХозрасчетныйОбороты.Счет = СчетаУчетаЕНВД.Счет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА СчетаУчетаЕНВД.ЕНВД ТОГДА 
		|		ИСТИНА 
		|	ИНАЧЕ 
		|		ЛОЖЬ 
		|	КОНЕЦ,
		|	ХозрасчетныйОбороты.Субконто1
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕНВД,
		|	НоменклатурнаяГруппа
		|";
		
		Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
		Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		
		//Массив счетов, по которым формируется база распределения расходов
		МассивСчетовБазы = Новый Массив;
		
		ДиректКостингБазаРаспределения = СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостингБазаРаспределения;
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы
		   И ДиректКостингБазаРаспределения = Перечисления.ДиректКостингБазаРаспределения.Себестоимость
		Тогда
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
		Иначе
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСчетовБазы", МассивСчетовБазы);
	
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL
		|";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросБазаРаспределенияПоПродажам()

// Функция формирует массив коэффициентов распределения затрат по продажам.
//
// Параметры
//	ВыборкаБазаРаспределения - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по базе распределения по продажам.
//	ЕНВД - Булево - Признак распределения по деятельности, облагаемой ЕНВД
//
// Возвращаемое значение:
//	Массив – Массив коэффициентов
//
Функция ПолучитьМассивКоэффициентовРаспределенияПоПродажам(
	ВыборкаБазаРаспределения,
	ЕНВД
	)
	
	МассивКоэф = Новый Массив;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЕНВД", ЕНВД);
	
    ВыборкаБазаРаспределения.Сбросить();
	Пока ВыборкаБазаРаспределения.НайтиСледующий(СтруктураПоиска) Цикл
			
		МассивКоэф.Добавить(ВыборкаБазаРаспределения.База);
			
	КонецЦикла;

	Возврат МассивКоэф;

КонецФункции // ПолучитьМассивКоэффициентовРаспределенияПоПродажам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА РАСПРЕДЕЛЕНИЯ РАСХОДОВ ПО ПРОДАЖАМ

// Процедура распределения расходов по продажам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат запроса по затратам
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по распределению по проектам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределитьРасходыПоПродажам(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаРаспределениеПоПроектам,
	ХарактерЗатрат,
	СтруктураДвижений
	)
	
	ВыборкаБазаРаспределения = РезультатЗапросаБазаРаспределения.Выбрать();
	ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
	
	// Получим коэффициент распределения на ЕНВД.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(
			СтруктураШапкиДокумента.Организация, 
			СтруктураШапкиДокумента.мКонДата, 
			СтруктураШапкиДокумента.мНачДата
		);
		МассивКоэфНеЕНВД = ПолучитьМассивКоэффициентовРаспределенияПоПродажам(
			ВыборкаБазаРаспределения,
			Ложь // ЕНВД
		);
		МассивКоэфЕНВД = ПолучитьМассивКоэффициентовРаспределенияПоПродажам(
			ВыборкаБазаРаспределения,
			Истина // ЕНВД
		);
	Иначе
		КоэффициентЕНВД = 0;
		МассивКоэфНеЕНВД = Новый Массив;
		МассивКоэфЕНВД = Новый Массив;
	КонецЕсли;
	
	// Получим счета списания затрат.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СчетСписания = ПолучитьСчетСписанияЗатрат(
			СтруктураШапкиДокумента,
			СтруктураШапкиДокумента.ВидОтраженияВУчете,
			ХарактерЗатрат,
			Ложь // ЕНВД
		);
        СчетСписанияЕНВД = ПолучитьСчетСписанияЗатрат(
			СтруктураШапкиДокумента,
			СтруктураШапкиДокумента.ВидОтраженияВУчете,
			ХарактерЗатрат,
			Истина // ЕНВД
		);
	Иначе
		СчетСписания = Неопределено;
		СчетСписанияЕНВД = Неопределено;
	КонецЕсли;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазницаОстаток = ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВременнаяРазницаОстаток = ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
		Иначе
			ПостояннаяРазницаОстаток = 0;
			ВременнаяРазницаОстаток = 0;
		КонецЕсли;
		
		// Пропускаем строки с пустой суммой.
		Если СуммаОстаток = 0
		   И ПостояннаяРазницаОстаток = 0
		   И ВременнаяРазницаОстаток = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Распределим затраты по видам деятельности.
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		 
		 	РаспределитьРасходыПоВидамДеятельности(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаБазаРаспределения,
				КоэффициентЕНВД,
				МассивКоэфНеЕНВД,
				МассивКоэфЕНВД,
				СчетСписания,
				СчетСписанияЕНВД,
				ХарактерЗатрат,
				СуммаОстаток,
				ПостояннаяРазницаОстаток,
				ВременнаяРазницаОстаток,
				СтруктураДвижений
			);
						
		Иначе
			// Формирование движений по регистру "Затраты".
			СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ХарактерЗатрат,
				СуммаОстаток,
				ПостояннаяРазницаОстаток,
				ВременнаяРазницаОстаток,
				ВидДвиженияНакопления.Расход,
				СтруктураДвижений.ДвиженияЗатраты
			);
			// is ЯннуровВФ нач 20140702 0И-001466
			Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда 
				лПроводка = СтруктураДвижений.Операция.Добавить();
				лПроводка.Период = СтруктураШапкиДокумента.Период;
				лПроводка.Организация = СтруктураШапкиДокумента.Организация;
				лПроводка.СчетКт = ВыборкаПоЗатратам.СчетУчета;
				Если лПроводка.СчетКт = ПланыСчетов.Международный.АдминистративныеРасходы 
				 Или лПроводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Международный.АдминистративныеРасходы) Тогда 
					БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетКт, лПроводка.СубконтоКт, 1, ВыборкаПоЗатратам.Подразделение);
					БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетКт, лПроводка.СубконтоКт, 2, ВыборкаПоЗатратам.СтатьяЗатрат);
					лПроводка.СчетДт = ПланыСчетов.Международный._УправленческиеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетДт, лПроводка.СубконтоДт, 1, ВыборкаПоЗатратам.НоменклатурнаяГруппа);
				ИначеЕсли лПроводка.СчетКт = ПланыСчетов.Международный.РасходыНаПродажу
				 Или лПроводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Международный.РасходыНаПродажу) Тогда 
					БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетКт, лПроводка.СубконтоКт, 1, ВыборкаПоЗатратам.СтатьяЗатрат);
					БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетКт, лПроводка.СубконтоКт, 2, ВыборкаПоЗатратам.Подразделение);
					лПроводка.СчетДт = ПланыСчетов.Международный._РасходыНаПродажу;
					БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетДт, лПроводка.СубконтоДт, 1, ВыборкаПоЗатратам.НоменклатурнаяГруппа);
				КонецЕсли;
				лПроводка.Сумма = СуммаОстаток;
				лПроводка.Содержание = ПолучитьСодержаниеПроводкиПоХарактеруЗатрат(ХарактерЗатрат);
			КонецЕсли;
			// is ЯннуровВФ кон 20140702
		КонецЕсли;
			
		// Формирование движений по регистру "Затраты (обороты)".
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			РаспределитьСписанныеЗатратыПоПроектам(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаРаспределениеПоПроектам,
				СуммаОстаток,
				СтруктураДвижений.ДвиженияЗатратыОбороты
			);
			
		КонецЕсли;
				
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьРасходыПоПродажам()

// Процедура списания издержек обращения и коммерческих расходов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//
Процедура РаспределениеРасходовПоПродажам(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	) Экспорт
	
	РаспределятьТранспортныеРасходы = ПолучитьПризнакРаспределенияТранспортныхРасходов(
		СтруктураШапкиДокумента,
		ХарактерЗатрат
	);
	
	// Распределение транспортных расходов производится в отдельной процедуре.
	Если РаспределятьТранспортныеРасходы Тогда
		//начало изменений Ожиганов А. 13.02.2017 62276 закрытие транспортных расходов только по ну 
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			РаспределениеТранспортныхРасходовтолькоПоНУ(
				СтруктураШапкиДокумента,
				ХарактерЗатрат
			);
		КонецЕсли;	
		//конец изменений 
		РаспределениеТранспортныхРасходов(
			СтруктураШапкиДокумента,
			ХарактерЗатрат
		);
	КонецЕсли;
	
	// Исключаем из запроса остатки затрат, относящиеся к транспортным расходам.
	Если РаспределятьТранспортныеРасходы Тогда
		ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы;
		УсловиеВидРасходовНУ = ВидСравнения.НеРавно;
	Иначе
		ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
		УсловиеВидРасходовНУ = "";
	КонецЕсли;
	
	// Формирование запроса по затратам.
	ЗапросПоЗатратам = СформироватьЗапросПоЗатратам(
		СтруктураШапкиДокумента, 
		ХарактерЗатрат,
		ВидРасходовНУ,
		УсловиеВидРасходовНУ
		);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если РезультатЗапросаПоЗатратам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по базе распределения.
	ЗапросБазаРаспределения = СформироватьЗапросБазаРаспределенияПоПродажам(
		СтруктураШапкиДокумента,
		ХарактерЗатрат
	);
	РезультатЗапросаБазаРаспределения = ЗапросБазаРаспределения.Выполнить();
		
	// Формирование запроса по коэффициентам распределения по проектам.
	ЗапросРаспределениеПоПроектам = СформироватьЗапросРаспределениеПоПроектам(
		СтруктураШапкиДокумента
		);	
	РезультатЗапросаРаспределениеПоПроектам = ЗапросРаспределениеПоПроектам.Выполнить();
		
	СтруктураИмен = Новый Структура("
		|Затраты, 
		|ЗатратыОбороты,
		|Операция
		|");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
		
	// Распределим расходы по продажам.
	РаспределитьРасходыПоПродажам(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоЗатратам,
		РезультатЗапросаБазаРаспределения,
		РезультатЗапросаРаспределениеПоПроектам,
		ХарактерЗатрат,
		СтруктураДвижений
	);
		
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.ДвиженияЗатратыОбороты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыОбороты.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеРасходовПоПродажам()

// Процедура распределения транспортных расходов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат запроса по затратам
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по распределению по проектам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределитьТранспортныеРасходы(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаБазаРаспределения,
	ХарактерЗатрат,
	СтруктураДвижений
	)
	
	ВыборкаБазаРаспределения = РезультатЗапросаБазаРаспределения.Выбрать();
	
	// Получим коэффициент распределения на ЕНВД.
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(
		СтруктураШапкиДокумента.Организация, 
		СтруктураШапкиДокумента.мКонДата, 
		СтруктураШапкиДокумента.мНачДата
	);
	МассивКоэфНеЕНВД = ПолучитьМассивКоэффициентовРаспределенияПоПродажам(
		ВыборкаБазаРаспределения,
		Ложь // ЕНВД
	);
	МассивКоэфЕНВД = ПолучитьМассивКоэффициентовРаспределенияПоПродажам(
		ВыборкаБазаРаспределения,
		Истина // ЕНВД
	);
	
	// Получим счета списания затрат.
	СчетСписания = ПолучитьСчетСписанияЗатрат(
		СтруктураШапкиДокумента,
		СтруктураШапкиДокумента.ВидОтраженияВУчете,
		ХарактерЗатрат,
		Ложь // ЕНВД
	);
	СчетСписанияЕНВД = ПолучитьСчетСписанияЗатрат(
		СтруктураШапкиДокумента,
		СтруктураШапкиДокумента.ВидОтраженияВУчете,
		ХарактерЗатрат,
		Истина // ЕНВД
	);
	
	КоэффициентСписанияТранспортныхРасходов = ПолучитьКоэффициентСписанияТранспортныхРасходов(
		СтруктураШапкиДокумента
	);
	
	МассивКоэфСумма = Новый Массив;
	МассивКоэфПостояннаяРазница = Новый Массив;
	МассивКоэфВременнаяРазница = Новый Массив;
	МассивКоэфОбщаяСумма = Новый Массив;
	
	ВсегоСумма = 0;
	ВсегоПостояннаяРазница = 0;
	ВсегоВременнаяРазница = 0;

	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		МассивКоэфСумма.Добавить(ВыборкаПоЗатратам.СуммаОстаток);
		ВсегоСумма = ВсегоСумма + ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ВсегоПостояннаяРазница = ВсегоПостояннаяРазница + ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВсегоВременнаяРазница = ВсегоВременнаяРазница + ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
			
			МассивКоэфПостояннаяРазница.Добавить(ВыборкаПоЗатратам.ПостояннаяРазницаОстаток);
			МассивКоэфВременнаяРазница.Добавить(ВыборкаПоЗатратам.ВременнаяРазницаОстаток);
			
			МассивКоэфОбщаяСумма.Добавить(ВыборкаПоЗатратам.СуммаОстаток +
				ВыборкаПоЗатратам.ПостояннаяРазницаОстаток +
				ВыборкаПоЗатратам.ВременнаяРазницаОстаток);
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаОстаток = ВсегоСумма - Окр(ВсегоСумма * КоэффициентСписанияТранспортныхРасходов, 2, 1);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ВсегоОбщаяСумма = ВсегоСумма + ВсегоПостояннаяРазница + ВсегоВременнаяРазница;
		ОбщаяСуммаОстаток = ВсегоОбщаяСумма - Окр(ВсегоОбщаяСумма * КоэффициентСписанияТранспортныхРасходов, 2, 1);
		
		ПостояннаяРазницаОстаток = ВсегоПостояннаяРазница - Окр(ВсегоПостояннаяРазница * КоэффициентСписанияТранспортныхРасходов, 2, 1);
		ВременнаяРазницаОстаток = ВсегоВременнаяРазница - Окр(ВсегоВременнаяРазница * КоэффициентСписанияТранспортныхРасходов, 2, 1);
		
		// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
		Если СуммаОстаток + ПостояннаяРазницаОстаток + ВременнаяРазницаОстаток <> ОбщаяСуммаОстаток Тогда
			Если ВременнаяРазницаОстаток <> 0 Тогда
				ВременнаяРазницаОстаток = ОбщаяСуммаОстаток - (СуммаОстаток + ПостояннаяРазницаОстаток);
			ИначеЕсли ПостояннаяРазницаОстаток <> 0 Тогда
				ПостояннаяРазницаОстаток = ОбщаяСуммаОстаток - СуммаОстаток;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэфСумма, 2);
		
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
		МассивОбщаяСумма        = ОбщегоНазначения.РаспределитьПропорционально(ОбщаяСуммаОстаток, МассивКоэфОбщаяСумма, 2);
		МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаОстаток, МассивКоэфПостояннаяРазница, 2);
		МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаОстаток, МассивКоэфВременнаяРазница, 2);
		
	КонецЕсли;
	
	Индекс = 0;
	ВыборкаПоЗатратам.Сбросить();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		Сумма = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
			ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
			ОбщаяСумма        = ?(МассивОбщаяСумма = Неопределено, 0, МассивОбщаяСумма[Индекс]);
			
			// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
			Если Сумма + ПостояннаяРазница + ВременнаяРазница <> ОбщаяСумма Тогда
				Если ВременнаяРазница <> 0 Тогда
					ВременнаяРазница = ОбщаяСумма - (Сумма + ПостояннаяРазница);
				ИначеЕсли ПостояннаяРазница <> 0 Тогда
					ПостояннаяРазница = ОбщаяСумма - Сумма;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПостояннаяРазница = 0;
			ВременнаяРазница = 0;
		КонецЕсли;
		
		РаспределитьРасходыПоВидамДеятельности(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаБазаРаспределения,
			КоэффициентЕНВД,
			МассивКоэфНеЕНВД,
			МассивКоэфЕНВД,
			СчетСписания,
			СчетСписанияЕНВД,
			ХарактерЗатрат,
			Сумма,
			ПостояннаяРазница,
			ВременнаяРазница,
			СтруктураДвижений
		);
	
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТранспортныеРасходы()

// Функция получает признак необходимости распределения транспортных расходов.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//
// Возвращаемое значение:
//	Булево - признак необходимости распределения транспортных расходов
//
Функция ПолучитьПризнакРаспределенияТранспортныхРасходов(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	)
	
	РаспределятьТранспортныеРасходы = Ложь;
	
	// Транспортные расходы распределяем только в регламентированном учете
	// и только для издержек обращения.
	Если (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы)
	   И (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
			ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете)
	Тогда
		РаспределятьТранспортныеРасходы = Истина;
	КонецЕсли;
	
	Возврат РаспределятьТранспортныеРасходы;
	
КонецФункции // ПолучитьПризнакРаспределенияТранспортныхРасходов()

// Процедура распределения транспортных расходов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//
Процедура РаспределениеТранспортныхРасходов(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	)
	
	// Формирование запроса по затратам, в части транспортных расходов.
	ЗапросПоЗатратам = СформироватьЗапросПоЗатратам(
		СтруктураШапкиДокумента, 
		ХарактерЗатрат,
		Перечисления.ВидыРасходовНУ.ТранспортныеРасходы,
		ВидСравнения.Равно
		);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если РезультатЗапросаПоЗатратам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по базе распределения.
	ЗапросБазаРаспределения = СформироватьЗапросБазаРаспределенияПоПродажам(
		СтруктураШапкиДокумента,
		ХарактерЗатрат
	);
	РезультатЗапросаБазаРаспределения = ЗапросБазаРаспределения.Выполнить();
		
	СтруктураИмен = Новый Структура("
		|Затраты, 
		|Операция
		|");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
		
	// Распределим расходы по продажам.
	РаспределитьТранспортныеРасходы(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоЗатратам,
		РезультатЗапросаБазаРаспределения,
		ХарактерЗатрат,
		СтруктураДвижений
	);
		
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеТранспортныхРасходов()

////////////////////////////////////////////////////////////////////////////////

// Процедура сворачивает движения по регистрам.
//
Процедура СвернутьДвиженияПоРегистрам(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИмен = Новый Структура("Операция");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	РегистрБухгалтерииНаборЗаписей = СтруктураДвижений.Операция;
	РегистрБухгалтерииНаборЗаписей.Прочитать();
	
	СвернутьТаблицуДвиженийРегистраБухгалтерии(РегистрБухгалтерииНаборЗаписей);
	
	Если РегистрБухгалтерииНаборЗаписей.Модифицированность() Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СвернутьДвиженияПоРегистрам()

// Процедура сворачивает движения по регистру бухгалтерии
//
// Параметры:
//	РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Новый набор записей регистра бухгалтерии
//
Процедура СвернутьТаблицуДвиженийРегистраБухгалтерии(
	РегистрБухгалтерииНаборЗаписей
	)
	
	ИзмеренияСтр = "Период, Регистратор, Активность, СчетДт, СчетКт";
	МетаРег = РегистрБухгалтерииНаборЗаписей.Метаданные();
	Для Каждого Измерение Из МетаРег.Измерения Цикл
		Если Измерение.Балансовый Тогда
			ИзмеренияСтр = ИзмеренияСтр + ", " + Измерение.Имя;
		Иначе
			ИзмеренияСтр = ИзмеренияСтр + ", " + Измерение.Имя + "Дт";
			ИзмеренияСтр = ИзмеренияСтр + ", " + Измерение.Имя + "Кт";
		КонецЕсли;
	КонецЦикла;
	
	СубконтоСтр = "";
	Для К = 1 По МетаРег.ПланСчетов.МаксКоличествоСубконто Цикл
		СубконтоСтр = СубконтоСтр + ", ВидСубконтоДт" + К + ", СубконтоДт" + К;
		СубконтоСтр = СубконтоСтр + ", ВидСубконтоКт" + К + ", СубконтоКт" + К;
	КонецЦикла;
	
	Для Каждого Измерение Из МетаРег.Реквизиты Цикл
		ИзмеренияСтр = ИзмеренияСтр + ", " + Измерение.Имя;
	КонецЦикла;
	
	РесурсыСтр = "";
	Для Каждого Ресурс Из МетаРег.Ресурсы Цикл
		Если Ресурс.Балансовый Тогда
			РесурсыСтр = РесурсыСтр + ", " + Ресурс.Имя;
		Иначе
			РесурсыСтр = РесурсыСтр + ", " + Ресурс.Имя + "Дт";
			РесурсыСтр = РесурсыСтр + ", " + Ресурс.Имя + "Кт";
		КонецЕсли;
	КонецЦикла;
	РесурсыСтр = Сред( РесурсыСтр, 3);
	
	ТаблицаРегистраБухгалтерии = РегистрБухгалтерииНаборЗаписей.Выгрузить();
	ТаблицаРегистраБухгалтерии.Свернуть(ИзмеренияСтр + СубконтоСтр, РесурсыСтр);
	
	СтруктРесурсы = Новый Структура(РесурсыСтр);
	СтруктПоиска  = Новый Структура;
	Для Каждого Ресурс Из СтруктРесурсы Цикл
		СтруктПоиска.Вставить(Ресурс.Ключ, 0);
	КонецЦикла;
	МассивПустСтрок = ТаблицаРегистраБухгалтерии.НайтиСтроки(СтруктПоиска);
	Для К = 0 По МассивПустСтрок.ВГраница() Цикл
		ТаблицаРегистраБухгалтерии.Удалить(МассивПустСтрок[К]);
	КонецЦикла;
	
	СтруктПоля = Новый Структура(ИзмеренияСтр + ", " + РесурсыСтр);
	
	РегистрБухгалтерииНаборЗаписей.Очистить();
	РегистрБухгалтерииНаборЗаписей.Записать();
	
	Для Каждого Проводка Из ТаблицаРегистраБухгалтерии Цикл
		
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		Для Каждого Поле Из СтруктПоля Цикл
			НоваяПроводка[Поле.Ключ] = Проводка[Поле.Ключ];
		КонецЦикла;
		Для К = 1 По Проводка.СчетДт.ВидыСубконто.Количество() Цикл
			НоваяПроводка.СубконтоДт.Вставить(Проводка["ВидСубконтоДт" + К], Проводка["СубконтоДт" + К]);
		КонецЦикла;
		Для К = 1 По Проводка.СчетКт.ВидыСубконто.Количество() Цикл
			НоваяПроводка.СубконтоКт.Вставить(Проводка["ВидСубконтоКт" + К], Проводка["СубконтоКт" + К]);
		КонецЦикла;
		
	КонецЦикла;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СвернутьТаблицуДвиженийРегистраБухгалтерии()

// Процедура распределяет затраты на выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//	ВыборкаБаза - ВыборкаИзРезультатаЗапроса - Выборка по базе распределения на продукцию
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиЗатраты - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Текущий способ распределения
//	СтатусМатериальныхЗатрат - ПеречислениеСсылка.СтатусыМатериальныхЗатратНаПроизводство - Текущий статус материальных затрат
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//  СуммаОстаток - Число - Сумма затрат
//  ПостояннаяРазницаОстаток - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазницаОстаток - Число - Сумма затрат в части временной разницы
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыНаВыпускПродукцииНАШЕ(
	СтруктураШапкиДокумента,
	//начало изменений оптим
	ВыборкаБаза_Выборка,
	//конец изменений
	СтрокаВыборки,
	СтрокаВыборкиЗатраты,
	ХарактерЗатрат,
	СпособРаспределения,
	СтатусМатериальныхЗатрат,
	НомерПередела,
	СуммаОстаток,
	ПостояннаяРазницаОстаток,
	ВременнаяРазницаОстаток,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	ПРГ_ИнформацияОПоиске
	)
	
	Если СуммаОстаток = 0
	   И ПостояннаяРазницаОстаток = 0
	   И ВременнаяРазницаОстаток = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	//начало изменений
	Если ПРГ_ИнформацияОПоиске = Неопределено Тогда
		 //ВыборкаБаза_Выборка.Сбросить();
		 ПРГ_РезЗапроса = ВыборкаБаза_Выборка.Владелец();
		 ПРГ_ИнформацияОПоиске = Новый Структура;
		 ПРГ_ИнформацияОПоиске.Вставить("ПРГ_ТаблРаспредления",ПРГ_РезЗапроса.Выгрузить());
		 
		 ПРГ_ИнформацияОПоиске.Вставить("СтруктураПоиска",Неопределено);
		 ПРГ_ИнформацияОПоиске.Вставить("НайдСтроки",Неопределено);
		 
	КонецЕсли;	
	//конец изменений
	
	СтруктураПоиска = ПолучитьСтруктуруПоискаСтрокБазыРаспределения(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		СтрокаВыборкиЗатраты,
		ХарактерЗатрат,
		СпособРаспределения,
		Ложь // РаспределятьПустуюАналитику
	);
	
	МассивКоэф = Новый Массив;
	
	ВсегоБазаРаспределения = 0;
	ВсегоБазаРаспределенияНЗП = 0;
	//начало изменений оптим
	Если ПРГ_ИнформацияОПоиске.СтруктураПоиска = Неопределено Тогда
		ПРГ_ИнформацияОПоиске.СтруктураПоиска = СтруктураПоиска;
		ПРГ_ИнформацияОПоиске.НайдСтроки = ПРГ_ИнформацияОПоиске.ПРГ_ТаблРаспредления.НайтиСтроки(СтруктураПоиска);
	Иначе
		НужноИскать = Ложь;
		Для Каждого ПРГ_Тек Из СтруктураПоиска  Цикл
			ПРГ_НайдЗнч = Неопределено;
			Если ПРГ_ИнформацияОПоиске.СтруктураПоиска.Свойство(ПРГ_Тек.Ключ,ПРГ_НайдЗнч) Тогда
				Если ПРГ_НайдЗнч = ПРГ_Тек.Значение Тогда
					НужноИскать = Истина;
					прервать;
				КонецЕсли;	
			Иначе
				НужноИскать = Истина;
				прервать;
			КонецЕсли;	
		КонецЦикла;	
		Если НужноИскать Тогда
			ПРГ_ИнформацияОПоиске.СтруктураПоиска = СтруктураПоиска;
			ПРГ_ИнформацияОПоиске.НайдСтроки = ПРГ_ИнформацияОПоиске.ПРГ_ТаблРаспредления.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений
	//начало изменений оптим
	//ВыборкаБаза.Сбросить();
	//Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
	Для Каждого ВыборкаБаза Из ПРГ_ИнформацияОПоиске.НайдСтроки Цикл
	//конец изменений	
			
		Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
			МассивКоэф.Добавить(0);
			ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.База + ВыборкаБаза.БазаОстатокНЗП;
		Иначе
			МассивКоэф.Добавить(ВыборкаБаза.База);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
			ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
		КонецЕсли;
													
	КонецЦикла;
	
	// Если не удалось определить базу распределения,
	// попробуем распределить пустые номенклатурные группы и пустые заказы
	// по всем номенклатурным группам и всем заказам.
	Если ВсегоБазаРаспределения = 0 Тогда
		
		СтруктураПоиска = ПолучитьСтруктуруПоискаСтрокБазыРаспределения(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборкиЗатраты,
			ХарактерЗатрат,
			СпособРаспределения,
			Истина // РаспределятьПустуюАналитику
		);
		
		МассивКоэф = Новый Массив;
		
		ВсегоБазаРаспределения = 0;
		ВсегоБазаРаспределенияНЗП = 0;
		
		//начало изменений оптим
		ПРГ_ИнформацияОПоиске.СтруктураПоиска = СтруктураПоиска;
		ПРГ_ИнформацияОПоиске.НайдСтроки = ПРГ_ИнформацияОПоиске.ПРГ_ТаблРаспредления.НайтиСтроки(СтруктураПоиска);
		
		//ВыборкаБаза.Сбросить();
		//Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
		Для Каждого ВыборкаБаза Из ПРГ_ИнформацияОПоиске.НайдСтроки Цикл	
		//конец изменений	
				
			Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
				МассивКоэф.Добавить(0);
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.База + ВыборкаБаза.БазаОстатокНЗП;
			Иначе
				МассивКоэф.Добавить(ВыборкаБаза.База);
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
			КонецЕсли;
														
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВсегоБазаРаспределения <> 0 Тогда
		
		// Определим остаток затрат для распределения.
		СуммаНаВыпуск = 0;
		ПостояннаяРазницаНаВыпуск = 0;
		ВременнаяРазницаНаВыпуск = 0;
				
		РассчитатьОстатокСуммыЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ВсегоБазаРаспределения,
			ВсегоБазаРаспределенияНЗП,
			СуммаОстаток,
			ПостояннаяРазницаОстаток,
			ВременнаяРазницаОстаток,
			СуммаНаВыпуск,
			ПостояннаяРазницаНаВыпуск,
			ВременнаяРазницаНаВыпуск
			);
	
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаНаВыпуск, МассивКоэф, 2);
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
			МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаНаВыпуск, МассивКоэф, 2);
			МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаНаВыпуск, МассивКоэф, 2);
			
			ОбщаяСуммаНаВыпуск = СуммаНаВыпуск + ПостояннаяРазницаНаВыпуск + ВременнаяРазницаНаВыпуск;
			МассивОбщаяСумма   = ОбщегоНазначения.РаспределитьПропорционально(ОбщаяСуммаНаВыпуск, МассивКоэф, 2);
				
		КонецЕсли;
		
		Индекс = 0;
		//начало изменений оптим
		//ВыборкаБаза.Сбросить();
		//Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
		Для Каждого ВыборкаБаза Из ПРГ_ИнформацияОПоиске.НайдСтроки Цикл
		//конец изменений
					
			Сумма = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
				ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
				ОбщаяСумма        = ?(МассивОбщаяСумма = Неопределено, 0, МассивОбщаяСумма[Индекс]);
				
				// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
				Если Сумма + ПостояннаяРазница + ВременнаяРазница <> ОбщаяСумма Тогда
					Если ВременнаяРазница <> 0 Тогда
						ВременнаяРазница = ОбщаяСумма - (Сумма + ПостояннаяРазница);
					ИначеЕсли ПостояннаяРазница <> 0 Тогда
						ПостояннаяРазница = ОбщаяСумма - Сумма;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПостояннаяРазница = 0;
				ВременнаяРазница  = 0;
			КонецЕсли;
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаБаза,
				СтрокаВыборкиЗатраты.СтатьяЗатрат,
				ХарактерЗатрат,
				СтатусМатериальныхЗатрат,
				Сумма,
				ПостояннаяРазница,
				ВременнаяРазница,
				НаборЗаписейЗатратыНаВыпуск
				);
				
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
			   И СтрокаВыборки.НоменклатурнаяГруппа <> ВыборкаБаза.НоменклатурнаяГруппа Тогда
				
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					СтрокаВыборки,
					ВыборкаБаза,
					СтрокаВыборкиЗатраты.СтатьяЗатрат,
					ХарактерЗатрат,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					РегистрБухгалтерииНаборЗаписей
					);
				
			КонецЕсли;
				
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		// Формирование расходных движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборкиЗатраты.СтатьяЗатрат,
			ХарактерЗатрат,
			ХарактерЗатрат, // Затрата 
			Неопределено, // ХарактеристикаЗатраты
			Неопределено, // СерияЗатраты
			НомерПередела,
			0, // Количество
			СуммаНаВыпуск,
			ПостояннаяРазницаНаВыпуск,
			ВременнаяРазницаНаВыпуск,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство
			);
			
	КонецЕсли;

КонецПроцедуры // РаспределитьЗатратыНаВыпускПродукции()

Процедура ПРГЗакрытиеСчетовКосвенныхРасходовБрака(СтруктураШапкиДокумента, ДиректКостинг, СтруктураТаблицДвижений, СтруктураДвижений = Неопределено) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОчищатьСтруктуруДвижений = (СтруктураДвижений = Неопределено);
	
	Если СтруктураДвижений = Неопределено Тогда
		СтруктураИмен = Новый Структура("Затраты, БракВПроизводстве, Операция");
		СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	КонецЕсли;
	
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатратПриход = ТаблицаЗатрат.Скопировать();

	Нормируемые = Новый Массив;
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);

	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Нормируемые",  Нормируемые);
	Запрос.УстановитьПараметр("КонГраница",   СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаУчета",   СчетаУчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	БракВПроизводстве.Подразделение КАК Подразделение,
	               |	БракВПроизводстве.СчетУчета КАК СчетУчета,
	               |	БракВПроизводстве.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	БракВПроизводстве.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	БракВПроизводстве.Заказ КАК Заказ,
	               |	БракВПроизводстве.Продукция КАК Продукция,
	               |	БракВПроизводстве.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	               |	БракВПроизводстве.СерияПродукции КАК СерияПродукции,
	               |	СУММА(БракВПроизводстве.СуммаОстаток) КАК Сумма,
	               |	СУММА(БракВПроизводстве.ПостояннаяРазницаОстаток) КАК ПостояннаяРазница,
	               |	СУММА(БракВПроизводстве.ВременнаяРазницаОстаток) КАК ВременнаяРазница
	               |ИЗ
	               |	РегистрНакопления.БракВПроизводствеНалоговыйУчет.Остатки(
	               |			&КонГраница,
	               |			СчетУчета В (&СчетаУчета)
	               |				И Организация = &Организация
	               |				И НЕ СтатьяЗатрат.ВидРасходовНУ В (&Нормируемые)) КАК БракВПроизводстве
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БракВПроизводстве.Подразделение,
	               |	БракВПроизводстве.СчетУчета,
	               |	БракВПроизводстве.СтатьяЗатрат,
	               |	БракВПроизводстве.НоменклатурнаяГруппа,
	               |	БракВПроизводстве.Заказ,
	               |	БракВПроизводстве.Продукция,
	               |	БракВПроизводстве.ХарактеристикаПродукции,
	               |	БракВПроизводстве.СерияПродукции
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подразделение,
	               |	СчетУчета,
	               |	СтатьяЗатрат,
	               |	НоменклатурнаяГруппа,
	               |	Заказ,
	               |	Продукция,
	               |	ХарактеристикаПродукции,
	               |	СерияПродукции";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка ИЗ ТаблицаЗапроса Цикл
		
		ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка.СчетУчета, Строка.СтатьяЗатрат, "Налоговый");
		
		Если Строка.Сумма <> 0 ИЛИ Строка.ПостояннаяРазница <> 0 ИЛИ Строка.ВременнаяРазница <> 0 Тогда
		
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= Строка.СчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			Если ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				НоваяСтрока.Продукция 				= Строка.Продукция;
				НоваяСтрока.ХарактеристикаПродукции = Строка.ХарактеристикаПродукции;
				НоваяСтрока.СерияПродукции			= Строка.СерияПродукции;
			КонецЕсли;
			
			НоваяСтрока.СуммаНал           			= Строка.Сумма;
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				НоваяСтрока.ПостояннаяРазница       = Строка.ПостояннаяРазница;
				НоваяСтрока.ВременнаяРазница        = Строка.ВременнаяРазница;
			КонецЕсли;
			
		КонецЕсли;

		СформироватьДвиженияПоРегиструБухгалтерииЗакрытиеКосвенныхРасходов(
			СтруктураШапкиДокумента,
			Строка,
			Строка.СчетУчета,
			Строка.Сумма,
			Строка.ПостояннаяРазница,
			Строка.ВременнаяРазница,
			СтруктураДвижений.Операция
		);
				
		// Зафиксируем временную разницу.
		Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы
		   И ДиректКостинг Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Строка.Сумма <> 0 ИЛИ Строка.ПостояннаяРазница <> 0 ИЛИ Строка.ВременнаяРазница <> 0) И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		
			Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗатратПриход.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= НовыйСчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			Если ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				НоваяСтрока.Продукция 				= Строка.Продукция;
				НоваяСтрока.ХарактеристикаПродукции = Строка.ХарактеристикаПродукции;
				НоваяСтрока.СерияПродукции			= Строка.СерияПродукции;
			КонецЕсли;
			
			НоваяСтрока.СуммаНал           			= 0;
			НоваяСтрока.ПостояннаяРазница           = Строка.ПостояннаяРазница;
			НоваяСтрока.ВременнаяРазница           	= Строка.Сумма + Строка.ВременнаяРазница;
			
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструБухгалтерииЗакрытиеКосвенныхРасходов(
			СтруктураШапкиДокумента,
			Строка,
			НовыйСчетУчета,
			0, // Сумма,
			- Строка.ПостояннаяРазница,
			- Строка.Сумма - Строка.ВременнаяРазница,
			СтруктураДвижений.Операция
		);
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("КодОперацииНЗП",  	Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		СтруктДопПараметры.Вставить("КодОперацииЗатр", 	Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		СтруктДопПараметры.Вставить("ВидДвижения",   	"Расход");
		
		ДвиженияПоПрочимЗатратамНал(ТаблицаЗатрат, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, СтруктДопПараметры);
	КонецЕсли;
	
	Если ТаблицаЗатратПриход.Количество() > 0 Тогда
		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("КодОперацииНЗП",  	Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		СтруктДопПараметры.Вставить("КодОперацииЗатр", 	Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		СтруктДопПараметры.Вставить("ВидДвижения",   	"Приход");
		
		ДвиженияПоПрочимЗатратамНал(ТаблицаЗатратПриход, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, СтруктДопПараметры);
	КонецЕсли;
	
	Если СтруктураДвижений.Операция.Количество() > 0 Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если ОчищатьСтруктуруДвижений Тогда
		СтруктураДвижений = Неопределено;
	КонецЕсли;

КонецПроцедуры // ЗакрытиеСчетовКосвенныхРасходов()

//начало изменений Ожиганов 01.03.2016 себестоимость продукции, на которую не распределяются косвенные затраты 
Процедура ПРГ_ДополнитьТаблицуТоваров(ТаблицаТоваров,СтруктураШапкиДокумента,НомерПередела)
// дополним таблицу товаров давальческой продукцией. Особенность давальческой продукции в том что на нее не распределяются косвенные затраты
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		и Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		возврат;
	КонецЕсли;
	
	Запрос = ПРГ_ПолучитьЗапросНеиспПодразделения(НомерПередела,ТаблицаТоваров,СтруктураШапкиДокумента);
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НС = ТаблицаТоваров.Добавить();
		НС.Номенклатура 		 = Выборка.Номенклатура;
		НС.ДокументОприходования = Выборка.ДокументОприходования;
	КонецЦикла;	

КонецПроцедуры	

Функция ПРГ_ПолучитьЗапросНеиспПодразделения(НомерПередела,ТаблицаТоваров,СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблТоваров.Номенклатура КАК Номенклатура
	                      |ПОМЕСТИТЬ ТаблТоваров
	                      |ИЗ
	                      |	&ТаблТоваров КАК ТаблТоваров
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатратСрезПервых.Подразделение
	                      |ПОМЕСТИТЬ ТаблПодр
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатрат.СрезПоследних(&Период, ) КАК ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатратСрезПервых
	                      |ГДЕ
	                      |	ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатратСрезПервых.Использование
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатратСрезПервых.Подразделение
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РаспределениеПродукцииПоПеределамОрганизаций.Продукция
	                      |ПОМЕСТИТЬ Продукция
	                      |ИЗ
	                      |	ТаблПодр КАК ТаблПодр
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПродукцииПоПеределамОрганизаций КАК РаспределениеПродукцииПоПеределамОрганизаций
	                      |		ПО ТаблПодр.Подразделение = РаспределениеПродукцииПоПеределамОрганизаций.Подразделение
	                      |ГДЕ
	                      |	РаспределениеПродукцииПоПеределамОрганизаций.Период МЕЖДУ &Дата1 И &Дата2
	                      |	И РаспределениеПродукцииПоПеределамОрганизаций.НомерПередела = &НомерПередела
	                      |	И НЕ РаспределениеПродукцииПоПеределамОрганизаций.Продукция В
	                      |				(ВЫБРАТЬ
	                      |					таблтоваров.Номенклатура
	                      |				ИЗ
	                      |					таблтоваров
	                      |				СГРУППИРОВАТЬ ПО
	                      |								таблтоваров.Номенклатура)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РаспределениеПродукцииПоПеределамОрганизаций.Продукция
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Партии.Номенклатура,
	                      |	Партии.ДокументОприходования
	                      |ИЗ
	                      |	Продукция КАК ИспПродукция
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК Партии
	                      |		ПО ИспПродукция.Продукция = Партии.Номенклатура
	                      |ГДЕ
	                      |	Партии.Период МЕЖДУ &Дата1 И &Дата2
	                      |	И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	                      |	И Партии.Активность
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Партии.Номенклатура,
	                      |	Партии.ДокументОприходования");
						  
	 Запрос.УстановитьПараметр("НомерПередела",НомерПередела);
	 Запрос.УстановитьПараметр("Период",СтруктураШапкиДокумента.мКонДата+1);
	 Запрос.УстановитьПараметр("Дата1",СтруктураШапкиДокумента.мНачДата);
	 Запрос.УстановитьПараметр("Дата2",СтруктураШапкиДокумента.мКонДата);
	 Запрос.УстановитьПараметр("ТаблТоваров",ТаблицаТоваров);
	 
	 возврат Запрос;

 КонецФункции
  
//конец изменений 
//начало изменений Ожиганов 30.05.2016 выравнивание копеек по НУ, приведение остатков к БУ 
//Закрытие счетов косвенных расходов  только общехозяйственныне
Процедура ПРГ_ЗакрытиеКосвенныхОбщехозяйственных(СтруктураШапкиДокумента, ДиректКостинг, СтруктураТаблицДвижений, СтруктураДвижений = Неопределено) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОчищатьСтруктуруДвижений = (СтруктураДвижений = Неопределено);
	
	Если СтруктураДвижений = Неопределено Тогда
		СтруктураИмен = Новый Структура("Затраты, БракВПроизводстве, Операция");
		СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	КонецЕсли;
	
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатратПриход = ТаблицаЗатрат.Скопировать();

	Нормируемые = Новый Массив;
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);

	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Нормируемые",  Нормируемые);
	Запрос.УстановитьПараметр("КонГраница",   СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаУчета",   СчетаУчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	БракВПроизводстве.Подразделение КАК Подразделение,
	|	БракВПроизводстве.СчетУчета КАК СчетУчета,
	|	БракВПроизводстве.СтатьяЗатрат КАК СтатьяЗатрат,
	|	БракВПроизводстве.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ КАК Заказ,
	|	БракВПроизводстве.Продукция КАК Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции КАК СерияПродукции,
	|	СУММА(БракВПроизводстве.СуммаОстаток) КАК Сумма,
	|	СУММА(БракВПроизводстве.ПостояннаяРазницаОстаток) 	КАК ПостояннаяРазница,
	|	СУММА(БракВПроизводстве.ВременнаяРазницаОстаток)	КАК ВременнаяРазница
	|ИЗ
	|	РегистрНакопления.БракВПроизводствеНалоговыйУчет.Остатки(&КонГраница, 
	|		СчетУчета В(&СчетаУчета) 
	|		И Организация = &Организация
	|		И СтатьяЗатрат.ВидРасходовНУ Не В (&Нормируемые)
	|	) КАК БракВПроизводстве
	|
	|СГРУППИРОВАТЬ ПО
	|	БракВПроизводстве.Подразделение,
	|	БракВПроизводстве.СчетУчета,
	|	БракВПроизводстве.СтатьяЗатрат,
	|	БракВПроизводстве.НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ,
	|	БракВПроизводстве.Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Затраты.Подразделение,
	|	Затраты.СчетУчета,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	Неопределено КАК Продукция,
	|	Неопределено КАК ХарактеристикаПродукции,
	|	Неопределено КАК СерияПродукции,
	|	СУММА(Затраты.СуммаОстаток),
	|	СУММА(Затраты.ПостояннаяРазницаОстаток),
	|	СУММА(Затраты.ВременнаяРазницаОстаток)
	|ИЗ
	|	РегистрНакопления.ЗатратыНалоговыйУчет.Остатки(&КонГраница, 
	|		СчетУчета В(&СчетаУчета)
	|		И Организация = &Организация
	|		И СтатьяЗатрат.ВидРасходовНУ Не В (&Нормируемые)
	|	) КАК Затраты
	|
	|СГРУППИРОВАТЬ ПО
	|	Затраты.Подразделение,
	|	Затраты.СчетУчета,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	СчетУчета,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа,
	|	Заказ,
	|	Продукция,
	|	ХарактеристикаПродукции,
	|	СерияПродукции
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка ИЗ ТаблицаЗапроса Цикл
		
		ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка.СчетУчета, Строка.СтатьяЗатрат, "Налоговый");
		
		Если Строка.Сумма <> 0 ИЛИ Строка.ПостояннаяРазница <> 0 ИЛИ Строка.ВременнаяРазница <> 0 Тогда
		
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= Строка.СчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			Если ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				НоваяСтрока.Продукция 				= Строка.Продукция;
				НоваяСтрока.ХарактеристикаПродукции = Строка.ХарактеристикаПродукции;
				НоваяСтрока.СерияПродукции			= Строка.СерияПродукции;
			КонецЕсли;
			
			НоваяСтрока.СуммаНал           			= Строка.Сумма;
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				НоваяСтрока.ПостояннаяРазница       = Строка.ПостояннаяРазница;
				НоваяСтрока.ВременнаяРазница        = Строка.ВременнаяРазница;
			КонецЕсли;
			
		КонецЕсли;

		СформироватьДвиженияПоРегиструБухгалтерииЗакрытиеКосвенныхРасходов(
			СтруктураШапкиДокумента,
			Строка,
			Строка.СчетУчета,
			Строка.Сумма,
			Строка.ПостояннаяРазница,
			Строка.ВременнаяРазница,
			СтруктураДвижений.Операция
		);
				
		// Зафиксируем временную разницу.
		Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы
		   И ДиректКостинг Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Строка.Сумма <> 0 ИЛИ Строка.ПостояннаяРазница <> 0 ИЛИ Строка.ВременнаяРазница <> 0) И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		
			Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
			ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые Тогда
				НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗатратПриход.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= НовыйСчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			Если ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				НоваяСтрока.Продукция 				= Строка.Продукция;
				НоваяСтрока.ХарактеристикаПродукции = Строка.ХарактеристикаПродукции;
				НоваяСтрока.СерияПродукции			= Строка.СерияПродукции;
			КонецЕсли;
			
			НоваяСтрока.СуммаНал           			= 0;
			НоваяСтрока.ПостояннаяРазница           = Строка.ПостояннаяРазница;
			НоваяСтрока.ВременнаяРазница           	= Строка.Сумма + Строка.ВременнаяРазница;
			
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструБухгалтерииЗакрытиеКосвенныхРасходов(
			СтруктураШапкиДокумента,
			Строка,
			НовыйСчетУчета,
			0, // Сумма,
			- Строка.ПостояннаяРазница,
			- Строка.Сумма - Строка.ВременнаяРазница,
			СтруктураДвижений.Операция
		);
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("КодОперацииНЗП",  	Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		СтруктДопПараметры.Вставить("КодОперацииЗатр", 	Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		СтруктДопПараметры.Вставить("ВидДвижения",   	"Расход");
		
		ДвиженияПоПрочимЗатратамНал(ТаблицаЗатрат, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, СтруктДопПараметры);
	КонецЕсли;
	
	Если ТаблицаЗатратПриход.Количество() > 0 Тогда
		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("КодОперацииНЗП",  	Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		СтруктДопПараметры.Вставить("КодОперацииЗатр", 	Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		СтруктДопПараметры.Вставить("ВидДвижения",   	"Приход");
		
		ДвиженияПоПрочимЗатратамНал(ТаблицаЗатратПриход, СтруктураШапкиДокумента, СтруктураТаблицДвижений, СтруктураДвижений, СтруктДопПараметры);
	КонецЕсли;
	
	Если СтруктураДвижений.Операция.Количество() > 0 Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если ОчищатьСтруктуруДвижений Тогда
		СтруктураДвижений = Неопределено;
	КонецЕсли;

КонецПроцедуры // ЗакрытиеСчетовКосвенныхРасходов()


//конец изменений 
//начало изменений Ожиганов А. 13.02.2017 62276 закрытие транспортных расходов только по ну 
Процедура РаспределениеТранспортныхРасходовтолькоПоНУ(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	)
	
	ОтражатьВНалоговомУчете = ложь;
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете",ОтражатьВНалоговомУчете) Тогда
		Если  Не ОтражатьВНалоговомУчете тогда
			возврат;
		КонецЕсли;	
	Иначе
		возврат;
	КонецЕсли;	
	
	// Формирование запроса по затратам, в части транспортных расходов.
	ЗапросПоЗатратам = СформироватьЗапросПоЗатратам(
		СтруктураШапкиДокумента, 
		ХарактерЗатрат,
		Перечисления.ВидыРасходовНУ.ТранспортныеРасходы,
		ВидСравнения.Равно,
		Истина // только по ну
		);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если РезультатЗапросаПоЗатратам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по базе распределения.
	//начало изменений Ожиганов А. 14.02.2017 62276 закрытие транспортных расходов только по ну 
	//пока оставим старое распредеелениие по ном группам
	//ЗапросБазаРаспределения =  СформироватьЗапросБазаРаспределенияПоПродажамПо41Счету(
	//	СтруктураШапкиДокумента,
	//	ХарактерЗатрат
	//);
	//РезультатЗапросаБазаРаспределения = ЗапросБазаРаспределения.Выполнить();
	//
	//Если РезультатЗапросаБазаРаспределения.Пустой() Тогда
	//конец изменений 	
		
		ЗапросБазаРаспределения = СформироватьЗапросБазаРаспределенияПоПродажам(
			СтруктураШапкиДокумента,
			ХарактерЗатрат
		);
		РезультатЗапросаБазаРаспределения = ЗапросБазаРаспределения.Выполнить();
		
	//КонецЕсли;	
		
	СтруктураИмен = Новый Структура("
		|Затраты, 
		|Операция
		|");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
		
	// Распределим расходы по продажам.
	РаспределитьТранспортныеРасходыТолькоПону(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоЗатратам,
		РезультатЗапросаБазаРаспределения,
		ХарактерЗатрат,
		СтруктураДвижений
	);
		
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеТранспортныхРасходов()

Функция ПолучитьКоэффициентСписанияТранспортныхРасходовДляНовогоРасчета(
	СтруктураШапкиДокумента
	) Экспорт
	
	// Для расчета коэффициента используем данные НУ (по налогу на прибыль).
	// Потому, что организация 
	// - должна их использовать для НУ (ст. 320 НК)
	// - может их использовать для БУ
	ИспользоватьДанныеНалоговогоУчета = Истина;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы
//воспользуемся коээфициентами по данным БУ		
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		Тогда
		// Нет данных налогового учета, поэтому для расчета используем данные БУ
		ИспользоватьДанныеНалоговогоУчета = Ложь;
	КонецЕсли;
	

	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		ТекстЗапроса = СформироватьТекстЗапросаПоСебестоимостиРеализацииИОстаткамТоваровРасширеннаяАналитика();
	Иначе
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСебестоимостиРеализацииИОстаткамТоваров();
		
		// Получим текст запроса в зависимости от используемых для расчета данных
		ВидОтраженияВУчете = ?(ИспользоватьДанныеНалоговогоУчета, 
			Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
		
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаСКомментариями,
			ВидОтраженияВУчете
			);
			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоСебестоимостиРеализацииИОстаткамТоваров(
		СтруктураШапкиДокумента,
		Запрос,
		ИспользоватьДанныеНалоговогоУчета
	);
	
	СтоимостьРеализованныхТоваров = 0;
	ОстатокТоваров = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтоимостьРеализованныхТоваров = Выборка.СтоимостьРеализованныхТоваров;
			ОстатокТоваров = Выборка.ОстатокТоваров;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтоимостьРеализованныхТоваров + ОстатокТоваров <> 0 Тогда
		//начало изменений Ожиганов А. 14.02.2017 62276 закрытие транспортных расходов только по ну 
		Коэффициент = Новый Структура("Коэффициент,ОстатокТоваров,СтоимостьРеализованныхТоваров",
		1/(СтоимостьРеализованныхТоваров + ОстатокТоваров),ОстатокТоваров,СтоимостьРеализованныхТоваров);
		;
		//конец изменений 
	Иначе
		Коэффициент = Новый Структура("Коэффициент,ОстатокТоваров,СтоимостьРеализованныхТоваров",0,0,0);
	КонецЕсли;
	
	Возврат Коэффициент;

КонецФункции // ПолучитьКоэффициентСписанияТранспортныхРасходов()


Процедура РаспределитьТранспортныеРасходыТолькоПону(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаБазаРаспределения,
	ХарактерЗатрат,
	СтруктураДвижений
	)
	
	ВыборкаБазаРаспределения = РезультатЗапросаБазаРаспределения.Выбрать();
	
	// Получим коэффициент распределения на ЕНВД.
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(
		СтруктураШапкиДокумента.Организация, 
		СтруктураШапкиДокумента.мКонДата, 
		СтруктураШапкиДокумента.мНачДата
	);
	МассивКоэфНеЕНВД = ПолучитьМассивКоэффициентовРаспределенияПоПродажам(
		ВыборкаБазаРаспределения,
		Ложь // ЕНВД
	);
	МассивКоэфЕНВД = ПолучитьМассивКоэффициентовРаспределенияПоПродажам(
		ВыборкаБазаРаспределения,
		Истина // ЕНВД
	);
	
	// Получим счета списания затрат.
	СчетСписания = ПолучитьСчетСписанияЗатрат(
		СтруктураШапкиДокумента,
		СтруктураШапкиДокумента.ВидОтраженияВУчете,
		ХарактерЗатрат,
		Ложь // ЕНВД
	);
	СчетСписанияЕНВД = ПолучитьСчетСписанияЗатрат(
		СтруктураШапкиДокумента,
		СтруктураШапкиДокумента.ВидОтраженияВУчете,
		ХарактерЗатрат,
		Истина // ЕНВД
	);
	
	СтрктДляКоэффициента = ПолучитьКоэффициентСписанияТранспортныхРасходовДляНовогоРасчета(
		СтруктураШапкиДокумента
	);
	
	КоэффициентСписанияТранспортныхРасходов  = СтрктДляКоэффициента.Коэффициент;
	
	МассивКоэфСумма = Новый Массив;
	МассивКоэфПостояннаяРазница = Новый Массив;
	МассивКоэфВременнаяРазница = Новый Массив;
	МассивКоэфОбщаяСумма = Новый Массив;
	
	ВсегоСумма = 0;
	ВсегоПостояннаяРазница = 0;
	ВсегоВременнаяРазница = 0;
	
	ТаблЗатрат = РезультатЗапросаПоЗатратам.Выгрузить();
	
	ВсегоСумма 			   = ТаблЗатрат.Итог("СуммаОстаток");
	ВсегоПостояннаяРазница = ТаблЗатрат.Итог("ПостояннаяРазницаОстаток");
	ВсегоВременнаяРазница  = ТаблЗатрат.Итог("ВременнаяРазницаОстаток");
	
	ОписЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ТаблЗатрат.Колонки.Добавить("РасчОстаток",ОписЧисла);
	ТаблЗатрат.Колонки.Добавить("РасчПостояннаяРазница",ОписЧисла);
	ТаблЗатрат.Колонки.Добавить("РасчВременнаяРазница",ОписЧисла);
	
	ТаблЗатрат.Колонки.Добавить("СписОстаток",ОписЧисла);
	ТаблЗатрат.Колонки.Добавить("СписПостояннаяРазница",ОписЧисла);
	ТаблЗатрат.Колонки.Добавить("СписВременнаяРазница",ОписЧисла);
	
	ВсегоРасчСумма = 0;
	Для Каждого ТекСтрока Из ТаблЗатрат Цикл
		//смысл так заморачиваться, типовой расчет тоже приведет к желаемую результату насколько он обясним 
		ТекСтрока.РасчОстаток 			= Окр( ТекСтрока.СуммаОстаток*КоэффициентСписанияТранспортныхРасходов*100 * СтрктДляКоэффициента.ОстатокТоваров/100,2);
		ТекСтрока.РасчПостояннаяРазница = Окр( ТекСтрока.ПостояннаяРазницаОстаток * КоэффициентСписанияТранспортныхРасходов*100 * СтрктДляКоэффициента.ОстатокТоваров/100,2);
		//неиспользуем временную разницу
		///ТекСтрока.РасчВременнаяРазница	= Окр( Окр(ТекСтрока.ВременнаяРазницаОстаток  * КоэффициентСписанияТранспортныхРасходов*100,2) * СтрктДляКоэффициента.ОстатокТоваров/100,2);
		ВсегорасчСумма 					= ВсегорасчСумма + ТекСтрока.РасчОстаток+ТекСтрока.РасчПостояннаяРазница;
	КонецЦикла;	
	
	СуммаОстатка 		=  Окр((ВсегоСумма+ВсегоПостояннаяРазница) * КоэффициентСписанияТранспортныхРасходов*100 * СтрктДляКоэффициента.ОстатокТоваров/100,2);
	
	Разница 			= СуммаОстатка - ВсегорасчСумма;
	//дораспределим разницу если есть
	Если Разница <> 0 Тогда
		ИмяКолонки ="";
		Если ТаблЗатрат.итог("РасчОстаток") <> 0 тогда
			ИмяКолонки = "РасчОстаток";
		ИначеЕсли ТаблЗатрат.итог("РасчПостояннаяРазница") <> 0 тогда
			ИмяКолонки = "РасчПостояннаяРазница";
		КонецЕсли;	
		
		Если ИмяКолонки <> "" Тогда
			 ИтогоСРазницей = ТаблЗатрат.итог(ИмяКолонки)+Разница;
			 МассивКоэф 	= ТаблЗатрат.ВыгрузитьКолонку(ИмяКолонки);
			 МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(ИтогоСРазницей, МассивКоэф, 2);			 
			 ТаблЗатрат.ЗагрузитьКолонку(МассивСумм,ИмяКолонки);
	    КонецЕсли;
	Конецесли;	
	
	Для Каждого ТекСтрока Из ТаблЗатрат Цикл
		ТекСтрока.СписОстаток				= ТекСтрока.СуммаОстаток			 - ТекСтрока.РасчОстаток;
		ТекСтрока.СписПостояннаяРазница		= ТекСтрока.ПостояннаяРазницаОстаток - ТекСтрока.РасчПостояннаяРазница;
		
		ТекСтрока.СписВременнаяРазница		=  ТекСтрока.РасчОстаток + ТекСтрока.РасчПостояннаяРазница + ТекСтрока.ВременнаяРазницаОстаток;
		
		РаспределитьРасходыПоВидамДеятельности(
			СтруктураШапкиДокумента,
			ТекСтрока,
			ВыборкаБазаРаспределения,
			КоэффициентЕНВД,
			МассивКоэфНеЕНВД,
			МассивКоэфЕНВД,
			СчетСписания,
			СчетСписанияЕНВД,
			ХарактерЗатрат,
			ТекСтрока.СписОстаток,
			ТекСтрока.СписПостояннаяРазница,
			ТекСтрока.СписВременнаяРазница,
			СтруктураДвижений
		);
	
	КонецЦикла;	
		
	возврат;
	
	Для Каждого ТекСтрока Из ТаблЗатрат Цикл
		
		Если ТекСтрока.ПостояннаяРазницаОстаток = 0
			и ТекСтрока.ВременнаяРазницаОстаток  = 0
			и ТекСтрока.СуммаОстаток = 0 тогда
		КонецЕсли;
		
		Если КоэффициентСписанияТранспортныхРасходов = 0 тогда
			 Сумма   					= ТекСтрока.СуммаОстаток;
			 ВременнаяРазница			= ТекСтрока.ВременнаяРазницаОстаток;
			 ПостояннаяРазница   		= ТекСтрока.ПостояннаяРазницаОстаток;
		Иначе
			
			 ОстатокСумма			    = Окр(ТекСтрока.СуммаОстаток * КоэффициентСписанияТранспортныхРасходов,2,1);
			 ОстатокВременнаяРазница    = Окр(ТекСтрока.ВременнаяРазницаОстаток * КоэффициентСписанияТранспортныхРасходов,2,1);
			 ОстатокПостояннаяРазница	= Окр(ТекСтрока.ПостояннаяРазницаОстаток * КоэффициентСписанияТранспортныхРасходов,2,1);
			 
			 Сумма   					= ТекСтрока.СуммаОстаток - ОстатокСумма;
			 ВременнаяРазница			= ТекСтрока.ВременнаяРазницаОстаток - ОстатокВременнаяРазница;
			 ПостояннаяРазница   		= ТекСтрока.ПостояннаяРазницаОстаток - ОстатокПостояннаяРазница;
			 
			 ВсегоСуммаостаток      	= ОстатокСумма + ОстатокВременнаяРазница + ОстатокПостояннаяРазница;
			 
			 //поскольку списываем только по ну разницу по затрат Дт 90.7 Кт 44 компенсируем за счет Временных затрат
			 ВременнаяРазница 			= ТекСтрока.ВременнаяРазницаОстаток- (ОстатокВременнаяРазница - ВсегоСуммаОстаток);
		КонецЕсли;	
		 
		
		РаспределитьРасходыПоВидамДеятельности(
			СтруктураШапкиДокумента,
			ТекСтрока,
			ВыборкаБазаРаспределения,
			КоэффициентЕНВД,
			МассивКоэфНеЕНВД,
			МассивКоэфЕНВД,
			СчетСписания,
			СчетСписанияЕНВД,
			ХарактерЗатрат,
			Сумма,
			ПостояннаяРазница,
			ВременнаяРазница,
			СтруктураДвижений
		);
		 
	КонецЦикла;
	
	//******************************************************************************************
	//******************************************************************************************
	возврат;

	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		МассивКоэфСумма.Добавить(ВыборкаПоЗатратам.СуммаОстаток);
		ВсегоСумма = ВсегоСумма + ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ВсегоПостояннаяРазница = ВсегоПостояннаяРазница + ВыборкаПоЗатратам.ПостояннаяРазницаОстаток;
			ВсегоВременнаяРазница = ВсегоВременнаяРазница + ВыборкаПоЗатратам.ВременнаяРазницаОстаток;
			
			МассивКоэфПостояннаяРазница.Добавить(ВыборкаПоЗатратам.ПостояннаяРазницаОстаток);
			МассивКоэфВременнаяРазница.Добавить(ВыборкаПоЗатратам.ВременнаяРазницаОстаток);
			
			МассивКоэфОбщаяСумма.Добавить(ВыборкаПоЗатратам.СуммаОстаток +
				ВыборкаПоЗатратам.ПостояннаяРазницаОстаток +
				ВыборкаПоЗатратам.ВременнаяРазницаОстаток);
		КонецЕсли;
		
	КонецЦикла;
	
	//начало изменений Ожиганов А. 13.02.2017 62276 закрытие транспортных расходов только по ну 
	//Запомним сумму
	ВсегоСуммаСписБУ = ВсегоСумма;
	//конец изменений 
	
	СуммаОстаток = ВсегоСумма - Окр(ВсегоСумма * КоэффициентСписанияТранспортныхРасходов, 2, 1);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ВсегоОбщаяСумма = ВсегоСумма + ВсегоПостояннаяРазница + ВсегоВременнаяРазница;
		ОбщаяСуммаОстаток = ВсегоОбщаяСумма - Окр(ВсегоОбщаяСумма * КоэффициентСписанияТранспортныхРасходов, 2, 1);
		
		ПостояннаяРазницаОстаток = ВсегоПостояннаяРазница - Окр(ВсегоПостояннаяРазница * КоэффициентСписанияТранспортныхРасходов, 2, 1);
		ВременнаяРазницаОстаток = ВсегоВременнаяРазница - Окр(ВсегоВременнаяРазница * КоэффициентСписанияТранспортныхРасходов, 2, 1);
		
		// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
		Если СуммаОстаток + ПостояннаяРазницаОстаток + ВременнаяРазницаОстаток <> ОбщаяСуммаОстаток Тогда
			Если ВременнаяРазницаОстаток <> 0 Тогда
				ВременнаяРазницаОстаток = ОбщаяСуммаОстаток - (СуммаОстаток + ПостояннаяРазницаОстаток);
			ИначеЕсли ПостояннаяРазницаОстаток <> 0 Тогда
				ПостояннаяРазницаОстаток = ОбщаяСуммаОстаток - СуммаОстаток;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэфСумма, 2);
		
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
		МассивОбщаяСумма        = ОбщегоНазначения.РаспределитьПропорционально(ОбщаяСуммаОстаток, МассивКоэфОбщаяСумма, 2);
		МассивПостояннаяРазница = ОбщегоНазначения.РаспределитьПропорционально(ПостояннаяРазницаОстаток, МассивКоэфПостояннаяРазница, 2);
		МассивВременнаяРазница  = ОбщегоНазначения.РаспределитьПропорционально(ВременнаяРазницаОстаток, МассивКоэфВременнаяРазница, 2);
		
	КонецЕсли;
	
	Индекс = 0;
	ВыборкаПоЗатратам.Сбросить();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		Сумма = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПостояннаяРазница = ?(МассивПостояннаяРазница = Неопределено, 0, МассивПостояннаяРазница[Индекс]);
			ВременнаяРазница  = ?(МассивВременнаяРазница = Неопределено, 0, МассивВременнаяРазница[Индекс]);
			ОбщаяСумма        = ?(МассивОбщаяСумма = Неопределено, 0, МассивОбщаяСумма[Индекс]);
			
			// Скорректируем сумму затрат по временной или постоянной разнице для исключения ошибок округления.
			Если Сумма + ПостояннаяРазница + ВременнаяРазница <> ОбщаяСумма Тогда
				Если ВременнаяРазница <> 0 Тогда
					ВременнаяРазница = ОбщаяСумма - (Сумма + ПостояннаяРазница);
				ИначеЕсли ПостояннаяРазница <> 0 Тогда
					ПостояннаяРазница = ОбщаяСумма - Сумма;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПостояннаяРазница = 0;
			ВременнаяРазница = 0;
		КонецЕсли;
		
		РаспределитьРасходыПоВидамДеятельности(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаБазаРаспределения,
			КоэффициентЕНВД,
			МассивКоэфНеЕНВД,
			МассивКоэфЕНВД,
			СчетСписания,
			СчетСписанияЕНВД,
			ХарактерЗатрат,
			Сумма,
			ПостояннаяРазница,
			ВременнаяРазница,
			СтруктураДвижений
		);
	
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТранспортныеРасходы()

Функция СформироватьЗапросБазаРаспределенияПоПродажамПо41Счету(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	)
	
	Запрос = Новый Запрос;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Обороты9002_41.Субконто1 КАК НоменклатурнаяГруппа
		               |ПОМЕСТИТЬ ТаблномГрупп
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&начГраница, &КонГраница, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(Плансчетов.Хозрасчетный.СебестоимостьПродаж)), , Организация = &Организация, КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(Плансчетов.Хозрасчетный.Товары)), ) КАК Обороты9002_41
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА СчетаУчетаЕНВД.ЕНВД
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК ЕНВД,
		               |	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
		               |	СУММА(-ХозрасчетныйОбороты.СуммаОборот) КАК База
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачГраница,
		               |			&КонГраница,
		               |			Период,
		               |			Счет В ИЕРАРХИИ (&МассивСчетовБазы),
		               |			,
		               |			Организация = &Организация
		               |				И Субконто1 В
		               |					(ВЫБРАТЬ
		               |						ТаблномГрупп.НоменклатурнаяГруппа
		               |					ИЗ
		               |						ТаблномГрупп),
		               |			,
		               |			) КАК ХозрасчетныйОбороты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			СчетаУчетаЕНВД.Счет КАК Счет,
		               |			ИСТИНА КАК ЕНВД
		               |		ИЗ
		               |			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
		               |		ГДЕ
		               |			НЕ СчетаУчетаЕНВД.ПодлежитРаспределению) КАК СчетаУчетаЕНВД
		               |		ПО ХозрасчетныйОбороты.Счет = СчетаУчетаЕНВД.Счет
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВЫБОР
		               |		КОГДА СчетаУчетаЕНВД.ЕНВД
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ,
		               |	ХозрасчетныйОбороты.Субконто1
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЕНВД,
		               |	НоменклатурнаяГруппа";
		
		Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
		Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		//начало изменений Ожиганов А. 14.02.2017 62276 закрытие транспортных расходов только по ну 
		Запрос.УстановитьПараметр("Корсчет", ПланыСчетов.Хозрасчетный.Товары);
		//конец изменений 
		
		//Массив счетов, по которым формируется база распределения расходов
		МассивСчетовБазы = Новый Массив;
		
		ДиректКостингБазаРаспределения = СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостингБазаРаспределения;
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы
		   И ДиректКостингБазаРаспределения = Перечисления.ДиректКостингБазаРаспределения.Себестоимость
		Тогда
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
		Иначе
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
			МассивСчетовБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСчетовБазы", МассивСчетовБазы);
	
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL
		|";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросБазаРаспределенияПоПродажам()




//конец изменений 