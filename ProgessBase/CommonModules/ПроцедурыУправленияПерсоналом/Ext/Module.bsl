
// По описанию строк плановых начислений определяет тарифную ставку (разряд),
// а также ее размерность (часовая, месячная или дневная), помещая результат
// во временную таблицу ВТТарифныеСтавкиНачислений с полями
//		Регистратор - ключевое поле,
//		НомерСтроки - ключевое поле,
//		ТарифныйРазряд - тип СправочникСсылка.ТарифныеРазряды,
//		ТарифныйРазрядЗавершения - тип СправочникСсылка.ТарифныеРазряды,
//		ТарифнаяСтавка - число,
//		ТарифнаяСтавкаЗавершения - число,
//		РазмерностьТарифнойСтавки - тип ПеречислениеСсылка.СпособыРасчетаОплатыТруда,
//		РазмерностьТарифнойСтавкиЗавершения - тип ПеречислениеСсылка.СпособыРасчетаОплатыТруда
//
// МенеджерВременныхТаблиц содержит временную таблицу ВТСтрокиОписанияНачислений с полями
//		Регистратор - ключевое поле,
//		НомерСтроки - ключевое поле,
//		ВидРасчета,
//		ВидРасчетаЗавершения,
//		Показатель1,
//		ТарифныйРазряд1,
//		Показатель2,
//		ТарифныйРазряд2,
//		Показатель3,
//		ТарифныйРазряд3,
//		Показатель4,
//		ТарифныйРазряд4,
//		Показатель5,
//		ТарифныйРазряд5,
//		Показатель6,
//		ТарифныйРазряд6,
//		Показатель1Завершения,
//		Показатель2Завершения,
//		Показатель3Завершения,
//		Показатель4Завершения,
//		Показатель5Завершения,
//		Показатель6Завершения,
//		ТарифныйРазряд1Завершения,
//		ТарифныйРазряд2Завершения,
//		ТарифныйРазряд3Завершения,
//		ТарифныйРазряд4Завершения,
//		ТарифныйРазряд5Завершения,
//		ТарифныйРазряд6Завершения
// 
Процедура ИзвлечьТарифнуюСтавкуИзПараметровНачисления(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Регистратор,
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.НомерСтроки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 1
	|				ТОГДА Показатели.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель1,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 2
	|				ТОГДА Показатели.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 3
	|				ТОГДА Показатели.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель3,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 4
	|				ТОГДА Показатели.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель4,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 5
	|				ТОГДА Показатели.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель5,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.НомерСтроки = 6
	|				ТОГДА Показатели.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель6,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.НомерСтроки = 1
	|				ТОГДА ПоказателиЗавершения.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель1Завершения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.НомерСтроки = 2
	|				ТОГДА ПоказателиЗавершения.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель2Завершения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.НомерСтроки = 3
	|				ТОГДА ПоказателиЗавершения.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель3Завершения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.НомерСтроки = 4
	|				ТОГДА ПоказателиЗавершения.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель4Завершения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.НомерСтроки = 5
	|				ТОГДА ПоказателиЗавершения.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель5Завершения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.НомерСтроки = 6
	|				ТОГДА ПоказателиЗавершения.Показатель
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Показатель6Завершения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах)
	|					ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПоказательВремяВЧасах,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах)
	|					ИЛИ ПоказателиЗавершения.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПоказательВремяВЧасахЗавершения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях)
	|					ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПоказательВремяВДнях,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях)
	|					ИЛИ ПоказателиЗавершения.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПоказательВремяВДняхЗавершения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВДнях)
	|					ИЛИ Показатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПоказательНормаЗаМесяц,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиЗавершения.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВДнях)
	|					ИЛИ ПоказателиЗавершения.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПоказательНормаЗаМесяцЗавершения
	|ПОМЕСТИТЬ ВТПоказателиПлановыхНачислений
	|ИЗ
	|	ВТСтрокиОписанияНачислений КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ПоказателиЗавершения
	|		ПО ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения = ПоказателиЗавершения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета = Показатели.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Регистратор,
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Регистратор,
	|	Показатели.НомерСтроки,
	|	Показатели.Показатель1,
	|	Показатели.Показатель2,
	|	Показатели.Показатель3,
	|	Показатели.Показатель4,
	|	Показатели.Показатель5,
	|	Показатели.Показатель6,
	|	Показатели.Показатель1Завершения,
	|	Показатели.Показатель2Завершения,
	|	Показатели.Показатель3Завершения,
	|	Показатели.Показатель4Завершения,
	|	Показатели.Показатель5Завершения,
	|	Показатели.Показатель6Завершения,
	|	ВЫБОР
	|		КОГДА Показатели.ЕстьПоказательНормаЗаМесяц
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|		КОГДА Показатели.ЕстьПоказательВремяВЧасах
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|		КОГДА Показатели.ЕстьПоказательВремяВДнях
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПустаяССылка)
	|	КОНЕЦ КАК СпособРасчетаПроизвольнойФормулыРасчета,
	|	ВЫБОР
	|		КОГДА Показатели.ЕстьПоказательНормаЗаМесяцЗавершения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|		КОГДА Показатели.ЕстьПоказательВремяВЧасахЗавершения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|		КОГДА Показатели.ЕстьПоказательВремяВДняхЗавершения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПустаяССылка)
	|	КОНЕЦ КАК СпособРасчетаПроизвольнойФормулыРасчетаЗавершения
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТПоказателиПлановыхНачислений КАК Показатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор,
	|	ПлановыеНачисленияРаботниковОрганизаций.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ПроизвольнаяФормулаРасчета
	|			ТОГДА ВЫБОР
	|					КОГДА Показатели.Показатель1.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1
	|					КОГДА Показатели.Показатель2.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2
	|					КОГДА Показатели.Показатель3.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3
	|					КОГДА Показатели.Показатель4.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4
	|					КОГДА Показатели.Показатель5.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5
	|					КОГДА Показатели.Показатель6.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1
	|	КОНЕЦ КАК ТарифныйРазряд,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения.ПроизвольнаяФормулаРасчета
	|			ТОГДА ВЫБОР
	|					КОГДА Показатели.Показатель1Завершения.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1Завершения
	|					КОГДА Показатели.Показатель2Завершения.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2Завершения
	|					КОГДА Показатели.Показатель3Завершения.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3Завершения
	|					КОГДА Показатели.Показатель4Завершения.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4Завершения
	|					КОГДА Показатели.Показатель5Завершения.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5Завершения
	|					КОГДА Показатели.Показатель6Завершения.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6Завершения
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1Завершения
	|	КОНЕЦ КАК ТарифныйРазрядЗавершения,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ПроизвольнаяФормулаРасчета
	|					ТОГДА ВЫБОР
	|							КОГДА Показатели.Показатель1 В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель1.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель1
	|							КОГДА Показатели.Показатель2 В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель2.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель2
	|							КОГДА Показатели.Показатель3 В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель3.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель3
	|							КОГДА Показатели.Показатель4 В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель4.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель4
	|							КОГДА Показатели.Показатель5 В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель5.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель5
	|							КОГДА Показатели.Показатель6 В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель6.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель6
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1
	|			КОНЕЦ
	|	КОНЕЦ КАК ТарифнаяСтавка,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения.ПроизвольнаяФормулаРасчета
	|					ТОГДА ВЫБОР
	|							КОГДА Показатели.Показатель1Завершения В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель1Завершения.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель1Завершения
	|							КОГДА Показатели.Показатель2Завершения В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель2Завершения.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель2Завершения
	|							КОГДА Показатели.Показатель3Завершения В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель3Завершения.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель3Завершения
	|							КОГДА Показатели.Показатель4Завершения В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель4Завершения.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель4Завершения
	|							КОГДА Показатели.Показатель5Завершения В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель5Завершения.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель5Завершения
	|							КОГДА Показатели.Показатель6Завершения В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная))
	|									ИЛИ Показатели.Показатель6Завершения.ТарифнаяСтавка
	|								ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель6Завершения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1Завершения
	|			КОНЕЦ
	|	КОНЕЦ КАК ТарифнаяСтавкаЗавершения,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ПроизвольнаяФормулаРасчета
	|			ТОГДА ВЫБОР
	|					КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель1.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчета
	|					КОГДА Показатели.Показатель2 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель2 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель2 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель2.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчета
	|					КОГДА Показатели.Показатель3 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель3 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель3 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель3.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчета
	|					КОГДА Показатели.Показатель4 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель4 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель4 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель4.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчета
	|					КОГДА Показатели.Показатель5 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель5 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель5 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель5.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчета
	|					КОГДА Показатели.Показатель6 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель6 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель6 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель6.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчета
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПустаяССылка)
	|				КОНЕЦ
	|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК РазмерностьТарифнойСтавки,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения.ПроизвольнаяФормулаРасчета
	|			ТОГДА ВЫБОР
	|					КОГДА Показатели.Показатель1Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель1Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель1Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель1Завершения.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчетаЗавершения
	|					КОГДА Показатели.Показатель2Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель2Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель2Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель2Завершения.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчетаЗавершения
	|					КОГДА Показатели.Показатель3Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель3Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель3Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель3Завершения.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчетаЗавершения
	|					КОГДА Показатели.Показатель4Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель4Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель4Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель4Завершения.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчетаЗавершения
	|					КОГДА Показатели.Показатель5Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель5Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель5Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель5Завершения.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчетаЗавершения
	|					КОГДА Показатели.Показатель6Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|					КОГДА Показатели.Показатель6Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|					КОГДА Показатели.Показатель6Завершения = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
	|					КОГДА Показатели.Показатель6Завершения.ТарифнаяСтавка
	|						ТОГДА Показатели.СпособРасчетаПроизвольнойФормулыРасчетаЗавершения
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПустаяССылка)
	|				КОНЕЦ
	|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения.СпособРасчета
	|	КОНЕЦ КАК РазмерностьТарифнойСтавкиЗавершения
	|ПОМЕСТИТЬ ВТТарифныеСтавкиНачислений
	|ИЗ
	|	ВТСтрокиОписанияНачислений КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
	|		ПО ПлановыеНачисленияРаботниковОрганизаций.Регистратор = Показатели.Регистратор
	|			И ПлановыеНачисленияРаботниковОрганизаций.НомерСтроки = Показатели.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПоказателиПлановыхНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПоказатели";
	
	Запрос.Выполнить();

КонецПроцедуры


// Выполняет расчет часовой тарифной ставки работника
// Возвращает результат с учетом курса валюты тарифной ставки
//
Функция ЧасоваяТарифнаяСтавкаРаботникаОрг(Знач Сотрудник, Знач ДатаАктуальности, Знач ДатаВалютногоУчета, ВалютаРегламентированногоУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	Запрос.УстановитьПараметр("ТекущийМесяц",		НачалоМесяца(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",	НачалоМесяца(ДатаВалютногоУчета));
	Запрос.УстановитьПараметр("РегламентВалюта",	ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Год",				Год(ДатаАктуальности));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Регистратор,
	|	ОсновныеНачисления.НомерСтроки,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.ВидРасчетаЗавершения,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.ТарифныйРазряд1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.ТарифныйРазряд2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.ТарифныйРазряд3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.ТарифныйРазряд4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.ТарифныйРазряд5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.ТарифныйРазряд6,
	|	ОсновныеНачисления.Показатель1Завершения,
	|	ОсновныеНачисления.Показатель2Завершения,
	|	ОсновныеНачисления.Показатель3Завершения,
	|	ОсновныеНачисления.Показатель4Завершения,
	|	ОсновныеНачисления.Показатель5Завершения,
	|	ОсновныеНачисления.Показатель6Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд1Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд2Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд3Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд4Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд5Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд6Завершения,
	|	ОсновныеНачисления.ПериодЗавершения,
	|	ОсновныеНачисления.Валюта1,
	|	ОсновныеНачисления.Валюта1Завершения
	|ПОМЕСТИТЬ ВТСтрокиОписанияНачислений
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Сотрудник = &Сотрудник
	|				И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновныеНачисления";
	Запрос.Выполнить();
	
	ИзвлечьТарифнуюСтавкуИзПараметровНачисления(Запрос.МенеджерВременныхТаблиц);
	
	// НормаВремениПоСводнымИндивидуальнымГрафикам
	// 
	//	Поля:
	//		Часов - указанное пользователем значение
	// 
	// НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	//		Таблица нормы времени в часах, введенной индивидуальными графиками
	// 
	//	Поля:
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
	//	введенные доками ВводИндивидуальныхГрафиков, т.е. по строкам с выставленным флажком План
	// 
	// НормаВремениПоОбщимГрафикам
	//		Таблица нормы времени в часах по общим графикам
	// 
	//	Поля:
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для общих графиков
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТарифныеСтавки.РазмерностьТарифнойСтавкиЗавершения
	|		ИНАЧЕ ТарифныеСтавки.РазмерностьТарифнойСтавки
	|	КОНЕЦ КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавок.Размер
	|					ИНАЧЕ ТарифныеСтавки.ТарифнаяСтавкаЗавершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ ТарифныеСтавки.ТарифнаяСтавка
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|	КОНЕЦ КАК ОкладТариф
	|ПОМЕСТИТЬ ВТРазмерОсновногоНачисления
	|ИЗ
	|	ВТСтрокиОписанияНачислений КАК ОсновноеНачисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифныеСтавкиНачислений КАК ТарифныеСтавки
	|		ПО ОсновноеНачисление.Регистратор = ТарифныеСтавки.Регистратор
	|			И ОсновноеНачисление.НомерСтроки = ТарифныеСтавки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВалютногоУчета, ) КАК РазмерТарифныхСтавок
	|		ПО (ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ТарифныеСтавки.ТарифныйРазрядЗавершения
	|				ИНАЧЕ ТарифныеСтавки.ТарифныйРазряд
	|			КОНЕЦ = РазмерТарифныхСтавок.ТарифныйРазряд)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Валюта = ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ)
	|			И (Валюты.Период = &ДатаВалютногоУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели
	|	КОНЕЦ КАК ДлительностьРабочейНедели,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ВидГрафика
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика
	|	КОНЕЦ КАК ВидГрафика
	|ПОМЕСТИТЬ ВТДанныеРаботника
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СводныеИндивидуальныеГрафики.Часов КАК Часов
	|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
	|ИЗ
	|	РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник = &Сотрудник
	|	И СводныеИндивидуальныеГрафики.Месяц = &ТекущийМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы В
	|			(ВЫБРАТЬ
	|				ГрафикиНормыВремени.ГрафикРаботы
	|			ИЗ
	|				ВТДанныеРаботника КАК ГрафикиНормыВремени)
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 11:38 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРаботника КАК ДанныеРаботника 
	|	ПО РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ДанныеРаботника.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	|		И РегламентированныйПроизводственныйКалендарь.Год = &Год
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
	// ЗАКОММЕНТИРОВАНО: Измайлова Полина 27.06.2011 11:40   
	//|ГДЕ
	//|	РегламентированныйПроизводственныйКалендарь.Год = &Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряЗаМесяц
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 11:38 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРаботника КАК ДанныеРаботника 
	|	ПО РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ДанныеРаботника.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	|		И НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &ТекущийМесяц
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	// ЗАКОММЕНТИРОВАНО: Измайлова Полина 27.06.2011 11:41  
	//|ГДЕ
	//|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &ТекущийМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			ТОГДА ОсновноеНачисление.ОкладТариф
	|		КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ ОсновноеНачисление.ОкладТариф / (ДанныеРаботника.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) * 12
	|								КОНЕЦ
	|						КОГДА ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеПоПроизводственномуКалендарю)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ ОсновноеНачисление.ОкладТариф / (ДанныеРаботника.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0))
	|								КОНЕЦ
	|						КОГДА ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ЧасовЗаМесяц, 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ ОсновноеНачисление.ОкладТариф / ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ЧасовЗаМесяц, 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		КОГДА ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|							ТОГДА 0
	|						ИНАЧЕ ОсновноеНачисление.ОкладТариф / ДанныеРаботника.ДлительностьРабочейНедели * ВЫБОР
	|								КОГДА ДанныеРаботника.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	ВТДанныеРаботника КАК ДанныеРаботника
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОсновногоНачисления КАК ОсновноеНачисление
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряЗаМесяц КАК ДанныеПроизводственногоКалендаряЗаМесяц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК СводныеИндивидуальныеГрафики
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Размер;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ЧасоваяТарифнаяСтавкаРаботникаОрг()

// Возвращает значение ставки НДФЛ с доходов нерезидентов 
//
// Параметры
//	КодДохода - код дохода, для которого определяется ставка
//  ДатаНалоговогоПериода - дата, определяет налоговый период, к которому относится доход
//
Функция ЗначениеСтавкиНДФЛСНерезидента(КодДохода = Неопределено, ДатаНалоговогоПериода = '00010101') Экспорт
	Если КодДохода = Справочники.ДоходыНДФЛ.Код1010 И ДатаНалоговогоПериода >= '20080101' Тогда // с 1 января 2008 года для нерезидентов изменена ставка налогообложения дивидендов с 30% до 15%
		Возврат 15;
	Иначе 	
		Возврат 30;
	КонецЕсли;
КонецФункции 

// Определяет значение ставки налога для СтавкиНалоообложенияРезидента
// Параметры:
//  СтавкаНалогообложенияРезидента - ссылка на перечисление "НДФЛСтавкиНалогообложенияРезидента"
// Возвращаемое значение:
//  число - ставка налога в процентах
Функция ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(СтавкаНалогообложенияРезидента, КодДохода = Неопределено, ДатаНалоговогоПериода = '00010101') Экспорт
	Если КодДохода = Справочники.ДоходыНДФЛ.Код1010 И ДатаНалоговогоПериода >= ПроведениеРасчетов.ДатаИзмененияНалогообложенияДивидендов() Тогда
		Возврат 13;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
		Возврат 13;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
		Возврат 9;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
		Возврат 35;
	КонецЕсли;
	Возврат 0;
КонецФункции

// Выделяет из кода элемента адресного классификатора код региона (24 и 25 цифры кода)
//
// Параметры
//  КодАдресногоЭлемента  – Строка – код элемента  адресного классификатора
//
// Возвращаемое значение:
//   Строка   – код региона РФ
//
Функция ПолучитьКодРегионаРФИзКодаАдресногоЭлемента(КодАдресногоЭлемента) Экспорт

	СтрКодАдрЭлемента = Формат(КодАдресногоЭлемента, "ЧГ=0");
	Если СтрКодАдрЭлемента = "" Тогда
		Возврат "";
	КонецЕсли; 
	КодРегиона = Лев(СтрКодАдрЭлемента, СтрДлина(СтрКодАдрЭлемента) - 23);
	// Код региона должен состоять из 2 цифр. Например: 03, 77
	Возврат  Прав("00" + КодРегиона,2);
	
КонецФункции 

// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ИмяРеквизита = "Сотрудник") Экспорт

	КраткийСоставДокумента = "";
	
	КоличествоТЧ = 1;
	КраткийСоставДокументаЗаполнен = Ложь;
	ОбработанныеСсылки = Новый Соответствие;
	Для каждого ТабличнаяЧастьДокумента Из ТЧДокумента Цикл
		
		
		Если НЕ КраткийСоставДокументаЗаполнен Тогда
			
			Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
				
				СсылкаДляФИО = СтрокаТЧ[ИмяРеквизита];
				
				Если ОбработанныеСсылки.Получить(СсылкаДляФИО) <> Истина Тогда
					
					ОбработанныеСсылки.Вставить(СсылкаДляФИО, Истина);
					
					ФИОФизЛица = ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(СсылкаДляФИО);
					Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
						КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
					Иначе
						
						Если КоличествоТЧ = 1 Тогда
							КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
						Иначе
							
							Если Лев(КраткийСоставДокумента,2) = ", " Тогда
								КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
							Иначе
								КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
							КонецЕсли;
							
						КонецЕсли; 
						
						КраткийСоставДокументаЗаполнен = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			КоличествоТЧ = КоличествоТЧ + 1;
			
		КонецЕсли; 
		
		Если КраткийСоставДокументаЗаполнен Тогда
			Прервать
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

// Функция формирует наименовние элемента справочника СотрудникиОрганизаций
//
// Параметры
//  <Физлицо>  – <СправочникСсылка.ФизическиеЛица> – физлицо 
//  <Постфикс>  – <Строка> – постфикс наименования сотрудника
//
// Возвращаемое значение:
//   <Строка>   – наименование сотрудника
//
Функция УстановитьНаименованиеСотрудника(Физлицо, Постфикс) Экспорт

	Возврат  Физлицо.Наименование + ?(ЗначениеЗаполнено(Постфикс), " " + Постфикс, "");

КонецФункции // УстановитьНаименованиеСотрудника()

// Функция определяет пол физлица по его отчеству
//
Функция ПолучитьПол(ОтчествоРаботника) Экспорт
	
	Если Прав(ОтчествоРаботника, 2) = "ич" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	
	ИначеЕсли Прав(ОтчествоРаботника, 2) = "на" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	
	КонецЕсли;
	
	Возврат Перечисления.ПолФизическихЛиц.ПустаяСсылка();
	
КонецФункции // ПолучитьПол()

// Получение значения учетной политики по персоналу
// Если в соответствии по данной организации нет политики - пытаемся прочитать ее из ИБ, если там нет - 
// она добавляется как политика по умолчанию
//
// Параметры:
//
//  УчетнаяПолитика - соответствие политик по организациям
//  Организация - ссылка на организацию
//  ИмяПолитики - название получаемой учетной политики
//
Функция ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитика, Организация, ИмяПолитики) Экспорт
	
	Если УчетнаяПолитика[Организация] = Неопределено Тогда
		Выборка = ОбщегоНазначенияЗК.ДанныеУчетнойПолитикиПоПерсоналуОрганизации(Организация).Выбрать();
		Если Выборка.Следующий() Тогда
			Политика = ОбщегоНазначенияЗК.УчетнаяПолитикаПоПерсоналуОрганизацииПоУмолчанию();
			ЗаполнитьЗначенияСвойств(Политика, Выборка);
			УчетнаяПолитика.Вставить(Организация, Политика); 
		Иначе 
			УчетнаяПолитика.Вставить(Организация, ОбщегоНазначенияЗК.УчетнаяПолитикаПоПерсоналуОрганизацииПоУмолчанию())
		КонецЕсли;
	КонецЕсли;
	
	Возврат УчетнаяПолитика[Организация][ИмяПолитики];
	
КонецФункции // ЗначениеУчетнойПолитикиПоПерсоналуОрганизации()

// Получение значения учетной политики по персоналу
//
// Параметры:
//
//  УчетнаяПолитика - соответствие политик по организациям
//  ИмяПолитики - название получаемой учетной политики
//
Функция ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(УчетнаяПолитика, ИмяПолитики) Экспорт
	
	Если УчетнаяПолитика["ВсеОрганизации"] = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроверкаПериодовНачисления, ЛОЖЬ)) КАК ПроверкаПериодовНачисления,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ)) КАК ЕдиныйНумераторКадровыхДокументов,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.КонтрольКоличестваСтавокШтатногоРасписания, ЛОЖЬ)) КАК КонтрольКоличестваСтавокШтатногоРасписания,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.КонтрольРазмераСтавокШтатногоРасписания, ЛОЖЬ)) КАК КонтрольРазмераСтавокШтатногоРасписания,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ)) КАК РасчетЗарплатыОрганизацииПоОтветственным,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ)) КАК ИспользуютсяНачисленияВВалюте,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетНДФЛ, ЛОЖЬ)) КАК УпрощенныйУчетНДФЛ,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.НеУменьшатьПропорциональныеПремии, ЛОЖЬ)) КАК НеУменьшатьПропорциональныеПремии,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоказыватьТабельныеНомераВДокументах, ЛОЖЬ)) КАК ПоказыватьТабельныеНомераВДокументах,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчетЗадолженностиПоМесяцам, ИСТИНА)) КАК УчетЗадолженностиПоМесяцам,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах, ЛОЖЬ)) КАК ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетВзаиморасчетов, ИСТИНА)) КАК УпрощенныйУчетВзаиморасчетов,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УчитыватьНевыходыДляПлановогоАванса, ИСТИНА)) КАК УчитыватьНевыходыДляПлановогоАванса,
		|	МАКСИМУМ(Константы.ИспользуетсяТрудЧленовЭкипажейМорскихСудов) КАК ИспользуетсяТрудЧленовЭкипажейМорскихСудов,
		|	МАКСИМУМ(Константы.ИспользуетсяТрудРаботающихВСтудотряде) КАК ИспользуетсяТрудРаботающихВСтудотряде,
		|	МАКСИМУМ(Константы.ИспользуетсяТрудФармацевтов) КАК ИспользуетсяТрудФармацевтов,
		|	МАКСИМУМ(Константы.ИспользуютсяРаботыСДосрочнойПенсией) КАК ИспользуютсяРаботыСДосрочнойПенсией,
		|	МАКСИМУМ(Константы.ПрименятьРезультатыСпециальнойОценкиУсловийТруда) КАК ПрименятьРезультатыСпециальнойОценкиУсловийТруда,
		|	МАКСИМУМ(Константы.ИспользуетсяТрудЧленовЛетныхЭкипажей) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
		|	МАКСИМУМ(Константы.ИспользуетсяТрудШахтеров) КАК ИспользуетсяТрудШахтеров
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		|		ПО (ИСТИНА)");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Политика = ОбщегоНазначенияЗК.УчетнаяПолитикаПоПерсоналуОрганизацииПоУмолчанию();
			ЗаполнитьЗначенияСвойств(Политика, Выборка);
			УчетнаяПолитика.Вставить("ВсеОрганизации", Политика); 
		Иначе 
			УчетнаяПолитика.Вставить("ВсеОрганизации", ОбщегоНазначенияЗК.УчетнаяПолитикаПоПерсоналуОрганизацииПоУмолчанию())
		КонецЕсли;
	КонецЕсли;
	
	Возврат УчетнаяПолитика["ВсеОрганизации"][ИмяПолитики];
	
КонецФункции // ЗначениеУчетнойПолитикиПоПерсоналуОрганизации()

// Проверяет, заполнен ли регламентированный производственный календарь за переданный период 
//
// Параметры
//  ДатаНач, ДатаКон - дата, определяют проверяемый период
//  ТекстСообщенияОбОшибке - строка
//
// Возвращаемое значение:
//   Булево  - если колендарь заполнен за весь период
//   дополнительно возвращается описание незаполненных лет - в параметр ТекстСообщенияОбОшибке
//
///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА 
// Измайлова Полина 23.06.2011 09:22 
//  AVT_Календарь - ссылка на производственный календарь
////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
Функция РегламентированныйКалендарьЗаполнен(ДатаНач, ДатаКон, ТекстСообщенияОбОшибке, AVT_Календарь=Неопределено) Экспорт  

	ТекстЛет = "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ДатаНач,"ДФ=yyyy; ДП='0'") + " КАК Год";
	ТекущийГод = Год(ДатаНач) + 1;
	Пока ТекущийГод <= Год(ДатаКон) Цикл
	    ТекстЛет = ТекстЛет + Символы.ПС + Символы.Таб + "Объединить" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ТекущийГод,"ЧГ=0");
		ТекущийГод = ТекущийГод + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 05.07.2011 16:51 
	Условие = "";
	Если AVT_Календарь <> Неопределено Тогда                                                                 
		Условие = " РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = &Календарь И ";
		Запрос.УстановитьПараметр("Календарь", AVT_Календарь);
	КонецЕсли;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
	//ТекстЗапроса = 
	//	"ВЫБРАТЬ
	//	|	ГодыПериода.Год,
	//	|	ДатыКалендаря.КоличествоДней
	//	|ИЗ
	//	|	(" + ТекстЛет + ") КАК ГодыПериода
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоДней,
	//	|			РегламентированныйПроизводственныйКалендарь.Год КАК Год
	//	|		ИЗ
	//	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	//	|		
	//	|		ГДЕ
	//	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаС И &ДатаПо
	//	|		
	//	|		СГРУППИРОВАТЬ ПО
	//	|			РегламентированныйПроизводственныйКалендарь.Год) КАК ДатыКалендаря
	//	|		ПО ГодыПериода.Год = ДатыКалендаря.Год";
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГодыПериода.Календарь КАК Календарь,
		|	ГодыПериода.Год,
		|	ДатыКалендаря.КоличествоДней
		|ИЗ
		|	(ВЫБРАТЬ ПроизводственныеКалендари.Ссылка КАК Календарь, ГодыПериода.Год ИЗ Справочник.AVT_ПроизводственныеКалендари КАК ПроизводственныеКалендари ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ТекстЛет + ") КАК ГодыПериода ПО ИСТИНА) КАК ГодыПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоДней,
		|			РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь КАК Календарь,
		|			РегламентированныйПроизводственныйКалендарь.Год КАК Год
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаС И &ДатаПо
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь,
		|			РегламентированныйПроизводственныйКалендарь.Год) КАК ДатыКалендаря
		|		ПО ГодыПериода.Год = ДатыКалендаря.Год
		|			И ГодыПериода.Календарь = ДатыКалендаря.Календарь
		|ГДЕ ДатыКалендаря.Год ЕСТЬ NULL
		|
		|ИТОГИ ПО
		|	Календарь";
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          	
			
	Запрос.Текст = ТекстЗапроса;					   
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаС", ДатаНач);
	// ЗАКОММЕНТИРОВАНО: Измайлова Полина 05.07.2011 17:01  
	//Выборка = Запрос.Выполнить().Выбрать();
	//КалендарьЗаполнен = Истина;
	//ТекстСообщенияОбОшибке = "";
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.КоличествоДней = Null Тогда
	//		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + ?(КалендарьЗаполнен,"",", ") + Формат(Выборка.Год,"ЧГ=0");
	//		КалендарьЗаполнен = Ложь;
	//	КонецЕсли;
	//КонецЦикла;
	//ТекстСообщенияОбОшибке = "Перед формированием отчета заполните ""Регламентированный производственный календарь"" за " + ТекстСообщенияОбОшибке + ?(Найти(ТекстСообщенияОбОшибке,",")=0," год!"," годы!");
	
	//Возврат КалендарьЗаполнен
	
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 05.07.2011 17:01 
	ТекстСообщенияОбОшибке = "";
	ВыборкаПоКалендарям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКалендарям.Следующий() Цикл
		КалендарьЗаполнен = Истина;
		Выборка = ВыборкаПоКалендарям.Выбрать();
		ТекстСообщенияОбОшибке = """" + Строка(ВыборкаПоКалендарям.Календарь) + """ за ";
		Пока Выборка.Следующий() Цикл
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + ?(КалендарьЗаполнен,"",", ") + Формат(Выборка.Год,"ЧГ=0");
			КалендарьЗаполнен = Ложь;
		КонецЦикла;
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + ?(Выборка.Количество() = 1," год!"," годы!");
		
	КонецЦикла;



	ТекстСообщенияОбОшибке = "Перед формированием отчета заполните " + ?(ВыборкаПоКалендарям.Количество()=1, "регламентированный производственный календарь", "регламентированные производственные календари")+ ": " + ТекстСообщенияОбОшибке;
	
	Возврат ВыборкаПоКалендарям.Количество() = 0;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
	
	
КонецФункции // РегламентированныйКалендарьЗаполнен()

Процедура ПриКопированииДокументаДанныеПрошлойВерсии(Источник, ОбъектКопирования) Экспорт
	
	Источник.ДанныеПрошлойВерсии = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТКРЫТИЯ ФОРМ ОБЪЕКТОВ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// ИмяРегистра - строка, возможны 2 значения - "РаботникиОрганизаций" или "Работники" - определяет
//               какие работники будут отбираться - по регл. или по упр. учету
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
// Измайлова Полина 22.06.2011 14:59 
// (15) AVT_Календарь - ссылка на производственный календарь для отбора сотрудников по графикам с этим каледарем
////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
Процедура ОткрытьФормуОтбораСпискаРаботников(Владелец, ДатаАктуальности, ИмяРегистра = "РаботникиОрганизаций", Организация = Неопределено, Подразделение = Неопределено, ИсполнятьЗапрос = Истина, ВыбиратьСотрудника = Истина, ИменаСтраницФормы = Неопределено, Реквизиты = Неопределено, ДатаУволенных = Неопределено, ВключатьУволенных = Ложь, ВключатьДоговорников = Ложь, НеПоказыватьУволенных = Ложь, ОпределятьДатыПриемаУвольнения = Ложь, AVT_Календарь = Неопределено) Экспорт
	
	Если ИмяРегистра = "РаботникиОрганизаций" И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, отобрать список сотрудников невозможно!"));
		Возврат;
	КонецЕсли;
		
	ФормированиеСпискаРаботников = Обработки.ФормированиеСпискаРаботников.Создать();
	ФормированиеСпискаРаботников.ИмяРегистра			= ИмяРегистра;
	ФормированиеСпискаРаботников.ДатаАктуальности		= ДатаАктуальности;
	ФормированиеСпискаРаботников.ДатаУволенных			= ?(ДатаУволенных = Неопределено, НачалоГода(ДатаАктуальности), ДатаУволенных);
	ФормированиеСпискаРаботников.ИсполнятьЗапрос		= ИсполнятьЗапрос;
	ФормированиеСпискаРаботников.ВыбиратьСотрудника		= ВыбиратьСотрудника;
	ФормированиеСпискаРаботников.ВключатьДоговорников	= ВключатьДоговорников;
	ФормированиеСпискаРаботников.Реквизиты				= Реквизиты;
	ФормированиеСпискаРаботников.ВключатьУволенных	    = ВключатьУволенных;
	ФормированиеСпискаРаботников.ОпределятьДатыПриемаУвольнения = ОпределятьДатыПриемаУвольнения;
	
	// подготовим Построитель отчета к работе
	ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();
	
	СтруктураНедоступныхОтборов = Новый Структура;
	Если ИмяРегистра = "РаботникиОрганизаций" Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Количество() = 0 Тогда 
			ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();	
		КонецЕсли;
		// Переданную организацию пропишем независимо от сохраненных ранее настроек отбора
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ОбособленноеПодразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ОбособленноеПодразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ОбособленноеПодразделение.Установить(Организация,);
		ФормированиеСпискаРаботников.ПостроительОтчета.Параметры.Вставить("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
		СтруктураНедоступныхОтборов.Вставить("ОбособленноеПодразделение");
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("Подразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("Подразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Значение = Подразделение;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Использование = Истина;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.ВидСравнения = ВидСравнения.ВИерархии;
		СтруктураНедоступныхОтборов.Вставить("Подразделение");
	КонецЕсли;
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 22.06.2011 14:57 
	Если Не AVT_Календарь = Неопределено Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ГрафикРаботы") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ГрафикРаботы")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ГрафикРаботы.ВидСравнения  = ВидСравнения.ВСписке;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ГрафикРаботы.Значение      = AVT_ОбщегоНазначения.ПолучитьГрафикиРаботыПоКалендарю(AVT_Календарь);
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ГрафикРаботы.Использование = Истина;
		СтруктураНедоступныхОтборов.Вставить("ГрафикРаботы");
	КонецЕсли;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	// Теперь откроем подготовленную форму
	Форма = ФормированиеСпискаРаботников.ПолучитьФорму("ФормаНастройки",Владелец);
	Форма.мСтруктураНедоступныхОтборов = СтруктураНедоступныхОтборов;
	Если Реквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма,Реквизиты);
	КонецЕсли;
	
	Если ИменаСтраницФормы = Неопределено Тогда // страницу дополнительных данных не показываем
		Форма.ЭлементыФормы.ПанельСтраницы.Свертка = РежимСверткиЭлементаУправления.Низ;
	Иначе
		УдаляемыеСтраницы = Новый Массив;
		Страницы = Форма.ЭлементыФормы.ПанельСтраницы.Страницы;
		Для каждого СтраницаПанели Из Страницы Цикл
			Если СтраницаПанели.Имя <> ИменаСтраницФормы Тогда
				УдаляемыеСтраницы.Добавить(СтраницаПанели);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтраницаПанели Из УдаляемыеСтраницы Цикл
			Страницы.Удалить(Страницы.Индекс(СтраницаПанели))
		КонецЦикла;
	КонецЕсли;
	
	Если НеПоказыватьУволенных Тогда
		Форма.ЭлементыФормы.ПанельВключатьУволенных.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры  // ОткрытьФормуОтбораСпискаРаботников()

// Процедура открывает форму обработки НастройкаПараметровУчета на нужной странице
//
// Параметры
//		ИмяСтраницы - строка с именем страницы, на которой необходимо открыть форму
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуНастройкаПараметровУчета(ИмяСтраницы = Неопределено, СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ИмяСтраницы = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ИмяСтраницы) = Тип("Массив") Тогда
		МассивПараметров = ИмяСтраницы;
		СтруктураПараметрыФормы = ?(МассивПараметров.Количество() = 2, МассивПараметров[1], Неопределено);
		ИмяСтраницыФормы = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ИмяСтраницыФормы = ИмяСтраницы;
	КонецЕсли;		
	
	Если ИмяСтраницыФормы = Неопределено Тогда
		Возврат;
    КонецЕсли;
    
	Если ИмяСтраницыФормы = "НалоговыйУчет" Тогда
		
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   УчетнаяПолитикаОрганизацийСрезПоследних.Период
        |ИЗ
        |   РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
        Запрос.УстановитьПараметр("Период", Дата(СтруктураПараметрыФормы.Год,1,1)); 
        Запрос.УстановитьПараметр("Организация", СтруктураПараметрыФормы.Организация); 
        
        Выборка = Запрос.Выполнить().Выбрать();
        Если Выборка.Следующий() Тогда
        	ДатаЗаписи = Выборка.Период
        Иначе
         	ДатаЗаписи = Дата(СтруктураПараметрыФормы.Год,1,1)
        КонецЕсли; 
        
        МенеджерЗаписи = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();
        МенеджерЗаписи.Организация = СтруктураПараметрыФормы.Организация;
        МенеджерЗаписи.Период =  ДатаЗаписи;
        МенеджерЗаписи.Прочитать();
        Форма = МенеджерЗаписи.ПолучитьФорму("ФормаЗаписи",,"КлючОткрытойФормы");
		
        Форма.Открыть();
		
	Иначе
        
        Форма = Обработки.НастройкаПараметровУчета.ПолучитьФорму("НастройкаПараметровУчета");
        Если СтруктураПараметрыФормы <> Неопределено Тогда
            ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормы);
        КонецЕсли;
		
		Форма.Открыть();
		Если Форма.Открыта() Тогда
			Форма.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельНастроек.Страницы.Найти(ИмяСтраницыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму обработки НастройкаПрограммы на нужной странице
//
// Параметры
//		ИмяСтраницы - строка с именем страницы, на которой необходимо открыть форму
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуНастройкаПрограммы(ИмяСтраницы = Неопределено, СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ИмяСтраницы = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ИмяСтраницы) = Тип("Массив") Тогда
		МассивПараметров = ИмяСтраницы;
		СтруктураПараметрыФормы = ?(МассивПараметров.Количество() = 2, МассивПараметров[1], Неопределено);
		ИмяСтраницыФормы = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ИмяСтраницыФормы = ИмяСтраницы;
	КонецЕсли;
	
	Если ИмяСтраницыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.НастройкиПрограммы.ПолучитьФорму("НастройкаПрограммы");
	Если СтруктураПараметрыФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормы);
	КонецЕсли;
	Форма.Открыть();
	Если Форма.Открыта() Тогда
		Форма.ЭлементыФормы.ПанельРазделов.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельРазделов.Страницы.Найти(ИмяСтраницыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ГОЛОВНЫЕ ОРГАНИЗАЦИИ И ОБОСОБЛЕННЫЕ ПОДРАЗДЕЛЕНИЯ

// Формирует список головных организаций предприятия
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.ГоловнаяОрганизация,
	|	Организации.ГоловнаяОрганизация.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация <> &ПустаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());						  

	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 

	Возврат СписокОрганизаций;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

// Функция выполняет поиск сотрудников физического лица и, ранжируя их, 
// выбирает "основного" сотрудника организации
// Используется для отображения сотрудника в формах документов, не имеющих реквизита Сотрудник
//
// Параметры:
// 	- Физлицо
// 	- ГоловнаяОрганизация
//
// Возвращаемое значение
//	- Сотрудник, Неопределено (если сотрудник не найден)
//
Функция ОсновнойСотрудникФизлица(Физлицо, ГоловнаяОрганизация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Физлицо",				Физлицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ СотрудникиОрганизаций.Актуальность
	|			ТОГДА 3
	|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	(СотрудникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|	И СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И (СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|			ИЛИ &ГоловнаяОрганизация В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ОсновнойСотрудникФизлица

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Обеспечивает подбор данных по сотруднику
// подбираются подразделение и должность
// Параметры:
//	Форма - форма в которой производится подбор данных
//	ЭлементФормы - элементы формы в которой производится подбор данных
//	Физлицо
//
// ВозвращаемоеЗначение - строка таблицы значений или Неопределено, 
// если подбор данных не состоялся
// Поля строки таблицы значений:
//		ПодразделениеОрганизации
//		Должность
//
Функция ПодборДанныхПоФизлицу(Форма, ЭлементФормы, Физлицо, Организация, ДатаСобытия, ПредлагатьВыбор = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность
	|	КОНЕЦ КАК Должность,
	|	РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеОрганизацииНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизации.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьНаименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&парамДатаСобытия,
	|		Сотрудник.Физлицо = &Физлицо
	|			И Сотрудник.Организация = &Организация) КАК РаботникиОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизации.Период";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат Неопределено;
	ИначеЕсли НаборыДанных.Количество() = 1 Тогда
		//если запись единственная, вернем ее
		Возврат НаборыДанных[0];
	ИначеЕсли ПредлагатьВыбор Тогда
		// предложим выбрать из списка если записей больше одной и предлагать выбор
		СписокНаборовДанных = Новый СписокЗначений;
		Для Каждого Строка Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(Строка, Строка.СотрудникНаименование + " (" + Строка.ПодразделениеОрганизацииНаименование + ", " + Строка.ДолжностьНаименование + ")");
		КонецЦикла;
		ВыбранныйНаборДанных = Форма.ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);
		Если ВыбранныйНаборДанных = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйНаборДанных.Значение;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПодборДанныхПоФизлицу()

// проставляет в строку табличной части или реквизит формы полученные данные по Сотруднику
//
Процедура ПроставитьДанныеСтроки(Сотрудник, ДатаСобытия, ЭлементФормы) Экспорт
	
	Если ТипЗнч(ЭлементФормы) <> Тип("ТабличноеПоле") Тогда
		Возврат;
	КонецЕсли;
	
	// скорректируем даты заполнения датами приема увольнения сотрудника
	СкорректированнаяДатаНачала = Неопределено;
	Если ЭлементФормы.Колонки.Найти("ДатаНачала") <> Неопределено 
		И ЭлементФормы.Колонки.Найти("ДатаОкончания") <> Неопределено Тогда
		ТекущиеДанные = ЭлементФормы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ДатыПриемаУвольнения = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Сотрудник, "ДатаПриемаНаРаботу,ДатаУвольнения");
			// корректируем дату, только она заполнена
			Если ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Тогда
				// если дата начала начисления заполнена и раньше, чем сотрудника приняли на работу
				Если ТекущиеДанные.ДатаНачала < ДатыПриемаУвольнения.ДатаПриемаНаРаботу Тогда
					// если сотрудник принят в текущем месяце, 
					// просто "сдвигаем" дату начала, 
					Если ДатыПриемаУвольнения.ДатаПриемаНаРаботу < КонецМесяца(ТекущиеДанные.ДатаНачала) Тогда
						ТекущиеДанные.ДатаНачала = ДатыПриемаУвольнения.ДатаПриемаНаРаботу;
						СкорректированнаяДатаНачала = ДатыПриемаУвольнения.ДатаПриемаНаРаботу;
					Иначе
						// или очищаем обе даты совсем если он принят еще позже
						ТекущиеДанные.ДатаНачала = Неопределено;
						ТекущиеДанные.ДатаОкончания = Неопределено;
					КонецЕсли;
					// скорректируем и дату начала события
					Если ЭлементФормы.Колонки.Найти("ДатаНачалаСобытия") <> Неопределено Тогда
						ТекущиеДанные.ДатаНачалаСобытия = СкорректированнаяДатаНачала;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// корректируем дату окончания, только она заполнена
			Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
				// если дата начала начисления заполнена и позже, чем сотрудника уволили
				Если ТекущиеДанные.ДатаОкончания > ДатыПриемаУвольнения.ДатаУвольнения Тогда
					// если сотрудник принят в текущем месяце, 
					// просто "сдвигаем" дату начала, 
					Если ДатыПриемаУвольнения.ДатаУвольнения > НачалоМесяца(ТекущиеДанные.ДатаОкончания) Тогда
						ТекущиеДанные.ДатаОкончания = ДатыПриемаУвольнения.ДатаУвольнения;
					КонецЕсли;
					// или ничего не делаем, если он уволен до начала этого месяца
				КонецЕсли;
				// если дата окончания оказалась раньше даты начала - корректируем
				Если ТекущиеДанные.ДатаОкончания < ТекущиеДанные.ДатаНачала Тогда
					Если СкорректированнаяДатаНачала = Неопределено Тогда
						ТекущиеДанные.ДатаНачала = ТекущиеДанные.ДатаОкончания;
						СкорректированнаяДатаНачала = ТекущиеДанные.ДатаНачала;
						// скорректируем и дату начала события
						Если ЭлементФормы.Колонки.Найти("ДатаНачалаСобытия") <> Неопределено Тогда
							ТекущиеДанные.ДатаНачалаСобытия = СкорректированнаяДатаНачала;
						КонецЕсли;
					Иначе
						ТекущиеДанные.ДатаОкончания = Неопределено;
					КонецЕсли;
				КонецЕсли;
				// если дата начала скорректирована, дату окончания надо проверить
				Если СкорректированнаяДатаНачала <> Неопределено И ТекущиеДанные.ДатаОкончания < СкорректированнаяДатаНачала Тогда
					ТекущиеДанные.ДатаОкончания = СкорректированнаяДатаНачала;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// заполним подразделение и должность
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамДатаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность 
	|	КОНЕЦ КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации");
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ?(СкорректированнаяДатаНачала <> Неопределено, СкорректированнаяДатаНачала, ДатаСобытия));
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		// поле ПодразделениеОрганизации есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
		
		// поле Должность есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("Должность") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.Должность = Выборка.Должность;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроставитьДанныеСтроки()

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемент формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колнки синхронизации
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки]);
	Если Элемент.Колонки.Найти("Сторно") <> Неопределено Тогда
		СтруктураПоиска.Вставить("Сторно", Элемент.ТекущиеДанные.Сторно);
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл
		Если ЭлементСоответствия.Ключ = Имя Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = Неопределено;
		Попытка
			Строки = Объект[ЭлементСоответствия.Ключ].НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				СтрокаТЧ = Строки[0];
			КонецЕсли;
		Исключение
			Строки = Форма[ЭлементСоответствия.Ключ].НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				СтрокаТЧ = Строки[0];
			КонецЕсли;
		КонецПопытки;
		Если СтрокаТЧ <> Неопределено Тогда
			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокаТЧ;
			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  //  СинхронизироватьСтроки

// Процедура строит список должностей (или подразделений), по штатному расписанию организации.
//  
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "ПодразделениеОрганизации"
//			определяет, что именно будет выбирать пользователь
//  ДолжностьИлиПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизаций или   
//          СправочникСсылка.ДолжностиОрганизаций, второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзШтатногоРасписанияОрганизации(Режим, Организация, ДолжностьИлиПодразделениеОрганизации, ДатаАктуальности = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ДолжностьИлиПодразделениеОрганизации) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделениеОрганизации", ДолжностьИлиПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Если Режим = "ПодразделениеОрганизации" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность = &ДолжностьИлиПодразделениеОрганизации
		|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации = &ДолжностьИлиПодразделениеОрганизации
		|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
	Иначе
		Возврат Новый СписокЗначений
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
    Возврат СписокВыбора
	
КонецФункции // ВыбратьИзШтатногоРасписанияОрганизации

Процедура ОбработкаВыбораТабличнойЧастиСЗаполнениемПоказателейРасчета(ВыбранноеЗначение, ТабличнаяЧасть) Экспорт

	Для Каждого Сотрудник Из ВыбранноеЗначение.Сотрудники Цикл
		Если ТабличнаяЧасть.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Сотрудник	= Сотрудник;
			СтрокаТабличнойЧасти.ФизЛицо	= Сотрудник.ФизЛицо;
			Для Каждого Параметр Из ВыбранноеЗначение.ПараметрыПодбора Цикл
				Если ЗначениеЗаполнено(Параметр.Значение) Тогда
					СтрокаТабличнойЧасти[Параметр.Ключ] = Параметр.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //ОбработкаВыбораТабличнойЧастиСЗаполнениемПоказателейРасчета

Процедура ОткрытьФормуВыбораСотрудникаОрганизацииСПоказателями(МДРеквизиты, ЭлементыФормы, Ссылка, Дата, ГоловнаяОрганизация, ТабличнаяЧасть, ИмяТЧ, ЕстьТРиВалюта, НаименованиеПоказатель, МассивПоказателей = Неопределено) Экспорт
	
	РеквизитыПодбора = Новый Массив;
	ПредставленияПодбора = Новый Соответствие;
	
	Для СчПоказателей = 1 По 6 Цикл
		Если МассивПоказателей <> Неопределено И МассивПоказателей.Найти("Показатель"+СчПоказателей) = Неопределено Тогда
			Продолжить
		КонецЕсли;
		Если ЕстьТРиВалюта И ЭлементыФормы[ИмяТЧ].Колонки["НаименованиеПоказательТР" + СчПоказателей].Видимость Тогда
			РеквизитыПодбора.Добавить(МДРеквизиты["ТарифныйРазряд" + СчПоказателей]);
			ПредставленияПодбора.Вставить(МДРеквизиты["ТарифныйРазряд" + СчПоказателей], ЭлементыФормы[ИмяТЧ].Колонки["НаименованиеПоказательТР" + СчПоказателей].ТекстШапки);
		ИначеЕсли ЭлементыФормы[ИмяТЧ].Колонки["Показатель" + СчПоказателей].Видимость Тогда
			РеквизитыПодбора.Добавить(МДРеквизиты["Показатель" + СчПоказателей]);
			ПредставленияПодбора.Вставить(МДРеквизиты["Показатель" + СчПоказателей], ЭлементыФормы[ИмяТЧ].Колонки[НаименованиеПоказатель + СчПоказателей].ТекстШапки);
			Если ЕстьТРиВалюта Тогда
				Если ЭлементыФормы[ИмяТЧ].Колонки["Валюта" + СчПоказателей].Видимость Тогда
					РеквизитыПодбора.Добавить(МДРеквизиты["Валюта" + СчПоказателей]);
					ПредставленияПодбора.Вставить(МДРеквизиты["Валюта" + СчПоказателей], "Установлена валюта");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Реквизиты", РеквизитыПодбора);
	ПараметрыПодбора.Вставить("Представления", ПредставленияПодбора);
	
	Если ГоловнаяОрганизация = Неопределено Тогда
		ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(ЭлементыФормы[ИмяТЧ], Ссылка, Ложь, Дата, , ТабличнаяЧасть.ВыгрузитьКолонку("Сотрудник"),,ПараметрыПодбора);
	Иначе
		ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы[ИмяТЧ], Ссылка, Ложь, Дата, ГоловнаяОрганизация, 5,, ТабличнаяЧасть.ВыгрузитьКолонку("Сотрудник") , , , ПараметрыПодбора);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьРеквизитыПодбораПоказателямиРасчета

// Процедура открывает форму выбора сотрудников организации
// Параметры:
//	Владелец 			- владелец формы
//	Ключ 				- ключ, ссылка на документ из которого открывается форма
//	ЗакрыватьПриВыборе 	- Булево
//	ДатаСреза 			- дата, передается в форму для получения доп. данных по сотруднику на эту дату
//	ГоловнаяОрганизация - головная организация
//	Режим 				- число
//	СтандартнаяОбработка- Булево
//	ТекущееЗначение 	- ссылка на элемент, на котором необходимо спозиционироваться при открытии формы, либо массив уже подобранных сотров
//	НеВыбиратьГруппы	- булево, признак выбора в списке групп и элементов
//
Процедура ОткрытьФормуВыбораСотрудникаОрганизации(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, ГоловнаяОрганизация = Неопределено, Режим = 0, СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено, НеВыбиратьГруппы = Истина, ВыборФизлица = Ложь, ПараметрыПодбора = Неопределено, ПараметрыОтбора = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	Форма.ДатаСреза 					= ДатаСреза;
	Если НеВыбиратьГруппы Тогда
		Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	КонецЕсли;	
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	Форма.ВыборФизлица					= ВыборФизлица;
	Форма.мПараметрыПодбора				= ПараметрыПодбора;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Форма.ПараметрТекущаяСтрока		= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Форма.ПараметрТекущаяСтрока	= ОсновнойСотрудникФизлица(ТекущееЗначение, ГоловнаяОрганизация);
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Массив") Тогда
			Форма.мМассивВыбранныхЗначений = ТекущееЗначение;
			
		Иначе
			ОбщегоНазначенияЗК.СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	//установим отборы
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Форма.Отбор.Организация.Установить(ГоловнаяОрганизация);
		Форма.Отбор.Организация.Использование = ЗначениеЗаполнено(ГоловнаяОрганизация);
	КонецЕсли;
		
	Форма.Отбор.ВидДоговора.ВидСравнения	= ВидСравнения.ВСписке;
	Форма.Отбор.ВидДоговора.Использование	= Истина;
	Форма.Отбор.ВидДоговора.Значение		= ПроцедурыУправленияПерсоналомПереопределяемый.СписокДоговоровФормыВыбораСотрудника(Режим);
	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
	
		Для каждого ЭлементОтбора Из ПараметрыОтбора Цикл
		
			Если Форма.Отбор.Найти(ЭлементОтбора.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Форма.Отбор[ЭлементОтбора.Ключ], ЭлементОтбора.Значение);
		
			Если ЭлементОтбора.Значение.Свойство("НастройкаОтбора") Тогда
				ТабличноеПоле = Форма.ЭлементыФормы.СправочникСписок;
				ТабличноеПоле.НастройкаОтбора[ЭлементОтбора.Ключ].Доступность =  ЭлементОтбора.Значение.НастройкаОтбора;
			КонецЕсли;
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудникаОрганизации()

Процедура ОбработкаОткрытияФизлица(Владелец, Ключ, Физлицо, ГоловнаяОрганизация = Неопределено, СтандартнаяОбработка = Неопределено) Экспорт
	
	СотрудникиОрганизацийДополнительный.ОбработкаОткрытияФизлица(Владелец, Ключ, Физлицо, ГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры // ОбработкаОткрытияФизлица

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ ЗНАЧЕНИЙ ПЕРЕЧИСЛЕНИЙ

// Возвращает список отпусков, регистрируемых документом Отпуска организации
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокОтпусковОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый);
	СписокСпособов.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты);
	
	Возврат СписокСпособов
	
КонецФункции

// Возвращает список причин отсутствия, регистрируемых документом Отсутствие организации
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокПрочихСостоянийРаботника() Экспорт

	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Заболевание);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Работает);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ПоУходуЗаРебенком);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Простой);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ВынужденныйПрогул);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ГосударственныеОбязанности);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Прогулы);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ТравмаНаПроизводстве);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Протезирование);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Карантин);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ПоУходуЗаВзрослым);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ПособиеПриДолечивании);
			///////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Администратор 31.05.2012 16:17 
	// ОПИСАНИЕ: Добавляем новую причину отсутствия
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Авт_ДополнительныеДниНеоплачиваемые);
	    
	// Администратор 31.05.2012 16:17  
	////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокПрочихСостоянийРаботника()

// Функция возвращает массив видов времени, 
// по идексам этого массива происходит упорядочивание видов времени в сводном табеле
//
Функция ПолучитьМассивУпорядоченныхВидовИспользованияРабочегоВремени() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|ГДЕ
	|	(НЕ КлассификаторИспользованияРабочегоВремени.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|			ТОГДА 1
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	|			ТОГДА 2
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
	|			ТОГДА 3
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
	|			ТОГДА 4
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|			ТОГДА 5
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные)
	|			ТОГДА 6
	|		КОГДА КлассификаторИспользованияРабочегоВремени.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)
	|			ТОГДА 7
	|		ИНАЧЕ 100
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьМассивДляУпорядочивания()

Функция ПолучитьСписокСтатусовФизлиц() Экспорт
	
	СписокСтатусов = Новый СписокЗначений;
	
	ВключатьМоряков = ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудЧленовЭкипажейМорскихСудов");
	Для каждого Значение Из Перечисления.СтатусыНалогоплательщиковПоНДФЛ Цикл
	    Если Не ВключатьМоряков И Значение = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ Тогда
			Продолжить;
		КонецЕсли;
		СписокСтатусов.Добавить(Значение)
	КонецЦикла;	

	Возврат СписокСтатусов
	
КонецФункции // ПолучитьСписокСтатусовФизлиц()

////////////////////////////////////////////////////////////////////////////////
// КАДРОВАЯ НУМЕРАЦИЯ

// имитация кадрового нумератора для поддержки учетной политики по персоналу с 
// кадровым нумераторм документов
Процедура ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ЕдиныйНумераторКадровыхДокументов, Номер, Префикс, Дата) Экспорт
	// проверка учетной политики
	Если ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		НовыйНомер = ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата);
		
		Если НовыйНомер <> "" Тогда
			СтандартнаяОбработка = Ложь;
			Номер = НовыйНомер;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Получает новый номер документа по переданному списку документов и префиксу
// Фактически, имитирует работу нумератора докумнетов
// Если в информационной базе еще нет документов вернет пустую стоку
//
// Только для документов со строковым номером!
//
// Параметры:
//	СписокДокументов - массив строк с именами документов
//  Префикс - строка, префикс номера
//  Дата - дата документа
// Возвращаемое значение:
//  строка
//
Функция ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата)
	
	Запрос = Новый Запрос;
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ."+Документ+"
		|ГДЕ Номер Подобно """ + Префикс + "%""
		|  И Дата>=&НачалоГода
		|  И Дата<=&КонецГода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";
		
        // поддерживается "годовая" кадровая нумерация
        Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
    	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
        
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Добавить(Выборка.Номер);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		// выберем наибольший
		Результат.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		// получим новый номер
		НовыйНомер = ПолучитьСледующийНомер(СокрП(Результат[0].Значение));
	Иначе
		НовыйНомер = "";
	КонецЕсли;
	Возврат НовыйНомер;
	
КонецФункции		

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер, Знач ДлинаНомера = 0) Экспорт
	
	Если ДлинаНомера = 0 Тогда
		ДлинаНомера = СтрДлина(ПоследнийНомер);
	КонецЕсли;
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если Не ПустаяСтрока(Сред(ПоследнийНомер, СчетчикСимв, 1)) и ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()

// проверяет уникальность кадрового номера
// если не уникален - возвращает Ложь
// Параметры:
//  ЕдиныйНумераторКадровыхДокументов - сведения по учетной политике ведения единого нумератора кадровых документов
//  Организация
//  Номер - проверяемый номер
//  Дата - дата проверяемого документа
//  Ссылка - ссылка на документ, для которого выпорлняется проверка
//
// Вызывает исключение! 
// Должна использоваться, например, при записи документа.
//
Функция ПроверкаУникальностиНомераКадровогоДокумента(ЕдиныйНумераторКадровыхДокументов, Номер, Дата, Ссылка) Экспорт
	// проверка учетной политики
	Если ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		Если Не ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка) Тогда
			ВызватьИсключение "Неуникальный номер кадрового документа! (" + Номер + ")";
		КонецЕсли;
	КонецЕсли;
КонецФункции

// используется в ПроверкаУникальностиНомераКадровогоДокумента
Функция ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Номер", Номер);
    // поддерживается "годовая" кадровая нумерация
    Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ." + Документ+"
		|ГДЕ Ссылка <> &Ссылка 
        |   И Номер = &Номер 
        |   И Дата>=&НачалоГода 
        |   И Дата<=&КонецГода";
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОНТРОЛЯ ПЕРИОДОВ

// Функция возвращает текст запроса для получения периодов использования ресурсов
//
// Параметры:
//	ИмяРегистра		- имя регистра
//	ДатаНачала		- имя параметра "дата начала" интревала за который необходимо получить периоды, 
//					  если не задана - то "от самого начала"
//	ДатаОкончания	- имя параметра "дата окончания" интервала за который необходимо получить периоды, 
//					  если не задана - то "до самомго конца"
//	Условие			- условие, по которому отбираются перичные записи регистра. Условия пишется на поля 
//					  регистра периодов с применением алиаса "Периоды". Например: "Периоды.Физлицо В (&Физлица)"
//
// Возвращает:
//	Текст запроса, содержащий поля:
//		Регистратор1	- ссылка на регистратор, который определяет период
//		Регистратор2	- ссылка на второй регистратор, который определяет период (для 
//						  периодов, которые определяются двумя событиями)
//		<Измерение>		- все измерения регистра кроме ДатаНачала и ДатаОкончания
//		ДатаНачала		- начало полученного виртуального периода
//		ДатаОкончания	- окончание полученного виртуального периода
//
Функция ПериодыИспользованияРесурсов(ИмяРегистра, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Условие = "", УчитыватьРегистратор = Истина, МаксимальныйИнтервал = Неопределено) Экспорт
	
	ИмяТаблицы = "РегистрСведений." + ИмяРегистра;
	РегистрМД = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
	Измерения = Новый Массив;
	Для Каждого Измерение Из РегистрМД.Измерения Цикл
		Имя = Измерение.Имя;
		Если Имя = "ДатаНачала" или Имя = "ДатаОкончания" Тогда
			Продолжить;
		КонецЕсли;
		Измерения.Добавить(Имя);
	КонецЦикла;
		
	Текст =
	"ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " КАК " + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор КАК Регистратор1,
	|	NULL КАК Регистратор2,
	|	Периоды.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыВсп.ДатаНачала) ЕСТЬ NULL 
	|			ТОГДА Периоды.ДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ПериодыВсп.ДатаНачала)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	" + ИмяТаблицы + " КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыВсп
	|		ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение + " = ПериодыВсп." + Измерение + "
		|		И ";
	КонецЦикла;
	Текст = Текст + "ПериодыВсп.ДатаНачала > Периоды.ДатаНачала
	|			И ПериодыВсп.ДатаНачала < Периоды.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Проверка
	|		ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение + " = Проверка." + Измерение + "
		|		И ";
	КонецЦикла;
	Текст = Текст + "Проверка.ДатаОкончания > Периоды.ДатаНачала
	|			И Проверка.ДатаОкончания < Периоды.ДатаОкончания
	|			И (Проверка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|	" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|	Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "Периоды.ДатаНачала >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "Периоды.ДатаНачала <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала >= Периоды.ДатаНачала
		|	И &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1)
	|		И Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|		И Проверка.ДатаНачала ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " КАК " + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор1,
	|	Периоды.Регистратор2,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|ИЗ
	|	(ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|		МаксимальныеПериоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|		Периоды.Регистратор КАК Регистратор1,
	|		ВЫБОР
	|			КОГДА
	|				МаксимальныеПериоды.Регистратор <> Периоды.Регистратор
	|					ТОГДА МаксимальныеПериоды.Регистратор
	|		КОНЕЦ КАК Регистратор2,
	|		ЕСТЬNULL(Периоды.ДатаНачала, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачала,
	|		МаксимальныеПериоды.ДатаОкончания КАК ДатаОкончания
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Регистратор КАК Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаОкончания КАК ДатаОкончания,
	|			МАКСИМУМ(ПериодыПредыдущие.ДатаНачала) КАК МаксДата
	|		ИЗ
	|			" + ИмяТаблицы + " КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыПредыдущие
	|				ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = ПериодыПредыдущие." + Измерение +"
		|				И ";
	КонецЦикла;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "ПериодыПредыдущие.Регистратор <> &Регистратор
		|				И ";
	КонецЕсли;		
	Если МаксимальныйИнтервал <> Неопределено Тогда
		Текст = Текст + "(ПериодыПредыдущие.ДатаНачала > ДОБАВИТЬКДАТЕ(Периоды.ДатаОкончания, ДЕНЬ, -&МаксимальныйИнтервал))
		|				И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаОкончания > ПериодыПредыдущие.ДатаНачала
	|		ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|		" + Условие + "
		|		И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "Периоды.Регистратор <> &Регистратор
		|		И ";
	КонецЕсли;		
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "Периоды.ДатаОкончания >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "Периоды.ДатаОкончания <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст +
	"			Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаОкончания) КАК МаксимальныеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Периоды
	|			ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = МаксимальныеПериоды." + Измерение +"
		|				И ";
	КонецЦикла;
	Текст = Текст + "МаксимальныеПериоды.МаксДата = Периоды.ДатаНачала
	|				И (Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|		МинимальныеПериоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|		МинимальныеПериоды.Регистратор КАК Регистратор1,
	|		ВЫБОР КОГДА Периоды.Регистратор <> МинимальныеПериоды.Регистратор ТОГДА Периоды.Регистратор КОНЕЦ КАК Регистратор2,
	|		МинимальныеПериоды.ДатаНачала,
	|		ЕСТЬNULL(Периоды.ДатаОкончания, ДАТАВРЕМЯ(1,1,1))
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Регистратор КАК Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаНачала КАК ДатаНачала,
	|			МИНИМУМ(ПериодыСледующие.ДатаОкончания) КАК МинДата
	|		ИЗ
	|			" + ИмяТаблицы + " КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыСледующие
	|				ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = ПериодыСледующие." + Измерение +"
		|				И ";
	КонецЦикла;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "ПериодыСледующие.Регистратор <> &Регистратор
		|				И ";
	КонецЕсли;
	Если МаксимальныйИнтервал <> Неопределено Тогда
		Текст = Текст + "(ПериодыСледующие.ДатаОкончания < ДОБАВИТЬКДАТЕ(Периоды.ДатаНачала, ДЕНЬ, &МаксимальныйИнтервал))
		|				И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала < ПериодыСледующие.ДатаОкончания
	|					И ПериодыСледующие.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
	|		ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "(";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ >= &" + ДатаНачала + "
		|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено Тогда
			Текст = Текст + "И ";
		КонецЕсли;
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ <= &" + ДатаОкончания + "
		|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ИЛИ &ДатаНачала >= ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ
		|	И &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
		Текст = Текст + ") И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаНачала) КАК МинимальныеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Периоды
	|			ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = МинимальныеПериоды." + Измерение +"
		|				И ";
	КонецЦикла;
	Текст = Текст + "МинимальныеПериоды.МинДата = Периоды.ДатаОкончания
	|				И (Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1))) КАК Периоды";
	Возврат Текст;
	
КонецФункции

Процедура ПолучитьОшибкиПериодовРаботыСотрудникаПоОсновномуМестуРаботы(Регистратор, УчитыватьРегистратор, МассивФизлица, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияРесурсов("ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы", , , "Периоды.Физлицо В (&Физлица)", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Физлицо,
	|	Физлицо.Наименование КАК ФизлицоНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Физлица",		МассивФизлица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееФизлицо						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизлицо <> Выборка.Физлицо Тогда
			ТекущееФизлицо = Выборка.Физлицо;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Физлицо] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Физлицо, 
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Физлицо			= Выборка.ФизлицоНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					и Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					и Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьОшибкиПериодовРаботыСотрудникаПоСовместительству(Регистратор, УчитыватьРегистратор, МассивФизлица, Организация, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияРесурсов("ПериодыРаботыРаботниковОрганизацийПоСовместительству", , , "Периоды.Физлицо В (&Физлица) И Периоды.Организация = &Организация", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Физлицо,
	|	Физлицо.Наименование КАК ФизлицоНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Физлица",		МассивФизлица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееФизлицо						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизлицо <> Выборка.Физлицо Тогда
			ТекущееФизлицо = Выборка.Физлицо;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Физлицо] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Физлицо, 
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Физлицо			= Выборка.ФизлицоНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					и Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					и Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ формирования движений кадровых документов по плановым начислениям работников организации

Функция СформироватьЗапросПоПлановымНачислениям(ДанныеОНачислениях, КонтрольРазмераСтавокШтатногоРасписания, ДанныеПлановыхНачислений = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеОНачислениях", ДанныеОНачислениях);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ПодразделениеОрганизации,
	|	ТЧНачисления.Должность,
	|	ТЧНачисления.ЗанимаемыхСтавок,
	|	ТЧНачисления.ГрафикРаботы,
	|	ТЧНачисления.Период,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ПериодЗавершения,
	|	ТЧНачисления.ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ВидРасчетаИзмерение,
	|	ТЧНачисления.СпособРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Валюта6,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 25.10.2011 15:31 
	|	ТЧНачисления.AVTШтатноеРасписание,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|	ТЧНачисления.ТарифныйРазряд6
	|ПОМЕСТИТЬ ВТДанныеОНачислениях
	|ИЗ
	|	&ДанныеОНачислениях КАК ТЧНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();	
	
	// временная таблица с результатами проверки штатного расписания
	Если КонтрольРазмераСтавокШтатногоРасписания Тогда
		Запрос.Текст =  ПроцедурыУправленияПерсоналомПереопределяемый.СформироватьТекстЗапросаПоПроверкеСоответствияШтатномуРасписанию();
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА КАК РазмерСоответствуетШТР
		|ПОМЕСТИТЬ ВТДанныеШтатногоРасписания
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
	КонецЕсли;
	Запрос.Выполнить();	
	
	// временная таблица с данными плановых начислений по состоянию до изменения
	Если ДанныеПлановыхНачислений = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|ГДЕ
		|	(ТЧНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
		|			ИЛИ ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))";
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|	ТЧОсновныеНачисления.ВидРасчета КАК ПрежнийВидРасчета,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд6,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель6,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта6,
			|	НЕОПРЕДЕЛЕНО КАК КонфликтныйДокумент,
			|	НЕОПРЕДЕЛЕНО КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|ГДЕ
			|	(ТЧОсновныеНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
			|			ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДатыНачислений.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|	КОНЕЦ КАК ПрежнийВидРасчета,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1
			|	КОНЕЦ КАК ПрежнийПоказатель1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта1Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта1
			|	КОНЕЦ КАК ПрежняяВалюта1,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель2
			|	КОНЕЦ КАК ПрежнийПоказатель2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта2Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта2
			|	КОНЕЦ КАК ПрежняяВалюта2,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель3
			|	КОНЕЦ КАК ПрежнийПоказатель3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта3Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта3
			|	КОНЕЦ КАК ПрежняяВалюта3,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель4
			|	КОНЕЦ КАК ПрежнийПоказатель4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта4Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта4
			|	КОНЕЦ КАК ПрежняяВалюта4,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель5
			|	КОНЕЦ КАК ПрежнийПоказатель5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта5Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта5
			|	КОНЕЦ КАК ПрежняяВалюта5,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6
			|	КОНЕЦ КАК ПрежнийТарифныйРазряд6,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Показатель6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель6
			|	КОНЕЦ КАК ПрежнийПоказатель6,
			|	ВЫБОР
			|		КОГДА ДатыНачислений.Период >= ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта6Завершения
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта6
			|	КОНЕЦ КАК ПрежняяВалюта6,
			|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор КАК КонфликтныйДокумент,
			|	ДатыНачислений.ПериодНачислений КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ТЧОсновныеНачисления.Период КАК Период,
			|		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА НЕОПРЕДЕЛЕНО
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ КАК ВидРасчетаИзмерение,
			|		МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК ПериодНачислений
			|	ИЗ
			|		ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|			ПО ТЧОсновныеНачисления.Период >= ПлановыеНачисленияРаботниковОрганизаций.Период
			|				И ТЧОсновныеНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ВЫБОР
			|					КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|						ТОГДА НЕОПРЕДЕЛЕНО
			|					ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|				КОНЕЦ = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение)
			|	ГДЕ
			|		(ТЧОсновныеНачисления.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
			|				ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТЧОсновныеНачисления.НомерСтроки,
			|		ТЧОсновныеНачисления.ВидРасчета,
			|		ТЧОсновныеНачисления.Период,
			|		ТЧОсновныеНачисления.Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА НЕОПРЕДЕЛЕНО
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ) КАК ДатыНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ПО ДатыНачислений.ПериодНачислений = ПлановыеНачисленияРаботниковОрганизаций.Период
			|			И ДатыНачислений.ВидРасчетаИзмерение = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение
			|			И ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("ДанныеПлановыхНачислений", ДанныеПлановыхНачислений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧОсновныеНачисления.ПрежнийВидРасчета,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд1,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель1,
		|	ТЧОсновныеНачисления.ПрежняяВалюта1,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд2,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель2,
		|	ТЧОсновныеНачисления.ПрежняяВалюта2,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд3,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель3,
		|	ТЧОсновныеНачисления.ПрежняяВалюта3,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд4,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель4,
		|	ТЧОсновныеНачисления.ПрежняяВалюта4,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд5,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель5,
		|	ТЧОсновныеНачисления.ПрежняяВалюта5,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд6,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель6,
		|	ТЧОсновныеНачисления.ПрежняяВалюта6,
		|	ТЧОсновныеНачисления.КонфликтныйДокумент,
		|	ТЧОсновныеНачисления.ДатаДвижения
		|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
		|ИЗ
		|	&ДанныеПлановыхНачислений КАК ТЧОсновныеНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	Запрос.Выполнить();	
	
	// временная таблица с описанием показателей
	// в основном запросе собираем в единой выборке подготовленные ранее данные
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта КАК Показатель1Валюта,
	|	Показатели2.Показатель.Валюта КАК Показатель2Валюта,
	|	Показатели3.Показатель.Валюта КАК Показатель3Валюта,
	|	Показатели4.Показатель.Валюта КАК Показатель4Валюта,
	|	Показатели5.Показатель.Валюта КАК Показатель5Валюта,
	|	Показатели6.Показатель.Валюта КАК Показатель6Валюта,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.ТарифнаяСтавка КАК Показатель1ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка КАК Показатель2ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка КАК Показатель3ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка КАК Показатель4ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка КАК Показатель5ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка КАК Показатель6ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧОсновныеНачисления.НомерСтроки,
	|	Показатели1.Показатель,
	|	Показатели2.Показатель,
	|	Показатели3.Показатель,
	|	Показатели4.Показатель,
	|	Показатели5.Показатель,
	|	Показатели6.Показатель,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели1.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели2.Показатель.Наименование,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели3.Показатель.Наименование,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели4.Показатель.Наименование,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели5.Показатель.Наименование,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный,
	|	Показатели6.Показатель.Наименование,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.Показатель.Валюта,
	|	Показатели2.Показатель.Валюта,
	|	Показатели3.Показатель.Валюта,
	|	Показатели4.Показатель.Валюта,
	|	Показатели5.Показатель.Валюта,
	|	Показатели6.Показатель.Валюта,
	|	Показатели1.Показатель.ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|ПОМЕСТИТЬ ВТДвойныеСтроки
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОНачислениях КАК ТЧНачисления2
	|		ПО (ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|				ИЛИ ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|					И ТЧНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|			И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|			И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|			И ТЧНачисления.Период = ТЧНачисления2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧНачисления.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Организация КАК ОрганизацияСотрудника,
	|	ТЧНачисления.Период,
	|	ТЧНачисления.ПериодЗавершения,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.СпособРасчета КАК СпособРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ПроизвольнаяФормулаРасчета, ЛОЖЬ) КАК ПроизвольнаяФормулаРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ЗачетОтработанногоВремени, ЛОЖЬ) КАК ОсновноеНачисление,
	|	ЕСТЬNULL(ТЧНачисления.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.Показатель1,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта1 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта1 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель1Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта1
	|	КОНЕЦ КАК Валюта1,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.Показатель2,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта2 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта2 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель2Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта2
	|	КОНЕЦ КАК Валюта2,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.Показатель3,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта3 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта3 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель3Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта3
	|	КОНЕЦ КАК Валюта3,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.Показатель4,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта4 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта4 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель4Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта4
	|	КОНЕЦ КАК Валюта4,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.Показатель5,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта5 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта5 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель5Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта5
	|	КОНЕЦ КАК Валюта5,
	|	ТЧНачисления.ТарифныйРазряд6,
	|	ТЧНачисления.Показатель6,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Валюта6 ЕСТЬ NULL 
	|				ИЛИ ТЧНачисления.Валюта6 = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА Показатели.Показатель6Валюта
	|		ИНАЧЕ ТЧНачисления.Валюта6
	|	КОНЕЦ КАК Валюта6,
	|	ДанныеШтатногоРасписания.РазмерСоответствуетШТР,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийВидРасчета
	|	КОНЕЦ КАК ВидРасчетаЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчетаЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд1
	|	КОНЕЦ КАК ТарифныйРазряд1Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель1
	|	КОНЕЦ КАК Показатель1Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта1
	|	КОНЕЦ КАК Валюта1Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд2
	|	КОНЕЦ КАК ТарифныйРазряд2Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель2
	|	КОНЕЦ КАК Показатель2Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта2
	|	КОНЕЦ КАК Валюта2Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд3
	|	КОНЕЦ КАК ТарифныйРазряд3Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель3
	|	КОНЕЦ КАК Показатель3Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта3
	|	КОНЕЦ КАК Валюта3Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд4
	|	КОНЕЦ КАК ТарифныйРазряд4Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель4
	|	КОНЕЦ КАК Показатель4Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта4
	|	КОНЕЦ КАК Валюта4Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд5
	|	КОНЕЦ КАК ТарифныйРазряд5Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель5
	|	КОНЕЦ КАК Показатель5Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта5
	|	КОНЕЦ КАК Валюта5Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд6
	|	КОНЕЦ КАК ТарифныйРазряд6Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежнийПоказатель6
	|	КОНЕЦ КАК Показатель6Завершения,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПериодЗавершения >= ТЧНачисления.Период
	|				И ТЧНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеОПрежнихНачислениях.ПрежняяВалюта6
	|	КОНЕЦ КАК Валюта6Завершения,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета.СпособРасчета КАК ПрежнийСпособРасчета,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд1,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель1,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта1,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд2,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель2,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта2,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд3,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель3,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта3,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд4,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель4,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта4,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд5,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель5,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта5,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд6,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель6,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта6,
	|	ДанныеОПрежнихНачислениях.КонфликтныйДокумент,
	|	ДанныеОПрежнихНачислениях.ДатаДвижения,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0) КАК КоличествоПоказателей,
	|	Показатели.Показатель1Предопределенный,
	|	Показатели.Показатель1Наименование,
	|	Показатели.Показатель1ТипПоказателя,
	|	Показатели.Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2Предопределенный,
	|	Показатели.Показатель2Наименование,
	|	Показатели.Показатель2ТипПоказателя,
	|	Показатели.Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3Предопределенный,
	|	Показатели.Показатель3Наименование,
	|	Показатели.Показатель3ТипПоказателя,
	|	Показатели.Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4Предопределенный,
	|	Показатели.Показатель4Наименование,
	|	Показатели.Показатель4ТипПоказателя,
	|	Показатели.Показатель4ВозможностьИзменения,
	|	Показатели.Показатель5Предопределенный,
	|	Показатели.Показатель5Наименование,
	|	Показатели.Показатель5ТипПоказателя,
	|	Показатели.Показатель5ВозможностьИзменения,
	|	Показатели.Показатель6Предопределенный,
	|	Показатели.Показатель6Наименование,
	|	Показатели.Показатель6ТипПоказателя,
	|	Показатели.Показатель6ВозможностьИзменения,
	|	Показатели.Показатель1ТарифнаяСтавка,
	|	Показатели.Показатель2ТарифнаяСтавка,
	|	Показатели.Показатель3ТарифнаяСтавка,
	|	Показатели.Показатель4ТарифнаяСтавка,
	|	Показатели.Показатель5ТарифнаяСтавка,
	|	Показатели.Показатель6ТарифнаяСтавка,
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеШтатногоРасписания КАК ДанныеШтатногоРасписания
	|		ПО ТЧНачисления.НомерСтроки = ДанныеШтатногоРасписания.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПрежнихНачислениях КАК ДанныеОПрежнихНачислениях
	|		ПО ТЧНачисления.НомерСтроки = ДанныеОПрежнихНачислениях.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
	|		ПО ТЧНачисления.НомерСтроки = Показатели.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвойныеСтроки КАК ДвойныеСтроки
	|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачисления()

Процедура СформироватьДвижениеПоПлановымНачислениям(Движение, ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса) Экспорт

	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение	= ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;
	Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
	
	СтрокаПолей = "Период,Сотрудник,Действие,ВидРасчета,ПериодЗавершения,ДействиеЗавершения,ВидРасчетаЗавершения";
	
	Если ВыборкаСтрокЗапроса.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
	
		Для Сч = 1 По 6 Цикл
			Если ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаСтрокЗапроса.КоличествоПоказателей Тогда
					Если ВыборкаСтрокЗапроса["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаСтрокЗапроса.ОсновноеНачисление И ВыборкаСтрокЗапроса["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + ",Валюта"+ Сч + ",ТарифныйРазряд"+ Сч;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + ",Валюта"+ Сч;
				Если ВыборкаСтрокЗапроса.ТребуетВводаТарифногоРазряда Тогда
					СтрокаПолей = СтрокаПолей + ",ТарифныйРазряд"+ Сч;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Движения на дату завершения
	Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ПериодЗавершения) И ВыборкаСтрокЗапроса.ДействиеЗавершения <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		
		Для Сч = 1 По 6 Цикл
			Если ВыборкаСтрокЗапроса.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаСтрокЗапроса.КоличествоПоказателей Тогда
					Если ВыборкаСтрокЗапроса["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаСтрокЗапроса.ОсновноеНачисление И ВыборкаСтрокЗапроса["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + "Завершения,Валюта"+ Сч + "Завершения,ТарифныйРазряд"+ Сч + "Завершения";
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПолей = СтрокаПолей + ",Показатель" + Сч + "Завершения,Валюта"+ Сч + "Завершения,ТарифныйРазряд"+ Сч + "Завершения";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаСтрокЗапроса, СтрокаПолей);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ШТАТНЫМ РАСПИСАНИЕМ

// Функция возвращаект сведения о надбавках позиции штатного расписания на выбранную дату
// для измерений Подразделение и Должность
//
Функция СведенияОНадбавкахПозицииШтатногоРасписания(Период, Подразделение, Должность) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	Период);
	Запрос.УстановитьПараметр("Подразделение",		Подразделение);
	Запрос.УстановитьПараметр("Должность",			Должность);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.ВидНадбавки КАК Надбавка,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель1,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель2,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель3,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель4,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель5,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель6,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта1,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта2,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта3,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта4,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта5,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта6
	|ИЗ
	|   РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			ПодразделениеОрганизации = &Подразделение
	|				И Должность = &Должность) КАК НадбавкиПоШтатномуРасписаниюСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СведенияОНадбавкахПозицииШтатногоРасписания()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОБМЕНА ДАННЫМИ С БАНКАМИ ПО ЛИЦЕВЫМ СЧЕТАМ СОТРУДНИКОВ

// Функция получает массив операций по счетам сотрудника из дерева XML
Функция ПолучитьОперацииПоЛицевымСчетамРаботников(ДеревоОбработки, ИмяЭлементаИмпорта) Экспорт
	
	МассивОпераций = Новый Массив;
	
	Для каждого Ветка из ДеревоОбработки.Строки Цикл
		Если Ветка.Имя = ИмяЭлементаИмпорта Тогда
			Для каждого СтрокаВетки из Ветка.Строки Цикл
				Если ИмяЭлементаИмпорта = "РезультатОткрытияСчетов" ИЛИ ИмяЭлементаИмпорта = "РезультатЗачисленияЗарплаты" Тогда
					Если ИмяЭлементаИмпорта = "РезультатОткрытияСчетов" Тогда
						
						ШаблонОперации = Новый Структура;
						ШаблонОперации.Вставить("Сотрудник", Неопределено);
						ШаблонОперации.Вставить("ЛицевойСчет", Неопределено);
						ШаблонОперации.Вставить("Результат", Неопределено);
						
					Иначе
						
						ШаблонОперации = Новый Структура;
						ШаблонОперации.Вставить("Сотрудник", Неопределено);
						ШаблонОперации.Вставить("ЛицевойСчет", Неопределено);
						ШаблонОперации.Вставить("Сумма", Неопределено);
						ШаблонОперации.Вставить("Результат", Неопределено);
					КонецЕсли;	
					Если ШаблонОперации.Свойство(СтрокаВетки.Имя) Тогда
						ШаблонОперации[СтрокаВетки.Имя] = ПолучитьЗначениеИзДерева(СтрокаВетки, ШаблонОперации);
					КонецЕсли;
					
					Для каждого ЭлементШаблона Из ШаблонОперации Цикл
						Если ЭлементШаблона.Значение = Неопределено Тогда
							СообщитьОбОшибкеОбработки("Анализ операции", "Некорректная структура элемента " + ИмяЭлементаИмпорта + "!");
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					МассивОпераций.Добавить(ШаблонОперации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОпераций;
	
КонецФункции

Функция ПолучитьЗначениеИзДерева(ВеткаЗначения, ШаблонОперации)Экспорт

	СтадияОбработки = "Анализ данных операции";
	
	ИмяЗначения = ВеткаЗначения.Имя;
	
	Если ИмяЗначения = "Сотрудник" Тогда
		СтруктураСотрудника = Новый Структура;
		СтруктураСотрудника.Вставить("Фамилия", Неопределено);
		СтруктураСотрудника.Вставить("Имя", Неопределено);
		СтруктураСотрудника.Вставить("Отчество", Неопределено);

		Для каждого Лист из ВеткаЗначения.Строки Цикл
			
			Если СтруктураСотрудника.Свойство(Лист.Имя) Тогда
				СтруктураСотрудника[Лист.Имя] = Лист.Значение;
			ИначеЕсли ШаблонОперации.Свойство(Лист.Имя) Тогда
				ШаблонОперации[Лист.Имя] = ПолучитьЗначениеИзДерева(Лист, ШаблонОперации);	
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ЭлементСотрудника Из СтруктураСотрудника Цикл
			Если ЭлементСотрудника.Значение = Неопределено Тогда
				СообщитьОбОшибкеОбработки(СтадияОбработки, "Некорректные данные о сотруднике " + СтруктураСотрудника.Фамилия + СтруктураСотрудника.Имя + СтруктураСотрудника.Отчество + "!");
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		ЗапросФИО = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                         |	ФИОФизЛицСрезПоследних.Фамилия,
		                         |	ФИОФизЛицСрезПоследних.Имя,
		                         |	ФИОФизЛицСрезПоследних.Отчество,
		                         |	ФИОФизЛицСрезПоследних.ФизЛицо
		                         |ИЗ
		                         |	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
		                         |ГДЕ
		                         |	ФИОФизЛицСрезПоследних.Фамилия = &Фамилия
		                         |	И ФИОФизЛицСрезПоследних.Имя = &Имя
		                         |	И ФИОФизЛицСрезПоследних.Отчество = &Отчество");
		
		ЗапросФИО.УстановитьПараметр("Фамилия", СтруктураСотрудника.Фамилия);
		ЗапросФИО.УстановитьПараметр("Имя", СтруктураСотрудника.Имя);
		ЗапросФИО.УстановитьПараметр("Отчество", СтруктураСотрудника.Отчество);
		Выборка = ЗапросФИО.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ФизЛицо;
			
		Иначе
			Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ИмяЗначения = "ЛицевойСчет" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "УдостоверениеЛичности" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "ДействительноДо" Тогда
		Попытка
			Значение = Дата(ВеткаЗначения.Значение);
		Исключение
			Значение = Дата('00010101');
		КонецПопытки;
		
		Возврат Значение;
		
	ИначеЕсли ИмяЗначения = "Сумма" Тогда
		Попытка
			Значение = Число(ВеткаЗначения.Значение);
		Исключение
			Значение = 0;
			СообщитьОбОшибкеОбработки(СтадияОбработки, "Некорректно указана сумма " + ВеткаЗначения.Значение + " !");
		КонецПопытки;
		
		Возврат Значение;
		
	ИначеЕсли ИмяЗначения = "ВидВклада" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "Результат" Тогда
		
		Значение = ВРег(СокрЛП(ВеткаЗначения.Значение));
		Если Значение = ВРег("СчетОткрыт") Тогда
			Возврат "Счет открыт";
			
		ИначеЕсли Значение = ВРег("ОшибкаЗаполненияДанных") Тогда
			Возврат "Ошибка заполнения данных";
			
		ИначеЕсли Значение = ВРег("СчетНеОткрыт") Тогда
			Возврат "Счет не открыт";
			
		ИначеЕсли Значение = ВРег("Зачислено") Тогда
			Возврат "Зачислено";
			
		ИначеЕсли Значение = ВРег("ОшибкаФИО") Тогда
			Возврат "Ошибка в ФИО";
			
		ИначеЕсли Значение = ВРег("СчетЗакрыт") Тогда
			Возврат "Счет закрыт";
			
		ИначеЕсли Значение = ВРег("СчетОтсутствует") Тогда
			Возврат "Счет отсутствует";
			
		ИначеЕсли Значение = ВРег("НеЗачислено") Тогда
			Возврат "Не зачислено";
			
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;
	
	СообщитьОбОшибкеОбработки(СтадияОбработки, "Неверное значение " + ИмяЗначения + "в структуре элемента!");

КонецФункции

Процедура СообщитьОбОшибкеОбработки(СтадияОбработки, ТекстОшибки)Экспорт
	
	Сообщить(СтадияОбработки + ":  " + ТекстОшибки);
	
КонецПроцедуры



/////автоматизация

Процедура Авт_ПриУстановкеНовогоНомераИзмененияГрафиковРабот(СтандартнаяОбработка, Номер, Префикс, Дата) Экспорт
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 02.05.2012 09:51 
	// проверка учетной политики
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить("Авт_ИзменениеГрафикаРаботы");
		
	НовыйНомер = ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата);
		
	Если НовыйНомер <> "" Тогда
		СтандартнаяОбработка = Ложь;
		Номер = НовыйНомер;
	КонецЕсли;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          	
КонецПроцедуры
