
// Проверяет правильность заполнения событий в шапке документов ОС
// Параметры
//  Событие (Перечисление ВыдыСобытийОС): вид события
//  ВидыСобытий (Перечисление ВыдыСобытийОС,СписокЗначений): правильные события
//  ПредставлениеРеквизита: Представление проверяемого реквизита
//  Отказ : отказ от проведения документа
//
Процедура ПроверкаЗаполненияСобытий(Событие,ВидыСобытий,ПредставлениеРеквизита,Отказ) Экспорт
	
	ПравильноеСобытие = Истина;
	Если ВидыСобытий <> Неопределено Тогда
		Если ЗначениеЗаполнено(Событие) тогда
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ПравильноеСобытие = ВидыСобытий.НайтиПоЗначению(Событие)<>Неопределено;
			Иначе
				ПравильноеСобытие = Событие = ВидыСобытий;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПравильноеСобытие тогда
		
		СтрокаСообщения = "Неправильное значение реквизита шапки """ + СокрЛП(ПредставлениеРеквизита) + """!";
		Сообщить(СтрокаСообщения,СтатусСообщения.Важное);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры// ПроверкаЗаполненияСобытий()

// Возвращает сведения об ОС на дату
// 
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  ДатаСведений	    - Дата
//  Организация		    - СправочникСсылка.Организации
//
Функция ПолучитьСведенияОбОС(ОсновноеСредство,ДатаСведений,Организация = Неопределено, ВидУчета = "Упр") Экспорт
	
	ЗапросСведений  = Новый Запрос;
	
	Если ВидУчета  = "Бух" и Организация <> Неопределено тогда
		
		НазваниеРегистраПервоначальныхСведений = "ПервоначальныеСведенияОСБухгалтерскийУчет";
		НазваниеРегистраПараметровАмортизации  = "ПараметрыАмортизацииОСБухгалтерскийУчет";
		НазваниеРегистраМестонахожденияОС 	   = "МестонахождениеОСБухгалтерскийУчет";
		
		ТекстУсловия  	   		= "&ДатаСведений, Организация = &Организация И ОсновноеСредство = &ОсновноеСредство";
		ТекстУсловияКонецМесяца = "&ДатаСведенийКонецМесяца, Организация = &Организация И ОсновноеСредство = &ОсновноеСредство";
		СтрокиСчетов	   		= "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
		                	  		|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
		СоединениеПоСчетам 		= "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних("+ТекстУсловия+") КАК СчетаБухгалтерскогоУчетаОС
							  		|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
	    ИнвентарныйНомер   		= "	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер,";
		ЗапросСведений.УстановитьПараметр("Организация",Организация);
		СтрокаОрганизация  		= "  МестонахождениеОС.Организация.Наименование КАК Организация,";
		
	ИначеЕсли ВидУчета  = "Упр" тогда
		
		НазваниеРегистраПервоначальныхСведений = "ПервоначальныеСведенияОС";
		НазваниеРегистраПараметровАмортизации  = "ПараметрыАмортизацииОС";
		НазваниеРегистраМестонахожденияОС 	   = "МестонахождениеОС";
		ТекстУсловия  	   		= "&ДатаСведений, ОсновноеСредство = &ОсновноеСредство";
		ТекстУсловияКонецМесяца = "&ДатаСведенийКонецМесяца, ОсновноеСредство = &ОсновноеСредство";
	    ИнвентарныйНомер   		= "	ПервоначальныеСведенияОС.ОсновноеСредство.Код КАК ИнвентарныйНомер,";
		СоединениеПоСчетам 		= "";
		СтрокаОрганизация  		= "";
		СтрокиСчетов	   		= "";
		
	ИначеЕсли ВидУчета  = "Нал" тогда	
		Возврат Неопределено;
	Иначе
		// передан непонятный параметр ничего не возвращаем
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросСведений.УстановитьПараметр("ДатаСведений", ДатаСведений);
	ЗапросСведений.УстановитьПараметр("ДатаСведенийКонецМесяца", КонецМесяца(ДатаСведений));
	ЗапросСведений.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);

	ЗапросСведений.Текст =" 
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОС.КоэффициентАмортизации,
	|	ПараметрыАмортизацииОС.КоэффициентУскорения,
	|	ПараметрыАмортизацииОС.Период,
	|	ПараметрыАмортизацииОС.СрокПолезногоИспользования,
	|"+СтрокиСчетов
	+ИнвентарныйНомер
	+СтрокаОрганизация+"
	|	МестонахождениеОС.Местонахождение,
	|	МестонахождениеОС.МОЛ,
	|	МестонахождениеОС.Местонахождение.Наименование КАК МестонахождениеОС,
	|	МестонахождениеОС.Местонахождение.Наименование КАК Подразделение,
	|	ПервоначальныеСведенияОС.СпособНачисленияАмортизации,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОС.ПервоначальнаяСтоимость = 0 ТОГДА
	|			ПервоначальныеСведенияОСКонецМесяца.ПервоначальнаяСтоимость
	|		ИНАЧЕ ПервоначальныеСведенияОС.ПервоначальнаяСтоимость
	|	КОНЕЦ КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОС.ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.КодПоОКОФ.Код КАК КодПоОКОФ,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.АмортизационнаяГруппа КАК НомерГруппы,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеПолное,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.Наименование КАК Наименование,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.Изготовитель КАК ИзготовительОС
	|ИЗ
	|	РегистрСведений."+НазваниеРегистраПервоначальныхСведений+".СрезПоследних("+ТекстУсловия+") КАК ПервоначальныеСведенияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПараметровАмортизации+".СрезПоследних("+ТекстУсловия+") КАК ПараметрыАмортизацииОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ПараметрыАмортизацииОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраМестонахожденияОС+".СрезПоследних("+ТекстУсловия+") КАК МестонахождениеОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПервоначальныхСведений+".СрезПоследних("+ТекстУсловияКонецМесяца+") КАК ПервоначальныеСведенияОСКонецМесяца
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ПервоначальныеСведенияОСКонецМесяца.ОсновноеСредство
	|"+СоединениеПоСчетам;
	
	РезультатЗапроса = ЗапросСведений.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
	     Возврат Неопределено;
	Иначе
		 ТекущиеСведенияОС = РезультатЗапроса.Выбрать();
		 ТекущиеСведенияОС.Следующий();
		 Возврат ТекущиеСведенияОС;
	КонецЕсли;
	
КонецФункции//ПолучитьСведенияОбОС

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

Функция ПолучитьДатуПереходаКЛинейномуМетоду(ДатаРасчета, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета));
																						   
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.Период
	|ПОМЕСТИТЬ НелинейныйМетод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И МетодНачисленияАмортизацииНУ = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Нелинейный)) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период
	|ПОМЕСТИТЬ ЛинейныйМетод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация = &Организация
	|	И УчетнаяПолитикаОрганизаций.МетодНачисленияАмортизацииНУ = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|	И УчетнаяПолитикаОрганизаций.Период МЕЖДУ ДАТАВРЕМЯ(2009, 1, 1) И &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ЛинейныйМетод.Период), ДАТАВРЕМЯ(2009, 1, 1)) КАК ДатаПереходаКЛинейномуМетоду
	|ИЗ
	|	НелинейныйМетод КАК НелинейныйМетод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛинейныйМетод КАК ЛинейныйМетод
	|		ПО НелинейныйМетод.Период < ЛинейныйМетод.Период";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
																															   
	Возврат Выборка.ДатаПереходаКЛинейномуМетоду;
	
КонецФункции // ПолучитьДатуПереходаКЛинейномуМетоду()

#Если Клиент Тогда

// Возвращает сведения о руководителе и главбухе
// 
// Параметры
//
Функция ПолучитьСведенияОРуководителеГлавБухе(Организация,Дата) Экспорт
	
	СтруктураСведений	= Новый Структура;
	
	Если Организация <> Неопределено тогда
		Если Организация.Метаданные().Имя = "Организации" тогда
			Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация,Дата,);
			СтруктураСведений.Вставить("Руководитель"	 , Руководители.Руководитель);
			СтруктураСведений.Вставить("ДолжностьРуководителя" , Руководители.РуководительДолжность);
			СтруктураСведений.Вставить("ГлавБух" , Руководители.ГлавныйБухгалтер);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураСведений;
	
КонецФункции


// Возвращает сведения о поставщике и получателе на дату
// 
// Параметры
//
Функция ПолучитьСведенияОПоставщикеПолучателе(Поставщик,Получатель,Дата) Экспорт
	
	СтруктураСведений	= Новый Структура;
	
	Если Поставщик <> Неопределено тогда
		
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик,Дата);
		СтруктураСведений.Вставить("АдресСдатчика" , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,"));
		СтруктураСведений.Вставить("РеквСдатчика"  , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,БИК,"));

		Если Поставщик.Метаданные().Имя = "Организации" тогда
			Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Поставщик,Дата,);
			СтруктураСведений.Вставить("РукСдатчика"	 , Руководители.Руководитель);
			СтруктураСведений.Вставить("ДолжРукСдатчика" , Руководители.РуководительДолжность);
			СтруктураСведений.Вставить("ГлавБухСдатчика" , Руководители.ГлавныйБухгалтер);
		КонецЕсли;
	КонецЕсли;
		
	Если Получатель <> Неопределено тогда
		
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Получатель,Дата);
		
		СтруктураСведений.Вставить("АдресПолучателя" , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,Телефоны,"));
		СтруктураСведений.Вставить("РеквПолучателя"  , ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,БИК,"));

		Если Получатель.Метаданные().Имя = "Организации" тогда
			Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Получатель,Дата,);
			СтруктураСведений.Вставить("РукПолучателя"	   , Руководители.Руководитель);
			СтруктураСведений.Вставить("ДолжРукПолучателя" , Руководители.РуководительДолжность);
			СтруктураСведений.Вставить("ГлавБухПолучателя" , Руководители.ГлавныйБухгалтер);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураСведений;
	
КонецФункции

#КонецЕсли
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПРОВЕРКИ СОСТОЯНИЙ И СОБЫТИЙ ОС

// Проверяет возможность принятия к учету ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата принятия к учету
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьПринятияКУчетуОС(ОсновноеСредство,Дата,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОС";
		УсловиеОрганизацииСостояний = "";
		УсловиеОрганизацииСобытий	= "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
		УсловиеОрганизацииСобытий	= "СобытияОС.Организация = &Организация И ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	NULL КАК Событие,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
									   |	(СостоянияОС.Состояние = &СостояниеПринятоКУчету 
									   |	ИЛИ СостоянияОС.Состояние = &СостояниеСнятоСУчета 
									   |	И СостоянияОС.ДатаСостояния <= &Дата 
									   |	ИЛИ СостоянияОС.Состояние = &СостояниеВведеноВЭксплуатацию 
									   |	И СостоянияОС.ДатаСостояния <= &Дата) 
									   |	"+УсловиеОрганизацииСостояний+" 
									   |	И СостоянияОС.ОсновноеСредство = &ОсновноеСредство
						               |
						               |ОБЪЕДИНИТЬ
						               |
						               |ВЫБРАТЬ
									   |	СобытияОС.Регистратор,
						               |	СобытияОС.ОсновноеСредство,
									   |	NULL,
						               |	СобытияОС.Событие.ВидСобытияОС,
									   |	СобытияОС.Период
						               |ИЗ
						               |	"+НазваниеРегистраСобытий+" КАК СобытияОС
						               |
						               |ГДЕ
						               |	СобытияОС.ОсновноеСредство = &ОсновноеСредство И
									   | 	"+УсловиеОрганизацииСобытий+"
						               |	СобытияОС.Событие.ВидСобытияОС <> &ВидСобытияПрочее
									   |	И СобытияОС.Период < &Дата
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ВидСобытияПрочее",Перечисления.ВидыСобытийОС.Прочее);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеВведеноВЭксплуатацию",Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеПринятоКУчету",Перечисления.СостоянияОС.ПринятоКУчету);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		СтрокаСообщения = "Для основного средства <"+ОсновноеСредство.Наименование;
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +"> в организации <"+Строка(Организация);
		КонецЕсли;
		СтрокаСообщения = СтрокаСообщения + "> уже зафиксированы состояния или события:";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = "";
			Если Выборка.Состояние <> NULL тогда
				СтрокаСообщения = СтрокаСообщения + "состояние <"+Строка(Выборка.Состояние)
			ИначеЕсли Выборка.Событие <> NULL тогда
				СтрокаСообщения = СтрокаСообщения + "событие <"+Строка(Выборка.Событие)
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения+"> документ <"+Строка(Выборка.Регистратор);
			СтрокаСообщения = СтрокаСообщения + ">. Дата : "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность снятия с учета ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата снятия с учета
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьСнятияСУчета(ОсновноеСредство,Дата,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОС";
		УсловиеОрганизацииСостояний = "";
		УсловиеОрганизацииСобытий	= "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
		УсловиеОрганизацииСобытий	= "СобытияОС.Организация = &Организация И ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
						               |	(СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |     СостоянияОС.Состояние <> &СостояниеСнятоСУчета
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |	ИЛИ 
									   |	(СостоянияОС.Состояние = &СостояниеСнятоСУчета И
						               |	 СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |	 СостоянияОС.ДатаСостояния <= &Дата
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Результат.Пустой() тогда
		СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> не принималось ";
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +"к бухгалтерскому учету в организации <"+Строка(Организация) +">";
		Иначе
			СтрокаСообщения = СтрокаСообщения +"к управленческому учету";
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
	Иначе	
		Выборка = Результат.Выбрать();
		Если Организация = Неопределено тогда
			СтрокаВидаУчета = "управленческо";
		Иначе
			СтрокаВидаУчета = "бухгалтерско";
		КонецЕсли;			
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = Неопределено;
			Если Выборка.Состояние = Перечисления.СостоянияОС.ПринятоКУчету и Выборка.Дата > Дата тогда
				
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> принято к "+ СтрокаВидаУчета +"му учету";
				
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета тогда
				
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> снято с "+ СтрокаВидаУчета +"го учета";
				
			КонецЕсли;			
			Если СтрокаСообщения <> Неопределено тогда
				Если Организация <> Неопределено тогда
					СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация)+">";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения+" документ <"+Строка(Выборка.Регистратор)
								  + ">. Дата: "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры//ПроверитьВозможностьСнятияСУчета

// Проверяет возможность изменения состояния  ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата изменения состояния
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьИзмененияСостоянияОС(ОсновноеСредство,Дата,Событие,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		УсловиеОрганизацииСостояний = "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
						               |	(СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |     СостоянияОС.Состояние <> &СостояниеСнятоСУчета
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |	ИЛИ 
									   |	(СостоянияОС.Состояние = &СостояниеСнятоСУчета И
						               |	 СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |	 СостоянияОС.ДатаСостояния <= &Дата
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Результат.Пустой() тогда
		СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> не принималось к учету";
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация) +">";
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
	Иначе	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = Неопределено;
			Если Выборка.Состояние = Перечисления.СостоянияОС.ВведеноВЭксплуатацию и 
				Событие.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> уже введено в эксплуатацию";
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.ПринятоКУчету и Выборка.Дата > Дата тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> принято к учету";
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> снято с учета";
			КонецЕсли;			
			Если СтрокаСообщения <> Неопределено тогда
				Если Организация <> Неопределено тогда
					СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация)+">";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения+" документ <"+Строка(Выборка.Регистратор)+
								  ">. Дата: "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета, ТипГодовой = Неопределено)

	КоэффициентАмортизации = 0;

	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипГодовой = Неопределено Тогда

		СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
		СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	Иначе

		Если ТипГодовой = ТипЗнч(График) Тогда

			СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
			СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

		Иначе

			ТаблицаМесяцев = СтрокаТЧ.ТаблицаМесяцев;
			СтрокаМесяца   = ТаблицаМесяцев.Найти(НачалоМесяца(ДатаРасчета), "МесяцРасчета");

			СуммаВсех      = ТаблицаМесяцев.Итог("Коэффициент");
			СуммаОдного    = ?(СтрокаМесяца = Неопределено, 0, СтрокаМесяца.Коэффициент);

		КонецЕсли;

	КонецЕсли;

	КоэффициентАмортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАмортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом для оптимального чтения данных 
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов,
	|	ПУСТАЯТАБЛИЦА.(
	|		КАК График,
	|		КАК МесяцРасчета,
	|		КАК Коэффициент
	|	) КАК ТаблицаМесяцев
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	График.(
	|		Ссылка,
	|		Месяц,
	|		Коэффициент
	|	)
	|ИЗ
	|	Справочник.ИндивидуальныеГрафикиАмортизации КАК ИндивидуальныеГрафикиАмортизации";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков

// Рассчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииБухРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                     Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("НачалоГода",	      Новый Граница(НачалоГода(ДатаРасчета)));
	Запрос.УстановитьПараметр("НачалоПериода",    Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода",     Новый Граница(КонецМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("Период",           ДатаРасчета);
	
	УсловиеПоОС = ?( ОсновноеСредство = Неопределено, "", " И ОсновноеСредство В (&ОсновноеСредство) ");

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) И
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|	СостоянияОСОрганизаций.Организация = &Организация " + УсловиеПоОС + "
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                КАК ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство.Код            КАК Код
	|ПОМЕСТИТЬ
	|	СписокОС
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + "
	|	И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних	
	|ГДЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство                     КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер                     КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации          КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки                    КАК ПараметрВыработки
	|ПОМЕСТИТЬ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация 
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОСОбороты.ОсновноеСредство              КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки             КАК ПараметрВыработки,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК ОбъемВыработки
	|ПОМЕСТИТЬ
	|	ВыработкаОС
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода,, ПараметрВыработки В (ВЫБРАТЬ ПараметрВыработки ИЗ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних) 
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ВыработкаОСОбороты
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                                         КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0)   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0)           КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0)                      КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0)                        КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.Период                                                   КАК Период
	|ПОМЕСТИТЬ
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство  КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГрафикАмортизации
	|ПОМЕСТИТЬ
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                      КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация 
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияБухгалтерскийУчетОстаткиИОбороты.ОсновноеСредство                         КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.СтоимостьНачальныйОстаток, 0)   КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияКонечныйОстаток, 0)  КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияОборот, 0)           КАК АмортизацияОборот,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.СтоимостьКонечныйОстаток, 0)    КАК БалансоваяСтоимость
	|ПОМЕСТИТЬ
	|	АмортизацияБухгалтерскийУчетОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.СтоимостьОСБухгалтерскийУчет.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, Организация = &Организация
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК АмортизацияБухгалтерскийУчетОстаткиИОбороты
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода, Организация = &Организация 
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияНаНачалоГода.ОсновноеСредство                                                                                          КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияНаНачалоГода.СтоимостьНачальныйОстаток, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.АмортизацияНачальныйОстаток, 0) КАК СтоимостьНаНачалоГода
	|ПОМЕСТИТЬ
	|	АмортизацияНаНачалоГода
	|ИЗ
	|	РегистрНакопления.СтоимостьОСБухгалтерскийУчет.ОстаткиИОбороты(&НачалоГода,,,, Организация = &Организация 
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК АмортизацияНаНачалоГода
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки.ОсновноеСредство              КАК ОсновноеСредство,
	|	ЕСТЬNULL(ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки.СтоимостьОстаток, 0) КАК СтоимостьОстаток
	|ПОМЕСТИТЬ
	|	ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки
	|ИЗ
	|	РегистрНакопления.ОССписанныеНаЗатратыОрганизаций.Остатки(&КонецПериода, Организация = &Организация 
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство                                                                                   КАК ОсновноеСредство,
	|	СписокОС.ОсновноеСредствоПредставление                                                                      КАК ОсновноеСредствоПредставление,
	|	СписокОС.Код                                                                                                КАК Код,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.СтоимостьНачальныйОстаток, 0)                          КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияНачальныйОстаток, 0)                        КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияКонечныйОстаток, 0)                         КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.АмортизацияОборот, 0)                                  КАК АмортизацияОборот,
	|	ЕСТЬNULL(АмортизацияБухгалтерскийУчетОстаткиИОбороты.БалансоваяСтоимость, 0)                                КАК БалансоваяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0)   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0)           КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0)                      КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0)                        КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.Период                                                   КАК Период,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации                                          КАК ГрафикАмортизации,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                                              КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации                              КАК СчетНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер                          КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации               КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0)      КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                    КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(АмортизацияНаНачалоГода.СтоимостьНаНачалоГода, 0)                                                  КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки.СтоимостьОстаток, 0)                          КАК СтоимостьОстаток,
	|	ЕСТЬNULL(ВыработкаОС.ОбъемВыработки, 0)                                                                     КАК ОбъемВыработки
	|ИЗ
	|	СписокОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОС
	|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|		 И ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияБухгалтерскийУчетОстаткиИОбороты
	|	ПО СписокОС.ОсновноеСредство = АмортизацияБухгалтерскийУчетОстаткиИОбороты.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНаНачалоГода
	|	ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки
	|	ПО СписокОС.ОсновноеСредство = ОсновныеСредстваСписанныеНаЗатратыОрганизацииОстатки.ОсновноеСредство
	|";
	
	ВыборкаПоОС     = Запрос.Выполнить().Выбрать();
	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл

		Если НЕ ВыборкаПоОС.СтоимостьОстаток = 0 Тогда
			Продолжить; // ОС списано на затраты - не обрабатывается.
		КонецЕсли;
		
		ТекстСообщения = "Бух. расчет амортизации: для основного средства " + СокрЛП(ВыборкаПоОС.ОсновноеСредствоПредставление)
		               + " (" + СокрЛП(ВыборкаПоОС.Код) + "), инв. № " + СокрЛП(ВыборкаПоОС.ИнвентарныйНомер);
		
		Если (ВыборкаПоОС.СтоимостьНачальныйОстаток <= ВыборкаПоОС.АмортизацияНачальныйОстаток) Тогда
			Продолжить; // остаточная стоимость на начало месяца равна 0
		КонецЕсли;
		
		Если НЕ ВыборкаПоОС.АмортизацияОборот = 0 Тогда
			Если ВыдаватьСообщения = Истина и не (ОсновноеСредство = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан способ амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если (ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
		 ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
		 ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
		   И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		СуммаАмортизации = 0;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации /
			                          ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0, 1, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

			Если ВыборкаПоОС.ОбъемВыработки = 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации *
			                   ВыборкаПоОС.ОбъемВыработки / 
			                   ?(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации = 0, 1, ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации);

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

			Если ВыборкаПоОС.ОбъемВыработки = 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации *
			                   ВыборкаПоОС.ОбъемВыработки * //  %     км.
			                   ВыборкаПоОС.КоэффициентАмортизации / 100 / 1000

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
			КонецЕсли;

			СуммаГодовойАмортизации = СтоимостьИтоговая / 
			                          ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0, 1, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

			КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				КоэффициентУскорения = 1;
				Если ВыдаватьСообщения = Истина Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " коэффициент ускорения не заполнен");
				КонецЕсли;
			КонецЕсли;

			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

			// Дата последнего изменения параметров
			Если ВыборкаПоОС.Период = NULL Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не определилась дата начала использования (изменения параметров амортизации)!");
				Продолжить;
			КонецЕсли; 
			
			ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период, 1));

			ЧислоЛетПользования = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12;
			ЧислоЛетПользования = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования - Цел(ЧислоЛетПользования) > 0, 1, 0);
			ЧислоЛетПрошедших   = Цел(ОпределитьФактическийСрокИспользования(ДатаНачалаРасчета, ДатаРасчета) / 12);
			ЧислоЛетОставшихся  = ЧислоЛетПользования - ЧислоЛетПрошедших;

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧиселЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации = ЧислоЛетОставшихся / СуммаЧиселЛет;
			СуммаГодовойАмортизации   = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ПроцентГодовойАмортизации;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		КонецЕсли;

		Если КоэффициентПериода = 0 Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " коэффициент амортизации равен 0");
			КонецЕсли;
		КонецЕсли;

		ВсегоОсталосьСписать = ВыборкаПоОС.БалансоваяСтоимость - ВыборкаПоОС.АмортизацияКонечныйОстаток;
							   
		// Балансовая стоимость не может быть меньше 0
		СуммаАмортизации  = Макс( Мин( СуммаАмортизации, ВсегоОсталосьСписать), 0);

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();
		СтрокаАмортизации.ОС                     = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СчетУчетаБУ            = ВыборкаПоОС.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииБУ      = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Бух                    = СуммаАмортизации;

		Если СуммаАмортизации = 0 Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " амортизация равна 0");
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

// Рассчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииНалогРегл(Объект,ДатаРасчета,Организация,ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                                         Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаНУ",                                Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииНУ",                          Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",                                Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Налог",                                      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("НачалоПериодаУчетнойПолитики", НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",                Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода",                 Новый Граница(КонецМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("Период",                       ДатаРасчета);
	Запрос.УстановитьПараметр("ОсновноеСредство",             ОсновноеСредство);
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", ПолучитьДатуПереходаКЛинейномуМетоду(ДатаРасчета, Организация));
	
	УсловиеПоОС = ?(ОсновноеСредство = Неопределено, "", " И ОсновноеСредство В (&ОсновноеСредство) ");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство                       КАК ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство)        КАК ОсновноеСредствоПредставление,
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство.Код                   КАК Код,
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство.ГруппаОС              КАК ГруппаОС,
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппа
	|ПОМЕСТИТЬ
	|	СписокОС
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + ") КАК НачислениеАмортизацииНалоговыйУчетСрезПоследних	
	|ГДЕ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство           КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Период                     КАК ДатаПринятияКУчету
	|ПОМЕСТИТЬ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация 
	|	И ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство                        КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования
	|ПОМЕСТИТЬ
	|	ПараметрыАмортизацииНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПараметрыАмортизацииНалоговыйУчетСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияНалоговыйУчетОстаткиИОбороты.ОсновноеСредство                         КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияПриход, 0)           КАК АмортизацияВМесяце,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.СтоимостьНачальныйОстаток, 0)   КАК СтоимостьНаНачалоМесяца,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.СтоимостьКонечныйОстаток, 0)    КАК СтоимостьНаКонецМесяца,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияКонечныйОстаток, 0)  КАК АмортизацияКонечныйОстаток
	|ПОМЕСТИТЬ
	|	АмортизацияНалоговыйУчетОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.СтоимостьОСНалоговыйУчет.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, Организация = &Организация
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК АмортизацияНалоговыйУчетОстаткиИОбороты
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОсновноеСредство,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчета
	|ПОМЕСТИТЬ
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство                    КАК ОсновноеСредство,
	|	ЕСТЬNULL(СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент
	|ПОМЕСТИТЬ
	|	СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ОсновноеСредство                                   КАК ОсновноеСредство,
	|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ПризнакНачисленияПоБазовойСтоимости                КАК ПризнакНачисленияПоБазовойСтоимости,
	|	ЕСТЬNULL(НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.СуммаНакопленнойАмортизации, 0)           КАК СуммаНакопленнойАмортизации,
	|	ЕСТЬNULL(НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ФактическийСрокполезногоИспользования, 0) КАК ФактическийСрокполезногоИспользования
	|ПОМЕСТИТЬ
	|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация 
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияАмортизации.ОсновноеСредство                      КАК ОсновноеСредство,
	|	НаправленияАмортизации.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации
	|ПОМЕСТИТЬ
	|	НаправленияАмортизации
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация
	|	И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК НаправленияАмортизации
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1                   КАК ОсновноеСредство,
	|	ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0) КАК СуммаКапитальныхВложенийВключаемыхВРасходы
	|ПОМЕСТИТЬ
	|	НалоговыйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&НачалоПериода, Счет = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасходыНаКапитальныеВложения), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация
	|	И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК НалоговыйОстатки	
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.МетодНачисленияАмортизацииНУ КАК МетодНачисленияАмортизацииНУ
	|ПОМЕСТИТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериодаУчетнойПолитики, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ
	|	СостоянияОСОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВведеноВЭксплуатацию)
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	СписокОССОстаточнойСтоимостью
	|ИЗ 
	|	СписокОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	СписокОС.ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС ГДЕ 
	|		(СписокОС.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), 
	|		                                      ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), 
	|		                                      ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
	|		 И СписокОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), 
	|		                           ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения))) 
	|		ИЛИ (СписокОС.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)))
	|	И ВЫБОР КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009 ТОГДА
	|		(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.МетодНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Нелинейный))
	|	  ИНАЧЕ ИСТИНА КОНЕЦ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСНачалоПериода.Субконто1      КАК ОсновноеСредство,
	|	АмортизацияОСНачалоПериода.СуммаОстатокКт КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ
	|	АмортизацияОСПриПереходеКЛинейномуМетоду
	|ИЗ 
	|	РегистрБухгалтерии.Налоговый.Остатки(&ДатаПереходаКЛинейномуМетоду, 
	|	                                     Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетНачисленияАмортизации ИЗ СчетаНалоговогоУчетаОсновныхСредствСрезПоследних),
	|	                                     ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                     Организация = &Организация 
	|	                                     И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)) КАК АмортизацияОСНачалоПериода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОССОстаточнойСтоимостью
	|	ПО СписокОССОстаточнойСтоимостью.ОсновноеСредство = АмортизацияОСНачалоПериода.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Налоговый.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство                                                                                            КАК ОсновноеСредство,
	|	СписокОС.ОсновноеСредствоПредставление                                                                               КАК ОсновноеСредствоПредставление,
	|	СписокОС.Код                                                                                                         КАК Код,
	|	СписокОС.АмортизационнаяГруппа                                                                                       КАК АмортизационнаяГруппа,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации                                           КАК СчетНачисленияАмортизации,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                                                           КАК СчетУчета,
	|	ЕСТЬNULL(ПараметрыАмортизацииНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0)                               КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(АмортизацияОСПриПереходеКЛинейномуМетоду.АмортизацияНачальныйОстаток, 0) КАК АмортизацияПриПереходеКЛинейномуМетоду,
	|	ЕСТЬNULL(ПараметрыАмортизацииНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) - ((ГОД(&ДатаПереходаКЛинейномуМетоду) - ГОД(СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию)) * 12 + (МЕСЯЦ(&ДатаПереходаКЛинейномуМетоду) - МЕСЯЦ(СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию))) + 1 КАК ОстатокСрокаПриПереходеКЛинейномуМетоду,
	|	ВЫБОР КОГДА (СписокОС.ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОССОстаточнойСтоимостью) И ГОД(&Период) >= 2009) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПереходКЛинейномуМетоду,
	|	ВЫБОР КОГДА ГОД(&Период) < 2009 ТОГДА
	|		ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.МетодНачисленияАмортизации
	|	ИНАЧЕ
	|		ВЫБОР КОГДА (СписокОС.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
	|		          И СписокОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения))) ИЛИ (СписокОС.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|		ИНАЧЕ
	|			УчетнаяПолитикаОрганизацийСрезПоследних.МетодНачисленияАмортизацииНУ
	|		КОНЕЦ
	|	КОНЕЦ КАК МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ДатаПринятияКУчету                                 КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияВМесяце, 0)                                              КАК АмортизацияВМесяце,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.СтоимостьНаНачалоМесяца, 0)                                         КАК СтоимостьНаНачалоМесяца,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.СтоимостьНаКонецМесяца, 0)                                          КАК СтоимостьНаКонецМесяца,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияНачальныйОстаток, 0)                                     КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНалоговыйУчетОстаткиИОбороты.АмортизацияКонечныйОстаток, 0)                                      КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0)                   КАК СпециальныйКоэффициент,
	|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ПризнакНачисленияПоБазовойСтоимости                КАК ПризнакНачисленияПоБазовойСтоимости,
	|	ЕСТЬNULL(НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.СуммаНакопленнойАмортизации, 0)           КАК СуммаНакопленнойАмортизации,
	|	ЕСТЬNULL(НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ФактическийСрокполезногоИспользования, 0) КАК ФактическийСрокполезногоИспользования,
	|	НаправленияАмортизации.НаправлениеАмортизации                                                                        КАК НаправлениеАмортизации,
	|	ЕСТЬNULL(НалоговыйОстатки.СуммаКапитальныхВложенийВключаемыхВРасходы, 0)                                             КАК СуммаКапитальныхВложенийВключаемыхВРасходы
	|ИЗ
	|	СписокОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство 
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНалоговыйУчетОстаткиИОбороты
	|	ПО СписокОС.ОсновноеСредство = АмортизацияНалоговыйУчетОстаткиИОбороты.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ НаправленияАмортизации
	|	ПО СписокОС.ОсновноеСредство = НаправленияАмортизации.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ НалоговыйОстатки	
	|	ПО СписокОС.ОсновноеСредство = НалоговыйОстатки.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаОрганизацийСрезПоследних 
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОСОрганизаций
	|	ПО СписокОС.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСПриПереходеКЛинейномуМетоду 
	|	ПО СписокОС.ОсновноеСредство = АмортизацияОСПриПереходеКЛинейномуМетоду.ОсновноеСредство
	|";

	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОС.Следующий() Цикл

		Если НЕ ВыборкаПоОС.АмортизацияВМесяце = 0 Тогда
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		Если ВыборкаПоОС.СтоимостьНаНачалоМесяца = 0 Тогда
			Продолжить; // стоимость на начало месяца равна нулю 
		КонецЕсли;
		
		ТекстСообщения = "Налог. расчет амортизации: для основного средства " + СокрЛП(ВыборкаПоОС.ОсновноеСредствоПредставление)
		               + " (" + СокрЛП(ВыборкаПоОС.Код) + ")";
					   
		Если ВыборкаПоОС.СтоимостьНаНачалоМесяца <= ВыборкаПоОС.АмортизацияНачальныйОстаток Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.МетодНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан метод амортизации");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		
		Если Год(ДатаРасчета) < 2009 
		 ИЛИ ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
		
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокПолезногоИспользования) Тогда
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан срок полезного использования");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			   И НЕ ЗначениеЗаполнено(ВыборкаПоОС.АмортизационнаяГруппа) Тогда
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + "не указана амортизационная группа");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан счет для начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		СуммаАмортизации       = 0;
		
		СтоимостьДляВычисления = ВыборкаПоОС.СтоимостьНаНачалоМесяца - ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы
		                       - ?(ВыборкаПоОС.ПереходКЛинейномуМетоду, ВыборкаПоОС.АмортизацияПриПереходеКЛинейномуМетоду, 0);
							   
		СрокИспользованияДляВычисления = Макс(1, ?(ВыборкаПоОС.ПереходКЛинейномуМетоду,
		                                           ВыборкаПоОС.ОстатокСрокаПриПереходеКЛинейномуМетоду,
												   ВыборкаПоОС.СрокПолезногоИспользования));
		
		Если ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда

			СуммаАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления *
			                   ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);

		ИначеЕсли ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

			Если Год(ДатаРасчета) < 2009 Тогда
			
				Если (ВыборкаПоОС.ПризнакНачисленияПоБазовойСтоимости = Истина) тогда

					СтоимостьДляВычисления         = СтоимостьДляВычисления - ВыборкаПоОС.СуммаНакопленнойАмортизации;
					СрокИспользованияДляВычисления = Макс(1, СрокИспользованияДляВычисления - ВыборкаПоОС.ФактическийСрокполезногоИспользования);

					СуммаАмортизации               = СтоимостьДляВычисления / СрокИспользованияДляВычисления *
					                                 ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);

				Иначе

					СтоимостьДляВычисления = СтоимостьДляВычисления - ВыборкаПоОС.АмортизацияКонечныйОстаток;
					СуммаАмортизации       = СтоимостьДляВычисления * 2 / СрокИспользованияДляВычисления *
					                         ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);

					СуммаАмортизации       = Макс(0, Мин(ВыборкаПоОС.СтоимостьНаНачалоМесяца - ВыборкаПоОС.АмортизацияКонечныйОстаток, СуммаАмортизации));

					//Перешли 20% барьер. Переходим к начислению по базовой стоимости.
					Если (ВыборкаПоОС.СтоимостьНаКонецМесяца - ВыборкаПоОС.АмортизацияКонечныйОстаток - СуммаАмортизации) <= (ВыборкаПоОС.СтоимостьНаКонецМесяца * 0.2) тогда

						//Определяем фактический срок использования основного средства.
						ДатаВводаВЭксплуатацию = ?(ЗначениеЗаполнено(ВыборкаПоОС.ДатаВводаВЭксплуатацию),
												   ВыборкаПоОС.ДатаВводаВЭксплуатацию,
												   ВыборкаПоОС.ДатаПринятияКУчету);
						
						Если НЕ ЗначениеЗаполнено(ДатаВводаВЭксплуатацию) Тогда
							ФактСрокИспользованияНУ = 0;
						Иначе
							ФактическийСрокПолезногоИспользования = ОпределитьФактическийСрокИспользования(ДатаВводаВЭксплуатацию, ДатаРасчета);
						КонецЕсли;
						
						ПереходКНачислениюПоБазовой = Объект.Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;
						
						СтрокаДвижения                                       = ПереходКНачислениюПоБазовой.Добавить();
						СтрокаДвижения.Период                                = ДатаРасчета;
						СтрокаДвижения.Регистратор                           = Объект;
						СтрокаДвижения.ОсновноеСредство                      = ВыборкаПоОС.ОсновноеСредство; 
						СтрокаДвижения.ПризнакНачисленияПоБазовойСтоимости   = Истина;
						СтрокаДвижения.Организация                           = Организация;
						СтрокаДвижения.СуммаНакопленнойАмортизации           = ВыборкаПоОС.АмортизацияКонечныйОстаток + СуммаАмортизации;
						СтрокаДвижения.ФактическийСрокПолезногоИспользования = ФактическийСрокПолезногоИспользования;

					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПерваяГруппа Тогда НормаАмортизации         = 14.3
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВтораяГруппа Тогда НормаАмортизации    =  8.8
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ТретьяГруппа Тогда НормаАмортизации    =  5.6
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа Тогда НормаАмортизации =  3.8
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПятаяГруппа Тогда НормаАмортизации     =  2.7
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ШестаяГруппа Тогда НормаАмортизации    =  1.8
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.СедьмаяГруппа Тогда НормаАмортизации   =  1.3
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа Тогда НормаАмортизации   =  1.0
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа Тогда НормаАмортизации   =  0.8
				ИначеЕсли ВыборкаПоОС.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа Тогда НормаАмортизации   =  0.7
				КонецЕсли;
				
				СуммаАмортизации = (ВыборкаПоОС.СтоимостьНаНачалоМесяца - ВыборкаПоОС.АмортизацияНачальныйОстаток - ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы)
				                 * НормаАмортизации / 100 * ?((ВыборкаПоОС.СпециальныйКоэффициент = 0), 1, ВыборкаПоОС.СпециальныйКоэффициент);
				
			КонецЕсли;
			
		КонецЕсли;

		Остатки = ВыборкаПоОС.СтоимостьНаКонецМесяца - ВыборкаПоОС.АмортизацияКонечныйОстаток;
		
		СуммаАмортизации  = Макс(0, Мин(Остатки, СуммаАмортизации));

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                                         = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СчетУчетаНУ                                = ВыборкаПоОС.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииНУ                          = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто                                = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации                     = ВыборкаПоОС.НаправлениеАмортизации;
		СтрокаАмортизации.Налог                                      = СуммаАмортизации;
		СтрокаАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы = ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;		

		Если СуммаАмортизации = 0 Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " амортизация равна 0");
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНалогРегл

// Рассчитывает сумму амортизации по указаному основному средству по упр учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииУпр(ДатаРасчета,ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС");
	ТаблицаАмортизации.Колонки.Добавить("Упр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",       НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",     КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	УсловиеПоОС = ?( ОсновноеСредство = Неопределено, "", " ОсновноеСредство В (&ОсновноеСредство) ");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство                     КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОССрезПоследних.ПараметрВыработки                    КАК ПараметрВыработки,
	|	ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации          КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость
	|ПОМЕСТИТЬ
	|   ПервоначальныеСведенияОССрезПоследних
	|ИЗ	
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&КонецПериода, " + УсловиеПоОС + ") КАК ПервоначальныеСведенияОССрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииСрезПервых.ОсновноеСредство                   КАК ОсновноеСредство,
	|	НачислениеАмортизацииСрезПервых.НачислятьАмортизацию               КАК НачислятьАмортизацию,
	|	НачислениеАмортизацииСрезПервых.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце,
	|	НачислениеАмортизацииСрезПервых.Период                             КАК Период
	|ПОМЕСТИТЬ
	|   СрезПервых
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&НачалоПериода, " + УсловиеПоОС + ") КАК НачислениеАмортизацииСрезПервых
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииСрезПоследних.ОсновноеСредство                   КАК ОсновноеСредство,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизацию               КАК НачислятьАмортизацию,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце,
	|	НачислениеАмортизацииСрезПоследних.Период                             КАК Период
	|ПОМЕСТИТЬ
	|   СрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&КонецПериода, " + УсловиеПоОС + ") КАК НачислениеАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство  КАК ОсновноеСредство,
	|	СрезПервых.НачислятьАмортизацию                         КАК НачалоНачислятьАмортизацию,
	|	СрезПоследних.НачислятьАмортизацию                      КАК КонецНачислятьАмортизацию,
	|	СрезПоследних.НачислятьАмортизациюВТекущемМесяце        КАК КонецНачислятьВТекущемМесяце
	|ПОМЕСТИТЬ
	|   СписокАмортизируемыхОС
	|ИЗ	
	|	ПервоначальныеСведенияОССрезПоследних
	|	ЛЕВОЕ СОЕДИНЕНИЕ СрезПервых
	|	ПО СрезПервых.ОсновноеСредство = ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СрезПоследних
	|	ПО СрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОстаткиИОбороты.ОсновноеСредство                                                                                             КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОстаткиИОбороты.СтоимостьНачальныйОстаток, 0) - ЕСТЬNULL(АмортизацияОстаткиИОбороты.АмортизацияНачальныйОстаток, 0) КАК СтоимостьНаНачалоГода
	|ПОМЕСТИТЬ
	|   АмортизацияОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоГода,,,, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК АмортизацияОстаткиИОбороты
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьОС.ОсновноеСредство                        КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОС.АмортизацияОборот, 0)          КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьКонечныйОстаток, 0)   КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьНачальныйОстаток, 0)  КАК СтоимостьНачальныйОстаток
	|ПОМЕСТИТЬ
	|   СтоимостьОС
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК СтоимостьОС
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизацииСрезПоследних.ОсновноеСредство  КАК ОсновноеСредство,
	|	ГрафикиАмортизацииСрезПоследних.ГрафикАмортизации КАК ГрафикАмортизации                                      
	|ПОМЕСТИТЬ
	|   ГрафикиАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ГрафикиАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                      КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ
	|   СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииСрезПоследних.ОсновноеСредство                                         КАК ОсновноеСредство,
	|	ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце                                  КАК ПрименитьВТекущемМесяце,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0)   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации, 0)           КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.КоэффициентУскорения, 0)                        КАК КоэффициентУскорения,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.КоэффициентАмортизации, 0)                      КАК КоэффициентАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.Период                                                   КАК Период
	|ПОМЕСТИТЬ
	|   ПараметрыАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ПараметрыАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство  КАК ОсновноеСредство,
	|	ГрафикиАмортизацииСрезПоследнихНачалоМесяца.ГрафикАмортизации КАК ГрафикАмортизации                                      
	|ПОМЕСТИТЬ
	|   ГрафикиАмортизацииСрезПоследнихНачалоМесяца
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОС.СрезПоследних(&НачалоПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ГрафикиАмортизацииСрезПоследнихНачалоМесяца
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство                      КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ
	|   СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&НачалоПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство                                         КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СрокИспользованияДляВычисленияАмортизации, 0)   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СтоимостьДляВычисленияАмортизации, 0)           КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.КоэффициентУскорения, 0)                        КАК КоэффициентУскорения,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.КоэффициентАмортизации, 0)                      КАК КоэффициентАмортизации
	|ПОМЕСТИТЬ
	|   ПараметрыАмортизацииСрезПоследнихНачалоМесяца
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&НачалоПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ПараметрыАмортизацииСрезПоследнихНачалоМесяца
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредстваСписанныеНаЗатратыОстатки.ОсновноеСредство              КАК ОсновноеСредство,
	|	ЕСТЬNULL(ОсновныеСредстваСписанныеНаЗатратыОстатки.СтоимостьОстаток, 0) КАК СтоимостьОстаток
	|ПОМЕСТИТЬ
	|   ОсновныеСредстваСписанныеНаЗатратыОстатки
	|ИЗ
	|	РегистрНакопления.ОССписанныеНаЗатраты.Остатки(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ОсновныеСредстваСписанныеНаЗатратыОстатки
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОСОбороты.ОсновноеСредство              КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки             КАК ПараметрВыработки,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК ОбъемВыработки
	|ПОМЕСТИТЬ
	|	ВыработкаОС
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода,, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)
	|	И ПараметрВыработки В (ВЫБРАТЬ ПараметрВыработки ИЗ ПервоначальныеСведенияОССрезПоследних)) КАК ВыработкаОСОбороты
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииСрезПоследних.ОсновноеСредство                   КАК ОсновноеСредство,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце
	|ПОМЕСТИТЬ
	|	НачислениеАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК НачислениеАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИСТИНА)                                          КАК ИзменениеНачислАморт,
	|	НачислениеАмортизацииОС.ОсновноеСредство                              КАК ОсновноеСредство,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьВТекМесяце
	|ПОМЕСТИТЬ
	|	ИзменениеПризнакаАмортизации
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС КАК НачислениеАмортизацииОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачислениеАмортизацииСрезПоследних
	|	ПО НачислениеАмортизацииОС.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	НачислениеАмортизацииОС.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|СГРУППИРОВАТЬ ПО
	|	НачислениеАмортизацииОС.ОсновноеСредство,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокАмортизируемыхОС.ОсновноеСредство                           КАК ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СписокАмортизируемыхОС.ОсновноеСредство)            КАК ОсновноеСредствоПредставление,
	|	СписокАмортизируемыхОС.ОсновноеСредство.Код                       КАК Код,
	|	СписокАмортизируемыхОС.НачалоНачислятьАмортизацию                 КАК НачалоНачислятьАмортизацию,
	|	СписокАмортизируемыхОС.КонецНачислятьАмортизацию                  КАК КонецНачислятьАмортизацию,
	|	СписокАмортизируемыхОС.КонецНачислятьВТекущемМесяце               КАК КонецНачислятьВТекущемМесяце,
	|	СтоимостьОС.АмортизацияКонечныйОстаток                            КАК АмортизацияКонечныйОстаток,
	|	СтоимостьОС.АмортизацияОборот                                     КАК АмортизацияОборот,
	|	СтоимостьОС.СтоимостьКонечныйОстаток                              КАК БалансоваяСтоимость,
	|	СтоимостьОС.СтоимостьНачальныйОстаток                             КАК СтоимостьНачальныйОстаток,
	|	АмортизацияОстаткиИОбороты.СтоимостьНаНачалоГода                  КАК СтоимостьНаНачалоГода,
	|	ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОССрезПоследних.ПервоначальнаяСтоимость     КАК ПервоначальнаяСтоимость,
	|	ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце         КАК ПрименитьВТекущемМесяце,
	|	ПараметрыАмортизацииСрезПоследних.Период                          КАК Период,
	|
// параметры зависящие от ПрименитьВТекущемМесяце	
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ГрафикиАмортизацииСрезПоследних.ГрафикАмортизации                                        
	|		ИНАЧЕ ГрафикиАмортизацииСрезПоследнихНачалоМесяца.ГрафикАмортизации 
	|	КОНЕЦ КАК ГрафикАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.СпособыОтраженияРасходовПоАмортизации 
	|	КОНЕЦ КАК СпособыОтраженияРасходовПоАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СрокИспользованияДляВычисленияАмортизации 
	|	КОНЕЦ КАК СрокИспользованияДляВычисленияАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СтоимостьДляВычисленияАмортизации 
	|	КОНЕЦ КАК СтоимостьДляВычисленияАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОбъемПродукцииРаботДляВычисленияАмортизации 
	|	КОНЕЦ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.КоэффициентУскорения
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.КоэффициентУскорения 
	|	КОНЕЦ КАК КоэффициентУскорения,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.КоэффициентАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.КоэффициентАмортизации
	|	КОНЕЦ КАК КоэффициентАмортизации,
// конец параметры зависящие от ПрименитьВТекущемМесяце	
	|
	|	ОсновныеСредстваСписанныеНаЗатратыОстатки.СтоимостьОстаток  КАК СтоимостьОстаток,
	|	ВыработкаОС.ОбъемВыработки                                  КАК ОбъемВыработки,
	|	ВЫБОР КОГДА ИзменениеПризнакаАмортизации.ИзменениеНачислАморт ЕСТЬ NULL ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		ИзменениеПризнакаАмортизации.ИзменениеНачислАморт
	|	КОНЕЦ КАК ИзменениеНачислАморт,
	|	ВЫБОР КОГДА ИзменениеПризнакаАмортизации.НачислятьВТекМесяце ЕСТЬ NULL ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		ИзменениеПризнакаАмортизации.НачислятьВТекМесяце
	|	КОНЕЦ КАК НачислятьВТекМесяце
	|ИЗ
	|	СписокАмортизируемыхОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОстаткиИОбороты
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = АмортизацияОстаткиИОбороты.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|
// начало параметры зависящие от "применить в текущем месяце"
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ГрафикиАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОССрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииСрезПоследнихНачалоМесяца
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ГрафикиАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство	
// конец параметры зависящие от "применить в текущем месяце"
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеСредстваСписанныеНаЗатратыОстатки
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ОсновныеСредстваСписанныеНаЗатратыОстатки.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОС
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИзменениеПризнакаАмортизации
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ИзменениеПризнакаАмортизации.ОсновноеСредство
	|";
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	ТипГодовой  = Тип ("СправочникСсылка.ГодовыеГрафикиАмортизацииОС");

	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл

		// Если были изменения флага начисления амортизации, то анализируем
		// признак необходимости начисления амортизации в текущем месяце.
		Если ВыборкаПоОС.ИзменениеНачислАморт Тогда
			Если Не ВыборкаПоОС.НачислятьВТекМесяце Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Истина Тогда
				Если ВыборкаПоОС.КонецНачислятьАмортизацию = NULL 
				 ИЛИ ВыборкаПоОС.КонецНачислятьАмортизацию = Ложь Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли (ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Ложь) 
				    И (ВыборкаПоОС.НачалоНачислятьАмортизацию = NULL) Тогда 
					Продолжить;
			ИначеЕсли ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Ложь Тогда
				Если ВыборкаПоОС.КонецНачислятьАмортизацию = Ложь Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = "Упр. расчет амортизации: для основного средства " + СокрЛП(ВыборкаПоОС.ОсновноеСредствоПредставление)
		               + " (" + СокрЛП(ВыборкаПоОС.Код) + ")";
		
		Если (ВыборкаПоОС.АмортизацияОборот <> 0) И
			(ВыборкаПоОС.АмортизацияОборот <> Null)Тогда
			Если ВыдаватьСообщения = Истина и не (ОсновноеСредство = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;
		
		Если ВыборкаПоОС.СтоимостьОстаток <> 0 И
			 ВыборкаПоОС.СтоимостьОстаток <> Null Тогда
			Продолжить; // ОС списано на затраты - не обрабатывается.
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан способ амортизации");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " стоимость равна 0");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации)
		И Не  (ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
		  ИЛИ  ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
		  ИЛИ  ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		СуммаАмортизации = 0;

		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда

			СуммаГодовойАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации          = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) /
			                          ?((ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL
			                            ИЛИ ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0), 1, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;

			Иначе
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

			Если ВыборкаПоОС.ОбъемВыработки = NULL ИЛИ ВыборкаПоОС.ОбъемВыработки = 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
			                   ВыборкаПоОС.ОбъемВыработки / 
			                   ?(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации = NULL, 1, ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации);

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

			СуммаГодовойАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
			                          ?(ВыборкаПоОС.КоэффициентАмортизации           = NULL, 0, ВыборкаПоОС.КоэффициентАмортизации) / 100;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации = СуммаГодовойАмортизации / 12;

			Иначе
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

			Если ВыборкаПоОС.ОбъемВыработки = NULL ИЛИ ВыборкаПоОС.ОбъемВыработки = 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
			                   ВыборкаПоОС.ОбъемВыработки * //  %     км.
			                   ?(ВыборкаПоОС.КоэффициентАмортизации = NULL, 0, ВыборкаПоОС.КоэффициентАмортизации) / 100 / 1000;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;

			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;

			КонецЕсли;

			СуммаГодовойАмортизации = ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая) / 
			                          ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL, 1, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;

			Иначе
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

			КонецЕсли;

			КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				КоэффициентУскорения = 1;
				Если ВыдаватьСообщения = Истина Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " коэффициент ускорения не заполнен");
				КонецЕсли;
			КонецЕсли;

			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
										  
			// Дата последнего изменения параметров
			Если ВыборкаПоОС.Период = NULL Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не определилась дата начала использования (изменения параметров амортизации)!");
				Продолжить;
			КонецЕсли; 
			
			ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период, 1));

			ЧислоЛетПользования = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12;
			ЧислоЛетПользования = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования - Цел(ЧислоЛетПользования) > 0, 1, 0);
			ЧислоЛетПрошедших   = Цел(ОпределитьФактическийСрокИспользования(ДатаНачалаРасчета, ДатаРасчета) / 12);
			ЧислоЛетОставшихся  = ЧислоЛетПользования - ЧислоЛетПрошедших;

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧиселЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации = ЧислоЛетОставшихся / СуммаЧиселЛет;
			СуммаГодовойАмортизации   = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ПроцентГодовойАмортизации;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда

			КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);

			СуммаАмортизации = ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) * 
			                     КоэффициентАмортизации;

		КонецЕсли;

		Если КоэффициентАмортизации = 0 И ВыдаватьСообщения = Истина Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " коэффициент амортизации равен 0");
		КонецЕсли;

		ПервоначальнаяСтоимость = ВыборкаПоОС.ПервоначальнаяСтоимость;
		Если ПервоначальнаяСтоимость = NULL Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " первоначальная стоимость равна 0");
			КонецЕсли;
			ПервоначальнаяСтоимость = 0;
		КонецЕсли;

		ВсегоОсталосьСписать = ?( ВыборкаПоОС.БалансоваяСтоимость        = NULL, 0, ВыборкаПоОС.БалансоваяСтоимость)
			                 - ?( ВыборкаПоОС.АмортизацияКонечныйОстаток = NULL, 0, ВыборкаПоОС.АмортизацияКонечныйОстаток);
							 
		// Балансовая стоимость не может быть меньше 0
		СуммаАмортизации     = Макс( Мин( СуммаАмортизации, ВсегоОсталосьСписать), 0);
		СтрокаАмортизации    = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                     = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Упр                    = СуммаАмортизации;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииУпр()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, ВидСостояния, ДокРегистратор, ДатаДокРегистратора) Экспорт

	ДокРегистратор      = Неопределено;
	ДатаДокРегистратора = 0;
	СтруктПараметров 	= ПолучитьАтрибутыСостоянияОС( ОсновноеСредство,ВидСостояния,Ложь,Организация);
	ДокРегистратор      = СтруктПараметров["Регистратор"];
	ДатаДокРегистратора = СтруктПараметров["Дата"];

КонецПроцедуры

//Получает документ и дату для указанного состояния нематериального актива по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияНМА(НематериальныйАктив, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеНМА", 	Состояние);
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияНМАОрганизаций.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
		|ГДЕ
		|	СостоянияНМАОрганизаций.НематериальныйАктив = &НМА
		|	И СостоянияНМАОрганизаций.Организация = &Организация
		|	И СостоянияНМАОрганизаций.Состояние = &СостояниеНМА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияНМАОрганизаций.Регистратор.Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Документ.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

//Функция получает таблицу значений с указанием списка ОС и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента) Экспорт

	Если ДокОбъект.Метаданные().Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		ДатаРасчета = КонецМесяца(ДокОбъект.ПериодРегистрации);
	Иначе
		ДатаРасчета = ДокОбъект.Дата;
	КонецЕсли; 

	// определим структуру выходной таблицы
	ТабЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл
		Если СтрокаТЗ.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" не указан способ отражения расходов по амортизации",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в списке способов отражения расходов по амортизации нет записей",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально( СтрокаТЗ.Сумма, МассивКоэф, 2);
		Если МассивСумм = Неопределено Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации не проставлены коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации есть нулевые коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл

			НоваяСтрока = ТабЗатрат.Добавить();
			НоваяСтрока.Подразделение           = СтрокаНапр.Подразделение;
			НоваяСтрока.СтатьяЗатрат            = СтрокаНапр.СтатьяЗатрат;
			НоваяСтрока.НоменклатурнаяГруппа    = СтрокаНапр.НоменклатурнаяГруппа;
			НоваяСтрока.ОбъектСтроительства     = СтрокаНапр.ОбъектСтроительства;
			НоваяСтрока.Продукция               = СтрокаНапр.Продукция;
			НоваяСтрока.Проект                  = СтрокаНапр.Проект;
			НоваяСтрока.ХарактеристикаПродукции = СтрокаНапр.ХарактеристикаПродукции;
			НоваяСтрока.СерияПродукции          = СтрокаНапр.СерияПродукции;
			НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = СтрокаТЗ.НаправлениеАмортизации.СпособРаспределенияЗатратНаВыпуск;
			НоваяСтрока.Сумма                   = МассивСумм[СтрокаНапр.НомерСтроки - 1];

		КонецЦикла;

	КонецЦикла;

	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента,
		ТабЗатрат,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);

	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямУпр()

//Функция получает таблицу значений с указанием списка ОС и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//Параметры входной таблицы значений:
// - ОС
//
//
//Параметры выходной таблицы значений:
// - "ОсновноеСредство"
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, ТипУчета, НомерЖурнала, ТекстПроводки = Неопределено) Экспорт
	
	Если ТабАмортизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДокОбъект.Метаданные().Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		ДатаРасчета = КонецМесяца(ДокОбъект.ПериодРегистрации);
	Иначе
		ДатаРасчета = ДокОбъект.Дата;
	КонецЕсли; 
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
	И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДатаРасчета);
	
	// определим структуру выходной таблицы
	ТабЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("СчетАмортизацииНУ");
	ТабЗатрат.Колонки.Добавить("ИмяСубконто");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");
	Если ТипУчета = "Нал"  И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		Если ТабАмортизации.Колонки.Найти("СуммаВР") = Неопределено Тогда
			ТабАмортизации.Колонки.Добавить("СуммаВР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
		Если ТабАмортизации.Колонки.Найти("СуммаПР") = Неопределено Тогда
			ТабАмортизации.Колонки.Добавить("СуммаПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
	КонецЕсли;
	
	МассивКоэф = Новый Массив;
	
	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл
		
		Если ТипУчета = "Нал"  И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			Если СтрокаТЗ.Сумма = 0 И СтрокаТЗ.СуммаПР = 0 И СтрокаТЗ.СуммаВР = 0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если СтрокаТЗ.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" не указаны способы отражения расходов по амортизации",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения затрат по амортизации нет записей",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;
		
		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально( СтрокаТЗ.Сумма, МассивКоэф, 2, Ложь);
		Если ТипУчета = "Нал"  И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			МассивСуммПР = ОбщегоНазначения.РаспределитьПропорционально( СтрокаТЗ.СуммаПР, МассивКоэф, 2);
			МассивСуммБУ = ОбщегоНазначения.РаспределитьПропорционально( СтрокаТЗ.СуммаБУ, МассивКоэф, 2);
		КонецЕсли;
		
		Если МассивСумм = Неопределено И МассивСуммПР = Неопределено И МассивСуммБУ = Неопределено  Тогда
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации не проставлены коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			
			НоваяСтрока = ТабЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНапр);
			
			НоваяСтрока.ОбъектУчета              = СтрокаТЗ.ОбъектУчета;
			НоваяСтрока.СчетАмортизации          = СтрокаТЗ.СчетАмортизации;
			НоваяСтрока.СчетАмортизацииНУ        = СтрокаТЗ.СчетАмортизацииНУ;
			НоваяСтрока.ИмяСубконто              = СтрокаТЗ.ИмяСубконто;
			
			НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = СтрокаТЗ.НаправлениеАмортизации.СпособРаспределенияЗатратНаВыпуск;
			
			Сумма = ?(МассивСумм = Неопределено, 0, МассивСумм[СтрокаНапр.НомерСтроки - 1]);
			НоваяСтрока.Сумма = Сумма;
			Если ТипУчета = "Бух" Тогда
				НоваяСтрока.СуммаБух = Сумма;
				
			ИначеЕсли ТипУчета = "Нал" Тогда
				СуммаБУ = ?(МассивСуммБУ = Неопределено, 0, МассивСуммБУ[СтрокаНапр.НомерСтроки - 1]);
				НоваяСтрока.СуммаБух = СуммаБУ;
				НоваяСтрока.СуммаНал = Сумма;
				
				Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
					СуммаПР = ?(МассивСуммПР = Неопределено, 0, МассивСуммПР[СтрокаНапр.НомерСтроки - 1]);
					Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПринятиеКУчетуОС") И ЗначениеЗаполнено(НоваяСтрока.СтатьяЗатрат)
						И НоваяСтрока.СтатьяЗатрат.ВидРасходовНУ <> Перечисления.ВидыРасходовНУ.Амортизация Тогда
						СуммаПР = СуммаПР - Сумма;
					КонецЕсли;
					НоваяСтрока.ПостояннаяРазница = СуммаПР;
					НоваяСтрока.ВременнаяРазница = СуммаБУ - Сумма - СуммаПР;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТипУчета = "Бух" Тогда
		
		ВремСтруктураШапкиДокумента = Новый Структура;
		
		Для каждого Строка Из СтруктураШапкиДокумента Цикл
			
			Если Строка.Ключ = "ОтражатьВНалоговомУчете"
				И Не ИспользоватьРасширеннуюАналитику
				Тогда
				ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Ложь);
			ИначеЕсли Строка.Ключ <> "ВалютаДокумента" Тогда
				ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Строка.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		ВремСтруктураШапкиДокумента,
		ТабЗатрат,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		);
		
		//формирование проводок
		Проводки = ДокОбъект.Движения.Хозрасчетный;
		
		Для каждого СтрокаЗатрат из ТабЗатрат Цикл
			
			// Не добавляем незаконченные проводки и проводки в которых один из счетов забалансовый
			Если НЕ ЗначениеЗаполнено(СтрокаЗатрат.СуммаБух) 
				ИЛИ СтрокаЗатрат.СчетАмортизации.Забалансовый <> СтрокаЗатрат.СчетЗатрат.Забалансовый
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаЗатрат.СчетЗатрат) 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаЗатрат.СчетАмортизации)
				тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = ДатаРасчета;
			Проводка.Содержание   = ?(НЕ ЗначениеЗаполнено(ТекстПроводки), "Амортизация", ТекстПроводки);
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаЗатрат.СуммаБух;
			
			УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
			Проводка, 
			СтрокаЗатрат, 
			СтруктураШапкиДокумента, 
			"Хозрасчетный", 
			"Дт",
			Истина // ПолучитьПодразделениеИзСтрокиТаблицы
			);
			/////Вадим 28.10.2013 10:19:57
            ПроставитьПодразделениеНаНачалоМесяцаПриСписаниеАмортизации(Проводка,СтрокаЗатрат,СтруктураШапкиДокумента);
   
   			////ВадимКонец
   
			Проводка.СчетКт = СтрокаЗатрат.СчетАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипУчета = "Нал" Тогда
		
		ВремСтруктураШапкиДокумента = Новый Структура;
		
		Для каждого Строка Из СтруктураШапкиДокумента Цикл
			
			Если Строка.Ключ = "ОтражатьВБухгалтерскомУчете" Тогда
				ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Ложь);
			ИначеЕсли Строка.Ключ <> "ВалютаДокумента" Тогда
				ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Строка.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		ВремСтруктураШапкиДокумента,
		ТабЗатрат,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		);
		
		//формирование проводок
		Проводки = ДокОбъект.Движения.Налоговый;
		
		Для каждого СтрокаЗатрат из ТабЗатрат Цикл
			
			Если ЗначениеЗаполнено(СтрокаЗатрат.СуммаНал) Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаРасчета;
				Проводка.Содержание   = ?(НЕ ЗначениеЗаполнено(ТекстПроводки), "Амортизация", ТекстПроводки);
				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаЗатрат.СуммаНал;
				УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
				Проводка, 
				СтрокаЗатрат, 
				СтруктураШапкиДокумента, 
				"Налоговый",
				"Дт",
				Истина // ПолучитьПодразделениеИзСтрокиТаблицы
				);
				
				Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
				БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗатрат.ПостояннаяРазница) Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаРасчета;
				Проводка.Содержание   = ?(НЕ ЗначениеЗаполнено(ТекстПроводки), "Амортизация", ТекстПроводки);
				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаЗатрат.ПостояннаяРазница;
				УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
				Проводка, 
				СтрокаЗатрат, 
				СтруктураШапкиДокумента, 
				"Налоговый",
				"Дт",
				Истина // ПолучитьПодразделениеИзСтрокиТаблицы
				);
				
				Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
				БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
				Проводка.ВидУчетаДт     = Перечисления.ВидыУчетаПоПБУ18.ПР;
				Проводка.ВидУчетаКт     = ?(ЗначениеЗаполнено(СтрокаЗатрат.ПостояннаяРазница), Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.НУ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗатрат.ВременнаяРазница) Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаРасчета;
				Проводка.Содержание   = ?(НЕ ЗначениеЗаполнено(ТекстПроводки), "Амортизация", ТекстПроводки);
				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаЗатрат.ВременнаяРазница;
				УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
				Проводка, 
				СтрокаЗатрат, 
				СтруктураШапкиДокумента, 
				"Налоговый",
				"Дт",
				Истина // ПолучитьПодразделениеИзСтрокиТаблицы
				);
				
				Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
				БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
				Проводка.ВидУчетаДт     = Перечисления.ВидыУчетаПоПБУ18.ВР;
				Проводка.ВидУчетаКт     = ?( ЗначениеЗаполнено(СтрокаЗатрат.ВременнаяРазница), Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.НУ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабЗатрат;
	
КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямРегл()

// Процедура выполняет стандартные действия при начале выбора события ОС в формах документов.
//
// Параметры:
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  ВидыСостояний                     - вид состояний ОС для отбора, значение перечисления ВидыСостоянийОС;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСобытияОС(ЭлементФормы, ВидыСобытий, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.СобытияОС.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если ВидыСобытий <> Неопределено Тогда

		// Оставим в выборе только "правильные" состояния
		Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;

		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Значение         = ВидыСобытий;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Использование    = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСобытияОС.Доступность = Ложь;

	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСобытияОС()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ С ИМУЩЕСТВОМ В ЭКСПЛУАТАЦИИ

// Функция возвращает расшифровку срока полезного использования в годах и 
// месяцах.
//
// Параметры:
//  СрокПолезногоИспользования - срок полезного использования (в месяцах),
//                 подлежащий расшифровке
//
// Возвращаемое значение:
//  Строка       - расшифровка срока полезного использования в годах и 
//                 месяцах
//
Функция РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользования) Экспорт
	
	РасшифровкаСрокаПолезногоИспользования = "";
	
	Если ЗначениеЗаполнено(СрокПолезногоИспользования) Тогда
	
		ЧислоЛет     = Цел(СрокПолезногоИспользования / 12);
		ЧислоМесяцев = (СрокПолезногоИспользования % 12);
		
		Если НЕ (ЧислоЛет = 0) Тогда
			
			// Построим строку с числом лет
			Если (СтрДлина(ЧислоЛет) > 1) И (Число(Сред(ЧислоЛет, СтрДлина(ЧислоЛет) - 1, 1)) = 1) Тогда
				СтрокаГод = " лет";
			ИначеЕсли Число(Прав(ЧислоЛет, 1)) = 1 Тогда
				СтрокаГод = " год";
			ИначеЕсли (Число(Прав(ЧислоЛет, 1)) > 1) И (Число(Прав(ЧислоЛет, 1)) < 5) Тогда
				СтрокаГод = " года";
			Иначе
				СтрокаГод = " лет";
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + Строка(ЧислоЛет) + СтрокаГод;
			
		КонецЕсли;
		
		Если НЕ (ЧислоМесяцев = 0) Тогда
			
			// Построим строку с числом месяцев
			Если (СтрДлина(ЧислоМесяцев) > 1) И (Число(Сред(ЧислоМесяцев, СтрДлина(ЧислоМесяцев) - 1, 1)) = 1) Тогда
				СтрокаМесяц = " месяцев";
			ИначеЕсли Число(Прав(ЧислоМесяцев, 1)) = 1 Тогда
				СтрокаМесяц = " месяц";
			ИначеЕсли (Число(Прав(ЧислоМесяцев, 1)) > 1) И (Число(Прав(ЧислоМесяцев, 1)) < 5) Тогда
				СтрокаМесяц = " месяца";
			Иначе
				СтрокаМесяц = " месяцев";
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + ?(НЕ ЗначениеЗаполнено(РасшифровкаСрокаПолезногоИспользования), "", " ") + Строка(ЧислоМесяцев) + СтрокаМесяц;
		
		КонецЕсли;
		
		РасшифровкаСрокаПолезногоИспользования = "(" + РасшифровкаСрокаПолезногоИспользования + ")";
		
	КонецЕсли;
	
	Возврат РасшифровкаСрокаПолезногоИспользования;
	                                        	
КонецФункции // РасшифровкаСрокаПолезногоИспользования()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТОВ ПО ОС

// Проверяет наличие одинаковых значений в колонке табличной части.
//
Процедура ПроверитьДубли(Таблица, ПредставлениеТаблицы, ИмяКолонки, ПредставлениеКолонки, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = Таблица.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть(ИмяКолонки, "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		Таблица.Индексы.Добавить(ИмяКолонки);
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(НЕ ЗначениеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + "В строках №№ ";
															  
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = Таблица.НайтиСтроки(Новый Структура(ИмяКолонки, СтрокаТаблицыДублей[ИмяКолонки]));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + СписокНомеровСтрок 
			                       + " табличной части """ + ПредставлениеТаблицы + """ в колонке """ + ПредставлениеКолонки + """ указано одинаковое значение.";
			
		КонецЦикла;
														  
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДубли()

#Если Клиент Тогда

// Функция рассчитывает стоимость объекта строительства по разным видам учета
// Возвращает структуру со значениями стоимостей по видам учета, поля:
//- СтоимостьУУ
// - СтоимостьБУ
// - СтоимостьБУХоз
// - СтоимостьНУ
// - СтоимостьНУХоз
//
Функция РассчитатьСтоимостьОбъектаСтроительства(ОтражатьВУправленческомУчете,
	                                           ОтражатьВБухгалтерскомУчете,
	                                           ОтражатьВНалоговомУчете,
	                                           СчетУчетаБУВнеоборотногоАктива,
	                                           СчетУчетаНУВнеоборотногоАктива,
	                                           ОбъектСтроительства,
	                                           Организация,
	                                           Период = Неопределено) Экспорт

	СтруктураСтоимостьОбъектаСтроительства = Новый Структура;
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьУУ",0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьБУ",0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьБУХоз",0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьНУ",0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьНУХоз",0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьПР",0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьПРХоз",0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьВР",0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьВРХоз",0);

	Если НЕ ЗначениеЗаполнено(ОбъектСтроительства) Тогда
		Предупреждение("Не выбран объект строительства", 60);
		Возврат СтруктураСтоимостьОбъектаСтроительства;
	КонецЕсли;

	Если (ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете) И (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат СтруктураСтоимостьОбъектаСтроительства;
	КонецЕсли;

	Если (ОтражатьВБухгалтерскомУчете) И (НЕ ЗначениеЗаполнено(СчетУчетаБУВнеоборотногоАктива)) Тогда
		Предупреждение("Не выбран счет бухгалтерского учета объекта строительства", 60);
		Возврат СтруктураСтоимостьОбъектаСтроительства;
	КонецЕсли;

	Если (ОтражатьВНалоговомУчете) И (НЕ ЗначениеЗаполнено(СчетУчетаНУВнеоборотногоАктива)) Тогда
		Предупреждение("Не выбран счет налогового учета объекта строительства", 60);
		Возврат СтруктураСтоимостьОбъектаСтроительства;
	КонецЕсли;

	Если ОтражатьВУправленческомУчете Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период"             , Период);
		Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтроительствоОбъектовОсновныхСредствОстатки.СуммаОстаток КАК Стоимость
		|ИЗ
		|	РегистрНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(&Период, ОбъектСтроительства = &ОбъектСтроительства) КАК СтроительствоОбъектовОсновныхСредствОстатки
		|";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтруктураСтоимостьОбъектаСтроительства.СтоимостьУУ = РезультатЗапроса.Выгрузить()[0].Стоимость;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда

		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период",               Период);
		Запрос.УстановитьПараметр("Организация",          Организация);
		Запрос.УстановитьПараметр("ОбъектСтроительства",  ОбъектСтроительства);
		Запрос.УстановитьПараметр("СчетУчетаБУ",          СчетУчетаБУВнеоборотногоАктива);
		Запрос.УстановитьПараметр("СчетУчетаНУ",          СчетУчетаНУВнеоборотногоАктива);
		Запрос.УстановитьПараметр("ПорядокСубконто",      ПорядокСубконто);
		Запрос.УстановитьПараметр("ОбъектыСтроительства", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
		Запрос.УстановитьПараметр("Хозспособ",            Перечисления.СпособыСтроительства.Хозспособ);
		
		ТекстЗапроса = "";
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	""БУ"" КАК ВидУчета,
			|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Стоимость,
			|	ХозрасчетныйОстаткиХозспособ.СуммаОстатокДт КАК СтоимостьХозспособ
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &СчетУчетаБУ, &ОбъектыСтроительства, Субконто1 = &ОбъектСтроительства И Организация = &Организация) КАК ХозрасчетныйОстатки	
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &СчетУчетаБУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Субконто2 = &Хозспособ И Организация = &Организация) КАК ХозрасчетныйОстаткиХозспособ
			|		ПО ХозрасчетныйОстатки.Субконто1 = ХозрасчетныйОстаткиХозспособ.Субконто1
			|";
			
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса +
				"ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	НалоговыйОстатки.ВидУчета,
			|	НалоговыйОстатки.СуммаОстатокДт,
			|	НалоговыйОстаткиХозспособ.СуммаОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &СчетУчетаНУ, &ОбъектыСтроительства, Субконто1 = &ОбъектСтроительства И Организация = &Организация) КАК НалоговыйОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &СчетУчетаНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Субконто2 = &Хозспособ И Организация = &Организация) КАК НалоговыйОстаткиХозспособ
			|		ПО НалоговыйОстатки.Субконто1 = НалоговыйОстаткиХозспособ.Субконто1
			|		 И НалоговыйОстатки.ВидУчета  = НалоговыйОстаткиХозспособ.ВидУчета
			|";
			
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидУчета = "БУ" Тогда
				СтруктураСтоимостьОбъектаСтроительства.СтоимостьБУ    = Выборка.Стоимость;
				СтруктураСтоимостьОбъектаСтроительства.СтоимостьБУХоз = Выборка.СтоимостьХозспособ;
			ИначеЕсли Выборка.ВидУчета = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
				СтруктураСтоимостьОбъектаСтроительства.СтоимостьНУ    = Выборка.Стоимость;
				СтруктураСтоимостьОбъектаСтроительства.СтоимостьНУХоз = Выборка.СтоимостьХозспособ;
			ИначеЕсли Выборка.ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				СтруктураСтоимостьОбъектаСтроительства.СтоимостьПР    = Выборка.Стоимость;
				СтруктураСтоимостьОбъектаСтроительства.СтоимостьПРХоз = Выборка.СтоимостьХозспособ;
			ИначеЕсли Выборка.ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
				СтруктураСтоимостьОбъектаСтроительства.СтоимостьВР    = Выборка.Стоимость;
				СтруктураСтоимостьОбъектаСтроительства.СтоимостьВРХоз = Выборка.СтоимостьХозспособ;
			КонецЕсли;
				
		КонецЦикла;

	КонецЕсли;

	Возврат СтруктураСтоимостьОбъектаСтроительства;

КонецФункции // РассчитатьСтоимостьОбъектаСтроительства()

#КонецЕсли


// Функция возвращает счета учета по выбранному объекту
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Объект      - ... строительства по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетУчетаНДС");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ПустойОбъект",      Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект",            Объект);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	2,
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &ПустойОбъект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	3,
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	4,
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &ПустойОбъект
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
		Результат.СчетУчетаНДС = Выборка.СчетУчетаНДС;

	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаОбъектовСтроительства()

Процедура ОткрытьФормуВыбораНМА(ВидОбъектаУчета, СтандартнаяОбработка, Владелец, Ключ = неопределено,ВыбратьНесколькоЗначений = Ложь) Экспорт

	Форма = Справочники.НематериальныеАктивы.ПолучитьФормуВыбора("ФормаВыбора", Владелец, Ключ);
	ЭлементОтбора = Форма.СправочникСписок.Отбор.ВидОбъектаУчета;
	ЭлементОтбора.Значение = ВидОбъектаУчета;
	ЭлементОтбора.Использование = Истина;
	Если не ВыбратьНесколькоЗначений тогда
		Форма.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Владелец.Значение;
		Форма.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	КонецЕсли;
	Форма.Открыть();
	Форма.ЗакрыватьПриВыборе = не ВыбратьНесколькоЗначений;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА и НИОКР

// Функция для определения стоимости, суммы накопленной амортизации НМА (НИОКР) 
// в указанной организации на определенный момент времени.
//
Функция ОпределитьСтоимостьПоСпискуНМА(Организация, СписокНМА, Период) Экспорт

	СубконтоНМА = Новый Массив();
	СубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);

	ТаблицаПоНМА = Новый ТаблицаЗначений;
	ТаблицаПоНМА.Колонки.Добавить("НематериальныйАктив", Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	
	Если ТипЗнч(СписокНМА) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		
		НоваяСтрока = ТаблицаПоНМА.Добавить();
		НоваяСтрока.НематериальныйАктив = СписокНМА;
		
	Иначе
		
		ТаблицаПоНМА.ЗагрузитьКолонку(СписокНМА, "НематериальныйАктив");
		
	КонецЕсли;
	
	Запрос   = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("СписокНМА",       СписокНМА);
	Запрос.УстановитьПараметр("НачалоПериода",   Период);
	Запрос.УстановитьПараметр("СубконтоНМА",     СубконтоНМА);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоНМА);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	НематериальныйАктив
	|ПОМЕСТИТЬ НематериальныеАктивы
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НематериальныеАктивы.НематериальныйАктив КАК НематериальныйАктив,
	|	НМА_БУ.НематериальныйАктив КАК НМА_БУ,
	|	НМА_БУ.СчетУчета КАК СчетУчетаБУ,
	|	ВЫБОР КОГДА НМА_БУ.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР) ТОГДА НМА_БУ.СчетУчета ИНАЧЕ НМА_БУ.СчетНачисленияАмортизации КОНЕЦ КАК СчетАмортизацииБУ,
	|	НМА_НУ.НематериальныйАктив КАК НМА_НУ,
	|	НМА_НУ.СчетУчета КАК СчетУчетаНУ,
	|	ВЫБОР КОГДА НМА_НУ.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР) ТОГДА НМА_НУ.СчетУчета ИНАЧЕ НМА_НУ.СчетНачисленияАмортизации КОНЕЦ КАК СчетАмортизацииНУ,
	|	СтоимостьНМАБухгалтерскийУчетОстатки.СтоимостьОстаток КАК СтоимостьБУ,
	|	СтоимостьНМАНалоговыйУчетОстатки.СтоимостьОстаток КАК СтоимостьНУ,
	|	СтоимостьНМАБухгалтерскийУчетОстатки.АмортизацияОстаток КАК АмортизацияБУ,
	|	СтоимостьНМАНалоговыйУчетОстатки.АмортизацияОстаток КАК АмортизацияНУ
	|ИЗ
	|	НематериальныеАктивы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК НМА_БУ
	|	ПО НематериальныеАктивы.НематериальныйАктив = НМА_БУ.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаНМА.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК НМА_НУ
	|	ПО НематериальныеАктивы.НематериальныйАктив = НМА_НУ.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМАНалоговыйУчет.Остатки(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СтоимостьНМАНалоговыйУчетОстатки
	|	ПО НематериальныеАктивы.НематериальныйАктив = СтоимостьНМАНалоговыйУчетОстатки.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМАБухгалтерскийУчет.Остатки(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СтоимостьНМАБухгалтерскийУчетОстатки
	|	ПО НематериальныеАктивы.НематериальныйАктив = СтоимостьНМАБухгалтерскийУчетОстатки.НематериальныйАктив";
	ТЗ = Запрос.Выполнить().Выгрузить();

	ЧисловыеКолонки = Новый Структура("СтоимостьБУ, АмортизацияБУ, СтоимостьНУ, АмортизацияНУ");

	Для Каждого СтрокаТЗ Из ТЗ Цикл

		Для каждого Колонка Из ЧисловыеКолонки Цикл

			Если СтрокаТЗ[Колонка.Ключ] = NULL тогда
				СтрокаТЗ[Колонка.Ключ] = 0;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат ТЗ;

КонецФункции // ОпределитьСтоимостьПоСпискуНМА()

//Получает список НМА, учитываемых в указанной организации
//НМА включается в список если последняя организация, в которой он учитывался соответсвует переданной в функцию
//
//Параметры:
//	Период - Дата или момент времени - период на который определяется принадлежность организации
//	Орагнизация - СправочникСсылка.Орагнизации
//	НУ 			- булево - признак необходимости определения отражения объекта в НУ, по умолчанию - ложь 
//	ОбъектНМА	- Массив, СписокЗначений или СправочникСсылка.НематериальныеАктивы - список объектов НМА,
//	по которому необходимо отфильтровать полученный результат
//
//Возвращаемое значение:
// 	Массив ссылок СправочникСсылка.НематериальныеАктивы, если ни обин объект не подобран - пустой массив!
//
Функция ПолучитьСписокНМАОрагнизации(Период, Организация, НУ = ложь, ОбъектНМА = Неопределено) Экспорт
	
	ТекстУсловия = ?(ОбъектНМА = Неопределено,""," НематериальныйАктив В(&НематериальныйАктив) ");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&Период,"+ТекстУсловия+" ) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|" +?(НУ,"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&Период, Организация = &Организация) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
		|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
		|  ","") +"
		|ГДЕ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация = &Организация
		|";
	
	Запрос.УстановитьПараметр("Период",Период );
	Запрос.УстановитьПараметр("Организация",Организация );
	Запрос.УстановитьПараметр("НематериальныйАктив",ОбъектНМА);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//Нет подходящих объектов
		Возврат Новый массив();
	КонецЕсли; 
	
	ТаблицаОбъектов = Результат.Выгрузить();
	Возврат ТаблицаОбъектов.ВыгрузитьКолонку("НематериальныйАктив");
	
КонецФункции

// Рассчитывает сумму амортизации по указаному нематериальному активу по нал учету
//
// Параметры
//  НематериальныйАктив                        - Массив, СправочникСсылка.НематериальныеАктивы - НМА, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииНМА_НИОКР_БухРегл(ДатаРасчета, Организация, НематериальныйАктив = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("НМА",                    Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	СписокНМА = ПолучитьСписокНМАОрагнизации(НачалоМесяца(ДатаРасчета), Организация, Ложь, НематериальныйАктив);
	
	Если СписокНМА.количество()=0 тогда
		//Не обнаружено объектов 
		Возврат ТаблицаАмортизации;
	КонецЕсли;
	 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",    НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("СписокНМА", СписокНМА);
	 
	Запрос.УстановитьПараметр("НИОКР",       Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР); 

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив,
		|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив) КАК НематериальныйАктивПредставление,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив.Код КАК Код,
		|	ВыработкаНМАОбороты.КоличествоОборот КАК Количество,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияДляВычисленияАмортизации,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК СтоимостьДляВычисленияАмортизации,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период,
		|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета,
		|	ВЫБОР КОГДА ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = &НИОКР ТОГДА СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета ИНАЧЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КОНЕЦ КАК СчетНачисленияАмортизации,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
		|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент, 0) КАК Коэффициент,
		|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособыОтраженияРасходовПоАмортизации,
		|	ЕСТЬNULL(СтоимостьНМА_БУ.СтоимостьНачальныйОстаток, 0) КАК СтоимостьНачальныйОстаток,
		|	ЕСТЬNULL(СтоимостьНМА_БУ.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
		|	ЕСТЬNULL(СтоимостьНМА_БУ.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
		|	ЕСТЬNULL(СтоимостьНМА_БУ.АмортизацияПриход, 0) КАК АмортизацияОборот,
		|	СтоимостьНМАНаНачалоГода_БУ.СтоимостьОстаток - СтоимостьНМАНаНачалоГода_БУ.АмортизацияОстаток КАК СтоимостьНаНачалоГода
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&НачалоПериода, НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
		|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаНМА.Обороты(&НачалоПериода, &КонецПериода, Месяц, НематериальныйАктив В (&СписокНМА)) КАК ВыработкаНМАОбороты
		|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМАБухгалтерскийУчет.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СтоимостьНМА_БУ
		|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СтоимостьНМА_БУ.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМАБухгалтерскийУчет.Остатки(&НачалоГода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СтоимостьНМАНаНачалоГода_БУ
		|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СтоимостьНМАНаНачалоГода_БУ.НематериальныйАктив
		|
		|ГДЕ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация = &Организация И
		|	(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА)";
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоНМА.Следующий() Цикл

		ТекстСообщения = "Бух. расчет амортизации: для нематериального актива " + СокрЛП(ВыборкаПоНМА.НематериальныйАктивПредставление)
		               + " (" + СокрЛП(ВыборкаПоНМА.Код) + ")";
		
		Если (ВыборкаПоНМА.АмортизацияОборот <> 0) И
			(ВыборкаПоНМА.АмортизацияОборот <> Null)Тогда
			Если ВыдаватьСообщения = Истина и не (НематериальныйАктив = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 
		КонецЕсли;
		
		Если (ВыборкаПоНМА.СтоимостьНачальныйОстаток <= ВыборкаПоНМА.АмортизацияНачальныйОстаток) Тогда
			Продолжить; // остаточная стоимость на начало месяца равна 0
		КонецЕсли;

		СуммаАмортизации = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан способ амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьНачальныйОстаток) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " текущая балансовая стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		СуммаАмортизации = 0;

		Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации/ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
			СуммаАмортизации        = СуммаГодовойАмортизации / 12;

		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда

			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.Количество) Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " объем продукции для вычисления не определен");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;

			СуммаАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации * ВыборкаПоНМА.Количество / ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда

			
			ПрименятьВ2008ГодуПравилаПБУ142000 = Константы.ПрименятьВ2008ГодуПравилаПБУ142000.Получить();
			
			Если Год(ДатаРасчета) >= 2008 
			   И НЕ (Год(ДатаРасчета) = 2008 И ПрименятьВ2008ГодуПравилаПБУ142000) Тогда
			   
				ОстаточнаяСтоимость = Макс(0, ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток);
				ОставшийсяСрокПолезногоИспользования = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации 
				                                     - УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВыборкаПоНМА.Период, ДатаРасчета)
				                                     + 1;
				
				СуммаАмортизации = ?(ОставшийсяСрокПолезногоИспользования > 0,
				                     ОстаточнаяСтоимость * (?(ВыборкаПоНМА.Коэффициент = 0, 1, ВыборкаПоНМА.Коэффициент) / ОставшийсяСрокПолезногоИспользования),
									 0);
				
			Иначе
			
				Если Год(ВыборкаПоНМА.Период) = Год(ДатаРасчета) Тогда
					СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
				Иначе
					СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
				КонецЕсли;
				СтоимостьИтоговая = ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая);

				СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
				СуммаАмортизации        = СуммаГодовойАмортизации / 12;
				
			КонецЕсли;

		КонецЕсли;

		ВсегоОсталосьСписать = ?(ВыборкаПоНМА.ПервоначальнаяСтоимость    = NULL, 0, ВыборкаПоНМА.ПервоначальнаяСтоимость) - 
		                       ?(ВыборкаПоНМА.АмортизацияКонечныйОстаток = NULL, 0, ВыборкаПоНМА.АмортизацияКонечныйОстаток);
		СуммаАмортизации     = Мин(СуммаАмортизации, ВсегоОсталосьСписать);

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.НМА                    = ВыборкаПоНМА.НематериальныйАктив;
		СтрокаАмортизации.СчетУчетаБУ            = ВыборкаПоНМА.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииБУ      = ВыборкаПоНМА.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "НематериальныеАктивы";
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоНМА.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Бух                    = СуммаАмортизации;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл()

// Рассчитывает сумму амортизации по указаному нематериальному активу по нал учету
//
// Параметры
//  НематериальныйАктив                        - Массив, СправочникСсылка.НематериальныеАктивы - НМА, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииНМА_НИОКР_НалогРегл(Объект,ДатаРасчета,Организация,НематериальныйАктив = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("НМА",                    Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаНУ",            Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииНУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Налог",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	СписокНМА = ПолучитьСписокНМАОрагнизации(НачалоМесяца(ДатаРасчета), Организация, Истина, НематериальныйАктив);
	
	Если СписокНМА.количество()=0 тогда
		//Не обнаружено объектов 
		Возврат ТаблицаАмортизации;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",                 КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("НИОКР"		,                 Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР); 
	Запрос.УстановитьПараметр("МетодАмортизацииЛинейный",     Перечисления.МетодыНачисленияАмортизации.Линейный); 
	Запрос.УстановитьПараметр("СписокНМА",                    СписокНМА);
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", ПолучитьДатуПереходаКЛинейномуМетоду(ДатаРасчета, Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.МетодНачисленияАмортизацииНУ КАК МетодНачисленияАмортизацииНУ
	|ПОМЕСТИТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период                     КАК Период,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив        КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ  КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию       КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация 
	|	                                                                                     И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НематериальныеАктивы.Ссылка КАК НематериальныйАктив
	|ПОМЕСТИТЬ
	|	СписокНМАСОстаточнойСтоимостью
	|ИЗ 
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|	ПО НематериальныеАктивы.Ссылка = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В (&СписокНМА)
	|	И (НематериальныеАктивы.АмортизационнаяГруппа НЕ В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), 
	|	                                                    ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), 
	|	                                                    ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))) 
	|	И НЕ (НематериальныеАктивы.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа))
	|	И ВЫБОР КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009 ТОГДА
	|		(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Нелинейный))
	|	  ИНАЧЕ ИСТИНА КОНЕЦ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаНалоговогоУчетаНМАСрезПоследних.НематериальныйАктив       КАК НематериальныйАктив,
	|	СчетаНалоговогоУчетаНМАСрезПоследних.СчетУчета                 КАК СчетУчета,
	|	СчетаНалоговогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ
	|	СчетаНалоговогоУчетаНМАСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаНалоговогоУчетаНМА.СрезПоследних(&НачалоПериода, Организация = &Организация
	|	                                                                      И НематериальныйАктив В (&СписокНМА)) КАК СчетаНалоговогоУчетаНМАСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив,
	|	МАКСИМУМ(СостоянияНМАОрганизаций.Период) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ
	|	СостоянияНМАОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|ГДЕ
	|	СостоянияНМАОрганизаций.Организация = &Организация
	|	И СостоянияНМАОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМАОрганизаций.НематериальныйАктив
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНМАНачалоПериода.Субконто1      КАК НематериальныйАктив,
	|	АмортизацияНМАНачалоПериода.СуммаОстатокКт КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ
	|	АмортизацияНМАПриПереходеКЛинейномуМетоду
	|ИЗ 
	|	РегистрБухгалтерии.Налоговый.Остатки(&ДатаПереходаКЛинейномуМетоду, 
	|	                                     Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетНачисленияАмортизации ИЗ СчетаНалоговогоУчетаНМАСрезПоследних),
	|	                                     ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы), 
	|	                                     Организация = &Организация 
	|	                                     И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)) КАК АмортизацияНМАНачалоПериода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокНМАСОстаточнойСтоимостью
	|	ПО СписокНМАСОстаточнойСтоимостью.НематериальныйАктив = АмортизацияНМАНачалоПериода.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Налоговый.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.Код КАК Код,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
	|	ВЫБОР КОГДА ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = &НИОКР ТОГДА 
	|		ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|		ИНАЧЕ 
	|			ВЫБОР КОГДА ГОД(&НачалоПериода) < 2009 ТОГДА
	|				ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации
	|			ИНАЧЕ 
	|				ВЫБОР КОГДА (ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа)))
	|						ИЛИ (ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)) ТОГДА
	|					ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|				ИНАЧЕ
	|					УчетнаяПолитикаОрганизацийСрезПоследних.МетодНачисленияАмортизацииНУ
	|				КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК МетодНачисленияАмортизации,
	|	СчетаНалоговогоУчетаНМАСрезПоследних.СчетУчета,
	|	ВЫБОР КОГДА ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = &НИОКР ТОГДА СчетаНалоговогоУчетаНМАСрезПоследних.СчетУчета ИНАЧЕ СчетаНалоговогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КОНЕЦ КАК СчетНачисленияАмортизации,
	|	СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент,
	|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ПризнакНачисленияПоБазовойСтоимости,
	|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.СуммаНакопленнойАмортизации,
	|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ФактическийСрокПолезногоИспользования,
	|	НаправленияАмортизации.СпособОтраженияРасходов КАК НаправлениеАмортизации,
	|	ЕСТЬNULL(СтоимостьНМА_НУ.СтоимостьНачальныйОстаток, 0) КАК СтоимостьНаНачалоМесяца,
	|	ЕСТЬNULL(СтоимостьНМА_НУ.СтоимостьКонечныйОстаток, 0) КАК СтоимостьНаКонецМесяца,
	|	ЕСТЬNULL(СтоимостьНМА_НУ.АмортизацияПриход, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьНМА_НУ.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА_НУ.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМАПриПереходеКЛинейномуМетоду.АмортизацияНачальныйОстаток, 0) КАК АмортизацияПриПереходеКЛинейномуМетоду,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) - ((ГОД(&ДатаПереходаКЛинейномуМетоду) - ГОД(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию)) * 12 + (МЕСЯЦ(&ДатаПереходаКЛинейномуМетоду) - МЕСЯЦ(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию))) + 1 КАК ОстатокСрокаПриПереходеКЛинейномуМетоду,
	|	ВЫБОР КОГДА (ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАСОстаточнойСтоимостью) И ГОД(&НачалоПериода) >= 2009) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПереходКЛинейномуМетоду
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&НачалоПериода, НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаНМА.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СчетаНалоговогоУчетаНМАСрезПоследних
	|		ПО ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив = СчетаНалоговогоУчетаНМАСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|		ПО ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив = СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииНМАПоБазовойСтоимостиНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних
	|		ПО ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив = НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК НаправленияАмортизации
	|		ПО ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив = НаправленияАмортизации.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМАНалоговыйУчет.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК СтоимостьНМА_НУ
	|		ПО ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив = СтоимостьНМА_НУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаОрганизацийСрезПоследних 
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНМАПриПереходеКЛинейномуМетоду 
	|		ПО ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив = АмортизацияНМАПриПереходеКЛинейномуМетоду.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияНМАОрганизаций 
	|		ПО ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив = СостоянияНМАОрганизаций.НематериальныйАктив
	|
	|ГДЕ
	|	(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА) И
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Организация = &Организация";
	ТаблицаПоНМА = Запрос.Выполнить().Выгрузить();

	Для каждого ВыборкаПоНМА из ТаблицаПоНМА Цикл

		ТекстСообщения = "Налог. расчет амортизации: для нематериального актива " + СокрЛП(ВыборкаПоНМА.НематериальныйАктивПредставление)
					   + "(" + СокрЛП(ВыборкаПоНМА.Код) + ")";
		
		Если (ВыборкаПоНМА.АмортизацияОборот <> 0) И
			(ВыборкаПоНМА.АмортизацияОборот <> Null)Тогда
			
			Если ВыдаватьСообщения = Истина И НЕ (НематериальныйАктив = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 

			Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 

		КонецЕсли;

		Если (ВыборкаПоНМА.СтоимостьНаНачалоМесяца <= ВыборкаПоНМА.АмортизацияНачальныйОстаток) Тогда
			Продолжить; // остаточная стоимость на начало месяца равна 0
		КонецЕсли;
		
		СуммаАмортизации = 0;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.МетодНачисленияАмортизации) Тогда

			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан метод начисления амортизации");
			КонецЕсли;

			Продолжить;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьНаНачалоМесяца) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " текущая балансовая стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если Год(ДатаРасчета) < 2009 
		 ИЛИ ВыборкаПоНМА.НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР
		 ИЛИ ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
		
			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СрокПолезногоИспользования) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный
			   И НЕ ЗначениеЗаполнено(ВыборкаПоНМА.АмортизационнаяГруппа) Тогда
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + "не указана амортизационная группа");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;

		Если (ВыборкаПоНМА.АмортизацияОборот <> 0) И
			(ВыборкаПоНМА.АмортизацияОборот <> Null)Тогда
			Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		Если ВыборкаПоНМА.СтоимостьНаКонецМесяца =Null тогда
			ВыборкаПоНМА.СтоимостьНаКонецМесяца = 0;
		КонецЕсли;

		Если ВыборкаПоНМА.АмортизацияОборот =Null тогда
			ВыборкаПоНМА.АмортизацияОборот = 0;
		КонецЕсли;

		Если ВыборкаПоНМА.АмортизацияКонечныйОстаток =Null тогда
			ВыборкаПоНМА.АмортизацияКонечныйОстаток = 0;
		КонецЕсли;

		СуммаАмортизации = 0;

		Если ВыборкаПоНМА.СчетУчета = ВыборкаПоНМА.СчетНачисленияАмортизации Тогда
		
			СтоимостьДляВычисления = ?(ВыборкаПоНМА.ПервоначальнаяСтоимостьНУ = NULL, 0, ВыборкаПоНМА.ПервоначальнаяСтоимостьНУ);
			
			ВыборкаПоНМА.СтоимостьНаНачалоМесяца  = СтоимостьДляВычисления;
			ВыборкаПоНМА.АмортизацияКонечныйОстаток = СтоимостьДляВычисления - ВыборкаПоНМА.СтоимостьНаКонецМесяца + ВыборкаПоНМА.АмортизацияКонечныйОстаток;
			ВыборкаПоНМА.СтоимостьНаКонецМесяца   = СтоимостьДляВычисления;
			
		Иначе
			СтоимостьДляВычисления = ВыборкаПоНМА.СтоимостьНаНачалоМесяца
		                           - ?(ВыборкаПоНМА.ПереходКЛинейномуМетоду, ВыборкаПоНМА.АмортизацияПриПереходеКЛинейномуМетоду, 0);
		КонецЕсли; 
		
		СрокИспользованияДляВычисления = Макс(1, ?(ВыборкаПоНМА.ПереходКЛинейномуМетоду,
		                                           ВыборкаПоНМА.ОстатокСрокаПриПереходеКЛинейномуМетоду,
												   ВыборкаПоНМА.СрокПолезногоИспользования));
		
		Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда

			СуммаАмортизации        = СтоимостьДляВычисления / СрокИспользованияДляВычисления * 
				?((ВыборкаПоНМА.СпециальныйКоэффициент=0) или (ВыборкаПоНМА.СпециальныйКоэффициент=Null),1, ВыборкаПоНМА.СпециальныйКоэффициент);

		ИначеЕсли ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

			Если Год(ДатаРасчета) < 2009 Тогда
			
				Если (ВыборкаПоНМА.ПризнакНачисленияПоБазовойСтоимости = Истина) тогда

					СтоимостьДляВычисления         = ВыборкаПоНМА.СтоимостьНаНачалоМесяца - ВыборкаПоНМА.СуммаНакопленнойАмортизации;
					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоНМА.СрокПолезногоИспользования - ВыборкаПоНМА.ФактическийСрокПолезногоИспользования);

					СуммаАмортизации               = СтоимостьДляВычисления / СрокИспользованияДляВычисления *
					                                 ?((ВыборкаПоНМА.СпециальныйКоэффициент=0) или (ВыборкаПоНМА.СпециальныйКоэффициент=Null),
					                                 1, ВыборкаПоНМА.СпециальныйКоэффициент);

				Иначе

					СтоимостьДляВычисления =  ВыборкаПоНМА.СтоимостьНаНачалоМесяца - ВыборкаПоНМА.АмортизацияКонечныйОстаток;
					СуммаАмортизации       = СтоимостьДляВычисления * 2 / ВыборкаПоНМА.СрокПолезногоИспользования *
					                         ?((ВыборкаПоНМА.СпециальныйКоэффициент = 0) или (ВыборкаПоНМА.СпециальныйКоэффициент = Null),
					                           1, ВыборкаПоНМА.СпециальныйКоэффициент);

					СуммаАмортизации       = Макс(0, Мин(СтоимостьДляВычисления, СуммаАмортизации));

					//Перешли 20% барьер. Переходим к начислению по базовой стоимости.
					Если (ВыборкаПоНМА.СтоимостьНаКонецМесяца-ВыборкаПоНМА.АмортизацияКонечныйОстаток-СуммаАмортизации)<= (ВыборкаПоНМА.СтоимостьНаКонецМесяца*0.2) тогда

						Если Объект.Движения.Найти("НачислениеАмортизацииНМАПоБазовойСтоимостиНалоговыйУчет")=Неопределено тогда

							Если НематериальныйАктив =Неопределено и ВыдаватьСообщения = Истина тогда
								ОбщегоНазначения.СообщитьОбОшибке("Нал. расчет амортизации: нематериальный актив " + ВыборкаПоНМА.НематериальныйАктив + " должнен быть переведен на начисление амортизации по базовой стоимости.");
							КонецеслИ;

						Иначе
	                      	//Определяем срок, прошедший с момента принятия к учету.
							Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.ДатаПринятияКУчету) Тогда
								ФактСрокИспользованияНУ = 0;
							Иначе
								ГодПринятияКУчету = Год(ВыборкаПоНМА.ДатаПринятияКУчету);
								ГодТекущий = Год(ДатаРасчета);
								МесяцПринятияКУчету = Месяц(ВыборкаПоНМА.ДатаПринятияКУчету);
								МесяцТекущий = Месяц(ДатаРасчета);
								Если ГодТекущий > ГодПринятияКУчету Тогда
									ФактСрокИспользованияНУ = (ГодТекущий-ГодПринятияКУчету-1)*12+(12-МесяцПринятияКУчету) + МесяцТекущий;
								Иначе
									ФактСрокИспользованияНУ = МесяцТекущий - МесяцПринятияКУчету;
								КонецЕсли;
							КонецЕсли;

							ПереходКНачислениюПоБазовой = Объект.Движения.НачислениеАмортизацииНМАПоБазовойСтоимостиНалоговыйУчет;

							СтрокаДвижения                     = ПереходКНачислениюПоБазовой.Добавить();
							СтрокаДвижения.Период              = ДатаРасчета;
							СтрокаДвижения.Регистратор         = Объект;
							СтрокаДвижения.НематериальныйАктив = ВыборкаПоНМА.НематериальныйАктив; 
							СтрокаДвижения.Организация         = Организация;
							СтрокаДвижения.СуммаНакопленнойАмортизации           = ВыборкаПоНМА.АмортизацияКонечныйОстаток + СуммаАмортизации;
							СтрокаДвижения.ПризнакНачисленияПоБазовойСтоимости   = Истина;
							СтрокаДвижения.ФактическийСрокПолезногоИспользования = ФактСрокИспользованияНУ;

						КонецЕсли;

					КонецЕсли;
					
				КонецЕсли;

			Иначе
				
				Если ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПерваяГруппа Тогда НормаАмортизации         = 14.3
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВтораяГруппа Тогда НормаАмортизации    =  8.8
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ТретьяГруппа Тогда НормаАмортизации    =  5.6
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа Тогда НормаАмортизации =  3.8
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПятаяГруппа Тогда НормаАмортизации     =  2.7
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ШестаяГруппа Тогда НормаАмортизации    =  1.8
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.СедьмаяГруппа Тогда НормаАмортизации   =  1.3
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа Тогда НормаАмортизации   =  1.0
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа Тогда НормаАмортизации   =  0.8
				ИначеЕсли ВыборкаПоНМА.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа Тогда НормаАмортизации   =  0.7
				КонецЕсли;
				
				СуммаАмортизации = (ВыборкаПоНМА.СтоимостьНаНачалоМесяца - ВыборкаПоНМА.АмортизацияНачальныйОстаток)
								 * НормаАмортизации / 100 * ?((ВыборкаПоНМА.СпециальныйКоэффициент = 0), 1, ВыборкаПоНМА.СпециальныйКоэффициент);
				
			КонецЕсли;

		КонецЕсли;

		Остатки = ?(ВыборкаПоНМА.СтоимостьНаКонецМесяца    = Null, 0, ВыборкаПоНМА.СтоимостьНаКонецМесяца) - 
		          ?(ВыборкаПоНМА.АмортизацияКонечныйОстаток = Null, 0, ВыборкаПоНМА.АмортизацияКонечныйОстаток);

		СуммаАмортизации  = Макс(0, Мин(Остатки, СуммаАмортизации));
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.НМА                    = ВыборкаПоНМА.НематериальныйАктив;
		СтрокаАмортизации.СчетУчетаНУ            = ВыборкаПоНМА.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииНУ      = ВыборкаПоНМА.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "НематериальныеАктивы";
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоНМА.НаправлениеАмортизации;
		СтрокаАмортизации.Налог                  = СуммаАмортизации;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНалогРегл



// Возвращает параметры состояния ОС 
// 
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Состояние			- Перечисление.ВидыСостоянийОС
//  УпрУчет				- Булево, Учет, 
//  Организация		    - СправочникСсылка.Организации
// Возвращаемое значение структура с полями:
//	Дата,НомерДок,ИмяДок,Сумма,Регистратор
//
Функция ПолучитьАтрибутыСостоянияОС(ОС, Состояние, УпрУчет = Истина, Организация =  Неопределено) Экспорт 
	
	РегистрСобытий 	 = "СобытияОС";
	РегистрСостояний = "СостоянияОС";
	СуммаЗатрат 	 = "СуммаЗатрат";
	
	Если НЕ УпрУчет тогда
		
		РегистрСобытий 	 = РегистрСобытий   + "Организаций";
		РегистрСостояний = РегистрСостояний + "Организаций";
		СуммаЗатрат 	 = СуммаЗатрат		+ "БУ";
		
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"+РегистрСостояний+".Регистратор.Ссылка КАК Регистратор,
	|	"+РегистрСостояний+".ОсновноеСредство,
	|	"+РегистрСостояний+".Состояние,
	|	ЕСТЬNULL("+РегистрСостояний+".ДатаСостояния, ДАТАВРЕМЯ(1,1,1)) КАК ДатаСостояния,
	|	"+РегистрСобытий+".Событие,
	|	"+РегистрСобытий+".НомерДокумента,
	|	"+РегистрСобытий+".НазваниеДокумента,
	|	ЕСТЬNULL("+РегистрСобытий+"."+СуммаЗатрат+", 0) КАК Сумма
	|ИЗ
	|	РегистрСведений."+РегистрСостояний+" КАК "+РегистрСостояний+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрСобытий+" КАК "+РегистрСобытий+"
	|		ПО "+РегистрСостояний+".Регистратор = "+РегистрСобытий+".Регистратор 
	|		И "+РегистрСостояний+".ОсновноеСредство = "+РегистрСобытий+".ОсновноеСредство 
	|ГДЕ
	|		"+РегистрСостояний+".ОсновноеСредство = &ОсновноеСредство 
	|		И "+РегистрСостояний+".Состояние = &Состояние 
	|		И "+РегистрСобытий+".Событие.ВидСобытияОС в (&ВидСобытияОС)";
	
	ЗапросСостоянияОС = Новый Запрос;
	ЗапросСостоянияОС.УстановитьПараметр("Состояние",Состояние);
	СоответствиеСобытийСостояниям = ПолучитьСоответствиеСобытийСостояниямОС();
	ВидСобытия = Новый Массив;
	Событие    = СоответствиеСобытийСостояниям.Получить(Состояние);
	ВидСобытия.Добавить(Событие);
	Если Событие = Перечисления.ВидыСобытийОС.Списание тогда
		 ВидСобытия.Добавить(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	ЗапросСостоянияОС.УстановитьПараметр("ВидСобытияОС",ВидСобытия);
	ЗапросСостоянияОС.УстановитьПараметр("ОсновноеСредство",ОС);
	Если Не УпрУчет тогда
		ЗапросСостоянияОС.УстановитьПараметр("Организация",Организация);
		ТекстЗапроса= ТекстЗапроса+"
		|   И  "+РегистрСобытий+".Организация	= &Организация
		|   И  "+РегистрСостояний+".Организация = &Организация";
	КонецЕсли;
	
	ЗапросСостоянияОС.Текст	= ТекстЗапроса;
		
	ВыборкаСостояний = ЗапросСостоянияОС.Выполнить().Выбрать();
	СтруктураСостояния = Новый Структура;
	
	Если ВыборкаСостояний.Следующий() тогда
		
		СтруктураСостояния.Вставить( "Дата"        , ВыборкаСостояний.ДатаСостояния);
		СтруктураСостояния.Вставить( "ИмяДок"      , ВыборкаСостояний.НазваниеДокумента);
		СтруктураСостояния.Вставить( "НомерДок"    , ВыборкаСостояний.НомерДокумента);
		СтруктураСостояния.Вставить( "Сумма"	   , ВыборкаСостояний.Сумма);
		СтруктураСостояния.Вставить( "Регистратор" , ВыборкаСостояний.Регистратор);
		
	Иначе	                                              
		
		СтруктураСостояния.Вставить( "Дата"		   , '00010101000000');
		СтруктураСостояния.Вставить( "ИмяДок"	   , "");
		СтруктураСостояния.Вставить( "НомерДок"	   , "");
		СтруктураСостояния.Вставить( "Сумма"	   , 0);
		СтруктураСостояния.Вставить( "Регистратор" , Неопределено);
		
	КонецЕсли;	
	
	Возврат СтруктураСостояния;
	
КонецФункции

// Функция возвращает соответствие значений перечисления Виды событий ОС
// значениям перечисления СостоянияОС
Функция ПолучитьСоответствиеСобытийСостояниямОС()
	
	СоответствиеСобытийСостояниям = Новый Соответствие;
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ВведеноВЭксплуатацию,Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ПринятоКУчету,Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.СнятоСУчета,Перечисления.ВидыСобытийОС.Списание);
	
	Возврат СоответствиеСобытийСостояниям;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ СВЕДЕНИЙ ПО НАЛОГООБЛОЖЕНИЮ

Процедура ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей)
	
	Области = Макет.Области;
	Если Области.Количество() = 0 Тогда
		НазваниеОбласти = "";
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбласть Из Области Цикл
		СписокОбластей.Добавить(Прав(ТекОбласть.Имя,4));
	КонецЦикла;
	
	ТекущаяОбласть = СписокОбластей[0].Значение;
	Для Каждого ТекОбласть Из СписокОбластей Цикл
		Если Год(ТекущийПериод) < Число(ТекОбласть.Значение) Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяОбласть = ТекОбласть.Значение;
	КонецЦикла;
	
	НазваниеОбласти = ТекущаяОбласть; 
	
КонецПроцедуры

Функция ПолучитьРегистрациюВИФНСПоОрганизации(Организация) Экспорт
	
	НалоговыйОрган = Справочники.РегистрацияВИФНС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Организация) Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияВИФНС.Ссылка
		|ИЗ
		|	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
		|ГДЕ
		|	РегистрацияВИФНС.ПометкаУдаления = ЛОЖЬ
		|	И РегистрацияВИФНС.Владелец = &Организация
		|	И РегистрацияВИФНС.Код = РегистрацияВИФНС.Владелец.КодИМНС";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НалоговыйОрган = Выборка.Ссылка;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НалоговыйОрган;
	
КонецФункции // ПолучитьРегистрациюВИФНСПоОрганизации()

Функция ПолучитьКодыВидовТС() Экспорт

	КодыВидовТС = Новый ТаблицаЗначений();
	КодыВидовТС.Колонки.Добавить("Код");
	КодыВидовТС.Колонки.Добавить("Наименование");
	КодыВидовТС.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет = Отчеты.РегламентированныйОтчетТранспортныйНалог.ПолучитьМакет("Списки2007Кв1");
	
	ТекущаяОбласть = Макет.Области.Найти("ВидыТранспортныхСредств");

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыВидовТС.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КодыВидовТС;

КонецФункции // ПолучитьКодыВидовТС() 

Функция ПолучитьСписокКодовЕдиницИзмеренияТС() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("251", "л. с");
	Список.Добавить("999", "Кгс");
	Список.Добавить("181", "БРТ");
	Список.Добавить("796", "шт");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокКодовЕдиницИзмеренияТС()

Функция ПолучитьФормуВыбораДляКода(ВыбранноеЗначение, НазваниеОбъекта, НазваниеМакета, ТекущийПериод) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений();
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	КодыЛьгот.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет = РегистрыСведений[НазваниеОбъекта].ПолучитьМакет(НазваниеМакета);
	
	НазваниеОбласти = "";
	СписокОбластей = Новый СписокЗначений;
	ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей);
	
	ТекущаяОбласть = Макет.Области.Найти("Область" + НазваниеОбласти);
	
	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код          = КодПоказателя;
				НоваяСтрока.Наименование = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКода");
	Форма.Заголовок = Макет.Область(1,1).Текст;
	Форма.СписокЛьгот = КодыЛьгот;
	Форма.СписокПериодовДействия = СписокОбластей;
	Форма.НазваниеОбъекта = НазваниеОбъекта;
	Форма.НазваниеМакета = НазваниеМакета;
	Форма.ТекущийПериод = НазваниеОбласти;
	
	
	ТекущаяСтрока = КодыЛьгот.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокЛьгот.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораДляКода()

Функция ПредставлениеНалоговойЛьготыПоТранспортномуНалогу(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = СокрЛП(Ссылка.НалоговаяЛьгота);
						 
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки Тогда
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ", льготная ставка " + Ссылка.ЛьготнаяСтавка + " руб.";
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах Тогда
		ТекстНалоговойЛьготы = СтрЗаменить(ТекстНалоговойЛьготы, " (в процентах)", " на ") + Ссылка.ПроцентУменьшения + " %";
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму Тогда
		ТекстНалоговойЛьготы = СтрЗаменить(ТекстНалоговойЛьготы, " (на сумму)", " на ") + Ссылка.СуммаУменьшения + " руб.";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготы) 
	   И НЕ Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется Тогда
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготы + ")";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоТранспортномуНалогу()

Функция ПредставлениеНалоговойЛьготыПоЗемельномуНалогу(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = "";
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияПоСтатье395 Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + "Освобождение от налогообложения по ст. 395 НК РФ";
		
		Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395) Тогда
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395 + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.УменьшениеНалоговойБазы Тогда
		
		Если Ссылка.УменьшениеНалоговойБазыПоСтатье391 Тогда
		
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
			                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			                     + "Не облагаемая налогом сумма 10 000 руб., установленная ст. 391 НК РФ";
			
			Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391) Тогда
				ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391 + ")";
			КонецЕсли;
			
		КонецЕсли;
		
		Если Ссылка.УменьшениеНалоговойБазыНаСумму Тогда
			
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
			                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			                     + "Не облагаемая налогом сумма " + Ссылка.НеОблагаемаяНалогомСумма + " руб., установленная местным нормативным актом";
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияМестное Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Освобождение от налогообложения, установленное местным нормативным актом";
		
	КонецЕсли;
		
		
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеОблагаемаяНалогомПлощадь Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Доля не облагаемой налогом площади " + Ссылка.ДоляНеОблагаемойНалогомПлощадиЧислитель + "/" + Ссылка.ДоляНеОблагаемойНалогомПлощадиЗнаменатель;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.ПроцентУменьшенияСуммыНалога) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога на " + Ссылка.ПроцентУменьшенияСуммыНалога + "%";
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Ссылка.СуммаУменьшенияСуммыНалога) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога в размере " + Ссылка.СуммаУменьшенияСуммыНалога + " руб.";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.СниженнаяНалоговаяСтавка) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Снижение налоговой ставки до " + Ссылка.СниженнаяНалоговаяСтавка + "%";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНалоговойЛьготы) Тогда
		ТекстНалоговойЛьготы = "Не применяется";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоЗемельномуНалогу()

Функция ПредставлениеНалоговойЛьготыПоНалогуНаИмущество(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = "";
	
	Если Ссылка.ОсвобождениеОтНалогообложения Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + "Освобождение от налогообложения";
		
		Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложения) Тогда
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложения + ")";
		КонецЕсли;
		
	КонецЕсли;
		
	Если Ссылка.СнижениеНалоговойСтавки Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Снижение налоговой ставки до " + Ссылка.СниженнаяНалоговаяСтавка + "%";
		
	КонецЕсли;
	
	ТекстПроУменьшение = "";
	
	Если Ссылка.УменьшениеСуммыНалогаВПроцентах Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
							 + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога на " + Ссылка.ПроцентУменьшения + "%";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНалоговойЛьготы) Тогда
		ТекстНалоговойЛьготы = "Не применяется";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоНалогуНаИмущество()

// Определяет коэффициент распределения выручки по видам деятельности 
// (ЕНВД / не ЕНВД) за период.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация;
//  НачДата     – Дата – начало периода расчета;
//	КонДата     - Дата - окончание периода расчета.
//
// Возвращаемое значение:
//  Число – коэффициент распределения расходов по видам деятельности.
//
Функция КоэффициентРаспределенияВыручкиПоВидамДеятельности(Организация, Знач НачДата, Знач КонДата) Экспорт
	
	// Массив счетов, по которым рассчитывается выручка организации.
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("НачДата",          НачДата);
	Запрос.УстановитьПараметр("КонДата",          КонДата);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД",  НалоговыйУчетУСН.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("МассивСчетов",     МассивСчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД)
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД))
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаНеЕНВД,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&МассивСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат запроса пустой, то считаем, что все
	// расходы относятся к деятельности, не облагаемой ЕНВД.
	Если РезультатЗапроса.Пустой() Тогда
		
		Коэффициент = 1;
		
	Иначе
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();
		ВыручкаЕНВД      = Макс(ТаблицаРезультат.Итог("ВыручкаЕНВД"),   0);
		ВыручкаНеЕНВД    = Макс(ТаблицаРезультат.Итог("ВыручкаНеЕНВД"), 0);
		
		Если ВыручкаНеЕНВД + ВыручкаЕНВД = 0 Тогда // нет дохода ни по одному из видов деятельности
			
			Коэффициент = 1;
			
		ИначеЕсли ВыручкаНеЕНВД = 0 Тогда  // нет дохода виду деятельности не подпадающему под обложение ЕНВД
			
			Коэффициент = 0;
			
		Иначе
			
			Коэффициент = ВыручкаНеЕНВД / (ВыручкаНеЕНВД + ВыручкаЕНВД);
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции // КоэффициентРаспределенияВыручкиПоВидамДеятельности()

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФОРМАМИ

Процедура НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(ЭлементФормы, Организация = Неопределено, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СпособыОтраженияРасходовПоАмортизации.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если НЕ Организация = Неопределено Тогда
		// Оставим в выборе только записи с организацией из документа и те, в которых организация вообще не указана
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Организация);
		СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение         = СписокОрганизаций;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование    = Истина;

	КонецЕсли;
    ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации()

/////Вадим 28.10.2013 9:58:16
///Вадим 28.10.2013 9:58:49
Процедура ПроставитьПодразделениеНаНачалоМесяцаПриСписаниеАмортизации(Проводка,СтрокаЗатрат,СтруктураШапкиДокумента)
	Если не ТипЗнч(СтруктураШапкиДокумента.Ссылка)=тип("ДокументСсылка.СписаниеОС")
		и не ТипЗнч(СтруктураШапкиДокумента.Ссылка)=тип("ДокументСсылка.ПередачаОС") тогда
		Возврат;
	Конецесли;	
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ), ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";

	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", СтрокаЗатрат.ОбъектУчета);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    ///
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Если не СтрокаЗатрат.ПодразделениеОрганизации = ВыборкаДетальныеЗаписи.Местонахождение тогда
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Подразделения", ВыборкаДетальныеЗаписи.Местонахождение);

    	КонецЕсли;
		
	КонецЕсли;

	

	
	
	
	

КонецПроцедуры
//ВадимКонец

////ВадимКонец

