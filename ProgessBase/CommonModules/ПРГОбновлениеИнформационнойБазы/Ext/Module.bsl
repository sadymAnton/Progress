
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт 

	Если НЕ НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;

	Состояние(НСтр("ru = '(ПРГ) Пожалуйста, подождите, выполняется обновление информационной базы...'"));
	
	Ошибка                 = Ложь;
	ТекстСообщенияОбОшибке = "";
	Попытка
		СтартоваяВерсия = ОбновитьДанныеИнформационнойБазы();
	Исключение
		
		ТекстСообщенияОбОшибке = НСтр(
		"ru = '(ПРГ) При обновлении информационной базы возникла ошибка:
		|
		|%ПодробноеПредставлениеОшибки
		|
		|Подробности см. в Журнале регистрации.'");
		
		ТекстСообщенияОбОшибке = СтрЗаменить(ТекстСообщенияОбОшибке, "%ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Сообщить(ТекстСообщенияОбОшибке); // Не нужно писать в журнал или в панель комментариев
			
		Ошибка = Истина;
			
	КонецПопытки;
	
	// Интерактивные действия после обработки данных
	Если Ошибка Тогда
		
		Состояние("");
		
		ТекстВопроса = НСтр("ru = '(ПРГ) Не выполнено обновление информационной базы! 
		|Завершить работу системы?'");
		Заголовок    = НСтр("ru = 'Ошибка при обновлении информационной базы'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецЕсли;
		
	Иначе
		
		Состояние(НСтр("ru = '(ПРГ) Обновление информационной базы выполнено успешно.'"));
				
	КонецЕсли;

КонецПроцедуры
 
Функция НеобходимоОбновлениеИнформационнойБазы()

	Возврат НеобходимоВыполнитьОбновление(ВернутьВерсиюПРГПодсистем(), ОбновлениеИнформационнойБазы.ВерсияИБ("ПРГ"));

КонецФункции // НеобходимоОбновлениеИнформационнойБазы()

Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) 
	
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
	
КонецФункции

//ВернутьВерсиюПРГПодсистем
//Обновляем версию каждый раз когда необходимо обновить данные ИБ
Функция ВернутьВерсиюПРГПодсистем() Экспорт 

	Возврат "1.0.0.8";

КонецФункции // ВернутьВерсиюПРГПодсистем()

// Выполнить неинтерактивное обновление данных ИБ.
//
// Результат:
//      Неопределено - обновление не выполнялось (не требуется)
//      Строка       - номер версии данных до обновления
//
Функция ОбновитьДанныеИнформационнойБазы() Экспорт

	ВерсияМетаданных = ВернутьВерсиюПРГПодсистем();
	ВерсияДанных =ОбновлениеИнформационнойБазы.ВерсияИБ("ПРГ");
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	 
	Если НЕ НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Изменился номер версии ПРГ подсистем: с ""%1"" на ""%2"". Будет выполнено обновление информационной базы.'"),
		ВерсияДанных, ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		Сообщение = НСтр("ru = '(ПРГ) Недостаточно прав для выполнения обновления. Обратитесь к системному администратору.'");
		ЗаписатьОшибку(Сообщение);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(ПРГ) Невозможно выполнить обновление информационной базы, так как к ней подключены другие сеансы.
				 |Обратитесь к системному администратору.
				 |
				 |Подробности ошибки:
				 |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибку(Сообщение);
		
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
	// Если для пользователей с полными правами применяется дата запрета изменения данных,
	// то отключим этот признак на время выполнения обновления
	ВосстановитьДатуЗапрета = ИзменитьПрименениеДатыЗапретаДляПолныхПрав(Ложь);
	
	Ошибка = Ложь;
	Попытка
		СписокОбработчиковОбновления = ОбработчикиОбновления();
		
		ВыполненныеОбработчики = ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления("ПРГ", ВерсияМетаданных,
			СписокОбработчиковОбновления);
	Исключение
		Ошибка = Истина;
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление информационной базы на версию ""%1"" завершилось с ошибками: 
				|%2'"), ВерсияМетаданных, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьОшибку(Сообщение);
	КонецПопытки;
	
	// Восстановим применение даты запрета изменения данных для пользователей с полными правами
	Если ВосстановитьДатуЗапрета Тогда
		ИзменитьПрименениеДатыЗапретаДляПолныхПрав(Истина);
	КонецЕсли; 
	
	// Отключение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);
	
	Если Ошибка Тогда
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновление информационной базы на версию ""%1"" выполнено успешно.'"), ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновления(
		ВерсияДанных, 
		ВерсияМетаданных, 
		ВыполненныеОбработчики, 
		Истина);
		
	Возврат ВерсияДанных;

КонецФункции

Функция ЕстьПраваНаОбновлениеИнформационнойБазы()
	
	Возврат ПравоДоступа("МонопольныйРежим", Метаданные) И РольДоступна("ПолныеПрава");
	
КонецФункции

// Для отключения даты запрета редактирования
//
Функция ИзменитьПрименениеДатыЗапретаДляПолныхПрав(ИспользоватьДатуЗапрета)

	// Если режим не используется, то ничего не требуется делать
	Если НЕ ИспользоватьДатуЗапрета
		И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Константы.ПрименятьДатуЗапретаДляПолныхПрав.Установить(ИспользоватьДатуЗапрета);
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ ХОДА ОБНОВЛЕНИЯ

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Обновление информационной базы'");
	
КонецФункции	

Процедура ЗаписатьИнформацию(Знач Текст)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ОбработчикиОбновления() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подсистема ПРГ
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия    	= "*";
	//Обработчик.Процедура 	= "БиблиотекаОбновленияИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы";
	
	// ПРГ Версия 1.0.0.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.0.0.2";
	Обработчик.Процедура    = "ПРГОбновлениеИнформационнойБазы.ПеренестиДатуПостакиВРеквизит";
	//Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы

	// ПРГ Версия 1.0.0.3 - Заполнить группу Справочники.ПРГ_Служебный.СлужебныеДивизионы
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.0.0.3";
	Обработчик.Процедура    = "ПРГОбновлениеИнформационнойБазы.ЗаполнитьГруппуСлужебногоСправочника";
	//Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы
	
	// ПРГ Версия 1.0.0.4 - Заполнить группу Справочники.ПРГ_Служебный.ПолучателиСообщенийОТехническихСбоях1С
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.0.0.4";
	Обработчик.Процедура    = "ПРГОбновлениеИнформационнойБазы.ЗаполнитьГруппуСлужебногоСправочникаПолучателиСообщенийОТехническихСбоях1С";
	//Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы

	// ПРГ Версия 1.0.0.5 - Заполнить группу Справочники.ПРГ_Служебный.СкладыNavision
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.0.0.5";
	Обработчик.Процедура    = "ПРГОбновлениеИнформационнойБазы.ЗаполнитьГруппуСлужебногоСправочникаСкладыNavision";
	//Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы

	// ПРГ Версия 1.0.0.6 - Заполнить группу Справочники.ПРГ_Служебный.СкладыОтгрузкиГПКопекеру
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.0.0.6";
	Обработчик.Процедура    = "ПРГОбновлениеИнформационнойБазы.ЗаполнитьГруппуСлужебногоСправочникаСкладыОтгрузкиГПКопекеру";
	//Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы

	// ПРГ Версия 1.0.0.7 - Заполнить реквизит Справочники.НСИ_Отделения.НеИзменятьДатуДоставкиПриИзмененииДатыДоставкиТЭК
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.0.0.7";
	Обработчик.Процедура    = "ПРГОбновлениеИнформационнойБазы.ЗаполнитьРеквизитПоУмолчаниюСправочники_НСИ_Отделения_НеИзменятьДатуДоставки";
	//Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы

	//{23.05.2016 Островерхий заявка №52749 
	// ПРГ Версия 1.0.0.8 - Заполнить реквизит Справочники.ДоговорыКонтрагентов.ПРГ_ОтсрочкаПоДоговору
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.0.0.8";
	Обработчик.Процедура    = "ПРГОбновлениеИнформационнойБазы.ЗаполнитьРеквизитПоУмолчаниюСправочники_ДоговорыКонтрагентов_ПРГ_ОтсрочкаПоДоговору";
	//Обработчик.Опциональный = Истина; //Вызывается явно при заполнении новой базы
	//23.05.2016 Островерхий} 
	
	Возврат Обработчики;
	
КонецФункции

Процедура ПеренестиДатуПостакиВРеквизит() Экспорт 

	//{24.11.2014 Островерхий 
	//Обрабатывает за 10 мин примерно 
	//24.11.2014 Островерхий} 
	
	////Переносим дату поставки для рекистра "Заказы поставщикам" из измерения в реквизит
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ 
	//	|	ЗаказыПоставщикам.Период,
	//	|	ЗаказыПоставщикам.Регистратор КАК Регистратор,
	//	|	ЗаказыПоставщикам.НомерСтроки,
	//	|	ЗаказыПоставщикам.Активность,
	//	|	ЗаказыПоставщикам.ВидДвижения,
	//	|	ЗаказыПоставщикам.ДоговорКонтрагента,
	//	|	ЗаказыПоставщикам.ЗаказПоставщику,
	//	|	ЗаказыПоставщикам.СтатусПартии,
	//	|	ЗаказыПоставщикам.Номенклатура,
	//	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры,
	//	|	ЗаказыПоставщикам.Цена,
	//	|	ЗаказыПоставщикам.ЕдиницаИзмерения,
	//	|	ЗаказыПоставщикам.СтавкаНДС,
	//	|	ЗаказыПоставщикам.УдалитьДатаПоставки КАК ДатаПоставки,
	//	|	ЗаказыПоставщикам.Количество,
	//	|	ЗаказыПоставщикам.СуммаВзаиморасчетов,
	//	|	ЗаказыПоставщикам.СуммаУпр,
	//	|	ЗаказыПоставщикам.УдалитьДатаПоставки
	//	|ИЗ
	//	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	//	|ГДЕ
	//	|	НЕ ЗаказыПоставщикам.УдалитьДатаПоставки = &ПустаяДата
	//	|ИТОГИ ПО
	//	|	Регистратор";

	//Запрос.УстановитьПараметр("ПустаяДата",'00010101');	
	//Результат = Запрос.Выполнить();

	//ВыборкаРегистратор = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	//Пока ВыборкаРегистратор.Следующий() Цикл

	//	НаборЗаписей = РегистрыНакопления.ЗаказыПоставщикам.СоздатьНаборЗаписей();
	//	
	//	НаборЗаписей.Отбор["Регистратор"].Использование = Истина;
	//	НаборЗаписей.Отбор["Регистратор"].Значение	  = ВыборкаРегистратор.Регистратор;
	//	НаборЗаписей.Отбор["Регистратор"].ВидСравнения  = ВидСравнения.Равно;
	//	НаборЗаписей.Прочитать();
	//	НаборЗаписей.Очистить();
	//	
	//	ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();

	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		
	//		Запись = НаборЗаписей.Добавить();
	//		ЗаполнитьЗначенияСвойств(Запись,ВыборкаДетальныеЗаписи);
	//		
	//	КонецЦикла;
	//	
	//	НаборЗаписей.Записать(Истина);
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГруппуСлужебногоСправочникаПолучателиСообщенийОТехническихСбоях1С() Экспорт 

	//Заполнить группу Справочники.ПРГ_Служебный.ПолучателиСообщенийОТехническихСбоях1С
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_Служебный.Ссылка
		|ИЗ
		|	Справочник.ПРГ_Служебный КАК ПРГ_Служебный
		|ГДЕ
		|	ПРГ_Служебный.Родитель = &Родитель";

	Запрос.УстановитьПараметр("Родитель", Справочники.ПРГ_Служебный.ПолучателиСообщенийОТехническихСбоях1С);

	РезультатПустой = Запрос.Выполнить().Пустой();

    Если РезультатПустой Тогда
		
		Попытка
		
			тНовыйОбъект = Справочники.ПРГ_Служебный.СоздатьЭлемент();	
			тНовыйОбъект.Родитель = Справочники.ПРГ_Служебный.ПолучателиСообщенийОТехническихСбоях1С;
			тНовыйОбъект.Объект = Справочники.ФизическиеЛица.НайтиПоНаименованию("Островерхий Евгений Викторович");
			тНовыйОбъект.Наименование = "Островерхий Евгений Викторович";
			тНовыйОбъект.Записать();	
			
			тНовыйОбъект = Справочники.ПРГ_Служебный.СоздатьЭлемент();	
			тНовыйОбъект.Родитель = Справочники.ПРГ_Служебный.ПолучателиСообщенийОТехническихСбоях1С;
			тНовыйОбъект.Объект = Справочники.ФизическиеЛица.НайтиПоНаименованию("Ожиганов Александр Алексеевич");
			тНовыйОбъект.Наименование = "Ожиганов Александр Алексеевич";
			тНовыйОбъект.Записать(); 
			
		Исключение
			
			Сообщить("Произошли ошибки при заполнении группы ПолучателиСообщенийОТехническихСбоях1С справочника ПРГ_Служебный",СтатусСообщения.ОченьВажное);
			
		КонецПопытки; 
	
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьГруппуСлужебногоСправочникаСкладыNavision() Экспорт 
	
	//Заполнить группу Справочники.ПРГ_Служебный.ГруппаСкладовNavision
	Попытка
		
		тНовыйОбъект = Справочники.ПРГ_Служебный.ГруппаСкладовNavision.ПолучитьОбъект();	
		тНовыйОбъект.Объект = Справочники.Склады.НайтиПоКоду("000000013");
		тНовыйОбъект.Записать();
		
	Исключение
		
		Сообщить("Произошли ошибки при заполнении ГруппаСкладовNavision справочника ПРГ_Служебный",СтатусСообщения.ОченьВажное);
		
	КонецПопытки; 
	
КонецПроцедуры

Процедура ЗаполнитьГруппуСлужебногоСправочникаСкладыОтгрузкиГПКопекеру() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_Служебный.Ссылка
		|ИЗ
		|	Справочник.ПРГ_Служебный КАК ПРГ_Служебный
		|ГДЕ
		|	ПРГ_Служебный.Родитель = &Родитель";

	Запрос.УстановитьПараметр("Родитель", Справочники.ПРГ_Служебный.СкладыОтгрузкиГПКопекеру);

	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Если НЕ РезультатПустой Тогда
		Возврат;	
	КонецЕсли;
	
	//Заполнить группу Справочники.ПРГ_Служебный.СкладыОтгрузкиГПКопекеру
	Попытка
		
		тНовыйОбъект = Справочники.ПРГ_Служебный.СоздатьЭлемент();
		тНовыйОбъект.Родитель = Справочники.ПРГ_Служебный.СкладыОтгрузкиГПКопекеру;
		тНовыйОбъект.Объект = Справочники.Склады.НайтиПоКоду("ПРГМФД");
		тНовыйОбъект.Записать();
		
		тНовыйОбъект = Справочники.ПРГ_Служебный.СоздатьЭлемент();
		тНовыйОбъект.Родитель = Справочники.ПРГ_Служебный.СкладыОтгрузкиГПКопекеру;
		тНовыйОбъект.Объект = Справочники.Склады.НайтиПоКоду("ПРГСПБФД");
		тНовыйОбъект.Записать();
		
	Исключение
		
		Сообщить("Произошли ошибки при заполнении СкладыОтгрузкиГПКопекеру справочника ПРГ_Служебный",СтатусСообщения.ОченьВажное);
		
	КонецПопытки; 
	
КонецПроцедуры

Процедура ЗаполнитьГруппуСлужебногоСправочника() Экспорт 

	//Заполнить группу Справочники.ПРГ_Служебный.СлужебныеДивизионы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_Служебный.Ссылка
		|ИЗ
		|	Справочник.ПРГ_Служебный КАК ПРГ_Служебный
		|ГДЕ
		|	ПРГ_Служебный.Родитель = &Родитель";

	Запрос.УстановитьПараметр("Родитель", Справочники.ПРГ_Служебный.СлужебныеДивизионы);

	РезультатПустой = Запрос.Выполнить().Пустой();

    Если РезультатПустой Тогда
		
		Попытка
		
			тНовыйОбъект = Справочники.ПРГ_Служебный.СоздатьЭлемент();	
			тНовыйОбъект.Родитель = Справочники.ПРГ_Служебный.СлужебныеДивизионы;
			тНовыйОбъект.Объект = Справочники.ПРГДивизионы.ФКК;
			тНовыйОбъект.Записать();	
			
			ДивизионСПЕЦ_ПРГ = Справочники.ПРГДивизионы.НайтиПоКоду("СПЕЦ_ПРГ");
			
			Если НЕ ДивизионСПЕЦ_ПРГ = Справочники.ПРГДивизионы.ПустаяСсылка() Тогда
			
				тНовыйОбъект = Справочники.ПРГ_Служебный.СоздатьЭлемент();	
				тНовыйОбъект.Родитель = Справочники.ПРГ_Служебный.СлужебныеДивизионы;
				тНовыйОбъект.Объект = ДивизионСПЕЦ_ПРГ;
				тНовыйОбъект.Записать();
			
			КонецЕсли; 
			
		Исключение
			
			Сообщить("Произошли ошибки при заполнении группы СлужебныеДивизионы справочника ПРГ_Служебный",СтатусСообщения.ОченьВажное);
			
		КонецПопытки; 
	
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитПоУмолчаниюСправочники_НСИ_Отделения_НеИзменятьДатуДоставки() Экспорт 

	//Заполнить группу Справочники.ПРГ_Служебный.СлужебныеДивизионы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НСИ_Отделения.Ссылка
		|ИЗ
		|	Справочник.НСИ_Отделения КАК НСИ_Отделения
		|ГДЕ
		|	НСИ_Отделения.Код = ""ПРГ""";


	Выборка = Запрос.Выполнить().Выбрать();

    Пока Выборка.Следующий() Цикл
		
		тОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		тОбъект.ОбменДанными.Загрузка = Истина;
		тОбъект.НеИзменятьДатуДоставкиПриИзмененииДатыДоставкиТЭК = Истина;
		тОбъект.Записать();
	
	КонецЦикла;  
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитПоУмолчаниюСправочники_ДоговорыКонтрагентов_ПРГ_ОтсрочкаПоДоговору() Экспорт 

	//Заполнить группу Справочники.ПРГ_Служебный.СлужебныеДивизионы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ДоговорыКонтрагентов.ДопустимоеЧислоДнейЗадолженности КАК ПРГ_ОтсрочкаПоДоговору
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.ДопустимоеЧислоДнейЗадолженности <> 0
		|	И ДоговорыКонтрагентов.ПРГ_ОтсрочкаПоДоговору = 0";


	Выборка = Запрос.Выполнить().Выбрать();

    Пока Выборка.Следующий() Цикл
		
		тОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		тОбъект.ОбменДанными.Загрузка = Истина;
		тОбъект.ПРГ_ОтсрочкаПоДоговору = Выборка.ПРГ_ОтсрочкаПоДоговору;
		тОбъект.Записать();
	
	КонецЦикла;  
		
КонецПроцедуры

