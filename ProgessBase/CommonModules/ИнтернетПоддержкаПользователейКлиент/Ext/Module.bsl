
///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-СЦЕНАРИИ

// Процедура запускает механизм.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма.
//	ДополнительныеПараметрыМеханизма (Структура) - дополнительные параметры
//
Процедура СтартоватьМеханизм(МестоЗапуска, ДополнительныеПараметрыМеханизма = Неопределено) Экспорт
	
	// Выполнение сценария интерент-поддержки.
	ВыполнитьСценарий(МестоЗапуска, ДополнительныеПараметрыМеханизма);
	
КонецПроцедуры

// Процедура запускает механизм (для запуска из меню).
//
Процедура СтартоватьМеханизмИзМеню() Экспорт
	
	// Выполнение сценария интерент-поддержки.
	ВыполнитьСценарий("handStart");
	
КонецПроцедуры

// Выполнение сценария.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма.
//	ДополнительныеПараметрыМеханизма (Структура) - дополнительные параметры
//
Процедура ВыполнитьСценарий(МестоЗапуска, ДополнительныеПараметрыМеханизма = Неопределено)
	
	Если МестоЗапуска = "systemStart" Тогда 
		Если Не ИнтернетПоддержкаПользователейВызовСервера.ЗапускатьМеханизмПриСтарте() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	// Проверка - зарегистрирована ли конфигурация в сервисе ИПП
	Если МестоЗапуска = "systemStart" ИЛИ МестоЗапуска = "handStart" Тогда
		ОшибкаОбращенияКВебСервису = Ложь;
		КонфигурацияЗарегистрирована = ИнтернетПоддержкаПользователейВызовСервера.КонфигурацияЗарегистрированаВСервисеИПП(
			ОшибкаОбращенияКВебСервису);
		
		Если ОшибкаОбращенияКВебСервису Тогда
			ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету");
			Возврат;
		ИначеЕсли НЕ КонфигурацияЗарегистрирована Тогда
			Предупреждение(НСтр("ru = 'Текущая конфигурация не зарегистрирована в сервисе интернет-поддержки пользователей.'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтветСервера = ЕстьДоступКВебCервису();
	
	Если ТипЗнч(ОтветСервера) = Тип("Строка") Тогда
		Если ОтветСервера = "0" Тогда 
			Возврат;
		КонецЕсли;
	Иначе 
		Если Не ОтветСервера Тогда 
			ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету");
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	// Если есть доступ к интернету, то снимаем флаг о не подключении.
	ИнтернетПоддержкаПользователейВызовСервера.УстановитьНастройкуПовторитьПопыткуПодключенияПриСтартеПрограммы(Истина);
	
	ТипОбработки = ОпределитьТипОбработки();
	
	ВерсияОбработки = ИнтернетПоддержкаПользователейВызовСервера.ПолучитьВерсиюОбработки();
	
	ПараметрыЗапроса		= Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", ТипОбработки, ?(ВерсияОбработки = Неопределено, 0, ВерсияОбработки)));
	
	// Получение команд с веб-сервиса.	
	ВыполнитьКомандыСВебСервера(ПараметрыЗапроса, МестоЗапуска, ДополнительныеПараметрыМеханизма);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ КОМАНД С ВЕБ-СЕРВИСА

// Процедура получает и выполняет команды с веб-сериса.
//
// Параметры:
//	ПараметрыЗапроса - Структура - параметры для веб-сервиса.
//	МестоЗапуска - Строка - место запуска процесса.
//
Процедура ВыполнитьКомандыСВебСервера(ПараметрыЗапроса, МестоЗапуска, ДополнительныеПараметрыМеханизма = Неопределено) Экспорт
	
	МассивСтруктурыКоманд = ПолучитьКомандыСВебСервера(ПараметрыЗапроса);
	
	Если МассивСтруктурыКоманд = Неопределено Тогда 
		ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету");
		Возврат;
	КонецЕсли;	
	
	Для каждого СтруктураКоманды из МассивСтруктурыКоманд Цикл 
		ВыполнитьКоманду(СтруктураКоманды, ПараметрыЗапроса, МестоЗапуска, ДополнительныеПараметрыМеханизма);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет отдельную команду, которая пришла с сервера.
//
// Параметры:
//	СтруктураКоманды - Структура - структура команды с сервера.
//	ПараметрыЗапроса - Структура - параметры передаваемого запроса к серверу.
//	МестоЗапуска - Строка - место запуска процесса.
//	
Процедура ВыполнитьКоманду(СтруктураКоманды, ПараметрыЗапроса, МестоЗапуска, ДополнительныеПараметрыМеханизма = Неопределено)
	
	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);
	
	Если ИмяКоманды = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = НРег(СокрЛП(ИмяКоманды));
	
	Если ИмяКоманды = "download" Тогда 
		ВыполнитьКомандуПоСкачиваниюОбработкиИнтернетПоддержки(СтруктураКоманды);
	ИначеЕсли ИмяКоманды = "launch" Тогда 
		ВыполнитьКомандуЗапускаОбработки(СтруктураКоманды, МестоЗапуска, ДополнительныеПараметрыМеханизма);
	ИначеЕсли ИмяКоманды = "system.halt" Тогда 
		ВыполнитьКомандуОстановкиМеханизма(СтруктураКоманды);
	КонецЕсли;	
	
КонецПроцедуры

// Выполняет команду по закачке файла обработки интернет-поддержки пользователей.
//
// Параметры:
//	СтруктураКоманды - Структура - структура команды.
//
Процедура ВыполнитьКомандуПоСкачиваниюОбработкиИнтернетПоддержки(СтруктураКоманды)
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	Если ПараметрыКоманды = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для каждого ПараметрКоманды из ПараметрыКоманды Цикл 
		
		УРЛОбработки = Неопределено;
		ПараметрКоманды.Свойство(ОпределитьТипОбработки(), УРЛОбработки);
		
		Если ПустаяСтрока(УРЛОбработки) Тогда
			Продолжить;
		КонецЕсли;
		
		Параметры = Новый Структура();
		Параметры.Вставить("ПутьДляСохранения"   , ПолучитьИмяВременногоФайла("epf"));
		Параметры.Вставить("ЗащищенноеСоединение", Истина);
		СтруктураСкачкиОбработки = СкачатьФайлНаКлиенте(УРЛОбработки, Параметры);
		
	КонецЦикла;
	
	// Проверка на скачивание файла.
	Если СтруктураСкачкиОбработки = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если Не СтруктураСкачкиОбработки.Статус Тогда 
		Возврат;
	КонецЕсли;	
	
	ДвоичныеДанныеОбработки	= ?(ПустаяСтрока(СтруктураСкачкиОбработки.Путь), Неопределено, Новый ДвоичныеДанные(СтруктураСкачкиОбработки.Путь));
	
	ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьФайлОбработкиВКонстанту(ДвоичныеДанныеОбработки);
	
КонецПроцедуры

// Выполняет команду по запуску обработки.
//
// Параметры:
//	СтруктураКоманды - Структура - структура команды.
//	МестоЗапуска - Строка - место запуска механизма.	
//
Процедура ВыполнитьКомандуЗапускаОбработки(СтруктураКоманды, МестоЗапуска, ДополнительныеПараметрыМеханизма = Неопределено)
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	СтруктураСкачкиУправляемойОбработки		= Неопределено;
	СтруктураСкачкиНеУправляемойОбработки   = Неопределено;
	
	Если ПараметрыКоманды = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	БизнесПроцесс = Неопределено;
	ИмяURI        = Неопределено;
	
	Для каждого ПараметрКоманды из ПараметрыКоманды Цикл 

		Если ПараметрКоманды.Свойство("bp") Тогда 
			БизнесПроцесс = ПараметрКоманды.bp;
		КонецЕсли;

		Если ПараметрКоманды.Свойство("nameURI") Тогда 
			ИмяURI = ПараметрКоманды.nameURI;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(БизнесПроцесс) или ПустаяСтрока(ИмяURI) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗапуститьОбработкуНаКлиенте(БизнесПроцесс, ИмяURI, МестоЗапуска, ДополнительныеПараметрыМеханизма); 
	
КонецПроцедуры

// Выполняет команду по остановке механизма "Интернет-поддержка пользователей".
//
//
// Параметры:
//	СтруктураКоманды - Структура - структура команды.
//
Процедура ВыполнитьКомандуОстановкиМеханизма(СтруктураКоманды)
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	СтруктураСкачкиУправляемойОбработки		= Неопределено;
	СтруктураСкачкиНеУправляемойОбработки   = Неопределено;
	
	Если ПараметрыКоманды = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	КодОшибки = Неопределено;   
	
	Для каждого ПараметрКоманды из ПараметрыКоманды Цикл 

		Если КодОшибки = Неопределено Тогда 
			ПараметрКоманды.Свойство("errorCode", КодОшибки);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если СокрЛП(Строка(КодОшибки)) <> "0" Тогда 
		ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету");
	КонецЕсли;	
	
	Если ПустаяСтрока(КодОшибки) Тогда 
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(КодОшибки);
	
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Общая интерфейсная функция для получения файла из Интернет по протоколу http(s)
// либо ftp и сохранения его во временное хранилище.
//
// Параметры:
// URL*           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// ПараметрыПолучения* - структура с ключами:
//         ПутьДляСохранения  - строка - путь на клиенте (включая имя файла), сохранения
//         Пользователь  - строка - пользователь от имени которого установлено соединение
//         Пароль        - строка - пароль пользователя от которого установлено соединение
//         Порт          - число  - порт сервера с которым установлено соединение
//         ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                  что соединение должно производиться через https
//         ПассивноеСоединение -  - Булево - для случая ftp загрузки флаг указывает,
//                                  что соединение должно пассивным (или активным)
//
// помеченные знаком '*' являются обязательными
//
// Возвращаемое значение:
// структура
// Статус - Булево - ключ присутствует в структуре всегда, значения
//                   Истина - вызов функции успешно завершен
//                   Ложь   - вызов функции завершен неудачно
// Путь - Строка - путь к файлу на клиенте, ключ используется только
//                 если статус Истина
// СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлНаКлиенте(знач URL,
							знач ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт,
			ЗащищенноеСоединение, ПассивноеСоединение;
	
	// Получаем параметры получения файла
	
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения",	"Клиент");
	НастройкаСохранения.Вставить("Путь",			ПутьДляСохранения);
	
	Результат = ПодготовитьПолучениеФайла(
						URL,
						Пользователь,
						Пароль,
						Порт,
						ЗащищенноеСоединение,
						ПассивноеСоединение,
						НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Запускает экземпляр обработки на клиенте.
//
// Параметры:
//	БизнесПроцесс - Строка - адрес веб-сервиса.
//	ИмяURI - Строка - простарнство имен.
//	МестоЗапуска - Строка - место запуска механизма.
//	
Процедура ЗапуститьОбработкуНаКлиенте(БизнесПроцесс, ИмяURI, МестоЗапуска, ДополнительныеПараметрыМеханизма = Неопределено) Экспорт
	
	ВнешняяОбработка = ИмяФормыОбработкиОбычногоПриложения();
	
	Если ВнешняяОбработка = Неопределено Тогда
		ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету");
		Возврат;
	КонецЕсли;
	
	ВнешняяОбработка.ИмяWSОпределения 	= БизнесПроцесс;
	ВнешняяОбработка.URIСервиса			= ИмяURI;
	ВнешняяОбработка.МестоЗапуска 		= МестоЗапуска;
	ВнешняяОбработка.Параметры          = ДополнительныеПараметрыМеханизма;
	
	НачальнаяФормаОбработки = ВнешняяОбработка.ПолучитьФорму("Стартовая");
	Если НачальнаяФормаОбработки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НачальнаяФормаОбработки.Открыть();
	
КонецПроцедуры

// Возвращает внешнюю обработку (для обычного режима).
//
// Возвращаемое значение:
//	Внешняя обработка или Неопределенно.
//
Функция ИмяФормыОбработкиОбычногоПриложения()
	
	ФайлОбработки = Константы.ФайлОбработкиИнтернетПоддержкиПользователей.Получить().Получить();
	Если ФайлОбработки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ИмяФайлаВнешнейОбработки = ПолучитьИмяВременногоФайла("epf");
		ФайлОбработки.Записать(ИмяФайлаВнешнейОбработки);
		ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайлаВнешнейОбработки);
		
		Возврат ВнешняяОбработка;
	Исключение         
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интернет-поддержка пользователей: Ошибка'"), УровеньЖурналаРегистрации.Ошибка, , ОписаниеОшибки());
		
		Возврат Неопределено;
	КонецПопытки;
	                                                                             
КонецФункции	

// Возвращает тип обработки в зависимости от вида клиента.
//
// Возвращаемое значение - Строка - тип обработки: управляемая или обычная.
//
Функция ОпределитьТипОбработки()
	
	Возврат "unmanaged";
	
КонецФункции	

// Провряет наличие доступа к веб-сервису.
//
// Возвращаемое значение:
//	Истина - есть доступ к веб-сервиу, Ложь - нет доступа.
//
Функция ЕстьДоступКВебCервису()
	
	Состояние(НСтр("ru = 'Ожидание ответа с веб-сервера Web-ИТС'"));
	
	Попытка
		
		ИмяWSОпределения = ИнтернетПоддержкаПользователейКлиентСервер.ИмяWSОпределения();
		ПараметрыWSОпределений = Новый Массив;
		ПараметрыWSОпределений.Добавить(ИмяWSОпределения);
		ПараметрыWSОпределений.Добавить(Неопределено); // Имя пользователя
		ПараметрыWSОпределений.Добавить(Неопределено); // Пароль
		
		ТаймаутПодключения = 0;
		ИспользоватьТаймауты = ИнтернетПоддержкаПользователейВызовСервера.ИспользоватьТаймаутыПриПодключении(ТаймаутПодключения);
		Если ИспользоватьТаймауты Тогда
			ПараметрыWSОпределений.Добавить(ТаймаутПодключения);
		КонецЕсли;
		
		ОпределениеWS = Новый (Тип("WSОпределения"), ПараметрыWSОпределений);
		
		ИмяURIСервиса    = ИнтернетПоддержкаПользователейКлиентСервер.ИмяURIСервиса();
		Сервис           = ОпределениеWS.Сервисы.Получить(0);
		ИмяСервиса       = Сервис.Имя;
		ТочкаПодключения = Сервис.ТочкиПодключения.Получить(0).Имя;
		
		ПараметрыКлиентаWS = Новый Массив;
		ПараметрыКлиентаWS.Добавить(ОпределениеWS);
		ПараметрыКлиентаWS.Добавить(ИмяURIСервиса);
		ПараметрыКлиентаWS.Добавить(ИмяСервиса);
		ПараметрыКлиентаWS.Добавить(ТочкаПодключения);
		
		Если ИспользоватьТаймауты Тогда
			ПараметрыКлиентаWS.Добавить(ТаймаутПодключения);
		КонецЕсли;
		
		КлиентWS = Новый (Тип("WSПрокси"), ПараметрыКлиентаWS);
		
		// Выполнение метода "isReady" WEB-Сервиса.
		ОтветСервера = КлиентWS.isReady();
		
		Состояние("");
		
		Если НРег(СокрЛП(ОтветСервера)) = "ready" Тогда
			Возврат Истина;
		Иначе
			Если ТипЗнч(ОтветСервера) = Тип("ОбъектXDTO") Тогда
				Возврат ВыполнитьКомандуПроверкиДоступностиСервиса(ОтветСервера);
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Состояние("");
		ЗаписатьОшибкуВЖурналРегистрации(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции	

// Проверяет открытие или неоткрытие формы.
//
Функция ВыполнитьКомандуПроверкиДоступностиСервиса(ОтветСервера)
	
	Для каждого КомандаСервера из ОтветСервера.commands.command Цикл 
		Если НРег(СокрЛП(КомандаСервера.name)) = "system.halt" тогда
			Для каждого Параметр из КомандаСервера.parameters.parameter Цикл 
				Если НРег(СокрЛП(Параметр.name)) = "errorcode" Тогда 
					Если СокрЛП(Параметр.value) = "0" Тогда 
						Возврат "0";
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

// Получает команды с веб-сервиса.
//
// Параметры:
//	ДополнительныеПараметры - Струткура - дополнительные параметры для передачи веб-сервису.
//
Функция ПолучитьКомандыСВебСервера(ДополнительныеПараметры)
	
	Попытка
		
		Состояние(НСтр("ru = 'Ожидание ответа с веб-сервера Web-ИТС'"));
		
		ИмяWSОпределения	= ИнтернетПоддержкаПользователейКлиентСервер.ИмяWSОпределения();
	    ИмяURIСервиса		= ИнтернетПоддержкаПользователейКлиентСервер.ИмяURIСервиса();
		
		ОпределениеWS 	= Новый WSОпределения(ИмяWSОпределения);
		
		Сервис				= ОпределениеWS.Сервисы.Получить(0);
		ИмяСервиса			= Сервис.Имя;
		ТочкаПодключения	= Сервис.ТочкиПодключения.Получить(0).Имя;
		
		ВС = Новый WSПрокси(ОпределениеWS, ИмяURIСервиса, ИмяСервиса, ТочкаПодключения);
		
		ТипОтвета		= ОпределениеWS.ФабрикаXDTO.Тип(ИмяURIСервиса,	"ProcessResponseType");
		ОтветСервера	= ОпределениеWS.ФабрикаXDTO.Создать(ТипОтвета);

		ТипЗапроса 				= ОпределениеWS.ФабрикаXDTO.Тип(ИмяURIСервиса,	"Parameters");
		ПараметрыЗапроса 		= ОпределениеWS.ФабрикаXDTO.Создать(ТипЗапроса);
		
		// Если имеются передаваемые параметры, то добавляем их.
		Если ДополнительныеПараметры <> Неопределено Тогда 
			ДобавитьПараметрыКЗапросу(ОпределениеWS, ПараметрыЗапроса, ДополнительныеПараметры, 0);
		КонецЕсли;
		
		// Выполнение метода "process" WEB-Сервиса.
		ОтветСервера = ВС.process(ПараметрыЗапроса);
		Состояние("");
		
	Исключение
		Состояние("");
		ИмяСобытия	= НСтр("ru = 'Интернет-поддержка пользователей: Ошибка'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;	
	
	МассивСтруктурыКоманд = СтруктурироватьОтветСервера(ОтветСервера);
	
	Возврат МассивСтруктурыКоманд;
	
КонецФункции

// Добавляет из структуры параметры в запрос.
//
// Парамтеры:
//	ОпределениеWS - WSОпределения - определение веб-ссылки веб-сервиса.
//	ПараметрыЗапроса - Строка -  уже сформированные параметры.
//	СписокПараметров - ОбъектXDTO - список значений параметров.
//	КоличествоПараметров - Число -  количество уже инициализированных параметров.
//
Процедура ДобавитьПараметрыКЗапросу(ОпределениеWS, ПараметрыЗапроса, СписокПараметров, КоличествоПараметров)
	
	Для каждого ПараметрПередачи из СписокПараметров Цикл 
		
		// Определение объекта параметра (Объект XDTO).
		ТипПараметр = ОпределениеWS.ФабрикаXDTO.Тип(ИнтернетПоддержкаПользователейКлиентСервер.ИмяURIСервиса(),	"Parameter");
		Параметр 	= ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);
		
		Параметр.name 		= СокрЛП(ПараметрПередачи.Имя);
		Параметр.value		= СокрЛП(ПараметрПередачи.Значение);
		Параметр.index		= КоличествоПараметров;
		
		ПараметрыЗапроса.parameter.Добавить(Параметр);
		
		КоличествоПараметров = КоличествоПараметров + 1;
		
	КонецЦикла;
	
КонецПроцедуры	

// Производит структурирование всех команд с веб-сервиса.
//
// Параметры:
//	ОтветСервера - ОбъектXDTO - команды от веб-сервиса.
//
// Возвращаемое значение - Массив или Неопределенно - массив структур команд.
//
Функция СтруктурироватьОтветСервера(ОтветСервера)
	
	МассивОтвета = Новый Массив;
	
	Для каждого КомандаСервера из ОтветСервера.command Цикл 
		
		СтруктураКоманды = Неопределено;
		
		Если НРег(СокрЛП(КомандаСервера.name)) = "download" тогда
			СтруктураКоманды = СтруктурироватьЗаказчкуФайла(КомандаСервера);
		ИначеЕсли НРег(СокрЛП(КомандаСервера.name)) = "launch" тогда
			СтруктураКоманды = СтруктурироватьЗапускОбработки(КомандаСервера);
		ИначеЕсли НРег(СокрЛП(КомандаСервера.name)) = "system.halt" тогда
			СтруктураКоманды = СтруктурироватьОстановкуМеханизма(КомандаСервера);	
		КонецЕсли;	
		
		Если СтруктураКоманды <> Неопределено Тогда 
			МассивОтвета.Добавить(СтруктураКоманды);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОтвета.Количество() > 0 Тогда 
		Возврат	МассивОтвета;
	Иначе
		Возврат	Неопределено;
	КонецЕсли;
	
КонецФункции

// Переводит команду и её параметры из "ОбъектаXDTO" в тип "Структура".
//
// Параметры:
//	КомандаСервера - объектXDTO - содержащий команды и её параметра, пришедшие с сервера.
//
// Возвращаемое значение:
//	СтруктураКоманды - Структура - структура команд и её параметров.
//
Функция СтруктурироватьЗаказчкуФайла(КомандаСервера)
	
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	МассивПараметров = Новый Массив;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл 
		
		СтруктураПараметра = Неопределено;
		
		Если НРег(СокрЛП(Параметр.name)) = "managed" Тогда 
			СтруктураПараметра = Новый Структура("managed", СокрЛП(Параметр.value));
		ИначеЕсли НРег(СокрЛП(Параметр.name)) = "unmanaged" Тогда 
			СтруктураПараметра = Новый Структура("unmanaged", СокрЛП(Параметр.value));
		КонецЕсли;
		
		Если СтруктураПараметра <> Неопределено Тогда 
			МассивПараметров.Добавить(СтруктураПараметра);					
		КонецЕсли;	
		
	КонецЦикла;
	
	СтруктураКоманды.Вставить("Параметры", 	МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name); 
	
	Возврат СтруктураКоманды;
	
КонецФункции

// Переводит команду и её параметры из "ОбъектаXDTO" в тип "Структура".
//
// Параметры:
//	КомандаСервера - объектXDTO, содержащий команды и её параметра, пришедшие с сервера.
//
// Возвращаемое значение:
//	СтруктураКоманды - Структура - структура команд и её параметров.
//
Функция СтруктурироватьЗапускОбработки(КомандаСервера)
	
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	МассивПараметров = Новый Массив;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл 
		
		СтруктураПараметра = Неопределено;
		
		Если НРег(СокрЛП(Параметр.name)) = "bp" Тогда 
			СтруктураПараметра = Новый Структура("bp", СокрЛП(Параметр.value));
			МассивПараметров.Добавить(СтруктураПараметра);					
		ИначеЕсли НРег(СокрЛП(Параметр.name)) = "nameuri" Тогда 
			СтруктураПараметра = Новый Структура("nameURI", СокрЛП(Параметр.value));
			МассивПараметров.Добавить(СтруктураПараметра);					
		КонецЕсли;
		
		Если СтруктураПараметра <> Неопределено Тогда 
			МассивПараметров.Добавить(СтруктураПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураКоманды.Вставить("Параметры", 	МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name); 
	
	Возврат СтруктураКоманды;
	
КонецФункции	

// Останваливает работу механизма "Интернет-поддержки пользователей".
//
// Параметры:
//	КомандаСервера - ОбъектXDTO, содержащий команды и её параметра, пришедшие с сервера.
//
// Возвращаемое значение:
//	СтруктураКоманды - Структура - структура команд и её параметров.
//
Функция СтруктурироватьОстановкуМеханизма(КомандаСервера)
	СтруктураКоманды = Новый Структура;
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	МассивПараметров = Новый Массив;
	
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл 
		
		СтруктураПараметра = Неопределено;
		
		Если НРег(СокрЛП(Параметр.name)) = "errorcode" Тогда 
			СтруктураПараметра = Новый Структура("errorCode", СокрЛП(Параметр.value));
			МассивПараметров.Добавить(СтруктураПараметра);					
		КонецЕсли;
		
		Если СтруктураПараметра <> Неопределено Тогда 
			МассивПараметров.Добавить(СтруктураПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураКоманды.Вставить("Параметры", 	МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name); 
	
	Возврат СтруктураКоманды;
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// КЛИЕНТСКИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ВЕБ-СЕРВИСОМ ИПП

Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаДоступаКВебСервису = Ложь) Экспорт
	
	Возврат ИнтернетПоддержкаПользователейВызовСервера.КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаДоступаКВебСервису);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАГРУЗКЕ ФАЙЛОВ ИЗ ИНТЕРНЕТА

// Функция для получения файла из интернета.
//
// Параметры:
// URL           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// Пользователь  - строка - пользователь от имени которого установлено соединение
// Пароль        - строка - пароль пользователя от которого установлено соединение
// Порт          - число  - порт сервера с которым установлено соединение
// ЗащищенноеПассивноеСоединение
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла
//                 ключи:
//                 МестоХранения - строка - может содержать 
//                        "Клиент" - клиент,
//                        "Сервер" - сервер,
//                        "ВременноеХранилище" - временное хранилище
//                 Путь - строка (необязательный параметр) - 
//                        путь к каталогу на клиенте либо на сервере либо адрес во временном хранилище
//                        если не задано будет сгенерировано автоматически
//
// Возвращаемое значение:
// структура
// успех  - булево - успех или неудача операции
// строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке
//
Функция ПодготовитьПолучениеФайла(	знач URL,
									знач Пользователь			= Неопределено,
									знач Пароль					= Неопределено,
									знач Порт					= Неопределено,
									знач ЗащищенноеСоединение	= Ложь,
									знач ПассивноеСоединение	= Ложь,
									знач НастройкаСохранения) Экспорт
	
	НастройкаСоединения = Новый Соответствие;
	НастройкаСоединения.Вставить("Пользователь",	Пользователь);
	НастройкаСоединения.Вставить("Пароль",			Пароль);
	НастройкаСоединения.Вставить("Порт",			Порт);
	
	Протокол = РазделитьURL(URL).Протокол;
	
	Если Протокол = "ftp" Тогда
		НастройкаСоединения.Вставить("ПассивноеСоединение", ПассивноеСоединение);
	Иначе
		НастройкаСоединения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	КонецЕсли;
		
	НастройкаПроксиСервера = ПолучитьПустыеНастройкиПроксиСервера();
	
	Результат = ПолучитьФайлИзИнтернет(URL, НастройкаСохранения, НастройкаСоединения, НастройкаПроксиСервера);
	
	Возврат Результат;
	
КонецФункции

// Общая интерфейсная функция для получения файла из Интернет по протоколу http(s)
// либо ftp и сохранения его во временное хранилище.
//
// Параметры:
// ПутьДляСохранения  - строка - путь на сервере (включая имя файла), для сохранения скачанного файла
// URL           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// Пользователь  - строка - пользователь от имени которого установлено соединение
// Пароль        - строка - пароль пользователя от которого установлено соединение
// Порт          - число  - порт сервера с которым установлено соединение
// ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                 что соединение должно производиться через https
// ПассивноеСоединение -  - Булево - для случая ftp загрузки флаг указывает,
//                 что соединение должно пассивным (или активным)
//
// Возвращаемое значение:
// структура
// Статус - Булево - ключ присутствует в структуре всегда, значения
//                   Истина - вызов функции успешно завершен
//                   Ложь   - вызов функции завершен неудачно
// Путь - Строка - путь к файлу на сервере, ключ используется только
//                 если статус Истина
// СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлНаСервере(знач URL,
                             знач ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт,
	      ЗащищенноеСоединение, ПассивноеСоединение;
	
	// Получаем параметры получения файла
	
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "Сервер");
	НастройкаСохранения.Вставить("Путь", ПутьДляСохранения);
	
	Результат = ПодготовитьПолучениеФайла(
	                 URL,
	                 Пользователь,
	                 Пароль,
	                 Порт,
	                 ЗащищенноеСоединение,
	                 ПассивноеСоединение,
	                 НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Общая интерфейсная функция для получения файла из Интернет по протоколу http(s)
// либо ftp и сохранения его во временное хранилище.
//
// Параметры:
// URL           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// Пользователь  - строка - пользователь от имени которого установлено соединение
// Пароль        - строка - пароль пользователя от которого установлено соединение
// Порт          - число  - порт сервера с которым установлено соединение
// ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                          что соединение должно производиться через https
// ПассивноеСоединение -  - Булево - для случая ftp загрузки флаг указывает,
//                          что соединение должно пассивным (или активным)
//
// Возвращаемое значение:
// структура
// Статус - Булево - ключ присутствует в структуре всегда, значения
//                   Истина - вызов функции успешно завершен
//                   Ложь   - вызов функции завершен неудачно
// Путь - Строка - путь к файлу во временном хранилище,
//                 ключ используется только если статус Истина
// СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлВоВременноеХранилище(знач URL,
                                        знач ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт,
	      ЗащищенноеСоединение, ПассивноеСоединение;
	// Получаем параметры получения файла
	
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "ВременноеХранилище");
	
	Результат = ПодготовитьПолучениеФайла(
	                 URL,
	                 Пользователь,
	                 Пароль,
	                 Порт,
	                 ЗащищенноеСоединение,
	                 ПассивноеСоединение,
	                 НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Записывает двоичные данные в файл, хранящийся во временном хранилище
//
// Параметры:
// АдресВоВременномХранилище - строка - адрес двоичных данных файла 
//                 во временном хранилище
// ИмяФайла      - строка - путь по которому файл необходимо сохранить
//               на сервере
//
Функция СохранитьФайлИзВременногоХранилищаНаСервере(АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ДанныеФайла.Записать(ИмяФайла);
	
	Возврат Истина;
	
КонецФункции

// Получает имя временного файла вызовом одноименной системной функции на сервере
//
Функция ПолучитьИмяВременногоФайлаНаСервере() Экспорт

	Возврат ПолучитьИмяВременногоФайла();

КонецФункции

// Возвращает параметры настройки прокси сервера на стороне сервера 1С:Предприятие
//
Процедура СохранитьНастройкиПроксиНаСервере1СПредприятие(знач Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
КонецПроцедуры

// Возвращает настройку прокси сервера для доступа к интернет со стороны
// клиента по конкретному пользователю
Функция ПолучитьНастройкуПроксиСервера() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Записывает событие-ошибку в журнал регистрации. Имя события
// "Получение файлов из Интернета".
// Параметры
//  СообщениеОбОшибке - строка сообщение об ошибке
// 
Процедура ЗаписатьОшибкуВЖурналРегистрации(знач СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации("Получение файлов из Интернета", УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
	
КонецПроцедуры

// Функция для получения файла из интернета.
//
// Параметры:
// URL - строка - url файла в формате: [Протокол://]<Сервер>/<Путь к файлу на сервере>
//
// НастройкаСоединения - Соответствие -
//		ЗащищенноеСоединение* - булево - соединение защищенное
//		ПассивноеСоединение*  - булево - соединение защищенное
//		Пользователь - строка - пользователь от имени которого установлено соединение
//		Пароль       - строка - пароль пользователя от которого установлено соединение
//		Порт         - число  - порт сервера с которым установлено соединение
//		* - взаимоисключающие ключи
//
// НастройкиПрокси - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла
//		МестоХранения - строка - может содержать 
//			"Клиент" - клиент,
//			"Сервер" - сервер,
//			"ВременноеХранилище" - временное хранилище
//		Путь - строка (необязательный параметр) - путь к каталогу на клиенте либо на сервере, 
//			либо адрес во временном хранилище,  если не задано будет сгенерировано автоматически
//
// Возвращаемое значение:
// структура
// успех  - булево - успех или неудача операции
// строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке
//
Функция ПолучитьФайлИзИнтернет(знач URL,
                               знач НастройкаСохранения,
                               знач НастройкаСоединения = Неопределено,
                               знач НастройкиПрокси = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ИмяСервера, ИмяПользователя, Пароль, Порт,
	      ЗащищенноеСоединение,ПассивноеСоединение,
	      ПустьКФайлуНаСервере, Протокол;
	
	URLРазделенный = РазделитьURL(URL);
	
	ИмяСервера           = URLРазделенный.ИмяСервера;
	ПустьКФайлуНаСервере = URLРазделенный.ПустьКФайлуНаСервере;
	Протокол             = ?(URLРазделенный.Протокол=Неопределено, "", URLРазделенный.Протокол);
	
	ЗащищенноеСоединение = НастройкаСоединения.Получить("ЗащищенноеСоединение");
	ПассивноеСоединение  = НастройкаСоединения.Получить("ПассивноеСоединение");
	
	ИмяПользователя      = НастройкаСоединения.Получить("Пользователь");
	ПарольПользователя   = НастройкаСоединения.Получить("Пароль");
	Порт                 = НастройкаСоединения.Получить("Порт");
	
	Если Не ЗначениеЗаполнено(URLРазделенный.Протокол) Тогда
		Если ЗащищенноеСоединение <> Неопределено Тогда
			Если ЗащищенноеСоединение Тогда
				Протокол = "https";
			Иначе
				Протокол = "http";
			КонецЕсли;
		ИначеЕсли ПассивноеСоединение <> Неопределено Тогда
			Если ПассивноеСоединение Тогда
				Протокол = "ftp";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Протокол = ?(ЗначениеЗаполнено(Протокол), Протокол, "http");
	
	НастройкиПрокси = ?(НастройкиПрокси = Неопределено, ПолучитьПустыеНастройкиПроксиСервера(), НастройкиПрокси);
	Прокси = СформироватьПрокси(НастройкиПрокси, Протокол);
	
	Если Протокол = "ftp" Тогда
		Попытка
			Соединение = Новый FTPСоединение(ИмяСервера, Порт, ИмяПользователя, ПарольПользователя, Прокси, ПассивноеСоединение);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СообщениеОбОшибке = НСтр("ru = 'Ошибка при создании FTP-соединения с сервером %1:'") + Символы.ПС + "%2";
			ЗаписатьОшибкуВЖурналРегистрации(
				ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			СообщениеОбОшибке = ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
		КонецПопытки;
	Иначе
		Попытка
			Соединение = Новый HTTPСоединение(ИмяСервера, Порт, ИмяПользователя, ПарольПользователя, Прокси, ЗащищенноеСоединение);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СообщениеОбОшибке = НСтр("ru = 'Ошибка при создании HTTP-соединения с сервером %1:'") + Символы.ПС + "%2";
			ЗаписатьОшибкуВЖурналРегистрации(
				ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			СообщениеОбОшибке = ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если НастройкаСохранения["Путь"] <> Неопределено Тогда
		ПутьДляСохранения = НастройкаСохранения["Путь"];
	Иначе
		ПутьДляСохранения = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	Попытка
		Соединение.Получить(ПустьКФайлуНаСервере, ПутьДляСохранения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщениеОбОшибке = НСтр("ru = 'Ошибка при получении файла с сервера %1:'") + Символы.ПС + "%2";
		ЗаписатьОшибкуВЖурналРегистрации(
			ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		СообщениеОбОшибке = ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяСервера, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат СформироватьРезультат(Ложь, СообщениеОбОшибке);
	КонецПопытки;
	
	// Если сохраняем файл в соответствии с настройкой 
	Если НастройкаСохранения["МестоХранения"] = "ВременноеХранилище" Тогда
		КлючУникальности = Новый УникальныйИдентификатор;
		Адрес = ПоместитьВоВременноеХранилище (ПутьДляСохранения, КлючУникальности);
		Возврат СформироватьРезультат(Истина, Адрес);
	ИначеЕсли НастройкаСохранения["МестоХранения"] = "Клиент"
	      ИЛИ НастройкаСохранения["МестоХранения"] = "Сервер" Тогда
		Возврат СформироватьРезультат(Истина, ПутьДляСохранения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
// 
// НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
// Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https", "ftp"
// 
Функция СформироватьПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
			// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
			// Ручные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер	
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Разделяем URL по составным частям (протокол, сервер и путь)
// Параметры:
// URL           - строка - правильный url к ресурсу в Интернет
//
// Возвращаемое значение:
// структура с полями:
// протокол   - строка - протокол доступа к ресурсу
// ИмяСервера - строка - сервер на котором располагается ресурс
// ПустьКФайлуНаСервере - строка - пусть к файлу на сервере
//
Функция РазделитьURL(знач URL) Экспорт
	
	Результат = Новый Структура;

	// протокол по умолчанию
	Протокол = "http";
	
	URL = СокрЛП(URL);
	
	Если Лев(URL, 5) = "ftp://" Тогда
		URL = Прав(URL, СтрДлина(URL) - 7);
	КонецЕсли;
	
	Если Лев(URL, 7) = "http://" Тогда
		URL = Прав(URL, СтрДлина(URL) - 7);
		Протокол = "http";
	КонецЕсли;
	
	Если Лев(URL, 8) = "https://" Тогда
		URL = Прав(URL, СтрДлина(URL) - 8);
		Протокол = "https";
	КонецЕсли;

	Индекс = 1;
	ИмяСервера = "";
	
	Пока Индекс < СтрДлина(URL) Цикл
		_Символ = Сред(URL, Индекс, 1);
		Если _Символ = "/" Тогда
			Прервать;
		КонецЕсли;
		ИмяСервера = ИмяСервера + _Символ;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПустьКФайлу = Прав(URL, СтрДлина(URL) - Индекс);
	
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("ПустьКФайлуНаСервере", ПустьКФайлу);
	Результат.Вставить("Протокол", Протокол);
	
	Возврат Результат;
	
КонецФункции

// Функция, заполняющая структуру по параметрам.
//
// Параметры:
// УспехОперации - булево - успех или неуспех операции
// СообщениеПуть - строка - 
//
// Возвращаемое значение - структура:
//          поле успех - булево
//          поле путь  - строка
//
Функция СформироватьРезультат(знач Статус, знач СообщениеПуть)
	
	Результат = Новый Структура("Статус");
	
	Результат.Статус = Статус;

	Если Статус Тогда
		Результат.Вставить("Путь", СообщениеПуть);
	Иначе
		Результат.Вставить("СообщениеОбОшибке", СообщениеПуть);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает пустые настройки прокси-сервера, соответствующие не использованию прокси-сервера
//
// Возвращаемое значение - структура:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
//
Функция ПолучитьПустыеНастройкиПроксиСервера() Экспорт
	
	НастройкаПроксиСервера = Новый Соответствие;
	НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Ложь);
	НастройкаПроксиСервера.Вставить("Пользователь", "");
	НастройкаПроксиСервера.Вставить("Пароль", "");
	НастройкаПроксиСервера.Вставить("Порт", "");
	НастройкаПроксиСервера.Вставить("Сервер", "");
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
	НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Ложь);
	Возврат НастройкаПроксиСервера;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕКТРОННОГО ДОКУМЕНТООБОРОТА

// Запуск механизма работы с сервисом оператора ЭДО
// Параметры
// СертификатЭЦП - сертификат ЭЦП
// Организация - организация, для которой получается сертификат
// ВариантБизнесПроцесса - параметр, определяющий какую форму нужно открыть
//                         параметр может принимать два значения
//                         "registrationED" - запуск получения (регистрации) нового идентификатора
//                         "privateED"      - работа с личным кабинетом
// ИдентификаторОрганизации - идентификатор организации в системе ЭДО;
// ПарольСертификатаЭЦП (Строка, Неопределено): пароль используемого сертификата
// УникальныйИдентификаторФормы (УникальныйИдентификатор) - идентификатор формы,
//	из которой был вызван метод
//
Процедура СтартоватьМеханизмРаботыСОператоромЭДО(
	СертификатЭЦП,
	Организация,
	Знач ВариантБизнесПроцесса,
	ИдентификаторОрганизации = "",
	ПарольСертификатаЭЦП = Неопределено,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Если ВариантБизнесПроцесса = "taxcomGetID" Тогда
		ВариантБизнесПроцесса = "registrationED";
	ИначеЕсли ВариантБизнесПроцесса = "taxcomPrivat" Тогда
		ВариантБизнесПроцесса = "privateED";
	КонецЕсли;
	
	// Проверка заполнения необходимых полей
	ТекстСообщения = "";
	КоличествоОшибок = 0;
	Если НЕ ЗначениеЗаполнено(СертификатЭЦП) Тогда
		ТекстОшибки = НСтр("ru = '""Сертификат""'");
		КоличествоОшибок = КоличествоОшибок + 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки + НСтр("ru = ' и '");
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + НСтр("ru = '""Организация""'");
		КоличествоОшибок = КоличествоОшибок + 1;
	КонецЕсли;
	
	// Значение параметра ВариантБизнесПроцесса подставляется программно
	// проверка этого параметра не нужна
	
	Если КоличествоОшибок > 0 Тогда
		Если КоличествоОшибок = 1 Тогда
			ДопТекст = НСтр("ru = 'Пожалуйста, заполните поле '");
		Иначе
			ДопТекст = НСтр("ru = 'Пожалуйста, заполните поля '");
		КонецЕсли;
		ТекстСообщения = ДопТекст + ТекстОшибки;
		
		Если ВариантБизнесПроцесса = "registrationED" Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru = ' до получения уникального идентификатора участника обмена ЭД'");
		ИначеЕсли ВариантБизнесПроцесса = "privateED" Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru = ' до перехода в личный кабинет'");
		КонецЕсли;
		
		Вопрос(ТекстСообщения, РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	// Запуск механизма
	Если ВариантБизнесПроцесса = "registrationED" Тогда
		Если ПустаяСтрока(ИдентификаторОрганизации) Тогда
			ТекстОповещенияПользователя = 
			НСтр("ru = 'Получение уникального идентификатора участника обмена ЭД будет доступно
			           |после подключения к сервису интернет-поддержки пользователей и проверки
					   |подлинности владельца, указанного в соглашении сертификата. Продолжить?'");
		Иначе
			ТекстОповещенияПользователя =
			НСтр("ru = 'Добавление нового сертификата в соглашение будет выполнено
					   |после подключения к сервису интернет-поддержки пользователей и проверки
					   |подлинности владельца указанного в соглашении сертификата абонента. Продолжить?'");
		КонецЕсли;
	ИначеЕсли ВариантБизнесПроцесса = "privateED" Тогда
		ТекстОповещенияПользователя = 
		НСтр("ru = 'Вход в личный кабинет участника обмена ЭД будет доступен
		           |после подключения к сервису интернет-поддержки пользователей и проверки
				   |подлинности владельца, указанного в соглашении сертификата. Продолжить?'");
	Иначе
		ТекстОповещенияПользователя = 
		НСтр("ru = 'Ошибка встраивания механизма ИПП.'");
		Вопрос(ТекстОповещенияПользователя, РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	Если Вопрос(ТекстОповещенияПользователя, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтартовыхПараметровЭДО = Новый Структура;
	СтруктураСтартовыхПараметровЭДО.Вставить("IDCertificateED"   , ПоместитьВоВременноеХранилище(СертификатЭЦП));
	СтруктураСтартовыхПараметровЭДО.Вставить("IDOrganizationED"  , ПоместитьВоВременноеХранилище(Организация));
	СтруктураСтартовыхПараметровЭДО.Вставить("variantBPED"       , ПоместитьВоВременноеХранилище(ВариантБизнесПроцесса));
	СтруктураСтартовыхПараметровЭДО.Вставить("identifierTaxcomED", ПоместитьВоВременноеХранилище(ИдентификаторОрганизации));
	ИнтернетПоддержкаПользователейВызовСервера.СохранитьСтартовыеПараметры(СтруктураСтартовыхПараметровЭДО, "taxcomStart");
	
	ДополнительныеПараметрыМеханизма = Новый Структура;
	
	Если УникальныйИдентификаторФормы <> Неопределено Тогда
		ДополнительныеПараметрыМеханизма.Вставить("IDParentForm", УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдентификаторОрганизации) И ВариантБизнесПроцесса = "registrationED" Тогда
		ДополнительныеПараметрыМеханизма.Вставить("ToAddCert", Истина);
	КонецЕсли;
	
	Если ПарольСертификатаЭЦП <> Неопределено Тогда
		ДополнительныеПараметрыМеханизма.Вставить("passwordCertificateED", ПарольСертификатаЭЦП);
	КонецЕсли;
	
	СтартоватьМеханизм("taxcomStart", ДополнительныеПараметрыМеханизма);
	
КонецПроцедуры

