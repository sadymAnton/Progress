
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	// Проверка настроенных параметров
	АдресСА         = Неопределено;
	ПортСА          = Неопределено;
	СкриптX25       = Неопределено;
	ТаймаутACK      = Неопределено;
	ТаймаутСА       = Неопределено;
	ЧислоNAK        = Неопределено;
	РазмерПакета    = Неопределено;
	ТаймаутОперации = Неопределено;

	АдресКУ                = Неопределено;
	ПортКУ                 = Неопределено;
	ТаймаутКУ              = Неопределено;
	ИдентификаторТерминала = Неопределено;
	COMПортДО              = Неопределено;
	СкоростьОбменаСДО      = Неопределено;
	РазмерДанныхДО         = Неопределено;
	ЧетностьДО             = Неопределено;
	СтопБитыДО             = Неопределено;
	УправлениеПотокомДО    = Неопределено;

	ШиринаСлипЧека          = Неопределено;
	КоличествоКопийСлипчека = Неопределено;
	ДанныеМакетаСлипЧека    = Неопределено;

	Параметры.Свойство("АдресСА",         АдресСА);
	Параметры.Свойство("ПортСА",          ПортСА);
	Параметры.Свойство("СкриптX25",       СкриптX25);
	Параметры.Свойство("ТаймаутACK",      ТаймаутACK);
	Параметры.Свойство("ТаймаутСА",       ТаймаутСА);
	Параметры.Свойство("ЧислоNAK",        ЧислоNAK);
	Параметры.Свойство("РазмерПакета",    РазмерПакета);
	Параметры.Свойство("ТаймаутОперации", ТаймаутОперации);

	Параметры.Свойство("АдресКУ",                АдресКУ);
	Параметры.Свойство("ПортКУ",                 ПортКУ);
	Параметры.Свойство("ТаймаутКУ",              ТаймаутКУ);
	Параметры.Свойство("ИдентификаторТерминала", ИдентификаторТерминала);
	Параметры.Свойство("COMПортДО",              COMПортДО);
	Параметры.Свойство("СкоростьОбменаСДО",      СкоростьОбменаСДО);
	Параметры.Свойство("РазмерДанныхДО",         РазмерДанныхДО);
	Параметры.Свойство("ЧетностьДО",             ЧетностьДО);
	Параметры.Свойство("СтопБитыДО",             СтопБитыДО);
	Параметры.Свойство("УправлениеПотокомДО",    УправлениеПотокомДО);

	Параметры.Свойство("ШиринаСлипЧека",          ШиринаСлипЧека);
	Параметры.Свойство("КоличествоКопийСлипчека", КоличествоКопийСлипчека);
	Параметры.Свойство("ДанныеМакетаСлипЧека",    ДанныеМакетаСлипЧека);

	Если АдресСА                 = Неопределено
	 Или ПортСА                  = Неопределено
	 Или СкриптX25               = Неопределено
	 Или ТаймаутACK              = Неопределено
	 Или ТаймаутСА               = Неопределено
	 Или ЧислоNAK                = Неопределено
	 Или РазмерПакета            = Неопределено
	 Или ТаймаутОперации         = Неопределено
	 Или АдресКУ                 = Неопределено
	 Или ПортКУ                  = Неопределено
	 Или ТаймаутКУ               = Неопределено
	 Или ИдентификаторТерминала  = Неопределено
	 Или COMПортДО               = Неопределено
	 Или СкоростьОбменаСДО       = Неопределено
	 Или РазмерДанныхДО          = Неопределено
	 Или ЧетностьДО              = Неопределено
	 Или СтопБитыДО              = Неопределено
	 Или УправлениеПотокомДО     = Неопределено
	 Или ШиринаСлипЧека          = Неопределено
	 Или КоличествоКопийСлипчека = Неопределено
	 Или ДанныеМакетаСлипЧека    = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));

		Результат = Ложь;
	КонецЕсли;
	// Конец: Проверка настроенных параметров

	Если Результат Тогда
		ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
		ПараметрыПодключения.Вставить("ТипТранзакции", "");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	// Оплата платежной картой
	Если Команда = "AuthorizeSales" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];

		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                    Сумма, НомерКарты, ВыходныеПараметры);

	// Возрат платежа
	ИначеЕсли Команда = "AuthorizeRefund" Тогда
		Сумма      		= ВходныеПараметры[0];
		НомерКарты 		= ВходныеПараметры[1];
		СсылочныйНомер 	= ВходныеПараметры[2];
		НомерЧека      	= ВходныеПараметры[3];

		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);

	// Отмена платежа
	ИначеЕсли Команда = "AuthorizeVoid" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ВходныеПараметры[2];

		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);

	// Аварийная отмена платежа
	ИначеЕсли Команда = "EmergencyVoid" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ВходныеПараметры[2];

		Результат = АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                    Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);

	// Сверка итогов по картам
	ИначеЕсли Команда = "Settlement" Тогда
		Результат = ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Преавторизация платежа
	ИначеЕсли Команда = "AuthorizePreSales" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];

		Результат = ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                            Сумма, НомерКарты, ВыходныеПараметры);

	// Завершение преавторизации платежа
	ИначеЕсли Команда = "AuthorizeCompletion" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ВходныеПараметры[2];
		НомерЧека      = ВходныеПараметры[3];

		Результат = ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                                    Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);

	// Отмена преавторизации платежа
	ИначеЕсли Команда = "AuthorizeVoidPreSales" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ВходныеПараметры[2];
		НомерЧека      = ВходныеПараметры[3];

		Результат = ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                                   Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);

	// Получение слип-чека последней операции
	ИначеЕсли Команда = "ПолучитьСтрокиСлипЧека" Тогда
		Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, Неопределено, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции
  
///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
  
// Функция осуществляет авторизацию (оплату) по карте.
//
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, НомерКарты, ВыходныеПараметры)

	Результат = Истина;

	СсылочныйНомер = "";
	НомерЧека      = "";

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Оплатить'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	// Преобразование номера карты в код карты и срок действия
	КодКарты = "";
	СрокДействия = "";
	Если Не ПустаяСтрока(НомерКарты) Тогда
		ПозицияРазделителя = Найти(НомерКарты, "=");
		Если ПозицияРазделителя > 0 Тогда
			КодКарты     = Лев(НомерКарты, ПозицияРазделителя - 1);
			СрокДействия = Сред(НомерКарты, ПозицияРазделителя + 1, 4);

			ОбъектДрайвера.СрокДействияКарты = СрокДействия;
		Иначе
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Указан неверный номер карты.'"));

			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Результат Тогда
		СуммаВременная = Сумма * 100;

		Ответ = ОбъектДрайвера.ОплатитьПлатежнойКартой(КодКарты,
		                                               СуммаВременная,
		                                               СсылочныйНомер,
		                                               НомерЧека);
		Если Не Ответ Тогда
			ПараметрыПодключения.ТипТранзакции = "Отказ";
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = Ложь;
		Иначе
			ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.ИдентификаторОперацииНаТерминале;

			СлипЧек = Неопределено;
			Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
			Если Результат Тогда
				ВыходныеПараметры.Добавить(КодКарты);
				ВыходныеПараметры.Добавить(СсылочныйНомер);
				ВыходныеПараметры.Добавить(НомерЧека);
				ВыходныеПараметры.Добавить(Новый Массив());
				ВыходныеПараметры[3].Добавить("СлипЧек");
				ВыходныеПараметры[3].Добавить(СлипЧек);
			Иначе
				АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет возврат платежа по карте.
//
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	//СсылочныйНомер = Неопределено;
	//НомерЧека      = Неопределено;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Вернуть платеж'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	// Преобразование номера карты в код карты и срок действия
	КодКарты = "";
	СрокДействия = "";
	Если Не ПустаяСтрока(НомерКарты) Тогда
		ПозицияРазделителя = Найти(НомерКарты, "=");
		Если ПозицияРазделителя > 0 Тогда
			КодКарты     = Лев(НомерКарты, ПозицияРазделителя - 1);
			СрокДействия = Сред(НомерКарты, ПозицияРазделителя + 1, 4);

			ОбъектДрайвера.СрокДействияКарты = СрокДействия;
		Иначе
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Указан неверный номер карты.'"));

			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Результат Тогда
		СуммаВременная = Сумма * 100;

		Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(КодКарты,
		                                                     СуммаВременная,
		                                                     СсылочныйНомер,
		                                                     НомерЧека);
		Если Не Ответ Тогда
			ПараметрыПодключения.ТипТранзакции = "Отказ";
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = Ложь;
		Иначе
			ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.ИдентификаторОперацииНаТерминале;

			СлипЧек = Неопределено;
			Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
			Если Результат Тогда
				ВыходныеПараметры.Добавить(КодКарты);
				ВыходныеПараметры.Добавить(СсылочныйНомер);
				ВыходныеПараметры.Добавить(НомерЧека);
				ВыходныеПараметры.Добавить(Новый Массив());
				ВыходныеПараметры[3].Добавить("СлипЧек");
				ВыходныеПараметры[3].Добавить(СлипЧек);
			Иначе
				АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену платежа по карте.
//
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	СсылочныйНомер = Неопределено;
	НомерЧека      = Неопределено;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить платеж'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	Если Результат Тогда
		СуммаВременная = Сумма * 100;

		Ответ = ОбъектДрайвера.ОтменитьПлатежаПоПлатежнойКарте("",
		                                                       СуммаВременная,
		                                                       СсылочныйНомер);
		Если Не Ответ Тогда
			ПараметрыПодключения.ТипТранзакции = "Отказ";
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = Ложь;
		Иначе
			ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.ИдентификаторОперацииНаТерминале;

			СлипЧек = Неопределено;
			Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
			Если Результат Тогда
				ВыходныеПараметры.Добавить(Новый Массив());
				ВыходныеПараметры[0].Добавить("СлипЧек");
				ВыходныеПараметры[0].Добавить(СлипЧек);
			Иначе
				АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
//
Функция АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	ОбъектДрайвера.ИдентификаторОперацииНаТерминале = ПараметрыПодключения.КодОригинальнойТранзакции;
	СуммаВременная = Сумма * 100;

	Ответ = ОбъектДрайвера.АварийнаяОтменаОперации("", СуммаВременная * 100, СсылочныйНомер, НомерЧека);
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет сверку итогов по картам.
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	Ответ     = Неопределено;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Сверка итогов'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	Ответ = ОбъектДрайвера.ИтогиДняПоКартам();
	Если Не Ответ Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		Результат = Ложь;
	Иначе
		СлипЧек = "";

		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[0].Добавить("СлипЧек");
		ВыходныеПараметры[0].Добавить(СлипЧек);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет преавторизацию по карте.
// 
Функция ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                        Сумма, НомерКарты, ВыходныеПараметры)

	Результат = Истина;

	СсылочныйНомер = Неопределено;
	НомерЧека      = Неопределено;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Преавторизовать платеж'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	// Преобразование номера карты в код карты и срок действия
	КодКарты = "";
	СрокДействия = "";
	Если Не ПустаяСтрока(НомерКарты) Тогда
		ПозицияРазделителя = Найти(НомерКарты, "=");
		Если ПозицияРазделителя > 0 Тогда
			КодКарты     = Лев(НомерКарты, ПозицияРазделителя - 1);
			СрокДействия = Сред(НомерКарты, ПозицияРазделителя + 1, 4);

			ОбъектДрайвера.СрокДействияКарты = СрокДействия;
		Иначе
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Указан неверный номер карты.'"));

			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Результат Тогда
		СуммаВременная = Сумма * 100;

		Ответ = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(КодКарты,
		                                                      СуммаВременная,
		                                                      СсылочныйНомер,
		                                                      НомерЧека);
		Если Не Ответ Тогда
			ПараметрыПодключения.ТипТранзакции = "Отказ";
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = Ложь;
		Иначе
			ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.ИдентификаторОперацииНаТерминале;

			СлипЧек = Неопределено;
			Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
			Если Результат Тогда
				ВыходныеПараметры.Добавить(КодКарты);
				ВыходныеПараметры.Добавить(СсылочныйНомер);
				ВыходныеПараметры.Добавить(НомерЧека);
				ВыходныеПараметры.Добавить(Новый Массив());
				ВыходныеПараметры[3].Добавить("СлипЧек");
				ВыходныеПараметры[3].Добавить(СлипЧек);
			Иначе
				АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет завершение преавторизации по карте.
//
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                                Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Завершить преавторизацию'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	// Преобразование номера карты в код карты и срок действия
	КодКарты = "";
	СрокДействия = "";
	Если Не ПустаяСтрока(НомерКарты) Тогда
		ПозицияРазделителя = Найти(НомерКарты, "=");
		Если ПозицияРазделителя > 0 Тогда
			КодКарты     = Лев(НомерКарты, ПозицияРазделителя - 1);
			СрокДействия = Сред(НомерКарты, ПозицияРазделителя + 1, 4);

			ОбъектДрайвера.СрокДействияКарты = СрокДействия;
		Иначе
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Указан неверный номер карты.'"));

			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Результат Тогда
		СуммаВременная = Сумма * 100;

		Ответ = ОбъектДрайвера.ЗавершениеПреавторизацииПоПлатежнойКарте(КодКарты,
		                                                                СуммаВременная,
		                                                                СсылочныйНомер,
		                                                                НомерЧека);
		Если Не Ответ Тогда
			ПараметрыПодключения.ТипТранзакции = "Отказ";
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = Ложь;
		Иначе
			ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.ИдентификаторОперацииНаТерминале;

			СлипЧек = Неопределено;
			Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
			Если Результат Тогда
				ВыходныеПараметры.Добавить(Новый Массив());
				ВыходныеПараметры[0].Добавить("СлипЧек");
				ВыходныеПараметры[0].Добавить(СлипЧек);
			Иначе
				АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену преавторизации по карте.
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                               Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Результат = Истина;

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить преавторизацию'");

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);

	// Преобразование номера карты в код карты и срок действия
	КодКарты = "";
	СрокДействия = "";
	Если Не ПустаяСтрока(НомерКарты) Тогда
		ПозицияРазделителя = Найти(НомерКарты, "=");
		Если ПозицияРазделителя > 0 Тогда
			КодКарты     = Лев(НомерКарты, ПозицияРазделителя - 1);
			СрокДействия = Сред(НомерКарты, ПозицияРазделителя + 1, 4);

			ОбъектДрайвера.СрокДействияКарты = СрокДействия;
		Иначе
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Указан неверный номер карты.'"));

			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Результат Тогда
		СуммаВременная = Сумма * 100;

		Ответ = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(КодКарты,
		                                                              СуммаВременная,
		                                                              СсылочныйНомер);
		Если Не Ответ Тогда
			ПараметрыПодключения.ТипТранзакции = "Отказ";
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			КодОперации = ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = Ложь;
		Иначе
			ПараметрыПодключения.КодОригинальнойТранзакции = ОбъектДрайвера.ИдентификаторОперацииНаТерминале;

			СлипЧек = Неопределено;
			Результат = ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры);
			Если Результат Тогда
				ВыходныеПараметры.Добавить(Новый Массив());
				ВыходныеПараметры[0].Добавить("СлипЧек");
				ВыходныеПараметры[0].Добавить(СлипЧек);
			Иначе
				АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                        Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	РезультатТеста = "";

	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
	Результат = ОбъектДрайвера.ТестУстройства(РезультатТеста);

	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	ВыходныеПараметры.Добавить(РезультатТеста);

	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Заполняет массив строками слип-чека для последующей печати на ФР
//
Функция ПолучитьСтрокиСлипЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, СлипЧек, ВыходныеПараметры)

	Результат = Истина;

	Документ     = Новый ТекстовыйДокумент();
	Область      = Неопределено;
	ИмяМакета    = "СлипЧекИНПАС";
	ЗначениеПоля = "";

	КодыВалют = Новый Соответствие();
	КодыВалют.Вставить("643", "RUR");
	КодыВалют.Вставить("840", "USD");
	КодыВалют.Вставить("978", "EUR");
	КодыВалют.Вставить("826", "GBP");
	КодыВалют.Вставить("036", "AUD");
	КодыВалют.Вставить("974", "BYR");
	КодыВалют.Вставить("208", "DKK");
	КодыВалют.Вставить("352", "ISK");
	КодыВалют.Вставить("398", "KZT");
	КодыВалют.Вставить("124", "CAD");
	КодыВалют.Вставить("578", "NOK");
	КодыВалют.Вставить("702", "SGD");
	КодыВалют.Вставить("792", "TRL");
	КодыВалют.Вставить("980", "UAH");
	КодыВалют.Вставить("752", "SEK");
	КодыВалют.Вставить("756", "CHF");
	КодыВалют.Вставить("392", "JPY");
	КодыВалют.Вставить("999", "BONUS");

	Если ПараметрыПодключения.ТипТранзакции = "Оплатить"
	 Или ПараметрыПодключения.ТипТранзакции = "Вернуть платеж"
	 Или ПараметрыПодключения.ТипТранзакции = "Отменить платеж"
	 Или ПараметрыПодключения.ТипТранзакции = "Преавторизовать платеж"
	 Или ПараметрыПодключения.ТипТранзакции = "Завершить преавторизацию"
	 Или ПараметрыПодключения.ТипТранзакции = "Отменить преавторизацию" Тогда
		ОбластьПараметры = Новый Структура();

		ОбластьПараметры.Вставить("Банк"       , Параметры.ДанныеМакетаСлипЧека[0].Значение);
		ОбластьПараметры.Вставить("Организация", Параметры.ДанныеМакетаСлипЧека[1].Значение);
		ОбластьПараметры.Вставить("Город"      , Параметры.ДанныеМакетаСлипЧека[2].Значение);
		ОбластьПараметры.Вставить("Адрес"      , Параметры.ДанныеМакетаСлипЧека[3].Значение);
		ОбластьПараметры.Вставить("Отдел"      , Параметры.ДанныеМакетаСлипЧека[4].Значение);
		ОбластьПараметры.Вставить("Кассир"     , Параметры.ДанныеМакетаСлипЧека[5].Значение);
		ОбластьПараметры.Вставить("TID"        , ОбъектДрайвера.ИдентификаторТерминала);
		ОбластьПараметры.Вставить("MID"        , ОбъектДрайвера.ИдентификаторПродавца);
		Если ПараметрыПодключения.ТипТранзакции = "Оплатить" Тогда
			ОбластьПараметры.Вставить("Операция", "ОПЛАТА ТОВАРА");
		ИначеЕсли ПараметрыПодключения.ТипТранзакции = "Вернуть платеж" Тогда
			ОбластьПараметры.Вставить("Операция", "ВОЗВРАТ ТОВАРА");
		ИначеЕсли ПараметрыПодключения.ТипТранзакции = "Отменить платеж" Тогда
			ОбластьПараметры.Вставить("Операция", "ОТМЕНА ОПЛАТЫ ТОВАРА");
		ИначеЕсли ПараметрыПодключения.ТипТранзакции = "Преавторизовать платеж" Тогда
			ОбластьПараметры.Вставить("Операция", "ПРЕАВТОРИЗАЦИЯ");
		ИначеЕсли ПараметрыПодключения.ТипТранзакции = "Завершить преавторизацию" Тогда
			ОбластьПараметры.Вставить("Операция", "ЗАВЕРШЕНИЕ ПРЕАВТОРИЗАЦИИ");
		ИначеЕсли ПараметрыПодключения.ТипТранзакции = "Отменить преавторизацию" Тогда
			ОбластьПараметры.Вставить("Операция", "ОТМЕНА ПРЕАВТОРИЗАЦИИ");
		КонецЕсли;
		ОбластьПараметры.Вставить("Сумма",
		                          Формат(Число(ОбъектДрайвера.Сумма),
		                                 "ЧЦ=15; ЧДЦ=2; ЧС=2; ЧРГ=' '; ЧГ=3,0")
		                         + " "
		                         + КодыВалют[ОбъектДрайвера.КодВалюты]);
		ОбластьПараметры.Вставить("Итого", 
		                          Формат(Число(ОбъектДрайвера.Сумма),
		                                 "ЧЦ=15; ЧДЦ=2; ЧС=2; ЧРГ=' '; ЧГ=3,0")
		                         + " "
		                         + КодыВалют[ОбъектДрайвера.КодВалюты]);
		ОбластьПараметры.Вставить("НазваниеКарты", ОбъектДрайвера.ТипКарты);
		ОбластьПараметры.Вставить("PIN", ?(ОбъектДрайвера.СпособВводаPin = 0, "", "PIN"));
		ОбластьПараметры.Вставить("НомерКарты",
		                          Лев(ОбъектДрайвера.НомерКарты, 4) + " "
		                         + Сред(ОбъектДрайвера.НомерКарты, 5, 2) + "** **** "
		                         + Прав(ОбъектДрайвера.НомерКарты, 4));
		ОбластьПараметры.Вставить("СрокДействия",
		                          Лев(ОбъектДрайвера.СрокДействияКарты,2) + "/" + Прав(ОбъектДрайвера.СрокДействияКарты,2));
		ОбластьПараметры.Вставить("КодАвторизации", Формат(ОбъектДрайвера.КодАвторизации, "ЧГ=0"));
		ОбластьПараметры.Вставить("КодRRN", ОбъектДрайвера.КодRRN);
		ОбластьПараметры.Вставить("КодОтветаХоста", ОбъектДрайвера.КодОтветаХоста);
		ОбластьПараметры.Вставить("ОписаниеОтветаХоста", ОбъектДрайвера.ОписаниеОтветаХоста);
		ОбластьПараметры.Вставить("Дата", Формат(Дата(ОбъектДрайвера.ВремяОперацииНаТерминале), "ДФ=yy/MM/dd"));
		ОбластьПараметры.Вставить("Время", Формат(Дата(ОбъектДрайвера.ВремяОперацииНаТерминале), "ДФ=HH:mm:ss"));
		ОбластьПараметры.Вставить("ИдентификаторПриложения", ОбъектДрайвера.ИдентификаторПриложения);
		ОбластьПараметры.Вставить("НазваниеПриложения", ОбъектДрайвера.НазваниеПриложения);
		ОбластьПараметры.Вставить("TVR", ОбъектДрайвера.TVR);
		ОбластьПараметры.Вставить("ИмяДержателяКарты", ОбъектДрайвера.ИмяДержателяКарты);
		ОбластьПараметры.Вставить("ТекстПодвала", Параметры.ДанныеМакетаСлипЧека[6].Значение);

		СлипЧек =
		   МенеджерОборудованияКлиент.ПолучитьСлипЧек(ИмяМакета, Параметры.ШиринаСлипЧека, ОбластьПараметры);
	ИначеЕсли ПараметрыПодключения.ТипТранзакции <> "СверкаИтогов" Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Неизвестный тип операции: 
		                                   |обработка не поддерживает вид операции (%ТипТранзакции%).
		                                   |Обратитесь к администратору системы");
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1],
		                                               "%ТипТранзакции%",
		                                               ПараметрыПодключения.ТипТранзакции);
	КонецЕсли;

	Если Результат Тогда
		КопииСлипЧека = "";
		Для Индекс = 1 По Параметры.КоличествоКопийСлипчека Цикл
			КопииСлипЧека = КопииСлипЧека + СлипЧек + ?(Индекс = Параметры.КоличествоКопийСлипчека,
			                                            "",
			                                            Символы.ПС + Символ(Параметры.КодСимволаЧастичногоОтреза) + Символы.ПС);
		КонецЦикла;
		СлипЧек = КопииСлипЧека;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Установить параметры драйвера
//
Процедура УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры)

	// Параметры системы
	ОбъектДрайвера.АдресСервераАвторизации   = Параметры.АдресСА;
	ОбъектДрайвера.ПортСервераАвторизации    = Параметры.ПортСА;
	ОбъектДрайвера.СкриптX25                 = Параметры.СкриптX25;
	ОбъектДрайвера.ТаймаутACK                = Параметры.ТаймаутACK;
	ОбъектДрайвера.ТаймаутСервераАвторизации = Параметры.ТаймаутСА;
	ОбъектДрайвера.ЧислоNAK                  = Параметры.ЧислоNAK;
	ОбъектДрайвера.РазмерПакета              = Параметры.РазмерПакета;
	ОбъектДрайвера.ТаймаутОперации           = Параметры.ТаймаутОперации;

	ОбъектДрайвера.АдресКаналаУправления     = Параметры.АдресКУ;
	ОбъектДрайвера.ПортКаналаУправления      = Параметры.ПортКУ;
	ОбъектДрайвера.ТаймаутКаналаУправления   = Параметры.ТаймаутКУ;
	ОбъектДрайвера.COMПортДО                 = Параметры.COMПортДО;
	ОбъектДрайвера.СкоростьОбменаСДО         = Параметры.СкоростьОбменаСДО;
	ОбъектДрайвера.РазмерДанныхДО            = Параметры.РазмерДанныхДО;
	ОбъектДрайвера.ЧетностьДО                = Параметры.ЧетностьДО;
	ОбъектДрайвера.СтопБитыДО                = Параметры.СтопБитыДО;
	ОбъектДрайвера.УправлениеПотокомДО       = Параметры.УправлениеПотокомДО;

	ОбъектДрайвера.ИдентификаторТерминала    = Параметры.ИдентификаторТерминала;
	ОбъектДрайвера.КодВалюты                 = Параметры.КодВалюты;
	ОбъектДрайвера.ВремяОперацииНаТерминале  = Формат(ТекущаяДата(), "ДФ=yyyyMMddЧЧммсс");

КонецПроцедуры
