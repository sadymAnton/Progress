////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения") Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяЕдиницыИзмерения, МетаданныеДокумента, ИмяТабличнойЧасти)
		И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения].Владелец Тогда
		СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения] = Неопределено;
	КонецЕсли;
	
	// При изменении номенклатуры очистим единицу мест
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти)
		И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
		И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.СерияНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.СерияНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
		И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатурыТабЧасти()

// Процедура выполняет стандартные действия при изменении единицы цены
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	Перем СтруктураРеквизитовЦен;
	
	ИмяТабличнойЧасти      = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента    = ДокументОбъект.Метаданные();
	СтруктураРеквизитовЦен = Новый Структура("Цена, ЦенаВРознице, ЦенаПередачи");
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения цены!
				|Пересчет количества невозможен.");
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0
					И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения цены "
					+ СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмерения) + " не проставлен коэффициент!
					|Пересчет количества невозможен.");
				Иначе
					СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
					НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					
					Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента Тогда
						СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;
						
						Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
							СтрокаТабличнойЧасти.Количество  = СтрокаТабличнойЧасти.Количество * СтароеЗначениеКоэффициента
							/ НовоеЗначениеКоэффициента;
						КонецЕсли;
						
						РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						
						Для Каждого ИмяРеквизитаЦены Из СтруктураРеквизитовЦен Цикл
							Если СтароеЗначениеКоэффициента > 0 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяРеквизитаЦены.Ключ, МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
								СтрокаТабличнойЧасти[ИмяРеквизитаЦены.Ключ] = СтрокаТабличнойЧасти[ИмяРеквизитаЦены.Ключ] * НовоеЗначениеКоэффициента
								/ СтароеЗначениеКоэффициента;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения цены!
			|Пересчет количества невозможен.");
		Иначе
			СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
			НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			
			СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;
			
			Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента Тогда
				// если в табличной части есть реквизит КоличествоМест, то цена задается не за ЕдиницуИзмерения,
				// а за базовую единицу хранения остатков. Т.е. цену пересчитывать не нужно
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					// надо обновить изменение к-ва в документе
					РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				Иначе
					// ПересчитатьЦену
					Для Каждого ИмяРеквизитаЦены Из СтруктураРеквизитовЦен Цикл
						Если СтароеЗначениеКоэффициента > 0 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяРеквизитаЦены.Ключ, МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти[ИмяРеквизитаЦены.Ключ] = СтрокаТабличнойЧасти[ИмяРеквизитаЦены.Ключ] * НовоеЗначениеКоэффициента
							/ СтароеЗначениеКоэффициента;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЕдиницыТабЧасти

// Процедура выполняет стандартные действия при изменении единицы мест
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	// Рассчитывает количество мест исходя из количества
	РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
КонецПроцедуры // ПриИзмененииЕдиницыМестаТабЧасти

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти 					- строка табличной части документа,
//  ДокументОбъект       					- объект редактируемого документа,
//  ЕстьРеквизитПроцентСкидкиНаценки 		- признак наличия в документе реквизита ПроцентСкидкиНаценки,
//  ПересчитыватьСкидку				 		- признак необходимости пересчета скидки для данного пользователя,
//  ЕстьРеквизитПроцентАвтоматическихСкидок - признак наличия в документе реквизита ПроцентАвтоматическихСкидок
Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь, РасчетАвтоматическихСкидок = Ложь, ЕстьРеквизитДокументаПроцентСкидкиНаценки = Неопределено, ПересчитыватьСкидкуДокумента = Неопределено, ЕстьРеквизитДокументаПроцентАвтоматическихСкидок = Неопределено, ИмяТабЧастиДокумента = неопределено) Экспорт
	
	ИмяТабличнойЧасти = ?(ИмяТабЧастиДокумента=неопределено,ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти),ИмяТабЧастиДокумента);
	
	Если СтрокаТабличнойЧасти.Количество=0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе	
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		ЕстьРеквизитПроцентСкидкиНаценки = ?(ЕстьРеквизитДокументаПроцентСкидкиНаценки=неопределено,ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти),ЕстьРеквизитДокументаПроцентСкидкиНаценки);
		Если ЕстьРеквизитПроцентСкидкиНаценки Тогда
			ПересчитыватьСкидку = ?(ПересчитыватьСкидкуДокумента=неопределено,УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку"),ПересчитыватьСкидкуДокумента);
			ЕстьРеквизитПроцентАвтоматическихСкидок = ?(ЕстьРеквизитДокументаПроцентАвтоматическихСкидок=неопределено,ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти),ЕстьРеквизитДокументаПроцентАвтоматическихСкидок);
			
			Если ПересчитыватьСкидку Тогда
				Если (СтрокаТабличнойЧасти.Цена = 0) Или (СтрокаТабличнойЧасти.Количество = 0) Тогда
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
					Если СтрокаТабличнойЧасти.Цена = 0 Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Цена равна 0, после изменения суммы установлена нулевая скидка!");
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Количество равно 0, после изменения суммы установлена нулевая скидка!");
					КонецЕсли;
				Иначе
					СуммаСоСкидками = СтрокаТабличнойЧасти.Сумма;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
					//>>170216 Степанов б/н скидки не суммируются, а применяются последовательно
					//ПроцентСкидки   = 100 - (СуммаСоСкидками*100)/СуммаБезСкидок;
					ПроцентАвтоматическихСкидок = 0;
					
					Если ЕстьРеквизитПроцентАвтоматическихСкидок Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					
					//СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки - ПроцентАвтоматическихСкидок;
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100-СуммаСоСкидками/(100-ПроцентАвтоматическихСкидок)*100/СуммаБезСкидок*100;
				КонецЕсли;
			Иначе
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки >= 100 Тогда
					СтрокаТабличнойЧасти.Цена = 0;
					ОбщегоНазначения.СообщитьОбОшибке("Скидка равна 100%, после изменения суммы установлена нулевая цена!");
				Иначе
					ПроцентАвтоматическихСкидок = 0;
					Если ЕстьРеквизитПроцентАвтоматическихСкидок Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					//СуммаБезСкидок  = СтрокаТабличнойЧасти.Сумма * 100/
					//                  (100 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки - ПроцентАвтоматическихСкидок);
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Сумма*100/(100-ПроцентАвтоматическихСкидок)*100/(100-СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
					//<<170216
					СтрокаТабличнойЧасти.Цена = СуммаБезСкидок / СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСуммыТабЧасти()


// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылку на подчиненный справочник единиц).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// При изменении номенклатуры очистим ссылку на подчиненный справочник
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти)
		И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ПриИзмененииВозвратнойТарыТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы в строке возвратной тары документа.
//
// Параметры:
//  СтрокаВозвратнойТары - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ДокументОбъект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаВозвратнойТары.Количество) Тогда
		СтрокаВозвратнойТары.Цена = 0;
	Иначе	
		СтрокаВозвратнойТары.Цена = СтрокаВозвратнойТары.Сумма / СтрокаВозвратнойТары.Количество;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСуммыВозвратнойТарыТабЧасти()

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура УстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт
	
	// устанавливаем стандартные запреты на изменение видимости колонок
	Для каждого КолонкаТаблицы из Колонки Цикл
		КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
	КонецЦикла;
	
КонецПроцедуры // УстановитьИзменятьВидимостьКолонокТабЧасти()

Процедура ПередЗаписьюДокументаЗаполнитьФизЛицоВТабличнойЧасти(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСотрудникФизлицо = Новый Соответствие;
	ПустоеФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ПустойСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено ИЛИ ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			Если СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник И СтрокаТабличнойЧасти.Физлицо = ПустоеФизлицо Тогда
				СоответствиеСотрудникФизлицо.Вставить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивСотрудников = Новый Массив;
	Для Каждого ЭлементСоответствия Из СоответствиеСотрудникФизлицо Цикл
		МассивСотрудников.Добавить(ЭлементСоответствия.Ключ);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", МассивСотрудников);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеСотрудникФизлицо.Вставить(Выборка.Сотрудник, Выборка.Физлицо);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено ИЛИ ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписыватьТабличнуюЧасть = Ложь;
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			Если СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник И СтрокаТабличнойЧасти.Физлицо = ПустоеФизлицо Тогда
				СтрокаТабличнойЧасти.Физлицо = СоответствиеСотрудникФизлицо.Получить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним табличную часть ФизическиеЛица
	ЗаполнитьТабличнуюЧастьФизическиеЛица(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры // ПередЗаписьюДокументаЗаполнитьФизЛицоВТабличнойЧасти()

Процедура ЗаполнитьТабличнуюЧастьФизическиеЛица(Источник, Отказ, РежимЗаписи, РежимПроведения)
	
	Если Источник.Метаданные().ТабличныеЧасти.Найти("ФизическиеЛица") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СоответствиеФизлица = Новый Соответствие;
	
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			СоответствиеФизлица.Вставить(СтрокаТабличнойЧасти.Физлицо, "");
		КонецЦикла;
	КонецЦикла;
	
	ОбработкаТабличныхЧастейПереопределяемый.ПолучитьФизлицИзДополнительныхТабличныхЧастей(Источник, Отказ, РежимЗаписи, РежимПроведения, СоответствиеФизлица);
	
	Формировать = Ложь;
	Если СоответствиеФизлица.Количество() = Источник.ФизическиеЛица.Количество() Тогда
		Для Каждого Строка Из Источник.ФизическиеЛица Цикл
			Если СоответствиеФизлица[Строка.ФизическоеЛицо] = НеОпределено Тогда
				Формировать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Формировать = Истина;
	КонецЕсли;
	
	Если Формировать Тогда
		Источник.ФизическиеЛица.Очистить();
		Для Каждого ЭлементСтруктуры Из СоответствиеФизлица Цикл
			Строка = Источник.ФизическиеЛица.Добавить();
			Строка.ФизическоеЛицо = ЭлементСтруктуры.Ключ;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

// Изменяет видимость колонки табличного поля (напрмер, табличной части документа).
//
// Параметры:
//  Колонка   - колонка табличного поля, 
//  Видимость - булево, устанавливаемый флаг видимости колонки.
//
Процедура УстановитьВидимостьКолонкиТабЧасти(Колонка, Видимость) Экспорт
	
	Колонка.Видимость = Видимость;
	
КонецПроцедуры // УстановитьВидимостьКолонкиТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт
	
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
		
		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.Содержание = НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

//Функция возвращает часть запроса для выбора поля содержания у Таб части Услуги документа
Функция ПолучитьЧастьЗапросаДляВыбораСодержания(Знач ИмяТаблицыВыбора, Знач ИтоговыйАлиасПоля = "") Экспорт
	
	СтрокаИмениТаблицыВыборки = "";
	Если Не ПустаяСтрока(ИмяТаблицыВыбора) Тогда
		
		СтрокаИмениТаблицыВыборки = ИмяТаблицыВыбора + ".";
		
	КонецЕсли;
	
	ЧастьВыборки = "	Выбор 
	|		Когда НЕ (" + СтрокаИмениТаблицыВыборки + "Содержание Подобно """") Тогда
	|			ВЫРАЗИТЬ(" + СтрокаИмениТаблицыВыборки + "Содержание КАК Строка (1000))
	|		Когда НЕ (" + СтрокаИмениТаблицыВыборки + "Номенклатура.НаименованиеПолное Подобно """") Тогда
	|			ВЫРАЗИТЬ(" + СтрокаИмениТаблицыВыборки + "Номенклатура.НаименованиеПолное КАК Строка (1000))
	|		Иначе
	|			" + СтрокаИмениТаблицыВыборки + "Номенклатура.Наименование
	|	Конец";
	
	Если Не ПустаяСтрока(ИтоговыйАлиасПоля) Тогда
		
		ЧастьВыборки = ЧастьВыборки + " КАК " + ИтоговыйАлиасПоля;	
		
	КонецЕсли;
	
	Возврат ЧастьВыборки; 
	
КонецФункции

// Процедура заполняет качество номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если Не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти)
			Или Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		Иначе
			СтрокаТабличнойЧасти.Качество = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКачествоНоменклатурыТабЧасти()

// Процедура заполняет склад и оредер в строке табличной части по реквизитам шапки документа
//
Процедура ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СкладИзШапки = Ложь) Экспорт
	
	Если ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПриходныйОрдер) Тогда
				СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОбъект.СкладОрдер;
			КонецЕсли;
			Если СкладИзШапки Тогда
				Если СтрокаТабличнойЧасти.Склад <> ДокументОбъект.СкладОрдер.Склад Тогда
					СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер.Склад;
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
					СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер.Склад;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтрокаТабличнойЧасти.ПриходныйОрдер <> Неопределено Тогда
			СтрокаТабличнойЧасти.ПриходныйОрдер = Неопределено;
		КонецЕсли;
		Если СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
			МетаданныеДокумента = ДокументОбъект.Метаданные();
			
			Если ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
				Если СкладИзШапки Тогда
					Если СтрокаТабличнойЧасти.Склад <> ДокументОбъект.СкладОрдер Тогда
						СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
						СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПоставщику", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				Если (ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику))
					ИЛИ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику.Склад)) Тогда
					Если СтрокаТабличнойЧасти.Склад <> СтрокаТабличнойЧасти.ЗаказПоставщику.Склад Тогда
						СтрокаТабличнойЧасти.Склад = СтрокаТабличнойЧасти.ЗаказПоставщику.Склад;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСкладИОрдерТабЧасти()

// Процедура заполняет склад и оредер по реквизитам шапки документа во всех строках 
// заданной табличной части, в которых эти реквизиты не заполнены табличной части 
//
Процедура ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ДокументОбъект, ТабЧасть, СкладИзШапки = Ложь) Экспорт
	
	Для каждого СтрокаТЧ из ТабЧасть Цикл
		
		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТЧ, ДокументОбъект, СкладИзШапки);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизит качество в табличной части документа
//
Процедура ЗаполнитьКачествоПоУмолчанию(ТабЧасть, ЗаполнитьВсеСтрокиНовый = Ложь) Экспорт
	
	Для Каждого Строка Из ТабЧасть Цикл
		Если ЗаполнитьВсеСтрокиНовый И Строка.Качество <> Справочники.Качество.Новый 
			ИЛИ НЕ ЗначениеЗаполнено(Строка.Качество) Тогда
			Строка.Качество = Справочники.Качество.Новый;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает значение нужного реквизита в переданной ТЧ.
//
// Параметры:
//  ТабЧаст      - табличная часть,
//  ИмяРеквизита - строка, имя реквизита.
//
Процедура ОчиститьРеквизитТЧ(ТабЧасть, ИмяРеквизита) Экспорт
	
	Для Каждого Строка Из ТабЧасть Цикл
		Если ЗначениеЗаполнено(Строка[ИмяРеквизита]) Тогда
			Строка[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОчиститьРеквизитТЧ()

//Функция получает таблицу для расчета остатков при подборе номенклатуры, используется для расчета резерва товаров по документу резерва
//Параметры:
//    ДокументФорма                    - Форма, Форма документа
//    ЕстьЗаказВТабличнойЧасти         - Булево, флаг есть реквизит в табличной части!!!! Если в функцию передать Истина, нужно установить параметр ИмяРеквизитаЗаказаВШапке
//    ВидРегистраПлюсСвободныйОстаток  - Строка, имя регистра накопления, остатки которого прибавляются к свободным остаткам
//    НазваниеПоляРезерваВРегистре     - Строка, имя измерения в регистре, необходимо для получения типов значения и формирования таблицы значения для табличной части документа
//    ИмяРеквизитаЗаказаВШапке         - Строка, Имя реквизита в шапке документа. Необходимо для заполнения в таблице значений поля заказ, если в константе указано, что заказ указывается в шапке документов.
//    ИмяКолонкиРезерваВТабличнойЧасти - Строка, Имя колонки заказа в табличной части документа
//    ИспользоватьЗначениеКонстанты    - Булево, Истина - анализировать константу УказаниеЗаказовВТабличнойЧастиДокументов, Ложь заказ всегда в табличной части.
//Возварщаемое значение: Структура
Функция СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ДокументФорма, ЕстьЗаказВТабличнойЧасти = Ложь, ИмяРеквизитаЗаказаВШапке = "", ВидРегистраПлюсСвободныйОстаток = "ТоварыВРезервеНаСкладах", НазваниеПоляРезерваВРегистре = "ДокументРезерва", ИмяКолонкиРезерваВТабличнойЧасти = "ЗаказПокупателя", ИспользоватьЗначениеКонстанты = Истина) Экспорт
	//создается таблица тчТовары которая возвращается функцией и эта таблица будет использована в запросе
	//в модуле обработки подбор номенклатуры для расчета резерва, как вложенная таблица.
	СтруктураВременныеТаблицы = Новый Структура();
	СтруктураДляЗаказа = Новый Структура;
	
	значениеКонстанты = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();
	тчТовары = Новый ТаблицаЗначений;
	тчТовары.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тчТовары.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ИзмерениеДокументРезерва = Метаданные.РегистрыНакопления[ВидРегистраПлюсСвободныйОстаток].Измерения.Найти(НазваниеПоляРезерваВРегистре);
	
	тчТовары.Колонки.Добавить("ДокументРезерва", Новый ОписаниеТипов(ИзмерениеДокументРезерва.Тип.Типы()));
	ЗаказИзШапки = ложь;
	ЗаказИзШапки =	Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.НеИспользовать = значениеКонстанты
	ИЛИ
	Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступления = значениеКонстанты
	ИЛИ
	НЕ ЕстьЗаказВТабличнойЧасти;
	ЗаказИзШапки = ?(ИспользоватьЗначениеКонстанты, ЗаказИзШапки, Ложь);
	СтруктураДляЗаказа.Вставить("ЗаказИзШапки",ЗаказИзШапки);
	СтруктураДляЗаказа.Вставить("ИмяВременнойТаблицы","ЗаказыТаблицаНоменклатура");
	СтруктураВременнойТаблицы = Новый Структура;
	СтруктураВременнойТаблицы.Вставить("Номенклатура","СправочникСсылка.Номенклатура");
	СтруктураВременнойТаблицы.Вставить("ХарактеристикаНоменклатуры","СправочникСсылка.ХарактеристикиНоменклатуры");
	СтруктураВременнойТаблицы.Вставить("ДокументРезерва","ДокументСсылка.ЗаказПокупателя");
	СтруктураДляЗаказа.Вставить("СтруктураВременнойТаблицы",СтруктураВременнойТаблицы);
	
	Если ЕстьЗаказВТабличнойЧасти Тогда
		Для Каждого СтрокаТабличнойЧасти Из ДокументФорма.ЭлементыФормы.Товары.Значение Цикл
			СтрокаТовары 							= тчТовары.Добавить();
			СтрокаТовары.Номенклатура				= СтрокаТабличнойЧасти.Номенклатура;
			СтрокаТовары.ХарактеристикаНОменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
			СтрокаТовары.ДокументРезерва 			= ?(ЗаказИзШапки,ДокументФорма.ЭлементыФормы[ИмяРеквизитаЗаказаВШапке].Значение,СтрокаТабличнойЧасти[ИмяКолонкиРезерваВТабличнойЧасти]);
		КонецЦикла;
		Для Каждого строкаВозвратнаяТара Из ДокументФорма.ЭлементыФормы.ВозвратнаяТара.Значение Цикл
			строкаТовары							= тчТовары.Добавить();
			строкаТовары.Номенклатура				= строкаВозвратнаяТара.Номенклатура;
			строкаТовары.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			строкаТовары.ДокументРезерва			= ?(ЗаказИзШапки,ДокументФорма.ЭлементыФормы[ИмяРеквизитаЗаказаВШапке].Значение,строкаВозвратнаяТара[ИмяКолонкиРезерваВТабличнойЧасти]);
		КонецЦИкла;
	КонецЕсли;
	тчТовары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ДокументРезерва","");
	СтруктураДляЗаказа.Вставить("ТаблицаИсточник",тчТовары);
	СтруктураДляЗаказа.Вставить("ВидРегистраПлюсСвободныйОстаток", ВидРегистраПлюсСвободныйОстаток);
	СтруктураВременныеТаблицы.Вставить("ДокументРеализацияТоваровИУслуг", СтруктураДляЗаказа);
	возврат СтруктураВременныеТаблицы;
КонецФункции //СтруктураДляРасчетаРезерваПриПодбореНоменклатуры()

// Формирует список значений реквизита табличной части документа.
// Параметры:
//  СписокЗначений    - список значений для добавления, если не передан, то создастся новый
//  ТабличнаяЧасть    - табличная часть документа, из которой будут получены значения в список
//  ИмяРеквизитаЗаказ - имя реквизита табличной части, значения которого будут получены
// Возвращаемое значение:
//  Список            - список значений, содержащий неповторяющиеся значения реквизита ТЧ
//
Функция ПолучитьСписокЗначенийРеквизитаТЧ(ТабличнаяЧасть, ИмяРеквизита, СписокЗначений = Неопределено) Экспорт
	
	Если СписокЗначений = Неопределено Тогда
		// Инициируем список
		СписокЗначений = Новый СписокЗначений;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		// Получим таблицу заказов
		ТаблицаНоменклатуры = ТабличнаяЧасть.Выгрузить();
		ТаблицаНоменклатуры.Свернуть(ИмяРеквизита);
		
		// Заполним список
		Для Каждого Строка Из ТаблицаНоменклатуры Цикл
			Если ЗначениеЗаполнено(Строка[ИмяРеквизита]) 
				И СписокЗначений.НайтиПоЗначению(Строка[ИмяРеквизита]) = Неопределено Тогда
				СписокЗначений.Добавить(Строка[ИмяРеквизита].Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокЗначений;
	
КонецФункции // ПолучитьСписокЗначенийРеквизитаТЧ()

//возвращает значение реквизита в строке табличной части с проверкой на существование данного реквизита
Функция ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ИмяРеквизита="ХарактеристикаНоменклатуры") Экспорт
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Возврат СтрокаТабличнойЧасти[ИмяРеквизита];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАСЧЕТА СКИДОК ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура получает минимально допустимую цену товаров (услуг) для данного пользователя.
//
// Параметры:
//  Номенклатура               - элемент справочника "Номенклатура",
//  ХарактеристикаНоменклатуры - элемент справочника "ХарактеристикиНоменклатуры",
//  ДокументОбъект             - документ, для которого проверяем скидки,
//  МинимальнаяЦена            - минимально допустимая цена.
//
Функция ПолучитьМинимальнуюЦену(Номенклатура, ХарактеристикаНоменклатуры,
	ДатаСкидок, СписокФильтров, ВалютаТовара, ЕдиницаИзмерения)
	
	МинимальнаяЦена = 0;
	
	// Если нет данных для формирования текста запроса (пустой список фильтров),
	// то значит можно продавать по любой цене.
	Для Каждого ТипЦены Из СписокФильтров Цикл
		
		Если НЕ ЗначениеЗаполнено(ТипЦены) Тогда
			
			// Если хотя бы для одного набора прав не задан тип цен, ниже которого нельзя продавать,
			// то значит можно продавать по любой цене.
			МинимальнаяЦена = 0;
			Прервать;
		КонецЕсли;
		
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, ТипЦены, ДатаСкидок, ЕдиницаИзмерения, ВалютаТовара);
		
		Если МинимальнаяЦена = 0 Или Цена < МинимальнаяЦена Тогда
			МинимальнаяЦена = Цена;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МинимальнаяЦена;
	
КонецФункции // ПолучитьМинимальнуюЦену()

// Процедура проверяет минимально допустимую цену товаров (услуг) для данного пользователя по выбранной строке
// и корректирует суммы скидок. При расчете итоговой суммы рассчитывает НДС.
//
// Параметры:
//  ДокументОбъект             - документ, для которого проверяем скидки,
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  УчитыватьНДС               - булево, признак учета НДС в документе, служит для расчета сумм НДС,
//  СуммаВключаетНДС           - булево, признак вхождения НДС в сумму в документе, служит для расчета сумм НДС.
//
Процедура ПроверкаМинимальнойЦены(ДатаСкидок, ТаблицаТоваров, МинимальныеЦены,
	СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара, ПересчетПослеСкидки = Ложь)
	
	Если МинимальныеЦены = Неопределено Тогда
		МинимальныеЦены = Новый ТаблицаЗначений;
		МинимальныеЦены.Колонки.Добавить("Номенклатура");
		МинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		МинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
		МинимальныеЦены.Колонки.Добавить("Цена");
		
		МинимальныеЦены.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
	КонецЕсли;
	
	Отбор = Новый Структура ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
	ЕстьЕдиница = (ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмерения") <> Неопределено);
	
	Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл
		Если СтрокаТовара.ПроцентАвтоматическихСкидок <> 0 Тогда
			ТекЕдиница = ?(ЕстьЕдиница, СтрокаТовара.ЕдиницаИзмерения, Неопределено);
			
			Отбор.Номенклатура = СтрокаТовара.Номенклатура;
			Отбор.ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
			Отбор.ЕдиницаИзмерения = ТекЕдиница;
			
			СтрокиМинимальныхЦен = МинимальныеЦены.НайтиСтроки(Отбор);
			Если СтрокиМинимальныхЦен.Количество() > 0 Тогда
				МинимальнаяЦена = СтрокиМинимальныхЦен[0].Цена;
			Иначе
				МинимальнаяЦена = ПолучитьМинимальнуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры,
				ДатаСкидок, СписокФильтров, ВалютаТовара, ТекЕдиница);
				СтрокаМинимальныхЦен = МинимальныеЦены.Добавить();
				СтрокаМинимальныхЦен.Номенклатура               = СтрокаТовара.Номенклатура;
				СтрокаМинимальныхЦен.ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
				СтрокаМинимальныхЦен.ЕдиницаИзмерения           = ТекЕдиница;
				СтрокаМинимальныхЦен.Цена                       = МинимальнаяЦена;
			КонецЕсли;
			
			Если СтрокаТовара.Цена >= МинимальнаяЦена Тогда // получим сумму по строке без учета ручной скидки
				//>>убрать ошибку деления на ноль
				Если СтрокаТовара.Количество <> 0 тогда
					Если СтрокаТовара.СуммаБезСкидки * (1 - СтрокаТовара.ПроцентАвтоматическихСкидок / 100) / СтрокаТовара.Количество < МинимальнаяЦена Тогда // обрезаем скидки
						СтрокаТовара.ПроцентАвтоматическихСкидок = Окр(100 - 100 * МинимальнаяЦена / СтрокаТовара.Цена, 2);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		/// Кунов О.В., 09.12.2014 - 34379
		//m.ionov@a-prof.ru 27.01.2015
		//Из-за этого изменения не пересчитываются цены если обнулилась скидка. Это не есть правильно, сумма должна пересчитываться в любом случае - хоть есть скидка, хоть ее нет
		//m.ionov@a-prof.ru 18.02.2015
		//Если задана ручная скидка - то тогда сначало считаем ручную скидки, потом автоматическую
		//Если СтрокаТовара.ПроцентАвтоматическихСкидок <> 0 Или СтрокаТовара.ПроцентСкидкиНаценки <> 0 Тогда
		//	СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки * (1 - (СтрокаТовара.ПроцентАвтоматическихСкидок + СтрокаТовара.ПроцентСкидкиНаценки) / 100);
		//КонецЕсли;		
		
		Если СтрокаТовара.ПроцентСкидкиНаценки > 0 Тогда
			//СуммаСРучнойСкидкой = СтрокаТовара.СуммаБезСкидки * (1 - (СтрокаТовара.ПроцентСкидкиНаценки) / 100);
			//СтрокаТовара.Сумма = СуммаСРучнойСкидкой * (1 - (СтрокаТовара.ПроцентАвтоматическихСкидок) / 100);
			//В сумме без скидки уже учтен процент ручной скидки
			СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки * (1 - (СтрокаТовара.ПроцентАвтоматическихСкидок) / 100); 
		Иначе
			СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки * (1 - (СтрокаТовара.ПроцентАвтоматическихСкидок + СтрокаТовара.ПроцентСкидкиНаценки) / 100);
		КонецЕсли;
		
		
		//m.ionov@a-prof.ru 16.02.2015
		Если ПересчетПослеСкидки И СтрокаТовара.Количество > 0 Тогда
			ЦенаСоСкидкой = Окр(СтрокаТовара.Сумма/СтрокаТовара.Количество,2);
			СтрокаТовара.Сумма = ЦенаСоСкидкой*СтрокаТовара.Количество;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		
		Если УчитыватьНДС Тогда // рассчитаем сумму НДС строки таблицы значений
			СтрокаТовара.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТовара.Сумма, УчитыватьНДС, СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверкаМинимальнойЦены()

// Функция получает период для расчета накопительных скидок.
//
// Параметры:
//  ДатаСкидок - Дата, на которую рассчитываются скидки.
//  УчетнаяПолитика - Структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  Структура - структура с ключами "ДатаНач" и "ДатаКон", начало и конец периода.
//
Функция ПолучитьПериодРасчетаНакопительныхСкидок(ДатаСкидок, УчетнаяПолитика) Экспорт
	
	ПериодНакопления = Новый Структура("ДатаНач, ДатаКон");
	
	ТекПериодичность = УчетнаяПолитика.ПериодичностьРасчетаНакопленияСкидок;
	ТекПрошлыйПериод = УчетнаяПолитика.АнализироватьПрошлыйПериодНакопленияСкидок;
	
	Если ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.ВТечениеВсегоПериода Тогда
		ПериодНакопления.ДатаНач = '00010101';
		ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Месяц Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -1);
			
			ПериодНакопления.ДатаНач = НачалоМесяца(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецМесяца(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоМесяца(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Квартал Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -3);
			
			ПериодНакопления.ДатаНач = НачалоКвартала(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецКвартала(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоКвартала(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Полугодие Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -6);
			
			ПериодНакопления.ДатаНач = ОбщегоНазначения.ПолучитьНачалоПолугодия(ПериодМинус);
			ПериодНакопления.ДатаКон = ОбщегоНазначения.ПолучитьКонецПолугодия(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = ОбщегоНазначения.ПолучитьНачалоПолугодия(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Год Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -12);
			
			ПериодНакопления.ДатаНач = НачалоГода(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецГода(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоГода(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПериодНакопления;
	
КонецФункции // ПолучитьПериодРасчетаНакопительныхСкидок()

// Функция возвращает таблицу значений, выгруженную из результата запроса по скидкам.
//
// Параметры:
//  ДатаСкидок - дата, на которую необходимо рассчитать скидки.
//  МассивНоменклатуры - массив с номенклатурой.
//  МассивХарактеристик - массив с характеристиками номенклатуры.
//  МассивКачество - массив с качеством.
//  МассивПолучателей - массив с получателями скидки.
//  КурсКратность - Кратность валюты документа / курс валюты документа.
//  СуммаДокумента - сумма документа.
//  ВидОплаты - вид оплаты.
//  ДисконтнаяКарта - дисконтная карта.
//  УчетнаяПолитика - структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ЗапросПоСкидкамСтарый(ДатаСкидок, МассивНоменклатуры, МассивХарактеристик, МассивКачество,
	МассивПолучателей, КурсКратность, СуммаДокумента, ВидОплаты, ДисконтнаяКарта, УчетнаяПолитика, ДокументОбъект, МассивБрендообъемов, МассивТоварныхКатегорий) //m.ionov@a-prof.ru 24.12.2014
	
	Если ЗначениеЗаполнено(ДисконтнаяКарта)
		И УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
		И УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
		И УчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте Тогда
		ЭтоНакопительнаяСкидка = Истина;
	Иначе
		ЭтоНакопительнаяСкидка = Ложь;
	КонецЕсли;
	
	//m.ionov@a-prof.ru 24.12.2014
	ЭтоНакопительнаяСкидка = Ложь;
	//----m.ionov@a-prof.ru---
	
	Если ЭтоНакопительнаяСкидка Тогда
		ПериодНакопления = ПолучитьПериодРасчетаНакопительныхСкидок(ДатаСкидок, УчетнаяПолитика);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегПороги.ЗначениеПорога КАК ЗначениеПорога
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|	ИЗ
		|		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|		   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|	) КАК РегПродажи
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Пороги.НижняяГраница,
		|		Пороги.ЗначениеПорога
		|	ИЗ
		|		РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|	) КАК ПорогиМакс
		|	ПО
		|		Пороги.Период = ПорогиМакс.Период
		|) КАК РегПороги
		|ПО
		|	РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|		ИЗ
		|			РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|			   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|		) КАК РегПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Пороги.НижняяГраница
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|			) КАК ПорогиМакс
		|		ПО
		|			Пороги.Период = ПорогиМакс.Период
		|		) КАК РегПороги
		|	ПО
		|		РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|	) КАК РегПорогиМакс
		|ПО
		|	РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница
		|");
		
		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.ДатаКон);
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПроцентНакопительнойСкидки = Выборка.ЗначениеПорога;
		Иначе
			ПроцентНакопительнойСкидки = 0;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"                     , ДатаСкидок);
	Запрос.УстановитьПараметр("МассивНоменклатуры"       , МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивХарактеристик"      , МассивХарактеристик);
	Запрос.УстановитьПараметр("МассивКачество"           , МассивКачество);
	Запрос.УстановитьПараметр("МассивПолучателей"        , МассивПолучателей);
	Запрос.УстановитьПараметр("ДеньНедели"               , Перечисления.ДниНедели[ДеньНедели(ДатаСкидок) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя"             , Дата(1, 1, 1, Час(ДатаСкидок), Минута(ДатаСкидок), Секунда(ДатаСкидок)));
	Запрос.УстановитьПараметр("КурсКратность"            , КурсКратность);
	Запрос.УстановитьПараметр("Сумма"                    , СуммаДокумента);
	Запрос.УстановитьПараметр("ВидОплаты"                , ВидОплаты);
	Запрос.УстановитьПараметр("ДисконтнаяКарта"          , ДисконтнаяКарта);
	Запрос.УстановитьПараметр("ВидДисконтнойКарты"       , ДисконтнаяКарта.ВидДисконтнойКарты);
	
	Если ЭтоНакопительнаяСкидка Тогда
		Запрос.УстановитьПараметр("ПроцентНакопительнойСкидки" , ПроцентНакопительнойСкидки);
	КонецЕсли;
	
	//m.ionov@a-prof.ru 24.12.2014
	//Меняем запрос получения скидок, типовой запрос оставляем для накопительных скидок
	Если ЭтоНакопительнаяСкидка Тогда
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Номенклатура КАК Номенклатура,
		|	СпрНоменклатура.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СпрКачество.Ссылка КАК Качество,
		|	РегСкидкиНоменклатуры.Условие КАК НУсловие,
		|	РегСкидкиНоменклатуры.ЗначениеУсловия КАК НЗначениеУсловия,
		|	РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки КАК НОграничениеСкидкиНаценки,
		|	" + ?(ЭтоНакопительнаяСкидка, "ВЫБОР КОГДА РегСкидкиНоменклатуры.ПроцентСкидкиНаценки ЕСТЬ НЕ NULL
		|	И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
		|	ИЛИ РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)) ТОГДА &ПроцентНакопительнойСкидки ИНАЧЕ РегСкидкиНоменклатуры.ПроцентСкидкиНаценки КОНЕЦ", "РегСкидкиНоменклатуры.ПроцентСкидкиНаценки") + " КАК НПроцентСкидкиНаценки,
		|	РегСкидкиПоЦеновымГруппам.Условие КАК ЦУсловие,
		|	РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЦЗначениеУсловия,
		|	РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки КАК ЦОграничениеСкидкиНаценки,
		|	" + ?(ЭтоНакопительнаяСкидка, "ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки ЕСТЬ НЕ NULL
		|	И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
		|	ИЛИ РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)) ТОГДА &ПроцентНакопительнойСкидки ИНАЧЕ РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки КОНЕЦ", "РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки") + " КАК ЦПроцентСкидкиНаценки
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Номенклатура,
		|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|	ГДЕ
		|		СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		СпрХарактеристики.Владелец,
		|		СпрХарактеристики.Ссылка
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|	ГДЕ
		|		СпрХарактеристики.Ссылка В (&МассивХарактеристик)
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	) КАК СпрНоменклатура
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.Качество КАК СпрКачество
		|	ПО
		|	СпрКачество.Ссылка В (&МассивКачество)
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		РегСкидкиНоменклатуры.Номенклатура,
		|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
		|		РегСкидкиНоменклатуры.Качество,
		|		РегСкидкиНоменклатуры.Условие,
		|		ВЫБОР КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
		|			ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ
		|			РегСкидкиНоменклатуры.ЗначениеУсловия
		|		КОНЕЦ КАК ЗначениеУсловия,
		|		МАКСИМУМ(РегСкидкиНоменклатуры.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
		|		РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
		|	ИЗ
		|		РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Дата,
		|		   Номенклатура В (&МассивНоменклатуры)
		|		   И Качество В (&МассивКачество)
		|		   И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
		|	ПО
		|		РегСкидкиНоменклатуры.Регистратор = ВремяДействия.Регистратор
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
		|	ПО
		|		РегСкидкиНоменклатуры.Валюта = КурсыВалют.Валюта
		|	ГДЕ
		|		(ВремяДействия.ДеньНедели ЕСТЬ NULL
		|		   ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
		|		   И &ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
		|		   И РегСкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		//|		   И РегСкидкиНоменклатуры.ПроцентСкидкиНаценки <> 0
		|		   И (РегСкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ИЛИ КОНЕЦПЕРИОДА(РегСкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Дата)
		|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) И ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
		|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидОплаты ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
		|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидДисконтнойКарты ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
		|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ДисконтнаяКарта ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
		|	СГРУППИРОВАТЬ ПО
		|		РегСкидкиНоменклатуры.Номенклатура,
		|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
		|		РегСкидкиНоменклатуры.Качество,
		|		РегСкидкиНоменклатуры.Условие,
		|		ВЫБОР КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
		|			ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ
		|			РегСкидкиНоменклатуры.ЗначениеУсловия
		|		КОНЕЦ,
		|		РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|	) КАК РегСкидкиНоменклатуры
		|ПО
		|	СпрНоменклатура.Номенклатура = РегСкидкиНоменклатуры.Номенклатура
		|	   И (СпрНоменклатура.ХарактеристикаНоменклатуры = РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры ИЛИ РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|	   И СпрКачество.Ссылка = РегСкидкиНоменклатуры.Качество
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
		|		РегСкидкиПоЦеновымГруппам.Качество,
		|		РегСкидкиПоЦеновымГруппам.Условие,
		|		ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
		|			ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ
		|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
		|		КОНЕЦ КАК ЗначениеУсловия,
		|		МАКСИМУМ(РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
		|		РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
		|	ИЗ
		|		РегистрСведений.СкидкиНаценкиПоЦеновымГруппам.СрезПоследних(&Дата, Качество В (&МассивКачество) И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиПоЦеновымГруппам
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
		|	ПО
		|		РегСкидкиПоЦеновымГруппам.Регистратор = ВремяДействия.Регистратор
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
		|	ПО
		|		РегСкидкиПоЦеновымГруппам.Валюта = КурсыВалют.Валюта
		|	ГДЕ
		|		(ВремяДействия.ДеньНедели ЕСТЬ NULL
		|		   ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
		|		   И &ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
		|		   И РегСкидкиПоЦеновымГруппам.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		//|		   И РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки <> 0
		|		   И(РегСкидкиПоЦеновымГруппам.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ИЛИ КОНЕЦПЕРИОДА(РегСкидкиПоЦеновымГруппам.ДатаОкончания, ДЕНЬ) >= &Дата)
		|		   И(РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) И ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
		|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидОплаты ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
		|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидДисконтнойКарты ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
		|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ДисконтнаяКарта ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
		|	СГРУППИРОВАТЬ ПО
		|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
		|		РегСкидкиПоЦеновымГруппам.Качество,
		|		РегСкидкиПоЦеновымГруппам.Условие,
		|		ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
		|			ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ
		|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
		|		КОНЕЦ,
		|		РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|	) КАК РегСкидкиПоЦеновымГруппам
		|ПО
		|	СпрНоменклатура.Номенклатура.ЦеноваяГруппа = РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа
		|	   И СпрКачество.Ссылка = РегСкидкиПоЦеновымГруппам.Качество
		|ГДЕ
		|	РегСкидкиНоменклатуры.Условие ЕСТЬ НЕ NULL
		|	ИЛИ РегСкидкиПоЦеновымГруппам.Условие ЕСТЬ НЕ NULL
		|";
		
	Иначе
		
		Запрос.УстановитьПараметр("МассивБрендообъемов"       , МассивБрендообъемов);
		Запрос.УстановитьПараметр("МассивТоварныхКатегорий"   , МассивТоварныхКатегорий);
		
		Запрос.УстановитьПараметр("ДатаОстатков"       , Новый Граница(ДокументОбъект.МоментВремени(), ВидГраницы.Исключая));
		
		//bolshevykh@a-prof.ru 05.05.2015
		СписокДивизионАдрес = Новый Массив;
		//Если ДокументОбъект.Метаданные().Реквизиты.Найти("Грузополучатель") <> Неопределено и ТипЗнч(ДокументОбъект.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") тогда
		//	Запрос.УстановитьПараметр("ПЦ_Дивизион", ДокументОбъект.Грузополучатель.Дивизион);
		//	Запрос.УстановитьПараметр("ПЦ_Адрес", ДокументОбъект.Грузополучатель);
		//ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПР_Претензия") тогда
		//	Если ЗначениеЗаполнено(ДокументОбъект.Накладная) Тогда
		//		Если ТипЗнч(ДокументОбъект.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") и ТипЗнч(ДокументОбъект.Накладная.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
		//			Запрос.УстановитьПараметр("ПЦ_Дивизион", ДокументОбъект.Накладная.Грузополучатель.Дивизион);
		//			Запрос.УстановитьПараметр("ПЦ_Адрес", ДокументОбъект.Накладная.Грузополучатель);
		//		ИначеЕсли ТипЗнч(ДокументОбъект.Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") и ТипЗнч(ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда	
		//			Запрос.УстановитьПараметр("ПЦ_Дивизион", ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель.Дивизион);
		//			Запрос.УстановитьПараметр("ПЦ_Адрес", ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель);
		//		Иначе
		//			Запрос.УстановитьПараметр("ПЦ_Дивизион", Справочники.ПРГДивизионы.ПустаяСсылка());
		//			Запрос.УстановитьПараметр("ПЦ_Адрес", Справочники.АдресаПоставки.ПустаяСсылка());
		//		КонецЕсли; 		
		//	Иначе 
		//		Запрос.УстановитьПараметр("ПЦ_Дивизион", Справочники.ПРГДивизионы.ПустаяСсылка());
		//		Запрос.УстановитьПараметр("ПЦ_Адрес", Справочники.АдресаПоставки.ПустаяСсылка());
		//	КонецЕсли;	
		//Иначе
		//	Запрос.УстановитьПараметр("ПЦ_Дивизион", Справочники.ПРГДивизионы.ПустаяСсылка());
		//	Запрос.УстановитьПараметр("ПЦ_Адрес", Справочники.АдресаПоставки.ПустаяСсылка());
		//КонецЕсли;
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Грузополучатель") <> Неопределено и ТипЗнч(ДокументОбъект.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") тогда
			СписокДивизионАдрес.Добавить(ДокументОбъект.Грузополучатель.Дивизион);
			СписокДивизионАдрес.Добавить(ДокументОбъект.Грузополучатель);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПР_Претензия") тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Накладная) Тогда
				Если ТипЗнч(ДокументОбъект.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") и ТипЗнч(ДокументОбъект.Накладная.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
					СписокДивизионАдрес.Добавить(ДокументОбъект.Накладная.Грузополучатель.Дивизион);
					СписокДивизионАдрес.Добавить(ДокументОбъект.Накладная.Грузополучатель);
				ИначеЕсли ТипЗнч(ДокументОбъект.Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") и ТипЗнч(ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда	
					СписокДивизионАдрес.Добавить(ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель.Дивизион);
					СписокДивизионАдрес.Добавить(ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель);
				Иначе
					СписокДивизионАдрес.Добавить(Справочники.ПРГДивизионы.ПустаяСсылка());
					СписокДивизионАдрес.Добавить(Справочники.АдресаПоставки.ПустаяСсылка());
				КонецЕсли; 		
			Иначе 
				СписокДивизионАдрес.Добавить(Справочники.ПРГДивизионы.ПустаяСсылка());
				СписокДивизионАдрес.Добавить(Справочники.АдресаПоставки.ПустаяСсылка());
			КонецЕсли;	
		Иначе
			СписокДивизионАдрес.Добавить(Справочники.ПРГДивизионы.ПустаяСсылка());
			СписокДивизионАдрес.Добавить(Справочники.АдресаПоставки.ПустаяСсылка());
		КонецЕсли;
		
		СписокДивизионАдрес.Добавить(Неопределено);
		Запрос.УстановитьПараметр("СписокДивизионАдрес", СписокДивизионАдрес);
		//>>24.05.16 Степанов добавить дату для исключения из массива скидок тех приказов, которые были впоследствии отменены
		Запрос.УстановитьПараметр("ДатаДокумента", ДокументОбъект.Дата);
		//<<
		
		//--------bolshevykh@a-prof.ru 05.05.2015
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Номенклатура КАК Номенклатура,
		|	СпрНоменклатура.Брендообъем КАК Брендообъем,
		|	СпрНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	СпрНоменклатура.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СпрКачество.Ссылка КАК Качество,
		|	РегСкидкиНоменклатуры.Условие КАК НУсловие,
		|	РегСкидкиНоменклатуры.ЗначениеУсловия КАК НЗначениеУсловия,
		|	РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки КАК НОграничениеСкидкиНаценки,
		|	РегСкидкиНоменклатуры.ПроцентСкидкиНаценки КАК НПроцентСкидкиНаценки,
		|	РегСкидкиПоЦеновымГруппам.Условие КАК ЦУсловие,
		|	РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЦЗначениеУсловия,
		|	РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки КАК ЦОграничениеСкидкиНаценки,
		|	РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки КАК ЦПроцентСкидкиНаценки,
		|	ЕСТЬNULL(РегСкидкиНоменклатуры.ОстатокКоличества,0) КАК ОстатокКоличества,
		|	ЕСТЬNULL(РегСкидкиНоменклатуры.ОстатокСкидки,0) КАК ОстатокСкидки,
		|	РегСкидкиНоменклатуры.УстановкаСкидокНоменклатуры,
		|	ЕСТЬNULL(РегСкидкиНоменклатуры.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки,0) КАК ОграниченияСкидки
		//++ Spl_Апроф 05.05.2015 (k.russkih@a-prof.ru)
		|	, РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес КАК ПЦ_ДивизионАдрес 
		//-- Spl_Апроф
		//bolshevykh@a-prof.ru 06.05.2015
		|	 ,ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес) = ТИП(Справочник.АдресаПоставки)
		|			ТОГДА 1
		|		КОГДА ТИПЗНАЧЕНИЯ(РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес) = ТИП(Справочник.ПРГДивизионы)
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Порядок
		//>>240516 Степанов для учета документов по отмене скидок
		|   ПОМЕСТИТЬ ВТ_ТаблицаСкидок
		//<<
		//---------bolshevykh@a-prof.ru 06.05.2015
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Номенклатура,
		|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		|		ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка) КАК Брендообъем,
		|		ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка) КАК ТоварнаяКатегория
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|	ГДЕ
		|		СпрНоменклатура.Ссылка В(&МассивНоменклатуры)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СпрХарактеристики.Владелец,
		|		СпрХарактеристики.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|	ГДЕ
		|		СпрХарактеристики.Ссылка В(&МассивХарактеристик)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|		СпрБрендообъемы.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|	ИЗ
		|		Справочник.НСИ_Брендообъемы КАК СпрБрендообъемы
		|	ГДЕ
		|		СпрБрендообъемы.Ссылка В(&МассивБрендообъемов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка),
		|		СпрТоварныеКатегории.Ссылка
		|	ИЗ
		|		Справочник.НСИ_ТоварныеКатегории КАК СпрТоварныеКатегории
		|	ГДЕ
		|		СпрТоварныеКатегории.Ссылка В(&МассивТоварныхКатегорий)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)) КАК СпрНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Качество КАК СпрКачество
		|		ПО (СпрКачество.Ссылка В (&МассивКачество))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РегСкидкиНоменклатуры.Регистратор КАК УстановкаСкидокНоменклатуры,
		|			РегСкидкиНоменклатуры.Номенклатура КАК Номенклатура,
		|			РегСкидкиНоменклатуры.ПЦ_Брендообъем КАК Брендообъем,
		|			РегСкидкиНоменклатуры.ПЦ_ТоварнаяКатегория КАК ТоварнаяКатегория,
		|			РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			РегСкидкиНоменклатуры.Качество КАК Качество,
		|			РегСкидкиНоменклатуры.Условие КАК Условие,
		|			ВЫБОР
		|				КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
		|					ТОГДА (ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО)) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|				ИНАЧЕ РегСкидкиНоменклатуры.ЗначениеУсловия
		|			КОНЕЦ КАК ЗначениеУсловия,
		|			МАКСИМУМ(РегСкидкиНоменклатуры.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
		|			РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки,
		|			0 КАК ОстатокКоличества,
		|			0 КАК ОстатокСкидки
		//|			ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток КАК ОстатокКоличества,
		//|			ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОстатокСкидки
		//++ Spl_Апроф 05.05.2015 (k.russkih@a-prof.ru)
		|            , РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес КАК ПЦ_ДивизионАдрес
		//-- Spl_Апроф
		|		ИЗ
		|  РегистрСведений.СкидкиНаценкиНоменклатуры КАК РегСкидкиНоменклатуры
		//|			РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
		//|					&Дата,
		//|					Номенклатура В (&МассивНоменклатуры)
		//|						И Качество В (&МассивКачество)
		//|						И ПЦ_Брендообъем В (&МассивБрендообъемов)
		//|						И ПЦ_ТоварнаяКатегория В (&МассивТоварныхКатегорий)
		//|						И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиНоменклатуры
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
		|				ПО РегСкидкиНоменклатуры.Регистратор = ВремяДействия.Регистратор
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
		|				ПО РегСкидкиНоменклатуры.Валюта = КурсыВалют.Валюта
		//|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(&ДатаОстатков, ) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
		//|				ПО РегСкидкиНоменклатуры.Регистратор = ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры
		//|					И (ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки)
		//|						ИЛИ ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)
		//|						ИЛИ РегСкидкиНоменклатуры.Номенклатура = ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура
		//|							И РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры = ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры
		//|							И РегСкидкиНоменклатуры.ПЦ_ТоварнаяКатегория = ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория
		//|							И РегСкидкиНоменклатуры.ПЦ_Брендообъем = ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем)
		//|					И (РегСкидкиНоменклатуры.ПолучательСкидки = ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент
		//|						ИЛИ РегСкидкиНоменклатуры.ПолучательСкидки = ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента)
		|		ГДЕ
		|					НАЧАЛОПЕРИОДА(РегСкидкиНоменклатуры.ПЕРИОД, ДЕНЬ) <= &Дата
		|					И РегСкидкиНоменклатуры.Номенклатура В (&МассивНоменклатуры)
		|						И РегСкидкиНоменклатуры.Качество В (&МассивКачество)
		|						И РегСкидкиНоменклатуры.ПЦ_Брендообъем В (&МассивБрендообъемов)
		|						И РегСкидкиНоменклатуры.ПЦ_ТоварнаяКатегория В (&МассивТоварныхКатегорий)
		|						И РегСкидкиНоменклатуры.ПолучательСкидки В (&МассивПолучателей)
		|			И (ВремяДействия.ДеньНедели ЕСТЬ NULL 
		|					ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
		|						И (&ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания))
		|			И РегСкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			И (РегСкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ КОНЕЦПЕРИОДА(РегСкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Дата)
		|			И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
		|						И (ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО)) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма
		|					ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
		|			И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты)
		|						И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидОплаты
		|					ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
		|			И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)
		|						И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидДисконтнойКарты
		|					ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
		|			И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
		|						И РегСкидкиНоменклатуры.ЗначениеУсловия = &ДисконтнаяКарта
		|					ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
		//bolshevykh@a-prof.ru 24.04.2015
		//|			И (РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес = &ПЦ_Дивизион ИЛИ РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес = &ПЦ_Адрес ИЛИ РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес = неопределено) 
		|			И РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес В(&СписокДивизионАдрес)
		//--------bolshevykh@a-prof.ru 24.04.2015
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегСкидкиНоменклатуры.Регистратор,
		|			РегСкидкиНоменклатуры.Номенклатура,
		|			РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
		|			РегСкидкиНоменклатуры.ПЦ_Брендообъем,
		|			РегСкидкиНоменклатуры.ПЦ_ТоварнаяКатегория,
		|			РегСкидкиНоменклатуры.Качество,
		|			РегСкидкиНоменклатуры.Условие,
		|			ВЫБОР
		|				КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
		|					ТОГДА (ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО)) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|				ИНАЧЕ РегСкидкиНоменклатуры.ЗначениеУсловия
		|			КОНЕЦ,
		|			РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		//++ Spl_Апроф 05.05.2015 (k.russkih@a-prof.ru)
		|            , РегСкидкиНоменклатуры.ПЦ_ДивизионАдрес) КАК РегСкидкиНоменклатуры
		//-- Spl_Апроф
		//|			ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток,
		//|			ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность) КАК РегСкидкиНоменклатуры
		|		ПО СпрНоменклатура.Номенклатура = РегСкидкиНоменклатуры.Номенклатура
		|			И (СпрНоменклатура.ХарактеристикаНоменклатуры = РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры
		|				ИЛИ РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (СпрНоменклатура.ТоварнаяКатегория = РегСкидкиНоменклатуры.ТоварнаяКатегория
		|				ИЛИ РегСкидкиНоменклатуры.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка))
		|			И (СпрНоменклатура.Брендообъем = РегСкидкиНоменклатуры.Брендообъем
		|				ИЛИ РегСкидкиНоменклатуры.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка))
		|			И (СпрКачество.Ссылка = РегСкидкиНоменклатуры.Качество)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|			РегСкидкиПоЦеновымГруппам.Качество КАК Качество,
		|			РегСкидкиПоЦеновымГруппам.Условие КАК Условие,
		|			ВЫБОР
		|				КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
		|					ТОГДА (ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО)) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|				ИНАЧЕ РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
		|			КОНЕЦ КАК ЗначениеУсловия,
		|			МАКСИМУМ(РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
		|			РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
		|		ИЗ
		|			РегистрСведений.СкидкиНаценкиПоЦеновымГруппам.СрезПоследних(
		|					&Дата,
		|					Качество В (&МассивКачество)
		|						И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиПоЦеновымГруппам
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
		|				ПО РегСкидкиПоЦеновымГруппам.Регистратор = ВремяДействия.Регистратор
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
		|				ПО РегСкидкиПоЦеновымГруппам.Валюта = КурсыВалют.Валюта
		|		ГДЕ
		|			(ВремяДействия.ДеньНедели ЕСТЬ NULL 
		|					ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
		|						И (&ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания))
		|			И РегСкидкиПоЦеновымГруппам.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			И (РегСкидкиПоЦеновымГруппам.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ КОНЕЦПЕРИОДА(РегСкидкиПоЦеновымГруппам.ДатаОкончания, ДЕНЬ) >= &Дата)
		|			И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
		|						И (ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО)) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма
		|					ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
		|			И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты)
		|						И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидОплаты
		|					ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
		|			И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)
		|						И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидДисконтнойКарты
		|					ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
		|			И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
		|						И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ДисконтнаяКарта
		|					ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
		|			РегСкидкиПоЦеновымГруппам.Качество,
		|			РегСкидкиПоЦеновымГруппам.Условие,
		|			ВЫБОР
		|				КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
		|					ТОГДА (ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО)) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
		|				ИНАЧЕ РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
		|			КОНЕЦ,
		|			РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность) КАК РегСкидкиПоЦеновымГруппам
		|		ПО СпрНоменклатура.Номенклатура.ЦеноваяГруппа = РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа
		|			И (СпрКачество.Ссылка = РегСкидкиПоЦеновымГруппам.Качество)
		|ГДЕ
		|	(РегСкидкиНоменклатуры.Условие ЕСТЬ НЕ NULL 
		//bolshevykh@a-prof.ru 06.05.2015
		//|			ИЛИ РегСкидкиПоЦеновымГруппам.Условие ЕСТЬ НЕ NULL )";
		|			ИЛИ РегСкидкиПоЦеновымГруппам.Условие ЕСТЬ НЕ NULL )
		//>>240516 Степанов создана временная таблица и на нее наложен фильтр: не выбираются записи, сделанные отменой скидок, и записи по отмененным ранее периодическим приказам
		//|УПОРЯДОЧИТЬ ПО Порядок";
		//---------bolshevykh@a-prof.ru 06.05.2015
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаСкидок.Номенклатура,
		|	ВТ_ТаблицаСкидок.Брендообъем,
		|	ВТ_ТаблицаСкидок.ТоварнаяКатегория,
		|	ВТ_ТаблицаСкидок.ХарактеристикаНоменклатуры,
		|	ВТ_ТаблицаСкидок.Качество,
		|	ВТ_ТаблицаСкидок.НУсловие,
		|	ВТ_ТаблицаСкидок.НЗначениеУсловия,
		|	ВТ_ТаблицаСкидок.НОграничениеСкидкиНаценки,
		|	ВТ_ТаблицаСкидок.НПроцентСкидкиНаценки,
		|	ВТ_ТаблицаСкидок.ЦУсловие,
		|	ВТ_ТаблицаСкидок.ЦЗначениеУсловия,
		|	ВТ_ТаблицаСкидок.ЦОграничениеСкидкиНаценки,
		|	ВТ_ТаблицаСкидок.ЦПроцентСкидкиНаценки,
		|	ВТ_ТаблицаСкидок.ОстатокКоличества,
		|	ВТ_ТаблицаСкидок.ОстатокСкидки,
		|	ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры,
		|	ВТ_ТаблицаСкидок.ОграниченияСкидки,
		|	ВТ_ТаблицаСкидок.ПЦ_ДивизионАдрес,
		|	ВТ_ТаблицаСкидок.Порядок КАК Порядок
		|ИЗ
		|	ВТ_ТаблицаСкидок КАК ВТ_ТаблицаСкидок
		|ГДЕ
		|	НЕ(ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры ССЫЛКА Документ.ОтменаСкидокНоменклатуры
		|				ИЛИ ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры
		|					ИЗ
		|						Документ.ОтменаСкидокНоменклатуры.Документы КАК ОтменаСкидокНоменклатурыДокументы
		|					ГДЕ
		|						ОтменаСкидокНоменклатурыДокументы.Ссылка.Проведен
		|						И ОтменаСкидокНоменклатурыДокументы.Ссылка.Дата <= &ДатаДокумента
		|))
		//|						И ВТ_ТаблицаСкидок.ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.Период)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		//<<240516
		
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗапросПоСкидкам()

//>>
// Функция возвращает таблицу значений, выгруженную из результата запроса по скидкам.
//
// Параметры:
//  ДатаСкидок - дата, на которую необходимо рассчитать скидки.
//  МассивНоменклатуры - массив с номенклатурой.
//  МассивХарактеристик - массив с характеристиками номенклатуры.
//  МассивКачество - массив с качеством.
//  МассивПолучателей - массив с получателями скидки.
//  КурсКратность - Кратность валюты документа / курс валюты документа.
//  СуммаДокумента - сумма документа.
//  ВидОплаты - вид оплаты.
//  ДисконтнаяКарта - дисконтная карта.
//  УчетнаяПолитика - структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
//Функция ЗапросПоСкидкам(ДатаСкидок, МассивНоменклатуры, КурсКратность, СуммаДокумента, УчетнаяПолитика, ДокументОбъект, МассивБрендообъемов, МассивТоварныхКатегорий) 
Функция ЗапросПоСкидкам(ДатаСкидок, ДокументОбъект, ТЧТовары) Экспорт //>>10.08.2016 Степанов
	
	Контрагент         = ДокументОбъект.Контрагент;
	ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
	АдресПоставки      = Справочники.АдресаПоставки.ПустаяСсылка();
	Дивизион           = Справочники.ПРГДивизионы.ПустаяСсылка();
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ПР_Претензия") или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПР_Претензия") Тогда
		Грузополучатель = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ДокументОбъект.Ссылка,"Накладная.Грузополучатель");
		Если ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") тогда
			АдресПоставки  = Грузополучатель;
			Дивизион       = АдресПоставки.Дивизион;
		КонецЕсли;
	Иначе	
		Если ТипЗнч(ДокументОбъект.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") тогда
			АдресПоставки  = ДокументОбъект.Грузополучатель;
			Дивизион       = АдресПоставки.Дивизион;
		КонецЕсли;
	КонецЕсли; 
	
	МассивЛимитированныеОграничения = Новый Массив;
	МассивЛимитированныеОграничения.Добавить(Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг);
	МассивЛимитированныеОграничения.Добавить(Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем);
	МассивЛимитированныеОграничения.Добавить(Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСкидок"                     , ДатаСкидок);
	Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);							
	Запрос.УстановитьПараметр("НаДату", ДокументОбъект.Дата);
    Запрос.УстановитьПараметр("ТЧТовары",ТЧТовары);	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	Запрос.УстановитьПараметр("АдресПоставки",АдресПоставки);
	Запрос.УстановитьПараметр("Дивизион",Дивизион);
	Запрос.УстановитьПараметр("ЛимитированныеОграничения",МассивЛимитированныеОграничения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ПолучательСкидки,
	|	ВложенныйЗапрос.Контрагент
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПолучателиСкидки.Ссылка КАК ПолучательСкидки,
	|		ПолучателиСкидки.Контрагент КАК Контрагент
	|	ИЗ
	|		Справочник.ПолучателиСкидки КАК ПолучателиСкидки
	|	ГДЕ
	|		ПолучателиСкидки.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Пустаяссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПолучателиСкидкиКонтрагенты.Ссылка,
	|		ПолучателиСкидкиКонтрагенты.Контрагент
	|	ИЗ
	|		Справочник.ПолучателиСкидки.Контрагенты КАК ПолучателиСкидкиКонтрагенты
	|	ГДЕ
	|		ПолучателиСкидкиКонтрагенты.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Пустаяссылка)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ПолучательСкидки,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_Договора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПолучателиСкидки.Ссылка КАК ПолучательСкидки,
	|		ПолучателиСкидки.Контрагент КАК Контрагент,
	|		ПолучателиСкидки.ДоговорКонтрагента КАК ДоговорКонтрагента
	|	ИЗ
	|		Справочник.ПолучателиСкидки КАК ПолучателиСкидки
	|	ГДЕ
	|		ПолучателиСкидки.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПолучателиСкидкиДоговорыКонтрагентов.Ссылка,
	|		ПолучателиСкидкиДоговорыКонтрагентов.Контрагент,
	|		ПолучателиСкидкиДоговорыКонтрагентов.ДоговорКонтрагента
	|	ИЗ
	|		Справочник.ПолучателиСкидки.ДоговорыКонтрагентов КАК ПолучателиСкидкиДоговорыКонтрагентов
	|	ГДЕ
	|		ПолучателиСкидкиДоговорыКонтрагентов.Ссылка.ФлОтборПоДоговорам
	|		И ПолучателиСкидкиДоговорыКонтрагентов.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ПолучательСкидки,
//	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Дивизион
	|ПОМЕСТИТЬ ВТ_Дивизионы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПолучателиСкидки.Ссылка КАК ПолучательСкидки,
//	|		ПолучателиСкидки.Контрагент КАК Контрагент,
	|		ПолучателиСкидки.Дивизион КАК Дивизион
	|	ИЗ
	|		Справочник.ПолучателиСкидки КАК ПолучателиСкидки
	|	ГДЕ
	|		ПолучателиСкидки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПолучателиСкидкиДивизионы.Ссылка,
//	|		ПолучателиСкидкиДивизионы.Контрагент,
	|		ПолучателиСкидкиДивизионы.Дивизион
	|	ИЗ
	|		Справочник.ПолучателиСкидки.Дивизионы КАК ПолучателиСкидкиДивизионы
	|	ГДЕ
	|		ПолучателиСкидкиДивизионы.Ссылка.ФлОтборПоДивизиону
	|		И ПолучателиСкидкиДивизионы.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ПолучательСкидки,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.АдресПоставки
	|ПОМЕСТИТЬ ВТ_АП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПолучателиСкидки.Ссылка КАК ПолучательСкидки,
	|		ПолучателиСкидки.Контрагент КАК Контрагент,
	|		ПолучателиСкидки.АдресПоставки КАК АдресПоставки
	|	ИЗ
	|		Справочник.ПолучателиСкидки КАК ПолучателиСкидки
	|	ГДЕ
	|		ПолучателиСкидки.АдресПоставки <> ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПолучателиСкидкиАдресаПоставки.Ссылка,
	|		ПолучателиСкидкиАдресаПоставки.Контрагент,
	|		ПолучателиСкидкиАдресаПоставки.АдресПоставки
	|	ИЗ
	|		Справочник.ПолучателиСкидки.АдресаПоставки КАК ПолучателиСкидкиАдресаПоставки
	|	ГДЕ
	|		ПолучателиСкидкиАдресаПоставки.Ссылка.ФлОтборПоАП
	|		И ПолучателиСкидкиАдресаПоставки.АдресПоставки <> ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Контрагенты.ПолучательСкидки КАК ПолучательСкидки,
	|	ВТ_Контрагенты.Контрагент КАК Контрагент,
	|	ВТ_Договора.ДоговорКонтрагента,
	|	ВТ_Дивизионы.Дивизион,
	|	ВТ_АП.АдресПоставки
	|ПОМЕСТИТЬ ВТ_ПолнаяТаблицаПолучателейСкидок
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО ВТ_Контрагенты.Контрагент = ВТ_Договора.Контрагент
	|			И ВТ_Контрагенты.ПолучательСкидки = ВТ_Договора.ПолучательСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Дивизионы КАК ВТ_Дивизионы
	//|		ПО ВТ_Контрагенты.Контрагент = ВТ_Дивизионы.Контрагент
	//|			И ВТ_Контрагенты.ПолучательСкидки = ВТ_Дивизионы.ПолучательСкидки
	|		ПО ВТ_Контрагенты.ПолучательСкидки = ВТ_Дивизионы.ПолучательСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АП КАК ВТ_АП
	|		ПО ВТ_Контрагенты.Контрагент = ВТ_АП.Контрагент
	|			И ВТ_Контрагенты.ПолучательСкидки = ВТ_АП.ПолучательСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПолнаяТаблица.ПолучательСкидки
	|ПОМЕСТИТЬ ВТ_Получатели
	|ИЗ
	|	ВТ_ПолнаяТаблицаПолучателейСкидок КАК ВТ_ПолнаяТаблица
	|ГДЕ
	|	ВТ_ПолнаяТаблица.Контрагент = &Контрагент
	|	И (ВТ_ПолнаяТаблица.ДоговорКонтрагента = &ДоговорКонтрагента
	|			ИЛИ ВТ_ПолнаяТаблица.ДоговорКонтрагента ЕСТЬ NULL )
	|	И (ВТ_ПолнаяТаблица.Дивизион = &Дивизион
	|			ИЛИ ВТ_ПолнаяТаблица.Дивизион ЕСТЬ NULL )
	|	И (ВТ_ПолнаяТаблица.АдресПоставки = &АдресПоставки
	|			ИЛИ ВТ_ПолнаяТаблица.АдресПоставки ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка КАК УстановкаСкидокНоменклатуры,
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ДатаНачала КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ДатаОкончания, ДЕНЬ) КАК ДатаОкончания,
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.НомерСтроки КАК НомерСтрокиПолучателя,
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент,
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.ДоговорКонтрагента,
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_Дивизион,
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_АдресПоставки,
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПолучательСкидки,
	|	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ПЦ_ОграниченияСкидки КАК ТипОграничения,
	|	ВЫБОР
	|		КОГДА УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки)
	|			ТОГДА ВЫРАЗИТЬ(УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_ОграничениеСкидкиНаценки КАК ЧИСЛО(15, 2))
	|		КОГДА УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)
	|			ТОГДА ВЫРАЗИТЬ(УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_ОграничениеСкидкиНаценки КАК Документ.ПКК_АктНачисленияБонусовУслуг)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СуммаОграничение
	|ПОМЕСТИТЬ ВТ_ПриказыПоПолучателямИПериодам
	|ИЗ
	|	Документ.УстановкаСкидокНоменклатуры.ПолучателиСкидки КАК УстановкаСкидокНоменклатурыПолучателиСкидки
	|ГДЕ
	|	(УстановкаСкидокНоменклатурыПолучателиСкидки.ПолучательСкидки В
	|				(ВЫБРАТЬ
	|					ВТ_Получатели.ПолучательСкидки
	|				ИЗ
	|					ВТ_Получатели)
	|			ИЛИ УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент = &Контрагент
	|				И (УстановкаСкидокНоменклатурыПолучателиСкидки.ДоговорКонтрагента = &ДоговорКонтрагента
	|					ИЛИ УстановкаСкидокНоменклатурыПолучателиСкидки.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|				И (УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_Дивизион = &Дивизион
	|					ИЛИ УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_Дивизион = ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка))
	|				И (УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_АдресПоставки = &АдресПоставки
	|					ИЛИ УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_АдресПоставки = ЗНАЧЕНИЕ(Справочник.АдресаПоставки.ПустаяСсылка)))
	|	И УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ДатаНачала <= &ДатаСкидок
	|	И КОНЕЦПЕРИОДА(УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ДатаОкончания, ДЕНЬ) >= &ДатаСкидок
	|	И УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.Проведен
	|	И УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ПЦ_СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПЦ_СтатусыУстановкиСкидокНоменклатуры.Согласовано)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПриказыПоПолучателямИПериодам.УстановкаСкидокНоменклатуры.Ссылка КАК Приказ,
	|	ВТ_ПриказыПоПолучателямИПериодам.ДатаНачала,
	|	ВТ_ПриказыПоПолучателямИПериодам.ДатаОкончания,
	|	ВТ_ПриказыПоПолучателямИПериодам.ТипОграничения КАК ТипОграничения,
	|	1 КАК ДляВсейНоменклатуры,
	|	ВТ_ПриказыПоПолучателямИПериодам.УстановкаСкидокНоменклатуры.ПроцентСкидкиНаценки КАК ПроцентСкидки,
	|	NULL КАК КоличествоОграничение,
	|	ВТ_ПриказыПоПолучателямИПериодам.СуммаОграничение КАК СуммаОграничение,
	|	ВТ_ПриказыПоПолучателямИПериодам.НомерСтрокиПолучателя,
	|	ВТ_ПриказыПоПолучателямИПериодам.Контрагент,
	|	ВТ_ПриказыПоПолучателямИПериодам.ДоговорКонтрагента,
	|	ВТ_ПриказыПоПолучателямИПериодам.ПЦ_Дивизион КАК ПЦ_Дивизион,
	|	ВТ_ПриказыПоПолучателямИПериодам.ПЦ_АдресПоставки,
	|	ВТ_ПриказыПоПолучателямИПериодам.ПолучательСкидки,
	|	NULL КАК НомерСтрокиТовара,
	|	NULL КАК ОбъектСкидки,
	|	NULL КАК ТоварнаяКатегория,
	|	NULL КАК Брендообъем,
	|	NULL КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров
	|ИЗ
	|	ВТ_ПриказыПоПолучателямИПериодам КАК ВТ_ПриказыПоПолучателямИПериодам
	|ГДЕ
	|	ВТ_ПриказыПоПолучателямИПериодам.УстановкаСкидокНоменклатуры.ДляВсейНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания,
	|	ВложенныйЗапрос.ТипОграничения,
	|	0,
	|	УстановкаСкидокНоменклатурыТовары.ПроцентСкидкиНаценки,
	|	УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки,
	|	ВложенныйЗапрос.СуммаОграничение,
	|	ВложенныйЗапрос.НомерСтрокиПолучателя,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.ПЦ_Дивизион,
	|	ВложенныйЗапрос.ПЦ_АдресПоставки,
	|	ВложенныйЗапрос.ПолучательСкидки,
	|	УстановкаСкидокНоменклатурыТовары.НомерСтроки,
	|	УстановкаСкидокНоменклатурыТовары.ОбъектСкидки,
	|	УстановкаСкидокНоменклатурыТовары.ПЦ_ТоварнаяКатегория,
	|	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем,
	|	УстановкаСкидокНоменклатурыТовары.Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ПриказыПоПолучателямИПериодам.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры,
	|		ВТ_ПриказыПоПолучателямИПериодам.ДатаНачала КАК ДатаНачала,
	|		ВТ_ПриказыПоПолучателямИПериодам.ДатаОкончания КАК ДатаОкончания,
	|		ВТ_ПриказыПоПолучателямИПериодам.НомерСтрокиПолучателя КАК НомерСтрокиПолучателя,
	|		ВТ_ПриказыПоПолучателямИПериодам.Контрагент КАК Контрагент,
	|		ВТ_ПриказыПоПолучателямИПериодам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВТ_ПриказыПоПолучателямИПериодам.ПЦ_АдресПоставки КАК ПЦ_АдресПоставки,
	|		ВТ_ПриказыПоПолучателямИПериодам.ПолучательСкидки КАК ПолучательСкидки,
	|		ВТ_ПриказыПоПолучателямИПериодам.ТипОграничения КАК ТипОграничения,
	|		ВТ_ПриказыПоПолучателямИПериодам.СуммаОграничение КАК СуммаОграничение,
	|		ВТ_ПриказыПоПолучателямИПериодам.ПЦ_Дивизион КАК ПЦ_Дивизион
	|	ИЗ
	|		ВТ_ПриказыПоПолучателямИПериодам КАК ВТ_ПриказыПоПолучателямИПериодам
	|	ГДЕ
	|		ВТ_ПриказыПоПолучателямИПериодам.УстановкаСкидокНоменклатуры.ДляВсехПолучателей = ЛОЖЬ) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
	|		ПО ВложенныйЗапрос.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатурыТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.Приказ,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ДатаНачала,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ДатаОкончания,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ДляВсейНоменклатуры,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ТипОграничения,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ПроцентСкидки,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.КоличествоОграничение,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.СуммаОграничение,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.НомерСтрокиПолучателя,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.Контрагент,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ДоговорКонтрагента,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ПЦ_Дивизион,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ПЦ_АдресПоставки,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ПолучательСкидки,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.НомерСтрокиТовара,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ОбъектСкидки,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ТоварнаяКатегория,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.Брендообъем,
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ДляВсейНоменклатуры = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ(ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ОбъектСкидки ЕСТЬ NULL 
	|								ИЛИ ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ОбъектСкидки = ЗНАЧЕНИЕ(Справочник.ОбъектыСкидок.ПустаяСсылка))
	|						ТОГДА ОбъектыСкидокПолнаяНоменклатура.Номенклатура
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НЕ(ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.Номенклатура ЕСТЬ NULL 
	|										ИЛИ ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|								ТОГДА ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.Номенклатура
	|						КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК НоменклатураПолная
	|ПОМЕСТИТЬ ВТ_ПриказыСНоменклатурой
	|ИЗ
	|	ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров КАК ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыСкидок.ПолнаяНоменклатура КАК ОбъектыСкидокПолнаяНоменклатура
	|		ПО ВТ_ПриказыПоПолучателямИПериодам_СхемаТоваров.ОбъектСкидки = ОбъектыСкидокПолнаяНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.НомерСтроки,
	|	ТЧТовары.Номенклатура,
	|	ТЧТовары.Количество,
	|	ТЧТовары.Цена,
	|	ТЧТовары.Сумма,
	|	ТЧТовары.ПроцентСкидкиНаценки,
	|	ТЧТовары.ПроцентАвтоматическихСкидок,
	|	ТЧТовары.СтавкаНДС,
	|	ТЧТовары.СуммаНДС,";
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ПР_Претензия") или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПР_Претензия") Тогда
        Запрос.Текст = Запрос.Текст +"
	|	ВЫРАЗИТЬ(ТЧТовары.ПриказУстановкиСкидки КАК Документ.УстановкаСкидокНоменклатуры) КАК УстановкаСкидокНоменклатуры";
	Иначе
        Запрос.Текст = Запрос.Текст +"
	|	ВЫРАЗИТЬ(ТЧТовары.ЗначениеУсловияАвтоматическойСкидки КАК Документ.УстановкаСкидокНоменклатуры) КАК УстановкаСкидокНоменклатуры";
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст +"	
	|ПОМЕСТИТЬ ВТ_ТоварыЗаказа
	|ИЗ
	|	&ТЧТовары КАК ТЧТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыЗаказа.НомерСтроки КАК НомерСтрокиЗаказа,
	|	ВТ_ТоварыЗаказа.Номенклатура,
	|	ВТ_ТоварыЗаказа.Количество,
	|	ВТ_ТоварыЗаказа.Цена,
	|	ВТ_ТоварыЗаказа.Сумма,
	|	ВТ_ТоварыЗаказа.ПроцентСкидкиНаценки,
	|	ВТ_ТоварыЗаказа.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	ВТ_ТоварыЗаказа.СтавкаНДС,
	|	ВТ_ТоварыЗаказа.СуммаНДС,
	|	ВТ_ТоварыЗаказа.УстановкаСкидокНоменклатуры,
	|	ВТ_ПриказыСНоменклатурой.Приказ,
	|	ВТ_ПриказыСНоменклатурой.ДляВсейНоменклатуры,
	|	ВТ_ПриказыСНоменклатурой.ТипОграничения КАК ПЦ_ОграниченияСкидки,
	|	ВТ_ПриказыСНоменклатурой.ДатаНачала,
	|	ВТ_ПриказыСНоменклатурой.ДатаОкончания,
	|	ВТ_ПриказыСНоменклатурой.ПроцентСкидки КАК ПроцентСкидки,
	|	ВТ_ПриказыСНоменклатурой.КоличествоОграничение,
	|	ВТ_ПриказыСНоменклатурой.СуммаОграничение,
	|	ВТ_ПриказыСНоменклатурой.НомерСтрокиПолучателя,
	|	ВТ_ПриказыСНоменклатурой.Контрагент,
	|	ВТ_ПриказыСНоменклатурой.ДоговорКонтрагента,
	|	ВТ_ПриказыСНоменклатурой.ПЦ_Дивизион,
	|	ВТ_ПриказыСНоменклатурой.ПЦ_АдресПоставки,
	|	ВТ_ПриказыСНоменклатурой.ПолучательСкидки,
	|	ВТ_ПриказыСНоменклатурой.НомерСтрокиТовара,
	|	ВТ_ПриказыСНоменклатурой.ОбъектСкидки,
	|	ВТ_ПриказыСНоменклатурой.ТоварнаяКатегория,
	|	ВТ_ПриказыСНоменклатурой.Брендообъем,
	|	ВТ_ПриказыСНоменклатурой.Номенклатура КАК НоменклатураПриказа,
	|	ВТ_ПриказыСНоменклатурой.НоменклатураПолная
	|ПОМЕСТИТЬ ВТ_ЗаказПриказ
	|ИЗ
	|	ВТ_ТоварыЗаказа КАК ВТ_ТоварыЗаказа,
	|	ВТ_ПриказыСНоменклатурой КАК ВТ_ПриказыСНоменклатурой
	|ГДЕ
	|	ВТ_ПриказыСНоменклатурой.ДляВсейНоменклатуры = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТоварыЗаказа.НомерСтроки,
	|	ВТ_ТоварыЗаказа.Номенклатура,
	|	ВТ_ТоварыЗаказа.Количество,
	|	ВТ_ТоварыЗаказа.Цена,
	|	ВТ_ТоварыЗаказа.Сумма,
	|	ВТ_ТоварыЗаказа.ПроцентСкидкиНаценки,
	|	ВТ_ТоварыЗаказа.ПроцентАвтоматическихСкидок,
	|	ВТ_ТоварыЗаказа.СтавкаНДС,
	|	ВТ_ТоварыЗаказа.СуммаНДС,
	|	ВТ_ТоварыЗаказа.УстановкаСкидокНоменклатуры,
	|	ВТ_ПриказыСНоменклатурой.Приказ,
	|	ВТ_ПриказыСНоменклатурой.ДляВсейНоменклатуры,
	|	ВТ_ПриказыСНоменклатурой.ТипОграничения,
	|	ВТ_ПриказыСНоменклатурой.ДатаНачала,
	|	ВТ_ПриказыСНоменклатурой.ДатаОкончания,
	|	ВТ_ПриказыСНоменклатурой.ПроцентСкидки,
	|	ВТ_ПриказыСНоменклатурой.КоличествоОграничение,
	|	ВТ_ПриказыСНоменклатурой.СуммаОграничение,
	|	ВТ_ПриказыСНоменклатурой.НомерСтрокиПолучателя,
	|	ВТ_ПриказыСНоменклатурой.Контрагент,
	|	ВТ_ПриказыСНоменклатурой.ДоговорКонтрагента,
	|	ВТ_ПриказыСНоменклатурой.ПЦ_Дивизион,
	|	ВТ_ПриказыСНоменклатурой.ПЦ_АдресПоставки,
	|	ВТ_ПриказыСНоменклатурой.ПолучательСкидки,
	|	ВТ_ПриказыСНоменклатурой.НомерСтрокиТовара,
	|	ВТ_ПриказыСНоменклатурой.ОбъектСкидки,
	|	ВТ_ПриказыСНоменклатурой.ТоварнаяКатегория,
	|	ВТ_ПриказыСНоменклатурой.Брендообъем,
	|	ВТ_ПриказыСНоменклатурой.Номенклатура,
	|	ВТ_ПриказыСНоменклатурой.НоменклатураПолная
	|ИЗ
	|	ВТ_ТоварыЗаказа КАК ВТ_ТоварыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриказыСНоменклатурой КАК ВТ_ПриказыСНоменклатурой
	|		ПО ВТ_ТоварыЗаказа.Номенклатура = ВТ_ПриказыСНоменклатурой.НоменклатураПолная
	|ГДЕ
	|	ВТ_ПриказыСНоменклатурой.ДляВсейНоменклатуры <> 1
	|	И НЕ(ВТ_ПриказыСНоменклатурой.НоменклатураПолная ЕСТЬ NULL 
	|				ИЛИ ВТ_ПриказыСНоменклатурой.НоменклатураПолная = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТоварыЗаказа.НомерСтроки,
	|	ВТ_ТоварыЗаказа.Номенклатура,
	|	ВТ_ТоварыЗаказа.Количество,
	|	ВТ_ТоварыЗаказа.Цена,
	|	ВТ_ТоварыЗаказа.Сумма,
	|	ВТ_ТоварыЗаказа.ПроцентСкидкиНаценки,
	|	ВТ_ТоварыЗаказа.ПроцентАвтоматическихСкидок,
	|	ВТ_ТоварыЗаказа.СтавкаНДС,
	|	ВТ_ТоварыЗаказа.СуммаНДС,
	|	ВТ_ТоварыЗаказа.УстановкаСкидокНоменклатуры,
	|	ВТ_ПриказыСНоменклатурой.Приказ,
	|	ВТ_ПриказыСНоменклатурой.ДляВсейНоменклатуры,
	|	ВТ_ПриказыСНоменклатурой.ТипОграничения,
	|	ВТ_ПриказыСНоменклатурой.ДатаНачала,
	|	ВТ_ПриказыСНоменклатурой.ДатаОкончания,
	|	ВТ_ПриказыСНоменклатурой.ПроцентСкидки,
	|	ВТ_ПриказыСНоменклатурой.КоличествоОграничение,
	|	ВТ_ПриказыСНоменклатурой.СуммаОграничение,
	|	ВТ_ПриказыСНоменклатурой.НомерСтрокиПолучателя,
	|	ВТ_ПриказыСНоменклатурой.Контрагент,
	|	ВТ_ПриказыСНоменклатурой.ДоговорКонтрагента,
	|	ВТ_ПриказыСНоменклатурой.ПЦ_Дивизион,
	|	ВТ_ПриказыСНоменклатурой.ПЦ_АдресПоставки,
	|	ВТ_ПриказыСНоменклатурой.ПолучательСкидки,
	|	ВТ_ПриказыСНоменклатурой.НомерСтрокиТовара,
	|	ВТ_ПриказыСНоменклатурой.ОбъектСкидки,
	|	ВТ_ПриказыСНоменклатурой.ТоварнаяКатегория,
	|	ВТ_ПриказыСНоменклатурой.Брендообъем,
	|	ВТ_ПриказыСНоменклатурой.Номенклатура,
	|	ВТ_ПриказыСНоменклатурой.НоменклатураПолная
	|ИЗ
	|	ВТ_ТоварыЗаказа КАК ВТ_ТоварыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриказыСНоменклатурой КАК ВТ_ПриказыСНоменклатурой
	|		ПО ВТ_ТоварыЗаказа.Номенклатура.НСИ_Брендообъем = ВТ_ПриказыСНоменклатурой.Брендообъем
	|ГДЕ
	|	ВТ_ПриказыСНоменклатурой.ДляВсейНоменклатуры <> 1
	|	И (ВТ_ПриказыСНоменклатурой.НоменклатураПолная ЕСТЬ NULL 
	|			ИЛИ ВТ_ПриказыСНоменклатурой.НоменклатураПолная = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И НЕ(ВТ_ПриказыСНоменклатурой.Брендообъем ЕСТЬ NULL 
	|				ИЛИ ВТ_ПриказыСНоменклатурой.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТоварыЗаказа.НомерСтроки,
	|	ВТ_ТоварыЗаказа.Номенклатура,
	|	ВТ_ТоварыЗаказа.Количество,
	|	ВТ_ТоварыЗаказа.Цена,
	|	ВТ_ТоварыЗаказа.Сумма,
	|	ВТ_ТоварыЗаказа.ПроцентСкидкиНаценки,
	|	ВТ_ТоварыЗаказа.ПроцентАвтоматическихСкидок,
	|	ВТ_ТоварыЗаказа.СтавкаНДС,
	|	ВТ_ТоварыЗаказа.СуммаНДС,
	|	ВТ_ТоварыЗаказа.УстановкаСкидокНоменклатуры,
	|	ВТ_ПриказыСНоменклатурой.Приказ,
	|	ВТ_ПриказыСНоменклатурой.ДляВсейНоменклатуры,
	|	ВТ_ПриказыСНоменклатурой.ТипОграничения,
	|	ВТ_ПриказыСНоменклатурой.ДатаНачала,
	|	ВТ_ПриказыСНоменклатурой.ДатаОкончания,
	|	ВТ_ПриказыСНоменклатурой.ПроцентСкидки,
	|	ВТ_ПриказыСНоменклатурой.КоличествоОграничение,
	|	ВТ_ПриказыСНоменклатурой.СуммаОграничение,
	|	ВТ_ПриказыСНоменклатурой.НомерСтрокиПолучателя,
	|	ВТ_ПриказыСНоменклатурой.Контрагент,
	|	ВТ_ПриказыСНоменклатурой.ДоговорКонтрагента,
	|	ВТ_ПриказыСНоменклатурой.ПЦ_Дивизион,
	|	ВТ_ПриказыСНоменклатурой.ПЦ_АдресПоставки,
	|	ВТ_ПриказыСНоменклатурой.ПолучательСкидки,
	|	ВТ_ПриказыСНоменклатурой.НомерСтрокиТовара,
	|	ВТ_ПриказыСНоменклатурой.ОбъектСкидки,
	|	ВТ_ПриказыСНоменклатурой.ТоварнаяКатегория,
	|	ВТ_ПриказыСНоменклатурой.Брендообъем,
	|	ВТ_ПриказыСНоменклатурой.Номенклатура,
	|	ВТ_ПриказыСНоменклатурой.НоменклатураПолная
	|ИЗ
	|	ВТ_ТоварыЗаказа КАК ВТ_ТоварыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриказыСНоменклатурой КАК ВТ_ПриказыСНоменклатурой
	|		ПО ВТ_ТоварыЗаказа.Номенклатура.НСИ_ТоварнаяКатегория = ВТ_ПриказыСНоменклатурой.ТоварнаяКатегория
	|ГДЕ
	|	ВТ_ПриказыСНоменклатурой.ДляВсейНоменклатуры <> 1
	|	И (ВТ_ПриказыСНоменклатурой.НоменклатураПолная ЕСТЬ NULL 
	|			ИЛИ ВТ_ПриказыСНоменклатурой.НоменклатураПолная = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И (ВТ_ПриказыСНоменклатурой.Брендообъем ЕСТЬ NULL 
	|			ИЛИ ВТ_ПриказыСНоменклатурой.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка))
	|	И НЕ(ВТ_ПриказыСНоменклатурой.ТоварнаяКатегория ЕСТЬ NULL 
	|				ИЛИ ВТ_ПриказыСНоменклатурой.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Приказ,
	|	ВложенныйЗапрос.ПЦ_ОграниченияСкидки,
	|	ВложенныйЗапрос.ПроцентСкидки,
	|	ВложенныйЗапрос.КоличествоОграничение,
	|	ВложенныйЗапрос.СуммаОграничение,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.ПЦ_Дивизион,
	|	ВложенныйЗапрос.ПЦ_АдресПоставки,
	|	ВложенныйЗапрос.ПолучательСкидки,
	|	ВложенныйЗапрос.ОбъектСкидки,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.Брендообъем,
	|	ВложенныйЗапрос.НоменклатураПриказа
	|ПОМЕСТИТЬ ВТ_СтруктураОстатков
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВТ_ЗаказПриказ.Приказ КАК Приказ,
	|		ВТ_ЗаказПриказ.ПЦ_ОграниченияСкидки КАК ПЦ_ОграниченияСкидки,
	|		ВТ_ЗаказПриказ.ПроцентСкидки КАК ПроцентСкидки,
	|		ВТ_ЗаказПриказ.КоличествоОграничение КАК КоличествоОграничение,
	|		ВТ_ЗаказПриказ.СуммаОграничение КАК СуммаОграничение,
	|		ВТ_ЗаказПриказ.Контрагент КАК Контрагент,
	|		ВТ_ЗаказПриказ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВТ_ЗаказПриказ.ПЦ_Дивизион КАК ПЦ_Дивизион,
	|		ВТ_ЗаказПриказ.ПЦ_АдресПоставки КАК ПЦ_АдресПоставки,
	|		ВТ_ЗаказПриказ.ПолучательСкидки КАК ПолучательСкидки,
	|		ВТ_ЗаказПриказ.ОбъектСкидки КАК ОбъектСкидки,
	|		ВТ_ЗаказПриказ.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|		ВТ_ЗаказПриказ.Брендообъем КАК Брендообъем,
	|		ВТ_ЗаказПриказ.НоменклатураПриказа КАК НоменклатураПриказа
	|	ИЗ
	|		ВТ_ЗаказПриказ КАК ВТ_ЗаказПриказ
	|	ГДЕ
	|		ВТ_ЗаказПриказ.ДляВсейНоменклатуры = 0
	|		И ВТ_ЗаказПриказ.ПЦ_ОграниченияСкидки В(&ЛимитированныеОграничения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВТ_ЗаказПриказ.Приказ,
	|		ВТ_ЗаказПриказ.ПЦ_ОграниченияСкидки,
	|		ВТ_ЗаказПриказ.ПроцентСкидки,
	|		ВТ_ЗаказПриказ.КоличествоОграничение,
	|		ВТ_ЗаказПриказ.СуммаОграничение,
	|		ВТ_ЗаказПриказ.Контрагент,
	|		ВТ_ЗаказПриказ.ДоговорКонтрагента,
	|		ВТ_ЗаказПриказ.ПЦ_Дивизион,
	|		ВТ_ЗаказПриказ.ПЦ_АдресПоставки,
	|		ВТ_ЗаказПриказ.ПолучательСкидки,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ВТ_ЗаказПриказ КАК ВТ_ЗаказПриказ
	|	ГДЕ
	|		ВТ_ЗаказПриказ.ДляВсейНоменклатуры = 1
	|		И ВТ_ЗаказПриказ.ПЦ_ОграниченияСкидки В(&ЛимитированныеОграничения)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СтруктураОстатков.Приказ
	|ПОМЕСТИТЬ ВТ_ПриказыОстатков
	|ИЗ
	|	ВТ_СтруктураОстатков КАК ВТ_СтруктураОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры КАК Приказ,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ПолучательСкидки,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Дивизион КАК ПЦ_Дивизион,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.АдресПоставки КАК ПЦ_АдресПоставки,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ОбъектСкидки,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
	//|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	//|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток
	//|ИЗ
	//|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
	//|			,
	//|			УстановкаСкидокНоменклатуры В
	//|				(ВЫБРАТЬ
	//|					ВТ_ПриказыОстатков.Приказ
	//|				ИЗ
	//|					ВТ_ПриказыОстатков)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
	//|СГРУППИРОВАТЬ ПО
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.АдресПоставки,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ОбъектСкидки,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Дивизион,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ПолучательСкидки,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
	//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры";
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Приказ,
	|	ВложенныйЗапрос.ПолучательСкидки,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.Дивизион КАК ПЦ_Дивизион,
	|	ВложенныйЗапрос.АдресПоставки КАК ПЦ_АдресПоставки,
	|	ВложенныйЗапрос.ОбъектСкидки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.Брендообъем,
	|	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ВложенныйЗапрос.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры КАК Приказ,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ПолучательСкидки КАК ПолучательСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент КАК Контрагент,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Дивизион КАК Дивизион,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.АдресПоставки КАК АдресПоставки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ОбъектСкидки КАК ОбъектСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура КАК Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем КАК Брендообъем,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток КАК СуммаСкидкиОстаток
	|	ИЗ
	|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(, УстановкаСкидокНоменклатуры В
	|				(ВЫБРАТЬ
	|					ВТ_ПриказыОстатков.Приказ
	|				ИЗ
	|					ВТ_ПриказыОстатков)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.АдресПоставки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Дивизион,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ПолучательСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ОбъектСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток";
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ЗаказПокупателя") или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
	    Запрос.Текст = Запрос.Текст +" 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ПолучательСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Дивизион,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.АдресПоставки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ОбъектСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество),
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки)
	|	ИЗ
	|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
	|	ГДЕ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор = &Регистратор
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ЗаказПокупателя
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры В
	|				(ВЫБРАТЬ
	|					ВТ_ПриказыОстатков.Приказ
	|				ИЗ
	|					ВТ_ПриказыОстатков)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ПолучательСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Дивизион,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.АдресПоставки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ОбъектСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ПолучательСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Дивизион,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.АдресПоставки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ОбъектСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество),
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки)
	|	ИЗ
	|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
	|	ГДЕ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ОтменаСкидокНоменклатуры
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Период > &НаДату
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры В
	|				(ВЫБРАТЬ
	|					ВТ_ПриказыОстатков.Приказ
	|				ИЗ
	|					ВТ_ПриказыОстатков)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Дивизион,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.АдресПоставки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ПолучательСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ОбъектСкидки,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем";	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос
    | 
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Брендообъем,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.Приказ,
	|	ВложенныйЗапрос.ПолучательСкидки,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.Дивизион,
	|	ВложенныйЗапрос.АдресПоставки,
	|	ВложенныйЗапрос.ОбъектСкидки	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СтруктураОстатков.Приказ,
	|	ВТ_СтруктураОстатков.ПЦ_ОграниченияСкидки,
	|	ВТ_СтруктураОстатков.ПроцентСкидки,
	|	ВТ_СтруктураОстатков.КоличествоОграничение,
	|	ВТ_СтруктураОстатков.СуммаОграничение,
	|	ВТ_СтруктураОстатков.Контрагент,
	|	ВТ_СтруктураОстатков.ДоговорКонтрагента,
	|	ВТ_СтруктураОстатков.ПЦ_Дивизион,
	|	ВТ_СтруктураОстатков.ПЦ_АдресПоставки,
	|	ВТ_СтруктураОстатков.ПолучательСкидки,
	|	ВТ_СтруктураОстатков.ОбъектСкидки,
	|	ВТ_СтруктураОстатков.ТоварнаяКатегория,
	|	ВТ_СтруктураОстатков.Брендообъем,
	|	ВТ_СтруктураОстатков.НоменклатураПриказа
	|ИЗ
	|	ВТ_СтруктураОстатков КАК ВТ_СтруктураОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказПриказ.НомерСтрокиЗаказа КАК НомерСтрокиЗаказа,
	|	ВТ_ЗаказПриказ.Номенклатура,
	|	ВТ_ЗаказПриказ.Количество,
	|	ВТ_ЗаказПриказ.Цена,
	|	ВТ_ЗаказПриказ.Сумма,
	|	ВТ_ЗаказПриказ.ПроцентСкидкиНаценки,
	|	ВТ_ЗаказПриказ.СтавкаНДС,
	|	ВТ_ЗаказПриказ.СуммаНДС,
	|	ВТ_ЗаказПриказ.Приказ,
	/// Кунов О.В., 10.08.2017 - 69158
	|	ВТ_ЗаказПриказ.Приказ.Дата КАК ДатаПриказа,
	///
	/// Кунов О.В., 02.05.2017 - 64489
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ПараметрыВСлужебномСправочнике.ЗначениеПараметра КАК ЧИСЛО(2,0)), 9) КАК Приоритет,
	///
	|	ВТ_ЗаказПриказ.ДляВсейНоменклатуры,
	|	ВТ_ЗаказПриказ.ПЦ_ОграниченияСкидки,
	|	ВТ_ЗаказПриказ.ДатаНачала КАК ДатаНачала,
	|	ВТ_ЗаказПриказ.ДатаОкончания,
	|	ВТ_ЗаказПриказ.ПроцентСкидки,
	|	ВТ_ЗаказПриказ.КоличествоОграничение,
	|	ВТ_ЗаказПриказ.СуммаОграничение,
	|	ВТ_ЗаказПриказ.НомерСтрокиПолучателя,
	|	ВТ_ЗаказПриказ.Контрагент,
	|	ВТ_ЗаказПриказ.ДоговорКонтрагента,
	|	ВТ_ЗаказПриказ.ПЦ_Дивизион,
	|	ВТ_ЗаказПриказ.ПЦ_АдресПоставки,
	|	ВТ_ЗаказПриказ.ПолучательСкидки,
	|	ВТ_ЗаказПриказ.НомерСтрокиТовара,
	|	ВТ_ЗаказПриказ.ОбъектСкидки,
	|	ВТ_ЗаказПриказ.ТоварнаяКатегория,
	|	ВТ_ЗаказПриказ.Брендообъем,
	|	ВТ_ЗаказПриказ.НоменклатураПриказа,
	|	ВТ_ЗаказПриказ.НоменклатураПолная
	|ИЗ
	|	ВТ_ЗаказПриказ КАК ВТ_ЗаказПриказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПараметрыВСлужебномСправочнике
	|	ПО ПараметрыВСлужебномСправочнике.Ссылка = &ЭлементСлужебногоСправочника И ВТ_ЗаказПриказ.Приказ.ТипСкидкиНаценки = ПараметрыВСлужебномСправочнике.Параметр
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиЗаказа,
	|	ДатаНачала";
	
	/// Кунов О.В., 02.05.2017 - 64489
	Попытка
		ПриоритетыСкидок = ПредопределенноеЗначение("Справочник.ПРГ_Служебный.ПриоритетыСкидок");
		КонтрагентыСПриоритетами = ПриоритетыСкидок.ТаблицаПараметров.Выгрузить(Новый Структура("Параметр", "Контрагент")).ВыгрузитьКолонку("ЗначениеПараметра");
		Если ПриоритетыСкидок.ПРГ_Дата > ДокументОбъект.Дата Или КонтрагентыСПриоритетами.Найти(ДокументОбъект.Контрагент) = Неопределено Тогда
			ПриоритетыСкидок = Справочники.ПРГ_Служебный.ПустаяСсылка();
		КонецЕсли;
	Исключение
		ПриоритетыСкидок = Справочники.ПРГ_Служебный.ПустаяСсылка();
	КонецПопытки;
	Запрос.УстановитьПараметр("ЭлементСлужебногоСправочника", ПриоритетыСкидок);
	///
	
	//Возврат Запрос.Выполнить().Выгрузить();
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // ЗапросПоСкидкам()
//<<

// Процедура рассчитывает скидки в документе.
//
// Параметры:
//  ДокументОбъект             - документ, для которого рассчитываем скидки,
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  СтруктураПараметров        - структура, содержащая дополнительные параметря, необходимые для расчета скидок.
//
Процедура РассчитатьСкидкиПриПродажеСтарый(ДокументОбъект, ТабличнаяЧастьНоменклатуры,
	СтруктураПараметров, МинимальныеЦены, СписокФильтров) Экспорт
	
	Перем ВидРеализации, СуммаДокумента, ДиконтнаяКарта, ВидОплаты;
	Перем УчитыватьНДС, СуммаВключаетНДС, ДатаСкидок, ВалютаРегламентированногоУчета, УчетнаяПолитика;
	
	Если ТабличнаяЧастьНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч (ТабличнаяЧастьНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Скопировать();
	Иначе
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Выгрузить();
	КонецЕсли;
	
	ТаблицаТоваров.ЗаполнитьЗначения(0, "ПроцентАвтоматическихСкидок");
	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.УсловияСкидкиНаценки.ПустаяСсылка(),"УсловиеАвтоматическойСкидки");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеУсловияАвтоматическойСкидки");
	
	Если ТаблицаТоваров.Колонки.Найти("Коэффициент") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("Коэффициент");
		ТаблицаТоваров.ЗаполнитьЗначения(1, "Коэффициент");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезСкидки");
	
	//m.ionov@a-prof.ru 24.12.2014
	МассивБрендообъемов = Новый Массив;
	МассивБрендообъемов.Добавить(Справочники.НСИ_Брендообъемы.ПустаяСсылка());
	
	МассивТоварныхКатегорий = Новый Массив;
	МассивТоварныхКатегорий.Добавить(Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка());
	
	ТаблицаТоваров.Колонки.Добавить("Брендообъем");
	ТаблицаТоваров.Колонки.Добавить("ТоварнаяКатегория");
	ТаблицаТоваров.Колонки.Добавить("ОстатокКоличества");
	ТаблицаТоваров.Колонки.Добавить("ОстатокСкидки");
	//----m.ionov@a-prof.ru---
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		//m.ionov@a-prof.ru 19.02.2015
		//СтрокаТаблицы.СуммаБезСкидки = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки > 0 Тогда
			СтрокаТаблицы.СуммаБезСкидки = (СтрокаТаблицы.Количество * СтрокаТаблицы.Цена)*(1-СтрокаТаблицы.ПроцентСкидкиНаценки/100);
		Иначе
			СтрокаТаблицы.СуммаБезСкидки = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		//m.ionov@a-prof.ru 24.12.2014
		МассивБрендообъемов.Добавить(СтрокаТаблицы.Номенклатура.НСИ_Брендообъем); 
		СтрокаТаблицы.Брендообъем = СтрокаТаблицы.Номенклатура.НСИ_Брендообъем;
		
		МассивТоварныхКатегорий.Добавить(СтрокаТаблицы.Номенклатура.НСИ_ТоварнаяКатегория); 
		СтрокаТаблицы.ТоварнаяКатегория = СтрокаТаблицы.Номенклатура.НСИ_ТоварнаяКатегория;
		
		//----m.ionov@a-prof.ru---
	КонецЦикла;
	
	СтруктураПараметров.Свойство("ВидРеализации"                 , ВидРеализации);
	СтруктураПараметров.Свойство("ДатаСкидок"                    , ДатаСкидок);
	СтруктураПараметров.Свойство("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Свойство("ВидОплаты"                     , ВидОплаты);
	СтруктураПараметров.Свойство("СуммаДокумента"                , СуммаДокумента);
	СтруктураПараметров.Свойство("Карта"                         , ДиконтнаяКарта);
	СтруктураПараметров.Свойство("УчитыватьНДС"                  , УчитыватьНДС);
	СтруктураПараметров.Свойство("СуммаВключаетНДС"              , СуммаВключаетНДС);
	СтруктураПараметров.Свойство("УчетнаяПолитика"              , УчетнаяПолитика);
	
	УчитыватьНДС = ?(УчитыватьНДС = Неопределено, Ложь, УчитыватьНДС);
	
	ДатаСкидок = ?(НЕ ЗначениеЗаполнено(ДатаСкидок), ДокументОбъект.Дата, ДатаСкидок);
	МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	
	Если ТаблицаТоваров.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
		МассивХарактеристик = Новый Массив;
		
		ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "ХарактеристикаНоменклатуры");
	Иначе
		МассивХарактеристик = ТаблицаТоваров.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
	КонецЕсли;
	МассивХарактеристик.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Если ТаблицаТоваров.Колонки.Найти("Качество") = Неопределено Тогда
		МассивКачество = Новый Массив;
		МассивКачество.Добавить(Справочники.Качество.Новый);
		
		ТаблицаТоваров.Колонки.Добавить("Качество");
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	Иначе
		МассивКачество = ТаблицаТоваров.ВыгрузитьКолонку("Качество");
	КонецЕсли;
	
	МассивПолучателей = Ценообразование.ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект);
	
	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		КурсКратность = 1;
	Иначе
		КурсКратность = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) / ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ТаблицаСкидок = ЗапросПоСкидкамСтарый(ДатаСкидок, МассивНоменклатуры, МассивХарактеристик, МассивКачество,
	МассивПолучателей, КурсКратность, СуммаДокумента, ВидОплаты, ДиконтнаяКарта, УчетнаяПолитика, ДокументОбъект, МассивБрендообъемов, МассивТоварныхКатегорий); //m.ionov@a-prof.ru 24.12.2014
	//ТаблицаСкидок = ЗапросПоСкидкам(ДатаСкидок, ДокументОбъект); 
	
	//>>ТаблицаСкидок.Индексы.Добавить("Номенклатура, Качество");
	ТаблицаСкидок.Индексы.Добавить("Номенклатура");	
	
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	УсловиеКолво = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
	
	//m.ionov@a-prof.ru 24.12.2014
	ПустойБрендообъем = Справочники.НСИ_Брендообъемы.ПустаяСсылка(); 
	ПустаяКатегория = Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка();
	
	//Получим таблицу с ограничениями скидок
	ЗапросОстаткиСкидок = Новый Запрос;
	//m.ionov@a-prof.ru 18.02.2015
	//Остатки по скидкам считаем на текущую дату
	//ЗапросОстаткиСкидок.УстановитьПараметр("ДатаОстатков"       , Новый Граница(ДокументОбъект.МоментВремени(), ВидГраницы.Исключая));
	//----m.ionov@a-prof.ru---
	ЗапросОстаткиСкидок.УстановитьПараметр("МассивНоменклатуры"       , МассивНоменклатуры);
	ЗапросОстаткиСкидок.УстановитьПараметр("МассивХарактеристик"      , МассивХарактеристик);
	МассивБрендообъемов.Добавить(Справочники.НСИ_Брендообъемы.ПустаяСсылка());
	ЗапросОстаткиСкидок.УстановитьПараметр("МассивБрендообъемов"      , МассивБрендообъемов);
	МассивТоварныхКатегорий.Добавить(Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка());
	ЗапросОстаткиСкидок.УстановитьПараметр("МассивТоварныхКатегорий"  , МассивТоварныхКатегорий);
	
	ЗапросОстаткиСкидок.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	ЗапросОстаткиСкидок.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
	
	//>>281015 Степанов 45192 увеличиваем доступные остатки для проведенного заказа на его оборот
	//ЗапросОстаткиСкидок.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
	//							|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	//							|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток
	//							|ИЗ
	//							|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
	//							//|			&ДатаОстатков,
	//							|                        ,
	//							|			Номенклатура В (&МассивНоменклатуры)
	//							|				И ХарактеристикаНоменклатуры В (&МассивХарактеристик)
	//							|				И Брендообъем В (&МассивБрендообъемов)
	//							|				И ТоварнаяКатегория В (&МассивТоварныхКатегорий)
	//							|				И (ДоговорКонтрагента = &ДоговорКонтрагента
	//							|					ИЛИ ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//							|						И Контрагент = &Контрагент)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
	//							|
	//							|СГРУППИРОВАТЬ ПО
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
	//							|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры";
	//							
	//>>190516 Степанов б/н убрать из остатков закрывающий оборот послестоящих документов "Отмена скидок номенклатуры"
	//>>030616 Степанов добавлен в выборку реквизит приказа ПРГ_ОбъединятьБрендообъем
	ЗапросОстаткиСкидок.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.Брендообъем,
	|	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
	|	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ВложенныйЗапрос.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток,
	|	ВложенныйЗапрос.ПРГ_ОбъединятьБрендообъем
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура КАК Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем КАК Брендообъем,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры,
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем КАК ПРГ_ОбъединятьБрендообъем
	|	ИЗ
	|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
	|				,
	|				Номенклатура В (&МассивНоменклатуры)
	|					И ХарактеристикаНоменклатуры В (&МассивХарактеристик)
	|					И Брендообъем В (&МассивБрендообъемов)
	|					И ТоварнаяКатегория В (&МассивТоварныхКатегорий)
	|					И (ДоговорКонтрагента = &ДоговорКонтрагента
	|						ИЛИ ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|							И Контрагент = &Контрагент)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество),
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки),
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем
	|	ИЗ
	|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
	|	ГДЕ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор = &Регистратор
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ЗаказПокупателя
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество),
	|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки),
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем
	|	ИЗ
	|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
	|	ГДЕ
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ОтменаСкидокНоменклатуры
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Период > &НаДату
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура В(&МассивНоменклатуры)
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры В(&МассивХарактеристик)
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем В(&МассивБрендообъемов)
	|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория В(&МассивТоварныхКатегорий)
	|		И (ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = &ДоговорКонтрагента
	|				ИЛИ ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					И ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент = &Контрагент)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
	|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
	|	ВложенныйЗапрос.Брендообъем,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.ПРГ_ОбъединятьБрендообъем";
	ЗапросОстаткиСкидок.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);							
	ЗапросОстаткиСкидок.УстановитьПараметр("НаДату", ДокументОбъект.Дата);							
	
	
	ОстаткиПоСкидкам = ЗапросОстаткиСкидок.Выполнить().Выгрузить();
	//>>030616 Степанов 52014 ОстаткиПоСкидкам.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры","КоличествоОстаток,СуммаСкидкиОстаток");
	ОстаткиПоСкидкам.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры,ПРГ_ОбъединятьБрендообъем","КоличествоОстаток,СуммаСкидкиОстаток");
	ОстаткиПоСкидкам.Сортировать("Номенклатура УБЫВ,Брендообъем,ТоварнаяКатегория,УстановкаСкидокНоменклатуры");
	
	мТаблицаДляВозвратаСкидок = ОстаткиПоСкидкам.Скопировать();
	мТаблицаДляВозвратаСкидок.Очистить();
	мТаблицаДляВозвратаСкидок.Колонки.Добавить("НомерСтрокиСкидки");	
	//----m.ionov@a-prof.ru---
	
	//>>020616 Степанов 52014
	Отбор = Новый Структура;
	Отбор.Вставить("ПРГ_ОбъединятьБрендообъем", Истина);
	КопияТаблицаСкидокПолная = ОстаткиПоСкидкам.Скопировать(Отбор,"Номенклатура,Брендообъем,УстановкаСкидокНоменклатуры,ПРГ_ОбъединятьБрендообъем,КоличествоОстаток,СуммаСкидкиОстаток");
	Если КопияТаблицаСкидокПолная.Количество()>0 тогда
		
		ТабПриказов = КопияТаблицаСкидокПолная.Скопировать(,"УстановкаСкидокНоменклатуры");
		ТабПриказов.Свернуть("УстановкаСкидокНоменклатуры");
		ЗапросБО = Новый Запрос;
		ЗапросБО.Текст = 
		"ВЫБРАТЬ
		|	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем,
		|	УстановкаСкидокНоменклатурыТовары.Ссылка КАК УстановкаСкидокНоменклатуры,
		|	СУММА(УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки) КАК КоличествоПоПриказу
		|ПОМЕСТИТЬ ВТ_Брендообъемы
		|ИЗ
		|	Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
		|ГДЕ
		|	УстановкаСкидокНоменклатурыТовары.Ссылка В(&Приказы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УстановкаСкидокНоменклатурыТовары.Ссылка,
		|	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
		|	ВложенныйЗапрос.НСИ_Брендообъем КАК Брендообъем,
		|	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиБО
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры,
		|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура.НСИ_Брендообъем КАК НСИ_Брендообъем,
		|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
		|				,
		|				УстановкаСкидокНоменклатуры В (&Приказы)
		|					И (ДоговорКонтрагента = &ДоговорКонтрагента
		|						ИЛИ ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|							И Контрагент = &Контрагент)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура.НСИ_Брендообъем,
		|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура.НСИ_Брендообъем,
		|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество)
		|	ИЗ
		|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
		|	ГДЕ
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор = &Регистратор
		|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ЗаказПокупателя
		|		И (ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = &ДоговорКонтрагента
		|				ИЛИ ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|					И ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент = &Контрагент)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура.НСИ_Брендообъем,
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура.НСИ_Брендообъем,
		|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество)
		|	ИЗ
		|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
		|	ГДЕ
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ОтменаСкидокНоменклатуры
		|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Период > &НаДату
		|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры В(&Приказы)
		|		И (ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = &ДоговорКонтрагента
		|				ИЛИ ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|					И ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент = &Контрагент)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
		|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура.НСИ_Брендообъем) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
		|	ВложенныйЗапрос.НСИ_Брендообъем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Брендообъемы.УстановкаСкидокНоменклатуры,
		|	ВТ_Брендообъемы.ПЦ_Брендообъем КАК Брендообъем,
		|	ВТ_Брендообъемы.КоличествоПоПриказу,
		|	ЕСТЬNULL(ВТ_ОстаткиБО.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	ВТ_Брендообъемы КАК ВТ_Брендообъемы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиБО КАК ВТ_ОстаткиБО
		|		ПО ВТ_Брендообъемы.УстановкаСкидокНоменклатуры = ВТ_ОстаткиБО.УстановкаСкидокНоменклатуры
		|			И ВТ_Брендообъемы.ПЦ_Брендообъем = ВТ_ОстаткиБО.Брендообъем";
		ЗапросБО.УстановитьПараметр("Приказы",ТабПриказов);
		ЗапросБО.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);							
		ЗапросБО.УстановитьПараметр("НаДату", ДокументОбъект.Дата);							
		ЗапросБО.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		ЗапросБО.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
		КопияТаблицаСкидокПолная = ЗапросБО.Выполнить().Выгрузить();
		
		//КопияТаблицаСкидокПолная.Свернуть("Номенклатура,Брендообъем,УстановкаСкидокНоменклатуры,ПРГ_ОбъединятьБрендообъем","КоличествоОстаток");
		//Для Каждого СтрТЗ из КопияТаблицаСкидокПолная цикл
		//	СтрТЗ.Брендообъем = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрТЗ.Номенклатура,"НСИ_Брендообъем");
		//КонецЦикла;
		//КопияТаблицаСкидокПолная.Свернуть("Брендообъем,УстановкаСкидокНоменклатуры,ПРГ_ОбъединятьБрендообъем","КоличествоОстаток");
		////рассчитать сумму начального количества по брендообъему
		//КопияТаблицаСкидокПолная.Колонки.Добавить("КоличествоПоПриказу");
		//ЗапросПриказБрендообъем = Новый Запрос;
		//ЗапросПриказБрендообъем.Текст = 
		//"ВЫБРАТЬ
		//|	СУММА(УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки) КАК ОграничениеСкидкиНаценки
		//|ИЗ
		//|	Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
		//|ГДЕ
		//|	УстановкаСкидокНоменклатурыТовары.Ссылка = &СсылкаПриказ
		//|	И УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем = &ПЦ_Брендообъем";
		//Для Каждого СтрТЗ из КопияТаблицаСкидокПолная цикл
		//	ЗапросПриказБрендообъем.УстановитьПараметр("СсылкаПриказ",СтрТЗ.УстановкаСкидокНоменклатуры);
		//	ЗапросПриказБрендообъем.УстановитьПараметр("ПЦ_Брендообъем",СтрТЗ.Брендообъем);
		//	РезЗапросПриказБрендообъем = ЗапросПриказБрендообъем.Выполнить().Выбрать();
		//	Пока РезЗапросПриказБрендообъем.Следующий() цикл
		//		СтрТЗ.КоличествоПоПриказу = РезЗапросПриказБрендообъем.ОграничениеСкидкиНаценки;
		//	КонецЦикла;	
		//КонецЦикла;	
	КонецЕсли;
	//<<
	
	Если ТаблицаСкидок.Найти(УсловиеКолво, "НУсловие, ЦУсловие") <> Неопределено Тогда
		ТаблицаКоличестваТоваров = ТаблицаТоваров.Скопировать(,
		"Номенклатура, ХарактеристикаНоменклатуры, Количество, Коэффициент, ТоварнаяКатегория, Брендообъем");
		
		Для Каждого СтрокаТЧ Из ТаблицаКоличестваТоваров Цикл
			СтрокаТЧ.Количество = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
		КонецЦикла;
		
		ТаблицаКоличестваТоваров.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ТоварнаяКатегория, Брендообъем", "Количество");
		
		ТаблицаКоличестваТоваров.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, ТоварнаяКатегория, Брендообъем");
		
		СтруктураПоискаКоличества = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	КонецЕсли;
	
	//++ Spl_Апроф 05.05.2015 (k.russkih@a-prof.ru)
	СписокДивизионАдрес = Новый Структура;
	СписокДивизионАдрес.Вставить("Дивизион", Справочники.ПРГДивизионы.ПустаяСсылка());
	СписокДивизионАдрес.Вставить("АдресаПоставки", Справочники.АдресаПоставки.ПустаяСсылка());
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("Грузополучатель") <> Неопределено и ТипЗнч(ДокументОбъект.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") тогда
		СписокДивизионАдрес.Вставить("Дивизион", ДокументОбъект.Грузополучатель.Дивизион);
		СписокДивизионАдрес.Вставить("АдресаПоставки", ДокументОбъект.Грузополучатель);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПР_Претензия") тогда
		Если ЗначениеЗаполнено(ДокументОбъект.Накладная) Тогда
			Если ТипЗнч(ДокументОбъект.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") и ТипЗнч(ДокументОбъект.Накладная.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
				СписокДивизионАдрес.Вставить("Дивизион", ДокументОбъект.Накладная.Грузополучатель.Дивизион);
				СписокДивизионАдрес.Вставить("АдресаПоставки", ДокументОбъект.Накладная.Грузополучатель);
			ИначеЕсли ТипЗнч(ДокументОбъект.Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") и ТипЗнч(ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда	
				СписокДивизионАдрес.Вставить("Дивизион",ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель.Дивизион);
				СписокДивизионАдрес.Вставить("АдресаПоставки",ДокументОбъект.Накладная.ДокументРеализации.Грузополучатель);
			КонецЕсли; 		
		КонецЕсли;	
	КонецЕсли;
	//-- Spl_Апроф
	
	СтруктураПоиска = Новый Структура("Номенклатура, Качество");
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
		Если СтрокаТЧ.СуммаБезСкидки <> 0 Тогда
			СтруктураПоиска.Номенклатура = СтрокаТЧ.Номенклатура;
			СтруктураПоиска.Качество = СтрокаТЧ.Качество;
			
			НоменклатураБрендообъем = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаТЧ.Номенклатура,"НСИ_Брендообъем");
			
			МассивСтрок = ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);  
			
			//m.ionov@a-prof.ru 24.12.2014
			СтруктураПоиска.Вставить("Брендообъем", СтрокаТЧ.Брендообъем);
			СтруктураПоиска.Номенклатура = ПустаяНоменклатура;
			
			МассивСтрокБезНоменклатуры = ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаБезНоменклатуры Из МассивСтрокБезНоменклатуры Цикл
				МассивСтрок.Добавить(СтрокаБезНоменклатуры);
			КонецЦикла;
			СтруктураПоиска.Вставить("Брендообъем", ПустойБрендообъем);
			
			СтруктураПоиска.Вставить("ТоварнаяКатегория", СтрокаТЧ.ТоварнаяКатегория);
			
			МассивСтрокБезНоменклатуры = ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаБезНоменклатуры Из МассивСтрокБезНоменклатуры Цикл
				МассивСтрок.Добавить(СтрокаБезНоменклатуры);
			КонецЦикла;
			СтруктураПоиска.Вставить("ТоварнаяКатегория", ПустаяКатегория);
			
			//----m.ionov@a-prof.ru---
			
			СтруктураПоиска.Номенклатура = ПустаяНоменклатура;
			
			МассивСтрокБезНоменклатуры = ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаБезНоменклатуры Из МассивСтрокБезНоменклатуры Цикл
				МассивСтрок.Добавить(СтрокаБезНоменклатуры);
			КонецЦикла;
			
			МаксСуммаСкидки              = Неопределено;
			ПодходящаяСкидка             = Неопределено;
			ПроцентСкидки                = Неопределено;
			ПодходящаяСкидкаНоменклатура = Неопределено;
			
			мТаблицаДляВозвратаСкидок.Очистить();
			МаксПроцентСкидки              = Неопределено;
			СообщениеОСкидке = "";
			МаксСообщениеОСкидке = Неопределено;
			
			//>>271015 Степанов 45299
			//>> для каждой строки массива проставим значение суммового остатка по приказу из ТЗ ОстаткиПоСкидкам
			ЕстьСтрокаСкидкиПолныйПроцент=Ложь;
			Для Каждого СтрокаСкидок из МассивСтрок цикл
				Если (СтрокаСкидок.ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки 
					ИЛИ СтрокаСкидок.ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг) Тогда
					
					
					СтруктураПоискаО = Новый Структура();
					СтруктураПоискаО.Вставить("УстановкаСкидокНоменклатуры", СтрокаСкидок.УстановкаСкидокНоменклатуры);
					СтруктураПоискаО.Вставить("Номенклатура", СтрокаСкидок.Номенклатура);
					СтруктураПоискаО.Вставить("ХарактеристикаНоменклатуры", СтрокаСкидок.ХарактеристикаНоменклатуры);
					СтруктураПоискаО.Вставить("ТоварнаяКатегория", СтрокаСкидок.ТоварнаяКатегория);
					СтруктураПоискаО.Вставить("Брендообъем", СтрокаСкидок.Брендообъем);
					СтрокиОстаткиСкидки = ОстаткиПоСкидкам.НайтиСтроки(СтруктураПоискаО);
					Для каждого СтрокаОстаткаСкидки Из СтрокиОстаткиСкидки Цикл
						Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
							СтрокаСкидок.ОстатокСкидки = СтрокаОстаткаСкидки.СуммаСкидкиОстаток - ОКР(УчетНДС.РассчитатьСуммуНДС(СтрокаОстаткаСкидки.СуммаСкидкиОстаток, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС)),2);
						Иначе
							СтрокаСкидок.ОстатокСкидки = СтрокаОстаткаСкидки.СуммаСкидкиОстаток;
						КонецЕсли;
					КонецЦикла;
					//>>280416 Степанов ручная скидка должна вычитаться последовательным расчетом
					//РаспределитьСкидку = СтрокаТЧ.СуммаБезСкидки - Окр(СтрокаТЧ.Цена * (100-СтрокаСкидок.НПроцентСкидкиНаценки-СтрокаТЧ.ПроцентСкидкиНаценки) / 100, 2) * СтрокаТЧ.Количество;
					РаспределитьСкидку = СтрокаТЧ.СуммаБезСкидки - Окр(СтрокаТЧ.Цена * (100-СтрокаТЧ.ПроцентСкидкиНаценки)/100*(100-СтрокаСкидок.НПроцентСкидкиНаценки)/100, 2) * СтрокаТЧ.Количество;
					Если РаспределитьСкидку<СтрокаСкидок.ОстатокСкидки тогда
						ЕстьСтрокаСкидкиПолныйПроцент=Истина;
					КонецЕсли;	 
					
				КонецЕсли;				
			КонецЦикла;	
			//<<271015 Степанов 45299
			
			
			Для Каждого СтрокаСкидок Из МассивСтрок Цикл
				//m.ionov@a-prof.ru 24.12.2014
				//Если (СтрокаСкидок.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры
				// Или СтрокаСкидок.ХарактеристикаНоменклатуры = ПустаяХарактеристика) Тогда
				Если (СтрокаСкидок.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры
					Или СтрокаСкидок.ХарактеристикаНоменклатуры = ПустаяХарактеристика)
					И (СтрокаСкидок.Брендообъем = СтрокаТЧ.Брендообъем
					Или СтрокаСкидок.Брендообъем = ПустойБрендообъем)
					И (СтрокаСкидок.ТоварнаяКатегория = СтрокаТЧ.ТоварнаяКатегория
					Или СтрокаСкидок.ТоварнаяКатегория = ПустаяКатегория)
					//++ Spl_Апроф 05.05.2015 (k.russkih@a-prof.ru)
					//И (СписокДивизионАдрес.Дивизион = СтрокаСкидок.ПЦ_ДивизионАдрес ИЛИ СписокДивизионАдрес.АдресаПоставки = СтрокаСкидок.ПЦ_ДивизионАдрес ИЛИ Справочники.ПРГДивизионы.ПустаяСсылка() = СтрокаСкидок.ПЦ_ДивизионАдрес)
					//-- Spl_Апроф				 
					Тогда
					
					//----m.ionov@a-prof.ru---
					Если СтрокаСкидок.НУсловие = УсловиеКолво Или СтрокаСкидок.ЦУсловие = УсловиеКолво Тогда
						СтруктураПоискаКоличества.Номенклатура = СтрокаТЧ.Номенклатура;
						СтруктураПоискаКоличества.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
						
						КоличествоНоменклатуры = НайтиСтрокуТабЧасти(ТаблицаКоличестваТоваров, СтруктураПоискаКоличества).Количество;
					КонецЕсли;
					
					Если (СтрокаСкидок.НУсловие = УсловиеКолво
						И СтрокаСкидок.НЗначениеУсловия < КоличествоНоменклатуры
						Или СтрокаСкидок.НУсловие <> УсловиеКолво)
						И (СтрокаСкидок.ЦУсловие = УсловиеКолво
						И СтрокаСкидок.ЦЗначениеУсловия < КоличествоНоменклатуры
						Или СтрокаСкидок.ЦУсловие <> УсловиеКолво) Тогда
						Если СтрокаСкидок.НПроцентСкидкиНаценки <> Null Тогда
							
							ЕстьОстатокПоПриказам = Истина;
							
							СуммаСкидки = СтрокаТЧ.СуммаБезСкидки * СтрокаСкидок.НПроцентСкидкиНаценки / 100;
							
							Ограничение = СтрокаСкидок.НОграничениеСкидкиНаценки * СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
							
							// Проверим ограничение скидки.
							Если (Ограничение > 0 И СуммаСкидки > Ограничение)
								Или (Ограничение < 0 И СуммаСкидки < Ограничение) Тогда
								СуммаСкидки = Ограничение;
							КонецЕсли;
							
							//m.ionov@a-prof.ru 25.12.2014
							Если СтрокаСкидок.ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем Тогда
								
								//Если проданный объем то в остатках скидки обязательно должно быть указано или Номенклатура, или Брендообъем, или ТоварнаяКатагория
								РаспределитьКоличество = СтрокаТЧ.Количество;
								СуммаОстаткаСкидки = 0;
								СтрокиОстаткиСкидки = ОстаткиПоСкидкам.НайтиСтроки(Новый Структура("УстановкаСкидокНоменклатуры",СтрокаСкидок.УстановкаСкидокНоменклатуры));
								Для каждого СтрокаОстаткаСкидки Из СтрокиОстаткиСкидки Цикл
									
									//>>030616 Степанов Степанов 52014 если надо объединять б/о используем другую таблицу, добавлено условие по ПРГ_ОбъединятьБрендообъем
									Если НЕ СтрокаОстаткаСкидки.ПРГ_ОбъединятьБрендообъем тогда
										Если (СтрокаОстаткаСкидки.Номенклатура = СтрокаТЧ.Номенклатура ИЛИ СтрокаОстаткаСкидки.Номенклатура = ПустаяНоменклатура)
											//{16.02.2016 Островерхий заявка №49048 
											//И (СтрокаСкидок.Брендообъем = СтрокаТЧ.Брендообъем Или СтрокаСкидок.Брендообъем = ПустойБрендообъем)
											//И (СтрокаСкидок.ТоварнаяКатегория = СтрокаТЧ.ТоварнаяКатегория Или СтрокаСкидок.ТоварнаяКатегория = ПустаяКатегория) 
											И (СтрокаОстаткаСкидки.Брендообъем = СтрокаТЧ.Брендообъем Или СтрокаОстаткаСкидки.Брендообъем = ПустойБрендообъем)
											И (СтрокаОстаткаСкидки.ТоварнаяКатегория = СтрокаТЧ.ТоварнаяКатегория Или СтрокаОстаткаСкидки.ТоварнаяКатегория = ПустаяКатегория)
											//16.02.2016 Островерхий} 	
											И СтрокаОстаткаСкидки.КоличествоОстаток > 0 Тогда
											
											МожемСписатьКоличество = Мин(СтрокаОстаткаСкидки.КоличествоОстаток, РаспределитьКоличество);
											
											СуммаОстаткаСкидки = СуммаОстаткаСкидки + СтрокаОстаткаСкидки.КоличествоОстаток;
											
											РаспределитьКоличество = РаспределитьКоличество - МожемСписатьКоличество;
											СтрокаОстаткаСкидки.КоличествоОстаток = СтрокаОстаткаСкидки.КоличествоОстаток - МожемСписатьКоличество;
											
											СтрокаДляВозвратаСкидки = мТаблицаДляВозвратаСкидок.Добавить();
											ЗаполнитьЗначенияСвойств(СтрокаДляВозвратаСкидки,СтрокаОстаткаСкидки);
											СтрокаДляВозвратаСкидки.НомерСтрокиСкидки = ТаблицаСкидок.Индекс(СтрокаСкидок);
											СтрокаДляВозвратаСкидки.КоличествоОстаток = МожемСписатьКоличество; 	
										КонецЕсли;
									Иначе
										//надо получить доступный остаток количества из таблицы б/о
										СтруктураПоискаБО = Новый Структура;
										СтруктураПоискаБО.Вставить("УстановкаСкидокНоменклатуры", СтрокаОстаткаСкидки.УстановкаСкидокНоменклатуры);
										СтруктураПоискаБО.Вставить("Брендообъем", НоменклатураБрендообъем);
										
										СтрокиБрендообъемов = КопияТаблицаСкидокПолная.НайтиСтроки(СтруктураПоискаБО);
										Для Каждого СтрокаБрендообъема из СтрокиБрендообъемов цикл
											ДоступноеКоличествоБО = СтрокаБрендообъема.КоличествоПоПриказу * 0.1 + СтрокаБрендообъема.КоличествоОстаток;
											Если ДоступноеКоличествоБО < 0 тогда
												ДоступноеКоличествоБО=0;
											КонецЕсли;	
											
											МожемСписатьКоличество = Мин(ДоступноеКоличествоБО, РаспределитьКоличество);
											//СуммаОстаткаСкидки = СуммаОстаткаСкидки + СтрокаОстаткаСкидки.КоличествоОстаток;
											РаспределитьКоличество = РаспределитьКоличество - МожемСписатьКоличество;
											СтрокаБрендообъема.КоличествоОстаток = СтрокаБрендообъема.КоличествоОстаток - МожемСписатьКоличество;
											СтрокаДляВозвратаСкидки = мТаблицаДляВозвратаСкидок.Добавить();
											ЗаполнитьЗначенияСвойств(СтрокаДляВозвратаСкидки,СтрокаОстаткаСкидки);
											СтрокаДляВозвратаСкидки.НомерСтрокиСкидки = ТаблицаСкидок.Индекс(СтрокаСкидок);
											СтрокаДляВозвратаСкидки.КоличествоОстаток = МожемСписатьКоличество; 	
										КонецЦикла;	
									КонецЕсли;
								КонецЦикла; 
								
								Если РаспределитьКоличество > 0 Тогда
									СообщениеОСкидке = "По продукции " + СокрЛП(СокрЛП(СтрокаТЧ.Номенклатура)) + " (код " + СокрЛП(СтрокаТЧ.Номенклатура.Код) + ") есть скидка но остаток количества меньше чем количество в заказе." + Символы.ПС +
									"Остаток: " + СокрЛП(СуммаОстаткаСкидки) + " Заказано: " + СокрЛП(СтрокаТЧ.Количество);
									СуммаСкидки = 0;
								Иначе
									СообщениеОСкидке = "";
								КонецЕсли;
								//Если СтрокаТЧ.Количество > СтрокаСкидок.ОстатокКоличества Тогда
								//	ОбщегоНазначения.Сообщение("По продукции " + СокрЛП(СокрЛП(СтрокаТЧ.Номенклатура)) + " (код " + СокрЛП(СтрокаТЧ.Номенклатура.Код) + ") есть скидка но остаток количества меньше чем количество в заказе." + Символы.ПС +
								//	"Остаток: " + СокрЛП(СтрокаСкидок.ОстатокКоличества) + " Заказано: " + СокрЛП(СтрокаТЧ.Количество), СтатусСообщения.Важное);
								//	СуммаСкидки = 0;
								//Иначе
								//	СтрокаСкидок.ОстатокКоличества = СтрокаСкидок.ОстатокКоличества - СтрокаТЧ.Количество;
								//КонецЕсли;
								
							ИначеЕсли (СтрокаСкидок.ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки 
								ИЛИ СтрокаСкидок.ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг) Тогда
								
								//Если сумма предоставленной скидки и акт начисления, то данных по товарам у нас не будет
								//РаспределитьСкидку = СуммаСкидки;
								
								//>>100915 Степанов 43816; убрать из расчета ручную скидку (2% по предоплате) 
								//РаспределитьСкидку = СтрокаТЧ.СуммаБезСкидки - Окр(СтрокаТЧ.Цена * (100-СтрокаСкидок.НПроцентСкидкиНаценки) / 100, 2) * СтрокаТЧ.Количество;
								//>>280416 Степанов ручная скидка должна вычитаться последовательным расчетом
								//РаспределитьСкидку = СтрокаТЧ.СуммаБезСкидки - Окр(СтрокаТЧ.Цена * (100-СтрокаСкидок.НПроцентСкидкиНаценки-СтрокаТЧ.ПроцентСкидкиНаценки) / 100, 2) * СтрокаТЧ.Количество;
								РаспределитьСкидку = СтрокаТЧ.СуммаБезСкидки - Окр(СтрокаТЧ.Цена * (100-СтрокаТЧ.ПроцентСкидкиНаценки)/100*(100-СтрокаСкидок.НПроцентСкидкиНаценки)/100, 2) * СтрокаТЧ.Количество;
								//<<100915
								
								СуммаОстаткаСкидки = 0;
								
								ЕстьОстатокПоПриказам = Ложь;
								
								СтрокиОстаткиСкидки = ОстаткиПоСкидкам.НайтиСтроки(Новый Структура("УстановкаСкидокНоменклатуры",СтрокаСкидок.УстановкаСкидокНоменклатуры));
								Для каждого СтрокаОстаткаСкидки Из СтрокиОстаткиСкидки Цикл
									
									Если СтрокаОстаткаСкидки.СуммаСкидкиОстаток < 1 Тогда
										Продолжить;
									КонецЕсли;
									
									ЕстьОстатокПоПриказам = Истина;
									
									СуммаОстаткаСкидки = СуммаОстаткаСкидки + СтрокаОстаткаСкидки.СуммаСкидкиОстаток;
									
									СуммаСкидкиОстаток = СтрокаОстаткаСкидки.СуммаСкидкиОстаток;
									/// Кунов О.В., 21.05.2015, 28.05.2015 - 39615
									Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
										СуммаСкидкиОстатокНДС = УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиОстаток, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
									Иначе
										СуммаСкидкиОстатокНДС = 0;
									КонецЕсли;
									
									//>>271015 Степанов 
									Если (РаспределитьСкидку > (СуммаСкидкиОстаток - Окр(СуммаСкидкиОстатокНДС,2))) И
										ЕстьСтрокаСкидкиПолныйПроцент тогда
										Продолжить;
									Конецесли;
									//<<271015
									
									МожемСписатьСкидки = Мин(РаспределитьСкидку, СуммаСкидкиОстаток - СуммаСкидкиОстатокНДС);
									///
									//МожемСписатьСкидки = Мин(РаспределитьСкидку, СтрокаОстаткаСкидки.СуммаСкидкиОстаток);
									
									РаспределитьСкидку = РаспределитьСкидку - МожемСписатьСкидки;
									//Если РаспределитьСкидку > 0 И РаспределитьСкидку < 1 Тогда
									//	МожемСписатьСкидки = МожемСписатьСкидки + РаспределитьСкидку;
									//	РаспределитьСкидку = 0;
									//КонецЕсли;
									
									СтрокаДляВозвратаСкидки = мТаблицаДляВозвратаСкидок.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаДляВозвратаСкидки,СтрокаОстаткаСкидки);
									СтрокаДляВозвратаСкидки.НомерСтрокиСкидки = ТаблицаСкидок.Индекс(СтрокаСкидок);
									СтрокаДляВозвратаСкидки.СуммаСкидкиОстаток = МожемСписатьСкидки;
									
									//СтрокаОстаткаСкидки.СуммаСкидкиОстаток = СтрокаОстаткаСкидки.СуммаСкидкиОстаток - МожемСписатьСкидки;									
									/// Кунов О.В., 21.05.2015, 28.05.2015 - 39615
									Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
										МожемСписатьСкидкиНДС = УчетНДС.РассчитатьСуммуНДС(МожемСписатьСкидки, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
									Иначе
										МожемСписатьСкидкиНДС = 0;
									КонецЕсли;
									СтрокаОстаткаСкидки.СуммаСкидкиОстаток = ОКР(СуммаСкидкиОстаток - МожемСписатьСкидки - МожемСписатьСкидкиНДС,2);
									///
									
								КонецЦикла;
								
								//>>271015 Если РаспределитьСкидку > 0 Тогда
								//	СообщениеОСкидке = "По продукции " + СокрЛП(СокрЛП(СтрокаТЧ.Номенклатура)) + " (код " + СокрЛП(СтрокаТЧ.Номенклатура.Код) + ") есть скидка но остаток суммы скидки меньше чем сумма заказа. % скидки пересчитан под остаток." + Символы.ПС +
								//			"Остаток скидки: " + СокрЛП(Окр(СуммаОстаткаСкидки,2)) + " Сумма скидки: " + СокрЛП(Окр(СуммаСкидки,2));	
								//Иначе
								//	СообщениеОСкидке = "";
								//КонецЕсли;
								
								СуммаСкидки = СуммаСкидки - РаспределитьСкидку;
								
							КонецЕсли;
							
							//Посмотрим процент скидки - если он будет нулевой - то обрабатываем другу строку
							//ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
							//----m.ionov@a-prof.ru---
							
							ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
							
							Если ЕстьОстатокПоПриказам Тогда
								Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС И ПроцентСкидки <> СтрокаСкидок.НПроцентСкидкиНаценки Тогда
									СкидкаСЦены = СуммаСкидки / СтрокаТЧ.Количество;
									СкидкаСЦены = Цел(СкидкаСЦены * 100) / 100;
									ПроцентСкидки = Окр(СкидкаСЦены / СтрокаТЧ.Цена * 100, 2);
								КонецЕсли;
							Иначе
								ПроцентСкидки = 0;
							КонецЕсли;
							
							/// Кунов О.В., 29.05.2015 - 39615
							/// если скидка не изменила цену - нет смысла ее вообще указывать
							Если Окр(СтрокаТЧ.Цена * (1 - ПроцентСкидки / 100), 2) = СтрокаТЧ.Цена Тогда
								ПроцентСкидки = 0;
							КонецЕсли;
							///
							
							//m.ionov@a-prof.ru 16.02.2015
							//----m.ionov@a-prof.ru---
							
							Если Не ПроцентСкидки = 0 И СуммаСкидки > 0 Тогда
								//m.ionov@a-prof.ru 16.02.2015
								//Принято решение что не максимальную скидку подставляем - а по FIFO
								//И (МаксСуммаСкидки = Неопределено Или МаксСуммаСкидки < СуммаСкидки) Тогда
								МаксСуммаСкидки = СуммаСкидки;  
								МаксПроцентСкидки = ПроцентСкидки;
								МаксСообщениеОСкидке = СообщениеОСкидке;
								
								ПодходящаяСкидка = СтрокаСкидок;						
								
								ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
								ПодходящаяСкидкаНоменклатура = Истина;
								
								//m.ionov@a-prof.ru 25.12.2014
								//m.ionov@a-prof.ru 16.02.2015
								Прервать;
								//----m.ionov@a-prof.ru---
							КонецЕсли;
						КонецЕсли;
						
						//m.ionov@a-prof.ru 25.12.2014
						//Не используем скидки по ценовым группам
						//Если СтрокаСкидок.ЦПроцентСкидкиНаценки <> Null Тогда
						//	СуммаСкидки = СтрокаТЧ.СуммаБезСкидки * СтрокаСкидок.ЦПроцентСкидкиНаценки / 100;
						//	Ограничение = СтрокаСкидок.ЦОграничениеСкидкиНаценки * СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
						
						//	// Проверим ограничение скидки.
						//	Если (Ограничение > 0 И СуммаСкидки > Ограничение)
						//	 Или (Ограничение < 0 И СуммаСкидки < Ограничение) Тогда
						//		СуммаСкидки = Ограничение;
						//	КонецЕсли;
						
						//	Если МаксСуммаСкидки = Неопределено Или МаксСуммаСкидки < СуммаСкидки Тогда
						//		МаксСуммаСкидки = СуммаСкидки;
						//		ПодходящаяСкидка = СтрокаСкидок;
						//		ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
						//		ПодходящаяСкидкаНоменклатура = Ложь;
						//	КонецЕсли;
						//КонецЕсли;
						//----m.ionov@a-prof.ru---
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//m.ionov@a-prof.ru 02.02.2015
			Если МаксСообщениеОСкидке = Неопределено Тогда
				МаксСообщениеОСкидке = СообщениеОСкидке;
			КонецЕсли;
			
			Если Не ПустаяСтрока(МаксСообщениеОСкидке) Тогда
				ОбщегоНазначения.Сообщение(МаксСообщениеОСкидке, СтатусСообщения.ОченьВажное);
			КонецЕсли;
			
			//Теперь вернем скдки которые не подошли
			Сч = 0;
			НужнаяСтрока = ?(ПодходящаяСкидка = Неопределено,-1, ТаблицаСкидок.Индекс(ПодходящаяСкидка));
			Пока Сч < мТаблицаДляВозвратаСкидок.Количество() Цикл
				СтрокаДляВозвратаСкидки = мТаблицаДляВозвратаСкидок[Сч]; 
				Если СтрокаДляВозвратаСкидки.НомерСтрокиСкидки = НужнаяСтрока Тогда
					Сч = Сч + 1;
				Иначе
					ВозращаемаяСкидка = ОстаткиПоСкидкам.Добавить();
					ЗаполнитьЗначенияСвойств(ВозращаемаяСкидка, СтрокаДляВозвратаСкидки);
					мТаблицаДляВозвратаСкидок.Удалить(СтрокаДляВозвратаСкидки);
				КонецЕсли;
			КонецЦикла;
			ОстаткиПоСкидкам.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры,ПРГ_ОбъединятьБрендообъем","КоличествоОстаток,СуммаСкидкиОстаток");
			ОстаткиПоСкидкам.Сортировать("Номенклатура УБЫВ,Брендообъем,ТоварнаяКатегория");
			//----m.ionov@a-prof.ru---
			
			Если ЗначениеЗаполнено(МаксСуммаСкидки) Тогда
				//m.ionov@a-prof.ru 02.02.2015
				//СтрокаТЧ.ПроцентАвтоматическихСкидок = ПроцентСкидки;
				СтрокаТЧ.ПроцентАвтоматическихСкидок = МаксПроцентСкидки;
				//----m.ionov@a-prof.ru---
				
				Если ПодходящаяСкидкаНоменклатура Тогда
					СтрокаТЧ.УсловиеАвтоматическойСкидки         = ПодходящаяСкидка.НУсловие;
					//m.ionov@a-prof.ru 25.12.2014
					//СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = ПодходящаяСкидка.НЗначениеУсловия;
					СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = ПодходящаяСкидка.УстановкаСкидокНоменклатуры;
					//----m.ionov@a-prof.ru---
				Иначе
					СтрокаТЧ.УсловиеАвтоматическойСкидки         = ПодходящаяСкидка.ЦУсловие;
					СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = ПодходящаяСкидка.ЦЗначениеУсловия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВалютаТовара = ?(ВидРеализации = Перечисления.ВидыСкидок.Розничная,
	ВалютаРегламентированногоУчета, ДокументОбъект.ВалютаДокумента);
	
	ПроверкаМинимальнойЦены(ДатаСкидок, ТаблицаТоваров, МинимальныеЦены, СписокФильтров,
	УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара, Истина); //m.ionov@a-prof.ru 16.02.2015
	
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ПроцентАвтоматическихСкидок"), "ПроцентАвтоматическихСкидок");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма"), "Сумма");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("УсловиеАвтоматическойСкидки"), "УсловиеАвтоматическойСкидки");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ЗначениеУсловияАвтоматическойСкидки"), "ЗначениеУсловияАвтоматическойСкидки");
	
	Если УчитыватьНДС Тогда
		ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("СуммаНДС"), "СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСкидкиПриПродажеСтарый()

// Процедура рассчитывает скидки в документе.
//
// Параметры:
//  ДокументОбъект             - документ, для которого рассчитываем скидки,
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  СтруктураПараметров        - структура, содержащая дополнительные параметря, необходимые для расчета скидок.
//
Процедура РассчитатьСкидкиПриПродаже(ДокументОбъект, ТабличнаяЧастьНоменклатуры,
	СтруктураПараметров, МинимальныеЦены, СписокФильтров) Экспорт
	
	Перем ВидРеализации, СуммаДокумента;
	Перем УчитыватьНДС, СуммаВключаетНДС, ДатаСкидок, ВалютаРегламентированногоУчета, УчетнаяПолитика;
	
	
	//Ответ = Вопрос("Рассчитать по старой схеме?", РежимДиалогаВопрос.ДаНет,0);								 
	//Если Ответ=КодВозвратаДиалога.Да тогда
	//	РассчитатьСкидкиПриПродажеСтарый(ДокументОбъект, ТабличнаяЧастьНоменклатуры,
	//	СтруктураПараметров, МинимальныеЦены, СписокФильтров);
	//	Возврат;							 
	//КонецЕсли;	
	
	
	Если ТабличнаяЧастьНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч (ТабличнаяЧастьНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Скопировать();
	Иначе
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Выгрузить();
	КонецЕсли;
	
	ТаблицаТоваров.ЗаполнитьЗначения(0, "ПроцентАвтоматическихСкидок");
	//>>
	Если ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ЗаказПокупателя") или ТипЗнч(ДокументОбъект)=Тип("ДокументСсылка.ЗаказПокупателя") тогда
		ТаблицаТоваров.ЗаполнитьЗначения(Документы.УстановкаСкидокНоменклатуры.ПустаяСсылка(), "ЗначениеУсловияАвтоматическойСкидки");
		ТаблицаТоваров.ЗаполнитьЗначения(0, "НомерСтрокиПолучателя");
		ТаблицаТоваров.ЗаполнитьЗначения(0, "НомерСтрокиТовара");
		ТаблицаТоваров.ЗаполнитьЗначения(0, "СуммаСкидкиСНДС");
	ИначеЕсли ТипЗнч(ДокументОбъект)=Тип("ДокументОбъект.ПР_Претензия") или ТипЗнч(ДокументОбъект)=Тип("ДокументСсылка.ПР_Претензия") тогда
		ТаблицаТоваров.ЗаполнитьЗначения(Документы.УстановкаСкидокНоменклатуры.ПустаяСсылка(), "ЗначениеУсловияАвтоматическойСкидки");
		ТаблицаТоваров.ЗаполнитьЗначения(0, "НомерСтрокиПолучателя");
		ТаблицаТоваров.ЗаполнитьЗначения(0, "НомерСтрокиТовара");
	КонецЕсли;
	//<<
	
	Если ТаблицаТоваров.Колонки.Найти("Коэффициент") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("Коэффициент");
		ТаблицаТоваров.ЗаполнитьЗначения(1, "Коэффициент");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезСкидки");
	
	ТаблицаТоваров.Колонки.Добавить("Брендообъем");
	ТаблицаТоваров.Колонки.Добавить("ТоварнаяКатегория");
	ТаблицаТоваров.Колонки.Добавить("ОстатокКоличества");
	ТаблицаТоваров.Колонки.Добавить("ОстатокСкидки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.ПроцентСкидкиНаценки > 0 Тогда
			СтрокаТаблицы.СуммаБезСкидки = (СтрокаТаблицы.Количество * СтрокаТаблицы.Цена)*(1-СтрокаТаблицы.ПроцентСкидкиНаценки/100);
		Иначе
			СтрокаТаблицы.СуммаБезСкидки = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
		КонецЕсли;
		
		//МассивБрендообъемов.Добавить(СтрокаТаблицы.Номенклатура.НСИ_Брендообъем); 
		СтрокаТаблицы.Брендообъем = СтрокаТаблицы.Номенклатура.НСИ_Брендообъем;
		//МассивТоварныхКатегорий.Добавить(СтрокаТаблицы.Номенклатура.НСИ_ТоварнаяКатегория); 
		СтрокаТаблицы.ТоварнаяКатегория = СтрокаТаблицы.Номенклатура.НСИ_ТоварнаяКатегория;
	КонецЦикла;
	
	СтруктураПараметров.Свойство("ВидРеализации"                 , ВидРеализации);
	СтруктураПараметров.Свойство("ДатаСкидок"                    , ДатаСкидок);
	СтруктураПараметров.Свойство("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Свойство("СуммаДокумента"                , СуммаДокумента);
	СтруктураПараметров.Свойство("УчитыватьНДС"                  , УчитыватьНДС);
	СтруктураПараметров.Свойство("СуммаВключаетНДС"              , СуммаВключаетНДС);
	СтруктураПараметров.Свойство("УчетнаяПолитика"              , УчетнаяПолитика);
	
	УчитыватьНДС = ?(УчитыватьНДС = Неопределено, Ложь, УчитыватьНДС);
	
	ДатаСкидок = ?(НЕ ЗначениеЗаполнено(ДатаСкидок), ДокументОбъект.Дата, ДатаСкидок);
	
	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		КурсКратность = 1;
	Иначе
		КурсКратность = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) / ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	МассивРезультатовПоСкидкам = ЗапросПоСкидкам(ДатаСкидок, ДокументОбъект, ТабличнаяЧастьНоменклатуры); 
	
	//Результат = Запрос.ВыполнитьПакет();
	ТаблицаСкидок = МассивРезультатовПоСкидкам[15].Выгрузить(); 
	ТаблицаСтруктурыОстатков = МассивРезультатовПоСкидкам[14].Выгрузить(); 
	ТаблицаВсехОстатковПоПриказам = МассивРезультатовПоСкидкам[13].Выгрузить(); 
	
	/// Кунов О.В., 02.05.2017 - 64489
	
	/// Кунов О.В., 12.10.2017 - 71667
	НомераСтрок = ТаблицаСкидок.Скопировать(, "НомерСтрокиЗаказа");
	НомераСтрок.Свернуть("НомерСтрокиЗаказа");
	НомераСтрок = НомераСтрок.ВыгрузитьКолонку("НомерСтрокиЗаказа");
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПР_Претензия") Тогда
		ТаблицаСкидок.Колонки.Добавить("ПриказВыбранВручную", Новый ОписаниеТипов("Число"));
		Для Каждого НомерСтрокиЗаказа Из НомераСтрок Цикл
			СтрокаТЧНоменклатуры = ТабличнаяЧастьНоменклатуры.Найти(НомерСтрокиЗаказа, "НомерСтроки");
			Если ЗначениеЗаполнено(СтрокаТЧНоменклатуры.ПриказУстановкиСкидки) Тогда
				СтрокаТаблицыСкидок = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаСкидок, Новый Структура("НомерСтрокиЗаказа, Приказ", НомерСтрокиЗаказа, СтрокаТЧНоменклатуры.ПриказУстановкиСкидки));
				Если СтрокаТаблицыСкидок <> Неопределено Тогда
					СтрокаТаблицыСкидок.ПриказВыбранВручную = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСкидок.Сортировать("Приоритет, НомерСтрокиЗаказа, ПриказВыбранВручную УБЫВ, ДатаПриказа"); /// Кунов О.В., 10.08.2017 - 69158
	Иначе
		ТаблицаСкидок.Сортировать("Приоритет, НомерСтрокиЗаказа, ДатаПриказа"); /// Кунов О.В., 10.08.2017 - 69158
	КонецЕсли;
	
	///
	
	///
	
	//>>ТаблицаСкидок.Индексы.Добавить("Номенклатура");	
	
	//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	ТаблицаСтруктурыОстатков.Колонки.Добавить("КоличествоОстаток");
	ТаблицаСтруктурыОстатков.Колонки.Добавить("СуммаСкидкиОстаток");
	ТаблицаСтруктурыОстатков.Колонки.Добавить("КоличествоОстатокСкользящий");
	ТаблицаСтруктурыОстатков.Колонки.Добавить("СуммаСкидкиОстатокСкользящий");
	
	ТаблицаСкидок.Колонки.Добавить("ИндексСтрокиТаблицыСтруктурыОстатков");
	ТаблицаСкидок.Колонки.Добавить("КоличествоОстаток");
	ТаблицаСкидок.Колонки.Добавить("СуммаСкидкиОстаток");
	ТаблицаСкидок.Колонки.Добавить("Активность");
	ТаблицаСкидок.Колонки.Добавить("ПроцентАвтоСкидки");
	ТаблицаСкидок.Колонки.Добавить("ЦенаПослеСкидки");
	ТаблицаСкидок.Колонки.Добавить("СуммаСкидкиБезНДС");
	ТаблицаСкидок.Колонки.Добавить("СуммаСкидкиСНДС");
	
	
	Для Каждого ТекСтрокаСтруктурыОстатков из ТаблицаСтруктурыОстатков цикл
		
		ЕстьОтборПоПолучателю   = Ложь;
		ЕстьОтборПоОбъекту      = Ложь;
		ЕстьОтборПоНоменклатуре = Ложь;
		ЕстьОтборПоБрендообъему = Ложь;
		ОбъединятьБО = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ТекСтрокаСтруктурыОстатков.Приказ,"ПРГ_ОбъединятьБрендообъем");
		
		ОтборОстатки = Новый Структура;
		ОтборОстатки.Вставить("Приказ", ТекСтрокаСтруктурыОстатков.Приказ);
		Если ТипЗнч(ТекСтрокаСтруктурыОстатков.ПолучательСкидки) = Тип("СправочникСсылка.ПолучателиСкидки") Тогда
			Если ТекСтрокаСтруктурыОстатков.ПолучательСкидки <> Справочники.ПолучателиСкидки.ПустаяСсылка() тогда
				ОтборОстатки.Вставить("ПолучательСкидки", ТекСтрокаСтруктурыОстатков.ПолучательСкидки);
				ЕстьОтборПоПолучателю = Истина;
			КонецЕсли;	
		КонецЕсли;
		Если ЕстьОтборПоПолучателю = Ложь тогда
			Если ТипЗнч(ТекСтрокаСтруктурыОстатков.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ТекСтрокаСтруктурыОстатков.Контрагент <> Справочники.Контрагенты.ПустаяСсылка() тогда
					ОтборОстатки.Вставить("Контрагент", ТекСтрокаСтруктурыОстатков.Контрагент);
				КонецЕсли;	
			КонецЕсли;	
			Если ТипЗнч(ТекСтрокаСтруктурыОстатков.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если ТекСтрокаСтруктурыОстатков.ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() тогда
					ОтборОстатки.Вставить("ДоговорКонтрагента", ТекСтрокаСтруктурыОстатков.ДоговорКонтрагента);
				КонецЕсли;	
			КонецЕсли;	
			Если ТипЗнч(ТекСтрокаСтруктурыОстатков.ПЦ_Дивизион) = Тип("СправочникСсылка.ПРГДивизионы") Тогда
				Если ТекСтрокаСтруктурыОстатков.ПЦ_Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
					ОтборОстатки.Вставить("ПЦ_Дивизион", ТекСтрокаСтруктурыОстатков.ПЦ_Дивизион);
				КонецЕсли;	
			КонецЕсли;	
			Если ТипЗнч(ТекСтрокаСтруктурыОстатков.ПЦ_АдресПоставки) = Тип("СправочникСсылка.АдресаПоставки") Тогда
				Если ТекСтрокаСтруктурыОстатков.ПЦ_АдресПоставки <> Справочники.АдресаПоставки.ПустаяСсылка() тогда
					ОтборОстатки.Вставить("ПЦ_АдресПоставки", ТекСтрокаСтруктурыОстатков.ПЦ_АдресПоставки);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		Если ТипЗнч(ТекСтрокаСтруктурыОстатков.ОбъектСкидки) = Тип("СправочникСсылка.ОбъектыСкидок") Тогда
			Если ТекСтрокаСтруктурыОстатков.ОбъектСкидки <> Справочники.ОбъектыСкидок.ПустаяСсылка() тогда
				Если Не ОбъединятьБО тогда
					ОтборОстатки.Вставить("ОбъектСкидки", ТекСтрокаСтруктурыОстатков.ОбъектСкидки);
					ЕстьОтборПоОбъекту      = Истина;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		Если ЕстьОтборПоОбъекту = Ложь тогда
			Если ТипЗнч(ТекСтрокаСтруктурыОстатков.НоменклатураПриказа) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если ТекСтрокаСтруктурыОстатков.НоменклатураПриказа <> Справочники.Номенклатура.ПустаяСсылка() тогда
					Если Не ОбъединятьБО тогда
						ОтборОстатки.Вставить("Номенклатура", ТекСтрокаСтруктурыОстатков.НоменклатураПриказа);
						ЕстьОтборПоНоменклатуре      = Истина;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			Если ЕстьОтборПоНоменклатуре = Ложь тогда
				Если ТипЗнч(ТекСтрокаСтруктурыОстатков.Брендообъем) = Тип("СправочникСсылка.НСИ_Брендообъемы") Тогда
					Если ТекСтрокаСтруктурыОстатков.Брендообъем <> Справочники.НСИ_Брендообъемы.ПустаяСсылка() тогда
						ОтборОстатки.Вставить("Брендообъем", ТекСтрокаСтруктурыОстатков.Брендообъем);
						ЕстьОтборПоБрендообъему      = Истина;
					КонецЕсли;	
				КонецЕсли;
				Если ЕстьОтборПоБрендообъему = Ложь тогда
					Если ТипЗнч(ТекСтрокаСтруктурыОстатков.ТоварнаяКатегория) = Тип("СправочникСсылка.НСИ_ТоварныеКатегории") Тогда
						Если ТекСтрокаСтруктурыОстатков.ТоварнаяКатегория <> Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка() тогда
							ОтборОстатки.Вставить("ТоварнаяКатегория", ТекСтрокаСтруктурыОстатков.ТоварнаяКатегория);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокиОстатков = ТаблицаВсехОстатковПоПриказам.НайтиСтроки(ОтборОстатки);
		Если СтрокиОстатков.Количество()=0 тогда
			ТекСтрокаСтруктурыОстатков.КоличествоОстаток=0;
			ТекСтрокаСтруктурыОстатков.СуммаСкидкиОстаток=0;
		ИначеЕсли СтрокиОстатков.Количество()=1 тогда
			Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
				ТекСтрокаСтруктурыОстатков.КоличествоОстаток=СтрокаОстатков.КоличествоОстаток;
				ТекСтрокаСтруктурыОстатков.СуммаСкидкиОстаток=СтрокаОстатков.СуммаСкидкиОстаток;
				ТекСтрокаСтруктурыОстатков.КоличествоОстатокСкользящий=СтрокаОстатков.КоличествоОстаток;
				ТекСтрокаСтруктурыОстатков.СуммаСкидкиОстатокСкользящий=СтрокаОстатков.СуммаСкидкиОстаток;
				
				СтрокиТаблицыСкидок = ТаблицаСкидок.НайтиСтроки(ОтборОстатки);
				Для каждого СтрокаТаблицыСкидок из СтрокиТаблицыСкидок цикл
					СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков=ТаблицаСтруктурыОстатков.Индекс(ТекСтрокаСтруктурыОстатков);
					СтрокаТаблицыСкидок.КоличествоОстаток=СтрокаОстатков.КоличествоОстаток;
					СтрокаТаблицыСкидок.СуммаСкидкиОстаток=СтрокаОстатков.СуммаСкидкиОстаток;
				КонецЦикла;	 
				
			КонецЦикла;
		Иначе
			//исключительная ситуация
			Сообщить("Обнаружена исключительная ситуация, связанная с расчетом доступных остатков по скидкам! необходимо обратиться к разработчикам", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		//>>21.10.2016 Степанов
		Если СтрокаТаблицы.Цена<=0 Тогда
			Продолжить;
		КонецЕсли; 
		//<<21.10.2016
		
		ОтборНомерСтроки = Новый Структура;
		ОтборНомерСтроки.Вставить("НомерСтрокиЗаказа", СтрокаТаблицы.НомерСтроки);
		СтрокиТаблицыСкидок = ТаблицаСкидок.НайтиСтроки(ОтборНомерСтроки);
		Если СтрокиТаблицыСкидок.Количество()=1 тогда
			//надо рассчитать Процент,ЦенаПослеСкидки,СуммаСкидки; 
			//для применения лимитированной скидки должно быть выполнено условие, что цена изменилась хотя бы на копейку
			Для каждого СтрокаТаблицыСкидок из СтрокиТаблицыСкидок цикл
				Если СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период Тогда
					СтрокаТаблицыСкидок.Активность = 1;
					СтрокаТаблицыСкидок.ПроцентАвтоСкидки = СтрокаТаблицыСкидок.ПроцентСкидки;
					СтрокаТаблицыСкидок.ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100, 2);
					СтрокаТаблицыСкидок.СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - СтрокаТаблицыСкидок.ЦенаПослеСкидки * СтрокаТаблицыСкидок.Количество;
					Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
						СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицыСкидок.СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
					Иначе
						СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС;
					КонецЕсли;
					
					СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыСкидок.ПроцентАвтоСкидки;
					СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыСкидок.Приказ;
					СтрокаТаблицы.НомерСтрокиПолучателя = СтрокаТаблицыСкидок.НомерСтрокиПолучателя;
					СтрокаТаблицы.НомерСтрокиТовара = СтрокаТаблицыСкидок.НомерСтрокиТовара;
					СтрокаТаблицы.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
					
				ИначеЕсли ((СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) или 
					(СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)) тогда
					
					Если СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков = Неопределено тогда
						Продолжить;
					КонецЕсли;	
					
					СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий;
					Если СуммаСкидкиОстатокСкользящий<5 тогда//считаем, что скидка уже предоставлена ранее
						Продолжить;
					КонецЕсли;	
					СуммаСкидкиПоПриказуПолная = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентСкидки)/100, 2) * СтрокаТаблицыСкидок.Количество;
					Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
						СуммаСкидкиПоПриказуПолная = ОКР(СуммаСкидкиПоПриказуПолная+УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиПоПриказуПолная, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС)),2);
					КонецЕсли;
					Если СуммаСкидкиПоПриказуПолная<0 тогда
						СуммаСкидкиПоПриказуПолная = 0;
						Продолжить;
					КонецЕсли;	
					Если СуммаСкидкиПоПриказуПолная>(СуммаСкидкиОстатокСкользящий+3) тогда//надо ограничивать процент и предоставлять скидку в рамках остатка по лимиту суммы
						СуммаБезСкидки = (СтрокаТаблицы.Количество * СтрокаТаблицы.Цена)*(1-СтрокаТаблицы.ПроцентСкидкиНаценки/100);
						Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
							СуммаСкидкиОстатокСкользящийБезНДС = СуммаСкидкиОстатокСкользящий - УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиОстатокСкользящий, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
						Иначе
							СуммаСкидкиОстатокСкользящийБезНДС = СуммаСкидкиОстатокСкользящий;
						КонецЕсли;	 
						ПроцентСкидки = Окр((СуммаСкидкиОстатокСкользящийБезНДС / СуммаБезСкидки) * 100, 2);
						Если Окр(СтрокаТаблицы.Цена * (1 - ПроцентСкидки / 100), 2) = СтрокаТаблицы.Цена Тогда
							ПроцентСкидки = 0;
							Продолжить;
						КонецЕсли;
						
						СтрокаТаблицыСкидок.Активность = 1;
						СтрокаТаблицыСкидок.ПроцентАвтоСкидки = ПроцентСкидки;
						СтрокаТаблицыСкидок.ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100, 2);
						СтрокаТаблицыСкидок.СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - СтрокаТаблицыСкидок.ЦенаПослеСкидки * СтрокаТаблицыСкидок.Количество;
						Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
							СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицыСкидок.СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
						Иначе
							СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС;
						КонецЕсли;
						
						СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыСкидок.ПроцентАвтоСкидки;
						СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыСкидок.Приказ;
						СтрокаТаблицы.НомерСтрокиПолучателя = СтрокаТаблицыСкидок.НомерСтрокиПолучателя;
						СтрокаТаблицы.НомерСтрокиТовара = СтрокаТаблицыСкидок.НомерСтрокиТовара;
				    	СтрокаТаблицы.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
					Иначе
						СтрокаТаблицыСкидок.Активность = 1;
						СтрокаТаблицыСкидок.ПроцентАвтоСкидки = СтрокаТаблицыСкидок.ПроцентСкидки;
						СтрокаТаблицыСкидок.ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100, 2);
						СтрокаТаблицыСкидок.СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - СтрокаТаблицыСкидок.ЦенаПослеСкидки * СтрокаТаблицыСкидок.Количество;
						Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
							СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицыСкидок.СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
						Иначе
							СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС;
						КонецЕсли;
						
						СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыСкидок.ПроцентАвтоСкидки;
						СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыСкидок.Приказ;
						СтрокаТаблицы.НомерСтрокиПолучателя = СтрокаТаблицыСкидок.НомерСтрокиПолучателя;
						СтрокаТаблицы.НомерСтрокиТовара = СтрокаТаблицыСкидок.НомерСтрокиТовара;
					    СтрокаТаблицы.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
					КонецЕсли;	
					//уменьшить скользящий остаток
					Если СтрокаТаблицыСкидок.Активность = 1 тогда
						Если СтрокаТаблицыСкидок.ПроцентСкидкиНаценки > 0 Тогда
							Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
				         	     СуммаАвтоматическойСкидкиСНДС = СтрокаТаблицы.Цена*СтрокаТаблицыСкидок.Количество*(100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100;
								 СуммаАвтоматическойСкидкиСНДС = СуммаАвтоматическойСкидкиСНДС+УчетНДС.РассчитатьСуммуНДС(СуммаАвтоматическойСкидкиСНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
							Иначе
				         	     СуммаАвтоматическойСкидкиСНДС = СтрокаТаблицы.Цена*СтрокаТаблицыСкидок.Количество*(100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100;
							КонецЕсли;
							ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий - Окр(СуммаАвтоматическойСкидкиСНДС,2);
						Иначе
							ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий - СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
						КонецЕсли;
					КонецЕсли;	
					
				ИначеЕсли СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем тогда
					
					Если СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков = Неопределено тогда
						Продолжить;
					КонецЕсли;	
					
					КоличествоОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].КоличествоОстатокСкользящий;
					Если КоличествоОстатокСкользящий<=0 тогда//считаем, что скидка уже предоставлена ранее
						Продолжить;
					КонецЕсли;	
					Если СтрокаТаблицыСкидок.Количество>КоличествоОстатокСкользящий тогда//возможно, надо ограничивать процент и предоставлять скидку в рамках остатка по лимиту количества, сейчас мы ее вообще не применяем
						//>>17.10.2016 Степанов 58121
						СообщениеОСкидке = "По продукции " + СокрЛП(СокрЛП(СтрокаТаблицыСкидок.Номенклатура)) + " (код " + СокрЛП(СтрокаТаблицыСкидок.Номенклатура.Код) + ") есть скидка но остаток количества меньше чем количество в заказе." + Символы.ПС +
						"Остаток: " + СокрЛП(КоличествоОстатокСкользящий) + " Заказано: " + СокрЛП(СтрокаТаблицыСкидок.Количество);
						ОбщегоНазначения.Сообщение(СообщениеОСкидке, СтатусСообщения.ОченьВажное);
						//<<17.10.2016
						
						Продолжить;
					Иначе
						СтрокаТаблицыСкидок.Активность = 1;
						СтрокаТаблицыСкидок.ПроцентАвтоСкидки = СтрокаТаблицыСкидок.ПроцентСкидки;
						СтрокаТаблицыСкидок.ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100, 2);
						СтрокаТаблицыСкидок.СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - СтрокаТаблицыСкидок.ЦенаПослеСкидки * СтрокаТаблицыСкидок.Количество;
						Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
							СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицыСкидок.СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
						Иначе
							СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС;
						КонецЕсли;
						
						СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыСкидок.ПроцентАвтоСкидки;
						СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыСкидок.Приказ;
						СтрокаТаблицы.НомерСтрокиПолучателя = СтрокаТаблицыСкидок.НомерСтрокиПолучателя;
						СтрокаТаблицы.НомерСтрокиТовара = СтрокаТаблицыСкидок.НомерСтрокиТовара;
					    СтрокаТаблицы.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
					КонецЕсли;	
					//уменьшить скользящий остаток
					Если СтрокаТаблицыСкидок.Активность = 1 тогда
						ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].КоличествоОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].КоличествоОстатокСкользящий - СтрокаТаблицыСкидок.Количество;
					КонецЕсли;	
					
				КонецЕсли;	
			КонецЦикла;	
		ИначеЕсли СтрокиТаблицыСкидок.Количество()>1 тогда
			
			// Для строки табличной части подходит нестколько строк по скидкам. Нужно выбрать только одну.
			// Во-первых происходит проверка по типу скидок. Если есть периодическая, - берется она, первая по дате начала применения.
			// Во-вторых, когда периодическая не найдена, ищем по ФИФО по дате начала применения скидок первый приказ, который покрывает полный процент скидки. [Неважно, по объему или по сумме]
			// В-третьих, если полный приказ не найден, ищем первый частичный приказ с процентом на остаток скидки
			// если не нашли, - значит все скидки по клиенту уже выбраны
			
			ПризнакПодходящаяСтрокаСкидкиНайдена = Ложь;
			
			//Первый.
			Для Каждого СтрокаТаблицыСкидок из СтрокиТаблицыСкидок цикл
				Если СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период Тогда
					СтрокаТаблицыСкидок.Активность = 1;
					СтрокаТаблицыСкидок.ПроцентАвтоСкидки = СтрокаТаблицыСкидок.ПроцентСкидки;
					СтрокаТаблицыСкидок.ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100, 2);
					СтрокаТаблицыСкидок.СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - СтрокаТаблицыСкидок.ЦенаПослеСкидки * СтрокаТаблицыСкидок.Количество;
					Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
						СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицыСкидок.СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
					Иначе
						СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС;
					КонецЕсли;
					
					СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыСкидок.ПроцентАвтоСкидки;
					СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыСкидок.Приказ;
					СтрокаТаблицы.НомерСтрокиПолучателя = СтрокаТаблицыСкидок.НомерСтрокиПолучателя;
					СтрокаТаблицы.НомерСтрокиТовара = СтрокаТаблицыСкидок.НомерСтрокиТовара;
					СтрокаТаблицы.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
					
					ПризнакПодходящаяСтрокаСкидкиНайдена = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			//Второй.
			Если ПризнакПодходящаяСтрокаСкидкиНайдена = Ложь тогда
				Для Каждого СтрокаТаблицыСкидок из СтрокиТаблицыСкидок цикл
					Если СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем тогда
						
						Если СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков = Неопределено тогда
							Продолжить;
						КонецЕсли;	
						
						КоличествоОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].КоличествоОстатокСкользящий;
						Если КоличествоОстатокСкользящий<=0 тогда
							Продолжить;
						КонецЕсли;	
						Если СтрокаТаблицыСкидок.Количество>КоличествоОстатокСкользящий тогда
							//>>17.10.2016 Степанов 58121
							СообщениеОСкидке = "По продукции " + СокрЛП(СокрЛП(СтрокаТаблицыСкидок.Номенклатура)) + " (код " + СокрЛП(СтрокаТаблицыСкидок.Номенклатура.Код) + ") есть скидка но остаток количества меньше чем количество в заказе." + Символы.ПС +
							"Остаток: " + СокрЛП(КоличествоОстатокСкользящий) + " Заказано: " + СокрЛП(СтрокаТаблицыСкидок.Количество);
							ОбщегоНазначения.Сообщение(СообщениеОСкидке, СтатусСообщения.ОченьВажное);
							//<<17.10.2016
							
							Продолжить;
						Иначе
							СтрокаТаблицыСкидок.Активность = 1;
							СтрокаТаблицыСкидок.ПроцентАвтоСкидки = СтрокаТаблицыСкидок.ПроцентСкидки;
							СтрокаТаблицыСкидок.ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100, 2);
							СтрокаТаблицыСкидок.СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - СтрокаТаблицыСкидок.ЦенаПослеСкидки * СтрокаТаблицыСкидок.Количество;
							Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
								СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицыСкидок.СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
							Иначе
								СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС;
							КонецЕсли;
							
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыСкидок.ПроцентАвтоСкидки;
							СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыСкидок.Приказ;
							СтрокаТаблицы.НомерСтрокиПолучателя = СтрокаТаблицыСкидок.НомерСтрокиПолучателя;
							СтрокаТаблицы.НомерСтрокиТовара = СтрокаТаблицыСкидок.НомерСтрокиТовара;
				        	СтрокаТаблицы.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
						КонецЕсли;	
						//уменьшить скользящий остаток
						Если СтрокаТаблицыСкидок.Активность = 1 тогда
							ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].КоличествоОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].КоличествоОстатокСкользящий - СтрокаТаблицыСкидок.Количество;
							ПризнакПодходящаяСтрокаСкидкиНайдена = Истина;
							Прервать;
						КонецЕсли;
					ИначеЕсли ((СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) или 
						(СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)) тогда
						
						Если СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков = Неопределено тогда
							Продолжить;
						КонецЕсли;	
						
						СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий;
						Если СуммаСкидкиОстатокСкользящий<5 тогда//считаем, что скидка уже предоставлена ранее
							Продолжить;
						КонецЕсли;	
 						СуммаСкидкиПоПриказуПолная = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентСкидки)/100, 2) * СтрокаТаблицыСкидок.Количество;
						Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
							СуммаСкидкиПоПриказуПолная = ОКР(СуммаСкидкиПоПриказуПолная+УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиПоПриказуПолная, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС)),2);
						КонецЕсли;
						Если СуммаСкидкиПоПриказуПолная<0 тогда
							СуммаСкидкиПоПриказуПолная = 0;
							Продолжить;
						КонецЕсли;	
						Если СуммаСкидкиПоПриказуПолная>(СуммаСкидкиОстатокСкользящий+3) тогда//надо ограничивать процент и предоставлять скидку в рамках остатка по лимиту суммы
							Продолжить;//на третий цикл 
						Иначе
							СтрокаТаблицыСкидок.Активность = 1;
							СтрокаТаблицыСкидок.ПроцентАвтоСкидки = СтрокаТаблицыСкидок.ПроцентСкидки;
							СтрокаТаблицыСкидок.ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100, 2);
							СтрокаТаблицыСкидок.СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - СтрокаТаблицыСкидок.ЦенаПослеСкидки * СтрокаТаблицыСкидок.Количество;
							Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
								СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицыСкидок.СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
							Иначе
								СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС;
							КонецЕсли;
							
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыСкидок.ПроцентАвтоСкидки;
							СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыСкидок.Приказ;
							СтрокаТаблицы.НомерСтрокиПолучателя = СтрокаТаблицыСкидок.НомерСтрокиПолучателя;
							СтрокаТаблицы.НомерСтрокиТовара = СтрокаТаблицыСкидок.НомерСтрокиТовара;
					        СтрокаТаблицы.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
						КонецЕсли;	
						//уменьшить скользящий остаток
						Если СтрокаТаблицыСкидок.Активность = 1 тогда
							Если СтрокаТаблицыСкидок.ПроцентСкидкиНаценки > 0 Тогда
								Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
									СуммаАвтоматическойСкидкиСНДС = СтрокаТаблицы.Цена*СтрокаТаблицыСкидок.Количество*(100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*СтрокаТаблицыСкидок.ПроцентАвтоСкидки/100;
									СуммаАвтоматическойСкидкиСНДС = СуммаАвтоматическойСкидкиСНДС+УчетНДС.РассчитатьСуммуНДС(СуммаАвтоматическойСкидкиСНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
								Иначе
									СуммаАвтоматическойСкидкиСНДС = СтрокаТаблицы.Цена*СтрокаТаблицыСкидок.Количество*(100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*СтрокаТаблицыСкидок.ПроцентАвтоСкидки/100;
								КонецЕсли;
								ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий - Окр(СуммаАвтоматическойСкидкиСНДС,2);
							Иначе
								ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий - СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
							КонецЕсли;
							ПризнакПодходящаяСтрокаСкидкиНайдена = Истина;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			//Третий
			Если ПризнакПодходящаяСтрокаСкидкиНайдена = Ложь тогда
				Для Каждого СтрокаТаблицыСкидок из СтрокиТаблицыСкидок цикл
					Если СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем тогда
						//частичного количества по строке сейчас нет
						//возможно, надо уменьшать пропорционально процент скидки и предоставлять скидку в рамках остатка по лимиту количества относительно общего количества по строке, сейчас мы ее вообще не применяем
					ИначеЕсли ((СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) или 
						(СтрокаТаблицыСкидок.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)) тогда
						
						Если СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков = Неопределено тогда
							Продолжить;
						КонецЕсли;	
						
						СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий;
						Если СуммаСкидкиОстатокСкользящий<5 тогда//считаем, что скидка уже предоставлена ранее
							Продолжить;
						КонецЕсли;	
						СуммаСкидкиПоПриказуПолная = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентСкидки)/100, 2) * СтрокаТаблицыСкидок.Количество;
						Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
							СуммаСкидкиПоПриказуПолная = ОКР(СуммаСкидкиПоПриказуПолная+УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиПоПриказуПолная, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС)),2);
						КонецЕсли;
						Если СуммаСкидкиПоПриказуПолная<0 тогда
							СуммаСкидкиПоПриказуПолная = 0;
							Продолжить;
						КонецЕсли;	
						Если СуммаСкидкиПоПриказуПолная>(СуммаСкидкиОстатокСкользящий+3) тогда//надо ограничивать процент и предоставлять скидку в рамках остатка по лимиту суммы
							СуммаБезСкидки = (СтрокаТаблицы.Количество * СтрокаТаблицы.Цена)*(1-СтрокаТаблицы.ПроцентСкидкиНаценки/100);
							Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
								СуммаСкидкиОстатокСкользящийБезНДС = СуммаСкидкиОстатокСкользящий - УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиОстатокСкользящий, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
							Иначе
								СуммаСкидкиОстатокСкользящийБезНДС = СуммаСкидкиОстатокСкользящий;
							КонецЕсли;	 
							ПроцентСкидки = Окр((СуммаСкидкиОстатокСкользящийБезНДС / СуммаБезСкидки) * 100, 2);
							Если Окр(СтрокаТаблицы.Цена * (1 - ПроцентСкидки / 100), 2) = СтрокаТаблицы.Цена Тогда
								ПроцентСкидки = 0;
								Продолжить;
							КонецЕсли;
							
							СтрокаТаблицыСкидок.Активность = 1;
							СтрокаТаблицыСкидок.ПроцентАвтоСкидки = ПроцентСкидки;
							СтрокаТаблицыСкидок.ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицыСкидок.ПроцентАвтоСкидки)/100, 2);
							СтрокаТаблицыСкидок.СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицыСкидок.Количество - СтрокаТаблицыСкидок.ЦенаПослеСкидки * СтрокаТаблицыСкидок.Количество;
							Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
								СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицыСкидок.СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
							Иначе
								СтрокаТаблицыСкидок.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиБезНДС;
							КонецЕсли;
							
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыСкидок.ПроцентАвтоСкидки;
							СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыСкидок.Приказ;
							СтрокаТаблицы.НомерСтрокиПолучателя = СтрокаТаблицыСкидок.НомерСтрокиПолучателя;
							СтрокаТаблицы.НомерСтрокиТовара = СтрокаТаблицыСкидок.НомерСтрокиТовара;
				         	СтрокаТаблицы.СуммаСкидкиСНДС = СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
						КонецЕсли;	
						//уменьшить скользящий остаток
						Если СтрокаТаблицыСкидок.Активность = 1 тогда
							Если СтрокаТаблицыСкидок.ПроцентСкидкиНаценки > 0 Тогда
								Если СтруктураПараметров.УчитыватьНДС И Не СтруктураПараметров.СуммаВключаетНДС Тогда
									СуммаАвтоматическойСкидкиСНДС = СтрокаТаблицы.Цена*СтрокаТаблицыСкидок.Количество*(100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*СтрокаТаблицыСкидок.ПроцентАвтоСкидки/100;
									СуммаАвтоматическойСкидкиСНДС = СуммаАвтоматическойСкидкиСНДС+УчетНДС.РассчитатьСуммуНДС(СуммаАвтоматическойСкидкиСНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыСкидок.СтавкаНДС));
								Иначе
									СуммаАвтоматическойСкидкиСНДС = СтрокаТаблицы.Цена*СтрокаТаблицыСкидок.Количество*(100-СтрокаТаблицыСкидок.ПроцентСкидкиНаценки)/100*СтрокаТаблицыСкидок.ПроцентАвтоСкидки/100;
								КонецЕсли;
								ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий - Окр(СуммаАвтоматическойСкидкиСНДС,2);
							Иначе
								ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий = ТаблицаСтруктурыОстатков[СтрокаТаблицыСкидок.ИндексСтрокиТаблицыСтруктурыОстатков].СуммаСкидкиОстатокСкользящий - СтрокаТаблицыСкидок.СуммаСкидкиСНДС;
							КонецЕсли;
							ПризнакПодходящаяСтрокаСкидкиНайдена = Истина;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	ВалютаТовара = ?(ВидРеализации = Перечисления.ВидыСкидок.Розничная,
	ВалютаРегламентированногоУчета, ДокументОбъект.ВалютаДокумента);
	
	ПроверкаМинимальнойЦены(ДатаСкидок, ТаблицаТоваров, МинимальныеЦены, СписокФильтров,
	УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара, Истина); //m.ionov@a-prof.ru 16.02.2015
	
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ПроцентАвтоматическихСкидок"), "ПроцентАвтоматическихСкидок");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма"), "Сумма");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("УсловиеАвтоматическойСкидки"), "УсловиеАвтоматическойСкидки");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ЗначениеУсловияАвтоматическойСкидки"), "ЗначениеУсловияАвтоматическойСкидки");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НомерСтрокиПолучателя"), "НомерСтрокиПолучателя");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НомерСтрокиТовара"), "НомерСтрокиТовара");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("СуммаСкидкиСНДС"), "СуммаСкидкиСНДС");
	
	Если УчитыватьНДС Тогда
		ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("СуммаНДС"), "СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСкидкиПриПродаже()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАСЧЕТА ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВидДокумента = "") Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	РеквизитыТабличнойЧасти = Новый Массив;
	
	ОписаниеТиповТабличнаяЧастьОбработки = Новый ОписаниеТипов("ОбработкаТабличнаяЧастьСтрока.ОбработкаТабличнойЧастиТовары.Товары");
	Если ОписаниеТиповТабличнаяЧастьОбработки.СодержитТип(ТипЗнч(СтрокаТабличнойЧасти)) Тогда
		//Передана строка табличной части обработки ОбработкаТабличнойЧастиТовары
		РеквизитыТабличнойЧасти = Метаданные.Обработки.ОбработкаТабличнойЧастиТовары.ТабличныеЧасти.Товары.Реквизиты;
	Иначе
		ОписаниеТиповТабличнаяЧастьДокумента = Новый ОписаниеТипов("ДокументТабличнаяЧастьСтрока."+МетаданныеДокумента.Имя+"."+ИмяТабличнойЧасти);
		Если ОписаниеТиповТабличнаяЧастьДокумента.СодержитТип(ТипЗнч(СтрокаТабличнойЧасти)) Тогда
			//Передана строка табличной части документа ДокументОбъект
			Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
				РеквизитыТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Заполнить СтавкаНДС
	Если РеквизитыТабличнойЧасти.Найти("СтавкаНДС")<>неопределено Тогда
		НеЯвляетсяРезидентом = ?(МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты"), ?(ДокументОбъект.Контрагент.НеЯвляетсяРезидентом = Истина, Истина, Ложь), Ложь);
		ЕстьДоговорКонтрагента = МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено;
		Если ЕстьДоговорКонтрагента Тогда
			ТекДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
		Иначе
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаЗаказаПокупателя") Тогда
				ЕстьДоговорКонтрагента = Истина;
				ТекДоговорКонтрагента = ДокументОбъект.ЗаказПокупателя.ДоговорКонтрагента;
			ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаЗаказаПоставщику") Тогда
				ЕстьДоговорКонтрагента = Истина;
				ТекДоговорКонтрагента = ДокументОбъект.ЗаказПоставщику.ДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		РеализацияНаЭкспорт = ?(ЕстьДоговорКонтрагента, ?(ТекДоговорКонтрагента.РеализацияНаЭкспорт = Истина, Истина, Ложь), Ложь);
		НалоговыйАгентНерезидент = ?(ЕстьДоговорКонтрагента, ?(ТекДоговорКонтрагента.УчетАгентскогоНДС = Истина И ТекДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент, Истина, Ложь), Ложь);
		Если НеЯвляетсяРезидентом И Не НалоговыйАгентНерезидент И ВидДокумента = "Приобретение" Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Возврат;
		ИначеЕсли РеализацияНаЭкспорт И ВидДокумента = "Реализация" Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			//возможно, дальше ставка будет изменена на БезНДС, если применяется ЕНВД
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		ЕстьОрганизация = (НЕ МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено);
		ЕстьСчетДоходовБУ = (РеквизитыТабличнойЧасти.Найти("СчетДоходовБУ")<>неопределено);
		ЭтоРеализация = ЕстьСчетДоходовБУ ИЛИ РеквизитыТабличнойЧасти.Найти("ПроцентСкидкиНаценки")<>неопределено;
		
		//В документах реализации, для организаций применяющих УСН устанавливать ставку "БезНДС"
		Если ЭтоРеализация Тогда
			Если ЕстьОрганизация Тогда
				УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДокументОбъект.Дата, ДокументОбъект.Организация);
				Если ЗначениеЗаполнено(УчетнаяПолитика) И (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					Возврат;
				КонецЕсли;
			Иначе
				УчетнаяПолитика = Неопределено;
			КонецЕсли;
			
			//В документах реализации, для ЕНВД устанавливать ставку "БезНДС"
			ЕстьСчетДоходовБУ = ?(ЕстьСчетДоходовБУ, ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетДоходовБУ), Ложь);
			Если ЕстьСчетДоходовБУ Тогда
				//Определяем вид деятельности по счету доходов
				Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТабличнойЧасти.СчетДоходовБУ) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			ИначеЕсли ЕстьОрганизация И (НЕ ЕстьДоговорКонтрагента) Тогда
				//Если счет доходов не указан, для розничной продажи берем их учетной политики
				Если ЗначениеЗаполнено(УчетнаяПолитика) И (УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

// Процедура заполняет способ списания товаров в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	
КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Заполняет процент розничной наценки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	// Заполнять имеет смысл только для розничного склада.
	Склад = УправлениеРозничнойТорговлей.ЕстьНТТВДокументе(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ХарактеристикаНоменклатуры = ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	
	ТипЦенРозничнойТорговли = Склад.ТипЦенРозничнойТорговли;
	СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = Ценообразование.ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(
	СтрокаТабличнойЧасти.Номенклатура,
	ХарактеристикаНоменклатуры,
	ТипЦенРозничнойТорговли,
	ДокументОбъект.Дата );
	
КонецПроцедуры // ЗаполнитьПроцентРозничнойНаценкиТабЧасти()

// Процедура заполняет единицу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	// берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
КонецПроцедуры // ЗаполнитьЕдиницуТабЧасти()

// Процедура заполняет единицу мест в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ПроверятьРеквизит = Истина) Экспорт
	
	Если ПроверятьРеквизит Тогда
		ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти)  Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				// берем из самого реквизита Номенклатура
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
				
			КонецЕсли;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
			// берем из самого реквизита Номенклатура
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
			
		КонецЕсли;
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЕдиницуТабЧасти()

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт
	
	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС, Спецификация; //m.ionov@a-prof.ru 26/11/2013 - Добавили передачу спецификации из заказа поставщику
	
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ХарактеристикаНоменклатуры = ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	
	СтруктураШапкиДокумента.Свойство("Контрагент",         Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен",             ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",      ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",    ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",       УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",   СуммаВключаетНДС);
	
	СтруктураШапкиДокумента.Свойство("Спецификация",         Спецификация); //m.ionov@a-prof.ru 26/11/2013
	
	//m.ionov@a-prof.ru 26/11/2013
	//Делаем чтобы заполнение было не только когда заполнен тип цен, но чтобы и просто заполняло по условиям договора
	//Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ТипЦен) Тогда
	Если ЗначениеЗаполнено(Контрагент) Тогда
		//--- m.ionov@a-prof.ru 
		
		// Попытаемся получить цену из условий поставок или данных регистра ЦеныНоменклатурыКонтрагентов 
		Цена = Ценообразование.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
		ТипЦен, ДатаДокумента, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		ДоговорКонтрагента,
		ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента), Спецификация); //m.ionov@a-prof.ru 26/11/2013
		
		// Если удалось получить цену, то пересчитаем ее по настройкам налогообложения
		Если ЗначениеЗаполнено(Цена) Тогда
			
			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС, СуммаВключаетНДС, 
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если единица измерения не заполнена, или не является единицей текущей номенклатуры, то заполним ее единицей хранения остатков
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
		ИЛИ СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец <> СтрокаТабличнойЧасти.Номенклатура Тогда 
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
КонецПроцедуры // ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()

// Процедура заполняет цену по ценам покупки в строке табличной части документа (по единице хранения остатков)
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт
	
	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;
	
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ХарактеристикаНоменклатуры = ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	
	СтруктураШапкиДокумента.Свойство("Контрагент",         Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен",             ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",      ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",    ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",       УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",   СуммаВключаетНДС);
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	
	//m.ionov@a-prof.ru 26/11/2013
	//Делаем чтобы заполнение было не только когда заполнен тип цен, но чтобы и просто заполняло по условиям договора
	//Если НЕ ЗначениеЗаполнено(Контрагент)
	// Или НЕ ЗначениеЗаполнено(ТипЦен) Тогда
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		//----- m.ionov@a-prof.ru 
		Возврат;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			ТекЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		Иначе
			ТекЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;
		
		Цена = Ценообразование.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
		ТипЦен, ДатаДокумента, ТекЕдиницаИзмерения, 
		ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		ДоговорКонтрагента,
		ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));
		
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения        
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			Возврат;
		Иначе
			
			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС, СуммаВключаетНДС, 
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЦенуПокупкиТабЧасти()

// Процедура заполняет цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ХарактеристикаНоменклатуры = ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регламентированного учета.
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	КонецЕсли;
	
	ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента);
	Если ТекСклад = Неопределено Тогда
		ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("СкладОрдер", ДокументОбъект, МетаданныеДокумента, Справочники.Склады.ПустаяСсылка());
		
		Если ТипЗнч(ТекСклад) <> Тип("СправочникСсылка.Склады") Тогда
			ТекСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура,
		ХарактеристикаНоменклатуры, ТекСклад, ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж",
		ДокументОбъект, МетаданныеДокумента));
		
		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаРегламентированногоУчета,
		ВалютаДокумента, КурсДокумента, КратностьДокумента, ДокументОбъект.Дата);
	Иначе
		ЕдИзмХран = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
		ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ЕдИзмХран,
		ВалютаДокумента, КурсДокумента, КратностьДокумента, ,
		ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
		ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));
	КонецЕсли;
	
	// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
	Если ЗначениеЗаполнено(Цена) Тогда
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
		МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
		И ДокументОбъект.УчитыватьНДС,
		МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
		И ДокументОбъект.СуммаВключаетНДС,
		?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
		УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЦенуПродажиТабЧасти()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета,
//  ВалютаДокумента                - необязательный параметр, валюта, в которой надо заполнить цену,
//                                   если не задан, то цена заполняется в валюте документа,
//                                   если нет валюты документа, то в валюте упр. учета.
//  ТипЦен                         - необязательный параметр, тип цен для которого нужно выполнить заполнение
//  ЭтоРозница                     - необязательный параметр, признак того, что цену нужно заполнять из регистра цены АТТ
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета,
	ВалютаДокумента =Неопределено, ТипЦен = Неопределено, ЭтоРозница = Ложь) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	//m.ionov@a-prof.ru 02.03.2015
	//Определим дату расчета
	мДатаРасчета = ДокументОбъект.Дата;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КП_ИмпортированныйЗаказ") Тогда
		Если ДокументОбъект.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
			мДатаРасчета = КонецДня(ДокументОбъект.ДатаОтгрузки);
		Иначе
			мДатаРасчета = КонецДня(ДокументОбъект.Дата);
		КонецЕсли;		
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//m.ionov@a-prof.ru 02.10.2014
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПЦ_ТипЦен", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		//Тип цен берем только из табличной части, если тип цен не задан то и цены не будет
		ТекТипЦен = СтрокаТабличнойЧасти.ПЦ_ТипЦен;
		
	Иначе
		//----m.ionov@a-prof.ru---
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТекТипЦен = ДокументОбъект.ТипЦен;
		Иначе
			ТекТипЦен = ТипЦен;
		КонецЕсли;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
			КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
			КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		Иначе
			
			// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регламентированного учета.
			ВалютаДокумента    = ВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;
		КонецЕсли;
	Иначе
		СтруктураВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, мДатаРасчета);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;
	
	ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента);
	Если ТекСклад = Неопределено Тогда
		ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("СкладОрдер", ДокументОбъект, МетаданныеДокумента, Справочники.Склады.ПустаяСсылка());
		
		Если ТипЗнч(ТекСклад) <> Тип("СправочникСсылка.Склады") Тогда
			ТекСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоРозница И ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Если НЕ ЗначениеЗаполнено(ТекСклад) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(мДатаРасчета, СтрокаТабличнойЧасти.Номенклатура,
			ХарактеристикаНоменклатуры, ТекСклад, ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж",
			ДокументОбъект, МетаданныеДокумента));
			
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаРегламентированногоУчета,
			ВалютаДокумента, КурсДокумента, КратностьДокумента, мДатаРасчета);
			
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаТабличнойЧасти.Цена = 0;
			Иначе
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				ТекТипЦен.ЦенаВключаетНДС,
				МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
				И ДокументОбъект.УчитыватьНДС,
				МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
				И ДокументОбъект.СуммаВключаетНДС,
				?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
			КонецЕсли;
			
			// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры.
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
		ТекТипЦен, мДатаРасчета, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		ВалютаДокумента, КурсДокумента, КратностьДокумента, ,
		ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
		ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента),
		ОбщегоНазначения.ПолучитьРеквизитШапки("Грузополучатель", ДокументОбъект, МетаданныеДокумента), //m.ionov@a-prof.ru 02.10.2014 Добавили передачу адреса поставки
		ОбщегоНазначения.ПолучитьРеквизитШапки("Контрагент", ДокументОбъект, МетаданныеДокумента)); //m.ionov@a-prof.ru 02.10.2014 Добавили передачу контрагента
		
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			ТекТипЦен.ЦенаВключаетНДС,
			МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
			И ДокументОбъект.УчитыватьНДС,
			МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И ДокументОбъект.СуммаВключаетНДС,
			?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;
		
		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Процедура заполняет единицу и розничную цену продажи по в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа;
//  ДокументОбъект                 - объект редактируемого документа;
//  СкладКомпании                  - ссылка на справочник, розничный склад компании по которому надо 
//                                   определить розничную цену;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ЗаказПокупателя                - ссылка на документ, Заказ покупателя, из резерва по которому надо
//                                   определить розничную цену, если не задан, то розничная цена
//                                   берется для сводного остатка
//
Процедура ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СкладКомпании,
	ВалютаРегламентированногоУчета) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ХарактеристикаНоменклатуры = ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту управленческого учета.
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда // берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе // из регистра
		Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		СкладКомпании, ВалютаРегламентированногоУчета, ДокументОбъект.Дата,
		СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВалютаДокумента, КурсДокумента,
		КратностьДокумента);
		
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, Истина,
			МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
			И ДокументОбъект.УчитыватьНДС,
			МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И ДокументОбъект.СуммаВключаетНДС,
			?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;
		
		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		
	КонецЕсли;
	
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
КонецПроцедуры // ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти()

// Процедура заполняет цену возвратной тары по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа,
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы,
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику.
	
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") = Неопределено тогда
		Возврат;
	Иначе
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент)
			Или НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
			Возврат;
		Иначе // из регистра
			
			// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
				Цена = 0;
			Иначе
				ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
				
				Цена = Ценообразование.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, , ДокументОбъект.Контрагент,
				ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ЕдиницаТары,
				ДокументОбъект.ВалютаДокумента,
				ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
				ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
				ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
				ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));
			КонецЕсли;
			
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры.
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				Возврат;
			Иначе
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
				ДокументОбъект.УчитыватьНДС, Истина,
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление()

// Процедура заполняет цену возвратной тары по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ДоговорКонтрагента             - договор контрагента в случае, если его надо брать не из данного документа,
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ДокументОбъект, ДоговорКонтрагента = Неопределено, ВалютаРегламентированногоУчета) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ХарактеристикаНоменклатуры = ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда 
		
		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.Цена = 0;
		
	Иначе
		
		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента = ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;
		
		// из регистра
		// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Цена = 0;
		Иначе
			ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
			ДокументОбъект.ТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
			ДокументОбъект.ВалютаДокумента,
			ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
			ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ,
			ДоговорКонтрагента,
			ОбщегоНазначения.ПолучитьРеквизитШапки("УсловияПродаж", ДокументОбъект, МетаданныеДокумента));
			
		КонецЕсли;
		
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
		// ставки бурутся из номенклатуры
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
			МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено И ДокументОбъект.УчитыватьНДС,
			МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено И ДокументОбъект.СуммаВключаетНДС,
			?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти), УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск()

// Рассчитывает розничную цену в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа.
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
//
Процедура РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Рассчитывать розничную цену имеет смысл только для розничного склада.
	Склад = УправлениеРозничнойТорговлей.ЕстьНТТВДокументе(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регламентированного учета учета.
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;
	
	ТипЦенРозничнойТорговли = Склад.ТипЦенРозничнойТорговли;
	
	// Если в документе налогов нет, считаем, что цена со всеми налогами.
	Если МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
		СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	Иначе
		СуммаВключаетНДС = Истина;
		СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЦенаВРознице = УправлениеРозничнойТорговлей.РассчитатьРозничнуюЦену(СтрокаТабличнойЧасти.Цена,
	ВалютаДокумента,
	КурсДокумента,
	КратностьДокумента,
	ВалютаРегламентированногоУчета,
	СтрокаТабличнойЧасти.ПроцентРозничнойНаценки,
	СуммаВключаетНДС,
	СтавкаНДС,
	ТипЦенРозничнойТорговли,
	СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков);
	
КонецПроцедуры // РассчитатьРозничнуюЦенуТабЧасти()

// Рассчитывает процент розничной наценкив строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	Перем ЦенаСНалогами;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту управленческого учета
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;
	
	// Рассчитывать процент имеет смысл только для розничного склада.
	Склад = УправлениеРозничнойТорговлей.ЕстьНТТВДокументе(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 0;
	Иначе // пересчитываем в валюту регл. учета
		ЦенаСНалогами = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаДокумента,
		ВалютаРегламентированногоУчета,
		КурсДокумента, 1, КратностьДокумента, 1);
		
		ЕстьНалоги = МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено
		И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено;
		
		Если ЕстьНалоги Тогда
			СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
			СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СуммаВключаетНДС = Истина;
			СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
		КонецЕсли;
		
		// Увеличиваем при необходимости на величину налогов (розничная цена всегда с налогами)
		ЦенаСНалогами = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаСНалогами,
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		СуммаВключаетНДС, Истина, Истина, СтавкаНДС);
		
		ЦенаСНалогамиЗаЕдиницуХранения = ЦенаСНалогами * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		/ СтрокаТабличнойЧасти.Коэффициент;
		
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаСНалогамиЗаЕдиницуХранения)
		/ ЦенаСНалогамиЗаЕдиницуХранения;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьПроцентРозничнойНаценкиТабЧасти()

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  ВидРасчета           - "Со всеми скидками", сумма минус скидки;
//                         "Без учета ручной скидки", сумма минус автоматические скидки;
//                         "Без учета скидок", сумма (Цена * Количество);
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = 0;
	
	Если (СпособРасчета = Неопределено)
		Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
		Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
		//m.ionov@a-prof.ru 19.02.2015
		//Если есть ручная скидка - то механизм расчета меняется
		//Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента,
		//									 ИмяТабличнойЧасти) Тогда
		//	СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
		//КонецЕсли;
		
		//Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
		//	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		//		СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
		//	КонецЕсли;
		//КонецЕсли;
		
		Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаСкидки > 0 Тогда //Значит есть ручная скидка
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаСкидки = СуммаСкидки + (Сумма - СуммаСкидки) * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
			КонецЕсли;
		Иначе
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаСкидки = СуммаСкидки + Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
			КонецЕсли;	
		КонецЕсли;
		//----m.ionov@a-prof.ru---
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = Сумма - СуммаСкидки;
	
	//m.ionov@a-prof.ru 20.02.2015
	//В заказах покупателя и реализациях - сумма должна считаться от цены округленной до 2 знаков
	Если СуммаСкидки > 0 И СтрокаТабличнойЧасти.Количество > 0
		и (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя")
		или (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") И ЗначениеЗаполнено(ДокументОбъект.Сделка))) Тогда
		
		ЦенаСоСкидкой = Окр(СтрокаТабличнойЧасти.Сумма/СтрокаТабличнойЧасти.Количество,2);
		СтрокаТабличнойЧасти.Сумма = ЦенаСоСкидкой*СтрокаТабличнойЧасти.Количество;
		
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Рассчитывает сумму в строке возвратной тары документа
//
// Параметры:
//  СтрокаВозвратнойТары  - строка возвратной тары табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ДокументОбъект) Экспорт
	
	СтрокаВозвратнойТары.Сумма = СтрокаВозвратнойТары.Цена * СтрокаВозвратнойТары.Количество;
	
КонецПроцедуры // РассчитатьСуммуВозвратнойТарыТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Если в документе нет флагов учета НДС, то в конфигурации считается, что суммы включают НДС.
	УчитыватьНДС = ОбщегоНазначения.ПолучитьРеквизитШапки("УчитыватьНДС", ДокументОбъект, МетаданныеДокумента, Истина);
	СуммаВключаетНДС = ОбщегоНазначения.ПолучитьРеквизитШапки("СуммаВключаетНДС", ДокументОбъект, МетаданныеДокумента, Истина);
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	УчитыватьНДС, СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
	//m.ionov@a-prof.ru 16.02.2014												   
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		ДокументОбъект.ПересчитатьСуммуРуб(СтрокаТабличнойЧасти);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

Процедура РассчитатьСуммуНДСТабЧасти_ДенежныеСредства(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	УчитыватьНДС = ОбщегоНазначения.ПолучитьРеквизитШапки("УчитыватьНДС", ДокументОбъект, МетаданныеДокумента, Истина);
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	УчитыватьНДС,истина, 
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры // РассчитатьСуммуНДСТабЧасти_ДенежныеСредства()


// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.СуммаНДСПередачи = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПередачи,
	ДокументОбъект.УчитыватьНДС,
	ДокументОбъект.СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Рассчитывает количество исходя из количества мест
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения!
				|Пересчет количества невозможен.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				Если СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда
					Возврат;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения мест!
					|Пересчет количества невозможен.");
				КонецЕсли;
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0
					И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения цены "
					+ СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмерения) + " не проставлен коэффициент!
					|Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0
					И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения мест "
					+ СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) + " не проставлен коэффициент!
					|Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест;
					Иначе
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест
						* СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент
						/ СтрокаТабличнойЧасти.Коэффициент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков)
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица хранения остатков!
				|Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения "
				+ (СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков) + " не проставлен коэффициент!
				|Пересчет количества невозможен.");
			Иначе
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Коэффициент
				/ СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКоличествоТабЧасти()

// Рассчитывает количество мест исходя из количества
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения цены!
				|Пересчет количества невозможен.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				СтрокаТабличнойЧасти.КоличествоМест = 0;
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0
					И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения цены "
					+ СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмерения) + " не проставлен коэффициент!
					|Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0
					И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения мест "
					+ СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) + " не проставлен коэффициент!
					|Пересчет количества невозможен.");
				Иначе
					//Расчет количества в единицах измерения мест - КоличествоМест				 
					ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест;
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмеренияМест Тогда
						КоличествоМест = СтрокаТабличнойЧасти.Количество;
					Иначе
						КоличествоМест = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент
						/ ЕдиницаИзмеренияМест.Коэффициент;
					КонецЕсли;
					Если Цел(КоличествоМест)<>КоличествоМест Тогда
						//Округление КоличествоМест в соответствии с настройками единицы ЕдиницаИзмеренияМест
						
						Если ЕдиницаИзмеренияМест.ПредупреждатьОНецелыхМестах Тогда
							//Формирование предупреждения о нецелом количестве мест
							ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + ", строка "+СтрокаТабличнойЧасти.НомерСтроки+": при расчете количества мест получилось не целое значение!");
						КонецЕсли;
						Если ЕдиницаИзмеренияМест.ПорогОкругления = 0 Тогда
							//Округление в сторону уменьшения
							КоличествоМест = Цел(КоличествоМест);
						Иначе
							//расчет количества в базовых единицах, не поместившегося в целое количество мест - ОстатокВБазовыхЕИ
							КоличествоВБазовыхЕИ = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент;
							ОстатокВБазовыхЕИ = КоличествоВБазовыхЕИ - Цел(КоличествоМест)*ЕдиницаИзмеренияМест.Коэффициент;
							Если ОстатокВБазовыхЕИ<ЕдиницаИзмеренияМест.ПорогОкругления Тогда
								КоличествоМест = Цел(КоличествоМест);
							Иначе
								КоличествоМест = Цел(КоличествоМест)+1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.КоличествоМест = КоличествоМест;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//нет реквизита ЕдиницаИзмеренияМест
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти)
			И СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков)
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица хранения остатков!
				|Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не проставлен коэффициент!
				|Пересчет количества мест невозможен.");
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест = Окр(СтрокаТабличнойЧасти.Количество 
				* СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
				/ СтрокаТабличнойЧасти.Коэффициент, 0, РежимОкругления.Окр15как20);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКоличествоМестТабЧасти()

// Процедура выполняет проверку заполнения единицы измерения мест и количества мест
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется проверка
//
Процедура ПриЗаписиПроверитьЕдиницуИзмеренияМест(ТабличнаяЧасть) Экспорт
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест)
			И СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПриЗаписиПроверитьЕдиницуИзмеренияМест()

// Процедура выполняет проверку заполнения ставки НДС
//
// Параметры:
//  ДокОбъект - документ для которого производится проверка
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется проверка
//
Процедура ПриЗаписиПроверитьСтавкуНДС(ДокОбъект, ТабличнаяЧасть) Экспорт
	
	Если ДокОбъект.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт
	
	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти;
	
КонецФункции // НайтиСтрокуТабЧасти()

// Рассчитывает розничную наценку и розничную цену по одному из двух алгоритмов, в зависимости от 
// настройке заданной в справочнике складов
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  СтрокаТабличнойЧасти           - строка табличной части документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета, в которой возвращается розничная цена
// 
Процедура РассчитатьРозничнуюЦенуВСтрокеТабЧасти(ДокументОбъект, СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета) Экспорт
	
	
	Если ДокументОбъект.Склад.РасчетРозничныхЦенПоТорговойНаценке Тогда
		ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		ДокументОбъект.Склад.ТипЦенРозничнойТорговли,
		ДокументОбъект.Дата,
		СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
		ВалютаРегламентированногоУчета,,,,,
		ОбщегоНазначения.ПолучитьРеквизитШапки("УсловияПродаж", ДокументОбъект, ДокументОбъект.Метаданные()));
		РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЛАНОВОЙ СЕБЕСТОИМОСТЬЮ

// Рассчитывает сумму и отклонение от плановой себестоимости в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти                          - строка табличной части документа,
//  ДокументОбъект                                - объект редактируемого документа,
//  СуммаПлановойСебестоимости                    - в этот параметр будет помещено значение,
//  СуммаОтклоненияОтСуммыПлановойСебестоимости   - в этот параметр будет помещено значение,
//  ПроцентОтклоненияОтСуммыПлановойСебестоимости - в этот параметр будет помещено значение.
//
Процедура ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект,
	СуммаПлановойСебестоимости = 0, 
	СуммаОтклоненияОтСуммыПлановойСебестоимости = 0, 
	ПроцентОтклоненияОтСуммыПлановойСебестоимости = 0) Экспорт
	
	Перем СуммаНДСПлановойСебестоимости;
	
	// Рассчитываем сумму плановой себестоимости.
	СуммаПлановойСебестоимости = СтрокаТабличнойЧасти.ПлановаяСебестоимость * СтрокаТабличнойЧасти.Количество;
	
	СуммаПоДокументу = СтрокаТабличнойЧасти.Сумма;
	
	// Учитываем налоги.
	Если (ДокументОбъект.УчитыватьНДС) 
		И (НЕ ДокументОбъект.СуммаВключаетНДС) Тогда
		СуммаПоДокументу           = СуммаПоДокументу           + СтрокаТабличнойЧасти.СуммаНДС;
		
		Если СуммаПлановойСебестоимости <> 0 Тогда
			
			// Рассчитаем налоги от суммы плановой себестоимости
			СуммаНДСПлановойСебестоимости = УчетНДС.РассчитатьСуммуНДС(СуммаПлановойСебестоимости,
			ДокументОбъект.УчитыватьНДС,
			ДокументОбъект.СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
			СуммаПлановойСебестоимости = СуммаПлановойСебестоимости + СуммаНДСПлановойСебестоимости;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаОтклоненияОтСуммыПлановойСебестоимости   = СуммаПоДокументу - СуммаПлановойСебестоимости;
	ПроцентОтклоненияОтСуммыПлановойСебестоимости = ?(СуммаПлановойСебестоимости = 0, 
	?(СуммаОтклоненияОтСуммыПлановойСебестоимости = 0, 0, 100), 
	(СуммаОтклоненияОтСуммыПлановойСебестоимости 
	/ СуммаПлановойСебестоимости) * 100);
	
КонецПроцедуры // ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти()

// Заполняет информацию о сумме и отклонении от плановой себестоимости в ячейках строки табличной части документа
// Вызывается из процедуры ТоварыПриВыводеСтроки().
//
// Параметры:
//  ОформлениеСтроки     - объект, содержащий оформление строки (шрифт, цвет) и коллекцию оформлений ячеек. 
//  СтрокаТабличнойЧасти - редактируемая строка табличной части,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	Перем СуммаПлановойСебестоимости, СуммаОтклоненияОтСуммыПлановойСебестоимости, 
	ПроцентОтклоненияОтСуммыПлановойСебестоимости;
	
	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;
	
	Ячейка = ОформлениеСтроки.Ячейки;
	Ячейка.СуммаПлановойСебестоимости.ОтображатьТекст                    = Истина;
	Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.ОтображатьТекст   = Истина;
	Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.ОтображатьТекст = Истина;
	
	ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект,
	СуммаПлановойСебестоимости, 
	СуммаОтклоненияОтСуммыПлановойСебестоимости,
	ПроцентОтклоненияОтСуммыПлановойСебестоимости);
	
	Если СуммаПлановойСебестоимости = Неопределено Тогда
		
		// Если плановая себестоимость неопределена, 
		// информация об отклонении от плановой себестоимости также будет неопределенной.
		Ячейка.СуммаПлановойСебестоимости.Текст                    = "";
		Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.Текст   = "";
		Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Текст = "";
	Иначе
		
		// Если плановая себестоимость определена, 
		// отклонение рассчитываем и показываем.
		Ячейка.СуммаПлановойСебестоимости.Текст                    = Формат(СуммаПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2");
		Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.Текст   = Формат(СуммаОтклоненияОтСуммыПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2;ЧН=0,00");
		Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Текст = Формат(ПроцентОтклоненияОтСуммыПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2");
		
		#Если Клиент Тогда
			// Отрицательное отклонение выделяем красным цветом.
			Если СуммаОтклоненияОтСуммыПлановойСебестоимости < 0 Тогда
				Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.ЦветТекста   = ЦветаСтиля.ЦветОтрицательногоЧисла;
				Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти()

// Рассчитывает плановую себестоимость в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ХарактеристикаНоменклатуры = ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");
	
	Если МетаданныеДокумента.Реквизиты.Найти("ИспользоватьПлановуюСебестоимость") <> Неопределено Тогда
		Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
			// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипЦенПлановойСебестоимостиНоменклатуры = глЗначениеПеременной("ТипЦенПлановойСебестоимостиНоменклатуры");
	
	ПлановаяСебестоимость = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
	ТипЦенПлановойСебестоимостиНоменклатуры, 
	ДокументОбъект.Дата, 
	СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
	ДокументОбъект.ВалютаДокумента,
	ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
	ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
	
	ПлановаяСебестоимость = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ПлановаяСебестоимость,
	Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	ТипЦенПлановойСебестоимостиНоменклатуры.ЦенаВключаетНДС,
	ДокументОбъект.УчитыватьНДС,
	ДокументОбъект.СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
	СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПлановаяСебестоимость;
	
КонецПроцедуры // РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти()

// Рассчитывает плановую себестоимость во всех строках табличной части документа.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;
	
	// В цикле по ТЧ перезаполняем плановую себестоимость.
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл
		РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЦикла;
	
КонецПроцедуры // РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти()

// Пересчитывает плановую себестоимость с учетом новой валюты и налогов.
//
// Параметры:
//  ДокументОбъект    - объект редактируемого документа,
//  СтруктураЗначений - структура предыдущих зачений реквизитов документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ДокументОбъект, СтруктураЗначений, ВалютаРегламентированногоУчета) Экспорт
	
	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;
	
	// В случае, если поменялась валюта.
	Если СтруктураЗначений.ТекущийВалютаДокумента <> ДокументОбъект.ВалютаДокумента Тогда
		
		// Плановая себестоимость заполнится с учетом новой валюты и налогов.
		РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		
		// Если надо пересчитать цены при изменении флагов налогообложения.
		Если (СтруктураЗначений.ТекущийУчитыватьНДС     <> ДокументОбъект.УчитыватьНДС) 
			ИЛИ (СтруктураЗначений.ТекущийСуммаВключаетНДС <> ДокументОбъект.СуммаВключаетНДС) Тогда
			
			// В цикле по ТЧ пересчитываем плановую себестоимость.
			Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл
				
				СтрокаТабличнойЧасти.ПлановаяСебестоимость = 
				Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ПлановаяСебестоимость, 
				Неопределено,
				СтруктураЗначений.ТекущийСуммаВключаетНДС,
				ДокументОбъект.УчитыватьНДС,
				ДокументОбъект.СуммаВключаетНДС, 
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти()

// Процедура пересчета плановой себестоимости при изменении единицы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти       - строка табличной части документа,
//  ДокументОбъект             - объект редактируемого документа,
//  СтароеЗначениеКоэффициента - предыдущее значение коэффициента.
//
Процедура ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(СтрокаТабличнойЧасти, ДокументОбъект, 
	СтароеЗначениеКоэффициента) Экспорт
	
	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;
	
	Если СтароеЗначениеКоэффициента > 0 Тогда
		СтрокаТабличнойЧасти.ПлановаяСебестоимость = СтрокаТабличнойЧасти.ПлановаяСебестоимость 
		* СтрокаТабличнойЧасти.Коэффициент 
		/ СтароеЗначениеКоэффициента;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость()

Процедура ЗаполнитьПлановуюСебестоимостьНаОсновании(ДокументОбъект, ДокументОснование, ВалютаРегламентированногоУчета) Экспорт
	
	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;
	
	// По умолчанию заполняем по документу-основанию.
	ЗаполнитьПоДокументуОснованию = Истина;
	
	МетаданныеДокумента = ДокументОснование.Метаданные();
	
	// Проверяем на возможность заполнения по документу-основанию.
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаполнитьПоДокументуОснованию = Ложь;
	КонецЕсли;
	Если ЗаполнитьПоДокументуОснованию Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("ИспользоватьПлановуюСебестоимость") = Неопределено Тогда
			ЗаполнитьПоДокументуОснованию = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ЗаполнитьПоДокументуОснованию Тогда
		Если Не ДокументОснование.ИспользоватьПлановуюСебестоимость Тогда
			ЗаполнитьПоДокументуОснованию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Если невозможно заполнить по документу-основанию, то заполняем по типу цены.
	Если Не ЗаполнитьПоДокументуОснованию Тогда
		РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета);
		Возврат;
	КонецЕсли;
	
	// Если возможно, то заполняем.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ПлановаяСебестоимость
	|	ИЗ
	|		Документ." + ДокументОснование.Метаданные().Имя + ".Товары КАК Док
	|	ГДЕ
	|		Док.Ссылка = &Сделка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// В цикле по ТЧ заполняем плановую себестоимость значениями,
	// полученными из документа-основания.
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		Выборка.Сбросить();
		Если НЕ Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		ПлановаяСебестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ПлановаяСебестоимость, 
		ДокументОбъект.ВалютаДокумента, ДокументОснование.ВалютаДокумента,
		ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета),
		ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета));
		
		ПлановаяСебестоимость = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		ПлановаяСебестоимость,
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		ДокументОснование.СуммаВключаетНДС,
		ДокументОбъект.УчитыватьНДС,
		ДокументОбъект.СуммаВключаетНДС,
		УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		Если ПлановаяСебестоимость = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер " + СокрЛП(СтрокаТабличнойЧасти.НомерСтроки) + " не определена плановая себестоимость!");
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПлановаяСебестоимость;
		
	КонецЦикла;
	
КонецПроцедуры // тчЗаполнитьПлановуюСебестоимостьНаОсновании()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ 

#Если Клиент Тогда
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ
	
	
	// Процедура выполняет стандартные действия при изменении счета бухгалтерского учета  
	// в строке табличной части документа (заполняет счет налогового учета).
	//
	// Параметры:
	//  СтрокаТабличнойЧасти - строка табличной части возвратная тара документа,
	//
	Процедура ЗаполнитьСчетНУпоСчетуБУТабЧасти(СтрокаТабличнойЧасти) Экспорт
		
		СтрокаТабличнойЧасти.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ));
		
	КонецПроцедуры // ЗаполнитьСчетНУпоСчетуБУТабЧасти()
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ПРОИЗВОДСТВЕННЫЕ ДОКУМЕНТЫ
	
	// Функция открывает форму подбора статей затрат по остаткам
	//
	Функция ОткрытьПодборСтатейЗатрат( ФормаДокумента, СтруктПараметры) Экспорт
		
		ФормаПодбора = Обработки.ПодборПрочихЗатрат.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
		
		ФормаПодбора.СтруктПараметры    = СтруктПараметры;
		ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
		ФормаПодбора.РежимВыбора        = Истина;
		
		ФормаПодбора.Открыть();
		
		Возврат ФормаПодбора;
		
	КонецФункции // ОткрытьПодборСтатейЗатрат()
	
#КонецЕсли
