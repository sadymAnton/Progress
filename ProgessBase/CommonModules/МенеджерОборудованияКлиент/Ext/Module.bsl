////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ УПРАВЛЕНИЯ ПОДКЛЮЧАЕМЫМ ОБОРУДОВАНИЕМ (на клиенте) 

///////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧЕНИЕ ОБОРУДОВАНИЯ

// Производит подключение доступного оборудования по списку типов ПО
//
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;

	Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);

КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства,
                                               ОписаниеОшибки = "") Экспорт

	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено,
                               ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт

	КонечныйРезультат = Истина;
	Результат         = Истина;

	ОбъектДрайвера    = Неопределено;
	ОписаниеОшибки    = "";
	ОписаниеОшибкиУстройства = "";

	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		ОписаниеОшибки = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

		Возврат Ложь;
	КонецЕсли;

	СписокОборудования =
	 МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО,
	                                                              ИдентификаторУстройства);

	Если СписокОборудования.Количество() > 0 Тогда
		Для каждого Устройство Из СписокОборудования Цикл
			//Проверим, не подключено ли устройство ранее
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
			                                                        Устройство.Ссылка);

			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее

				ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство.ОбработчикДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					//Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
					               + НСтр("ru = '%Наименование%: Не удалось загрузить драйвер устройства.
					                 |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Устройство.Наименование);
					КонечныйРезультат = Ложь;

					Продолжить;
				КонецЕсли;

				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);

				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("СетевойПорт"            , Устройство.СетевойПорт);
				НовоеПодключение.Вставить("Параметры", 
				                          МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(
				                           Устройство.Ссылка));
				НовоеПодключение.Вставить("КоличествоПодключенных", 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"  , Новый Структура());

				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияКлиентСерверПереопределяемый.ПолучитьОбработчикаДрайвера(НовоеПодключение.ОбработчикДрайвера).ПодключитьУстройство(
					    ОбъектДрайвера,
					    НовоеПодключение.Параметры,
					    НовоеПодключение.ПараметрыПодключения,
					    ВыходныеПараметры);

				Если Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
						НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
					Иначе
						НовоеПодключение.Вставить("ИсточникСобытия", "");
						НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
					КонецЕсли;

					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
					               + НСтр("ru = 'Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
				КонецЕсли;
			Иначе // Устройство было подключено ранее
				//Увеличим количество пользователей данного соединения
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;

			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Выбранное устройство не может использоваться для подключения.
		|Укажите другое устройство.'");
		КонечныйРезультат = Ложь;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОТКЛЮЧЕНИЕ ОБОРУДОВАНИЯ

// Отключает все подключенное оборудование, соответствующее указанному типу ПО
//
Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);

КонецФункции

// Отключает устройство, определенное идентификатором
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт

	КонечныйРезультат = Истина;
	Результат         = Истина;

	Для каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ПодключенноеУстройство.КоличествоПодключенных = 0;

		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			//Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
			                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			КонечныйРезультат = Ложь;

			Продолжить;
		КонецЕсли;

		ВыходныеПараметры = Неопределено;
		Результат = МенеджерОборудованияКлиентСерверПереопределяемый.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера).ОтключитьУстройство(
			    ОбъектДрайвера,
			    ПодключенноеУстройство.Параметры,
			    ПодключенноеУстройство.ПараметрыПодключения,
			    ВыходныеПараметры);

		Если НЕ Результат Тогда
			ОписаниеОшибки = НСтр("ru = 'При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
		КонецЕсли;

		КонечныйРезультат = КонечныйРезультат И Результат;
	КонецЦикла;

	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();

	Возврат КонечныйРезультат;

КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")

	КонечныйРезультат = Истина;
	Результат         = Истина;

	ВыходноеОписаниеОшибки = "";

	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];

			ИмяТипаПО = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено
			   И (ТипыПО = Неопределено
				 Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено
				 Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда

				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					ПодключенноеУстройство.КоличествоПодключенных = 0;

					ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
					Если ОбъектДрайвера = Неопределено Тогда
						//Сообщить об ошибке, что не удалось загрузить драйвер.
						ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
						                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						КонечныйРезультат = Ложь;

						Продолжить;
					КонецЕсли;

					ВыходныеПараметры = Неопределено;
					Результат = МенеджерОборудованияКлиентСерверПереопределяемый.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера).ОтключитьУстройство(
						    ОбъектДрайвера,
						    ПодключенноеУстройство.Параметры,
						    ПодключенноеУстройство.ПараметрыПодключения,
						    ВыходныеПараметры);

					Если НЕ Результат Тогда
						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
						               + НСтр("ru = 'При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
					КонецЕсли;

					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;

			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ЭКСПОРТНЫЕ МЕТОДЫ 

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПриНачалеРаботыСистемы() Экспорт

	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура("ДрайвераПодключаемогоОборудования,
		                                        |ПараметрыПодключенияПО,
		                                        |ПоследнийСлипЧек,
		                                        |МенеджерОборудованияСтандартныеДрайвераКлиент,
		                                        |ТаблицаУстройствДМ,
		                                        |ПараметрыДрайверМенеджера",
		                                         Новый Соответствие(),
		                                         Новый Массив(),
		                                         "",
		                                         Неопределено,
		                                         Новый Структура(),
		                                         Новый Структура());
	КонецЕсли;

КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПередЗавершениемРаботыСистемы() Экспорт

КонецФункции

// Функция осуществляет выбор устройства из списка доступных
// по типу подключаемого оборудования
// Если устройств более одного, то пользователю отображается
// диалог со списком устройств с предложением выбрать "одно из..."
Функция ВыбратьУстройство(ТипПО, ТекстЗаголовкаВыбора, СообщениеНеПодключен) Экспорт

	//Выбор устройства
	Идентификатор = Неопределено;

	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		Возврат Идентификатор;
	КонецЕсли;

	СписокДоступныхУстройств = 
	 МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипПО);

	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если Не ПустаяСтрока(СообщениеНеПодключен) ТОгда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНеПодключен);
		КонецЕсли;
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;

		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
		Иначе
			Идентификатор = СписокУстройств.ВыбратьЭлемент(ТекстЗаголовкаВыбора);
			Если Идентификатор <> Неопределено Тогда
				Идентификатор = Идентификатор.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Идентификатор;

КонецФункции

// Функция предоставляет диалог выбора рабочего места
//
Функция ВыбратьРабочееМесто(ОткрыватьФормуВыбораПриПервомОбращении = Ложь, ИдентификаторКлиента = "") Экспорт

	Результат    = Ложь;
	РабочееМесто = "";

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОткрыватьПриПервомОбращении", ОткрыватьФормуВыбораПриПервомОбращении);
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	Ответ = ОткрытьФормуМодально("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы);

	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		
		РабочееМесто = Ответ.РабочееМесто;
		МенеджерОборудованияСервер.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
		Результат = Истина;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента"
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если МассивРабочихМест.Количество() = 0 Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			Параметры.Вставить("СетевойПорт");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
			Параметры.СетевойПорт          = МенеджерОборудованияКлиентСервер.ПолучитьСетевойПортПоУмолчанию();
			РабочееМесто = МенеджерОборудованияСервер.СоздатьРабочееМестоКлиента(Параметры);
			
		ИначеЕсли МассивРабочихМест.Количество() = 1 Тогда
			
			РабочееМесто = МассивРабочихМест[0];
			
		ИначеЕсли МассивРабочихМест.Количество() > 1 Тогда
			Результат = МенеджерОборудованияКлиент.ВыбратьРабочееМесто(Истина, ВРег(СистемнаяИнформация.ИдентификаторКлиента));
			
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
			
		КонецЕсли;
	КонецЕсли;
	
	Если Результат
		И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		МенеджерОборудованияСервер.УстановитьРабочееМестоКлиента(РабочееМесто);
		
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает макет слип чека по наименованию макета
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = Ложь) Экспорт

	Возврат МенеджерОборудованияКлиентПовтИсп.ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН);

КонецФункции

// Направляет команду ответственному обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор")
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1) Экспорт

	Результат = Ложь;

	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
	                                                        Идентификатор);

	Если ПодключенноеУстройство <> Неопределено Тогда
		// Получение объекта драйвера
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			//Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
			                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);

		Иначе
			Параметры            = ПодключенноеУстройство.Параметры;
			ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
			ОбработчикДрайвера   = ПодключенноеУстройство.ОбработчикДрайвера;

			// Вызов метода выполнения команды у обработчика
			Результат = МенеджерОборудованияКлиентСерверПереопределяемый.ПолучитьОбработчикаДрайвера(ОбработчикДрайвера).ВыполнитьКоманду(Команда,
			                                                                             ВходныеПараметры,
			                                                                             ВыходныеПараметры,
			                                                                             ОбъектДрайвера,
			                                                                             Параметры,
			                                                                             ПараметрыПодключения);
		КонецЕсли;
	Иначе
		//Сообщить об ошибке, что устройство не подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru = 'Устройство не подключено.
			|Перед выполнением операции устройство должно быть подключено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе
//
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры,
                                       Идентификатор, Параметры) Экспорт

	Результат = Ложь;

	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
	                                                        Идентификатор);

	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);

		времПараметрыПодключения = Новый Структура();

		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			//Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ТекстСообщения = НСтр("ru = 'Не удалось загрузить драйвер устройства.
			                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			
		Иначе
			Результат = МенеджерОборудованияКлиентСерверПереопределяемый.ПолучитьОбработчикаДрайвера(ДанныеОборудования.ОбработчикДрайвера).ВыполнитьКоманду(
			    Команда,
			    ВходныеПараметры,
			    ВыходныеПараметры,
			    ОбъектДрайвера,
			    Параметры,
			    времПараметрыПодключения);

			Если Не Результат Тогда
				ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Сообщить об ошибке, что устройство подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru = 'Устройство подключено.
			|Перед выполнением операции устройство должно быть отключено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выводить модальную диалоговую форму настройки устройства
//Входные параметры:
//   Устройство   - СправочникСсылка.ПодключаемоеОборудование
Функция ВыполнитьНастройкуОборудования(Идентификатор, НастройкиИзменены = Ложь,СообщениеОбОшибке = "") Экспорт

	Результат = Истина;

	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);
	ОбработчикДрайвера = ДанныеУстройства.ОбработчикДрайвера;
	ИдентификаторУстройства = ДанныеУстройства.ИдентификаторУстройства;

	//Получить параметры из базы
	ПараметрыОбработки = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Идентификатор);
	ПараметрыОбработки.Вставить("Идентификатор", Идентификатор);

	// Получение формы настройки параметров
	ФормаНастройки = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяФормыНастройкиПараметров(Строка(ОбработчикДрайвера));
	ФормаНастройки = ПолучитьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыОбработки);

	Ответ = ФормаНастройки.ОткрытьМодально();
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ПараметрыФормы = ФормаНастройки.Параметры;
		Для каждого СтрокаСпискаЗначений Из ПараметрыФормы.ПараметрыНастройки Цикл
			//Проверка модифицированности предыдущего значения
			ПредыдущееЗначение = Неопределено;

			ПараметрыОбработки.Свойство(СтрокаСпискаЗначений.Представление, ПредыдущееЗначение);
			Если ПредыдущееЗначение <> Неопределено
			   И ПредыдущееЗначение <> СтрокаСпискаЗначений.Значение Тогда
				НастройкиИзменены = Истина; // Есть изменение настроек устройства
			КонецЕсли;

			ПараметрыОбработки.Вставить(СтрокаСпискаЗначений.Представление, СтрокаСпискаЗначений.Значение);
		КонецЦикла;

		Результат = МенеджерОборудованияСервер.СохранитьПараметрыУстройства(Идентификатор, ПараметрыОбработки);
		Если Не Результат Тогда
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
		КонецЕсли;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Прервать Тогда
		
		ЗавершитьРаботуСистемы(Истина, Истина);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Сохраняет пользовательские настройки подключаемого оборудования
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт

	МенеджерОборудованияСервер.СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ РАБОТЫ С ТСД 

// Выгружает таблицу с данными в терминал сбора данных
// УникальныйИдентификатор 	- идентификатор формы
// ТаблицаТСД 				- массив структур в которых могут присутствовать только нижеуказанные ключи:
// 	 - Штрихкод
// 	 - Номенклатура
// 	 - ЕдиницаИзмерения
// 	 - ХарактеристикаНоменклатуры
// 	 - СерияНоменклатуры
// 	 - Качество
// 	 - Цена
// 	 - Количество
Процедура ВыгрузитьДанныеВТСД(УникальныйИдентификатор, ТаблицаВыгрузкиВТСД) Экспорт

	ОписаниеОшибки = "";

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		    НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));

		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                              ИдентификаторУстройства, ОписаниеОшибки);

			Если Результат Тогда
				// выгружаем в ТСД
				ВходныеПараметры  = Новый Массив();
				ВыходныеПараметры = Неопределено;

				// Преобразуем массив структур в массив списка значений с предопределённым и фиксированным порядком полей:
				// 	0 - Штрихкод
				// 	1 - Номенклатура
				// 	2 - ЕдиницаИзмерения
				// 	3 - ХарактеристикаНоменклатуры
				// 	4 - СерияНоменклатуры
				// 	5 - Качество
				// 	6 - Цена
				// 	7 - Количество
				МассивТСД = Новый Массив;
				Для каждого текСтрока Из ТаблицаВыгрузкиВТСД Цикл
					СтрокаМассиваТСД = Новый СписокЗначений; // не массив для сохранения совместимости с обработками обслуживания
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Штрихкод"),						текСтрока.Штрихкод, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Номенклатура"), 				текСтрока.Номенклатура, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ЕдиницаИзмерения"), 			текСтрока.ЕдиницаИзмерения, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ХарактеристикаНоменклатуры"), 	текСтрока.ХарактеристикаНоменклатуры, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("СерияНоменклатуры"), 			текСтрока.СерияНоменклатуры, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Качество"), 					текСтрока.Качество, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Цена"), 						текСтрока.Цена, 0));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Количество"), 					текСтрока.Количество, 0));
					МассивТСД.Добавить(СтрокаМассиваТСД);
				КонецЦикла;
				
				ВходныеПараметры.Добавить("Items");
				ВходныеПараметры.Добавить(МассивТСД);

				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				                                                        "UploadDirectory",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);

				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При выгрузке данных в терминал сбора данных произошла ошибка.
					                          |%ОписаниеОшибки%
					                          |Данные в терминал сбора данных не выгружены.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;

				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                 ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				                          |%ОписаниеОшибки%
				                          |Данные в терминал сбора данных не выгружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Загружает в таблицу данные из терминала сбора данных
// УникальныйИдентификатор 	- идентификатор формы
// ТаблицаТСД 				- массив структур с ключами:
// 	 - Штрихкод
// 	 - Количество
Процедура ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД) Экспорт

	ТаблицаЗагрузкиИзТСД = Новый Массив();
	ОписаниеОшибки = "";

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		    НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));

		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                              ИдентификаторУстройства, ОписаниеОшибки);

			Если Результат Тогда
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;

				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				                                                        "DownloadDocument",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);

				Если Результат Тогда
					
					Для Индекс = 0 По ВыходныеПараметры[0].Количество()/2 - 1 Цикл
						ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество",
						   ВыходныеПараметры[0][Индекс * 2 + 0], ?(ВыходныеПараметры[0][Индекс * 2 + 1] <> Неопределено, ВыходныеПараметры[0][Индекс * 2 + 1], 0)));
					КонецЦикла;

					Оповестить("DataCollectionTerminal", ТаблицаЗагрузкиИзТСД, "ПодключаемоеОборудование");

				Иначе
					
					ТекстСообщения = НСтр("ru='При загрузке данных из терминала сбора данных произошла ошибка.
					                          |%ОписаниеОшибки%
					                          |Данные из терминала сбора данных не загружены.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;

				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                 ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				                          |%ОписаниеОшибки%
				                          |Данные из терминала сбора данных не загружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//  МЕТОДЫ РАБОТЫ С КАРДРИДЕРОМ 

// Определяет соответствует ли код карты шаблону
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
//	- Суффикс
//	- Префикс
//	- РазделительБлоков
//	- ДлинаКода
// На выходе:
// Истина - код соответствует шаблону
// Сообщение пользователю что именно не соответствует
Функция КодСоответствуетШаблонуМК(ДанныеДорожек, ДанныеШаблона) Экспорт
	ОднаДорожкаПрисутствует = Ложь;
	ПроверкаПройдена = Истина;
	
	Для й = 1 По 3 Цикл
		Если ДанныеШаблона["ДоступностьДорожки"+Строка(й)] Тогда
			ОднаДорожкаПрисутствует = Истина;
			текСтрока = ДанныеДорожек[й-1];
			Если Прав(текСтрока, СтрДлина(ДанныеШаблона["Суффикс"+Строка(й)])) <> ДанныеШаблона["Суффикс"+Строка(й)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка '")+Строка(й)+". "+НСтр("ru='Суффикс карты не соответствует суффиксу шаблона.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если Лев(текСтрока, СтрДлина(ДанныеШаблона["Префикс"+Строка(й)])) <> ДанныеШаблона["Префикс"+Строка(й)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка '")+Строка(й)+". "+НСтр("ru='Префикс карты не соответствует префиксу шаблона.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если Найти(текСтрока, ДанныеШаблона["РазделительБлоков"+Строка(й)]) = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка '")+Строка(й)+". "+НСтр("ru='Разделитель блоков карты не соответствует разделителю блоков шаблона.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
				
			Если СтрДлина(текСтрока) <> ДанныеШаблона["ДлинаКода"+Строка(й)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка '")+Строка(й)+". "+НСтр("ru='Длина кода карты не соответствует длине кода шаблона.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверкаПройдена Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОднаДорожкаПрисутствует Тогда 
		Возврат Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В шаблоне не указано ни одной доступной дорожки.'"));
		Возврат Ложь;
	КонецЕсли;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ ОБРАБОТКИ СОБЫТИЙ ОТ УСТРОЙСТВ 

// Производит обработку данных события, полученных от клиента
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт

	Результат = Истина;

	// Поиск обработчика события
	Для каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
                          
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИсточникСобытия)
		   И Подключение.ИменаСобытий <> Неопределено) Тогда

			// Ищем среди подключенного оборудования устройство с полученным событием
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Подключение.ОбработчикДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					//Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
					                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Подключение.Наименование);

					Продолжить;
				КонецЕсли;

				ВходныеПараметры  = Новый Массив();
				ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
				ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
				ВыходныеПараметры = Неопределено;

				// Обрабатываем сообщение
				Результат = ВыполнитьКоманду(Подключение.Ссылка,
				                      "ОбработатьСобытие",
				                      ВходныеПараметры,
				                      ВыходныеПараметры);
				Если Результат Тогда
					// Оповещаем 
					Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
				КонецЕсли;

				// Оповещаем драйвер о завершении обработки события
				ВходныеПараметры.Очистить();
				ВходныеПараметры.Добавить(Результат);
				ВыполнитьКоманду(Подключение.Ссылка,
				                 "ЗавершитьОбработкуСобытия",
				                 ВходныеПараметры,
				                 ВыходныеПараметры);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//  ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ 

//Поиск по идентификатору подключенного ранее устройства
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор)

	ПодключенноеУстройство = Неопределено;

	Для каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ПодключенноеУстройство;

КонецФункции

// Выполняет подготовку к переустановке компоненты: Спрашивает пользователя, устанавливает флаг ТребуетсяПереустановка.
// Процедура вызывается из модуля формы настройки оборудования ПриОткрытии
Процедура ПодготовкаКПереустановкеКомпоненты(ПодключаемоеОборудованиеСсылка, ВерсияТекущая, Отказ) Экспорт
	
	#Если ВебКлиент Тогда
		ВерсияИзКонфигурации = МенеджерОборудованияКлиентСерверПереопределяемый.ПолучитьОбработчикаДрайвера(МенеджерОборудованияСервер.ПолучитьОбработчикДрайвераИзСсылки(ПодключаемоеОборудованиеСсылка)).ПолучитьВерсиюВнешнейКомпоненты();
		ТребуетсяПереустановка = МенеджерОборудованияСервер.ПолучитьПризнакПереустановкиИзСсылки(ПодключаемоеОборудованиеСсылка);
		Если НЕ ТребуетсяПереустановка
			И ЗначениеЗаполнено(ВерсияИзКонфигурации)
			И ЗначениеЗаполнено(ВерсияТекущая)
			И ВерсияИзКонфигурации <> ВерсияТекущая Тогда
			Ответ = Вопрос(НСтр("ru='На вашем компьютере установлена компонента версии '")+ВерсияТекущая+Символы.ПС
				+НСтр("ru='В конфигурации доступна версия компоненты '")+ВерсияИзКонфигурации+Символы.ПС+Символы.ПС
				+НСтр("ru='Обновить компоненту из конфигурации? (требуется перезапустить 1С:Предприятие)'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Обновление компоненты'"));
			Если Ответ = КодВозвратаДиалога.Да Тогда
				МенеджерОборудованияСервер.УстановитьПризнакПереустановки(ПодключаемоеОборудованиеСсылка, Истина);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//  РАБОТА С ДРАЙВЕРОМ 

// Проверяет установлен ли драйвер.
//
Функция ДрайверУстановлен(Идентификатор) Экспорт
	
	ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);
	
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);
	
	Возврат ОбъектДрайвера <> Неопределено;
	
КонецФункции

#Если Не ВебКлиент Тогда
// Установливает драйвер из дистрибутива поставщика
//
Процедура УстановитьДрайверИзДистрибутива(ИмяМакета, ИмяФайла) Экспорт

	ВременныйКаталог = КаталогВременныхФайлов();

	// Получение макета с сервера
	СсылкаНаФайл = МенеджерОборудованияСервер.ПолучитьМакетССервера(ИмяМакета);

	// Распаковка архива дистрибутива во временный каталог
	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Model.zip", Ложь);
	ФайлМакета = Новый ЧтениеZipФайла();
	ФайлМакета.Открыть(ВременныйКаталог + "Model.zip");
	ВременныйКаталог = ВременныйКаталог + "Model\";

	Для Каждого ЭлементМакета Из ФайлМакета.Элементы Цикл
		Если ЭлементМакета.Имя = ИмяФайла + ".zip" Тогда
			СоздатьКаталог(ВременныйКаталог);
			ФайлМакета.Извлечь(ЭлементМакета, ВременныйКаталог);

			// Распаковка дистрибутива
			ФайлАрхива = Новый ЧтениеZipФайла();
			ФайлАрхива.Открыть(ВременныйКаталог + ЭлементМакета.Имя);
			ФайлАрхива.ИзвлечьВсе(ВременныйКаталог);

			// Запуск инсталлятора
			ЗапуститьПриложение(ВременныйКаталог + ИмяФайла, ВременныйКаталог, Истина);

			// Удаление всех временных файлов после работы
			Попытка
				УдалитьФайлы(ВременныйКаталог);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	// Удаление всех временных файлов после работы
	ВременныйКаталог = СтрЗаменить(ВременныйКаталог, "Model\", "");
	Попытка
		УдалитьФайлы(ВременныйКаталог + "Model.zip");
	Исключение
	КонецПопытки;

КонецПроцедуры
#КонецЕсли

// Получение объекта драйвера.
//
Функция ПолучитьОбъектДрайвера(ДрайверУстройства) Экспорт

	ОбъектДрайвера = Неопределено;

	Для каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДрайверУстройства Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			
		// Сканеры штрихкода/Считыватели магнитных карт
		
			Если ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода") 
			 Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда
			    #Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода", "Сканер");
					ОбъектДрайвера = Новый ("AddIn.Сканер.Scanner");
				#Иначе
					ProgID = "AddIn.Scanner";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода") Тогда
				#Если ВебКлиент Тогда
					
				#Иначе
					ProgID = "AddIn.ScancodeScanner";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода")
				  Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт") Тогда
				#Если ВебКлиент Тогда
	 				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛСканерШтрихкода", "АТОЛСканер");
					ОбъектДрайвера = Новый ("AddIn.АТОЛСканер.Scaner45");
				#Иначе
					ProgID = "AddIn.Scaner45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
		// Конец Сканеры штрихкода/Считыватели магнитных карт
		
		// Фискальные регистраторы
		
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор") Тогда
				ОбъектДрайвера = "Не требуется";
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы") Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы", "АТОЛФР");
					ОбъектДрайвера = Новый ("AddIn.АТОЛФР.ATOL_KKM_1C");
				#Иначе
					ProgID = "AddIn.ATOL_KKM_1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТКасбиФР01К") Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверВерсияТКасбиФР01К", "ВЕРСИЯТКАСБИФР01К");
					ОбъектДрайвера = Новый ("AddIn.ВЕРСИЯТКАСБИФР01К.KSBFR1K1C");
				#Иначе
					ProgID = "AddIn.KSBFR1K1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторыСпарк") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСФРСпарк", "ККСФРСПАРК");
				ОбъектДрайвера = Новый ("AddIn.ККСФРСПАРК.SparkTF");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы") Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверШтрихМФискальныеРегистраторы", "ШтрихМФР");
					ОбъектДрайвера = Новый ("AddIn.ШтрихМФР.DrvFR1C");
				#Иначе
					ProgID = "AddIn.DrvFR1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныйРегистраторФР01К") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.OrionFR_1C8";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
		// Конец Фискальные регистраторы
		
		// Дисплеи покупателя
		
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолДисплеиПокупателя") Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛДисплеиПокупателя", "АТОЛДП");
					ОбъектДрайвера = Новый ("AddIn.АТОЛДП.Line45");
				#Иначе
					ProgID = "AddIn.Line45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателя") Тогда
				#Если ВебКлиент Тогда
					
				#Иначе
					ProgID = "AddIn.1CDSPPromag";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМДисплеиПокупателя")  Тогда
				#Если ВебКлиент Тогда
					
				#Иначе
					ProgID = "AddIn.LineDisplay";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСДисплеиПокупателя") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСДисплеиПокупателя", "ККСДПСПАРК");
				ОбъектДрайвера = Новый ("AddIn.ККСДПСПАРК.VFCD220E");
				
		// Конец Дисплеи покупателя
		
		// Терминалы сбора данных
		
			ИначеЕсли (ДрайверУстройства) = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанных") Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАтолТСД", "АтолТСД");
					ОбъектДрайвера = Новый ("AddIn.АтолТСД.PDX45");
				#Иначе
					ProgID = "AddIn.PDX45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанных") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.CipherLab";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных")  Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.iPOSoft_DT";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМТерминалыСбораДанных")  Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверШтрихМТСД", "ШтрихМТСД");
					ОбъектДрайвера = Новый ("AddIn.ШтрихМТСД.Terminals");
				#Иначе
					ProgID = "AddIn.Terminals";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
		// Конец Терминалы сбора данных
		
		// Эквайринговые терминалы
		
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы") Тогда
				#Если ВебКлиент Тогда
					
				#Иначе
					ПодключитьВнешнююКомпоненту("AddIn.SBRFCOMObject");
					ОбъектДрайвера = Новый("AddIn.SBRFCOMExtension");
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалы") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалы", "ИНПАСЭТ");
				ОбъектДрайвера = Новый("AddIn.ИНПАСЭТ.AddInPulsarDriver1C");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart") Тогда
				ПодключитьВнешнююКомпоненту("AddIn.a_inpas1c82");
				ОбъектДрайвера = Новый ("AddIn.a_inpas1c82");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСофткейсЭквайринговыеТерминалы") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверСофткейсЭквайринговыеТерминалы", "СофтКейс");
				ОбъектДрайвера = Новый("AddIn.СофтКейс.SKAM");
				
		// Конец Эквайринговые терминалы
		
		// Электронные весы
		
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолЭлектронныеВесы") Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛЭлектронныеВесы", "АТОЛЭВ");
					ОбъектДрайвера = Новый ("AddIn.АТОЛЭВ.Scale45");
				#Иначе
					ProgID = "AddIn.Scale45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Scale45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
		
		// Конец Электронные весы

		// Весы с печатью этикеток
		
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикACOMВесыСПечатьюЭтикеток") Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикScaleCASВесыСПечатьюЭтикеток") Тогда
				#Если ВебКлиент Тогда
					
				#Иначе
					ProgID = "CL5000J.WrapperFor1C82";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый ("AddIn.CL5000JFor1C82");
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток") Тогда
				#Если ВебКлиент Тогда
					
				#Иначе
					ProgID = "AddIn.DrvLP";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
		// Конец Весы с печатью этикеток
		
		// ККМ offline
		
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККМOffline") Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККМOffline") Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				
		// Конец ККМ offline
		
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;

	Если ОбъектДрайвера <> Неопределено Тогда
		глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДрайверУстройства, ОбъектДрайвера);
		ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДрайверУстройства];
	КонецЕсли;

	Возврат ОбъектДрайвера;

КонецФункции

// Установка из макета драйвера устройства.
//
Процедура УстановитьДрайвер(Идентификатор) Экспорт
	
	ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);
	ДрайверУстройства = ДанныеОборудования.ОбработчикДрайвера;
	
	Попытка
		
	// Сканеры штрихкода/Считыватели магнитных карт
		
		Если ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода")   
		 Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода");
			#Иначе
				УстановитьДрайверИзДистрибутива("Драйвер1ССканерШтрихкодаExe", "ScanOPOS.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверСканкодСканерШтрихкода");
            #Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодСканерШтрихкода", "ScancodeScanOpos_8.0.8.19.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода")
		      Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛСканерШтрихкода");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверАТОЛОбщий", "setup.exe");
			#КонецЕсли
			
	// Конец Сканеры штрихкода/Считыватели магнитных карт
		
	// Фискальные регистраторы
	
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор") Тогда
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверАТОЛОбщий", "setup.exe");
			#КонецЕсли

		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТКасбиФР01К") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверВерсияТКасбиФР01К");
			#Иначе
				ОбъектДрайвера = ПолучитьОбъектДрайвера(ДрайверУстройства);
				ОбъектДрайвера = Неопределено;
				УстановитьДрайверИзДистрибутива("ДрайверВерсияТКасбиФР01К", "ksb01frk.exe");
			#КонецЕсли

		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторыСпарк") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСФРСпарк");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныйРегистраторФР01К") Тогда
    		#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверОРИОНФР01К");
			#Иначе
 				УстановитьДрайверИзДистрибутива("ДрайверОРИОНФР01К", "ORION-FR01K_v.1.2.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверШтрихМФискальныеРегистраторы");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМФискальныеРегистраторы", "DrvFR_4.9_152.exe");
			#КонецЕсли
			
	// Конец Фискальные регистраторы
	
	// Дисплеи покупателя
	
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолДисплеиПокупателя") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛДисплеиПокупателя");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверАТОЛОбщий", "setup.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства =  ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателя") Тогда
			#Если ВебКлиент Тогда
				
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодДисплеиПокупателя", "1CDSPPromag_2.1.0.5.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМДисплеиПокупателя") Тогда
			#Если ВебКлиент Тогда
				
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМДисплеиПокупателя", "LightPOSDrv_1.2.3.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСДисплеиПокупателя") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСДисплеиПокупателя");
			
	// Конец Дисплеи покупателя
	
	// Терминалы сбора данных                                           `
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанных") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАтолТСД");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверАТОЛОбщий", "setup.exe");
			#КонецЕсли

		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанных") Тогда
			#Если ВебКлиент Тогда
				
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодТСДCipherLab", "CPT_1C_6.0.3.0.exe");
			#КонецЕсли

		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных") Тогда
			#Если ВебКлиент Тогда
				
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканситиТСДCipherLab", "CitySoftWarehouseDOS.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМТерминалыСбораДанных") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверШтрихМТСД");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМТСД", "setup.exe");
			#КонецЕсли
			
	// Конец Терминалы сбора данных
	
	// Электронные весы
	
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы") Тогда
			#Если ВебКлиент Тогда
			#Иначе			
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМЭлектронныеВесы", "setup.exe");
			#КонецЕсли	
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолЭлектронныеВесы") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛЭлектронныеВесы");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверАТОЛОбщий", "setup.exe");
			#КонецЕсли
			
	// Конец Электронные весы 
	
	// Весы с печатью этикеток
	
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикScaleCASВесыСПечатьюЭтикеток") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверScaleCASВесыСПечатьюЭтикеток", "setup.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМВесыCПечатьюЭтикеток", "setup.exe");
			#КонецЕсли
	
	// Конец Весы с печатью этикеток
	
	// Эквайринговые терминалы
	
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверСБРФЭквайринговыеТерминалы");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалы") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалы");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart") Тогда
			#Если ВебКлиент Тогда
			#Иначе
  				УстановитьДрайверИзДистрибутива("ДрайверИНПАСЭквайринговыеТерминалыSmart", "InpasSmartSale.exe");
			#КонецЕсли
		
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСофткейсЭквайринговыеТерминалы") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверСофткейсЭквайринговыеТерминалы");
			
	// Конец Эквайринговые терминалы
	
		КонецЕсли;
		
	Исключение
	КонецПопытки;

КонецПроцедуры

