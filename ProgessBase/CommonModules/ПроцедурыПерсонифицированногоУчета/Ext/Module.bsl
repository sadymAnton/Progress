

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЯ

//Преобразует дату в формат, требуемый правилами подготовки документов в ПФ РФ 
Функция ДатаВФайл(Знач ДатавФайл)
	Если ЗначениеЗаполнено(ДатавФайл) Тогда
		Возврат """" + Формат(ДатавФайл, "ДФ='дд/ММ/гггг'") + """";
	Иначе
		Возврат """""";
	КонецЕсли;
КонецФункции	 

//Преобразует строку отчета, содержащую дату в вормате "ДД/ММ/ГГГГ", в значение типа "Дата"
Функция ДатаИзФайла(Знач ДатаИзФайла)
	Число = Сред(ДатаИзФайла,1,2);
	Месяц = Сред(ДатаИзФайла,4,2);
	Год = Сред(ДатаИзФайла,7,4);
	Попытка
		Возврат Дата(Год,Месяц,Число);
	Исключение
		Возврат Дата('00010101');
	КонецПопытки;	
КонецФункции	 

//Преобразует строку в число
Функция ЧислоИзФайла(Знач ЧислоИзФайла)
	Попытка
		Возврат Число(ЧислоИзФайла);
	Исключение
		Возврат 0;
	КонецПопытки;	
КонецФункции	

//Преобразует дату в формат, необходимый для печатных форм сведений в ПФР: "ДД" месяц ГГГГ
Функция ДатаВОтчет(Знач Дата) Экспорт
	Если (ТипЗнч(Дата) = Тип("Дата"))и(Дата <> Дата('00010101')) Тогда
		Стр = Формат(Дата,"ДФ='дд ММММ гггг'") + " года";
		Возврат """"+Лев(Стр,2)+""""+Сред(Стр,3);
	КонецЕсли;	 
	Возврат "";
КонецФункции	

Функция ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(Дата) Экспорт

	СмещениеВСекундах = СмещениеСтандартногоВремени();
	ЗнакЧасовогоПояса = ?(СмещениеВСекундах < 0, "-", "+");
	ПоложительноеСмещениеВСекундах = ?(СмещениеВСекундах < 0, -СмещениеВСекундах, СмещениеВСекундах);
	
	Возврат Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс; ДП=0001-01-01T00:00:00") + ?(ЗначениеЗаполнено(ПоложительноеСмещениеВСекундах), ЗнакЧасовогоПояса + Формат('00010101' + ПоложительноеСмещениеВСекундах, "ДФ=чч:мм"), "Z")

КонецФункции 

//Разбивает строку значений, разделенных запятыми, на элементы с учётом пар ограничительных символов
Функция РазложитьСтрокуФайлаСведенийПФР(Знач Стр,Разделитель = ",",Ограничитель = """")
	
	//Первый проход: определяем позиции пар ограничителей
	ДлинаСтроки = СтрДлина(Стр);
	МассивПозицииОграничителя = Новый Массив();
	КопияСтр = Стр;
	ТекИндекс =0;
	Пока Истина цикл
		//поиск первого ограничетеля
		НачПоз = Найти(КопияСтр,Ограничитель);
		Если НачПоз =0 Тогда 
			Прервать;
		КонецЕсли;	 
		
		ТекИндекс = ТекИндекс+НачПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,НачПоз+1);//двигаемся вперед по строке
		
		//поиск второго ограничителя
		КонПоз = Найти(КопияСтр,Ограничитель);
		Если КонПоз = 0 Тогда
			КонПоз = ДлинаСтроки +1;
		КонецЕсли;	 
		
		ТекИндекс = ТекИндекс+КонПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,КонПоз+1);//двигаемся вперед по строке
	КонецЦикла;	
	КоличествоПарОграничителей = МассивПозицииОграничителя.Количество()/2;
	
	//Второй проход: раскладываем строку на элементы, разделенные символом "Разделитель"
	МассивСтрок = Новый Массив();
	ГоловаЭлемента = "";
	ТекИндекс =0;
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока Истина Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(ГоловаЭлемента+Стр);
			Прервать;
		КонецЕсли;
		
		//Если позиция разделителя находится внутри пары ограничителей, то данный разделитель не учитываем
		ВнутриОграничителей = Ложь;
		Для П=0 по КоличествоПарОграничителей-1 цикл
			АбсолютнаяПозиция = ТекИндекс + Поз;
			Если (АбсолютнаяПозиция>МассивПозицииОграничителя[П*2])и(АбсолютнаяПозиция<МассивПозицииОграничителя[П*2+1]) Тогда
				ВнутриОграничителей = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ВнутриОграничителей Тогда
			ГоловаЭлемента = ГоловаЭлемента + Лев(Стр,Поз);
			Стр = Сред(Стр,Поз+1);
		Иначе		
			МассивСтрок.Добавить(ГоловаЭлемента+Лев(Стр,Поз-1));
			ГоловаЭлемента = "";
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЕсли;	 
		
		//Идём дальше по строке
		ТекИндекс = ТекИндекс+Поз;
	КонецЦикла;
	
	//Убираем ограничители
	Для К=0 по МассивСтрок.Количество()-1 цикл
		Стр = МассивСтрок[К];
		ДлинаСтр = СтрДлина(Стр);
		Если (Лев(Стр,1)=Ограничитель)и(Прав(Стр,1)=Ограничитель) Тогда
			МассивСтрок[К] = Сред(Стр,2,ДлинаСтр-2);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивСтрок;
КонецФункции	 

////////////////////////////////////////////////////////////////////////////////

//Приводит стаж к нормальному виду, когда месяцев не более 12, дней не более 30
Процедура ПолучитьПриведенныйСтаж(Лет, Месяцев, Дней) Экспорт
	
	ДнейВГоду 		= 12 * 30;
	ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
	Лет 			= Цел(ВсегоДней / ДнейВГоду);
	ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 

//Вычисляет разность между двумя датами: в годах, месяцах, днях
Процедура ПолучитьСтажЗаПериод(Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0) Экспорт 
	
	Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
		
		Лет1		=	Год(ДатаОкончанияПериода);
		Месяцев1	=	Месяц(ДатаОкончанияПериода);
		
		Если НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода)) Тогда
			Дней1		=	День(ДатаОкончанияПериода);
		иначе
			Дней1		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет2		=	Год(ДатаНачалаПериода);
		Месяцев2	=	Месяц(ДатаНачалаПериода);
		Если НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода)) Тогда
			Дней2		=	День(ДатаНачалаПериода);
		иначе
			Дней2		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет		=	Лет1		-	Лет2;
		Месяцев	=	Месяцев1	-	Месяцев2;
		Дней	=	Дней1		-	Дней2 + 1;//1 день на увольнение
	Иначе
		Лет = 0; 
		Месяцев = 0;
		Дней = 0;
	КонецЕсли;	
КонецПроцедуры //ПолучитьСтажЗаПериод

Функция ПолучитьПорядокВключенияПериодаВСтраховойСтаж(ВидПособияСоциальногоСтрахования = Неопределено, ВидВремени = Неопределено, ОбозначениеВТабелеУчетаРабочегоВремени = Неопределено) Экспорт 
	
	ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ПустаяСсылка();
	
	Если ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды 
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.Декрет;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.Дети;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность
		ИЛИ ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай
		ИЛИ ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание 
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами
		ИЛИ ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ДЛДЕТИ;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Простой
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя 
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЦелодневноеНеотработанное Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ОтработанноеСверхНормы 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ПустаяСсылка();
	КонецЕсли;
	
    Возврат ВидСтажаСЗВ4
	
КонецФункции // ПолучитьПорядокВключенияПериодаВСтраховойСтаж()
Функция ПорядокВключенияПериодаВСтраховойСтаж2014(ВидПособияСоциальногоСтрахования = Неопределено, ВидВремени = Неопределено, ОбозначениеВТабелеУчетаРабочегоВремени = Неопределено) Экспорт 
	
	ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ПустаяСсылка();
	
	Если ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды 
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.Декрет;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.Дети;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ДОПВЫХ;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность
		ИЛИ ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай
		ИЛИ ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание 
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ВременнаяНетрудоспособность;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ВключаетсяВСтраховойСтаж;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев
		Или ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск
		Или ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ДЛОТПУСК;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ДЛДЕТИ;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ПРОСТОЙ;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.КВАЛИФ;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.УЧОТПУСК;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ОБЩЕСТ;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ОТСТРАН;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.НЕОПЛ;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Простой
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ВключаетсяВСтраховойСтаж;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя 
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.НЕОПЛ;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЦелодневноеНеотработанное Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.НеВключаетсяВСтраховойСтаж;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ОтработанноеСверхНормы 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы Тогда
		ВидСтажа = Перечисления.ВидыСтажаПерсУчета2014.ПустаяСсылка();
	КонецЕсли;
	
    Возврат ВидСтажа
	
КонецФункции // ПолучитьПорядокВключенияПериодаВСтраховойСтаж()

Функция ПредставлениеВидаСтажаПерсУчета2014(ВидСтажаПерсУчета2014) Экспорт 
	
	РасшифровкаВидСтажаПерсУчета2014 = "";
	Если ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ВременнаяНетрудоспособность Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: оплачиваемый период временной нетрудоспособности";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.Декрет Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: отпуск по беременности и родам";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.Дети Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: отпуск по уходу за ребенком до 1.5 лет";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.НеВключаетсяВСтраховойСтаж Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды, не включаемые в страховой стаж";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды работы, включаемые в стаж для досрочного назначения пенсии";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ОтпускБезСохраненияЗарплаты Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: отпуск без сохранения содержания";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ВключаетсяВСтраховойСтаж Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды работы, включаемые в страховой стаж, но не включаемые в стаж для досрочного назначения пенсии";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ДЛДЕТИ Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды, не включаемые в страховой стаж: отпуск по уходу за ребенком от 1,5 до 3 лет.";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ЧАЭС Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды, не включаемые в страховой стаж: дополнительный отпуск граждан, подвергшихся воздействию радиации вследствие катастрофы на Чернобыльской АЭС.";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.НЕОПЛ Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды, не включаемые в страховой стаж: отпуск без сохранения заработной платы, время простоя по вине работника, неоплачиваемые периоды отстранения от работы (недопущения к работе) и другие неоплачиваемые периоды, кроме периодов с кодами ДЛДЕТИ и ЧАЭС.";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ВАХТА Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: время межвахтового отдыха (абзац 1 пункта 8 Правил исчисления периодов работы, дающей право на досрочное назначение трудовой пенсии по старости)";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ДЛОТПУСК Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: пребывание в оплачиваемом отпуске";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.КВАЛИФ Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: повышение квалификации с отрывом от производства (статья 187 Трудового кодекса Российской Федерации)";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.МЕДНЕТРУД Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Период работы, соответствующий переводу в соответствии с медицинским заключением беременной женщины по ее заявлению с работы, дающей право на досрочное назначение трудовой пенсии по старости, на работу, исключающую воздействие неблагоприятных производственных факторов";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.МЕСЯЦ Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Перевод работника с работы, дающей право на досрочное назначение трудовой пенсии по старости, на другую работу, не дающую право на указанную пенсию, в той же организации по производственной необходимости на срок не более одного месяца в течение календарного года";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ОБЩЕСТ Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: исполнение государственных или общественных обязанностей";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ОТСТРАН Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: отстранение от работы (недопущение к работе) не по вине работника (абзац 10 статьи 76 Трудового кодекса Российской Федерации)";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ПРОСТОЙ Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: время простоя по вине работодателя (абзац 9 пункта 9 Правил исчисления периодов работы, дающей право на досрочное назначение трудовой пенсии по старости)";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.СДКРОВ Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: дни сдачи крови и ее компонентов и предоставленные в связи с этим дни отдыха";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.УЧОТПУСК Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: дополнительные отпуска работникам, совмещающим работу с обучением";
	ИначеЕсли ВидСтажаПерсУчета2014 = Перечисления.ВидыСтажаПерсУчета2014.ДОПВЫХ Тогда
		РасшифровкаВидСтажаПерсУчета2014 = "Периоды иной деятельности: дополнительные выходные дни лицам, осуществляющим уход за детьми-инвалидами (статья 262 Трудового кодекса Российской Федерации)";
	КонецЕсли;
	
	Возврат РасшифровкаВидСтажаПерсУчета2014

КонецФункции 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ФАЙЛОВ СВЕДЕНИЙ

//Вовращает номер пачки документа
Функция НомерПачкиДокумента(Знач НомерДокумента) Экспорт
	
	НомерПачки = "";
	
	НомерДокумента = СокрП(НомерДокумента);
	
	//Возьмём все цифры в правой части номера
	ДлинаНомера = СтрДлина(НомерДокумента);
	Для Н=1 по ДлинаНомера цикл
		Символ = Сред(НомерДокумента,ДлинаНомера-Н+1,1); 	
		Если (Символ>="0") и (Символ<="9") Тогда
			НомерПачки = Символ+НомерПачки;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НомерПачки <> "" Тогда
		Возврат Формат(Число(Прав(НомерПачки, 5)), "ЧГ=0"); 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции	 

//Формирует имя выходного файла сведений в ПФ РФ
Функция ПолучитьИмяФайлаПФ(Документ, ГодПредставленияСведений, Знач ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		ИмяТаблицы = Документ.Метаданные().Имя;
		
		// Формируем запрос и получаем необходимые данные
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокПерсучета.Номер,
		|	ДокПерсучета.НомерПачки,
		|	ДокПерсучета.Организация,
		|	ДокПерсучета.Организация.РегистрационныйНомерПФР,
		|	ДокПерсучета.ФорматФайла КАК ФорматФайла
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК ДокПерсучета
		|ГДЕ
		|	ДокПерсучета.Ссылка = &ДокументСсылка";
		
		Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
		ВыборкаПоШапкеДокумента = Запрос.Выполнить().Выбрать();
		
		Если Не ВыборкаПоШапкеДокумента.Следующий() Тогда
			Возврат "";
		КонецЕсли;	
	КонецЕсли;
	
	НомерПачки = СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки);
	ФорматФайла = ВыборкаПоШапкеДокумента.ФорматФайла;
	
	РегНомерПФР = ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР;
	СтрНомПачки = Прав("100000"+НомерПачки,5);
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		ИмяФайла = Прав(РегНомерПФР,6) + Лев(СтрНомПачки,2) + "." + Прав(СтрНомПачки,3);
	ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда // Версия 07.00 (XML)
		РегНомерПФР = СтрЗаменить(РегНомерПФР, " ", "");
		Если СтрДлина(РегНомерПФР) <> 14 Тогда
			РегНомерПФР = Лев(РегНомерПФР, 8) + "0" + Сред(РегНомерПФР, 9)
		КонецЕсли;
		
		// имя файла без подразделений.
		ИмяФайла = "PFR-700-Y-"+Формат(ГодПредставленияСведений, "ЧГ=0")+"-ORG-"+РегНомерПФР+
		"-DCK-"+СтрНомПачки+"-DPT-000000-DCK-00000.XML";
		
	Иначе 	
		ИмяФайла = "";
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции

//Возвращает заполненную "запись-заголовок" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьЗаголовок() Экспорт
	
	СтрокаВФайл = """ЗГЛВ"",""04.00""," 
	+ """1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + """," // программа подготовки данных
	+ """" + РегламентированнаяОтчетность.РедакцияКонфигурации() + """";// Версия программы подготовки
	
	Возврат Врег(СтрокаВФайл+Символы.ПС);
	
КонецФункции

//Возвращает заполненную "запись о пачке" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОПачке(НомерПачки,ДатаСоставленияОписи,ТипСведений,ВидКорректировки,РасчетныйПериодГод="0", Категория = "", ТУ = "", СтаховаяЧасть = 0, НакопительнаяЧасть = 0 ) Экспорт
	
	СтрокаВФайл = """ПАЧК""," 
	+ НомерПачки + ","	// Номер пачки, присвоенный работодателем
	+ """ОПИСЬ""" + "," // Тип пачки
	+ """ОП61""" + ","	// Тип описи
	+ ДатаВФайл(ДатаСоставленияОписи) + "," 
	+ "1,"				// Число типов документов в пачке
	+ Формат(РасчетныйПериодГод,"ЧГ=0")// Расчетный период:	год
	+ ",""" + Категория + """"	// Код категории застрахованного лица 
	+ ","""""			// Код дополнительного тарифа
	+ ",""" + ТУ + """"	// Территориальные условия (код) 
	+ ",""" + ТипСведений + """"		// Тип сведений
	+ ",""" + ВидКорректировки + """"	// Вид корректировки
	+ ",0"				// Отчетный период квартал
	+ ",0"				// Отчетный период год
	+ ",0.00"			// Всего начислено
	+ ",0.00"			// пособие по временной нетрудоспособности
	+ "," + Формат(СтаховаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на страховую часть
	+ "," + Формат(НакопительнаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на накопительную часть
	+ ",0.00"			// сумма начисленных страховых взносов по дополнительному тарифу
	+ ",0"				// Исходящий номер СПУ:	Код подразделения	
	+ ",0";				// Исходящий номер
	
	Возврат Врег(СтрокаВФайл+Символы.ПС);
	
КонецФункции

//Возвращает заполненную "запись о типе документа" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОТипеДокумента(ТипДокумента,КоличествоДокументов) Экспорт
	
	СтрокаВФайл = """ТИПД"",""" 
	+ ТипДокумента + """," 
	+ КоличествоДокументов;
	
	Возврат Врег(СтрокаВФайл+Символы.ПС);
	
КонецФункции

//Возвращает заполненную "запись о работодателе" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОРаботодателе(Организация, ДатаАктуальности, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = &ЭтоФизЛицо
	|			ТОГДА ""0""
	|		ИНАЧЕ Организации.КПП
	|	КОНЕЦ КАК КПП,
	|	Организации.РегистрационныйНомерПФР,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.ЮрФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &Организация) КАК ФИОФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Если Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			// Для предпринимателя 
			
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Для физического лица-работодателя неверно введен ИНН!", Отказ);
			КонецЕсли;
			
			Если Выборка.Фамилия <> NULL Тогда
				ФИО = СокрЛП(Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество); 
			Иначе	
				ФИО = СокрЛП(Выборка.НаименованиеОрганизации);
			КонецЕсли; 
			
			Если РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(ФИО)=0 Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами!", Отказ);
			КонецЕсли;
			
			Если Найти(ФИО, " ")=0 Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя!", Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = ФИО;
			
		Иначе	
			
			// Для юрлица 
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ЮрЛицо ) Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Для организации неверно введен ИНН!"), Отказ);
			КонецЕсли; 
			
			Если СтрДлина(Выборка.КПП)<>9 Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Для организации неверно введен КПП!"), Отказ);
			КонецЕсли;
			
			Если СокрЛП(Выборка.НаименованиеОрганизации) = "" Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Для организации должно быть указано сокращенное наименование организации!"), Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
			
		КонецЕсли; 
		
		Если СокрЛП(Выборка.РегистрационныйНомерПФР) = "" Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Для организации не указан регистрационный номер в ПФР !"), Отказ);
		КонецЕсли; 
		
		СтрокаВФайл = """РБТД"",""РБТД"","  
		+ """" + Выборка.РегистрационныйНомерПФР + """," 
		+ Выборка.ИНН + ","  
		+ Выборка.КПП + ","  
		+ """" + СтрЗаменить(СокрЛП(Выборка.НаименованиеОрганизации), """", "'") + """";
		
		Возврат Врег(СтрокаВФайл+Символы.ПС);
		
	Иначе
		
		Отказ = Истина;
		Возврат "";  
		
	КонецЕсли;
	
	
КонецФункции

//Разбирает переданные данные о месте рождения и заполняет соответствующие поля записи, 
//выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьМестоРождения(Запись, Знач МестоРождения) Экспорт
	
	МестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(МестоРождения);
	Запись.ТипМестаРождения = ?(МестоРождения.Особое = 1, "ОСОБОЕ", "СТАНДАРТ");
	Запись.МестоРожденияНаселенныйПункт = МестоРождения.НаселенныйПункт;
	Запись.МестоРожденияРайон = МестоРождения.Район;
	Запись.МестоРожденияОбласть = МестоРождения.Область;
	Запись.МестоРожденияСтрана = МестоРождения.Страна;
	
КонецПроцедуры

//Разбирает переданные данные о документе, удостоверяющем личность, и заполняет 
//соответствующие поля записи, выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьДокумент(Запись, ТекущиеДанные) Экспорт
	
	СерииДокумента = РегламентированнаяОтчетность.РазложитьСериюДокумента(ТекущиеДанные.ДокументВид,ТекущиеДанные.ДокументСерия);
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументВид) Тогда
		Запись.ДокументВид = ТекущиеДанные.ДокументВидКодПФР;		
	иначе
		Запись.ДокументВид = "ПРОЧЕЕ";		
	КонецЕсли;	
	Запись.ДокументНаименование = ТекущиеДанные.ДокументВидКодПФР;		
	Запись.ДокументСерияРимскиеЦифры = СерииДокумента.Часть1;
	Запись.ДокументСерияРусскиеБуквы = СерииДокумента.Часть2;
	Запись.ДокументНомер = ТекущиеДанные.ДокументНомер;
	Запись.ДокументДатаВыдачи = ТекущиеДанные.ДокументДатаВыдачи;
	Запись.ДокументКемВыдан = ТекущиеДанные.ДокументКемВыдан;
	
КонецПроцедуры

Функция ИмяФайлаОбмена(Организация, Дата, ИмяДокумента = "СЗВ-М") Экспорт

	Параметры = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Организация, "РегистрационныйНомерПФР, КодОрганаПФР");
	
	Возврат "ПФР"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.РегистрационныйНомерПФР), Параметры.РегистрационныйНомерПФР, "")
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодОрганаПФР),СтрЗаменить(Параметры.КодОрганаПФР, "-", ""),"")
			+ "_" + ИмяДокумента
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + Новый УникальныйИдентификатор();

КонецФункции // ИмяФайлаОбмена()
		
#Если ТолстыйКлиентОбычноеПриложение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕДОСТАВЛЕНИЯ ПОЛЬЗОВАТЕЛЯМ ФАЙЛОВ СВЕДЕНИЙ
//

//Предоставляет сформированный файл сведений документа для просмотра
Процедура ПоказатьФайлДокумента(ДокументОбъект, ЗаголовокОкна, ИмяФайла = Неопределено) Экспорт
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) Тогда
		Возврат;
	КонецЕсли;	 
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;	 
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
	ТекстовыйДокумент.Показать(ЗаголовокОкна, ?(ИмяФайла = Неопределено, "Файл сведений", ИмяФайла));
	
КонецПроцедуры	 

//Записывает файл сведений документа в каталог, указанный пользователем
Процедура ЗаписатьФайлДокументаНаДискету(ДокументОбъект, ТекущийПользователь, ИмяФайла, Знач КодировкаФайла = Неопределено, ВыбиратьКаталог = Истина, ТекстОповещения = "") Экспорт
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбиратьКаталог  Тогда
		
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
		Длг.Каталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");
		Длг.Заголовок = "Укажите каталог";
		
		Если Длг.Выбрать() Тогда
			ИмяФайла = Длг.Каталог+"\" + ИмяФайла;
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
			Если КодировкаФайла = Неопределено Тогда
				КодировкаФайла = "windows-1251";
			КонецЕсли;
			ТекстовыйДокумент.Записать(ИмяФайла,КодировкаФайла);
			Если Не ЗначениеЗаполнено(ТекстОповещения) Тогда
				ТекстОповещения = "Файл-пачка записан под именем: "
			КонецЕсли;
			Предупреждение(ТекстОповещения + ИмяФайла);
		КонецЕсли;
		
	Иначе
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
		Если КодировкаФайла = Неопределено Тогда
			КодировкаФайла = "windows-1251";
		КонецЕсли;
		ТекстовыйДокумент.Записать(ИмяФайла,КодировкаФайла);
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛА ИНДИВИДУАЛЬНЫХ СВЕДЕНИЙ ПФР XML ФОРМАТ 7.0 


/////////////////////////////////////
// XML STREAM
/////////////////////////////////////

// Создает и возвращает объект ЗаписьXML, для создания XML документа
Функция СоздатьПотокXML(ИмяФайла = Неопределено, Кодировка = "windows-1251") Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	
	ПотокXML.УстановитьСтроку(Кодировка);
	ПотокXML.Отступ = Истина;
	Если ИмяФайла <> Неопределено Тогда
		ПотокXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КонецЕсли;
	
	ПотокXML.ЗаписатьОбъявлениеXML();
	
	Возврат ПотокXML;
	
КонецФункции

// Сохраняет документ XML  на диск и закрывает запись XML
Функция ЗаписатьПотокXML(ПотокXML) Экспорт
	
	Возврат ПотокXML.Закрыть();
	
КонецФункции

/////////////////////////////////////
// XML TREE
/////////////////////////////////////

// Возвращает Истина если строка дерева представляет атрибуты XML узла
Функция СтрокаСАтрибутами(СтрокаДереваXML) Экспорт
	
	Возврат СтрокаДереваXML.Имя = "АтрибутыXMLУзла";
	
КонецФункции

// Ищет и возвращает атрибут XML узла по имени
Функция НайтиАтрибуты(СтрокаДереваXML) Экспорт
	
	Возврат СтрокаДереваXML.Строки.Найти("АтрибутыXMLУзла", "Имя", Ложь);
	
КонецФункции


// КОМПОЗИЦИЯ ДЕРЕВА

// Создает объект дерево значений, представляющее XML файл
Функция СоздатьДеревоXML() Экспорт
	
	НовоеДеревоXML = Новый ДеревоЗначений;
	НовоеДеревоXML.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	НовоеДеревоXML.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат НовоеДеревоXML;
	
КонецФункции

// Добавляет узел в дерево XML, устанавливая его атрибуты
Функция ДобавитьУзелВДеревоXML(Ветка, Имя, Значение, СписокАтрибутов = Неопределено) Экспорт
	
	НовыйУзел = Ветка.Строки.Добавить();
	НовыйУзел.Имя = Имя;
	НовыйУзел.Значение = Значение;
	
	Если СписокАтрибутов <> Неопределено Тогда
		ВеткаАтрибутов = НовыйУзел.Строки.Добавить();
		ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
		ВеткаАтрибутов.Значение = Неопределено;
		
		Для Каждого ЭлементСпискаАтрибутов Из СписокАтрибутов Цикл
			ЛистАтрибутов = ВеткаАтрибутов.Строки.Добавить();
			ЛистАтрибутов.Имя = ЭлементСпискаАтрибутов.Ключ;
			// доделать до правильного преобразования
			ЛистАтрибутов.Значение = Строка(ЭлементСпискаАтрибутов.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйУзел;
	
КонецФункции

// ИМПОРТ / ЭКСПОРТ ДЕРЕВА

// записывает значения из дерева значение в поток связянный с файлом XML
Процедура ЗаписатьУзелДереваXMLВXMLдляПФР(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = Неопределено, URIПространстваИмен = Неопределено)
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			
			ПотокXML.ЗаписатьНачалоЭлемента(СтрЗаменить(СтрокаДерева.Имя,"__","-"));
			Если ПрефиксПространстваИмен <> Неопределено И URIПространстваИмен <> Неопределено Тогда
				ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			КонецЕсли;
			СписокАтрибутов = НайтиАтрибуты(СтрокаДерева);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(?(СтрокаДерева.Значение = "00.00.0000", "", СтрокаДерева.Значение));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист из СтрокаДерева.Строки Цикл
		Если СтрокаСАтрибутами(Лист) Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваXMLВXMLдляПФР(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// добавляет реквизит в дерево значений, представляющее XML файл
Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей) Экспорт
	
	ПустаяДата = Дата(1,1,1);
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		Запись = ЭлементНабора.Значение;
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			// для проверок
			//Запись.Размер 
			//Запись.РазрядностьДробнойЧасти
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"))
			
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			// для проверок
			//Запись.Размер 
			
			Если ЗначениеЗаполнено(Запись.Размер) Тогда
				ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Лев(СокрЛП(Запись.Значение), Запись.Размер))
			Иначе
				ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, СокрЛП(Запись.Значение))
			КонецЕсли;
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Запись.Значение = ПустаяДата,"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")))
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен;
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВеткаСтрокиТЗ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						// для проверок
						//Поле.Размер, Поле.РазрядностьДробнойЧасти
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						// для проверок
						//Поле.Размер
						Если ЗначениеЗаполнено(Поле.Размер) Тогда
							Данные = Лев(СокрЛП(Данные), Поле.Размер)
						КонецЕсли;
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Данные = ПустаяДата Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					ДобавитьУзелВДеревоXML(ВеткаСтрокиТЗ, Поле.ИмяПоля, Данные)
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда	
			
			ВеткаСтруктуры = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					// для проверок
					//Поле.Размер, Поле.РазрядностьДробнойЧасти
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					// для проверок
					//Поле.Размер
					Если ЗначениеЗаполнено(Поле.Размер) Тогда
						Данные = Лев(СокрЛП(Данные), Поле.Размер)
					КонецЕсли;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Данные = ПустаяДата Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				
				ДобавитьУзелВДеревоXML(ВеткаСтруктуры, Поле.ИмяПоля, Данные)
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ""), Запись.Значение)
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

// Возвращаент копию переданной структуры данных.
Функция СкопироватьСтруктуруДанных(КоллекцияИсходная) Экспорт
	
	ТипЗначения = ТипЗнч(КоллекцияИсходная);
	Если ТипЗначения=Тип("Структура") Тогда
		
		КоллекцияКопия=Новый Структура;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,СкопироватьСтруктуруДанных(Элемент.Значение));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия; 
		
	ИначеЕсли ТипЗначения=Тип("ТаблицаЗначений") Тогда
		
		Возврат КоллекцияИсходная.Скопировать();
		
	ИначеЕсли ТипЗначения=Тип("Массив") Тогда
		
		КоллекцияКопия=Новый Массив;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Добавить(СкопироватьСтруктуруДанных(Элемент));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	ИначеЕсли ТипЗначения=Тип("Соответствие") Тогда
		
		КоллекцияКопия=Новый Соответствие;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,СкопироватьСтруктуруДанных(Элемент.Значение));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	Иначе
		
		Возврат КоллекцияИсходная
		
	КонецЕсли;
	
КонецФункции

//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей
Функция ПолучитьФорматЗаписиПФР(Знач МакетФормата, Знач ИмяЗаписи) 
	
	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен");
	
	ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);
	
	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 4).Текст);
		Если ИмяПоля <> "" Тогда
			
			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРЕГ(СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст));
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" Тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 Тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			//Признак обязательности элемента хранится в 5-й колонке	
			НовоеПоле.ЭлементНеОбязателен = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст) = "Не обязательно";
			
		КонецЕсли;	 
		
	КонецЦикла;
	
	Возврат ТаблицаФормаЗаписи;
КонецФункции	

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа
Функция ЗагрузитьФорматНабораЗаписейдляПФР(Знач МакетФормата, Знач ИмяНабораЗаписей, НомерВыбираемогоЭлемента = 1) Экспорт
	
	ФорматНабора = Новый Структура();
	
	ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
	
	Для НСтр = 1 По ОбластьНабораЗаписей.ВысотаТаблицы Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ЭлементНеОбязателен");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 4).Текст);
		
		// тип данных хранится во 2 колонке
		ТипДанных = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 2).Текст));
		
		//Признак обязательности элемента хранится в 5-й колонке	
		ЭлементНеОбязателен = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 5).Текст)) = "НЕ ОБЯЗАТЕЛЬНО";
		
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ТипДанных = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ТипДанных, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ПозицияРазделителя = Найти(ИмяЗаписи,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ИмяЗаписи = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ЭлементНеОбязателен = ЭлементНеОбязателен;
		// размер хранится в 3 колонке
		СтрРазмерПоля =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" Тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" Тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 Тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" Тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" Тогда
			
			ФорматЗаписи.Значение = Дата('00010101');
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" Тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиПФР(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти);
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(Поле.Размер);
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
				КонецЕсли; 
				ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля );
				
			КонецЦикла; 
			
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" Тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				СтрРазмерПоля = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СтрРазмерПоля, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиПФР(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
				Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяНабора = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ИмяНабора, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ИмяНабора, НомерВыбираемогоЭлемента);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
	
КонецФункции // ЗагрузитьФорматНабораЗаписей()

// Процедура устанавливает заголовочные параметры файла выгрузки XML формата 07.00
//
Процедура ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ИмяФайла) Экспорт
	
	// добавляем реквизит ИмяФайла
	НаборЗаписейИмяФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ИмяФайла");
	НаборЗаписейИмяФайла.ИмяФайла.Значение = ИмяФайла;
	ДобавитьИнформациюВДерево(УзелПФР, НаборЗаписейИмяФайла);
	
	// Добавляем Реквизит заголовок файла
	НаборЗаписейЗаголовокФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ЗаголовокФайла");
	НаборЗаписейПрограммаПодготовкиДанных = НаборЗаписейЗаголовокФайла.ПрограммаПодготовкиДанных.Значение;
	НаборЗаписейПрограммаПодготовкиДанных.Версия = РегламентированнаяОтчетность.РедакцияКонфигурации();
	НаборЗаписейПрограммаПодготовкиДанных.НазваниеПрограммы = "1С:" + РегламентированнаяОтчетность.ИДКонфигурации();
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПФР, "ЗаголовокФайла", ""), НаборЗаписейЗаголовокФайла); 
	
КонецПроцедуры // ЗаполнитьИмяИЗаголовокФайла()

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, УзелПачкаСЗВ4 = Неопределено, НаборЗаписейИтогоСуммаВзносов = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ", ЗаменятьБуквуЕ = Ложь) Экспорт
	
	// устанавливаем значение номер пачки
	
	НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ТегВходящейОписи, 1);
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = СокрЛП(НомерПачки);
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
	
	ЗаполнитьСоставительПачки(НаборЗаписейВходящаяОпись.СоставительПачки.Значение, ВыборкаПоШапкеДокумента, ЗаменятьБуквуЕ);
	ЗаполнитьСоставДокументов(НаборЗаписейВходящаяОпись, ТипДокумента, КоличествоДокументов);
	
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если ТипДокумента = "ИС_СЗВ-4-1" Или ТипДокумента = "ИС_СЗВ-4-2" Тогда
		
		НаборЗаписейПачкаСЗВ4 = НаборЗаписейВходящаяОпись.ПачкаСЗВ4.Значение;
		НаборЗаписейПачкаСЗВ4.РасчетныйПериод.Значение = ВыборкаПоШапкеДокумента.Год;
		НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
		Если ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "НР" Тогда
			НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "НАЕМ/РАБОТНИК";
		ИначеЕсли ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "СХ" Тогда
			НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "С/Х ОРГАНИЗАЦИЯ";
		КонецЕсли;
		
		Если ТипДокумента = "ИС_СЗВ-4-1" Тогда
			НаборЗаписейПачкаСЗВ4.Удалить("ТерриториальныеУсловия");
		Иначе
			НаборЗаписейПачкаСЗВ4.ТерриториальныеУсловия.Значение.ОснованиеТУ = СокрЛП(ВыборкаПоШапкеДокумента.ТерриториальныеУсловияКод);
		КонецЕсли;
		
		НаборЗаписейПачкаСЗВ4.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		Если ВыборкаПоШапкеДокумента.ВидКорректировки = "КОРР" Тогда
			НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "КОРРЕКТИРУЮЩАЯ";
		ИначеЕсли ВыборкаПоШапкеДокумента.ВидКорректировки = "ОТМН" Тогда
			НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "ОТМЕНЯЮЩАЯ";
		Иначе
			НаборЗаписейПачкаСЗВ4.Удалить("ВидКорректировки");
		КонецЕсли;
		
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		УзелВходящаяОпись = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,"");
		НаборЗаписейИтогоСуммаВзносов = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СтраховыеВзносы");
		НаборЗаписейПачкаСЗВ4.Удалить("ИтогоСуммаВзносов");
		
		ДобавитьИнформациюВДерево(УзелВходящаяОпись, НаборЗаписейВходящаяОпись);
		УзелПачкаСЗВ4 = УзелВходящаяОпись.Строки[6];
		
	ИначеЕсли ТипДокумента = "РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ" Тогда
		
		РеестрДСВ = НаборЗаписейВходящаяОпись.РеестрДСВ.Значение;
		
		ЗаполнитьЗначенияСвойств(РеестрДСВ.ПлатежноеПоручение.Значение,ВыборкапоШапкеДокумента);
		РеестрДСВ.Год.Значение = ВыборкапоШапкеДокумента.Год;
		РеестрДСВ.КоличествоСтрок.Значение = ВыборкапоШапкеДокумента.КоличествоСтрок;
		РеестрДСВ.СуммаДСВРаботника.Значение = ВыборкапоШапкеДокумента.СуммаДСВРаботника;
		РеестрДСВ.СуммаДСВРаботодателя.Значение = ВыборкапоШапкеДокумента.СуммаДСВРаботодателя;
		РеестрДСВ.СуммаДСВОбщая.Значение = ВыборкапоШапкеДокумента.СуммаДСВОбщая;
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
	Иначе
		
		НаборЗаписейВходящаяОпись.Удалить("ПачкаСЗВ4");
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
		
	КонецЕсли;
	
	
	Возврат УзелПачкаВходящихДокументов;
	
КонецФункции // ЗаполнитьНаборЗаписейВходящаяОпись()

Процедура ЗаменитьБуквуЁ(РедактируемаяСтрока, НазваниеРеквизита, ВыводитьПредупреждение = Истина) Экспорт
	Если Найти(ВРег(РедактируемаяСтрока), "Ё") > 0 Тогда
		Если ВыводитьПредупреждение Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке("В реквизите """ + НазваниеРеквизита + """ (" + РедактируемаяСтрока +") буква Ё заменена на Е.");
		КонецЕсли;	
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "Ё", "Е");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "ё", "е");
		
	КонецЕсли;
КонецПроцедуры // ЗаменитьБуквуЁ()

// Процедура заполняет реквизиты файла - сведения об организации
//
Процедура ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкапоШапкеДокумента, ЗаменятьБуквуЕ = Ложь) Экспорт
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НаборЗаписейСоставительПачки.КодЕГРИП.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
		НаборЗаписейСоставительПачки.Удалить("КодЕГРЮЛ");
	Иначе
		НаборЗаписейСоставительПачки.Удалить("КодЕГРИП");
		НаборЗаписейСоставительПачки.КодЕГРЮЛ.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
	КонецЕсли;
	
	НаборЗаписейСоставительПачки.Форма.Значение = ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ, 40));
	Если ЗаменятьБуквуЕ Тогда
		ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.Форма.Значение, "Организационно-правовая форма по ОКОПФ");
	КонецЕсли;	
	
	НомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР, " ", "");
	Если СтрДлина(НомерПФР) <> 14 Тогда
		НомерПФР = Лев(НомерПФР, 8) + "0" + Сред(НомерПФР, 9)
	КонецЕсли;
	НаборЗаписейСоставительПачки.РегистрационныйНомер.Значение = НомерПФР;
	НаборЗаписейСоставительПачки.Удалить("ДатаВыдачиЛицензии");
	НаборЗаписейСоставительПачки.Удалить("НомерЛицензии");
	
	НаборЗаписейНалоговыйНомер = НаборЗаписейСоставительПачки.НалоговыйНомер.Значение;
	НаборЗаписейНалоговыйНомер.ИНН = ВыборкаПоШапкеДокумента.ОрганизацияИНН;
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		НаборЗаписейНалоговыйНомер.Удалить("КПП");
		ТаблицаПолей = НаборЗаписейСоставительПачки.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	Иначе
		НаборЗаписейНалоговыйНомер.КПП = ВыборкаПоШапкеДокумента.ОрганизацияКПП;
	КонецЕсли;
	
	НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение = СокрЛП(ВРЕГ(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеПолное,НаборЗаписейСоставительПачки.НаименованиеОрганизации.Размер)));
	Если ЗаменятьБуквуЕ Тогда
		ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение, "Наименование организации");
	КонецЕсли;	
	НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение = СокрЛП(ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеСокращенное, НаборЗаписейСоставительПачки.НаименованиеКраткое.Размер)));
	Если ЗаменятьБуквуЕ Тогда 
		ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение, "Краткое наименование организации");
	КонецЕсли;	
	
	НаборЗаписейСоставительПачки.Удалить("Подразделение");
	
	
КонецПроцедуры // ЗаполнитьСоставительПачки()
// Процедура заполняет реквизиты файла - сведения об организации
//
Процедура ЗаполнитьСоставДокументов(НаборЗаписейВходящаяОпись, ТипДокумента, КоличествоДокументов) Экспорт
	
	НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
	НаборЗаписейСоставДокументов.Количество.Значение = 1;
	
	НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
	НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
	НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
	
КонецПроцедуры // ЗаполнитьСоставительПачки()
// Процедура ищет адрес в справочнике Адресный классификатор, и если
// не находит указанный регион, район, город, населенный пункт, то возвращает
// Отказ = Истина, в текстеошибки возвращается текст ошибки.
// Если не найдена только улица, то возвращается только ТекстОшибки, 
// значение переменной отказ не изменяется.
Функция ПроверитьАдресПоКЛАДР(АдресСписком) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамРегион", АдресСписком.Регион);
	Запрос.УстановитьПараметр("парамРайон", АдресСписком.Район);
	Запрос.УстановитьПараметр("парамГород", АдресСписком.Город);
	Запрос.УстановитьПараметр("парамНаселенныйПункт", АдресСписком.НаселенныйПункт);
	Запрос.УстановитьПараметр("парамУлица", АдресСписком.Улица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НаселенныйПункт.КодРайонаВКоде = 0
	|				И &ПарамРайон <> """"
	|			ТОГДА "" район""
	|		КОГДА НаселенныйПункт.КодГородаВКоде = 0
	|				И &ПарамГород <> """"
	|			ТОГДА "" город""
	|		КОГДА НаселенныйПункт.КодНаселенногоПунктаВКоде = 0
	|				И &ПарамНаселенныйПункт <> """"
	|			ТОГДА "" населённый пункт""
	|		КОГДА ЕСТЬNULL(АдресныйКлассификатор.КодУлицыВКоде, 0) = 0
	|				И &парамУлица <> """"
	|			ТОГДА ""а улица""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СообщениеОбОшибке
	|ИЗ
	|	(ВЫБРАТЬ
	|		Город.КодРегионаВКоде КАК КодРегионаВКоде,
	|		Город.КодРайонаВКоде КАК КодРайонаВКоде,
	|		Город.КодГородаВКоде КАК КодГородаВКоде,
	|		ЕСТЬNULL(АдресныйКлассификатор.КодНаселенногоПунктаВКоде, 0) КАК КодНаселенногоПунктаВКоде
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Район.КодРегионаВКоде КАК КодРегионаВКоде,
	|			Район.КодРайонаВКоде КАК КодРайонаВКоде,
	|			ЕСТЬNULL(АДресныйКлассификатор.КодГородаВКоде, 0) КАК КодГородаВКоде
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Регион.КодРегионаВКоде КАК КодРегионаВКоде,
	|				ЕСТЬNULL(АдресныйКлассификатор.КодРайонаВКоде, 0) КАК КодРайонаВКоде
	|			ИЗ
	|				(ВЫБРАТЬ
	|					АдресныйКлассификатор.КодРегионаВКоде КАК КодРегионаВКоде
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|				ГДЕ
	|					АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРегион
	|					И АдресныйКлассификатор.ТипАдресногоЭлемента = 1) КАК Регион
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|					ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРайон)
	|						И (АдресныйКлассификатор.КодРегионаВКоде = Регион.КодРегионаВКоде)
	|						И (АдресныйКлассификатор.ТипАдресногоЭлемента = 2)) КАК Район
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АДресныйКлассификатор
	|				ПО (АДресныйКлассификатор.Наименование + "" "" + АДресныйКлассификатор.Сокращение = &парамГород)
	|					И (АДресныйКлассификатор.КодРегионаВКоде = Район.КодРегионаВКоде)
	|					И (АДресныйКлассификатор.КодРайонаВКоде = Район.КодРайонаВКоде)
	|					И (АДресныйКлассификатор.ТипАдресногоЭлемента = 3)) КАК Город
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|			ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамНаселенныйПункт)
	|				И (АдресныйКлассификатор.КодРегионаВКоде = Город.КодРегионаВКоде)
	|				И (АдресныйКлассификатор.КодРайонаВКоде = Город.КодРайонаВКоде)
	|				И (АдресныйКлассификатор.КодГородаВКоде = Город.КодГородаВКоде)
	|				И (АдресныйКлассификатор.ТипАдресногоЭлемента = 4)) КАК НаселенныйПункт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамУлица)
	|			И (АдресныйКлассификатор.КодРегионаВКоде = НаселенныйПункт.КодРегионаВКоде)
	|			И (АдресныйКлассификатор.КодРайонаВКоде = НаселенныйПункт.КодРайонаВКоде)
	|			И (АдресныйКлассификатор.КодГородаВКоде = НаселенныйПункт.КодГородаВКоде)
	|			И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде)
	|			И (АдресныйКлассификатор.ТипАдресногоЭлемента = 5)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеОбОшибке";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ТекстОшибки = "";
	Если ВыборкаЗапроса.Следующий() Тогда
		ТекстОшибки = ВыборкаЗапроса.СообщениеОбОшибке;
	Иначе
		ТекстОшибки = " регион";
	КонецЕсли;
	
	Возврат ТекстОшибки
КонецФункции // ПроверитьАдресПоКЛАДР()

// Процедура заполняет адрес, представленный в структуре для записи в XML файл 
// входными данынми является строка адреса
//  СписокСтран - Список стран и их кодов
// СписокСокращений1-5 - сокращения для определенного реквизита адреса
// ФорматИностранныйАдрес, ФорматНеструктурированныйАдрес - форматы данных для не Российских адресов.
// ВыходноеЗначение: НаборЗаписейАдрес
Процедура ЗаполнитьАдрес(НаборЗаписейАдрес, СтрокаАдрес, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстПредупреждения) Экспорт
	АдресСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВРег(СтрокаАдрес));	
	ЗаПределамиРФ = Ложь;
	АдресСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
	// ЗаПределамиРФ может быть неопределно, поэтому сравниваем на значение
	Если ЗаПределамиРФ = Истина Тогда
		Если АдресСписком.Страна = "РОССИЯ" Тогда
			// Неструктурированный адрес
			НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
			НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
			НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
			НаборЗаписейАдрес.Удалить("Индекс");
			ТекстПредупреждения = " сохранен как неструктурированный адрес."
		Иначе
			// Иностранный адрес
			
			НазваниеСтраны = СокрЛП(АдресСписком.Страна);
			КодСтраны = СписокСтран.Получить(НазваниеСтраны);
			Если КодСтраны = Неопределено Тогда
				// не удалось получить страну, запишем как неструктурированный адрес
				НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
				НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
				НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = " сохранен как неструктурированный адрес."
			Иначе
				НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматИностранныйАдрес);
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.КодСтраны = КодСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.НазваниеСтраны = НазваниеСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
				НаборЗаписейАдрес.ТипАдреса.Значение = "ИНОСТРАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = " сохранен как иностранный адрес."
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Российский адрес
		НаборЗаписейАдрес.Индекс.Значение = АдресСписком.Индекс;
		НаборЗаписейАдрес.ТипАдреса.Значение = "РОССИЙСКИЙ";
		
		НаборЗаписейРоссийскийАдрес = НаборЗаписейАдрес.РоссийскийАдрес.Значение;
		НаборЗаписейРоссийскийАдрес.СостояниеАдреса.Значение = "ПРАВИЛЬНЫЙ";
		
		НаборЗаписейРоссийскийАдрес.Регион.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Регион, НаборЗаписейРоссийскийАдрес.Регион.Значение.Сокращение);
		
		НаборЗаписейРоссийскийАдрес.Район.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Район, НаборЗаписейРоссийскийАдрес.Район.Значение.Сокращение);
		
		НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Город, НаборЗаписейРоссийскийАдрес.Город.Значение.Сокращение);		
		НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.НаселенныйПункт, НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.Сокращение);
		НаборЗаписейРоссийскийАдрес.Улица.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Улица, НаборЗаписейРоссийскийАдрес.Улица.Значение.Сокращение);
		
		Если Не ПустаяСтрока(АдресСписком.Дом) Тогда
			НаборЗаписейРоссийскийАдрес.Дом.Значение.Номер = АдресСписком.Дом;
			НаборЗаписейРоссийскийАдрес.Дом.Значение.Сокращение = "Д";
		КонецЕсли;
		
		Если Не ПустаяСтрока(АдресСписком.Корпус) Тогда
			
			Если АдресСписком.Свойство("ТипКорпуса") И (АдресСписком.ТипКорпуса = Перечисления.ТипыКорпусов.Строение ИЛИ ВРег(АдресСписком.ТипКорпуса) = "СТРОЕНИЕ") Тогда
				
				Если ВРег(Лев(АдресСписком.Корпус,3)) = "СТР" Тогда
				
					НаборЗаписейРоссийскийАдрес.Корпус.Значение.Номер = АдресСписком.Корпус;
				
				Иначе
				
					НаборЗаписейРоссийскийАдрес.Корпус.Значение.Номер = "СТР" + АдресСписком.Корпус;
				
				КонецЕсли; 
			
			Иначе
			
				НаборЗаписейРоссийскийАдрес.Корпус.Значение.Номер = АдресСписком.Корпус;
			
			КонецЕсли; 
			
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Сокращение = "КОРП";
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(АдресСписком.Квартира) Тогда
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Номер = АдресСписком.Квартира;
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Сокращение = "КВ";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПФРXMLЗаполнитьАдрес()

// Функция преобразует дерево значений в котором представлен XML файл, в текст
//
Функция ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки, АтрибутыПачкиВходящихДокументов = Неопределено, Кодировка = "windows-1251") Экспорт
	
	// Преобразуем дерево в строковое описание XML
	
	ПотокВыгрузкиXML = СоздатьПотокXML(, Кодировка);
	
	ЗаписатьУзелДереваXMLВXMLдляПФР(ДеревоВыгрузки, ПотокВыгрузкиXML);
	
	// получаем содержимое файла в виде строки
	
	ТекстФайла = СтрЗаменить(ЗаписатьПотокXML(ПотокВыгрузкиXML),"<ПачкаВходящихДокументов>",
	"<ПачкаВходящихДокументов " + ?(АтрибутыПачкиВходящихДокументов = Неопределено, "Окружение=""В составе файла"" Стадия=""До обработки""", АтрибутыПачкиВходящихДокументов) + ">");
	
	Возврат ТекстФайла;
	
КонецФункции // ПолучитьТекстФайлаИзДереваЗначений


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТОВ ПО СОХРАНЕННОМУ XML ФАЙЛУ
//

// Функция возвращает значение строки дерева значений из колонки "Имя"
Функция ИзвлечьДанное(СтрокаДерева,Имя) Экспорт 
	СтрокаДанных = СтрокаДерева.Строки.Найти(Имя,"Имя",Истина);
	Если СтрокаДанных = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаДанных.Значение;
	КонецЕсли;
КонецФункции

// Функция возращает представление адреса полученное из строк дерева значений, 
// представляющих XML ПФР файл выгрузки формат 07.00
Функция ПредставлениеАдресаДляПФР(Знач СтрокаДереваАдрес) Экспорт
	Адрес = "";
	ТипАдреса = ИзвлечьДанное(СтрокаДереваАдрес, "ТипАДреса");
	Индекс = ИзвлечьДанное(СтрокаДереваАдрес, "Индекс");
	СтрокаДереваРоссийскийАдрес = СтрокаДереваАдрес.Строки.Найти("РоссийскийАдрес");
	СтрокаДереваИностранныйАдрес = СтрокаДереваАдрес.Строки.Найти("ИностранныйАдрес");
	СтрокаДереваНеструктурированныйАдрес = СтрокаДереваАдрес.Строки.Найти("НеструктурированныйАдрес");
	Если СтрокаДереваРоссийскийАдрес <> Неопределено Тогда
		СтрокаДереваРегион = СтрокаДереваРоссийскийАдрес.Строки.Найти("Регион");
		Если СтрокаДереваРегион <> Неопределено Тогда
			Регион = ИзвлечьДанное(СтрокаДереваРегион, "ГеографическоеНазвание");
			СокращениеРегион =  ИзвлечьДанное(СтрокаДереваРегион, "Сокращение");
		КонецЕсли;
		СтрокаДереваРайон = СтрокаДереваРоссийскийАдрес.Строки.Найти("Район");
		Если СтрокаДереваРайон <> Неопределено Тогда
			Район = ИзвлечьДанное(СтрокаДереваРайон, "ГеографическоеНазвание");
			СокращениеРайон = ИзвлечьДанное(СтрокаДереваРайон, "Сокращение");
		КонецЕсли;
		СтрокаДереваГород = СтрокаДереваРоссийскийАдрес.Строки.Найти("Город");
		Если СтрокаДереваГород <> Неопределено Тогда
			Город = ИзвлечьДанное(СтрокаДереваГород, "ГеографическоеНазвание");
			СокращениеГород = ИзвлечьДанное(СтрокаДереваГород, "Сокращение");
		КонецЕсли;
		СтрокаДереваНаселенныйПункт = СтрокаДереваРоссийскийАдрес.Строки.Найти("НаселенныйПункт");
		Если СтрокаДереваНаселенныйПункт <> Неопределено Тогда
			НаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "ГеографическоеНазвание");
			СокращениеНаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "Сокращение");
		КонецЕсли;
		СтрокаДереваУлица = СтрокаДереваРоссийскийАдрес.Строки.Найти("Улица");
		Если СтрокаДереваУлица <> Неопределено Тогда
			Улица = ИзвлечьДанное(СтрокаДереваУлица, "ГеографическоеНазвание");
			СокращениеУлица = ИзвлечьДанное(СтрокаДереваУлица, "Сокращение");
		КонецЕсли;
		СтрокаДереваДом = СтрокаДереваРоссийскийАдрес.Строки.Найти("Дом");
		Если СтрокаДереваДом <> Неопределено Тогда
			СокращениеДом = ИзвлечьДанное(СтрокаДереваДом, "Сокращение");
			Дом = ИзвлечьДанное(СтрокаДереваДом, "Номер");
		КонецЕсли;
		СтрокаДереваКорпус = СтрокаДереваРоссийскийАдрес.Строки.Найти("Корпус");
		Если СтрокаДереваКорпус <> Неопределено Тогда
			СокращениеКорпус = ИзвлечьДанное(СтрокаДереваКорпус, "Сокращение");
			Корпус = ИзвлечьДанное(СтрокаДереваКорпус, "Номер");
		КонецЕсли;
		СтрокаДереваКвартира = СтрокаДереваРоссийскийАдрес.Строки.Найти("Квартира");
		Если СтрокаДереваКвартира <> Неопределено Тогда
			СокращениеКвартира = ИзвлечьДанное(СтрокаДереваКвартира, "Сокращение");
			Квартира = ИзвлечьДанное(СтрокаДереваКвартира, "Номер");
		КонецЕсли;
		Адрес =  "индекс " + ?(ЗначениеЗаполнено(Индекс), Индекс, "      ") + " адрес " +
		ВРег(Сред(?(ЗначениеЗаполнено(Регион), ", "+Регион+" "+СокращениеРегион, "")+
		?(ЗначениеЗаполнено(Район), ", "+Район+" "+СокращениеРайон, "")+
		?(ЗначениеЗаполнено(Город), ", "+Город+" "+СокращениеГород, "")+
		?(ЗначениеЗаполнено(НаселенныйПункт), ", "+НаселенныйПункт+" "+СокращениеНаселенныйПункт, "")+
		?(ЗначениеЗаполнено(Улица), ", "+Улица+" "+СокращениеУлица, "")+
		?(ЗначениеЗаполнено(Дом), ", "+СокращениеДом+" "+Дом, "")+
		?(ЗначениеЗаполнено(Корпус), ", "+СокращениеКорпус+" "+Корпус, "")+
		?(ЗначениеЗаполнено(Квартира), ", "+СокращениеКвартира+" "+Квартира, ""), 2));

		
	ИначеЕсли СтрокаДереваИностранныйАдрес <> Неопределено Тогда
		КодСтраны = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "КодСтраны");
		НазваниеСтраны = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "НазваниеСтраны");
		АдресВСтране = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "Адрес");
		Адрес = ?(ЗначениеЗаполнено(Индекс),", "+Индекс, "")+
		?(ЗначениеЗаполнено(НазваниеСтраны),", "+НазваниеСтраны, "")+
		?(ЗначениеЗаполнено(АдресВСтране),", "+АдресВСтране, "");
		Адрес = "индекс        адрес " + ВРег(Адрес);
		
	ИначеЕсли СтрокаДереваНеструктурированныйАдрес <> Неопределено Тогда
		Адрес = ИзвлечьДанное(СтрокаДереваНеструктурированныйАдрес, "Адрес");
		Адрес = "индекс        адрес ," + ВРег(Адрес);
		
	КонецЕсли;
	Возврат Адрес;
КонецФункции

// Функция возвращает представление даты полученной из XML файла.
// СтрДата - дата в формате XML ПФР 07.00
Функция ДатаXMLВОтчет(СтрДата, РазвернутоеПредставление = Истина) Экспорт
	Если СтрДата = "" Тогда
		ВозвращаемаяДата = Дата(1, 1, 1);
	Иначе
		МассивПодстрок = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СтрДата, ".");
		Если Число(МассивПодстрок[0]) = 0 Тогда
			МассивПодстрок[0] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[1]) = 0 Тогда
			МассивПодстрок[1] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[2]) = 0 Тогда
			МассивПодстрок[2] = "1";
		КонецЕсли;
		ВозвращаемаяДата = Дата(МассивПодстрок[2], МассивПодстрок[1], МассивПодстрок[0]);
	КонецЕсли;
	Если РазвернутоеПредставление Тогда
		Возврат ДатаВОтчет(ВозвращаемаяДата);
	Иначе
		Возврат ВозвращаемаяДата;
	КонецЕсли;
	
КонецФункции

// Функция возвращает дерево значений, заполненное из текста XML файла.
Функция ПреобразоватьВДеревоXML(СтрокаXML) Экспорт
	
	НовоеДеревоXML = СоздатьДеревоXML();
	
	Возврат ДобавитьВДеревоXML(НовоеДеревоXML, СтрокаXML);
	
КонецФункции

// Функция производит формирование древовидной структуры,
// начиная с переданной в ВеткаДерева ветки дерева значений
// на основе описания XML, переданного в СтрокаXML
Функция ДобавитьВДеревоXML(ВеткаДерева, СтрокаXML)
	
	XMLПоток = Новый ЧтениеXML();
	
	Попытка
		XMLПоток.УстановитьСтроку(СтрокаXML);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ДеревоФайла = Новый ДеревоЗначений;
	ДеревоФайла.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	ДеревоФайла.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	ТекущаяВетка = Неопределено;
	
	Попытка
		
		Пока XMLПоток.Прочитать() Цикл
			Если XMLПоток.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекущаяВетка = СоздатьУзелНаВетке(ТекущаяВетка, ДеревоФайла);
				ТекущаяВетка.Имя = XMLПоток.Имя;
				
				ВеткаАтрибутов = Неопределено;
				
				Пока XMLПоток.ПрочитатьАтрибут() Цикл
					
					Если ВеткаАтрибутов = Неопределено Тогда
						ВеткаАтрибутов = ТекущаяВетка.Строки.Добавить();
						ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
						ВеткаАтрибутов.Значение = Неопределено;
					КонецЕсли;
					
					АтрибутВДереве = СоздатьУзелНаВетке(ВеткаАтрибутов, ДеревоФайла);
					АтрибутВДереве.Имя = XMLПоток.Имя;
					АтрибутВДереве.Значение =  XMLПоток.Значение;
				КонецЦикла;
				
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.Текст Тогда
				ТекущаяВетка.Значение = XMLПоток.Значение;
				
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				ТекущаяВетка = ТекущаяВетка.Родитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	СкопироватьВетку(ВеткаДерева, ДеревоФайла);
	
	Возврат ВеткаДерева;
	
КонецФункции

// Функция копирует ветку дерева значений
Процедура СкопироватьВетку(Приемник, Источник) 
	
	Если ТипЗнч(Источник) = Тип("СтрокаДереваЗначений") Тогда // есть откуда скопировать
		
		Если ТипЗнч(Приемник) = Тип("СтрокаДереваЗначений") Тогда // некуда скопировать
			СтрокаПриемника =  Приемник;
			
		Иначе
			СтрокаПриемника = Приемник.Строки.Добавить();
			
		КонецЕсли;
		
		СтрокаПриемника.Имя = Источник.Имя;
		СтрокаПриемника.Значение = Источник.Значение;
		
	КонецЕсли;
	
	Для каждого ЛистИсточника Из Источник.Строки Цикл
		ЛистПриемника = Приемник.Строки.Добавить();
		СкопироватьВетку(ЛистПриемника, ЛистИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает и возвращает новую строку в дереве значений
Функция СоздатьУзелНаВетке(ТекущаяВетка, ДеревоОбработки) 
	
	Если ТекущаяВетка = Неопределено Тогда
		Возврат ДеревоОбработки.Строки.Добавить();
	Иначе
		Возврат ТекущаяВетка.Строки.Добавить();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ПЕЧАТНЫХ ФОРМ

// Формирует представление периода болезни или отпуска за свой счет для вывода в печатную форму документа
Функция ПредставлениеПериодаБолезниОтпуска(Месяцы, Дни) Экспорт
	
	Если Месяцы<>0 Тогда
		Представление = "" + Месяцы + " мес. ";
	Иначе	
		Представление = "";
	КонецЕсли; 
	Если Дни<>0 Тогда
		Представление = Представление + Дни + " дн." ;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции 

// Формирует представление параметров исчисляемого  трудового стажа
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
// Возвращаемое значение:
//		Строка
Функция ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровИТС = "";
	КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметрИТС = Строка(ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа);
	Если КодОснованияИТС = "ВОДОЛАЗ" Тогда
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
	ИначеЕсли КодОснованияИТС = "СЕЗОН" Тогда
		ПредставлениеПараметровИТС = "";
	Иначе
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,"" + ПервыйПараметрИТС+" м ","") + ?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" дн ","") + Строка(ТретийПараметрИТС);
	КонецЕсли;
	
	Возврат ПредставлениеПараметровИТС;
	
КонецФункции

Функция ПредставлениеПараметровТерриториальныхУсловий(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровТУ = "";
	Ставка = ЗаписьСтажа.Коэффициент;
	ПервыйПараметрТУ = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрТУ = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	
	Если Ставка <> "0.00" Тогда
		ПредставлениеПараметровТУ = Ставка;
	Иначе
		ПредставлениеПараметровТУ = ?(ПервыйПараметрТУ > 0,"" + ПервыйПараметрТУ+" м ","") + ?(ВторойПараметрТУ > 0,""+ВторойПараметрТУ+" дн ","");
	КонецЕсли;
	
	Возврат ПредставлениеПараметровТУ;
	
КонецФункции

// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра
//
Процедура ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки)Экспорт
	
	КодОснования = СокрЛП(ЗаписьСтажа.ОснованиеВыслугиЛетКод);
	ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	СтрПервыйВторойПараметр = "";
	СтрСтавки = "";
	
	Если (КодОснования="ИСПКЛС1") или (КодОснования="САМОЛЕТ") или (КодОснования="ИНСПЕКТ") 
		или (КодОснования="СПЕЦАВ") или (КодОснования="ЛЕТИСП") или (КодОснования="ИТСИСП") 
		или (КодОснования="ИНСПЕКТ") или (КодОснования="ИТСМАВ") или (КодОснования="ОПЫТИСП") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
		
	ИначеЕсли (КодОснования="РЕАКТИВН") или (КодОснования="НОРМСП") или (КодОснования="НОРМАПР") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
		
	ИначеЕсли (КодОснования="УВД") или (КодОснования="ИТС")	или (КодОснования="27-14") или (КодОснования="27-15") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
		
	ИначеЕсли (КодОснования="ХИРУРГД") или (КодОснования="ХИРУРСМ") или (КодОснования="ЗП81ГД") или (КодОснования="ЗП81СМ") 
		или (КодОснования="28-ГДХР") или (КодОснования="28-СМХР") или (КодОснования="28-ГД") или (КодОснования="28-СМ") 
		или (КодОснования="27-ГДХР") или (КодОснования="27-СМХР") или (КодОснования="27-ГД") или (КодОснования="27-СМ") Тогда
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	ИначеЕсли (КодОснования="ЗП80РК") или (КодОснования="ЗП80ПД") 
		или (КодОснования="28-ПДРК") или (КодОснования="28-ПД") 
		или (КодОснования="27-ПДРК") или (КодОснования="27-ПД") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","");
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗБОРА ФАЙЛОВ СВЕДЕНИЙ

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
//Функция разбирает заголовочные строки файла и возвращает информацию о пачке
Функция РазобратьЗаголовокФайла(Знач ТекстФайла,ИнформацияОПачке) Экспорт
	
	ВсегоСтрокВФайле = СтрЧислоСтрок(ТекстФайла);
	Если ВсегоСтрокВФайле < 4 Тогда		
		Предупреждение("Неверная структура файла: количество строк должно быть не менее 4!");		
		Возврат 0;
	КонецЕсли;
	
	ИнформацияОРаботодателе = Новый Структура;
	
	//Обработка записи заголовка "ПАЧК"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,3));
	Если МассивДанныхСтроки.Количество()<>21 Тогда
		Сообщить("Строка 3: неверное количество полей записи 'ПАЧК'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДатаСоставленияОписи",ДатаИзФайла(МассивДанныхСтроки[4]));
	ИнформацияОПачке.Вставить("РасчетныйПериод",МассивДанныхСтроки[6]);
	ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица",МассивДанныхСтроки[7]);
	ИнформацияОПачке.Вставить("КодДополнительногоТарифа",МассивДанныхСтроки[8]);
	ИнформацияОПачке.Вставить("ТерриториальныеУсловия",МассивДанныхСтроки[9]);
	ИнформацияОПачке.Вставить("ТипСведений",МассивДанныхСтроки[10]);
	ИнформацияОПачке.Вставить("ВидКорректировки",МассивДанныхСтроки[11]);
	ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть",МассивДанныхСтроки[16]);
	ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть",МассивДанныхСтроки[17]);
	ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу",МассивДанныхСтроки[18]);
	//ВсегоНЧСЛ										= Число(МассивДанныхСтроки[14]);
	//НЧСЛБл										= Число(МассивДанныхСтроки[15]);
	
	//Обработка записи заголовка "РБТД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,2));
	Если МассивДанныхСтроки.Количество()<>6 Тогда
		Сообщить("Строка 2: неверное количество полей записи 'РБТД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОРаботодателе.Вставить("РегистрационныйНомерПФР",МассивДанныхСтроки[2]);
	ИнформацияОРаботодателе.Вставить("ИНН",МассивДанныхСтроки[3]);
	ИнформацияОРаботодателе.Вставить("КПП",МассивДанныхСтроки[4]);
	ИнформацияОРаботодателе.Вставить("Наименование",МассивДанныхСтроки[5]);
	
	//Обработка записи заголовка "ТИПД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,4));
	Если МассивДанныхСтроки.Количество()<>3 Тогда
		Сообщить("Строка 4: неверное количество полей записи 'ТИПД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("ТипДокумента",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДокументовВПачке",ЧислоИзФайла(МассивДанныхСтроки[2]));
	
	ИнформацияОПачке.Вставить("ИнформацияОРаботодателе",ИнформацияОРаботодателе);
	Возврат 1;
КонецФункции	

//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-1"
Процедура ВывестиОписьАДВ6(ТабличныйДокумент,Знач ИнформацияОПачке,Знач ОтветственныеЛица, ЗаменятьБуквуЕ = Ложь, Знач ИмяМакета = Неопределено) Экспорт
	//Получим ответственные лица организации и их должности 
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		ИмяМакета = "ФормаАДВ_6_1";
	КонецЕсли;
	МакетОписи = ПолучитьОбщийМакет(ИмяМакета);
	СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");
	
	СекцияОпись.Параметры.РегНомерПФР						= ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
	СекцияОпись.Параметры.ОКПО								= ИнформацияОПачке.ИнформацияОРаботодателе.КодПоОКПО;
	СекцияОпись.Параметры.ИНН								= ИнформацияОПачке.ИнформацияОРаботодателе.ИНН;
	СекцияОпись.Параметры.КПП								= ИнформацияОПачке.ИнформацияОРаботодателе.КПП;
	
	НаименованиеСокращенное = ИнформацияОПачке.ИнформацияОРаботодателе.НаименованиеСокращенное;
	Если ЗаменятьБуквуЕ Тогда
		ЗаменитьБуквуЁ(НаименованиеСокращенное, "", Ложь);
	КонецЕсли;	
	СекцияОпись.Параметры.Наименование = НаименованиеСокращенное;							
	
	Если ИнформацияОПачке.ТипДокумента = "АНКТ" Тогда
		СекцияОпись.Параметры.ДокументовАДВ1вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ОБМН" Тогда
		СекцияОпись.Параметры.ДокументовАДВ2вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ДУБЛ" Тогда
		СекцияОпись.Параметры.ДокументовАДВ3вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "КОНВ" Тогда
		СекцияОпись.Параметры.ДокументовСЗВКвПачке			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "СПВ2" Тогда
		СекцияОпись.Параметры.ТипИногоДокумента				= ИнформацияОПачке.ТипИногоДокумента;
		СекцияОпись.Параметры.ИныхДокументовВПачке			= ИнформацияОПачке.ИныхДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "ИН41" ИЛИ ИнформацияОПачке.ТипДокумента = "ИН42" Тогда
		Если ИнформацияОПачке.ТипДокумента = "ИН41" Тогда
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовВПачке;
		Иначе
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовСЗВ4_2вПачке;
		КонецЕсли;
		СекцияОпись.Параметры.ЧислоЗастрахованныхЛицВПачке	= ИнформацияОПачке.ДокументовВПачке;
		СекцияОпись.Параметры.РасчетныйПериод 				= ИнформацияОПачке.РасчетныйПериод;
		СекцияОпись.Параметры.КодКатегорииЗастрахованногоЛица = ИнформацияОПачке.КодКатегорииЗастрахованногоЛица;
		СекцияОпись.Параметры.КодДополнительногоТарифа 		= ИнформацияОПачке.КодДополнительногоТарифа;
		СекцияОпись.Параметры.ТерриториальныеУсловия 		= ИнформацияОПачке.ТерриториальныеУсловия;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыСтраховаяЧасть		= Число(ИнформацияОПачке.ИтогоВзносыСтраховаяЧасть);
		Исключение
		КонецПопытки;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыНакопительнаяЧасть	= Число(ИнформацияОПачке.ИтогоВзносыНакопительнаяЧасть);
		Исключение
		КонецПопытки;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыПоДопТарифу		= Число(ИнформацияОПачке.ИтогоВзносыПоДопТарифу);
		Исключение
		КонецПопытки;
		
		Если ИнформацияОПачке.ТипСведений = "ИСХД" Тогда
			СекцияОпись.Рисунки.ТипСведений_ИСХД.Текст = "ю";	
		ИначеЕсли ИнформацияОПачке.ТипСведений = "ПЕНС" Тогда
			СекцияОпись.Рисунки.ТипСведений_ПЕНС.Текст = "ю";	
		КонецЕсли; 
		
		Если ИнформацияОПачке.ВидКорректировки = "КОРР" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_КОРР.Текст = "ю";
		ИначеЕсли ИнформацияОПачке.ВидКорректировки = "ОТМН" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_ОТМН.Текст = "ю";
		КонецЕсли;	
	КонецЕсли;	
	
	СекцияОпись.Параметры.НомерПачкиРаботодателя 			= ИнформацияОПачке.НомерПачкиРаботодателя;
	
	СекцияОпись.Параметры.ДолжностьИсполнителя				= ОтветственныеЛица.ИсполнительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиИсполнителя		= ОтветственныеЛица.Исполнитель;
	СекцияОпись.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
	СекцияОпись.Параметры.ДатаЗаполнения		 			= ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
	
	ТабличныйДокумент.Вывести(СекцияОпись);
КонецПроцедуры	 

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ЗАПИСЯМИ ФАЙЛОВ СВЕДЕНИЙ

//Возвращает формат записи файла сведений (таблицу с именами и типами полей)
Функция ПолучитьФорматЗаписи(Знач ИмяЗаписи,Знач ДокументФорматЗаписей) Экспорт
	
	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипПоля",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(5));
	
	ОбластьФорматЗаписи = ДокументФорматЗаписей.ПолучитьОбласть(ИмяЗаписи);
	
	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		//тип поля хранится в 5-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст);
		Если ИмяПоля <> "" Тогда
			//тип поля хранится во 2-ой колонке	
			ТипПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст);
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			
			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			НовоеПоле.ТипПоля = ВРЕГ(СокрЛП(ТипПоля));
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" Тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 Тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;
	
	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

//Возвращает инициализировнную структуру, соответствующую формату записи
Функция ПолучитьСтруктуруЗаписи(Знач ТаблицаФорматаЗаписи) Экспорт
	СтрИменаПолей = "";
	Для Каждого Поле из ТаблицаФорматаЗаписи цикл
		СтрИменаПолей = СтрИменаПолей +","+Поле.ИмяПоля;
	КонецЦикла;	
	
	СтрИменаПолей = Сред(СтрИменаПолей,2);//Убрали первую запятую
	Возврат Новый Структура(СтрИменаПолей);
КонецФункции	 

//Формирует строку для файла сведений на основе данных структуры записи
Функция ПолучитьСтрокуПоДаннымЗаписи(Знач Запись,Знач ТаблицаФорматаЗаписи) Экспорт
	
	Стр = "";
	
	СтрНули = "0000000000";
	
	Для Каждого Поле из ТаблицаФорматаЗаписи цикл
		
		ЗначениеПоля = Запись[Поле.ИмяПоля];
		
		Если Поле.ТипПоля = "СТРОКА" Тогда
			
			Стр = Стр +","+ """"+СокрЛП(ЗначениеПоля)+"""";
			
		ИначеЕсли Поле.ТипПоля = "ДАТА" Тогда
			
			Если ЗначениеПоля = Неопределено Тогда
				Стр = Стр + ",""""";
			Иначе
				Стр = Стр + ",""" + Формат(ЗначениеПоля, "ДФ='дд/ММ/гггг'") + """";
			КонецЕсли;
			
		Иначе//Если Поле.ТипПоля = "Число" Тогда
			
			ТипЗнчПоля = ТипЗнч(ЗначениеПоля);
			
			Если ТипЗнчПоля = Тип("Число") Тогда
				//ЗначениеПоля = ЗначениеПоля;
			ИначеЕсли ТипЗнчПоля = Тип("Строка") Тогда	
				//ЗначениеПоля = Число(ЗначениеПоля);
				ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Иначе					
				ЗначениеПоля = 0;
			КонецЕсли;
			
			//Формируем представление нуля
			РазрядностьДробнойЧасти = Поле.РазрядностьДробнойЧасти;
			Если РазрядностьДробнойЧасти = 0 Тогда
				ПредставлениеНуля = "0";
			Иначе	
				ПредставлениеНуля = "0." + Лев(СтрНули, РазрядностьДробнойЧасти);
			КонецЕсли;	 
			//Форматируем значение
			ЗначениеПоля = Формат(ЗначениеПоля,"ЧГ=0; ЧРД =.; ЧЦ=" + Поле.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);
			
			Стр = Стр + "," + ЗначениеПоля;
		КонецЕсли;	 
	КонецЦикла;	
	
	Стр = Сред(Стр,2);//Убрали первую запятую
	
	Возврат Стр;
КонецФункции	 

//Выполняет разбор строки файла на значения элементов структуры записи
Функция РазложитьСтрокуВСтруктуруЗаписи(Знач Стр,Знач ТипЗаписи,Знач ТаблицаФормата,Запись,СтрОшибка)Экспорт
	
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(Стр);
	
	Если МассивДанныхСтроки[0] <> ТипЗаписи Тогда
		СтрОшибка = "Неверный тип записи. Ожидается запись с типом "+ТипЗаписи+"!";
		Возврат ложь;
	КонецЕсли;	
	
	Если МассивДанныхСтроки.Количество() <> ТаблицаФормата.Количество() Тогда
		СтрОшибка = "Неверное количество полей записи "+ТипЗаписи+"!";
		Возврат Ложь;
	КонецЕсли;	
	
	НомерПоля = 0;
	Для Каждого Поле из ТаблицаФормата цикл
		ЗначениеПоля = МассивДанныхСтроки[НомерПоля];
		Если Поле.ТипПоля = "ДАТА" Тогда
			ЗначениеПоля = ДатаИзФайла(ЗначениеПоля);
		ИначеЕсли Поле.ТипПоля = "ЧИСЛО" Тогда
			ЗначениеПоля = ЧислоИзФайла(ЗначениеПоля);
		КонецЕсли;	 
		Запись[Поле.ИмяПоля]=ЗначениеПоля;
		НомерПоля = НомерПоля + 1;
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции	 

/////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ПРОВЕРКИ ФОРМ СЗВ

// Распечатывает список найденных ошибок с группировкой по физлицу
Процедура ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, ИсточникОшибок, ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено)
	
	Если ТаблицаПлохихЗаписей.Количество() = 0 Тогда
		Возврат	
	КонецЕсли;
	
	Обработка = глЗначениеПеременной("глОбработкаСообщений");
	ВидСообщенияОшибка = Перечисления.ВидыСообщений.Ошибка;
	
	Таблица = ТаблицаПлохихЗаписей.Скопировать();
	Таблица.Свернуть("ФизЛицо");
	МассивФизлиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
	ТаблицаПлохихЗаписей.Индексы.Добавить("ФизЛицо");
	
	СтруктураПоиска = Новый Структура("ФизЛицо");
	Для каждого ФизЛицо Из МассивФизлиц цикл
		
		СтруктураПоиска.ФизЛицо = ФизЛицо;
		НайдОшибки = ТаблицаПлохихЗаписей.НайтиСтроки(СтруктураПоиска);
		
		Если НайдОшибки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		Если ВыводитьСообщенияВОбработчикСообщений Тогда
			
			СтрОшибкиПоФизЛицу = "";
			СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + ИсточникОшибок+" сотрудника " + Физлицо + " обнаружены ошибки: <br>";
			НомерОшибки = 0;
			Для Каждого Ошибка из НайдОшибки цикл
				НомерОшибки = НомерОшибки + 1;
				СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + НомерОшибки+".) " + Ошибка.ОписаниеОшибки + " <br>";
			КонецЦикла;
			Обработка.ДобавитьСообщение(СтрОшибкиПоФизЛицу, ВидСообщенияОшибка,, СообщенияРазделПроверки);
			//ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке();
		Иначе
			СтрОшибкиПоФизЛицу = "--------------------------------------------------------------------------------------------" + Символы.ПС;
			СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + ИсточникОшибок+" сотрудника " + Физлицо + " обнаружены ошибки:" + Символы.ПС;
			НомерОшибки = 0;
			Для Каждого Ошибка из НайдОшибки цикл
				НомерОшибки = НомерОшибки + 1;
				СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + НомерОшибки+".) " + Ошибка.ОписаниеОшибки;
			КонецЦикла;
			ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрОшибкиПоФизЛицу,Ложь);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

//Проверяет правильность заполнения номера документа, удостоверяющего личность
Функция ПроверитьНомерУдостоверенияЛичности(ДокументКодИМНС, Знач Номер, СтрОшибка) Экспорт
	
	Если ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Номер,"          "))=0 Тогда
		СтрОшибка = "В номере документа присутствуют недопустимые символы!";
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	
	СтрОшибка = "";
	
	Если ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Если ДлинаНомера <> 6 Тогда
			СтрОшибка = "Номер документа должен состоять из 6 символов!";
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС09
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Если ДлинаНомера <> 7 Тогда
			СтрОшибка = "Номер документа должен состоять из 7 символов!";
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС02
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС07
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС26
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Если (ДлинаНомера < 6 ) или ( ДлинаНомера > 7 ) Тогда
			СтрОшибка = "Номер документа должен состоять из 6 или 7 символов!";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

// Проверяет правильность заполнения серии документа, удостоверяющего личность 
Функция ПроверитьСериюУдостоверенияЛичности(ДокументКодИМНС, Знач Серия , СтрОшибка) Экспорт
	
	// проверка
	Если ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		ТипДока = 1;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС07
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС26
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		ТипДока = 2;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС02
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС09
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		ТипДока = 3;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		ТипДока = 4;
	Иначе
		ТипДока = 5;
	КонецЕсли;
	
	СтрОшибка = "";
	
	Серия = СокрЛП(Серия);
	
	Если ТипДока = 1 Тогда // паспорт СССР и свид о рожд
		
		Поз = Найти(Серия,"-");
		Если Поз=0 Тогда
			СтрОшибка = "Серия документа должна состоять из двух частей, резделенных символом ""-""!";
			Возврат Ложь;
		КонецЕсли;
		
		Ч1 = Лев(Серия, Поз-1);
		Ч2 = СокрЛП(Сред(Серия, Поз+1));
		
		Поз = Найти(Ч2,"-");
		Если Поз <> 0 Тогда
			СтрОшибка = "В серии документа должно быть только две группы символов!";
			Возврат Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Ч1) Тогда
			СтрОшибка = "В серии документа отсутствует числовая часть!";
			Возврат Ложь;
		ИначеЕсли  ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC1УХЛС",Ч1,"          "))=0 Тогда
			СтрОшибка = "Числовая часть серии документа должна указываться символами 1 У Х Л С  или  I V X L C";
			Возврат Ложь;
		ИначеЕсли РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС") <> РегламентированнаяОтчетность.ПреобразоватьЧислоВРимскуюНотацию(РегламентированнаяОтчетность.ПреобразоватьЧислоВАрабскуюНотацию(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС"))) Тогда
			СтрОшибка = "Числовая часть серии документа указана некорректно!";
			Возврат Ложь;
		ИначеЕсли (СтрДлина(Ч2) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Ч2,"                                 "))=0) Тогда
			СтрОшибка = "После разделителя ""-"" в серии документа должны быть ДВЕ pусcкие заглавные буквы!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=2 Тогда // серия - две буквы: военный билет, ...
		
		Если (СтрДлина(Серия) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Серия,"                                 "))=0) Тогда
			СтрОшибка = "В серии документа должны быть ДВЕ pусcкие заглавные буквы!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=3 Тогда // серия - две цифры: загранпаспорта 
		
		Если (СтрДлина(Серия) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Серия,"          "))=0) Тогда
			СтрОшибка = "В серии документа должно быть ДВЕ цифры!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=4 Тогда // серия - две группы цифр: новый паспорт
		
		Поз = Найти(Серия," ");
		Если Поз=0 Тогда
			СтрОшибка = "В серии документа должно быть две группы цифр!";
			Возврат Ложь;
		КонецЕсли;
		
		ПервЧасть = Лев(Серия,Поз-1);
		ВторЧасть = СокрЛП(Сред(Серия,Поз+1));
		
		Поз = Найти(ВторЧасть," ");
		Если Поз <> 0 Тогда
			СтрОшибка = "В серии документа должно быть только две группы цифр!";
			Возврат Ложь;
		КонецЕсли;
		
		Если (СтрДлина(ПервЧасть) <> 2) ИЛИ
			(ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",ПервЧасть,"          "))=0) Тогда
			СтрОшибка = "Первая группа символов серии документа должна содержать две цифры!";
			Возврат Ложь;
		КонецЕсли;
		
		Если (СтрДлина(ВторЧасть) <> 2) ИЛИ
			(ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",ВторЧасть,"          "))=0) Тогда
			СтрОшибка = "Вторая группа символов серии документа должна содержать две цифры!";
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции 

Функция ФОВУказанНеверно(ОсновнаяЗапись, ТекущаяЗапись, СтажСЗВК = Ложь)

	КалендарноеВремя = (НачалоДня(ОсновнаяЗапись.ДатаОкончанияПериода) - НачалоДня(ОсновнаяЗапись.ДатаНачалаПериода)) / 86400 + 1;
	Если СтажСЗВК Тогда
		ФОВДляСравнения = ТекущаяЗапись.НулевойПараметрИсчисляемогоСтажа * 12 * 30 + ТекущаяЗапись.ПервыйПараметрИсчисляемогоСтажа * 30 + ТекущаяЗапись.ВторойПараметрИсчисляемогоСтажа; 
	Иначе
		ФОВДляСравнения = ТекущаяЗапись.ПервыйПараметрИсчисляемогоСтажа * 30 + ТекущаяЗапись.ВторойПараметрИсчисляемогоСтажа; 
	КонецЕсли;
	
	Возврат ФОВДляСравнения > КалендарноеВремя
	
КонецФункции 

Функция ДоляСтавкиУказанаНеверно(ДоляСтавки, ДопустимыйМаксимум = 2, ДопустимыйМинимум = 0.01)

	Возврат	ДоляСтавки < ДопустимыйМинимум Или ДоляСтавки > ДопустимыйМаксимум

КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-К

//Добавляет новую строку в таблицу плохих записей стажа
Процедура СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "")
	
	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);
	
	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
	
	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
	
КонецПроцедуры 

//Добавляет новую строку в таблицу плохих записей сведений
Процедура СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки)
	ЗаголовокОшибки ="Запись № "+Запись.НомерЗаписи+", Вид стажа: " +Запись.ВидСтажа + ":"+Символы.ПС;
	
	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
	
	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
КонецПроцедуры 

//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция СЗВК_ВыполнитьПроверкуДополнительнойЗаписи(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей) 
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) Тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) Тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	
	
	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
	УказанРК = ЗначениеЗаполнено(Запись.РайонныйКоэффициент);
	ЗаданаГруппаТерриториальныеУсловия = УказаныТерриториальныеУсловия или УказанРК;
	
	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
	
	Если (НЕ ЗаданаГруппаТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) Тогда
		СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 
	
	//Проверка на ввод территориальной льготы
	Если ЗаданаГруппаТерриториальныеУсловия Тогда
		Если  (НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)) И(НЕ ЗначениеЗаполнено(ОсновнаяЗапись.РайонныйКоэффициент)) Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	
	
	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда Тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12А)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12Б)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12Ж) Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение ЗП12А, ЗП12Б или ЗП12Ж!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;
		
		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.ЗП12Ж) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104) Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда ЗП12Ж может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;
	
	//Проверка на ввод основания выслуги лет
	//Если УказаноОснованиеВыслугиЛет Тогда
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) Тогда
		Если Найти(",,ЗП81СМ,ЗП81ГД,ХИРУРСМ,ХИРУРГД,",","+КодВыслугиЛетЗаписи+",") = 0 Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды ЗП81СМ,ЗП81ГД,ХИРУРСМ или ХИРУРГД!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан
		
		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,ЗП81СМ,ЗП81ГД,ХИРУРСМ,ХИРУРГД,");//пустой код допустим
		
		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
		
		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если Найти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") Тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ПроверочнаяСтрокаКодов = "" Тогда
			СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи
			+Символы.ПС+"в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);
			Возврат Ложь;
		Иначе
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");
			
			Если НЕ Найти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
				+Символы.ПС+"могут быть указаны только следующие коды выслуги: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	//КонецЕсли;	 
	
	
	Возврат Истина;
КонецФункции	 

//Выполняет проверку записей стажа на допустимось значений реквизитов между группами
Функция СЗВК_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(СтруктураПараметров, ТаблицаПлохихЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
	
	//Проверяем на допустимые сочетания только те записи, в которых указан либо код условий труда, либо код основания исчисляемого стажа
	//( указание только выслуги лет допустимо)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Записи.ФизЛицо КАК ФизЛицо,
	|	Записи.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
	|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
	|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
	|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
	|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
	|	Записи.НулевойПараметрИсчисляемогоСтажа КАК УказанныйНулевойПараметрИсчисляемогоСтажа,
	|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
	|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
	|	Сочетания.НомерПравила КАК НомерПравила,
	|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
	|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
	|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
	|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
	|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
	|	Сочетания.ФорматФОВ КАК ФорматФОВ,
	|	Записи.Организация КАК Организация,
	|	Записи.ВидДеятельности КАК ВидДеятельности,
	|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
	|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
	|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
	|					И Сочетания.КодУсловийТруда = """")
	|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
	|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
	|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
	|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияВыслугиЛет = """")
	|			И (Сочетания.ТипШаблонаКПС = ""Любой""
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
	|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
	|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
	|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
	|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
	|ГДЕ
	|	Записи.ФизЛицо В(&МассивФизлиц)
	|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
	|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НомерПериодаТрудовойДеятельности,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") цикл
		Пока Выборка.СледующийПоЗначениюПоля("НомерПериодаТрудовойДеятельности") цикл
			Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
				Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
					
					СтрокаСообщений = "Комбинация значений реквизитов:";
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
					СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
					
					Если (Выборка.НомерПравила = NULL)
						ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ") 
						ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД") Тогда
						СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
						
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
						Продолжить;
						
					КонецЕсли;	
					
					//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
					ФОВДопустимо = Ложь;
					
					СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
					
					//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
					Пока Выборка.Следующий() цикл
						
						ФорматФОВ = Выборка.ФорматФОВ;
						СтрокаОшибкиФормата = "";            	
						ПрошлоПроверку = 0;
						СтрокаЗначенияПараметров = "";
						
						Для Н=0 по 2 цикл
							ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
							
							Если Н=0 Тогда
								ЗначениеПараметра = Выборка.УказанныйНулевойПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Годы";
							ИначеЕсли Н=1 Тогда	
								ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Месяцы";
							Иначе
								ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
								ПсевдонимПараметра = "Дни";
							КонецЕсли;	
							
							ПараметрПрошелПроверку = Ложь;
							
							НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
							
							Если (ФорматПараметра = "_") Тогда
								Если (ЗначениеПараметра <> 0) Тогда//ПУСТОЕ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "Г") Тогда
								Если (ЗначениеПараметра > 100) Тогда//ГОДЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "М") Тогда 
								Если (ЗначениеПараметра > 11) Тогда//МЕСЯЦЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "Д") Тогда 
								Если (ЗначениеПараметра > 30) Тогда//ДНИ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							ИначеЕсли (ФорматПараметра = "ч") Тогда//ЧАСЫ 
								ПараметрПрошелПроверку = ИСТИНА;
							ИначеЕсли (ФорматПараметра = "м") Тогда 
								Если (ЗначениеПараметра > 59) Тогда//МИНУТЫ
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
								Иначе	
									ПараметрПрошелПроверку = ИСТИНА;
								КонецЕсли;
							КонецЕсли;	 
							
							Если ПараметрПрошелПроверку Тогда
								ПрошлоПроверку = ПрошлоПроверку + 1;
							КонецЕсли;	 
							
							СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
						КонецЦикла;
						
						//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
						Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") Тогда//
							ПрошлоПроверку = 0;
							СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
						КонецЕсли;	
						
						Если ПрошлоПроверку = 3 Тогда
							ФОВДопустимо = Истина;
							Прервать;
						КонецЕсли;
						
						СтрФорматФОВ = ФорматФОВ;
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
						СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
						СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
						
						СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
						СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
					КонецЦикла;	// по вариантам формата ФОВ
					
					Если НЕ ФОВДопустимо Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
					КонецЕсли;	 
					
				КонецЦикла;// По дополнительным записям	
			КонецЦикла;// По основным записям	
		КонецЦикла;// По периодам деятельности
	КонецЦикла;// По физлицам	
	
КонецФункции	 

//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже
Функция СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись, ОсновнаяЗапись) Экспорт 
	Если НЕ ЗначениеЗаполнено(Запись.Организация)или(НЕ ЗначениеЗаполнено(Запись.ВидДеятельности)) Тогда
		ЗаголовокСообщения = "Период деятельности № "+ОсновнаяЗапись.НомерПериодаТрудовойДеятельности;
	Иначе 
		ЗаголовокСообщения = ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация: ")+СокрЛП(Запись.Организация)+", Вид деятельности: "+СокрЛП(Запись.ВидДеятельности);
	КонецЕсли;	                                                                                                                                                                                              
	
	Если ЗначениеЗаполнено(ОсновнаяЗапись.ДатаНачалаПериода) Тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
	иначе
		ЗаголовокСообщения = ЗаголовокСообщения + ", Основная запись № "+ОсновнаяЗапись.НомерОсновнойЗаписи;
	КонецЕсли;	 
	
	Если Запись.НомерДополнительнойЗаписи <> 0 Тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;	
	
	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;
	
	Возврат ЗаголовокСообщения;
КонецФункции	 

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-К
Функция СЗВК_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, МассивФизЛиц, ДатаАктуальности = "", РезультатВыборкиЗаписей = "", ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	ПустаяДата = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизЛиц" , МассивФизЛиц);
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" ,				ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаАктуальности" ,				ДатаАктуальности);
		Запрос.УстановитьПараметр("Организация" ,					ВыборкаПоШапкеДокумента.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация" ,			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияСЗВКРаботники.НомерСтроки КАК НомерСтроки,
		|	СведенияСЗВКРаботники.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	СведенияСЗВКРаботники.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	СведенияСЗВКРаботники.ФизЛицо КАК ФизЛицо,
		|	СведенияСЗВКРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	СведенияОФизлицеДляСЗВК.ТерриториальныеУсловияНа31_12_2001.Код КАК ТерриториальныеУсловияНа_31_12_2001Код,
		|	СведенияОФизлицеДляСЗВК.РайонныйКоэффициентНа31_12_2001 КАК РайонныйКоэффициентНа_31_12_2001,
		|	ЗаписиОСтаже.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.Организация КАК Организация,
		|	ЗаписиОСтаже.Организация КАК ОрганизацияНаименование,
		|	ЗаписиОСтаже.ВидДеятельности КАК ВидДеятельности,
		|	ЗаписиОСтаже.ВидДеятельности.Код КАК ВидДеятельностиКод,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.НулевойПараметрИсчисляемогоСтажа КАК НулевойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.Должность,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.КоличествоРабочихМест > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияСЗВКРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&МассивФизЛиц)) КАК ФИОФизЛицСрезПоследних
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтаже
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ЗаписиОСтаже.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицеДляСЗВК КАК СведенияОФизлицеДляСЗВК
		|		ПО СведенияСЗВКРаботники.ФизЛицо = СведенияОФизлицеДляСЗВК.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ 
		|							ВЫБОР
		|							КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения  
		|									И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|								ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|							КОНЕЦ) КАК КоличествоРабочихМест, 
		|			РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаАктуальности,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.Физлицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СведенияОТрудовомСтажеСЗВКРаботникиОрганизации.ФизЛицо
		|						ИЗ
		|							Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияОТрудовомСтажеСЗВКРаботникиОрганизации
		|						ГДЕ
		|							СведенияОТрудовомСтажеСЗВКРаботникиОрганизации.Ссылка = &ДокументСсылка)
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизации
		|		ГДЕ
		|		ВЫБОР
		|			КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения 
		|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И ВЫБОР
		|			КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения 
		|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
		|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
		|		КОНЕЦ = &Организация
		|		СГРУППИРОВАТЬ ПО
		|			РаботникиОрганизации.Сотрудник.Физлицо) КАК РаботникиОрганизаций
		|		ПО СведенияСЗВКРаботники.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|ГДЕ
		|	СведенияСЗВКРаботники.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерПериодаТрудовойДеятельности,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ОсновнаяГруппировкаВыборки = "НомерСтроки";
		
	Иначе//Инициатором вызова является набор записей
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.Организация КАК Организация,
		|	ЗаписиОСтаже.Организация КАК ОрганизацияНаименование,
		|	ЗаписиОСтаже.ВидДеятельности КАК ВидДеятельности,
		|	ЗаписиОСтаже.ВидДеятельности.Код КАК ВидДеятельностиКод,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.НулевойПараметрИсчисляемогоСтажа КАК НулевойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.Должность
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтаже
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо,
		|	НомерПериодаТрудовойДеятельности,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ОсновнаяГруппировкаВыборки = "ФизЛицо";
	КонецЕсли;
	
	РезультатВыборкиЗаписей = Запрос.Выполнить();
	ВыборкаЗаписей =  РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждого физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля(ОсновнаяГруппировкаВыборки) Цикл
		
		Если ВыборкаЗаписей.НомерПериодаТрудовойДеятельности = NULL Тогда
			Продолжить;//Физлицо не имеет сведений
		КонецЕсли; 
		
		ФизЛицо = ВыборкаЗаписей.ФизЛицо;
		
		ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, Организация, ВидДеятельности, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи, НомерПериодаТрудовойДеятельности");
		
		//Список годов, в которых встречались записи с кодом исчисляемого стажа СЕЗОН
		СписокСезонныхГодов = Новый СписокЗначений;
		
		//Список значений группы реквизитов территориальные условия одной основной записи
		СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
		
		//Список значений кодов условий труда одной основной записи
		СписокУсловияТрудаЗаписи = Новый СписокЗначений;
		
		//Список значений кодов выслуги лет основной записи
		СписокВыслугаЛетЗаписи = Новый СписокЗначений;
		
		ПредыдущийНомерПериодаДеятельности = 0;
		ПредыдущийНомерОсновнойЗаписи = 0;
		ПредыдущийНомерДополнительнойЗаписи = 0;
		ПредыдущаяОрганизация = "";
		ПредыдущийВидДеятельности = Справочники.ВидыОбщественноПолезнойДеятельности.ПустаяСсылка();
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			Запись = ВыборкаЗаписей;
			
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ РЕКВИЗИТОВ "Организация" и "ВидДеятельности"
			
			//Организация и вид деятельности должны быть заполнены обязательно
			Если ПустаяСтрока(Запись.Организация) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"));
			КонецЕсли;
			Если Запись.ВидДеятельности.Пустая() Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указан вид деятельности!");
			КонецЕсли;
			
			//Проверим, сменился ли период деятельности
			Если Запись.НомерПериодаТрудовойДеятельности <> ПредыдущийНомерПериодаДеятельности Тогда
				СменилсяНомерПериодаДеятельности = Истина;
			Иначе
				СменилсяНомерПериодаДеятельности = Ложь;
			КонецЕсли;
			
			Если (Запись.Организация <> ПредыдущаяОрганизация) ИЛИ (Запись.ВидДеятельности <>ПредыдущийВидДеятельности) Тогда
				СменилисьОрганизацияВидДеятельности = Истина;
			иначе
				СменилисьОрганизацияВидДеятельности = Ложь
			КонецЕсли;
			
			Если (СменилисьОрганизацияВидДеятельности)и(НЕ СменилсяНомерПериодаДеятельности) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В рамках одного периода деятельности организация и вид деятельности меняться не должны!");
			КонецЕсли;
			
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
			
			//По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;
			
			//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = Истина;
			Если СменилсяНомерПериодаДеятельности Тогда
				ДополнительнаяЗаписьВозможна = Ложь;
			КонецЕсли;
			
			//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
			Если (Запись.ДатаНачалаПериода = ПустаяДата) и (Запись.ДатаОкончанияПериода = ПустаяДата) Тогда
				Если ДополнительнаяЗаписьВозможна Тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
				КонецЕсли;	
			ИначеЕсли (Запись.ДатаНачалаПериода = ПустаяДата) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
			ИначеЕсли (Запись.ДатаОкончанияПериода = ПустаяДата) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
			Иначе//Обе даты заполнены
				
				//Дата окончания периода не должна быть позднее 31.12.2001
				Если Запись.ДатаОкончанияПериода > '20011231'  Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее 31 декабря 2001 года!");
				КонецЕсли;
				
				// Начало периода не должно быть позже окончания периода 
				Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
				КонецЕсли;
				
				// Начало периода не должно быть слишком старой
				Если Запись.ДатаНачалаПериода < Дата('19000101') Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода слишком старая!");
				КонецЕсли;
				
				Если ГОД(Запись.ДатаНачалаПериода) <> ГОД (Запись.ДатаОкончанияПериода) Тогда
					
					Если (Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ) 
						ИЛИ (Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для оснований исчисляемого стажа ВОДОЛАЗ и СЕЗОН даты начала и окончания периода должны находиться в пределах одного календарного года!");
					КонецЕсли;
					
					Если НЕ ((Запись.ПервыйПараметрВыслугиЛет = 0) И (Запись.ВторойПараметрВыслугиЛет  = 0) И (Запись.ТретийПараметрВыслугиЛет  = 0)) Тогда 
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании параметров 1-3 выслуги лет даты начала и окончания периода должны находиться в пределах одного календарного года!");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			//Проверка только для основной записи о стаже
			Если ЭтоОсновнаяЗапись Тогда
				
				//Проверка на хронологический порядок записей
				Если ТекущаяОсновнаяЗапись.Организация <> Неопределено Тогда
					Если Запись.ДатаНачалаПериода<=ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
					КонецЕсли;
				КонецЕсли;
				
				//Переустановка текущей основной записи
				ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
				ТекущаяОсновнаяЗапись.Организация = Запись.Организация;
				ТекущаяОсновнаяЗапись.ВидДеятельности = Запись.ВидДеятельности;
				ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
				ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
				ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
				ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
				ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
				ТекущаяОсновнаяЗапись.НомерПериодаТрудовойДеятельности = Запись.НомерПериодаТрудовойДеятельности;
				ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
				ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
				
				СписокТерриториальныеУсловияЗаписи.Очистить();
				СписокУсловияТрудаЗаписи.Очистить();
				СписокВыслугаЛетЗаписи.Очистить();
			КонецЕсли;
			
			// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
			
			//Проверка нумерации периодов деятельности
			ОжидаемыйНомерПериода = ПредыдущийНомерПериодаДеятельности +1;
			Если СменилсяНомерПериодаДеятельности Тогда
				Если (Запись.НомерПериодаТрудовойДеятельности <> ОжидаемыйНомерПериода)  Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер периода трудовой деятельности. Ожидается номер: "+ОжидаемыйНомерПериода+"!");
				КонецЕсли;
				
				//Сброс счетчика основных записей
				ПредыдущийНомерОсновнойЗаписи = 0;
			КонецЕсли;
			
			//Проверка нумерации основных и дополнительных записей
			Если (ЭтоОсновнаяЗапись) Тогда
				ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
				Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
				КонецЕсли;
				
				//Сброс счетчика дополнительных записей
				ПредыдущийНомерОсновнойЗаписи = 0;
			Иначе
				ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
				Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
				КонецЕсли;
			КонецЕсли;
			
			
			//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
			
			//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
			УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
			УказанРК = НЕ (Запись.РайонныйКоэффициент = 0);
			ЗаданаГруппаТерриториальныеУсловия = УказаныТерриториальныеУсловия или УказанРК;
			
			//Признаки заполнения реквизитов группы "Особые условия труда"
			УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
			УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
			ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
			
			//Признаки заполнения реквизитов группы "Исчисляемый стаж"
			УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
			УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
			ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
			
			//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
			УказанПараметрИсчисляемогоСтажа0 = НЕ (Запись.НулевойПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
			ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа0 ИЛИ УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
			
			//Признаки заполнения реквизитов группы "ВыслугаЛет"
			УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
			ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
			
			//ПРОВЕРКА ЗАПИСЕЙ С ВИДОМ ДЕЯТЕЛЬНОСТИ, ОТЛИЧНЫМ ОТ РАБОТА
			
			Если Запись.ВидДеятельности <> Справочники.ВидыОбщественноПолезнойДеятельности.РАБОТА Тогда
				Если ЗаданаГруппаТерриториальныеУсловия ИЛИ ЗаданаГруппаУсловияТруда ИЛИ ЗаданаГруппаИсчисляемыйСтаж ИЛИ ЗаданаГруппаФОВ
					ИЛИ ЗаданаГруппаФОВ ИЛИ ЗаданаГруппаВыслугаЛет Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Для записей с видом деятельности, отличным от РАБОТА, должен быть указан только период!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
				
				Если НЕ ЭтоОсновнаяЗапись Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Дополнительные записи для видов деяетльности, отличных от РАБОТА, недопустимы!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;
			
			
			//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ  
			
			Если  НЕ ЭтоОсновнаяЗапись Тогда
				СЗВК_ВыполнитьПроверкуДополнительнойЗаписи(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
			КонецЕсли;
			
			// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
			
			Если ЗаданаГруппаТерриториальныеУсловия Тогда
				ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод)+", "+Запись.РайонныйКоэффициент;
				Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;
			
			Если УказаныОсобыеУсловияТруда Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;
			
			Если УказаноОснованиеВыслугиЛет Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
				Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЕсли;
			
			
			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "ТерриториальныеУсловия"
			
			Если УказаныТерриториальныеУсловия Тогда
				Если Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС 
					Или Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
					Или Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР 
					Или Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС Тогда
					Если НЕ УказанРК Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для территориальных условий РКС, МКС, МКСР и РКСМ должен быть указан районный коэффициент!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				Иначе
					Если УказанРК Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для территориальных условий, отличных от РКС, МКС, МКСР и РКСМ, районный коэффициент указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (УказанРК) И НЕ(Запись.РайонныйКоэффициент >= 1.01 И Запись.РайонныйКоэффициент <= 2.00) Тогда
				СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Районный коэффициент должен быть в диапазоне от 1.01 до 2.00!", ТекущаяОсновнаяЗапись);
			КонецЕсли;
			
			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
			
			КПС = СокрЛП(Запись.КодПозицииСпискаКод);
			
			//Определим, к какому списку принадлежит код позиции
			НазваниеСписка ="";
			Если УказанКодПозицииСписка Тогда 
				Если НЕ УказаныОсобыеУсловияТруда Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
				
				ДлинаКПС = СтрДлина(КПС);
				
				Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
					
					Первые2СимволаКПС = Лев(КПС,2);
					Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
						НазваниеСписка = "Список№1";
					ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
						НазваниеСписка = "Список№2";
					Иначе	
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли (ДлинаКПС=5) Тогда
					НазваниеСписка = "ПрочиеСписки";
				Иначе	
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;//УказанКодПозицииСписка
			
			Если УказаныОсобыеУсловияТруда Тогда
				
				//Проверки на возможные коды списков для конкретных условий труда
				
				КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Первые8СимволовКПС = Лев(КПС,8);
				НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
				
				Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12А Тогда
					Если (НазваниеСписка <> "Список№1") Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Б Тогда
					
					Если (НЕ УказанКодПозицииСписка) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
					Если (НазваниеСписка = "Список№1") Тогда
						Если (ВРЕГ(Первые8СимволовКПС) <> "1010300Б")и(ВРЕГ(Первые8СимволовКПС) <> "1010100Г")и(ВРЕГ(Первые8СимволовКПС) <> "1010100Д")  Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Г Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку по текстильной промышленности!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Д Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку железнодорожников!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12Ж Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку лесозаготовителей!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12М Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку по работе с осужденными!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12О Тогда
					Если НЕ ((НЕ УказанКодПозицииСписка)или(НазваниеСписка="ПрочиеСписки")) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка должен быть либо пустым либо принадлежать списку должностей противопожарной службы!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
				Иначе
					//Для остальных кодов условий труда КПС указываться не должен
					Если УказанКодПозицииСписка Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;//УказаныОсобыеУсловияТруда
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
			
			УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
			УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
			УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
			ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
			
			Если УказаноОснованиеВыслугиЛет Тогда
				
				КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
				НачалоСообщения = "Для основания выслуги лет " + КодОснования;
				
				УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
				
				//Медицинские работники
				Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП81СМ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП81ГД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ХИРУРСМ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ХИРУРГД) Тогда
					
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('19991101') Тогда
						//до 1 ноября 1999 г
						Если ПараметрыУказаны Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.11.1999 года параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
						
					Иначе//после 1 ноября 1999 г
						Если ДоляСтавкиУказанаНеверно(Запись.ТретийПараметрВыслугиЛет) Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.11.1999 третий параметр должен содержать долю ставки (число от 0.1 до 2)!", ТекущаяОсновнаяЗапись);
						ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.11.1999 должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;
					
					//Педагогические работники	
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП80ПД Тогда
					
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('20000901') Тогда
						//до 1 сентября 2000г
						Если  ПараметрыУказаны Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.09.2000 года параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					Иначе//после 1 сентября 2000г
						Если УказанПараметр2 Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
						ИначеЕсли ДоляСтавкиУказанаНеверно(Запись.ТретийПараметрВыслугиЛет) Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 третий параметр должен содержать долю ставки (число от 0.1 до 2)!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП80РК Тогда
					
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('20000901') Тогда
						//до 1 сентября 2000г
						Если  ПараметрыУказаны Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.09.2000 параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					Иначе//после 1 сентября 2000г
						Если (УказанПараметр2)или(УказанПараметр3) Тогда
							СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.09.2000 может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
						КонецЕсли;
					КонецЕсли;
					
					//Летчики
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
					Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
					КонецЕслИ;
					
					//Парашютисты
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда
					
					//Если НЕ УказанПараметр1 Тогда
					//	СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 1 должен содержать количество прыжков, подъёмов!");
					Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
					//Управление воздушным движением и  инженерно-технический состав 	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.УВД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТС) Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
					
					//Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
					//	СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (месяцы и дни)!");
					//КонецЕсли;	
					
					//Прочие коды выслуги лет	
				Иначе
					Если  ПараметрыУказаны Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ПараметрыУказаны Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
				КонецЕсли;
			КонецЕсли;
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
			
			Если УказанТретийПараметрИсчисляемогоСтажа Тогда
				Если (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ") Тогда
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
				ИначеЕсли (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
					Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
						| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					Если ((ЗаданаГруппаУсловияТруда)ИЛИ(ЗаданаГруппаТерриториальныеУсловия)) Тогда
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
						|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли; 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН Тогда
				Если СписокСезонныхГодов.НайтиПоЗначению(Год(Запись.ДатаНачалаПериода)) = Неопределено Тогда
					СписокСезонныхГодов.Добавить(Год(Запись.ДатаНачалаПериода));
				Иначе
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Основание исчисляемого стажа СЕЗОН в течение календарного года может указываться не более одного раза!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;	
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 0,1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
			
			Если ЗаданаГруппаФОВ Тогда
				Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
					И (НЕ ЗаданаГруппаТерриториальныеУсловия)  Тогда
					СтрОшибка = " Параметры 0,1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
					+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
					СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				КонецЕсли;	
				
				Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					
					Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
						СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
						СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					
					Если ФОВУказанНеверно(ТекущаяОсновнаяЗапись, Запись, Истина) Тогда
						СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
						СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	
				КонецЕсли;	 
				
			КонецЕсли;	 
			
			//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
			
			//Запомним для следующей итерации
			ПредыдущаяОрганизация = Запись.Организация;
			ПредыдущийВидДеятельности = Запись.ВидДеятельности;
			ПредыдущийНомерПериодаДеятельности= Запись.НомерПериодаТрудовойДеятельности;
			ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
			ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
			
		КонецЦикла;//Цикл по записям о стаже текущего физлица
		
		
	КонецЦикла;//Цикл по физлицам
	
	СЗВК_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(Новый Структура("МассивФизлиц", МассивФизлиц), ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже");
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
КонецФункции	 

//Выполняет проверку правильности заполнения строк стажа
Функция СЗВК_ПроверитьНаборСведенийДляОценкиПенсионныхПрав(ИнициаторВызова, МассивФизЛиц, РезультатВыборкиЗаписей = "") Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаСреза", ИнициаторВызова.Дата);
		Запрос.Текст ="ВЫБРАТЬ
		|	СведенияСЗВКРаботники.ФизЛицо КАК ФизЛицо,
		|	СведенияСЗВКРаботники.НомерСтроки,
		|	СведенияДляОценкиПенсионныхПравСЗВК.НомерЗаписи,
		|	СведенияДляОценкиПенсионныхПравСЗВК.ВидСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа.Код КАК КодСтажаКод,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Лет,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Месяцев,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Дней,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИОФизЛица
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияСЗВКРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияДляОценкиПенсионныхПравСЗВК КАК СведенияДляОценкиПенсионныхПравСЗВК
		|		ПО СведенияСЗВКРаботники.ФизЛицо = СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	СведенияСЗВКРаботники.Ссылка = &ДокументСсылка";
		
		
	Иначе
		
		Запрос.УстановитьПараметр("МассивФизЛиц",МассивФизЛиц);
		
		Запрос.Текст ="ВЫБРАТЬ
		|	СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо КАК ФизЛицо,
		|	СведенияДляОценкиПенсионныхПравСЗВК.НомерЗаписи,
		|	СведенияДляОценкиПенсионныхПравСЗВК.ВидСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа.Код КАК КодСтажаКод,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Лет,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Месяцев,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Дней
		|ИЗ
		|	РегистрСведений.СведенияДляОценкиПенсионныхПравСЗВК КАК СведенияДляОценкиПенсионныхПравСЗВК
		|
		|ГДЕ
		|	СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо В(&МассивФизЛиц)";
		
	КонецЕсли;
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 			  
	//ТаблицаЗаписей =  РезультатВыборкиЗаписей.Выгрузить();
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
	
	//Для имеющихся физлиц запросим записи о стаже
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизЛиц",МассивФизЛиц);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтажеДляСЗВК.ФизЛицо,
	|	ЗаписиОСтажеДляСЗВК.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтажеДляСЗВК.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтажеДляСЗВК.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтажеДляСЗВК
	|
	|ГДЕ
	|	ЗаписиОСтажеДляСЗВК.ФизЛицо В(&МассивФизЛиц)";
	ТаблицаЗаписейОСтаже = Запрос.Выполнить().Выгрузить();
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ТерриториальныеУсловия");
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ОсобыеУсловияТруда");
	ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ОснованиеВыслугиЛет");
	
	// Таблица собщений об ошибках
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Запись");
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждого физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ФизЛицо") цикл
		
		Если ВыборкаЗаписей.НомерЗаписи = NULL Тогда
			Продолжить;//Если записей нет, то пропустим физлицо
		КонецЕсли;	
		
		ФизЛицо = ВыборкаЗаписей.ФизЛицо;
		
		КоличествоЗаписейОбОбщемТрудовомСтаже =0; 
		КоличествоЗаписейТЕРР =0; 
		КоличествоЗаписейОСОБ =0; 
		КоличествоЗаписейВЫСЛ =0; 
		СписокПроверенныхКодовСтажа = Новый СписокЗначений;
		
		//Для Каждого Запись Из НайдСтрокиСведений цикл
		Пока ВыборкаЗаписей.Следующий() цикл
			
			Запись = ВыборкаЗаписей;
			
			НачалоСообщения = "";
			
			Если ПустаяСтрока(Строка(Запись.ВидСтажа)) Тогда
				СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Не указан вид стажа!");
				Продолжить;
			КонецЕсли;	 
			
			Если (Запись.Лет + Запись.Месяцев + Запись.Дней) = 0 Тогда
				СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Значения реквизитов ""Лет, Месяцев, Дней"" не должны одновременно равняться нулю!");
			КонецЕсли;
			
			Если Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж Тогда
				
				//Проверка записей об общем стаже
				КоличествоЗаписейОбОбщемТрудовомСтаже = КоличествоЗаписейОбОбщемТрудовомСтаже + 1;
				Если КоличествоЗаписейОбОбщемТрудовомСтаже > 1 Тогда
					СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Записей об общем стаже должно быть не больше одной!");
				КонецЕсли;	 
				
			Иначе
				
				//Проверка кода стажа 
				
				Если Запись.КодСтажа = Неопределено Тогда
					
					СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Не указан код стажа!");
					
				Иначе//Код стажа заполнен
					
					КлючПоискаДублей = ""+Запись.ВидСтажа+СокрЛП(Запись.КодСтажаКод);
					Если СписокПроверенныхКодовСтажа.НайтиПоЗначению(КлючПоискаДублей) <> Неопределено Тогда
						СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный вид стажа """+Запись.ВидСтажа+""" и код стажа """+СокрЛП(Запись.КодСтажаКод) +""" не должны повторяться!");
					Иначе	
						СписокПроверенныхКодовСтажа.Добавить(КлючПоискаДублей);
					КонецЕсли;	
					СтруктураПоискаСтрокСтажа = Новый Структура;
					СтруктураПоискаСтрокСтажа.Вставить("ФизЛицо",ФизЛицо);
					
					//Проверка записей ТЕРР
					Если Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия Тогда	
						
						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ТерриториальныеУсловия") Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код территориального стажа не соответствует классификатору!");
						КонецЕсли;	 
						
						КоличествоЗаписейТЕРР = КоличествоЗаписейТЕРР +1;
						Если КоличествоЗаписейТЕРР > 10 Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по территориальным условиям должно быть не более 10!");
						КонецЕсли;	 
						
						СтруктураПоискаСтрокСтажа.Вставить("ТерриториальныеУсловия",Запись.КодСтажа);
						
					ИначеЕсли Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда Тогда	
						
						//Проверка записей ОСОБ
						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ОсобыеУсловияТруда") Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код условий труда не соответствует классификатору!");
						КонецЕсли;	 
						
						КоличествоЗаписейОСОБ = КоличествоЗаписейОСОБ +1;
						Если КоличествоЗаписейОСОБ > 10 Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по особым условиям труда должно быть не более 10!");
						КонецЕсли;	 
						
						СтруктураПоискаСтрокСтажа.Вставить("ОсобыеУсловияТруда",Запись.КодСтажа);
					ИначеЕсли Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет Тогда	
						
						//Проверка записей ВЫСЛ
						Если ТипЗнч(Запись.КодСтажа)<>Тип("СправочникСсылка.ОснованияВыслугиЛет") Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код выслуги лет не соответствует классификатору!");
						КонецЕсли;	 
						
						КоличествоЗаписейВЫСЛ = КоличествоЗаписейВЫСЛ +1;
						Если КоличествоЗаписейВЫСЛ > 10 Тогда
							СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Количество записей с расчетом стажа по выслуге лет должно быть не более 10!");
						КонецЕсли;	 
						
						СтруктураПоискаСтрокСтажа.Вставить("ОснованиеВыслугиЛет",Запись.КодСтажа);
					КонецЕсли;	
					
					НайдМассивСтрокСтажа = ТаблицаЗаписейОСтаже.НайтиСтроки(СтруктураПоискаСтрокСтажа);
					
					Если НайдМассивСтрокСтажа.Количество() = 0 Тогда
						СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Указанный код стажа """+Запись.КодСтажа +""" не указан ни в одном из периодов трудовой деятельности!");
					КонецЕсли;	 
					
				КонецЕсли;	 
				
			КонецЕсли;	 
			
		КонецЦикла;//По записям набора
	КонецЦикла;	//По ФизЛицам
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке сведений для оценки пенсионных прав");
		Возврат Ложь;
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-4

// Выполняет авторасчет стажа для формы СЗВ4
//
Функция СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(ОбособленноеПодразделение, Год, СписокФизЛиц = Неопределено, Знач ДатаОкончанияПериодаЗаполнения = Неопределено) Экспорт
	
	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(Дата(Год,1,1));
	
	Если ДатаОкончанияПериодаЗаполнения = Неопределено Тогда
		ДатаОкончанияПериодаЗаполнения = КонецГода;
	КонецЕсли;
	ДатаОкончанияПериодаЗаполнения = КонецДня(ДатаОкончанияПериодаЗаполнения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокФизЛиц",				СписокФизЛиц);
	Запрос.УстановитьПараметр("Год",						Год);
	Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",					ДатаОкончанияПериодаЗаполнения);
	Запрос.УстановитьПараметр("НачалоСледующегоГода",		ДатаОкончанияПериодаЗаполнения + 1);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначенияЗК.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбособленноеПодразделение.ТерриториальныеУсловияПФР);
	Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 24.08.2011 15:41 
	// В запросe добавлено поле AVTШтатноеРасписание для соединения с регистром сведений ШтатноеРасписание и
	// закомментированы поля ПодразделениеОрганизации и Должность, так как эти измерения из регистра удалены.
	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	&НачалоГода КАК ДатаС,
	|	РаботникиОрганизацииСрезПоследних.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.AVTШтатноеРасписаниеЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.AVTШтатноеРасписание
	|	КОНЕЦ КАК AVTШтатноеРасписание,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения
	|ПОМЕСТИТЬ ВТДатыДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников() + "
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
			|	РаботникиОрганизации.AVTШтатноеРасписание,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.ПериодЗавершения
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	(&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("РаботникиОрганизации.") + "
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.Период > &НачалоГода
	|	И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.Физлицо,
	|	Работники.ПериодЗавершения,
	|	Работники.Организация,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ДолжностьЗавершения,
	|	Работники.AVTШтатноеРасписаниеЗавершения,
	|	Работники.ГрафикРаботыЗавершения,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (&НеОтбиратьДанныеПоФизлицу
	|				ИЛИ ПериодыПерекрытия.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|	И Работники.Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("Работники.") + "
	|	И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|	И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И Работники.ПериодЗавершения > &НачалоГода
	|	И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыДвижений.Сотрудник КАК Сотрудник,
	|	ПериодыДвижений.ФизЛицо КАК ФизЛицо,
	|	ПериодыДвижений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПериодыДвижений.Должность КАК Должность,
	|	ПериодыДвижений.ГрафикРаботы,
	|	ПериодыДвижений.ДатаС,
	|	ПериодыДвижений.ДатаПо,
	|	ПериодыДвижений.ПериодЗавершения,
		|	ПериодыДвижений.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
	|	ДатыУвольнения.ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТПериодыДвижений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНазначений1.Сотрудник КАК Сотрудник,
	|		ДатыНазначений1.Физлицо КАК ФизЛицо,
	|		ДатыНазначений1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность КАК Должность,
	|		ДатыНазначений1.ГрафикРаботы КАК ГрафикРаботы,
	|		ДатыНазначений1.ДатаС КАК ДатаС,
	|		ВЫБОР
	|			КОГДА ДатыНазначений1.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода) > ДатыНазначений1.ПериодЗавершения
	|							ТОГДА ДатыНазначений1.ПериодЗавершения
	|						ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|		КОНЕЦ КАК ДатаПо,
			|		ДатыНазначений1.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
	|		ДатыНазначений1.ПериодЗавершения КАК ПериодЗавершения
	|	ИЗ
	|		ВТДатыДвижений КАК ДатыНазначений1
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|			ПО ДатыНазначений1.Сотрудник = ДатыНазначений2.Сотрудник
	|				И (ДатыНазначений2.Организация = &ГоловнаяОрганизация)
	|				И (ДатыНазначений2.Период > ДатыНазначений1.ДатаС)
	|				И (ДатыНазначений2.Период < &НачалоСледующегоГода)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыНазначений1.Сотрудник,
	|		ДатыНазначений1.Физлицо,
	|		ДатыНазначений1.ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность,
	|		ДатыНазначений1.ГрафикРаботы,
	|		ДатыНазначений1.ДатаС,
			|		ДатыНазначений1.AVTШтатноеРасписание,
	|		ДатыНазначений1.ПериодЗавершения) КАК ПериодыДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыУвольнения
	|		ПО ПериодыДвижений.Сотрудник = ДатыУвольнения.Сотрудник
	|			И (ДатыУвольнения.Организация = &ГоловнаяОрганизация)
	|			И ПериодыДвижений.ДатаПо = ДатыУвольнения.Период
	|			И (ДатыУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|ИНДЕКСИРОВАТЬ ПО
			|	AVTШтатноеРасписание,
	|	ПодразделениеОрганизации,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыПостоянства.Сотрудник КАК Сотрудник,
	|	ПериодыПостоянства.ФизЛицо КАК ФизЛицо,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажа,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	ПериодыПостоянства.ТерриториальныеУсловия,
	|	ПериодыПостоянства.ОсобыеУсловияТруда,
	|	ПериодыПостоянства.ГрафикРаботы,
	|	ПериодыПостоянства.КодПозицииСписка,
	|	ЕСТЬNULL(ПериодыПостоянства.ОснованиеВыслугиЛет, ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)) КАК ОснованиеВыслугиЛет,
	|	ПериодыПостоянства.НазначениеС КАК ДатаНачалаПериода,
	|	ДОБАВИТЬКДАТЕ(ПериодыПостоянства.НазначениеПо, ДЕНЬ, -1) КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТКадровыеПериоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачалаПериодов.Сотрудник КАК Сотрудник,
	|		НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|		НачалаПериодов.Должность КАК Должность,
	|		НачалаПериодов.ГрафикРаботы КАК ГрафикРаботы,
	|		НачалаПериодов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|		НачалаПериодов.КодПозицииСписка КАК КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|		НачалаПериодов.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|		НачалаПериодов.ДатаС КАК НазначениеС,
	|		ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ДатаС), &НачалоСледующегоГода) КАК НазначениеПо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник КАК Сотрудник,
	|			ПериодыНазначений.ФизЛицо КАК ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ПериодыНазначений.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			ПериодыНазначений.Должность КАК Должность,
	|			ПериодыНазначений.КодПозицииСписка КАК КодПозицииСписка,
	|			ПериодыНазначений.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|			ПериодыНазначений.ДатаС КАК ДатаС,
	|			ЕСТЬNULL(ШР.ОсобыеУсловияТруда, ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)) КАК ОсобыеУсловияТруда
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник КАК Сотрудник,
	|				ПериодыНазначений.Физлицо КАК ФизЛицо,
	|				ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКТМО = """"
	|							И ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ КАК ТерриториальныеУсловия,
	|				ПериодыНазначений.Должность КАК Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка КАК КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|				ПериодыНазначений.ДатаС КАК ДатаС,
			|				ПериодыНазначений.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
	|				МАКСИМУМ(ШР.Период) КАК Период
	|			ИЗ
	|				ВТДатыДвижений КАК ПериодыНазначений
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период <= ПериодыНазначений.ДатаС)
		|					и ПериодыНазначений.AVTШтатноеРасписание = ШР.AVTШтатноеРасписание
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.Физлицо,
	|				ПериодыНазначений.ПодразделениеОрганизации,
	|				ВЫБОР
		|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКТМО = """"
	|							И ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ,
	|				ПериодыНазначений.Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы,
	|				ПериодыНазначений.ДатаС) КАК ПериодыНазначений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период = ПериодыНазначений.Период)
	|				и ПериодыНазначений.AVTШтатноеРасписание = ШР.AVTШтатноеРасписание
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник,
	|			ПериодыНазначений.ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации,
	|			ВЫБОР
	|				КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКТМО = """"
	|						И ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|					ТОГДА &ТерриториальныеУсловия
	|				ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|			КОНЕЦ,
	|			ПериодыНазначений.Должность,
	|			ПериодыНазначений.Должность.КодПозицииСписка,
	|			ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы,
	|			ШР.Период,
	|			ШР.ОсобыеУсловияТруда
	|		ИЗ
	|			ВТПериодыДвижений КАК ПериодыНазначений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
			|				и ПериодыНазначений.AVTШтатноеРасписание = ШР.AVTШтатноеРасписание
	|					И (ШР.Период > ПериодыНазначений.ДатаС)
	|					И (ШР.Период < ПериодыНазначений.ДатаПо
	|						ИЛИ ШР.Период = ПериодыНазначений.ДатаПо
	|							И ПериодыНазначений.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))) КАК НачалаПериодов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|				РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизации.Период КАК ДатаС
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ГДЕ
	|				РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|				И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|				И РаботникиОрганизации.Период > &НачалоГода
	|				И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				Работники.Сотрудник,
	|				Работники.Сотрудник.Физлицо,
	|				Работники.ПериодЗавершения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|					ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|						И (ПериодыПерекрытия.Период > Работники.Период)
	|						И (ПериодыПерекрытия.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|						И (&НеОтбиратьДанныеПоФизлицу
	|							ИЛИ ПериодыПерекрытия.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|						И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|			ГДЕ
	|				Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И Работники.Организация = &ГоловнаяОрганизация
	|				И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|				И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|				И Работники.ПериодЗавершения > &НачалоГода
	|				И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.ФизЛицо,
	|				ШР.Период
	|			ИЗ
	|				ВТПериодыДвижений КАК ПериодыНазначений
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
			|					и ПериодыНазначений.AVTШтатноеРасписание = ШР.AVTШтатноеРасписание
	|						И (ШР.Период > ПериодыНазначений.ДатаС)
	|						И (ШР.Период <= ПериодыНазначений.ДатаПо)) КАК ОкончанияПериодов
	|			ПО НачалаПериодов.Сотрудник = ОкончанияПериодов.Сотрудник
	|				И НачалаПериодов.ДатаС < ОкончанияПериодов.ДатаС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачалаПериодов.Сотрудник,
	|		НачалаПериодов.ФизЛицо,
	|		НачалаПериодов.ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия,
	|		НачалаПериодов.Должность,
	|		НачалаПериодов.КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет,
	|		НачалаПериодов.ГрафикРаботы,
	|		НачалаПериодов.ДатаС,
	|		НачалаПериодов.ОсобыеУсловияТруда) КАК ПериодыПостоянства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНЕСторнированныеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			ПериодДействия МЕЖДУ &НачалоГода И &КонецГода
	|				И Организация = &ГоловнаяОрганизация
	|				И ВидРасчета.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТДатыДвижений.Сотрудник
	|					ИЗ
	|						ВТДатыДвижений)) КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНачисленияСУчетомСторнирования
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ NULL 
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.ФизЛицо КАК ФизЛицо,
	|		Начисления.Сотрудник КАК Сотрудник,
	|		Начисления.ВидРасчета КАК ВидРасчета,
	|		Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|		СУММА(ВЫБОР
	|				КОГДА Начисления.Сторно
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СуммаСторно
	|	ИЗ
	|		ВТНЕСторнированныеНачисления КАК Начисления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ФизЛицо,
	|		Начисления.Сотрудник,
	|		Начисления.ВидРасчета,
	|		Начисления.ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4) КАК Начисления
	|ГДЕ
	|	Начисления.СуммаСторно > 0
	|
	|ОБЪЕДИНИТЬ	
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|		ИНАЧЕ Начисления.ПериодДействияНачало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияНачало, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|ГДЕ
	|	(НЕ ТСторно.ВидРасчета ЕСТЬ NULL )
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1),
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|			И (ТСторно.ПериодДействияНачало > Начисления.ПериодДействияНачало)
	|			И (ТСторно.ПериодДействияКонец < Начисления.ПериодДействияКонец)
	|ГДЕ
	|	(НЕ ТСторно.ВидРасчета ЕСТЬ NULL )
	|	И (НЕ Начисления.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	ВидСтажаСЗВ4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияНачало >= КадровыеПериоды.ДатаНачалаПериода
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ КадровыеПериоды.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияКонец <= КадровыеПериоды.ДатаОкончанияПериода
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ КадровыеПериоды.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|	КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|	КадровыеПериоды.Сотрудник КАК Сотрудник,
	|	КадровыеПериоды.ОбособленноеПодразделение,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 28.06.2011 15:53 
	|	КадровыеПериоды.ГрафикРаботы.AVT_ПроизводственныйКалендарь КАК Календарь,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	КадровыеПериоды.Год
	|ПОМЕСТИТЬ ВТОплаченныеПериодыРаботы
	|ИЗ
	|	ВТКадровыеПериоды КАК КадровыеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК Начисления
	|		ПО КадровыеПериоды.Сотрудник = Начисления.Сотрудник
	|			И (Начисления.ПериодДействияНачало МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода
	|				ИЛИ Начисления.ПериодДействияКонец МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
	|			И (Начисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК ПовторныеНачисления
	|		ПО КадровыеПериоды.ФизЛицо = ПовторныеНачисления.ФизЛицо
	|			И (ПовторныеНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (ПовторныеНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> Начисления.ВидСтажаСЗВ4)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|ГДЕ
	|	(НЕ(Начисления.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|				И ЕСТЬNULL(ПовторныеНачисления.ВидСтажаСЗВ4, """") = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЕТИ)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтдельноСтоящиеПериоды.ФизЛицо,
	|	ОтдельноСтоящиеПериоды.Сотрудник,
	|	ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4,
	|	ОтдельноСтоящиеПериоды.ОбособленноеПодразделение,
	|	ОтдельноСтоящиеПериоды.Год,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 28.06.2011 16:41 
	|	ОтдельноСтоящиеПериоды.Календарь,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаНачалаПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаОкончанияПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТОтредактированныеОплаченныеПериоды
	|ИЗ
	|	ВТОплаченныеПериодыРаботы КАК ОтдельноСтоящиеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ПересекающиеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаНачалаПериода,
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаОкончанияПериода,
	|			ИсходныеПериоды.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|			ИсходныеПериоды.Сотрудник КАК Сотрудник,
	|			ИсходныеПериоды.ФизЛицо КАК ФизЛицо,
	|			ИсходныеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			ИсходныеПериоды.Год КАК Год
	|		ИЗ
	|			ВТОплаченныеПериодыРаботы КАК ИсходныеПериоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОплаченныеПериоды1.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|					ОплаченныеПериоды1.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|					ОплаченныеПериоды1.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|					ОплаченныеПериоды1.Сотрудник КАК Сотрудник,
	|					ОплаченныеПериоды1.ФизЛицо КАК ФизЛицо,
	|					ОплаченныеПериоды1.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|					ОплаченныеПериоды1.Год КАК Год,
	|					1 КАК НомерИнтервала
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды1
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды2.ДатаНачалаПериода,
	|					ОплаченныеПериоды2.ДатаОкончанияПериода,
	|					ОплаченныеПериоды2.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды2.Сотрудник,
	|					ОплаченныеПериоды2.ФизЛицо,
	|					ОплаченныеПериоды2.ОбособленноеПодразделение,
	|					ОплаченныеПериоды2.Год,
	|					2
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды2
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды3.ДатаНачалаПериода,
	|					ОплаченныеПериоды3.ДатаОкончанияПериода,
	|					ОплаченныеПериоды3.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды3.Сотрудник,
	|					ОплаченныеПериоды3.ФизЛицо,
	|					ОплаченныеПериоды3.ОбособленноеПодразделение,
	|					ОплаченныеПериоды3.Год,
	|					3
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды3) КАК ПересекающиеПериоды
	|				ПО ИсходныеПериоды.ВидСтажаСЗВ4 = ПересекающиеПериоды.ВидСтажаСЗВ4
	|					И ИсходныеПериоды.Сотрудник = ПересекающиеПериоды.Сотрудник
	|					И ИсходныеПериоды.ОбособленноеПодразделение = ПересекающиеПериоды.ОбособленноеПодразделение
	|					И ИсходныеПериоды.Год = ПересекающиеПериоды.Год
	|					И ИсходныеПериоды.ДатаНачалаПериода > ПересекающиеПериоды.ДатаНачалаПериода
	|					И ИсходныеПериоды.ДатаНачалаПериода < ПересекающиеПериоды.ДатаОкончанияПериода) КАК ПересеченияПериодов
	|		ПО ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4 = ПересеченияПериодов.ВидСтажаСЗВ4
	|			И ОтдельноСтоящиеПериоды.Сотрудник = ПересеченияПериодов.Сотрудник
	|			И ОтдельноСтоящиеПериоды.ОбособленноеПодразделение = ПересеченияПериодов.ОбособленноеПодразделение
	|			И ОтдельноСтоящиеПериоды.Год = ПересеченияПериодов.Год
	|			И ОтдельноСтоящиеПериоды.ДатаНачалаПериода <= ПересеченияПериодов.ДатаНачалаПериода
	|			И ОтдельноСтоящиеПериоды.ДатаОкончанияПериода >= ПересеченияПериодов.ДатаОкончанияПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, 1) КАК СледующаяДатаКалендаря,
	|	ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, -1) КАК ПредыдущаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 1
	|			ТОГДА ""ДЕКРЕТ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 2
	|			ТОГДА ""ДЕТИ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.Год КАК Год,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТДниСтажа
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НефильтрованныеДниСтажа.ДатаКалендаря КАК ДатаКалендаря,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Декрет)
	|				ТОГДА 1
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Дети)
	|				ТОГДА 2
	|			ИНАЧЕ 3
	|		КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ТерриториальныеУсловия
	|		КОНЕЦ КАК ТерриториальныеУсловия,
	|		НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|		НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|		НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		НефильтрованныеДниСтажа.Год КАК Год,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОсобыеУсловияТруда
	|		КОНЕЦ КАК ОсобыеУсловияТруда,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.КодПозицииСписка
	|		КОНЕЦ КАК КодПозицииСписка,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|		КОНЕЦ КАК ОснованиеВыслугиЛет
	|	ИЗ
	|		(ВЫБРАТЬ 
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|			ВТКадровыеПериоды.ФизЛицо,
	|			ВТКадровыеПериоды.Сотрудник,
	|
	|			ВТКадровыеПериоды.ТретийПараметрИсчисляемогоСтажа,
	|			ВТКадровыеПериоды.ОбособленноеПодразделение,
	|			ВТКадровыеПериоды.Год,
	|			ВТКадровыеПериоды.ТерриториальныеУсловия,
	|			ВТКадровыеПериоды.ОсобыеУсловияТруда,
	|			ВТКадровыеПериоды.ГрафикРаботы,
	|			ВТКадровыеПериоды.КодПозицииСписка,
	|			ВТКадровыеПериоды.ОснованиеВыслугиЛет,
	|	 			
	|	 		МАКСИМУМ(ВидыСтажа.Порядок) КАК ПорядковыйНомерВидаСтажа
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПериоды КАК ВТКадровыеПериоды
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ВТКадровыеПериоды.ДатаНачалаПериода И ВТКадровыеПериоды.ДатаОкончанияПериода)
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 28.06.2011 15:39 
	|			И РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ВТКадровыеПериоды.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеОплаченныеПериоды КАК ВТОтредактированныеОплаченныеПериоды
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ВТОтредактированныеОплаченныеПериоды.ДатаНачалаПериода И ВТОтредактированныеОплаченныеПериоды.ДатаОкончанияПериода)
	|			И ВТОтредактированныеОплаченныеПериоды.Сотрудник = ВТКадровыеПериоды.Сотрудник
	|			И ВТОтредактированныеОплаченныеПериоды.ОбособленноеПодразделение = ВТКадровыеПериоды.ОбособленноеПодразделение
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 28.06.2011 16:42 
	|			И РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ВТОтредактированныеОплаченныеПериоды.Календарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|		ПО ВидыСтажа.Ссылка = ВТОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4
	|		
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.Год = &Год
	|				
	|	И		(НЕ ЕСТЬNULL(ВТКадровыеПериоды.Сотрудник, ВТОтредактированныеОплаченныеПериоды.Сотрудник) ЕСТЬ NULL )
	|		И ЕСТЬNULL(ВТОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4, """") <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|			
	|		СГРУППИРОВАТЬ ПО
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|			ВТКадровыеПериоды.ФизЛицо,
	|			ВТКадровыеПериоды.Сотрудник,
	|
	|			ВТКадровыеПериоды.ТретийПараметрИсчисляемогоСтажа,
	|			ВТКадровыеПериоды.ОбособленноеПодразделение,
	|			ВТКадровыеПериоды.Год,
	|			ВТКадровыеПериоды.ТерриториальныеУсловия,
	|			ВТКадровыеПериоды.ОсобыеУсловияТруда,
	|			ВТКадровыеПериоды.ГрафикРаботы,
	|			ВТКадровыеПериоды.КодПозицииСписка,
	|			ВТКадровыеПериоды.ОснованиеВыслугиЛет
	|		) КАК НефильтрованныеДниСтажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|		Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|		ПО ВидыСтажа.Порядок = НефильтрованныеДниСтажа.ПорядковыйНомерВидаСтажа
	|
	|ГДЕ
	|	НефильтрованныеДниСтажа.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|            ) КАК НефильтрованныеДниСтажа
	|СГРУППИРОВАТЬ ПО
	|	НефильтрованныеДниСтажа.Год,
	|	НефильтрованныеДниСтажа.Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо,
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ПредыдущаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниСтажа.ДатаКалендаря,
	|	ДниСтажа.СледующаяДатаКалендаря КАК СледующаяДатаКалендаря,
	|	ДниСтажа.ПредыдущаяДатаКалендаря,
	|	ДниСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ДниСтажа.ФизЛицо КАК ФизЛицо,
	|	ДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДниСтажа.Год КАК Год,
	|	ДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	ДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТСледующиеДниСтажа
	|ИЗ
	|	ВТДниСтажа КАК ДниСтажа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	СледующаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК НачалоПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.Год,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТНачалаПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСледующиеДниСтажа КАК ПредыдущийДень
	|		ПО ТекущийДень.ДатаКалендаря = ПредыдущийДень.СледующаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = ПредыдущийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = ПредыдущийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = ПредыдущийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = ПредыдущийДень.ОбособленноеПодразделение
	|			И ТекущийДень.Год = ПредыдущийДень.Год
	|			И ТекущийДень.ОсобыеУсловияТруда = ПредыдущийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = ПредыдущийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = ПредыдущийДень.ОснованиеВыслугиЛет
	|ГДЕ
	|	ПредыдущийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК ОкончаниеПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.Год,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТОкончанияПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниСтажа КАК СледующийДень
	|		ПО ТекущийДень.ДатаКалендаря = СледующийДень.ПредыдущаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = СледующийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = СледующийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = СледующийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = СледующийДень.ОбособленноеПодразделение
	|			И ТекущийДень.Год = СледующийДень.Год
	|			И ТекущийДень.ОсобыеУсловияТруда = СледующийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = СледующийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = СледующийДень.ОснованиеВыслугиЛет
	|ГДЕ
	|	СледующийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТНачалаПериодов.НачалоПериода КАК ДатаНачалаПериода,
	|	ЕСТЬNULL(МИНИМУМ(ВТОкончанияПериодов.ОкончаниеПериода), ВТНачалаПериодов.НачалоПериода) КАК ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ТерриториальныеУсловия
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВТНачалаПериодов.ФизЛицо КАК ФизЛицо,
	|	ВТНачалаПериодов.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ВТНачалаПериодов.Год,
	|	&НачалоГода КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ОсобыеУсловияТруда
	|	КОНЕЦ КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.КодПозицииСписка
	|	КОНЕЦ КАК КодПозицииСписка,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""ДЕКРЕТ"")
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ОснованиеВыслугиЛет
	|	КОНЕЦ КАК ОснованиеВыслугиЛет
	|ИЗ
	|	ВТНачалаПериодов КАК ВТНачалаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкончанияПериодов КАК ВТОкончанияПериодов
	|		ПО ВТНачалаПериодов.ТерриториальныеУсловия = ВТОкончанияПериодов.ТерриториальныеУсловия
	|			И ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ВТОкончанияПериодов.ТретийПараметрИсчисляемогоСтажа
	|			И ВТНачалаПериодов.ФизЛицо = ВТОкончанияПериодов.ФизЛицо
	|			И ВТНачалаПериодов.ОбособленноеПодразделение = ВТОкончанияПериодов.ОбособленноеПодразделение
	|			И ВТНачалаПериодов.Год = ВТОкончанияПериодов.Год
	|			И ВТНачалаПериодов.ОсобыеУсловияТруда = ВТОкончанияПериодов.ОсобыеУсловияТруда
	|			И ВТНачалаПериодов.КодПозицииСписка = ВТОкончанияПериодов.КодПозицииСписка
	|			И ВТНачалаПериодов.ОснованиеВыслугиЛет = ВТОкончанияПериодов.ОснованиеВыслугиЛет
	|			И ВТНачалаПериодов.НачалоПериода <= ВТОкончанияПериодов.ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНачалаПериодов.НачалоПериода,
	|	ВТНачалаПериодов.ТерриториальныеУсловия,
	|	ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВТНачалаПериодов.ФизЛицо,
	|	ВТНачалаПериодов.ОбособленноеПодразделение,
	|	ВТНачалаПериодов.Год,
	|	ВТНачалаПериодов.ОсобыеУсловияТруда,
	|	ВТНачалаПериодов.КодПозицииСписка,
	|	ВТНачалаПериодов.ОснованиеВыслугиЛет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ДатаНачалаПериода";
	
	//
	ПериодыДоговоровТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо КАК Физлицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	&НачалоГода КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКТМО = """"
	|				И ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКАТО = """"
	|			ТОГДА &ТерриториальныеУсловия
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка) КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка) КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания < &НачалоСледующегоГода
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания
	|		ИНАЧЕ &КонецГода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	ДатаОкончанияПериода,
	|	ДатаНачалаПериода";
	
	
	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
	
	// Удалим из таблицы стажа незначимые записи:
	//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Запрос.Текст = ПериодыДоговоровТекст;
	ТаблицаСтажаПоДоговорам = Запрос.Выполнить().Выгрузить();
	
	Н = ТаблицаСтажаПоДоговорам.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н];
		ПредшествующаяЗапись = ТаблицаСтажаПоДоговорам[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода <= КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи идут друг за другом или пересекаются 
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = Макс(ТекущаяЗапись.ДатаОкончанияПериода, ПредшествующаяЗапись.ДатаОкончанияПериода); 
			ПредшествующаяЗапись.ДатаНачалаПериода = Мин(ТекущаяЗапись.ДатаНачалаПериода, ПредшествующаяЗапись.ДатаНачалаПериода); 
			ТаблицаСтажаПоДоговорам.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажаПоДоговорам.Сортировать("ФизЛицо,ДатаНачалаПериода");
	ПредшествующееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивСтрок = Новый Массив;
	СтрокСтажа = 0;
	СтруктураПоиска = Новый Структура("ФизЛицо");
	Н = ТаблицаСтажаПоДоговорам.Количество();
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н - 1];
		
		Если ТекущаяЗапись.ФизЛицо <> ПредшествующееФизЛицо Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяЗапись);
			МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
			ПредшествующееФизЛицо = ТекущаяЗапись.ФизЛицо;
		КонецЕсли;
		
		СтрокСтажа = МассивСтрок.Количество();
		Если СтрокСтажа = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСтажа.Добавить(),ТекущаяЗапись);
			Н = Н - 1;
			Продолжить;
		КонецЕсли;
		
		ДатаНачалаПериода = ТекущаяЗапись.ДатаНачалаПериода;
		ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
		
		Для Сч = 1 По СтрокСтажа Цикл
			
			СтрокаСтажа = МассивСтрок[СтрокСтажа - Сч];
			Если СтрокаСтажа.ДатаНачалаПериода > ДатаОкончанияПериода Тогда
			ИначеЕсли СтрокаСтажа.ДатаНачалаПериода > ДатаНачалаПериода Тогда
				Если СтрокаСтажа.ДатаОкончанияПериода < ДатаОкончанияПериода Тогда
					НоваяСтрока = ТаблицаСтажа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
					НоваяСтрока.ДатаНачалаПериода = КонецДня(СтрокаСтажа.ДатаОкончанияПериода) + 1;
					НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
				КонецЕсли;
				ДатаОкончанияПериода = НачалоДня(СтрокаСтажа.ДатаНачалаПериода - 1);
			Иначе
				Если СтрокаСтажа.ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
					ДатаНачалаПериода = КонецДня(СтрокаСтажа.ДатаОкончанияПериода) + 1;
				КонецЕсли;
				Прервать;
			КонецЕсли;
			МассивСтрок.Удалить(СтрокСтажа - Сч);
		КонецЦикла;
		
		Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
			НоваяСтрока = ТаблицаСтажа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
			НоваяСтрока.ДатаНачалаПериода = ДатаНачалаПериода;
			НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
		КонецЕсли;
		
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	Возврат ТаблицаСтажа;
	
КонецФункции

//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже
Функция СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись, ОсновнаяЗапись, ВыводитьОрганизацию)
	
	ЗаголовокСообщения = "";

	
	Если ВыводитьОрганизацию Тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация: ")+СокрЛП(Запись.ОбособленноеПодразделение) + ", ";
	КонецЕсли;
	
	ЗаголовокСообщения = ЗаголовокСообщения + "Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
	
	Если Запись.НомерДополнительнойЗаписи <> 0 Тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;	
	
	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;
	
	Возврат ЗаголовокСообщения;
	
КонецФункции	 

//Добавляет новую строку в таблицу плохих записей стажа
Процедура СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "", ВыводитьОрганизацию = Истина)
	
	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись, ВыводитьОрганизацию);
	
	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
	
	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Запись);
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
	
КонецПроцедуры 

//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей, ВыводитьОрганизацию = Истина)
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) Тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись, ВыводитьОрганизацию);
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) Тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись, ВыводитьОрганизацию);
		Возврат Ложь;
	КонецЕсли;		
	
	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
	
	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
	
	Если (НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) Тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись, ВыводитьОрганизацию);
		Возврат Ложь;
	КонецЕсли;	 
	
	//Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия Тогда
		Если  НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись, ВыводитьОрганизацию);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	
	
	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда Тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7) Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7!",ОсновнаяЗапись, ВыводитьОрганизацию);
			Возврат Ложь;
		КонецЕсли;
		
		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104) Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда 27-7 может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись, ВыводитьОрганизацию);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;
	
	//Проверка на ввод основания выслуги лет
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
	Основание = Запись.ОснованиеВыслугиЛет;
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) Тогда
		Если ЗначениеЗаполнено(Основание) 
			И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_СМ 
			И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_ГД 
			И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_СМХР 
			И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_ГДХР Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды 27-СМ,27-ГД,27-СМХР или 27-ГДХР (до 2011 г. - 28-СМ,28-ГД,28-СМХР или 28-ГДХР)!",ОсновнаяЗапись, ВыводитьОрганизацию);
			Возврат Ложь;
		КонецЕсли;
	Иначе//В основной записи код выслуги указан
		
		КодВыслугиЛетОсновнойЗаписи = СокрЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
		ОснованиеОсновнойЗаписи = ОсновнаяЗапись.ОснованиеВыслугиЛет;
		
		Если ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_СМ 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_ГД 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_СМХР 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_ГДХР 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ЛЕТИСП
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.САМОЛЕТ 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.СПЕЦАВ 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ОПЫТИСП 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ИСПКЛС1 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ИТСМАВ 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.НОРМАПР 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.РЕАКТИВН
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.НОРМСП Тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет " + КодВыслугиЛетОсновнойЗаписи
			+ Символы.ПС + "в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись, ВыводитьОрганизацию);
			Возврат Ложь;
		Иначе
			
			Если Основание = Справочники.ОснованияВыслугиЛет.Ст28_СМ 
				Или Основание = Справочники.ОснованияВыслугиЛет.Ст28_ГД 
				Или Основание = Справочники.ОснованияВыслугиЛет.Ст28_СМХР 
				Или Основание = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР Тогда
				НачалоКода = Лев(КодВыслугиЛетОсновнойЗаписи,2);
				ПроверочнаяСтрокаКодов = СтрЗаменить(",28-СМ,28-ГД,28-СМХР,28-ГДХР,","28",НачалоКода);
				
			ИначеЕсли Основание = Справочники.ОснованияВыслугиЛет.НОРМАПР 
				Или Основание = Справочники.ОснованияВыслугиЛет.РЕАКТИВН
				Или Основание = Справочники.ОснованияВыслугиЛет.НОРМСП Тогда
				ПроверочнаяСтрокаКодов = ",НОРМАПР,РЕАКТИВН,НОРМСП,";
			Иначе
				ПроверочнаяСтрокаКодов = ",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,";
			КонецЕсли;
			
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,"," + КодВыслугиЛетОсновнойЗаписи + ",",",");
			
			Если ЗначениеЗаполнено(Основание) И Найти(ПроверочнаяСтрокаКодов,"," + КодВыслугиЛетЗаписи + ",") = 0 Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
				+Символы.ПС+"могут быть указаны только следующие коды выслуги: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись, ВыводитьОрганизацию);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

//Выполняет проверку записи стажа на допустимось значений реквизитов между группами
Функция СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("ТаблицаЗначений") Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ИсточникДанных",	СтруктураПараметров);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧ.НомерСтроки КАК НомерСтроки,
		|	ТЧ.ФизЛицо КАК ФизЛицо,
		|	ТЧ.Организация,
		|	ТЧ.КатегорияЗастрахованныхЛиц,
		|	ТЧ.ОтчетныйПериод
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ИсточникДанных КАК ТЧ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц = Записи.КатегорияЗастрахованныхЛиц
		|			И ТЧРаботникиОрг.ФизЛицо = Записи.ФизЛицо
		|			И ТЧРаботникиОрг.ОтчетныйПериод = Записи.ОтчетныйПериод
		|			И ТЧРаботникиОрг.Организация = Записи.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	(Записи.ОсобыеУсловияТруда.Код ЕСТЬ НЕ NULL 
		|			ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ НЕ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
	ИначеЕсли ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО ТЧРаботникиОрг.Ссылка.КатегорияЗастрахованныхЛиц = Записи.КатегорияЗастрахованныхЛиц
		|			И ТЧРаботникиОрг.ФизЛицо = Записи.ФизЛицо
		|			И ТЧРаботникиОрг.Ссылка.ОтчетныйПериод = Записи.ОтчетныйПериод
		|			И ТЧРаботникиОрг.Ссылка.Организация = Записи.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	ТЧРаботникиОрг.Ссылка = &ДокументСсылка
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
	Иначе
		
		Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
		Запрос.УстановитьПараметр("МассивЛет", СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений", СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	(Записи.Год В (&МассивЛет)
		|			ИЛИ Записи.ОтчетныйПериод В (&МассивЛет))
		|	И Записи.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|	И Записи.ФизЛицо В(&МассивФизлиц)
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
		
	КонецЕсли;	   
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ОбособленноеПодразделение") цикл
		Пока Выборка.СледующийПоЗначениюПоля("ОтчетныйПериод") цикл
			Пока Выборка.СледующийПоЗначениюПоля("КатегорияЗастрахованныхЛиц") цикл
				Пока Выборка.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) цикл
					Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
						Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
							
							СтрокаСообщений = "Комбинация значений реквизитов:";
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
							
							Если Не ЗначениеЗаполнено(Выборка.НомерПравила)
								Или СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ" 
								Или Год(Выборка.ОтчетныйПериод) < 2002 И СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД"
								Или Год(Выборка.ОтчетныйПериод) >= 2002 И СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "27-14" Тогда
								СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
								
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
								Продолжить;
								
							КонецЕсли;	
							
							//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
							ФОВДопустимо = Ложь;
							
							СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
							
							//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
							Пока Выборка.Следующий() цикл
								
								ФорматФОВ = Выборка.ФорматФОВ;
								СтрокаОшибкиФормата = "";            	
								ПрошлоПроверку = 0;
								СтрокаЗначенияПараметров = "";
								
								Для Н=1 по 2 цикл
									ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
									
									Если Н=1 Тогда	
										ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
										ПсевдонимПараметра = "Месяцы";
									Иначе
										ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
										ПсевдонимПараметра = "Дни";
									КонецЕсли;	
									
									ПараметрПрошелПроверку = Ложь;
									
									НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
									
									Если (ФорматПараметра = "_") Тогда
										Если (ЗначениеПараметра <> 0) Тогда//ПУСТОЕ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "Г") Тогда
										Если (ЗначениеПараметра > 100) Тогда//ГОДЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "М") Тогда 
										Если (ЗначениеПараметра > 11) Тогда//МЕСЯЦЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "Д") Тогда 
										Если (ЗначениеПараметра > 30) Тогда//ДНИ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "ч") Тогда//ЧАСЫ 
										ПараметрПрошелПроверку = ИСТИНА;
									ИначеЕсли (ФорматПараметра = "м") Тогда 
										Если (ЗначениеПараметра > 59) Тогда//МИНУТЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									КонецЕсли;	 
									
									Если ПараметрПрошелПроверку Тогда
										ПрошлоПроверку = ПрошлоПроверку + 1;
									КонецЕсли;	 
									
									СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
								КонецЦикла;
								
								//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
								Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") Тогда//
									ПрошлоПроверку = 0;
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
								КонецЕсли;	
								
								Если ПрошлоПроверку = 2 Тогда
									ФОВДопустимо = Истина;
									Прервать;
								КонецЕсли;
								
								СтрФорматФОВ = ФорматФОВ;
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
								СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
								
								СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
								СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
							КонецЦикла;	// по вариантам формата ФОВ
							
							Если НЕ ФОВДопустимо Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
							КонецЕсли;	 
							
						КонецЦикла;// По дополнительным записям	
					КонецЦикла;// По основным записям	
				КонецЦикла;// По физлицам
			КонецЦикла;	
		КонецЦикла;// По годам	
	КонецЦикла;// По обособленым подразделениям	
	
КонецФункции	 

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-4
// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа
Функция СЗВ4_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, СтруктураПараметров, РезультатВыборкиЗаписей = "", ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ДоступнаРольРасчетчикаРегл = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка",				ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаАктуальности",			СтруктураПараметров.ДатаАктуальности);
		Запрос.УстановитьПараметр("НачалоГода",					НачалоГода(СтруктураПараметров.ДатаАктуальности));
		Запрос.УстановитьПараметр("Организация",				СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		СтруктураПараметров.ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ТрудовойДоговор",			Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧ.НомерСтроки,
		|	ТЧ.ФизЛицо КАК ФизЛицо,
		|	ТЧ.АдресДляИнформирования,
		|	ТЧ.ФизЛицо.Наименование,
		|	ТЧ.ФизЛицо.СтраховойНомерПФР,
		|	ТЧ.Ссылка.Год,
		|	ТЧ.Ссылка.Организация
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧ
		|ГДЕ
		|	ТЧ.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И (СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация)
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		// В запросе кроме записей стажа выбираются данные, необходимые документу: ФИО физлиц, адреса, данные об отчислениях
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
		|	ТЧРаботникиОрг.ФизЛицоСтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЕСТЬNULL(ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа, 0) КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЕСТЬNULL(ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа, 0) КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ТЧРаботникиОрг.ФизЛицоНаименование) КАК ФизЛицоНаименование,"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,", "") + "
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаАктуальности,
		|				ФизЛицо В
		|					(ВЫБРАТЬ
		|						ТЧ.ФизЛицо
		|					ИЗ
		|						ВТДанныеДокумента КАК ТЧ)) КАК ФИОФизЛицСрезПоследних
		|		ПО ТЧРаботникиОрг.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК РаботникиОрганизации
		|		ПО ТЧРаботникиОрг.НомерСтроки = РаботникиОрганизации.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ПО ТЧРаботникиОрг.ФизЛицо = ЗаписиОСтаже.ФизЛицо
		|			И ТЧРаботникиОрг.Год = ЗаписиОСтаже.Год
		|			И ТЧРаботникиОрг.Организация = ЗаписиОСтаже.ОбособленноеПодразделение"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ТЧРаботникиОрг.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ТЧРаботникиОрг.Год = СуммыВзносов.Год
		|			И ТЧРаботникиОрг.Организация = СуммыВзносов.ОбособленноеПодразделение", "") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(ЗаписиОСтаже.ОбособленноеПодразделение, """"),
		|	Год,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
		
	Иначе//Инициатором вызова является набор записей
		
		Запрос.УстановитьПараметр("МассивФизЛиц" , СтруктураПараметров.МассивФизЛиц);
		Запрос.УстановитьПараметр("МассивЛет" , СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений" , СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,", "") + "
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ЗаписиОСтаже.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ЗаписиОСтаже.Год = СуммыВзносов.Год
		|			И ЗаписиОСтаже.ОбособленноеПодразделение = СуммыВзносов.ОбособленноеПодразделение", "") + "
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|	И ЗаписиОСтаже.Год В(&МассивЛет)
		|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
	КонецЕсли;	
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждой организации, года и физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ОбособленноеПодразделение") Цикл
		
		ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
		Если ОбособленноеПодразделение = NULL Тогда
			Продолжить;
		КонецЕсли;
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Год") Цикл
			
			Год = ВыборкаЗаписей.Год;
			
			Пока ВыборкаЗаписей.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) Цикл
				
				Если ВыборкаЗаписей.НомерОсновнойЗаписи = NULL Тогда
					Продолжить;//Физлицо не имеет сведений
				КонецЕсли; 
				
				ФизЛицо = ВыборкаЗаписей.ФизЛицо;
				
				// Для проверки неоплаченного стажа
				ВсегоДнейПоСтажу = 0;				
				Если ДоступнаРольРасчетчикаРегл Тогда
					ВсегоНеотработанныхДней = ВыборкаЗаписей.ДнейБолезни + ВыборкаЗаписей.ДнейОтпускаЗаСвойСчет;
				Иначе
					ВсегоНеотработанныхДней = 0;
				КонецЕсли;
				
				
				ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
				
				//Список значений группы реквизитов территориальные условия одной основной записи
				СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
				
				//Список значений кодов условий труда одной основной записи
				СписокУсловияТрудаЗаписи = Новый СписокЗначений;
				
				//Список значений кодов выслуги лет основной записи
				СписокВыслугаЛетЗаписи = Новый СписокЗначений;
				
				ПредыдущийНомерОсновнойЗаписи = 0;
				ПредыдущийНомерДополнительнойЗаписи = 0;
				
				Пока ВыборкаЗаписей.Следующий() Цикл
					
					Запись = ВыборкаЗаписей;
					
					//Организация, физлицо и год должны быть заполнены обязательно
					Если Запись.ОбособленноеПодразделение.Пустая() Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
					КонецЕсли;	
					Если Запись.ФизЛицо.Пустая() Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
					КонецЕсли;	
					Если Запись.Год < 2002 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Расчетный период (год) не может быть менее 2002!");
					КонецЕсли;	
					
					
					// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
					
					//По умолчанию считаем, что запись основная
					ЭтоОсновнаяЗапись = Истина;
					
					//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
					ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
					
					//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
					Если Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
						Если ДополнительнаяЗаписьВозможна Тогда
							ЭтоОсновнаяЗапись = Ложь;
						Иначе
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
						КонецЕсли;	
					ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
					ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
					Иначе//Обе даты заполнены
						
						//Дата начала периода не должна быть ранее 01.01.ГГГГ
						Если Запись.ДатаНачалаПериода < Дата(Год, 01, 01)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее 01.01." + Год + "!");
						КонецЕсли;	 
						
						//Дата окончания периода не должна быть позднее 31.12.ГГГГ
						Если Запись.ДатаОкончанияПериода > Дата(Год, 12, 31)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее 31.12." + Год + "!");
						КонецЕсли;	 
						
						// Начало периода не должно быть позже окончания периода 
						Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
						КонецЕсли;
						
					КонецЕсли;	 
					
					// Проверка записей если сумма взносов равна нулю
					Если ДоступнаРольРасчетчикаРегл 
						И (Запись.НачисленоНаНакопительнуюЧастьПФР + Запись.НачисленоНаСтраховуюЧастьПФР) = 0 Тогда
						
						Если НЕ (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕКРЕТ"
							ИЛИ Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
							
							ВсегоДнейПоСтажу = ВсегоДнейПоСтажу + 
							((Месяц(Запись.ДатаОкончанияПериода) - Месяц(Запись.ДатаНачалаПериода)) * 30
							+ ?(КонецМесяца(Запись.ДатаОкончанияПериода) = КонецДня(Запись.ДатаОкончанияПериода),30, День(Запись.ДатаОкончанияПериода))
							- ?(НачалоМесяца(Запись.ДатаНачалаПериода)= НачалоДня(Запись.ДатаНачалаПериода),0, День(Запись.ДатаНачалаПериода)));
						КонецЕсли;
					КонецЕсли;
					
					
					//Проверка только для основной записи о стаже
					Если ЭтоОсновнаяЗапись Тогда
						
						//Проверка на хронологический порядок записей
						Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
							Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
							КонецЕсли;	 
						КонецЕсли;
						
						//Переустановка текущей основной записи
						ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
						ТекущаяОсновнаяЗапись.Год = Год;
						ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
						ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
						ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
						ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
						ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
						ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
						ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
						ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
						
						СписокТерриториальныеУсловияЗаписи.Очистить();
						СписокУсловияТрудаЗаписи.Очистить();
						СписокВыслугаЛетЗаписи.Очистить();
					КонецЕсли;	 
					
					// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
					
					//Проверка нумерации основных и дополнительных записей
					Если (ЭтоОсновнаяЗапись) Тогда
						ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
						КонецЕсли;
					Иначе
						ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
						Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
						КонецЕсли;
					КонецЕсли;
					
					
					//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
					
					//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
					УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
					
					//Признаки заполнения реквизитов группы "Особые условия труда"
					УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
					УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
					ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
					
					//Признаки заполнения реквизитов группы "Исчисляемый стаж"
					УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
					УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
					ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
					
					//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
					УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
					УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
					ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
					
					//Признаки заполнения реквизитов группы "ВыслугаЛет"
					УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
					ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
					
					
					//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
					
					Если НЕ ЭтоОсновнаяЗапись Тогда
						СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
					КонецЕсли;	 
					
					// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
					
					Если УказаныТерриториальныеУсловия Тогда
						ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
						Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаныОсобыеУсловияТруда Тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаноОснованиеВыслугиЛет Тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
						Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	
					
					//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
					
					КПС = СокрЛП(Запись.КодПозицииСпискаКод);
					
					//Определим, к какому списку принадлежит код позиции
					НазваниеСписка ="";
					Если УказанКодПозицииСписка Тогда 
						
						Если НЕ УказаныОсобыеУсловияТруда Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
						
						ДлинаКПС = СтрДлина(КПС);
						
						Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
							
							Первые2СимволаКПС = Лев(КПС,2);
							Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
								НазваниеСписка = "Список№1";
							ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
								НазваниеСписка = "Список№2";
							Иначе	
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли (ДлинаКПС=5) Тогда
							НазваниеСписка = "ПрочиеСписки";
						Иначе	
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;//УказанКодПозицииСписка	 
					
					Если УказаныОсобыеУсловияТруда Тогда
						
						//Проверки на возможные коды списков для конкретных условий труда
						
						КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
						НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
						
						Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 Тогда
							Если (НазваниеСписка <> "Список№1") Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 Тогда
							
							Если (НЕ УказанКодПозицииСписка) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если (НазваниеСписка = "Список№1") Тогда
								Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  Тогда
									СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
								КонецЕсли;	
							ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						Иначе
							//Для остальных кодов условий труда КПС указываться не должен
							Если УказанКодПозицииСписка Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
						
					КонецЕсли;//УказаныОсобыеУсловияТруда	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
					
					УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
					УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
					УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
					ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
					
					Если УказаноОснованиеВыслугиЛет Тогда
						
						КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
						НачалоСообщения = "Для основания выслуги лет " + КодОснования;
						
						УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
						
						//Медицинские работники
						Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) Тогда
							
						Если ДоляСтавкиУказанаНеверно(Запись.ТретийПараметрВыслугиЛет) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.1 до 2)!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;
							
							//Педагогические работники	
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД Тогда
							
							Если УказанПараметр2 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
							ИначеЕсли ДоляСтавкиУказанаНеверно(Запись.ТретийПараметрВыслугиЛет) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.1 до 2)!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	
							
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК Тогда
							
							Если (УказанПараметр2) или (УказанПараметр3) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Летчики
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)Тогда
							
							Если  УказанПараметр3 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
							КонецЕслИ;	
							
							//Парашютисты	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда	
							
							Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Управление воздушным движением и  инженерно-технический состав 	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) Тогда
							
							Если  УказанПараметр3 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							//Прочие коды выслуги лет	
						Иначе
							Если ПараметрыУказаны Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
					Иначе
						Если ПараметрыУказаны Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
					
					Если УказанТретийПараметрИсчисляемогоСтажа Тогда
						Если (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ") Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
						ИначеЕсли (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
							Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
								| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							Если ((ЗаданаГруппаУсловияТруда)ИЛИ(УказаныТерриториальныеУсловия)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
								|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли; 
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
					
					Если ЗаданаГруппаФОВ Тогда
						Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
							И (НЕ УказаныТерриториальныеУсловия)  Тогда
							СтрОшибка = " Параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
							+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
						КонецЕсли;	
						
						Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
							
							Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
								СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
								СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							
							Если ФОВУказанНеверно(ТекущаяОсновнаяЗапись, Запись) Тогда
								СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	
						КонецЕсли;	 
						
					КонецЕсли;	 
					
					//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
					
					//Запомним для следующей итерации
					ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
					ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
					
				КонецЦикла;//Цикл по записям стажа текущего физлица за год
				
				
				Если ДоступнаРольРасчетчикаРегл 
					И (Запись.НачисленоНаНакопительнуюЧастьПФР + Запись.НачисленоНаСтраховуюЧастьПФР) = 0 
					И ВсегоНеотработанныхДней <> ВсегоДнейПоСтажу Тогда
					СтрОшибка = "Если сумма взносов равна нулю, то количество дней периодов работы, за исключением периодов ""ДЕКРЕТ"", ""ДЕТИ"" " + Символы.ПС + "должно быть равно сумме дней из блоков Больничные листы и Административный отпуск ";
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка);
				КонецЕсли;
				
			КонецЦикла;//Цикл по физлицам
		КонецЦикла;//Цикл по годам 
	КонецЦикла;//Цикл по обособленным подразделениям
	
	//Структура
	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже", ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ФормированиеСведенийОСтажеИЗаработке(Год, Организация, ДатаОкончанияПериодаЗаполнения = Неопределено, СписокФизЛиц = Неопределено) Экспорт
	
	ЗаполнятьСтаж = НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл();
	ЗаполнятьСуммыВзносов = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	
	Если Не ЗаполнятьСтаж И Не ЗаполнятьСуммыВзносов Тогда
		Возврат	
	КонецЕсли;
	
	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(НачалоГода);
	Если ДатаОкончанияПериодаЗаполнения = Неопределено Тогда
		ДатаОкончанияПериодаЗаполнения = КонецГода;
	КонецЕсли;
	
	// РАСЧЕТ СУММ ВЗНОСОВ И ДНЕЙ ОТСУТСТВИЯ
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Год",						Год);
	Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",					КонецДня(ДатаОкончанияПериодаЗаполнения));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение",	Организация);
	Запрос.УстановитьПараметр("СписокФизЛиц", 				СписокФизЛиц);
	Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &НачалоГода
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &ОбособленноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период МЕЖДУ &НачалоГода И &КонецГода
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник.Физлицо,
	|	Работники.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ ПериодыПерекрытия.Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Организация = &ГоловнаяОрганизация
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Работники.Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И Работники.ОбособленноеПодразделениеЗавершения = &ОбособленноеПодразделение
	|	И Работники.ПериодЗавершения МЕЖДУ &НачалоГода И &КонецГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &ОбособленноеПодразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	Запрос.Выполнить();
	
	Если Не ЗаполнятьСуммыВзносов Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛица.Физлицо КАК Физлицо,
		|	ФизЛица.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	ВТСотрудники КАК ФизЛица
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";
	Иначе	
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТПереходившиеРаботники
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|		РаботникиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ
		|		РаботникиОрганизаций.Период МЕЖДУ &НачалоГода И &КонецГода
		|		И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		РаботникиОрганизаций.Сотрудник.Физлицо,
		|		РаботникиОрганизаций.ОбособленноеПодразделение
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоГода, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций) КАК РаботникиОрганизаций
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизаций.Физлицо
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РаботникиОрганизаций.ОбособленноеПодразделение) > 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо";	
		Запрос.Выполнить();
		
		// данные об исчисленных взносах
		Если Год >= Год(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами()) Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСНИсчисленныйОбороты.ФизЛицо КАК ФизЛицо,
			|	ЕСНИсчисленныйОбороты.ПФРНакопительнаяОборот + ЕСНИсчисленныйОбороты.ПФРНакопительнаяЕНВДОборот КАК ПФРНакопительная,
			|	ЕСНИсчисленныйОбороты.ПФРПоДополнительномуТарифуОборот КАК ПФРПоДополнительномуТарифу,
			|	ЕСНИсчисленныйОбороты.ПФРСтраховаяОборот + ЕСНИсчисленныйОбороты.ПФРСтраховаяЕНВДОборот КАК ПФРСтраховая
			|ПОМЕСТИТЬ ВТВзносыИсчисленные
			|ИЗ
			|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(
			|			&НачалоГода,
			|			&КонецГода,
			|			,
			|			Организация = &ГоловнаяОрганизация
			|				И ОбособленноеПодразделение = &ОбособленноеПодразделение
			|				И ФизЛицо В
			|					(ВЫБРАТЬ
			|						ФизЛица.Физлицо
			|					ИЗ
			|						ВТСотрудники КАК ФизЛица)) КАК ЕСНИсчисленныйОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтраховыеВзносыИсчисленныеОбороты.ФизЛицо КАК Физлицо,
			|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяОборот + СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяЕНВДОборот КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
			|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяОборот + СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяЕНВДОборот КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР
			|ПОМЕСТИТЬ ВТВзносыПоВсейОрганизации
			|ИЗ
			|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(
			|			&НачалоГода,
			|			&КонецГода,
			|			,
			|			Организация = &ГоловнаяОрганизация
			|				И ФизЛицо В
			|					(ВЫБРАТЬ
			|						Лица.Физлицо КАК Физлицо
			|					ИЗ
			|						ВТПереходившиеРаботники КАК Лица)) КАК СтраховыеВзносыИсчисленныеОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Физлицо";
			Запрос.Выполнить();
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСНИсчисленныйОбороты.ФизЛицо КАК ФизЛицо,
			|	0 КАК ПФРПоДополнительномуТарифу,
			|	СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная) КАК ПФРНакопительная,
			|	СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая) КАК ПФРСтраховая
			|ПОМЕСТИТЬ ВТВзносыИсчисленные
			|ИЗ
			|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
			|ГДЕ
			|	ЕСНИсчисленныйОбороты.Организация = &ГоловнаяОрганизация
			|	И ЕСНИсчисленныйОбороты.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
			|	И ЕСНИсчисленныйОбороты.ФизЛицо В
			|			(ВЫБРАТЬ
			|				ФизЛица.Физлицо
			|			ИЗ
			|				ВТСотрудники КАК ФизЛица)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСНИсчисленныйОбороты.ФизЛицо
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСНИсчисленныйОбороты.ФизЛицо КАК Физлицо,
			|	СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
			|	СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР
			|ПОМЕСТИТЬ ВТВзносыПоВсейОрганизации
			|ИЗ
			|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
			|ГДЕ
			|	ЕСНИсчисленныйОбороты.ФизЛицо В
			|			(ВЫБРАТЬ
			|				Лица.Физлицо КАК Физлицо
			|			ИЗ
			|				ВТПереходившиеРаботники КАК Лица)
			|	И ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
			|	И ЕСНИсчисленныйОбороты.Организация = &ГоловнаяОрганизация
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСНИсчисленныйОбороты.ФизЛицо";
			Запрос.Выполнить();
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛица.Физлицо КАК Физлицо,
		|	ФизЛица.Физлицо.Наименование КАК ФизлицоНаименование
		|ПОМЕСТИТЬ ВТЗастрахованныеЛица
		|ИЗ
		|	ВТСотрудники КАК ФизЛица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическийПериодДействия.ФизЛицо КАК ФизЛицо,
		|	СУММА(ВЫБОР
		|			КОГДА ФактическийПериодДействия.ВидРасчета.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность)
		|				ТОГДА ВЫБОР
		|						КОГДА ФактическийПериодДействия.Сторно
		|							ТОГДА ВЫБОР
		|									КОГДА НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, МЕСЯЦ)
		|											И КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, МЕСЯЦ)
		|										ТОГДА 30
		|									ИНАЧЕ -РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
		|								КОНЕЦ
		|						ИНАЧЕ ВЫБОР
		|								КОГДА НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, МЕСЯЦ)
		|										И КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, МЕСЯЦ)
		|									ТОГДА 30
		|								ИНАЧЕ РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
		|							КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДнейБолезни,
		|	СУММА(ВЫБОР
		|			КОГДА ФактическийПериодДействия.ВидРасчета.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
		|				ТОГДА ВЫБОР
		|						КОГДА ФактическийПериодДействия.Сторно
		|							ТОГДА ВЫБОР
		|									КОГДА НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, МЕСЯЦ)
		|											И КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, МЕСЯЦ)
		|										ТОГДА 30
		|									ИНАЧЕ -РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
		|								КОНЕЦ
		|						ИНАЧЕ ВЫБОР
		|								КОГДА НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ФактическийПериодДействия.ПериодДействияНачало, МЕСЯЦ)
		|										И КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, МЕСЯЦ)
		|									ТОГДА 30
		|								ИНАЧЕ РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ)
		|							КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДнейОтпускаЗаСвойСчет
		|ПОМЕСТИТЬ ВТФактическийПериодДействия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			Сотрудник В
		|					(ВЫБРАТЬ
		|						Сотрудники.Сотрудник
		|					ИЗ
		|						ВТСотрудники КАК Сотрудники)
		|				И ОбособленноеПодразделение = &ОбособленноеПодразделение
		|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|				И ВидРасчета.ВидСтажаСЗВ4 В (ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность), ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты))
		|				И (ПериодДействия МЕЖДУ &НачалоГода И &КонецГода)) КАК ФактическийПериодДействия
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическийПериодДействия.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗастрахованныеЛица.Физлицо КАК ФизЛицо,
		|	ЗастрахованныеЛица.ФизлицоНаименование КАК ФизлицоНаименование,
		|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	&Год КАК Год,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРНакопительная, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРСтраховая, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(ВзносыПоВсейОрганизации.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(ВзносыПоВсейОрганизации.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(ФактическийПериодДействия.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(ФактическийПериодДействия.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет
		|ИЗ
		|	ВТЗастрахованныеЛица КАК ЗастрахованныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыИсчисленные КАК ЕСНИсчисленныйОбороты
		|		ПО ЗастрахованныеЛица.Физлицо = ЕСНИсчисленныйОбороты.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыПоВсейОрганизации КАК ВзносыПоВсейОрганизации
		|		ПО ЗастрахованныеЛица.Физлицо = ВзносыПоВсейОрганизации.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическийПериодДействия КАК ФактическийПериодДействия
		|		ПО ЗастрахованныеЛица.Физлицо = ФактическийПериодДействия.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";
		
	КонецЕсли;
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ЗаполнятьСуммыВзносов Тогда
		НаборЗаписейОВзносах = РегистрыСведений.СуммыВзносовДляСЗВ4.СоздатьНаборЗаписей();
		НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Значение = Организация;
		НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Использование = Истина;
		НаборЗаписейОВзносах.Отбор.Год.Значение = Год;
		НаборЗаписейОВзносах.Отбор.Год.Использование = Истина;
		НаборЗаписейОВзносах.Отбор.ФизЛицо.Использование = Истина;
	КонецЕсли;
	
	// РАСЧЕТ СТАЖА
	
	Если ЗаполнятьСтаж Тогда
		
		ТаблицаСтажа = СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(Организация, Год, СписокФизЛиц, ДатаОкончанияПериодаЗаполнения);
		
		НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
		НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
		НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
		НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Значение = НачалоГода;
		НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Использование = Истина;
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
		
		СтруктураПоиска = Новый Структура("ФизЛицо");
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
	
	НачатьТранзакцию();
	
	// Загрузим полученные данные в наборы записей 
	Пока ТаблицаРезультатаЗапроса.Следующий() Цикл
		
		Если ЗаполнятьСтаж Тогда
			// Установим отбор записей в наборе по выбранному работнику
			НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
			СтруктураПоиска.ФизЛицо = ТаблицаРезультатаЗапроса.ФизЛицо;
			
			МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписейОСтаже.Добавить(),СтрокаТаблицы)
			КонецЦикла; 
			
			// Пронумеруем основные записи о стаже
			НомерЗаписи = 0;
			Для Каждого Запись из НаборЗаписейОСтаже Цикл
				НомерЗаписи = НомерЗаписи + 1;
				Запись.НомерОсновнойЗаписи = НомерЗаписи;
			КонецЦикла; 
			
			// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
			Попытка
				НаборЗаписейОСтаже.Записать();
				НаборЗаписейОСтаже.Очистить();
			Исключение
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		Если ЗаполнятьСуммыВзносов Тогда
			НаборЗаписейОВзносах.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
			Если ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоНаНакопительнуюЧастьПФР) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоНаСтраховуюЧастьПФР) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоПоДополнительномуТарифу) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.ДнейБолезни) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.ДнейОтпускаЗаСвойСчет) Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписейОВзносах.Добавить(),ТаблицаРезультатаЗапроса);
			КонецЕсли; 
			
			Попытка
				НаборЗаписейОВзносах.Записать();
				НаборЗаписейОВзносах.Очистить();
			Исключение
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ФормированиеСведенийОСтажеИЗаработке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОГРАММОЙ CheckUFA

// Процедура вызывает тестирование файла программой проверки
//
Процедура ПроверитьФайлВCheckUFA(ДокументОбъект, ФормаВладелец) Экспорт
	ФормаПроверки = ПолучитьОбщуюФорму("ФормаПроверкиCheckUFA", ФормаВладелец);
	ФормаПроверки.ДокументОбъект = ДокументОбъект;
	ФормаПроверки.Открыть();	
КонецПроцедуры

// Процедура, считывает путь установки CheckUFA из реестра, и
// если не находит инофрмации, проверяет путь установки по умолчанию
//
Функция ПолучитьПредполагаемыйПутьУстановкиCheckUFA() Экспорт
	
	ПапкаПрограммы = "";
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СистИнформация = Новый СистемнаяИнформация;
		ВерсияОС = СистИнформация.ВерсияОС;
		МожноИспользоватьКомандуРеестра = (Найти(ВерсияОС, "Windows 95") = 0) И (Найти(ВерсияОС, "Windows 98") = 0);
		Если МожноИспользоватьКомандуРеестра Тогда
			ВремПапка = КаталогВременныхФайлов();
			КомандаСистемы("reg query HKLM\Software\CheckXmlUfa /s > FindCheckXmlUfa.txt", ВремПапка);
			ТекстДокумент = Новый ТекстовыйДокумент;
			ТекстДокумент.Прочитать(ВремПапка + "FindCheckXmlUfa.txt");
			ПредСтрока = "";
			ПапкаПрограммы = "";
			Для НомерСтроки = 0 По ТекстДокумент.КоличествоСтрок() Цикл
				ТекущаяСтрока = ТекстДокумент.ПолучитьСтроку(НомерСтроки);
				Если Найти(ПредСтрока, "HKEY_LOCAL_MACHINE\Software\CheckXmlUfa") > 0 Тогда
					ПапкаПрограммы = СокрЛП(СтрЗаменить(СокрЛП(ТекущаяСтрока), "InstallPath    REG_SZ", ""));
					Прервать
				КонецЕсли;
				ПредСтрока = ТекущаяСтрока;
			КонецЦикла;
			УдалитьФайлы(ВремПапка + "\FindCheckXmlUfa.txt");
		КонецЕсли;	
	#КонецЕсли
	Возврат ПапкаПрограммы;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОГРАММОЙ CheckXML

// Процедура, считывает путь установки CheckXML из реестра, и
// если не находит инофрмации, проверяет путь установки по умолчанию
//
Функция ПолучитьПредполагаемыйПутьУстановкиCheckXML() Экспорт
	
	ПапкаПрограммы = "";
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СистИнформация = Новый СистемнаяИнформация;
		ВерсияОС = СистИнформация.ВерсияОС;
		МожноИспользоватьКомандуРеестра = (Найти(ВерсияОС, "Windows 95") = 0) И (Найти(ВерсияОС, "Windows 98") = 0);
		Если МожноИспользоватьКомандуРеестра Тогда
			ВремПапка = КаталогВременныхФайлов();
			КомандаСистемы("reg query HKCU\Software\CheckXML /s > FindCheckXML.txt", ВремПапка);
			ТекстДокумент = Новый ТекстовыйДокумент;
			ТекстДокумент.Прочитать(ВремПапка + "FindCheckXML.txt");
			ПредСтрока = "";
			ПапкаПрограммы = "";
			Для НомерСтроки = 0 По ТекстДокумент.КоличествоСтрок() Цикл
				ТекущаяСтрока = ТекстДокумент.ПолучитьСтроку(НомерСтроки);
				Если Найти(ПредСтрока, "HKEY_CURRENT_USER\Software\CheckXML") > 0 Тогда
					ПапкаПрограммы = СтрЗаменить(ТекущаяСтрока, "    InstPath	REG_SZ	", "");
					Прервать
				КонецЕсли;
				ПредСтрока = ТекущаяСтрока;
			КонецЦикла;
			УдалитьФайлы(ВремПапка + "\FindCheckXML.txt");
		КонецЕсли;
		Если ПапкаПрограммы = Неопределено Или ПапкаПрограммы = "" Тогда
			ИсполняемыйФайл = Новый Файл("C:\Program Files\CheckXML\CheckXML.exe");
			Если ИсполняемыйФайл.Существует() Тогда
				ПапкаПрограммы = "C:\Program Files\CheckXML";
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	Возврат ПапкаПрограммы;
	
КонецФункции //ПолучитьПредполагаемыйПутьУстановкиCheckXML()

// Процедура вызывает тестирование файла программой проверки
//
Процедура ПроверитьФайлВCheckXML(ДокументОбъект, ФормаВладелец, ПроверятьВсеФайлыКомплекта = Ложь) Экспорт
	ФормаПроверки = ПолучитьОбщуюФорму("ФормаПроверкиCheckXML", ФормаВладелец);
	
	Если ПроверятьВсеФайлыКомплекта Тогда
		ФормаПроверки.УстановитьРежимПроверкиКомплекта();
	КонецЕсли;	
	
	ФормаПроверки.ДокументОбъект = ДокументОбъект;
	ФормаПроверки.Открыть();
	
КонецПроцедуры // ПроверитьФайлВCheckXML()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРСУЧЕТА С 2010 ГОДА

Процедура ПроставитьНомерПачки(ДокументОбъект) Экспорт

	Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.НомерПачки) Тогда // определим очередной номер
		Год = Год(ДокументОбъект.Дата);
		СледующийНомер = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год) + 1;
		ДокументОбъект.НомерПачки = Формат(СледующийНомер,"ЧЦ=5; ЧГ=0");
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год, СледующийНомер);
	Иначе // уточним данные регистра, если номер поправили вручную
		НомерПачки = ДокументОбъект.НомерПачки;
		Если Не ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(НомерПачки, , Ложь) Тогда
			Возврат
		КонецЕсли;
		Год = Год(ДокументОбъект.Дата);
		ТекущийНомер = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год);
		НомерПачки = Число(НомерПачки);
		Если НомерПачки > ТекущийНомер Тогда
			РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год, НомерПачки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПроведения(ДокументОбъект, Отказ, РежимЗаписи) Экспорт

	Если ДокументОбъект.СпециальныйДокумент2010года Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(?(РежимЗаписи = РежимЗаписиДокумента.Проведение,"Перепроведение","Отмена проведения") +" этого документа запрещен"+ ?(РежимЗаписи = РежимЗаписиДокумента.Проведение,"о","а") + "!", Отказ, Строка(ДокументОбъект));
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;

КонецПроцедуры

Функция НачалоОтчетногоПериодаПерсучета(НекаяДата) Экспорт 
	
	Если НекаяДата < '20100701' Тогда
		Возврат НачалоГода(НекаяДата)	
	ИначеЕсли НекаяДата < '20110101' Тогда
		Возврат '20100701'
	Иначе
		Возврат НачалоКвартала(НекаяДата);
	КонецЕсли;
	
КонецФункции // ОкончаниеОтчетногоПериода()

Функция ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод) Экспорт 

	Возврат ?(Не ЗначениеЗаполнено(ОтчетныйПериод),ОтчетныйПериод,?(ОтчетныйПериод < '20100101' Или ОтчетныйПериод >= РасчетСтраховыхВзносов.ДатаПередачиАдминистрированияВзносовФНС(), КонецГода(ОтчетныйПериод), ?(ОтчетныйПериод < '20110101', КонецМесяца(ДобавитьМесяц(ОтчетныйПериод, 5)), КонецКвартала(ОтчетныйПериод))))

КонецФункции // ОкончаниеОтчетногоПериода()

Функция ПредшествующийОтчетныйПериодПерсучета(НекаяДата) Экспорт 
	
	Если НекаяДата < '20100301' Тогда
		Возврат ДобавитьМесяц(НачалоГода(НекаяДата), -12)
	ИначеЕсли НекаяДата < '20110101' Тогда
		Возврат '20100101'
	ИначеЕсли НекаяДата < '20110401' Тогда
		Возврат '20100701'
	ИначеЕсли НекаяДата < ДобавитьМесяц(РасчетСтраховыхВзносов.ДатаПередачиАдминистрированияВзносовФНС(), 2) Тогда
		Возврат ДобавитьМесяц(НачалоКвартала(НекаяДата), -3);
	Иначе
		Возврат ДобавитьМесяц(НачалоГода(НекаяДата), -12)
	КонецЕсли;
	
КонецФункции // ОкончаниеОтчетногоПериода()

Функция ОписаниеОтчетногоПериодаДляПечати(Год, Квартал, РазбиратьКакКорректируемыйПериод = Ложь) Экспорт
	
	Если РазбиратьКакКорректируемыйПериод Тогда
		СтруктураОписания = Новый Структура("КорректируемыйГод,ЭтоКварталКорректируемогоГода,ЭтоПолугодиеКорректируемогоГода,Это9МесяцевКорректируемогоГода,ЭтоВесьКорректируемыйГод");
		Если ЗначениеЗаполнено(Год) Тогда
			СтруктураОписания.КорректируемыйГод = Год;
			Если Год < "2011" Тогда
				СтруктураОписания.ЭтоКварталКорректируемогоГода = Ложь;
				СтруктураОписания.ЭтоПолугодиеКорректируемогоГода = Квартал = "1";
				СтруктураОписания.Это9МесяцевКорректируемогоГода = Ложь;
				СтруктураОписания.ЭтоВесьКорректируемыйГод = Квартал = "2";
			Иначе
				СтруктураОписания.ЭтоКварталКорректируемогоГода = Квартал = "1";
				СтруктураОписания.ЭтоПолугодиеКорректируемогоГода = Квартал = "2";
				СтруктураОписания.Это9МесяцевКорректируемогоГода = Квартал = "3";
				СтруктураОписания.ЭтоВесьКорректируемыйГод = Квартал = "4";
			КонецЕсли;
		КонецЕсли;	
	Иначе
		СтруктураОписания = Новый Структура("ЭтоПолугодие2010, Это2010год,ОтчетныйГод,ЭтоКварталОтчетногоГода,ЭтоПолугодиеОтчетногоГода,Это9МесяцевОтчетногоГода,ЭтоВесьОтчетныйГод");
		Если ЗначениеЗаполнено(Год) Тогда
			Если Год < "2011" Тогда
				СтруктураОписания.ЭтоПолугодие2010 = Квартал = "1";
				СтруктураОписания.Это2010год = Не СтруктураОписания.ЭтоПолугодие2010;
			ИначеЕсли Год < "2014" Тогда
				СтруктураОписания.ОтчетныйГод = Год;
				СтруктураОписания.ЭтоКварталОтчетногоГода = Квартал = "1";
				СтруктураОписания.ЭтоПолугодиеОтчетногоГода = Квартал = "2";
				СтруктураОписания.Это9МесяцевОтчетногоГода = Квартал = "3";
				СтруктураОписания.ЭтоВесьОтчетныйГод = Квартал = "4";
			Иначе
				СтруктураОписания.ОтчетныйГод = Год;
				СтруктураОписания.ЭтоКварталОтчетногоГода = Квартал = "3" Или Квартал = "1";
				СтруктураОписания.ЭтоПолугодиеОтчетногоГода = Квартал = "6";
				СтруктураОписания.Это9МесяцевОтчетногоГода = Квартал = "9";
				СтруктураОписания.ЭтоВесьОтчетныйГод = Квартал = "0";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОписания
	
КонецФункции // ОписаниеОтчетногоПериодаДляПечати()

Функция ОписаниеОтчетногоПериодаДляФайла(ОтчетныйПериод) Экспорт
	
	Если ОтчетныйПериод < РасчетСтраховыхВзносов.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР() Тогда
		Если ОтчетныйПериод = '20100101' Тогда
			СтруктураОписания = Новый Структура("Квартал,Год",1,2010);
		ИначеЕсли ОтчетныйПериод = '20100701' Тогда
			СтруктураОписания = Новый Структура("Квартал,Год",2,2010);
		ИначеЕсли ОтчетныйПериод >= '20110101'Тогда
			СтруктураОписания = Новый Структура("Квартал,Год",Цел((Месяц(ОтчетныйПериод) - 0.1) / 3) + 1,Год(ОтчетныйПериод));
		Иначе
			СтруктураОписания = Новый Структура("Квартал,Год");
		КонецЕсли;
	Иначе
		СтруктураОписания = Новый Структура("Квартал,Год", Месяц(КонецКвартала(ОтчетныйПериод)) % 12, Год(ОтчетныйПериод));
	КонецЕсли;
	
	Возврат СтруктураОписания
	
КонецФункции // ОписаниеОтчетногоПериодаДляПечати()

Функция ОписаниеОтчетногоПериодаДляФайла2014(ОтчетныйПериод) Экспорт
	
	Возврат ОписаниеОтчетногоПериодаДляФайла(ОтчетныйПериод)
	
КонецФункции

Функция ОписаниеОтчетногоПериодаДляПоказа(ОтчетныйПериод, Сокращенно = Истина) Экспорт
	
	Если ОтчетныйПериод = '20100701' Тогда
		Описание = "2 полугодие 2010 г.";
	Иначе
		Описание = ПредставлениеПериода(ОтчетныйПериод, ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина");
		Если Сокращенно Тогда
			Описание = СтрЗаменить(Описание,"квартал","кв.");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Описание
	
КонецФункции  // ОписаниеОтчетногоПериодаДляПечати()

Процедура ПоместитьВМенеджерСоответствиеТарифаКатегории(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим) КАК ВидТарифаСтраховыхВзносов,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	1 КАК Порядок,
	|	2010 КАК ГодС,
	|	2100 КАК ГодПо
	|ПОМЕСТИТЬ ВТСоответствиеТарифаКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2011,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2011,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ITОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2019,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НекоммерческиеОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2019,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.БлаготворительныеОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2019,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацииОказывающиеИнжиниринговыеУслуги),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2014,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляФармацевтовАптек),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2019,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2019,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2028,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УчастникПроектаИнновационныйЦентрСколково),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	6,
	|	2010,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	2,
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	2,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	3,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	3,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ITОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	3,
	|	2011,
	|	2018
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	4,
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НекоммерческиеОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1,
	|	2012,
	|	2018
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.БлаготворительныеОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1,
	|	2012,
	|	2018
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацииОказывающиеИнжиниринговыеУслуги),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	1,
	|	2012,
	|	2013
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляФармацевтовАптек),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	3,
	|	2012,
	|	2018
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	3,
	|	2012,
	|	2027
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	3,
	|	2012,
	|	2013
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УчастникОсобойЗоныВКрыму),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	3,
	|	2015,
	|	2027
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТерриторииОпережающегоСоциальноЭкономическогоРазвития),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	3,
	|	2015,
	|	2027
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентПортаВладивосток),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	3,
	|	2016,
	|	2028
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	3,
	|	2014,
	|	2018
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидТарифаСтраховыхВзносов";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПоместитьВМенеджерСоответствиеВидаЗастрахованныхКатегории(МенеджерВременныхТаблиц, Год = 0) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПризнанныхБеженцамиСчитатьВЖхх", Год >= 2016);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК ИсходнаяКатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ) КАК ВидЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТСоответствиеВидаЗастрахованныхКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖНР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖНР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПНР),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖНР)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПНР)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСХ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСХ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСХ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСХ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСХ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЕН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЕН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЕН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЕН)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЕН)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖМН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖМН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПМН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖМН)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПМН)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖОИ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖОИ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПОИ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖОИ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПОИ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖХО),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖХО),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПХО),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖХО)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПХО)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖТЗ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖТЗ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПТЗ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖТЗ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПТЗ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖИТ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖИТ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПИТ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖИТ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПИТ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСИ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСИ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСИ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСИ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСИ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЭД),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЭД),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЭД),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЭД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЭД)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖТР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖТР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПТР),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖТР)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПТР)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖКС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖКС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПКС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖКС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПКС)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖВЛ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖВЛ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПВЛ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖВЛ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПВЛ),
	|	3
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЦС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЦС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЦС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЦС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЦС)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСБ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСБ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСБ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСБ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСБ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЭС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЭС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЭС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЭС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЭС)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖИЖ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖИЖ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПИЖ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖИЖ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПИЖ)
	|	КОНЕЦ,
	|	3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсходнаяКатегорияЗастрахованныхЛиц,
	|	ВидЗастрахованныхЛиц";	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция КатегорииЗастрахованныхЛицОрганизации(Организация, ГоловнаяОрганизация, ОтчетныйПериод, ОкончаниеОтчетногоПериода = Неопределено, ДляКорректирующихСведений = Истина) Экспорт

	СписокКатегорийЗастрахованныхЛиц = Новый СписокЗначений;
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, "НАЕМ/РАБОТНИК");
		Возврат СписокКатегорийЗастрахованныхЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОтчетныйПериод",	ОтчетныйПериод);
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ОтчетныйПериод));
	Если Не ЗначениеЗаполнено(ОкончаниеОтчетногоПериода) Тогда
		ОкончаниеОтчетногоПериода = ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод)
	КонецЕсли;
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеОтчетногоПериода);
	Запрос.УстановитьПараметр("ДополнитьКатегорииИностранныхГраждан", Год(ОтчетныйПериод) >= Год(ПроведениеРасчетов.ДатаСниженияТарифовСтраховыхВзносов()));
	
	ПоместитьВМенеджерСоответствиеТарифаКатегории(Запрос.МенеджерВременныхТаблиц);
	ПоместитьВМенеджерСоответствиеВидаЗастрахованныхКатегории(Запрос.МенеджерВременныхТаблиц, Год(ОтчетныйПериод));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	ГОД(УчетнаяПолитикаНалоговыйУчет.Период) КАК ГодОтчетногоПериода
	|ПОМЕСТИТЬ ВТТарифыОрганизации
	|ИЗ
	|	ВТРегистрСведенийУчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	И УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ВидТарифаСтраховыхВзносов,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	ВТРегистрСведенийУчетнаяПолитикаНалоговыйУчетСрезПоследнихПоОрганизация КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			,
	|			,
	|			,
	|			ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ОблагаетсяЕНВД
	|				И (ДатаПолученияДохода МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода)) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляФармацевтовАптек)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			,
	|			,
	|			,
	|			ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ЯвляетсяДоходомФармацевта
	|				И (ДатаПолученияДохода МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода)) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			,
	|			,
	|			,
	|			ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ
	|				И (ДатаПолученияДохода МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода)) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТКатегорииЗастрахованныхЛиц
	|ИЗ
	|	ВТТарифыОрганизации КАК ТарифыОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ПО ТарифыОрганизации.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|			И (ТарифыОрганизации.ГодОтчетногоПериода МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|ГДЕ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц) КАК Представление,
	|	ПорядокОсновнойКатегории.Порядок КАК Порядок,
	|	ПорядокДопКатегории.Порядок КАК ПорядокДопКатегорий
	|ИЗ
	|	ВТКатегорииЗастрахованныхЛиц КАК КатегориЗастрахованныхЛицПоТарифам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.КатегорииЗастрахованныхЛицПФР КАК ПорядокОсновнойКатегории
	|		ПО КатегориЗастрахованныхЛицПоТарифам.КатегорияЗастрахованныхЛиц = ПорядокОсновнойКатегории.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеВидаЗастрахованныхКатегории КАК СоответствиеВидаЗастрахованныхКатегории
	|			ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.КатегорииЗастрахованныхЛицПФР КАК ПорядокДопКатегории
	|			ПО СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц = ПорядокДопКатегории.Ссылка
	|		ПО КатегориЗастрахованныхЛицПоТарифам.КатегорияЗастрахованныхЛиц = СоответствиеВидаЗастрахованныхКатегории.ИсходнаяКатегорияЗастрахованныхЛиц
	|			И (&ДополнитьКатегорииИностранныхГраждан
	|				ИЛИ СоответствиеВидаЗастрахованныхКатегории.ВидЗастрахованныхЛиц = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ))
	|ГДЕ
	|	НЕ СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ПорядокДопКатегорий";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СрезПоследнихПоОрганизация", ".СрезПоследних(&ОтчетныйПериод, Организация = &Организация)");
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"ВТРегистрСведенийУчетнаяПолитикаНалоговыйУчет", ЗаполнениеРегламентированнойОтчетностиПереопределяемый.ИмяУчетнойПолитики());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКатегорийЗастрахованныхЛиц.Добавить(Выборка.КатегорияЗастрахованныхЛиц,Выборка.Представление);
	КонецЦикла;
	Если СписокКатегорийЗастрахованныхЛиц.Количество() = 0 Тогда
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, "НАЕМ/РАБОТНИК");
		Если Год(ОтчетныйПериод) >= 2012 Тогда
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖНР, "ВР. ПРОЖИВАЮЩИЙ/НАЕМ/РАБОТНИК");
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПНР, "ВР. ПРЕБЫВАЮЩИЙ/НАЕМ/РАБОТНИК");
		КонецЕсли;
		Если Год(ОтчетныйПериод) = 2010 Тогда
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗАЦИИ ИНВАЛИДОВ");
			Если ДляКорректирующихСведений Тогда
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.УСЕН, "УПРОЩЕН/СИСТЕМА/ЕДИНЫЙ/НАЛОГ");
			КонецЕсли;
		ИначеЕсли Год(ОтчетныйПериод) < 2015 Тогда
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ);
			Если Год(ОтчетныйПериод) >= 2012 Тогда
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖОИ);
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПОИ);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Год(ОтчетныйПериод) = 2010 Тогда
			Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ) = Неопределено Тогда 	
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗАЦИИ ИНВАЛИДОВ");
			КонецЕсли;
			Если ДляКорректирующихСведений И СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицПФР.НР) <> Неопределено Тогда
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.УСЕН, "УПРОЩЕН/СИСТЕМА/ЕДИНЫЙ/НАЛОГ");
			КонецЕсли;
		ИначеЕсли Год(ОтчетныйПериод) < 2015 Тогда
			Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ) = Неопределено Тогда 	
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ);
			КонецЕсли;
			Если Год(ОтчетныйПериод) >= 2012 Тогда
				Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖОИ) = Неопределено Тогда 	
					СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖОИ);
				КонецЕсли;
				Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПОИ) = Неопределено Тогда 	
					СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПОИ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокКатегорийЗастрахованныхЛиц
	
КонецФункции

Функция ДанныеРуководителяОрганизации(Организация, ДатаАктуальности) Экспорт

	СтруктураДанных = Новый Структура("Руководитель,ДолжностьРуководителя");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаАктуальности - 1);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&Дата,
	|			СтруктурнаяЕдиница = &Организация
	|				И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); 
	ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка,"Руководитель,ДолжностьРуководителя");
	
	Возврат СтруктураДанных

КонецФункции // ДанныеРуководителяОрганизации()

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
Процедура ОписаниеСостоянияПринятыхПФРДанных(КоличествоПринятыхДокументов, ДокументыПФР, МассивПрошлыхПериодов, ИменаУчитываемыхПачек, ЭлементыФормы, ДописыватьРекламуРабочегоМеста = Ложь) Экспорт

	Если КоличествоПринятыхДокументов = 0 Тогда
		Если МассивПрошлыхПериодов.Количество() = 0 Тогда
			ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится по данным текущего периода с использованием коэффициентов уплаты, рассчитанных в целом по страхователю."
			+ ?(ДописыватьРекламуРабочегоМеста," Сформировать комплект сведений, а также указать принятые ПФР сведения предыдущих периодов можно в рабочем месте подготовки данных для ПФР."," Для подбора сведений предыдущих периодов используйте меню Добавить.");
			ВажностьСообщения = "СообщениеИнформация";
		Иначе
			МассивЛет = Новый Массив;
			Для Каждого ПрошлыйПериод Из МассивПрошлыхПериодов Цикл
				Если МассивЛет.Найти(Год(ПрошлыйПериод)) = Неопределено Тогда
					МассивЛет.Добавить(Год(ПрошлыйПериод));
				КонецЕсли;
			КонецЦикла;
			ИменаПрошлыхЛет = "";
			Для Каждого СтрокаГода Из МассивЛет Цикл
				Если Не ПустаяСтрока(ИменаПрошлыхЛет) Тогда
					ИменаПрошлыхЛет = ИменаПрошлыхЛет + ", ";
				КонецЕсли;
				ИменаПрошлыхЛет = ИменаПрошлыхЛет + Формат(СтрокаГода,"ЧЦ=4; ЧДЦ=0; ЧГ=0");
			КонецЦикла;
			
			ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится с учетом переданных ранее в ПФР сведений. Необходимо подобрать (или загрузить из файлов перс.учета) принятые ПФР сведения за " + ИменаПрошлыхЛет + " год" + ?(МассивПрошлыхПериодов.Количество() > 1, "ы", "")
								+ ?(ДописыватьРекламуРабочегоМеста," в рабочем месте подготовки данных для ПФР!","! Для подбора сведений используйте меню Добавить.");
			ВажностьСообщения = "СообщениеОПроблемах";
		КонецЕсли;
	ИначеЕсли КоличествоПринятыхДокументов <> МассивПрошлыхПериодов.Количество() Тогда
		
		МассивНедостающихЛет = Новый Массив;
		Для Каждого ПрошлыйПериод Из МассивПрошлыхПериодов Цикл
			Если ДокументыПФР.Найти(ПрошлыйПериод, "ОтчетныйПериод") = Неопределено И МассивНедостающихЛет.Найти(Год(ПрошлыйПериод)) = Неопределено Тогда
				МассивНедостающихЛет.Добавить(Год(ПрошлыйПериод));
			КонецЕсли;
		КонецЦикла;
		
		ИменаПрошлыхЛет = "";
		Для Каждого СтрокаГода Из МассивНедостающихЛет Цикл
			Если Не ПустаяСтрока(ИменаПрошлыхЛет) Тогда
				ИменаПрошлыхЛет = ИменаПрошлыхЛет + ", ";
			КонецЕсли;
			
			ИменаПрошлыхЛет = ИменаПрошлыхЛет + Формат(СтрокаГода,"ЧЦ=4; ЧДЦ=0; ЧГ=0");
		КонецЦикла;
		
		ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится с учетом переданных ранее в ПФР сведений. Подобраны не все документы за " + ИменаПрошлыхЛет + " год" + ?(МассивНедостающихЛет.Количество() > 1, "ы", "") + "!"
							+ ?(ДописыватьРекламуРабочегоМеста," Сформировать комплект сведений, а также указать принятые ПФР сведения предыдущих периодов можно в рабочем месте подготовки данных для ПФР."," Для подбора сведений используйте меню Добавить.");
		ВажностьСообщения = "СообщениеОПроблемах";
		
	Иначе
		ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится с учетом переданных в ПФР пачек АДВ-6-2: " + ИменаУчитываемыхПачек
							+ ?(ДописыватьРекламуРабочегоМеста," Сформировать комплект сведений, а также изменить перечень учитываемых документов можно в рабочем месте подготовки данных для ПФР."," Чтобы изменить перечень учитываемых документов, используйте меню Добавить.");
		ВажностьСообщения = "СообщениеИнформация";
	КонецЕсли;

	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьСостояниеПачекДокументов, ЭлементыФормы.ПолеКартинкиСостояниеПачекДокументов, ТекстИнфонадписи, ВажностьСообщения);
	
КонецПроцедуры
	
Функция ПереходВРабочееМестоПФРвОтветНаВопрос(ДокументОбъект, ФормаДокумента, ТекстВопросаСохранения, ТекстВопросаДействия, ТекстКнопкиДействия, ЗаголовокОкнаВопроса, Организация, ОтчетныйПериод, ОтчетныйГод = Неопределено, ТипСведений = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект, ТекстВопросаСохранения) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений();
	Кнопки.Добавить("Перейти","Перейти в рабочее место");
	Если ЗначениеЗаполнено(ТекстКнопкиДействия) Тогда
		Кнопки.Добавить(КодВозвратаДиалога.Да,ТекстКнопкиДействия);
	КонецЕсли;
	Кнопки.Добавить(КодВозвратаДиалога.Отмена,"Отменить");
	Ответ  = РаботаСДиалогами.ЗадатьВопрос(ТекстВопросаДействия, Кнопки, "Перейти", ЗаголовокОкнаВопроса);
	Если Ответ = "Перейти" Тогда
		ОткрытьРабочееМесто(Организация, ОтчетныйПериод, ТипСведений, ОтчетныйГод);
 		ФормаДокумента.Закрыть();

		Возврат Истина
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда	
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции // ПереходВРабочееМестоПФРвОтветНаВопрос()

Процедура ОткрытьРабочееМесто(Организация, НаДату, ТипСведений = Неопределено, ОтчетныйГод = Неопределено) Экспорт 
	
	ОтчетныйПериод = НачалоОтчетногоПериодаПерсучета(НаДату);
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		Если Метаданные.Обработки.Найти("ПодготовкаДанныхПФР2009") <> Неопределено Тогда
			Обработка = Обработки.ПодготовкаДанныхПФР2009.Создать();
			Форма = Обработка.ПолучитьФорму();
			Форма.Организация = Организация;
			Форма.ТипСведений = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
			Форма.Открыть();
		КонецЕсли;
		Возврат
	ИначеЕсли ОтчетныйПериод < РасчетСтраховыхВзносов.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР() Тогда
		Если Метаданные.Обработки.Найти("ПодготовкаДанныхПФР2010") = Неопределено Тогда
			Возврат
		КонецЕсли;
		Обработка = Обработки.ПодготовкаДанныхПФР2010.Создать();
		Обработка.ТипСведений = ?(ЗначениеЗаполнено(ТипСведений), ТипСведений, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
		Обработка.ОтчетныйГод = ОтчетныйГод;
	Иначе	
		Если Метаданные.Обработки.Найти("ПодготовкаДанныхПФР2014") = Неопределено Тогда
			Возврат
		КонецЕсли;
		Обработка = Обработки.ПодготовкаДанныхПФР2014.Создать();
	КонецЕсли;
	
	Обработка.Организация = Организация;
	Обработка.ОтчетныйПериод = ОтчетныйПериод;
	
	Обработка.ПолучитьФорму().Открыть();
	
КонецПроцедуры

#КонецЕсли
// По переданной строке дерева, описывающего ПФР-овский файл, и структуре дополнительных данных
// создает и заполняет структуру с данными входящей описи
Функция ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, ДополнительныеДанные = Неопределено) Экспорт
	
	//Печать описи документов
	ИнформацияОПачке = Новый Структура;
	ИнформацияОПачке.Вставить("РегНомерПФР", "");
	ИнформацияОПачке.Вставить("НаименованиеОрганизации", "");
	ИнформацияОПачке.Вставить("ИНН", "");
	ИнформацияОПачке.Вставить("КПП", "");
	ИнформацияОПачке.Вставить("ДокументовВПачке", "");
	ИнформацияОПачке.Вставить("НачисленоСтраховая", "");
	ИнформацияОПачке.Вставить("УплаченоСтраховая", "");
	ИнформацияОПачке.Вставить("НачисленоНакопительная", "");
	ИнформацияОПачке.Вставить("УплаченоНакопительная", "");
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", "");
	Если ДополнительныеДанные = Неопределено Тогда
		ИнформацияОПачке.Вставить("РуководительДолжность", "");
		ИнформацияОПачке.Вставить("Руководитель", "");
		ИнформацияОПачке.Вставить("ОКПО", "");
	Иначе
		ИнформацияОПачке.Вставить("РуководительДолжность", ДополнительныеДанные.РуководительДолжность);
		ИнформацияОПачке.Вставить("Руководитель", ДополнительныеДанные.Руководитель);
		ИнформацияОПачке.Вставить("ОКПО", ДополнительныеДанные.ОКПО);
	КонецЕсли;
	
	ИнформацияОПачке.Вставить("КодКатегории", ИзвлечьДанное(СтрокаДереваВходящаяОпись, "КодКатегории"));
	
	ТипСведенийВФайле = ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ТипСведений");
	ИнформацияОПачке.Вставить("ЭтоИсходныйДокумент",		ТипСведенийВФайле = "ИСХОДНАЯ");
	ИнформацияОПачке.Вставить("ЭтоКорректирующийДокумент",	ТипСведенийВФайле = "КОРРЕКТИРУЮЩАЯ");
	ИнформацияОПачке.Вставить("ЭтоОтменяющийДокумент",		ТипСведенийВФайле = "ОТМЕНЯЮЩАЯ");
	
	ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ДатаXMLВОтчет(ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления")));
	
	СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
	Если СтрокаДереваСоставительПачки <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НаименованиеОрганизации", ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое"));
		ИнформацияОПачке.Вставить("РегНомерПФР", ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер"));
		ИнформацияОПачке.Вставить("ИНН", ИзвлечьДанное(СтрокаДереваСоставительПачки, "ИНН"));
		ИнформацияОПачке.Вставить("КПП", ИзвлечьДанное(СтрокаДереваСоставительПачки, "КПП"));
	КонецЕсли;
	
	Квартал = 0; Год = 0;
	СтрокаДереваОтчетныйПериод = СтрокаДереваВходящаяОпись.Строки.Найти("ОтчетныйПериод", "Имя");
	Если СтрокаДереваОтчетныйПериод <> Неопределено Тогда
		Квартал = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Квартал");
		Год = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Год");
		Если ЧислоИзФайла(Год) < Год(РасчетСтраховыхВзносов.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР()) Или Квартал = "1" Тогда
			ИнформацияОПачке.Вставить("РасчетныйПериод", Квартал + ?(Год < "2011", "-ое полугодие ", "-ый квартал ") + Год + " года");
		Иначе
			КварталЧислом = ЧислоИзФайла(Квартал);
			ИнформацияОПачке.Вставить("РасчетныйПериод", Строка(?(КварталЧислом = 0, 12, КварталЧислом) / 3) + "-й квартал " + Год + " года");
		КонецЕсли;
	КонецЕсли;
	Для каждого Элемент Из ОписаниеОтчетногоПериодаДляПечати(Год, Квартал) Цикл
	    ИнформацияОПачке.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	Квартал = 0; Год = 0;
	СтрокаДереваОтчетныйПериод = СтрокаДереваВходящаяОпись.Строки.Найти("КорректируемыйОтчетныйПериод", "Имя");
	Если СтрокаДереваОтчетныйПериод <> Неопределено Тогда
		Квартал = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Квартал");
		Год = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Год");
	КонецЕсли;
	Для каждого Элемент Из ОписаниеОтчетногоПериодаДляПечати(Год, Квартал, Истина) Цикл
	    ИнформацияОПачке.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
	Если СтрокаДереваСоставДокументов <> Неопределено Тогда
		СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
		Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
			ИнформацияОПачке.Вставить("ДокументовВПачке", ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДереваВзносы = СтрокаДереваВходящаяОпись.Строки.Найти("СуммаВзносовНаСтраховую");
	Если СтрокаДереваВзносы <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НачисленоСтраховая", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2"));
		ИнформацияОПачке.Вставить("УплаченоСтраховая", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2"));
	КонецЕсли;
	
	СтрокаДереваВзносы = СтрокаДереваВходящаяОпись.Строки.Найти("СуммаВзносовНаНакопительную");
	Если СтрокаДереваВзносы <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НачисленоНакопительная", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2"));
		ИнформацияОПачке.Вставить("УплаченоНакопительная", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2"));
	КонецЕсли;
	
	СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
	Если СтрокаДереваНомерПачки <> Неопределено Тогда
		СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
		Если СтрокаДереваОсновной <> Неопределено Тогда
			НомерПачкиРаботодателя = ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
		Иначе
			НомерПачкиРаботодателя = ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
		КонецЕсли;
		ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
	КонецЕсли;
	
	Возврат ИнформацияОПачке				
	
КонецФункции

//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-3"
Процедура ВывестиОписьАДВ_6_3(ТабличныйДокумент,Знач ИнформацияОПачке) Экспорт

	МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_3");
	СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");
	ЗаполнитьЗначенияСвойств(СекцияОпись.Параметры,ИнформацияОПачке);
	ТабличныйДокумент.Вывести(СекцияОпись);
	
КонецПроцедуры	 

Функция ПечатнаяФормаСЗВ_6(ДокументОбъект, ТипФормДокументов, ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ВыводитьСписок = Ложь, ОчищатьСообщения = Истина, ПечатьДляРСВ1 = Ложь, ПроверятьДокументы = Истина) Экспорт
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	Если ОчищатьСообщения Тогда
		ОбработкаКомментариев.УдалитьСообщения();
	КонецЕсли;
	
	ДокументДляРСВ1 = Новый ТабличныйДокумент;
	ДокументДляРСВ1.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПачкаДокументовСЗВ_6_4";
	ДокументДляРСВ1.ОриентацияСтраницы = ?(ТипФормДокументов = "СЗВ-6-1", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЕстьОшибки = Ложь;
	Если ДокументОбъект.Проведен Или Не ПечатьДляРСВ1 тогда
		ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект, ЕстьОшибки);
	Иначе
		ТекстФайла = ДокументОбъект.СформироватьВыходнойФайл(ЕстьОшибки, ПроверятьДокументы);
	КонецЕсли;
	Если ЕстьОшибки И ПроверятьДокументы Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Если ПечатьДляРСВ1 Тогда
			Возврат ДокументДляРСВ1
		Иначе	
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;	 
	
	Заголовок = "Печать документа " + СокрЛП(ДокументОбъект);
	
	ДеревоПФР = ПреобразоватьВДеревоXML(ТекстФайла);
	
	Если ДеревоПФР = Неопределено Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не удалось разобрать файл с данными!", , Заголовок);
		ОбработкаКомментариев.ПоказатьСообщения();
		Если ПечатьДляРСВ1 Тогда
			Возврат ДокументДляРСВ1
		Иначе	
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
	Если ДеревоПФР = Неопределено Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не удалось разобрать файл с данными!",, Заголовок);
		ОбработкаКомментариев.ПоказатьСообщения();
		Если ПечатьДляРСВ1 Тогда
			Возврат ДокументДляРСВ1
		Иначе	
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
	Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
		
		СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ", "Имя");
		Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
			
			ВыборкаПоШапкеДокумента = ДокументОбъект.СформироватьЗапросПоШапке().Выбрать();
			ВыборкаПоШапкеДокумента.Следующий();
			
			// проверим данные руководителя
			Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Или Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
				
				Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан руководитель!", , Заголовок);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана должность руководителя!", , Заголовок);
				КонецЕсли;
				
				ОбработкаКомментариев.ПоказатьСообщения();
				
			КонецЕсли;
			
			Вывести62как61 = ТипФормДокументов = "СЗВ-6-2" И ИмяМакета = "ФормаСЗВ_6_1";
			ВыводимСЗВ_6_1 = Вывести62как61 Или ТипФормДокументов = "СЗВ-6-1" Или ТипФормДокументов = "СПВ-1";
			
			// Формы СЗВ-6-хх
			ДокументРезультат = Новый ТабличныйДокумент;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработке" + ИмяМакета;
			ДокументРезультат.ОриентацияСтраницы = ?(ВыводимСЗВ_6_1, ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
			
			Если Вывести62как61 Или ТипФормДокументов = "СЗВ-6-1" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСЗВ_6_1")
			ИначеЕсли ТипФормДокументов = "СЗВ-6-2" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСЗВ_6_2")
			ИначеЕсли ТипФормДокументов = "СПВ-1" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСПВ_1");
			КонецЕсли;
			
			// Рабочие области макета
			ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
			ОбластьДокумент = Макет.ПолучитьОбласть("Строка");
			ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
			Если ВыводимСЗВ_6_1 Или ТипФормДокументов = "СПВ-1" Тогда
				ОбластьСтаж = Макет.ПолучитьОбласть("Стаж");
			Иначе
				ОбластьСтаж = ОбластьДокумент
			КонецЕсли;
			
			// Список застрахованных лиц
			Если ВыводитьСписок Тогда
				
				ДокументСписокЗастрахованныхЛиц = Новый ТабличныйДокумент;
				ДокументСписокЗастрахованныхЛиц.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ6_Список";
			
				Макет = ДокументОбъект.ПолучитьМакет("СписокЗастрахованныхЛиц");
				ОбластьШапкаСписка = Макет.ПолучитьОбласть("Шапка");
				ОбластьСтрокаСписка = Макет.ПолучитьОбласть("СтрокаРаботника");
				ОбластьПодвалСписка = Макет.ПолучитьОбласть("Подвал");
				ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
				
				// массив с двумя строками - для разбиения на страницы
				ВыводимыеОбласти = Новый Массив();
				ВыводимыеОбласти.Добавить(ОбластьСтрокаСписка);
				
			КонецЕсли;
			
			ИнформацияОПачке = ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, ВыборкаПоШапкеДокумента);
			Если ТипФормДокументов = "СПВ-1" Тогда
				ИнформацияОПачке.Вставить("ТипИногоДокумента","Сведения о начисленных, уплаченных страховых взносах на обязательное пенсионное страхование и страховом стаже застрахованного лица для установления трудовой пенсии");
				ИнформацияОПачке.Вставить("Количество",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ИныхДокументовВПачке",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ДокументовВПачке","");
			ИначеЕсли Не ВыводимСЗВ_6_1 Тогда
				ИнформацияОПачке.Вставить("ТипИногоДокумента","Реестр сведений о начисленных и уплаченных страховых взносах на обязательное пенсионное страхование и страховом стаже застрахованных лиц");
				ИнформацияОПачке.Вставить("Количество",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ИныхДокументовВПачке",1);
				ИнформацияОПачке.Вставить("ДокументовВПачке","");
			Иначе
				ИнформацияОПачке.Вставить("ТипИногоДокумента"," ____________________________________ ____________________________");
			КонецЕсли;
			
			НомерПачкиРаботодателя = ИнформацияОПачке.НомерПачкиРаботодателя;
			
			// Опись АДВ-6-3
			Если ТипФормДокументов <> "СЗВ-6-2" Тогда
				ДокументОписи = Новый ТабличныйДокумент;
				ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ6_АДВ_6_3";
				ДокументОписи.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
				ВывестиОписьАДВ_6_3(ДокументОписи, ИнформацияОПачке);
				Если ПечатьДляРСВ1 Тогда
					ДокументДляРСВ1.Вывести(ДокументОписи);
					ДокументДляРСВ1.ВывестиГоризонтальныйРазделительСтраниц();
				Иначе
					УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи, КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-3); пачка №" + НомерПачкиРаботодателя,,ДокументОписи);
				КонецЕсли;
			КонецЕсли;
			
			// копируем данные описи в остальные документы
			ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,ИнформацияОПачке);
			ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры,ИнформацияОПачке);
			Если ВыводитьСписок Тогда
				// Список застрахованных лиц
				ИнформацияОПачке.Вставить("РегистрационныйНомерПФР",ИнформацияОПачке.РегНомерПФР);
				ИнформацияОПачке.Вставить("НаименованиеСокращенное",ИнформацияОПачке.НаименованиеОрганизации);
				ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя, РегистрационныйНомерПФР,НаименованиеСокращенное");
				ЗаполнитьЗначенияСвойств(ОбластьПодвалСписка.Параметры,ИнформацияОПачке,"РуководительДолжность, Руководитель, ДатаСоставленияОписи");
			КонецЕсли;
			
			// выводим шапки документов
			Если Не ВыводимСЗВ_6_1 Тогда 
				ДокументРезультат.Вывести(ОбластьШапка);
			КонецЕсли;
			
			Если ВыводитьСписок Тогда
				ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
				НомерСтрокиСписка = 0;
			КонецЕсли;
			
			//Цикл по документам файла
			ВыводилиДанные = Ложь;
			НомерДокумента = 0;
			Для Каждого СтрокаДереваСЗВ6 Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
				
				//Читаем запись документа
				Если СтрокаДереваСЗВ6.Имя <> "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ" Тогда
					Продолжить;
				КонецЕсли;
				
				Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
					ОбластьСтаж.Параметры[СчПараметр] = ""
				КонецЦикла;
				
				Если ВыводимСЗВ_6_1 Тогда //Каждый новый работник с новой страницы (отдельная форма СЗВ-6-1)
					Если Не ВыводилиДанные Тогда
						ВыводилиДанные = Истина;
					Иначе 
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Если ТипФормДокументов = "СПВ-1" Тогда
						ДатаСоставленияСтрокой = ИзвлечьДанное(СтрокаДереваСЗВ6, "ДатаСоставленияНа");
						Если ЗначениеЗаполнено(ДатаСоставленияСтрокой) Тогда
							ОбластьШапка.Параметры.ДатаСоставления = Дата(Прав(ДатаСоставленияСтрокой,4) + Сред(ДатаСоставленияСтрокой,4,2) + Лев(ДатаСоставленияСтрокой,2))
						Иначе
							ОбластьШапка.Параметры.ДатаСоставления = ""
						КонецЕсли;
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьШапка);
				КонецЕсли;
				
				// Данные по физлицу
				ОбластьДокумент.Параметры.СтраховойНомерПФР = ИзвлечьДанное(СтрокаДереваСЗВ6, "СтраховойНомер");
				СтрокаДереваФИО = СтрокаДереваСЗВ6.Строки.Найти("ФИО");
				Если СтрокаДереваФИО <> Неопределено Тогда
					ОбластьДокумент.Параметры.ФИО = ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
				Иначе
					ОбластьДокумент.Параметры.ФИО = "";
				КонецЕсли;
				Если ВыводитьСписок Тогда
					// Список застрахованных лиц
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьДокумент.Параметры,"СтраховойНомерПФР,ФИО");
				КонецЕсли;
				
				Если ТипФормДокументов = "СЗВ-6-1" Или ТипФормДокументов = "СЗВ-6-2" Тогда
					СтрокаДереваАдресЗЛ = СтрокаДереваСЗВ6.Строки.Найти("АдресЗЛ");
					Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
						ОбластьДокумент.Параметры.Адрес = ВРег(ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
						Если ОбластьДокумент.Параметры.Адрес = " 0" Тогда
							ОбластьДокумент.Параметры.Адрес = "";
						КонецЕсли;
					Иначе
						ОбластьДокумент.Параметры.Адрес = "";
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДереваВзносы = СтрокаДереваСЗВ6.Строки.Найти("СуммаВзносовНаСтраховую");
				Если СтрокаДереваВзносы <> Неопределено Тогда
					ОбластьДокумент.Параметры.НачисленоСтраховая = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2");
					ОбластьДокумент.Параметры.УплаченоСтраховая = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2");
				Иначе
					ОбластьДокумент.Параметры.НачисленоСтраховая = "";
					ОбластьДокумент.Параметры.УплаченоСтраховая = "";
				КонецЕсли;
				
				СтрокаДереваВзносы = СтрокаДереваСЗВ6.Строки.Найти("СуммаВзносовНаНакопительную");
				Если СтрокаДереваВзносы <> Неопределено Тогда
					ОбластьДокумент.Параметры.НачисленоНакопительная = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2");
					ОбластьДокумент.Параметры.УплаченоНакопительная = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2");
				Иначе
					ОбластьДокумент.Параметры.НачисленоНакопительная = "";
					ОбластьДокумент.Параметры.УплаченоНакопительная = "";
				КонецЕсли;
				
				Если ВыводимСЗВ_6_1 Тогда 
					ДокументРезультат.Вывести(ОбластьДокумент);
					НомерДокумента = 0;
				Иначе
					ОбластьДокумент.Параметры.НомерСтроки = НомерДокумента + 1;
				КонецЕсли;
				
				//Цикл по основным записям о стаже
				СтрокиДереваСтажевыйПериод = СтрокаДереваСЗВ6.Строки.НайтиСтроки(Новый Структура("Имя","СтажевыйПериод"));
				Если СтрокиДереваСтажевыйПериод.Количество() > 0 Тогда
					ЭтоПерваяСтрокаСтажа = Истина;
					Для Каждого СтрокаДереваПериодРаботы Из СтрокиДереваСтажевыйПериод Цикл
						
						Если ВыводимСЗВ_6_1 Тогда
							
							
							Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
								ОбластьСтаж.Параметры[СчПараметр] = ""
							КонецЦикла;
							
							НомерДокумента = НомерДокумента + 1;
							ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
							ОбластьСтаж.Параметры.ДатаНачалаПериода 	= ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаНачалаПериода");
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаКонцаПериода");
							СтрокиДереваОсобенностиУчета = СтрокаДереваПериодРаботы.Строки.НайтиСтроки(Новый Структура("Имя","ЛьготныйСтаж"));
							Если СтрокиДереваОсобенностиУчета.Количество() > 0 Тогда
								Для Каждого СтрокаДереваОсобенностиУчета Из СтрокиДереваОсобенностиУчета Цикл
									
									Если ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "НомерСтроки") > "1" Тогда
										ОбластьСтаж.Параметры.НомерСтроки 			= "";
										ОбластьСтаж.Параметры.ДатаНачалаПериода 	= "";
										ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= "";
									КонецЕсли;
									
									СтрокаДереваОсобенностиУчета = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобенностиУчета");
									
									ЗаписьТУ = Новый Структура("Коэффициент,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа",0,0,0);
									                                        
									СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
									Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ");
										ЗаписьТУ.Вставить("Коэффициент", ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "Коэффициент"));
									Иначе
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = "";
										ЗаписьТУ.Вставить("Коэффициент", 0);
									КонецЕсли;
									
									СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
									Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
										ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
										ОбластьСтаж.Параметры.КодПозицииСписка = ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
									Иначе
										ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = "";
										ОбластьСтаж.Параметры.КодПозицииСписка = "";
									КонецЕсли;
									
									ЗаписьЛгот = Новый Структура("ОснованиеИсчисляемогоСтажаКод,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа,ТретийПараметрИсчисляемогоСтажа","",0,0,"");
									
									СтрокаДереваДекретДети = СтрокаДереваОсобенностиУчета.Строки.Найти("ДекретДети");
									Если СтрокаДереваДекретДети <> Неопределено Тогда
										ЗаписьЛгот.Вставить("ТретийПараметрИсчисляемогоСтажа", СтрокаДереваДекретДети.Значение);
									КонецЕсли;
									
									СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
									Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
										
										// Представление параметров ИТС
										ОбластьСтаж.Параметры.ОснованиеИТС = ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
										
										СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
										СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
										ПервыйПараметрИсчисляемогоСтажа = 0;
										ВторойПараметрИсчисляемогоСтажа = 0;
										Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
											ПервыйПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
											ВторойПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
										ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
											ПервыйПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
											ВторойПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
										КонецЕсли;
										
										ЗаписьЛгот.Вставить("ОснованиеИсчисляемогоСтажаКод", ОбластьСтаж.Параметры.ОснованиеИТС);
										
										Если ЗначениеЗаполнено(ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод) Или ЗначениеЗаполнено(ОбластьСтаж.Параметры.ОснованиеИТС) Тогда
											ЗаписьЛгот.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
											ЗаписьЛгот.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
										Иначе
											ЗаписьТУ.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
											ЗаписьТУ.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
										КонецЕсли;
										
									КонецЕсли;
									
									ОбластьСтаж.Параметры.ДопИТС = ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
									ОбластьСтаж.Параметры.ДопТУ = ПредставлениеПараметровТерриториальныхУсловий(ЗаписьТУ);
									
									СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
									Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
										
										// Представление параметров выслуги лет
										ОбластьСтаж.Параметры.ОснованиеВыслуги = ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
										
										
										СтрокаДереваВыработкаВЧасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
										СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
										
										Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
											ПервыйПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
											ВторойПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
										ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
											ПервыйПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
											ВторойПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
										Иначе
											ПервыйПараметрВыслугиЛет = 0;
											ВторойПараметрВыслугиЛет = 0;
										КонецЕсли;
										ТретийПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки");
										ЗаписьЛгот = Новый Структура;
										ЗаписьЛгот.Вставить("ОснованиеВыслугиЛетКод",ОбластьСтаж.Параметры.ОснованиеВыслуги);
										ЗаписьЛгот.Вставить("ПервыйПараметрВыслугиЛет",Число(ПервыйПараметрВыслугиЛет));
										ЗаписьЛгот.Вставить("ВторойПараметрВыслугиЛет",Число(ВторойПараметрВыслугиЛет));
										ЗаписьЛгот.Вставить("ТретийПараметрВыслугиЛет",Число(ТретийПараметрВыслугиЛет));
										
										
										ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
										
									КонецЕсли;
									
									ДокументРезультат.Вывести(ОбластьСтаж);
									
								КонецЦикла;
							Иначе
								ДокументРезультат.Вывести(ОбластьСтаж);
							КонецЕсли;
							
						Иначе
							
							Если ЭтоПерваяСтрокаСтажа Тогда
								НомерДокумента = НомерДокумента + 1;
								ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
								ЭтоПерваяСтрокаСтажа = Ложь;
							Иначе
								Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
									ОбластьСтаж.Параметры[СчПараметр] = ""
								КонецЦикла;
							КонецЕсли;
							ОбластьСтаж.Параметры.ДатаНачалаПериода 	= ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаНачалаПериода");
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаКонцаПериода");
							ДокументРезультат.Вывести(ОбластьСтаж);
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					НомерДокумента = НомерДокумента + 1;
					ОбластьСтаж.Параметры.НомерСтроки = ?(ВыводимСЗВ_6_1,"", НомерДокумента);
					ДокументРезультат.Вывести(ОбластьСтаж);
				КонецЕсли; // Записи о стаже
				
				// Подвал формы на одного физлица
				Если ВыводимСЗВ_6_1 Тогда 
					ДокументРезультат.Вывести(ОбластьПодвал);
				КонецЕсли;
				
				Если ВыводитьСписок Тогда
						
					НомерСтрокиСписка = НомерСтрокиСписка + 1;
					ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерСтрокиСписка;
					
					// Проверим, уместится ли строка на странице или надо открывать новую страницу
					ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
						ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
						ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					КонецЕсли;
					Если ВывестиПодвалЛиста Тогда
						ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
					КонецЕсли;
					
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
					
				КонецЕсли;
				
			КонецЦикла; // по документам
			
			// выводим подвалы документов
			Если Не ВыводимСЗВ_6_1 Тогда 
				ДокументРезультат.Вывести(ОбластьПодвал);
			КонецЕсли;
			Если ВыводитьСписок Тогда
				// Список застрахованных лиц
				ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
			КонецЕсли;
			
			Если ПечатьДляРСВ1 Тогда
				ДокументДляРСВ1.Вывести(ДокументРезультат);
				Возврат ДокументДляРСВ1
			Иначе
				// показываем результаты
				Если ВыводитьСписок Тогда
					УниверсальныеМеханизмы.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + НомерПачкиРаботодателя);
				КонецЕсли;
				Возврат УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (" + ТипФормДокументов + "); пачка №" + НомерПачкиРаботодателя,,ДокументРезультат);
			КонецЕсли;


		КонецЕсли;
		
	КонецЕсли;
	
	Если ПечатьДляРСВ1 Тогда
		Возврат ДокументДляРСВ1
	КонецЕсли;
	
КонецФункции // ВывестиСЗВ_6()
Функция ДопустимыеЗначенияОсобыхУсловийТруда() Экспорт
	
	СписокПредопределенныхКодов = Новый СписокЗначений;
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_1,"27-1");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_2,"27-2");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_3,"27-3");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_4,"27-4");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_5,"27-5");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_6,"27-6");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_7,"27-7");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_8,"27-8");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_9,"27-9");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_10,"27-10");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст28_ОС,"27-ОС");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст28_ПЖ,"27-ПЖ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст28_СЕВ,"28-СЕВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсобыеУсловияТруда.Код КАК Код,
	|	ОсобыеУсловияТруда.Ссылка
	|ИЗ
	|	Справочник.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда
	|ГДЕ
	|	НЕ ОсобыеУсловияТруда.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;  
	
	Возврат СписокПредопределенныхКодов
	
КонецФункции 

Функция ДопустимыеЗначенияОснованийВыслугиЛет() Экспорт

	СписокПредопределенныхКодов = Новый СписокЗначений;
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_11ГР,"27-11ГР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_11ВП,"27-11ВП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_12,"27-12");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_14,"27-14");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_15,"27-15");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_СП,"27-СП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_ПД,"27-ПД");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_ПДРК,"27-ПДРК");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_ГД,"27-ГД");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_ГДХР,"27-ГДХР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_СМ,"27-СМ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_СМХР,"27-СМХР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ15,"ТВОРЧ15");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ20,"ТВОРЧ20");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ25,"ТВОРЧ25");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ30,"ТВОРЧ30");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.САМОЛЕТ,"САМОЛЕТ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.СПЕЦАВ,"СПЕЦАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.СПАСАВ,"СПАСАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.УЧЛЕТ,"УЧЛЕТ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ВЫСШПИЛ,"ВЫСШПИЛ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.НОРМАПР,"НОРМАПР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.НОРМСП,"НОРМСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.РЕАКТИВН,"РЕАКТИВН");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЛЕТРАБ,"ЛЕТРАБ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЛЕТИСП,"ЛЕТИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ОПЫТИСП,"ОПЫТИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИСПКЛС1,"ИСПКЛС1");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИТСИСП,"ИТСИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИТСМАВ,"ИТСМАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИНСПЕКТ,"ИНСПЕКТ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОснованияВыслугиЛет.Код КАК Код,
	|	ОснованияВыслугиЛет.Ссылка
	|ИЗ
	|	Справочник.ОснованияВыслугиЛет КАК ОснованияВыслугиЛет
	|ГДЕ
	|	НЕ ОснованияВыслугиЛет.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;  

	Возврат СписокПредопределенныхКодов
	
КонецФункции 
Функция ДопустимыеЗначенияОтсутствий(ОтчетныйПериод) Экспорт

	СписокПредопределенныхКодов = Новый СписокЗначений;
	Если ОтчетныйПериод < ДатаОтменыОтсутствияАДМИНИСТР() Тогда
		СписокПредопределенныхКодов.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.АДМИНИСТР, "АДМИНИСТР");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыИсчисляемогоСтраховогоСтажа2014.Код КАК Код,
	|	ПараметрыИсчисляемогоСтраховогоСтажа2014.Ссылка
	|ИЗ
	|	Справочник.ПараметрыИсчисляемогоСтраховогоСтажа2014 КАК ПараметрыИсчисляемогоСтраховогоСтажа2014
	|ГДЕ
	|	ПараметрыИсчисляемогоСтраховогоСтажа2014.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕТИПРЛ)
	|	И ПараметрыИсчисляемогоСтраховогоСтажа2014.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПараметрыИсчисляемогоСтраховогоСтажа2014.АДМИНИСТР)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;  

	Если ОтчетныйПериод >= ДатаВводаОснованияИсчисляемогоСтажаПоле() Тогда
		СписокПредопределенныхКодов.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕТИПРЛ, "ДЕТИПРЛ");
	КонецЕсли;
	
	Возврат СписокПредопределенныхКодов
	
КонецФункции 
Функция ДопустимыеЗначенияОснованийИсчисляемогоСтажа(ОтчетныйПериод) Экспорт

	СписокПредопределенныхКодов = Новый СписокЗначений;
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ,"ВОДОЛАЗ");

	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104,"УИК104");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН,"СЕЗОН");
	Если ОтчетныйПериод >= ДатаВводаОснованияИсчисляемогоСтажаПоле() Тогда
		СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ПОЛЕ, "ПОЛЕ");
	КонецЕсли;

	Возврат СписокПредопределенныхКодов
	
КонецФункции 
Процедура ВписатьВзносыВНаборДанных(НаборДанных, НачисленоСтраховая, УплаченоСтраховая, НачисленоНакопительная, УплаченоНакопительная) Экспорт 
	
	Если НачисленоСтраховая > 0 Или УплаченоСтраховая > 0 Тогда
		СуммаВзносов = НаборДанных.СуммаВзносовНаСтраховую.Значение;
		Если НачисленоСтраховая > 0 Тогда
			СуммаВзносов.Начислено = НачисленоСтраховая;
		КонецЕсли;
		Если УплаченоСтраховая > 0 Тогда
			СуммаВзносов.Уплачено = УплаченоСтраховая;
		КонецЕсли;
	Иначе
		НаборДанных.Удалить("СуммаВзносовНаСтраховую");
	КонецЕсли;
	
	Если НачисленоНакопительная > 0 Или УплаченоНакопительная> 0 Тогда
		СуммаВзносов = НаборДанных.СуммаВзносовНаНакопительную.Значение;
		Если НачисленоНакопительная > 0 Тогда
			СуммаВзносов.Начислено = НачисленоНакопительная;
		КонецЕсли;
		Если УплаченоНакопительная > 0 Тогда
			СуммаВзносов.Уплачено = УплаченоНакопительная;
		КонецЕсли;
	Иначе
		НаборДанных.Удалить("СуммаВзносовНаНакопительную");
	КонецЕсли;
	
КонецПроцедуры

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОпись2010(УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, МакетВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ", НаборЗаписейВходящаяОпись = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ") Экспорт
	
	НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, МакетВходящейОписи);
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
	// Составитель пачки
	НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение; 
	ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента); // ОрганизацияЮрФизЛицо, ОрганизацияИНН, ОрганизацияКПП, ОрганизацияОГРН, ОрганизацияНаименованиеОКОПФ, ОрганизацияНаименованиеПолное, ОрганизацияНаименованиеСокращенное

	// Устанавливаем значение Номер пачки
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = НомерПачки; 
	// Блок СоставДокументов
	ЗаполнитьСоставДокументов(НаборЗаписейВходящаяОпись, ТипДокумента, КоличествоДокументов);
	
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если ТипДокумента = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ" Тогда
		
		НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		НаборЗаписейВходящаяОпись.КодКатегории.Значение = ОбщегоНазначенияЗК.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
		
		НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.ОтчетныйПериод.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			НаборЗаписейВходящаяОпись.Удалить("КорректируемыйОтчетныйПериод");
		Иначе
			НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.КорректируемыйОтчетныйПериод.Значение;
			ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.КорректируемыйПериод));
		КонецЕсли;
		
		ВписатьВзносыВНаборДанных(НаборЗаписейВходящаяОпись, ВыборкаПоШапкеДокумента.НачисленоСтраховая, ВыборкаПоШапкеДокумента.УплаченоСтраховая, ВыборкаПоШапкеДокумента.НачисленоНакопительная, ВыборкаПоШапкеДокумента.УплаченоНакопительная);
		
	ИначеЕсли ТипДокумента = "СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_ВОЗНАГРАЖДЕНИЙ" Тогда
		НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		НаборЗаписейВходящаяОпись.КодКатегории.Значение = ОбщегоНазначенияЗК.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
		НаборЗаписейВходящаяОпись.ТипДоговора.Значение = ВыборкаПоШапкеДокумента.ТипДоговора;
		НаборЗаписейВходящаяОпись.ОтчетныйГод.Значение = ВыборкаПоШапкеДокумента.ОтчетныйПериод;
		НаборЗаписейСуммаВыплатИвознаграждений = НаборЗаписейВходящаяОпись.СуммаВыплатИвознаграждений.Значение;
		НаборЗаписейСуммаВыплатИвознаграждений.ТипСтроки = "ИТОГО ПО ПАЧКЕ";
		НаборЗаписейСуммаВыплатИвознаграждений.СуммаВыплатВсего = ВыборкаПоШапкеДокумента.Заработок;
		НаборЗаписейСуммаВыплатИвознаграждений.СуммаВыплатНачисленыСтраховыеВзносы = ВыборкаПоШапкеДокумента.ОблагаетсяВзносами;
	КонецЕсли;
	
	УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
	
	Возврат УзелПачкаВходящихДокументов;
	
КонецФункции // ЗаполнитьНаборЗаписейВходящаяОпись2010()

Функция ФайлСведенийОВзносахИСтаже(ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа, КоличествоДокументов, Заголовок, Отказ) Экспорт
	
	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	ТипФормДокументов		= ВыборкаПоШапкеДокумента.ТипФормДокументов;
	НомерПачки				= СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки);
	Ссылка					= ВыборкаПоШапкеДокумента.Ссылка;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
	
	// Список стран
	СписокСтран = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторСтранМира.Наименование,
	|	КлассификаторСтранМира.Код
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСтран.Вставить(СокрЛП(Выборка.Наименование), Строка(Выборка.Код));
	КонецЦикла;
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР70_2010");
	ТипДокументовПачки = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";
	
	// Создаем начальное дерево
	ДеревоВыгрузки = СоздатьДеревоXML();
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://schema.pfr.ru");
	УзелПФР = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", Атрибуты);
	ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
	// Добавляем ветки ПачкаВходящихДокументов и ВходящаяОпись
	ДанныеВходящейОписи = "";
	УзелПачкаВходящихДокументов = ЗаполнитьНаборЗаписейВходящаяОпись2010(УзелПФР, МакетФормата, ТипДокументовПачки, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, 1, ,ДанныеВходящейОписи);
	ФорматСЗВ6 = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ?(ТипФормДокументов = "СПВ-1","СПВ_1","СЗВ_6"));
	ФорматВыработкаКалендарная = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВыработкаКалендарная");
	ФорматВыработкаВЧасах = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВыработкаВЧасах");
	
	Если ТипФормДокументов = "СЗВ-6-2" Тогда
		ФорматСЗВ6.СтажевыйПериод.Значение.Удалить("КоличествоЛьготныхСоставляющих");
		ФорматСЗВ6.СтажевыйПериод.Значение.Удалить("ЛьготныйСтаж");
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		ФорматСЗВ6.Удалить("КорректируемыйОтчетныйПериод");
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		ФорматСЗВ6.Удалить("СуммаВзносовНаСтраховую");
		ФорматСЗВ6.Удалить("СуммаВзносовНаНакопительную");
		ФорматСЗВ6.Удалить("СтажевыйПериод");
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ФорматСЗВ6.Удалить("КПП");
		ТаблицаПолей = ФорматСЗВ6.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	КонецЕсли;
	
	ФорматИностранныйАдрес = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 3);
	ФорматНеструктурированныйАдрес = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 2);
	
	НомерДокументаВПачке = 1;
	ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
	Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки")	Цикл
		
		НаборЗаписейСЗВ6 = СкопироватьСтруктуруДанных(ФорматСЗВ6);
		
		// Общие данные пачки - берем их из описи
		НаборЗаписейСЗВ6.ВидФормы.Значение = ВыборкаПоШапкеДокумента.ТипФормДокументов;
		НаборЗаписейСЗВ6.ТипСведений.Значение = ДанныеВходящейОписи.ТипСведений.Значение;
		НаборЗаписейСЗВ6.РегистрационныйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.РегистрационныйНомер.Значение;
		НаборЗаписейСЗВ6.НаименованиеКраткое.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НаименованиеКраткое.Значение;
		НаборЗаписейСЗВ6.НалоговыйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НалоговыйНомер.Значение;
		НаборЗаписейСЗВ6.КодКатегории.Значение = ДанныеВходящейОписи.КодКатегории.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.ОтчетныйПериод.Значение);
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			Если ТипФормДокументов = "СПВ-1" Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
			Иначе
				ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.КорректируемыйОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
			КонецЕсли;
		КонецЕсли;
		НаборЗаписейСЗВ6.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
		
		// Данные физлица
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: " + "По сотруднику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = "ИСХОДНАЯ"  Тогда
			Если ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода = NULL И ВыборкаПоРаботникиОрганизации.НачисленоСтраховая = 0 И ВыборкаПоРаботникиОрганизации.НачисленоНакопительная = 0 Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Данных о стаже и взносах не обнаружено!", Отказ, Заголовок);
			КонецЕсли; 
		КонецЕсли; 
				
		Фамилия = СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникиОрганизации.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество);
		
		НаборЗаписейСЗВ6.НомерВПачке.Значение = НомерДокументаВПачке;
		НаборЗаписейСЗВ6.СтраховойНомер.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
		НаборЗаписейФИО = НаборЗаписейСЗВ6.ФИО.Значение;
		НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.Имя = ВРег(Имя);
		НаборЗаписейФИО.Отчество = ВРег(Отчество);
		
		Если ТипФормДокументов = "СПВ-1" Тогда
			НаборЗаписейСЗВ6.ДатаСоставленияНа.Значение = ВыборкаПоРаботникиОрганизации.ДатаСоставления 
		Иначе
			// Заполняем адрес застрахованного лица, если он есть.
			Если СокрЛП(СтрЗаменить(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = ВыборкаПоРаботникиОрганизации.АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";	
			КонецЕсли; 
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования) Тогда
				ТекстОшибки  ="";
				НаборЗаписейАдресЗЛ = НаборЗаписейСЗВ6.АдресЗЛ.Значение;
				ЗаполнитьАдрес(НаборЗаписейАдресЗЛ, ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстОшибки);
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: " + СтрокаНачалаСообщенияОбОшибке + " Адрес" + ТекстОшибки, Ложь);
				КонецЕсли;
			Иначе
				НаборЗаписейСЗВ6.Удалить("АдресЗЛ") 	
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда // заполнение отменяющей формы завершено
			ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,""), НаборЗаписейСЗВ6);
			Продолжить;
		КонецЕсли;
		
		ВписатьВзносыВНаборДанных(НаборЗаписейСЗВ6, ВыборкаПоРаботникиОрганизации.НачисленоСтраховая, ВыборкаПоРаботникиОрганизации.УплаченоСтраховая, ВыборкаПоРаботникиОрганизации.НачисленоНакопительная, ВыборкаПоРаботникиОрганизации.УплаченоНакопительная);
		
		// Выводим стаж
		
		ФорматСтажевыйПериод = СкопироватьСтруктуруДанных(НаборЗаписейСЗВ6.СтажевыйПериод.Значение);
		НаборЗаписейСЗВ6.Удалить("СтажевыйПериод");
		
		УзелСЗВ61 = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
		ДобавитьИнформациюВДерево(УзелСЗВ61, НаборЗаписейСЗВ6);
		
		Если ТипФормДокументов = "СЗВ-6-2" Тогда
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
				
				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода) И ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода) Тогда
					
					ФорматСтажевыйПериод.НомерСтроки.Значение = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
					ФорматСтажевыйПериод.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
					ФорматСтажевыйПериод.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
					
					УзелСтажевыйПериод = ДобавитьУзелВДеревоXML(УзелСЗВ61, "СтажевыйПериод","");
					ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
					
					// Признак наличия у работника основания для льготного стажа
					РаботникОрганизацииИмеетЛьготныйСтаж =	ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод)  
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод)
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) 
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) 
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа);
							
					Если РаботникОрганизацииИмеетЛьготныйСтаж Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В записи о стаже имеется льготный стаж или прочие особенности. 
						|				Данные необходимо подавать по форме СЗВ-6-1!", Отказ, Заголовок);
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ВывестиСведенияОСтаже(ВыборкаПоРаботникиОрганизации, УзелСЗВ61, ФорматСтажевыйПериод);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;	 
	
	// Преобразуем дерево в строковое описание XML
	ТекстФайла = ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
	Возврат ТекстФайла
	
КонецФункции // ФайлСведенийОВзносахИСтаже()

Процедура ВывестиСведенияОСтаже(ВыборкаПоРаботникиОрганизации, УзелЗастрахованного, ФорматСтажа)  Экспорт
	
	ДопустимыеЗначенияТретьегоПараметра = СЗВ6_ДопустимыеЗначенияТретьегоПараметра();
	
	ФорматЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматСтажа.ЛьготныйСтаж.Значение);
	ФорматСтажа.Удалить("КоличествоЛьготныхСоставляющих");
	ФорматСтажа.Удалить("ЛьготныйСтаж");
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
			
			УзелСтажевыйПериод = ДобавитьУзелВДеревоXML(УзелЗастрахованного, "СтажевыйПериод","");
			ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажа);
			
			УзелСтажевыйПериод.Строки.Найти("НомерСтроки").Значение = Строка(ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи);
			УзелСтажевыйПериод.Строки.Найти("ДатаНачалаПериода").Значение = Формат(ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода,"ДФ=dd.MM.yyyy");
			УзелСтажевыйПериод.Строки.Найти("ДатаКонцаПериода").Значение = Формат(ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода,"ДФ=dd.MM.yyyy");
			
			ВыводитьЛьготныйСтаж = Ложь;
			
			НаборЗаписейЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
			НаборЗаписейОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
			
			//ДекретДети
			Если ДопустимыеЗначенияТретьегоПараметра.Получить(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
				НаборЗаписейОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
			КонецЕсли;
			ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобенностиУчета.ДекретДети.Значение);
			
			Если НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЕТИ"
				Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "АДМИНИСТР"
				Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЛДЕТИ"
				Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ЧАЭС"
				Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "НЕОПЛ" Тогда
				//	
				НаборЗаписейОсобенностиУчета.Удалить("ВыслугаЛет");
				НаборЗаписейОсобенностиУчета.Удалить("ИсчисляемыйСтаж");
				НаборЗаписейОсобенностиУчета.Удалить("ОсобыеУсловияТруда");
				НаборЗаписейОсобенностиУчета.Удалить("ТерриториальныеУсловия");
				
			Иначе
				
				// Территориальные условия
				НаборЗаписейТерриториальныеУсловия = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Значение;
				НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод));
				Если ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР Тогда
					НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияСтавка;
				Иначе
					НаборЗаписейТерриториальныеУсловия.Удалить("Коэффициент");
					ОписаниеПолей = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Поля;
					СтрокаКУдалению = ОписаниеПолей.Найти("Коэффициент","ИмяПоля");
					ОписаниеПолей.Удалить(СтрокаКУдалению);
				КонецЕсли;
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ОснованиеТУ);
				
				// Особые условия труда
				НаборЗаписейОсобыеУсловияТруда = НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.Значение;
				НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод));
				НаборЗаписейОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод));
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ);
				
				// Исчисляемый стаж
				НаборЗаписейИсчисляемыйСтаж = НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.Значение;
				НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод));
				Если НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЕКРЕТ" Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ВРНЕТРУД" Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЛОТПУСК" Тогда
					НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаКалендарная");
					НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
				ИначеЕсли ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаКалендарная");
				ИначеЕсли ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
					НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
					НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
					НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
				Иначе 	
					НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
				КонецЕсли;
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение);
				
				// Выслуга лет
				НаборЗаписейВыслугаЛет = НаборЗаписейОсобенностиУчета.ВыслугаЛет.Значение;
				НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод));
				НаборЗаписейВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
				Если НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЕКРЕТ" Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ВРНЕТРУД" Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЛОТПУСК" Тогда
					НаборЗаписейВыслугаЛет.Удалить("ВыработкаВЧасах");
					НаборЗаписейВыслугаЛет.Удалить("ВыработкаКалендарная");
				ИначеЕсли ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТС Или ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
					НаборЗаписейВыслугаЛет.Удалить("ВыработкаВЧасах");
					НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВыработкаКалендарная.Значение;
					НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
				Иначе
					НаборЗаписейВыслугаЛет.Удалить("ВыработкаКалендарная");
					НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
				КонецЕсли;
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение);
				
			КонецЕсли;
			
			Если ВыводитьЛьготныйСтаж Тогда
				ЧислоДополнительныхЗаписейОСтаже = 1;
				СтрокаКоличествоЛьготныхСоставляющих = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "КоличествоЛьготныхСоставляющих", 1);
				НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
				УзелЛьготныйСтаж = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
				ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
			Иначе
				ЧислоДополнительныхЗаписейОСтаже = 0;
			КонецЕсли;
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписейЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
				НаборЗаписейДопОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
				
				ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
				НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
				
				// Территориальные условия
				НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Значение;
				НаборЗаписейДопТерриториальныеУсловия.ОснованиеТУ = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод));
				Если ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР Тогда
					НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияСтавка;
				Иначе
					НаборЗаписейДопТерриториальныеУсловия.Удалить("Коэффициент");
					ОписаниеПолей = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Поля;
					СтрокаКУдалению = ОписаниеПолей.Найти("Коэффициент","ИмяПоля");
					ОписаниеПолей.Удалить(СтрокаКУдалению);
				КонецЕсли;
				
				// Особые условия труда
				НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейДопОсобенностиУчета.ОсобыеУсловияТруда.Значение;
				НаборЗаписейДопОсобыеУсловияТруда.ОснованиеОУТ = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод));
				НаборЗаписейДопОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод));
				
				// Исчисляемый стаж
				НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейДопОсобенностиУчета.ИсчисляемыйСтаж.Значение;
				НаборЗаписейДопИсчисляемыйСтаж.ОснованиеИС.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод));
				Если ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					НаборЗаписейВыработкаВЧасах = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВыработкаКалендарная");
				ИначеЕсли ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0 ИЛИ ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
					НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
					НаборЗаписейДопВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейДопВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
				Иначе
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
				КонецЕсли;
				
				// Выслуга лет
				НаборЗаписейДопВыслугаЛет = НаборЗаписейДопОсобенностиУчета.ВыслугаЛет.Значение;
				НаборЗаписейДопВыслугаЛет.ОснованиеВЛ.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод));
				НаборЗаписейДопВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
				Если ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТС Или ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
					НаборЗаписейДопВыслугаЛет.Удалить("ВыработкаВЧасах");
					НаборЗаписейВыработкаКалендарная = НаборЗаписейДопВыслугаЛет.ВыработкаКалендарная.Значение;
					НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
				Иначе
					НаборЗаписейДопВыслугаЛет.Удалить("ВыработкаКалендарная");
					НаборЗаписейДопВыработкаВЧасах = НаборЗаписейДопВыслугаЛет.ВыработкаВЧасах.Значение;
					НаборЗаписейДопВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					НаборЗаписейДопВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
				КонецЕсли;
				
				//ДекретДети
				Если ДопустимыеЗначенияТретьегоПараметра.Получить(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
					НаборЗаписейДопОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
				КонецЕсли;
				
				УзелЛьготныйСтаж = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
				ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				
			КонецЦикла;// Выборка по дополнительным записям о стаже
			
			Если ЧислоДополнительныхЗаписейОСтаже > 1 Тогда
				СтрокаКоличествоЛьготныхСоставляющих.Значение = ЧислоДополнительныхЗаписейОСтаже;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

// Вычисляет адреса для информирования для переданной таблицы физлиц
//
// Параметры
//
// Возвращаемое значение:
//   Таблица значений или Неопределено
//
Функция АдресаДляИнформирования(ТаблицаФизлиц, Организация, ДатаАктуальности, Режим = "") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.НомерСтроки
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	&РаботникиОрганизации КАК РаботникиОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.УстановитьПараметр("РаботникиОрганизации", ТаблицаФизлиц);
	Запрос.Выполнить();
	
	Если Режим = "ВсеАдреса" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	РаботникиОрганизации.ФизЛицо,
		|	ВЫБОР
		|		КОГДА АдресаДляИнформирования.Поле1 ЕСТЬ НЕ NULL 
		|			ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 + "","" + ВЫБОР
		|					КОГДА АдресаДляИнформирования.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|						ТОГДА ""дом""
		|					ИНАЧЕ ""владение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаДляИнформирования.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|						ТОГДА ""корпус""
		|					ИНАЧЕ ""строение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаДляИнформирования.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|						ТОГДА ""кв.""
		|					ИНАЧЕ ""оф.""
		|				КОНЕЦ
		|		КОГДА АдресаФактические.Поле1 ЕСТЬ НЕ NULL 
		|			ТОГДА "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
		|					КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|						ТОГДА ""дом""
		|					ИНАЧЕ ""владение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|						ТОГДА ""корпус""
		|					ИНАЧЕ ""строение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|						ТОГДА ""кв.""
		|					ИНАЧЕ ""оф.""
		|				КОНЕЦ
		|		КОГДА АдресаРегистрации.Поле1 ЕСТЬ НЕ NULL 
		|			ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
		|					КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|						ТОГДА ""дом""
		|					ИНАЧЕ ""владение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|						ТОГДА ""корпус""
		|					ИНАЧЕ ""строение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|						ТОГДА ""кв.""
		|					ИНАЧЕ ""оф.""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК АдресДляИнформирования
		|ИЗ
		|	ВТФизЛица КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаФактические.Объект
		|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
		|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаРегистрации.Объект
		|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
		|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаДляИнформирования.Объект
		|			И (АдресаДляИнформирования.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))
		|			И (АдресаДляИнформирования.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли Режим = "ИзменившиесяАдреса" Тогда
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования
		|ПОМЕСТИТЬ ВТПереданныеВПФРДокументы
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|ГДЕ
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация = &Организация
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования <> """"
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Проведен
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ПринятоВПФР
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата <= &ДатаАктуальности
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо В
		|			(ВЫБРАТЬ
		|				ФизЛица.ФизЛицо
		|			ИЗ
		|				ВТФизЛица КАК ФизЛица)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДокументов.ФизЛицо КАК ФизЛицо,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования КАК АдресДляИнформирования
		|ПОМЕСТИТЬ ВТПереданныеВПФРАдреса
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Дата) КАК Дата,
		|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		ВТПереданныеВПФРДокументы КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо) КАК ДатыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРДокументы КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|		ПО ДатыДокументов.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Дата
		|			И ДатыДокументов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	РаботникиОрганизации.ФизЛицо,
		|	ВЫБОР
		|		КОГДА ПереданныеВПФРАдреса.АдресДляИнформирования ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА АдресаДляИнформирования.Поле1 ЕСТЬ НЕ NULL 
		|						ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 + "","" + ВЫБОР
		|								КОГДА АдресаДляИнформирования.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|									ТОГДА ""дом""
		|								ИНАЧЕ ""владение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаДляИнформирования.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|									ТОГДА ""корпус""
		|								ИНАЧЕ ""строение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаДляИнформирования.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|									ТОГДА ""кв.""
		|								ИНАЧЕ ""оф.""
		|							КОНЕЦ
		|					КОГДА АдресаФактические.Поле1 ЕСТЬ НЕ NULL 
		|						ТОГДА "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
		|								КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|									ТОГДА ""дом""
		|								ИНАЧЕ ""владение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|									ТОГДА ""корпус""
		|								ИНАЧЕ ""строение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|									ТОГДА ""кв.""
		|								ИНАЧЕ ""оф.""
		|							КОНЕЦ
		|					КОГДА АдресаРегистрации.Поле1 ЕСТЬ НЕ NULL 
		|						ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
		|								КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|									ТОГДА ""дом""
		|								ИНАЧЕ ""владение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|									ТОГДА ""корпус""
		|								ИНАЧЕ ""строение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|									ТОГДА ""кв.""
		|								ИНАЧЕ ""оф.""
		|							КОНЕЦ
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		КОГДА ВЫБОР
		|				КОГДА АдресаДляИнформирования.Поле1 ЕСТЬ НЕ NULL 
		|					ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 + "","" + ВЫБОР
		|							КОГДА АдресаДляИнформирования.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|								ТОГДА ""дом""
		|							ИНАЧЕ ""владение""
		|						КОНЕЦ + "","" + ВЫБОР
		|							КОГДА АдресаДляИнформирования.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|								ТОГДА ""корпус""
		|							ИНАЧЕ ""строение""
		|						КОНЕЦ + "","" + ВЫБОР
		|							КОГДА АдресаДляИнформирования.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|								ТОГДА ""кв.""
		|							ИНАЧЕ ""оф.""
		|						КОНЕЦ
		|				КОГДА АдресаФактические.Поле1 ЕСТЬ НЕ NULL 
		|					ТОГДА "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
		|							КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|								ТОГДА ""дом""
		|							ИНАЧЕ ""владение""
		|						КОНЕЦ + "","" + ВЫБОР
		|							КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|								ТОГДА ""корпус""
		|							ИНАЧЕ ""строение""
		|						КОНЕЦ + "","" + ВЫБОР
		|							КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|								ТОГДА ""кв.""
		|							ИНАЧЕ ""оф.""
		|						КОНЕЦ
		|				КОГДА АдресаРегистрации.Поле1 ЕСТЬ НЕ NULL 
		|					ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
		|							КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|								ТОГДА ""дом""
		|							ИНАЧЕ ""владение""
		|						КОНЕЦ + "","" + ВЫБОР
		|							КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|								ТОГДА ""корпус""
		|							ИНАЧЕ ""строение""
		|						КОНЕЦ + "","" + ВЫБОР
		|							КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|								ТОГДА ""кв.""
		|							ИНАЧЕ ""оф.""
		|						КОНЕЦ
		|				ИНАЧЕ """"
		|			КОНЕЦ <> ПереданныеВПФРАдреса.АдресДляИнформирования
		|			ТОГДА ВЫБОР
		|					КОГДА АдресаДляИнформирования.Поле1 ЕСТЬ НЕ NULL 
		|						ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 + "","" + ВЫБОР
		|								КОГДА АдресаДляИнформирования.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|									ТОГДА ""дом""
		|								ИНАЧЕ ""владение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаДляИнформирования.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|									ТОГДА ""корпус""
		|								ИНАЧЕ ""строение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаДляИнформирования.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|									ТОГДА ""кв.""
		|								ИНАЧЕ ""оф.""
		|							КОНЕЦ
		|					КОГДА АдресаФактические.Поле1 ЕСТЬ НЕ NULL 
		|						ТОГДА "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
		|								КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|									ТОГДА ""дом""
		|								ИНАЧЕ ""владение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|									ТОГДА ""корпус""
		|								ИНАЧЕ ""строение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|									ТОГДА ""кв.""
		|								ИНАЧЕ ""оф.""
		|							КОНЕЦ
		|					КОГДА АдресаРегистрации.Поле1 ЕСТЬ НЕ NULL 
		|						ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
		|								КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|									ТОГДА ""дом""
		|								ИНАЧЕ ""владение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|									ТОГДА ""корпус""
		|								ИНАЧЕ ""строение""
		|							КОНЕЦ + "","" + ВЫБОР
		|								КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|									ТОГДА ""кв.""
		|								ИНАЧЕ ""оф.""
		|							КОНЕЦ
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК АдресДляИнформирования
		|ИЗ
		|	ВТФизЛица КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаФактические.Объект
		|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
		|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаРегистрации.Объект
		|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
		|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаДляИнформирования.Объект
		|			И (АдресаДляИнформирования.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))
		|			И (АдресаДляИнформирования.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРАдреса КАК ПереданныеВПФРАдреса
		|		ПО РаботникиОрганизации.ФизЛицо = ПереданныеВПФРАдреса.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Возврат Неопределено
		
	КонецЕсли;	
	
КонецФункции // АдресаДляИнформирования()

// Читает данные о застрахованном лице для заполнения строки документа персучета
//
// Параметры
//  Физлицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//   Структура со следующими полями: СтраховойНомерПФР, Фамилия, Имя, Отчество и, если требуется, - АдресДляИнформирования
//
Функция ДанныеФизЛицаДляДокументаПерсучета(Физлицо, ДатаАктуальности, Организация, КатегорияЗастрахованныхЛиц, ОтчетныйПериод, ПолучатьАдрес = Ложь, ТипДоговора = Неопределено) Экспорт 
	
	ДанныеФизЛица = Новый Структура;
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ОФизлице = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Физлицо,"СтраховойНомерПФР,Наименование, ДатаРождения");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо",			ФизЛицо);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Фамилия = Выборка.Фамилия;
		Имя = Выборка.Имя;
		Отчество = Выборка.Отчество;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Фамилия + Имя + Отчество) Тогда
		ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ОФизлице.Наименование,Фамилия,Имя,Отчество);
	КонецЕсли;
	
	ДанныеФизЛица.Вставить("СтраховойНомерПФР", ОФизлице.СтраховойНомерПФР);
	ДанныеФизЛица.Вставить("Фамилия", Фамилия);
	ДанныеФизЛица.Вставить("Имя", Имя);
	ДанныеФизЛица.Вставить("Отчество", Отчество);
	ДанныеФизЛица.Вставить("ДатаРождения", ОФизлице.ДатаРождения);
	Если ПолучатьАдрес Тогда
		
		ТаблицаФизлиц = Новый ТаблицаЗначений;
		ТаблицаФизлиц.Колонки.Добавить("ФизЛицо",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаФизлиц.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
		
		СтрокаФизлица = ТаблицаФизлиц.Добавить();
		СтрокаФизлица.ФизЛицо = ФизЛицо;
		СтрокаФизлица.НомерСтроки = 1;
		
		НовыйАдрес = АдресаДляИнформирования(ТаблицаФизлиц, Организация, ДатаАктуальности, "ИзменившиесяАдреса");
		Если НовыйАдрес <> Неопределено Тогда
			ДанныеФизЛица.Вставить("АдресДляИнформирования", НовыйАдрес[0].АдресДляИнформирования);
		Иначе 	
			ДанныеФизЛица.Вставить("АдресДляИнформирования", "");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФизЛица.Вставить("НачисленоСтраховая", 0);
	ДанныеФизЛица.Вставить("УплаченоСтраховая", 0);
	ДанныеФизЛица.Вставить("НачисленоНакопительная", 0);
	ДанныеФизЛица.Вставить("УплаченоНакопительная", 0);
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(КатегорияЗастрахованныхЛиц) Или Не ЗначениеЗаполнено(ОтчетныйПериод) Тогда
		Возврат ДанныеФизЛица
	КонецЕсли;
	
	Если ТипДоговора = Неопределено Тогда
		ТипДоговора = Перечисления.ТипДоговораСЗВ63.ПустаяСсылка();
	КонецЕсли;
	
	МассивФизлиц = Новый Массив;
	МассивФизлиц.Добавить(Физлицо);
	ВзносыФизлиц = ПроцедурыПерсонифицированногоУчетаПолныеПрава.ДанныеОВзносахПоКатегориям(ДатаАктуальности, ОтчетныйПериод, ОтчетныйПериод, Организация, МассивФизлиц);
	ВзносыФизлиц.Индексы.Добавить("Физлицо,КатегорияЗастрахованныхЛиц,ТипДоговора");
	СтруктураПоиска = Новый Структура("Физлицо,КатегорияЗастрахованныхЛиц,ТипДоговора", Физлицо, КатегорияЗастрахованныхЛиц, ТипДоговора);
	СтрокиФизлица = ВзносыФизлиц.НайтиСтроки(СтруктураПоиска);
	Если СтрокиФизлица.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица, СтрокиФизлица[0]);
	КонецЕсли;
	
	Возврат ДанныеФизЛица
	
КонецФункции // ДанныеФизЛицаДляДокументаПерсучета()

Функция ДоначисленныеВзносыДляКорректирующегоДокумента2012(Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, ТаблицаФизлиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки,
	|	СуммыВзносов.ФизЛицо КАК ФизЛицо,
	|	СуммыВзносов.НачисленоНакопительная,
	|	СуммыВзносов.НачисленоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная,
	|	СуммыВзносов.УплаченоСтраховая
	|ПОМЕСТИТЬ ВТСуммыВзносов
	|ИЗ
	|	&РаботникиОрганизации КАК СуммыВзносов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.УстановитьПараметр("РаботникиОрганизации", ТаблицаФизлиц);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Дата) КАК Дата,
	|	КорректирующаяФорма.ФизЛицо
	|ПОМЕСТИТЬ ВТДата
	|ИЗ
	|	ВТСуммыВзносов КАК КорректирующаяФорма
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО КорректирующаяФорма.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4.ФизЛицо
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Дата < &Дата
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректирующаяФорма.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер) КАК Номер,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	Даты.ФизЛицо
	|ПОМЕСТИТЬ ВТОписаниеДокумента
	|ИЗ
	|	ВТДата КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО Даты.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	Даты.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписаниеДокумента.ФизЛицо,
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТПредыдущиеДокументы
	|ИЗ
	|	ВТОписаниеДокумента КАК ОписаниеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО ОписаниеДокумента.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата
	|			И ОписаниеДокумента.Номер = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ОписаниеДокумента.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки КАК НомерСтроки,
	|	СуммыВзносов.ФизЛицо,
	|	СуммыВзносов.НачисленоНакопительная - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоНакопительная, 0) КАК ДоначисленоНакопительная,
	|	СуммыВзносов.НачисленоСтраховая - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоСтраховая, 0) КАК ДоначисленоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоНакопительная, 0) КАК ДоУплаченоНакопительная,
	|	СуммыВзносов.УплаченоСтраховая - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоСтраховая, 0) КАК ДоУплаченоСтраховая
	|ИЗ
	|	ВТСуммыВзносов КАК СуммыВзносов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредыдущиеДокументы КАК ПредыдущиеДокументы
	|		ПО СуммыВзносов.ФизЛицо = ПредыдущиеДокументы.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|		ПО (ПредыдущиеДокументы.Ссылка = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка)
	|			И СуммыВзносов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОтчетныйПериод", КорректируемыйПериод);
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", КатегорияЗастрахованныхЛиц);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДоначисленныеВзносыДляКорректирующегоДокумента2013(Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, ТаблицаФизлиц, ТипДоговора, ОтчетныйПериод, ВсеВзносыФизлиц)
	
	Если КорректируемыйПериод < ПроведениеРасчетов.ДатаВводаДополнительногоТарифаЗаРаботыСДосрочнойПенсией() Тогда
		Возврат	ДоначисленныеВзносыДляКорректирующегоДокумента2012(Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, ТаблицаФизлиц)  
	КонецЕсли;
	
	Если ТипДоговора = Неопределено Тогда
		ТипДоговора = Перечисления.ТипДоговораСЗВ63.ПустаяСсылка()
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки,
	|	СуммыВзносов.ФизЛицо КАК ФизЛицо,
	|	СуммыВзносов.НачисленоНакопительная,
	|	СуммыВзносов.НачисленоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная,
	|	СуммыВзносов.УплаченоСтраховая
	|ПОМЕСТИТЬ ВТСуммыВзносов
	|ИЗ
	|	&РаботникиОрганизации КАК СуммыВзносов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.УстановитьПараметр("РаботникиОрганизации", ТаблицаФизлиц);
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Если ЗначениеЗаполнено(ВсеВзносыФизлиц) Тогда
		Запрос.УстановитьПараметр("РаботникиОрганизации", ВсеВзносыФизлиц);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
		Запрос.УстановитьПараметр("КонецОтчетногоПериода", ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод));
		Запрос.УстановитьПараметр("КорректируемыйПериод", КорректируемыйПериод);
		Запрос.УстановитьПараметр("КонецКорректируемогоПериода", ОкончаниеОтчетногоПериодаПерсучета(КорректируемыйПериод));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетныеДанные.ФизЛицо КАК ФизЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	РасчетныеДанные.ТипДоговора,
		|	РасчетныеДанные.НачисленоСтраховая КАК НачисленоСтраховая,
		|	РасчетныеДанные.НачисленоНакопительная КАК НачисленоНакопительная
		|ПОМЕСТИТЬ ВТСуммыВзносовПоКатегориямДоговорам
		|ИЗ
		|	&РаботникиОрганизации КАК РасчетныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуммыВзносовПоКатегориямДоговорам.ФизЛицо,
		|	СУММА(СуммыВзносовПоКатегориямДоговорам.НачисленоСтраховая) КАК НачисленоСтраховая,
		|	СУММА(СуммыВзносовПоКатегориямДоговорам.НачисленоНакопительная) КАК НачисленоНакопительная
		|ПОМЕСТИТЬ ВТСуммыПоКатегорииДокумента
		|ИЗ
		|	ВТСуммыВзносовПоКатегориямДоговорам КАК СуммыВзносовПоКатегориямДоговорам
		|ГДЕ
		|	СуммыВзносовПоКатегориямДоговорам.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
		|	И СуммыВзносовПоКатегориямДоговорам.ТипДоговора = &ТипДоговора
		|
		|СГРУППИРОВАТЬ ПО
		|	СуммыВзносовПоКатегориямДоговорам.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуммыВзносовПоКатегориямДоговорам.ФизЛицо,
		|	СУММА(СуммыВзносовПоКатегориямДоговорам.НачисленоСтраховая) КАК НачисленоСтраховая,
		|	СУММА(СуммыВзносовПоКатегориямДоговорам.НачисленоНакопительная) КАК НачисленоНакопительная
		|ПОМЕСТИТЬ ВТСуммыПоДругимКатегориям
		|ИЗ
		|	ВТСуммыВзносовПоКатегориямДоговорам КАК СуммыВзносовПоКатегориямДоговорам
		|ГДЕ
		|	СуммыВзносовПоКатегориямДоговорам.КатегорияЗастрахованныхЛиц <> &КатегорияЗастрахованныхЛиц
		|	И СуммыВзносовПоКатегориямДоговорам.ТипДоговора <> &ТипДоговора
		|
		|СГРУППИРОВАТЬ ПО
		|	СуммыВзносовПоКатегориямДоговорам.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗастрахованныхЛиц.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА СуммыПоКатегорииДокумента.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СуммыПоДругимКатегориям.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА СУММА(СтраховыеВзносыИсчисленные.ПФРСтраховая + СтраховыеВзносыИсчисленные.ПФРСтраховаяЕНВД)
		|		КОГДА СуммыПоДругимКатегориям.НачисленоСтраховая = 0
		|			ТОГДА СУММА(СтраховыеВзносыИсчисленные.ПФРСтраховая + СтраховыеВзносыИсчисленные.ПФРСтраховаяЕНВД)
		|		ИНАЧЕ СУММА(СтраховыеВзносыИсчисленные.ПФРСтраховая + СтраховыеВзносыИсчисленные.ПФРСтраховаяЕНВД) * СуммыПоКатегорииДокумента.НачисленоСтраховая / (СуммыПоКатегорииДокумента.НачисленоСтраховая + СуммыПоДругимКатегориям.НачисленоСтраховая)
		|	КОНЕЦ КАК ДоначисленоСтраховая,
		|	ВЫБОР
		|		КОГДА СуммыПоКатегорииДокумента.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СуммыПоДругимКатегориям.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА СУММА(СтраховыеВзносыИсчисленные.ПФРНакопительная + СтраховыеВзносыИсчисленные.ПФРНакопительнаяЕНВД)
		|		КОГДА СуммыПоДругимКатегориям.НачисленоНакопительная = 0
		|			ТОГДА СУММА(СтраховыеВзносыИсчисленные.ПФРНакопительная + СтраховыеВзносыИсчисленные.ПФРНакопительнаяЕНВД)
		|		ИНАЧЕ СУММА(СтраховыеВзносыИсчисленные.ПФРНакопительная + СтраховыеВзносыИсчисленные.ПФРНакопительнаяЕНВД) * СуммыПоКатегорииДокумента.НачисленоНакопительная / (СуммыПоКатегорииДокумента.НачисленоНакопительная + СуммыПоДругимКатегориям.НачисленоНакопительная)
		|	КОНЕЦ КАК ДоначисленоНакопительная
		|ПОМЕСТИТЬ ВТДоначисленоПоДаннымУчета
		|ИЗ
		|	ВТСуммыВзносов КАК ДанныеЗастрахованныхЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтраховыеВзносыИсчисленные КАК СтраховыеВзносыИсчисленные
		|		ПО ДанныеЗастрахованныхЛиц.ФизЛицо = СтраховыеВзносыИсчисленные.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыПоКатегорииДокумента КАК СуммыПоКатегорииДокумента
		|		ПО ДанныеЗастрахованныхЛиц.ФизЛицо = СуммыПоКатегорииДокумента.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыПоДругимКатегориям КАК СуммыПоДругимКатегориям
		|		ПО ДанныеЗастрахованныхЛиц.ФизЛицо = СуммыПоДругимКатегориям.ФизЛицо
		|ГДЕ
		|	СтраховыеВзносыИсчисленные.ОбособленноеПодразделение = &Организация
		|	И СтраховыеВзносыИсчисленные.Организация = &ГоловнаяОрганизация
		|	И СтраховыеВзносыИсчисленные.Период МЕЖДУ &ОтчетныйПериод И &КонецОтчетногоПериода
		|	И НАЧАЛОПЕРИОДА(СтраховыеВзносыИсчисленные.Период, КВАРТАЛ) > НАЧАЛОПЕРИОДА(СтраховыеВзносыИсчисленные.ДатаПолученияДохода, КВАРТАЛ)
		|	И СтраховыеВзносыИсчисленные.ДатаПолученияДохода МЕЖДУ &КорректируемыйПериод И &КонецКорректируемогоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	СуммыПоКатегорииДокумента.НачисленоСтраховая,
		|	СуммыПоДругимКатегориям.НачисленоСтраховая,
		|	СуммыПоКатегорииДокумента.НачисленоНакопительная,
		|	СуммыПоДругимКатегориям.НачисленоНакопительная,
		|	СуммыПоКатегорииДокумента.ФизЛицо,
		|	СуммыПоДругимКатегориям.ФизЛицо,
		|	ДанныеЗастрахованныхЛиц.НомерСтроки";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СуммыВзносов.НомерСтроки,
		|	0 КАК ДоначисленоНакопительная,
		|	0 КАК ДоначисленоСтраховая
		|ПОМЕСТИТЬ ВТДоначисленоПоДаннымУчета
		|ИЗ
		|	&РаботникиОрганизации КАК СуммыВзносов";
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ОтчетныйПериод", КорректируемыйПериод);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.Дата) КАК Дата,
	|	КорректирующаяФорма.ФизЛицо
	|ПОМЕСТИТЬ ВТДата
	|ИЗ
	|	ВТСуммыВзносов КАК КорректирующаяФорма
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4.РаботникиОрганизации КАК ПачкаДокументовСЗВ_6_4РаботникиОрганизации
	|		ПО КорректирующаяФорма.ФизЛицо = ПачкаДокументовСЗВ_6_4РаботникиОрганизации.ФизЛицо
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.Организация = &Организация
	|	И ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.ТипДоговора = &ТипДоговора
	|	И ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.Дата < &Дата
	|	И ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.Проведен
	|	И ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.ОтчетныйПериод
	|			ИНАЧЕ ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректирующаяФорма.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПачкаДокументовСЗВ_6_4.Номер) КАК Номер,
	|	ПачкаДокументовСЗВ_6_4.Дата,
	|	Даты.ФизЛицо
	|ПОМЕСТИТЬ ВТОписаниеДокумента
	|ИЗ
	|	ВТДата КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаДокументовСЗВ_6_4
	|		ПО Даты.Дата = ПачкаДокументовСЗВ_6_4.Дата
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4.Организация = &Организация
	|	И ПачкаДокументовСЗВ_6_4.Проведен
	|	И ПачкаДокументовСЗВ_6_4.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И ПачкаДокументовСЗВ_6_4.ТипДоговора = &ТипДоговора
	|	И ПачкаДокументовСЗВ_6_4.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА ПачкаДокументовСЗВ_6_4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА ПачкаДокументовСЗВ_6_4.ОтчетныйПериод
	|			ИНАЧЕ ПачкаДокументовСЗВ_6_4.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ПачкаДокументовСЗВ_6_4.Дата,
	|	Даты.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписаниеДокумента.ФизЛицо,
	|	МАКСИМУМ(ПачкаДокументовСЗВ_6_4.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТПредыдущиеДокументы
	|ИЗ
	|	ВТОписаниеДокумента КАК ОписаниеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаДокументовСЗВ_6_4
	|		ПО ОписаниеДокумента.Дата = ПачкаДокументовСЗВ_6_4.Дата
	|			И ОписаниеДокумента.Номер = ПачкаДокументовСЗВ_6_4.Номер
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4.Организация = &Организация
	|	И ПачкаДокументовСЗВ_6_4.Проведен
	|	И ПачкаДокументовСЗВ_6_4.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И ПачкаДокументовСЗВ_6_4.ТипДоговора = &ТипДоговора
	|	И ПачкаДокументовСЗВ_6_4.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА ПачкаДокументовСЗВ_6_4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА ПачкаДокументовСЗВ_6_4.ОтчетныйПериод
	|			ИНАЧЕ ПачкаДокументовСЗВ_6_4.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ОписаниеДокумента.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки КАК НомерСтроки,
	|	СуммыВзносов.ФизЛицо,
	|	ВЫБОР
	|		КОГДА ПачкаДокументовСЗВ_6_4РаботникиОрганизации.НачисленоНакопительная ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(ДоначисленоПоДаннымУчета.ДоначисленоНакопительная, 0)
	|		ИНАЧЕ СуммыВзносов.НачисленоНакопительная - ПачкаДокументовСЗВ_6_4РаботникиОрганизации.НачисленоНакопительная
	|	КОНЕЦ КАК ДоначисленоНакопительная,
	|	ВЫБОР
	|		КОГДА ПачкаДокументовСЗВ_6_4РаботникиОрганизации.НачисленоСтраховая ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(ДоначисленоПоДаннымУчета.ДоначисленоСтраховая, 0)
	|		ИНАЧЕ СуммыВзносов.НачисленоСтраховая - ПачкаДокументовСЗВ_6_4РаботникиОрганизации.НачисленоСтраховая
	|	КОНЕЦ КАК ДоначисленоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная - ЕСТЬNULL(ПачкаДокументовСЗВ_6_4РаботникиОрганизации.УплаченоНакопительная, 0) КАК ДоУплаченоНакопительная,
	|	СуммыВзносов.УплаченоСтраховая - ЕСТЬNULL(ПачкаДокументовСЗВ_6_4РаботникиОрганизации.УплаченоСтраховая, 0) КАК ДоУплаченоСтраховая
	|ИЗ
	|	ВТСуммыВзносов КАК СуммыВзносов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредыдущиеДокументы КАК ПредыдущиеДокументы
	|		ПО СуммыВзносов.ФизЛицо = ПредыдущиеДокументы.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4.РаботникиОрганизации КАК ПачкаДокументовСЗВ_6_4РаботникиОрганизации
	|		ПО (ПредыдущиеДокументы.Ссылка = ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка)
	|			И СуммыВзносов.ФизЛицо = ПачкаДокументовСЗВ_6_4РаботникиОрганизации.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоначисленоПоДаннымУчета КАК ДоначисленоПоДаннымУчета
	|		ПО СуммыВзносов.НомерСтроки = ДоначисленоПоДаннымУчета.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДоначисленныеВзносыДляКорректирующегоДокумента(Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, ТаблицаФизлиц, ТипДоговора = Неопределено, ОтчетныйПериод = Неопределено, ВсеВзносыФизлиц = Неопределено) Экспорт 
	
	Если КорректируемыйПериод < РасчетСтраховыхВзносов.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР() Тогда
		Возврат	ДоначисленныеВзносыДляКорректирующегоДокумента2013(Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, ТаблицаФизлиц, ТипДоговора, ОтчетныйПериод, ВсеВзносыФизлиц)  
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РаботникиОрганизации", ТаблицаФизлиц);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод));
	Запрос.УстановитьПараметр("КорректируемыйПериод", КорректируемыйПериод);
	Запрос.УстановитьПараметр("КонецКорректируемогоПериода", ОкончаниеОтчетногоПериодаПерсучета(КорректируемыйПериод));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки,
	|	СуммыВзносов.ФизЛицо КАК ФизЛицо,
	|	СуммыВзносов.НачисленоСтраховая
	|ПОМЕСТИТЬ ВТСуммыВзносов
	|ИЗ
	|	&РаботникиОрганизации КАК СуммыВзносов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗастрахованныхЛиц.НомерСтроки КАК НомерСтроки,
	|	ДанныеЗастрахованныхЛиц.ФизЛицо,
	|	СУММА(СтраховыеВзносыИсчисленные.ПФРПоСуммарномуТарифу + СтраховыеВзносыИсчисленные.ПФРПоСуммарномуТарифуЕНВД + СтраховыеВзносыИсчисленные.ПФРДоПредельнойВеличины + СтраховыеВзносыИсчисленные.ПФРДоПредельнойВеличиныЕНВД) КАК ДоначисленоСтраховая
	|ИЗ
	|	ВТСуммыВзносов КАК ДанныеЗастрахованныхЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтраховыеВзносыИсчисленные КАК СтраховыеВзносыИсчисленные
	|		ПО ДанныеЗастрахованныхЛиц.ФизЛицо = СтраховыеВзносыИсчисленные.ФизЛицо
	|ГДЕ
	|	СтраховыеВзносыИсчисленные.ОбособленноеПодразделение = &Организация
	|	И СтраховыеВзносыИсчисленные.Организация = &ГоловнаяОрганизация
	|	И СтраховыеВзносыИсчисленные.Период МЕЖДУ &ОтчетныйПериод И &КонецОтчетногоПериода
	|	И НАЧАЛОПЕРИОДА(СтраховыеВзносыИсчисленные.Период, КВАРТАЛ) > НАЧАЛОПЕРИОДА(СтраховыеВзносыИсчисленные.ДатаПолученияДохода, КВАРТАЛ)
	|	И СтраховыеВзносыИсчисленные.ДатаПолученияДохода МЕЖДУ &КорректируемыйПериод И &КонецКорректируемогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗастрахованныхЛиц.ФизЛицо,
	|	ДанныеЗастрахованныхЛиц.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-6

// Выполняет авторасчет стажа для формы СЗВ-6
//
Функция СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц = Неопределено, ВРазрезеТипаДоговора = Ложь) Экспорт
	
	ДатаОкончанияПериода = КонецДня(ДатаОкончанияПериодаЗаполнения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокФизЛиц",				СписокФизЛиц);
	Запрос.УстановитьПараметр("ОтчетныйПериод",				ДатаНачалаПериодаЗаполнения);
	Запрос.УстановитьПараметр("НачалоГода",					ДатаНачалаПериодаЗаполнения);
	Запрос.УстановитьПараметр("КонецГода",					ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("НачалоСледующегоГода",		ДатаОкончанияПериода + 1);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("НеИсключатьРаботающихВСтудотряде", ДатаНачалаПериодаЗаполнения < ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования() Или Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудРаботающихВСтудотряде"));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначенияЗК.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ОбособленноеПодразделение,"ТерриториальныеУсловияПФР"));
	Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 24.08.2011 15:41 
	// В запросe добавлено поле AVTШтатноеРасписание для соединения с регистром сведений ШтатноеРасписание и
	// закомментированы поля ПодразделениеОрганизации и Должность, так как эти измерения из регистра удалены.	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	&НачалоГода КАК ДатаС,
	|	РаботникиОрганизацииСрезПоследних.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
		|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.AVTШтатноеРасписаниеЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.AVTШтатноеРасписание
	|	КОНЕЦ КАК AVTШтатноеРасписание,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок
	|ПОМЕСТИТЬ ВТДатыДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеИсключатьРаботающихВСтудотряде
	|					ИЛИ НЕ Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде)
	|				И &ПервоеДополнительноеУсловие
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц))) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.AVTШтатноеРасписание,
	|	РаботникиОрганизации.ПериодЗавершения,
	|	РаботникиОрганизации.ЗанимаемыхСтавок
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	(&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И (&НеИсключатьРаботающихВСтудотряде
	|			ИЛИ НЕ РаботникиОрганизации.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде)
	|	И &ВтороеДополнительноеУсловие
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.Период > &НачалоГода
	|	И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.Физлицо,
	|	Работники.ПериодЗавершения,
	|	Работники.Организация,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ДолжностьЗавершения,
	|	Работники.ГрафикРаботыЗавершения,
		|	Работники.AVTШтатноеРасписаниеЗавершения,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	Работники.ЗанимаемыхСтавокЗавершения
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|			И Работники.Сотрудник = ПериодыПерекрытия.Сотрудник
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И (&НеИсключатьРаботающихВСтудотряде
	|			ИЛИ НЕ Работники.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде)
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И Работники.Организация = &ГоловнаяОрганизация
	|	И &ТретьеДополнительноеУсловие
	|	И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|	И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И Работники.ПериодЗавершения > &НачалоГода
	|	И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыДвижений.Сотрудник КАК Сотрудник,
	|	ПериодыДвижений.ФизЛицо КАК ФизЛицо,
	|	ПериодыДвижений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПериодыДвижений.Должность КАК Должность,
	|	ПериодыДвижений.ГрафикРаботы,
		|	ПериодыДвижений.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
	|	ПериодыДвижений.ЗанимаемыхСтавок,
	|	ПериодыДвижений.ДатаС,
	|	ПериодыДвижений.ДатаПо,
	|	ПериодыДвижений.ПериодЗавершения,
	|	ДатыУвольнения.ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТПериодыДвижений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНазначений1.Сотрудник КАК Сотрудник,
	|		ДатыНазначений1.Физлицо КАК ФизЛицо,
	|		ДатыНазначений1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность КАК Должность,
	|		ДатыНазначений1.ГрафикРаботы КАК ГрафикРаботы,
		|		ДатыНазначений1.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
	|		ДатыНазначений1.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		ДатыНазначений1.ДатаС КАК ДатаС,
	|		ВЫБОР
	|			КОГДА ДатыНазначений1.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода) > ДатыНазначений1.ПериодЗавершения
	|							ТОГДА ДатыНазначений1.ПериодЗавершения
	|						ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|		КОНЕЦ КАК ДатаПо,
	|		ДатыНазначений1.ПериодЗавершения КАК ПериодЗавершения
	|	ИЗ
	|		ВТДатыДвижений КАК ДатыНазначений1
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|			ПО ДатыНазначений1.Сотрудник = ДатыНазначений2.Сотрудник
	|				И (ДатыНазначений2.Организация = &ГоловнаяОрганизация)
	|				И (ДатыНазначений2.Период > ДатыНазначений1.ДатаС)
	|				И (ДатыНазначений2.Период < &НачалоСледующегоГода)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыНазначений1.Сотрудник,
	|		ДатыНазначений1.Физлицо,
	|		ДатыНазначений1.ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность,
	|		ДатыНазначений1.ГрафикРаботы,
			|		ДатыНазначений1.AVTШтатноеРасписание,
	|		ДатыНазначений1.ДатаС,
	|		ДатыНазначений1.ПериодЗавершения,
	|		ДатыНазначений1.ЗанимаемыхСтавок) КАК ПериодыДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыУвольнения
	|		ПО ПериодыДвижений.Сотрудник = ДатыУвольнения.Сотрудник
	|			И (ДатыУвольнения.Организация = &ГоловнаяОрганизация)
	|			И ПериодыДвижений.ДатаПо = ДатыУвольнения.Период
	|			И (ДатыУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|ИНДЕКСИРОВАТЬ ПО
		|	AVTШтатноеРасписание,
	|	ПодразделениеОрганизации,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыПостоянства.Сотрудник КАК Сотрудник,
	|	ПериодыПостоянства.ФизЛицо КАК ФизЛицо,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажа,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&ОтчетныйПериод КАК ОтчетныйПериод,
	|	ПериодыПостоянства.ТерриториальныеУсловия,
	|	ПериодыПостоянства.ОсобыеУсловияТруда,
	|	ПериодыПостоянства.ГрафикРаботы,
	|	ПериодыПостоянства.ЗанимаемыхСтавок,
	|	ПериодыПостоянства.КодПозицииСписка,
	|	ЕСТЬNULL(ПериодыПостоянства.ОснованиеВыслугиЛет, ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)) КАК ОснованиеВыслугиЛет,
	|	ПериодыПостоянства.НазначениеС КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ПериодыПостоянства.НазначениеПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыПостоянства.НазначениеПо, ДЕНЬ, -1)
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТКадровыеПериоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачалаПериодов.Сотрудник КАК Сотрудник,
	|		НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|		НачалаПериодов.Должность КАК Должность,
	|		НачалаПериодов.ГрафикРаботы КАК ГрафикРаботы,
	|		НачалаПериодов.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		НачалаПериодов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|		НачалаПериодов.КодПозицииСписка КАК КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|		НачалаПериодов.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|		НачалаПериодов.ДатаС КАК НазначениеС,
	|		ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ДатаС), &НачалоСледующегоГода) КАК НазначениеПо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник КАК Сотрудник,
	|			ПериодыНазначений.ФизЛицо КАК ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ПериодыНазначений.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			ПериодыНазначений.Должность КАК Должность,
	|			ПериодыНазначений.КодПозицииСписка КАК КодПозицииСписка,
	|			ПериодыНазначений.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|			ПериодыНазначений.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|			ПериодыНазначений.ДатаС КАК ДатаС,
	|			ЕСТЬNULL(ШР.ОсобыеУсловияТруда, ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)) КАК ОсобыеУсловияТруда
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник КАК Сотрудник,
	|				ПериодыНазначений.Физлицо КАК ФизЛицо,
	|				ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКТМО = """"
	|							И ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ КАК ТерриториальныеУсловия,
	|				ПериодыНазначений.Должность КАК Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка КАК КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
		|				ПериодыНазначений.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
	|				ПериодыНазначений.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|				ПериодыНазначений.ДатаС КАК ДатаС,
	|				МАКСИМУМ(ШР.Период) КАК Период
	|			ИЗ
	|				ВТДатыДвижений КАК ПериодыНазначений
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
		|					и ПериодыНазначений.AVTШтатноеРасписание = ШР.AVTШтатноеРасписание
	|						И (ШР.Период <= ПериодыНазначений.ДатаС)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.Физлицо,
	|				ПериодыНазначений.ПодразделениеОрганизации,
	|				ПериодыНазначений.Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы,
	|				ПериодыНазначений.AVTШтатноеРасписание,
	|				ПериодыНазначений.ДатаС,
	|				ПериодыНазначений.ЗанимаемыхСтавок,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКТМО = """"
	|							И ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ) КАК ПериодыНазначений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
		|				и ПериодыНазначений.AVTШтатноеРасписание = ШР.AVTШтатноеРасписание
	|					И (ШР.Период = ПериодыНазначений.Период)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник,
	|			ПериодыНазначений.ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации,
	|			ВЫБОР
		|				КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКТМО = """"
	|						И ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|					ТОГДА &ТерриториальныеУсловия
	|				ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|			КОНЕЦ,
	|			ПериодыНазначений.Должность,
	|			ПериодыНазначений.Должность.КодПозицииСписка,
	|			ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы,
		//|			NULL,
	|			ПериодыНазначений.ЗанимаемыхСтавок,
	|			ШР.Период,
	|			ШР.ОсобыеУсловияТруда
	|		ИЗ
	|			ВТПериодыДвижений КАК ПериодыНазначений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
		|				и ПериодыНазначений.AVTШтатноеРасписание = ШР.AVTШтатноеРасписание
	|					И (ШР.Период > ПериодыНазначений.ДатаС)
	|					И (ШР.Период < ПериодыНазначений.ДатаПо
	|						ИЛИ ШР.Период = ПериодыНазначений.ДатаПо
	|							И ПериодыНазначений.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))) КАК НачалаПериодов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|				РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизации.Период КАК ДатаС
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ГДЕ
	|				РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеИсключатьРаботающихВСтудотряде
	|						ИЛИ НЕ РаботникиОрганизации.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|				И РаботникиОрганизации.Период > &НачалоГода
	|				И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				Работники.Сотрудник,
	|				Работники.Сотрудник.Физлицо,
	|				Работники.ПериодЗавершения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|					ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|						И (ПериодыПерекрытия.Период > Работники.Период)
	|						И Работники.Сотрудник = ПериодыПерекрытия.Сотрудник
	|						И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|			ГДЕ
	|				Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеИсключатьРаботающихВСтудотряде
	|						ИЛИ НЕ Работники.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И Работники.Организация = &ГоловнаяОрганизация
	|				И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|				И Работники.ПериодЗавершения > &НачалоГода
	|				И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.ФизЛицо,
	|				ШР.Период
	|			ИЗ
	|				ВТПериодыДвижений КАК ПериодыНазначений
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
		|					и ПериодыНазначений.AVTШтатноеРасписание = ШР.AVTШтатноеРасписание
	|						И (ШР.Период > ПериодыНазначений.ДатаС)
	|						И (ШР.Период <= ПериодыНазначений.ДатаПо)) КАК ОкончанияПериодов
	|			ПО НачалаПериодов.Сотрудник = ОкончанияПериодов.Сотрудник
	|				И НачалаПериодов.ДатаС < ОкончанияПериодов.ДатаС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачалаПериодов.Сотрудник,
	|		НачалаПериодов.ФизЛицо,
	|		НачалаПериодов.ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия,
	|		НачалаПериодов.Должность,
	|		НачалаПериодов.КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет,
	|		НачалаПериодов.ГрафикРаботы,
	|		НачалаПериодов.ДатаС,
	|		НачалаПериодов.ОсобыеУсловияТруда,
	|		НачалаПериодов.ЗанимаемыхСтавок) КАК ПериодыПостоянства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
			/////Вадим 11.02.2013 11:05:49
 	| ,	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь
 	////ВадимКонец
	|ПОМЕСТИТЬ ВТДатыПериода
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоГода И &КонецГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТФПД
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			ПериодДействия МЕЖДУ &НачалоГода И &КонецГода
	|				И Организация = &ГоловнаяОрганизация
	|				И ВидРасчета.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТДатыДвижений.Сотрудник
	|					ИЗ
	|						ВТДатыДвижений)) КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	ДатыПериода.ДатаКалендаря КАК ПериодДействияНачало,
	|	ДатыПериода.ДатаКалендаря КАК ПериодДействияКонец,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНЕСторнированныеНачисления
	|ИЗ
	|	ВТДатыПериода КАК ДатыПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПД КАК Начисления
	|		ПО (ДатыПериода.ДатаКалендаря МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНачисленияСУчетомСторнирования
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ NULL 
	|	И НЕ Начисления.Сторно
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.ФизЛицо КАК ФизЛицо,
	|		Начисления.Сотрудник КАК Сотрудник,
	|		Начисления.ВидРасчета КАК ВидРасчета,
	|		Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|		СУММА(ВЫБОР
	|				КОГДА Начисления.Сторно
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СуммаСторно
	|	ИЗ
	|		ВТНЕСторнированныеНачисления КАК Начисления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ФизЛицо,
	|		Начисления.Сотрудник,
	|		Начисления.ВидРасчета,
	|		Начисления.ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4) КАК Начисления
	|ГДЕ
	|	Начисления.СуммаСторно > 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА ВЫБОР
	|					КОГДА ТСторно.ПериодДействияКонец = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|				КОНЕЦ
	|		ИНАЧЕ Начисления.ПериодДействияНачало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА Начисления.ПериодДействияКонец
	|		КОГДА ТСторно.ПериодДействияНачало = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияНачало, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО Начисления.Организация = ТСторно.Организация
	|			И Начисления.Сотрудник = ТСторно.Сотрудник
	|			И Начисления.ВидРасчета = ТСторно.ВидРасчета
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец))
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ НЕ NULL 
	|	И НЕ Начисления.Сторно
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияКонец = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|	КОНЕЦ,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец))
	|			И (ТСторно.ПериодДействияНачало > Начисления.ПериодДействияНачало)
	|			И (ТСторно.ПериодДействияКонец < Начисления.ПериодДействияКонец)
	|ГДЕ
	|	НЕ ТСторно.ВидРасчета ЕСТЬ NULL 
	|	И НЕ Начисления.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	ВидСтажаСЗВ4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияНачало >= КадровыеПериоды.ДатаНачалаПериода
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ КадровыеПериоды.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияКонец <= КадровыеПериоды.ДатаОкончанияПериода
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ КадровыеПериоды.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|	КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|	КадровыеПериоды.Сотрудник КАК Сотрудник,
	|	КадровыеПериоды.ОбособленноеПодразделение,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 28.06.2011 17:13 
	|	КадровыеПериоды.ГрафикРаботы.AVT_ПроизводственныйКалендарь КАК Календарь,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	КадровыеПериоды.ОтчетныйПериод
	|ПОМЕСТИТЬ ВТОплаченныеПериодыРаботы
	|ИЗ
	|	ВТКадровыеПериоды КАК КадровыеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК Начисления
	|		ПО КадровыеПериоды.Сотрудник = Начисления.Сотрудник
	|			И (Начисления.ПериодДействияНачало МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода
	|				ИЛИ Начисления.ПериодДействияКонец МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
	|			И (Начисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК ПовторныеНачисления
	|		ПО КадровыеПериоды.ФизЛицо = ПовторныеНачисления.ФизЛицо
	|			И (ПовторныеНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (ПовторныеНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> Начисления.ВидСтажаСЗВ4)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|ГДЕ
	|	НЕ((Начисления.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|				ИЛИ Начисления.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ))
	|				И ЕСТЬNULL(ПовторныеНачисления.ВидСтажаСЗВ4, """") = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЕТИ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтдельноСтоящиеПериоды.ФизЛицо,
	|	ОтдельноСтоящиеПериоды.Сотрудник,
	|	ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4,
	|	ОтдельноСтоящиеПериоды.ОбособленноеПодразделение,
	|	ОтдельноСтоящиеПериоды.ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаНачалаПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 28.06.2011 17:19 
	|	ОтдельноСтоящиеПериоды.Календарь,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаОкончанияПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТОтредактированныеОплаченныеПериоды
	|ИЗ
	|	ВТОплаченныеПериодыРаботы КАК ОтдельноСтоящиеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ПересекающиеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаНачалаПериода,
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаОкончанияПериода,
	|			ИсходныеПериоды.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|			ИсходныеПериоды.Сотрудник КАК Сотрудник,
	|			ИсходныеПериоды.ФизЛицо КАК ФизЛицо,
	|			ИсходныеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			ИсходныеПериоды.ОтчетныйПериод КАК ОтчетныйПериод
	|		ИЗ
	|			ВТОплаченныеПериодыРаботы КАК ИсходныеПериоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОплаченныеПериоды1.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|					ОплаченныеПериоды1.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|					ОплаченныеПериоды1.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|					ОплаченныеПериоды1.Сотрудник КАК Сотрудник,
	|					ОплаченныеПериоды1.ФизЛицо КАК ФизЛицо,
	|					ОплаченныеПериоды1.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|					ОплаченныеПериоды1.ОтчетныйПериод КАК ОтчетныйПериод,
	|					1 КАК НомерИнтервала
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды1
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды2.ДатаНачалаПериода,
	|					ОплаченныеПериоды2.ДатаОкончанияПериода,
	|					ОплаченныеПериоды2.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды2.Сотрудник,
	|					ОплаченныеПериоды2.ФизЛицо,
	|					ОплаченныеПериоды2.ОбособленноеПодразделение,
	|					ОплаченныеПериоды2.ОтчетныйПериод,
	|					2
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды2
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды3.ДатаНачалаПериода,
	|					ОплаченныеПериоды3.ДатаОкончанияПериода,
	|					ОплаченныеПериоды3.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды3.Сотрудник,
	|					ОплаченныеПериоды3.ФизЛицо,
	|					ОплаченныеПериоды3.ОбособленноеПодразделение,
	|					ОплаченныеПериоды3.ОтчетныйПериод,
	|					3
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды3) КАК ПересекающиеПериоды
	|				ПО ИсходныеПериоды.ВидСтажаСЗВ4 = ПересекающиеПериоды.ВидСтажаСЗВ4
	|					И ИсходныеПериоды.Сотрудник = ПересекающиеПериоды.Сотрудник
	|					И ИсходныеПериоды.ОбособленноеПодразделение = ПересекающиеПериоды.ОбособленноеПодразделение
	|					И ИсходныеПериоды.ОтчетныйПериод = ПересекающиеПериоды.ОтчетныйПериод
	|					И ИсходныеПериоды.ДатаНачалаПериода > ПересекающиеПериоды.ДатаНачалаПериода
	|					И ИсходныеПериоды.ДатаНачалаПериода < ПересекающиеПериоды.ДатаОкончанияПериода) КАК ПересеченияПериодов
	|		ПО ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4 = ПересеченияПериодов.ВидСтажаСЗВ4
	|			И ОтдельноСтоящиеПериоды.Сотрудник = ПересеченияПериодов.Сотрудник
	|			И ОтдельноСтоящиеПериоды.ОбособленноеПодразделение = ПересеченияПериодов.ОбособленноеПодразделение
	|			И ОтдельноСтоящиеПериоды.ОтчетныйПериод = ПересеченияПериодов.ОтчетныйПериод
	|			И ОтдельноСтоящиеПериоды.ДатаНачалаПериода <= ПересеченияПериодов.ДатаНачалаПериода
	|			И ОтдельноСтоящиеПериоды.ДатаОкончанияПериода >= ПересеченияПериодов.ДатаОкончанияПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	ВЫБОР
	|		КОГДА НефильтрованныеДниСтажа.ДатаКалендаря = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, 1)
	|	КОНЕЦ КАК СледующаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА НефильтрованныеДниСтажа.ДатаКалендаря = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, -1)
	|	КОНЕЦ КАК ПредыдущаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 1
	|			ТОГДА ""ДЕКРЕТ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 2
	|			ТОГДА ""ДЕТИ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 3
	|			ТОГДА ""ВРНЕТРУД""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 4
	|			ТОГДА ""АДМИНИСТР""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 5
	|			ТОГДА ""ДЛДЕТИ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 6
	|			ТОГДА ""ЧАЭС""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 7
	|			ТОГДА ""НЕОПЛ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	НефильтрованныеДниСтажа.ЗанимаемыхСтавок,
	|	НефильтрованныеДниСтажа.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТДниСтажа
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НефильтрованныеДниСтажа.ДатаКалендаря КАК ДатаКалендаря,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Декрет)
	|				ТОГДА 1
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Дети)
	|				ТОГДА 2
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность)
	|				ТОГДА 3
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|				ТОГДА 4
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|				ТОГДА 5
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|				ТОГДА 6
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА 7
	|			ИНАЧЕ 8
	|		КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|				ТОГДА НефильтрованныеДниСтажа.ЗанимаемыхСтавок
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтавокДляТерриториальныхУсловий,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ТерриториальныеУсловия
	|		КОНЕЦ КАК ТерриториальныеУсловия,
	|		НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|		НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|		НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		НефильтрованныеДниСтажа.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		НефильтрованныеДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОсобыеУсловияТруда
	|		КОНЕЦ КАК ОсобыеУсловияТруда,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.КодПозицииСписка
	|		КОНЕЦ КАК КодПозицииСписка,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|		КОНЕЦ КАК ОснованиеВыслугиЛет
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|			КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|			КадровыеПериоды.Сотрудник КАК Сотрудник,
	|			КадровыеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			КадровыеПериоды.ОтчетныйПериод КАК ОтчетныйПериод,
	|			КадровыеПериоды.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			КадровыеПериоды.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|			КадровыеПериоды.ГрафикРаботы КАК ГрафикРаботы,
	|			КадровыеПериоды.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|			КадровыеПериоды.КодПозицииСписка КАК КодПозицииСписка,
	|			КадровыеПериоды.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			МАКСИМУМ(ВидыСтажа.Порядок) КАК ПорядковыйНомерВидаСтажа
	|		ИЗ
	|			ВТДатыПериода КАК РегламентированныйПроизводственныйКалендарь
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПериоды КАК КадровыеПериоды
	|				ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 28.06.2011 16:44 
	|					И РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = КадровыеПериоды.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеОплаченныеПериоды КАК ОтредактированныеОплаченныеПериоды
	|					ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|					ПО ОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4 = ВидыСтажа.Ссылка
	|				ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтредактированныеОплаченныеПериоды.ДатаНачалаПериода И ОтредактированныеОплаченныеПериоды.ДатаОкончанияПериода)
	|					И (ОтредактированныеОплаченныеПериоды.Сотрудник = КадровыеПериоды.Сотрудник)
	|					И (ОтредактированныеОплаченныеПериоды.ОбособленноеПодразделение = КадровыеПериоды.ОбособленноеПодразделение)
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 01.07.2011 10:34 
	|					И РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ОтредактированныеОплаченныеПериоды.Календарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|		ГДЕ
	|			ЕСТЬNULL(КадровыеПериоды.Сотрудник, ОтредактированныеОплаченныеПериоды.Сотрудник) ЕСТЬ НЕ NULL 
	|			И ЕСТЬNULL(ОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4, """") <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|			КадровыеПериоды.ФизЛицо,
	|			КадровыеПериоды.Сотрудник,
	|			КадровыеПериоды.ОбособленноеПодразделение,
	|			КадровыеПериоды.ОтчетныйПериод,
	|			КадровыеПериоды.ТерриториальныеУсловия,
	|			КадровыеПериоды.ОсобыеУсловияТруда,
	|			КадровыеПериоды.ГрафикРаботы,
	|			КадровыеПериоды.ЗанимаемыхСтавок,
	|			КадровыеПериоды.КодПозицииСписка,
	|			КадровыеПериоды.ОснованиеВыслугиЛет) КАК НефильтрованныеДниСтажа
	|			ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|			ПО (ВидыСтажа.Порядок = НефильтрованныеДниСтажа.ПорядковыйНомерВидаСтажа)
	|	ГДЕ
	|		НефильтрованныеДниСтажа.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК НефильтрованныеДниСтажа
	|
	|СГРУППИРОВАТЬ ПО
	|	НефильтрованныеДниСтажа.ОтчетныйПериод,
	|	НефильтрованныеДниСтажа.Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо,
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет,
	|	НефильтрованныеДниСтажа.ЗанимаемыхСтавок,
	|	НефильтрованныеДниСтажа.СтавокДляТерриториальныхУсловий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетныйПериод,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ПредыдущаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниСтажа.ДатаКалендаря,
	|	ДниСтажа.СледующаяДатаКалендаря КАК СледующаяДатаКалендаря,
	|	ДниСтажа.ПредыдущаяДатаКалендаря,
	|	ДниСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ДниСтажа.ФизЛицо КАК ФизЛицо,
	|	ДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	ДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ДниСтажа.ЗанимаемыхСтавок,
	|	ДниСтажа.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТСледующиеДниСтажа
	|ИЗ
	|	ВТДниСтажа КАК ДниСтажа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетныйПериод,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	СледующаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК НачалоПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.ОтчетныйПериод,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет,
	|	ТекущийДень.ЗанимаемыхСтавок,
	|	ТекущийДень.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТНачалаПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСледующиеДниСтажа КАК ПредыдущийДень
	|		ПО ТекущийДень.ДатаКалендаря = ПредыдущийДень.СледующаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = ПредыдущийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = ПредыдущийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = ПредыдущийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = ПредыдущийДень.ОбособленноеПодразделение
	|			И ТекущийДень.ОтчетныйПериод = ПредыдущийДень.ОтчетныйПериод
	|			И ТекущийДень.ОсобыеУсловияТруда = ПредыдущийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = ПредыдущийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = ПредыдущийДень.ОснованиеВыслугиЛет
	|			И ТекущийДень.ЗанимаемыхСтавок = ПредыдущийДень.ЗанимаемыхСтавок
	|			И ТекущийДень.СтавокДляТерриториальныхУсловий = ПредыдущийДень.СтавокДляТерриториальныхУсловий
	|ГДЕ
	|	ПредыдущийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК ОкончаниеПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.ОтчетныйПериод,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет,
	|	ТекущийДень.ЗанимаемыхСтавок,
	|	ТекущийДень.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТОкончанияПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниСтажа КАК СледующийДень
	|		ПО ТекущийДень.ДатаКалендаря = СледующийДень.ПредыдущаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = СледующийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = СледующийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = СледующийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = СледующийДень.ОбособленноеПодразделение
	|			И ТекущийДень.ОтчетныйПериод = СледующийДень.ОтчетныйПериод
	|			И ТекущийДень.ОсобыеУсловияТруда = СледующийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = СледующийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = СледующийДень.ОснованиеВыслугиЛет
	|			И ТекущийДень.ЗанимаемыхСтавок = СледующийДень.ЗанимаемыхСтавок
	|			И ТекущийДень.СтавокДляТерриториальныхУсловий = СледующийДень.СтавокДляТерриториальныхУсловий
	|ГДЕ
	|	СледующийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|	НачалаПериодов.ОтчетныйПериод,
	|	&ТрудовойДоговор КАК ТипДоговора,
	|	НачалаПериодов.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НачалаПериодов.НачалоПериода КАК ДатаНачалаПериода,
	|	ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ОкончаниеПериода), НачалаПериодов.НачалоПериода) КАК ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ОсобыеУсловияТруда В (ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст27_3), ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст27_4))
	|				И НачалаПериодов.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Мужской)
	|			ТОГДА """"
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ОсобыеУсловияТруда
	|	КОНЕЦ КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.КодПозицииСписка
	|	КОНЕЦ КАК КодПозицииСписка,
	|	НачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ОснованиеВыслугиЛет
	|	КОНЕЦ КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ТерриториальныеУсловия
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА 0
	|		КОГДА НачалаПериодов.ТерриториальныеУсловия В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.РКСМ))
	|			ТОГДА НачалаПериодов.СтавокДляТерриториальныхУсловий
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПараметрТерриториальныхУсловий,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА 0
	|		КОГДА НачалаПериодов.ОснованиеВыслугиЛет В (ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ПД), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_СМХР), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_СМ), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГДХР), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГД))
	|			ТОГДА НачалаПериодов.ЗанимаемыхСтавок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТНачалаПериодов КАК НачалаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкончанияПериодов КАК ОкончанияПериодов
	|		ПО НачалаПериодов.ТерриториальныеУсловия = ОкончанияПериодов.ТерриториальныеУсловия
	|			И НачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ОкончанияПериодов.ТретийПараметрИсчисляемогоСтажа
	|			И НачалаПериодов.ФизЛицо = ОкончанияПериодов.ФизЛицо
	|			И НачалаПериодов.ОбособленноеПодразделение = ОкончанияПериодов.ОбособленноеПодразделение
	|			И НачалаПериодов.ОтчетныйПериод = ОкончанияПериодов.ОтчетныйПериод
	|			И НачалаПериодов.ОсобыеУсловияТруда = ОкончанияПериодов.ОсобыеУсловияТруда
	|			И НачалаПериодов.КодПозицииСписка = ОкончанияПериодов.КодПозицииСписка
	|			И НачалаПериодов.ОснованиеВыслугиЛет = ОкончанияПериодов.ОснованиеВыслугиЛет
	|			И НачалаПериодов.НачалоПериода <= ОкончанияПериодов.ОкончаниеПериода
	|			И НачалаПериодов.ЗанимаемыхСтавок = ОкончанияПериодов.ЗанимаемыхСтавок
	|			И НачалаПериодов.СтавокДляТерриториальныхУсловий = ОкончанияПериодов.СтавокДляТерриториальныхУсловий
	|
	|СГРУППИРОВАТЬ ПО
	|	НачалаПериодов.НачалоПериода,
	|	НачалаПериодов.ТерриториальныеУсловия,
	|	НачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	НачалаПериодов.ФизЛицо,
	|	НачалаПериодов.ОбособленноеПодразделение,
	|	НачалаПериодов.ОтчетныйПериод,
	|	НачалаПериодов.КодПозицииСписка,
	|	НачалаПериодов.ОснованиеВыслугиЛет,
	|	НачалаПериодов.ЗанимаемыхСтавок,
	|	НачалаПериодов.СтавокДляТерриториальныхУсловий,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ОсобыеУсловияТруда В (ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст27_3), ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст27_4))
	|				И НачалаПериодов.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Мужской)
	|			ТОГДА """"
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ОсобыеУсловияТруда
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ДатаНачалаПериода";
	
	//
	ПериодыДоговоровТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо КАК Физлицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&ОтчетныйПериод КАК ОтчетныйПериод,
	|	&ДоговорГПХ КАК ТипДоговора,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКТМО, """") = """"
	|				И ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКАТО, """") = """"
	|			ТОГДА &ТерриториальныеУсловия
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка) КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка) КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания < &НачалоСледующегоГода
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания
	|		ИНАЧЕ &КонецГода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И (&НеИсключатьРаботающихВСтудотряде
	|			ИЛИ НЕ ДоговорНаВыполнениеРаботСФизЛицом.ЗаключенСоСтудентомРаботающимВСтудотряде)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	ДатаОкончанияПериода,
	|	ДатаНачалаПериода";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ПервоеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВтороеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("РаботникиОрганизации."));
	Запрос.Текст = 	СтрЗаменить(ТекстЗапроса,"И &ТретьеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("Работники."));
	
	Если ВРазрезеТипаДоговора Тогда
		Запрос.УстановитьПараметр("ТрудовойДоговор", Перечисления.ТипДоговораСЗВ63.Трудовой);
		Запрос.УстановитьПараметр("ДоговорГПХ", Перечисления.ТипДоговораСЗВ63.ГражданскоПравовой);
	Иначе
		Запрос.УстановитьПараметр("ТрудовойДоговор", Перечисления.ТипДоговораСЗВ63.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДоговорГПХ", Перечисления.ТипДоговораСЗВ63.ПустаяСсылка());
	КонецЕсли;
	
	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
	
	// Удалим из таблицы стажа незначимые записи:
	//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	Запрос.Текст = ПериодыДоговоровТекст;
	ТаблицаСтажаПоДоговорам = Запрос.Выполнить().Выгрузить();
	
	Н = ТаблицаСтажаПоДоговорам.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н];
		ПредшествующаяЗапись = ТаблицаСтажаПоДоговорам[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода <= КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи идут друг за другом или пересекаются 
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = Макс(ТекущаяЗапись.ДатаОкончанияПериода, ПредшествующаяЗапись.ДатаОкончанияПериода); 
			ПредшествующаяЗапись.ДатаНачалаПериода = Мин(ТекущаяЗапись.ДатаНачалаПериода, ПредшествующаяЗапись.ДатаНачалаПериода); 
			ТаблицаСтажаПоДоговорам.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажаПоДоговорам.Сортировать("ФизЛицо,ДатаНачалаПериода");
	ПредшествующееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивСтрок = Новый Массив;
	СтрокСтажа = 0;
	СтруктураПоиска = Новый Структура("ФизЛицо,ТипДоговора");
	Н = ТаблицаСтажаПоДоговорам.Количество();
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н - 1];
		
		Если ТекущаяЗапись.ФизЛицо <> ПредшествующееФизЛицо Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяЗапись);
			МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
			ПредшествующееФизЛицо = ТекущаяЗапись.ФизЛицо;
		КонецЕсли;
		
		СтрокСтажа = МассивСтрок.Количество();
		Если СтрокСтажа = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСтажа.Добавить(),ТекущаяЗапись);
			Н = Н - 1;
			Продолжить;
		КонецЕсли;
		
		ДатаНачалаПериода = НачалоДня(ТекущаяЗапись.ДатаНачалаПериода);
		ДатаОкончанияПериода = КонецДня(ТекущаяЗапись.ДатаОкончанияПериода);
		
		Для Сч = 1 По СтрокСтажа Цикл
			
			СтрокаСтажа = МассивСтрок[СтрокСтажа - Сч];
			ДатаНачалаСтрокиСтажа = НачалоДня(СтрокаСтажа.ДатаНачалаПериода);
			ДатаОкончанияСтрокиСтажа = КонецДня(СтрокаСтажа.ДатаОкончанияПериода);
			
			Если ДатаНачалаСтрокиСтажа > ДатаОкончанияПериода Тогда
			ИначеЕсли ДатаНачалаСтрокиСтажа > ДатаНачалаПериода Тогда
				Если ДатаОкончанияСтрокиСтажа < ДатаОкончанияПериода Тогда
					НоваяСтрока = ТаблицаСтажа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
					НоваяСтрока.ДатаНачалаПериода = ДатаОкончанияСтрокиСтажа + 1;
					НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
				КонецЕсли;
				ДатаОкончанияПериода = НачалоДня(СтрокаСтажа.ДатаНачалаПериода - 1);
			Иначе
				Если ДатаОкончанияСтрокиСтажа >= ДатаНачалаПериода Тогда
					ДатаНачалаПериода = ДатаОкончанияСтрокиСтажа + 1;
				КонецЕсли;
				Прервать;
			КонецЕсли;
			МассивСтрок.Удалить(СтрокСтажа - Сч);
		КонецЦикла;
		
		Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
			НоваяСтрока = ТаблицаСтажа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
			НоваяСтрока.ДатаНачалаПериода = ДатаНачалаПериода;
			НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
		КонецЕсли;
		
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажа.Сортировать("ФизЛицо,ТипДоговора,ДатаНачалаПериода");
	
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ТипДоговора = ПредшествующаяЗапись.ТипДоговора
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажа = ПроцедурыПерсонифицированногоУчетаПолныеПрава.ВписатьКатегорииВДанныеСтажа(ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, ТаблицаСтажа, ВРазрезеТипаДоговора);
	
	Если ВРазрезеТипаДоговора Тогда
		Н = ТаблицаСтажа.Количество() - 1;
		Пока Н > 0 Цикл
			
			ТекущаяЗапись = ТаблицаСтажа[Н];
			ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
			
			Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
				И ТекущаяЗапись.КатегорияЗастрахованныхЛиц = ПредшествующаяЗапись.КатегорияЗастрахованныхЛиц
				И ТекущаяЗапись.ТипДоговора = ПредшествующаяЗапись.ТипДоговора
				И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
				ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
				// и совпадают параметры стажа
				И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
				И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
				И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
				И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
				И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
				И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
				И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
				Тогда
				// объединим записи в одну
				ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
				ТаблицаСтажа.Удалить(ТекущаяЗапись);
			КонецЕсли;
			Н = Н - 1;
		КонецЦикла;
	Иначе
		Н = ТаблицаСтажа.Количество() - 1;
		Пока Н > 0 Цикл
			
			ТекущаяЗапись = ТаблицаСтажа[Н];
			ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
			
			Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
				И ТекущаяЗапись.КатегорияЗастрахованныхЛиц = ПредшествующаяЗапись.КатегорияЗастрахованныхЛиц
				И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
				ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
				// и совпадают параметры стажа
				И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
				И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
				И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
				И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
				И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
				И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
				И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
				Тогда
				// объединим записи в одну
				ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
				ТаблицаСтажа.Удалить(ТекущаяЗапись);
			КонецЕсли;
			Н = Н - 1;
		КонецЦикла;
		ТаблицаСтажа.Колонки.Добавить("ТипДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ТипДоговораСЗВ63"));
	КонецЕсли;
	
	Возврат ТаблицаСтажа;
	
КонецФункции

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-6
// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа
Функция СЗВ6_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, ТаблицаФизлиц, РезультатВыборкиЗаписей = "", ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсточникДанных",	ТаблицаФизлиц);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.ФизЛицо КАК ФизЛицо,
	|	ТЧ.Организация,
	|	ТЧ.КатегорияЗастрахованныхЛиц,
	|	ТЧ.ТипДоговора,
	|	ТЧ.ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО КАК ПоляДляФайла
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&ИсточникДанных КАК ТЧ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Если ИнициаторВызова = "НаборЗаписей" Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла","1 КАК ПоляДляФайла")
	Иначе 
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла",
												"ТЧ.АдресДляИнформирования,
												|	ТЧ.СтраховойНомерПФР,
												|	ТЧ.Фамилия,
												|	ТЧ.Имя,
												|	ТЧ.Отчество,
												|	ТЧ.НачисленоСтраховая,
												|	ТЧ.УплаченоСтраховая,
												|	ТЧ.НачисленоНакопительная,
												|	ТЧ.УплаченоНакопительная,
												|	ТЧ.ДатаСоставления");
	КонецЕсли;	
	Запрос.Выполнить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
	|	ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ТЧРаботникиОрг.Организация,
	|	ТЧРаботникиОрг.ОтчетныйПериод КАК ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО КАК ПоляДляФайла,
	|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаписиОСтаже.Год КАК Год,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрг.ОтчетныйПериод < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЕСТЬNULL(ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа, 0) КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЕСТЬNULL(ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа, 0) КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрг.ОтчетныйПериод < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|		ПО ТЧРаботникиОрг.ФизЛицо = ЗаписиОСтаже.ФизЛицо
	|			И ТЧРаботникиОрг.Организация = ЗаписиОСтаже.ОбособленноеПодразделение
	|			И ТЧРаботникиОрг.ОтчетныйПериод = ЗаписиОСтаже.ОтчетныйПериод
	|			И ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц = ЗаписиОСтаже.КатегорияЗастрахованныхЛиц
	|			И ТЧРаботникиОрг.ТипДоговора = ЗаписиОСтаже.ТипДоговора
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";

	Если ИнициаторВызова = "НаборЗаписей" Тогда
		Запрос.Текст = ТекстЗапроса;
	Иначе 
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла",
												"ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
												|	ТЧРаботникиОрг.Фамилия КАК Фамилия,
												|	ТЧРаботникиОрг.Имя КАК Имя,
												|	ТЧРаботникиОрг.Отчество КАК Отчество,
												|	ТЧРаботникиОрг.НачисленоСтраховая,
												|	ТЧРаботникиОрг.УплаченоСтраховая,
												|	ТЧРаботникиОрг.НачисленоНакопительная,
												|	ТЧРаботникиОрг.СтраховойНомерПФР,
												|	ТЧРаботникиОрг.УплаченоНакопительная,
												|	ТЧРаботникиОрг.ДатаСоставления,
												|	ТЧРаботникиОрг.Фамилия + "" "" + ТЧРаботникиОрг.Имя + "" "" + ТЧРаботникиОрг.Отчество КАК ФизЛицоНаименование");
	КонецЕсли;	
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	ДопустимыеЗначенияТретьегоПараметра = СЗВ6_ДопустимыеЗначенияТретьегоПараметра();
	
	СтрокаДопустимыхЗначений = "";
	Для каждого Значение Из ДопустимыеЗначенияТретьегоПараметра Цикл
		СтрокаДопустимыхЗначений = СтрокаДопустимыхЗначений + ?(ЗначениеЗаполнено(СтрокаДопустимыхЗначений),", ","") + Значение.Ключ;
	КонецЦикла;
	
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("НомерСтроки") Цикл // по наборам ФизЛицо + КатегорияЗастрахованныхЛиц + ТипДоговора + Организация + ОтчетныйПериод
		
		Если Не ЗначениеЗаполнено(ВыборкаЗаписей.ОбособленноеПодразделение) Тогда // записей о стаже нет
			Продолжить;
		КонецЕсли;
		
		ФизЛицо = ВыборкаЗаписей.ФизЛицо;
		ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
		НачалоПериода = ВыборкаЗаписей.ОтчетныйПериод;
		КонецПериода = ОкончаниеОтчетногоПериодаПерсучета(НачалоПериода);
		
		ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
		
		//Список значений группы реквизитов территориальные условия одной основной записи
		СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
		
		//Список значений кодов условий труда одной основной записи
		СписокУсловияТрудаЗаписи = Новый СписокЗначений;
		
		//Список значений кодов выслуги лет основной записи
		СписокВыслугаЛетЗаписи = Новый СписокЗначений;
		
		ПредыдущийНомерОсновнойЗаписи = 0;
		ПредыдущийНомерДополнительнойЗаписи = 0;
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			Запись = ВыборкаЗаписей;
			
			//Организация, физлицо и год должны быть заполнены обязательно
			Если Запись.ОбособленноеПодразделение.Пустая() Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
			КонецЕсли;	
			Если Запись.ФизЛицо.Пустая() Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
			КонецЕсли;	
			
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
			
			//По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;
			
			//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
			
			//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
			Если Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
				Если ДополнительнаяЗаписьВозможна Тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
				КонецЕсли;	
			ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
			ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
			Иначе//Обе даты заполнены
				
				//Дата начала периода не должна быть ранее начала периода
				Если Запись.ДатаНачалаПериода < НачалоПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее начала периода: " + Формат(НачалоПериода,"ДФ=dd.MM.yyyy") + "!");
				КонецЕсли;	 
				
				//Дата окончания периода не должна быть позднее окончания периода
				Если Запись.ДатаОкончанияПериода > КонецПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее окончания периода: " + Формат(КонецПериода,"ДФ=dd.MM.yyyy") + "!");
				КонецЕсли;	 
				
				// Начало периода не должно быть позже окончания периода 
				Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
				КонецЕсли;
				
			КонецЕсли;	 
			
			//Проверка только для основной записи о стаже
			Если ЭтоОсновнаяЗапись Тогда
				
				//Проверка на хронологический порядок записей
				Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
					Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
					КонецЕсли;	 
				КонецЕсли;
				
				//Переустановка текущей основной записи
				ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
				ТекущаяОсновнаяЗапись.Год = Запись.Год;
				ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
				ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
				ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
				ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
				ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
				ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
				ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
				ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
				
				СписокТерриториальныеУсловияЗаписи.Очистить();
				СписокУсловияТрудаЗаписи.Очистить();
				СписокВыслугаЛетЗаписи.Очистить();
			КонецЕсли;	 
			
			// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
			
			//Проверка нумерации основных и дополнительных записей
			Если ЭтоОсновнаяЗапись Тогда
				ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
				Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
				КонецЕсли;
			Иначе
				ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
				Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
				КонецЕсли;
			КонецЕсли;
			
			
			//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
			
			//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
			УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияКод);
			УказанаСтавкаТерриториальныхУсловий = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияСтавка);
			
			//Признаки заполнения реквизитов группы "Особые условия труда"
			УказанКодПозицииСписка = ЗначениеЗаполнено(Запись.КодПозицииСпискаКод);
			УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТрудаКод);
			ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
			
			//Признаки заполнения реквизитов группы "Исчисляемый стаж"
			УказаноОснованиеИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажаКод);
			УказанТретийПараметрИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ТретийПараметрИсчисляемогоСтажа);
			ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
			
			//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
			УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
			ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
			
			//Признаки заполнения реквизитов группы "ВыслугаЛет"
			УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛетКод);
			ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
			
			
			//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
			
			Если НЕ ЭтоОсновнаяЗапись Тогда
				СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
			КонецЕсли;	 
			
			// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
			
			Если УказаныТерриториальныеУсловия Тогда
				ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
				Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если УказаныОсобыеУсловияТруда Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если УказаноОснованиеВыслугиЛет Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
				Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	
			
			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
			
			КПС = СокрЛП(Запись.КодПозицииСпискаКод);
			
			//Определим, к какому списку принадлежит код позиции
			НазваниеСписка ="";
			Если УказанКодПозицииСписка Тогда 
				
				Если НЕ УказаныОсобыеУсловияТруда Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
				
				ДлинаКПС = СтрДлина(КПС);
				
				Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
					
					Первые2СимволаКПС = Лев(КПС,2);
					Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
						НазваниеСписка = "Список№1";
					ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
						НазваниеСписка = "Список№2";
					Иначе	
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
				ИначеЕсли (ДлинаКПС=5) Тогда
					НазваниеСписка = "ПрочиеСписки";
				Иначе	
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;//УказанКодПозицииСписка	 
			
			Если УказаныОсобыеУсловияТруда Тогда
				
				//Проверки на возможные коды списков для конкретных условий труда
				
				КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
				НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
				
				Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 Тогда
					Если (НазваниеСписка <> "Список№1") Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 Тогда
					
					Если (НЕ УказанКодПозицииСписка) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					Если (НазваниеСписка = "Список№1") Тогда
						Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	
					ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
				Иначе
					//Для остальных кодов условий труда КПС указываться не должен
					Если УказанКодПозицииСписка Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
				КонецЕсли;	 
				
			КонецЕсли;//УказаныОсобыеУсловияТруда	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
			
			УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
			УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
			УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
			ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
			
			Если УказаноОснованиеВыслугиЛет Тогда
				
				КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
				НачалоСообщения = "Для основания выслуги лет " + КодОснования;
				
				УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
				
				//Медицинские работники
				Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) Тогда
					
					Если ДоляСтавкиУказанаНеверно(Запись.ТретийПараметрВыслугиЛет) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.1 до 2)!", ТекущаяОсновнаяЗапись);
					ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Педагогические работники	
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД Тогда
					
					Если УказанПараметр2 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
						ИначеЕсли ДоляСтавкиУказанаНеверно(Запись.ТретийПараметрВыслугиЛет) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.1 до 2)!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	
					
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК Тогда
					
					Если (УказанПараметр2) или (УказанПараметр3) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Летчики
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
					КонецЕслИ;	
					
					//Парашютисты	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда	
					
					Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Управление воздушным движением и  инженерно-технический состав 	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					//Прочие коды выслуги лет	
				Иначе
					Если ПараметрыУказаны Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
				КонецЕсли;	 
			Иначе
				Если ПараметрыУказаны Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
			
			Если УказанТретийПараметрИсчисляемогоСтажа Тогда
				Если ДопустимыеЗначенияТретьегоПараметра.Получить(Запись.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать одно из значений: " + СтрокаДопустимыхЗначений + "!", ТекущаяОсновнаяЗапись);
				ИначеЕсли (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
					Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
						| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					Если ((ЗаданаГруппаУсловияТруда)ИЛИ(УказаныТерриториальныеУсловия)) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
						|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли; 
				КонецЕсли;	 
			КонецЕсли;	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
			
			Если ЗаданаГруппаФОВ Тогда
				Если Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаныТерриториальныеУсловия  Тогда
					СтрОшибка = " Параметры фактически отработанного времени должны указываться только при заполнении других групп реквизитов"
					+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				ИначеЕсли Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И УказанаСтавкаТерриториальныхУсловий Тогда
					СтрОшибка = " Параметры фактически отработанного времени для территориальных условий не должны указываться при заданной ставке!";
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				КонецЕсли;	
				
				Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					
					Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
						СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
						СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					
					Если ФОВУказанНеверно(ТекущаяОсновнаяЗапись, Запись) Тогда
						СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
				КонецЕсли;	 
				
			КонецЕсли;	 
			
			//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
			
			//Запомним для следующей итерации
			ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
			ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
			
		КонецЦикла;//Цикл по записям стажа текущего физлица за год
		
	КонецЦикла;
	
	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, ТаблицаФизлиц, ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже", ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СЗВ6_ДопустимыеЗначенияТретьегоПараметра() Экспорт 
	ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕКРЕТ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕТИ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("АДМИНИСТР", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ВРНЕТРУД", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЛДЕТИ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЛОТПУСК", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ЧАЭС", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("НЕОПЛ", Истина);
	Возврат ДопустимыеЗначенияТретьегоПараметра
КонецФункции

Процедура ФормированиеСведенийОСтажеC2010(ДатаНачалаПериодаЗаполнения, Организация, СписокФизЛиц = Неопределено, ДатаОкончанияПериодаЗаполнения = Неопределено) Экспорт
	
	ЗаполнятьСтаж = НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл();
	
	Если Не ЗаполнятьСтаж Тогда
		Возврат	
	КонецЕсли;
	
	НуженРазрезТипаДоговора = ДатаОкончанияПериодаЗаполнения = Неопределено И ДатаНачалаПериодаЗаполнения >= ПроведениеРасчетов.ДатаВводаДополнительногоТарифаЗаРаботыСДосрочнойПенсией();
	
	Если ДатаОкончанияПериодаЗаполнения = Неопределено Тогда
		ДатаОкончанияПериодаЗаполнения = ОкончаниеОтчетногоПериодаПерсучета(ДатаНачалаПериодаЗаполнения);
	КонецЕсли;
	
	ТаблицаСтажа = СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(Организация, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц, НуженРазрезТипаДоговора);

	ТаблицаИзмерений = ТаблицаСтажа.Скопировать(,"ФизЛицо,КатегорияЗастрахованныхЛиц,ТипДоговора");
	ТаблицаИзмерений.Свернуть("ФизЛицо,КатегорияЗастрахованныхЛиц,ТипДоговора");
	ТаблицаФизлиц = ТаблицаИзмерений.Скопировать(,"ФизЛицо");
	ТаблицаФизлиц.Свернуть("ФизЛицо");
	
	НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
	НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
	НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Значение = ДатаНачалаПериодаЗаполнения;
	НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
	
	СтруктураПоиска = Новый Структура("ФизЛицо, КатегорияЗастрахованныхЛиц, ТипДоговора");
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
	
	НачатьТранзакцию();
	
	// очистим то, что было
	Для каждого СтрокаФизЛица Из ТаблицаФизлиц Цикл
	
		// Установим отбор записей в наборе по выбранному работнику
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = СтрокаФизЛица.ФизЛицо;
		НаборЗаписейОСтаже.Записать(); 
		
	КонецЦикла;
	
	НаборЗаписейОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.ТипДоговора.Использование = Истина;
	
	// Загрузим полученные данные в наборы записей 
	Для каждого СтрокаИзмерений Из ТаблицаИзмерений Цикл
	
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = СтрокаИзмерений.ФизЛицо;
		НаборЗаписейОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Значение = СтрокаИзмерений.КатегорияЗастрахованныхЛиц;
		НаборЗаписейОСтаже.Отбор.ТипДоговора.Значение = СтрокаИзмерений.ТипДоговора;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаИзмерений);
		
		МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейОСтаже.Добавить(),СтрокаТаблицы)
		КонецЦикла; 
		
		// Пронумеруем основные записи о стаже
		НомерЗаписи = 0;
		Для Каждого Запись из НаборЗаписейОСтаже Цикл
			НомерЗаписи = НомерЗаписи + 1;
			Запись.НомерОсновнойЗаписи = НомерЗаписи;
		КонецЦикла; 
		
		// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
		Попытка
			НаборЗаписейОСтаже.Записать();
		Исключение
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		НаборЗаписейОСтаже.Очистить();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ФормированиеСведенийОСтажеC2010()

Функция МассивКатегорийЗЛИностранцев()Экспорт
	МассивКатегорий = Новый Массив;
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖИЖ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖНР);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСХ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЕН);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖМН);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖОИ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖХО);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖТЗ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖИТ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСИ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЭД);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЦС);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСБ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЭС);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПИЖ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПНР);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСХ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЕН);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПМН);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПОИ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПХО);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПТЗ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПИТ);	
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСИ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЭД);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЦС);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСБ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЭС);


	Возврат МассивКатегорий;
КонецФункции	

Функция ТарифыПоКатегориям(ДатаАктуальности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьВМенеджерСоответствиеТарифаКатегории(Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТарифСтраховыхВзносов.ВидТарифа,
	|	ТарифСтраховыхВзносов.ПФР,
	|	ТарифСтраховыхВзносов.ПФРНакопительная
	|ПОМЕСТИТЬ ВТТарифы
	|ИЗ
	|	&ТаблицаТарифов КАК ТарифСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеТарифовКатегориям.КатегорияЗастрахованныхЛиц,
	|	МАКСИМУМ(Тарифы.ПФР) - МАКСИМУМ(Тарифы.ПФРНакопительная) КАК ПФРСтраховая,
	|	МАКСИМУМ(Тарифы.ПФРНакопительная) КАК ПФРНакопительная
	|ИЗ
	|	ВТТарифы КАК Тарифы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифовКатегориям
	|		ПО Тарифы.ВидТарифа = СоответствиеТарифовКатегориям.ВидТарифаСтраховыхВзносов
	|			И (&ГодАктуальности МЕЖДУ СоответствиеТарифовКатегориям.ГодС И СоответствиеТарифовКатегориям.ГодПо)
	|ГДЕ
	|	СоответствиеТарифовКатегориям.КатегорияЗастрахованныхЛиц ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеТарифовКатегориям.КатегорияЗастрахованныхЛиц";
	Запрос.УстановитьПараметр("ТаблицаТарифов", РасчетСтраховыхВзносов.ТекущиеТарифыСтраховыхВзносовПоВидамТарифа(ДатаАктуальности));
	Запрос.УстановитьПараметр("ГодАктуальности", Год(ДатаАктуальности));
	Выборка = Запрос.Выполнить().Выбрать();
	ТарифыПоКатегориям = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ТарифыПоКатегориям.Вставить(Выборка.КатегорияЗастрахованныхЛиц, Новый Структура("ПФРСтраховая, ПФРНакопительная", Выборка.ПФРСтраховая, Выборка.ПФРНакопительная));
	КонецЦикла;
				
	Возврат ТарифыПоКатегориям;
		
КонецФункции	

Функция СоответствиеКатегорийИностранцевКатегориямРоссиян() Экспорт

	СоответствиеКатегорий = Новый Соответствие;
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖНР, Перечисления.КатегорииЗастрахованныхЛицПФР.НР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПНР, Перечисления.КатегорииЗастрахованныхЛицПФР.НР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, Перечисления.КатегорииЗастрахованныхЛицПФР.НР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПОИ, Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖОИ, Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ, Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЕН, Перечисления.КатегорииЗастрахованныхЛицПФР.ЕСХН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЕН, Перечисления.КатегорииЗастрахованныхЛицПФР.ЕСХН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ЕСХН, Перечисления.КатегорииЗастрахованныхЛицПФР.ЕСХН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПИТ, Перечисления.КатегорииЗастрахованныхЛицПФР.ОДИТ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖИТ, Перечисления.КатегорииЗастрахованныхЛицПФР.ОДИТ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОДИТ, Перечисления.КатегорииЗастрахованныхЛицПФР.ОДИТ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЭД, Перечисления.КатегорииЗастрахованныхЛицПФР.ПНЭД);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЭД, Перечисления.КатегорииЗастрахованныхЛицПФР.ПНЭД);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ПНЭД, Перечисления.КатегорииЗастрахованныхЛицПФР.ПНЭД);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПВЛ, Перечисления.КатегорииЗастрахованныхЛицПФР.СПВЛ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖВЛ, Перечисления.КатегорииЗастрахованныхЛицПФР.СПВЛ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.СПВЛ, Перечисления.КатегорииЗастрахованныхЛицПФР.СПВЛ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПТР, Перечисления.КатегорииЗастрахованныхЛицПФР.ТОР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖТР, Перечисления.КатегорииЗастрахованныхЛицПФР.ТОР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ТОР, Перечисления.КатегорииЗастрахованныхЛицПФР.ТОР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПКС, Перечисления.КатегорииЗастрахованныхЛицПФР.КРС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖКС, Перечисления.КатегорииЗастрахованныхЛицПФР.КРС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.КРС, Перечисления.КатегорииЗастрахованныхЛицПФР.КРС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПХО, Перечисления.КатегорииЗастрахованныхЛицПФР.ХО);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖХО, Перечисления.КатегорииЗастрахованныхЛицПФР.ХО);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ХО, Перечисления.КатегорииЗастрахованныхЛицПФР.ХО);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСИ, Перечисления.КатегорииЗастрахованныхЛицПФР.СМИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСИ, Перечисления.КатегорииЗастрахованныхЛицПФР.СМИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.СМИ, Перечисления.КатегорииЗастрахованныхЛицПФР.СМИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЦС, Перечисления.КатегорииЗастрахованныхЛицПФР.ИЦС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЦС, Перечисления.КатегорииЗастрахованныхЛицПФР.ИЦС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ИЦС, Перечисления.КатегорииЗастрахованныхЛицПФР.ИЦС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСБ, Перечисления.КатегорииЗастрахованныхЛицПФР.АСБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСБ, Перечисления.КатегорииЗастрахованныхЛицПФР.АСБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.АСБ, Перечисления.КатегорииЗастрахованныхЛицПФР.АСБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПИЖ, Перечисления.КатегорииЗастрахованныхЛицПФР.ИНЖУ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖИЖ, Перечисления.КатегорииЗастрахованныхЛицПФР.ИНЖУ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ИНЖУ, Перечисления.КатегорииЗастрахованныхЛицПФР.ИНЖУ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЭС, Перечисления.КатегорииЗастрахованныхЛицПФР.ЧЭС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЭС, Перечисления.КатегорииЗастрахованныхЛицПФР.ЧЭС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ЧЭС, Перечисления.КатегорииЗастрахованныхЛицПФР.ЧЭС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСХ, Перечисления.КатегорииЗастрахованныхЛицПФР.СХ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСХ, Перечисления.КатегорииЗастрахованныхЛицПФР.СХ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.СХ, Перечисления.КатегорииЗастрахованныхЛицПФР.СХ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПМН, Перечисления.КатегорииЗастрахованныхЛицПФР.ХМН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖМН, Перечисления.КатегорииЗастрахованныхЛицПФР.ХМН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ХМН, Перечисления.КатегорииЗастрахованныхЛицПФР.ХМН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПТЗ, Перечисления.КатегорииЗастрахованныхЛицПФР.ТВЭЗ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖТЗ, Перечисления.КатегорииЗастрахованныхЛицПФР.ТВЭЗ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ТВЭЗ, Перечисления.КатегорииЗастрахованныхЛицПФР.ТВЭЗ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ, Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицПФР.УСЕН, Перечисления.КатегорииЗастрахованныхЛицПФР.УСЕН);
	
	Возврат СоответствиеКатегорий

КонецФункции

Функция ВыполнитьНумерациюЗаписейОСтаже(ЗаписиОСтаже, СообщатьОПроблемах = Истина) Экспорт

	Отказ = Ложь;
	Если СообщатьОПроблемах Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
	КонецЕсли;
	
	//Нумерация записей стажа перед записью
	НомерОсновнойЗаписи = 0; 

	НомерСтроки = 0;
	Для Каждого СтрокаСтажа Из ЗаписиОСтаже цикл
		НомерСтроки = НомерСтроки + 1;
        ТекстОшибкиСНомеромСтроки = "В строке стажа " + НомерСтроки + ": ";
		//Контролируем смену основной записи
		Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда
			//Встретили основную запись
			НомерОсновнойЗаписи = НомерОсновнойЗаписи + 1; 
			НомерДополнительнойЗаписи = 0;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И Не ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда	
			Если НомерОсновнойЗаписи <> 0 Тогда
				НомерДополнительнойЗаписи = НомерДополнительнойЗаписи + 1; 
			ИначеЕсли СообщатьОПроблемах Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указаны даты начала и окончания периода!", Отказ);
			КонецЕсли;
		ИначеЕсли СообщатьОПроблемах Тогда
			Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана дата окончания периода!", Отказ);
			Иначе
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана начала окончания периода!", Отказ);
			КонецЕсли;
		КонецЕсли;	

		СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
		СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
	КонецЦикла;	

	Если СообщатьОПроблемах И Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции	 

Функция НестрахуемыеВидыДохода() Экспорт

	МассивВидовДохода = Новый Массив;
	МассивВидовДохода.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих);
	МассивВидовДохода.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров);
	МассивВидовДохода.Добавить(Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликомПрокуроров);
	МассивВидовДохода.Добавить(Справочники.ДоходыПоСтраховымВзносам.МатпомощьПрокуроров);
	МассивВидовДохода.Добавить(Справочники.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенкаПрокуроров);
	МассивВидовДохода.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору);
	МассивВидовДохода.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору);
	
    Возврат МассивВидовДохода
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ с 2014 года

Процедура ВывестиСведенияОСтаже2014(ВыборкаПоРаботникиОрганизации, УзелЗастрахованного, ФорматСтажа)  Экспорт
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи) Тогда
		
		ТекущееФизлицо = ВыборкаПоРаботникиОрганизации.Физлицо;
		ТекущийДокумент = ВыборкаПоРаботникиОрганизации.Ссылка;
		
		ФорматЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматСтажа.ЛьготныйСтаж.Значение);
		ФорматСтажа.Удалить("КоличествоЛьготныхСоставляющих");
		ФорматСтажа.Удалить("ЛьготныйСтаж");
		ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
		
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл	
			
			Если ВыборкаПоРаботникиОрганизации.Физлицо <> ТекущееФизлицо Или ВыборкаПоРаботникиОрганизации.Ссылка <> ТекущийДокумент Тогда
				Возврат	
			КонецЕсли;
			
			ТекущаяОсновнаяЗапись = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
			
			УзелСтажевыйПериод = ДобавитьУзелВДеревоXML(УзелЗастрахованного, "СтажевыйПериод","");
			ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажа);
			
			УзелСтажевыйПериод.Строки.Найти("НомерСтроки").Значение = Строка(ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи);
			УзелСтажевыйПериод.Строки.Найти("ДатаНачалаПериода").Значение = Формат(ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода,"ДФ=dd.MM.yyyy");
			УзелСтажевыйПериод.Строки.Найти("ДатаКонцаПериода").Значение = Формат(ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода,"ДФ=dd.MM.yyyy");
			
			ВыводитьЛьготныйСтаж = Ложь;
			
			НаборЗаписейЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
			НаборЗаписейОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
			
			//ДекретДети
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейОсобенностиУчета.ДекретДети.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажаКод));
				ВыводитьЛьготныйСтаж = Истина;
			Иначе
				НаборЗаписейОсобенностиУчета.Удалить("ДекретДети");
			КонецЕсли;
			
			// Территориальные условия
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия) Тогда
 				НаборЗаписейТерриториальныеУсловия = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Значение;
				НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод));
				Если ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
					Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР Тогда
					НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияСтавка;
				Иначе
					НаборЗаписейТерриториальныеУсловия.Удалить("Коэффициент");
					ОписаниеПолей = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Поля;
					СтрокаКУдалению = ОписаниеПолей.Найти("Коэффициент","ИмяПоля");
					ОписаниеПолей.Удалить(СтрокаКУдалению);
				КонецЕсли;
				ВыводитьЛьготныйСтаж = Истина;
			Иначе
				НаборЗаписейОсобенностиУчета.Удалить("ТерриториальныеУсловия");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда

				НаборЗаписейОсобенностиУчета.Удалить("ВыслугаЛет");
				НаборЗаписейОсобенностиУчета.Удалить("ИсчисляемыйСтаж");
				НаборЗаписейОсобенностиУчета.Удалить("ОсобыеУсловияТруда");
				
			Иначе
				
				// Особые условия труда
				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТруда) Тогда
					НаборЗаписейОсобыеУсловияТруда = НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.Значение;
					НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод));
					НаборЗаписейОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод));
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НаборЗаписейОсобенностиУчета.Удалить("ОсобыеУсловияТруда");
				КонецЕсли;
				
				// Исчисляемый стаж
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейОсобенностиУчета.Удалить("ИсчисляемыйСтаж");
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа) Тогда	
					НаборЗаписейИсчисляемыйСтаж = НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.Значение;
					НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод));
					Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) Тогда
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаКалендарная");
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
					ИначеЕсли ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
						НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаКалендарная");
					ИначеЕсли ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
						НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					Иначе
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаКалендарная");
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НаборЗаписейОсобенностиУчета.Удалить("ИсчисляемыйСтаж");
				КонецЕсли;

				
				// Выслуга лет
				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛет) Тогда
					
					НаборЗаписейВыслугаЛет = НаборЗаписейОсобенностиУчета.ВыслугаЛет.Значение;
					НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод));
					НаборЗаписейВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) Тогда
						НаборЗаписейВыслугаЛет.Удалить("ВыработкаВЧасах");
						НаборЗаписейВыслугаЛет.Удалить("ВыработкаКалендарная");
					ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет) Тогда
						НаборЗаписейВыслугаЛет.Удалить("ВыработкаВЧасах");
						НаборЗаписейВыслугаЛет.Удалить("ВыработкаКалендарная");
					ИначеЕсли ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
						НаборЗаписейВыслугаЛет.Удалить("ВыработкаВЧасах");
						НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					Иначе
						НаборЗаписейВыслугаЛет.Удалить("ВыработкаКалендарная");
						НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
					
				Иначе
					НаборЗаписейОсобенностиУчета.Удалить("ВыслугаЛет");
 				КонецЕсли;
 			КонецЕсли;
			
			Если ВыводитьЛьготныйСтаж Тогда
				ЧислоДополнительныхЗаписейОСтаже = 1;
				СтрокаКоличествоЛьготныхСоставляющих = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "КоличествоЛьготныхСоставляющих", 1);
				НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
				УзелЛьготныйСтаж = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
				ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
			Иначе
				ЧислоДополнительныхЗаписейОСтаже = 0;
			КонецЕсли;
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				Если ВыборкаПоРаботникиОрганизации.Физлицо <> ТекущееФизлицо Или ВыборкаПоРаботникиОрганизации.Ссылка <> ТекущийДокумент Или ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи <> ТекущаяОсновнаяЗапись Тогда
					Если ЧислоДополнительныхЗаписейОСтаже > 1 Тогда
						СтрокаКоличествоЛьготныхСоставляющих.Значение = ЧислоДополнительныхЗаписейОСтаже;
					КонецЕсли;
					Возврат	
				КонецЕсли;
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписейЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
				НаборЗаписейДопОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
				
				ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
				НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
				
				// Территориальные условия
				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия) Тогда
					НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Значение;
					НаборЗаписейДопТерриториальныеУсловия.ОснованиеТУ = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод));
					Если ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС 
						Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС 
						Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
						Или ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР Тогда
						НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияСтавка;
					Иначе
						НаборЗаписейДопТерриториальныеУсловия.Удалить("Коэффициент");
						ОписаниеПолей = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Поля;
						СтрокаКУдалению = ОписаниеПолей.Найти("Коэффициент","ИмяПоля");
						ОписаниеПолей.Удалить(СтрокаКУдалению);
					КонецЕсли;
				Иначе
					НаборЗаписейДопОсобенностиУчета.Удалить("ТерриториальныеУсловия");
 				КонецЕсли;
				
				// Особые условия труда
				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТруда) Тогда
					НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейДопОсобенностиУчета.ОсобыеУсловияТруда.Значение;
					НаборЗаписейДопОсобыеУсловияТруда.ОснованиеОУТ = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод));
					НаборЗаписейДопОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод));
				Иначе
					НаборЗаписейДопОсобенностиУчета.Удалить("ОсобыеУсловияТруда");
				КонецЕсли;
				
				// Исчисляемый стаж
				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейДопОсобенностиУчета.ИсчисляемыйСтаж.Значение;
					НаборЗаписейДопИсчисляемыйСтаж.ОснованиеИС.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод));
					Если ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
						НаборЗаписейВыработкаВЧасах = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВыработкаКалендарная");
					ИначеЕсли ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
						НаборЗаписейДопВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейДопВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
					Иначе
						НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВыработкаКалендарная");
						НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВыработкаВЧасах");
					КонецЕсли;
				Иначе
					НаборЗаписейДопОсобенностиУчета.Удалить("ИсчисляемыйСтаж");
				КонецЕсли;
				
				// Выслуга лет
				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛет) Тогда
					НаборЗаписейДопВыслугаЛет = НаборЗаписейДопОсобенностиУчета.ВыслугаЛет.Значение;
					НаборЗаписейДопВыслугаЛет.ОснованиеВЛ.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод));
					НаборЗаписейДопВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет) Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВыработкаВЧасах");
						НаборЗаписейДопВыслугаЛет.Удалить("ВыработкаКалендарная");
					ИначеЕсли ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВыработкаВЧасах");
						НаборЗаписейВыработкаКалендарная = НаборЗаписейДопВыслугаЛет.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					Иначе
						НаборЗаписейДопВыслугаЛет.Удалить("ВыработкаКалендарная");
						НаборЗаписейДопВыработкаВЧасах = НаборЗаписейДопВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейДопВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					КонецЕсли;
				Иначе
					НаборЗаписейДопОсобенностиУчета.Удалить("ВыслугаЛет");
 				КонецЕсли;
				
				// ДекретДети
				НаборЗаписейДопОсобенностиУчета.Удалить("ДекретДети");
 				УзелЛьготныйСтаж = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
				ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				
			КонецЦикла;// Выборка по дополнительным записям о стаже
			
			Если ЧислоДополнительныхЗаписейОСтаже > 1 Тогда
				СтрокаКоличествоЛьготныхСоставляющих.Значение = ЧислоДополнительныхЗаписейОСтаже;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры
	
Функция СведенияОСтаже_2014(ДатаНачалаПериодаЗаполнения, Организация, СписокФизЛиц = Неопределено, ДатаОкончанияПериодаЗаполнения = Неопределено, ВыделятьСтажПоДоговорамГПХ = Ложь, ДатаСозданияДокументов = Неопределено, УчитыватьОпоздавшиеДанные = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияПериодаЗаполнения) Тогда
		ДатаОкончанияПериодаЗаполнения = ОкончаниеОтчетногоПериодаПерсучета(ДатаНачалаПериодаЗаполнения);
	КонецЕсли;

	Возврат ПроцедурыПерсонифицированногоУчетаПолныеПрава.ДанныеДляЗаполненияСтажа_2014(Организация, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц, ВыделятьСтажПоДоговорамГПХ, ДатаСозданияДокументов, УчитыватьОпоздавшиеДанные);

КонецФункции

//Выполняет проверку правильности заполнения набора записей о стаже из документов массива Ссылки
Функция НаборЗаписейОСтажеСоответствуетТребованиям(Ссылки, ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено) Экспорт
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("Ссылка");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	ДоговорыГПХ = Новый Массив;
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДОГОВОР);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛАВТ);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛДОГ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.УстановитьПараметр("Договоры", ДоговорыГПХ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПачкаДокументовСПВ_2ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|			ТОГДА ПачкаДокументовСПВ_2ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|		ИНАЧЕ ПачкаДокументовСПВ_2ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|	КОНЕЦ КАК ОтчетныйПериод,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ДатаНачалаПериода,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.КодПозицииСписка,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ПачкаДокументовСПВ_2.ЗаписиОСтаже КАК ПачкаДокументовСПВ_2ЗаписиОСтаже
	|ГДЕ
	|	ПачкаДокументовСПВ_2ЗаписиОСтаже.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка,
	|	ВЫБОР
	|		КОГДА ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|			ТОГДА ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|		ИНАЧЕ ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|	КОНЕЦ,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ФизЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ДатаНачалаПериода,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.КодПозицииСписка,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.ЗаписиОСтаже КАК ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка В(&Ссылки)
	|	И НЕ ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&Договоры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.Ссылка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.Ссылка.ОтчетныйПериод,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ФизЛицо,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.НомерОсновнойЗаписи,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ДатаНачалаПериода,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ДатаОкончанияПериода,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ТерриториальныеУсловия,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ОсобыеУсловияТруда,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.КодПозицииСписка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ЗаписиОСтаже КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.Ссылка В(&Ссылки)
	|	И НЕ СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&Договоры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтаже.Ссылка КАК Ссылка,
	|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтаже.ОтчетныйПериод,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010 КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010 КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТДанныеДокумента КАК ЗаписиОСтаже
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ФизЛицо,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Записи.Ссылка КАК Ссылка,
	|	Записи.ФизЛицо КАК ФизЛицо,
	|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	Записи.ОсобыеУсловияТруда.КодДляОтчетности2010 КАК УказанныйКодУсловийТруда,
	|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
	|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
	|	Записи.ОснованиеВыслугиЛет.КодДляОтчетности2010 КАК УказанныйКодОснованияВыслугиЛет,
	|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
	|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
	|	Сочетания.НомерПравила КАК НомерПравила,
	|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
	|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
	|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
	|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
	|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
	|	Сочетания.ФорматФОВ КАК ФорматФОВ
	|ИЗ
	|	ВТДанныеДокумента КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
	|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
	|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
	|					И Сочетания.КодУсловийТруда = """")
	|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
	|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
	|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
	|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияВыслугиЛет = """")
	|			И (Сочетания.ТипШаблонаКПС = ""Любой""
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
	|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
	|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
	|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
	|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
	|ГДЕ
	|	(Записи.ОсобыеУсловияТруда.Код ЕСТЬ НЕ NULL 
	|			ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ НЕ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ФизЛицо,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаЗаписей = Результаты[1].Выбрать();
	Выборка = Результаты[2].Выбрать();
	
	ПроверитьЗаписиСтажа(ВыборкаЗаписей, Выборка, Истина, ТаблицаПлохихЗаписей, ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка,
	|	ВЫБОР
	|		КОГДА ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|			ТОГДА ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|		ИНАЧЕ ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|	КОНЕЦ КАК ОтчетныйПериод,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ФизЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ДатаНачалаПериода,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.КодПозицииСписка,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.ЗаписиОСтаже КАК ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка В(&Ссылки)
	|	И ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В(&Договоры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.Ссылка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.Ссылка.ОтчетныйПериод,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ФизЛицо,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.НомерОсновнойЗаписи,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ДатаНачалаПериода,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ДатаОкончанияПериода,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ТерриториальныеУсловия,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ОсобыеУсловияТруда,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.КодПозицииСписка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ЗаписиОСтаже КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.Ссылка В(&Ссылки)
	|	И СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В(&Договоры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтаже.Ссылка КАК Ссылка,
	|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтаже.ОтчетныйПериод,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010 КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010 КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТДанныеДокумента КАК ЗаписиОСтаже
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ФизЛицо,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Записи.Ссылка КАК Ссылка,
	|	Записи.ФизЛицо КАК ФизЛицо,
	|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	Записи.ОсобыеУсловияТруда.КодДляОтчетности2010 КАК УказанныйКодУсловийТруда,
	|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
	|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
	|	Записи.ОснованиеВыслугиЛет.КодДляОтчетности2010 КАК УказанныйКодОснованияВыслугиЛет,
	|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
	|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
	|	Сочетания.НомерПравила КАК НомерПравила,
	|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
	|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
	|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
	|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
	|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
	|	Сочетания.ФорматФОВ КАК ФорматФОВ
	|ИЗ
	|	ВТДанныеДокумента КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
	|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
	|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
	|					И Сочетания.КодУсловийТруда = """")
	|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
	|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
	|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
	|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияВыслугиЛет = """")
	|			И (Сочетания.ТипШаблонаКПС = ""Любой""
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
	|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
	|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
	|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
	|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
	|ГДЕ
	|	(Записи.ОсобыеУсловияТруда.Код ЕСТЬ НЕ NULL 
	|			ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ НЕ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ФизЛицо,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаЗаписей = Результаты[1].Выбрать();
	Выборка = Результаты[2].Выбрать();
	ТаблицаПлохихЗаписей.Очистить();
	ПроверитьЗаписиСтажа(ВыборкаЗаписей, Выборка, Ложь, ТаблицаПлохихЗаписей, ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
	
	Возврат ТаблицаПлохихЗаписей.Количество() = 0
	
КонецФункции

Процедура ПроверитьЗаписиСтажа(ВыборкаЗаписей, Выборка, ПроверятьПересечениеЗаписей, ТаблицаПлохихЗаписей, ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки)

	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
	
	СтруктураПоиска = Новый Структура("Ссылка, Физлицо");
	
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НачалоПериода = ВыборкаЗаписей.ОтчетныйПериод;
		КонецПериода = ОкончаниеОтчетногоПериодаПерсучета(НачалоПериода);
		ДопустимыеЗначенияОснованийИсчисляемогоСтажа = ДопустимыеЗначенияОснованийИсчисляемогоСтажа(ВыборкаЗаписей.ОтчетныйПериод);
		ДопустимыеЗначенияОтсутствий = ДопустимыеЗначенияОтсутствий(ВыборкаЗаписей.ОтчетныйПериод);
		
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Физлицо") Цикл 
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаЗаписей);
			
			ТекущаяОсновнаяЗапись = Новый Структура("Физлицо, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
			
			//Список значений группы реквизитов территориальные условия одной основной записи
			СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
			
			//Список значений кодов условий труда одной основной записи
			СписокУсловияТрудаЗаписи = Новый СписокЗначений;
			
			//Список значений кодов выслуги лет основной записи
			СписокВыслугаЛетЗаписи = Новый СписокЗначений;
			
			ПредыдущийНомерОсновнойЗаписи = 0;
			ПредыдущийНомерДополнительнойЗаписи = 0;
			
			Пока ВыборкаЗаписей.Следующий() Цикл
				
				Запись = ВыборкаЗаписей;
				
				// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
				
				//По умолчанию считаем, что запись основная
				ЭтоОсновнаяЗапись = Истина;
				
				//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
				ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
				
				//Проверка заполненния реквизитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
				Если Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
					Если ДополнительнаяЗаписьВозможна Тогда
						ЭтоОсновнаяЗапись = Ложь;
					Иначе
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!", , Ложь);
					КонецЕсли;	
				ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) Тогда
					ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!", , Ложь);
				ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
					ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!", , Ложь);
				Иначе//Обе даты заполнены
					
					//Дата начала периода не должна быть ранее начала периода
					Если Запись.ДатаНачалаПериода < НачалоПериода Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее начала периода: " + Формат(НачалоПериода,"ДФ=dd.MM.yyyy") + "!", , Ложь);
					КонецЕсли;	 
					
					//Дата окончания периода не должна быть позднее окончания периода
					Если Запись.ДатаОкончанияПериода > КонецПериода Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее окончания периода: " + Формат(КонецПериода,"ДФ=dd.MM.yyyy") + "!", , Ложь);
					КонецЕсли;	 
					
					// Начало периода не должно быть позже окончания периода 
					Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!", , Ложь);
					КонецЕсли;
					
				КонецЕсли;	 
				
				//Проверка только для основной записи о стаже
				Если ЭтоОсновнаяЗапись Тогда
					
					//Проверка на хронологический порядок записей
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено И ПроверятьПересечениеЗаписей Тогда
						Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!", , Ложь);
						КонецЕсли;	 
					КонецЕсли;
					
					//Переустановка текущей основной записи
					ТекущаяОсновнаяЗапись.ФизЛицо = Запись.ФизЛицо;
					ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
					ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
					ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
					ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
					ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
					ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
					ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
					ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
					ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
					
					СписокТерриториальныеУсловияЗаписи.Очистить();
					СписокУсловияТрудаЗаписи.Очистить();
					СписокВыслугаЛетЗаписи.Очистить();
				КонецЕсли;	 
				
				// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
				
				//Проверка нумерации основных и дополнительных записей
				Если ЭтоОсновнаяЗапись Тогда
					ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
					//Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
					//	ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!", , Ложь);
					//КонецЕсли;
				Иначе
					ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
					Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;
				КонецЕсли;
				
				//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
				
				//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
				УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияКод);
				УказанаСтавкаТерриториальныхУсловий = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияСтавка);
				
				//Признаки заполнения реквизитов группы "Особые условия труда"
				УказанКодПозицииСписка = ЗначениеЗаполнено(Запись.КодПозицииСпискаКод);
				УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТрудаКод);
				ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
				
				//Признаки заполнения реквизитов группы "Исчисляемый стаж"
				УказаноОснованиеИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажаКод);
				УказанТретийПараметрИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ТретийПараметрИсчисляемогоСтажа);
				ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
				
				//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
				УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
				УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
				ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
				
				//Признаки заполнения реквизитов группы "ВыслугаЛет"
				УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛетКод);
				ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
				
				
				//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
				
				Если НЕ ЭтоОсновнаяЗапись Тогда
					ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
				КонецЕсли;	 
				
				// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
				
				Если УказаныТерриториальныеУсловия Тогда
					ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
					Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись, Ложь);
					Иначе	
						СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;
					Если УказанаСтавкаТерриториальныхУсловий И ДоляСтавкиУказанаНеверно(Запись.ТерриториальныеУсловияСтавка, 1) Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, "Неверно задан параметр территориальных условий, должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;
				КонецЕсли;	 
				
				Если УказаныОсобыеУсловияТруда Тогда
					ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
					Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись, Ложь);
					Иначе	
						СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если УказаноОснованиеВыслугиЛет Тогда
					ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
					Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код досрочного назначения пенсии "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись, Ложь);
					Иначе	
						СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	
				
				//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
				
				КПС = СокрЛП(Запись.КодПозицииСпискаКод);
				
				//Определим, к какому списку принадлежит код позиции
				НазваниеСписка ="";
				Если УказанКодПозицииСписка Тогда 
					
					Если НЕ УказаныОсобыеУсловияТруда Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;	 
					
					ДлинаКПС = СтрДлина(КПС);
					
					Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
						
						Первые2СимволаКПС = Лев(КПС,2);
						Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
							НазваниеСписка = "Список№1";
						ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
							НазваниеСписка = "Список№2";
						Иначе	
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	
						
					ИначеЕсли (ДлинаКПС=5) Тогда
						НазваниеСписка = "ПрочиеСписки";
					Иначе	
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;	 
				КонецЕсли;//УказанКодПозицииСписка	 
				
				Если УказаныОсобыеУсловияТруда Тогда
					
					//Проверки на возможные коды списков для конкретных условий труда
					
					КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
					Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
					НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
					
					Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 Тогда
						Если (НазваниеСписка <> "Список№1") Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 
						
					ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 Тогда
						
						Если (НЕ УказанКодПозицииСписка) Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 
						
						Если (НазваниеСписка = "Список№1") Тогда
							Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  Тогда
								ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись, Ложь);
							КонецЕсли;	
						ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 
						
					Иначе
						//Для остальных кодов условий труда КПС указываться не должен
						Если УказанКодПозицииСписка Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 
					КонецЕсли;	 
					
				КонецЕсли;//УказаныОсобыеУсловияТруда	 
				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
				
				УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
				УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
				УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
				ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
				
				Если УказаноОснованиеВыслугиЛет Тогда
					
					КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
					НачалоСообщения = "Для кода досрочного назначения пенсии " + КодОснования;
					
					УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
					
					//Медицинские работники
					Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) Тогда
						
						Если ДоляСтавкиУказанаНеверно(Запись.ТретийПараметрВыслугиЛет) Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать занимаемую ставку (число от 0.1 до 2)!", ТекущаяОсновнаяЗапись, Ложь);
						ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	
						
						//Педагогические работники	
					ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД Тогда
						
						Если УказанПараметр2 Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись, Ложь);
						ИначеЕсли ДоляСтавкиУказанаНеверно(Запись.ТретийПараметрВыслугиЛет) Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать занимаемую ставку (число от 0.1 до 2)!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;
						
					ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК Тогда
						
						Если УказанПараметр2 Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись, Ложь);
						ИначеЕсли ЗначениеЗаполнено(Запись.ТретийПараметрВыслугиЛет) И Запись.ТретийПараметрВыслугиЛет <> 1 Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр может содержать ставку равную 1!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;
						
						//Летчики
					ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ) Тогда
						
						Если  УказанПараметр3 Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 
						
						Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕслИ;	
						
						//Парашютисты	
					ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда	
						
						Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	
						
						//Управление воздушным движением и  инженерно-технический состав 	
					ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
						ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) Тогда
						
						Если  УказанПараметр3 Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 
						
						//Прочие коды выслуги лет	
					Иначе
						Если ПараметрыУказаны Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры для досрочного назначения пенсии 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 
					КонецЕсли;	 
				Иначе
					Если ПараметрыУказаны Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры для досрочного назначения пенсии 1,2,3 без указания кода досрочного назначения не допустимы!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;	 
				КонецЕсли;	 
				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
				
				Если УказаноОснованиеИсчисляемогоСтажа И ДопустимыеЗначенияОснованийИсчисляемогоСтажа.НайтиПоЗначению(Запись.ОснованиеИсчисляемогоСтажа) = Неопределено Тогда
					ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, "Указано недопустимое для отчетного периода " + ОписаниеОтчетногоПериодаДляПоказа(ВыборкаЗаписей.ОтчетныйПериод) + " значение основания для исчисления страхового стажа (" + Запись.ОснованиеИсчисляемогоСтажаКод + ")!", ТекущаяОсновнаяЗапись, Ложь);
				КонецЕсли;
				
				Если УказанТретийПараметрИсчисляемогоСтажа Тогда
					
					Если ДопустимыеЗначенияОтсутствий.НайтиПоЗначению(Запись.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, "Указано недопустимое для отчетного периода " + ОписаниеОтчетногоПериодаДляПоказа(ВыборкаЗаписей.ОтчетныйПериод) + " значение третьего параметра исчисляемого стажа (" + Запись.ТретийПараметрИсчисляемогоСтажаКод + ")!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;
					
					ЭтоПараметрСПравомНаДосрочнуюПенсию = ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(Запись.ТретийПараметрИсчисляемогоСтажа) <> Неопределено;
					Если Не ЭтоПараметрСПравомНаДосрочнуюПенсию И (УказаноОснованиеИсчисляемогоСтажа Или ЗаданаГруппаФОВ Или УказаноОснованиеВыслугиЛет Или ЗаданаГруппаУсловияТруда) Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения " + Запись.ТретийПараметрИсчисляемогоСтажаКод + " группы реквизитов 
						| ""Условия труда"", ""Исчисление стажа: код"", Фактически отработанное время, ""Досрочное назначение пенсии"" указываться не должны!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;
					Если ЭтоПараметрСПравомНаДосрочнуюПенсию И ЗаданаГруппаФОВ Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения " + Запись.ТретийПараметрИсчисляемогоСтажаКод + " группа реквизитов 
						| фактически отработанного времени указываться не должна!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;
					Если (Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.МЕСЯЦ Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.МЕДНЕТРУД)
						И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаноОснованиеВыслугиЛет И Не ЗаданаГруппаУсловияТруда И Не УказаныТерриториальныеУсловия Тогда
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения " + Запись.ТретийПараметрИсчисляемогоСтажаКод + " обязательно заполнение 
						| хотя бы одной из групп реквизитов ""Территориальные условия"", ""Условия труда"", ""Исчисление стажа: код"", ""Досрочное назначение пенсии""!", ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;
					Если УказаныТерриториальныеУсловия И 
						(Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.АДМИНИСТР 
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕТИ
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕТИПРЛ
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЛДЕТИ
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДОПВЫХ
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.КВАЛИФ
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛ
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ОТСТРАН
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ПРОСТОЙ
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.СДКРОВ
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.УЧОТПУСК
						Или Запись.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ЧАЭС)	Тогда
						
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,
						"При указании в третьем параметре исчисляемого стажа значения " + Запись.ТретийПараметрИсчисляемогоСтажаКод + " 
						| не допускается указание группы реквизитов ""Территориальные условия""!", ТекущаяОсновнаяЗапись, Ложь);
						
					КонецЕсли;
				КонецЕсли;	 
				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
				
				Если ЗаданаГруппаФОВ Тогда
					Если Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаныТерриториальныеУсловия  Тогда
						СтрОшибка = " Параметры фактически отработанного времени должны указываться только при заполнении других групп реквизитов"
						+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись, Ложь);
					ИначеЕсли Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И УказанаСтавкаТерриториальныхУсловий Тогда
						СтрОшибка = " Параметры фактически отработанного времени для территориальных условий не должны указываться при заданной ставке!";
						ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись, Ложь);
					КонецЕсли;	
					
					Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
						
						Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
							СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 	
						Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
							СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	 	
						
						Если ФОВУказанНеверно(ТекущаяОсновнаяЗапись, Запись) Тогда
							СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись, Ложь);
						КонецЕсли;	
						
					КонецЕсли;	 
					
				КонецЕсли;	 
				
				//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
				
				//Запомним для следующей итерации
				ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
				ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
				
			КонецЦикла;//Цикл по записям стажа текущего физлица за год
			
			// дополнительная проверка сочетаний между группами стажа
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
				Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл 
					Если Выборка.Физлицо <> СтруктураПоиска.Физлицо Или Выборка.Ссылка <> СтруктураПоиска.Ссылка Тогда
						Прервать;
					КонецЕсли;
					Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл 
						
						СтрокаСообщений = "Комбинация значений реквизитов:";
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание для досрочного назначения пенсии = " + Выборка.УказанныйКодОснованияВыслугиЛет;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
						
						Если Не ЗначениеЗаполнено(Выборка.НомерПравила)
							Или СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ" 
							Или СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "27-14" Тогда
							
							СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Выборка, СтрокаСообщений, , Ложь);
							
							Продолжить;
							
						КонецЕсли;	
						
						//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
						ФОВДопустимо = Ложь;
						
						СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
						
						//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
						Пока Выборка.Следующий() цикл
							
							ФорматФОВ = Выборка.ФорматФОВ;
							СтрокаОшибкиФормата = "";            	
							ПрошлоПроверку = 0;
							СтрокаЗначенияПараметров = "";
							
							Для Н=1 по 2 цикл
								ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
								
								Если Н=1 Тогда	
									ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
									ПсевдонимПараметра = "Месяцы";
								Иначе
									ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
									ПсевдонимПараметра = "Дни";
								КонецЕсли;	
								
								ПараметрПрошелПроверку = Ложь;
								
								НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
								
								Если (ФорматПараметра = "_") Тогда
									Если (ЗначениеПараметра <> 0) Тогда//ПУСТОЕ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "Г") Тогда
									Если (ЗначениеПараметра > 100) Тогда//ГОДЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "М") Тогда 
									Если (ЗначениеПараметра > 11) Тогда//МЕСЯЦЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "Д") Тогда 
									Если (ЗначениеПараметра > 30) Тогда//ДНИ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "ч") Тогда//ЧАСЫ 
									ПараметрПрошелПроверку = ИСТИНА;
								ИначеЕсли (ФорматПараметра = "м") Тогда 
									Если (ЗначениеПараметра > 59) Тогда//МИНУТЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								КонецЕсли;	 
								
								Если ПараметрПрошелПроверку Тогда
									ПрошлоПроверку = ПрошлоПроверку + 1;
								КонецЕсли;	 
								
								СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
							КонецЦикла;
							
							//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
							Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") Тогда//
								ПрошлоПроверку = 0;
								СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
							КонецЕсли;	
							
							Если ПрошлоПроверку = 2 Тогда
								ФОВДопустимо = Истина;
								Прервать;
							КонецЕсли;
							
							СтрФорматФОВ = ФорматФОВ;
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
							СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
							
							СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
							СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
						КонецЦикла;	// по вариантам формата ФОВ
						
						Если НЕ ФОВДопустимо Тогда
							ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Выборка, СтрокаСообщений, , Ложь);
						КонецЕсли;	 
						
					КонецЦикла;// По дополнительным записям	
				КонецЦикла;// По основным записям	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке записей о стаже", ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
	
КонецПроцедуры
 //Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей)
	
	Если Не ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) И Не ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) И Не ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) И Не ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) Тогда
		ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,
		"Дополнительная запись вводится только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Территориальные условия, Особые условия труда, Основание исчисляемого стажа, Условия для досрочного назначения страховой пенсии!",ОсновнаяЗапись, Ложь);
		Возврат Ложь;
	КонецЕсли;	 
	
	ТерриториальныеУсловияЗаписи = Запись.ТерриториальныеУсловия;
	УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
	Основание = Запись.ОснованиеВыслугиЛет;
	
	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(ТерриториальныеУсловияЗаписи);
	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(УсловияТрудаЗаписи);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Основание);
	
	ЭтоРаботаВРайонахПодвергшихсяРадиоактивномуЗагрязнению = (ТерриториальныеУсловияЗаписи = Справочники.ТерриториальныеУсловия.Ч31 Или ТерриториальныеУсловияЗаписи = Справочники.ТерриториальныеУсловия.Ч33 Или ТерриториальныеУсловияЗаписи = Справочники.ТерриториальныеУсловия.Ч34 Или ТерриториальныеУсловияЗаписи = Справочники.ТерриториальныеУсловия.Ч35 Или ТерриториальныеУсловияЗаписи = Справочники.ТерриториальныеУсловия.Ч36) 
		И УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_2 И Запись.КодПозицииСпискаКод = "23307000-17541";
	
	Если Не УказаныТерриториальныеУсловия И Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеВыслугиЛет И Не ЭтоРаботаВРайонахПодвергшихсяРадиоактивномуЗагрязнению Тогда
		ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо основания для досрочного назначения страховой пенсии!",ОсновнаяЗапись, Ложь);
		Возврат Ложь;
	КонецЕсли;	 
	
	//Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия И Запись.ТерриториальныеУсловия = ОсновнаяЗапись.ТерриториальныеУсловия Тогда
		ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи не может быть указана та же территориальная льгота, которая указана в основной записи!",ОсновнаяЗапись, Ложь);
		Возврат Ложь;
	КонецЕсли;	
	
	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда Тогда
		
		Если УсловияТрудаЗаписи = ОсновнаяЗапись.ОсобыеУсловияТруда Тогда
			ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи не может быть указан тот же код условий труда, который указан в основной записи!",ОсновнаяЗапись, Ложь);
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ЭтоРаботаВРайонахПодвергшихсяРадиоактивномуЗагрязнению Тогда
			
			УсловияТрудаОсновнойЗаписи = ОсновнаяЗапись.ОсобыеУсловияТруда;
			ОснованиеИсчисляемогоСтажаОЗ = ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа;
			
			Если (УсловияТрудаОсновнойЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_1 Или УсловияТрудаОсновнойЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_2
					Или УсловияТрудаОсновнойЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_4 Или УсловияТрудаОсновнойЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_6 
					Или УсловияТрудаОсновнойЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_9) 
				И Не ЗначениеЗаполнено(ОснованиеИсчисляемогоСтажаОЗ)
				И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1 И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2 Тогда
				
				ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,
				"Если в основной записи указан один из кодов условий труда 27-1, 27-2, 27-9, 27-6, 27-4, а исчисляемый стаж отсутствует," + Символы.ПС + 
				"тогда в дополнительной записи не может быть указан код условий труда " + ОсновнаяЗапись.ОсобыеУсловияТрудаКод + " (допустимы 27-1 и 27-2)!",ОсновнаяЗапись, Ложь);
				Возврат Ложь;
			КонецЕсли;
			
			Если УсловияТрудаОсновнойЗаписи = Справочники.ОсобыеУсловияТруда.Ст28_ОС
				И Не ЗначениеЗаполнено(ОснованиеИсчисляемогоСтажаОЗ)
				И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1 И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2 И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7 Тогда
				ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,
				"Если в основной записи указан код условий труда 27-ОС, а исчисляемый стаж отсутствует," + Символы.ПС + 
				"тогда в дополнительной записи не может быть указан код условий труда " + ОсновнаяЗапись.ОсобыеУсловияТрудаКод + " (допустимы 27-1, 27-2 и 27-7)!",ОсновнаяЗапись, Ложь);
				Возврат Ложь;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(УсловияТрудаОсновнойЗаписи) И ОснованиеИсчисляемогоСтажаОЗ = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104
				И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1 И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2 И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7 Тогда
				ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,
				"Если в основной записи указан код исчисляемого стажа УИК104, а код условий труда отсутствует," + Символы.ПС + 
				"тогда в дополнительной записи не может быть указан код условий труда " + ОсновнаяЗапись.ОсобыеУсловияТрудаКод + " (допустимы 27-1, 27-2 и 27-7)!",ОсновнаяЗапись, Ложь);
				Возврат Ложь;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(УсловияТрудаОсновнойЗаписи) И ОснованиеИсчисляемогоСтажаОЗ = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН
				И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1
				И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2
				И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_6 
				И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7 
				И УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_9 Тогда
				ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,
				"Если в основной записи указан код исчисляемого стажа СЕЗОН, а код условий труда отсутствует," + Символы.ПС + 
				"тогда в дополнительной записи не может быть указан код условий труда " + ОсновнаяЗапись.ОсобыеУсловияТрудаКод + " (допустимы 27-1, 27-2, 27-6, 27-7, 27-9)!",ОсновнаяЗапись, Ложь);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УказаноОснованиеВыслугиЛет Тогда
		
		Если Основание = ОсновнаяЗапись.ОснованиеВыслугиЛет Тогда
			ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи не может быть указан тот же код основания для досрочного назначения страховой пенсии, который указан в основной записи!",ОсновнаяЗапись, Ложь);
			Возврат Ложь;
		КонецЕсли;
		
		//Проверка на ввод основания выслуги лет
		КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
		
		Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) Тогда
			Если ЗначениеЗаполнено(Основание) 
				И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_СМ 
				И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_ГД 
				И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_СМХР 
				И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_ГДХР Тогда
				ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код основания для досрочного назначения страховой пенсии, то в дополнительной записи" 
				+Символы.ПС+"основание досрочного назначения страховой пенсии должно быть пустым или указаны коды 27-СМ,27-ГД,27-СМХР или 27-ГДХР!",ОсновнаяЗапись, Ложь);
				Возврат Ложь;
			КонецЕсли;	
		Иначе//В основной записи код выслуги указан
			
			КодВыслугиЛетОсновнойЗаписи = СокрЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
			ОснованиеОсновнойЗаписи = ОсновнаяЗапись.ОснованиеВыслугиЛет;
			
			Если ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_СМ 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_ГД 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_СМХР 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_ГДХР 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ЛЕТИСП
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.САМОЛЕТ 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.СПЕЦАВ 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ОПЫТИСП 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ИСПКЛС1 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ИТСМАВ 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.НОРМАПР 
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.РЕАКТИВН
				И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.НОРМСП Тогда
				ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода основания для досрочного назначения страховой пенсии " + КодВыслугиЛетОсновнойЗаписи
				+ Символы.ПС + "в дополнительной записи код основания для досрочного назначения страховой пенсии указываться не может!",ОсновнаяЗапись, Ложь);
				Возврат Ложь;
			Иначе
				
				Если Основание = Справочники.ОснованияВыслугиЛет.Ст28_СМ 
					Или Основание = Справочники.ОснованияВыслугиЛет.Ст28_ГД 
					Или Основание = Справочники.ОснованияВыслугиЛет.Ст28_СМХР 
					Или Основание = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР Тогда
					НачалоКода = Лев(КодВыслугиЛетОсновнойЗаписи,2);
					ПроверочнаяСтрокаКодов = СтрЗаменить(",28-СМ,28-ГД,28-СМХР,28-ГДХР,","28",НачалоКода);
					
				ИначеЕсли Основание = Справочники.ОснованияВыслугиЛет.НОРМАПР 
					Или Основание = Справочники.ОснованияВыслугиЛет.РЕАКТИВН
					Или Основание = Справочники.ОснованияВыслугиЛет.НОРМСП Тогда
					ПроверочнаяСтрокаКодов = ",НОРМАПР,РЕАКТИВН,НОРМСП,";
				Иначе
					ПроверочнаяСтрокаКодов = ",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,";
				КонецЕсли;
				
				//Код выслуги основной записи исключим из списка возможных значений
				ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,"," + КодВыслугиЛетОсновнойЗаписи + ",",",");
				
				Если ЗначениеЗаполнено(Основание) И Найти(ПроверочнаяСтрокаКодов,"," + КодВыслугиЛетЗаписи + ",") = 0 Тогда
					ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода основания для досрочного назначения страховой пенсии "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
					+ Символы.ПС + "могут быть указаны только следующие коды основания для досрочного назначения страховой пенсии: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись, Ложь);
					Возврат Ложь;
				КонецЕсли;	 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции

Функция ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию() Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЕКРЕТ);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДЛОТПУСК);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ВРНЕТРУД);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ВАХТА);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.МЕДНЕТРУД);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.МЕСЯЦ);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДОГОВОР);

	Возврат МассивПараметров
	
КонецФункции 

// Возвращает комплект табличных документов представляющих пачки документов для отображения в РСВ-1.
//
// Параметры:
//  ДокументРСВ1 - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный
//                                        документ, содержащий сведения отчета.
//  НомерСтраницы - Число - номер страницы с которого должна производиться нумерация;
//
//
// Возвращаемое значение:
//  * Структура - представления и описания пачек документов.
//      ** Пачки - Таблица значений - таблица значений
//        *** Представление - Табличный документ - представление пачки
//        *** Описание - Строка - описание пачки для навигации по листам
//      ** Предупреждения - Таблица значений:
//      ** НомерПоследнейСтраницы - Число - номер страницы на последнем листе представлении пачек документов
//
Функция ПечатьРазделов25РасчетаРСВ1(ДокументРСВ1, ДляПоказа = Истина, НомерСтраницы = 0) Экспорт
	
	СообщенияОбОшибках = Новый ТаблицаЗначений;
	НомерСтраницы = НомерСтраницы + 1;
	НомерПоследнейСтраницы = НомерСтраницы;
	
	ВывестиПустойБланк = Не ЗначениеЗаполнено(ДокументРСВ1);
	
	Если Не ВывестиПустойБланк Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РасчетРСВ1", ДокументРСВ1);
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументРСВ1,"Организация"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаСЗВ4вПФР.Ссылка
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
		|ГДЕ
		|	ПередачаСЗВ4вПФР.РасчетРСВ1 = &РасчетРСВ1
		|	И ПередачаСЗВ4вПФР.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов2014 КАК ПередачаСЗВ4вПФРПачкиДокументов2014
		|ГДЕ
		|	ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.РасчетРСВ1 = &РасчетРСВ1
		|	И ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.Организация = &Организация";
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ВывестиПустойБланк = Результаты[0].Пустой() Или Результаты[1].Пустой();
		
	КонецЕсли;
	
	Если ВывестиПустойБланк Тогда
		ПечатныеФормы = Новый ТаблицаЗначений;
	    ПечатныеФормы.Колонки.Добавить("Представление");
	    ПечатныеФормы.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
		СтрокаОписания = ПечатныеФормы.Добавить();
		Если ЗначениеЗаполнено(ДокументРСВ1) Тогда
			ДанныеРСВ1 = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(ДокументРСВ1, "Организация, ДатаПодписи");
		Иначе
			ДанныеРСВ1 = Новый Структура("Организация, ДатаПодписи", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		КонецЕсли;
		СтрокаОписания.Представление = Документы.ПередачаСЗВ4вПФР.ПустойРаздел25РасчетаРСВ1(ДанныеРСВ1.Организация, ДанныеРСВ1.ДатаПодписи, Не ДляПоказа, НомерСтраницы);
		СтрокаОписания.Описание = "Раздел 2.5. Лист №1"
	Иначе	
		Выборка = Результаты[0].Выбрать();
		Выборка.Следующий();
		ПечатныеФормы = Документы.ПередачаСЗВ4вПФР.Раздел25РасчетаРСВ1(Выборка.Ссылка, ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументРСВ1, "ДатаПодписи"), Не ДляПоказа, НомерСтраницы, НомерПоследнейСтраницы);
	КонецЕсли;
	
	Если ДляПоказа Тогда
		Возврат Новый Структура("Пачки", ПечатныеФормы)
	Иначе
		Возврат Новый Структура("Пачки, Предупреждения, НомерПоследнейСтраницы", ПечатныеФормы, СообщенияОбОшибках, НомерПоследнейСтраницы)
	КонецЕсли;
	
КонецФункции

// Возвращает сведения по пачкам документов для электронного представления.
//
// Параметры:
//  ДокументРСВ1 - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный
//                                      документ, содержащий сведения отчета.
//
// Возвращаемое значение:
//  * Структура - представления и описания сведений по физлицам.
//      ** ПачкиИсходные - Таблица значений - таблица значений:
//        *** БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную - Число - Сведения о базе для начисления страховых взносов, не превышающих предельную величину базы;
//        *** СтраховыхВзносовОПС - Число - Сведения о начисленных страховых взносов  на ОПС  с сумм выплат и иных вознаграждений, не превышающих предельную величину базы для начисления страховых взносов;
//        *** КоличествоЗЛвПачке - Число - Сведения о количестве застрахованных лиц в пачке сведений
//        *** ИмяФайла - Строка - имя файла с раширением.
//      ** ПачкиКорректирующие - Таблица значений - таблица значений:
//        *** Квартал - Число - Код отчетного периода;
//        *** Год - Число - Год
//        *** ДоначисленоСтраховыхВзносовОПС - Число - Доначислено страховых взносов на ОПС
//        *** ДоначисленоНаСтраховуюЧасть - Число - Доначислено страховых взносов на страховую часть
//        *** ДоначисленоНаНакопительнуюЧасть - Число - Доначислено страховых взносов на накопительную часть
//        *** КоличествоЗЛвПачке - Число - Сведения о количестве застрахованных лиц в пачке сведений
//        *** ИмяФайла - Строка - имя файла с раширением.
//      ** Ошибки - Таблица значений - таблица значений:
//        *** ОписаниеОшибки - Строка - текстовое описание ошибки
//        *** Документ - ДокументСсылка - ссылка на документ информационной базы, содержащий ошибку
//
Функция СведенияРаздела25РасчетаРСВ1(ДокументРСВ1) Экспорт
	
	СообщенияОбОшибках = Новый ТаблицаЗначений;
	СообщенияОбОшибках.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	СообщенияОбОшибках.Колонки.Добавить("Документ");
	
	Если Не ЗначениеЗаполнено(ДокументРСВ1) Тогда
		ПачкиИсходные = Новый ТаблицаЗначений;
		ПачкиИсходные.Колонки.Добавить("БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ПачкиИсходные.Колонки.Добавить("СтраховыхВзносовОПС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ПачкиИсходные.Колонки.Добавить("КоличествоЗЛвПачке", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
		ПачкиИсходные.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
		ПачкиКорректирующие = Новый ТаблицаЗначений;
		ПачкиКорректирующие.Колонки.Добавить("Квартал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
		ПачкиКорректирующие.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
		ПачкиКорректирующие.Колонки.Добавить("ДоначисленоСтраховыхВзносовОПС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ПачкиКорректирующие.Колонки.Добавить("ДоначисленоНаСтраховуюЧасть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ПачкиКорректирующие.Колонки.Добавить("ДоначисленоНаНакопительнуюЧасть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ПачкиКорректирующие.Колонки.Добавить("КоличествоЗЛвПачке", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
		ПачкиКорректирующие.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
		Возврат Новый Структура("ПачкиИсходные, ПачкиКорректирующие, Ошибки", ПачкиИсходные, ПачкиКорректирующие, СообщенияОбОшибках)
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасчетРСВ1", ДокументРСВ1);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументРСВ1,"Организация"));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПередачаСЗВ4вПФР.Ссылка,
	|	ГОД(ПередачаСЗВ4вПФР.ОтчетныйПериод) КАК ОтчетныйГод
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
	|ГДЕ
	|	ПередачаСЗВ4вПФР.РасчетРСВ1 = &РасчетРСВ1
	|	И ПередачаСЗВ4вПФР.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаСЗВ4вПФР.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВременнаяТаблица = Документы.ПередачаСЗВ4вПФР.ЗапросПоИсходнымПачкам2014(Выборка.Ссылка).Выгрузить();
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		ЕстьОшибки = Ложь;
		Документы.ПередачаСЗВ4вПФР.ПроверитьПравильностьЗаполненияДокумента(Выборка.Ссылка, ЕстьОшибки, Ложь);
		Документы.ПередачаСЗВ4вПФР.ПроверитьКомплектДокументов(Выборка.Ссылка, ДокументРСВ1, ВременнаяТаблица);
		
		ПеренестиСообщенияОбОшибкахВРСВ(СообщенияОбОшибках);
		ОбработкаКомментариев.ПоказатьСообщения();
		
		ВременнаяТаблица.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
		Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.ЧастьТекстаФайла) Тогда
				СтрокаТЗ.ИмяФайла = ИмяФайлаИзФайлаПФР(СтрокаТЗ.ЧастьТекстаФайла)
			Иначе
				СтрокаТЗ.ИмяФайла = ПолучитьИмяФайлаПФ(Выборка.Ссылка, Выборка.ОтчетныйГод, СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		ПачкиИсходные = ВременнаяТаблица.Скопировать(,"БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную,СтраховыхВзносовОПС,КоличествоЗЛвПачке,ИмяФайла");
		
		ВременнаяТаблица = Документы.ПередачаСЗВ4вПФР.ЗапросПоКорректирующимПачкам2014(Выборка.Ссылка).Выгрузить();
		ВременнаяТаблица.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
		ВременнаяТаблица.Колонки.Добавить("Квартал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
		ВременнаяТаблица.Колонки.КорректируемыйГод.Имя = "Год";
		Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.ЧастьТекстаФайла) Тогда
				СтрокаТЗ.ИмяФайла = ИмяФайлаИзФайлаПФР(СтрокаТЗ.ЧастьТекстаФайла)
			Иначе
				СтрокаТЗ.ИмяФайла = ПолучитьИмяФайлаПФ(Выборка.Ссылка, Выборка.ОтчетныйГод, СтрокаТЗ);
			КонецЕсли;
			СтрокаТЗ.Квартал = КодПериодаДляРасчетаРСВ1(СтрокаТЗ.КорректируемыйПериод);
		КонецЦикла;
		ПачкиКорректирующие = ВременнаяТаблица.Скопировать(,"Квартал,Год,ДоначисленоСтраховыхВзносовОПС,ДоначисленоНаСтраховуюЧасть,ДоначисленоНаНакопительнуюЧасть,КоличествоЗЛвПачке,ИмяФайла");
		
	КонецЕсли;
	
	Возврат Новый Структура("ПачкиИсходные, ПачкиКорректирующие, Ошибки", ПачкиИсходные, ПачкиКорректирующие, СообщенияОбОшибках)
	
КонецФункции

// Возвращает комплект табличных документов содержащих сведения по физическим лицам для печати РСВ-1.
//
// Параметры:
//  ДокументРСВ1 - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный
//                                        документ, содержащий сведения отчета.
//  НомерСтраницы - Число - номер страницы с которого должна производиться нумерация;
//
// Возвращаемое значение:
//  * Структура - представления и описания сведений по физлицам.
//      ** Пачки - Таблица значений - таблица значений
//        *** Представление - Табличный документ - представление сведений
//        *** Описание - Строка - описание сведений для навигации по листам
//      ** Предупреждения - Таблица значений:
//
Функция ПечатьРазделов6РасчетаРСВ1(ДокументРСВ1, ДляПоказа = Истина, НомерСтраницы = 0) Экспорт

	ПечатныеФормы = Новый ТаблицаЗначений;
	ПечатныеФормы.Колонки.Добавить("Представление");
	ПечатныеФормы.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	СообщенияОбОшибках = Новый ТаблицаЗначений;
	НомерСтраницы = НомерСтраницы + 1;
	НомерПоследнейСтраницы = НомерСтраницы;
	
	Если ЗначениеЗаполнено(ДокументРСВ1) Тогда
		
		Результаты = ПачкиРаздела2_5(ДокументРСВ1);
		
		ПачкиДокументов = Результаты[0].Выгрузить();
		
		// Разделы6
		Если Не Результаты[1].Пустой() Тогда
			Документы.ПачкаРазделов6РасчетаРСВ_1.Печать(ПачкиДокументов, ПечатныеФормы, ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументРСВ1, "ДатаПодписи"), Не ДляПоказа, Не ДляПоказа, НомерСтраницы, НомерПоследнейСтраницы, , Ложь);
		КонецЕсли;
		
		// Остальные корректировки
		ТипСЗВ6_4 = "ПачкаДокументовСЗВ_6_4";
 		ТипСЗВ6_12 = "СведенияОТрудовомСтажеИЗаработкеСЗВ4";
		
		Для каждого СтрокаТЗ Из ПачкиДокументов Цикл
			
			Если СтрокаТЗ.ТипДокумента = ТипСЗВ6_4 Тогда
				Объект = СтрокаТЗ.ДокументПачка.ПолучитьОбъект();
				ПечатнаяФорма = Объект.Печать("ФормаСЗВ_6_4", , , Ложь, Истина, Не ДляПоказа);
				Если ПечатнаяФорма.ВысотаТаблицы > 0 Тогда
					СтрокаРезультатов = ПечатныеФормы.Добавить();
					СтрокаРезультатов.Представление = ПечатнаяФорма;
					СтрокаРезультатов.Описание = "Формы СЗВ-6-4. Пачка №" + Объект.НомерПачки;
					НомерПоследнейСтраницы = НомерПоследнейСтраницы + Объект.РаботникиОрганизации.Количество() + 1
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТЗ.ТипДокумента = ТипСЗВ6_12 Тогда
				Объект = СтрокаТЗ.ДокументПачка.ПолучитьОбъект();
				ПечатнаяФорма = ПечатнаяФормаСЗВ_6(Объект, Объект.ТипФормДокументов, , , , Ложь, Ложь, Истина, Не ДляПоказа);
				Если ПечатнаяФорма.ВысотаТаблицы > 0 Тогда
					СтрокаРезультатов = ПечатныеФормы.Добавить();
					СтрокаРезультатов.Представление = ПечатнаяФорма;
					СтрокаРезультатов.Описание = "Формы " + СокрЛП(Объект.ТипФормДокументов) + ". Пачка №" + Объект.НомерПачки;
					Если Объект.ТипФормДокументов = "СЗВ-6-1" Тогда
						НомерПоследнейСтраницы = НомерПоследнейСтраницы + Объект.РаботникиОрганизации.Количество() + 1
					Иначе
						ВсегоСтрок = Объект.РаботникиОрганизации.Количество();
						НомерПоследнейСтраницы = НомерПоследнейСтраницы + ?(ВсегоСтрок < 15, 1, Окр((ВсегоСтрок - 14) / 44, 0) + 2)
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
        	// удалим пустые строки-заголовки документов
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		СтрокиДокументовКУдалению = Новый Массив;
		Для Каждого Строка Из ОбработкаКомментариев.Сообщения.Строки Цикл
			ВсегоСообщений = Строка.Строки.Количество();
			Если ВсегоСообщений = 0 Тогда
				СтрокиДокументовКУдалению.Добавить(Строка)
			ИначеЕсли ДляПоказа Тогда // при показе формы РСВ-1 оставим только сообщения об ошибках
				СтрокиКУдалению = Новый Массив;
				Для каждого СтрокаСообщения Из Строка.Строки Цикл
					Если СтрокаСообщения.ВидСообщения <> Перечисления.ВидыСообщений.Ошибка Тогда
						СтрокиКУдалению.Добавить(СтрокаСообщения);
					КонецЕсли;
				КонецЦикла;
				Если СтрокиКУдалению.Количество() = ВсегоСообщений Тогда
					СтрокиДокументовКУдалению.Добавить(Строка)
				Иначе
					Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
						Строка.Строки.Удалить(СтрокаКУдалению)
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаКУдалению Из СтрокиДокументовКУдалению Цикл
			ОбработкаКомментариев.Сообщения.Строки.Удалить(СтрокаКУдалению)
		КонецЦикла;
		
		ОбработкаКомментариев.ПоказатьСообщения();

	Иначе
		
		СтрокаТЗ = ПечатныеФормы.Добавить();
		СтрокаТЗ.Представление = Новый ТабличныйДокумент;
		
	КонецЕсли;
	
	Если ДляПоказа Тогда
		Возврат Новый Структура("Пачки", ПечатныеФормы)
	Иначе
		Возврат Новый Структура("Пачки, Предупреждения, НомерПоследнейСтраницы", ПечатныеФормы, СообщенияОбОшибках, НомерПоследнейСтраницы)
	КонецЕсли;

КонецФункции

// Возвращает комплект текстов файлов представляющих пачки документов 
//
// Параметры:
//   ДокументРСВ1 - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный
//                                        документ, содержащий сведения отчета.
//
// Возвращаемое значение:
//  * Структура - представления и описания сведений по физлицам.
//      ** Пачки - Таблица значений - таблица значений:
//        *** ТекстФайла - Строка - строка с текстом электронного представления сведений
//        *** ИмяФайла - Строка - имя файла с раширением
//      ** Ошибки - Таблица значений - таблица значений:
//        *** ОписаниеОшибки - Строка - текстовое описание ошибки
//        *** Документ - ДокументСсылка - ссылка на документ информационной базы, содержащий ошибку
//
Функция ФайлыРазделов6РасчетаРСВ1(ДокументРСВ1) Экспорт

	Файлы = Новый ТаблицаЗначений;
	Файлы.Колонки.Добавить("ТекстФайла", Новый ОписаниеТипов("Строка"));
	Файлы.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	СообщенияОбОшибках = Новый ТаблицаЗначений;
	СообщенияОбОшибках.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	СообщенияОбОшибках.Колонки.Добавить("Документ");
	
	Если ЗначениеЗаполнено(ДокументРСВ1) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РасчетРСВ1", ДокументРСВ1);
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументРСВ1,"Организация"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаСЗВ4вПФРПачкиДокументов2014.НомерСтроки,
		|	ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка
		|ПОМЕСТИТЬ ВТПачки
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов2014 КАК ПередачаСЗВ4вПФРПачкиДокументов2014
		|ГДЕ
		|	ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.РасчетРСВ1 = &РасчетРСВ1
		|	И ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.Организация = &Организация
		|	И ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АрхивДанныхРегламентированнойОтчетности.Данные,
		|	АрхивДанныхРегламентированнойОтчетности.Объект КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ПачкаДокументовСЗВ_6_4.Ссылка ЕСТЬ НЕ NULL 
		|			ТОГДА ""ПачкаДокументовСЗВ_6_4""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТипДокумента
		|ИЗ
		|	РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаДокументовСЗВ_6_4
		|		ПО АрхивДанныхРегламентированнойОтчетности.Объект = ПачкаДокументовСЗВ_6_4.Ссылка
		|ГДЕ
		|	АрхивДанныхРегламентированнойОтчетности.Объект В
		|			(ВЫБРАТЬ
		|				Пачки.ДокументПачка
		|			ИЗ
		|				ВТПачки КАК Пачки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПачкаРазделов6РасчетаРСВ_1.Ссылка
		|ИЗ
		|	Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ПачкаРазделов6РасчетаРСВ_1
		|ГДЕ
		|	ПачкаРазделов6РасчетаРСВ_1.Ссылка В
		|			(ВЫБРАТЬ
		|				Пачки.ДокументПачка
		|			ИЗ
		|				ВТПачки КАК Пачки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПачкаДокументовСЗВ_6_4.Ссылка
		|ИЗ
		|	Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаДокументовСЗВ_6_4
		|ГДЕ
		|	ПачкаДокументовСЗВ_6_4.Ссылка В
		|			(ВЫБРАТЬ
		|				Пачки.ДокументПачка
		|			ИЗ
		|				ВТПачки КАК Пачки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
		|ГДЕ
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка В
		|			(ВЫБРАТЬ
		|				Пачки.ДокументПачка
		|			ИЗ
		|				ВТПачки КАК Пачки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пачки.ДокументПачка
		|ИЗ
		|	ВТПачки КАК Пачки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
		|		ПО Пачки.ДокументПачка = АрхивДанныхРегламентированнойОтчетности.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ПачкаРазделов6РасчетаРСВ_1
		|		ПО Пачки.ДокументПачка = ПачкаРазделов6РасчетаРСВ_1.Ссылка
		|ГДЕ
		|	АрхивДанныхРегламентированнойОтчетности.Объект ЕСТЬ NULL 
		|	И ПачкаРазделов6РасчетаРСВ_1.Ссылка ЕСТЬ НЕ NULL ";
        Результаты = Запрос.ВыполнитьПакет();
		
		Если Результаты[2].Пустой() Или Не Результаты[3].Пустой() Тогда
 			Результаты = ПачкиРаздела2_5(ДокументРСВ1);
			
			ПачкиДокументов = Результаты[0].Выгрузить();
			
			// Разделы 6
			Если Не Результаты[1].Пустой() Тогда
				Документы.ПачкаРазделов6РасчетаРСВ_1.ФормированиеФайлов(ПачкиДокументов, Файлы, СообщенияОбОшибках, ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументРСВ1, "ДатаПодписи"), Истина, Ложь);
				Файлы.Колонки.Удалить("Ссылка");
			КонецЕсли;
			
			// Остальные корректировки
			ТипСЗВ6_4 = "ПачкаДокументовСЗВ_6_4";
	 		ТипСЗВ6_12 = "СведенияОТрудовомСтажеИЗаработкеСЗВ4";
			
			Для каждого СтрокаТЗ Из ПачкиДокументов Цикл
				
				Если СтрокаТЗ.ТипДокумента = ТипСЗВ6_4 Или СтрокаТЗ.ТипДокумента = ТипСЗВ6_12 Тогда
					Если СтрокаТЗ.Проведен Тогда
						
						ТекстФайла = СтрокаТЗ.Данные;
						СтрокаРезультатов = Файлы.Добавить();
						СтрокаРезультатов.ТекстФайла = ТекстФайла;
						СтрокаРезультатов.ИмяФайла = ИмяФайлаИзФайлаПФР(ТекстФайла);
						
						Если СтрокаТЗ.ТипДокумента = ТипСЗВ6_4 Тогда
							ЕстьОшибки = Ложь;
							СтрокаТЗ.ДокументПачка.ПолучитьОбъект().ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, Ложь);
						КонецЕсли;
						
					Иначе
						
						Объект = СтрокаТЗ.ДокументПачка.ПолучитьОбъект();
						ЕстьОшибки = Ложь;
						Объект.ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, Ложь);
						Если Не ЕстьОшибки Тогда
							ТекстФайла = Объект.СформироватьВыходнойФайл(ЕстьОшибки, Ложь);
							СтрокаРезультатов = Файлы.Добавить();
							СтрокаРезультатов.ТекстФайла = ТекстФайла;
							СтрокаРезультатов.ИмяФайла = ИмяФайлаИзФайлаПФР(ТекстФайла);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;

			ПеренестиСообщенияОбОшибкахВРСВ(СообщенияОбОшибках);
			
		Иначе
			
			ЕстьОшибки = Ложь;
			Документы.ПачкаРазделов6РасчетаРСВ_1.ПроверитьПравильностьЗаполненияДокументов(ПачкиДокументов, ЕстьОшибки, Ложь);
			
			// Остальные корректировки
			ТипСЗВ6_4 = "ПачкаДокументовСЗВ_6_4";
			
			Выборка = Результаты[1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстФайла = Выборка.Данные;
				СтрокаРезультатов = Файлы.Добавить();
				СтрокаРезультатов.ТекстФайла = ТекстФайла;
				СтрокаРезультатов.ИмяФайла = ИмяФайлаИзФайлаПФР(ТекстФайла);
			
				Если Выборка.ТипДокумента = ТипСЗВ6_4 Тогда
					Выборка.Ссылка.ПолучитьОбъект().ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, Ложь);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.ПоказатьСообщения();
		
	КонецЕсли;
	
	Возврат Новый Структура("Пачки, Ошибки", Файлы, СообщенияОбОшибках)

КонецФункции

Функция КодПериодаДляРасчетаРСВ1(ОтчетныйПериод) Экспорт
	
	Возврат ОписаниеОтчетногоПериодаДляФайла(ОтчетныйПериод).Квартал
	
КонецФункции 
Функция ДатаВводаОснованияИсчисляемогоСтажаПоле() Экспорт

	Возврат '20150101'

КонецФункции

Функция ДатаОтменыОтсутствияАДМИНИСТР() Экспорт

	Возврат ДатаВводаФормыРСВ_1за2015год()

КонецФункции

Функция ДатаВводаФормыРСВ_1за2015год() Экспорт

	Возврат '20150401'

КонецФункции
////////////////////////////////////////////////////////////////////////////////

Процедура ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "", ВыводитьОрганизацию = Истина)
	
	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись, ВыводитьОрганизацию);
	
	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
	
	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Запись);
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
	
КонецПроцедуры 

Функция ПачкиРаздела2_5(ДокументРСВ1)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РасчетРСВ1", ДокументРСВ1);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументРСВ1,"Организация"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.НомерСтроки,
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка,
	|	ВЫБОР
	|		КОГДА ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИсходныеСведения,

	|	ВЫБОР
	|		КОГДА ПачкаДокументовСЗВ_6_4.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ""ПачкаДокументовСЗВ_6_4""
	|		КОГДА ПачкаРазделов6РасчетаРСВ_1.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ""ПачкаРазделов6РасчетаРСВ_1""
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ""СведенияОТрудовомСтажеИЗаработкеСЗВ4""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипДокумента,
	|	ВЫБОР
	|		КОГДА ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка.Проведен
	|			ТОГДА ИСТИНА
	|		КОГДА ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка.ЗаполненПринятымиСведениями
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Проведен,
	|	АрхивДанныхРегламентированнойОтчетности.Данные
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов2014 КАК ПередачаСЗВ4вПФРПачкиДокументов2014
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
	|		ПО ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка = АрхивДанныхРегламентированнойОтчетности.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаДокументовСЗВ_6_4
	|		ПО ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка = ПачкаДокументовСЗВ_6_4.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ПачкаРазделов6РасчетаРСВ_1
	|		ПО ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка = ПачкаРазделов6РасчетаРСВ_1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка
	|ГДЕ
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.РасчетРСВ1 = &РасчетРСВ1
	|	И ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоИсходныеСведения УБЫВ,
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПачкаРазделов6РасчетаРСВ_1.Ссылка
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов2014 КАК ПередачаСЗВ4вПФРПачкиДокументов2014
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ПачкаРазделов6РасчетаРСВ_1
	|		ПО ПередачаСЗВ4вПФРПачкиДокументов2014.ДокументПачка = ПачкаРазделов6РасчетаРСВ_1.Ссылка
	|ГДЕ
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.РасчетРСВ1 = &РасчетРСВ1
	|	И ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка.Организация = &Организация
	|	И ПачкаРазделов6РасчетаРСВ_1.Ссылка ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.НомерСтроки";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции 

Функция ИмяФайлаИзФайлаПФР(ТекстФайла)

	Возврат Сред(ТекстФайла, Найти(ТекстФайла, "PFR-700-Y-"), 68)

КонецФункции 

Процедура ПеренестиСообщенияОбОшибкахВРСВ(СообщенияОбОшибках) 

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	СтрокиДокументовКУдалению = Новый Массив;
	Для Каждого Строка Из ОбработкаКомментариев.Сообщения.Строки Цикл
		ВсегоСообщений = Строка.Строки.Количество();
		Если ВсегоСообщений = 0 Тогда
			СтрокиДокументовКУдалению.Добавить(Строка)
		Иначе
			
			Ссылка = Неопределено;
			Если ЗначениеЗаполнено(Строка.Расшифровка) Тогда
				Ссылка = Строка.Расшифровка[0].Расшифровка
			КонецЕсли;
			
			ДобавлятьЗаголовок = Истина;
			
			СтрокиКУдалению = Новый Массив;
			Для каждого СтрокаСообщения Из Строка.Строки Цикл
				Если Лев(СтрокаСообщения.Текст, 15) = "Предупреждение:" Тогда
					СтрокиКУдалению.Добавить(СтрокаСообщения);
				ИначеЕсли СтрокаСообщения.ВидСообщения = Перечисления.ВидыСообщений.Ошибка Тогда
					Если ДобавлятьЗаголовок Тогда
						НоваяСтрока = СообщенияОбОшибках.Добавить();
						НоваяСтрока.ОписаниеОшибки = Строка.Текст;
						НоваяСтрока.Документ = Ссылка;
						ДобавлятьЗаголовок = Ложь;
					КонецЕсли;
					НоваяСтрока = СообщенияОбОшибках.Добавить();
					НоваяСтрока.ОписаниеОшибки = СтрЗаменить(СтрокаСообщения.Текст,"<br>", Символы.ПС);

					СтрокиКУдалению.Добавить(СтрокаСообщения);
				КонецЕсли;
			КонецЦикла;
			Если СтрокиКУдалению.Количество() = ВсегоСообщений Тогда
				СтрокиДокументовКУдалению.Добавить(Строка)
			Иначе
				Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Строка.Строки.Удалить(СтрокаКУдалению)
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиДокументовКУдалению Цикл
		ОбработкаКомментариев.Сообщения.Строки.Удалить(СтрокаКУдалению)
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Функция ПечатнаяФормаОДВ_1(Ссылка) Экспорт 
	
	ИмяДокумента = "";
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР") Тогда
		ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ") Тогда
		ИмяДокумента = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ") Тогда
		ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ";
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ФормаОДВ_1");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОДВ_1";
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаПозиции = Макет.ПолучитьОбласть("СтрокаПозиции");
	ОбластьУплатаВзносовСтрока = Макет.ПолучитьОбласть("УплатаВзносовСтрока");
	ОбластьШапкаРаздела5 = Макет.ПолучитьОбласть("ШапкаРаздела5");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечатиОДВ_1(Ссылка, Ссылка.Дата).Выбрать();
	ВыборкаПоПоДаннымДосрочногоНазначенияПенсии = ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(Ссылка, ИмяДокумента).Выбрать();
	ВыборкаПоДаннымНачисленныхУплаченныхВзносов = ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(Ссылка, ИмяДокумента).Выбрать();
	ВыборкаПоДаннымРасшифровкиУплаченныхВзносов = ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(Ссылка, ИмяДокумента).Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда 
		
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		
		РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
		РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12);
		
		ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12);
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.Год,"ЧГ=0"), ОбластьШапка, "Год", 4);
		
		ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
		ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
        ОбластьШапка.Параметры.КодОтчетногоПериода = КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);

		ОбластьШапка.Параметры.Исходная = Истина;
		
		Если ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_КОРР = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		ИначеЕсли ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_ИСХ = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		Иначе
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_Стаж = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		КонецЕсли;
		
		ЕстьДанныеНачисленныхУплаченныхВзносов = ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" 
			Или (ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" И ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Особая); 
		
		Если ЕстьДанныеНачисленныхУплаченныхВзносов Тогда 
				СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
			Если ВыборкаПоДаннымНачисленныхУплаченныхВзносов.НайтиСледующий(СтруктураПоиска) Тогда
				ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ВыборкаПоДаннымНачисленныхУплаченныхВзносов);
			КонецЕсли;
		КонецЕсли;
		ТекущийЛист.Вывести(ОбластьШапка);

		Если ЕстьДанныеНачисленныхУплаченныхВзносов Тогда 
			Если ВыборкаПоДаннымРасшифровкиУплаченныхВзносов.НайтиСледующий(СтруктураПоиска) Тогда
				ВыборкаПоДаннымРасшифровкиУплаченныхВзносов.СледующийПоЗначениюПоля("Ссылка");
				Пока ВыборкаПоДаннымРасшифровкиУплаченныхВзносов.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьУплатаВзносовСтрока.Параметры, ВыборкаПоДаннымРасшифровкиУплаченныхВзносов);
					ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
				КонецЦикла;
			КонецЕсли;
		Иначе 
			ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
			ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
		КонецЕсли;
		ТекущийЛист.Вывести(ОбластьШапкаРаздела5);
		
		Если ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.Количество() > 0 Тогда 
			СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
			Если ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.НайтиСледующий(СтруктураПоиска) Тогда
				КоличествоРабочихМест = 0;
				КоличествоРаботающих = 0;
				ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.СледующийПоЗначениюПоля("Ссылка");
				Пока ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПозиции.Параметры, ВыборкаПоПоДаннымДосрочногоНазначенияПенсии);
					ВывестиОбластьОДВ_1(ОбластьСтрокаПозиции, ДокументРезультат, ТекущийЛист);
					КоличествоРабочихМест = КоличествоРабочихМест + ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.КоличествоРабочихМест;
					КоличествоРаботающих = КоличествоРаботающих + ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.КоличествоРаботающих;
				КонецЦикла;
				ОбластьПодвал.Параметры.КоличествоРабочихМест = КоличествоРабочихМест;
				ОбластьПодвал.Параметры.КоличествоРаботающих = КоличествоРаботающих;
			КонецЕсли;
		Иначе 
			ТекущийЛист.Вывести(ОбластьСтрокаПозиции);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
		ВывестиОбластьОДВ_1(ОбластьПодвал, ДокументРезультат, ТекущийЛист);
		
		ДокументРезультат.Вывести(ТекущийЛист);
		
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиОбластьОДВ_1(ВыводимаяОбласть, ДокументРезультат, ТекущийЛист)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ВыводимыеОбласти, Ложь) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Функция ЗапросПоШапкеДляПечатиОДВ_1(МассивСсылок, ДатаАктуальности) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Сотрудники.НомерСтроки) КАК Количество,
	|	Сотрудники.Ссылка
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Сотрудники.НомерСтроки),
	|	Сотрудники.Ссылка
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Сотрудники.НомерСтроки),
	|	Сотрудники.Ссылка
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка КАК Ссылка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.ИНН КАК ИНН,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.КПП КАК КПП,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.ЮрФизЛицо КАК ЮридическоеФизическоеЛицо,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Год,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ТипСведенийСЗВ КАК ТипСведений,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Руководитель КАК Руководитель,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Дата,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.ОГРН КАК ОГРН,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	Итоги.Количество КАК КоличествоЗастрахованныхЛиц,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.НачисленыВзносыНаОПС,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.НачисленыВзносыПоДТ,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ИмяФайла КАК ИмяФайлаДляПФР,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОтчетныйПериод
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка = Итоги.Ссылка
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Ссылка,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.НаименованиеСокращенное,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.ИНН,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.КПП,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.ЮрФизЛицо,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Год,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.КорректируемыйПериод,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ТипСведенийСЗВ,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Руководитель,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ДолжностьРуководителя.Наименование,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Дата,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.КодПоОКПО,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.ОГРН,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.НаименованиеПолное,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.НаименованиеСокращенное,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.РегистрационныйНомерПФР,
	|	Итоги.Количество,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ИмяФайла,
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ОтчетныйПериод
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Ссылка = Итоги.Ссылка
	|ГДЕ
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Ссылка,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.НаименованиеСокращенное,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.ИНН,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.КПП,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.ЮрФизЛицо,
	|	ГОД(СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ОтчетныйПериод),
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Руководитель,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ДолжностьРуководителя.Наименование,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Дата,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.КодПоОКПО,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.ОГРН,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.НаименованиеПолное,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.НаименованиеСокращенное,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.РегистрационныйНомерПФР,
	|	Итоги.Количество,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ИмяФайла,
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ОтчетныйПериод
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ КАК СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Ссылка = Итоги.Ссылка
	|ГДЕ
	|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИОРуководителя,
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ ВТФИООтветственныхЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаАктуальности,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ДанныеДокументов.Руководитель
	|					ИЗ
	|						ВТДанныеДокументов КАК ДанныеДокументов)) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка В
	|			(ВЫБРАТЬ
	|				ДанныеДокументов.Руководитель
	|			ИЗ
	|				ВТДанныеДокументов КАК ДанныеДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.Год,
	|	ДанныеДокументов.ТипСведений КАК ТипСведений,
	|	ЕСТЬNULL(ВТФИОПоследние.ФИОРуководителя, """") КАК Руководитель,
	|	ЕСТЬNULL(ВТФИОПоследние.Фамилия, """") КАК ФамилияРуководителя,
	|	ЕСТЬNULL(ВТФИОПоследние.Имя, """") КАК ИмяРуководителя,
	|	ЕСТЬNULL(ВТФИОПоследние.Отчество, """") КАК ОтчествоРуководителя,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.КоличествоЗастрахованныхЛиц,
	|	ДанныеДокументов.НачисленыВзносыНаОПС,
	|	ДанныеДокументов.НачисленыВзносыПоДТ,
	|	ДанныеДокументов.ИмяФайлаДляПФР,
	|	ДанныеДокументов.ОтчетныйПериод
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОПоследние
	|		ПО ДанныеДокументов.Руководитель = ВТФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипСведений,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(МассивСсылок, ИмяДокумента= "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ") Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДосрочноеНазначениеПенсии.Ссылка КАК Ссылка,
	|	ДосрочноеНазначениеПенсии.НомерСтроки КАК НомерСтроки,
	|	ДосрочноеНазначениеПенсии.Подразделение,
	|	ДосрочноеНазначениеПенсии.Подразделение.Наименование КАК НаименованиеПодразделения,
	|	ДосрочноеНазначениеПенсии.Должность,
	|	ДосрочноеНазначениеПенсии.Должность.Наименование КАК НаименованиеДолжности,
	|	ДосрочноеНазначениеПенсии.КоличествоРабочихМест,
	|	ДосрочноеНазначениеПенсии.КоличествоРаботающих,
	|	ДосрочноеНазначениеПенсии.ХарактерВыполняемыхРабот,
	|	ДосрочноеНазначениеПенсии.ПервичныеДокументы,
	|	ДосрочноеНазначениеПенсии.ОснованиеВыслугиЛет,
	|	ДосрочноеНазначениеПенсии.ОснованиеВыслугиЛет.КодДляОтчетности2010 КАК ОснованиеВыслугиЛетКод,
	|	ДосрочноеНазначениеПенсии.КодПозицииСписка,
	|	ДосрочноеНазначениеПенсии.КодПозицииСписка.Код КАК КодПозицииСпискаКод
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	|ГДЕ
	|	ДосрочноеНазначениеПенсии.Ссылка В(&МассивСсылок)
	|	И ДосрочноеНазначениеПенсии.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.Исходная)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";


	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДосрочноеНазначениеПенсии.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.Исходная)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(МассивСсылок, ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР") Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОКорректировкеСведений.Ссылка
	|ПОМЕСТИТЬ ВТСписокДокументов
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведений
	|ГДЕ
	|	ДанныеОКорректировкеСведений.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНачисленныхУплаченныхВзносов.Ссылка,
	|	ДанныеНачисленныхУплаченныхВзносов.ВидСтраховыхВзносов,
	|	ДанныеНачисленныхУплаченныхВзносов.ЗадолженностьНаНачалоПериода,
	|	ДанныеНачисленныхУплаченныхВзносов.Начислено,
	|	ДанныеНачисленныхУплаченныхВзносов.Уплачено,
	|	ДанныеНачисленныхУплаченныхВзносов.ЗадолженностьНаКонецПериода
	|ПОМЕСТИТЬ ВТДанныеОВзносах
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.НачисленныеУплаченныеВзносы КАК ДанныеНачисленныхУплаченныхВзносов
	|ГДЕ
	|	ДанныеНачисленныхУплаченныхВзносов.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Страховая.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСтраховая,
	|	ЕСТЬNULL(Страховая.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоПериодаСтраховая,
	|	ЕСТЬNULL(Страховая.Начислено, 0) КАК НачисленоСтраховая,
	|	ЕСТЬNULL(Страховая.Уплачено, 0) КАК УплаченоСтраховая,
	|	ЕСТЬNULL(Страховая.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецПериодаСтраховая,
	|	ВЫБОР
	|		КОГДА Накопительная.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьНакопительная,
	|	ЕСТЬNULL(Накопительная.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоПериодаНакопительная,
	|	ЕСТЬNULL(Накопительная.Начислено, 0) КАК НачисленоНакопительная,
	|	ЕСТЬNULL(Накопительная.Уплачено, 0) КАК УплаченоНакопительная,
	|	ЕСТЬNULL(Накопительная.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецПериодаНакопительная,
	|	ВЫБОР
	|		КОГДА ТарифСВ.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТарифСВ,
	|	ЕСТЬNULL(ТарифСВ.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоПериодаТарифСВ,
	|	ЕСТЬNULL(ТарифСВ.Начислено, 0) КАК НачисленоТарифСВ,
	|	ЕСТЬNULL(ТарифСВ.Уплачено, 0) КАК УплаченоТарифСВ,
	|	ЕСТЬNULL(ТарифСВ.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецПериодаТарифСВ
	|ИЗ
	|	ВТСписокДокументов КАК СписокДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК Страховая
	|		ПО СписокДокументов.Ссылка = Страховая.Ссылка
	|			И (Страховая.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.НаСтраховуюПенсию))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК Накопительная
	|		ПО СписокДокументов.Ссылка = Накопительная.Ссылка
	|			И (Накопительная.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.НаНакопительнуюПенсию))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК ТарифСВ
	|		ПО СписокДокументов.Ссылка = ТарифСВ.Ссылка
	|			И (ТарифСВ.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.ПоТарифуСтраховыхВзносов))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Если ИмяДокумента = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" Тогда 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	NULL КАК Ссылка,
		|	NULL КАК ЕстьСтраховая,
		|	NULL КАК ЗадолженностьНаНачалоПериодаСтраховая,
		|	NULL КАК НачисленоСтраховая,
		|	NULL КАК УплаченоСтраховая,
		|	NULL КАК ЗадолженностьНаКонецПериодаСтраховая,
		|	NULL КАК ЕстьНакопительная,
		|	NULL КАК ЗадолженностьНаНачалоПериодаНакопительная,
		|	NULL КАК НачисленоНакопительная,
		|	NULL КАК УплаченоНакопительная,
		|	NULL КАК ЗадолженностьНаКонецПериодаНакопительная,
		|	NULL КАК ЕстьТарифСВ,
		|	NULL КАК ЗадолженностьНаНачалоПериодаТарифСВ,
		|	NULL КАК НачисленоТарифСВ,
		|	NULL КАК УплаченоТарифСВ,
		|	NULL КАК ЗадолженностьНаКонецПериодаТарифСВ
		|ГДЕ
		|	ЛОЖЬ";
	ИначеЕсли ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(МассивСсылок, ИмяДокумента= "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР") Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УплаченныеВзносыРасшифровка.Ссылка КАК Ссылка,
	|	УплаченныеВзносыРасшифровка.Год КАК Год,
	|	УплаченныеВзносыРасшифровка.Год КАК УплатаВзносовГод,
	|	УплаченныеВзносыРасшифровка.НаСтраховуюПенсию,
	|	УплаченныеВзносыРасшифровка.НаНакопительнуюПенсию,
	|	УплаченныеВзносыРасшифровка.ПоТарифуСтраховыхВзносов
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.УплаченныеВзносыРасшифровка КАК УплаченныеВзносыРасшифровка
	|ГДЕ
	|	УплаченныеВзносыРасшифровка.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	УплаченныеВзносыРасшифровка.Год";
	
	Если ИмяДокумента = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" Тогда 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	NULL КАК Ссылка,
		|	NULL КАК Год,
		|	NULL КАК УплатаВзносовГод,
		|	NULL КАК НаСтраховуюПенсию,
		|	NULL КАК НаНакопительнуюПенсию,
		|	NULL КАК ПоТарифуСтраховыхВзносов
		|ГДЕ
		|	ЛОЖЬ";
	ИначеЕсли ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция КодОтчетногоПериода(Период) Экспорт
	
	Если Период >= '20170101' Тогда
		Возврат 0;
	ИначеЕсли Период >= '20140101' Тогда
		Если Месяц(Период) <= 3 Тогда 
			Возврат 3;
		ИначеЕсли Месяц(Период) <= 6 Тогда 
			Возврат 6;
		ИначеЕсли Месяц(Период) <= 9 Тогда 
			Возврат 9;
		Иначе 
			Возврат 0;
		КонецЕсли;
	ИначеЕсли Период >= '20110101' Тогда
		Если Месяц(Период) <= 3 Тогда 
			Возврат 1;
		ИначеЕсли Месяц(Период) <= 6 Тогда 
			Возврат 2;
		ИначеЕсли Месяц(Период) <= 9 Тогда 
			Возврат 3;
		Иначе 
			Возврат 4;
		КонецЕсли;
	ИначеЕсли Период >= '20100101' Тогда
		Если  Месяц(Период) <= 6 Тогда
			Возврат 1; 
		Иначе
			Возврат 2;
		КонецЕсли;
	ИначеЕсли Период >= '20020101' Тогда
		Возврат 0;
	ИначеЕсли Период >= '20010101' Тогда
		Если Месяц(Период) <= 3 Тогда 
			Возврат 5;
		ИначеЕсли Месяц(Период) <= 6 Тогда 
			Возврат 6;
		ИначеЕсли Месяц(Период) <= 9 Тогда 
			Возврат 7;
		Иначе 
			Возврат 8;
		КонецЕсли;
	ИначеЕсли Период >= '19970101' Тогда
		Если  Месяц(Период) <= 6 Тогда
			Возврат 2; 
		Иначе
			Возврат 4;
		КонецЕсли;
	ИначеЕсли Период = '19960101' Тогда 
		Возврат 3;
	Иначе 
		Возврат 4;
	КонецЕсли;
	
КонецФункции

