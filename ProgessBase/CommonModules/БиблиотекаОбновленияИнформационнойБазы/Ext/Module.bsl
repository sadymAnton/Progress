// Идентификатор библиотеки - "УПП"

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ БСП

// Возвращает номер версии Библиотеки УПП
//
Функция ВерсияБиблиотеки()
	
	Возврат "1.3.43.1";
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки
//
// Возвращаемое значение:
//   Структура - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
Функция ОбработчикиОбновления()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Первый запуск
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.1.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ПервыйЗапуск";
	
	// При любом обновлении
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "*";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОтключитьВнешнийМодульДокументооборотаСФНС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "*";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегламентированнуюОтчетность";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "*";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ЗаполнитьСтавкуРефинансированияЦБ";
	
	// 1.3.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.15.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ИзменитьФорматХраненияСреднегоОтклоненияСЛУ";
	Обработчик.Опциональный = Истина;
	
	// 1.3.16
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.16.2";
	Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнитьКППвДокументахРегламентированныйОтчет";
	Обработчик.Опциональный = Истина;
	
	// 1.3.17
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.17.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.17.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета99_02_4";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.17.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбработатьИзмененияСчета96БУиНУ";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.17.1";
	Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазы.ОтработатьИзмененияВСтруктуреСправочникаНалоговыеОрганы";
	Обработчик.Опциональный = Истина;
	
	// 1.3.20
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.20.1";
	Обработчик.Процедура    = "Справочники.РасходыБудущихПериодов.УстановитьВидАктиваДляРБП";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.20.1";
	Обработчик.Процедура    = "РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ЗаполнитьВидИмущества";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.20.1";
	Обработчик.Процедура    = "РегистрыСведений.РегистрацияТранспортныхСредств.ЗаполнитьКодыЭкологическихКлассов";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.20.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляКорректировочныхСубсчетов";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.20.1";
	Обработчик.Процедура    = "УчетНДС.ОбработатьКорректировочныеСчетаФактуры";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.20.1";
	Обработчик.Процедура    = "УчетНДС.УстановитьВидСчетаФактурыПолученного";
	Обработчик.Опциональный = Истина;
	
	// 1.3.21
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.21.1";
	Обработчик.Процедура    = "Документы.ПринятиеКУчетуНМА.ЗаполнитьСпособПризнанияНИОКР";
	Обработчик.Опциональный = Истина;
    
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.21.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета76_01_9";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.21.1";
	Обработчик.Процедура    = "ПолучениеФайловИзИнтернета.ОбновлениеХранимыхНастроекПрокси";
	Обработчик.Опциональный = Истина;
	
	// 1.3.22
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.22.1";
	Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнениеРеквизитовУчетныхЗаписейПриОбновлении";
	Обработчик.Опциональный = Истина;
	
	// 1.3.23
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета08_11И08_12";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.23.1";
	Обработчик.Процедура    = "УчетНДС.УстановитьДатуПримененияПостановления1137";

	// 1.3.24
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.24.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета69_06";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.24.1";
	Обработчик.Процедура    = "УчетНДС.ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах";
	Обработчик.Опциональный = Истина;
	
	// 1.3.26
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.26.1";
	Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнениеРеквизитовУчетныхЗаписейПриОбновлении";
	Обработчик.Опциональный = Истина;

	// 1.3.27
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.27.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета63";
	Обработчик.Опциональный = Истина;

	// 1.3.27
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.27.4";
	Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнитьПредопределенныеВидыОтправляемыхДокументов";
	Обработчик.Опциональный = Ложь;
	
	// 1.3.27
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.27.4";
	Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаменитьСсылкиНаРегламентированныеОтчеты";
	Обработчик.Опциональный = Истина;
	
	// 1.3.33
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовыхСубчетов69";
	Обработчик.Опциональный = Истина;
	
	// 1.3.33
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.1";
	Обработчик.Процедура    = "КонтролируемыеСделки.ЗаполнитьГраницыКонтролируемости";
	Обработчик.Опциональный = Ложь;
	
	// 1.3.33
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.1";
	Обработчик.Процедура    = "РегламентированнаяОтчетность.ОбновитьДокументыРеализацииПолномочийНалоговыхОрганов";
	Обработчик.Опциональный = Ложь;
	
	// 1.3.33
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.33.1";
	Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнитьНовыеПоляОтправкиФСС";
	Обработчик.Опциональный = Ложь;
	
	// 1.3.34
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.34.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета62_ОС";
	Обработчик.Опциональный = Ложь;
	
	// 1.3.37
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.37.1";
	Обработчик.Процедура    = "ПроцедурыОбменаССайтом.ВыполнитьОбновлениеНастроекОбменаССайтом";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.40.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.40.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбработатьЖурналУчетаСчетовФактур";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.40.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.40.1";
	Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбработатьКорректировочныеСчетаФактурыФЗ39";
	Обработчик.Опциональный = Истина;
	
	// Версия 1.3.41.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.3.41.2";
	Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаменитьСсылкиУдаляемыхЭлементовВидыОтправляемыхДокументов";
	Обработчик.Опциональный = Истина;

	Возврат Обработчики;
	
КонецФункции

// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления(
		"УПП",
		ВерсияБиблиотеки(),
		ОбработчикиОбновления());
		
	// Обновление версии библиотеки ЗУП выполняем после обновления версии библиотеки УПП
	ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ВыполнитьОбновлениеИнформационнойБазы();
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// ПЕРВЫЙ ЗАПУСК

Процедура ПервыйЗапуск() Экспорт
	
	Если ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел()) Тогда
		// Первоначальное заполнение делаем только в главном узле.
		// Информация о версиях подсистем не мигрирует в составе РИБ
		Возврат;
	КонецЕсли;
	
	ДатаНачалаВводаДанных = '19800101';
	
	// ОСНОВНЫЕ КЛАССИФИКАТОРЫ
	
	// Валюты
	ВалютаРегламентированногоУчета = 
	НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	НайтиСоздатьВалюту("840", "USD", "Доллар США", "доллар, доллара, долларов, м, цент, цента, центов, м, 2");
	НайтиСоздатьВалюту("978", "EUR", "Евро"      , "евро, евро, евро, м, цент, цента, центов, м, 2");
	
	Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);
	Константы.ВалютаУправленческогоУчета.Установить(ВалютаРегламентированногоУчета);
	
	Если Метаданные.Константы.Найти("ВалютаМеждународногоУчета") <> Неопределено Тогда
		Константы.ВалютаМеждународногоУчета.Установить(ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	// Единицы измерения
	НайтиСоздатьЕдиницу("796", "шт", "Штука");
	ЕдиницаИзмеренияВеса = НайтиСоздатьЕдиницу("166", "кг", "Килограмм");
	
	Константы.ЕдиницаИзмеренияВеса.Установить(ЕдиницаИзмеренияВеса);
	
	// Контактная информация
	ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ЗаполнитьСправочникВидыКонтактнойИнформации();
	
	НачальноеЗаполениеСправочникаСобытияОС();

	// НАСТРОЙКА УЧЕТА
	
	// Бухгалтерский и налоговый учет
	УстановитьПараметрыСчетовБУиНУ();
	УстановитьСуммовойУчетНаСкладах();
	ЗаполнитьСоответствиеСчетовБУиНУ(ДатаНачалаВводаДанных);
	ЗаполнитьРегистрКонтрагентыОрганизаций();
	ЗаполнитьРегистрСчетовЕНВД();
	ЗаполнитьСправочникПрочиеДоходыИРасходы();
	УстановитьСубконтоНа44Счете();
	ЗаполнитьКодыБыстрогоВыбораПлановСчетов();
	Константы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Установить('20100101');
	Константы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Установить('20090609');
	// Установка начисления амортизации НМА способом уменьшаемого остатка в 2008 г.
	// исходя из остаточной стоимости на начало отчетного года.
	Константы.ПрименятьВ2008ГодуПравилаПБУ142000.Установить(Истина);
	
	НастроитьСчетаУчетаНоменклатуры();

	// Установка новой ставки налога на прибыль
	УстановитьНовыеСтавкиНалогаНаПрибыль();
	
	// Учетная политика упр. учета
	НаборУчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	НаборУчетнаяПолитика.ЗаполнитьПоУмолчанию(ДатаНачалаВводаДанных);
	НаборУчетнаяПолитика.Записать();
	
	Если Метаданные.Константы.Найти("ИспользоватьТолькоСборочныеСпецификации") <> Неопределено Тогда
		Константы.ИспользоватьТолькоСборочныеСпецификации.Установить(Ложь);
	КонецЕсли;
	
	// Учет затрат
	// Установим в качестве основного режима - расширенную аналитику
	Константы.ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат.Установить(Истина);
	Константы.ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Установить(ДатаНачалаВводаДанных);
	Константы.РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Установить(Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	РасширеннаяАналитикаУчета.ЗаполнитьНастройкиАналитикиПоШаблону(Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	// Установка настроек расчета себестоимости по умолчанию
	Константы.ГраницаПогрешностиСЛУ.Установить(1);
	Константы.МаксимальноеКоличествоИтерацийСЛУ.Установить(50);
	Константы.СреднееОтклонениеСЛУ.Установить(6); // 10^-6
	
	ОбновитьСправочникСтатьиЗатрат();
	
	Константы.СтратегияСписанияПартийТоваровПоСтатусам.Установить(Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные);
	Константы.ОпределениеВремениПроведенияПлатежногоДокумента.Установить(Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента);
	
	// Бизнес-процесс Закрытие месяца
	
	ЗаполнитьРегистрДокументыРегламентныхОпераций();
	ЗаполнитьРегистрОтчетыРегламентныхОпераций();
	
	// НАСТРОЙКА ПРОГРАММЫ
	
	ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();
	
	ПроцедурыКонтроляОстатков.УстановитьИспользованиеРегистраСвободныеОстатки(Истина, '1980-01-01', Ложь);
	
	Константы.ИспользованиеВстроенногоПочтовогоКлиента.Установить(Истина);
	Константы.ИспользоватьВнутренниеЗаказы.Установить(Истина);
	Константы.РазрешитьВыводитьСообщенияВПанельКомментариев.Установить(Истина);
	Константы.ИнтервалПроверкиНапоминанийВСекундах.Установить(60);
	УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат();
	
	// Торговое оборудование
	ЗаполнитьТипыОплатДляВидовОплатЧекаККМ();
	ЗаполнитьСправочникВидыОплатЧекаККМ();
	Константы.ПрефиксВесовогоТовара.Установить("1");
	Константы.ПрефиксШтучногоТовара.Установить("0");
	Константы.ДлинаКодаВесовогоТовара.Установить(5);
	Константы.ПорядокПрисвоенияPLU.Установить(Перечисления.ПорядокПрисвоенияPLU.ПоПорядку);
	
	// БАНКИ
	
	ЗагрузитьКлассификаторБанков();
	
	// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ
	
	ЗаполнитьСписокРегламентированныхОтчетов();
	
	// заполнение реквизитов предопределенных элементов справочника ВидыОтправляемыхДокументов
	РегламентированнаяОтчетность.ЗаполнитьПредопределенныеВидыОтправляемыхДокументов();
	
	ВключитьМеханизмОнлайнСервисовРО();
	
КонецПроцедуры

// ОСНОВНЫЕ КЛАССИФИКАТОРЫ

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском)

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		СправочникОбъект.Записать();

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		МодульВалютногоУчета.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное)

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		СправочникОбъект.Записать();

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Процедура заполняет константу шаблонов телефонов.
// 
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // укЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()

// процедура производит обновление элемента справочника виды контактной информации
Процедура УстановитьПараметрыВидаКонтактнойИнформации(СсылкаВидыКонтактнойИнформации, Знач Тип, Знач ВидОбъектаКонтактнойИнформации)
	
	Если НЕ ЗначениеЗаполнено(СсылкаВидыКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектВидКонтактнойИнформации = СсылкаВидыКонтактнойИнформации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Тип;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;
	
		ОбъектВидКонтактнойИнформации.Записать();
		
	Исключение
		ОбщегоНазначения.Сообщение("Ошибка при записи реквизитов элемента " + ОбъектВидКонтактнойИнформации.Наименование + " справочника ""Виды контактной информации""");
	КонецПопытки;

	
КонецПроцедуры

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = Истина
	|	И (ВидыКонтактнойИнформации.Тип = &ПустойТип 
	|		ИЛИ ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ПустойВидОбъектаКонтактнойИнформации)
	|";
	
	Запрос.УстановитьПараметр("ПустойТип"                           , Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
									
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
					
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.EmailОрганизации Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.EmailФизЛица Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

// КЛАССИФИКАТОР БАНКОВ

Процедура ЗагрузитьКлассификаторБанков()
	
	СоответствиеТипГорода = новый соответствие;
	СоответствиеТипГорода.Вставить("1","Г.");  // ГОРОД
	СоответствиеТипГорода.Вставить("2","П.");  // ПОСЕЛОК
	СоответствиеТипГорода.Вставить("3","С.");  // СЕЛО
	СоответствиеТипГорода.Вставить("4","ПГТ.");// ПОСЕЛОК ГОРОДСКОГО ТИПА
	СоответствиеТипГорода.Вставить("5","СТ-ЦА.");// СТАНИЦА
	СоответствиеТипГорода.Вставить("6","АУЛ."); // АУЛ
	СоответствиеТипГорода.Вставить("7","РП.");   //  РАБОЧИЙ ПОСЕЛОК
	СоответствиеТипГорода.Вставить("0","");  // 
	СоответствиеТипГорода.Вставить("","");  // 
	
	Разделитель = Символы.Таб;
	СпрБанки = Справочники.Банки;
	СпРегионов = Новый СписокЗначений;

	мТекстГруппы = Справочники.Банки.ПолучитьМакет("Группы");
	КолСтрок = мТекстГруппы.КоличествоСтрок();

	//Составим список регионов
	Для к = 1 по КолСтрок Цикл
		Стр = мТекстГруппы.ПолучитьСтроку(к);

		Если (Лев(Стр,2) = "//") или (ПустаяСтрока(Стр)) Тогда
			Продолжить;
		КонецЕсли;
		НомПоля = 1;
		Пока (ПустаяСтрока(Стр) = 0) Цикл	//	пока не обработали всю шапку
	        Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда	//	не нашли
				НазваниеОдногоПоля = Стр;
				Стр = "";
			Иначе
				//	вырезаем очередное поля
				НазваниеОдногоПоля = Лев(Стр,Поз-1);
				Стр = Прав(Стр,СтрДлина(Стр)-Поз);
			КонецЕсли;

			НазваниеОдногоПоля = СокрЛП(НазваниеОдногоПоля);
			//	добавляем входное поле в таблицу
			Если НомПоля = 1 Тогда
				Симвл1 = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 2 Тогда
				Симвл2 = СокрЛП(НазваниеОдногоПоля);
			КонецЕсли; 

			НомПоля = НомПоля + 1;
			Если НомПоля > 2 Тогда 
				Прервать;  // Завершить просмотр строки, т.к. обработаны все необходимые поля, но есть еще что-то.
			КонецЕсли; 
		КонецЦикла;	
		
		СпРегионов.Добавить(Симвл1,Симвл2);
	КонецЦикла;	

	мТекстКлассификатора = Справочники.Банки.ПолучитьМакет("Классификатор");
	КолСтрок = мТекстКлассификатора.КоличествоСтрок();
	Коэф = 100/КолСтрок; 
	Процент=0;
	
	//Читаем реквизиты банка и сохраняем в справочник
	Для к = 1 по КолСтрок Цикл
		Стр = мТекстКлассификатора.ПолучитьСтроку(к);
		//1
		Поз = Найти(Стр,Разделитель);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//2
		Поз = Найти(Стр,Разделитель);
		ЗнПункт =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//3
		Поз = Найти(Стр,Разделитель);
		ЗнТипПункта = СоответствиеТипГорода.Получить(Лев(Стр,Поз-1));
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//4
		Поз = Найти(Стр,Разделитель);
		ЗнНаименование =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//5
		Поз = Найти(Стр,Разделитель);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//6
		Поз = Найти(Стр,Разделитель);
		ЗнБИК =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//7
		Поз = Найти(Стр,Разделитель);
		ЗнКорСчет =Стр;
		
		КодРег          = Сред(ЗнБИК,3,2);
		НайденныйРегион = СпРегионов.НайтиПоЗначению(КодРег);
		Если НайденныйРегион = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЗагрузитьКлассификаторБанков_Запись(СпрБанки,ЗнНаименование,ЗнБИК,ЗнКорСчет,ЗнТипПункта+" "+ЗнПункт,НайденныйРегион.Значение,НайденныйРегион.Представление);
	КонецЦикла;	
	
	ОбщегоНазначения.Сообщение("Загружен классификатор банков", Перечисления.ВидыСообщений.Информация);

КонецПроцедуры // ЗагрузитьКлассификаторБанков()

//Процедура добавляет новую запись в справочник Банки
Процедура ЗагрузитьКлассификаторБанков_Запись(СпрБанки,Наименование,БИК,КоррСчет,Город,ТекОКАТО,ТекРегион)
	
	РодительЭл = СпрБанки.НайтиПоКоду(ТекОКАТО);
	Если РодительЭл = СпрБанки.ПустаяСсылка() Тогда
		НоваяГр              = СпрБанки.СоздатьГруппу();
		НоваяГр.Код          = ТекОКАТО;
		НоваяГр.Наименование = ТекРегион;
		НоваяГр.Записать();
		РодительЭл = НоваяГр.Ссылка;
	КонецЕсли;	
	НовыйЭл = СпрБанки.СоздатьЭлемент();
	НовыйЭл.Родитель     = РодительЭл;
	НовыйЭл.Код          = БИК;
	НовыйЭл.Наименование = Наименование;
	НовыйЭл.КоррСчет     = КоррСчет;
	НовыйЭл.Город        = Город;
	НовыйЭл.Адрес        = ", ";
	НовыйЭл.Телефоны     = ""; 		
	НовыйЭл.ОбменДанными.Загрузка = истина;
	НовыйЭл.Записать();
	
КонецПроцедуры // ЗагрузитьКлассификаторБанков_Запись()

// НАСТРОЙКА ПЛАНА СЧЕТОВ

// Заполнение кодов быстрого выбора в планах счетов
//Запускается при обновлении на 1.2.15 и при заполнении пустой ИБ
Процедура ЗаполнитьКодыБыстрогоВыбораПлановСчетов(Перезаполнить = Ложь)
	
	Для Каждого ЭлементПланСчетов ИЗ ПланыСчетов Цикл
		Попытка
			ПланСчетов = ЭлементПланСчетов.Выбрать();
			Пока ПланСчетов.Следующий() Цикл
				
				Объект = ПланСчетов.ПолучитьОбъект();
				
				Если Перезаполнить ИЛИ НЕ ЗначениеЗаполнено(Объект.КодБыстрогоВыбора) Тогда
					Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
				КонецЕсли;
				
				Объект.Записать();
				
			КонецЦикла; 
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//Процедура добавляет субконто Подразделения на переданный счет
//Запускается при заполнении пустой ИБ
Процедура УстановитьСубконтоПодразделения(ИмяПланаСчетов, СчетОбъект)
	
	Если СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения, "ВидСубконто") = Неопределено Тогда
		НовыйВид = СчетОбъект.ВидыСубконто.Добавить();

		НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
		НовыйВид.Суммовой    = Истина;
		НовыйВид.ТолькоОбороты = Истина;

		Попытка
			СчетОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСубконтоПодразделения()

// Выполняет установку субконто "Подразделение" на субсчета 44 счета.
//Запускается при заполнении пустой ИБ
//
Процедура УстановитьСубконтоНа44Счете()
	
	УстановитьСубконтоПодразделения("Хозрасчетый", ПланыСчетов.Хозрасчетный.РасходыНаПродажу.ПолучитьОбъект());
	
	ПланСчетовВыборка = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Пока ПланСчетовВыборка.Следующий() Цикл
		СчетОбъект = ПланСчетовВыборка.ПолучитьОбъект();
		УстановитьСубконтоПодразделения("Хозрасчетый", СчетОбъект)
	КонецЦикла;
	
	УстановитьСубконтоПодразделения("Налоговый", ПланыСчетов.Налоговый.РасходыНаПродажу.ПолучитьОбъект());
	
	ПланСчетовВыборка = ПланыСчетов.Налоговый.ВыбратьИерархически(ПланыСчетов.Налоговый.РасходыНаПродажу);
	Пока ПланСчетовВыборка.Следующий() Цикл
		СчетОбъект = ПланСчетовВыборка.ПолучитьОбъект();
		УстановитьСубконтоПодразделения("Налоговый", СчетОбъект)
	КонецЦикла;
	
КонецПроцедуры // УстановитьСубконтоНа44Счете()

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам 
//
Процедура УстановитьПараметрыСчетовБУиНУ()

	НачатьТранзакцию();
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ВыборкаСчетов = ПланыСчетов.Налоговый.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Устанавливает субконто "Склады" у указанного счета.
//
Процедура УстановитьСубконтоНаСчете(ИмяПланаСчетов, ВидСубконто, ИмяСчета, ЕстьКоличество = Истина, ЕстьСуммовойУчет = Ложь)

	Попытка

		Счет   = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Объект = Счет.ПолучитьОбъект();

		Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто") = Неопределено Тогда
			НовыйВид = Объект.ВидыСубконто.Добавить();

			НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;
			НовыйВид.Суммовой    = ЕстьСуммовойУчет;

			Если ЕстьКоличество Тогда
				НовыйВид.Количественный = Истина;
			КонецЕсли;

			Объект.Записать();
		КонецЕсли;

	Исключение

	КонецПопытки;

КонецПроцедуры // УстановитьСубконтоНаСчете()

// Выполняет заполнение регистра сведений "УчетнаяПолитикаОбщаяДляРегламентированногоУчета"
// и устанавливает субконто "Склады" в счетах.
Процедура УстановитьСуммовойУчетНаСкладах()

	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ОборудованиеКУстановке");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПриобретениеОбъектовОсновныхСредств");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Материалы");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СырьеИМатериалы");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПокупныеПолуфабрикатыИКомплектующие");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Топливо");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Тара");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ЗапасныеЧасти");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПрочиеМатериалы");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СтроительныеМатериалы");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ИнвентарьИХозяйственныеПринадлежности");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СпецоснасткаИСпецодеждаНаСкладе");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Полуфабрикаты");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Товары");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТоварыНаСкладах");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТоварыВРозничнойТорговле");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТараПодТоваромИПорожняя");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПокупныеИзделия");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ГотоваяПродукция");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТМЦпринятыеНаОтветственноеХранение");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "МатериалыПринятыеВПереработку_");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "МатериалыПринятыеВПереработку");
	УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "КорректировкаТоваровПрошлогоПериода");

	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ОборудованиеКУстановке", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПриобретениеОбъектовОсновныхСредств", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Материалы", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СырьеИМатериалы", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПокупныеПолуфабрикатыИКомплектующие", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Топливо", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Тара", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ЗапасныеЧасти", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПрочиеМатериалы", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СтроительныеМатериалы", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ИнвентарьИХозяйственныеПринадлежности", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СпецоснасткаИСпецодеждаНаСкладе", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Полуфабрикаты", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Товары", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТоварыНаСкладах", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТоварыВРозничнойТорговле", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТараПодТоваромИПорожняя", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПокупныеИзделия", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ГотоваяПродукция", Ложь);
	УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "КорректировкаТоваровПрошлогоПериода", Ложь);

	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СырьеИМатериалы");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СырьеИОсновныеМатериалы");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "Топливо");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "Тара");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ЗапасныеЧасти");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ПрочиеМатериалы");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СтроительныеМатериалы");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ТоварыНаСкладе");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ТоварыВРознице");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ГотоваяПродукция");
	УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "КомплектующиеИПолуфабрикаты");

КонецПроцедуры // УправлениеСуммовымУчетомНаСкладах()

// Обрабатываем новый счет 99.02.4 ("Пересчет отложенных налоговых активов и обязательств")
// Устанавливает код быстрого выбора, для этого счета
// 
// Параметры: 
//
// 
Процедура УстановитьРеквизитыДляНовогоСубчета99_02_4() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 99.02.4, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	ЗаполнитьКодыБыстрогоВыбораПлановСчетов(Истина);
	
КонецПроцедуры

// Обрабатываем новые счета. Хозрасчетные - 19.09, 41.К, 76.К. Налоговый - 41.К 
// Устанавливает код быстрого выбора, для этих счетов
// 
// Параметры: 
//
// 
Процедура УстановитьРеквизитыДляКорректировочныхСубсчетов() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 19.09, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 41.К, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	ВестиПартионныйУчетПоСкладамРегл = Константы.ВестиПартионныйУчетПоСкладамРегл.Получить();
	УстановитьСубконтоНаСчете("Хозрасчетный", "ВидыСубконтоХозрасчетные", "КорректировкаТоваровПрошлогоПериода",, ВестиПартионныйУчетПоСкладамРегл);
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 76.К, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	СчетОбъект = ПланыСчетов.Налоговый.КорректировкаТоваровПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета налогового учета 41.К, рекомендуется установить самостоятельно");
	КонецПопытки;
	
	УстановитьСубконтоНаСчете("Налоговый", "ВидыСубконтоХозрасчетные", "КорректировкаТоваровПрошлогоПериода", Ложь, ВестиПартионныйУчетПоСкладамРегл);
	
	ЗаполнитьКодыБыстрогоВыбораПлановСчетов(Истина);
	
КонецПроцедуры

// Устанавливается код быстрого выбора для нового счета 76.01.9
//
Процедура УстановитьРеквизитыДляНовогоСубчета76_01_9 () Экспорт
    
    СчетОбъект = ПланыСчетов.Хозрасчетный. ПлатежиПоПрочимВидамСтрахования.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = "76019";
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 76.01.9, рекомендуется установить самостоятельно");
    КонецПопытки;
    Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьНовыеСоответствияСчетовБУиНУ("ДляСчета76_01_9");
    
КонецПроцедуры

// Устанавливается код быстрого выбора для нового счета 08.11 и 08.12
//
Процедура УстановитьРеквизитыДляНовогоСубчета08_11И08_12 () Экспорт
    
    СчетОбъект = ПланыСчетов.Хозрасчетный.НематериальныеПоисковыеАктивы.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = "0811";
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 08.11, рекомендуется установить самостоятельно");
	КонецПопытки;
	
    СчетОбъект = ПланыСчетов.Налоговый.НематериальныеПоисковыеАктивы.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = "0811";
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 08.11 налогового учета, рекомендуется установить самостоятельно");
	КонецПопытки;
	
    СчетОбъект = ПланыСчетов.Хозрасчетный.МатериальныеПоисковыеАктивы.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = "0812";
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 08.12, рекомендуется установить самостоятельно");
	КонецПопытки;
	
    СчетОбъект = ПланыСчетов.Налоговый.МатериальныеПоисковыеАктивы.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = "0812";
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 08.12 налогового учета, рекомендуется установить самостоятельно");
	КонецПопытки;
	
    Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьНовыеСоответствияСчетовБУиНУ("ДляСчетовПоисковыхАктивов");
    
КонецПроцедуры

// Устанавливается код быстрого выбора для нового счета 69.06 и его субсчетов
//
Процедура УстановитьРеквизитыДляНовогоСубчета69_06() Экспорт
	
	ЗаполнитьКодыБыстрогоВыбораПлановСчетов();
	
КонецПроцедуры

// Обрабатываем новый счет 63 ("Резервы по сомнительным долгам")
// Устанавливает код быстрого выбора, для этого счета
// 
// Параметры: 
//
// 
Процедура УстановитьРеквизитыДляНовогоСубчета63() Экспорт
	
	СчетОбъект = ПланыСчетов.Налоговый.РезервыПоСомнительнымДолгам.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "63";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета налогового учета 63, рекомендуется установить самостоятельно");
	КонецПопытки;
	
КонецПроцедуры

// Устанавливается код быстрого выбора для нового счета 69.06 и его субсчетов
//
Процедура УстановитьРеквизитыДляНовыхСубчетов69() Экспорт
	
	ЗаполнитьКодыБыстрогоВыбораПлановСчетов();
	Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьНовыеСоответствияСчетовБУиНУ("ДляСубсчетов69");
	
КонецПроцедуры

Процедура УстановитьРеквизитыДляНовогоСубчета62_ОС() Экспорт
	
    СчетОбъект = ПланыСчетов.Налоговый.ЗадолженностьПоРасчетамЗаНедвижимость.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = "62ОС";
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета налогового учета 62.ОС, рекомендуется установить самостоятельно");
    КонецПопытки;
	
КонецПроцедуры

// НАСТРОЙКИ УЧЕТА

// Заполняет регистр сведений СоответствиеСчетовБУиНУ 
//
Процедура ЗаполнитьСоответствиеСчетовБУиНУ(ТекущаяДата)
	ДокументУстановкаСоответствияСчетовБУиНУ = Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьДокумент();
	ДокументУстановкаСоответствияСчетовБУиНУ.Дата = ТекущаяДата;
	ДокументУстановкаСоответствияСчетовБУиНУ.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	ДокументУстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию();
	Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат;
	КонецПопытки;
	Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУ()

// Заполняет регистр сведений "КонтрагентыОрганизаций" связанный со счетами учета расчетов
//
Процедура ЗаполнитьРегистрКонтрагентыОрганизаций()

	ОбщегоНазначения.Сообщение("Выполняется начальное заполнение регистра сведений ""Контрагенты организаций""");
	
	НачатьТранзакцию();

	Набор  = РегистрыСведений.КонтрагентыОрганизаций.СоздатьНаборЗаписей();
	//Запись с пустым измерением ВидРасчетовПоДоговору после ввода обязательного признака
	// договора ВидыРасчетовПоДоговорам удалить.
	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка();
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ;

	Набор.Записать();
	ЗафиксироватьТранзакцию();
	


КонецПроцедуры //ЗаполнитьРегистрКонтрагентыОрганизаций()

// Заполняет регистры сведения бухгалтерии связанных со счетами учета по деятельности ЕНВД
//
Процедура ЗаполнитьРегистрСчетовЕНВД()
	
	Набор = РегистрыСведений.СчетаУчетаПоДеятельностиЕНВД.СоздатьНаборЗаписей();

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.БракВПроизводствеОблагаемоеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ВыручкаОблагаемаяЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.СебестоимостьПродажОблагаемаяЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасходыОблагаемыеЕНВД;
	
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасходыРаспределяемые;
	Запись.ПодлежитРаспределению = Истина;
	
	Набор.Записать();	
КонецПроцедуры

// Заполнение реквизитов справочника "Прочие доходы и расходы"
//
Процедура ЗаполнитьСправочникПрочиеДоходыИРасходы()
	
	ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы;
	
	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Ложь;
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы;
	СтатьяДоходовРаходов.Записать();

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.КурсовыеРазницы.ПолучитьОбъект();
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы;
	СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;
	СтатьяДоходовРаходов.Записать();
	
	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ.ПолучитьОбъект();
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ;
	СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;
	СтатьяДоходовРаходов.Записать();
	
	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	СтатьяДоходовРаходов.Записать();
	
    СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.СписаниеНДСНаРасходы.ПолучитьОбъект();
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	СтатьяДоходовРаходов.ПринятиеКналоговомуУчету = Истина;
	СтатьяДоходовРаходов.Записать();

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.СуммовыеРазницы.ПолучитьОбъект();
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;
	СтатьяДоходовРаходов.Записать();
	
КонецПроцедуры

// Установка реквизитов у предопределенных элементов 
// справочника "Статьи затрат" при создании пустой базы
Процедура ОбновитьСправочникСтатьиЗатрат()

	Справочник_Менеджер = Справочники.СтатьиЗатрат;

	ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходы.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника.ХарактерЗатрат) Тогда
		ЭлементСправочника.ХарактерЗатрат 	= Перечисления.ХарактерЗатрат.ИздержкиОбращения;
		ЭлементСправочника.ВидЗатрат 		= Перечисления.ВидыЗатрат.Прочие;
		ЭлементСправочника.ВидРасходовНУ 	= Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходыПрочие.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника.ХарактерЗатрат) Тогда
		ЭлементСправочника.ХарактерЗатрат 	= Перечисления.ХарактерЗатрат.Прочие;
		ЭлементСправочника.ВидЗатрат 		= Перечисления.ВидыЗатрат.Прочие;
		ЭлементСправочника.ВидРасходовНУ 	= Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	Справочник_Менеджер = Справочники.ПрочиеДоходыИРасходы;
	
	ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходы.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника.ВидПрочихДоходовИРасходов) Тогда
		ЭлементСправочника.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		ЭлементСправочника.ПринятиеКналоговомуУчету = Истина;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСправочникСтатьиЗатрат()

// Создает документ "УстановкаПараметровУчетаНоменклатуры", содержащий настройки связанные со счетами учета
//
Процедура НастроитьСчетаУчетаНоменклатуры()

 	ВидНоменклатурыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыТовар) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Товар";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыТовар = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыМатериал = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Материал", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыМатериал) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Материал";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыМатериал = НовыйЭлемент.Ссылка;
	КонецЕсли;

	ВидНоменклатурыПродукция = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыПродукция) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Продукция";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыПродукция = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыПолуфабрикат = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Полуфабрикат", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыПолуфабрикат) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Полуфабрикат";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыПолуфабрикат = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыУслуга = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыУслуга) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Услуга";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	// Установим параметры учета номенклатуры по умолчанию
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УстановкаПараметровУчетаНоменклатуры.Ссылка
	|ИЗ
	|	Документ.УстановкаПараметровУчетаНоменклатуры КАК УстановкаПараметровУчетаНоменклатуры
	|ГДЕ
	|	УстановкаПараметровУчетаНоменклатуры.Проведен");
	Если Запрос.Выполнить().Пустой() Тогда
		
		ДокументОбъект = Документы.УстановкаПараметровУчетаНоменклатуры.СоздатьДокумент();
		ДокументОбъект.Дата = НачалоМесяца('19800101');
		ТабличнаяЧастьСчетаУчета = ДокументОбъект.СчетаУчетаНоменклатуры;
		ТабличнаяЧастьПараметрыУчетаУслуг = ДокументОбъект.ПараметрыУчетаУслуг;
		
		// Любая номенклатура, организация
		Запись = ТабличнаяЧастьСчетаУчета.Добавить();
		Запись.Организация  = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();

		Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
		
		Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.ТоварыНаСкладах;
		Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
		Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;
		
		// Любая организация, вид номенклатуры = ТОВАР
		Запись = ТабличнаяЧастьСчетаУчета.Добавить();
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыТовар;

		Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
		
		Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.ТоварыНаСкладах;
		Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
		Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;
		
		// Любая организация, вид номенклатуры = МАТЕРИАЛ
		Запись = ТабличнаяЧастьСчетаУчета.Добавить();
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыМатериал;

		Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
		Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;

		Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.СырьеИМатериалы;
		Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг;
		Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейПрочегоИмущества;
		
		// Любая организация, вид номенклатуры = ПРОДУКЦИЯ
		Запись = ТабличнаяЧастьСчетаУчета.Добавить();
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыПродукция;

		Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
		Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;

		Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.ГотоваяПродукция;
		Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
		Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;
		
		// Любая организация, вид номенклатуры = ПОЛУФАБРИКАТ
		Запись = ТабличнаяЧастьСчетаУчета.Добавить();
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыПолуфабрикат;

		Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.Полуфабрикаты;
		Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
		
		Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.Полуфабрикаты;
		Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
		Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;
		
		// Любая организация, все виды номенклатуры для УСЛУГ
		Запись = ТабличнаяЧастьПараметрыУчетаУслуг.Добавить();
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = Неопределено;

		Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
		
		Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
		Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначения.Сообщение("Ошибка при записи документа ""Установка параметров учета номенклатуры""");
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры // НастроитьСчетаУчетаНоменклатуры

// БИЗНЕС-ПРОЦЕСС ЗАКРЫТИЕ МЕСЯЦА

// Заполнение регистра сведений ДокументыРегламентныхОпераций первоначальными значениями
Процедура ЗаполнитьРегистрДокументыРегламентныхОпераций()

	НаборЗаписей = РегистрыСведений.ДокументыРегламентныхОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	
	НаборЗаписей.ЗаполнитьРегистрПоУмолчанию();
	НаборЗаписей.Записать();

КонецПроцедуры

// Заполнение регистра сведений ОтчетыРегламентныхОпераций первоначальными значениями
Процедура ЗаполнитьРегистрОтчетыРегламентныхОпераций()

	НаборЗаписей = РегистрыСведений.ОтчетыРегламентныхОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	
	НаборЗаписей.ЗаполнитьРегистрПоУмолчанию();
	НаборЗаписей.Записать();

КонецПроцедуры

// ЗАПОЛНЕНИЕ ДРУГИХ СПРАВОЧНИКОВ

//Заполнение справочника "СобытияОС" первоначальными значениями
Процедура НачальноеЗаполениеСправочникаСобытияОС()
	 
	Попытка 
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		СпрСобытияОС.Наименование = "Принятие к учету";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию;
		СпрСобытияОС.Наименование = "Ввод в эксплуатацию";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание;
		СпрСобытияОС.Наименование = "Списание";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация;
		СпрСобытияОС.Наименование = "Модернизация";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача;
		СпрСобытияОС.Наименование = "Передача";
		СпрСобытияОС.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//заполнение реквизита ТипОплаты значением Наличные в справочнике ВидыОплатЧекаККМ
Процедура ЗаполнитьТипыОплатДляВидовОплатЧекаККМ()
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ВидыОплатЧекаККМ
	|ГДЕ ЭтоГруппа = ложь и ТипОплаты = &ПустаяСсылка";
	Запрос.УстановитьПараметр("ПустаяСсылка", Перечисления.ТипыОплатЧекаККМ.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		текОбъект = Выборка.ссылка.ПолучитьОбъект();
		текОбъект.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;
		текОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Заполнение реквизитов справочника "Виды оплат чека ККМ"
//
Процедура ЗаполнитьСправочникВидыОплатЧекаККМ()

	ОбъектВидОплатыЧекаККМ                    = Справочники.ВидыОплатЧекаККМ.Наличные.ПолучитьОбъект();
	ОбъектВидОплатыЧекаККМ.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;
	ОбъектВидОплатыЧекаККМ.Записать();

КонецПроцедуры // ЗаполнитьСправочникВидыОплатЧекаККМ()

// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ

Процедура ВключитьМеханизмОнлайнСервисовРО()
	
	Константы.ИспользоватьМеханизмОнлайнСервисовРО.Установить(Истина);
	
КонецПроцедуры

// АКТУАЛИЗАЦИЯ ПЕРИОДИЧЕСКИХ ЗНАЧЕНИЙ

Процедура ЗаполнитьСтавкуРефинансированияЦБ() Экспорт
	
	// Загрузим в регистр сведений ставки, установленные ЦБ
	
	НаборЗаписей = РегистрыСведений.СтавкаРефинансированияЦБ.СоздатьНаборЗаписей();
	НаборЗаписей.ЗагрузитьСтавкиРефинансированияУстановленныеЦБ();
	
КонецПроцедуры

Функция УстановитьНовыеСтавкиНалогаНаПрибыль()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетнаяПолитикаОрганизацийСрезПоследних.Организация,
	               |	СтавкиНалогаНаПрибыльСрезПоследних.СтавкаФБ
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата, СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаПрибыль.СрезПоследних(&Дата, ) КАК СтавкиНалогаНаПрибыльСрезПоследних
	               |		ПО УчетнаяПолитикаОрганизацийСрезПоследних.Организация = СтавкиНалогаНаПрибыльСрезПоследних.Организация";
	 
	 
	 Запрос.УстановитьПараметр("Дата", '20090101');
	 Результат = Запрос.Выполнить().Выгрузить();
	 НаборЗаписей = РегистрыСведений.СтавкиНалогаНаПрибыль.СоздатьНаборЗаписей();
	 НаборЗаписей.Прочитать();
	 
	 
	 Для Каждого Выборка Из Результат Цикл
		 Если Не Выборка.СтавкаФБ = NULL И Не Выборка.СтавкаФБ = 6.5 Тогда
			 Продолжить;
		 КонецЕсли;
		 НоваяЗапись = НаборЗаписей.Добавить();
		 НоваяЗапись.Организация = Выборка.Организация;
		 НоваяЗапись.Период = '20090101';
		 НоваяЗапись.СтавкаФБ = 2;
		 НоваяЗапись.СтавкаСубъектРФ = 18;
		 НоваяЗапись.СтавкаМестный = 0;
		 КонецЦикла;
 
		 Попытка
			 НаборЗаписей.Записать();
		 Исключение
			 ОбщегоНазначения.СообщитьОбОшибке("Не возможно установить ставки налога на прибыль на 1 января 2009 года");
		 КонецПопытки;
	
КонецФункции

// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//
//  Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы. Предполагается, что перед запуском процедуры справочник
// РегламентированныеОтчеты - пустой.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина)

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем списко отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()

Процедура ОбновитьРегламентированнуюОтчетность() Экспорт
	
	ОтключитьВнешнийМодульДокументооборотаСФНС();
	
	ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
	
	// заполнение реквизитов предопределенных элементов справочника ВидыОтправляемыхДокументов
	РегламентированнаяОтчетность.ЗаполнитьПредопределенныеВидыОтправляемыхДокументов();
	
КонецПроцедуры

Процедура ОтключитьВнешнийМодульДокументооборотаСФНС() Экспорт
	
	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Установить(Ложь);
	
КонецПроцедуры

// НАСТРОЙКИ ПРОГРАММЫ

// Процедура задает по умолчанию максимальное количество записей в наборах регистров расширенной аналитики
Процедура УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат() Экспорт
	Константы.РазмерНабораПриЗаписиРегистровУчетаЗатрат.Установить(1000);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ К УДАЛЕНИЮ ОБЪЕКТОВ МЕТАДАННЫХ

Процедура УстранитьПлохиеСсылки(ТипМетаданных, ИмяОбъекта) Экспорт
	
	// ПОИСК УДАЛЯЕМЫХ ЗАПИСЕЙ
	УдаляемыеЗаписи = НайтиУдаляемыеЗаписи(ТипМетаданных, ИмяОбъекта);
	
	// ПОИСК ССЫЛОК НА УДАЛЯЕМЫЕ ОБЪЕКТЫ
	ТаблицаСсылок = НайтиПоСсылкам(УдаляемыеЗаписи);
	Если ТаблицаСсылок.Количество() = 0 Тогда
		// Нет ссылок на удаляемые объекты
		Возврат;
	КонецЕсли;
	
	// ПОИСК "ПЛОХИХ" ССЫЛОК
	ЗаписиКУдалению = ОтобратьЗаписиРегистровСведений(ТаблицаСсылок);
	Если ЗаписиКУдалению.Количество() = 0 Тогда
		// Нет "плохих" ссылок
		Возврат;
	КонецЕсли;
	
	// УДАЛЕНИЕ ПЛОХИХ ССЫЛОК
	ОписаниеРезультатаУдаления = Новый Соответствие;
	ВсеЗаписиУдалены = УдалитьЗаписиНезависимыхРегистровСведений(ЗаписиКУдалению, ОписаниеРезультатаУдаления);
	
	// Получим представление объекта для выдачи сообщения
	ПредставлениеОбъекта  = "";
	Если ТипМетаданных = "Справочник" Тогда
		ПредставлениеОбъекта = НСтр("ru = 'справочник '")   + Метаданные.Справочники[ИмяОбъекта].Представление();
	ИначеЕсли ТипМетаданных = "Документ" Тогда
		ПредставлениеОбъекта = НСтр("ru = 'документ '")     + Метаданные.Документы[ИмяОбъекта].Представление();
	ИначеЕсли ТипМетаданных = "Перечисление" Тогда
		ПредставлениеОбъекта = НСтр("ru = 'перечисление '") + Метаданные.Перечисления[ИмяОбъекта].Представление();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПредставлениеОбъекта) Тогда
		Если ВсеЗаписиУдалены Тогда
			// Сообщим об успешном выполнении
			ТекстСообщения = НСтр("ru = 'Из независимых регистров сведений удалены все записи, которые ссылались на %ПредставлениеОбъекта'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОбъекта", ПредставлениеОбъекта);
			ОбщегоНазначения.Сообщение(ТекстСообщения);
		Иначе
			// Сообщим об ошибке
			ТекстСообщения = НСтр("ru = 'Из независимых регистров сведений не удалось удалить все записи, которые ссылаются на %ПредставлениеОбъекта'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОбъекта", ПредставлениеОбъекта);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// СООБЩИМ ПОДРОБНЫЙ РЕЗУЛЬТАТ УДАЛЕНИЯ
	Для Каждого ЭлементРезультатаУдаления Из ОписаниеРезультатаУдаления Цикл
		
		КоличествоЗаписей = ЭлементРезультатаУдаления.Значение;
		СтрокаУдалено     = ОбщегоНазначения.ФормаМножественногоЧисла(НСтр("ru = 'удалена'"), НСтр("ru = 'удалено'"), НСтр("ru = 'удалено'"), КоличествоЗаписей);
		СтрокаЗаписей     = ОбщегоНазначения.ФормаМножественногоЧисла(НСтр("ru = 'запись'"),  НСтр("ru = 'записи'"),  НСтр("ru = 'записей'"), КоличествоЗаписей);
		ТекстСообщения    = НСтр("ru = 'В регистре %ИмяРегистра %СтрокаУдалено %КоличествоЗаписей %СтрокаЗаписей'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра",       ЭлементРезультатаУдаления.Ключ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаУдалено",     СтрокаУдалено);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоЗаписей", КоличествоЗаписей);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаЗаписей",     СтрокаЗаписей);
		
		ОбщегоНазначения.Сообщение(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает массив всех ссылок на указанный объект метаданных (подежащий удалению)
// 
// Параметры:
//  ТипМетаданных - Справочник, Документ, Перечисление
//  ИмяОбъекта    - имя объекта метаданных
//
// Возвращаемое значение: Массив ссылок, включая пустую ссылку
Функция НайтиУдаляемыеЗаписи(ТипМетаданных, ИмяОбъекта)
	
	// Получим массив ссылок (записей в таблицах базы данных), которые будут удалены
	// при удалении объектов метаданных (таблиц базы данных)
	
	Запрос = Новый Запрос;
	ИмяТаблицы = ТипМетаданных + "." + ИмяОбъекта;
	Запрос.Текст = 
		"ВЫБРАТЬ Ссылка ИЗ " + ИмяТаблицы + " 
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ Значение(" + ИмяТаблицы + ".ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции

Функция ОтобратьЗаписиРегистровСведений(ТаблицаСсылок)
	
	ЗаписиРегистровСведений    = Новый ТаблицаЗначений();
	ЗаписиРегистровСведений.Колонки.Добавить("ИмяРегистра");
	ЗаписиРегистровСведений.Колонки.Добавить("КлючЗаписи");
	
	МетаданныеРегистрыСведений = Метаданные.РегистрыСведений;
	НезависимыйРежимЗаписи     = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;
	
	Для Каждого ОписаниеСсылки Из ТаблицаСсылок Цикл
		// Описание колонок см. в описании метода НайтиПоСсылкам
		Ссылка           = ОписаниеСсылки[1];
		ОбъектМетаданных = ОписаниеСсылки[2];
		
		// Нас интересуют только записи независимых регистров сведений.
		// Именно они приводят к проблемам.
		Если МетаданныеРегистрыСведений.Содержит(ОбъектМетаданных) 
		   И ОбъектМетаданных.РежимЗаписи = НезависимыйРежимЗаписи Тогда
		   
			ОписаниеЗаписи = ЗаписиРегистровСведений.Добавить();
			ОписаниеЗаписи.ИмяРегистра = ОбъектМетаданных.Имя;
			ОписаниеЗаписи.КлючЗаписи  = Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаписиРегистровСведений;
	
КонецФункции

Функция УдалитьЗаписиНезависимыхРегистровСведений(ЗаписиКУдалению, ОписаниеРезультата)
	
	ВсеЗаписиУдалены = Истина;
	
	ВсегоЗаписей = ЗаписиКУдалению.Количество();
	ТипЧисло     = Тип("Число");
	
	Для Каждого ОписаниеЗаписи Из ЗаписиКУдалению Цикл
		
		ИмяРегистра      = ОписаниеЗаписи.ИмяРегистра;
		МенеджерРегистра = РегистрыСведений[ИмяРегистра];
		МенеджерЗаписи   = МенеджерРегистра.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ОписаниеЗаписи.КлючЗаписи);
		
		Попытка
			МенеджерЗаписи.Удалить();
		Исключение
			ВсеЗаписиУдалены = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка при удалении записи регистра " + ИмяРегистра + "
			|" + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		// Подсчитаем количество удаленных записей (для каждого регистра)
		БылоЗаписей = ОписаниеРезультата[ИмяРегистра];
		Если ТипЗнч(БылоЗаписей) <> ТипЧисло Тогда
			БылоЗаписей = 0;
		КонецЕсли;
		ОписаниеРезультата.Вставить(ИмяРегистра, БылоЗаписей + 1);
		
	КонецЦикла;
	
	Возврат ВсеЗаписиУдалены;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ НАКОПЛЕННЫХ ДАННЫХ (ОПЦИОНАЛЬНЫЕ)

Процедура ИзменитьФорматХраненияСреднегоОтклоненияСЛУ() Экспорт
	
	СреднееОтклонениеСЛУ = глЗначениеПеременной("СреднееОтклонениеСЛУ");
	
	Если СреднееОтклонениеСЛУ > 0 И СреднееОтклонениеСЛУ < 1 Тогда
		Константы.СреднееОтклонениеСЛУ.Установить(-Log10(СреднееОтклонениеСЛУ));
	ИначеЕсли СреднееОтклонениеСЛУ = 0 Тогда
		Константы.СреднееОтклонениеСЛУ.Установить(99);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ РЕГЛАМЕНТИРОВАННОГО УЧЕТА

Процедура ОбработатьЖурналУчетаСчетовФактур() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.Исправление,
	|	СчетФактураВыданный.НомерИсправления,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.УдалитьНомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.УдалитьДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
	|ПОМЕСТИТЬ ВТ_СчФактурыДокументы
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Проведен = ИСТИНА
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И (СчетФактураВыданный.Исправление
	|			ИЛИ СчетФактураВыданный.ИсправляемыйСчетФактура.Исправление)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Исправление,
	|	СчетФактураПолученный.НомерИсправления,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.УдалитьНомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураПолученный.УдалитьДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Проведен = ИСТИНА
	|	И СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И (СчетФактураПолученный.Исправление
	|			ИЛИ СчетФактураПолученный.ИсправляемыйСчетФактура.Исправление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Регистратор КАК Регистратор,
	|	ВТ_СчФактурыДокументы.Исправление,
	|	ВТ_СчФактурыДокументы.НомерИсправления,
	|	ВТ_СчФактурыДокументы.Дата,
	|	ВТ_СчФактурыДокументы.НомерИсправленияИсходногоДокумента,
	|	ВТ_СчФактурыДокументы.ДатаИсправленияИсходногоДокумента,
	|	ВТ_СчФактурыДокументы.СчетФактура
	|ИЗ
	|	ВТ_СчФактурыДокументы КАК ВТ_СчФактурыДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО ВТ_СчФактурыДокументы.СчетФактура = ЖурналУчетаСчетовФактур.СчетФактура
	|ГДЕ
	|	(ЖурналУчетаСчетовФактур.НомерИсправления <> ВТ_СчФактурыДокументы.НомерИсправленияИсходногоДокумента
	|			ИЛИ ЖурналУчетаСчетовФактур.ДатаИсправления <> ВТ_СчФактурыДокументы.ДатаИсправленияИсходногоДокумента
	|			ИЛИ ВТ_СчФактурыДокументы.Исправление
	|				И (ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры <> ВТ_СчФактурыДокументы.НомерИсправления
	|					ИЛИ ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры <> ВТ_СчФактурыДокументы.Дата))
	|ИТОГИ ПО
	|	Регистратор";
	
	СчетаФактурыДляКорректировки = Новый ТаблицаЗначений;
	
	СчетаФактурыДляКорректировки.Колонки.Добавить("СчетФактура");
	СчетаФактурыДляКорректировки.Колонки.Добавить("Исправление");
	СчетаФактурыДляКорректировки.Колонки.Добавить("НомерИсправления");
	СчетаФактурыДляКорректировки.Колонки.Добавить("Дата");
	СчетаФактурыДляКорректировки.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
	СчетаФактурыДляКорректировки.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");

	ВыборкаРегистраторы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			   
	
	Пока ВыборкаРегистраторы.Следующий()Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторы.Регистратор);
		НаборЗаписей.Прочитать();
		
		ВыборкаСчетаФактуры = ВыборкаРегистраторы.Выбрать();
		
		СчетаФактурыДляКорректировки.Очистить();
		Пока ВыборкаСчетаФактуры.Следующий() Цикл
			СчетФактураДляКорректировки = СчетаФактурыДляКорректировки.Добавить();
			ЗаполнитьЗначенияСвойств(СчетФактураДляКорректировки, ВыборкаСчетаФактуры);
		КонецЦикла;
		
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			
			СчетФактура = СчетаФактурыДляКорректировки.Найти(СтрокаНабора.СчетФактура, "СчетФактура");
			
			Если СчетФактура = Неопределено Тогда 
				Продолжить;	
			КонецЕсли;
			
			Если СчетФактура.Исправление Тогда  	
				СтрокаНабора.НомерИсправленияКорректировочногоСчетаФактуры = СчетФактура.НомерИсправления;
				СтрокаНабора.ДатаИсправленияКорректировочногоСчетаФактуры  = СчетФактура.Дата;
			КонецЕсли;
			
			СтрокаНабора.НомерИсправления = СчетФактура.НомерИсправленияИсходногоДокумента;
			СтрокаНабора.ДатаИсправления  = СчетФактура.ДатаИсправленияИсходногоДокумента;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значение реквизитов табличной части "ДокументыОснования" из реквизитов шапки документов "СчетФактураВыданный", "СчетФактураПолученный" 
Процедура ОбработатьКорректировочныеСчетаФактурыФЗ39() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.УдалитьУчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.УдалитьНомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.УдалитьДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаУвеличение,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаУменьшение,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаНДСУвеличение,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаНДСУменьшение
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И (СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента = """"
	|			ИЛИ СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.УдалитьУчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.УдалитьНомерИсправленияИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.УдалитьДатаИсправленияИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СуммаУвеличение,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СуммаУменьшение,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СуммаНДСУвеличение,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СуммаНДСУменьшение
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|	И (СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента = """"
	|			ИЛИ СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1))";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СчетФактура = Выборка.Ссылка.ПолучитьОбъект(); 
			
			Если СчетФактура.ДокументыОснования.Количество() > 1 Тогда 
				Попытка
					СчетФактура.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецПопытки;
			Иначе
				ЗаполнитьЗначенияСвойств(СчетФактура.ДокументыОснования[0], Выборка);
				СчетФактура.ОбменДанными.Загрузка = Истина;
				Попытка
					СчетФактура.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	
КонецПроцедуры
