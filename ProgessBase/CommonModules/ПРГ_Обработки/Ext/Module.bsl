
Процедура проверитьСотрудников(сотрудник,организация)
	списокПроверенных=Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния,
	|	РаботникиОрганизацийСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Сотрудник В (&Сотрудник)
	|				И ПричинаИзмененияСостояния = &ПричинаИзмененияСостояния) КАК РаботникиОрганизацийСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Наименование";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", организация);
	Запрос.УстановитьПараметр("ПричинаИзмененияСостояния", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Сотрудник", сотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если списокПроверенных.НайтиПоЗначению(Выборка.Сотрудник) = Неопределено Тогда
			списокПроверенных.добавить(Выборка.Сотрудник);
			Сообщить(строка(Выборка.Сотрудник)+" был уволен "+Формат(Выборка.Период,"ДЛФ=D"));
		КонецЕсли;
	КонецЦикла;
	
	
конецпроцедуры

Функция проверитьподразделение(Подразделения)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК ссылка
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение = &Значение
	|	И ЗначенияСвойствОбъектов.Объект В(&Объект)";
	Запрос.УстановитьПараметр("Значение", истина);
	Запрос.УстановитьПараметр("Объект", Подразделения);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Подразделение_Группа"));
	пр=ложь;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		пр=истина;
		сообщить("Подразделение: "+Выборка.ссылка.Наименование+"("+Выборка.ссылка.код+") является группой!!"); 
	КонецЦикла;
	
	возврат пр;
	
КонецФункции // получитьСписокГруппПодразделений()

/////Вадим 16.11.2012 16:35:59
Функция ПроверитьВалюту(ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ AVT_ИзменениеШтатногоРасписанияШтатныеЕдиницы.ВалютаТарифнойСтавки = ЗНАЧЕНИЕ(справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА AVT_ИзменениеШтатногоРасписанияШтатныеЕдиницы.ВалютаТарифнойСтавки = &Валюта
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Поле1
	|ИЗ
	|	Документ.AVT_ИзменениеШтатногоРасписания.ШтатныеЕдиницы КАК AVT_ИзменениеШтатногоРасписанияШтатныеЕдиницы
	|ГДЕ
	|	AVT_ИзменениеШтатногоРасписанияШтатныеЕдиницы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ AVT_ИзменениеШтатногоРасписанияШтатныеЕдиницы.ВалютаТарифнойСтавки = ЗНАЧЕНИЕ(справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА AVT_ИзменениеШтатногоРасписанияШтатныеЕдиницы.ВалютаТарифнойСтавки = &Валюта
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поле1 УБЫВ";
	Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка", ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		если Выборка.поле1 тогда
			сообщить("В документе имеются строчки в которых выбранна валюта не регламентированного учета!");
			возврат истина;
		конецесли;	
	КонецЕсли;
	возврат ложь;
	
	
КонецФункции 
// ПроверитьВалюту() ВадимКонец


Процедура Проверка(док,отказ)
	
	
	рекШапки=док.Метаданные().Реквизиты.Найти("Сотрудник");
	
	Если не рекШапки=Неопределено тогда
		проверитьСотрудников(док[рекШапки.имя],док.Организация);
	КонецЕсли;	  
	для каждого стрТаб из док.Метаданные().ТабличныеЧасти цикл
		рек=док.Метаданные().ТабличныеЧасти[стрТаб.имя].Реквизиты.Найти("Сотрудник");
		Если не рек=Неопределено тогда
			проверитьСотрудников(док[стрТаб.имя].ВыгрузитьКолонку(рек.имя),док.Организация);
		Конецесли;
		рекПодразделений=док.Метаданные().ТабличныеЧасти[стрТаб.имя].Реквизиты.Найти("ПодразделениеОрганизации");
		Если не рекПодразделений=Неопределено тогда
			Если проверитьподразделение(док[стрТаб.имя].ВыгрузитьКолонку(рекПодразделений.имя)) тогда
				отказ=истина;
			КонецЕсли;	
		Конецесли;
		Если ТипЗнч(док.ссылка)=тип("ДокументСсылка.AVT_ИзменениеШтатногоРасписания") тогда
			//	рекПодразделений=док.Метаданные().ТабличныеЧасти[стрТаб.имя].Реквизиты.Найти("ВалютаТарифнойСтавки");
			//	Если не рекПодразделений=Неопределено тогда
			Если ПроверитьВалюту(док.ссылка) тогда
				отказ=истина;
			КонецЕсли;	
			//	Конецесли;
		Конецесли;
		
	конеццикла;	
КонецПроцедуры

///Вадим 11.12.2012 16:39:21
Процедура проверкаПересеченияПериодовСБольничнымЛистом(Источник)
	Если ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.AVT_РегистрацияБольничныхЛистов") тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	AVT_РегистрацияБольничныхЛистовРаботникиОрганизации.Сотрудник,
		|	AVT_РегистрацияБольничныхЛистовРаботникиОрганизации.ДатаНачала,
		|	AVT_РегистрацияБольничныхЛистовРаботникиОрганизации.ДатаОкончания
		|ИЗ
		|	Документ.AVT_РегистрацияБольничныхЛистов.РаботникиОрганизации КАК AVT_РегистрацияБольничныхЛистовРаботникиОрганизации
		|ГДЕ
		|	AVT_РегистрацияБольничныхЛистовРаботникиОрганизации.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	AVT_РегистрацияБольничныхЛистовРаботникиОрганизации.ДатаОкончания,
		|	AVT_РегистрацияБольничныхЛистовРаботникиОрганизации.ДатаНачала,
		|	AVT_РегистрацияБольничныхЛистовРаботникиОрганизации.Сотрудник";
		
		Запрос.УстановитьПараметр("Ссылка", Источник);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			получитьПересеченияПериодовСБольничнымЛистом(ВыборкаДетальныеЗаписи.Сотрудник,ВыборкаДетальныеЗаписи.ДатаНачала,ВыборкаДетальныеЗаписи.ДатаОкончания,Источник);
		КонецЦикла;
	иначеЕсли ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.НеявкиИБолезниОрганизаций") тогда
		
		
	иначеЕсли ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.AVT_СлужебныеПоездки") тогда
		получитьПересеченияПериодовСБольничнымЛистом(Источник.Сотрудник,Источник.ДатаНачала,Источник.ДатаОкончания,Источник);
		
		
		
	КонецЕсли
	
КонецПроцедуры

Процедура получитьПересеченияПериодовСБольничнымЛистом(Сотрудник,Период,ПериодОкончания,ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ПериодОкончания", ПериодОкончания);
	кзСписокСостояние = Новый СписокЗначений;
	кзСписокСостояние.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	кзСписокСостояние.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	кзСписокСостояние.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	кзСписокСостояние.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком);
	кзСписокСостояние.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебный);
	кзСписокСостояние.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый);
	кзСписокСостояние.Добавить(Перечисления.СостоянияРаботникаОрганизации.Командировка);
	Запрос.УстановитьПараметр("Состояние", кзСписокСостояние);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ссылка", ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеРаботниковОрганизаций.Регистратор,
	|	СостояниеРаботниковОрганизаций.Состояние,
	|	СостояниеРаботниковОрганизаций.Сотрудник,
	|	СостояниеРаботниковОрганизаций.Период,
	|	СостояниеРаботниковОрганизаций.ПериодЗавершения
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|ГДЕ
	|	СостояниеРаботниковОрганизаций.Состояние В(&Состояние)
	|	И (&Период МЕЖДУ СостояниеРаботниковОрганизаций.Период И СостояниеРаботниковОрганизаций.ПериодЗавершения
	|			ИЛИ &ПериодОкончания МЕЖДУ СостояниеРаботниковОрганизаций.Период И СостояниеРаботниковОрганизаций.ПериодЗавершения
	|			ИЛИ СостояниеРаботниковОрганизаций.Период МЕЖДУ &Период И &ПериодОкончания
	|			ИЛИ СостояниеРаботниковОрганизаций.ПериодЗавершения МЕЖДУ &Период И &ПериодОкончания)
	|	И СостояниеРаботниковОрганизаций.Сотрудник = &Сотрудник
	|	И НЕ СостояниеРаботниковОрганизаций.Регистратор = &ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	""неявка"",
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|		ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|		ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
	|		ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачалаСобытия,
	|		ВЫБОР
	|			КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|					И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	|		КОНЕЦ КАК ПодразделениеОрганизации,
	|		ВЫБОР
	|			КОГДА МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала), ДЕНЬ, -1)
	|		КОНЕЦ КАК ДатаОкончания,
	|		ВЫБОР
	|			КОГДА ТЧРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	|				ТОГДА ЕСТЬNULL(ПВРПростой.ВидРасчета, ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул))
	|			КОГДА ТЧРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)
	|				ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул)
	|			ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход)
	|		КОНЕЦ КАК ВидРасчета,
	|		ИСТИНА КАК Авторасчет,
	|		ТЧРаботникиОрганизации.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.НеявкиИБолезниОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|				МАКСИМУМ(Работники.Период) КАК Период
	|			ИЗ
	|				Документ.НеявкиИБолезниОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|						И (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
	|			ГДЕ
	|				ТЧРаботникиОрганизации.Ссылка.Проведен
	|				И ТЧРаботникиОрганизации.Сотрудник = &Сотрудник
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|			ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|			ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|				И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.НеявкиИБолезниОрганизаций.РаботникиОрганизации КАК ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации
	|			ПО ТЧРаботникиОрганизации.Ссылка = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Ссылка
	|				И ТЧРаботникиОрганизации.ДатаНачала < ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала
	|				И (ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает))
	|				И ТЧРаботникиОрганизации.Сотрудник = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	|			ИЗ
	|				ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|			ГДЕ
	|				ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника)) КАК ПВРПростой
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		ТЧРаботникиОрганизации.Ссылка.Проведен
	|		И ТЧРаботникиОрганизации.Сотрудник = &Сотрудник
	|		И ТЧРаботникиОрганизации.ПричинаОтсутствия В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТЧРаботникиОрганизации.Сотрудник,
	|		ТЧРаботникиОрганизации.ДатаНачала,
	|		ВЫБОР
	|			КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|					И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	|			ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	|		КОНЕЦ,
	|		ТЧРаботникиОрганизации.ПричинаОтсутствия,
	|		ПВРПростой.ВидРасчета,
	|		ТЧРаботникиОрганизации.Сотрудник.Физлицо,
	|		ТЧРаботникиОрганизации.Ссылка,
	|		ТЧРаботникиОрганизации.ДатаНачала) КАК ВложенныйЗапрос
	|ГДЕ
	|	(&Период МЕЖДУ ВложенныйЗапрос.ДатаНачала И ВложенныйЗапрос.ДатаОкончания
	|			ИЛИ &ПериодОкончания МЕЖДУ ВложенныйЗапрос.ДатаНачала И ВложенныйЗапрос.ДатаОкончания
	|			ИЛИ ВложенныйЗапрос.ДатаНачала МЕЖДУ &Период И &ПериодОкончания
	|			ИЛИ ВложенныйЗапрос.ДатаОкончания МЕЖДУ &Период И &ПериодОкончания)
	|	И НЕ ВложенныйЗапрос.Ссылка = &ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	AVT_СлужебныеПоездки.Ссылка,
	|	""Служебная поездка"",
	|	AVT_СлужебныеПоездки.Сотрудник,
	|	AVT_СлужебныеПоездки.ДатаНачала,
	|	AVT_СлужебныеПоездки.ДатаОкончания
	|ИЗ
	|	Документ.AVT_СлужебныеПоездки КАК AVT_СлужебныеПоездки
	|ГДЕ
	|	AVT_СлужебныеПоездки.Проведен
	|	И AVT_СлужебныеПоездки.Сотрудник = &Сотрудник
	|	И НЕ AVT_СлужебныеПоездки.Ссылка = &ссылка
	|	И (&Период МЕЖДУ AVT_СлужебныеПоездки.ДатаНачала И AVT_СлужебныеПоездки.ДатаОкончания
	|			ИЛИ &ПериодОкончания МЕЖДУ AVT_СлужебныеПоездки.ДатаНачала И AVT_СлужебныеПоездки.ДатаОкончания
	|			ИЛИ AVT_СлужебныеПоездки.ДатаНачала МЕЖДУ &Период И &ПериодОкончания
	|			ИЛИ AVT_СлужебныеПоездки.ДатаОкончания МЕЖДУ &Период И &ПериодОкончания)";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	пока Выборка.Следующий() Цикл
		сообщить("------------------------------Найдено пересечение периодов
		|"+Выборка.Сотрудник+"; Состояние:"+Выборка.Состояние+"; Документ:"+Выборка.Регистратор+"; Период с"+формат(Выборка.Период,"ДЛФ=D")+" по "+формат(Выборка.ПериодЗавершения,"ДЛФ=D")+"
		|----------------------------------------------------------");
	КонецЦикла;
	
	
КонецПроцедуры

///Вадим 17.12.2012 16:17:45
Процедура проверитьШтатноеРасписание(Источник,отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.AVTШтатноеРасписание КАК ШтатноеРасписание
	|ПОМЕСТИТЬ ВТ_списокШтатки
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
	|ГДЕ
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.AVTШтатноеРасписание,
	|	СУММА(ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок) КАК КоличествоСтавок,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность
	|ПОМЕСТИТЬ ВТ_Штатка
	|ИЗ
	|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
	|			&Дата,
	|			AVTШтатноеРасписание В
	|				(ВЫБРАТЬ
	|					таб.ШтатноеРасписание
	|				ИЗ
	|					ВТ_списокШтатки КАК таб)) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
	|ГДЕ
	|	НЕ ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.AVTШтатноеРасписание,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеРаботников.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА СостояниеРаботников.ПериодЗавершения <= &Дата
	|				И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СостояниеРаботников.СостояниеЗавершения
	|		ИНАЧЕ СостояниеРаботников.Состояние
	|	КОНЕЦ КАК Состояние,
	|	СостояниеРаботников.Сотрудник
	|ПОМЕСТИТЬ ВТ_ФизлицаКадровоеСостояние
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&Дата, ) КАК СостояниеРаботников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗанятыеШтатныеЕдиницыОрганизаций.AVTШтатноеРасписание,
	|	ЗанятыеШтатныеЕдиницыОрганизаций.Должность,
	|	ЗанятыеШтатныеЕдиницыОрганизаций.ПодразделениеОрганизации,
	|	СУММА(ВЫБОР
	|			КОГДА ЗанятыеШтатныеЕдиницыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавок
	|			ИНАЧЕ -ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавок
	|		КОНЕЦ) КАК Количество,
	|	ЗанятыеШтатныеЕдиницыОрганизаций.Сотрудник
	|ПОМЕСТИТЬ ВТ_ЗанятыеШтатки
	|ИЗ
	|	РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК ЗанятыеШтатныеЕдиницыОрганизаций
	|ГДЕ
	|	ЗанятыеШтатныеЕдиницыОрганизаций.Период <= &дата
	|	И ЗанятыеШтатныеЕдиницыОрганизаций.AVTШтатноеРасписание В
	|			(ВЫБРАТЬ
	|				таб.ШтатноеРасписание
	|			ИЗ
	|				ВТ_списокШтатки КАК таб)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятыеШтатныеЕдиницыОрганизаций.AVTШтатноеРасписание,
	|	ЗанятыеШтатныеЕдиницыОрганизаций.Должность,
	|	ЗанятыеШтатныеЕдиницыОрганизаций.ПодразделениеОрганизации,
	|	ЗанятыеШтатныеЕдиницыОрганизаций.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник
	|ПОМЕСТИТЬ ВТ_Уволенные
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаб.ПричинаИзмененияСостояния,
	|	ВЫБОР
	|		КОГДА ВремТаб.состояние ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|		ИНАЧЕ ВремТаб.состояние
	|	КОНЕЦ КАК Состояние,
	|	ВремТаб.AVTШтатноеРасписание,
	|	ВремТаб.Должность,
	|	ВремТаб.ПодразделениеОрганизации,
	|	ВремТаб.Количество,
	|	ВремТаб.Сотрудник
	|ПОМЕСТИТЬ ВТ_итоговая
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Уволенные.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|		ВЫБОР
	|			КОГДА ВТ_ФизлицаКадровоеСостояние.Состояние ЕСТЬ NULL 
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|			ИНАЧЕ ВТ_ФизлицаКадровоеСостояние.Состояние
	|		КОНЕЦ КАК состояние,
	|		ВТ_ЗанятыеШтатки.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
	|		ВТ_ЗанятыеШтатки.Должность КАК Должность,
	|		ВТ_ЗанятыеШтатки.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ВТ_ЗанятыеШтатки.Количество КАК Количество,
	|		ВТ_ЗанятыеШтатки.Сотрудник КАК Сотрудник
	|	ИЗ
	|		ВТ_ЗанятыеШтатки КАК ВТ_ЗанятыеШтатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаКадровоеСостояние КАК ВТ_ФизлицаКадровоеСостояние
	|			ПО ВТ_ЗанятыеШтатки.Сотрудник = ВТ_ФизлицаКадровоеСостояние.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Уволенные КАК ВТ_Уволенные
	|			ПО ВТ_ЗанятыеШтатки.Сотрудник = ВТ_Уволенные.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_Уволенные.ПричинаИзмененияСостояния,
	|		ВЫБОР
	|			КОГДА ВТ_ФизлицаКадровоеСостояние.Состояние ЕСТЬ NULL 
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|			ИНАЧЕ ВТ_ФизлицаКадровоеСостояние.Состояние
	|		КОНЕЦ,
	|		ВТ_ЗанятыеШтатки.AVTШтатноеРасписание,
	|		ВТ_ЗанятыеШтатки.Должность,
	|		ВТ_ЗанятыеШтатки.ПодразделениеОрганизации,
	|		ВТ_ЗанятыеШтатки.Количество,
	|		ВТ_ЗанятыеШтатки.Сотрудник) КАК ВремТаб
	|ГДЕ
	|	ВремТаб.Количество > 0
	|	И НЕ ВремТаб.ПричинаИзмененияСостояния = &ПричинаИзмененияСостояния
	|	И (ВремТаб.состояние = &состояние
	|			ИЛИ ВремТаб.состояние ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Штатка.AVTШтатноеРасписание КАК ШтатноеРасписание,
	|	СУММА(ВТ_Штатка.КоличествоСтавок) КАК КоличествоСтавок,
	|	СУММА(ВТ_итоговая.Количество) КАК Количество,
	|	ВТ_Штатка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВТ_Штатка.Должность КАК Должность,
	|	ВТ_Штатка.ПодразделениеОрганизации.Код КАК код,
	|	ВТ_итоговая.Сотрудник
	|ИЗ
	|	ВТ_Штатка КАК ВТ_Штатка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_итоговая КАК ВТ_итоговая
	|		ПО ВТ_Штатка.AVTШтатноеРасписание = ВТ_итоговая.AVTШтатноеРасписание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Штатка.ПодразделениеОрганизации,
	|	ВТ_Штатка.Должность,
	|	ВТ_Штатка.AVTШтатноеРасписание,
	|	ВТ_Штатка.ПодразделениеОрганизации.Код,
	|	ВТ_итоговая.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Штатка.ПодразделениеОрганизации.Родитель.Код,
	|	ВТ_Штатка.ПодразделениеОрганизации.Код
	|ИТОГИ
	|	СУММА(КоличествоСтавок),
	|	СУММА(Количество)
	|ПО
	|	ШтатноеРасписание";
	Запрос.УстановитьПараметр("Дата", Источник.дата);
	Запрос.УстановитьПараметр("ПричинаИзмененияСостояния", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("состояние", Перечисления.СостоянияРаботникаОрганизации.Работает);
	Запрос.УстановитьПараметр("Ссылка", Источник.ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоСтавок=0 тогда
			сообщить("Ставка "+Выборка.ШтатноеРасписание+" закрыта!");
			отказ=Истина;
			продолжить;
		Конецесли;	
		Если не Выборка.Количество=0  тогда
			ВыборкаСотрудников = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСотрудников.Следующий() Цикл
				сообщить("Ставка "+ВыборкаСотрудников.ШтатноеРасписание+" на данный момент занята "+ВыборкаСотрудников.Сотрудник);
				отказ=Истина;
			КонецЦикла;
			
		Конецесли;	
	//Конеццикла;

		
		
		
	КонецЦикла;
	
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//пока Выборка.Следующий() цикл
	//	Если Выборка.СтавокШтатки=0 тогда
	//		сообщить("Ставка "+стр.AVTШтатноеРасписание+" закрыта!");
	//		отказ=Истина;
	//		прервать;
	//	Конецесли;	
	//	Если не Выборка.СтавокЗанято=0 и не Выборка.Сотрудник=стр.Сотрудник тогда
	//		сообщить("Ставка "+стр.AVTШтатноеРасписание+" на данный момент занята "+Выборка.Сотрудник);
	//		отказ=Истина;
	//		прервать;
	//		
	//	Конецесли;	
	//Конеццикла;
	
	
	
КонецПроцедуры

процедура проверитьЗаморозкуштатки(Источник,отказ)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_ЗамороженныеШтатки.ШтатнаяЕдиница
		|ИЗ
		|	РегистрСведений.ПРГ_ЗамороженныеШтатки.СрезПоследних(КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ), ) КАК ПРГ_ЗамороженныеШтатки
		|ГДЕ
		|	ПРГ_ЗамороженныеШтатки.ШтатнаяЕдиница В(&ШтатнаяЕдиница)";
	
	Запрос.УстановитьПараметр("ШтатнаяЕдиница",Источник.РаботникиОрганизации.ВыгрузитьКолонку("AVTШтатноеРасписание"));
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сообщить(сокрЛП(ВыборкаДетальныеЗаписи.ШтатнаяЕдиница)+" является замороженной!!!");
		отказ=истина;
	КонецЦикла;

	
	
	///
	
КонецПроцедуры	
//ВадимКонец

/////Вадим 24.12.2012 15:34:14
Функция получитьЗначениеКотроляШтатки()
    	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоПерсоналуОрганизаций.КонтрольКоличестваСтавокШтатногоРасписания
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		возврат ВыборкаДетальныеЗаписи.КонтрольКоличестваСтавокШтатногоРасписания;
	иначе	
		возврат ложь;
	КонецЕсли;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	

КонецФункции 
// получитьЗначениеКотроляШтатки() ВадимКонец



Процедура ПРГ_ПроверкаДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Проверка(Источник,Отказ);
	КонтрольПревышенияНачисленийШтатногоРасписания(Источник,Отказ);//+ Dansur  11.07.2013 15:33:49
	Если ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.AVT_РегистрацияБольничныхЛистов")
		или ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.НеявкиИБолезниОрганизаций")
		или ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.AVT_СлужебныеПоездки")
		тогда
		проверкаПересеченияПериодовСБольничнымЛистом(Источник.ссылка);
	конецесли;	
	///проверка штатки
	//Если получитьЗначениеКотроляШтатки() тогда
		Если ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.ПриемНаРаботуВОрганизацию")
			или ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.КадровоеПеремещениеОрганизаций")
			или ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.УвольнениеИзОрганизаций")
			тогда
		//	проверитьШтатноеРасписание(Источник,отказ);
		    проверитьЗаморозкуштатки(Источник,отказ)
			
		конецесли;	
	//конецесли;	
	
	Если ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций")
		или ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.НачислениеПоБольничномуЛисту") //Blik 250816 55945 
		тогда
		проверкаПоИсполнительнымЛистам(Источник);
	конецесли;	
	
	Если ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.ОтпускаОрганизаций") 
		или ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.КомандировкиОрганизаций") 
		или ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.НеявкиИБолезниОрганизаций") тогда	
		ПроверкаНаВипЛицДляОтправки(Источник.ссылка);
        проверкаНаИзменениеОтпуска(Источник.ссылка);
	Конецесли;	
	Если РольДоступна("ПолныеПрава") Тогда
		Отказ = Ложь;
	КонецЕсли;
	//Blik 280916 57258 н
	Попытка
		Если ТипЗнч(Источник.ссылка)=Тип("ДокументСсылка.НеявкиИБолезниОрганизаций") или ТипЗнч(Источник.ссылка)=Тип("ДокументСсылка.ОтпускаОрганизаций") или
			ТипЗнч(Источник.ссылка)=Тип("ДокументСсылка.КомандировкиОрганизаций") или ТипЗнч(Источник.ссылка)=Тип("ДокументСсылка.AVT_СлужебныеПоездки") или
			ТипЗнч(Источник.ссылка)=Тип("ДокументСсылка.AVT_РаботаВПраздникиИВыходные") или ТипЗнч(Источник.ссылка)=Тип("ДокументСсылка.AVT_РаботаВСверхурочныеЧасы") 
			Тогда
			    СведенияОбОтстранениях = ПолучитьДанныеПоОтстранениямСотрудников(Источник.ссылка);
				Если не СведенияОбОтстранениях = "" Тогда
					Сообщить(СведенияОбОтстранениях);
					Отказ = Истина;
				КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//Blik 280916 57258 к

КонецПроцедуры


//+ Dansur  11.07.2013 15:12:51
Процедура КонтрольПревышенияНачисленийШтатногоРасписания(Источник=неопределено,отказ) Экспорт
        ДопустимаяРазницаВРублях=0;//хотя 1 рубль думаю не повод шуметь
        
        если Источник= неопределено тогда 
                Возврат
        КонецЕсли;
        
        Если НЕ (ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") или ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") ) тогда
                Возврат;
        КонецЕсли;
        
        
        Запрос = Новый Запрос;
        

        Запрос.УстановитьПараметр("докПриемНаРаботуИЛИКадровоеПеремещениеОсновныеНачисления" , Источник.ОсновныеНачисления.выгрузить());
        Запрос.УстановитьПараметр("докПриемНаРаботуИЛИКадровоеПеремещениеРаботникиОрганизации", Источник.РаботникиОрганизации.выгрузить());

        Запрос.Текст =
        
        "ВЫБРАТЬ
        |	ВЫРАЗИТЬ(докПриемНаРаботуИЛИКадровоеПеремещениеОсновныеНачисления.Показатель1 КАК ЧИСЛО(15, 2)) КАК ПрисвоенОклад,
        |	докПриемНаРаботуИЛИКадровоеПеремещениеОсновныеНачисления.ВидРасчета,
        |	докПриемНаРаботуИЛИКадровоеПеремещениеОсновныеНачисления.Сотрудник
        |ПОМЕСТИТЬ ВТ_ТчДокумента_ОсновныеНачисления
        |ИЗ
        |	&докПриемНаРаботуИЛИКадровоеПеремещениеОсновныеНачисления КАК докПриемНаРаботуИЛИКадровоеПеремещениеОсновныеНачисления
        |ГДЕ
        |	докПриемНаРаботуИЛИКадровоеПеремещениеОсновныеНачисления.ВидРасчета В(&ВидыРасчета)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	докПриемНаРаботуИЛИКадровоеПеремещениеРаботникиОрганизации.Сотрудник,
        |	докПриемНаРаботуИЛИКадровоеПеремещениеРаботникиОрганизации.AVTШтатноеРасписание,
        |	докПриемНаРаботуИЛИКадровоеПеремещениеРаботникиОрганизации.ДатаНачала
        |ПОМЕСТИТЬ ВТ_ТчДокумента_РаботникиОрганизации
        |ИЗ
        |	&докПриемНаРаботуИЛИКадровоеПеремещениеРаботникиОрганизации КАК докПриемНаРаботуИЛИКадровоеПеремещениеРаботникиОрганизации
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ ПЕРВЫЕ 1
        |	ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_ТчДокумента_ОсновныеНачисления.ПрисвоенОклад КАК ЧИСЛО(15, 2)), 0) КАК ПрисвоенОклад,
        |	ВТ_ТчДокумента_ОсновныеНачисления.Сотрудник,
        |	ЕСТЬNULL(ВЫРАЗИТЬ(ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка КАК ЧИСЛО(15, 2)), 0) КАК МаксимальнаяТарифнаяСтавка
        |ПОМЕСТИТЬ ВТ_Результат
        |ИЗ
        |	ВТ_ТчДокумента_РаботникиОрганизации КАК ВТ_ТчДокумента_РаботникиОрганизации
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
        |		ПО ВТ_ТчДокумента_РаботникиОрганизации.AVTШтатноеРасписание = ШтатноеРасписаниеОрганизаций.AVTШтатноеРасписание
        |			И (ВТ_ТчДокумента_РаботникиОрганизации.ДатаНачала >= НАЧАЛОПЕРИОДА(ШтатноеРасписаниеОрганизаций.Период, ДЕНЬ))
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТчДокумента_ОсновныеНачисления КАК ВТ_ТчДокумента_ОсновныеНачисления
        |		ПО (ВТ_ТчДокумента_ОсновныеНачисления.Сотрудник = ВТ_ТчДокумента_РаботникиОрганизации.Сотрудник)
        |ГДЕ
        |	ШтатноеРасписаниеОрганизаций.КоличествоСтавок > 0
        |
        |УПОРЯДОЧИТЬ ПО
        |	ШтатноеРасписаниеОрганизаций.Период УБЫВ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТ_Результат.ПрисвоенОклад,
        |	ВТ_Результат.Сотрудник,
        |	ВТ_Результат.МаксимальнаяТарифнаяСтавка
        |ИЗ
        |	ВТ_Результат КАК ВТ_Результат
        |ГДЕ
        //|	ВТ_Результат.ПрисвоенОклад - &ДопустимаяРазницаВРублях > ВТ_Результат.МаксимальнаяТарифнаяСтавка";
		|	ВТ_Результат.ПрисвоенОклад - &ДопустимаяРазницаВРублях <> ВТ_Результат.МаксимальнаяТарифнаяСтавка";
        //Blik недопустимо любое отклонение от шр  40068 260515
		кзСписокВидыРасчета = Новый СписокЗначений;
        кзСписокВидыРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням);
        кзСписокВидыРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной);
        кзСписокВидыРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам);
        кзСписокВидыРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой);
        Запрос.УстановитьПараметр("ВидыРасчета", кзСписокВидыРасчета);
        Запрос.УстановитьПараметр("СсылкаДокДата", Источник.Дата);
        Запрос.УстановитьПараметр("ДопустимаяРазницаВРублях",ДопустимаяРазницаВРублях);
        Если ТипЗнч(Источник.ссылка)=тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") тогда
                        чтоМеняем=".ДатаНачала";
                        чемМеняем=".ДатаПриема";
                        Запрос.Текст=стрЗаменить(Запрос.Текст,чтоМеняем,чемМеняем);
                КонецЕсли;

        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сотрудник = NULL Тогда  //Blik 030316 49711
				Продолжить;
			КонецЕсли;  //Blik 030316 49711
                Разница=Выборка.ПрисвоенОклад-Выборка.МаксимальнаяТарифнаяСтавка;
				Если Разница>0 Тогда //Blik   40068 260515
					Сообщить("Проведение запрещено по причине превышения оклада порога штатного расписания у сотрудника: "+Выборка.Сотрудник.Наименование+". Попытка присвоения оклада: "+Выборка.ПрисвоенОклад+"руб.Когда верхний порог ШР: "+Выборка.МаксимальнаяТарифнаяСтавка+"руб. Величина превышения на: "+Разница+".руб ");
				Иначе   //Blik   40068 260515
					Сообщить("Проведение запрещено по причине несоответствия оклада штатному расписанию у сотрудника: "+Выборка.Сотрудник.Наименование+". Попытка присвоения оклада: "+Выборка.ПрисвоенОклад+"руб.Когда порог ШР: "+Выборка.МаксимальнаяТарифнаяСтавка+"руб. Отклонение: "+Разница+".руб ");
				КонецЕсли;  //Blik   40068 260515
				отказ=Истина;
        КонецЦикла;
                
КонецПроцедуры
//- Dansur  11.07.2013 15:12:53



///Вадим 16.08.2013 15:50:48
Процедура проверкаНаИзменениеОтпуска(ссылка)
     Если не ТипЗнч(ссылка)=тип("ДокументСсылка.ОтпускаОрганизаций") тогда
		Возврат;
	Конецесли;	
	если 1=2 тогда ссылка=Документы.ОтпускаОрганизаций.СоздатьДокумент() конецесли;
	Если не ЗначениеЗаполнено(ссылка.ИсправляемыйДокумент) тогда 
		возврат; 
	конецесли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания,
		|	ОтпускаОрганизацийРаботникиОрганизации.ПричинаОтсутствия,
		|	ОтпускаОрганизацийРаботникиОрганизации.ВидДополнительногоОтпуска,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сторно КАК Сторно,
		|	ОтпускаОрганизацийРаботникиОрганизации.КоличествоДней,
		|	ОтпускаОрганизацийРаботникиОрганизации.КоличествоДнейДоп,
		|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка,
		|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодС,
		|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодПо
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
		|ГДЕ
		|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сторно,
		|	ДатаНачала
		|ИТОГИ ПО
		|	Сторно";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаСторно = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    ТекстСторно="";
	ТекстИзменений="";
	ТекстТемы="Документа "+СокрЛп(ссылка.ИсправляемыйДокумент)+"  Был исправлен";
	ТекстПисьма="Исправляемый Документ: "+СокрЛп(ссылка.ИсправляемыйДокумент)+"
	|
	|Документ исправления: "+СокрЛп(ссылка)+"
	|
	|Автор документа: "+СокрЛп(ссылка.Ответственный.ФизЛицо)+"
	|
	|
	|";
	
	Пока ВыборкаСторно.Следующий() Цикл
		

		ВыборкаДетальныеЗаписи = ВыборкаСторно.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Сторно тогда
				ТекстСторно=ТекстСторно+"
				|
				|"+СОкрЛП(ВыборкаДетальныеЗаписи.Сотрудник)+" : дата с "+Формат(ВыборкаДетальныеЗаписи.ДатаНачала,"ДФ=dd.MM.yyyy")+" по "+Формат(ВыборкаДетальныеЗаписи.ДатаОкончания,"ДФ=dd.MM.yyyy");				
			Иначе	
			    ТекстИзменений=ТекстИзменений+"
				|
				|"+СОкрЛП(ВыборкаДетальныеЗаписи.Сотрудник)+" : дата с "+Формат(ВыборкаДетальныеЗаписи.ДатаНачала,"ДФ=dd.MM.yyyy")+" по "+Формат(ВыборкаДетальныеЗаписи.ДатаОкончания,"ДФ=dd.MM.yyyy");	
			Конецесли;
			
		КонецЦикла;
	КонецЦикла;
	адреса=Новый СписокЗначений;
	//адреса.Добавить("EAstapenkova@lip.progressfood.ru"); //Blik 261114 33968
	адреса.Добавить("AKuzmina@progressfood.ru");  // "AKuzmina@lip.progressfood.ru" //Blik 290216 49617
	адреса.Добавить("Ikalmatskaya@progressfood.ru"); // "VTumanov@lip.progressfood.ru"  //Blik 290216 49617
	адреса.Добавить("NKubatina@progressfood.ru"); //Blik 261114 33968  //"NKubatina@lip.progressfood.ru"  //Blik 290216 49617
	адреса.Добавить("YGameyeva@progressfood.ru"); //Blik 261114 33968  //"YGameyeva@lip.progressfood.ru" //Blik 290216 49617
	
	
	 ПРГ_Регламентый.ОправитьФайл(ТекстТемы,адреса,ТекстПисьма+"
	 | Сторнированно:
	 |"+ТекстСторно+"
	 |
	 | Новые значения:
	 |"+ТекстИзменений+"
	 |");

	
	
	

КонецПроцедуры
//ВадимКонец


Процедура ПроверкаНаВипЛицДляОтправки(ссылка)
	Если ТипЗнч(ссылка)=тип("ДокументСсылка.ОтпускаОрганизаций") тогда
		ИмяДока="ОтпускаОрганизаций";
	ИначеЕсли ТипЗнч(ссылка)=тип("ДокументСсылка.КомандировкиОрганизаций") тогда	
		ИмяДока="КомандировкиОрганизаций";
	ИначеЕсли ТипЗнч(ссылка)=тип("ДокументСсылка.НеявкиИБолезниОрганизаций") тогда	
		ИмяДока="НеявкиИБолезниОрганизаций";
	Конецесли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Сотрудник
		|ИЗ
		|	(ВЫБРАТЬ
		|		Док.Сотрудник КАК Сотрудник,
		|		ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЛОЖЬ) КАК отправка
		|	ИЗ
		|		Документ."+ИмяДока+".РаботникиОрганизации КАК Док
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|			ПО Док.Сотрудник = ЗначенияСвойствОбъектов.Объект
		|				И (ЗначенияСвойствОбъектов.Свойство В
		|					(ВЫБРАТЬ
		|						СвойстваОбъектов.Ссылка
		|					ИЗ
		|						ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|					ГДЕ
		|						СвойстваОбъектов.Наименование = ""УведомлениеОбОтсуствии""))
		|	ГДЕ
		|		Док.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.отправка = ИСТИНА";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	текстПисьма="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		текстПисьма="Сотрудник "+Строка(ВыборкаДетальныеЗаписи.Сотрудник)+" будет отсутствовать "+ ПолучитьДатыОтсуствияПоДокументу(ссылка,ВыборкаДетальныеЗаписи.Сотрудник,имяДока);
		текстПисьма=текстПисьма+Символы.пс+"Сообщение сформировано автоматически проведением документа: "+строка(ссылка);
		текстПисьма=текстПисьма+Символы.пс+Символы.пс+"(проведен в "+ссылка.дата+" пользователем:"+ссылка.Ответственный+")";
		текстПисьма=текстПисьма+Символы.пс+"По возникающим вопросам можно обратится к Толкачевок Е.А. ETolkacheva@progressfood.ru";//Потаповой Л.Н. LPotapova@lip.progressfood.ru"; //Blik 290216 49617
		
		
		запрос=Новый Запрос;
		запрос.Текст=	"ВЫБРАТЬ
		|	ПРГ_СписокРассылкиОтчетов.ФизЛицо,
		|	ПРГ_СписокРассылкиОтчетов.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций,
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.ПРГ_СписокРассылкиОтчетов КАК ПРГ_СписокРассылкиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ПРГ_СписокРассылкиОтчетов.ФизЛицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ПРГ_СписокРассылкиОтчетов.ОтуствующиеНаРаботе";
		
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		СпсАдресатов=Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			СпсАдресатов.Добавить(Выборка.Представление);
		КонецЦикла;
		ПРГ_Регламентый.ОправитьФайл("Уведомление об отсутствии работника",СпсАдресатов,текстПисьма,Неопределено);
		
	КонецЦикла;
	
 КонецПроцедуры
//ВадимКонец

/////Вадим 25.01.2013 13:48:10
Функция ПолучитьДатыОтсуствияПоДокументу(ссылка,Сотрудник,имяДока)
	Если ИмяДока="ОтпускаОрганизаций" тогда
			Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала,
	|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|ГДЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|	И ОтпускаОрганизацийРаботникиОрганизации.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Ссылка", ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	текстДока="";
	Пока Выборка.Следующий() Цикл
		текстДока=текстДока+символы.ПС+"с "+Формат(Выборка.ДатаНачала,"ДЛФ=D")+" по "+Формат(Выборка.ДатаОкончания,"ДЛФ=D")+Символы.ПС;
	КонецЦикла;
    возврат текстДока;

		
		
	ИначеЕсли ИмяДока="КомандировкиОрганизаций" тогда	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КомандировкиОрганизацийРаботникиОрганизации.ДатаНачала,
		|	КомандировкиОрганизацийРаботникиОрганизации.ДатаОкончания
		|ИЗ
		|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацийРаботникиОрганизации
		|ГДЕ
		|	КомандировкиОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
		|	И КомандировкиОрганизацийРаботникиОрганизации.Сотрудник = &Сотрудник";
		Запрос.УстановитьПараметр("Ссылка", ссылка);
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		текстДока="";
		Пока Выборка.Следующий() Цикл
			текстДока=текстДока+символы.ПС+"с "+Формат(Выборка.ДатаНачала,"ДЛФ=D")+" по "+Формат(Выборка.ДатаОкончания,"ДЛФ=D")+Символы.ПС;
		КонецЦикла;
		возврат текстДока;
		
	ИначеЕсли ИмяДока="НеявкиИБолезниОрганизаций" тогда	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НеявкиИБолезниОрганизацийРаботникиОрганизации.ДатаНачала
		|ИЗ
		|	Документ.НеявкиИБолезниОрганизаций.РаботникиОрганизации КАК НеявкиИБолезниОрганизацийРаботникиОрганизации
		|ГДЕ
		|	НеявкиИБолезниОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
		|	И НеявкиИБолезниОрганизацийРаботникиОрганизации.Сотрудник = &Сотрудник";
		Запрос.УстановитьПараметр("Ссылка", ссылка);
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		текстДока="";
		Пока Выборка.Следующий() Цикл
			текстДока=текстДока+символы.ПС+"с "+Формат(Выборка.ДатаНачала,"ДЛФ=D");//+" по "+Формат(Выборка.ДатаОкончания,"ДЛФ=D")+Символы.ПС;
		КонецЦикла;
		возврат текстДока;
 	
    Конецесли;
	
	

КонецФункции 
// ПолучитьДатыОтсуствияПоДокументу() ВадимКонец




процедура проверкаПоИсполнительнымЛистам(ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ДокументОснование,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ФизЛицо,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Период,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения,
		|	МАКСИМУМ(ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ДокументОснование.Предел) КАК ДокументОснованиеПредел
		|ПОМЕСТИТЬ вт_ДоПредела
		|ИЗ
		|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПлановыеУдержанияРаботниковОрганизацийСрезПоследних
		|ГДЕ
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ФизЛицо,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Период,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.ДокументОснование,
		|	вт.ФизЛицо,
		|	вт.Период,
		|	вт.ПериодЗавершения,
		|	МАКСИМУМ(вт.ДокументОснованиеПредел) КАК ДокументОснованиеПредел,
		|	СУММА(УдержанияРаботниковОрганизаций.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТ_ДОПределаСУдержаниями
		|ИЗ
		|	вт_ДоПредела КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
		|		ПО вт.ДокументОснование = УдержанияРаботниковОрганизаций.ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.Период,
		|	вт.ФизЛицо,
		|	вт.ДокументОснование,
		|	вт.ПериодЗавершения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ФизЛицо,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Период,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения,
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ДокументОснование
		|ИЗ
		|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПлановыеУдержанияРаботниковОрганизацийСрезПоследних
		|ГДЕ
		|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения >= &Дата
		|	И ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Период <= &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДОПределаСУдержаниями.ФизЛицо,
		|	ВТ_ДОПределаСУдержаниями.Период,
		|	ВТ_ДОПределаСУдержаниями.ПериодЗавершения,
		|	ВТ_ДОПределаСУдержаниями.ДокументОснование
		|ИЗ
		|	ВТ_ДОПределаСУдержаниями КАК ВТ_ДОПределаСУдержаниями
		|ГДЕ
		|	ВТ_ДОПределаСУдержаниями.ДокументОснованиеПредел > ВТ_ДОПределаСУдержаниями.Результат";

	Запрос.УстановитьПараметр("Дата", ссылка.Дата);
	
	Запрос.УстановитьПараметр("ФизЛицо", ссылка.Сотрудник.Физлицо);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	текстСсылок="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		текстСсылок=текстСсылок+строка(ВыборкаДетальныеЗаписи.ДокументОснование)+Символы.ПС;
	КонецЦикла;
	Если не сокрЛП(текстСсылок)="" тогда
		сообщить("У сотрудника "+ссылка.Сотрудник.наименование+" есть удержания:" + Символы.ПС+текстСсылок);
    Конецесли;
КонецПроцедуры	


////////////////////////////////////////////////////////РабочиеОбработки



Функция получитьСтрокуСтруктурыПодразделения(подразделение,Падеж=0) экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодразделенияОрганизаций.Ссылка
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка", подразделение);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	строка="";
	Пока ВыборкаСсылка.Следующий() Цикл
		печатать = получитьзначениесвойстобъекта(ВыборкаСсылка.ссылка,ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Непечатать"));
		Если не печатать = Неопределено тогда
			Если печатать тогда продолжить; конецесли;
		конецЕсли;
		Если Падеж=0 тогда		
			строкаПодразделения=ВыборкаСсылка.Ссылка;
		иначе	
			строкаПодразделения=ПросклонятьПодразделениеДолжность(ВыборкаСсылка.Ссылка,Падеж);
		Конецесли;	
		строка=строка+?(строка="","","/")+строкаПодразделения;	
	КонецЦикла;
	возврат строка;
		
	
	
	
	
	
КонецФункции	

Функция получитьФилиалПодразделения(подразделение) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодразделенияОрганизаций.Ссылка
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка", подразделение);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		филиал=получитьзначениесвойстобъекта(ВыборкаСсылка.ссылка,ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Филиал"));
		Если не филиал=Неопределено тогда
			Если филиал тогда
				возврат ВыборкаСсылка.ссылка;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	возврат Неопределено;
	
КонецФункции	

Функция получитьзначениесвойстобъекта(Объект,Свойство) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Если ТипЗнч(Свойство)=тип("Строка") тогда
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(Свойство));		
	иначе
		Запрос.УстановитьПараметр("Свойство", Свойство);	
	Конецесли;	

	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаСсылка.Следующий() тогда
		возврат ВыборкаСсылка.Значение;
	иначе
		возврат Неопределено;	
	КонецЕсли;
	
	
КонецФункции	

/////Вадим 12.11.2012 10:59:21
Функция ПолучитьНастройкуПользователя(Настройка) Экспорт 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = &Настройка";
	
	Если ТипЗнч(Настройка)=тип("Строка") тогда
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию(Настройка));
	Иначе	
		Запрос.УстановитьПараметр("Настройка", Настройка);
	Конецесли;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		возврат ВыборкаДетальныеЗаписи.Значение;
	иначе	
		возврат Неопределено
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
КонецФункции 
// ПолучитьНастройкуПользователя() ВадимКонец

/////Вадим 19.11.2012 11:56:23
Функция ПолучитьКадровыеДанныеСотрудника(Сотрудник,Дата) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		возврат новый Структура("ПодразделениеОрганизации,Должность,ГрафикРаботы",ВыборкаДетальныеЗаписи.ПодразделениеОрганизации,ВыборкаДетальныеЗаписи.Должность,ВыборкаДетальныеЗаписи.ГрафикРаботы);
	иначе	
		возврат Неопределено;
	КонецЕсли;
	
	
	
	
	
КонецФункции 
// ПолучитьКадровыеДанныеСотрудника() ВадимКонец

//Blik 150916 56829 
Процедура проверкаПоОтстранениям(ссылка) экспорт
	
	ЭлСпрСлужебный = Справочники.ПРГ_Служебный.НайтиПоНаименованию("ОтстранениеОтРаботы");
	ВР_Отстранение = ЭлСпрСлужебный.Объект.Ссылка;
	// проверить и сообщить если есть пересечение бл и отстранения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеПоБольничномуЛисту.Сотрудник,
		|	НачислениеПоБольничномуЛисту.ДатаНачала КАК ДатаНБЛ,
		|	НачислениеПоБольничномуЛисту.ДатаОкончания КАК ДатаКБЛ,
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНОтстр,
		|	ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаКОтстр
		|ИЗ
		|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ПО НачислениеПоБольничномуЛисту.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
		|			И (ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета)
		|			И (НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ)
		|				ИЛИ КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ)
		|				ИЛИ НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаНачала, ДЕНЬ)
		|				ИЛИ КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ)
		|				ИЛИ НАЧАЛОПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаНачала, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДЕНЬ) И КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ)
		|				ИЛИ КОНЕЦПЕРИОДА(НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДЕНЬ) И КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДЕНЬ))
		|ГДЕ
		|	НачислениеПоБольничномуЛисту.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ссылка);	
	Запрос.УстановитьПараметр("ВидРасчета", ВР_Отстранение);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	стртекста="";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если не ВыборкаДетальныеЗаписи.ДатаНОтстр = Дата(1,1,1) Тогда
			Сотр = СокрЛП(Строка(ВыборкаДетальныеЗаписи.Сотрудник.Наименование));
			стртекста=стртекста+" даты по БЛ с"+ВыборкаДетальныеЗаписи.ДатаНБЛ+" по "+ВыборкаДетальныеЗаписи.ДатаКБЛ+" даты по отстранения с"+ВыборкаДетальныеЗаписи.ДатаНОтстр+" по "+ВыборкаДетальныеЗаписи.ДатаКОтстр +Символы.ПС;
		КонецЕсли;	
	КонецЦикла;
	Если не сокрЛП(стртекста)="" тогда
		сообщить("У сотрудника "+Сотр+" введено отстранение от работы, которое пересекается по датам с вводимым документом:" + Символы.ПС+стртекста);
		
		//подготовить данные для рассылки
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаОтправку.Объект,
		|	НаОтправку.Значение,
		|	НаОтправку.Реквизит КАК НаОтправку
		|ПОМЕСТИТЬ ВТ_Котправке
		|ИЗ
		|	РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК НаОтправку
		|ГДЕ
		|	(ВЫРАЗИТЬ(НаОтправку.Значение КАК СТРОКА(14))) = ""ПоОтстранениям""
		|	И НаОтправку.Реквизит = ""КОтправке""
		|	И НаОтправку.Объект = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отправлено.Объект,
		|	Отправлено.Реквизит КАК Отправлено,
		|	Отправлено.Значение
		|ПОМЕСТИТЬ ВТ_Отправлено
		|ИЗ
		|	РегистрСведений.ПРГ_ДополнительныеРеквизитыСправочников КАК Отправлено
		|ГДЕ
		|	(ВЫРАЗИТЬ(Отправлено.Значение КАК СТРОКА(14))) = ""ПоОтстранениям""
		|	И НЕ Отправлено.Реквизит = ""КОтправке""
		|	И Отправлено.Объект = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Котправке.Объект,
		|	ВТ_Котправке.Значение,
		|	ВТ_Котправке.НаОтправку,
		|	ЕСТЬNULL(ВТ_Отправлено.Отправлено, """") КАК Отправлено,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_Отправлено.Отправлено, """") = """"
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧТоДелать
		|ИЗ
		|	ВТ_Котправке КАК ВТ_Котправке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отправлено КАК ВТ_Отправлено
		|		ПО ВТ_Котправке.Объект = ВТ_Отправлено.Объект";
		
		Запрос.УстановитьПараметр("Объект", ссылка);	
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если ВыборкаДетальныеЗаписи.ЧТоДелать = 0 Тогда
				//уже записали для отправки
			ИначеЕсли ВыборкаДетальныеЗаписи.ЧТоДелать = 1 Тогда
				//уже отправили
			КонецЕсли;
		Иначе
			//запишем для отправки
			НаборЗаписей = РегистрыСведений.ПРГ_ДополнительныеРеквизитыСправочников.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Объект.Установить(ссылка);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Объект = ссылка;
			НоваяЗапись.Реквизит = "КОтправке";
			НоваяЗапись.Значение = "ПоОтстранениям";
			
			НаборЗаписей.Записать();
		КонецЕсли;
	Конецесли;
КонецПроцедуры
//Blik 160916 56829 к

//Blik 280916 57258 н
Функция ПолучитьДанныеПоОтстранениямСотрудников(Источник)
	ЭлСпрСлужебный = Справочники.ПРГ_Служебный.НайтиПоНаименованию("ОтстранениеОтРаботы");
	ВР_Отстранение = ЭлСпрСлужебный.Объект.Ссылка;
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Источник)=Тип("ДокументСсылка.НеявкиИБолезниОрганизаций") или ТипЗнч(Источник)=Тип("ДокументСсылка.ОтпускаОрганизаций") или
		ТипЗнч(Источник)=Тип("ДокументСсылка.КомандировкиОрганизаций") Тогда
		Если ТипЗнч(Источник)=Тип("ДокументСсылка.НеявкиИБолезниОрганизаций") Тогда
			 документ = "НеявкиИБолезниОрганизаций";
		ИначеЕсли ТипЗнч(Источник)=Тип("ДокументСсылка.ОтпускаОрганизаций") Тогда
			 документ = "ОтпускаОрганизаций";
		ИначеЕсли ТипЗнч(Источник)=Тип("ДокументСсылка.КомандировкиОрганизаций") Тогда
			 документ = "КомандировкиОрганизаций";
		КонецЕсли;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документ.Сотрудник КАК Сотрудник,
		|	Документ.ДатаНачала КАК ДатаН,
		|	ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОН,
		|	ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОк
		|ИЗ
		|	Документ."+документ+".РаботникиОрганизации КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ПО Документ.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
		|			И (ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета)
		|			И (Документ.ДатаНачала МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
		|ГДЕ
		|	Документ.Ссылка = &Ссылка";
		
	ИначеЕсли  ТипЗнч(Источник)=Тип("ДокументСсылка.AVT_СлужебныеПоездки") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документ.Сотрудник КАК Сотрудник,
		|	Документ.ДатаНачала КАК ДатаН,
		|	ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОН,
		|	ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОк
		|ИЗ
		|	Документ.AVT_СлужебныеПоездки КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ПО Документ.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
		|			И (ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета)
		|			И (Документ.ДатаНачала МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
		|ГДЕ
		|	Документ.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументСсылка.AVT_РаботаВПраздникиИВыходные") или ТипЗнч(Источник)=Тип("ДокументСсылка.AVT_РаботаВСверхурочныеЧасы") тогда
		Если ТипЗнч(Источник)=Тип("ДокументСсылка.AVT_РаботаВПраздникиИВыходные") Тогда
			 документ = "AVT_РаботаВПраздникиИВыходные";
		ИначеЕсли ТипЗнч(Источник)=Тип("ДокументСсылка.AVT_РаботаВСверхурочныеЧасы") Тогда
			 документ = "AVT_РаботаВСверхурочныеЧасы"; 
		 КонецЕсли;

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документ.Сотрудник КАК Сотрудник,
		|	Документ.ДатаВыхода КАК ДатаН,
		|	ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОН,
		|	ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОк
		|ИЗ
		|	Документ."+документ+".РаботникиОрганизации КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ПО Документ.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
		|			И (ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчета)
		|			И (Документ.ДатаВыхода МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
		|ГДЕ
		|	Документ.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Источник);	
	Запрос.УстановитьПараметр("ВидРасчета", ВР_Отстранение);
	
	Результат = Запрос.Выполнить().Выбрать();
	ТекстСообщения="";
	Пока Результат.Следующий() Цикл
		Если не Результат.ДатаОН = Дата(1,1,1) Тогда
			ТекстСообщения = ТекстСообщения+" У сотрудника "+Результат.Сотрудник+" введено отстранение от работы с "+Формат(Результат.ДатаОН, "ДЛФ=Д")+" по "+Формат(Результат.ДатаОк, "ДЛФ=Д")+"!!!";
		КонецЕсли; 
	КонецЦикла;
	Возврат ТекстСообщения;
КонецФункции
//Blik 280916 57258 к
////////////////////////////////////////////////////////ПередЗаписью

Процедура ПРГ_ПроверкаДокументовПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//начало изменений Ожиганов 24.07.2015 База МСФО
	Если Источник.ОбменДанными.Загрузка или ПараметрыСеанса.ПроведениеДокументов Тогда
		возврат;
	КонецЕслИ;	
	//конец изменений 
	если ТипЗнч(Источник)=Тип("ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации") тогда
		//ЕСли строка(ПараметрыСеанса.ТекущийПользователь)="Туманов" или 
		Если строка(ПараметрыСеанса.ТекущийПользователь)="Калмацкая" тогда
			//Если вопрос("выполнить проверку после выход с отпуска?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет тогда
				возврат;
			//Конецесли;	
		Конецесли;	
			
		///установитьВыходнойПослеВыходаСОтпускаПриСменномГрафике(Источник);
	//	ПроверкаТабеляНаОтпускаВПраздники(Источник);
		
	конецесли;	
	
	// <- Шевченков 40961 20150707
	Попытка
		Если Источник.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если ТипЗнч(Источник.Контрагент) = Тип("СправочникСсылка.Контрагенты") и ЗначениеЗаполнено(Источник.Контрагент) Тогда
				//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
				//Blik 130617 66656 н
				Если ТипЗнч(Источник)= Тип("ДокументОбъект.ЗаказПокупателя") Тогда
					//начало изменений Ожиганов А. 14.06.2017 66656 нужно проверять свойства, прежде чем к нему обращаться
					//Если Источник.ДополнительныеСвойства.ПРГПростоЗаписать Тогда
					Если Источник.ДополнительныеСвойства.Свойство("ПРГПростоЗаписать") и Источник.ДополнительныеСвойства.ПРГПростоЗаписать Тогда
					//конец изменений 	
						//не проверяем взаиморасчеты
						ПРГ_ЗапретитьВзаиморасчеты = Ложь;
					Иначе 	
						аКонтрагент  = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаСпрСложНПоля(Источник.Контрагент,Новый Структура("ПРГ_ЗапретитьВзаиморасчеты"));
						ПРГ_ЗапретитьВзаиморасчеты = аКонтрагент.ПРГ_ЗапретитьВзаиморасчеты;
					КонецЕсли;
				Иначе
				//Blik 130617 66656 к
					аКонтрагент  = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаСпрСложНПоля(Источник.Контрагент,Новый Структура("ПРГ_ЗапретитьВзаиморасчеты"));
					ПРГ_ЗапретитьВзаиморасчеты = аКонтрагент.ПРГ_ЗапретитьВзаиморасчеты;
				КонецЕсли; //Blik 130617 66656 
				Если ПРГ_ЗапретитьВзаиморасчеты Тогда
					//Если Источник.Контрагент.ПРГ_ЗапретитьВзаиморасчеты Тогда
					//конец изменений 	
					Сообщить("Взаиморасчеты по контрагенту запрещены. Обратитесь к кредитному контролеру за пояснениями.");
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	// ->
	
	/// Кунов О.В., 27.12.2016 - 60714
	ВидыДокументовДляПроверкиДатыНачалаДоговора = Новый Массив;
	ВидыДокументовДляПроверкиДатыНачалаДоговора.Добавить("КП_ИмпортированныйЗаказ");
	ВидыДокументовДляПроверкиДатыНачалаДоговора.Добавить("ЗаказПокупателя");
	//ВидыДокументовДляПроверкиДатыНачалаДоговора.Добавить("РеализацияТоваровУслуг");
	
	ИмяМетаданных = Источник.Метаданные().Имя;
	Если Источник.Дата >= '20161228' И ВидыДокументовДляПроверкиДатыНачалаДоговора.Найти(ИмяМетаданных) <> Неопределено Тогда
		ДатаДоговора = Источник.ДоговорКонтрагента.Дата;
		ДатаОтгрузки = Источник.ДатаОтгрузки;
		Если ЗначениеЗаполнено(ДатаДоговора) И ЗначениеЗаполнено(ДатаОтгрузки) И ДатаДоговора > ДатаОтгрузки Тогда
			Отказ = Истина;
			#Если Клиент Тогда
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Дата договора (%1) позже даты отгрузки (%2)! Проведение невозможно.",
				Формат(ДатаДоговора, "ДФ=dd.MM.yyyy"), Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy")));
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	///
	
КонецПроцедуры

////////////////////////////////////////////////////////ПроверкаТабеля
//	Табель учета рабочего времени
//Идентификатор заявки : 11036

Процедура установитьВыходнойПослеВыходаСОтпускаПриСменномГрафике(Источник)
	док=Источник;
	тздлядок=СборДанныхДляДозаполненияТабеля(док.ОтработанноеВремя.ВыгрузитьКолонку("Сотрудник"),док.ПериодРегистрации);
	для каждого стр из  тздлядок Цикл
		сотр = стр.сотр;
		Отбор = Новый Структура("Сотрудник",Сотр);
		СтрокиПоСотру = док.ОтработанноеВремя.НайтиСтроки(Отбор);
		Для Каждого СтрокаДока ИЗ СтрокиПоСотру Цикл
			//СтрокаДока["ПервыйВидВремени"+Строка(ЦЕЛ((стр.ДатаСост-НачалоМесяца(стр.ДатаЗав))/(3600*24))+1)]= Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни;
			ДатаЧисло = день(стр.ДатаСост);
			//Если Лев(ДатаЧисло,1)="0" Тогда
			//	Датачисло = Сред(ДатаЧисло,2);
			//КонецЕсли;
			пр=Ложь;
			ТекЗначВр1 =  СтрокаДока["ПервыйВидВремени"+ДатаЧисло];
			Если ТекЗначВР1 = Справочники.КлассификаторИспользованияРабочегоВремени.Работа Тогда	 
				СтрокаДока["ПервыйВидВремени"+ДатаЧисло]= Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни;
				СтрокаДока["ПервыйЧасов"+ДатаЧисло]= 0;
				пр=истина;
			КонецЕсли;
			ТекЗначВр2 =  СтрокаДока["ВторойВидВремени"+ДатаЧисло];
			Если ТекЗначВР2 = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда	 
				СтрокаДока["ВторойВидВремени"+ДатаЧисло]= Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяССылка();
				СтрокаДока["ВторойЧасов"+ДатаЧисло]= 0;
				пр=истина;
			КонецЕсли;
			Если пр тогда
				сообщить("Для сотрудника "+Сотр+" на дату "+Формат(стр.ДатаСост,"ДЛФ=D")+" установлен выходной");
				
			конецесли;	
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры	

Функция сформироватЗапросПоДнямГрафика(ДатаН,СсылкаГрафика) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаН", ДатаН);
	Запрос.УстановитьПараметр("СсылкаГрафика", СсылкаГрафика);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоСменам.НочныеЧасы
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|ГДЕ
	|	ГрафикиРаботыПоСменам.ГрафикРаботы = &СсылкаГрафика
	|	И ГрафикиРаботыПоСменам.Дата = &ДатаН";
	
	
	рез= Запрос.Выполнить().Выбрать();
	Если рез.Следующий() тогда
		возврат рез.НочныеЧасы;
	иначе
		возврат 0;
	Конецесли;
	
	
КонецФункции

Функция сформироватьЗапросПографикам(ТекСотр,Текпериод) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаТек", Текпериод);
	Запрос.УстановитьПараметр("СсылкаСотр", ТекСотр);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Ссылка,
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК ТекГрафик
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаТек, Сотрудник = &СсылкаСотр) КАК РаботникиОрганизацийСрезПоследних";
	
	///Возврат Запрос.Выполнить();
	рез= Запрос.Выполнить().Выбрать();
	Если рез.Следующий() тогда
		возврат рез.ТекГрафик;
	иначе
		возврат Неопределено;
	Конецесли;
	
КонецФункции

функция СборДанныхДляДозаполненияТабеля(спсСотрудников,ПериодРегистрации)  
	
	
	тзДляДок = Новый ТаблицаЗначений;
	тзДляДок.колонки.Добавить("сотр");
	тзДляДок.колонки.Добавить("ДатаСост");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", ПериодРегистрации);
	Запрос.УстановитьПараметр("спсСотрудников", спсСотрудников);
	
	спсБол=Новый СписокЗначений;
	спсБол.Добавить(Перечисления.СостоянияРаботникаОрганизации.ГосударственныеОбязанности);
	спсБол.Добавить(Перечисления.СостоянияРаботникаОрганизации.Заболевание);
	спсБол.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	спсБол.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("спсБол", спсБол);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА СостояниеРаботниковОрганизаций.Регистратор ССЫЛКА Документ.НеявкиИБолезниОрганизаций
	|			ТОГДА СостояниеРаботниковОрганизаций.Период
	|		ИНАЧЕ СостояниеРаботниковОрганизаций.ПериодЗавершения
	|	КОНЕЦ КАК датаВыхода,
	|	СостояниеРаботниковОрганизаций.Состояние
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|ГДЕ
	|	(СостояниеРаботниковОрганизаций.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|			ИЛИ СостояниеРаботниковОрганизаций.ПериодЗавершения МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))
	|	И СостояниеРаботниковОрганизаций.Состояние В(&спсБол)
	|	И СостояниеРаботниковОрганизаций.Сотрудник В(&спсСотрудников)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостояниеРаботниковОрганизаций.Сотрудник.Наименование";
	
	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСотров = Результат.Выбрать();
	
	Пока ВыборкаСотров.Следующий() Цикл
		датаВыхода=?(ВыборкаСотров.Состояние=Перечисления.СостоянияРаботникаОрганизации.ГосударственныеОбязанности,КонецДня(ВыборкаСотров.датаВыхода)+1,ВыборкаСотров.датаВыхода);
		Если не (датаВыхода>=НачалоМесяца(ПериодРегистрации) и датаВыхода<=КонецМесяца(ПериодРегистрации)) тогда продолжить;конецесли;
		
		//получаем график и если не основной - продолжаем
		текграфик = сформироватьЗапросПографикам(ВыборкаСотров.Сотрудник,датаВыхода);
		Если текграфик = Неопределено тогда
			продолжить;
		конецесли;
		//получаем день
		нвремя = сформироватЗапросПоДнямГрафика(датаВыхода,Текграфик);
		если нвремя = 0 или не нвремя = 6 тогда
			продолжить;
		конецесли;
		
		новстр = тзДляДок.Добавить();
		новстр.сотр =ВыборкаСотров.Сотрудник;
		новстр.ДатаСост =датаВыхода;
		
	КонецЦикла;
	//тздлядок.ВыбратьСтроку();	
	возврат тздлядок;
КонецФункции//Blik 261012 к



////////////////////////////////////////////////////ПроверкаТабеляНаОтпускаВПраздники
///Вадим 04.03.2013 12:28:13
Процедура ПроверкаТабеляНаОтпускаВПраздники(источник)
	//док=Документы.ТабельУчетаРабочегоВремениОрганизации.СоздатьДокумент();
	спсотпуск=Новый СписокЗначений;
	спсотпуск.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	///спсотпуск.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	док=источник;
	Запроспраздников = Новый Запрос;
	Запроспраздников.Текст =
	"             ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И КонецПериода(&Конецпериода,День)
	|	И РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = &AVT_ПроизводственныйКалендарь
	|	И РегламентированныйПроизводственныйКалендарь.ВидДня = &ВидДня";
	Запроспраздников.УстановитьПараметр("AVT_ПроизводственныйКалендарь", док.AVT_Календарь);
	Запроспраздников.УстановитьПараметр("ВидДня", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	Запроспраздников.УстановитьПараметр("Конецпериода", док.ДатаОкончанияПериода);
	Запроспраздников.УстановитьПараметр("НачалоПериода", док.ДатаНачалаПериода);
	
	Результатпраздников = Запроспраздников.Выполнить();
	Выборкапраздников = Результатпраздников.Выбрать();
	Пока Выборкапраздников.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостояниеРаботниковОрганизацийСрезПоследних.Период,
		|	СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник,
		|	СостояниеРаботниковОрганизацийСрезПоследних.Организация,
		|	СостояниеРаботниковОрганизацийСрезПоследних.Состояние,
		|	СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения,
		|	СостояниеРаботниковОрганизацийСрезПоследних.СостояниеЗавершения
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&Период, Сотрудник В (&Сотрудник)) КАК СостояниеРаботниковОрганизацийСрезПоследних
		|ГДЕ
		|	СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения >= &Период
		|	И СостояниеРаботниковОрганизацийСрезПоследних.Состояние В(&Состояние)";

		Запрос.УстановитьПараметр("Период", НачалоДня(Выборкапраздников.ДатаКалендаря)-1);
		Запрос.УстановитьПараметр("Сотрудник", док.ОтработанноеВремя.ВыгрузитьКолонку("Сотрудник"));
		Запрос.УстановитьПараметр("Состояние", спсотпуск);
		

		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ДатаЧисло = день(Выборкапраздников.ДатаКалендаря);
		Пока Выборка.Следующий() Цикл
			НайденнаяСтрока = док.ОтработанноеВремя.Найти(выборка.Сотрудник, "Сотрудник");
			Если не НайденнаяСтрока = Неопределено Тогда
				если не НайденнаяСтрока["ПервыйВидВремени"+ДатаЧисло]= Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни тогда
					НайденнаяСтрока["ПервыйВидВремени"+ДатаЧисло]= Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни;
					НайденнаяСтрока["ПервыйЧасов"+ДатаЧисло]= 0;
					сообщить("У сотрудника "+выборка.Сотрудник.наименование+" праздничный день "+формат(Выборкапраздников.ДатаКалендаря,"ДЛФ=D")+" заменен на выходной в связи с отпуском");
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры
//ВадимКонец





//////////////////////////////////////////
функция получитьСтрокуФилиала(Подр,ФизЛицо) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодразделенияОрганизаций.Ссылка,
	|	Филиал.Значение КАК Филиал,
	|	Дивизион.Значение КАК Дивизион
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Филиал
	|		ПО ПодразделенияОрганизаций.Ссылка = Филиал.Объект
	|			И (Филиал.Свойство В
	|				(ВЫБРАТЬ
	|					СвойстваОбъектов.Ссылка
	|				ИЗ
	|					ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|				ГДЕ
	|					СвойстваОбъектов.Наименование = ""НазваниеФилиала""))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Дивизион
	|		ПО ПодразделенияОрганизаций.Ссылка = Дивизион.Объект
	|			И (Дивизион.Свойство В
	|				(ВЫБРАТЬ
	|					СвойстваОбъектов.Ссылка
	|				ИЗ
	|					ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|				ГДЕ
	|					СвойстваОбъектов.Наименование = ""Дивизион""))
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Подр);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	текстСтроки="";
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		текстСтроки= "Филиал: "+ВыборкаДетальныеЗаписи.Филиал+?(ВыборкаДетальныеЗаписи.Дивизион=NULL,"","; Дивизион: "+ВыборкаДетальныеЗаписи.Дивизион);
	иначе	
		текстСтроки="";
	КонецЕсли;
	////////получаем счет.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчетаРаботниковОрганизации.Банк,
	|	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
	|ГДЕ
	|	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо = &ФизЛицо
	|	И НЕ ЛицевыеСчетаРаботниковОрганизации.AVT_ЛичныеРеквизиты";
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		текстСтроки=текстСтроки+" ,Банк: "+Выборка.банк.наименование+", РС: "+Выборка.НомерЛицевогоСчета;
	КонецЕсли;

	
	возврат текстСтроки;
	
КонецФункции



/////////Ирина
Функция ПолучитьДанныЛицВПодвал() Экспорт 
	Запрос = Новый Запрос;
	ДатаТек = ТекущаяДата();
	тзДляДок = Новый ТаблицаЗначений;
	тзДляДок.колонки.Добавить("ТекСотр");
	тзДляДок.колонки.Добавить("ДолжТекСотр");
	тзДляДок.колонки.Добавить("ГлБух");
	тзДляДок.колонки.Добавить("ДолжГлБух");
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаТек",         ДатаТек);
	Запрос.УстановитьПараметр("ТекСотр",         глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|             РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
	|             РаботникиОрганизацийСрезПоследних.Должность как ДолжностьТекС,
	|             ФИОФизЛицСрезПоследних.ФизЛицо,
	|             ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" КАК ФИОтекс,
	|             ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
	|             ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРук,
	|             ФИОФизЛицСрезПоследних1.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних1.Отчество, 1, 1) + ""."" КАК ФИОрук
	|ИЗ
	|             РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаТек, Сотрудник.Физлицо = &ТекСотр) КАК РаботникиОрганизацийСрезПоследних
	|                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ФИОФизЛицСрезПоследних
	|                             ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо,
	|             РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаТек, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|                             ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних1
	|                             ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних1.ФизЛицо
	|ГДЕ
	|             ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)";
	
	
	Результат = Запрос.Выполнить();
	ВыборкаРезультата = Результат.Выбрать();
	Если ВыборкаРезультата.Следующий()Тогда               
		Возврат Новый Структура("ФИОтекс,ДолжностьТекС,ФИОрук,ДолжностьРук",ВыборкаРезультата.ФИОтекс,ВыборкаРезультата.ДолжностьТекС,ВыборкаРезультата.ФИОрук,ВыборкаРезультата.ДолжностьРук);
	Иначе
		Возврат  Новый Структура("ФИОтекс,ДолжностьТекС,ФИОрук,ДолжностьРук","","","","");
	КонецЕсли;
	
КонецФункции


///////////////////////////////////////////////////ПечФормы
/////Вадим 30.01.2013 10:02:43
Функция получитьПредставлениеПаспорта(ФизЛицо,датаСреза=Неопределено) экспорт
    
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДатаРегистрацииПоМестуЖительства
		|ИЗ
		|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних";

	Запрос.УстановитьПараметр("Дата", ?(датаСреза=Неопределено,ТекущаяДата(),датаСреза));
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Паспорт=ВыборкаДетальныеЗаписи;
		возврат  "" + Паспорт.ДокументВид + ", серия: " + Паспорт.ДокументСерия + ", № " + Паспорт.ДокументНомер 
									+ ", выдан: " + Формат(Паспорт.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
									+ Паспорт.ДокументКемВыдан;
									//+ ", № подр. " + Паспорт.ДокументКодПодразделения 
									//+ Символы.Таб + "Дата регистрации по месту жительства: " + Формат(Паспорт.ДатаРегистрацииПоМестуЖительства,"ДФ='дд ММММ гггг'; ДП='Не указано'");
									//возврат  "" + Паспорт.ДокументВид + ", серия: " + Паспорт.ДокументСерия + ", № " + Паспорт.ДокументНомер 
									//+ ", выдан: " + Формат(Паспорт.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
									//+ Паспорт.ДокументКемВыдан + ", № подр. " + Паспорт.ДокументКодПодразделения 
									//+ Символы.Таб + "Дата регистрации по месту жительства: " + Формат(Паспорт.ДатаРегистрацииПоМестуЖительства,"ДФ='дд ММММ гггг'; ДП='Не указано'");
	иначе
		возврат "";
	КонецЕсли;

	

	
	
	
	

КонецФункции 
// получитьПредставлениеПаспорта() ВадимКонец

/////Вадим 04.07.2013 10:14:14
Функция получитьДанныеРуководителяОрганизации(дата,Организация) Экспорт 
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДокумента",дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
	Запрос.Текст = ФормированиеПечатныхФормЗК.ПолучитьТекстЗапросаПоОтветственнымЛицам(
	"ДатаДокумента",
	"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)");
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
	|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" КАК ФИОРуководителя
	|ИЗ
	|	ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ОтветственныеЛицаОрганизаций.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		возврат Новый Структура("Наименование,Должность",ВыборкаДетальныеЗаписи.ФИОРуководителя,ВыборкаДетальныеЗаписи.ДолжностьРуководителя);
	Иначе	
		Возврат Неопределено;
	КонецЕсли;

	

КонецФункции 
// получитьРуководителяОрганизации() ВадимКонец



/////Вадим 26.06.2013 11:11:55
Функция ПолучитьПодписьРуководителя(ссылка,фио="") экспорт
	Если сокрЛП(фио)="" тогда
		стр=получитьДанныеРуководителяОрганизации(ссылка.дата,ссылка.Организация);
		если не стр=Неопределено тогда
			фио=стр.Наименование;
		Конецесли;
		
	Конецесли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";

	Запрос.УстановитьПараметр("Объект", ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ПодписьДиректораПоПерсоналу"));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Подпись="";
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Подпись=ВыборкаДетальныеЗаписи.Значение;
		
	КонецЕсли;

	Если СокрЛП(Подпись)="Директор по управлению персоналом" Тогда //Blik 37038 250215 //"Директор по персоналу" тогда
		попытка  //Blik 160215 36777 н
			/// Кунов О.В., 25.07.2017 - 68749
			Если Ссылка.Дата >= '20170724' Тогда
				Возврат "Торопыгин П.А.";
			///
			ИначеЕсли НачалоДня(ссылка.дата)>=  '20150216000000' Тогда  
				возврат "Красик А.Е.";	
			Иначе
				возврат "Вестеровская Ю.П."; 
			КонецЕсли;
		исключение
			возврат "Торопыгин П.А.";
		КонецПопытки;//Blik 160215 36777 к 
	ИначеЕсли СокрЛП(Подпись)="Руководитель отдела" тогда	
		возврат "Толкачева Е.А.";
	ИначеЕсли СокрЛП(Подпись)="Начальник службы" тогда	
		возврат "Потапова Л.Н."; 	
			ИначеЕсли СокрЛП(Подпись)="Менеджер по кадрам" тогда	
		возврат "Баранова Е.И.";
	ИначеЕсли СокрЛП(Подпись) = "Руководитель отдела персонала" тогда //Blik 181115 46142 н	
		возврат "Корнева Л.С.";	
		//Blik 181115 46142 к
	иначе
		возврат ФИО;
	Конецесли;	
	
	
	

КонецФункции 

Функция ПолучитьДолжностьРуководителя(ссылка,Должность="") экспорт
    Если сокрЛП(Должность)="" тогда
		стр=получитьДанныеРуководителяОрганизации(ссылка.дата,ссылка.Организация);
		если не стр=Неопределено тогда
			Должность=стр.Должность;
		Конецесли;
		
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";

	Запрос.УстановитьПараметр("Объект", ссылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ПодписьДиректораПоПерсоналу"));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Подпись="";
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Подпись=ВыборкаДетальныеЗаписи.Значение;
		
	КонецЕсли;

	Если не СокрЛП(Подпись)="" тогда
		возврат Подпись;
	
	иначе
		возврат Должность;
	Конецесли;	

	
	
	
	

КонецФункции 

// ПолучитьПодписьРуководителя() ВадимКонец








/////////////////////////////////////////////////////ДОступКДокументу
///Вадим 05.11.2013 14:48:31
Процедура проверитьДоступКДокументуПоГруппамДоступа(Сотрудник,отказ)
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыПользователейПользователиГруппы.Ссылка
		|ПОМЕСТИТЬ вт_ГруппыПользователей
		|ИЗ
		|	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
		|ГДЕ
		|	ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиПравДоступаПользователей.ОбъектДоступа КАК ссылка
		|ПОМЕСТИТЬ ВТ_ГРуппыДоступаФизЛиц
		|ИЗ
		|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
		|ГДЕ
		|	НастройкиПравДоступаПользователей.Пользователь В
		|			(ВЫБРАТЬ
		|				выб.Ссылка
		|			ИЗ
		|				вт_ГруппыПользователей КАК выб)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Физлицо.ГруппаДоступаФизическогоЛица,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.Физлицо.ГруппаДоступаФизическогоЛица В
		|				(ВЫБРАТЬ
		|					выб.ссылка
		|				ИЗ
		|					ВТ_ГРуппыДоступаФизЛиц КАК выб)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Проверка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудник)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.ФизлицоГруппаДоступаФизическогоЛица
		|ИЗ
		|	вт КАК вт
		|ГДЕ
		|	НЕ вт.Проверка
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.ФизлицоГруппаДоступаФизическогоЛица";

	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сообщить("у вас нет доступа к группе "+ВыборкаДетальныеЗаписи.ФизлицоГруппаДоступаФизическогоЛица);
		отказ=истина;
	КонецЦикла;
	

КонецПроцедуры
//ВадимКонец
/////Вадим 01.02.2013 8:25:31
процедура ДоступКДокументуПоГруппамДоступа(док,отказ) Экспорт 
	если РольДоступна("ПолныеПрава") тогда
		возврат;
	Конецесли;	
	
	рекШапки=док.Метаданные().Реквизиты.Найти("Сотрудник");
	
	Если не рекШапки=Неопределено тогда
		проверитьДоступКДокументуПоГруппамДоступа(док[рекШапки.имя],отказ);
	КонецЕсли;	  
	для каждого стрТаб из док.Метаданные().ТабличныеЧасти цикл
		рек=док.Метаданные().ТабличныеЧасти[стрТаб.имя].Реквизиты.Найти("Сотрудник");
		Если не рек=Неопределено тогда
			проверитьДоступКДокументуПоГруппамДоступа(док[стрТаб.имя].ВыгрузитьКолонку(рек.имя),отказ);
		Конецесли;
	КонецЦикла;
		
		
		
		
	
	
	
КонецПроцедуры

процедура ДоступКДокументу(ДатДок,Ответственный,толькоПросмотр,отказ=Неопределено) Экспорт 
	если РольДоступна("ПолныеПрава") ИЛИ ТолькоПросмотр тогда
		возврат;
	Конецесли;	
	
	//если не Ответственный=ПараметрыСеанса.ТекущийПользователь и не получиьЗначениеДопПрав("ПРГ_РазрешитьПросмотреДокументовДругихПользователей") тогда
	стр=получитьПравоДоступаКДокументу(Ответственный);
	если не Ответственный=ПараметрыСеанса.ТекущийПользователь и стр.отказ и не отказ=Неопределено и не сокрлп(Ответственный)="Администратор" тогда
		отказ =истина;
		
		сообщить("у вас нет прав для просмотра документов этого пользовотеля!");
	Конецесли;
		
	толькоПросмотр=стр.толькоПросмотр;  //или ДатДок<получитьДатуЗапретаРедактирования(); Шевченков
	
	
	
КонецПроцедуры


/////Вадим 22.02.2013 10:33:59
Функция получитьПравоДоступаКДокументу(Ответственный)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_ДополнительныеПраваДоступа.Пользователь,
	|	ПРГ_ДополнительныеПраваДоступа.ПодчиненныйПользователь,
	|	ПРГ_ДополнительныеПраваДоступа.ПолныйДоступ,
	|	ПРГ_ДополнительныеПраваДоступа.ТолькоПросмотр
	|ИЗ
	|	РегистрСведений.ПРГ_ДополнительныеПраваДоступа КАК ПРГ_ДополнительныеПраваДоступа
	|ГДЕ
	|	ПРГ_ДополнительныеПраваДоступа.Пользователь = &Пользователь
	|	И (ПРГ_ДополнительныеПраваДоступа.ПодчиненныйПользователь = &ПодчиненныйПользователь
	|			ИЛИ ПРГ_ДополнительныеПраваДоступа.ПолныйДоступ)";
	Запрос.УстановитьПараметр("ПодчиненныйПользователь", Ответственный);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	стр=Новый Структура;
	если Выборка.Следующий() тогда
		стр.Вставить("отказ",ложь);
		стр.Вставить("толькоПросмотр",Выборка.ТолькоПросмотр);
	иначе	
		стр.Вставить("отказ",истина);
		стр.Вставить("толькоПросмотр",ложь);
	Конецесли;
	
    возврат стр;
	

КонецФункции 
// получитьПравоДоступаКДокументу() ВадимКонец




/////Вадим 01.02.2013 8:34:29
Функция получиьЗначениеДопПрав(Право)
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияДополнительныхПравПользователя.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияДополнительныхПравПользователя
		|ГДЕ
		|	ЗначенияДополнительныхПравПользователя.Пользователь = &Пользователь
		|	И ЗначенияДополнительныхПравПользователя.Право = &Право";

	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Право", ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию(Право));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		возврат	ВыборкаДетальныеЗаписи.Значение;
	иначе	
		возврат ложь;
	КонецЕсли;
 	
	

КонецФункции 
// получиьЗначениеДопПрав() ВадимКонец
	
	
// ДоступКДокументу() ВадимКонец

/////Вадим 22.02.2013 15:46:04
Функция получитьДатуЗапретаРедактирования()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГраницыЗапретаИзмененияДанных.Организация,
	|	ГраницыЗапретаИзмененияДанных.Пользователь,
	|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
	|ИЗ
	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	|ГДЕ
	|	ГраницыЗапретаИзмененияДанных.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	если Выборка.Следующий() тогда
		возврат Выборка.ГраницаЗапретаИзменений;
	иначе
		возврат ТекущаяДата();
		
	КонецЕсли;

	

КонецФункции 
// получитьДатуЗапретаРедактирования() ВадимКонец

//////////////////////////////////////////////////////////////Ебучие склонение

Функция проскланятьФИО(ФИО,Падеж=2) Экспорт 
    ввв="";
	МассивСлов 	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИО)," ");
	УниверсальныеМеханизмы.ПросклонятьФамилиюИмяОтчество(глЗначениеПеременной("глКомпонентаСклоненияФИО"),СокрЛП(МассивСлов[0]),МассивСлов[1],МассивСлов[2],Падеж,,ввв);

	возврат ввв;
КонецФункции 

Функция ПросклонятьПодразделениеДолжность(Объект="", Падеж=2) Экспорт
	
	ВыхСтрока = "";
	СклонятьВсе=ПРГ_Обработки.получитьзначениесвойстобъекта(Объект,"СклонятьВсе");
	СклонятьВсеД=ПРГ_Обработки.получитьзначениесвойстобъекта(Объект,"СклонятьВсеД");
	Если (СклонятьВсе=Неопределено или не СклонятьВсе )
		и (СклонятьВсеД=Неопределено или не СклонятьВсеД) тогда
		
		Если Падеж<1 или Падеж>6 Тогда //если неправильно передали падеж по умолчанию установим равным 2 (Родительный падеж)
			Падеж = 2;	
		КонецЕсли;
		
		
		МассивСлов 	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
		
		ПервоеСлово= "";
		остальныеСлова="";
		
		ПервоеСлово	= 	МассивСлов[0];
		Для ии=1 По МассивСлов.Количество()-1 Цикл
			остальныеСлова=остальныеСлова+" "+МассивСлов[ии];
		КонецЦикла;
		
		Если УниверсальныеМеханизмыПросклонять(ПервоеСлово,Падеж,,ВыхСтрока) тогда
			
			
			Возврат ВыхСтрока+остальныеСлова ;
		Иначе
			Возврат  СокрЛП(Объект);
		КонецЕсли;
	иначе
		Возврат ПросклонятьФразуПоСловам(Объект,падеж);
	КонецЕсли;

	
КонецФункции

Функция ПросклонятьФразуПоСловам(Знач ИсходнаяСтрока, Падеж=2) Экспорт
	
	//Blik 69932 230817 н
	ПОЛ=Перечисления.ПолФизическихЛиц.Мужской;
	//Blik 69932 230817 к
	
	Результат = "";
    Город="";
	Если не Найти(ИсходнаяСтрока,"Дополнительный офис")=0 тогда	
		Город=прав(ИсходнаяСтрока,СтрДлина(ИсходнаяСтрока)-20);
		ИсходнаяСтрока=	"Дополнительный офис";
	Конецесли;	
	
    ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
    Если СтрДлина(ИсходнаяСтрока) = 0 Тогда
        Возврат Результат;
    КонецЕсли;

    Поз = Найти(ИсходнаяСтрока, " ");
    Пока Поз > 0 Цикл

        СловоВПадеже = "";

        Слово = Лев(ИсходнаяСтрока, Поз-1);
		
		//Blik 69932 230817 н
        //УниверсальныеМеханизмыПросклонять(Слово,Падеж, , СловоВПадеже);
		УниверсальныеМеханизмыПросклонять(Слово,Падеж,ПОЛ , СловоВПадеже);
		//Blik 69932 230817 к
		
        Результат = СокрЛП(Результат + " " + СловоВПадеже);
        ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, Поз));

        Если ПустаяСтрока(ИсходнаяСтрока) Тогда
            Прервать; // Это перестраховка. Цикл и так должен прерваться
        КонецЕсли;

        Поз = Найти(ИсходнаяСтрока, " ");
    КонецЦикла;

    Если НЕ ПустаяСтрока(ИсходнаяСтрока) Тогда // добавляем заключительное слово
        СловоВПадеже = "";
		//Blik 69932 230817 н
		//УниверсальныеМеханизмыПросклонять( ИсходнаяСтрока, Падеж, , СловоВПадеже);
		УниверсальныеМеханизмыПросклонять(ИсходнаяСтрока,Падеж,ПОЛ , СловоВПадеже);
		//Blik 69932 230817 к
		Результат = СокрЛП(Результат + " " + СловоВПадеже);

    КонецЕсли;
    Возврат Результат+" "+Город;


КонецФункции 

функция УниверсальныеМеханизмыПросклонять(Знач Фраза = "", Падеж = 1, Пол = Неопределено, Результат)
	СловоВПадеже="";
	возр=ложь;
	Если СокрЛП(Фраза)="ассиcтент" тогда
		ИсходнаяСтрока=Фраза;
		возр=УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), "Менеджер", Падеж,Пол , СловоВПадеже);
		Результат=ИсходнаяСтрока+прав(СловоВПадеже,СтрДлина(СловоВПадеже)-8);
	ИначеЕсли сокрЛП(Фраза)="Участок" тогда
		ИсходнаяСтрока=Фраза;
		возр=УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Фраза, Падеж,Пол , СловоВПадеже);
		Результат=?("Участок"=СловоВПадеже,"Участок","Участк"+прав(СловоВПадеже,СтрДлина(СловоВПадеже)-7));	
		//Blik 69932 280817 н
	ИначеЕсли  Прав(СокрЛП(Фраза),2)="ий" тогда
		ИсходнаяСтрокаЧасть = Лев(СокрЛП(Фраза),СтрДлина(Фраза)-2);
		Если Падеж = 1 Тогда
			ИсходнаяСтрока = Фраза;
		ИначеЕсли Падеж = 2 Тогда
			ИсходнаяСтрока = ИсходнаяСтрокаЧасть+"его";
		ИначеЕсли Падеж = 3 Тогда
			ИсходнаяСтрока = ИсходнаяСтрокаЧасть+"ему";
		ИначеЕсли Падеж = 4 Тогда
			ИсходнаяСтрока = ИсходнаяСтрокаЧасть+"его";
		ИначеЕсли Падеж = 5 Тогда
			ИсходнаяСтрока = ИсходнаяСтрокаЧасть+"им";
		ИначеЕсли Падеж = 6 Тогда
			ИсходнаяСтрока = ИсходнаяСтрокаЧасть+"ем";
		КонецЕсли;
		Результат = ИсходнаяСтрока;
		возр = Истина;
		//Blik 69932 280817 к
	Иначе
		возр=УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Фраза, Падеж,Пол , Результат);
	Конецесли;
	
	возврат возр;		
КонецФункции	


///Вадим 04.02.2014 14:43:28   бп 
Процедура ПроставитьОсновнойСчетОрганизацииПользователя(Организация,БанковскийСчет) Экспорт 
	СчетПользователя=ПолучитьНастройкуПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ПРГ_ОсновнойСчетОрганизации);
	Если не СчетПользователя=Неопределено тогда
		Если ЗначениеЗаполнено(СчетПользователя) тогда
			БанковскийСчет=СчетПользователя;
		иначе	
			БанковскийСчет=Организация.ОсновнойБанковскийСчет;
		Конецесли;	
	иначе	
		БанковскийСчет=Организация.ОсновнойБанковскийСчет;
	Конецесли;
КонецПроцедуры
//ВадимКонец

Функция ПроверкаПроведенияДокументаНаДатуЗапрета(ДокументОъект) Экспорт
	// Параметр получаемый Метаданные().Имя, если нашли вернем истина
	МассивДокументов = Новый Массив;
	
	МассивДокументов.Добавить("ЗарплатаКВыплатеОрганизаций");
	МассивДокументов.Добавить("ИсполнительныйЛист");
	МассивДокументов.Добавить("ОтпускПоУходуЗаРебенком");
	МассивДокументов.Добавить("РасчетыПоСтраховымВзносам");
	МассивДокументов.Добавить("ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций");
	МассивДокументов.Добавить("ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций");
	МассивДокументов.Добавить("НДФЛПодтверждениеПраваНаИмущественныйВычет");
	МассивДокументов.Добавить("ЗаказПоставщику");
	МассивДокументов.Добавить("ЗакрытиеЗаявокНаРасходованиеСредств");
	МассивДокументов.Добавить("ЗаявкаНаРасходованиеСредств");
	МассивДокументов.Добавить("ПланДвиженияДенежныхСредств");
	МассивДокументов.Добавить("ПланПроизводства");
	МассивДокументов.Добавить("УЗ_ПотребностиПроизводства");
	
	// Кадровые документы, добавил 11042014
	МассивДокументов.Добавить("ПриемНаРаботуВОрганизацию");
	МассивДокументов.Добавить("КадровоеПеремещениеОрганизаций");
	МассивДокументов.Добавить("УвольнениеИзОрганизаций");
	МассивДокументов.Добавить("ПланДвиженияДенежныхСредств"); // графики работы
	МассивДокументов.Добавить("НеявкиИБолезниОрганизаций");
	МассивДокументов.Добавить("ОтпускаОрганизаций");
	МассивДокументов.Добавить("КомандировкиОрганизаций");
	МассивДокументов.Добавить("ВозвратНаРаботуОрганизаций");
	МассивДокументов.Добавить("ПРГ_ОтражениеВремениОтсутствия");
	МассивДокументов.Добавить("Авт_ИзменениеГрафикаРаботы");
	МассивДокументов.Добавить("ПРГ_ТабельПоЛиниям");
	МассивДокументов.Добавить("ПРГ_ОтменаГрафиковОтпусков");
	МассивДокументов.Добавить("AVT_ПриказОСменеФамилии");
	МассивДокументов.Добавить("AVT_РаботаВПраздникиИВыходные");
	МассивДокументов.Добавить("AVT_РаботаВСверхурочныеЧасы");
    МассивДокументов.Добавить("AVT_ИзменениеШтатногоРасписания");
	МассивДокументов.Добавить("AVT_СлужебныеПоездки");
	МассивДокументов.Добавить("AVT_РегистрацияБольничныхЛистов");
	//Blik 110815 42768 добавила табель н
	МассивДокументов.Добавить("ТабельУчетаРабочегоВремениОрганизации");
	//Blik 110815 42768 добавила табель к
	//МассивДокументов.Добавить("ПланДвиженияДенежныхСредств");
    МассивДокументов.Добавить("ОплатаПоСреднемуЗаработку");//Blik 060516 52177
	//{16.01.2015 Евгений заявка №б/y 
	МассивДокументов.Добавить("УстановкаЦенНоменклатуры"); 
	МассивДокументов.Добавить("ПланПродаж");	
	//16.01.2015 Евгений} 
	//20.01.2015 по заявке Суворовой Екатерины
	МассивДокументов.Добавить("УстановкаСкидокНоменклатуры");
	МассивДокументов.Добавить("ОтменаСкидокНоменклатуры");
	МассивДокументов.Добавить("ПЦ_ЦеновыеЭшелоны");
	МассивДокументов.Добавить("УсловияПоставокПоДоговорамКонтрагентов");	
	//20.01.2015
	//m.ionov@a-prof.ru 10.02.2015
	МассивДокументов.Добавить("ЗаказПокупателя");
	МассивДокументов.Добавить("ВнутреннийЗаказ");
	МассивДокументов.Добавить("СП_ЗаданиеНаПодбор");
	МассивДокументов.Добавить("ПТЛ_ЗаданиеНаПеревозку");
	МассивДокументов.Добавить("ПТЛ_ПланДоставки");
	//----m.ionov@a-prof.ru---
	//начало изменений Ожиганов 14.05.2015 
	МассивДокументов.Добавить("РезервированиеТоваров");
	МассивДокументов.Добавить("ЗакрытиеЗаказовПокупателей");
	МассивДокументов.Добавить("СП_ЗаданиеНаСмену");
	//конец изменений  
	//{18.05.2015 Островерхий заявка №б/н 
	МассивДокументов.Добавить("ЗакрытиеВнутреннихЗаказов"); 
	//18.05.2015 Островерхий} 
	//Blik 171016 57983 н
	Если ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя(ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию("РедактированиеДоверенности")) Тогда
		МассивДокументов.Добавить("Доверенность"); 
	КонецЕсли;
	//Blik 171016 57983 к
	Если МассивДокументов.Найти(ДокументОъект) <> Неопределено Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Функция ПроверкаПроведенияРегистраСведенийНаДатуЗапрета(РегистрОъект, РольДляПроверки = Неопределено) Экспорт
	// Параметр получаемый Метаданные().Имя, если нашли вернем истина
	МассивРегистров = Новый Массив;
	
	МассивРегистров.Добавить("НДФЛПрименениеВычетов");
	МассивРегистров.Добавить("НДФЛСтандартныеВычетыФизлиц");//Blik 43663 040915
    МассивРегистров.Добавить("НДФЛРазмерВычетов");//Blik 50243 160316
	
	Если МассивРегистров.Найти(РегистрОъект.Метаданные().Имя) <> Неопределено Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции



// <- Шевченков №33032
// Далее процедуры для проверки взаиморасчетов по договорам

Функция СформироватьАктСверки(Регистратор, Контрагент, ДоговорКонтрагента, НачДата)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(внутр.СуммаОборотКт) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				,
	|				Регистратор,
	|				Счет В ИЕРАРХИИ (&Счет6001),
	|				,
	|				Субконто1 = &Контрагент
	|					И Субконто2 = &ДоговорКонтрагента,
	|				,
	|				) КАК ХозрасчетныйОбороты
	|	ГДЕ
	|		ХозрасчетныйОбороты.Регистратор <> &Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ХозрасчетныйОстатки.СуммаОстатокДт)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				,
	|				Счет = &Счет6002,
	|				,
	|				Субконто1 = &Контрагент
	|					И Субконто2 = &ДоговорКонтрагента) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ХозрасчетныйОбороты.СуммаОборотКт)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				,
	|				Регистратор,
	|				Счет В ИЕРАРХИИ (&Счет76),
	|				,
	|				Субконто1 = &Контрагент
	|					И Субконто2 = &ДоговорКонтрагента,
	|				,
	|				) КАК ХозрасчетныйОбороты
	|	ГДЕ
	|		ХозрасчетныйОбороты.Регистратор <> &Регистратор) КАК внутр";
	Запрос.УстановитьПараметр("Счет6001", ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01"));
	Запрос.УстановитьПараметр("Счет6002", ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02"));
	Запрос.УстановитьПараметр("Счет76", ПланыСчетов.Хозрасчетный.НайтиПоКоду("76"));
	Запрос.УстановитьПараметр("НачДата", НачалоГода(НачДата));
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Если РезТЗ.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		//Сообщить(Строка(РезТЗ[0].Сумма));
		Возврат РезТЗ[0].Сумма;
	КонецЕсли;
		
КонецФункции

// Проверим возможность вести взаиморасчеты по договору, если взаиморасчеты запрещены вернем ложь
Функция РазрешеноПроводитьВзаиморасчетыПоДоговору(ДокументРегистратор, ДатаДокумента = Неопределено, ТаблицаВзаиморасчетов = Неопределено) Экспорт
	
	//Если РольДоступна("ПолныеПрава") Тогда Возврат Истина КонецЕсли;
	СуммаВзаиморасчетов = 0;
	ТекДата   = ?(ДатаДокумента = Неопределено, НачалоДня(ТекущаяДата()), НачалоДня(ДатаДокумента));

	Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		ТаблицаДоговоров = ТаблицаЗаявкиНаОплату(ДокументРегистратор, ТекДата);		
	ИначеЕсли ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ТаблицаДоговоров = ТаблицаПоступлениеТоваровИУслуг(ДокументРегистратор, ТекДата);
	ИначеЕсли ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		ТаблицаДоговоров = ТаблицаПоступлениеНМА(ДокументРегистратор, ТекДата);
	ИначеЕсли ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ТаблицаДоговоров = ТаблицаЗаказПоставщику(ДокументРегистратор, ТекДата);
	ИначеЕсли ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаДолга") Тогда 		
		ТаблицаДоговоров = ТаблицаВзаиморасчетов;
	КонецЕсли;    	
	
	Для Каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		
		Разрешено = Истина;
		
		/// Кунов О.В., 13.05.2016 - 52427
		КонтрагентыПоставщикиСиМ = Справочники.ПРГ_Служебный.НайтиПоНаименованию("Контрагенты_Поставщики_СиМ");
		КонтрагентыПоставщикиСиМКорректен = ЗначениеЗаполнено(КонтрагентыПоставщикиСиМ) И
			ТипЗнч(КонтрагентыПоставщикиСиМ.Объект) = Тип("СправочникСсылка.Контрагенты") И
			КонтрагентыПоставщикиСиМ.Объект.ЭтоГруппа;
			
		Если КонтрагентыПоставщикиСиМКорректен И
				СтрокаДоговора.Контрагент.ПринадлежитЭлементу(КонтрагентыПоставщикиСиМ.Объект) И (
				(ЗначениеЗаполнено(СтрокаДоговора.ДоговорКонтрагента.СрокДействия) И СтрокаДоговора.ДоговорКонтрагента.СрокДействия < ТекДата) Или
				(ЗначениеЗаполнено(СтрокаДоговора.ДоговорКонтрагента.Дата) И СтрокаДоговора.ДоговорКонтрагента.Дата > ТекДата)
			) Тогда
		///
			СформироватьСообщениеОЗапретеВзаиморасчетов(ДокументРегистратор.Ссылка, СтрокаДоговора.ДоговорКонтрагента, , ТекДата);
			Разрешено = Ложь;
			Возврат Разрешено; // Срок действия договора истек
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(СтрокаДоговора.ДоговорКонтрагента.СуммаПоДоговору) Тогда Продолжить КонецЕсли;
		
		//Если НЕ (ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаДолга") И (СтрокаДоговора.СчетУчетаРасчетов <> ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01") ИЛИ СтрокаДоговора.СчетУчетаРасчетов <> ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02"))) Тогда Продолжить КонецЕсли;
		
		Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			Если НЕ (СтрокаДоговора.СчетУчетаРасчетов <> ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01") ИЛИ СтрокаДоговора.СчетУчетаРасчетов <> ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02")) Тогда Продолжить КонецЕсли;
		КонецЕсли;
				
		//СуммаВзаиморасчетов = СформироватьАктСверки(ДокументРегистратор, СтрокаДоговора.Контрагент, СтрокаДоговора.ДоговорКонтрагента, '20140101000000');
		//ТекСумма = СуммаВзаиморасчетов + СтрокаДоговора.Сумма;
		//
		////Сообщить("Сумма взаиморасчетов по документу: " + Строка(СтрокаДоговора.Сумма));
		////Сообщить("Сумма взаиморасчетов по договору : " + Строка(СуммаВзаиморасчетов));
		////Сообщить("Сумма взаиморасчетов проверка    : " + Строка(ТекСумма));
		//
		//Если ТекСумма <= СтрокаДоговора.ДоговорКонтрагента.СуммаПоДоговору Тогда
		//	Разрешено = Истина;
		//Иначе
		//	Разрешено = Ложь;
		//	СформироватьСообщениеОЗапретеВзаиморасчетов(ДокументРегистратор, СтрокаДоговора.ДоговорКонтрагента, СтрокаДоговора.Сумма);
		//	Возврат Разрешено;
		//КонецЕсли;		
		
	КонецЦикла;
	
	Возврат Разрешено;
	
КонецФункции

Процедура СформироватьСообщениеОЗапретеВзаиморасчетов(ДокументРегистратор, Договор, Сумма = Неопределено, Дата = Неопределено)
	
	Сообщить("Документ: " + Строка(ДокументРегистратор));
	Если ЗначениеЗаполнено(Сумма) Тогда
		Сообщить("По договору " + Строка(Договор) + " превышена допустимая сумма по взаиморасчетам. Проведение документа невозможно");
	ИначеЕсли ЗначениеЗаполнено(Дата) Тогда
		/// Кунов О.В., 13.05.2016 - 52427
		Сообщить("По договору " + Строка(Договор) + " ограничено ведение взаиморасчетов по дате заключения/расторжения договора. Проведение документа невозможно");		
		/// 
	КонецЕсли;
		
КонецПроцедуры
                             
Функция ТаблицаЗаявкиНаОплату(ДокументРегистратор, Договор, ДатаДокумента = Неопределено)

    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СУММА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Контрагент,
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументРегистратор);
	
    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТаблицаПоступлениеТоваровИУслуг(ДокументРегистратор, Договор, ДатаДокумента = Неопределено)

    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", ДокументРегистратор);
	
    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТаблицаПоступлениеНМА(ДокументРегистратор, Договор, ДатаДокумента = Неопределено)

    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНМА.Ссылка КАК Ссылка,
	|	ПоступлениеНМА.Контрагент КАК Контрагент,
	|	ПоступлениеНМА.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеНМА.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеНМА КАК ПоступлениеНМА
	|ГДЕ
	|	ПоступлениеНМА.Ссылка = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", ДокументРегистратор);
	
    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТаблицаЗаказПоставщику(ДокументРегистратор, Договор, ДатаДокумента = Неопределено)

    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаказПоставщику.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", ДокументРегистратор);
	
    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТаблицаКорректировкаДолга(ДокументРегистратор, Договор, ДатаДокумента = Неопределено)

    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор КАК Ссылка,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Контрагент КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , Регистратор, ) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОбороты.Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор";
	Запрос.УстановитьПараметр("Регистратор", ДокументРегистратор);
	
    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// ->

// <- Шевченков
// Процедуры для работы со служебным справочником

Функция ПолучитьСсылкуНаЭлементСправочника(Наим) Экспорт
	
	ТекЭлемент = Справочники.ПРГ_Служебный.НайтиПоНаименованию(Наим);
	Возврат ТекЭлемент;
	
КонецФункции

Функция ПолучитьЗначениеПараметра(ТекЭлемент, ТекПараметр) Экспорт
	
	//ТекЗначениеПараметра = ТекЭлемент.ТаблицаПараметров.Найти(ТекПараметр, "Параметр");
	//Возврат ТекЗначениеПараметра;
	
КонецФункции

Функция ПроверитьСписокИнициаторовДляПросмотраЗаявокПоТекущемуПользователю(Заявка) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр,
	|	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &Ссылка
	|	И ПРГ_СлужебныйТаблицаПараметров.Параметр = &Параметр
	|	И ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра = &ЗначениеПараметра";
	Запрос.УстановитьПараметр("Ссылка", ПолучитьСсылкуНаЭлементСправочника("ДоступНаПросмотрЧужихЗаявок"));
	Запрос.УстановитьПараметр("Параметр", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ЗначениеПараметра", Заявка.Ответственный);
	
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(РезТЗ.Количество()>0, Ложь, Истина);
	
КонецФункции



Функция ПолучитьПодразделениеОрганизации(Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|ГДЕ
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение";
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	РезТЗ = Запрос.Выполнить().Выгрузить();
	Если РезТЗ.Количество() > 0 Тогда
		Возврат РезТЗ[0].ПодразделениеОрганизации;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

/// Кунов О.В., 05.02.2016 - 47789
Функция ПолучитьПоказатели(НоменклатураМассив, ЧитаемыеНазвания = Ложь) Экспорт
	
	Если ЧитаемыеНазвания Тогда
		ПоказателиСоответствие = Новый Соответствие;
		ПоказателиСоответствие.Вставить("УЗ_ПроцентСухихВеществ", "СВ");
		ПоказателиСоответствие.Вставить("УЗ_Кислотность", "Кислотность");
		ПоказателиСоответствие.Вставить("ПРГ_Влажность", "Влажность");
		ПоказателиСоответствие.Вставить("ПРГ_Плотность", "Плотность");
		ПоказателиСоответствие.Вставить("ПРГ_pH", "pH");
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРГ_ВидыПоказателейДляГруппировокНоменклатуры.ИмяРеквизита КАК Показатель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ВидыПоказателейДляГруппировокНоменклатуры КАК ПРГ_ВидыПоказателейДляГруппировокНоменклатуры
	|		ПО Номенклатура.ГруппировкаНоменклатуры = ПРГ_ВидыПоказателейДляГруппировокНоменклатуры.ГруппировкаНоменклатуры
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)");
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураМассив);
	Показатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
	
	Если ЧитаемыеНазвания Тогда
		Для Н = 0 По Показатели.Количество()-1 Цикл
			Показатели[Н] = ПоказателиСоответствие[Показатели[Н]];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции
///

/// Кунов О.В., 28.03.2016 - 49298
Функция ПолучитьБазисСВ(Номенклатура, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПРГ_ПериодическиеСвойстваОбъектовСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.ПРГ_ПериодическиеСвойстваОбъектов.СрезПоследних(
	|			&ДатаСреза,
	|			Объект = &Номенклатура
	|				И Свойство = &Свойство) КАК ПРГ_ПериодическиеСвойстваОбъектовСрезПоследних");
	
	Запрос.УстановитьПараметр("ДатаСреза", 		Дата);
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Свойство",		ПланыВидовХарактеристик.СвойстваОбъектов.БазисСВ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;
	Иначе
		Результат = Номенклатура.ПРГ_Базис;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Blik 030616 н
///
// Функция Дата прописью 
// Параметры: 
// ДП - Дата 
// Возвращаемое значение: 
// дата прописью 
//  
Функция ДатаПрописью(ДП) Экспорт 
	стрРез = ""; 
	Д=Формат(ДП,"ДЛФ=D"); 
	спсМес = Новый СписокЗначений; 
	спсМес.Добавить("января"); 
	спсМес.Добавить("февраля"); 
	спсМес.Добавить("марта"); 
	спсМес.Добавить("апреля"); 
	спсМес.Добавить("мая"); 
	спсМес.Добавить("июня"); 
	спсМес.Добавить("июля"); 
	спсМес.Добавить("августа"); 
	спсМес.Добавить("сентября"); 
	спсМес.Добавить("октября"); 
	спсМес.Добавить("ноября"); 
	спсМес.Добавить("декабря"); 
	
	спсЧисл = Новый СписокЗначений; 
	спсЧисл.Добавить("первое","первого"); 
	спсЧисл.Добавить("второе","второго"); 
	спсЧисл.Добавить("третье","третьего"); 
	спсЧисл.Добавить("четвертое","четвертого"); 
	спсЧисл.Добавить("пятое","пятого"); 
	спсЧисл.Добавить("шестое","шестого"); 
	спсЧисл.Добавить("седьмое","седьмого"); 
	спсЧисл.Добавить("восьмое","восьмого"); 
	спсЧисл.Добавить("девятое","девятого"); 
	
	//числительные им.падеж 
	спсЧислИм = Новый СписокЗначений; 
	спсЧислИм.Добавить("тысяча","тысячного"); 
	спсЧислИм.Добавить("две тысячи","двухтысячного"); 
	спсЧислИм.Добавить("три тысячи","трехтысячного"); 
	спсЧислИм.Добавить("четыре тысячи","четырёхтысячного"); 
	спсЧислИм.Добавить("пять","пятитысячного"); 
	спсЧислИм.Добавить("шесть","шеститысячного"); 
	спсЧислИм.Добавить("семь","семитысячного"); 
	спсЧислИм.Добавить("восемь","восьмитысячного"); 
	спсЧислИм.Добавить("девять","девятитысячного"); 
	
	спсСотни = Новый СписокЗначений; 
	спсСотни.Добавить("сто"); 
	спсСотни.Добавить("двести"); 
	спсСотни.Добавить("триста"); 
	спсСотни.Добавить("четыреста"); 
	спсСотни.Добавить("пятьсот"); 
	спсСотни.Добавить("шестьсот"); 
	спсСотни.Добавить("семьсот"); 
	спсСотни.Добавить("восемьсот"); 
	спсСотни.Добавить("девятьсот"); 
	
	//десятки им.падеж 
	спсДесИм = Новый СписокЗначений; 
	спсДесИм.Добавить("","десятого"); 
	спсДесИм.Добавить("двадцать","двадцатого"); 
	спсДесИм.Добавить("тридцать","тридцатого"); 
	спсДесИм.Добавить("сорок","сорокового"); 
	спсДесИм.Добавить("пятьдесят","пятидесятого"); 
	спсДесИм.Добавить("шестьдесят","шестидесятого"); 
	спсДесИм.Добавить("семьдесят","семидесятого"); 
	спсДесИм.Добавить("восемьдесят","восьмидесятого"); 
	спсДесИм.Добавить("девяносто","девяностого"); 
	
	//субдесятки род.падеж 
	спсСубДесРод = Новый СписокЗначений; 
	спсСубДесРод.Добавить("одиннадцатого"); 
	спсСубДесРод.Добавить("двенадцатого"); 
	спсСубДесРод.Добавить("тринадцатого"); 
	спсСубДесРод.Добавить("четырнадцатого"); 
	спсСубДесРод.Добавить("пятнадцатого"); 
	спсСубДесРод.Добавить("шестнадцатого"); 
	спсСубДесРод.Добавить("семнадцатого"); 
	спсСубДесРод.Добавить("восемнадцатого"); 
	спсСубДесРод.Добавить("девятнадцатого"); 
	
	спсДес = Новый СписокЗначений; 
	спсДес.Добавить("десятое"); 
	спсДес.Добавить("двадцатое","двадцать"); 
	спсДес.Добавить("тридцатое","тридцать"); 
	спсДес.Добавить("сороковое","тридцать"); 
	спсДес.Добавить("пятидесятое","тридцать"); 
	спсДес.Добавить("шестидесятое","тридцать"); 
	спсДес.Добавить("семидесятое","тридцать"); 
	
	спсСубДес = Новый СписокЗначений; 
	спсСубДес.Добавить("одиннадцатое"); 
	спсСубДес.Добавить("двенадцатое"); 
	спсСубДес.Добавить("тринадцатое"); 
	спсСубДес.Добавить("четырнадцатое"); 
	спсСубДес.Добавить("пятнадцатое"); 
	спсСубДес.Добавить("шестнадцатое"); 
	спсСубДес.Добавить("семнадцатое"); 
	спсСубДес.Добавить("восемнадцатое"); 
	спсСубДес.Добавить("девятнадцатое"); 
	
	спсДаты = СтрЗаменить(СокрЛП(Д),".",Символы.ПС); 
	//разбираем день 
	стрДень = СокрЛП(Число(СтрПолучитьСтроку(спсДаты,1))); 
	Если СтрДлина(стрДень)=1 Тогда 
		стрДень = спсЧисл.Получить(Число(стрДень)-1).Значение; 
	Иначе 
		десДень = Число(Лев(стрДень,1)); 
		едДень = Число(Прав(стрДень,1)); 
		
		Если едДень=0 Тогда 
			стрДень = спсДес.Получить(десДень-1).Значение; 
		Иначе 
			Если десДень>1 Тогда 
				т = Строка(спсДес.Получить(десДень-1)); 
				стрДень = т+" "+Строка(спсЧисл.Получить(едДень-1).Значение); 
			Иначе 
				стрДень = спсСубДес.Получить(едДень-1).Значение; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	//разбираем месяц 
	стрМес = спсМес.Получить(Число(СтрПолучитьСтроку(спсДаты,2))-1).Значение; 
	
	//разбираем год 
	стрГод = СтрПолучитьСтроку(спсДаты,3); 
	длинаГода = СтрДлина(стрГод); 
	Если длинаГода=4 Тогда 
		тыс = Сред(стрГод,1,1); сот = Сред(стрГод,2,1); дес = Сред(стрГод,3,1); ед = Сред(стрГод,4,1); 
		_т = спсЧислИм.Получить(Число(тыс)-1).Значение; 
		Если (Число(сот)=0) и (Число(дес)=0) и (Число(ед)=0) Тогда 
			миллениум = Строка(спсЧислИм.Получить(Число(тыс)-1)); 
			стрГод = миллениум; 
		Иначе 
			с = ""; дс = ""; е = ""; 
			Если Число(сот)<>0 Тогда 
				с = спсСотни.Получить(Число(сот)-1).Значение; 
			КонецЕсли; 
			Если Число(дес)<>0 Тогда 
				Если Число(ед)=0 Тогда 
					дг = Строка(спсДесИм.Получить(Число(дес)-1)); 
					дс = дг; 
				Иначе 
					дс = спсСубДесРод.Получить(Число(ед)-1).Значение; 
				КонецЕсли; 
			КонецЕсли; 
			Если (Число(дес)>1) или (Число(дес)=0) Тогда 
				Если Число(ед)<>0 Тогда 
					е =Строка(спсЧисл.Получить(Число(ед)-1)); 
				КонецЕсли; 
			КонецЕсли; 
			стрГод = Строка(_т)+" "+Строка(с)+" "+Строка(дс)+" "+Строка(е); 
		КонецЕсли; 
	Иначе 
		
	КонецЕсли; 
	стрГод = стрГод+" года"; 
	стрГод = СтрЗаменить(стрГод," "," "); 
	стрРез = Строка(стрДень)+" "+Строка(стрМес)+" "+Строка(стрГод); 
	стрРез = СтрЗаменить(стрРез," "," "); 
	Возврат стрРез; 
КонецФункции 
//Blik 030616 к