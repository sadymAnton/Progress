////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция получает дату для запроса по данным документа.
// Для документов, имеющих реквизит ДатаОкончанияПериода, возвращается значение этого реквизита,
// для новых (еще не записанных) документов возвращается дата конца дня документа, для записанных - дата документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	МетаданныеДокумента - Метаданные - Метаданные документа
//
// Возвращаемое значение:
//	Дата - Дата для формирования запроса
//
Функция ПолучитьДатуДляЗапроса(ДокументОбъект, МетаданныеДокумента = Неопределено) Экспорт
	
	ЕстьДатаОкончанияПериода = (МетаданныеДокумента <> Неопределено) 
		И (МетаданныеДокумента.Реквизиты.Найти("ДатаОкончанияПериода") <> Неопределено);
	
	Если ЕстьДатаОкончанияПериода И ЗначениеЗаполнено(ДокументОбъект.ДатаОкончанияПериода) Тогда
		Дата = ДокументОбъект.ДатаОкончанияПериода;
	Иначе
		Дата = ?(ДокументОбъект.ЭтоНовый(), КонецДня(ДокументОбъект.Дата), ДокументОбъект.Дата);
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции // ПолучитьДатуДляЗапроса()

// Процедура удаляет из строки имен реквизитов, проверяемых на заполненность
// реквизиты, которые зависят от типа учета документа
//
// Параметры:
//		ДокОбъект - проверяемый документ
//		СтрокаРекв   - Строка с именами реквизитов, которые надо проверять на заполненность
//      УпрРеквизиты - строка, с именами реквизитов имеющих смысл
// 					   только в случае если документ отражается в упр.учете
//      БухРеквизиты - строка, с именами реквизитов имеющих смысл
// 					   только в случае если документ отражается в регл.(бух.) учете
//      НалРеквизиты - строка, с именами реквизитов имеющих смысл
// 					   только в случае если документ отражается в регл.(нал.) учете
//		ИмяТабЧасти  - имя проверяемой табл. части документа
//
Процедура НепроверятьРеквизитыПоТипуУчета(ДокОбъект, СтрокаРекв, СтруктураШапкиДокумента, Знач УпрРеквизиты, Знач БухРеквизиты, Знач НалРеквизиты, ИмяТабЧасти = "") Экспорт

	Стр = СтрЗаменить(СтрокаРекв, " ", "");
	СтруктРекв = Новый Структура(Стр);
	СтрокаРекв = "";

	// Убрать пробелы и символы перевода строки
	УпрРекв = СтрЗаменить(УпрРеквизиты, " ", "");
	УпрРекв = СтрЗаменить(УпрРекв, Символы.ПС,  "");
	УпрРекв = "," + СтрЗаменить(УпрРекв, Символы.Таб, "") + ",";

	БухРекв = СтрЗаменить(БухРеквизиты, " ", "");
	БухРекв = СтрЗаменить(БухРекв, Символы.ПС,  "");
	БухРекв = "," + СтрЗаменить(БухРекв, Символы.Таб, "") + ",";

	НалРекв = СтрЗаменить(НалРеквизиты, " ", "");
	НалРекв = СтрЗаменить(НалРекв, Символы.ПС,  "");
	НалРекв = "," + СтрЗаменить(НалРекв, Символы.Таб, "") + ",";

	ОрганизацияПрименяетУСН = ?(СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН"), СтруктураШапкиДокумента.ОрганизацияПрименяетУСН, Ложь);
	
	УпрУчет = ?(СтруктураШапкиДокумента.Свойство("ОтражатьВУправленческомУчете"),СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,Ложь);
	БухУчет = ?(СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете"), СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, Ложь);
	НалУчет = ?(СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете"),	 СтруктураШапкиДокумента.ОтражатьВНалоговомУчете и не ОрганизацияПрименяетУСН, Ложь);

	// Исключим из списка проверяемых реквизитов, те которые относятся к конкретному
	// виду учета и этот вид учета выключен

	Для Каждого Рекв Из СтруктРекв Цикл

		ИмяРекв = ?(ПустаяСтрока(ИмяТабЧасти), "", ИмяТабЧасти + ".") + Рекв.Ключ;

		Если Не УпрУчет И Найти(УпрРекв, "," + ИмяРекв + ",") > 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Не БухУчет И Найти(БухРекв, "," + ИмяРекв + ",") > 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Не НалУчет И Найти(НалРекв, "," + ИмяРекв + ",") > 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаРекв = ?(ПустаяСтрока(СтрокаРекв), "", СтрокаРекв + ", ") + Рекв.Ключ;

	КонецЦикла;

КонецПроцедуры // НепроверятьРеквизитыПоТипуУчета()

// Функция заменяет комментарии в тексте запроса в зависимости от отражения документа в учете.
//
// Параметры
//  ИсходныйТекстЗапроса – Строка – Текст запроса.
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение
//   Строка – Текст запроса, в котором заменены комментарии.
//
Функция ЗаменитьКомментарииВТекстеЗапроса(
	ИсходныйТекстЗапроса, 
	ВидОтраженияВУчете
	) Экспорт
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		ТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "%СуффиксУчета%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксОрганизаций%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксРегл%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляУпрУчета", "");
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
		ТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "%СуффиксОрганизаций%", "Организаций");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксРегл%", "Регл");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляРеглУчета", "");
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		ТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "%СуффиксУчета%", "БухгалтерскийУчет");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксОрганизаций%", "Организаций");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксРегл%", "Регл");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПланаСчетов%", "Хозрасчетный");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляРеглУчета", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляБухУчета", "");
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		ТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "%СуффиксУчета%", "НалоговыйУчет");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксОрганизаций%", "Организаций");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксРегл%", "Регл");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПланаСчетов%", "Налоговый");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляРеглУчета", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляНалУчета", "");
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете	Тогда
		ТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "%СуффиксУчета%", "МеждународныйУчет");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксОрганизаций%", "Организаций");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПланаСчетов%", "Международный");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляРеглУчета", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляМеждУчета", "");
		
		//+ДС 10.01.2014 Избавляемся от текста запроса по вспомогательному счету, т.к. его нет в международном плане счетов
		УбратьТекст = "	 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
						|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства)
						|	//ДляНалУчета		ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства)
						|		) ТОГДА
						|			ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УбратьТекст, "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.РаспределениеЗатратПоПеределамОрганизаций КАК", "РегистрСведений.ДС_РаспределениеЗатратПоПеределамОрганизацийМСФО КАК");	
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.РаспределениеПродукцииПоПеределамОрганизаций КАК", "РегистрСведений.ДС_РаспределениеПродукцииПоПеределамОрганизацийМСФО КАК");
		//-ДС 10.01.2014
		
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // ЗаменитьКомментарииВТекстеЗапроса()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫВОДА СООБЩЕНИЙ ОБ ОШИБКАХ

// Функция формирует таблицу ошибок.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица ошибок
//
Функция СформироватьТаблицуОшибок() Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	Колонки = ТаблицаОшибок.Колонки;
	Колонки.Добавить("Группа", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Сообщение", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Объект");
	
	Возврат ТаблицаОшибок;
	
КонецФункции // СформироватьТаблицуОшибок()

// Функция формирует расшифровку для открытия отчета.
//
// Параметры:
//	ИмяОтчета - Строка - Имя отчета
//
Функция СформироватьРасшифровкуОткрытияОтчета(ИмяОтчета) Экспорт
	
	МассивРасшифровки = Новый Массив;
	МассивРасшифровки.Добавить("ОткрытьОтчет");
	МассивРасшифровки.Добавить(ИмяОтчета);
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("Представление", " (открыть отчет)");
	СтруктураРасшифровки.Вставить("Расшифровка", МассивРасшифровки);
	
	Расшифровка = Новый Массив;
	Расшифровка.Добавить(СтруктураРасшифровки);
	
	Возврат Расшифровка;
	
КонецФункции // ПолучитьРасшифровкуОткрытьОтчет()

// Процедура выводит сообщения об ошибках.
//
Процедура ВывестиСообщенияОбОшибках(
	СтруктураШапкиДокумента,
	ТаблицаОшибок,
	Заголовок
	) Экспорт
	
	Если ТаблицаОшибок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОшибок.Свернуть("Группа, Сообщение, Объект", "");
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		СтрокаГруппы = ОбщегоНазначения.Сообщение(
			Заголовок,
			Перечисления.ВидыСообщений.Раздел,
			, // Заголовок
			СтруктураШапкиДокумента.Ссылка, // РасшифровкаСообщения
			, // РодительскаяСтрока
			Истина // РаскрытьСообщение
		);
	Иначе
		СтрокаГруппы = Неопределено;
	КонецЕсли;
	
	ТекущаяГруппа = "";
	Для Каждого Строка Из ТаблицаОшибок Цикл
		
		Если Не ПустаяСтрока(Строка.Группа)
		   И ТекущаяГруппа <> Строка.Группа
		Тогда
			НоваяСтрокаГруппы = ОбщегоНазначения.Сообщение(
				Строка.Группа,
				Перечисления.ВидыСообщений.Ошибка,
				, // Заголовок
				, // РасшифровкаСообщения
				СтрокаГруппы, // РодительскаяСтрока
				Истина // РаскрытьСообщение
			);
			ТекущаяГруппа = Строка.Группа;
			СтрокаГруппы = НоваяСтрокаГруппы;
		КонецЕсли;
		
		ОбщегоНазначения.Сообщение(
			Строка.Сообщение,
			Перечисления.ВидыСообщений.Информация,
			, // Заголовок
			Строка.Объект, // РасшифровкаСообщения
			СтрокаГруппы, // СтрокаГруппы,
			// РаскрытьСообщение
		);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиСообщенияОбОшибках()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СТАТЬЯМИ ЗАТРАТ И СЧЕТАМИ ЗАТРАТ

// Функция возвращает счет учета для указанной статьи затрат
//
// Параметры:
//  Подразделение - Подразделение, для которого определяются счет
//  СтатьяЗатрат  - Счатья затрат, для которой определяются счет
//  КоррСчет      - корреспондирующий счет
//	ВидУчета      - вид учета, счет которого надо получить
//
// Возвращаемое значение:
//  Структура - структура счетов по всем разделам учета, если не задано значение
//		параметра ВидУчета
//  Счет, если задано значение параметра ВидУчета. Счет возвращается
//		в соответствии с запришиваемым видом учета.
//
Функция ПолучитьСчетаУчетаСтатьиЗатрат(Подразделение, СтатьяЗатрат, КорСчет = неопределено) Экспорт
	
	ПустоеПодразделение = НЕ ЗначениеЗаполнено(Подразделение);
	ПустаяСтатьяЗатрат  = НЕ ЗначениеЗаполнено(СтатьяЗатрат);
	ПланСчетовБух       = ПланыСчетов.Хозрасчетный;
	Счет                = ПланСчетовБух.ПустаяСсылка();
	ВидЗатратНУ         = Перечисления.ВидыРасходовНУ.ПустаяСсылка();

	Если ПустаяСтатьяЗатрат И Не ПустоеПодразделение Тогда

		Если Подразделение.ВидПодразделения = Перечисления.ВидыПодразделений.ОсновноеПроизводство Тогда
			Счет = ПланСчетовБух.ОсновноеПроизводствоНеОблагаемоеЕНВД;
			
		ИначеЕсли Подразделение.ВидПодразделения = Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
			Счет = ПланСчетовБух.ВспомогательныеПроизводстваНеОблагаемоеЕНВД;
			
		КонецЕсли;

	ИначеЕсли Не ПустаяСтатьяЗатрат Тогда
		
		Если СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Счет = ПланСчетовБух.МатериалыПринятыеВПереработкуВПроизводстве;
			
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			Счет = ПланСчетовБух.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД;
			ВидЗатратНУ = СтатьяЗатрат.ВидРасходовНУ;
			
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
			Счет = ПланСчетовБух.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД;
			ВидЗатратНУ = СтатьяЗатрат.ВидРасходовНУ;
			
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			Счет = ПланСчетовБух.БракВПроизводствеНеОблагаемоеЕНВД;
			ВидЗатратНУ = СтатьяЗатрат.ВидРасходовНУ;
			
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы Тогда
			Счет = ПланСчетовБух.КоммерческиеРасходыНеОблагаемыеЕНВД;
			ВидЗатратНУ = СтатьяЗатрат.ВидРасходовНУ;
			
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения Тогда
			Счет = ПланСчетовБух.ИздержкиОбращенияНеОблагаемыеЕНВД;
			
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			Счет = ПланСчетовБух.СтроительствоОбъектовОсновныхСредств;
			
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы 
			И Не ПустоеПодразделение
		Тогда
			ВидЗатратНУ = СтатьяЗатрат.ВидРасходовНУ;
			Если Подразделение.ВидПодразделения = Перечисления.ВидыПодразделений.ОсновноеПроизводство Тогда
				Счет = ПланСчетовБух.ОсновноеПроизводствоНеОблагаемоеЕНВД;
			ИначеЕсли Подразделение.ВидПодразделения = Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
				Счет = ПланСчетовБух.ВспомогательныеПроизводстваНеОблагаемоеЕНВД;
			КонецЕсли;
				
		КонецЕсли;

	КонецЕсли;
	
	Результат = Новый Структура("СчетУчетаБУ, СчетУчетаНУ");
	
	//m.ionov@a-prof.ru 17.02.2014
	//Попробуем получить счет из регистра УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям
	Если Не ПустоеПодразделение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СчетУчетаБУ,
		               |	УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СчетУчетаНУ,
		               |	1 КАК ПолеСортировки,
		               |	УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СтандартноеОпределениеНУ
		               |ИЗ
		               |	РегистрСведений.УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям КАК УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям
		               |ГДЕ
		               |	УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.ПодразделениеОрганизации = &ПодразделениеОрганизации
		               |	И УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СтатьяЗатрат = &СтатьяЗатрат
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СчетУчетаБУ,
		               |	УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СчетУчетаНУ,
		               |	2,
		               |	УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СтандартноеОпределениеНУ
		               |ИЗ
		               |	РегистрСведений.УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям КАК УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям
		               |ГДЕ
		               |	УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.ПодразделениеОрганизации = &ПодразделениеОрганизации
		               |	И УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПолеСортировки";
					   //+?(ПустаяСтатьяЗатрат,"","
					   //|	И УЗ_СчетаУчетаПоСтатьямЗатратИПодразделениям.СтатьяЗатрат = &СтатьяЗатрат";
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
		Запрос.УстановитьПараметр("СтатьяЗатрат", СтатьяЗатрат);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			
			Если ЗначениеЗаполнено(РезультатЗапроса.СчетУчетаБУ) Тогда
				Счет   = РезультатЗапроса.СчетУчетаБУ;	
				СчетНУ = РезультатЗапроса.СчетУчетаНУ;	
				Если ЗначениеЗаполнено(СчетНУ) Тогда
					Результат.СчетУчетаБУ   = Счет;
					//начало изменений 
					если РезультатЗапроса.СтандартноеОпределениеНУ Тогда
						СчетКоррБУ = ?(ЗначениеЗаполнено(КорСчет), КорСчет, ПланыСчетов.Хозрасчетный.ПустаяСсылка());
						Если НЕ ЗначениеЗаполнено(ВидЗатратНУ) Тогда 
							ВидЗатратНУ = Неопределено;
						КонецЕсли;
						
						Отбор = Новый Структура();
						Отбор.Вставить("СчетБУ",      Счет);
						Отбор.Вставить("СчетКоррБУ",  СчетКоррБУ);
						Если Не ЗначениеЗаполнено(ВидЗатратНУ) и ЗначениеЗаполнено(СтатьяЗатрат) Тогда
							Отбор.Вставить("ВидЗатратНУ", СтатьяЗатрат.ВидРасходовНУ);
						Иначе
							Отбор.Вставить("ВидЗатратНУ", ВидЗатратНУ);
						КонецЕсли;	
						СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Отбор);
						Если Не ЗначениеЗаполнено(СчетНУ) Тогда
							 СчетНУ   = РезультатЗапроса.СчетУчетаНУ;
						КонецЕсли;	
					КонецЕсли;	
					//конец изменений 
					Результат.СчетУчетаНУ   = СчетНУ;
	
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	//----m.ionov@a-prof.ru---
    	
	// Приведем значения корсчета и вида затрат к типу, пригодному для функции ПреобразоватьСчетаБУвСчетНУ()
	СчетКоррБУ = ?(ЗначениеЗаполнено(КорСчет), КорСчет, ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Если НЕ ЗначениеЗаполнено(ВидЗатратНУ) Тогда 
		ВидЗатратНУ = Неопределено;
	КонецЕсли;
	
	// Найдем наиболее подходящий под критерии счет учета НУ
	Отбор = Новый Структура();
	Отбор.Вставить("СчетБУ",      Счет);
	Отбор.Вставить("СчетКоррБУ",  СчетКоррБУ);
	Отбор.Вставить("ВидЗатратНУ", ВидЗатратНУ);
	СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Отбор);
	
	// Если не удалось заполнить СчетНУ с учетом трех параметров отбора,
	// попробуем варианты с более мягкими условиями отбора
	
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		Отбор.Вставить("СчетКоррБУ",  СчетКоррБУ);
		Отбор.Вставить("ВидЗатратНУ", Неопределено);
		СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Отбор);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		Отбор.Вставить("ВидЗатратНУ", ВидЗатратНУ);
		Отбор.Вставить("СчетКоррБУ",  ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Отбор);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		Отбор.Вставить("ВидЗатратНУ", Неопределено);
		Отбор.Вставить("СчетКоррБУ",  ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Отбор);
	КонецЕсли;
	
	Результат.СчетУчетаБУ   = Счет;
	Результат.СчетУчетаНУ   = СчетНУ;
	
	Возврат Результат;

КонецФункции // ПолучитьСчетаУчетаСтатьиЗатрат()

// Функция проверяет является ли статья затрат производственной
//
// Параметры:
//  СтатьяЗатрат  - Счатья затрат, для которой определяется отнесение к производственным расходам
//
// Возвращаемое значение:
//  Истина - статья затрат относится к производственным расходам.
//
Функция ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтатьяЗатрат) Экспорт

	Возврат НЕ (ЗначениеЗаполнено(СтатьяЗатрат) И СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие);

КонецФункции // ПроверитьСтатьюЗатратНаПроизводственныеРасходы()

// Функция проверяет является ли счет затрат производственным.
//
// Параметры:
//  СчетЗатрат  - счет затрат, для которой определяется отнесение к производственным расходам
//  ИмяПланСчетов  - план счетов, для которой определяется отнесение к производственным расходам
//
// Возвращаемое значение:
//  Истина - счет затрат относится к производственным расходам (т.е. таким, которые учитываются в регистрах учета затрат).
//           ВАЖНО: пустой счет считается относящимся к производственным расходам.
//
Функция ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетЗатрат, ИмяПланСчетов = "Хозрасчетный") Экспорт
	
	ХарактерЗатрат = ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, Неопределено, ИмяПланСчетов);

	Возврат НЕ (ЗначениеЗаполнено(ХарактерЗатрат) И ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие);

КонецФункции // ПроверитьСчетЗатратНаПроизводственныеРасходы()

// Функция возвращает значение характера затрат, соответствующего счету затрат.
//
// Параметры
//  СчетЗатрат - ПланСчетовСсылка - счет затрат, по которому определяется характер затрат.
//  СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - статья затрат для уточнения характера затрат.
//  ИмяПланСчетов - Строка - имя плана счетов, которому принадлежит счет затрат.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ХарактерЗатрат – характер затрат, соответствующий счету затрат.
//
Функция ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат, ИмяПланСчетов = "Хозрасчетный") экспорт
	
	// Проверка счета затрат.
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		Возврат Перечисления.ХарактерЗатрат.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(СчетЗатрат) <> Тип("ПланСчетовСсылка."+ИмяПланСчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Счет затрат " + СчетЗатрат + " не соответствует плану счетов: """ + ИмяПланСчетов + """.
			|Функция <ПолучитьХарактерЗатратПоСчетуЗатрат>");
		Возврат Перечисления.ХарактерЗатрат.ПустаяСсылка();
	КонецЕсли;
	
	Если СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве
		  // is ЯннуровВФ нач 20141003
		  //ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ОсновноеПроизводство_
		  //ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ОсновноеПроизводство_)
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ОсновноеПроизводство_)
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ОсновноеПроизводство_))
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат = ПланыСчетов.Международный._ОсновноеПроизводство)
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный._ОсновноеПроизводство))
		  // is ЯннуровВФ кон 20141003
		  ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ВспомогательныеПроизводства	
		  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ВспомогательныеПроизводства) Тогда
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
		
	ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваНеОблагаемоеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств
		  ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ОбслуживающиеПроизводства
		  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ОбслуживающиеПроизводства) Тогда
		  //начало изменений БП 04 
		//Если СтатьяЗатрат = Неопределено
		// ИЛИ СтатьяЗатрат = NULL
		//Тогда
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
		//Иначе
		//	ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
		//КонецЕсли;
	   //конец изменений БП 04 
	ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.БракВПроизводствеНеОблагаемоеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.БракВПроизводствеОблагаемоеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку
		  ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].БракВПроизводстве
		  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].БракВПроизводстве) Тогда
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве;
		
	ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые
		  ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ОбщепроизводственныеРасходы
		  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ОбщепроизводственныеРасходы) Тогда
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы;
		
	ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыРаспределяемые
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы
		  ИЛИ СчетЗатрат = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые
		  // is ЯннуровВФ нач 20141003
		  //ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ОбщехозяйственныеРасходы
		  //ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ОбщехозяйственныеРасходы) Тогда
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ОбщехозяйственныеРасходы)
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ОбщехозяйственныеРасходы)) 
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат = ПланыСчетов.Международный.АдминистративныеРасходы)
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.АдминистративныеРасходы)) Тогда
		  // is ЯннуровВФ кон 20141003
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы;
		
	// is ЯннуровВФ нач 20141003
	//ИначеЕсли СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ИздержкиОбращенияНеОблагаемыеЕНВД
	//	  ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ИздержкиОбращенияРаспределяемые
	ИначеЕсли (ИмяПланСчетов <> "Международный" И СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ИздержкиОбращенияНеОблагаемыеЕНВД)
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ИздержкиОбращенияРаспределяемые)
	// is ЯннуровВФ кон 20141003
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД
		  // is ЯннуровВФ нач 20141003
		  //ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ИздержкиОбращения
		  //ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ИздержкиОбращения) Тогда
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат = ПланыСчетов[ИмяПланСчетов].ИздержкиОбращения)
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].ИздержкиОбращения)) 
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат = ПланыСчетов.Международный._ИздержкиОбращения)
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный._ИздержкиОбращения)) Тогда
		  // is ЯннуровВФ кон 20141003
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения;
		
	// is ЯннуровВФ нач 20141003
	//ИначеЕсли СчетЗатрат = ПланыСчетов[ИмяПланСчетов].КоммерческиеРасходыНеОблагаемыеЕНВД
	//	  ИЛИ СчетЗатрат = ПланыСчетов[ИмяПланСчетов].КоммерческиеРасходыРаспределяемые
	ИначеЕсли (ИмяПланСчетов <> "Международный" И СчетЗатрат = ПланыСчетов[ИмяПланСчетов].КоммерческиеРасходыНеОблагаемыеЕНВД)
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат = ПланыСчетов[ИмяПланСчетов].КоммерческиеРасходыРаспределяемые)
	// is ЯннуровВФ кон 20141003
		  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД
		  // is ЯннуровВФ нач 20141003
		  //ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].КоммерческиеРасходы) Тогда
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].КоммерческиеРасходы))
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат = ПланыСчетов.Международный._КоммерческиеРасходы)
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный._КоммерческиеРасходы)) Тогда
		  // is ЯннуровВФ кон 20141003
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы;
		
	// is ЯннуровВФ нач 20141003
	//ИначеЕсли СчетЗатрат = ПланыСчетов[ИмяПланСчетов].СтроительствоОбъектовОсновныхСредств
	//	  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].СтроительствоОбъектовОсновныхСредств) Тогда
	ИначеЕсли (ИмяПланСчетов <> "Международный" И СчетЗатрат = ПланыСчетов[ИмяПланСчетов].СтроительствоОбъектовОсновныхСредств)
		  ИЛИ (ИмяПланСчетов <> "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов[ИмяПланСчетов].СтроительствоОбъектовОсновныхСредств)) 
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат = ПланыСчетов.Международный._СтроительствоОбъектовОсновныхСредств)
		  ИЛИ (ИмяПланСчетов = "Международный" И СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный._СтроительствоОбъектовОсновныхСредств)) Тогда
	// is ЯннуровВФ кон 20141003
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы;
		
	ИначеЕсли ТипЗнч(СчетЗатрат) = Тип("ПланСчетовСсылка.Хозрасчетный")
		И (СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ)
			ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ)
	Тогда
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ЗаготовлениеИПриобретениеМЦ;
		
	Иначе
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие;
		
	КонецЕсли;
		
	Возврат ХарактерЗатрат;
	
КонецФункции // ПолучитьХарактерЗатратПоСчетуЗатрат()

// Функция возвращает счет прямых расходов налогового учета, соответствующий счету бухгалтерского учета.
//
// Параметры:
//	СчетБУ - ПланСчетовСсылка.Хозрасчетный - Счет бухгалтерского учета
//
// Возвращаемое значение:
//	ПланСчетовСсылка.Налоговый - Счет прямых расходов по налоговому учету
//
Функция ПолучитьСчетПрямыхРасходовНУ(СчетБУ) Экспорт
	
	МассивСчетовНУ = Новый Массив;
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	
	СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(
		Новый Структура("СчетБУ,", СчетБУ),
		Ложь, // ВозвращатьСубконто
		Неопределено, // ДатаСреза
		МассивСчетовНУ
		);

	Возврат СчетНУ;
	
КонецФункции // ПолучитьСчетПрямыхРасходовНУ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТРАЖЕНИЯ ЗАТРАТ В РЕГИСТРАХ НАКОПЛЕНИЯ

// Функция формирует структуру колонок для таблицы затрат.
//
// Возвращаемое значение:
//	Структура - Структура колонок
//
Функция СформироватьСтруктуруКолонокТаблицыЗатрат()
	
	СтруктураКолонок = Новый Структура;
	
	СтруктураКолонок.Вставить("ВидДвижения", Новый ОписаниеТипов("ВидДвиженияНакопления"));
	СтруктураКолонок.Вставить("КодОперацииНЗП", Новый ОписаниеТипов("ПеречислениеСсылка.КодыОперацийНезавершенноеПроизводство"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийЗатраты"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации"));
	СтруктураКолонок.Вставить("КодОперации", Новый ОписаниеТипов(МассивТипов));
	
	СтруктураКолонок.Вставить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	СтруктураКолонок.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СтруктураКолонок.Вставить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	СтруктураКолонок.Вставить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	СтруктураКолонок.Вставить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СтруктураКолонок.Вставить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	СтруктураКолонок.Вставить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	СтруктураКолонок.Вставить("СпособРаспределенияЗатратНаВыпуск", Новый ОписаниеТипов("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск"));
	
	МассивТиповЗаказа = Новый Массив;
	МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
	СтруктураКолонок.Вставить("Заказ", Новый ОписаниеТипов(МассивТиповЗаказа));
	
	МассивТиповПроекта = Новый Массив;
	МассивТиповПроекта.Добавить(Тип("СправочникСсылка.Проекты"));
	МассивТиповПроекта.Добавить(Тип("СправочникСсылка.ВидыРаспределенияПоПроектам"));
	
	СтруктураКолонок.Вставить("Проект", Новый ОписаниеТипов(МассивТиповПроекта));
	
	СтруктураКолонок.Вставить("ОбъектСтроительства", Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"));
	СтруктураКолонок.Вставить("СпособСтроительства", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	СтруктураКолонок.Вставить("Продукция", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СтруктураКолонок.Вставить("ХарактеристикаПродукции", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СтруктураКолонок.Вставить("СерияПродукции", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	СтруктураКолонок.Вставить("КоличествоУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СтруктураКолонок.Вставить("КоличествоБух", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СтруктураКолонок.Вставить("КоличествоНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	СтруктураКолонок.Вставить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("НДСУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	СтруктураКолонок.Вставить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); // сумма затрат для отражения в бух. и нал. учете
	СтруктураКолонок.Вставить("СуммаБух", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); // сумма затрат для отражения в бух. учете
	СтруктураКолонок.Вставить("СуммаНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); // сумма затрат для отражения в нал. учете
	СтруктураКолонок.Вставить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("ВременнаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	СтруктураКолонок.Вставить("СчетУчетаБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонок.Вставить("СчетУчетаНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	СтруктураКолонок.Вставить("СчетЗатрат", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонок.Вставить("СчетЗатратНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	
	СтруктураКолонок.Вставить("Субконто1", ОписаниеТиповСубконто);
	СтруктураКолонок.Вставить("Субконто2", ОписаниеТиповСубконто);
	СтруктураКолонок.Вставить("Субконто3", ОписаниеТиповСубконто);
	СтруктураКолонок.Вставить("СубконтоНУ1", ОписаниеТиповСубконто);
	СтруктураКолонок.Вставить("СубконтоНУ2", ОписаниеТиповСубконто);
	СтруктураКолонок.Вставить("СубконтоНУ3", ОписаниеТиповСубконто);
	
	СтруктураКолонок.Вставить("КорАналитикаВидаУчета", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета"));
	СтруктураКолонок.Вставить("КорАналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	СтруктураКолонок.Вставить("КорАналитикаРаспределенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	СтруктураКолонок.Вставить("КорАналитикаУчетаПартий", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	
	Возврат СтруктураКолонок;
	
КонецФункции // СформироватьСтруктуруКолонокТаблицыЗатрат()

// Функция формирует структуру таблицы значений для отражения производственных затрат в регистрах.
//
Функция СформироватьТаблицуЗатрат() Экспорт
	
	СтруктураКолонок = СформироватьСтруктуруКолонокТаблицыЗатрат();
	
	ТаблицаЗатрат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из СтруктураКолонок Цикл
		ТаблицаЗатрат.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
	КонецЦикла;
	
	Возврат ТаблицаЗатрат;
	
КонецФункции // СформироватьТаблицуЗатрат()

// Функция проверяет соотвествтие счетов и аналитики Дт и КТ и в формируемой проводке.
//
// Возвращаемое значение:
//   Истина – Счета и аналитика одинаковые.
//   Ложь   - Счета или аналитика разные.
//
Функция СчетаДтКтИАналитикаВПроводкеОдинаковые(СтрокаТабличнойЧасти, СтруктураШапкиДокумента) Экспорт
	
	СчетаДтКтИАналитикаОдинаковая = Истина;
	
	Если СтрокаТабличнойЧасти.СчетЗатрат <> СтрокаТабличнойЧасти.СчетЗатратПолучатель Тогда
		СчетаДтКтИАналитикаОдинаковая = Ложь;
	КонецЕсли;
	
	ПроизводственныеРасходы = ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТабличнойЧасти.СчетЗатрат, "Хозрасчетный");

	Если ПроизводственныеРасходы Тогда
		Если СтрокаТабличнойЧасти.СтатьяЗатрат <> СтрокаТабличнойЧасти.СтатьяЗатратПолучатель
		   ИЛИ СтруктураШапкиДокумента.ПодразделениеОрганизации <> СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель
		   ИЛИ СтрокаТабличнойЧасти.НоменклатурнаяГруппа <> СтрокаТабличнойЧасти.НоменклатурнаяГруппаПолучатель Тогда
		   
		    СчетаДтКтИАналитикаОдинаковая = Ложь;
			
		КонецЕсли;
		
		Если ТипЗнч(СтруктураШапкидокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПрочихЗатрат")
		   И СтрокаТабличнойЧасти.ОбъектСтроительства <> СтрокаТабличнойЧасти.ОбъектСтроительстваПолучатель Тогда
		   
		    СчетаДтКтИАналитикаОдинаковая = Ложь;
			
		КонецЕсли;
		
	Иначе
		Если СтрокаТабличнойЧасти.Субконто1 <> СтрокаТабличнойЧасти.СубконтоПолучатель1
		   ИЛИ СтрокаТабличнойЧасти.Субконто2 <> СтрокаТабличнойЧасти.СубконтоПолучатель2
		   ИЛИ СтрокаТабличнойЧасти.Субконто3 <> СтрокаТабличнойЧасти.СубконтоПолучатель3 Тогда
		   
		    СчетаДтКтИАналитикаОдинаковая = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СчетаДтКтИАналитикаОдинаковая;
	
КонецФункции

// Функция получает таблицу затрат для формирования движений по регистрам.
//
// Параметры:
//	ТаблицаДокумента - ТабличнаяЧасть, ТаблицаЗначений
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица затрат
//
Функция ПолучитьТаблицуЗатрат(
	ТаблицаДокумента,
	СтруктураШапкиДокумента
	)
	
	Если ТипЗнч(ТаблицаДокумента) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаЗатрат = ТаблицаДокумента.Выгрузить();
	Иначе
		ТаблицаЗатрат = ТаблицаДокумента.Скопировать();
	КонецЕсли;
	
	СтруктураКолонок = СформироватьСтруктуруКолонокТаблицыЗатрат();
	Для Каждого Колонка Из СтруктураКолонок Цикл
		
		Если ТаблицаЗатрат.Колонки.Найти(Колонка.Ключ) = Неопределено Тогда
			ТаблицаЗатрат.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Колонки.Найти("ПроектЗатрат") <> Неопределено Тогда
		МассивПроектов = ТаблицаЗатрат.ВыгрузитьКолонку("ПроектЗатрат");
		ТаблицаЗатрат.ЗагрузитьКолонку(МассивПроектов, "Проект");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("Организация") Тогда
		ТаблицаЗатрат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаЗатрат[0].ВидДвижения) Тогда
		ТаблицаЗатрат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления")
	Тогда
		КодОперации = Перечисления.КодыОперацийЗатраты.УслугиКонтрагентаНаПостоянныеЗатраты;
		КодОперацииНЗП = Перечисления.КодыОперацийНезавершенноеПроизводство.УслугиКонтрагентаНаПроизводство;
	Иначе
		КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
	КонецЕсли;
	ТаблицаЗатрат.ЗаполнитьЗначения(КодОперации, "КодОперации");
	
	УдаляемыеКолоноки = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаЗатрат.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("Строка"))
		 ИЛИ Не ЗначениеЗаполнено(Колонка.ТипЗначения) 
		Тогда
			УдаляемыеКолоноки.Добавить(Колонка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из УдаляемыеКолоноки Цикл
		ТаблицаЗатрат.Колонки.Удалить(Колонка);
	КонецЦикла;
	
	Возврат ТаблицаЗатрат;
	
КонецФункции // ПолучитьТаблицуЗатрат()

// Процедура дополняет структуру шапки документа.
//
// Выходные параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	
Процедура ДополнитьСтруктуруШапкиДокументаУчетЗатрат(СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.Свойство("ОтражатьВУправленческомУчете") Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете", Ложь);
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете") Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления")
	Тогда
		КодОперации = Перечисления.КодыОперацийЗатраты.УслугиКонтрагентаНаПостоянныеЗатраты;
		КодОперацииНЗП = Перечисления.КодыОперацийНезавершенноеПроизводство.УслугиКонтрагентаНаПроизводство;
	Иначе
		КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
		КодОперацииНЗП = "";
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("КодОперации", КодОперации);
	СтруктураШапкиДокумента.Вставить("КодОперацииНЗП", КодОперацииНЗП);
	
КонецПроцедуры // ДополнитьСтруктуруШапкиДокументаУчетЗатрат()

// Процедура формирует движения в регистры по прочим затратам по всем видам учета.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаДокумента - Таблица документа для отражения затрат
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
Процедура ДвиженияПоПрочимЗатратам(
	СтруктураШапкиДокумента, 
	ТаблицаДокумента,
	ВидОтраженияВУчете = Неопределено
	) Экспорт
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьСтруктуруШапкиДокументаУчетЗатрат(СтруктураШапкиДокумента);
			
	ТаблицаЗатрат = ПолучитьТаблицуЗатрат(
		ТаблицаДокумента,
		СтруктураШапкиДокумента
	);
	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
		СтруктураШапкиДокумента,
		ТаблицаЗатрат,
		ВидОтраженияВУчете
	);
	
КонецПроцедуры // ДвиженияПоПрочимЗатратам()

// Процедура заполняет субконто учета затрат в проводке по бухгалтерскому или налоговому учету.
//
// Параметры
//	НоваяПроводка - РегистрБухгалтерииЗапись - Текущая проводка
//	СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - Текущая строка
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ИмяПланаСчетов - Строка - Имя текущего плана счетов
//	Суффикс - Строка - Суффикс заполнения субконто по дебету или по кредиту
//	ПолучитьПодразделениеИзСтрокиТаблицы - Булево - Признак получения значения подразделения из строки
//		таблицы.
//
Процедура ЗаполнитьСчетИСубконтоУчетаЗатрат(
	НоваяПроводка, 
	СтрокаТабличнойЧасти, 
	СтруктураШапкиДокумента, 
	ИмяПланСчетов = "Хозрасчетный", 
	Суффикс = "Дт",
	ПолучитьПодразделениеИзСтрокиТаблицы = Ложь
	) Экспорт
	
	Если ИмяПланСчетов = "Хозрасчетный" Тогда
		СчетЗатрат = СтрокаТабличнойЧасти.СчетЗатрат;
	Иначе
		СчетЗатрат = СтрокаТабличнойЧасти.СчетЗатратНУ;
	КонецЕсли;
	
	СчетДтКт = "Счет" + Суффикс;
	СубконтоДтКт = "Субконто" + Суффикс;
	
	ПроизводственныеРасходы = ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетЗатрат, ИмяПланСчетов);

	НоваяПроводка[СчетДтКт] = СчетЗатрат;
	Если ПроизводственныеРасходы Тогда
		
		Если ПолучитьПодразделениеИзСтрокиТаблицы Тогда
			ПодразделениеОрганизации = СтрокаТабличнойЧасти.ПодразделениеОрганизации;
		Иначе
			ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(
			НоваяПроводка[СчетДтКт],
			НоваяПроводка[СубконтоДтКт],
			"СтатьиЗатрат",
			СтрокаТабличнойЧасти.СтатьяЗатрат
		);
		БухгалтерскийУчет.УстановитьСубконто(
			НоваяПроводка[СчетДтКт],
			НоваяПроводка[СубконтоДтКт],
			"Подразделения",
			ПодразделениеОрганизации
		);
		БухгалтерскийУчет.УстановитьСубконто(
			НоваяПроводка[СчетДтКт], 
			НоваяПроводка[СубконтоДтКт],
			"НоменклатурныеГруппы",
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа
		);
		БухгалтерскийУчет.УстановитьСубконто(
			НоваяПроводка[СчетДтКт], 
			НоваяПроводка[СубконтоДтКт], 
			"ОбъектыСтроительства", 
			СтрокаТабличнойЧасти.ОбъектСтроительства
		);
		БухгалтерскийУчет.УстановитьСубконто(
			НоваяПроводка[СчетДтКт], 
			НоваяПроводка[СубконтоДтКт], 
			"СпособыСтроительства", 
			СтрокаТабличнойЧасти.СпособСтроительства
		);
	Иначе
		Если ИмяПланСчетов = "Хозрасчетный" Тогда
			БухгалтерскийУчет.УстановитьСубконто(
				НоваяПроводка[СчетДтКт], 
				НоваяПроводка[СубконтоДтКт], 
				1, 
				СтрокаТабличнойЧасти.Субконто1
			);
			БухгалтерскийУчет.УстановитьСубконто(
				НоваяПроводка[СчетДтКт], 
				НоваяПроводка[СубконтоДтКт], 
				2, 
				СтрокаТабличнойЧасти.Субконто2
			);
			БухгалтерскийУчет.УстановитьСубконто(
				НоваяПроводка[СчетДтКт], 
				НоваяПроводка[СубконтоДтКт], 
				3, 
				СтрокаТабличнойЧасти.Субконто3
			);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(
				НоваяПроводка[СчетДтКт], 
				НоваяПроводка[СубконтоДтКт], 
				1, 
				СтрокаТабличнойЧасти.СубконтоНУ1
			);
			БухгалтерскийУчет.УстановитьСубконто(
				НоваяПроводка[СчетДтКт], 
				НоваяПроводка[СубконтоДтКт], 
				2, 
				СтрокаТабличнойЧасти.СубконтоНУ2
			);
			БухгалтерскийУчет.УстановитьСубконто(
				НоваяПроводка[СчетДтКт], 
				НоваяПроводка[СубконтоДтКт], 
				3, 
				СтрокаТабличнойЧасти.СубконтоНУ3
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетИСубконтоУчетаЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С АНАЛИТИКОЙ ЗАТРАТ

// Процедура устанавливает видимость ячеек для ввода аналитики в зависимости от указанной статьи затрат.
//
Процедура УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, Продукция, СчетЗатрат = НЕОПРЕДЕЛЕНО, СчетЗатратНУ = НЕОПРЕДЕЛЕНО, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете) Экспорт

	ХарактерЗатратБУ = ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, Неопределено);
	ХарактерЗатратНУ = ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатратНУ, Неопределено, "Налоговый");
	
	ПустойХарактерЗатрат    = НЕ ЗначениеЗаполнено(ХарактерЗатрат);
	ПрочиеРасходы           = (ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие);
	ПрочиеРасходыБУ         = (ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.Прочие);
	ПрочиеРасходыНУ         = (ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.Прочие);
	ПрочиеРасходыРегл       = (ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.Прочие) ИЛИ (ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.Прочие);
	ПроизводственныеРасходы = (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы) 
							   ИЛИ (ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы)
							   ИЛИ (ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	БракВПроизводстве       = (ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве)
							   ИЛИ (ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.БракВПроизводстве)
							   ИЛИ (ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.БракВПроизводстве);
	Строительство           = (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы)
							   ИЛИ (ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы)
							   ИЛИ (ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы);

	НоменклатурнаяГруппаДоп = ЛОЖЬ;
	Если НЕ ОформлениеСтроки.Ячейки.Найти("НоменклатурнаяГруппаДоп") = НЕОПРЕДЕЛЕНО Тогда
		НоменклатурнаяГруппаДоп = ПроизводственныеРасходы;
	КонецЕсли;
	
	НоменклатурнаяГруппа = (Не ПустойХарактерЗатрат) 
							И НЕ ((ПрочиеРасходы И ПрочиеРасходыБУ И ПрочиеРасходыНУ) ИЛИ Строительство ИЛИ НоменклатурнаяГруппаДоп);

	Если НЕ ОформлениеСтроки.Ячейки.Найти("Аналитика") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.Аналитика.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("НоменклатурнаяГруппаДоп") = НЕОПРЕДЕЛЕНО Тогда
		
		Если ОформлениеСтроки.Ячейки.НоменклатурнаяГруппаДоп.Видимость <> НоменклатурнаяГруппаДоп Тогда
			ОформлениеСтроки.Ячейки.НоменклатурнаяГруппаДоп.Видимость      = НоменклатурнаяГруппаДоп;
			ОформлениеСтроки.Ячейки.НоменклатурнаяГруппаДоп.ТолькоПросмотр = НЕ НоменклатурнаяГруппаДоп;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОформлениеСтроки.Ячейки.НоменклатурнаяГруппа.Видимость <> НоменклатурнаяГруппа Тогда
		ОформлениеСтроки.Ячейки.НоменклатурнаяГруппа.Видимость      = НоменклатурнаяГруппа;
		ОформлениеСтроки.Ячейки.НоменклатурнаяГруппа.ТолькоПросмотр = НЕ НоменклатурнаяГруппа;
	КонецЕсли;
	
	ЕстьСпособРаспределенияЗатратНаВыпуск = Ложь;
	Если НЕ ОформлениеСтроки.Ячейки.Найти("СпособРаспределенияЗатратНаВыпуск") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.СпособРаспределенияЗатратНаВыпуск.Видимость      =    ПроизводственныеРасходы;
		ОформлениеСтроки.Ячейки.СпособРаспределенияЗатратНаВыпуск.ТолькоПросмотр = НЕ ПроизводственныеРасходы;
		ЕстьСпособРаспределенияЗатратНаВыпуск = Истина;
	КонецЕсли;
	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("СпособРаспределенияЗатратНаВыпускПолучатель") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.СпособРаспределенияЗатратНаВыпускПолучатель.Видимость      =    ПроизводственныеРасходы;
		ОформлениеСтроки.Ячейки.СпособРаспределенияЗатратНаВыпускПолучатель.ТолькоПросмотр = НЕ ПроизводственныеРасходы;
	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("ВидАналитики") = НЕОПРЕДЕЛЕНО Тогда

		ОформлениеСтроки.Ячейки.ВидАналитики.Видимость          = НЕ ((ПрочиеРасходы И ПрочиеРасходыБУ И ПрочиеРасходыНУ) ИЛИ ПустойХарактерЗатрат);
		ОформлениеСтроки.Ячейки.ВидАналитики.ОтображатьТекст    = Истина;
		ОформлениеСтроки.Ячейки.ВидАналитикиДоп.ОтображатьТекст = Истина;

		Если Строительство Тогда
			ОформлениеСтроки.Ячейки.ВидАналитики.Текст = "Объект строительства / Способ строительства";

		ИначеЕсли НоменклатурнаяГруппаДоп Тогда
			ОформлениеСтроки.Ячейки.ВидАналитики.Текст = "Номенклатурная группа"
					+ ?(ЕстьСпособРаспределенияЗатратНаВыпуск, " / Способ распределения", "");
		Иначе
			ОформлениеСтроки.Ячейки.ВидАналитики.Текст = "Номенклатурная группа";
		КонецЕсли;

		ОформлениеСтроки.Ячейки.ВидАналитикиДоп.Видимость = БракВПроизводстве;

		Если БракВПроизводстве Тогда
			ОформлениеСтроки.Ячейки.ВидАналитикиДоп.Текст = "Продукция";

		Иначе
			ОформлениеСтроки.Ячейки.ВидАналитикиДоп.Текст = "";

		КонецЕсли;

	КонецЕсли;
	
	Если ПрочиеРасходыБУ И ЗначениеЗаполнено(СчетЗатрат) Тогда
		КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();
	Иначе
		КоличествоСубконто = 0;
	КонецЕсли;
	Если ПрочиеРасходыНУ И ЗначениеЗаполнено(СчетЗатратНУ) Тогда
		КоличествоСубконтоНУ = СчетЗатратНУ.ВидыСубконто.Количество();
	Иначе
		КоличествоСубконтоНУ = 0;
	КонецЕсли;
	
	ОдинаковаяАналитикаБУ_НУ = Истина;
	Если КоличествоСубконто = КоличествоСубконтоНУ 
	   и ПрочиеРасходыБУ И ЗначениеЗаполнено(СчетЗатрат)
	   и ПрочиеРасходыНУ И ЗначениеЗаполнено(СчетЗатратНУ) Тогда
		Если КоличествоСубконто > 0 
		   И СчетЗатрат.ВидыСубконто.Получить(0).ВидСубконто <>СчетЗатратНУ.ВидыСубконто.Получить(0).ВидСубконто Тогда
		   
		    ОдинаковаяАналитикаБУ_НУ = Ложь;
		КонецЕсли;

		Если КоличествоСубконто > 1
		   И СчетЗатрат.ВидыСубконто.Получить(1).ВидСубконто <>СчетЗатратНУ.ВидыСубконто.Получить(1).ВидСубконто Тогда
		   
		    ОдинаковаяАналитикаБУ_НУ = Ложь;
		КонецЕсли;

		Если КоличествоСубконто > 2 
		   И СчетЗатрат.ВидыСубконто.Получить(2).ВидСубконто <>СчетЗатратНУ.ВидыСубконто.Получить(2).ВидСубконто Тогда
		   
		    ОдинаковаяАналитикаБУ_НУ = Ложь;
		КонецЕсли;
	Иначе
		ОдинаковаяАналитикаБУ_НУ = Ложь;
	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("ВидСубконто3") = НЕОПРЕДЕЛЕНО Тогда

		ОформлениеСтроки.Ячейки.ВидСубконто1.Видимость = ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете И (КоличествоСубконто <> 0);
		ОформлениеСтроки.Ячейки.ВидСубконто2.Видимость = ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете И (КоличествоСубконто <> 0);
		ОформлениеСтроки.Ячейки.ВидСубконто3.Видимость = ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете И (КоличествоСубконто <> 0);

		ОформлениеСтроки.Ячейки.ВидСубконто1.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ВидСубконто2.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ВидСубконто3.ОтображатьТекст = Истина;

		Если ПрочиеРасходыБУ И ЗначениеЗаполнено(СчетЗатрат) Тогда

			Если КоличествоСубконто > 0 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконто1.Текст = СчетЗатрат.ВидыСубконто.Получить(0).ВидСубконто;
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконто1.Текст = "";
			КонецЕсли;

			Если КоличествоСубконто > 1 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконто2.Текст = СчетЗатрат.ВидыСубконто.Получить(1).ВидСубконто;
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконто2.Текст = "";
			КонецЕсли;

			Если КоличествоСубконто > 2 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконто3.Текст = СчетЗатрат.ВидыСубконто.Получить(2).ВидСубконто;
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконто3.Текст = "";
			КонецЕсли;

		Иначе

			ОформлениеСтроки.Ячейки.ВидСубконто1.Текст = "";
			ОформлениеСтроки.Ячейки.ВидСубконто2.Текст = "";
			ОформлениеСтроки.Ячейки.ВидСубконто3.Текст = "";

		КонецЕсли;

	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("ВидСубконтоНУ3") = НЕОПРЕДЕЛЕНО Тогда

		ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.Видимость = ПрочиеРасходыНУ И ОтражатьВНалоговомУчете И (КоличествоСубконтоНУ <> 0) И НЕ ОдинаковаяАналитикаБУ_НУ;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.Видимость = ПрочиеРасходыНУ И ОтражатьВНалоговомУчете И (КоличествоСубконтоНУ <> 0) И НЕ ОдинаковаяАналитикаБУ_НУ;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.Видимость = ПрочиеРасходыНУ И ОтражатьВНалоговомУчете И (КоличествоСубконтоНУ <> 0) И НЕ ОдинаковаяАналитикаБУ_НУ;

		ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.ОтображатьТекст = Истина;

		Если ПрочиеРасходыНУ И ЗначениеЗаполнено(СчетЗатратНУ) Тогда

			Если КоличествоСубконтоНУ > 0 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.Текст = СчетЗатратНУ.ВидыСубконто.Получить(0).ВидСубконто;
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.Текст = "";
			КонецЕсли;

			Если КоличествоСубконтоНУ > 1 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.Текст = СчетЗатратНУ.ВидыСубконто.Получить(1).ВидСубконто;
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.Текст = "";
			КонецЕсли;

			Если КоличествоСубконтоНУ > 2 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.Текст = СчетЗатратНУ.ВидыСубконто.Получить(2).ВидСубконто;
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.Текст = "";
			КонецЕсли;

		Иначе

			ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.Текст = "";
			ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.Текст = "";
			ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.Текст = "";

		КонецЕсли;

	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("Продукция") = НЕОПРЕДЕЛЕНО Тогда
		
		Если БракВПроизводстве
		   И Продукция.ВестиУчетПоХарактеристикам
		Тогда
			ВидимостьХарактеристикаПродукции = глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры");
		Иначе
			ВидимостьХарактеристикаПродукции = Ложь;
		КонецЕсли;
		
		Если БракВПроизводстве
		   И Продукция.ВестиУчетПоСериям
		Тогда
			ВидимостьСерияПродукции = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
		Иначе
			ВидимостьСерияПродукции = Ложь;
		КонецЕсли;

		ОформлениеСтроки.Ячейки.Продукция.Видимость               = БракВПроизводстве;
		ОформлениеСтроки.Ячейки.ХарактеристикаПродукции.Видимость = ВидимостьХарактеристикаПродукции;
		ОформлениеСтроки.Ячейки.СерияПродукции.Видимость          = ВидимостьСерияПродукции;
	
		ОформлениеСтроки.Ячейки.Продукция.ТолькоПросмотр               = НЕ БракВПроизводстве;
		ОформлениеСтроки.Ячейки.ХарактеристикаПродукции.ТолькоПросмотр = НЕ ВидимостьХарактеристикаПродукции;
		ОформлениеСтроки.Ячейки.СерияПродукции.ТолькоПросмотр          = НЕ ВидимостьСерияПродукции;

	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("ОбъектСтроительства") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.ОбъектСтроительства.Видимость = Строительство;
		ОформлениеСтроки.Ячейки.ОбъектСтроительства.ТолькоПросмотр = НЕ Строительство;
	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("СпособСтроительства") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.СпособСтроительства.Видимость = Строительство;
		ОформлениеСтроки.Ячейки.СпособСтроительства.ТолькоПросмотр = НЕ Строительство;
	КонецЕсли;
	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("Субконто1") = НЕОПРЕДЕЛЕНО Тогда

		ОформлениеСтроки.Ячейки.Субконто1.Видимость = ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете И (КоличествоСубконто <> 0);
		ОформлениеСтроки.Ячейки.Субконто2.Видимость = ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете И (КоличествоСубконто <> 0);
		ОформлениеСтроки.Ячейки.Субконто3.Видимость = ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете И (КоличествоСубконто <> 0);

		ОформлениеСтроки.Ячейки.Субконто1.ТолькоПросмотр = (КоличествоСубконто < 1) ИЛИ НЕ (ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете);
		ОформлениеСтроки.Ячейки.Субконто2.ТолькоПросмотр = (КоличествоСубконто < 2) ИЛИ НЕ (ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете);
		ОформлениеСтроки.Ячейки.Субконто3.ТолькоПросмотр = (КоличествоСубконто < 3) ИЛИ НЕ (ПрочиеРасходыБУ И ОтражатьВБухгалтерскомУчете);

		ОформлениеСтроки.Ячейки.СубконтоНУ1.Видимость = ПрочиеРасходыНУ И ОтражатьВНалоговомУчете И (КоличествоСубконтоНУ <> 0) И НЕ ОдинаковаяАналитикаБУ_НУ;
		ОформлениеСтроки.Ячейки.СубконтоНУ2.Видимость = ПрочиеРасходыНУ И ОтражатьВНалоговомУчете И (КоличествоСубконтоНУ <> 0) И НЕ ОдинаковаяАналитикаБУ_НУ;
		ОформлениеСтроки.Ячейки.СубконтоНУ3.Видимость = ПрочиеРасходыНУ И ОтражатьВНалоговомУчете И (КоличествоСубконтоНУ <> 0) И НЕ ОдинаковаяАналитикаБУ_НУ;

		ОформлениеСтроки.Ячейки.СубконтоНУ1.ТолькоПросмотр = (КоличествоСубконтоНУ < 1) ИЛИ НЕ (ПрочиеРасходыНУ И ОтражатьВНалоговомУчете);
		ОформлениеСтроки.Ячейки.СубконтоНУ2.ТолькоПросмотр = (КоличествоСубконтоНУ < 2) ИЛИ НЕ (ПрочиеРасходыНУ И ОтражатьВНалоговомУчете);
		ОформлениеСтроки.Ячейки.СубконтоНУ3.ТолькоПросмотр = (КоличествоСубконтоНУ < 3) ИЛИ НЕ (ПрочиеРасходыНУ И ОтражатьВНалоговомУчете);
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьЯчеекАналитикиЗатрат()

// Процедура устанавливает статью затрат в субконто.
// Используется когда в документе есть статья затрат и счет
// с субконто вида "СтатьяЗатрат".
//
Процедура УстановитьСубконтоСтатьяЗатрат(Знач СтатЗатрат, Знач Счет, Субк1, Субк2, Субк3) Экспорт

	ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтатьиЗатрат"];
	Если Счет.ВидыСубконто.Найти( ВидСубк) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НомерСубконто = Счет.ВидыСубконто.Найти( ВидСубк).НомерСтроки;

	Если НомерСубконто = 1 Тогда
		Субк1 = СтатЗатрат;

	ИначеЕсли НомерСубконто = 2 Тогда
		Субк2 = СтатЗатрат;

	ИначеЕсли НомерСубконто = 3 Тогда
		Субк3 = СтатЗатрат;

	КонецЕсли;

КонецПроцедуры // УстановитьСубконтоСтатьяЗатрат()

// Функция возвращает подразделение организации, соответствующее подразделению компании.
//
// Параметры:
//	Организация - СправочникСсылка.Организации
//	Подразделение - СправочникСсылка.Подразделения
//	ОтражатьВБухгалтерскомУчете - Булево - Признак отражения документа в бух. учете
//
// Возвращаемое значение:
//	СправочникСсылка.ПодразделенияОрганизаций - Подразделение организации
//
Функция ПолучитьПодразделениеОрганизации(
	Организация,
	Подразделение,
	ОтражатьВБухгалтерскомУчете
	) Экспорт
	
	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если ОтражатьВБухгалтерскомУчете Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеПодразделений.ПодразделениеОрганизации
		|ИЗ
		|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделений
		|
		|ГДЕ
		|	СоответствиеПодразделений.Подразделение = &Подразделение
		|	И СоответствиеПодразделений.Организация = &Организация
		|	И СоответствиеПодразделений.ПодразделениеОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|";
					   
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Организация", Организация);

		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодразделениеОрганизации;
	
КонецФункции // ПолучитьПодразделениеОрганизации();

// Процедура заполняет номенклатурную группу и статью затрат в строке табличной части.
//
Процедура ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ЕстьСтатьяЗатрат = Истина, ЕстьНоменклатурнаяГруппа = Истина) Экспорт

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда

		Если ЕстьСтатьяЗатрат Тогда
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
		КонецЕсли;

		Если ЕстьНоменклатурнаяГруппа Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля()

// Процедура заполняет значение счета затрат в табличной части документа в зависимости от статьи затрат.
//
Процедура ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтатьяЗатрат, ИмяСчетаЗатрат = "СчетЗатрат", ИмяСчетаЗатратНУ = "СчетЗатратНУ",ИмяКорСчета=неопределено) Экспорт
    КорСчет = ?(ИмяКорСчета=неопределено,неопределено,СтрокаТабличнойЧасти[ИмяКорСчета]);
	СчетаУчета = ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, СтатьяЗатрат,КорСчет);

	СтрокаТабличнойЧасти[ИмяСчетаЗатрат]   = СчетаУчета.СчетУчетаБУ;
	СтрокаТабличнойЧасти[ИмяСчетаЗатратНУ] = СчетаУчета.СчетУчетаНУ;

КонецПроцедуры // ЗаполнитьСчетЗатратВСтрокеТабличногоПоля()

// Процедура заполняет значение счета затрат НУ в табличной части документа.
//
Процедура ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти) Экспорт

	СчетЗатратНУ = ПолучитьСчетПрямыхРасходовНУ(СтрокаТабличнойЧасти.СчетЗатрат);
	СтрокаТабличнойЧасти.СчетЗатратНУ = СчетЗатратНУ;
	
КонецПроцедуры // ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ

// Процедура проверяет соответствие подразделения организации и организации в документе.
//
// Параметры
//  ДокументОбъект - Документ, в котором проверяется соответствие
//  Отказ          - Значению параметра будет присвоено Истина, если соответствия нет
//  Заголовок      - Заголовок сообщения о том, что соответствия нет
Процедура ПроверитьПодразделениеОрганизации(ДокументОбъект, Отказ, Заголовок) Экспорт
	
	Если Не ДокументОбъект.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Организация)
	   И ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)
	   И Не ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда

		ОбщегоНазначения.СообщитьОбОшибке("Указанное в документе подразделение не соответствует организации!", Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьПодразделениеОрганизации()

// Процедура проверяет соответствие подразделения организации в строках табличной части документа
// и организации в шапке документа.
//
// Параметры
//  ДокументОбъект - Документ, в котором проверяется соответствие
//  ТабЧасть       - Табличная часть, в строках которой проверяется
//  ИмяТабЧасти    - Имя табличной части
//  ИмяРеквизитаТЧ - Имя реквизита с проверяемыми значениями
//  Отказ          - Значению параметра будет присвоено Истина, если соответствия нет
//  Заголовок      - Заголовок сообщения о том, что соответствия нет
Процедура ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ДокументОбъект, ТабЧасть, ИмяТабЧасти, ИмяРеквизитаТЧ = "ПодразделениеОрганизации", Отказ, Заголовок) Экспорт
	
	Если Не ДокументОбъект.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаТабличнойЧасти из ТабЧасть Цикл
		   Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаТЧ])
		   И Не СтрокаТабличнойЧасти[ИмяРеквизитаТЧ].Владелец = ДокументОбъект.Организация Тогда

			ОбщегоНазначения.СообщитьОбОшибке("Указанное подразделение не соответствует организации! Строка № " + СтрокаТабличнойЧасти.НомерСтроки + " (таб. часть """ + ИмяТабЧасти + """)", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти()
