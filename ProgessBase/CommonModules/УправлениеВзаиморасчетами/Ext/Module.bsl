////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ПРИ ПРОВЕДЕНИИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация           - ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента - ссылка на договор, выбранный в документе,
//  ДоговорОрганизация    - ссылка на Организацию, выбранную в договоре,
//  Отказ                 - флаг отказа в проведении.
//  Заголовок             - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, 
	                                                  ДоговорОрганизация, Отказ, Заголовок) Экспорт

	// Если не заполнен договор или организация, то не ругаемся.
	Если ЗначениеЗаполнено(Организация) 
	   И ЗначениеЗаполнено(ДоговорКонтрагента)
	   И Организация <> ДоговорОрганизация Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

// Для документов, у которых договор контрагента находится в табличной части
// что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		// Если не заполнен договор или организация, то не ругаемся.
		Если ЗначениеЗаполнено(ДокументОбъект.Организация) 
		   И ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		   И ДокументОбъект.Организация <> СтрокаТаблицы.ДоговорОрганизация Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке 
			                 + " выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти()

// Для документов, у которых договор контрагента и сделка находятся в табличной части
// (например, "Авансовый отчет", "Корректировка долга") проверяет заполнена ли сделка, если
// в договоре взаиморасчетов установлено ведение взаиморасчетов по заказам.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСделкуВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

	    СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

	    Если (СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		  ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) 
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда

				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "выбран договор, по которому взаиморасчеты ведутся по заказам. " +
				                   "Необходимо заполнить заказ поставщику!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьСделкуВТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ 

// Вычисляет текущий долг контрагента по заданному договору и сделке в валюте взаиморасчетов 
// по данному договору
//
// Параметры: 
//  Договор - ссылка на элемент справочника, определяет договор контрагента, по которому надо получить долг, 
//  Сделка  - ссылка на документ, определяет сделку (заказ, накладную, платежный документ) по которому надо получить долг.
//  СсылкаДокумент           - ссылка на документ, для которого рассчитывается долг.
//
// Возвращаемое значение:
//  Число -  текущий размер долга, если удалось вычислить текущий долг, иначе - 0.
//
Функция ТекущийДолг(Договор, Сделка = Неопределено, СсылкаДокумент) Экспорт

	ТекущийДолг = 0;
	СтруктураОтбора = Новый Структура(); // для отбора остатков взаиморасчетов
	СтруктураОтбора.Вставить("ДоговорКонтрагента", Договор);
	СтруктураОтбора.Вставить("Контрагент", Договор.Владелец);
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТекущийДолг = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
						СтруктураОтбора,"ДоговорКонтрагента","СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
						
		Иначе // Взаиморасчеты ведутся по сделкам
			Если ЗначениеЗаполнено(Сделка) Тогда
				СтруктураОтбора.Вставить("Сделка", Сделка);
				ТекущийДолг = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
				СтруктураОтбора,"ДоговорКонтрагента,Сделка","СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат ТекущийДолг;
	
КонецФункции // ТекущийДолг()

// Функция возвращает список значений видов договоров взаиморасчетов для поставщика.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика()

// Функция возвращает список значений видов договоров взяиморасчетов для покупателя.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя()

// Функция возвращает список значений видов договоров взаиморасчетов когда
// контрагент не является ни поставщиком не покупателем.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее()

// Определяет сделку, по которой надо провести документ
//
// Параметры: 
//  Объект          		- объект (документ или строка табличной части) 
//  Параметры 				- выборка из результата запроса, структура. Обязательно должна содержать поле (ключ) ВедениеВзаиморасчетов
//  ИмяРеквизитаСделка      - необязательный параметр, имя реквизита "сделка"
//  Расчеты                 - флаг, показывающий, что сделка определяется для записи в регистр РасчетыСКонтрагентами
// 							(при этом сделка прописывается, даже если взаиморасчеты ведутся по договору в целом)
//  ВозвратнаяТара          - флаг, показывающий, что определяется сделка для формирования движений по возвратной таре 
//							регистров "Товары полученные" и "Товары переданные". 
//							(в этом случае при ведении взаиморасчетов по расчетным документам сделка не прописывается)
//
// Возвращаемое значение:
//  Ссылка на документ или Неопределено, т.е. значение, которое надо записать в измерение Сделка регистра.
//
Функция ОпределитьСделку(Объект, Параметры, ИмяРеквизитаСделка = "Сделка", Расчеты = Ложь, ВозвратнаяТара = Ложь) Экспорт

	// Возвращаемое значение.
	Сделка = Неопределено;
	
	Если Параметры.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		  ИЛИ Параметры.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
		  ИЛИ (Расчеты И ЗначениеЗаполнено(Объект[ИмяРеквизитаСделка])) Тогда

		Сделка = Объект[ИмяРеквизитаСделка];

	КонецЕсли;

	Возврат Сделка;

КонецФункции // ОпределитьСделку()

// Дополняет дерево полей запроса по шапке реквизитами договора, нужными для контроля остатков взаиморасчетов.
//
// Параметры
//  ДеревоПолейЗапросаПоШапке - дерево, дополняемое дерево полей запроса,
//  РежимПроведения           - режим проведения документа.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения) Экспорт

	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                       , "ВедениеВзаиморасчетов");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                        , "ВалютаВзаиморасчетов");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьСуммуЗадолженности" , "КонтролироватьСуммуЗадолженности");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ДопустимаяСуммаЗадолженности" , "ДопустимаяСуммаЗадолженности");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ПроцентПредоплаты" , "ПроцентПредоплаты");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьЧислоДнейЗадолженности" , "КонтролироватьЧислоДнейЗадолженности");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ДопустимоеЧислоДнейЗадолженности" , "ДопустимоеЧислоДнейЗадолженности");
	КонецЕсли;

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр()

// Процедура выбора расчетного документа.
// Используется в документах подсистемы НДС.
//
Процедура ВыборРасчетногоДокумента(СтруктураПараметров,Элемент,ТипыДокументов) Экспорт

	ФормаВыбора = Документы.ДокументРасчетовСКонтрагентом.ПолучитьФорму("ФормаВыбора",Элемент);

	ФормаВыбора.Организация        = СтруктураПараметров.Организация;
	ФормаВыбора.Контрагент         = СтруктураПараметров.Контрагент;
	ФормаВыбора.ДоговорКонтрагента = СтруктураПараметров.ДоговорКонтрагента;
	ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
	ФормаВыбора.Счет               = СтруктураПараметров.СчетДляОпределенияОстатков;
	ФормаВыбора.ОстаткиОбороты     = СтруктураПараметров.СторонаСчета;
	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.мТипыДокументов    = ТипыДокументов;
	Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
		ФормаВыбора.НачПериода         = СтруктураПараметров.НачалоПериода;
		ФормаВыбора.мПереданИнтервал = Истина;
	Иначе
		ФормаВыбора.мПереданИнтервал = Ложь;
	КонецЕсли; 

	ФормаВыбора.Открыть();

КонецПроцедуры // ВыборРасчетногоДокумента()

// Преобразует значение системного перечисления ВидСравнения в текст для запроса
//
// Параметры
//  СтруктураОтбора		–	<Структура>
//							Структура параметров отбора. Если есть элемент структуры с ключом "ВидСравненияОтбора",
//							значение этого элемента преобразуется в текст для запроса.
//							Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <Строка> – текст сравнения для запроса
//
Функция ПолучитьВидСравненияДляЗапроса(СтруктураОтбора)

	Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат "<>";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		Возврат "В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		Возврат "НЕ В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат ">";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ">=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат "<";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат "<=";
	Иначе // другие варианты 
		Возврат "=";
	КонецЕсли;

КонецФункции // ПолучитьВидСравненияДляЗапроса()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			ВидСравненияЗапроса = ПолучитьВидСравненияДляЗапроса(СтруктураОтбора);
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Если (ДоговорКонтрагента.Владелец<>ВладелецДоговора ИЛИ ДоговорКонтрагента.Организация<>ОрганизацияДоговора) ИЛИ (не ЗначениеЗаполнено(ДоговорКонтрагента)) Тогда	
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()


/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБСЛУЖИВАНИЯ ВЕДЕНИЯ ВЗАИМОРАСЧЕТОВ ПО ДОКУМЕНТАМ
// РАСЧЕТОВ С КОНТРАГЕНТАМИ

// Процедура формирует структуру с итоговыми данными взаиморасчетов по документу
Функция ПолучитьСтруктуруВзаиморасчетовПоДокументу(ДокументОбъект, СуммаВзаиморасчетовПоДокументу) Экспорт
	
	СтруктураВзаиморасчетов = Новый Структура;
	
	ТаблицаДокументов = ДокументОбъект.ДокументыРасчетовСКонтрагентом.Выгрузить();
	СтруктураВзаиморасчетов.Вставить("ПоДокументуВал", СуммаВзаиморасчетовПоДокументу);
	
	СтруктураВзаиморасчетов.Вставить("ПредоплатаВал", ТаблицаДокументов.Итог("СуммаВзаиморасчетов"));
	СтруктураВзаиморасчетов.Вставить("ПредоплатаРегл", ТаблицаДокументов.Итог("СуммаРегл"));
	
	ОстатокВал = СуммаВзаиморасчетовПоДокументу - СтруктураВзаиморасчетов.ПредоплатаВал;
	СтруктураВзаиморасчетов.Вставить("ОстатокВал", ОстатокВал);
	
	ОстатокРегл = ?(ДокументОбъект.КратностьВзаиморасчетов = 0, 0, ОстатокВал * ДокументОбъект.КурсВзаиморасчетов / ДокументОбъект.КратностьВзаиморасчетов);
	СтруктураВзаиморасчетов.Вставить("ОстатокРегл", ОстатокРегл);
	СтруктураВзаиморасчетов.Вставить("ПоДокументуРегл", ОстатокРегл + СтруктураВзаиморасчетов.ПредоплатаРегл);
	
	Возврат СтруктураВзаиморасчетов;
	
КонецФункции

Функция СформироватьТаблицуСделок(ДокументОбъект, СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = СтруктураПараметров.СуммаВключаетНДС;
	ИначеЕсли ДокументОбъект.Метаданные().Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	УчетАгентскогоНДС = СтруктураПараметров.Свойство("УчетАгентскогоНДС") И СтруктураПараметров.УчетАгентскогоНДС;
	
	УчитыватьНДС = (СуммаВключаетНДС И УчетАгентскогоНДС) ИЛИ (НЕ СуммаВключаетНДС И НЕ УчетАгентскогоНДС);
	Если УчитыватьНДС Тогда
		КолонкиСуммирования = "Сумма, СуммаНДС";
	Иначе
		КолонкиСуммирования = "Сумма";
	КонецЕсли;
	
	МогутБытьЗаказыВТабличныхЧастях = СтруктураПараметров.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
	Если МогутБытьЗаказыВТабличныхЧастях 
		И СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Истина Тогда
		ЕстьЗаказыВТабличныхЧастях = Истина;
		ИмяКолонкиСделка = СтруктураПараметров.ИмяЗаказаВТабличныхЧастях;
	Иначе
		ЕстьЗаказыВТабличныхЧастях = Ложь;
		ИмяКолонкиСделка = "Сделка";
	КонецЕсли;
	
	ТаблицаСделок = Новый ТаблицаЗначений;
	ТаблицаСделок.Колонки.Добавить(ИмяКолонкиСделка);
	ТаблицаСделок.Колонки.Добавить("Сумма");
	Если УчитыватьНДС Тогда
		ТаблицаСделок.Колонки.Добавить("СуммаНДС");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ИмяСделкиВШапкеДокумента") Тогда
		ИмяСделкиВШапкеДокумента = "Сделка";
	Иначе // Например, для документа ПолучениеУслугПоПереработке это "Заказ"
		ИмяСделкиВШапкеДокумента = СтруктураПараметров.ИмяСделкиВШапкеДокумента;
	КонецЕсли;
	
	Если ЕстьЗаказыВТабличныхЧастях Тогда
		
		Для каждого ТабЧасть Из СтруктураПараметров.СтруктураТабличныхЧастей Цикл
		
			Если ТабЧасть.Ключ = "ОбъектыСтроительства" Тогда
				СтрокаЗаказа = ТаблицаСделок.Добавить();
				СтрокаЗаказа[ИмяКолонкиСделка] = ДокументОбъект[ИмяСделкиВШапкеДокумента];
				СтрокаЗаказа.Сумма = ДокументОбъект[ТабЧасть.Ключ].Итог("Сумма");
				Если УчитыватьНДС Тогда
					СтрокаЗаказа.СуммаНДС = ДокументОбъект[ТабЧасть.Ключ].Итог("СуммаНДС");
				КонецЕсли;
			Иначе
				ТекТабЧасть = ДокументОбъект[ТабЧасть.Ключ].Выгрузить();
				ТекТабЧасть.Свернуть(ИмяКолонкиСделка, КолонкиСуммирования);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТекТабЧасть, ТаблицаСделок);
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
	
		Для каждого ТабЧасть Из СтруктураПараметров.СтруктураТабличныхЧастей Цикл
		
			СтрокаЗаказа = ТаблицаСделок.Добавить();
			СтрокаЗаказа[ИмяКолонкиСделка] = ДокументОбъект[ИмяСделкиВШапкеДокумента];
			СтрокаЗаказа.Сумма = ДокументОбъект[ТабЧасть.Ключ].Итог("Сумма");
			Если УчитыватьНДС Тогда
				СтрокаЗаказа.СуммаНДС = ДокументОбъект[ТабЧасть.Ключ].Итог("СуммаНДС");
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	// В шапке документа "Поступление доп. расходов" может быть указана дополнительная сумма,
	// которую надо провести по взаиморасчетам
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") И ДокументОбъект.Сумма <> 0 Тогда 
		СтрокаЗаказа = ТаблицаСделок.Добавить();
		СтрокаЗаказа[ИмяКолонкиСделка] = ДокументОбъект[ИмяСделкиВШапкеДокумента];
		СтрокаЗаказа.Сумма = ДокументОбъект.Сумма;
		Если УчитыватьНДС Тогда
			СтрокаЗаказа.СуммаНДС = ДокументОбъект.СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСделок.Свернуть(ИмяКолонкиСделка, КолонкиСуммирования);
	
	ТаблицаСделок.Колонки[ИмяКолонкиСделка].Имя = "Сделка";
	ТаблицаСделок.Колонки.Добавить("СуммаВзаиморасчетов");
	
	Для каждого СтрокаТаблицы из ТаблицаСделок Цикл
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС И УчетАгентскогоНДС Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
			Иначе //(НЕ СуммаВключаетНДС) И (НЕ УчетАгентскогоНДС)
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
			
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                    СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.ВалютаВзаиморасчетов,
		                                    СтруктураПараметров.КурсДокумента, СтруктураПараметров.КурсВзаиморасчетов, 
		                                    СтруктураПараметров.КратностьДокумента, СтруктураПараметров.КратностьВзаиморасчетов);
	КонецЦикла;
	
	Возврат ТаблицаСделок;
	
КонецФункции

// Процедура выполняет заполение ТЧ "Документы расчетов с контрагентом"
// Параметры:
//	ДокументОбъект
//	СтруктураПараметров - структура, включающая следующие параметры
//			- СтруктураТабличныхЧастей - структура, ключами которой являются имена табличных частей;
//										в качестве значений структуры могут передаваться 
//										таблицы значений, содержащие данные самих табличных частей
//							
//			- СуммаВключаетНДС         - признак включения НДС в сумму
//			- ВалютаВзаиморасчетов     - валюта взаиморасчетов (ссылка на элемент справочника "Валюты")
//			- СуммаВзаиморасчетов
//			- ВалютаДокумента
//			- КурсВзаиморасчетов
//			- КратностьВзаиморасчетов
//			- ДоговорКонтрагента
//			- ОтражатьВРегламентированномУчете - признак отражения документа в регламентированном учете
//			- РасчетыВУсловныхЕдиницах         - признак ведения взаиморасчетов в условных единицах
//			- ВедениеВзаиморасчетов
//			- Дата - дата документа
//	Направление - направление взаиморасчетов: "поступление" или "реализация"
//	УчетЗаказов - учет заказов при ведении взаиморасчетов по договору в целом:
//					- "только по заказу"      - если указан заказ, то заполнение происходит только документами, связанными с этим заказом
//                  - "по заказу и свободные" - заполняется сначала документами по заказу, а затем документами, в которых не был указан заказ
//					- "приоритет заказа"      - заполняется сначала документами по заказу, затем документами в которых заказ не был указан, затем документами по другим заказам
//					- "не учитывать"          - не учитываются заказы
//	УчетСуммыДокумента - учитывать сумму документа при заполнении или заполнять всеми остатками, предоставив пользователю право выбора
//
Процедура ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ДокументОбъект, СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) 
		ИЛИ НЕ СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ДокументОбъект.ДокументыРасчетовСКонтрагентом.Очистить();
		Возврат;
	КонецЕсли;
	
	СделкаВШапкеДокумента = НЕ СтруктураПараметров.Свойство("ТаблицаСделок");
	
	Если СделкаВШапкеДокумента Тогда
		
		ТаблицаСделок = Новый ТаблицаЗначений;
		ТаблицаСделок.Колонки.Добавить("Сделка");
		ТаблицаСделок.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число"));
		
		СтрокаСделки = ТаблицаСделок.Добавить();
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Сделка) 
			ИЛИ СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаСделки.Сделка = Неопределено;
		Иначе
			СтрокаСделки.Сделка = СтруктураПараметров.Сделка;
		КонецЕсли;
		СтрокаСделки.СуммаВзаиморасчетов = СтруктураПараметров.СуммаВзаиморасчетов;
		
	Иначе
		
		ТаблицаСделок = СтруктураПараметров.ТаблицаСделок;
		
		Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТаблицаСделок.ЗаполнитьЗначения(Неопределено, "Сделка");
			ТаблицаСделок.Свернуть("Сделка", "СуммаВзаиморасчетов");
		КонецЕсли;
		
	КонецЕсли;
	
	Направление        = СтруктураПараметров.Направление;
	ВидЗаполнения      = СтруктураПараметров.ВидЗаполнения;
	УчетСуммыДокумента = СтруктураПараметров.УчетСуммыДокумента;
	
	// Выбираем из оперативных итогов все остатки по документам с датой оплаты меньше даты поступления (реализации)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &Множитель КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток * &Множитель КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА &ПустаяДата
	|		КОГДА (НЕ &ОпределениеВремениПроведенияПлатежногоДокументаПоКонцуДняРегистрацииДокумента)
	|				И НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.ДатаОплаты, ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ) = НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ)
	|			ТОГДА ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.ДатаОплаты, ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ)
	|	КОНЕЦ КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыПоДокументамОстатки.Сделка В (&СделкиДокумента)
	|			ТОГДА 1
	|		КОГДА ВзаиморасчетыПоДокументамОстатки.Сделка = НЕОПРЕДЕЛЕНО
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	|		,
	|		ДоговорКонтрагента = &ДоговорКонтрагента
	|		    И ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|		    И УпрУчет = &УпрУчет) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &Множитель > 0
	|	И ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата
	|			КОГДА (НЕ &ОпределениеВремениПроведенияПлатежногоДокументаПоКонцуДняРегистрацииДокумента)
	|					И НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.ДатаОплаты, ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ) = НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ)
	|				ТОГДА ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата
	|			ИНАЧЕ КОНЕЦПЕРИОДА(ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.ДатаОплаты, ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ)
	|		КОНЕЦ < &Дата
	|	И ВЫБОР
	|			КОГДА ВзаиморасчетыПоДокументамОстатки.Сделка В (&СделкиДокумента)
	|				ТОГДА 1
	|			КОГДА ВзаиморасчетыПоДокументамОстатки.Сделка = НЕОПРЕДЕЛЕНО
	|				ТОГДА 2
	|			ИНАЧЕ 3
	|		КОНЕЦ <= &МаксПриоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Сделка,
	|	ДокументРасчетовСКонтрагентом
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("Дата", КонецДня(СтруктураПараметров.Дата));
	Иначе
		Запрос.УстановитьПараметр("Дата", СтруктураПараметров.Дата);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураПараметров.ДоговорКонтрагента);
	Если СтруктураПараметров.Свойство("ОтражатьВУправленческомУчете") Тогда
		Запрос.УстановитьПараметр("УпрУчет", СтруктураПараметров.ОтражатьВУправленческомУчете);
	ИначеЕсли ДокументОбъект.Метаданные().Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
		Запрос.УстановитьПараметр("УпрУчет", ДокументОбъект.ОтражатьВУправленческомУчете);
	Иначе
		Запрос.УстановитьПараметр("УпрУчет", Истина);
	КонецЕсли; 
	СделкиДокумента = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСделок.ВыгрузитьКолонку("Сделка"));
	Запрос.УстановитьПараметр("СделкиДокумента", СделкиДокумента);
	ВидРасчетовСКонтрагентом = ?(Направление = "Поступление", Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению,
	                             Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	Запрос.УстановитьПараметр("ВидРасчетовСКонтрагентом", ВидРасчетовСКонтрагентом);
	
	Если Направление = "Поступление" Тогда
		МножительНаправления = 1;
	Иначе
		МножительНаправления = -1;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ЭтоВозврат") Тогда
		МножительВозврата = ?(СтруктураПараметров.ЭтоВозврат = Истина, -1, 1);
		Запрос.УстановитьПараметр("ЭтоВозврат", ?(ТипЗнч(СтруктураПараметров.ЭтоВозврат) = Тип("Булево"), СтруктураПараметров.ЭтоВозврат, Ложь));
	Иначе
		МножительВозврата = 1;
		Запрос.УстановитьПараметр("ЭтоВозврат", Ложь);
	КонецЕсли;
	Множитель = МножительНаправления * МножительВозврата;
	Запрос.УстановитьПараметр("Множитель", Множитель);
	
	Если ВидЗаполнения = "только по заказам" Тогда
		МаксПриоритет = 1;
	ИначеЕсли ВидЗаполнения = "по заказам и свободные" Тогда
		МаксПриоритет = 2;
	Иначе
		МаксПриоритет = 3;
	КонецЕсли;
	
	ОпределениеВремениПроведенияПлатежногоДокумента = глЗначениеПеременной("ОпределениеВремениПроведенияПлатежногоДокумента");
	
	Запрос.УстановитьПараметр("МаксПриоритет", МаксПриоритет);
	Запрос.УстановитьПараметр("ОпределениеВремениПроведенияПлатежногоДокументаПоКонцуДняРегистрацииДокумента", ОпределениеВремениПроведенияПлатежногоДокумента = Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоКонцуДняРегистрацииДокумента);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	
	ТаблицаПредоплат = ДокументОбъект.ДокументыРасчетовСКонтрагентом.Выгрузить();
	ТаблицаПредоплат.Очистить();
	
	Если МаксПриоритет = 3 И НЕ УчетСуммыДокумента Тогда
		// Заполняем всеми доступными остатками. Выбрать нужные должен будет пользователь,
		// удалив лишние строки или откорректировав суммы
		Для каждого СтрокаОстатка Из ТаблицаОстатков Цикл
			НоваяСтрокаПредоплаты = ТаблицаПредоплат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПредоплаты, СтрокаОстатка);
		КонецЦикла;
		
	Иначе
		// Заполняем доступными остатками на сумму, не превышающую сумму документа
		// в соответствии с заданными приоритетами
		Для Приоритет = 1 По МаксПриоритет Цикл
			
			Для каждого СтрокаСделки Из ТаблицаСделок Цикл
				
				Если СтрокаСделки.СуммаВзаиморасчетов = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Приоритет = 1 Тогда
					СтруктураОтбораОстатков = Новый Структура("Приоритет, Сделка", 1, СтрокаСделки.Сделка);
					СтрокиСОтбором = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
				ИначеЕсли Приоритет = 2 Тогда
					СтруктураОтбораОстатков = Новый Структура("Приоритет", 2);
					СтрокиСОтбором = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
				Иначе
					СтрокиСОтбором = ТаблицаОстатков;
				КонецЕсли;
				
				Для каждого СтрокаОстатка Из СтрокиСОтбором Цикл
					
					Если СтрокаСделки.СуммаВзаиморасчетов = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.СуммаВзаиморасчетов = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрокаПредоплаты = ТаблицаПредоплат.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПредоплаты, СтрокаОстатка);
					НоваяСтрокаПредоплаты.СуммаВзаиморасчетов = Мин(СтрокаСделки.СуммаВзаиморасчетов, СтрокаОстатка.СуммаВзаиморасчетов);
					НоваяСтрокаПредоплаты.СуммаРегл           = СтрокаОстатка.СуммаРегл * НоваяСтрокаПредоплаты.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов;
					
					СтрокаСделки.СуммаВзаиморасчетов  = СтрокаСделки.СуммаВзаиморасчетов - НоваяСтрокаПредоплаты.СуммаВзаиморасчетов;
					СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - НоваяСтрокаПредоплаты.СуммаВзаиморасчетов;
					СтрокаОстатка.СуммаРегл           = СтрокаОстатка.СуммаРегл - НоваяСтрокаПредоплаты.СуммаРегл;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.ДокументыРасчетовСКонтрагентом.Загрузить(ТаблицаПредоплат);

КонецПроцедуры // ЗаполнитьДокументыРасчетовСКонтрагентом()

Процедура ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ДокументОбъект, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметров.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", ДокументОбъект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом);
	Если НЕ СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		Возврат;
	КонецЕсли;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если НЕ СтруктураПараметров.Свойство("СтруктураТабличныхЧастей") Тогда
		СтруктураТабЧастей = Новый Структура;
		Для каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			Если ТабЧасть.Имя <> "ВозвратнаяТара" И ТабЧасть.Имя <> "ДокументыРасчетовСКонтрагентом" Тогда
				СтруктураТабЧастей.Вставить(ТабЧасть.Имя);
			КонецЕсли;
		КонецЦикла;
		СтруктураПараметров.Вставить("СтруктураТабличныхЧастей", СтруктураТабЧастей);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И НЕ СтруктураПараметров.Свойство("ИмяЗаказаВТабличныхЧастях") Тогда
		СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Направление") Тогда
		СтруктураПараметров.Вставить("Направление", "Поступление");
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ВидЗаполнения") Тогда
		СтруктураПараметров.Вставить("ВидЗаполнения", "только по заказам");
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("УчетСуммыДокумента") Тогда
		СтруктураПараметров.Вставить("УчетСуммыДокумента", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		СтруктураПараметров.Вставить("Дата", ДокументОбъект.Дата);
	Иначе
		СтруктураПараметров.Вставить("Дата", ОбщегоНазначения.ПолучитьРабочуюДату());	
	КонецЕсли;

	СтруктураПараметров.Вставить("ОтражатьВРегламентированномУчете", ДокументОбъект.Организация.ОтражатьВРегламентированномУчете);
	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
	    СтруктураПараметров.Вставить("ОтражатьВУправленческомУчете", ДокументОбъект.ОтражатьВУправленческомУчете);
	Иначе
	    СтруктураПараметров.Вставить("ОтражатьВУправленческомУчете", Истина);
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено Тогда
	    СтруктураПараметров.Вставить("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС);
	Иначе
	    СтруктураПараметров.Вставить("СуммаВключаетНДС", Истина);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов",    ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВзаиморасчетов",      ДокументОбъект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("КратностьВзаиморасчетов", ДокументОбъект.КратностьВзаиморасчетов);
	
	СтруктураПараметров.Вставить("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ДокументОбъект.мВалютаРегламентированногоУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ДокументОбъект.мВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("КурсДокумента",      КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента", КратностьДокумента);
	
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ВедениеВзаиморасчетов", ДокументОбъект.ДоговорКонтрагента.ВедениеВзаиморасчетов);
	СтруктураПараметров.Вставить("РасчетыВУсловныхЕдиницах", ДокументОбъект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах);
	СтруктураПараметров.Вставить("УчетАгентскогоНДС", ДокументОбъект.ДоговорКонтрагента.УчетАгентскогоНДС);
	
	ТаблицаСделок = СформироватьТаблицуСделок(ДокументОбъект, СтруктураПараметров);
	СтруктураПараметров.Вставить("ТаблицаСделок", ТаблицаСделок);
	
КонецПроцедуры

#Если Клиент Тогда

// Процедура подготавливает необходимые данные и вызывает процедуру заполнения табличной части 
// документов расчетов с контрагентами ("Предоплата", "Документы поступления", "Документы реализации") 
//
Процедура ЗаполнитьПредоплату(ДокументОбъект, СтруктураПараметров) Экспорт
	
	Если ДокументОбъект.Проведен И ДокументОбъект.ДокументыРасчетовСКонтрагентом.Количество() > 0 Тогда
		ТекстПредупреждения = "Для заполнения табличной части нужно сначала сделать документ непроведенным!";
		Предупреждение(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект.ДокументыРасчетовСКонтрагентом.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ДокументОбъект.Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ДокументОбъект.ДокументыРасчетовСКонтрагентом.Очистить();
	КонецЕсли;
	
	ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ДокументОбъект, СтруктураПараметров);
	ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ДокументОбъект, СтруктураПараметров);
	
КонецПроцедуры
	
// Процедура заполняет поля СуммаВзаиморасчетов и СуммаРегл
// в строке табличной части ДокументыРасчетовСКонтрагентом
// Параметры:
// СуммаВзаиморасчетовУказанаВСтроке - <Булево>. Если Истина - рассчитываем только сумму регл.учета
//                                     по указанной в строке сумме взаиморасчетов.
//                                     Если Ложь - рассчитываем обе суммы
//
Процедура РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ДанныеСтроки, СтруктураПараметров, РассчитыватьСуммуВзаиморасчетов = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	
	ОплатаПоНесколькимСделкам = Ложь;
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТекСделка = Неопределено;
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТекСделка = ДокументОбъект.Сделка;
	Иначе //.ПоЗаказам
		Если СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Истина Тогда
			ТекСделка = ДанныеСтроки.Сделка;
			ОплатаПоНесколькимСделкам = Истина;
		ИначеЕсли СтруктураПараметров.Свойство("ИмяСделкиВШапкеДокумента") Тогда
			ТекСделка = ДокументОбъект[СтруктураПараметров.ИмяСделкиВШапкеДокумента];
		Иначе
			ТекСделка = ДокументОбъект.Сделка;
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Сделка", ТекСделка);
	
	Запрос.УстановитьПараметр("ДокументРасчетовСКонтрагентом", ДанныеСтроки.ДокументРасчетовСКонтрагентом);
	Если СтруктураПараметров.Свойство("ЭтоВозврат") Тогда
		МножительВозврата = ?(СтруктураПараметров.ЭтоВозврат, -1, 1);
	Иначе
		МножительВозврата = 1;
	КонецЕсли;
	Если СтруктураПараметров.Направление = "Реализация" Тогда
		МножительНаправления = -1;
		ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураПараметров.Направление = "Поступление" Тогда
		МножительНаправления = 1;
		ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		МножительНаправления= 1;
		ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	Множитель = МножительНаправления * МножительВозврата;
	Запрос.УстановитьПараметр("ВидРасчетовСКонтрагентом", ВидРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("УпрУчет", ДокументОбъект.ОтражатьВУправленческомУчете);
	Запрос.УстановитьПараметр("Множитель", Множитель);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0) * &Множитель > 0
	|			ТОГДА ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &Множитель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток, 0) * &Множитель > 0
	|			ТОГДА ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток * &Множитель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	|		,
	|		ДоговорКонтрагента = &ДоговорКонтрагента
	|		    И Сделка = &Сделка
	|		    И ДокументРасчетовСКонтрагентом = &ДокументРасчетовСКонтрагентом
	|		    И ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|		    И УпрУчет = &УпрУчет) КАК ВзаиморасчетыПоДокументамОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если СтруктураПараметров.Свойство("КурсСтрокиДокументаРасчетов") И ТипЗнч(СтруктураПараметров.КурсСтрокиДокументаРасчетов) = Тип("Число") Тогда
		КурсСтрокиДокументаРасчетов = СтруктураПараметров.КурсСтрокиДокументаРасчетов;
	Иначе
		КурсСтрокиДокументаРасчетов = 0;
	КонецЕсли;
	КурсОстатка = ?(Выборка.СуммаВзаиморасчетов = 0, КурсСтрокиДокументаРасчетов, Выборка.СуммаРегл / Выборка.СуммаВзаиморасчетов);
	
	Если НЕ РассчитыватьСуммуВзаиморасчетов Тогда
	
		ДанныеСтроки.СуммаРегл = Окр(ДанныеСтроки.СуммаВзаиморасчетов * КурсОстатка, 2);
		
		Если НЕ ДокументОбъект.Проведен И Выборка.СуммаВзаиморасчетов < ДанныеСтроки.СуммаВзаиморасчетов Тогда
			ВалютаПредставление = Строка(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
			ТекстСообщения = "Указана сумма взаиморасчетов, превышающая непогашенный остаток по документу расчетов с контрагентом!
			| Остаток " + Выборка.СуммаВзаиморасчетов + " " + ВалютаПредставление + "; "
			+ " указана сумма " + ДанныеСтроки.СуммаВзаиморасчетов + " " + ВалютаПредставление + "; "
			+ " превышение " + (ДанныеСтроки.СуммаВзаиморасчетов - Выборка.СуммаВзаиморасчетов) + " " + ВалютаПредставление;
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		КонецЕсли;
	
	Иначе
		Если Выборка.СуммаВзаиморасчетов = 0 Тогда
			ДанныеСтроки.СуммаВзаиморасчетов = 0;
			ДанныеСтроки.СуммаРегл           = 0;
		Иначе
			
			ТаблицаСделокДокумента = СформироватьТаблицуСделок(ДокументОбъект, СтруктураПараметров);
			Если НЕ ОплатаПоНесколькимСделкам Тогда
				Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
					ТаблицаСделокДокумента.ЗаполнитьЗначения(Неопределено, "Сделка");
				Иначе
					ТаблицаСделокДокумента.ЗаполнитьЗначения(ТекСделка, "Сделка");
				КонецЕсли;
				ТаблицаСделокДокумента.Свернуть("Сделка", "СуммаВзаиморасчетов");
			КонецЕсли;
			
			СтрокаТекущейСделки = ТаблицаСделокДокумента.Найти(ТекСделка, "Сделка");
			Если СтрокаТекущейСделки = Неопределено Тогда
				ДанныеСтроки.СуммаВзаиморасчетов = 0;
				ДанныеСтроки.СуммаРегл           = 0;
			Иначе
				
				СуммаДокументаПоСделке = СтрокаТекущейСделки.СуммаВзаиморасчетов;
			
				ДанныеСтроки.СуммаВзаиморасчетов = 0;
				Если ОплатаПоНесколькимСделкам Тогда
					СуммаПредоплатыПоСделке = 0;
					СтрокиПредоплатыПоСделке = ДокументОбъект.ДокументыРасчетовСКонтрагентом.НайтиСтроки(Новый Структура("Сделка", ТекСделка));
					Для каждого СтрокаПредоплатыПоСделке Из СтрокиПредоплатыПоСделке Цикл
						СуммаПредоплатыПоСделке = СуммаПредоплатыПоСделке + СтрокаПредоплатыПоСделке.СуммаВзаиморасчетов;
					КонецЦикла;
				Иначе
					СуммаПредоплатыПоСделке = ДокументОбъект.ДокументыРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов");
				КонецЕсли;
				ОстСуммаВзаиморасчетов = СуммаДокументаПоСделке - СуммаПредоплатыПоСделке;
		
				ПогашаемаяСуммаВзаиморасчетов = Мин(Выборка.СуммаВзаиморасчетов, ОстСуммаВзаиморасчетов);
		
				ДанныеСтроки.СуммаВзаиморасчетов = ПогашаемаяСуммаВзаиморасчетов;
				ДанныеСтроки.СуммаРегл           = Окр(ПогашаемаяСуммаВзаиморасчетов * КурсОстатка, 2);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

// Процедура заполняет поле ДатаОплаты в строке табличной части ДокументыРасчетовСКонтрагентом 
// при изменении документа расчетов
//
Процедура ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ДанныеСтроки) Экспорт

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументРасчетовСКонтрагентом) Тогда
		ДанныеСтроки.ДатаОплаты = '00010101';
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДанныеСтроки.ДокументРасчетовСКонтрагентом.Метаданные();
	
	Запрос = Новый Запрос;
	ЕстьДатаОплаты = МетаданныеДокумента.Реквизиты.Найти("ДатаОплаты") <> Неопределено;
	Если ЕстьДатаОплаты Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШапкаДокумента.Дата КАК ДатаДокумента,
		|	ШапкаДокумента.ДатаОплаты КАК ДатаОплаты
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + " КАК ШапкаДокумента
		|ГДЕ
		|	ШапкаДокумента.Ссылка = &ДокументРасчетов";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШапкаДокумента.Дата КАК ДатаДокумента,
		|	ШапкаДокумента.Дата КАК ДатаОплаты
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + " КАК ШапкаДокумента
		|ГДЕ
		|	ШапкаДокумента.Ссылка = &ДокументРасчетов";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументРасчетов", ДанныеСтроки.ДокументРасчетовСКонтрагентом);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеСтроки.ДатаОплаты = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Выборка.ДатаДокумента, Выборка.ДатаОплаты);
	
КонецПроцедуры

// Функция возвращает документ расчетов с контрагентом
//
Функция ПолучитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаПоступления" Тогда
		Возврат СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления;
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "КорректировкаРеализации" Тогда
		Возврат СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументРеализации;
	Иначе
		Возврат СтруктураШапкиДокумента.Ссылка;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПО ВЗАИМОРАСЧЕТАМ

Функция СформироватьТаблицуСделокДляПроведенияПоВзаиморасчетам(СтруктураПараметров, СтруктураШапкиДокумента) 
	
	МогутБытьЗаказыВТабличныхЧастях = СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
	Если МогутБытьЗаказыВТабличныхЧастях 
		И СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Истина Тогда
		ЕстьЗаказыВТабличныхЧастях = Истина;
		ИмяКолонкиСделка = СтруктураПараметров.ИмяЗаказаВТабличныхЧастях;
	Иначе
		ЕстьЗаказыВТабличныхЧастях = Ложь;
		ИмяКолонкиСделка = "Сделка";
	КонецЕсли;
	
	ТаблицаСделок = Новый ТаблицаЗначений;
	ТаблицаСделок.Колонки.Добавить(ИмяКолонкиСделка, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
		|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, Неопределено"), ИмяКолонкиСделка);
		
	//m.ionov@a-prof.ru 19.02.2014
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеТоваровУслуг" И СтруктураШапкиДокумента.УЗ_НесколькоСФ Тогда
		ТаблицаСделок.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));	
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	ОбщиеЧисловыеКолонки = "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр";
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов" Тогда
		ДопЧисловыеКолонки = "СуммаВзаиморасчетовРаспределения, СуммаРеглРаспределения, СуммаУпрРаспределения";
	КонецЕсли;
	ЧисловыеКолонки = ОбщиеЧисловыеКолонки + ", " + ДопЧисловыеКолонки;
	СтруктураЧисловыхКолонок = Новый Структура(ЧисловыеКолонки);
	Для каждого ЧисловаяКолонка Из СтруктураЧисловыхКолонок Цикл
		ТаблицаСделок.Колонки.Добавить(ЧисловаяКолонка.Ключ, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЦикла;
	
	Если НЕ СтруктураПараметров.Свойство("ИмяСделкиВШапкеДокумента") Тогда
		ИмяСделкиВШапкеДокумента = "Сделка";
	Иначе // Например, для документа ПолучениеУслугПоПереработке это "Заказ"
		ИмяСделкиВШапкеДокумента = СтруктураПараметров.ИмяСделкиВШапкеДокумента;
	КонецЕсли;
	
	Для каждого ПодготовленнаяТаблица Из СтруктураПараметров.СтруктураПодготовленныхТаблиц Цикл
		
		ИмяТаблицы = ПодготовленнаяТаблица.Ключ;
		Таблица    = ПодготовленнаяТаблица.Значение;
		
		Для каждого СтрокаТаблицы Из Таблица Цикл
			СтрокаСделки = ТаблицаСделок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСделки, СтрокаТаблицы);
			Если НЕ ЕстьЗаказыВТабличныхЧастях ИЛИ ИмяТаблицы = "ОбъектыСтроительства" Тогда
				СтрокаСделки[ИмяКолонкиСделка] = СтруктураШапкиДокумента[ИмяСделкиВШапкеДокумента];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов" Тогда
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			СтрокаСделки.СуммаВзаиморасчетов = СтрокаСделки.СуммаВзаиморасчетов + СтрокаСделки.СуммаВзаиморасчетовРаспределения;
			СтрокаСделки.СуммаРегл           = СтрокаСделки.СуммаРегл + СтрокаСделки.СуммаРеглРаспределения;
			СтрокаСделки.СуммаУпр            = СтрокаСделки.СуммаУпр + СтрокаСделки.СуммаУпрРаспределения;
		КонецЦикла;
	КонецЕсли;
	
	//m.ionov@a-prof.ru 19.02.2014
	//ТаблицаСделок.Свернуть(ИмяКолонкиСделка, ОбщиеЧисловыеКолонки);
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеТоваровУслуг" И СтруктураШапкиДокумента.УЗ_НесколькоСФ Тогда
		ТаблицаСделок.Свернуть(ИмяКолонкиСделка+",ДоговорКонтрагента", ОбщиеЧисловыеКолонки);	
	Иначе
		ТаблицаСделок.Свернуть(ИмяКолонкиСделка, ОбщиеЧисловыеКолонки);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	ТаблицаСделок.Колонки[ИмяКолонкиСделка].Имя = "Сделка";
	
	///// Кунов О.В., 15.07.2014 - 29916    < Шевченков (закомментировал весь код, задача 32556) >
	//Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаУправленческогоУчета Тогда
	//	
	//	КурсВалютыУпрУчета = Неопределено;
	//	КурсВалютыВзаиморасчетов = Неопределено;
	//	
	//	СтруктураШапкиДокумента.Свойство("КурсВалютыУправленческогоУчета", КурсВалютыУпрУчета);
	//	СтруктураШапкиДокумента.Свойство("КурсВзаиморасчетов", КурсВалютыВзаиморасчетов);
	//	
	//	ВалютаУпрУчета = СтруктураШапкиДокумента.ВалютаУправленческогоУчета;
	//	ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
	//	
	//	Если КурсВалютыУпрУчета = Неопределено Тогда
	//		ДатаВходящегоДокумента = Неопределено;
	//		СтруктураШапкиДокумента.Свойство("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	//		ДатаКурса = ? (ДатаВходящегоДокумента <> Неопределено, ДатаВходящегоДокумента, СтруктураШапкиДокумента.Дата);
	//		КурсВалютыУпрУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, ДатаКурса).Курс;
	//	КонецЕсли;
	//	
	//	Если КурсВалютыВзаиморасчетов = Неопределено Тогда
	//		ДатаВходящегоДокумента = Неопределено;
	//		СтруктураШапкиДокумента.Свойство("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	//		ДатаКурса = ? (ДатаВходящегоДокумента <> Неопределено, ДатаВходящегоДокумента, СтруктураШапкиДокумента.Дата);
	//		КурсВалютыВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса).Курс;
	//	КонецЕсли;
	//	
	//	Для Каждого СтрокаСделки Из ТаблицаСделок Цикл
	//		СтрокаСделки.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
	//			СтрокаСделки.СуммаУпр, ВалютаУпрУчета, ВалютаВзаиморасчетов,
	//			КурсВалютыУпрУчета,
	//			КурсВалютыВзаиморасчетов
	//		);
	//	КонецЦикла;
	//	
	//КонецЕсли;	
	/////
	
	Возврат ТаблицаСделок;
	
КонецФункции

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ДокументОбъект          - документ, табличная часть которого проверяется
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ДокументОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаПоступления"
		//Бирюков проведение по рег. взаиморасчетов Поступления НМА
			ИЛИ СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеНМА"
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
			ИЛИ СтруктураШапкиДокумента.ВидДокумента = "КорректировкаРеализации" Тогда
		// Табличной части ДокументыРасчетовСКонтрагентом нет - проверку выполнять не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");
		Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
			И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтруктураОбязательныхПолей.Вставить("СуммаРегл");
		КонецЕсли;
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом()

Процедура ИзменитьЗнакКолонокТаблицы(Таблица, СтруктураКолонок) Экспорт

	Для каждого СтрокаТаблицы Из Таблица Цикл
		Для каждого ОписаниеКолонки Из СтруктураКолонок Цикл
		
			ИмяКолонки = ОписаниеКолонки.Ключ;
			ЗначениеКолонки = СтрокаТаблицы[ИмяКолонки];
			Если ТипЗнч(ЗначениеКолонки) = Тип("Число") Тогда
				СтрокаТаблицы[ИмяКолонки] = -1 * ЗначениеКолонки;
			КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицуПоВзаиморасчетам(ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаСделокДокумента, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаСделок = ТаблицаСделокДокумента.Скопировать();
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТаблицаСделок.ЗаполнитьЗначения(Неопределено, "Сделка");
		Иначе //.ПоСчетам
			ТаблицаСделок.ЗаполнитьЗначения(СтруктураШапкиДокумента["Сделка"], "Сделка");
		КонецЕсли;
		
		//m.ionov@a-prof.ru 19.02.2014
		//ТаблицаСделок.Свернуть("Сделка", "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр");
		Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеТоваровУслуг" И СтруктураШапкиДокумента.УЗ_НесколькоСФ Тогда
			ТаблицаСделок.Свернуть("Сделка, ДоговорКонтрагента", "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр");
		Иначе
			ТаблицаСделок.Свернуть("Сделка", "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр");
		КонецЕсли;
		//----m.ionov@a-prof.ru---
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		
		ТаблицаПоВзаиморасчетам = ТаблицаСделок.Скопировать();
		
		Возврат ТаблицаПоВзаиморасчетам;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		СделкаДляВзаиморасчетов = Неопределено;
	Иначе //.ПоСчетам или .ПоЗаказам (по заказам - если в ТЧ ДокументыРасчетовСКонтрагентом нет колонки Сделка)
		СделкаДляВзаиморасчетов = СтруктураШапкиДокумента["Сделка"];
	КонецЕсли;
	
	// Создаем колонки таблицы явным образом, а не загружаем таб.часть документа,
	// чтобы не устанавливалось ограничение типов колонок в соответствие с типом реквизитов документа
	ТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
		|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, Неопределено"), "Сделка");
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("ДокументРасчетовСКонтрагентом", Новый ОписаниеТипов(Документы.ТипВсеСсылки(), "Неопределено"), "ДокументРасчетовСКонтрагентом");
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	//m.ionov@a-prof.ru 19.02.2014
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеТоваровУслуг" И СтруктураШапкиДокумента.УЗ_НесколькоСФ Тогда
		ТаблицаПоВзаиморасчетам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));	
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	Если СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаПоступления"
		//Бирюков проведение по рег. взаиморасчетов Поступления НМА
		И СтруктураШапкиДокумента.ВидДокумента <> "ПоступлениеНМА"
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
		И СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаРеализации" Тогда
		
		ЕстьСделкаВТЧ = ДокументОбъект.Метаданные().ТабличныеЧасти.ДокументыРасчетовСКонтрагентом.Реквизиты.Найти("Сделка") <> Неопределено;
		
		Для каждого СтрокаТабЧасти Из ДокументОбъект.ДокументыРасчетовСКонтрагентом Цикл
			
			Если ЕстьСделкаВТЧ Тогда
				Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
					И ЗначениеЗаполнено(СтрокаТабЧасти.Сделка)
					И ТаблицаСделок.Найти(СтрокаТабЧасти.Сделка, "Сделка") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаТабЧасти);
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка) Тогда
				СтрокаВзаиморасчетов.Сделка = СделкаДляВзаиморасчетов;
			КонецЕсли;
			СтрокаВзаиморасчетов.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВзаиморасчетов.СуммаВзаиморасчетов, 
			                                СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоВозврат = СтруктураПараметров.Свойство("ЭтоВозврат") И СтруктураПараметров.ЭтоВозврат;
	Если ЭтоВозврат Тогда
		ИзменитьЗнакКолонокТаблицы(ТаблицаПоВзаиморасчетам, Новый Структура("СуммаВзаиморасчетов, СуммаРегл, СуммаУпр"));
	КонецЕсли;
	
	// Получим документ расчетов с контрагентом
	ДокументРасчетовСКонтрагентом = ПолучитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		
		ВсегоСуммаВзаиморасчетов = ТаблицаСделок.Итог("СуммаВзаиморасчетов");
		ВсегоСуммаПредоплаты     = ТаблицаПоВзаиморасчетам.Итог("СуммаВзаиморасчетов");
		Если ВсегоСуммаВзаиморасчетов <> ВсегоСуммаПредоплаты Тогда
			
			СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
			
			СтрокаВзаиморасчетов.Сделка                        = СделкаДляВзаиморасчетов;
			СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументРасчетовСКонтрагентом;
			
			СтрокаВзаиморасчетов.СуммаВзаиморасчетов = ВсегоСуммаВзаиморасчетов - ВсегоСуммаПредоплаты;
			
			Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда
				СтрокаВзаиморасчетов.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
					СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
			Иначе
				СтрокаВзаиморасчетов.СуммаРегл = ТаблицаСделок.Итог("СуммаРегл") - ТаблицаПоВзаиморасчетам.Итог("СуммаРегл");
			КонецЕсли;
			
			СтрокаВзаиморасчетов.СуммаУпр = ТаблицаСделок.Итог("СуммаУпр") - ТаблицаПоВзаиморасчетам.Итог("СуммаУпр");
			
		КонецЕсли; 
		
	Иначе //.ПоЗаказам
		
		// Рассчитаем неоплаченные суммы по каждой строке таблицы сделок
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			Для каждого СтрокаВзаиморасчетов Из ТаблицаПоВзаиморасчетам Цикл
				Если СтрокаСделки.Сделка = СтрокаВзаиморасчетов.Сделка Тогда
					СтрокаСделки.СуммаВзаиморасчетов = СтрокаСделки.СуммаВзаиморасчетов - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
					СтрокаСделки.СуммаУпр            = СтрокаСделки.СуммаУпр - СтрокаВзаиморасчетов.СуммаУпр;
					СтрокаСделки.СуммаРегл           = СтрокаСделки.СуммаРегл - СтрокаВзаиморасчетов.СуммаРегл;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Теперь по каждой строке таблицы сделок, где предоплата не совпадает с реализацией (поступлением), 
		// добавляем строки в таблицу взаиморасчетов со ссылкой на проводимый документ
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			
			Если СтрокаСделки.СуммаВзаиморасчетов <> 0 Тогда
				
				СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаСделки);
				
				СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументРасчетовСКонтрагентом;
				
				Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда
					СтрокаВзаиморасчетов.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
						СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
						СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
						СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
				Иначе
					СтрокаВзаиморасчетов.СуммаРегл = СтрокаСделки.СуммаРегл;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаПоступления"
		И СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаРеализации" Тогда
		
		// Выполним проверку ТаблицаПоВзаиморасчетам 
		Множитель = ?(ЭтоВозврат, -1, 1);
		Для каждого СтрокаВзаиморасчетов Из ТаблицаПоВзаиморасчетам Цикл
			
			Если СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель < 0 Тогда
				ПредставлениеСделки = ?(НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка), "не указана", Строка(СтрокаВзаиморасчетов.Сделка));
				ОбщегоНазначения.СообщитьОбОшибке("Указана сумма предоплаты (сделка: " + ПредставлениеСделки + ") больше возможной по документу на " 
				+ (-1 * СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель) + " " + СтруктураШапкиДокумента.ВалютаВзаиморасчетов, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаПоВзаиморасчетам;
	
КонецФункции // ПодготовитьТаблицуПоВзаиморасчетам()

Функция ПодготовитьТаблицуПоРасчетам(ТаблицаСделок, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Отказ ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаПоРасчетам = ТаблицаСделок.Скопировать();
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаПоРасчетам Цикл
		
		ДолжноБытьДвижениеПоРасчетам = НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) 
		                           ИЛИ (ТипЗнч(СтрокаТаблицы.Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя") 
								     И ТипЗнч(СтрокаТаблицы.Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику"));
		Если НЕ ДолжноБытьДвижениеПоРасчетам Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПоРасчетам.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат ТаблицаПоРасчетам;

КонецФункции

Процедура ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                      ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
														  
	Если СтруктураПараметров.Свойство("ПроводитьПоВзаиморасчетам") И НЕ СтруктураПараметров.ПроводитьПоВзаиморасчетам Тогда
		ТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
		ТаблицаПоРасчетам       = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли; 
	
	ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ДокументОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаСделок = СформироватьТаблицуСделокДляПроведенияПоВзаиморасчетам(СтруктураПараметров, СтруктураШапкиДокумента);
	СтруктураПараметров.Вставить("ТаблицаСделок", ТаблицаСделок);
	
	ТаблицаПоВзаиморасчетам = ПодготовитьТаблицуПоВзаиморасчетам(ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаСделок, Отказ, Заголовок);
	
	ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетам(ТаблицаСделок, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам()

Процедура ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ДокументОбъект, СтруктураШапкиДокумента, 
	                                                    СтруктураПараметров, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                    ВидДвижения, Отказ, Заголовок) Экспорт
													  
	// По регистру ВзаиморасчетыСКонтрагентами
	
	Если ТаблицаПоВзаиморасчетам.Количество() > 0 Тогда
		
		НаборДвиженийВзаиморасчеты = ДокументОбъект.Движения.ВзаиморасчетыСКонтрагентами;
		
		ТаблицаДвижений = НаборДвиженийВзаиморасчеты.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВзаиморасчетам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
		//m.ionov@a-prof.ru 19.02.2014
		//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		Если ТаблицаПоВзаиморасчетам.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		НаборДвиженийВзаиморасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийВзаиморасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		// Проверка остатков
		ОтключитьКонтрольВзаиморасчетов = СтруктураШапкиДокумента.Свойство("ОтключитьКонтрольВзаиморасчетов") 
		                                И СтруктураШапкиДокумента.ОтключитьКонтрольВзаиморасчетов;
		Если НЕ ОтключитьКонтрольВзаиморасчетов Тогда
			НаборДвиженийВзаиморасчеты.КонтрольОстатков(ДокументОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураШапкиДокумента, СтруктураПараметров, Отказ, Заголовок, СтруктураШапкиДокумента.РежимПроведения, "СуммаВзаиморасчетов");
		КонецЕсли;
		
		Если Не Отказ Тогда
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборДвиженийВзаиморасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;
	
	// По регистру РасчетыСКонтрагентами
	
	Если ТаблицаПоРасчетам.Количество() > 0 Тогда
		
		НаборДвиженийРасчеты = ДокументОбъект.Движения.РасчетыСКонтрагентами;
		
		ТаблицаДвижений = НаборДвиженийРасчеты.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоРасчетам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
		//m.ionov@a-prof.ru 19.02.2014
		//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		Если ТаблицаПоРасчетам.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		Если СтруктураПараметров.Свойство("ЭтоВозврат") И СтруктураПараметров.ЭтоВозврат Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Возврат, "РасчетыВозврат");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат");
		КонецЕсли;
		
		НаборДвиженийРасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийРасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборДвиженийРасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность проведения в БУ и НУ в зависимости от договора взаиморасчетов.
//
// Параметры:
//  ДоговорКонтрагента             - ссылка на справочник договора, определяет договор с контрагентом;
//  ВалютаДокумента                - ссылка на справочник валют, определяет валюту документа;
//  ОтражатьВБухгалтерскомУчете    - булево, признак отражения документа в бух. учете;
//  ОтражатьВНалоговомУчете        - булево, признак отражения документа в налоговом учете;
//  ВалютаРегламентированногоУчета - ссылка на справочник валют, определяет валюту ведения регл. учета;
//  ЭтоДокументОплаты              - булево, определяет является ли это документом оплаты,
//                                   необязательный параметр, по умолчанию - Ложь;
//  Отказ                          - булево, признак отказа в проведении документаРасчетыВУсловныхЕдиницах;
//  Заголовок                      - строка, заголовок сообщения в отказе проведения;
//  ДополнениеКСообщению           - строка, дополнение к сообщению в отказе проведении, 
//                                   необязательный, по умолчанию - пустая строка;
//  ВалютаВзаиморасчетов           - ссылка на справочник валют, определяет валюту взаиморасчетов по договору,
//                                   если не передан, берется из договора;
//  РасчетыВУсловныхЕдиницах - булево, признак ведения взаиморасчетов в условных единицах,
//                                   если не передан, берется из договора.
//
// Возвращаемое значение:
//  Истина, если документ можно проводить по бух. или (и) налоговому учету, инчае - Ложь.
//
Функция ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,ОтражатьВБухгалтерскомУчете,
                          ОтражатьВНалоговомУчете, ВалютаРегламентированногоУчета, ЭтоДокументОплаты = Ложь,
                          Отказ = Ложь, Заголовок,ДополнениеКСообщению = "",
                          ВалютаВзаиморасчетов = Неопределено, РасчетыВУсловныхЕдиницах = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	Если ВалютаВзаиморасчетов = Неопределено Тогда
		ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	Если РасчетыВУсловныхЕдиницах = Неопределено Тогда
		РасчетыВУсловныхЕдиницах = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	КонецЕсли;

	Если ВалютаВзаиморасчетов <> ВалютаДокумента 
	   И ВалютаРегламентированногоУчета <> ВалютаДокумента Тогда

		// Документ выписан в валюте отличной от валюты регламентированного учета и валюты расчетов. 
		// Возможно только в документах оплаты.
		// Не отражается в б.у.
		Если ОтражатьВБухгалтерскомУчете 
		 Или ОтражатьВНалоговомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Валюта документа ("+СокрЛП(ВалютаДокумента)
			                 + ") отличается от валюты регламентированного учета (" + СокрЛП(ВалютаРегламентированногоУчета)
			                 + ") и валюты расчетов по договору """ + СокрЛП(ДоговорКонтрагента) 
			                 + """ (" + СокрЛП(ВалютаВзаиморасчетов) + ").
			|Документ не может быть проведен по бухгалтерскому или налоговому учету.",Отказ,Заголовок);
			Возврат Ложь;
		КонецЕсли;

	ИначеЕсли ВалютаДокумента = ВалютаРегламентированногоУчета Тогда

		Если (Не ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета) 
		   И Не(РасчетыВУсловныхЕдиницах) Тогда

			// Документ выписан в валюте регламентированного учета. 
			// Валюта расчетов иная. Договор не в у.е. 
			// Не отражается в б.у.
			Если ОтражатьВБухгалтерскомУчете 
			 Или ОтражатьВНалоговомУчете Тогда 
				ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Валюта расчетов по договору """ + СокрЛП(ДоговорКонтрагента) 
				                 + """ (" + СокрЛП(ВалютаВзаиморасчетов) + ") отличается от валюты регламентированного учета ("
				                 + СокрЛП(ВалютаРегламентированногоУчета) + ").
				|В этом случае документы могут быть выписаны в валюте регламентированного учета только при расчетах в условных единицах.
				|Документ не может быть проведен по бухгалтерскому или налоговому учету.",Отказ,Заголовок);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

	Иначе

		// Валюта документа равна валюте взаиморасчетов (отличной от валюты  рег. учета).
		Если РасчетыВУсловныхЕдиницах
		   И ЭтоДокументОплаты Тогда 

			// При расчетах в у.е. документы оплаты могут выписываться только в валюте рег.учета.
			// Не отражается в б.у.
			Если ОтражатьВБухгалтерскомУчете 
			 Или ОтражатьВНалоговомУчете Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Документ оплаты при расчете по договору (" + СокрЛП(ДоговорКонтрагента) 
				                 + ")в условных единицах может быть выписан только в валюте регламентированного учета ("
				                 + СокрЛП(ВалютаРегламентированногоУчета) + ").
				|Документ не может быть проведен по бухгалтерскому или налоговому учету.",Отказ,Заголовок);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции // ПроверкаВозможностиПроведенияВ_БУ_НУ()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С РЕГИСТРОМ ОПЕРАТИВНОГО УЧЕТА РАСЧЕТОВ ПО ДОКУМЕНТАМ

// Движения документов оплаты по регистру оперативных расчетов по документам
//
// Параметры
//  СтруктураШапкиДокумента		– <Структура> – структура с данными шапки документа и другими, необходимыми для формирования движений
//  ДатаДвижений				– <Дата> – дата и время формирования движений
//  ИмяТаблицыПлатежейИлиТаблица– <Строка> –  Имя табличной части документа оплаты с расшифровкой платежей
//								или <ТаблицаЗначений> - подготовленная таблица платежей по расчетным документам
//  ВидРасчетовСКонтрагентом	- <ПеречислениеСсылка.ВидыРасчетовСКонтрагентами>
//  ВидДвижения					- <ВидДвиженияНакопления>
//  Движения 					- <Коллекция движений или структура с соответствующими свойствами>
//								– Движения документа по регистрам (в т.ч. по регистру оперативных взаиморасчетов)
//  Отказ						- <Булево> – признак ошибки при проведения для остановки проведения документа
//  Заголовок					- <Строка> – Представление заголовка документа для использования при формировании сообщения об ошибках
//
Процедура ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ИмяТаблицыПлатежейИлиТаблица, ВидРасчетовСКонтрагентом, ВидДвижения, Движения, Отказ, Заголовок) Экспорт
	
	Ссылка = СтруктураШапкиДокумента.Ссылка;
	МетаданныеДокумента = Ссылка.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ПереданоИмяТаблицы =  ТипЗнч(ИмяТаблицыПлатежейИлиТаблица) = Тип("Строка");
	Если ПереданоИмяТаблицы Тогда // Таблицу платежей получаем запросом
		
		ИмяТаблицыПлатежей = ИмяТаблицыПлатежейИлиТаблица;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаПлатежей.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаПлатежей.ДоговорКонтрагента) КАК ДоговорКонтрагентаПредставление,
		|	ВЫБОР
		|		КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоДоговоруВЦелом
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		КОГДА ТаблицаПлатежей.Сделка В (&ПустыеСделки)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПлатежей.Сделка
		|	КОНЕЦ КАК Сделка,
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоДоговоруВЦелом
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			КОГДА ТаблицаПлатежей.Сделка В (&ПустыеСделки)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ТаблицаПлатежей.Сделка
		|		КОНЕЦ) КАК СделкаПредставление,
		|	ВЫБОР
		|		КОГДА ТаблицаПлатежей.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПлатежей.ДокументРасчетовСКонтрагентом
		|	КОНЕЦ КАК ДокументРасчетовСКонтрагентом,
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ТаблицаПлатежей.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ТаблицаПлатежей.ДокументРасчетовСКонтрагентом
		|		КОНЕЦ) КАК ДокументРасчетовСКонтрагентомПредставление,
		|	ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаПлатежей.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетовПредставление,
		|	СУММА(ВЫБОР
		|			КОГДА &СуммаПлатежаВВалютеРеглУчета
		|				ТОГДА ТаблицаПлатежей.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблицаПлатежей.КурсВзаиморасчетов = 0
		|							ИЛИ ТаблицаПлатежей.КратностьВзаиморасчетов = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВЫРАЗИТЬ(ТаблицаПлатежей.СуммаВзаиморасчетов * ТаблицаПлатежей.КурсВзаиморасчетов / ТаблицаПлатежей.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
		|				КОНЕЦ
		|		КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ТаблицаПлатежей.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	МИНИМУМ(ТаблицаПлатежей.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ." + ИмяДокумента + "." + ИмяТаблицыПлатежей + " КАК ТаблицаПлатежей
		// Пример:
		//|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ТаблицаПлатежей
		|ГДЕ
		|	ТаблицаПлатежей.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА
		|	И ТаблицаПлатежей.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПлатежей.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоДоговоруВЦелом
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		КОГДА ТаблицаПлатежей.Сделка В (&ПустыеСделки)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПлатежей.Сделка
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаПлатежей.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПлатежей.ДокументРасчетовСКонтрагентом
		|	КОНЕЦ,
		|	ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов,
		|	ТаблицаПлатежей.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов),
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоДоговоруВЦелом
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			КОГДА ТаблицаПлатежей.Сделка В (&ПустыеСделки)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ТаблицаПлатежей.Сделка
		|		КОНЕЦ),
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ТаблицаПлатежей.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ТаблицаПлатежей.ДокументРасчетовСКонтрагентом
		|		КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПлатежей.СуммаПлатежа", "ТаблицаПлатежей.Сумма");
		КонецЕсли; 
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ПоДоговоруВЦелом", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
		СуммаПлатежаВВалютеРеглУчета = СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		Запрос.УстановитьПараметр("СуммаПлатежаВВалютеРеглУчета", СуммаПлатежаВВалютеРеглУчета);
		
		РеквизитыМетаданныхТабЧастиДокумента = МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыПлатежей].Реквизиты;
		ТипыСделок = РеквизитыМетаданныхТабЧастиДокумента.Сделка.Тип.Типы();
		МассивПустыхСделок = Новый Массив;
		Для каждого Элемент Из ТипыСделок Цикл
			МассивПустыхСделок.Добавить(Новый(Элемент));
		КонецЦикла;
		
		ТипыРасчетныхДокументов = РеквизитыМетаданныхТабЧастиДокумента.ДокументРасчетовСКонтрагентом.Тип.Типы();
		МассивПустыхРасчетныхДокументов = Новый Массив;
		Для каждого Элемент Из ТипыРасчетныхДокументов Цикл
			МассивПустыхРасчетныхДокументов.Добавить(Новый(Элемент));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ПустыеСделки",             МассивПустыхСделок);
		Запрос.УстановитьПараметр("ПустыеРасчетныеДокументы", МассивПустыхРасчетныхДокументов);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаПлатежей = Результат.Выгрузить();
		
	Иначе // Может быть передана готовая таблица платежей (например, для документа КорректировкаДолга)
		
		ПереданаТаблица =  ТипЗнч(ИмяТаблицыПлатежейИлиТаблица) = Тип("ТаблицаЗначений");
		Если НЕ ПереданаТаблица Тогда
			Возврат;
		КонецЕсли;
	
		ТаблицаПлатежей = ИмяТаблицыПлатежейИлиТаблица;
	
	КонецЕсли;
	УпрУчет = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	ЗнакОстатка = ?(ВидДвижения = ВидДвиженияНакопления.Расход, 1, -1);
	
	// Определение состояния расчетов по документам
	
	Запрос = Новый Запрос;
	МенеджерВремТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.ДоговорКонтрагента,
	|	Таб.Сделка,
	|	Таб.ДокументРасчетовСКонтрагентом
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&ТаблицаПлатежей КАК Таб
	|ГДЕ 
	|	НЕ (Таб.ДокументРасчетовСКонтрагентом = &Ссылка)
	|		И НЕ (Таб.ДокументРасчетовСКонтрагентом = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("ТаблицаПлатежей", ТаблицаПлатежей);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Выполнить();
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
						
		СтруктураПараметровБлокировки = Новый Структура(
			"ИмяТаблицы, ИсточникДанных, ИмяВременнойТаблицы", 
			"ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов", МенеджерВремТаблиц, "ТаблицаПлатежей");
		СтруктураЗначенийБлокировки   = Новый Структура(
			"ВидРасчетовСКонтрагентом, Организация, УпрУчет", 
			ВидРасчетовСКонтрагентом, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ОтражатьВУправленческомУчете);
		СтруктураИсточникаДанных      = Новый Структура(
			"ДоговорКонтрагента, Сделка, ДокументРасчетовСКонтрагентом", 
			"ДоговорКонтрагента", "Сделка", "ДокументРасчетовСКонтрагентом");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных, Отказ, Заголовок);
		
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументамОстатки.Сделка,
	|	ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &ЗнакОстатка КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток * &ЗнакОстатка КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(, 
	|		Организация = &Организация
	|			И ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|			И УпрУчет = &УпрУчет
	|			И (ДоговорКонтрагента, Сделка, ДокументРасчетовСКонтрагентом) В (ВЫБРАТЬ ДоговорКонтрагента, Сделка, ДокументРасчетовСКонтрагентом ИЗ ТаблицаПлатежей)) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &ЗнакОстатка > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки";
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидРасчетовСКонтрагентом", ВидРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("УпрУчет", УпрУчет);
	Запрос.УстановитьПараметр("ЗнакОстатка",ЗнакОстатка);
	
	ОстаткиПоРасчетам = Запрос.Выполнить().Выгрузить();
	
	ДвиженияРегистраОперативныхРасчетов = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;
	
	Если СтруктураШапкиДокумента.Свойство("РежимПроведения") Тогда
		РежимПроведения = СтруктураШапкиДокумента.РежимПроведения;
	Иначе
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	ЗапрещатьПревышениеОстатков = РежимПроведения = РежимПроведенияДокумента.Оперативный;
	
	Для каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		
		ВзаиморасчетыВВалютеРеглУчета = СтрокаПлатежа.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		ДелатьДвиженияПоСуммеРегл = СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете И НЕ ВзаиморасчетыВВалютеРеглУчета;
	
		ЭтоПогашениеКредДокумента = СтрокаПлатежа.ДокументРасчетовСКонтрагентом <> Неопределено;
		
		Если ЭтоПогашениеКредДокумента Тогда
			
			ОтборПоОстаткам = Новый Структура("ДоговорКонтрагента, Сделка, ДокументРасчетовСКонтрагентом", 
			СтрокаПлатежа.ДоговорКонтрагента, СтрокаПлатежа.Сделка, СтрокаПлатежа.ДокументРасчетовСКонтрагентом);
			
			СуммаВзаиморасчетовОстаток = 0;
			СуммаРеглОстаток = 0;
			СтрокиОстатка = ОстаткиПоРасчетам.НайтиСтроки(ОтборПоОстаткам);
			Для каждого ОстатокАванса Из СтрокиОстатка Цикл
				СуммаВзаиморасчетовОстаток = СуммаВзаиморасчетовОстаток + СтрокиОстатка[0].СуммаВзаиморасчетов;
				СуммаРеглОстаток = СуммаРеглОстаток + СтрокиОстатка[0].СуммаРегл;
			КонецЦикла;
				
			Если СтрокаПлатежа.СуммаВзаиморасчетов > СуммаВзаиморасчетовОстаток Тогда
				
				ТекстСообщения = "Указана сумма взаиморасчетов, превышающая непогашенный остаток по документу расчетов с контрагентом!
				| Договор: " + СтрокаПлатежа.ДоговорКонтрагентаПредставление + 
				?(НЕ ЗначениеЗаполнено(СтрокаПлатежа.СделкаПредставление),", сделка не указана",", сделка: " + СтрокаПлатежа.СделкаПредставление)+ 
				", документ расчетов: " + СтрокаПлатежа.ДокументРасчетовСКонтрагентомПредставление + "; 
				| Остаток " + СуммаВзаиморасчетовОстаток + " " + СтрокаПлатежа.ВалютаВзаиморасчетовПредставление + "; "
				+ " указана сумма " + СтрокаПлатежа.СуммаВзаиморасчетов + " " + СтрокаПлатежа.ВалютаВзаиморасчетовПредставление + "; "
				+ " превышение " + (СтрокаПлатежа.СуммаВзаиморасчетов - СуммаВзаиморасчетовОстаток) + " " + СтрокаПлатежа.ВалютаВзаиморасчетовПредставление;
				
				Если ЗапрещатьПревышениеОстатков Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
					Возврат;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок);
				КонецЕсли;
			КонецЕсли;
			
			Движение = ДвиженияРегистраОперативныхРасчетов.Добавить();
			
			Движение.ВидДвижения = ВидДвижения;
			Движение.Период	     = ДатаДвижений;
			
			Движение.ДоговорКонтрагента            = СтрокаПлатежа.ДоговорКонтрагента;
			Движение.Контрагент            		   = СтрокаПлатежа.ДоговорКонтрагента.Владелец;
			Движение.Организация            	   = СтрокаПлатежа.ДоговорКонтрагента.Организация;


			Движение.Сделка                        = СтрокаПлатежа.Сделка;
			Движение.ДокументРасчетовСКонтрагентом = СтрокаПлатежа.ДокументРасчетовСКонтрагентом;
			Движение.УпрУчет                       = УпрУчет;
			Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
			
			Движение.СуммаВзаиморасчетов = СтрокаПлатежа.СуммаВзаиморасчетов;
			
			Если ДелатьДвиженияПоСуммеРегл Тогда
				Движение.СуммаРегл = ?(СуммаВзаиморасчетовОстаток = 0, 0, 
				                       Окр(СуммаРеглОстаток * СтрокаПлатежа.СуммаВзаиморасчетов / СуммаВзаиморасчетовОстаток, 2));
			КонецЕсли;
			
		Иначе
			
			// Делаем движение с указанием документа-регистратора в качестве документа расчетов 
			Движение = ДвиженияРегистраОперативныхРасчетов.Добавить();
			
			Движение.ВидДвижения = ВидДвижения;
			Движение.Период      = ДатаДвижений;
			
			Движение.ДоговорКонтрагента            = СтрокаПлатежа.ДоговорКонтрагента;
			Движение.Контрагент            		   = СтрокаПлатежа.ДоговорКонтрагента.Владелец;
			Движение.Организация            	   = СтрокаПлатежа.ДоговорКонтрагента.Организация;

			Движение.Сделка                        = СтрокаПлатежа.Сделка;
			Движение.ДокументРасчетовСКонтрагентом = Ссылка;
			Движение.УпрУчет                       = УпрУчет;
			Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
			
			Движение.СуммаВзаиморасчетов = СтрокаПлатежа.СуммаВзаиморасчетов;
			
			Если ДелатьДвиженияПоСуммеРегл Тогда
				Движение.СуммаРегл = СтрокаПлатежа.СуммаРегл;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

// Движения документов поступления и реализации по регистру оперативных расчетов по документам
//
// Параметры
//  СтруктураШапкиДокумента		- <Структура> – Структура шапки документа
//  БазоваяТаблицаЗадолженности	– <ТаблицаЗначений> –  Таблица значений с информацией о задолженности по документу
//  ТаблицаРасчетовПоДокументам	– <ТаблицаЗначений> –  Таблица значений с информацией о зачитываемых авансах
//  ВидРасчетовПоОперации		- <ПеречислениеСсылка.ВидыРасчетовСКонтрагентами>
//  ВидДвиженияРасчетов			- <ПеречислениеСсылка.ВидыДвиженийБухгалтерии>
//	ДоговорКонтрагента			- <СправочникСсылка.ДоговорыКонтрагентов> - необязательный параметр. 
//									Для документов, отражающих движения по нескольким договорам
//  Движения 					- <Коллекция движений или структура с соответствующими свойствами>
//								– Движения документа по регистрам (в т.ч. по регистру оперативных взаиморасчетов)
//  Отказ						- <Булево> – признак ошибки при проведения для остановки проведения документа
//  Заголовок					- <Строка> – Представление заголовка документа для использования при формировании сообщения об ошибках
//
Процедура ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ВидРасчетовСКонтрагентом, ВидДвижения, Движения, Отказ, Заголовок) Экспорт
	
	ВестиПоДокументамРасчетовСКонтрагентом = СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом;
	Если (НЕ ВестиПоДокументамРасчетовСКонтрагентом)
		ИЛИ (ТаблицаВзаиморасчетов.Количество() = 0)
		Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка             = ПолучитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента);
	ДатаДвижений       = СтруктураШапкиДокумента.Дата;
	Организация        = СтруктураШапкиДокумента.Организация;
	Контрагент         = СтруктураШапкиДокумента.Контрагент;
	ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	//Признак отражения в УУ берем из ссылки, т.к. в СтруктураШапкиДокумента при отложенном проведении этот признак равен ЛОЖЬ
	УпрУчет            = СтруктураШапкиДокумента.Ссылка.ОтражатьВУправленческомУчете;
	ЗнакОстатка        = ?(ВидДвижения = ВидДвиженияНакопления.Приход, -1, 1);
	
	ЭтоВозврат = СтруктураШапкиДокумента.Свойство("ЭтоВозврат") И СтруктураШапкиДокумента.ЭтоВозврат;
	Множитель = ?(ЭтоВозврат, -1, 1);
	ЗнакОстатка = ЗнакОстатка * Множитель;
	
	НетСделкиВТаблице = ТаблицаВзаиморасчетов.Колонки.Найти("Сделка") = Неопределено;
	Если НетСделкиВТаблице Тогда
		ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
			|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, Неопределено"), "Сделка");
	КонецЕсли;
	
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаВзаиморасчетов.Сделка = Неопределено;
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НетСделкиВТаблице Тогда
			СтрокаВзаиморасчетов.Сделка = СтруктураШапкиДокумента.Сделка;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом = Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// Определение состояния расчетов по документам
	
	Запрос = Новый Запрос;
	МенеджерВремТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Сделка,
	|	Таб.ДокументРасчетовСКонтрагентом
	|ПОМЕСТИТЬ ТаблицаВзаиморасчетов
	|ИЗ
	|	&ТаблицаВзаиморасчетов КАК Таб
	|ГДЕ 
	|	НЕ (Таб.ДокументРасчетовСКонтрагентом = &Ссылка)";
	
	Запрос.УстановитьПараметр("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Выполнить();
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
						
		СтруктураПараметровБлокировки = Новый Структура(
			"ИмяТаблицы, ИсточникДанных, ИмяВременнойТаблицы", 
			"ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов", МенеджерВремТаблиц, "ТаблицаВзаиморасчетов");
		СтруктураЗначенийБлокировки   = Новый Структура(
			"ВидРасчетовСКонтрагентом, Организация, ДоговорКонтрагента, УпрУчет", 
			ВидРасчетовСКонтрагентом, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураШапкиДокумента.ОтражатьВУправленческомУчете);
		СтруктураИсточникаДанных      = Новый Структура(
			"Сделка, ДокументРасчетовСКонтрагентом", 
			"Сделка", "ДокументРасчетовСКонтрагентом");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных, Отказ, Заголовок);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.Организация,
	|	ВзаиморасчетыПоДокументамОстатки.Контрагент,
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументамОстатки.Сделка,
	|	ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.ВидРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.УпрУчет,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &ЗнакОстатка КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток * &ЗнакОстатка КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	|		, 
	|		Организация = &Организация
	|			И Контрагент = &Контрагент
	|			И ДоговорКонтрагента = &ДоговорКонтрагента
	|			И ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|			И УпрУчет = &УпрУчет
	|			И (Сделка, ДокументРасчетовСКонтрагентом) В (ВЫБРАТЬ Сделка, ДокументРасчетовСКонтрагентом ИЗ ТаблицаВзаиморасчетов)) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &ЗнакОстатка > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки";
	
	Запрос.Текст = ТекстЗапроса;
		
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВидРасчетовСКонтрагентом", ВидРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("УпрУчет", УпрУчет);
	Запрос.УстановитьПараметр("ЗнакОстатка",ЗнакОстатка);
		
	ОстаткиПоРасчетам = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейВзаиморасчетыПоДокументам = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;
	ТаблицаДвижений = НаборЗаписейВзаиморасчетыПоДокументам.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Если СтруктураШапкиДокумента.Свойство("РежимПроведения") Тогда
		РежимПроведения = СтруктураШапкиДокумента.РежимПроведения;
	Иначе
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	ЗапрещатьПревышениеОстатков   = РежимПроведения = РежимПроведенияДокумента.Оперативный;
	ВзаиморасчетыВВалютеРеглУчета = СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ДелатьДвиженияПоСуммеРегл     = СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете И НЕ ВзаиморасчетыВВалютеРеглУчета;

	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		ЭтоПогашениеКредДокумента = СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом <> Ссылка;
		
		Если ЭтоПогашениеКредДокумента Тогда
			
			ОтборПоОстаткам = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Сделка, 
			| ДокументРасчетовСКонтрагентом, ВидРасчетовСКонтрагентом, УпрУчет", 
			Организация, Контрагент, ДоговорКонтрагента, СтрокаВзаиморасчетов.Сделка, 
			СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом, ВидРасчетовСКонтрагентом, УпрУчет);
			
			СтрокиОстатка = ОстаткиПоРасчетам.НайтиСтроки(ОтборПоОстаткам);
			
			ОстатокСуммыВзаиморасчетов = 0;
			Для каждого ОстатокЗадолженности из СтрокиОстатка Цикл
				ОстатокСуммыВзаиморасчетов = ОстатокСуммыВзаиморасчетов + ОстатокЗадолженности.СуммаВзаиморасчетов;
			КонецЦикла;
			
			Если ОстатокСуммыВзаиморасчетов < СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель Тогда
			
				ВалютаПредставление = Строка(ДоговорКонтрагента.ВалютаВзаиморасчетов);
				СделкаПредставление = ?(НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка), "не указана", Строка(СтрокаВзаиморасчетов.Сделка));
				ТекстСообщения = "Указана сумма взаиморасчетов, превышающая непогашенный остаток по документу расчетов с контрагентом!
				               | Сделка: " + СделкаПредставление + ", документ расчетов: " + СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом + "; 
				               | Остаток " + ОстатокСуммыВзаиморасчетов + " " + ВалютаПредставление + "; "
				               + " указана сумма " + (СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель) + " " + ВалютаПредставление + "; "
				               + " превышение " + (СтрокаВзаиморасчетов.СуммаВзаиморасчетов  * Множитель - ОстатокСуммыВзаиморасчетов) + " " + ВалютаПредставление;
			
				Если ЗапрещатьПревышениеОстатков Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
					Возврат;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок);
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЕсли; 
				
		Движение = ТаблицаДвижений.Добавить();
		
		Движение.Организация            	   = Организация;
		Движение.Контрагент            		   = Контрагент;
		Движение.ДоговорКонтрагента            = ДоговорКонтрагента;
		//m.ionov@a-prof.ru 19.02.2014
		Если НЕ ТаблицаВзаиморасчетов.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
			Движение.ДоговорКонтрагента        = СтрокаВзаиморасчетов.ДоговорКонтрагента;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		Движение.Сделка                        = СтрокаВзаиморасчетов.Сделка;
		Движение.ДокументРасчетовСКонтрагентом = СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом;
		Движение.УпрУчет                       = УпрУчет;
		Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
		
		Движение.СуммаВзаиморасчетов = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		Если ДелатьДвиженияПоСуммеРегл Тогда
			Движение.СуммаРегл       = СтрокаВзаиморасчетов.СуммаРегл;
		КонецЕсли;
		
	КонецЦикла; 
	
	НаборЗаписейВзаиморасчетыПоДокументам.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписейВзаиморасчетыПоДокументам.мПериод = ДатаДвижений;
	
	Если Не Отказ Тогда
		ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейВзаиморасчетыПоДокументам, ВидДвижения);
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С РЕЗЕРВАМИ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ

// Функция рассчитывает суммы начисления и списания резервов и коэффициент нормирования для НУ
// Предусмотрено два режима работы:
// для формирования проводок - формируются все суммы резервов, а коэффициент нормирования для НУ берется в готовом виде
//                             вызывается из регламентной операции "Расчет резервов по сомнительным долгам"
// для расчета коэффициента нормирования - определяются суммы для начисления резервов по НУ за месяц и с начала года и рассчитывается коэффициент нормирования
//                             вызывается из регламентной операции "Расчет долей списания косвенных расходов"
//
// Параметры:
//	СтруктураПараметров - структура, содержащая ключи:
//		Организация
//		Дата
//		УчетнаяПолитика
//	РежимФормированияПроводок - если Истина, то работа в режиме "формирования проводок"
//								если Ложь, то работа в режиме "расчета коэффициента"
//	НормаРасходовПоВыручке - сумма выручки с начала года, используемой для нормирования
//	ИспользуетсяДляВводаОстатков - если Истина, то вызывается для заполнения документа 
//									ВводНачальныхОстатковПоВзаиморасчетам, в этом случае
//									нормирование не используется.
//
Функция ПровестиРасчетРезервовПоСомнительнымДолгам(СтруктураПараметров, РежимФормированияПроводок, НормаРасходовПоВыручке, ИспользуетсяДляВводаОстатков) Экспорт
	
	ФормироватьБУ = СтруктураПараметров.УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ;
	ФормироватьНУ = СтруктураПараметров.УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ;
	
	Если НЕ ФормироватьБУ и НЕ ФормироватьНУ Тогда
		Возврат ?(РежимФормированияПроводок ИЛИ ИспользуетсяДляВводаОстатков, Новый ТаблицаЗначений, 0);
	КонецЕсли;

	Если ИспользуетсяДляВводаОстатков Тогда
		ДатаКонцаМесяца =   КонецДня(СтруктураПараметров.Дата);
	Иначе
		ДатаКонцаМесяца =   КонецМесяца(СтруктураПараметров.Дата);
	КонецЕсли;
	ДатаКонцаМесяцаГраница = Новый Граница(ДатаКонцаМесяца, ВидГраницы.Включая);
	ДатаНачалаГода = НачалоГода(СтруктураПараметров.Дата);
	ДатаКонцаПрошлогоМесяца = ?(Месяц(СтруктураПараметров.Дата) = 1, ДатаНачалаГода, КонецМесяца(НачалоМесяца(СтруктураПараметров.Дата) -1));
	Счет62 = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками;
	Счет76 = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Счет62_2 = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецМесяца",       ДатаКонцаМесяца);
	Запрос.УстановитьПараметр("ДатаКонцаМесяцаГраница",ДатаКонцаМесяцаГраница);
	
	МассивРасчетов = Новый Массив;
	МассивРасчетов.Добавить(Счет62);
	МассивРасчетов.Добавить(Счет76); 
	Запрос.УстановитьПараметр("СчетаРасчетов",МассивРасчетов);
	
	Запрос.УстановитьПараметр("Счет62_2", Счет62_2);
	
	Запрос.УстановитьПараметр("ОбщийСрокОплаты", СтруктураПараметров.УчетнаяПолитика.СрокОплатыПокупателейДляРезервовПоСомнительнымДолгам);
	Запрос.УстановитьПараметр("ФормироватьБУ",   ФормироватьБУ);
	Запрос.УстановитьПараметр("ФормироватьНУ",   ФормироватьНУ);
	Запрос.УстановитьПараметр("ИспользуетсяДляВводаОстатков", ИспользуетсяДляВводаОстатков);
	
	// Получение списка дебиторской задолженности
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаРасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчетов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет62_2)
	|	И НЕ Хозрасчетный.Валютный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетов.СчетОплаты КАК Счет,
	|	ТаблицаВсехРасчетов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетов.ДоговорКонтрагента КАК Договор,
	|	ТаблицаВсехРасчетов.Документ КАК ДокументДолга,
	|	ЕСТЬNULL(-ТаблицаВсехРасчетов.СуммаРегОстаток, 0) КАК ДолгБУ,
	|	ЕСТЬNULL(-ТаблицаВсехРасчетов.СуммаРегОстаток, 0) КАК ДолгНУ
	|ПОМЕСТИТЬ ТаблицаВсехРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(
	|			&ДатаКонцаМесяцаГраница,
	|			Организация = &Организация
	|				И СчетОплаты В
	|					(ВЫБРАТЬ
	|						ВТ_СчетаРасчетов.Счет
	|					ИЗ
	|						ВТ_СчетаРасчетов)
	|				И Документ <> НЕОПРЕДЕЛЕНО) КАК ТаблицаВсехРасчетов
	|ГДЕ
	|	ТаблицаВсехРасчетов.СуммаРегОстаток < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетов.Счет КАК Счет,
	|	ТаблицаВсехРасчетов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетов.Договор КАК Договор,
	|	ТаблицаВсехРасчетов.ДокументДолга КАК ДокументДолга
	|ПОМЕСТИТЬ ТаблицаВсехРасчетовИДолгов
	|ИЗ
	|	ТаблицаВсехРасчетов КАК ТаблицаВсехРасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанныхРасчетов.СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаДанныхРасчетов.Контрагент,
	|	ТаблицаДанныхРасчетов.ДоговорКонтрагента,
	|	ТаблицаДанныхРасчетов.Документ
	|ИЗ
	|	РегистрНакопления.РезервыПоСомнительнымДолгам.Остатки(&ДатаКонцаМесяцаГраница, Организация = &Организация) КАК ТаблицаДанныхРасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетовИДолгов.Счет,
	|	ТаблицаВсехРасчетовИДолгов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетовИДолгов.Договор КАК Договор,
	|	ТаблицаВсехРасчетовИДолгов.ДокументДолга КАК ДокументДолга,
	|	ВЫБОР
	|		КОГДА &ФормироватьБУ
	|			ТОГДА ТаблицаВсехРасчетов.ДолгБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгБу,
	|	ВЫБОР
	|		КОГДА &ФормироватьНУ
	|			ТОГДА ТаблицаВсехРасчетов.ДолгНУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгНУ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаВсехРасчетовИДолгов.Договор КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплатыДляРезервовПоСомнительнымДолгам
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаВсехРасчетовИДолгов.Договор КАК Справочник.ДоговорыКонтрагентов).СрокОплатыДляРезервовПоСомнительнымДолгам
	|		ИНАЧЕ &ОбщийСрокОплаты
	|	КОНЕЦ КАК СрокОплаты
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаВсехРасчетовИДолгов КАК ТаблицаВсехРасчетовИДолгов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВсехРасчетов КАК ТаблицаВсехРасчетов
	|		ПО ТаблицаВсехРасчетовИДолгов.Счет = ТаблицаВсехРасчетов.Счет
	|			И ТаблицаВсехРасчетовИДолгов.Контрагент = ТаблицаВсехРасчетов.Контрагент
	|			И ТаблицаВсехРасчетовИДолгов.Договор = ТаблицаВсехРасчетов.Договор
	|			И ТаблицаВсехРасчетовИДолгов.ДокументДолга = ТаблицаВсехРасчетов.ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Счет,
	|	Таблица.Контрагент,
	|	Таблица.Договор,
	|	Таблица.ДокументДолга,
	|	СУММА(Таблица.ДолгБу) КАК ДолгБУ,
	|	СУММА(Таблица.ДолгНУ) КАК ДолгНУ,
	|	МИНИМУМ(Таблица.СрокОплаты) КАК СрокОплаты
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Контрагент,
	|	Таблица.Договор,
	|	Таблица.ДокументДолга,
	|	Таблица.Счет";
	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаДолгов = Результат.Выгрузить();
	
	ТаблицаДолгов.Колонки.Добавить("ДатаДолга", Новый ОписаниеТипов("Дата"));
	ТаблицаДолгов.Колонки.Добавить("СрокДолга", Новый ОписаниеТипов("Число"));
	ТаблицаДолгов.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	ТекущийМесяц = КонецМесяца(СтруктураПараметров.Дата);
	
	// Добавление к списку дебиторской задолженности дат возникновения сомнительной задолженности и корректировка сумм БУ и НУ по установкам в учетной политике
	
	ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаДолгов,"ДокументДолга","ДатаДолга");
	
	Для Каждого Строка Из ТаблицаДолгов Цикл
		Строка.ДатаДолга = Строка.ДатаДолга + Строка.СрокОплаты * 86400;
		Строка.СрокДолга = Цел((ТекущийМесяц - Строка.ДатаДолга ) / 86400);
		Если Строка.СрокДолга > 90 Тогда
			Строка.Коэффициент = 1;
		ИначеЕсли Строка.СрокДолга >= 45 Тогда
			Строка.Коэффициент = 0.5;
		Иначе
			Строка.Коэффициент = 0;	
		КонецЕсли;
	КонецЦикла;
	
	ЗапросВр = Новый Запрос;
	ЗапросВр.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросВр.УстановитьПараметр("ТаблицаДолгов",  ТаблицаДолгов);
	
	ЗапросВр.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДолгов.Счет КАК Счет,
	|	ТаблицаДолгов.Контрагент КАК Контрагент,
	|	ТаблицаДолгов.Договор КАК Договор,
	|	ТаблицаДолгов.ДокументДолга КАК ДокументДолга,
	|	ТаблицаДолгов.ДатаДолга КАК ДатаДолга,
	|	ТаблицаДолгов.СрокДолга КАК СрокДолга,
	|	ТаблицаДолгов.ДолгБУ КАК ДолгБУ,
	|	ТаблицаДолгов.ДолгНУ КАК ДолгНУ,
	|	ТаблицаДолгов.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ТаблицаДолгов
	|ИЗ
	|	&ТаблицаДолгов КАК ТаблицаДолгов
	|ГДЕ
	|	ТаблицаДолгов.СрокДолга >= 45";
	
	ЗапросВр.Выполнить();
	
	// Определение сомнительной задолженности и расчет резервов
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецМесяца",       ДатаКонцаМесяца);
	Запрос.УстановитьПараметр("ДатаКонцаМесяцаГраница",ДатаКонцаМесяцаГраница);
	Запрос.УстановитьПараметр("КонецПрошлогоМесяца",ДатаКонцаПрошлогоМесяца);
	Запрос.УстановитьПараметр("ДатаНачалаГода",    ДатаНачалаГода);
	Запрос.УстановитьПараметр("ИспользуетсяДляВводаОстатков", ИспользуетсяДляВводаОстатков);
	Запрос.УстановитьПараметр("ДатаОстатков",      ?(РежимФормированияПроводок, ДатаКонцаМесяца, ДатаКонцаПрошлогоМесяца));
	Запрос.УстановитьПараметр("ФормироватьБУ",     ФормироватьБУ);
	Запрос.УстановитьПараметр("ФормироватьНУ",     ФормироватьНУ);
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВр.МенеджерВременныхТаблиц;
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТаблицаДолгов.Счет,
	                |	ТаблицаДолгов.Контрагент КАК Контрагент,
	                |	ТаблицаДолгов.Договор КАК Договор,
	                |	ТаблицаДолгов.ДокументДолга КАК ДокументДолга,
	                |	ТаблицаДолгов.ДатаДолга,
	                |	ТаблицаДолгов.СрокДолга,
	                |	ТаблицаДолгов.ДолгБУ КАК НачисленоБУ,
	                |	ТаблицаДолгов.ДолгНУ КАК НачисленоНУ,
	                |	ВЫБОР
	                |		КОГДА &ФормироватьБУ
	                |			ТОГДА ТаблицаДолгов.ДолгБУ
	                |		ИНАЧЕ ТаблицаДолгов.ДолгНУ
	                |	КОНЕЦ КАК СуммаЗадолженности,
	                |	ТаблицаДолгов.Коэффициент
	                |ПОМЕСТИТЬ ТаблицаСомнительныхДолгов
	                |ИЗ
	                |	ТаблицаДолгов КАК ТаблицаДолгов
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Контрагент,
	                |	Договор,
	                |	ДокументДолга
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	РезервыПоСомнительнымДолгамОстаткиИОбороты.Контрагент КАК Контрагент,
	                |	РезервыПоСомнительнымДолгамОстаткиИОбороты.ДоговорКонтрагента КАК Договор,
	                |	РезервыПоСомнительнымДолгамОстаткиИОбороты.Документ КАК ДокументДолга,
	                |	ВЫБОР
	                |		КОГДА &ФормироватьБУ
	                |			ТОГДА ВЫБОР
	                |					КОГДА &ДатаНачалаГода = &КонецПрошлогоМесяца
	                |						ТОГДА РезервыПоСомнительнымДолгамОстаткиИОбороты.СуммаБУНачальныйОстаток
	                |					ИНАЧЕ РезервыПоСомнительнымДолгамОстаткиИОбороты.СуммаБУКонечныйОстаток
	                |				КОНЕЦ
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК НачисленоРанееБУ,
	                |	ВЫБОР
	                |		КОГДА &ФормироватьНУ
	                |			ТОГДА ВЫБОР
	                |					КОГДА &ДатаНачалаГода = &КонецПрошлогоМесяца
	                |						ТОГДА РезервыПоСомнительнымДолгамОстаткиИОбороты.СуммаНУНачальныйОстаток
	                |					ИНАЧЕ РезервыПоСомнительнымДолгамОстаткиИОбороты.СуммаНУКонечныйОстаток
	                |				КОНЕЦ
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК НачисленоРанееНУ,
	                |	ВЫБОР
	                |		КОГДА &ФормироватьБУ
	                |			ТОГДА РезервыПоСомнительнымДолгамОстаткиИОбороты.СуммаБУНачальныйОстаток
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК ОстатокРезерваБУНаНачалоГода
	                |ПОМЕСТИТЬ ОстаткиРезервов
	                |ИЗ
	                |	РегистрНакопления.РезервыПоСомнительнымДолгам.ОстаткиИОбороты(
	                |			&ДатаНачалаГода,
	                |			&ДатаОстатков,
	                |			,
	                |			,
	                |			Организация = &Организация
	                |				И НЕ &ИспользуетсяДляВводаОстатков) КАК РезервыПоСомнительнымДолгамОстаткиИОбороты
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Контрагент,
	                |	Договор,
	                |	ДокументДолга
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТаблицаДанныхРасчетов.Контрагент,
	                |	ТаблицаДанныхРасчетов.ДоговорКонтрагента КАК Договор,
	                |	ТаблицаДанныхРасчетов.Документ КАК ДокументДолга,
	                |	ТаблицаДанныхРасчетов.СуммаБУОстаток КАК ОстатокРезерваБУ,
	                |	ТаблицаДанныхРасчетов.СуммаНУОстаток КАК ОстатокРезерваНУ
	                |ПОМЕСТИТЬ ТаблицаТекущихРезервов
	                |ИЗ
	                |	РегистрНакопления.РезервыПоСомнительнымДолгам.Остатки(&ДатаКонцаМесяцаГраница, Организация = &Организация) КАК ТаблицаДанныхРасчетов
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	ТаблицаДанныхРасчетов.Контрагент,
	                |	Договор,
	                |	ДокументДолга
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТаблицаСомнительныхДолгов.Счет,
	                |	ТаблицаСомнительныхДолгов.Контрагент,
	                |	ТаблицаСомнительныхДолгов.Договор,
	                |	ТаблицаСомнительныхДолгов.ДокументДолга,
	                |	ТаблицаСомнительныхДолгов.ДатаДолга,
	                |	ТаблицаСомнительныхДолгов.СрокДолга,
	                |	ТаблицаСомнительныхДолгов.СуммаЗадолженности,
	                |	ЕСТЬNULL(ОстаткиРезервов.НачисленоРанееБУ, 0) КАК НачисленоРанееБУ,
	                |	ЕСТЬNULL(ОстаткиРезервов.НачисленоРанееНУ, 0) КАК НачисленоРанееНУ,
	                |	ЕСТЬNULL(ОстаткиРезервов.ОстатокРезерваБУНаНачалоГода, 0) КАК ОстатокРезерваБУНаНачалоГода,
	                |	ЕСТЬNULL(ТаблицаСомнительныхДолгов.НачисленоБУ, 0) КАК НачисленоБУ,
	                |	ЕСТЬNULL(ТаблицаСомнительныхДолгов.НачисленоНУ, 0) КАК НачисленоНУ,
	                |	ЕСТЬNULL(ТаблицаТекущихРезервов.ОстатокРезерваБУ, 0) КАК ОстатокРезерваБУ,
	                |	ЕСТЬNULL(ТаблицаТекущихРезервов.ОстатокРезерваНУ, 0) КАК ОстатокРезерваНУ,
	                |	ТаблицаСомнительныхДолгов.Коэффициент
	                |ПОМЕСТИТЬ ТаблицаСомнительныхДолговИОстатковРезервов
	                |ИЗ
	                |	ТаблицаСомнительныхДолгов КАК ТаблицаСомнительныхДолгов
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервов КАК ОстаткиРезервов
	                |		ПО ТаблицаСомнительныхДолгов.Контрагент = ОстаткиРезервов.Контрагент
	                |			И ТаблицаСомнительныхДолгов.Договор = ОстаткиРезервов.Договор
	                |			И ТаблицаСомнительныхДолгов.ДокументДолга = ОстаткиРезервов.ДокументДолга
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТекущихРезервов КАК ТаблицаТекущихРезервов
	                |		ПО ТаблицаСомнительныхДолгов.Контрагент = ТаблицаТекущихРезервов.Контрагент
	                |			И ТаблицаСомнительныхДолгов.Договор = ТаблицаТекущихРезервов.Договор
	                |			И ТаблицаСомнительныхДолгов.ДокументДолга = ТаблицаТекущихРезервов.ДокументДолга
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.Счет,
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.Контрагент,
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.Договор,
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.ДокументДолга,
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.ДатаДолга,
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.СрокДолга,
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.СуммаЗадолженности,
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ,
	                |	ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееНУ,
	                |	ВЫБОР
	                |		КОГДА (ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2))) > ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ
	                |			ТОГДА (ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2))) - ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК НачисленоБУ,
	                |	ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоНУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2)) КАК НачисленоСНачалаГодаНУ,
	                |	ВЫБОР
	                |		КОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ > (ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2)))
	                |			ТОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ - (ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2)))
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК ВосстановленоБУ,
	                |	ВЫБОР
	                |		КОГДА МЕСЯЦ(&КонецМесяца) = 12
	                |				И ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУНаНачалоГода > 0
	                |				И ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУ > 0
	                |			ТОГДА ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУ
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК ПрисоединеноБУ
	                |ПОМЕСТИТЬ Таблица
	                |ИЗ
	                |	ТаблицаСомнительныхДолговИОстатковРезервов КАК ТаблицаСомнительныхДолговИОстатковРезервов
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Таблица.Счет КАК Счет,
	                |	Таблица.Контрагент КАК Контрагент,
	                |	Таблица.Договор КАК Договор,
	                |	Таблица.ДокументДолга КАК ДокументДолга,
	                |	МИНИМУМ(Таблица.ДатаДолга) КАК ДатаДолга,
	                |	МИНИМУМ(Таблица.СрокДолга) КАК СрокДолга,
	                |	СУММА(Таблица.СуммаЗадолженности) КАК СуммаЗадолженности,
	                |	СУММА(Таблица.НачисленоРанееБУ) КАК НачисленоРанееБУ,
	                |	СУММА(Таблица.НачисленоРанееНУ) КАК НачисленоРанееНУ,
	                |	СУММА(Таблица.НачисленоБУ) КАК НачисленоБУ,
	                |	СУММА(Таблица.ВосстановленоБУ) КАК ВосстановленоБУ,
	                |	СУММА(Таблица.ПрисоединеноБУ) КАК ПрисоединеноБУ,
	                |	СУММА(Таблица.НачисленоСНачалаГодаНУ) КАК НачисленоСНачалаГодаНУ
	                |ИЗ
	                |	Таблица КАК Таблица
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	Таблица.Счет,
	                |	Таблица.Контрагент,
	                |	Таблица.Договор,
	                |	Таблица.ДокументДолга
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Счет,
	                |	Контрагент,
	                |	Договор,
	                |	ДокументДолга";
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезервов = Результат.Выгрузить();
	ТаблицаРезервов.Колонки.Добавить("НачисленоНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезервов.Колонки.Добавить("ВосстановленоНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если ИспользуетсяДляВводаОстатков Тогда
		ТаблицаРезервов.ЗагрузитьКолонку(ТаблицаРезервов.ВыгрузитьКолонку("НачисленоБУ"), "НачисленоНУ");
		Возврат ТаблицаРезервов;
	КонецЕсли;
	
	// Расчет коэффициент для нормирования по выручке для НУ
	
	МожноНачислить = НормаРасходовПоВыручке;
	
	Если ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ") = 0 Тогда
		Коэффициент = 0;
	Иначе
		Коэффициент = Окр(МожноНачислить / ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ"), 8);
	КонецЕсли;
	
	Коэффициент = ?(Коэффициент > 1, 1, Коэффициент);
	
	Если РежимФормированияПроводок Тогда
		// Расчет сумм резервов для НУ
		Если СтруктураПараметров.УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ Тогда

			ИтогНачисленоНУ = Окр(ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ") * Коэффициент, 2);
			УчетНДС.РаспределитьСуммуПоСтолбцу(ТаблицаРезервов.ВыгрузитьКолонку("НачисленоСНачалаГодаНУ"), ИтогНачисленоНУ, ТаблицаРезервов, "НачисленоСНачалаГодаНУ");

			Для Каждого СтрокаРезерва Из ТаблицаРезервов Цикл
				Разница = СтрокаРезерва.НачисленоСНачалаГодаНУ - СтрокаРезерва.НачисленоРанееНУ;
				Если Разница >= 0 Тогда
					СтрокаРезерва.НачисленоНУ     = Разница;
					СтрокаРезерва.ВосстановленоНУ = 0;
				Иначе	
					СтрокаРезерва.НачисленоНУ     = 0;
					СтрокаРезерва.ВосстановленоНУ = - Разница;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ТаблицаРезервов;
		
	Иначе
		
		Возврат Коэффициент;		
		
	КонецЕсли;
	
КонецФункции

Функция ДобавитьДатуДокументаКРезультатуЗапроса(Результат,КолонкаДокумента,КолонкаСДатой) 
	
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из Результат Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = новый запрос;
	
	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
		
		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		" 
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|		Док.Ссылка Как Ссылка,
		|		Док.Дата
		|	ИЗ Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		для каждого строка из НайденныеСтроки цикл
			строка[КолонкаСДатой] = Выборка.Дата;
			
		Конеццикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ДобавитьДатуДокументаКРезультатуЗапроса()

