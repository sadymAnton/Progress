#Если Клиент Тогда
	
#КонецЕсли
	
Функция ВернутьЗаданиеНаПодоборПоЗаказу(Заказ, Статус = Неопределено, ТолькоПроведенные = Ложь, Все = Ложь) Экспорт
	
	НайденныйДокумент = Документы.СП_ЗаданиеНаПодбор.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СП_ЗаданиеНаПодбор.Ссылка
	               |ИЗ
	               |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
	               |ГДЕ
	               |	СП_ЗаданиеНаПодбор.Заказ = &Заказ
	               |	И СП_ЗаданиеНаПодбор.ПометкаУдаления = ЛОЖЬ"
				   + ?(Статус = Неопределено,"","
				   |	И Не СП_ЗаданиеНаПодбор.СтатусДокумента = &Статус") + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СП_ЗаданиеНаПодбор.Дата УБЫВ";
				   
	Запрос.УстановитьПараметр("Заказ", Заказ);			   
	Запрос.УстановитьПараметр("Статус", Статус);			   
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		НайденныйДокумент = Результат[0].Ссылка;
	КонецЕсли;
	
	Возврат НайденныйДокумент;
	
КонецФункции

Функция ПроверкаНаДубльПоЗаданиюНаПодбор(Заказ, Задание) Экспорт
	//Не даем вводить два задания, за исключением статуса "Отменено"
	НайденныйДокумент = Документы.СП_ЗаданиеНаПодбор.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СП_ЗаданиеНаПодбор.Ссылка
	               |ИЗ
	               |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
	               |ГДЕ
				   |	СП_ЗаданиеНаПодбор.Заказ = &Заказ
	               |	И СП_ЗаданиеНаПодбор.ПометкаУдаления = ЛОЖЬ
	               |	И НЕ СП_ЗаданиеНаПодбор.Ссылка = &Ссылка
	               |	И НЕ СП_ЗаданиеНаПодбор.СтатусДокумента В (&Статус)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СП_ЗаданиеНаПодбор.Дата УБЫВ";

	Запрос.УстановитьПараметр("Ссылка", Задание);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Статус = Новый СписокЗначений;
	Статус.Добавить(Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен);
	
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		НайденныйДокумент = Результат[0].Ссылка;
	КонецЕсли;
	
	Возврат НайденныйДокумент;
КонецФункции

Функция ВернутьЗаданиеНаПеревозкуПоЗаказу(Заказ) Экспорт
	
	НайденныйДокумент = Документы.ПТЛ_ЗаданиеНаПеревозку.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ЗаданиеНаПеревозку.Ссылка
	               |ИЗ
	               |	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	               |ГДЕ
	               |	ПТЛ_ЗаданиеНаПеревозку.Заказ = &Заказ
	               |	И ПТЛ_ЗаданиеНаПеревозку.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПТЛ_ЗаданиеНаПеревозку.Дата УБЫВ";
				   
	Запрос.УстановитьПараметр("Заказ", Заказ);			   
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		НайденныйДокумент = Результат[0].Ссылка;
	КонецЕсли;
	
	Возврат НайденныйДокумент;
	
КонецФункции

Функция ПроверкаНаДубльПоЗаданиюНаПеревозку(Заказ, Задание, НужныйСтатус = Неопределено, ТолькоПроведенные = Ложь, Все = Ложь) Экспорт
	//Не даем вводить два задания, за исключением статуса "Отменено"
	НайденныйДокумент = Документы.СП_ЗаданиеНаПодбор.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ЗаданиеНаПеревозку.Ссылка
	               |ИЗ
	               |	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	               |ГДЕ
				   |	ПТЛ_ЗаданиеНаПеревозку.Заказ = &Заказ
	               |	И ПТЛ_ЗаданиеНаПеревозку.ПометкаУдаления = ЛОЖЬ
	               |	И НЕ ПТЛ_ЗаданиеНаПеревозку.Ссылка = &Ссылка
	               |	И НЕ ПТЛ_ЗаданиеНаПеревозку.СтатусДокумента В (&Статус)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПТЛ_ЗаданиеНаПеревозку.Дата УБЫВ";

	Запрос.УстановитьПараметр("Ссылка", Задание);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Статус = Новый СписокЗначений;
	Статус.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено);
	Статус.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.НеВыполнено);
	
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		НайденныйДокумент = Результат[0].Ссылка;
	КонецЕсли;
	
	Возврат НайденныйДокумент;
КонецФункции

Функция ПолучимСкладыПоПривязкеКОтделению(Отделение) Экспорт

	НаборЗаписей = РегистрыСведений.СП_ПривязкаСкладовКОтделениям.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Отделение.Установить(Отделение);
	НаборЗаписей.Прочитать();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СкладПретензии"	, Справочники.Склады.ПустаяСсылка());
	СтруктураВозврата.Вставить("СкладТранзит"	, Справочники.Склады.ПустаяСсылка());
	//{11.06.2015 Островерхий заявка №40578 
	СтруктураВозврата.Вставить("СкладСкоропорт"	, Справочники.Склады.ПустаяСсылка()); 
	//11.06.2015 Островерхий} 

	Для каждого Строка Из НаборЗаписей Цикл
	
		СтруктураВозврата.Вставить("СкладПретензии"	, Строка.СкладПретензии);
		СтруктураВозврата.Вставить("СкладТранзит"	, Строка.СкладТранзит);
	    //{11.06.2015 Островерхий заявка №40578 
		СтруктураВозврата.Вставить("СкладСкоропорт"	, Строка.СкладСкоропорт); 
		//11.06.2015 Островерхий} 

	КонецЦикла; 
	
    Возврат СтруктураВозврата;
	
КонецФункции // ()

Функция РассчитатьДатуОтгрузки(ДатаПоставки, Отделение, УсловиеПоставки, ГородДоставки, АдресПоставки) Экспорт
	Если УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
		ДатаОтгрузки = ДатаПоставки;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Отделение", Отделение);
		
		Запрос.УстановитьПараметр("УсловиеПоставки", УсловиеПоставки);
		Запрос.УстановитьПараметр("ПустойУсловиеПоставки", Перечисления.ПТЛ_УсловияПоставки.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("ГородДоставки", ГородДоставки);
		Запрос.УстановитьПараметр("ПустойГородДоставки", Справочники.НСИ_Города.ПустаяСсылка());
		
		Если АдресПоставки = Неопределено Тогда
			Запрос.УстановитьПараметр("Регион", Справочники.Регионы.ПустаяСсылка());	
		ИначеЕсли ТипЗнч(АдресПоставки) = Тип("СправочникСсылка.АдресаПоставки") Тогда
			Запрос.УстановитьПараметр("Регион", АдресПоставки.НСИ_Регион);
		ИначеЕсли ТипЗнч(АдресПоставки) = Тип("СправочникСсылка.Контрагенты") Тогда
			Запрос.УстановитьПараметр("Регион", АдресПоставки.НСИ_Регион);
		КонецЕсли;
		Запрос.УстановитьПараметр("ПустойРегион", Справочники.Регионы.ПустаяСсылка());
		
		Длительность = 0;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ВложенныйЗапрос.Дней,
		               |	ВложенныйЗапрос.Город + ВложенныйЗапрос.Регион + ВложенныйЗапрос.УсловиеПоставки КАК Порядок
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ПТЛ_ДлительностьДоставки.Дней КАК Дней,
		               |		ВЫБОР
		               |			КОГДА ПТЛ_ДлительностьДоставки.Город = &ГородДоставки
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК Город,
		               |		ВЫБОР
		               |			КОГДА ПТЛ_ДлительностьДоставки.Регион = &Регион
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК Регион,
		               |		ВЫБОР
		               |			КОГДА ПТЛ_ДлительностьДоставки.УсловиеПоставки = &УсловиеПоставки
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК УсловиеПоставки
		               |	ИЗ
		               |		РегистрСведений.ПТЛ_ДлительностьДоставки КАК ПТЛ_ДлительностьДоставки
		               |	ГДЕ
		               |		ПТЛ_ДлительностьДоставки.Отделение = &Отделение
		               |		И (ПТЛ_ДлительностьДоставки.Город = &ГородДоставки
		               |				ИЛИ ПТЛ_ДлительностьДоставки.Город = &ПустойГородДоставки)
		               |		И (ПТЛ_ДлительностьДоставки.Регион = &Регион
		               |				ИЛИ ПТЛ_ДлительностьДоставки.Регион = &ПустойРегион)
		               |		И (ПТЛ_ДлительностьДоставки.УсловиеПоставки = &УсловиеПоставки
		               |				ИЛИ ПТЛ_ДлительностьДоставки.УсловиеПоставки = &ПустойУсловиеПоставки)) КАК ВложенныйЗапрос
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Порядок УБЫВ";
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Длительность = Результат.Дней;
		КонецЕсли;
		ДатаОтгрузки = КонецДня(ДатаПоставки) - (60*60*24)*Длительность;
		
	КонецЕсли;
	
	Возврат ДатаОтгрузки;
КонецФункции

Функция РассчитатьДатуПоставки(ДатаОтгрузки, Отделение, УсловиеПоставки, ГородДоставки, АдресПоставки) Экспорт
	Если УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
		ДатаПоставки = ДатаОтгрузки;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Отделение", Отделение);
		
		Запрос.УстановитьПараметр("УсловиеПоставки", УсловиеПоставки);
		Запрос.УстановитьПараметр("ПустойУсловиеПоставки", Перечисления.ПТЛ_УсловияПоставки.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("ГородДоставки", ГородДоставки);
		Запрос.УстановитьПараметр("ПустойГородДоставки", Справочники.НСИ_Города.ПустаяСсылка());
		
		Если АдресПоставки = Неопределено Тогда
			Запрос.УстановитьПараметр("Регион", Справочники.Регионы.ПустаяСсылка());	
		ИначеЕсли ТипЗнч(АдресПоставки) = Тип("СправочникСсылка.АдресаПоставки") Тогда
			Запрос.УстановитьПараметр("Регион", АдресПоставки.НСИ_Регион);
		ИначеЕсли ТипЗнч(АдресПоставки) = Тип("СправочникСсылка.Контрагенты") Тогда
			Запрос.УстановитьПараметр("Регион", АдресПоставки.НСИ_Регион);
		КонецЕсли;
		Запрос.УстановитьПараметр("ПустойРегион", Справочники.Регионы.ПустаяСсылка());
		
		Длительность = 0;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ВложенныйЗапрос.Дней,
		               |	ВложенныйЗапрос.Город + ВложенныйЗапрос.Регион + ВложенныйЗапрос.УсловиеПоставки КАК Порядок
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ПТЛ_ДлительностьДоставки.Дней КАК Дней,
		               |		ВЫБОР
		               |			КОГДА ПТЛ_ДлительностьДоставки.Город = &ГородДоставки
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК Город,
		               |		ВЫБОР
		               |			КОГДА ПТЛ_ДлительностьДоставки.Регион = &Регион
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК Регион,
		               |		ВЫБОР
		               |			КОГДА ПТЛ_ДлительностьДоставки.УсловиеПоставки = &УсловиеПоставки
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ КАК УсловиеПоставки
		               |	ИЗ
		               |		РегистрСведений.ПТЛ_ДлительностьДоставки КАК ПТЛ_ДлительностьДоставки
		               |	ГДЕ
		               |		ПТЛ_ДлительностьДоставки.Отделение = &Отделение
		               |		И (ПТЛ_ДлительностьДоставки.Город = &ГородДоставки
		               |				ИЛИ ПТЛ_ДлительностьДоставки.Город = &ПустойГородДоставки)
		               |		И (ПТЛ_ДлительностьДоставки.Регион = &Регион
		               |				ИЛИ ПТЛ_ДлительностьДоставки.Регион = &ПустойРегион)
		               |		И (ПТЛ_ДлительностьДоставки.УсловиеПоставки = &УсловиеПоставки
		               |				ИЛИ ПТЛ_ДлительностьДоставки.УсловиеПоставки = &ПустойУсловиеПоставки)) КАК ВложенныйЗапрос
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Порядок УБЫВ";
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Длительность = Результат.Дней;
		КонецЕсли;
		ДатаПоставки = КонецДня(ДатаОтгрузки) + (60*60*24)*Длительность;
		
		//m.ionov@a-prof.ru 10.02.2015
		//Так как в дату доставки добавили время
		ДатаПоставки = НачалоДня(ДатаПоставки);
		
	КонецЕсли;
	
	Возврат ДатаПоставки;
КонецФункции     

Функция ПолучитьСтратегиюОСГ(Контрагент, Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Брендообъем", Номенклатура.НСИ_Брендообъем);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", Номенклатура.НСИ_ТоварнаяКатегория);
	Запрос.УстановитьПараметр("ПроектГП", Номенклатура.Проект);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КП_СтратегияОтбораПоОСГ.Контрагент,
	               |	КП_СтратегияОтбораПоОСГ.ПроектГП,
	               |	КП_СтратегияОтбораПоОСГ.ТоварнаяКатегория,
	               |	КП_СтратегияОтбораПоОСГ.Брендообъем,
	               |	КП_СтратегияОтбораПоОСГ.ОСГ,
	               |	ВЫБОР
	               |		КОГДА КП_СтратегияОтбораПоОСГ.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка)
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ + ВЫБОР
	               |		КОГДА КП_СтратегияОтбораПоОСГ.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ + ВЫБОР
	               |		КОГДА КП_СтратегияОтбораПоОСГ.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	РегистрСведений.КП_СтратегияОтбораПоОСГ КАК КП_СтратегияОтбораПоОСГ
	               |ГДЕ
	               |	КП_СтратегияОтбораПоОСГ.Контрагент = &Контрагент
	               |	И (КП_СтратегияОтбораПоОСГ.ПроектГП = &ПроектГП
	               |			ИЛИ КП_СтратегияОтбораПоОСГ.ПроектГП = ЗНАЧЕНИЕ(Справочник.ПРГ_ПроектыГП.ПустаяСсылка))
	               |	И (КП_СтратегияОтбораПоОСГ.ТоварнаяКатегория = &ТоварнаяКатегория
	               |			ИЛИ КП_СтратегияОтбораПоОСГ.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка))
	               |	И (КП_СтратегияОтбораПоОСГ.Брендообъем = &Брендообъем
	               |			ИЛИ КП_СтратегияОтбораПоОСГ.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет УБЫВ";
				   
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ОСГ;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ДоступнаРоль(Пользователь, РольПользователя) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АП_РолиПользователей.Пользователь
	               |ИЗ
	               |	РегистрСведений.АП_РолиПользователей КАК АП_РолиПользователей
	               |ГДЕ
	               |	АП_РолиПользователей.Пользователь = &Пользователь
	               |	И АП_РолиПользователей.РольПользователя = &РольПользователя";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("РольПользователя", РольПользователя);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

Функция ЕстьРезервПоЗаказу(Заказ) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
	               |	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК Количество,
	               |	ТоварыВРезервеНаСкладахОстатки.Склад
	               |ИЗ
	               |	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Заказ) КАК ТоварыВРезервеНаСкладахОстатки
	               |ГДЕ
	               |	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток <> 0";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьКоличествоДнейПоРезерву(Заказ) Экспорт
	КоличествоДнейРезерва = 0;
	
	Запрос = Новый Запрос;
	Если Заказ.Грузополучатель = Неопределено Тогда
		Запрос.УстановитьПараметр("КатегорияКлиента", Заказ.Контрагент.НСИ_КатегорияКлиента);
	ИначеЕсли ЗначениеЗаполнено(Заказ.Грузополучатель) Тогда
		Запрос.УстановитьПараметр("КатегорияКлиента", Заказ.Грузополучатель.НСИ_КатегорияКлиента);
	Иначе
		Запрос.УстановитьПараметр("КатегорияКлиента", Заказ.Контрагент.НСИ_КатегорияКлиента);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	АП_СрокиРезервов.КоличествоДней
	               |ИЗ
	               |	РегистрСведений.АП_СрокиРезервов КАК АП_СрокиРезервов
	               |ГДЕ
	               |	АП_СрокиРезервов.КатегорияКлиента = &КатегорияКлиента";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КоличествоДнейРезерва = Результат.КоличествоДней;
	КонецЕсли;
	
	Возврат КоличествоДнейРезерва;
	//Если возвращает "-1" - значит резер не ограничен
КонецФункции

Функция МожноМенятьЗаказ(Заказ) Экспорт
	
	МожноМенять = Истина;
	
	Запрос = Новый Запрос;
	//Проверим если ли закрытие заказ без заполненно задания на подбор
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗакрытиеВнутреннихЗаказовЗаказы.Ссылка
		               |ИЗ
		               |	Документ.ЗакрытиеВнутреннихЗаказов.Заказы КАК ЗакрытиеВнутреннихЗаказовЗаказы
		               |ГДЕ
		               |	ЗакрытиеВнутреннихЗаказовЗаказы.ВнутреннийЗаказ = &Заказ
		               |	И ЗакрытиеВнутреннихЗаказовЗаказы.Ссылка.Проведен = ИСТИНА
		               |	И ЗакрытиеВнутреннихЗаказовЗаказы.Ссылка.СП_ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)";
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка
		               |ИЗ
		               |	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ЗакрытиеЗаказовПокупателейЗаказы
		               |ГДЕ
		               |	ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя = &Заказ
		               |	И ЗакрытиеЗаказовПокупателейЗаказы.Ссылка.Проведен = ИСТИНА
		               |	И ЗакрытиеЗаказовПокупателейЗаказы.Ссылка.СП_ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)";
					   
	КонецЕсли;
				   
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.Сообщение("Запрещено менять заказ", СтатусСообщения.ОченьВажное);
			МожноМенять = Истина;
		Иначе
			
			МожноМенять = Ложь;
		КонецЕсли;
	КонецЕсли;   
	
	Если МожноМенять Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заказ", Заказ);
		
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт);
		СписокСтатусов.Добавить(Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен);
		Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СП_ЗаданиеНаПодбор.Ссылка
		               |ИЗ
		               |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
		               |ГДЕ
		               |	СП_ЗаданиеНаПодбор.Проведен = ИСТИНА
		               |	И СП_ЗаданиеНаПодбор.Заказ = &Заказ
		               |	И НЕ СП_ЗаданиеНаПодбор.СтатусДокумента В (&СписокСтатусов)";
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Если РольДоступна("АП_Администратор") Тогда
				ОбщегоНазначения.Сообщение("Запрещено менять заказ", СтатусСообщения.ОченьВажное);
				МожноМенять = Истина;
			Иначе
				
				МожноМенять = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если МожноМенять Тогда
		//Проверим задания на перевозку
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто);
		СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено);
		СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.НеВыполнено);
		Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПТЛ_ЗаданиеНаПеревозку.Ссылка
		|ИЗ
		|	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
		|ГДЕ
		|	ПТЛ_ЗаданиеНаПеревозку.Проведен = ИСТИНА
		|	И ПТЛ_ЗаданиеНаПеревозку.Заказ = &Заказ
		|	И НЕ ПТЛ_ЗаданиеНаПеревозку.СтатусДокумента В (&СписокСтатусов)";
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Если РольДоступна("АП_Администратор") Тогда
				ОбщегоНазначения.Сообщение("Запрещено менять заказ", СтатусСообщения.ОченьВажное);
				МожноМенять = Истина;
			Иначе
				
				МожноМенять = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МожноМенять;
КонецФункции

Процедура ИзменитьСтатусЗаказа(Заказ, Основание, МенятьСтатус = Истина) Экспорт
	Если Основание = Неопределено или Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
		//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
		сЗаказ 		= ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Заказ,Новый Структура("АП_СтатусЗаданияНаПодбор"));
		сОснование  = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Основание,Новый Структура("СтатусДокумента"));
		Если сЗаказ = Неопределено или сОснование = Неопределено тогда возврат конецесли;
		//Если НЕ Заказ.АП_СтатусЗаданияНаПодбор = Основание.СтатусДокумента Тогда
		Если НЕ сЗаказ.АП_СтатусЗаданияНаПодбор = сОснование.СтатусДокумента Тогда
		//конец изменений  	
			ОбъектЗаказа = Заказ.ПолучитьОбъект();
			ОбъектЗаказа.АП_СтатусЗаданияНаПодбор = Основание.СтатусДокумента;
			
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("МенятьСтатус", МенятьСтатус); 
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("ПРГПростоЗаписать", Истина); 
			//конец изменений  
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.Запись);
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("МенятьСтатус", Истина); 
			//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
			ОбъектЗаказа.ДополнительныеСвойства.Удалить("ПРГПростоЗаписать"); 
			//конец изменений  
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПТЛ_ЗаданиеНаПеревозку") Тогда
		//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
		сЗаказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Заказ,Новый Структура("АП_СтатусЗаданияНаПеревозку"));
		сОснование  = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Основание,Новый Структура("СтатусДокумента "));
	    Если сЗаказ = Неопределено или сОснование = Неопределено тогда возврат конецесли;
		//Если НЕ Заказ.АП_СтатусЗаданияНаПеревозку = Основание.СтатусДокумента Тогда
		Если НЕ сЗаказ.АП_СтатусЗаданияНаПеревозку = сОснование.СтатусДокумента Тогда
		//конец изменений  
			ОбъектЗаказа = Заказ.ПолучитьОбъект();
			ОбъектЗаказа.АП_СтатусЗаданияНаПеревозку = Основание.СтатусДокумента;
									
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("МенятьСтатус", МенятьСтатус); 
			//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("ПРГПростоЗаписать", Истина); 
			//конец изменений  
			ОбъектЗаказа.Записать(РежимЗаписиДокумента.Запись);
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
			ОбъектЗаказа.ДополнительныеСвойства.Вставить("МенятьСтатус", Истина); 
			//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
			ОбъектЗаказа.ДополнительныеСвойства.Удалить("ПРГПростоЗаписать"); 
			//конец изменений  
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВернутьНакладнуюПоЗаданиюНаПодбор(Заказ, ЗаданиеНаПодбор, НаПрием = Ложь) Экспорт
	
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	
	Запрос = Новый Запрос;
	
	Если Не ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
		возврат Неопределено;
	КонецЕсли;	
	
	Если НаПрием Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	СП_ЗаданиеНаПодбор.Ссылка,
		               |	СП_ЗаданиеНаПодбор.Получатель
		               |ПОМЕСТИТЬ ЗаданиеНаПодбор
		               |ИЗ
		               |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
		               |ГДЕ
		               |	СП_ЗаданиеНаПодбор.Ссылка = &СП_ЗаданиеНаПодбор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		               |		ПО ЗаданиеНаПодбор.Получатель = ПеремещениеТоваров.СкладПолучатель
		               |			И (ПеремещениеТоваров.Проведен)
		               |			И ЗаданиеНаПодбор.Ссылка = ПеремещениеТоваров.СП_ЗаданиеНаПодбор";
				   
				   
		Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор", ЗаданиеНаПодбор);
		//Запрос.УстановитьПараметр("Склад", ЗаданиеНаПодбор.Получатель);
	
	Иначе			
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	СП_ЗаданиеНаПодбор.Ссылка,
		               |	СП_ЗаданиеНаПодбор.Получатель,
		               |	СП_ЗаданиеНаПодбор.Склад
		               |ПОМЕСТИТЬ ЗаданиеНаПодбор
		               |ИЗ
		               |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
		               |ГДЕ
		               |	СП_ЗаданиеНаПодбор.Ссылка = &СП_ЗаданиеНаПодбор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РеализацияТоваровУслуг.Ссылка
		               |ИЗ
		               |	ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |		ПО ЗаданиеНаПодбор.Ссылка = РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор
		               |			И (РеализацияТоваровУслуг.Проведен)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ТребованиеНакладная.Ссылка
		               |ИЗ
		               |	ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
		               |		ПО ЗаданиеНаПодбор.Ссылка = ТребованиеНакладная.СП_ЗаданиеНаПодбор
		               |			И (ТребованиеНакладная.Проведен)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		               |		ПО ЗаданиеНаПодбор.Ссылка = ПеремещениеТоваров.СП_ЗаданиеНаПодбор
		               |			И (ПеремещениеТоваров.Проведен)
		               |			И ЗаданиеНаПодбор.Склад = ПеремещениеТоваров.СкладОтправитель";
				   
		Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор", ЗаданиеНаПодбор);
		//Запрос.УстановитьПараметр("Склад", ЗаданиеНаПодбор.Склад);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
	////конец изменений 
	//
	//Запрос = Новый Запрос;
	//
	//Если НаПрием Тогда
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//				   |	ПеремещениеТоваров.Ссылка
	//				   |ИЗ
	//				   |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	//				   |ГДЕ
	//				   |	ПеремещениеТоваров.Проведен = ИСТИНА
	//				   |	И ПеремещениеТоваров.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
	//				   |	И ПеремещениеТоваров.СкладПолучатель = &Склад";
	//			   
	//			   
	//	Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор", ЗаданиеНаПодбор);
	//	Запрос.УстановитьПараметр("Склад", ЗаданиеНаПодбор.Получатель);
	//
	//Иначе			
	//
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	РеализацияТоваровУслуг.Ссылка
	//			   |ИЗ
	//			   |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//			   |ГДЕ
	//			   |	РеализацияТоваровУслуг.Проведен = ИСТИНА
	//			   |	И РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
	//			   |
	//			   |ОБЪЕДИНИТЬ ВСЕ
	//			   |
	//			   |ВЫБРАТЬ
	//			   |	ТребованиеНакладная.Ссылка
	//			   |ИЗ
	//			   |	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	//			   |ГДЕ
	//			   |	ТребованиеНакладная.Проведен = ИСТИНА
	//			   |	И ТребованиеНакладная.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
	//			   |
	//			   |ОБЪЕДИНИТЬ ВСЕ
	//			   |
	//			   |ВЫБРАТЬ
	//			   |	ПеремещениеТоваров.Ссылка
	//			   |ИЗ
	//			   |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	//			   |ГДЕ
	//			   |	ПеремещениеТоваров.Проведен = ИСТИНА
	//			   |	И ПеремещениеТоваров.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
	//			   |	И ПеремещениеТоваров.СкладОтправитель = &Склад";
	//			   
	//	Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор", ЗаданиеНаПодбор);
	//	Запрос.УстановитьПараметр("Склад", ЗаданиеНаПодбор.Склад);
	//КонецЕсли;
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//Если Результат.Следующий() Тогда
	//	Возврат Результат.Ссылка;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;
КонецФункции

Функция ВернутьСтатусЗаказа(Заказ, ПометкаУдаления = Ложь) Экспорт
		
	Статус = Перечисления.АП_СтатусыЗаказов.ПустаяСсылка();
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	Накладная = ВернутьНакладнуюПоЗаказу(Заказ);
	//конец изменений 
	Если ПометкаУдаления 
		//{06.04.2015 Островерхий заявка №36501 
		//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
		//ИЛИ (ЗаказЗакрыт(Заказ) И ВернутьНакладнуюПоЗаказу(Заказ) = Неопределено) 
		ИЛИ (ЗаказЗакрыт(Заказ) И Накладная = Неопределено) 
		//конец изменений 
		//06.04.2015 Островерхий} 
		 Тогда
		Возврат Перечисления.АП_СтатусыЗаказов.Отменен;
	КонецЕсли;
	
	//Сначала ищем сформированные накладные
	ЗаданиеНаПодбор = ВернутьЗаданиеНаПодоборПоЗаказу(Заказ);
	Если ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
		
		Накладная = ВернутьНакладнуюПоЗаданиюНаПодбор(Заказ, ЗаданиеНаПодбор);
		Если Не Накладная = Неопределено Тогда
			Статус = Перечисления.АП_СтатусыЗаказов.Отгружен;
			
			//Проверим не принят ли уже на складе
			НакладнаяНаПрием = ВернутьНакладнуюПоЗаданиюНаПодбор(Заказ, ЗаданиеНаПодбор, Истина);
			Если Не НакладнаяНаПрием = Неопределено Тогда
				Статус = Перечисления.АП_СтатусыЗаказов.ПринятНаСклад;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
		//выше уже нашли накладную
		//Накладная = ВернутьНакладнуюПоЗаказу(Заказ);
		//конец изменений 
		Если Не Накладная = Неопределено Тогда
			Статус = Перечисления.АП_СтатусыЗаказов.Отгружен;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		//Смотрим резервы
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВложенныйЗапрос.Заказ,
		               |	СУММА(ВложенныйЗапрос.КоличествоЗаказано) КАК КоличествоЗаказано,
		               |	СУММА(ВложенныйЗапрос.КоличествоРезерв) КАК КоличествоРезерв
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЗаказыПокупателейОбороты.ЗаказПокупателя КАК Заказ,
		               |		ЗаказыПокупателейОбороты.КоличествоПриход КАК КоличествоЗаказано,
		               |		0 КАК КоличествоРезерв
		               |	ИЗ
		               |		РегистрНакопления.ЗаказыПокупателей.Обороты(, , , ЗаказПокупателя = &Заказ) КАК ЗаказыПокупателейОбороты
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ВнутренниеЗаказыОбороты.ВнутреннийЗаказ,
		               |		ВнутренниеЗаказыОбороты.КоличествоПриход,
		               |		0
		               |	ИЗ
		               |		РегистрНакопления.ВнутренниеЗаказы.Обороты(, , , ВнутреннийЗаказ = &Заказ) КАК ВнутренниеЗаказыОбороты
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ТоварыВРезервеНаСкладахОбороты.ДокументРезерва,
		               |		0,
		               |		ТоварыВРезервеНаСкладахОбороты.КоличествоОборот
		               |	ИЗ
		               |		РегистрНакопления.ТоварыВРезервеНаСкладах.Обороты(, , , ДокументРезерва = &Заказ) КАК ТоварыВРезервеНаСкладахОбороты) КАК ВложенныйЗапрос
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВложенныйЗапрос.Заказ";
					   //|
					   //|ИМЕЮЩИЕ
					   //|	НЕ СУММА(ВложенныйЗапрос.КоличествоЗаказано) - СУММА(ВложенныйЗапрос.КоличествоРезерв) = 0"
					   
		Запрос.УстановитьПараметр("Заказ", Заказ);				   
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Если Результат.КоличествоЗаказано = Результат.КоличествоРезерв Тогда
				Статус = Перечисления.АП_СтатусыЗаказов.Зарезервирован;	
			ИначеЕсли Результат.КоличествоРезерв = 0 Тогда
				Статус = Перечисления.АП_СтатусыЗаказов.Сформирован;
			Иначе
				Статус = Перечисления.АП_СтатусыЗаказов.ЗарезервированЧастично;	
			КонецЕсли;
		Иначе
			Статус = Перечисления.АП_СтатусыЗаказов.Сформирован;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Статус;
КонецФункции

Функция ЗаказЗакрыт(Заказ)

	//{06.04.2015,13.05.2015 Островерхий заявка №36501,39554 
	 
	ЭтотЗаказЗакрыть = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка,
		|	ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя
		|ИЗ
		|	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ЗакрытиеЗаказовПокупателейЗаказы
		|ГДЕ
		|	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка.Проведен
		|	И ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя = &Заказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗакрытиеВнутреннихЗаказов.Ссылка,
		|	ЗакрытиеВнутреннихЗаказов.ВнутреннийЗаказ
		|ИЗ
		|	Документ.ЗакрытиеВнутреннихЗаказов.Заказы КАК ЗакрытиеВнутреннихЗаказов
		|ГДЕ
		|	ЗакрытиеВнутреннихЗаказов.Ссылка.Проведен
		|	И ЗакрытиеВнутреннихЗаказов.ВнутреннийЗаказ = &Заказ";

	Запрос.УстановитьПараметр("Заказ", Заказ);

	ЭтотЗаказЗакрыть = НЕ Запрос.Выполнить().Пустой();

	Возврат ЭтотЗаказЗакрыть;
	
	//06.04.2015 Островерхий} 
	
КонецФункции // ЗаказЗакрыт()
 

Функция МожноМенятьЗаданиеНаПодбор(АЗаданиеНаПодбор) Экспорт
	
	МожноМенять = Истина;
	
	//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
	ЗаданиеНаПодбор = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказаСложНПоля(АЗаданиеНаПодбор,
		Новый Структура("Склад_НСИ_ПодключенКSolvo,СтатусДокумента","Склад.НСИ_ПодключенКSolvo"));
	//конец изменений 
	//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
	//Если ЗаданиеНаПодбор.Склад.НСИ_ПодключенКSolvo Тогда
	Если ЗаданиеНаПодбор.Склад_НСИ_ПодключенКSolvo Тогда
	//конец изменений 	
		//Запрет на изменение по данным задания на перевозку и статуса самого задания
		Если Не ЗаданиеНаПодбор.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт
			И Не ЗаданиеНаПодбор.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
			
			Если РольДоступна("АП_Администратор") Тогда
				ОбщегоНазначения.Сообщение("Запрещено менять задание", СтатусСообщения.ОченьВажное);
				МожноМенять = Истина;
			Иначе
					
				МожноМенять = Ложь;
			КонецЕсли;
		Иначе			
			
			Запрос = Новый Запрос;
			//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
			//Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор);
			Запрос.УстановитьПараметр("ЗаданиеНаПодбор", АЗаданиеНаПодбор);
			//конец изменений 
			
			СписокСтатусов = Новый СписокЗначений;
			//m.ionov@a-prof.ru 02.02.2015
			СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВРаботе); //Даем менять задание - пока задание на перевозку в работе, чтобы можно было отправлять его на склад
			//----m.ionov@a-prof.ru---
			СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто);
			СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено);
			СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.НеВыполнено);
			Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПТЛ_ЗаданиеНаПеревозку.Ссылка
			|ИЗ
			|	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
			|ГДЕ
			|	ПТЛ_ЗаданиеНаПеревозку.Проведен = ИСТИНА
			|	И ПТЛ_ЗаданиеНаПеревозку.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
			|	И НЕ ПТЛ_ЗаданиеНаПеревозку.СтатусДокумента В (&СписокСтатусов)";
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				Если РольДоступна("АП_Администратор") Тогда
					ОбщегоНазначения.Сообщение("Запрещено менять задание", СтатусСообщения.ОченьВажное);
					МожноМенять = Истина;
				Иначе
					
					МожноМенять = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Тогда только проверка на доступность роль склада
		Если Не ЗаданиеНаПодбор.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт
			И Не ЗаданиеНаПодбор.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
			
			Если АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникСклада) Тогда
				МожноМенять = Истина;
			Иначе
				Если РольДоступна("АП_Администратор") Тогда
					ОбщегоНазначения.Сообщение("Запрещено менять задание", СтатусСообщения.ОченьВажное);
					МожноМенять = Истина;
				Иначе
					
					МожноМенять = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
			//Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор);
			Запрос.УстановитьПараметр("ЗаданиеНаПодбор", АЗаданиеНаПодбор);
			//конец изменений 
			
			СписокСтатусов = Новый СписокЗначений;
			//m.ionov@a-prof.ru 02.02.2015
			СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВРаботе); //Даем менять задание - пока задание на перевозку в работе, чтобы можно было отправлять его на склад
			//----m.ionov@a-prof.ru---
			СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто);
			СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено);
			СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.НеВыполнено);
			Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПТЛ_ЗаданиеНаПеревозку.Ссылка
			|ИЗ
			|	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
			|ГДЕ
			|	ПТЛ_ЗаданиеНаПеревозку.Проведен = ИСТИНА
			|	И ПТЛ_ЗаданиеНаПеревозку.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
			|	И НЕ ПТЛ_ЗаданиеНаПеревозку.СтатусДокумента В (&СписокСтатусов)";
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				Если РольДоступна("АП_Администратор") Тогда
					ОбщегоНазначения.Сообщение("Запрещено менять задание", СтатусСообщения.ОченьВажное);
					МожноМенять = Истина;
				Иначе
					
					МожноМенять = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
    		
	Возврат МожноМенять;
КонецФункции

//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
Функция МожноМенятьЗаданиеНаПеревозку(АЗаданиеНаПеревозку) Экспорт
//конец изменений 	
	
	МожноМенять = Истина;
	//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
	ЗаданиеНаПеревозку = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(АЗаданиеНаПеревозку,Новый Структура("СтатусДокумента"));
	//конец изменений 
	
	Если Не ЗаданиеНаПеревозку.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто
		И Не ЗаданиеНаПеревозку.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено Тогда
		
		//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
		//ПланДоставки = ВернутьПланДоставкиПоЗаданию(ЗаданиеНаПеревозку);
		ПланДоставки = ВернутьПланДоставкиПоЗаданию(АЗаданиеНаПеревозку);
		//конец изменений 
		
		Если ЗначениеЗаполнено(ПланДоставки) Тогда
			Если РольДоступна("АП_Администратор") Тогда
				ОбщегоНазначения.Сообщение("Запрещено менять задание", СтатусСообщения.ОченьВажное);
				МожноМенять = Истина;
			Иначе
				
				МожноМенять = Ложь;
			КонецЕсли;
		ИначеЕсли АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникТранспортногоОтдела) Тогда
			МожноМенять = Истина;
		Иначе
			Если РольДоступна("АП_Администратор") Тогда
				ОбщегоНазначения.Сообщение("Запрещено менять задание", СтатусСообщения.ОченьВажное);
				МожноМенять = Истина;
			Иначе
				
				МожноМенять = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникТранспортногоОтдела) Тогда
			МожноМенять = Истина;
		Иначе
			//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
			//ПланДоставки = ВернутьПланДоставкиПоЗаданию(ЗаданиеНаПеревозку);
			ПланДоставки = ВернутьПланДоставкиПоЗаданию(АЗаданиеНаПеревозку);
			//конец изменений 
		
			Если ЗначениеЗаполнено(ПланДоставки) Тогда
				Если РольДоступна("АП_Администратор") Тогда
					ОбщегоНазначения.Сообщение("Запрещено менять задание", СтатусСообщения.ОченьВажное);
					МожноМенять = Истина;
				Иначе
				
					МожноМенять = Ложь;
				КонецЕсли;
			КонецЕсли;
		 КонецЕсли;
	КонецЕсли;
	
	Возврат МожноМенять;
КонецФункции
 
Функция ВернутьПланДоставкиПоЗаданию(Задание, Рейс = Неопределено) Экспорт
	
	ПланДоставки = Документы.ПТЛ_ПланДоставки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки,
				   |	ПТЛ_ПланДоставки.Рейс
	               |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.%Задание% = &Задание
	               |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
				   
	Если ТипЗнч(Задание) = Тип("ДокументСсылка.ПТЛ_ЗаданиеНаПеревозку") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Задание%", "ЗаданиеНаПеревозку");				   
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Задание%", "ЗаданиеНаПодбор");	
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("Задание", Задание);
		
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ПланДоставки = Результат.ПланДоставки;
		Рейс = Результат.Рейс;
	КонецЕсли;
	
	Возврат ПланДоставки;
	
КонецФункции

Функция ВернутьЖурналУчетаАМ(Задание) Экспорт
	//Если возращаем неопределено, значит не заведен еще план доставки
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки,
	               |	ПТЛ_ПланДоставки.Рейс,
	               |	ЕСТЬNULL(ПТЛ_ЖурналУчетаВъездаВыездаАМ.Ссылка,Значение(Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПустаяСсылка)) КАК ЖурналУчета
	               |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ КАК ПТЛ_ЖурналУчетаВъездаВыездаАМ
	               |		ПО ПТЛ_ПланДоставки.ПланДоставки = ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПланДоставки
	               |			И ПТЛ_ПланДоставки.Рейс = ПТЛ_ЖурналУчетаВъездаВыездаАМ.Рейс
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.%Задание% = &Задание
	               |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";   
				   
	Если ТипЗнч(Задание) = Тип("ДокументСсылка.ПТЛ_ЗаданиеНаПеревозку") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Задание%", "ЗаданиеНаПеревозку");				   
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Задание%", "ЗаданиеНаПодбор");	
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("Задание", Задание);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ЖурналУчета;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьАдресДоставкиСтрокой(Грузополучатель, КомментарийАдреса) Экспорт
	
	Результат = "";
	КомментарийАдреса = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "                                       
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.*
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Грузополучатель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Если ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки);
	Иначе
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
	КонецЕсли;
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		СтрокаТаблицыДоставки = ТаблицаЗапроса[0];
		Результат = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(СтрокаТаблицыДоставки);
		КомментарийАдреса = СтрокаТаблицыДоставки.Комментарий;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
Процедура ПроверимНаличиеДублейПоДокументуПретензии(Источник, Отказ, РежимПроведения) Экспорт

	//Возврат;
	
	Если Источник.ОбменДанными.Загрузка  Тогда
		возврат;
	КонецЕсли;		
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаДолга") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
			ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
			Возврат;		
		КонецЕсли; 
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	КорректировкаДолга.Ссылка
					   |ИЗ
					   |	Документ.КорректировкаДолга КАК КорректировкаДолга
					   |ГДЕ
					   |	КорректировкаДолга.ДокументОснование = &ДокументОснование
					   |	И НЕ КорректировкаДолга.Ссылка = &Ссылка
					   |	И КорректировкаДолга.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("ДокументОснование"	, Источник.ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка"				, Источник.Ссылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		мОтказ = НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АП_Администратор"));
		
		Если Результат.Следующий() Тогда		
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.ДокументОснование) + " уже введен документ: " + СокрЛП(Результат.Ссылка), мОтказ);		
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ПР_Претензия)
			ИЛИ НЕ ТипЗнч(Источник.ПР_Претензия) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
			Возврат;		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	КорректировкаРеализации.Ссылка
					   |ИЗ
					   |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
					   |ГДЕ
					   |	НЕ КорректировкаРеализации.Ссылка = &Ссылка
					   |	И КорректировкаРеализации.ПР_Претензия = &ДокументОснование
					   |	И КорректировкаРеализации.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("ДокументОснование"	, Источник.ПР_Претензия);
		Запрос.УстановитьПараметр("Ссылка"				, Источник.Ссылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		мОтказ = НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АП_Администратор"));
		
		Если Результат.Следующий() Тогда		
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.ПР_Претензия) + " уже введен документ: " + СокрЛП(Результат.Ссылка), мОтказ);		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаЗаписейРегистров") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
			ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
			Возврат;		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	КорректировкаЗаписейРегистров.Ссылка
					   |ИЗ
					   |	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
					   |ГДЕ
					   |	НЕ КорректировкаЗаписейРегистров.Ссылка = &Ссылка
					   |	И КорректировкаЗаписейРегистров.ПометкаУдаления = ЛОЖЬ
					   |	И КорректировкаЗаписейРегистров.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("ДокументОснование"	, Источник.ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка"				, Источник.Ссылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		мОтказ = НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АП_Администратор"));
		
		Если Результат.Следующий() Тогда		
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.ДокументОснование) + " уже введен документ: " + СокрЛП(Результат.Ссылка), мОтказ);		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
			ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
			Возврат;		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	ЗаказПокупателяТовары.Ссылка
					   |ИЗ
					   |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
					   |ГДЕ
					   |	НЕ ЗаказПокупателяТовары.Ссылка = &Ссылка
					   |	И ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
					   |	И ЗаказПокупателяТовары.Ссылка.ДокументОснование = &ДокументОснование
					   |	И ЗаказПокупателяТовары.Номенклатура В(&Номенклатура)";
		Запрос.УстановитьПараметр("ДокументОснование"	, Источник.ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка"				, Источник.Ссылка);
		Запрос.УстановитьПараметр("Номенклатура"		, Источник.Товары.ВыгрузитьКолонку("Номенклатура"));
		
		Результат = Запрос.Выполнить().Выбрать();
		
		мОтказ = НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АП_Администратор"));
		
		Если Результат.Следующий() Тогда		
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.ДокументОснование) + " уже введен документ: " + СокрЛП(Результат.Ссылка), мОтказ);		
		КонецЕсли;		
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
			ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
			Возврат;		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	СписаниеТоваровТовары.Ссылка
					   |ИЗ
					   |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
					   |ГДЕ
					   |	НЕ СписаниеТоваровТовары.Ссылка = &Ссылка
					   |	И СписаниеТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
					   |	И СписаниеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
					   |	И СписаниеТоваровТовары.Номенклатура В(&Номенклатура)";
		Запрос.УстановитьПараметр("ДокументОснование"	, Источник.ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка"				, Источник.Ссылка);
		Запрос.УстановитьПараметр("Номенклатура"		, Источник.Товары.ВыгрузитьКолонку("Номенклатура"));
		
		Результат = Запрос.Выполнить().Выбрать();
		
		мОтказ = НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АП_Администратор"));
		
		Если Результат.Следующий() Тогда		
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.ДокументОснование) + " уже введен документ: " + СокрЛП(Результат.Ссылка), мОтказ);		
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
			ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
			Возврат;		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	ПеремещениеТоваровТовары.Ссылка
					   |ИЗ
					   |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
					   |ГДЕ
					   |	НЕ ПеремещениеТоваровТовары.Ссылка = &Ссылка
					   |	И ПеремещениеТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
					   |	И ПеремещениеТоваровТовары.Номенклатура В(&Номенклатура)
					   |	И ПеремещениеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("ДокументОснование"	, Источник.ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка"				, Источник.Ссылка);
		Запрос.УстановитьПараметр("Номенклатура"		, Источник.Товары.ВыгрузитьКолонку("Номенклатура"));
		
		Результат = Запрос.Выполнить().Выбрать();
		
		мОтказ = НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АП_Администратор"));
		
		Если Результат.Следующий() Тогда		
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.ДокументОснование) + " уже введен документ: " + СокрЛП(Результат.Ссылка), мОтказ);		
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПроверкаНаДубльВключенияЗаданияВПланДоставки(Задание, ТекПлан) Экспорт
	
	ПланДоставки = Документы.ПТЛ_ПланДоставки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки
	               |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.%Задание% = &Задание
	               |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ
				   |	И Не ПТЛ_ПланДоставки.ПланДоставки = &Ссылка";
				   
	Если ТипЗнч(Задание) = Тип("ДокументСсылка.ПТЛ_ЗаданиеНаПеревозку") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Задание%", "ЗаданиеНаПеревозку");				   
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Задание%", "ЗаданиеНаПодбор");	
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("Задание", Задание);
	Запрос.УстановитьПараметр("Ссылка", ТекПлан);
		
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ПланДоставки = Результат.ПланДоставки;
	КонецЕсли;
	
	Возврат ПланДоставки;
	
КонецФункции

Процедура ПроверкаНаВозможностьОтраженияДокументаВБУУчете(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		возврат;
	КонецЕсли;	
	
	Если Источник.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОтражатьВБухгалтерскомУчете Тогда
					
		Если //Не РольДоступна("ПолныеПрава") 
			НЕ РольДоступна("АП_Администратор")
			И Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("У вас нет прав изменять/создавать документ отраженный по БУ учету", Отказ);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПрефиксОтделения(Источник, Префикс) Экспорт

	ДобавитьНоликВКонец = Ложь;
	Если Префикс = "0" Тогда
	
		Префикс = "";
		ДобавитьНоликВКонец = Истина;
	
	КонецЕсли; 
		
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.КомплектацияНоменклатуры") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеТоваров")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ОприходованиеТоваров") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладе") Тогда
	
		 Префикс = Префикс + СокрЛП(Источник.КП_Отделение.Префикс);
		 
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
	
		 Префикс = Префикс + СокрЛП(Источник.КП_Отделение.Префикс);
		 
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПТЛ_ЗаданиеНаПеревозку") Тогда
	
		 Префикс = Префикс + СокрЛП(Источник.ЗаданиеНаПодбор.КП_Отделение.Префикс);
		 
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннийЗаказ") Тогда
	
		 Префикс = Префикс + СокрЛП(Источник.КП_Отделение.Префикс);
		 
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		//++ Spl_Апроф 10.02.2015 (k.russkih@a-prof.ru)
		Если ЗначениеЗаполнено(Источник.СП_ЗаданиеНаПодбор) Тогда
			 Префикс = Префикс + СокрЛП(Источник.СП_ЗаданиеНаПодбор.КП_Отделение.Префикс);		
		Иначе	
		     Префикс = Префикс + СокрЛП(Источник.КП_Отделение.Префикс);
		КонецЕсли; 
		 
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если Источник.ДокументыОснования.Количество() > 0 Тогда
			
			Если ТипЗнч(Источник.ДокументыОснования[0].ДокументОснование) = тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				//++ Spl_Апроф 10.02.2015 (k.russkih@a-prof.ru)
				Если ЗначениеЗаполнено(Источник.ДокументыОснования[0].ДокументОснование.СП_ЗаданиеНаПодбор) Тогда
					Префикс = Префикс + СокрЛП(Источник.ДокументыОснования[0].ДокументОснование.СП_ЗаданиеНаПодбор.КП_Отделение.Префикс);
				Иначе
					Префикс = Префикс + СокрЛП(Источник.ДокументыОснования[0].ДокументОснование.КП_Отделение.Префикс);
				КонецЕсли;
			
			КонецЕсли; 
					
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда	
		
		Если НЕ ЗначениеЗаполнено(Источник.СП_ЗаданиеНаПодбор) Тогда
			Префикс = Префикс + СокрЛП(Источник.КП_Отделение.Префикс);
		Иначе	
			Префикс = Префикс + СокрЛП(Источник.СП_ЗаданиеНаПодбор.КП_Отделение.Префикс);		
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда	
		
		//++ Spl_Апроф 10.02.2015 (k.russkih@a-prof.ru)
		Если НЕ ЗначениеЗаполнено(Источник.СП_ЗаданиеНаПодбор) Тогда
			Префикс = Префикс + СокрЛП(Источник.КП_Отделение.Префикс);
		Иначе	
			Префикс = Префикс + СокрЛП(Источник.СП_ЗаданиеНаПодбор.КП_Отделение.Префикс);		
		КонецЕсли;
		
	КонецЕсли; 
	
	Префикс = Префикс + ?(ДобавитьНоликВКонец, "0", "");

КонецПроцедуры

// Для закрытия резервов по задания на подбор
Процедура ЗакрытиеРезервов(мРежимЗаписи, ЗаданиеНаПодбор, ДатаФормированияДокументов, СтатусДокумента, Отказ = Ложь) Экспорт

	//++ Spl_Апроф 02.03.2015 (k.russkih@a-prof.ru) Используем новую процедуру Код удалять не будем, мало ли пригодится
	текЗадание = ЗаданиеНаПодбор.ПолучитьОбъект();
	текЗадание.ДополнительныеСвойства.Вставить("мВыполнитьЗакрытиеРезервов", Истина);
	текЗадание.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
	текЗадание.ДатаФормированияДокументов = ?(текЗадание.ДатаФормированияДокументов < ДатаФормированияДокументов, ДатаФормированияДокументов, текЗадание.ДатаФормированияДокументов);
	текЗадание.НоваяПроцедураЗакрытияРезервов(ЗаданиеНаПодбор, Отказ, мРежимЗаписи,Истина);
	
	Попытка	
		//текЗадание.Записать(?(текЗадание.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		текЗадание.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());	
	КонецПопытки;
	
	Возврат;
	
	Заказ 						= ЗаданиеНаПодбор.Заказ;
	Ссылка 						= ЗаданиеНаПодбор;
	
	Если НЕ ЗначениеЗаполнено(Заказ) И Не ДатаФормированияДокументов = Дата(1,1,1) Тогда
	    Возврат;	
	КонецЕсли; 	
	
	Если СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы И мРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			НайтиДокумент = Документы.ЗакрытиеЗаказовПокупателей.НайтиПоРеквизиту("СП_ЗаданиеНаПодбор", Ссылка);
			
			Если ЗначениеЗаполнено(НайтиДокумент) Тогда
			     ТекДокумент = НайтиДокумент.ПолучитьОбъект();
			Иначе	
			     ТекДокумент = Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();
			КонецЕсли; 			
			
		ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			
			НайтиДокумент = Документы.ЗакрытиеВнутреннихЗаказов.НайтиПоРеквизиту("СП_ЗаданиеНаПодбор", Ссылка);
			
			Если ЗначениеЗаполнено(НайтиДокумент) Тогда
			     ТекДокумент = НайтиДокумент.ПолучитьОбъект();
			Иначе	
			     ТекДокумент = Документы.ЗакрытиеВнутреннихЗаказов.СоздатьДокумент();
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ТекДокумент.ПометкаУдаления Тогда		
			//ТекДокумент.УстановитьПометкуУдаления(Ложь);		
			ТекДокумент.ПометкаУдаления = Ложь;
		КонецЕсли; 
		
		ТекДокумент.Дата = ДатаФормированияДокументов - 1;
		ТекДокумент.СП_ЗаданиеНаПодбор = Ссылка;
		ТекДокумент.Заказы.Очистить();
		ТекДокумент.Заполнить(Заказ);
		
		Попытка		
			ТекДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			ТекДокумент.Записать(РежимЗаписиДокумента.Проведение);		
			ТекДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
				
	КонецЕсли;

КонецПроцедуры

Процедура ВернутьРезервыПоЗаданиюНаПодбор(ЗаданиеНаПодбор) Экспорт

	//++ Spl_Апроф 03.03.2015 (k.russkih@a-prof.ru)
	Возврат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	СП_ДокументыПоЗаданиюНаПодбор.Ссылка
	               |ИЗ
	               |	КритерийОтбора.СП_ДокументыПоЗаданиюНаПодбор(&ЗаданиеНаПодбор) КАК СП_ДокументыПоЗаданиюНаПодбор
	               |ГДЕ
	               |	(СП_ДокументыПоЗаданиюНаПодбор.Ссылка ССЫЛКА Документ.ЗакрытиеЗаказовПокупателей
	               |			ИЛИ СП_ДокументыПоЗаданиюНаПодбор.Ссылка ССЫЛКА Документ.ЗакрытиеВнутреннихЗаказов)
	               |	И СП_ДокументыПоЗаданиюНаПодбор.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СП_ДокументыПоЗаданиюНаПодбор.Ссылка.Дата УБЫВ";
				   
	Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка.ПометкаУдаления = Истина Тогда		
			Продолжить;		
		КонецЕсли; 
		
		ТекЗакрытие = Выборка.Ссылка.ПолучитьОбъект();
		Попытка			
			ТекЗакрытие.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			ТекЗакрытие.УстановитьПометкуУдаления(Истина);		
			ТекЗакрытие.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());		
		КонецПопытки;		
	
	КонецЦикла; 

КонецПроцедуры

Процедура ОбновимСтатусЗаданияНаПодбор(ЗаданиеНаПодбор) Экспорт

	текЗадание = ЗаданиеНаПодбор.ПолучитьОбъект();
	
	ВрОтказ = Ложь;
	Если Не текЗадание.Склад.НСИ_ПодключенКSolvo Тогда
		текЗадание.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен;	
		
		текЗадание.ОбновитьЗадания(ВрОтказ,Ложь); //для того чтобы поставить что задания на перевозку выполняется
		
		Если Не ВрОтказ Тогда
			текЗадание.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			текЗадание.ДополнительныеСвойства.Вставить("МенятьСтатус", Ложь);
			текЗадание.Записать(РежимЗаписиДокумента.Запись);
			
			текЗадание.ОбновитьЗадания(ВрОтказ,Ложь); //заполняем факт в задании на перевозку
		Иначе
			Удачно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	текЗадание = Неопределено;
	
КонецПроцедуры

Функция ПолучимПлановуюСебестоимостьНоменклатуры(мДата, Номенклатура, ХарактеристикаНоменклатуры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ПлановаяСебестоимостьНоменклатурыСрезПоследних.Сумма) КАК Сумма,
	               |	ПлановаяСебестоимостьНоменклатурыСрезПоследних.Номенклатура,
	               |	ПлановаяСебестоимостьНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ПлановаяСебестоимостьНоменклатуры.СрезПоследних(
	               |			&Дата,
	               |			Номенклатура = &Номенклатура
	               |				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ПлановаяСебестоимостьНоменклатурыСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПлановаяСебестоимостьНоменклатурыСрезПоследних.Номенклатура,
	               |	ПлановаяСебестоимостьНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры";
	Запрос.УстановитьПараметр("Дата"						, мДата);
	Запрос.УстановитьПараметр("Номенклатура"				, Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры"	, ХарактеристикаНоменклатуры);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Возврат Результат.Сумма;
		
		Прервать;
		
	КонецЦикла; 
	
	Возврат 0;

КонецФункции // ()
 
Функция МожноИзменитьСтатусДокументаНаСледующийПоПорядку(мДокументОбъект, мТекСтатусДокумента, мНовыйСтатусДокумента) Экспорт

	СтатусыДокументаСписок = Новый Массив;
	СтатусыДокументаСписок.Добавить(мТекСтатусДокумента);
	СтатусыДокументаСписок.Добавить(мНовыйСтатусДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АП_СтатусыИРолиПользователей.СтатусДокумента,
	               |	АП_СтатусыИРолиПользователей.Порядок КАК Порядок
	               |ИЗ
	               |	РегистрСведений.АП_СтатусыИРолиПользователей КАК АП_СтатусыИРолиПользователей
	               |ГДЕ
	               |	АП_СтатусыИРолиПользователей.Объект = &Объект
	               |	И АП_СтатусыИРолиПользователей.СтатусДокумента В (&СтатусыДокументаСписок)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
				   
	Запрос.УстановитьПараметр("Объект", СокрЛП(мДокументОбъект.Метаданные().Имя));
	Запрос.УстановитьПараметр("СтатусыДокументаСписок", СтатусыДокументаСписок);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		//Если статус текущий равен статусу с меньшим порядком, значит можно менять статус документа
		Если Результат.СтатусДокумента = мТекСтатусДокумента Тогда		
			Возврат Истина;		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Ложь;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	АП_СтатусыИРолиПользователей.СтатусДокумента,
	//			   |	АП_СтатусыИРолиПользователей.Порядок КАК Порядок
	//			   |ИЗ
	//			   |	РегистрСведений.АП_СтатусыИРолиПользователей КАК АП_СтатусыИРолиПользователей
	//			   |ГДЕ
	//			   |	АП_СтатусыИРолиПользователей.Объект = &Объект
	//			   |	И АП_СтатусыИРолиПользователей.Порядок > &Порядок
	//			   |
	//			   |УПОРЯДОЧИТЬ ПО
	//			   |	Порядок";
	//			   
	//Запрос.УстановитьПараметр("Объект", СокрЛП(мДокументОбъект.Метаданные().Имя));
	//Запрос.УстановитьПараметр("Порядок", ТекПорядок);
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда	
	//	Возврат Истина;	
	//КонецЕсли;
	//
	//Возврат Ложь;	
	
КонецФункции // ()

Процедура АП_ПроверитьВозможностьОтменыПроведенияДокументовПоПретензии(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		возврат;
	КонецЕсли;	
	
	Если Источник.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОтражатьВБухгалтерскомУчете Тогда
		
		ВведенНаОснованиеПретензии = Ложь;
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаДолга") Тогда
			
			Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
				ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
				Возврат;		
			КонецЕсли; 
			
			ВведенНаОснованиеПретензии = Истина; 
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
			
			Если Не ЗначениеЗаполнено(Источник.ПР_Претензия)
				ИЛИ НЕ ТипЗнч(Источник.ПР_Претензия) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
				Возврат;		
			КонецЕсли;
			
			ВведенНаОснованиеПретензии = Истина;
			
		//ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаЗаписейРегистров") Тогда
		//	
		//	Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
		//		ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
		//		Возврат;		
		//	КонецЕсли;
		//	
		//	ВведенНаОснованиеПретензии = Истина;
			
		//ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		//	
		//	Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
		//		ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
		//		Возврат;		
		//	КонецЕсли;
		//	
		//	ВведенНаОснованиеПретензии = Истина;		
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
			
			Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
				ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
				Возврат;		
			КонецЕсли;
			
			ВведенНаОснованиеПретензии = Истина;	
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			
			Если Не ЗначениеЗаполнено(Источник.ДокументОснование)
				ИЛИ НЕ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") Тогда		
				Возврат;		
			КонецЕсли;
			
			ВведенНаОснованиеПретензии = Истина;
			
		КонецЕсли;
		
		Если ВведенНаОснованиеПретензии Тогда
			
			Если НЕ РольДоступна("АП_Администратор")
				И Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("У вас нет прав отменять проведеный документ, который отражен по БУ учету", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура АП_ВыполнитьОбменМобильнаяТорговля() Экспорт
	ТекОбработка = Обработки.КП_АвтообменМобильнаяТорговля.Создать();
	ТекОбработка.AutoExchange_Chicago();
КонецПроцедуры

Процедура АП_ПровекраПоСтатусуДокументаСолвоПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		возврат;
	КонецЕсли;	
	
	Если Источник.Проведен И НЕ (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
		Возврат;   
	КонецЕсли; 	
	
	Если РольДоступна("АП_Администратор") Тогда	
		 Возврат;	
	КонецЕсли; 
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Источник.СтатусДокумента) Тогда		
			Возврат;		
		КонецЕсли; 
		
		Если Источник.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт ИЛИ Источник.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Источник.СП_СтатусДокумента) Тогда		
			Возврат;		
		КонецЕсли;
		
		Если Источник.СП_СтатусДокумента = Перечисления.СП_СтатусыПоступленияТоваров.Открыто ИЛИ Источник.СП_СтатусДокумента = Перечисления.СП_СтатусыПоступленияТоваров.Отменено Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Источник.СП_СтатусДокумента) Тогда		
			Возврат;		
		КонецЕсли;
		
		Если Источник.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Открыто ИЛИ Источник.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Отменено Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СП_ЗаданиеНаСмену") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Источник.СтатусДокумента) Тогда		
			Возврат;		
		КонецЕсли;
		
		Если Источник.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Открыто ИЛИ Источник.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Отменено Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПР_Претензия") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Источник.СтатусПриходногоОрдера) Тогда		
			Возврат;		
		КонецЕсли;
		
		Если Источник.СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Открыто ИЛИ Источник.СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Отменено Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Источник.ПР_СтатусПриходногоОрдера) Тогда		
			Возврат;		
		КонецЕсли;
		
		Если Источник.ПР_СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Открыто ИЛИ Источник.ПР_СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Отменено Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Источник.СП_СтатусДокумента) Тогда		
			Возврат;		
		КонецЕсли;
		
		Если Источник.СП_СтатусДокумента = Перечисления.СП_СтатусыКомплектацииНоменклатуры.Открыто ИЛИ Источник.СП_СтатусДокумента = Перечисления.СП_СтатусыКомплектацииНоменклатуры.Отменено Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		 КонецЕсли;
		 
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Источник.СП_СтатусТребованияНакладной) Тогда		
			Возврат;		
		КонецЕсли;
		
		Если Источник.СП_СтатусТребованияНакладной = Перечисления.СП_СтатусыТребованияНакладной.Открыт ИЛИ Источник.СП_СтатусТребованияНакладной = Перечисления.СП_СтатусыТребованияНакладной.Отменен Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		 КонецЕсли;	
		 
	//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		Если НЕ Источник.ДоступенСтатусДокумента() Тогда		
			Возврат;		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Источник.СП_СтатусДокумента) Тогда		
			Возврат;		
		КонецЕсли; 
		
		Если Источник.СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Открыт ИЛИ Источник.СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Отменен Тогда
			
		Иначе	
			 ОбщегоНазначения.СообщитьОбОшибке("Статус отличный от открыт / отменен, можно присваивать только для проведенных документов");
			 Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
 
//++ Spl_Апроф 05.02.2015 (k.russkih@a-prof.ru)
Функция Определим_АП_ПечатныеФормыДокументов(мОбработкаОбъект, мСсылкаНаОбъект) Экспорт
	
	мОбработкиИмя = СтрЗаменить(мОбработкаОбъект, "ВнешняяОбработкаОбъект.", "");
	мОбработкиИмя = СтрЗаменить(мОбработкиИмя, "ОбработкаОбъект.", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АП_ПечатныеФормыДокументов.Ссылка
	               |ИЗ
	               |	Справочник.АП_ПечатныеФормыДокументов КАК АП_ПечатныеФормыДокументов
	               |ГДЕ
	               |	АП_ПечатныеФормыДокументов.ВидДокумента = &ВидДокумента
	               |	И АП_ПечатныеФормыДокументов.ИмяОбработкиОбъекта = &ИмяОбработкиОбъекта
	               |	И АП_ПечатныеФормыДокументов.ПометкаУдаления = ЛОЖЬ";
				   
	Запрос.УстановитьПараметр("ВидДокумента", СокрЛП(мСсылкаНаОбъект.Метаданные().Имя));
	Запрос.УстановитьПараметр("ИмяОбработкиОбъекта", СокрЛП(мОбработкиИмя));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	АП_ПечатныеФормыДокументов = Справочники.АП_ПечатныеФормыДокументов.ПустаяСсылка();
	
	Если Результат.Следующий() Тогда	
		АП_ПечатныеФормыДокументов = Результат.Ссылка;
	КонецЕсли;
	
	Возврат АП_ПечатныеФормыДокументов;

КонецФункции

Функция ВернутьНакладнуюПоЗаказу(Заказ) Экспорт
	Запрос = Новый Запрос;
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		возврат Неопределено;
	КонецЕсли;	
	НепонятныйЗаказ = Ложь;
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ИмяДок = "ЗаказПокупателя";
		ИмяСклада = "СкладГруппа";
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ИмяДок = "ВнутреннийЗаказ";
		ИмяСклада = "СП_Склад";
	Иначе
		// когда такое может быть ну да ладно
		ИмяДок = Заказ.Метаданные().Имя;
		ИмяСклада = "";
		НепонятныйЗаказ = Истина;
	КонецЕсли;
	
	//конец изменений 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокЗаказа.Ссылка КАК Заказ,
	               |	"+?(НепонятныйЗаказ,"Значение(Справочник.Склады.ПустаяСсылка)","ДокЗаказа.")+ИмяСклада+" КАК Склад
	               |ПОМЕСТИТЬ ДокЗаказ
	               |ИЗ
	               |	Документ."+ИмяДок+" КАК ДокЗаказа
	               |ГДЕ
	               |	ДокЗаказа.Ссылка = &Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	ДокЗаказ КАК ДокЗаказ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ДокЗаказ.Заказ = РеализацияТоваровУслуг.Сделка
	               |			И (РеализацияТоваровУслуг.Проведен)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТребованиеНакладная.Ссылка
	               |ИЗ
	               |	ДокЗаказ КАК ДокЗаказ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
	               |		ПО ДокЗаказ.Заказ = ТребованиеНакладная.ДокументОснование
				   |		И (ТребованиеНакладная.Проведен)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	ДокЗаказ КАК ДокЗаказ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |		ПО ДокЗаказ.Заказ = ПеремещениеТоваров.ВнутреннийЗаказ
	               |			И ДокЗаказ.Склад = ПеремещениеТоваров.СкладОтправитель
				   |			И (ПеремещениеТоваров.Проведен)";
				   
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

//++ Spl_Апроф 03.03.2015 (k.russkih@a-prof.ru)
Процедура АП_ПроверкаДублейСформированныхДокументовПоЗаданияНаПодбор(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		возврат;
	КонецЕсли;	
	
	Если Отказ 
		//{16.03.2015 Островерхий заявка №37714 
		ИЛИ Источник.ОбменДанными.Загрузка 
		ИЛИ ПараметрыСеанса.ПроведениеДокументов 
		//16.03.2015 Островерхий}  
		Тогда
		Возврат;				
	КонецЕсли; 
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		//начало изменений
		Если Не ЗначениеЗаполнено(Источник.СП_ЗаданиеНаПодбор) Тогда
			возврат;
		КонецЕсли;	
		//конец изменений
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		               |ГДЕ
		               |	ПеремещениеТоваров.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
		               |	И НЕ ПеремещениеТоваров.Ссылка = &Ссылка
		               |	И ПеремещениеТоваров.СкладОтправитель = &СкладОтправитель
		               |	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель";
		Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор", Источник.СП_ЗаданиеНаПодбор);
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("СкладОтправитель", Источник.СкладОтправитель);
		Запрос.УстановитьПараметр("СкладПолучатель", Источник.СкладПолучатель);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.СП_ЗаданиеНаПодбор) + ", формирование документа не возможно, т.к. уже введен документ: " + СокрЛП(Результат.Ссылка), Отказ);
		
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
	
		Если Не ЗначениеЗаполнено(Источник.СП_ЗаданиеНаПодбор) Тогда
			возврат;
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РеализацияТоваровУслуг.Ссылка
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |ГДЕ
		               |	РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
		               |	И НЕ РеализацияТоваровУслуг.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор", Источник.СП_ЗаданиеНаПодбор);
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.СП_ЗаданиеНаПодбор) + ", формирование документа не возможно, т.к. уже введен документ: " + СокрЛП(Результат.Ссылка), Отказ);
		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.СП_ЗаданиеНаПодбор) Тогда
			возврат;
		КонецЕсли;	
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТребованиеНакладная.Ссылка
		               |ИЗ
		               |	Документ.ТребованиеНакладная КАК ТребованиеНакладная
		               |ГДЕ
		               |	ТребованиеНакладная.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
		               |	И НЕ ТребованиеНакладная.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор", Источник.СП_ЗаданиеНаПодбор);
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("По документу: " + СокрЛП(Источник.СП_ЗаданиеНаПодбор) + ", формирование документа не возможно, т.к. уже введен документ: " + СокрЛП(Результат.Ссылка), Отказ);
		
		КонецЕсли;	
		
	КонецЕсли; 
	
КонецПроцедуры

//++ Spl_Апроф 05.03.2015 (k.russkih@a-prof.ru)
Процедура ПКК_ПроверимВозможностьФормированияНакладнойПриЗакрытомАктеСверки(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;				
	КонецЕсли; 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		возврат;
	КонецЕсли;	
	
	//начало изменений
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		возврат;
	КонецЕсли;	
	//конец изменений
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
		Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
			И Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			КорректировкаКорректировочногоСчетаФактуры = Истина;
		КонецЕсли;
	
		Если Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации, Ложь);
			Иначе
				ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации, Истина);
			КонецЕсли;	
		Иначе
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации, Ложь);
		КонецЕсли;
		
		мДокументРегистратор = ИсправляемыйДокументРеализации;
		
		Если НЕ ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда		
			Возврат;		
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПКК_ЗакрытыеАктыСверки.Регистратор
		               |ИЗ
		               |	РегистрСведений.ПКК_ЗакрытыеАктыСверки КАК ПКК_ЗакрытыеАктыСверки
		               |ГДЕ
		               |	ПКК_ЗакрытыеАктыСверки.ДокументРегистратор = &ДокументРегистратор";
		Запрос.УстановитьПараметр("ДокументРегистратор", мДокументРегистратор);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Формирование документа не возможно, т.к. по исправляемому документу '" + СокрЛП(ИсправляемыйДокументРеализации) + "' согласована сверка: " + СокрЛП(Результат.Регистратор), Отказ);
		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПРГ_СторноНакладной") Тогда
		
		ИсправляемыйДокументРеализации = Источник.ДокументОснование;
		
		Если НЕ ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда		
			Возврат;		
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПКК_ЗакрытыеАктыСверки.Регистратор
		               |ИЗ
		               |	РегистрСведений.ПКК_ЗакрытыеАктыСверки КАК ПКК_ЗакрытыеАктыСверки
		               |ГДЕ
		               |	ПКК_ЗакрытыеАктыСверки.ДокументРегистратор = &ДокументРегистратор";
		Запрос.УстановитьПараметр("ДокументРегистратор", ИсправляемыйДокументРеализации);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Формирование документа не возможно, т.к. по исправляемому документу '" + СокрЛП(ИсправляемыйДокументРеализации) + "' согласована сверка: " + СокрЛП(Результат.Регистратор), Отказ);
		
		КонецЕсли;

	КонецЕсли; 
	

КонецПроцедуры


//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
Процедура ОбновитьСтатусЗаказаОтгрузка(Заказ, СтатусЗаказа
	,ТекСтатусЗаданияНаПодбор,ТекСтатусЗаданияНаПеревозку,
	НовСтатусЗаданияНаПодбор,НовСтатусЗаданияНаПеревозку,НовыйСтатусЗаказа=Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		возврат;
	КонецЕсли;	
	
	
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя")
		и ТипЗнч(Заказ) <> Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		возврат;
	КонецЕсли;	
	
	НужноМенятьСтатусЗаказа = Ложь;
	
	СтруктИзмРеквизитов = Новый Структура;
	
	//{08.06.2015 Островерхий заявка №40427 
	//начало изменений Ожиганов 10.07.2015 косячок с внутренними заказами
	//статус принят на склад не проставлялся из-затого что статусы совпадали
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если НовыйСтатусЗаказа = Неопределено  Тогда
			СтруктИзмРеквизитов.Вставить("АП_СтатусЗаказа",Перечисления.АП_СтатусыЗаказов.Отгружен);
			НужноМенятьСтатусЗаказа = Истина;
		ИначеЕсли НЕ НовыйСтатусЗаказа = СтатусЗаказа	Тогда
			СтруктИзмРеквизитов.Вставить("АП_СтатусЗаказа",НовыйСтатусЗаказа);
			НужноМенятьСтатусЗаказа = Истина;
		КонецЕслИ
	//Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ")
	//	И НЕ НовыйСтатусЗаказа = Неопределено 
	//	И НЕ НовыйСтатусЗаказа = СтатусЗаказа
	//	Тогда
	//	СтруктИзмРеквизитов.Вставить("АП_СтатусЗаказа",НовыйСтатусЗаказа);
	//	НужноМенятьСтатусЗаказа = Истина;
	//конец изменений 	
	//08.06.2015 Островерхий} 
	ИначеЕсли СтатусЗаказа <> Перечисления.АП_СтатусыЗаказов.Отгружен Тогда
		СтруктИзмРеквизитов.Вставить("АП_СтатусЗаказа",Перечисления.АП_СтатусыЗаказов.Отгружен);
		НужноМенятьСтатусЗаказа = Истина;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НовСтатусЗаданияНаПодбор) 
		и ТекСтатусЗаданияНаПодбор <>  НовСтатусЗаданияНаПодбор Тогда
		СтруктИзмРеквизитов.Вставить("АП_СтатусЗаданияНаПодбор",НовСтатусЗаданияНаПодбор);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НовСтатусЗаданияНаПеревозку) 
		и ТекСтатусЗаданияНаПеревозку <>  НовСтатусЗаданияНаПеревозку Тогда
		СтруктИзмРеквизитов.Вставить("АП_СтатусЗаданияНаПеревозку",НовСтатусЗаданияНаПеревозку);
	КонецЕсли;	
	
	Отказ =  Ложь;
	Если НужноМенятьСтатусЗаказа или СтруктИзмРеквизитов.Количество() > 0  Тогда
		ОбъектЗаказ = Заказ.ПолучитьОбъект();
		Если СтруктИзмРеквизитов.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ОбъектЗаказ,СтруктИзмРеквизитов);
		КонецЕсли;	
		 
		Если  НужноМенятьСтатусЗаказа Тогда
			 Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			 	ОбъектЗаказ.ЗаписатьИзменениеСтатусов(Отказ) 
			 Иначе	
			 	ОбъектЗаказ.ЗаписатьИзменениеСтатуаЗаказа(Отказ);
			 КонецЕсли;	
			 Если Отказ Тогда
				 вызватьисключение "Ошибка при изменении статуса заказа !!! "; 
			 КонецЕсли; 
		 КонецЕсли;
		 
		 ОбъектЗаказ.ДополнительныеСвойства.Вставить("ПРГПростоЗаписать",Истина);
		 ОбъектЗаказ.Записать();
		 ОбъектЗаказ.ДополнительныеСвойства.Удалить("ПРГПростоЗаписать");
		 
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьЗаданиеНаПеревозкуСоСтатусом(ЗаданиеНаПодбор)
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ПТЛ_ЗаданиеНаПеревозку.Ссылка,
	                      |	ПТЛ_ЗаданиеНаПеревозку.СтатусДокумента
	                      |ИЗ
	                      |	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	                      |ГДЕ
	                      |	ПТЛ_ЗаданиеНаПеревозку.ЗаданиеНаПодбор = &ЗаданиеНаПодбор");
						  
	Результат = Новый Структура("ЗадНаПеревозку,СтатусДокумента",Неопределено,Неопределено);
	Запрос.УстановитьПараметр("ЗаданиеНаПодбор",ЗаданиеНаПодбор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ЗадНаПеревозку     = Выборка.Ссылка;
		Результат.СтатусДокумента    = Выборка.СтатусДокумента;
	КонецЕсли;	
	
	возврат Результат;
	
КонецФункции	

Процедура ОбновитьСтатусыЗаданийОтгрузка(ЗаданиеНаПодбор,
				ДатаНакладной,
				ТекСтатусЗадПодбор,ТекДатаФормированияДокументов,
				НСИ_ПодключенКSolvo,
				НовСтатусЗадПодбор,НовСтатусЗадПерев,ДопРеквизитыЗадПодбор) Экспорт 
				
				
	Если Не ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
		возврат;
	Конецесли;	
	
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		возврат;
	КонецЕсли;		

	
	МеняемСтатусЗадПодбор = ложь;
	Если НСИ_ПодключенКSolvo Тогда
		Если ТекСтатусЗадПодбор = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран Тогда
			НовСтатусЗадПодбор  = Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы;
			МеняемСтатусЗадПодбор =  Истина;
		Иначе
			НовСтатусЗадПодбор = ТекСтатусЗадПодбор;
		КонецЕсли;	
	Иначе
		Если ТекСтатусЗадПодбор = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран Тогда
			НовСтатусЗадПодбор  = Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен;
			МеняемСтатусЗадПодбор =  Истина;
		Иначе
			НовСтатусЗадПодбор = ТекСтатусЗадПодбор;
		КонецЕсли;	
	КонецЕсли;
	
	НужноМенятьРеквизиты = ?(ТипЗнч(ДопРеквизитыЗадПодбор)= Тип("Структура"),Истина,Ложь);
	
	НужноЗакрыватьРезервы = Ложь;	
	НоваяДатаФормированияДокументов = ДатаНакладной;
	Если НужноМенятьРеквизиты и ДопРеквизитыЗадПодбор.Свойство("ДатаФормированияДокументов") Тогда
		НоваяДатаФормированияДокументов = ДопРеквизитыЗадПодбор.ДатаФормированияДокументов;
		НоваяДатаФормированияДокументов = ?(НоваяДатаФормированияДокументов = Неопределено или НоваяДатаФормированияДокументов = '00010101',ДатаНакладной,НоваяДатаФормированияДокументов);
		НужноЗакрыватьРезервы = Истина;
	ИначеЕсли ТекДатаФормированияДокументов = '00010101'  Тогда
		НужноЗакрыватьРезервы = Истина;
	КонецЕсли;	
		
	
	
	Отказ = ЛожЬ;
	Если МеняемСтатусЗадПодбор 
		или НужноМенятьРеквизиты
		или НужноЗакрыватьРезервы
	Тогда
		 ОбъектЗадПодбор = ЗаданиеНаПодбор.ПолучитьОбъект();
		 Если МеняемСтатусЗадПодбор Тогда
			 ОбъектЗадПодбор.СтатусДокумента = НовСтатусЗадПодбор;   
			 ОбъектЗадПодбор.ЗаписатьИзменениеСтатусов(Отказ);
			 Если  Отказ Тогда
				 ВызватьИсключение "Не удалось изменить статус задания на подбор !!!"+ОбъектЗадПодбор;
			 КонецЕсли;	 
		 КонецЕсли;	 
		 
		 Если НужноМенятьРеквизиты Тогда
			 Для Каждого ТекЭлем Из ДопРеквизитыЗадПодбор Цикл
				 Если ОбъектЗадПодбор[ТекЭлем.Ключ] <> ТекЭлем.Значение Тогда
					 ОбъектЗадПодбор[ТекЭлем.Ключ] = ТекЭлем.Значение;
				 КонецЕсли; 
			 КонецЦикла; 
		 КонецЕсли; 
		 
		 Если НужноЗакрыватьРезервы  Тогда
			Если ОбъектЗадПодбор.ДатаФормированияДокументов <> НоваяДатаФормированияДокументов Тогда
				  ОбъектЗадПодбор.ДатаФормированияДокументов = НоваяДатаФормированияДокументов;
			КонецЕсли; 
	  		ОбъектЗадПодбор.НоваяПроцедураЗакрытияРезервов(ОбъектЗадПодбор.Ссылка, Отказ, РежимЗаписиДокумента.Проведение,Истина);
			Если Отказ Тогда
				ВызватьИсключение "Не удалось закрыть резервы по документу " +ОбъектЗадПодбор;
			КонецЕсли;	
		 КонецЕслИ;	
			 
		 ОбъектЗадПодбор.ДополнительныеСвойства.Вставить("ПРГПростоЗаписать",Истина);
		 ОбъектЗадПодбор.Записать();
		 ОбъектЗадПодбор.ДополнительныеСвойства.Удалить("ПРГПростоЗаписать");
	 КонецЕсли;	
	 
	 стЗадНаПеревозку = ПолучитьЗаданиеНаПеревозкуСоСтатусом(ЗаданиеНаПодбор);
	 Если Не ЗначениеЗаполнено(стЗадНаПеревозку.ЗадНаПеревозку) Тогда
		 возврат;
	 КонецЕсли; 
	 
	МенятьСтатусЗадПерев = Ложь;
	Если стЗадНаПеревозку.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВключенаВПлан 
			ИЛИ стЗадНаПеревозку.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВРаботе Тогда
		НовСтатусЗадПерев    = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Выполняется;
		МенятьСтатусЗадПерев = Истина;
	Иначе
		НовСтатусЗадПерев = стЗадНаПеревозку.СтатусДокумента;
	КонецЕсли;	

	Если МенятьСтатусЗадПерев 
		Тогда
		 ОбъектЗадПерев = стЗадНаПеревозку.ЗадНаПеревозку.ПолучитьОбъект();
		 ОбъектЗадПерев.СтатусДокумента = НовСтатусЗадПерев;   
		 ОбъектЗадПерев.ЗаписатьИзменениеСтатусов(Отказ);
		 Если  Отказ Тогда
			 ВызватьИсключение "Не удалось изменить статус задания на перевозку !!!"+ОбъектЗадПерев;
		 КонецЕсли;	
		 ОбъектЗадПерев.ДатаОтгрузкиФакт = ТекущаяДата();
		 ОбъектЗадПерев.ДополнительныеСвойства.Вставить("ПРГПростоЗаписать",Истина);
		 ОбъектЗадПерев.Записать();
		 ОбъектЗадПерев.ДополнительныеСвойства.Удалить("ПРГПростоЗаписать");
	КонецЕслИ;	
	
	 //Сообщить("тута");  
 КонецПроцедуры	
 
Процедура ПРГВернутьРезервыПоЗаданиюНаПодбор(ЗаданиеНаПодбор) Экспорт
	
	
	Если Не ЗначениеЗаполнено(ЗаданиеНаПодбор)  Тогда
		возврат
	 КонецЕслИ;
	 
	ОбъектЗадПодбор = ЗаданиеНаПодбор.ПолучитьОбъект();
	ОбъектЗадПодбор.ПРГВернутьРезервы();
	ОбъектЗадПодбор.ДатаФормированияДокументов = '00010101';
	
	ОбъектЗадПодбор.ДополнительныеСвойства.Вставить("ПРГПростоЗаписать",Истина);
	ОбъектЗадПодбор.Записать();
	ОбъектЗадПодбор.ДополнительныеСвойства.Удалить("ПРГПростоЗаписать");
	 
 КонецПроцедуры	 
//конец изменений 
//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
Процедура ПростоПоменятьСтатусУЗаказа(ЗаказСсылка,СтарСтатус,НовСтатус) Экспорт
	
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ЗаказСсылка) или НовСтатус = Неопределено  Тогда
		возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ЗаказСсылка) <> Тип("ДокументСсылка.ЗаказПокупателя")
		и ТипЗнч(ЗаказСсылка) <> Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		возврат;
	КонецЕсли;	
	
	НужноМенятьСтатусЗаказа = Ложь;
	Если СтарСтатус = НовСтатус Тогда
		возврат;
	Иначе
		НужноМенятьСтатусЗаказа = Истина;
	КонецЕсли;	
	
    Отказ = Ложь;
	Если НужноМенятьСтатусЗаказа   Тогда
		
		ОбъектЗаказ = ЗаказСсылка.ПолучитьОбъект();
		Если  НужноМенятьСтатусЗаказа Тогда
			 ОбъектЗаказ.АП_СтатусЗаказа = НовСтатус;
			 Если ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			 	ОбъектЗаказ.ЗаписатьИзменениеСтатусов(Отказ) 
			 Иначе	
			 	ОбъектЗаказ.ЗаписатьИзменениеСтатуаЗаказа(Отказ);
			 КонецЕсли;	
			 Если Отказ Тогда
				 вызватьисключение "Ошибка при изменении статуса заказа !!! "; 
			 КонецЕсли; 
		 КонецЕсли;
		 
		 ОбъектЗаказ.ДополнительныеСвойства.Вставить("ПРГПростоЗаписать",Истина);
		 ОбъектЗаказ.Записать();
		 ОбъектЗаказ.ДополнительныеСвойства.Удалить("ПРГПростоЗаписать");
		 
	КонецЕсли;	
КонецПроцедуры	
//конец изменений 

Функция ВернутьДатуПроведенияПоВзаиморасчетамПоНовойМетодике() Экспорт

	//{15.10.2015 Островерхий заявка №41003 
	Возврат '20151001';
	//15.10.2015 Островерхий} 

КонецФункции // ВернутьДатуПроведенияПоВзаиморасчетамПоНовойМетодике()

Процедура ЗапуститьПотокВыгрузкиВКубыOLAP(ТаблицаОбъектовВыгрузки,ИндексПотока,НачалоПериода,КонецПериода)Экспорт 
	
	ОписаниеОшибки = "";
	ЛогОбмена="";
	МассивЗаданий = Новый Массив;
	
	ОбработкаОбъект = Обработки.ПРГВыгрузкаВКубыOLAPv2.Создать();
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИндексПотока",ИндексПотока);
	Строки = ТаблицаОбъектовВыгрузки.НайтиСтроки(Отбор);
	
	Для каждого Строка Из Строки Цикл
		
		ИмяВременногоФайла="";

		ОбработкаОбъект.ЗаписьВФайл(Строка.ТекстЗапроса,НачалоПериода,КонецПериода,Строка.ИмяОбъекта,Строка.ПолноеИмяОбъекта,Строка.Каталог,ОписаниеОшибки,ЛогОбмена,Ложь,ИмяВременногоФайла);
		
		Если НЕ ИмяВременногоФайла="" Тогда
		
			//Перместить файл в отдельном потоке
			НаборПараметров = Новый Массив;
			НаборПараметров.Добавить(ИмяВременногоФайла);
			НаборПараметров.Добавить(Строка.Каталог + СокрЛП(Строка.ПолноеИмяОбъекта) + "."+ОбработкаОбъект.СтруктураНастроек.РасширениеФайлов);
			
			// запуск фонового задания
			Задание = ФоновыеЗадания.Выполнить("АП_ОбщегоНазначенияСервер.ПереместитьФайлСервер", НаборПараметров);
			
			// добавляем задание в массив, что бы потом отследить выполнение
			МассивЗаданий.Добавить(Задание);	
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если МассивЗаданий.Количество() > 0 Тогда
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки+" Произошли ошибки при разделении на потоки во время перемещения файлов.";
		КонецПопытки;        
	КонецЕсли;
	
	Если НЕ ОписаниеОшибки = "" Тогда
		
		Попытка
		
			ОбработкаОбъект.СохранитьИОтправитьУведомленияОбшибках(ОписаниеОшибки,ЛогОбмена);
		
		Исключение
		
		КонецПопытки; 
	
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура ПереместитьФайлСервер(ИмяИсточника, ИмяПриемника) Экспорт 

	ПереместитьФайл(ИмяИсточника, ИмяПриемника);

КонецПроцедуры // ПереместитьФайл()
