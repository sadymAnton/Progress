Функция ПолучитьМассивСтатейТЭР(СтруктураШапкиДокумента,ВидСтатьи)
	
	Запрос =  Новый Запрос("ВЫБРАТЬ
	                       |	ПРГ_СтатьиТЭРСрезПоследних.СтатьяЗатрат,
	                       |	ПРГ_СтатьиТЭРСрезПоследних.НеИспользоватьПодразделение
	                       |ИЗ
	                       |	РегистрСведений.ПРГ_СтатьиТЭР.СрезПоследних(
	                       |			&ДатКон,
	                       |			Организация = &Организация
	                       |				И ВидСтатьи = &ВидСтатьи) КАК ПРГ_СтатьиТЭРСрезПоследних
	                       |ГДЕ
	                       |	ПРГ_СтатьиТЭРСрезПоследних.Использование");
						   
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидСтатьи",ВидСтатьи);
	Запрос.УстановитьПараметр("ДатКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
	
	//Массив = Новый Массив;
	возврат Запрос.Выполнить().Выгрузить();
	
	//Массив = Новый ТаблицаЗначений;
	//Массив.Колонки.Добавить("СтатьяЗатрат",Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	//Массив.Колонки.Добавить("СтатьяЗатрат");
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Массив.Добавить(Выборка.СтатьяЗатрат);
	//КонецЦикла;	
	//
	//возврат Массив;
КонецФункции	
 
Функция ПолучитьЗапросПоНезавершенномуПроизводству(СтруктураШапкиДокумента)
	Запрос  = Новый Запрос("ВЫБРАТЬ
	                       |	Незавершенка.Подразделение,
	                       |	Незавершенка.СчетУчета,
	                       |	Незавершенка.СтатьяЗатрат,
	                       |	Незавершенка.НоменклатурнаяГруппа,
	                       |	Незавершенка.Заказ,
	                       |	Незавершенка.Затрата,
	                       |	Незавершенка.ХарактеристикаЗатраты,
	                       |	СУММА(Незавершенка.Количество) КАК Количество,
	                       |	СУММА(Незавершенка.Сумма) КАК Сумма,
	                       |//ДляНалУчета	СУММА(Незавершенка.ПостояннаяРазницаОстаток) КАК ПостояннаяРазница,
	                       |//ДляНалУчета	СУММА(Незавершенка.ВременнаяРазницаОстаток) КАК ВременнаяРазница,
	                       |	Незавершенка.СерияЗатраты,
	                       |	Незавершенка.Организация
	                       |ИЗ
	                       |	(ВЫБРАТЬ
	                       |		НезавершенноеПроизводство.Подразделение КАК Подразделение,
	                       |		НезавершенноеПроизводство.СчетУчета КАК СчетУчета,
	                       |		НезавершенноеПроизводство.СтатьяЗатрат КАК СтатьяЗатрат,
	                       |		НезавершенноеПроизводство.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                       |		НезавершенноеПроизводство.Заказ КАК Заказ,
	                       |		НезавершенноеПроизводство.Затрата КАК Затрата,
	                       |		НезавершенноеПроизводство.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
	                       |		НезавершенноеПроизводство.КоличествоОстаток КАК Количество,
	                       |		НезавершенноеПроизводство.СтоимостьОстаток КАК Сумма,
						   |	//ДляНалУчета	НезавершенноеПроизводство.ПостояннаяРазницаОстаток КАК ПостояннаяРазницаОстаток,
						   |	//ДляНалУчета	НезавершенноеПроизводство.ВременнаяРазницаОстаток КАК ВременнаяРазницаОстаток,
	                       |		НезавершенноеПроизводство.СерияЗатраты КАК СерияЗатраты,
	                       |		НезавершенноеПроизводство.Организация КАК Организация
	                       |	ИЗ
	                       |		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(
	                       |				&ДатаКонца,
	                       |				СтатьяЗатрат В (&МассивЗатрат)
	                       |					И Организация = &Организация) КАК НезавершенноеПроизводство
	                       |	
						   |	) КАК Незавершенка
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	Незавершенка.Подразделение,
	                       |	Незавершенка.Затрата,
	                       |	Незавершенка.Заказ,
	                       |	Незавершенка.НоменклатурнаяГруппа,
	                       |	Незавершенка.СтатьяЗатрат,
	                       |	Незавершенка.СчетУчета,
	                       |	Незавершенка.ХарактеристикаЗатраты,
	                       |	Незавершенка.СерияЗатраты,
	                       |	Незавершенка.Организация");
						   
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						   
  				   
  Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
  Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(СтруктураШапкиДокумента.Дата));
  Запрос.УстановитьПараметр("ДатаКонца",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
  
  возврат Запрос;
КонецФункции	

Функция ПолучитьПостроительЗапросаПОТэрам(СтруктураШапкиДокумента)
  ПЗ = Новый ПостроительЗапроса;
  ТекстЗапроса = "ВЫБРАТЬ
          	   |	Нормы.Газ КАК НормаГаз,
          	   |	Нормы.Электричество КАК НормаЭлектричество,
          	   |	Нормы.Вода КАК НормаВода,
          	   |	Нормы.НоменклатурнаяГруппа,
          	   |	Нормы.Подразделение,
          	   |	СУММА(Нормы.Газ * ОтрабМашиноЧасы.МашиноЧасы) КАК ВсегоГаз,
          	   |	СУММА(Нормы.Электричество * ОтрабМашиноЧасы.МашиноЧасы) КАК ВсегоЭлектричество,
          	   |	СУММА(Нормы.Вода * Нормы.Вода) КАК ВсегоВода,
          	   |	ОтрабМашиноЧасы.МашиноЧасы,
          	   |	Нормы.Организация
          	   |ПОМЕСТИТЬ ТаблНорм
          	   |ИЗ
          	   |	Документ.ПРГ_ФактическиОтработанныеМашиноЧасы.Машиночасы КАК ОтрабМашиноЧасы
          	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_НормыПотребленияПоЛиниям.СрезПоследних(&ДатаКон, Организация = &Организация) КАК Нормы
          	   |		ПО ОтрабМашиноЧасы.Подразделение = Нормы.Подразделение
          	   |			И ОтрабМашиноЧасы.НоменклатурнаяГруппа = Нормы.НоменклатурнаяГруппа
          	   |ГДЕ
          	   |	ОтрабМашиноЧасы.Ссылка.Организация = &Организация
          	   |	И ОтрабМашиноЧасы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
          	   |	И ОтрабМашиноЧасы.Ссылка.Проведен
          	   |{ГДЕ
          	   |	Нормы.Подразделение.*,
          	   |	Нормы.НоменклатурнаяГруппа.*,
          	   |	ОтрабМашиноЧасы.Подразделение.*,
          	   |	ОтрабМашиноЧасы.НоменклатурнаяГруппа.*}
          	   |
          	   |СГРУППИРОВАТЬ ПО
          	   |	Нормы.НоменклатурнаяГруппа,
          	   |	Нормы.Подразделение,
          	   |	Нормы.Газ,
          	   |	Нормы.Электричество,
          	   |	Нормы.Вода,
          	   |	ОтрабМашиноЧасы.МашиноЧасы,
          	   |	Нормы.Организация
          	   |;
          	   |
          	   |////////////////////////////////////////////////////////////////////////////////
          	   |ВЫБРАТЬ
          	   |	ВыпускПродукцииБухгалтерскийУчет.Подразделение,
          	   |	ВыпускПродукцииБухгалтерскийУчет.НоменклатурнаяГруппа,
          	   |	СУММА(ВыпускПродукцииБухгалтерскийУчет.Количество) КАК КоличествоПродукции,
          	   |	ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП КАК СчетУчета
          	   |ПОМЕСТИТЬ ТаблВыпуска
          	   |ИЗ
          	   |	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукцииБухгалтерскийУчет
          	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблНорм КАК ТаблНорм
          	   |		ПО ВыпускПродукцииБухгалтерскийУчет.Подразделение = ТаблНорм.Подразделение
          	   |			И ВыпускПродукцииБухгалтерскийУчет.НоменклатурнаяГруппа = ТаблНорм.НоменклатурнаяГруппа
          	   |ГДЕ
          	   |	ВыпускПродукцииБухгалтерскийУчет.Организация = &Организация
          	   |	И ВыпускПродукцииБухгалтерскийУчет.КодОперации = &КодОперации
          	   |	И ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП В(&СчетУчета)
          	   |	И ВыпускПродукцииБухгалтерскийУчет.Период МЕЖДУ &ДатаНач И &ДатаКон
          	   |{ГДЕ
          	   |	ВыпускПродукцииБухгалтерскийУчет.Подразделение.*,
          	   |	ВыпускПродукцииБухгалтерскийУчет.НоменклатурнаяГруппа.*}
          	   |
          	   |СГРУППИРОВАТЬ ПО
          	   |	ВыпускПродукцииБухгалтерскийУчет.НоменклатурнаяГруппа,
          	   |	ВыпускПродукцииБухгалтерскийУчет.Подразделение,
          	   |	ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП
          	   |;
          	   |
          	   |////////////////////////////////////////////////////////////////////////////////
          	   |ВЫБРАТЬ
          	   |	ТаблВыпуска.Подразделение КАК Подразделение,
          	   |	ТаблВыпуска.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
          	   |	ТаблНорм.НормаГаз КАК НормаГаз,
          	   |	ТаблНорм.НормаЭлектричество КАК НормаЭлектричество,
          	   |	ТаблНорм.НормаВода КАК НормаВода,
          	   |	ТаблНорм.ВсегоГаз КАК ВсегоГаз,
          	   |	ТаблНорм.ВсегоЭлектричество КАК ВсегоЭлектричество,
          	   |	ТаблНорм.ВсегоВода КАК ВсегоВода,
          	   |	ТаблНорм.МашиноЧасы КАК МашиноЧасы,
          	   |	ТаблВыпуска.КоличествоПродукции,
          	   |	ТаблВыпуска.СчетУчета
          	   |ИЗ
          	   |	ТаблВыпуска КАК ТаблВыпуска
          	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблНорм КАК ТаблНорм
          	   |		ПО ТаблВыпуска.Подразделение = ТаблНорм.Подразделение
          	   |			И ТаблВыпуска.НоменклатурнаяГруппа = ТаблНорм.НоменклатурнаяГруппа
          	   |{ГДЕ
          	   |	ТаблВыпуска.Подразделение.*,
          	   |	ТаблВыпуска.НоменклатурнаяГруппа.*}
          	   |
          	   |СГРУППИРОВАТЬ ПО
          	   |	ТаблВыпуска.Подразделение,
          	   |	ТаблВыпуска.НоменклатурнаяГруппа,
          	   |	ТаблНорм.НормаГаз,
          	   |	ТаблНорм.НормаЭлектричество,
          	   |	ТаблНорм.НормаВода,
          	   |	ТаблНорм.ВсегоГаз,
          	   |	ТаблНорм.ВсегоЭлектричество,
          	   |	ТаблНорм.ВсегоВода,
          	   |	ТаблНорм.МашиноЧасы,
          	   |	ТаблВыпуска.КоличествоПродукции,
          	   |	ТаблВыпуска.СчетУчета";
			   
	ПЗ.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса , 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
			   
			  
  ПЗ.Параметры.Вставить("Организация",СтруктураШапкиДокумента.Организация);			  
  ПЗ.Параметры.Вставить("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
  ПЗ.Параметры.Вставить("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
  ПЗ.Параметры.Вставить("КодОперации",Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
  СчетУчета = Новый Массив;
  Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	  СчетУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД);
	  СчетУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД);
	  СчетУчета.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
  ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	  СчетУчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	  СчетУчета.Добавить(ПланыСчетов.Налоговый.ПроизводствоИзДавальческогоСырья);
  КонецЕсли; 
  ПЗ.Параметры.Вставить("СчетУчета",СчетУчета);
  возврат ПЗ;
КонецФункции	

//начало изменений Ожиганов А. 21.03.2017 63547 распределение воды аналогично газу и электричеству 
// для совместитомости с МСФО
Функция ПолучитьПостроительЗапросаПОТэрам2(СтруктураШапкиДокумента)
  ПЗ = Новый ПостроительЗапроса;
  ТекстЗапроса = "ВЫБРАТЬ
          	   |	Нормы.Газ КАК НормаГаз,
          	   |	Нормы.Электричество КАК НормаЭлектричество,
          	   |	Нормы.Вода КАК НормаВода,
          	   |	Нормы.НоменклатурнаяГруппа,
          	   |	Нормы.Подразделение,
          	   |	СУММА(Нормы.Газ * ОтрабМашиноЧасы.МашиноЧасы) КАК ВсегоГаз,
          	   |	СУММА(Нормы.Электричество * ОтрабМашиноЧасы.МашиноЧасы) КАК ВсегоЭлектричество,
//начало изменений Ожиганов А. 21.03.2017 63547 распределение воды аналогично газу и электричеству 			   
          	   |	СУММА(Нормы.Вода * ОтрабМашиноЧасы.МашиноЧасы) КАК ВсегоВода,
//конец изменений 			   
          	   |	ОтрабМашиноЧасы.МашиноЧасы,
          	   |	Нормы.Организация
          	   |ПОМЕСТИТЬ ТаблНорм
          	   |ИЗ
          	   |	Документ.ПРГ_ФактическиОтработанныеМашиноЧасы.Машиночасы КАК ОтрабМашиноЧасы
          	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_НормыПотребленияПоЛиниям.СрезПоследних(&ДатаКон, Организация = &Организация) КАК Нормы
          	   |		ПО ОтрабМашиноЧасы.Подразделение = Нормы.Подразделение
          	   |			И ОтрабМашиноЧасы.НоменклатурнаяГруппа = Нормы.НоменклатурнаяГруппа
          	   |ГДЕ
          	   |	ОтрабМашиноЧасы.Ссылка.Организация = &Организация
          	   |	И ОтрабМашиноЧасы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
          	   |	И ОтрабМашиноЧасы.Ссылка.Проведен
          	   |{ГДЕ
          	   |	Нормы.Подразделение.*,
          	   |	Нормы.НоменклатурнаяГруппа.*,
          	   |	ОтрабМашиноЧасы.Подразделение.*,
          	   |	ОтрабМашиноЧасы.НоменклатурнаяГруппа.*}
          	   |
          	   |СГРУППИРОВАТЬ ПО
          	   |	Нормы.НоменклатурнаяГруппа,
          	   |	Нормы.Подразделение,
          	   |	Нормы.Газ,
          	   |	Нормы.Электричество,
          	   |	Нормы.Вода,
          	   |	ОтрабМашиноЧасы.МашиноЧасы,
          	   |	Нормы.Организация
          	   |;
          	   |
          	   |////////////////////////////////////////////////////////////////////////////////
          	   |ВЫБРАТЬ
          	   |	ВыпускПродукцииБухгалтерскийУчет.Подразделение,
          	   |	ВыпускПродукцииБухгалтерскийУчет.НоменклатурнаяГруппа,
          	   |	СУММА(ВыпускПродукцииБухгалтерскийУчет.Количество) КАК КоличествоПродукции,
          	   |	ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП КАК СчетУчета
          	   |ПОМЕСТИТЬ ТаблВыпуска
          	   |ИЗ
          	   |	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукцииБухгалтерскийУчет
          	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблНорм КАК ТаблНорм
          	   |		ПО ВыпускПродукцииБухгалтерскийУчет.Подразделение = ТаблНорм.Подразделение
          	   |			И ВыпускПродукцииБухгалтерскийУчет.НоменклатурнаяГруппа = ТаблНорм.НоменклатурнаяГруппа
          	   |ГДЕ
          	   |	ВыпускПродукцииБухгалтерскийУчет.Организация = &Организация
          	   |	И ВыпускПродукцииБухгалтерскийУчет.КодОперации = &КодОперации
          	   |	И ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП В(&СчетУчета)
          	   |	И ВыпускПродукцииБухгалтерскийУчет.Период МЕЖДУ &ДатаНач И &ДатаКон
          	   |{ГДЕ
          	   |	ВыпускПродукцииБухгалтерскийУчет.Подразделение.*,
          	   |	ВыпускПродукцииБухгалтерскийУчет.НоменклатурнаяГруппа.*}
          	   |
          	   |СГРУППИРОВАТЬ ПО
          	   |	ВыпускПродукцииБухгалтерскийУчет.НоменклатурнаяГруппа,
          	   |	ВыпускПродукцииБухгалтерскийУчет.Подразделение,
          	   |	ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП
          	   |;
          	   |
          	   |////////////////////////////////////////////////////////////////////////////////
          	   |ВЫБРАТЬ
          	   |	ТаблВыпуска.Подразделение КАК Подразделение,
          	   |	ТаблВыпуска.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
          	   |	ТаблНорм.НормаГаз КАК НормаГаз,
          	   |	ТаблНорм.НормаЭлектричество КАК НормаЭлектричество,
          	   |	ТаблНорм.НормаВода КАК НормаВода,
          	   |	ТаблНорм.ВсегоГаз КАК ВсегоГаз,
          	   |	ТаблНорм.ВсегоЭлектричество КАК ВсегоЭлектричество,
          	   |	ТаблНорм.ВсегоВода КАК ВсегоВода,
          	   |	ТаблНорм.МашиноЧасы КАК МашиноЧасы,
          	   |	ТаблВыпуска.КоличествоПродукции,
          	   |	ТаблВыпуска.СчетУчета
          	   |ИЗ
          	   |	ТаблВыпуска КАК ТаблВыпуска
          	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблНорм КАК ТаблНорм
          	   |		ПО ТаблВыпуска.Подразделение = ТаблНорм.Подразделение
          	   |			И ТаблВыпуска.НоменклатурнаяГруппа = ТаблНорм.НоменклатурнаяГруппа
          	   |{ГДЕ
          	   |	ТаблВыпуска.Подразделение.*,
          	   |	ТаблВыпуска.НоменклатурнаяГруппа.*}
          	   |
          	   |СГРУППИРОВАТЬ ПО
          	   |	ТаблВыпуска.Подразделение,
          	   |	ТаблВыпуска.НоменклатурнаяГруппа,
          	   |	ТаблНорм.НормаГаз,
          	   |	ТаблНорм.НормаЭлектричество,
          	   |	ТаблНорм.НормаВода,
          	   |	ТаблНорм.ВсегоГаз,
          	   |	ТаблНорм.ВсегоЭлектричество,
          	   |	ТаблНорм.ВсегоВода,
          	   |	ТаблНорм.МашиноЧасы,
          	   |	ТаблВыпуска.КоличествоПродукции,
          	   |	ТаблВыпуска.СчетУчета";
			   
	ПЗ.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса , 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
			   
			  
  ПЗ.Параметры.Вставить("Организация",СтруктураШапкиДокумента.Организация);			  
  ПЗ.Параметры.Вставить("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
  ПЗ.Параметры.Вставить("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
  ПЗ.Параметры.Вставить("КодОперации",Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
  СчетУчета = Новый Массив;
  Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	  СчетУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД);
	  СчетУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД);
	  СчетУчета.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
  ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	  СчетУчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	  СчетУчета.Добавить(ПланыСчетов.Налоговый.ПроизводствоИзДавальческогоСырья);
  КонецЕсли; 
  ПЗ.Параметры.Вставить("СчетУчета",СчетУчета);
  возврат ПЗ;
КонецФункции	
//конец изменений 

Процедура РаспеределитьТЭРЫ(СтруктураШапкиДокумента, СтруктураТаблицДвижений) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		  Сообщить("Распределение ТЭР не поддеживается в управленченском учете");
		  возврат;
	  КонецЕслИ;
	  
	РаспределитьВОДУ(СтруктураШапкиДокумента);
	  
	  
	СпособРасчета 					    = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
	ЗапросПоНезавершенномуПроизводству  = ПолучитьЗапросПоНезавершенномуПроизводству(СтруктураШапкиДокумента);
	//начало изменений Ожиганов А. 21.03.2017 63547 распределение воды аналогично газу и электричеству 
	Если СтруктураШапкиДокумента.дата > '20170301' Тогда
	//Если СтруктураШапкиДокумента.Дата > '20170201' Тогда
		ПЗМашиноЧасы  						= ПолучитьПостроительЗапросаПОТэрам2(СтруктураШапкиДокумента);
	Иначе	
		ПЗМашиноЧасы  						= ПолучитьПостроительЗапросаПОТэрам(СтруктураШапкиДокумента);
	КонецЕсли;	
	//конец изменений 
	
	
	Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ИмяРегБух  =  "Хозрасчетный";
		ИмяРегНЗП  =  "НезавершенноеПроизводствоБухгалтерскийУчет";
	Иначе
		ИмяРегБух  =  "Налоговый";
		ИмяРегНЗП  =  "НезавершенноеПроизводствоНалоговыйУчет";
	КонецЕсли;	
		
	РегНезавершенноеПроизводство  = РегистрыНакопления[ИмяРегНЗП].СоздатьНаборЗаписей();
	РегНезавершенноеПроизводство.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	РегРаспрМашинЧасов 	= РегистрыСведений.ПРГ_РаспределениеПоМашиноЧасам.СоздатьНаборЗаписей();
	РегРаспрМашинЧасов.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
			
	ТаблРаспрМашинЧасов = РегРаспрМашинЧасов.Выгрузить();
	
	ДвиженияХозрасч	= РегистрыБухгалтерии[ИмяРегБух].СоздатьНаборЗаписей();
	ДвиженияХозрасч.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
			
	ТаблНезавершПроизводство	   = РегНезавершенноеПроизводство.Выгрузить();
	ТаблНезавершПроизводствоСторно = РегНезавершенноеПроизводство.Выгрузить();
	 
	 
	МассивТэров  = Новый Массив;
	МассивТэров.Добавить(Новый Структура("ВидСтатьТЭР,ИмяКолонкиРаспр,ИмяКолонкиНормы",Перечисления.ПРГ_ВидыСтатьиТЭР.Электричество,"ВсегоЭлектричество","НормаЭлектричество"));
	МассивТэров.Добавить(Новый Структура("ВидСтатьТЭР,ИмяКолонкиРаспр,ИмяКолонкиНормы",Перечисления.ПРГ_ВидыСтатьиТЭР.Вода,"ВсегоВода","НормаВода"));
	МассивТэров.Добавить(Новый Структура("ВидСтатьТЭР,ИмяКолонкиРаспр,ИмяКолонкиНормы",Перечисления.ПРГ_ВидыСтатьиТЭР.Газ,"ВсегоГаз","НормаГаз"));
	
	
	ТаблДляРаспр = Новый ТаблицаЗначений;
	
	ТаблДляРаспр.Колонки.Добавить("Подразделение");
	ТаблДляРаспр.Колонки.Добавить("СтатьяЗатрат");
	ТаблДляРаспр.Колонки.Добавить("СчетУчета");
	ТаблДляРаспр.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблДляРаспр.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблДляРаспр.Колонки.Добавить("ПостояннаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблДляРаспр.Колонки.Добавить("ВременнаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого текЭлем Из МассивТэров Цикл
		
		ТаблЗатратТЭР = ПолучитьМассивСтатейТЭР(СтруктураШапкиДокумента,текЭлем.ВидСтатьТЭР);
		ЗапросПоНезавершенномуПроизводству.УстановитьПараметр("МассивЗатрат",  ТаблЗатратТЭР.ВыгрузитьКолонку("СтатьяЗатрат"));
		
		ИмяКолонкиРаспр   	 = текЭлем.ИмяКолонкиРаспр;
		ИмяКолонкиНормы   	 = текЭлем.ИмяКолонкиНормы;
		
		РезультатЗапросаПоНезавершенномуПроизводству = ЗапросПоНезавершенномуПроизводству.Выполнить();
		Выборка = РезультатЗапросаПоНезавершенномуПроизводству.Выбрать();
		ТаблДляРаспр.Очистить();
		Пока Выборка.Следующий() Цикл
				//очистим отбор 
				
				НоваяСтрока = ТаблДляРаспр.Добавить();
				НоваяСтрока.Подразделение		= Выборка.Подразделение;
				НоваяСтрока.СтатьяЗатрат		= Выборка.СтатьяЗатрат;
				НоваяСтрока.СчетУчета	        = Выборка.СчетУчета;
				НоваяСтрока.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				НоваяСтрока.Сумма				= Выборка.Сумма;
				Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						НоваяСтрока.ПостояннаяРазница  = Выборка.ПостояннаяРазница;
						НоваяСтрока.ВременнаяРазница   = Выборка.ВременнаяРазница;
				Иначе
						НоваяСтрока.ПостояннаяРазница	= 0;
						НоваяСтрока.ВременнаяРазница	= 0;
				КонецЕсли;
				СформироватьДвижениеНезавершенкиСторно(Выборка,СтруктураШапкиДокумента,РегНезавершенноеПроизводство);	
		КонецЦикла;		
			
		ТаблДляРаспр.Свернуть("Подразделение,СтатьяЗатрат,СчетУчета,НоменклатурнаяГруппа","Сумма,ПостояннаяРазница,ВременнаяРазница");
		
		Для Каждого ТекСтрокаРаспр Из ТаблДляРаспр Цикл
			
			    к = 0;
			    Пока к < ПЗМашиноЧасы.Отбор.Количество() Цикл
			    	ПЗМашиноЧасы.Отбор.Удалить(к);
				КонецЦикла;	
				
			    //ПЗМашиноЧасы.Выполнить();
				НадЗнч = ТаблЗатратТЭР.Найти(ТекСтрокаРаспр.СтатьяЗатрат,"СтатьяЗатрат");
				Если НадЗнч <> Неопределено Тогда
					ИспользуемПодр = НЕ НадЗнч.НеИспользоватьПодразделение;
				КонецЕсли;	
				
			    //добавим новый отбор 
				Если ИспользуемПодр Тогда
				    Отбор = ПЗМашиноЧасы.Отбор.Добавить("Подразделение","Подразделение");
				    Отбор.ВидСравнения  = ВидСравнения.ВИерархии;
				    Отбор.Значение 		= ТекСтрокаРаспр.Подразделение;
					Отбор.Использование = Истина;
				КонецЕсли;
				
			    Если ЗначениеЗаполнено(ТекСтрокаРаспр.НоменклатурнаяГруппа) Тогда
			    	Отбор = ПЗМашиноЧасы.Отбор.Добавить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
			    	Отбор.ВидСравнения  = ВидСравнения.ВИерархии;
			    	Отбор.Значение 		= ТекСтрокаРаспр.НоменклатурнаяГруппа;
					Отбор.Использование = Истина;
			    КонецЕсли;	
			    
			 	ПЗМашиноЧасы.Выполнить();
			 	
			 	ТаблМашиноЧасов = ПЗМашиноЧасы.Результат.Выгрузить();
			    // ТаблМашиноЧасов .ВыбратьСтроку();
			 	Если ТаблМашиноЧасов.Количество() = 0 Тогда
			    	 Сообщить("Не удалось распределить ТЭР 
					 | Подразделение "+ТекСтрокаРаспр.Подразделение+"  
					 | СтатьяЗатрат  "+ТекСтрокаРаспр.СтатьяЗатрат+"  
					 | СчетУчета  "+ТекСтрокаРаспр.СчетУчета+"  
					 | Сумма  "+Формат(ТекСтрокаРаспр.Сумма,"ЧЦ=15; ЧДЦ=2"));
					 ВосстановитьЗаписьНЗП(ТекСтрокаРаспр,СтруктураШапкиДокумента,РегНезавершенноеПроизводство);
			    	 продолжить;
			 	КонецЕсли; 
			 	БазаРаспр  = ТаблМашиноЧасов.Итог(ИмяКолонкиРаспр);
			 	РаспрСумма = ТекСтрокаРаспр.Сумма;
			 	РаспрКолВо = 0;
			 	
			    РаспрСуммаПР 	= ТекСтрокаРаспр.ПостояннаяРазница;
			    РаспрСуммаВР    = ТекСтрокаРаспр.ВременнаяРазница;
				
			 	Если БазаРаспр = 0 Тогда
			    	 // видиом сообщения
			 	КонецЕсли; 
			
			 	ТаблМашиноЧасов.Колонки.Добавить("КоличествоРаспределение",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			 	ТаблМашиноЧасов.Колонки.Добавить("СуммаРаспределение",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
			 	
			 	Для Каждого ТекСтрока Из ТаблМашиноЧасов Цикл
			    	 ПогСумма  = Окр(РаспрСумма * ТекСтрока[ИмяКолонкиРаспр] / БазаРаспр,2);
			    	 ПогКолво  = Окр(РаспрКолВо * ТекСтрока[ИмяКолонкиРаспр] / БазаРаспр,2);
			    	 
			    	 ПогСуммаВР  = Окр(РаспрСуммаВР * ТекСтрока[ИмяКолонкиРаспр] / БазаРаспр,2);
			    	 ПогСуммаПР  = Окр(РаспрСуммаПР * ТекСтрока[ИмяКолонкиРаспр] / БазаРаспр,2);
			    	 
			    	 
			    	 РаспрСумма    = РаспрСумма   - ПогСумма;
			    	 РаспрСуммаВР  = РаспрСуммаВР - ПогСуммаВР;
			    	 РаспрСуммаПР  = РаспрСуммаПР - ПогСуммаПР;
			    	 
			    	 ПогКолво    = РаспрКолВо - ПогКолво;
			    	 БазаРаспр   = БазаРаспр -ТекСтрока[ИмяКолонкиРаспр];
			    	 
			    	 СформироватьДвижениеНезавершенки(ТекСтрокаРаспр,СтруктураШапкиДокумента,ТекСтрока,РегНезавершенноеПроизводство,ПогСумма,ПогКолво,ДвиженияХозрасч,ПогСуммаВР,ПогСуммаПР);
			    	 ЗаполнитьНормыРаспределенияМашиноЧасов(ТекСтрокаРаспр,СтруктураШапкиДокумента,ТекСтрока,ТаблНезавершПроизводство,ПогСумма,ПогКолво,ТекЭлем.ВидСтатьТЭР,ТаблРаспрМашинЧасов,ИмяКолонкиНормы,ИмяКолонкиРаспр);
				 КонецЦикла;
			
		КонецЦикла;	
		
				
				
			 //   к = 0;
			 //   Пока к < ПЗМашиноЧасы.Отбор.Количество() Цикл
			 //   	ПЗМашиноЧасы.Отбор.Удалить(к);
			 //   КонецЦикла;	
			 //   ПЗМашиноЧасы.Выполнить();
			 //   //добавим новый отбор 
			 //   Отбор = ПЗМашиноЧасы.Отбор.Добавить("Подразделение","Подразделение");
			 //   Отбор.ВидСравнения  = ВидСравнения.ВИерархии;
			 //   Отбор.Значение 		= Выборка.Подразделение;
			 //   
			 //   Если ЗначениеЗаполнено(Выборка.НоменклатурнаяГруппа) Тогда
			 //   	Отбор = ПЗМашиноЧасы.Отбор.Добавить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
			 //   	Отбор.ВидСравнения  = ВидСравнения.ВИерархии;
			 //   	Отбор.Значение 		= Выборка.НоменклатурнаяГруппа;
			 //   КонецЕсли;	
			 //   
			 //	ПЗМашиноЧасы.Выполнить();
			 //	
			 //	ТаблМашиноЧасов = ПЗМашиноЧасы.Результат.Выгрузить();
			 //   // ТаблМашиноЧасов .ВыбратьСтроку();
			 //	Если ТаблМашиноЧасов.Количество() = 0 Тогда
			 //   	 Сообщить("Не удалось распределить ТЭР ");
			 //   	 продолжить;
			 //	КонецЕсли; 
			 //	БазаРаспр  = ТаблМашиноЧасов.Итог(ИмяКолонкиРаспр);
			 //	РаспрСумма = Выборка.Сумма;
			 //	РаспрКолВо = Выборка.Количество;
			 //	РаспрСуммаВР   = 0;
			 //	РаспрСуммаПР 	= 0;
			 //	Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			 //   		РаспрСуммаВР   = Выборка.ПостояннаяРазница;
			 //   		РаспрСуммаПР   = Выборка.ВременнаяРазница;
			 //	КонецЕсли;
			 //	
			 //	Если БазаРаспр = 0 Тогда
			 //   	 // видиом сообщения
			 //	КонецЕсли; 
			 //	
			 //	ТаблМашиноЧасов.Колонки.Добавить("КоличествоРаспределение",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			 //	ТаблМашиноЧасов.Колонки.Добавить("СуммаРаспределение",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			 //	
			 //	Для Каждого ТекСтрока Из ТаблМашиноЧасов Цикл
			 //   	 ПогСумма  = Окр(РаспрСумма * ТекСтрока[ИмяКолонкиРаспр] / БазаРаспр,2);
			 //   	 ПогКолво  = Окр(РаспрКолВо * ТекСтрока[ИмяКолонкиРаспр] / БазаРаспр,2);
			 //   	 
			 //   	 ПогСуммаВР  = Окр(РаспрСуммаВР * ТекСтрока[ИмяКолонкиРаспр] / БазаРаспр,2);
			 //   	 ПогСуммаПР  = Окр(РаспрСуммаПР * ТекСтрока[ИмяКолонкиРаспр] / БазаРаспр,2);
			 //   	 
			 //   	 
			 //   	 РаспрСумма    = РаспрСумма   - ПогСумма;
			 //   	 РаспрСуммаВР  = РаспрСуммаВР - ПогСуммаВР;
			 //   	 РаспрСуммаПР  = РаспрСуммаПР - ПогСуммаПР;
			 //   	 
			 //   	 ПогКолво    = РаспрКолВо - ПогКолво;
			 //   	 БазаРаспр   = БазаРаспр -ТекСтрока[ИмяКолонкиРаспр];
			 //   	 
			 //   	 СформироватьДвижениеНезавершенки(Выборка,СтруктураШапкиДокумента,ТекСтрока,РегНезавершенноеПроизводство,ПогСумма,ПогКолво,ДвиженияХозрасч,РаспрСуммаВР,РаспрСуммаПР);
			 //   	 ЗаполнитьНормыРаспределенияМашиноЧасов(Выборка,СтруктураШапкиДокумента,ТекСтрока,ТаблНезавершПроизводство,ПогСумма,ПогКолво,ТекЭлем.ВидСтатьТЭР,ТаблРаспрМашинЧасов,ИмяКолонкиНормы,ИмяКолонкиРаспр);
			 //   	 
			 //	КонецЦикла; 
			 //	СформироватьДвижениеНезавершенкиСторно(Выборка,СтруктураШапкиДокумента,РегНезавершенноеПроизводство);
			 //КонецЦикла;			
			 
	КонецЦикла;	 // по тэрам
		 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегНезавершенноеПроизводство.Количество() > 0 Тогда
		РегНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;
	
	Если ТаблРаспрМашинЧасов.Количество() > 0 и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
		 // на всякий пожарный
		 //ТаблРаспрМашинЧасов.Свернуть("ВидСтатьиТЭР,Подразделение,СтатьяЗатрат,НоменклатурнаяГруппа,КорПодразделение,КорПодразделение,КорНоменклатурнаяГруппа,КоррСчет,НормаМашиночасов,ОтработаноМашиноЧасов,КоличествоПродукции,ФактМашиноЧасов",Сумма");
		 //ТаблРаспрМашинЧасов.Колонки.Добавить("Период");
		 //ТаблРаспрМашинЧасов.Колонки.Добавить("Активность");
		 ТаблРаспрМашинЧасов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"Период");
		 ТаблРаспрМашинЧасов.ЗаполнитьЗначения(Истина,"Активность");
		 РегРаспрМашинЧасов.Загрузить(ТаблРаспрМашинЧасов);
		 РегРаспрМашинЧасов.Записать(Истина);
	 КонецЕсли; 
	 
	 ДвиженияХозрасч.Записать(Ложь);
	 

КонецПроцедуры

Процедура ЗаполнитьНормыРаспределенияМашиноЧасов(Выборка,СтруктураШапкиДокумента,ТекСтрока,ТаблНезавершПроизводство,ПогСумма,ПогКолво,ВидСтатьТЭР,ТаблРаспрМашинЧасов,ИмяКолонкиНормы,ИмяКолонкиРаспр);
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		возврат;
	КонецЕсли;	
	
	НоваяСтрока = ТаблРаспрМашинЧасов.Добавить();
	
	НоваяСтрока.Активность 			 = истина;
	НоваяСтрока.ВидСтатьиТЭР 		 = ВидСтатьТЭР;
	НоваяСтрока.Подразделение 		  = ТекСтрока.Подразделение;
	НоваяСтрока.СтатьяЗатрат  		  = Выборка.СтатьяЗатрат;
	НоваяСтрока.НоменклатурнаяГруппа  = ТекСтрока.НоменклатурнаяГруппа;
	НоваяСтрока.СчетУчета			  = ТекСтрока.СчетУчета;
	НоваяСтрока.НормаМашиночасов	  = ТекСтрока[ИмяКолонкиНормы];
	НоваяСтрока.ОтработаноМашиноЧасов = ТекСтрока["МашиноЧасы"];
	НоваяСтрока.ФактМашиноЧасов		  = ТекСтрока[ИмяКолонкиРаспр];
	НоваяСтрока.КоличествоПродукции	  = ТекСтрока.КоличествоПродукции;
	НоваяСтрока.КорПодразделение      = Выборка.Подразделение;
	НоваяСтрока.КорНоменклатурнаяГруппа    = Выборка.НоменклатурнаяГруппа;
	НоваяСтрока.КоррСчет                   = Выборка.СчетУчета;
	
	НоваяСтрока.Сумма                 = ПогСумма;
	
КонецПроцедуры	

Процедура СформироватьДвижениеНезавершенкиСторно(Выборка,СтруктураШапкиДокумента,НаборЗаписейНезавершенноеПроизводство)
		 НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
		 НоваяСтрока.Активность = Истина;
		 НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		 НоваяСтрока.Период 	 = СтруктураШапкиДокумента.Период;
		 
		 ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		 НоваяСтрока.Стоимость 	= Выборка.Сумма;
		 Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			 НоваяСтрока.ПостояннаяРазница 	= Выборка.ПостояннаяРазница;
			 НоваяСтрока.ВременнаяРазница 	= Выборка.ВременнаяРазница;
		 КонецЕсли; 
		 НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
		 // Если в наборе записей 1000 строк, запишем набор.
		 Если НаборЗаписейНезавершенноеПроизводство.Количество() >= 1000 Тогда
			  НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
		 КонецЕсли;
		 
КонецПроцедуры	

Процедура ВосстановитьЗаписьНЗП(Выборка,СтруктураШапкиДокумента,НаборЗаписейНезавершенноеПроизводство)
	
		 НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
		 НоваяСтрока.Активность = Истина;
		 НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		 НоваяСтрока.Период 	 = СтруктураШапкиДокумента.Период;
		 
		 
		 НоваяСтрока.Организация 		   = СтруктураШапкиДокумента.Организация;
		 НоваяСтрока.Подразделение   	   = Выборка.Подразделение;
		 НоваяСтрока.НоменклатурнаяГруппа  = Выборка.НоменклатурнаяГруппа;
		 НоваяСтрока.СтатьяЗатрат		   = Выборка.СтатьяЗатрат;
		 НоваяСтрока.СчетУчета             = Выборка.СчетУчета;

		 НоваяСтрока.Стоимость 			   = Выборка.Сумма;
		 
		 Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			 НоваяСтрока.ПостояннаяРазница 	= Выборка.ПостояннаяРазница;
			 НоваяСтрока.ВременнаяРазница 	= Выборка.ВременнаяРазница;
		 КонецЕсли; 
		 НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
		 
		 // Если в наборе записей 1000 строк, запишем набор.
		 Если НаборЗаписейНезавершенноеПроизводство.Количество() >= 1000 Тогда
			  НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
		 КонецЕсли;

	
КонецПроцедуры	

	 
	
Процедура СформироватьДвижениеНезавершенки(Выборка,СтруктураШапкиДокумента,ТекСтрока,НаборЗаписейНезавершенноеПроизводство,Сумма,Колво,РегистрБух,СуммаВР,СуммаПР)
	
	Если КолВо = 0 и Сумма = 0 и СуммаВР= 0 и СуммаПР =0 Тогда
		возврат;
	КонецЕсли;	
	
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период 		= СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка,"СтатьяЗатрат");
	НоваяСтрока.СчетУчета  				= ТекСтрока.СчетУчета;
	НоваяСтрока.Организация				=  СтруктураШапкиДокумента.Организация;
	НоваяСтрока.Подразделение           =  ТекСтрока.Подразделение;
	НоваяСтрока.НоменклатурнаяГруппа	=  ТекСтрока.НоменклатурнаяГруппа;
	НоваяСтрока.Количество              =  Колво;
	НоваяСтрока.Стоимость				=  Сумма;                           
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			 НоваяСтрока.ПостояннаяРазница 	= СуммаПР;
			 НоваяСтрока.ВременнаяРазница 	= СуммаВР;
	КонецЕсли; 
	
	НоваяСтрока.КодОперации				=  Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
	
	Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если Сумма <> 0 тогда
			СформироватьПроводкиПоТЭРНезавершенка(СтруктураШапкиДокумента,Выборка,ТекСтрока,РегистрБух,Сумма,Перечисления.ВидыУчетаПоПБУ18.НУ);
		КонецЕсли;
		Если СуммаВР <> 0 тогда
			СформироватьПроводкиПоТЭРНезавершенка(СтруктураШапкиДокумента,Выборка,ТекСтрока,РегистрБух,СуммаВР,Перечисления.ВидыУчетаПоПБУ18.ВР);
		КонецЕсли;
		Если СуммаПР <> 0 тогда
			СформироватьПроводкиПоТЭРНезавершенка(СтруктураШапкиДокумента,Выборка,ТекСтрока,РегистрБух,СуммаПР,Перечисления.ВидыУчетаПоПБУ18.ПР);
		КонецЕсли;
	Иначе	
		СформироватьПроводкиПоТЭРНезавершенка(СтруктураШапкиДокумента,Выборка,ТекСтрока,РегистрБух,Сумма,Неопределено);
	КонецЕсли;	
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейНезавершенноеПроизводство.Количество() >= 1000 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;
	
	
	//РегистрБух = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей()
	// отражение в проводках
	
	// Если в наборе записей 1000 строк, запишем набор.
	//Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
	//	РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	//КонецЕсли;
КонецПроцедуры	

Процедура СформироватьПроводкиПоТЭРНезавершенка(СтруктураШапкиДокумента,Выборка,ТекСтрока,РегистрБух,Сумма,ВидУчетаПоПБУ18)
	
	Если Сумма = 0 Тогда
		возврат;
	КонецЕсли;	
	
	НоваяПроводка = РегистрБух.Добавить();
	НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность	 = Истина;
	НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
	НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, распределение ТЭР";
														
	НоваяПроводка.Сумма = Сумма;
	
	НоваяПроводка.СчетДт = ТекСтрока.СчетУчета;
	
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ТекСтрока.Подразделение);		
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", Выборка.СтатьяЗатрат);
													
	НоваяПроводка.СчетКт = Выборка.СчетУчета;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", Выборка.Подразделение);		
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Выборка.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", Выборка.СтатьяЗатрат);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
		 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
			НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		    НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрБух.Количество() >= 1000 Тогда
		РегистрБух.Записать(Ложь);
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьЗапросПоИсползованиюВоды(СтруктураШапкиДокумента)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |			ТОГДА ЗатратыНаВыпуск.Подразделение
	                      |		ИНАЧЕ ЗатратыНаВыпуск.ПодразделениеНЗП
	                      |	КОНЕЦ КАК Подразделение,
						  |	//ДляБухУчета ЗатратыНаВыпуск.СчетУчета как СчетУчета,
	                      |	//ДляНалУчета &СчетНУ как СчетУчета,
	                      |	ЗатратыНаВыпуск.СтатьяЗатрат,
	                      |	ВЫБОР
	                      |		КОГДА ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.Пустаяссылка)
	                      |			ТОГДА ЗатратыНаВыпуск.НоменклатурнаяГруппа
	                      |		ИНАЧЕ ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП
	                      |	КОНЕЦ КАК НоменклатурнаяГруппа,
	                      |	ЗатратыНаВыпуск.ЗаказНЗП,
	                      |	ЗатратыНаВыпуск.Затрата,
	                      |	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	                      |	СУММА(ЗатратыНаВыпуск.КоличествоОборот) КАК Количество,
	                      |	СУММА(ЗатратыНаВыпуск.СуммаОборот) КАК Сумма,
	                      |	ЗатратыНаВыпуск.СерияЗатраты,
	                      |	ЗатратыНаВыпуск.Организация,
	                      |	ЗатратыНаВыпуск.Продукция,
	                      |	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	                      |	ЗатратыНаВыпуск.СерияПродукции,
	                      |	ЗатратыНаВыпуск.Спецификация,
	                      |	ЗатратыНаВыпуск.Заказ
	                      |ИЗ
	                      |	РегистрНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет.Обороты(
	                      |			&ДатаНачала,
	                      |			&ДатаКонца,
	                      |			,
	                      |			Организация = &Организация
	                      |				И Затрата В (&Затрата)) КАК ЗатратыНаВыпуск
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |//ДляБухУчета ЗатратыНаВыпуск.СчетУчета,
	                      |	ЗатратыНаВыпуск.ЗаказНЗП,
	                      |	ВЫБОР
	                      |		КОГДА ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.Пустаяссылка)
	                      |			ТОГДА ЗатратыНаВыпуск.НоменклатурнаяГруппа
	                      |		ИНАЧЕ ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП
	                      |	КОНЕЦ,
	                      |	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	                      |	ЗатратыНаВыпуск.СерияЗатраты,
	                      |	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	                      |	ЗатратыНаВыпуск.Организация,
	                      |	ЗатратыНаВыпуск.СтатьяЗатрат,
	                      |	ЗатратыНаВыпуск.СерияПродукции,
	                      |	ЗатратыНаВыпуск.Затрата,
	                      |	ЗатратыНаВыпуск.Заказ,
	                      |	ЗатратыНаВыпуск.Продукция,
	                      |	ЗатратыНаВыпуск.Спецификация,
	                      |	ВЫБОР
	                      |		КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |			ТОГДА ЗатратыНаВыпуск.Подразделение
	                      |		ИНАЧЕ ЗатратыНаВыпуск.ПодразделениеНЗП
	                      |	КОНЕЦ");
						  
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаКонца",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("СчетНУ",ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	
	
	возврат Запрос;
КонецФункции	

Функция ПолучитьЗапросПоНезавершенномуПроизводствуВоды(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос  = Новый Запрос("ВЫБРАТЬ
		                       |	ПРГ_СтатьиТЭРСрезПоследних.СтатьяЗатрат,
		                       |	ПРГ_СтатьиТЭРСрезПоследних.НеИспользоватьПодразделение,
		                       |	ПРГ_СтатьиТЭРСрезПоследних.СчетУчетаБУ
		                       |ПОМЕСТИТЬ ТаблТэр
		                       |ИЗ
		                       |	РегистрСведений.ПРГ_СтатьиТЭР.СрезПоследних(&ДатаКонца, Организация = &Организация) КАК ПРГ_СтатьиТЭРСрезПоследних
		                       |ГДЕ
		                       |	ПРГ_СтатьиТЭРСрезПоследних.Использование
		                       |;
		                       |
		                       |////////////////////////////////////////////////////////////////////////////////
		                       |ВЫБРАТЬ
		                       |	Незавершенка.Подразделение,
		                       |	Незавершенка.СчетУчета,
		                       |	Незавершенка.СтатьяЗатрат,
		                       |	Незавершенка.НоменклатурнаяГруппа,
		                       |	Незавершенка.Заказ,
		                       |	Незавершенка.Затрата,
		                       |	Незавершенка.ХарактеристикаЗатраты,
		                       |	СУММА(Незавершенка.Количество) КАК Количество,
		                       |	СУММА(Незавершенка.Сумма) КАК Стоимость,
		                       |	Незавершенка.СерияЗатраты,
		                       |	СУММА(0) КАК ПостояннаяРазница,
		                       |	СУММА(0) КАК ВременнаяРазница,
		                       |	Незавершенка.Организация
		                       |ИЗ
		                       |	(ВЫБРАТЬ
		                       |		НезавершенноеПроизводство.Подразделение КАК Подразделение,
		                       |		НезавершенноеПроизводство.СчетУчета КАК СчетУчета,
		                       |		НезавершенноеПроизводство.СтатьяЗатрат КАК СтатьяЗатрат,
		                       |		НезавершенноеПроизводство.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		                       |		НезавершенноеПроизводство.Заказ КАК Заказ,
		                       |		НезавершенноеПроизводство.Затрата КАК Затрата,
		                       |		НезавершенноеПроизводство.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
		                       |		НезавершенноеПроизводство.КоличествоОстаток КАК Количество,
		                       |		НезавершенноеПроизводство.СтоимостьОстаток КАК Сумма,
		                       |		НезавершенноеПроизводство.СерияЗатраты КАК СерияЗатраты,
		                       |		НезавершенноеПроизводство.Организация КАК Организация
		                       |	ИЗ
		                       |		РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.Остатки(
		                       |				&ДатаОстатков,
		                       |				Организация = &Организация
		                       |					И СчетУчета = &СчетУчета
		                       |					И Подразделение = &Подразделение) КАК НезавершенноеПроизводство
		                       |	
		                       |	ОБЪЕДИНИТЬ ВСЕ
		                       |	
		                       |	ВЫБРАТЬ
		                       |		ВЫБОР
		                       |			КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		                       |				ТОГДА ЗатратыНаВыпуск.Подразделение
		                       |			ИНАЧЕ ЗатратыНаВыпуск.ПодразделениеНЗП
		                       |		КОНЕЦ,
		                       |		ЗатратыНаВыпуск.СчетУчета,
		                       |		ЗатратыНаВыпуск.СтатьяЗатрат,
		                       |		ВЫБОР
		                       |			КОГДА ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.Пустаяссылка)
		                       |				ТОГДА ЗатратыНаВыпуск.НоменклатурнаяГруппа
		                       |			ИНАЧЕ ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП
		                       |		КОНЕЦ,
		                       |		ЗатратыНаВыпуск.ЗаказНЗП,
		                       |		ЗатратыНаВыпуск.Затрата,
		                       |		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
		                       |		-1 * ЗатратыНаВыпуск.КоличествоОборот,
		                       |		-1 * ЗатратыНаВыпуск.СуммаОборот,
		                       |		ЗатратыНаВыпуск.СерияЗатраты,
		                       |		ЗатратыНаВыпуск.Организация
		                       |	ИЗ
		                       |		РегистрНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет.Обороты(
		                       |				&ДатаНачала,
		                       |				&ДатаКонца,
		                       |				,
		                       |				Организация = &Организация
		                       |					И ВЫБОР
		                       |						КОГДА ПодразделениеНЗП <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.Пустаяссылка)
		                       |							ТОГДА ПодразделениеНЗП = &Подразделение
		                       |						ИНАЧЕ Подразделение = &Подразделение
		                       |					КОНЕЦ
		                       |					И СчетУчета = &СчетУчета) КАК ЗатратыНаВыпуск) КАК Незавершенка
		                       |ГДЕ
		                       |	НЕ (Незавершенка.СчетУчета,Незавершенка.СтатьяЗатрат) В
		                       |				(ВЫБРАТЬ
							   |					ТаблТэр.СчетУчетаБУ,
		                       |					ТаблТэр.СтатьяЗатрат
		                       |				ИЗ
		                       |					ТаблТэр)
		                       |
		                       |СГРУППИРОВАТЬ ПО
		                       |	Незавершенка.Подразделение,
		                       |	Незавершенка.Затрата,
		                       |	Незавершенка.Заказ,
		                       |	Незавершенка.НоменклатурнаяГруппа,
		                       |	Незавершенка.СтатьяЗатрат,
		                       |	Незавершенка.СчетУчета,
		                       |	Незавершенка.ХарактеристикаЗатраты,
		                       |	Незавершенка.СерияЗатраты,
		                       |	Незавершенка.Организация");
	Иначе
		Запрос  = Новый Запрос("ВЫБРАТЬ
		                       |	ПРГ_СтатьиТЭРСрезПоследних.СтатьяЗатрат,
		                       |	ПРГ_СтатьиТЭРСрезПоследних.НеИспользоватьПодразделение,
		                       |	ПРГ_СтатьиТЭРСрезПоследних.СчетУчетаНУ КАК СчетУчета
		                       |ПОМЕСТИТЬ ТаблТэр
		                       |ИЗ
		                       |	РегистрСведений.ПРГ_СтатьиТЭР.СрезПоследних(&ДатаКонца, Организация = &Организация) КАК ПРГ_СтатьиТЭРСрезПоследних
		                       |ГДЕ
		                       |	ПРГ_СтатьиТЭРСрезПоследних.Использование
		                       |;
		                       |
		                       |////////////////////////////////////////////////////////////////////////////////
		                       |ВЫБРАТЬ
		                       |	Незавершенка.Подразделение,
		                       |	Незавершенка.СчетУчета,
		                       |	Незавершенка.СтатьяЗатрат,
		                       |	Незавершенка.НоменклатурнаяГруппа,
		                       |	Незавершенка.Заказ,
		                       |	Незавершенка.Затрата,
		                       |	Незавершенка.ХарактеристикаЗатраты,
		                       |	СУММА(Незавершенка.Количество) КАК Количество,
		                       |	СУММА(Незавершенка.Сумма) КАК Стоимость,
		                       |	Незавершенка.СерияЗатраты,
		                       |	Незавершенка.Организация,
		                       |	СУММА(Незавершенка.ПостояннаяРазница) КАК ПостояннаяРазница,
		                       |	СУММА(Незавершенка.ВременнаяРазница) КАК ВременнаяРазница
		                       |ИЗ
		                       |	(ВЫБРАТЬ
		                       |		НезавершенноеПроизводство.Подразделение КАК Подразделение,
		                       |		НезавершенноеПроизводство.СчетУчета КАК СчетУчета,
		                       |		НезавершенноеПроизводство.СтатьяЗатрат КАК СтатьяЗатрат,
		                       |		НезавершенноеПроизводство.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		                       |		НезавершенноеПроизводство.Заказ КАК Заказ,
		                       |		НезавершенноеПроизводство.Затрата КАК Затрата,
		                       |		НезавершенноеПроизводство.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
		                       |		НезавершенноеПроизводство.КоличествоОстаток КАК Количество,
		                       |		НезавершенноеПроизводство.СтоимостьОстаток КАК Сумма,
		                       |		НезавершенноеПроизводство.СерияЗатраты КАК СерияЗатраты,
		                       |		НезавершенноеПроизводство.Организация КАК Организация,
		                       |		НезавершенноеПроизводство.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
		                       |		НезавершенноеПроизводство.ВременнаяРазницаОстаток КАК ВременнаяРазница
		                       |	ИЗ
		                       |		РегистрНакопления.НезавершенноеПроизводствоНалоговыйУчет.Остатки(
		                       |				&ДатаОстатков,
		                       |				Организация = &Организация
		                       |					И СчетУчета = &СчетУчета
		                       |					И Подразделение = &Подразделение) КАК НезавершенноеПроизводство) КАК Незавершенка
		                       |ГДЕ
		                       |	НЕ (Незавершенка.СчетУчета, Незавершенка.СтатьяЗатрат) В
		                       |				(ВЫБРАТЬ
		                       |					ТаблТэр.СчетУчета,
		                       |					ТаблТэр.СтатьяЗатрат
		                       |				ИЗ
		                       |					ТаблТэр)
		                       |
		                       |СГРУППИРОВАТЬ ПО
		                       |	Незавершенка.Подразделение,
		                       |	Незавершенка.Затрата,
		                       |	Незавершенка.Заказ,
		                       |	Незавершенка.НоменклатурнаяГруппа,
		                       |	Незавершенка.СтатьяЗатрат,
		                       |	Незавершенка.СчетУчета,
		                       |	Незавершенка.ХарактеристикаЗатраты,
		                       |	Незавершенка.СерияЗатраты,
		                       |	Незавершенка.Организация");
	КонецЕсли;						   
  				   
  Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
  Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(СтруктураШапкиДокумента.Дата));
  Запрос.УстановитьПараметр("ДатаКонца",КонецМесяца(СтруктураШапкиДокумента.Дата));
  Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
  
  возврат Запрос;
КонецФункции	


Функция ПолучитьЗапросПоНастройкамРаспрВоды(СтруктураШапкиДокумента)
	Если СтруктураШапкиДокумента.Дата >= '20140101' Тогда //исправление ошибки 
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_РаспределениеВоды.Номенклатура,
	                      |	ПРГ_РаспределениеВоды.Организация,
	                      |	ПРГ_РаспределениеВоды.Подразделение,
						  |	//ДляБухУчета ПРГ_РаспределениеВоды.СчетУчета как СчетУчета,
	                      |	//ДляНалУчета ПРГ_РаспределениеВоды.СчетУчетаНУ как СчетУчета,
	                      |	СУММА(ПРГ_ФактическоеКоличествоДобытойВодыВода.Количество) КАК Количество,
	                      |	СУММА(ПРГ_ФактическоеКоличествоДобытойВодыВода.КоличествоПотреблено) КАК КоличествоПотреблено,
	                      |	ПРГ_РаспределениеВоды.СтатьяЗатратВодаТехнологическая,
	                      |	ПРГ_РаспределениеВоды.СпособРаспределения,
						  |//ДляБухУчета	ПРГ_РаспределениеВоды.СчетУчетаВодаТехнологическая как СчетУчетаВодаТехнологическая,
						  |//ДляНалУчета	ПРГ_РаспределениеВоды.СчетУчетаВодаТехнологическаяНУ как СчетУчетаВодаТехнологическая,
	                      |	ПРГ_РаспределениеВоды.ПодразделениеВодаТехнологическая
						  |	                      
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_РаспределениеВоды КАК ПРГ_РаспределениеВоды
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПРГ_ФактическоеКоличествоДобытойВоды.Вода КАК ПРГ_ФактическоеКоличествоДобытойВодыВода
	                      |		ПО ПРГ_РаспределениеВоды.Номенклатура = ПРГ_ФактическоеКоличествоДобытойВодыВода.Номенклатура
						  |	    И ПРГ_ФактическоеКоличествоДобытойВодыВода.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	                      |ГДЕ
	                      |	ПРГ_РаспределениеВоды.Организация = &Организация
	                      |	И ПРГ_ФактическоеКоличествоДобытойВодыВода.Ссылка.Организация = &Организация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПРГ_РаспределениеВоды.Организация,
	                      |	ПРГ_РаспределениеВоды.Номенклатура,
	                      |	ПРГ_РаспределениеВоды.Подразделение,
	                      |//ДляБухУчета 	ПРГ_РаспределениеВоды.СчетУчета,
						  |//ДляБухУчета 	ПРГ_РаспределениеВоды.СчетУчетаВодаТехнологическая,
	                      |//ДляНалУчета 	ПРГ_РаспределениеВоды.СчетУчетаНУ,
						  |//ДляНалУчета 	ПРГ_РаспределениеВоды.СчетУчетаВодаТехнологическаяНУ,
	                      |	ПРГ_РаспределениеВоды.СтатьяЗатратВодаТехнологическая,
	                      |	ПРГ_РаспределениеВоды.СпособРаспределения,
	                      |	ПРГ_РаспределениеВоды.ПодразделениеВодаТехнологическая");
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_РаспределениеВоды.Номенклатура,
	                      |	ПРГ_РаспределениеВоды.Организация,
	                      |	ПРГ_РаспределениеВоды.Подразделение,
						  |	//ДляБухУчета ПРГ_РаспределениеВоды.СчетУчета как СчетУчета,
	                      |	//ДляНалУчета ПРГ_РаспределениеВоды.СчетУчетаНУ как СчетУчета,
	                      |	СУММА(ПРГ_ФактическоеКоличествоДобытойВодыВода.Количество) КАК Количество,
	                      |	СУММА(ПРГ_ФактическоеКоличествоДобытойВодыВода.КоличествоПотреблено) КАК КоличествоПотреблено,
	                      |	ПРГ_РаспределениеВоды.СтатьяЗатратВодаТехнологическая,
	                      |	ПРГ_РаспределениеВоды.СпособРаспределения,
						  |//ДляБухУчета	ПРГ_РаспределениеВоды.СчетУчетаВодаТехнологическая как СчетУчетаВодаТехнологическая,
						  |//ДляНалУчета	ПРГ_РаспределениеВоды.СчетУчетаВодаТехнологическаяНУ как СчетУчетаВодаТехнологическая,
	                      |	ПРГ_РаспределениеВоды.ПодразделениеВодаТехнологическая
						  |	                      
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_РаспределениеВоды КАК ПРГ_РаспределениеВоды
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПРГ_ФактическоеКоличествоДобытойВоды.Вода КАК ПРГ_ФактическоеКоличествоДобытойВодыВода
	                      |		ПО ПРГ_РаспределениеВоды.Номенклатура = ПРГ_ФактическоеКоличествоДобытойВодыВода.Номенклатура
	                      |ГДЕ
	                      |	ПРГ_РаспределениеВоды.Организация = &Организация
	                      |	И ПРГ_ФактическоеКоличествоДобытойВодыВода.Ссылка.Организация = &Организация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПРГ_РаспределениеВоды.Организация,
	                      |	ПРГ_РаспределениеВоды.Номенклатура,
	                      |	ПРГ_РаспределениеВоды.Подразделение,
	                      |//ДляБухУчета 	ПРГ_РаспределениеВоды.СчетУчета,
						  |//ДляБухУчета 	ПРГ_РаспределениеВоды.СчетУчетаВодаТехнологическая,
	                      |//ДляНалУчета 	ПРГ_РаспределениеВоды.СчетУчетаНУ,
						  |//ДляНалУчета 	ПРГ_РаспределениеВоды.СчетУчетаВодаТехнологическаяНУ,
	                      |	ПРГ_РаспределениеВоды.СтатьяЗатратВодаТехнологическая,
	                      |	ПРГ_РаспределениеВоды.СпособРаспределения,
	                      |	ПРГ_РаспределениеВоды.ПодразделениеВодаТехнологическая");
	КонецЕсли;					  
						  
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						  
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Дата1",НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Дата2",КонецМесяца(СтруктураШапкиДокумента.Дата));
	возврат запрос;
КонецФункции

Процедура РаспределитьВОДУ(СтруктураШапкиДокумента)
	
	
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//	возврат;
	//КонецЕсли;	
	
	ЗапросНастройкиРаспр 	  = ПолучитьЗапросПоНастройкамРаспрВоды(СтруктураШапкиДокумента);
	ЗапросПоИспользованиюВоды = ПолучитьЗапросПоИсползованиюВоды(СтруктураШапкиДокумента);
	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		РегНезавершенноеПроизводство  = РегистрыНакопления.НезавершенноеПроизводствоНалоговыйУчет.СоздатьНаборЗаписей();
		РегНезавершенноеПроизводство.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		РегЗатратыНаВыпуск		  = РегистрыНакопления.ЗатратыНаВыпускПродукцииНалоговыйУчет.СоздатьНаборЗаписей();
		РегЗатратыНаВыпуск.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		ДвиженияХозрасч	= РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		ДвиженияХозрасч.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		ВыпускПродукции =  РегистрыНакопления.ВыпускПродукцииНалоговыйУчет.СоздатьНаборЗаписей();
		ВыпускПродукции.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		РегБазаРаспределения					  =  РегистрыСведений.БазаРаспределенияЗатратНалоговыйУчет.СоздатьНаборЗаписей();
		РегБазаРаспределения.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
	Иначе	
		
		РегНезавершенноеПроизводство  = РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.СоздатьНаборЗаписей();
		РегНезавершенноеПроизводство.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		РегЗатратыНаВыпуск		  = РегистрыНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет.СоздатьНаборЗаписей();
		РегЗатратыНаВыпуск.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		
		ДвиженияХозрасч	= РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		ДвиженияХозрасч.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		ВыпускПродукции =  РегистрыНакопления.ВыпускПродукцииБухгалтерскийУчет.СоздатьНаборЗаписей();
		ВыпускПродукции.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		
		РегБазаРаспределения					  =  РегистрыСведений.БазаРаспределенияЗатратБухгалтерскийУчет.СоздатьНаборЗаписей();
		РегБазаРаспределения.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	КонецЕсли;
	
	ТаблХозрасчетный =	ДвиженияХозрасч.Выгрузить();

	ВидУчетаПоПБУ18 = Неопределено;
	
	ТаблНезавершПодразделениеВода	  		  = РегНезавершенноеПроизводство.Выгрузить();
	ТаблНезавершПроизводствоДляРаспределния	  = РегНезавершенноеПроизводство.Выгрузить();
	ТаблЗатратыНаВыпуск 					  = РегЗатратыНаВыпуск.Выгрузить();
	
	РегНоменклИскл = РегистрыСведений.НоменклатураИсключаемаяИзБазыРаспределенияОрганизаций.СоздатьНаборЗаписей();
	РегНоменклИскл.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	ТаблНоменклИскл = РегНоменклИскл.Выгрузить();
	
	

	
	//ЗапросНастройкиРаспр.Выполнить().Выгрузить().ВыбратьСтроку();
	ЗапросНезавершенкаВода = ПолучитьЗапросПоНезавершенномуПроизводствуВоды(СтруктураШапкиДокумента);
	ТаблВыпуска = Новый ТаблицаЗначений;
	ТаблВыпуска.Колонки.Добавить("ПодразделениеПолучатель");
	ТаблВыпуска.Колонки.Добавить("СтатьяЗатратПолучатель");
	ТаблВыпуска.Колонки.Добавить("НоменклатурнаяГруппаПолучатель");
	ТаблВыпуска.Колонки.Добавить("ПродукцияПолучатель");
	ТаблВыпуска.Колонки.Добавить("СчетДт");
	ТаблВыпуска.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	ТаблВыпуска.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));	
	ТаблВыпуска.Колонки.Добавить("ВременнаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));	
	ТаблВыпуска.Колонки.Добавить("ПостояннаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));	
	
	ВыборкаПоНастройкаВоды = ЗапросНастройкиРаспр.Выполнить().Выбрать();
	Пока ВыборкаПоНастройкаВоды.Следующий() Цикл
		// коэфициенты
		КоличествоВсего 	 = ВыборкаПоНастройкаВоды.Количество;
		КоличествоПотреблено = ВыборкаПоНастройкаВоды.КоличествоПотреблено;
		Если КоличествоПотреблено = 0 Тогда
			Сообщить("Не задано для "+ВыборкаПоНастройкаВоды.Номенклатура+" количество потребленной воды !!!
			| Затраты не будут распределены !!!");
			продолжить;
		КонецЕсли;	
		
		НоваяНоменклИскл = ТаблНоменклИскл.Добавить();
		НоваяНоменклИскл.Номенклатура  = ВыборкаПоНастройкаВоды.Номенклатура;
		
		КоличествоВсего 	 = ?(КоличествоВсего< КоличествоПотреблено,КоличествоПотреблено,КоличествоВсего);
		ЗапросНезавершенкаВода.УстановитьПараметр("Подразделение",ВыборкаПоНастройкаВоды.Подразделение);
		ЗапросНезавершенкаВода.УстановитьПараметр("СчетУчета",ВыборкаПоНастройкаВоды.СчетУчета);
		ВыборкаНезавВода  = ЗапросНезавершенкаВода.Выполнить().Выбрать();
		
		ЗапросПоИспользованиюВоды.УстановитьПараметр("Затрата",ВыборкаПоНастройкаВоды.Номенклатура);
		
		ТабИспВоды = ЗапросПоИспользованиюВоды.Выполнить().Выгрузить(); 
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		//	ТабИспВоды.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства,"СчетУчета");
		КонецЕсли;	
		
		ТаблВнезавершенку = ТабИспВоды;
		ТаблДляСтоков     = ТабИспВоды.Скопировать(,"СчетУчета");
		ТаблДляСтоков.Свернуть("СчетУчета");
		ТаблВнезавершенку.Колонки.Добавить("СуммаРаспределения",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ТаблВнезавершенку.Колонки.Добавить("СуммаРаспределенияПостояннаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ТаблВнезавершенку.Колонки.Добавить("СуммаРаспределенияВременнаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ТаблВнезавершенку.Колонки.Добавить("ПостояннаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ТаблВнезавершенку.Колонки.Добавить("ВременнаяРазница",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ДобавлятьКоличествоЗатраты = Истина;
		
		//ТаблВнезавершенку.Свернуть("Подразделение,СтатьяЗатрат,СчетУчета,НоменклатурнаяГруппа,Заказ,ЗаказНЗП","Количество");
		//ТаблВнезавершенку.Колонки.Добавить("СуммаРаспределения",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		//ТабИспВоды.ВыбратьСтроку(); // идет вбазу
		
		Если ТабИспВоды.Количество() = 0 Тогда // ничего не распределять
			продолжить;
		КонецЕсли;	
		СуммаЗатрат = 0;
		ИтогоНаСтоки = 0;
		ИтогоНаВоду  = 0;
		
		СуммаЗатратВременнаяРазница  = 0;
		ИтогоНаСтокиВременнаяРазница = 0;
		ИтогоНаВодуВременнаяРазница  = 0;
		
		СуммаЗатратПостояннаяРазница  = 0;
		ИтогоНаСтокиПостояннаяРазница = 0;
		ИтогоНаВодуПостояннаяРазница  = 0;
		
		ТаблВыпуска.Очистить();
		
		Пока ВыборкаНезавВода.Следующий() Цикл
			 ИтогоКолВо 	        		 = ТаблВнезавершенку.Итог("Количество");
			 
			 СуммаНаВоду   = Окр(ВыборкаНезавВода.Стоимость * КоличествоПотреблено / КоличествоВсего,2);
			 СуммаНаСтоки  = ВыборкаНезавВода.Стоимость - СуммаНаВоду;
			 
			 СуммаЗатрат   = СуммаЗатрат + ВыборкаНезавВода.Стоимость;
			 
			 ИтогоНаСтоки = ИтогоНаСтоки +СуммаНаСтоки;
			 ИтогоНаВоду  = ИтогоНаВоду  +СуммаНаВоду;
			 
			 Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				 
				   СуммаНаВодуПостояннаяРазница  = Окр(ВыборкаНезавВода.ПостояннаяРазница * КоличествоПотреблено / КоличествоВсего,2);
				   СуммаНаСтокиПостояннаяРазница = ВыборкаНезавВода.ПостояннаяРазница - СуммаНаВодуПостояннаяРазница;
				   
				   СуммаНаВодуВременнаяРазница   =  Окр(ВыборкаНезавВода.ВременнаяРазница * КоличествоПотреблено / КоличествоВсего,2);;
				   СуммаНаСтокиВременнаяРазница  =  ВыборкаНезавВода.ВременнаяРазница-СуммаНаВодуВременнаяРазница;
				   
				   СуммаЗатратВременнаяРазница  = СуммаЗатратВременнаяРазница  + ВыборкаНезавВода.ВременнаяРазница;
				   СуммаЗатратПостояннаяРазница = СуммаЗатратПостояннаяРазница + ВыборкаНезавВода.ПостояннаяРазница;
					
			  Иначе
				   СуммаНаВодуВременнаяРазница = 0;
				   СуммаНаВодуПостояннаяРазница = 0;
					
				   СуммаНаСтокиВременнаяРазница = 0;
				   СуммаНаСтокиПостояннаяРазница = 0;
					
				   СуммаЗатратВременнаяРазница  = 0;
				   СуммаЗатратПостояннаяРазница = 0;
					
			 КонецЕслИ; 
				
				
			 ИтогоНаСтокиПостояннаяРазница = ИтогоНаСтокиПостояннаяРазница + СуммаНаСтокиПостояннаяРазница;
			 ИтогоНаВодуПостояннаяРазница  = ИтогоНаВодуПостояннаяРазница  + СуммаНаВодуПостояннаяРазница;
			   
			 ИтогоНаСтокиВременнаяРазница  = ИтогоНаСтокиВременнаяРазница  + СуммаНаСтокиВременнаяРазница;
			 ИтогоНаВодуВременнаяРазница   = ИтогоНаВодуВременнаяРазница   + СуммаНаВодуВременнаяРазница;
			   
			 
			 //СформироватьДвиженияПоПодразделениюЗатратВоды(ВыборкаНезавВода,ТаблНезавершПодразделениеВода,СтруктураШапкиДокумента,ВыборкаПоНастройкаВоды);
			 СформироватьДвиженияПоПодразделениюЗатратВоды(ВыборкаНезавВода,ТаблНезавершПодразделениеВода,СтруктураШапкиДокумента,ВыборкаПоНастройкаВоды,РегЗатратыНаВыпуск);
			 //СформироватьЗатратыНаВыпускПоВоде(СтруктураШапкиДокумента,ВыборкаПоНастройкаВоды,ВыборкаНезавВода,РегЗатратыНаВыпуск);
			 
			 ТаблВнезавершенку.ЗаполнитьЗначения(0,"Сумма");
			 ТаблВнезавершенку.ЗаполнитьЗначения(0,"ПостояннаяРазница");
			 ТаблВнезавершенку.ЗаполнитьЗначения(0,"ВременнаяРазница");
			 ИтогоКолВо 	 = ТаблВнезавершенку.Итог("Количество");
		     РаспрСуммаВоды  = СуммаНаВоду;
			 РаспрСуммаВодыВременнаяРазница   = СуммаНаВодуВременнаяРазница;
			 РаспрСуммаВодыПостояннаяРазница  = СуммаНаВодуПостояннаяРазница;
			 
		     Для Каждого ТекСтрока Из ТаблВнезавершенку Цикл
				 ПогСумма  		 = Окр(РаспрСуммаВоды * ТекСтрока.Количество / ИтогоКолВо,2);
				 ТекСтрока.Сумма = ПогСумма;
				 ТекСтрока.СуммаРаспределения = ТекСтрока.СуммаРаспределения + ТекСтрока.Сумма;
				 
				 ПогСуммаПостояннаяРазница   = Окр(РаспрСуммаВодыПостояннаяРазница * ТекСтрока.Количество / ИтогоКолВо,2);
				 ТекСтрока.ПостояннаяРазница = ПогСуммаПостояннаяРазница;
				 ТекСтрока.СуммаРаспределенияПостояннаяРазница = ТекСтрока.СуммаРаспределенияПостояннаяРазница + ТекСтрока.ПостояннаяРазница;
				 
				 ПогСуммаВременнаяРазница   =  Окр(РаспрСуммаВодыВременнаяРазница * ТекСтрока.Количество / ИтогоКолВо,2);
				 ТекСтрока.ВременнаяРазница = ПогСуммаВременнаяРазница;
				 ТекСтрока.СуммаРаспределенияВременнаяРазница = ТекСтрока.СуммаРаспределенияВременнаяРазница + ТекСтрока.ВременнаяРазница;
				 
				 //ДобавитьДвиженияНезавершенкаВода(ТекСтрока,ТаблНезавершПроизводствоДляРаспределния,СтруктураШапкиДокумента,ВыборкаПоНастройкаВоды.Номенклатура,ТаблЗатратыНаВыпуск);
				 СформироватьДвиженияПоРаспределениюВода(ТекСтрока, ВыборкаНезавВода,
				 ТаблНезавершПодразделениеВода,ТаблНезавершПроизводствоДляРаспределния,ТаблЗатратыНаВыпуск,
				 РегНезавершенноеПроизводство,ДвиженияХозрасч,СтруктураШапкиДокумента,ВидУчетаПоПБУ18,ВыборкаПоНастройкаВоды.Номенклатура,
				 ДобавлятьКоличествоЗатраты );
				 
				 РаспрСуммаВоды = РаспрСуммаВоды - ПогСумма;
				 
				 РаспрСуммаВодыВременнаяРазница   = РаспрСуммаВодыВременнаяРазница  - ПогСуммаВременнаяРазница;
				 РаспрСуммаВодыПостояннаяРазница  = РаспрСуммаВодыПостояннаяРазница - ПогСуммаПостояннаяРазница;
				 
				 ИтогоКолВо     = ИтогоКолВо -ТекСтрока.Количество;
			 Конеццикла; 
			 ДобавлятьКоличествоЗатраты = Ложь;
			 ОприходоватьСтокиВНезавершенку(ТекСтрока,СтруктураШапкиДокумента,ВыборкаНезавВода,ВыборкаПоНастройкаВоды,СуммаНаСтоки,ТаблНезавершПроизводствоДляРаспределния,ДвиженияХозрасч,СуммаНаСтокиВременнаяРазница,СуммаНаСтокиПостояннаяРазница);
			 //КонецЦикла; 
		 КонецЦикла;	
		 
		 
		 //Для Каждого ТекСтрока из ТаблДляСтоков Цикл
		 Для Каждого ТекСтрока Из ТаблВнезавершенку Цикл
			 НоваяСтрока = ТаблВыпуска.Добавить();
			 НоваяСтрока.ПодразделениеПолучатель 		= ТекСтрока.Подразделение;
			 НоваяСтрока.СтатьяЗатратПолучатель  		= ТекСтрока.СтатьяЗатрат;
			 НоваяСтрока.НоменклатурнаяГруппаПолучатель = ТекСтрока.НоменклатурнаяГруппа;
			 НоваяСтрока.ПродукцияПолучатель		    = ТекСтрока.Продукция;
			 НоваяСтрока.Количество						= ТекСтрока.Количество;
			 НоваяСтрока.СчетДт							= ТекСтрока.СчетУчета;
			 НоваяСтрока.Сумма							= ТекСтрока.СуммаРаспределения;
			 НоваяСтрока.ВременнаяРазница				= ТекСтрока.СуммаРаспределенияВременнаяРазница;
			 НоваяСтрока.ПостояннаяРазница				= ТекСтрока.СуммаРаспределенияПостояннаяРазница;
		 КонецЦикла;
		 
		 
		 Если КоличествоПотреблено < КоличествоВсего Тогда // стоки
			 НоваяСтрока = ТаблВыпуска.Добавить();
			 НоваяСтрока.ПодразделениеПолучатель 		= ВыборкаПоНастройкаВоды.ПодразделениеВодаТехнологическая;
			 НоваяСтрока.СтатьяЗатратПолучатель  		= ВыборкаПоНастройкаВоды.СтатьяЗатратВодаТехнологическая;
			 НоваяСтрока.Количество						= КоличествоВсего-КоличествоПотреблено;
			 НоваяСтрока.Сумма							= ИтогоНаСтоки;
			 НоваяСтрока.СчетДт 						= ВыборкаПоНастройкаВоды.СчетУчетаВодаТехнологическая;
			 НоваяСтрока.ВременнаяРазница				= ИтогоНаСтокиВременнаяРазница;
			 НоваяСтрока.ПостояннаяРазница				= ИтогоНаСтокиПостояннаяРазница;
		 КонецЕсли; 
		 
		 Для Каждого ТекСтрока Из ТаблВнезавершенку Цикл
		 	ОприходоватьВНезавершенкуИнФуПоВоде(ТекСтрока,СтруктураШапкиДокумента,ТаблНезавершПроизводствоДляРаспределния,ВыборкаПоНастройкаВоды.Номенклатура);
		 КонецЦикла;	
		 
		 ТабИспВоды.Свернуть("Подразделение,СчетУчета,НоменклатурнаяГруппа,заказ,Продукция,ХарактеристикаПродукции,СерияПродукции,Спецификация,ЗаказНЗП","Количество");
			 ТаблВыпуска.Свернуть("СчетДт,ПодразделениеПолучатель,СтатьяЗатратПолучатель,НоменклатурнаяГруппаПолучатель,ПродукцияПолучатель","Количество,Сумма,ВременнаяРазница,ПостояннаяРазница");
		 СформироватьДвиженияПоВыпускуПоВоде(СтруктураШапкиДокумента,ВыпускПродукции,ТабИспВоды,КоличествоВсего,ВыборкаПоНастройкаВоды,СуммаЗатрат,ТаблВыпуска,РегЗатратыНаВыпуск);
		    ///ЗаписатьИнформациюПоБазеРаспределения(ТабИспВоды,СтруктураШапкиДокумента,РегБазаРаспределения,ВыборкаПоНастройкаВоды.Номенклатура);
			//СформироватьДвиженияНезавешенноеПроизводтвоВода();
			//распределеим стоимость
		
			//Выборка.ВыбратьСтроку();
	КонецЦикла;
	
	 РегНезавершенноеПроизводство.мПериод  = СтруктураШапкиДокумента.Дата;
	 РегНезавершенноеПроизводство.мТаблицаДвижений =ТаблНезавершПодразделениеВода; 
	 РегНезавершенноеПроизводство.ВыполнитьРасход();
	 РегНезавершенноеПроизводство.Записать(Ложь);
	 
	 РегНезавершенноеПроизводство.мПериод  = СтруктураШапкиДокумента.Дата;
	 РегНезавершенноеПроизводство.мТаблицаДвижений =ТаблНезавершПроизводствоДляРаспределния; 
	 РегНезавершенноеПроизводство.ВыполнитьПриход();
	 РегНезавершенноеПроизводство.Записать(Ложь);
	 
	 РегЗатратыНаВыпуск.мПериод  = СтруктураШапкиДокумента.Дата;
	 РегЗатратыНаВыпуск.мТаблицаДвижений = ТаблЗатратыНаВыпуск; 
	 РегЗатратыНаВыпуск.ДобавитьДвижение();
	 РегЗатратыНаВыпуск.Записать(Ложь);
	 
	 ДвиженияХозрасч.Записать(Ложь);
	 
	 ТаблНоменклИскл.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	 ТаблНоменклИскл.Свернуть("Активность,Период,Организация,Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
	 РегНоменклИскл.мПериод = СтруктураШапкиДокумента.Дата;
	 РегНоменклИскл.мТаблицаДвижений = ТаблНоменклИскл;
	 РегНоменклИскл.ВыполнитьДвижения();
	 РегНоменклИскл.Записать(Ложь);
	 
	 
	 
	 Если РегБазаРаспределения.Количество() > 0 Тогда
		 РегБазаРаспределения.Записать(Ложь);
	 КонецЕслИ;	
	 
	 Если ВыпускПродукции.Количество() > 0 Тогда
		 ВыпускПродукции.Записать();
	 КонецЕсли;
	
	
	//ЗапросИспВода =  ПолучитьЗапросПоИсползованиюВоды(СтруктураШапкиДокумента);
	//ЗапросИспВода.УстановитьПараметр("Затрата",Вода);
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВыпускуПоВоде(СтруктураШапкиДокумента,ВыпускПродукции,ТабИспВоды,КоличествоВсего,ВыборкаПоНастройкаВоды,СуммаЗатрат,ТаблВыпуска,РегЗатратыНавыпуск)
	
	
	//ТаблВыпуска.Свернуть("ПодразделениеПолучатель,СтатьяЗатратПолучатель,НоменклатурнаяГруппаПолучатель,ПродукцияПолучатель","Количество,Сумма");	
	
	Для Каждого ТекСтрока Из ТаблВыпуска Цикл
		НоваяСтрока = ВыпускПродукции.Добавить();
		НоваяСтрока.Период 	      = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.Организация   = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Продукция     = ВыборкаПоНастройкаВоды.Номенклатура;
		НоваяСтрока.Подразделение = ВыборкаПоНастройкаВоды.Подразделение;
		НоваяСтрока.Качество	  = Справочники.Качество.Новый;
		НоваяСтрока.Количество	  = ТекСтрока.Количество;
		НоваяСтрока.Стоимость     = ТекСтрока.Сумма; 
		НоваяСтрока.КодОперации   = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты; 
		НоваяСтрока.СчетУчетаНЗП  = ВыборкаПоНастройкаВоды.СчетУчета; 
		
		НоваяСтрока.ПодразделениеПолучатель			= ТекСтрока.ПодразделениеПолучатель;
		НоваяСтрока.СтатьяЗатратПолучатель          = ТекСтрока.СтатьяЗатратПолучатель;
		НоваяСтрока.НоменклатурнаяГруппаПолучатель  = ТекСтрока.НоменклатурнаяГруппаПолучатель;
		НоваяСтрока.ПродукцияПолучатель				= ТекСтрока.ПродукцияПолучатель;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			НоваяСтрока.ВременнаяРазница	  = ТекСтрока.ВременнаяРазница;
			НоваяСтрока.ПостояннаяРазница	  = ТекСтрока.ПостояннаяРазница;
			НоваяСтрока.СчетДт 				  = ТекСтрока.СчетДт;
			
		Иначе
			НоваяСтрока.СчетДт 				  = ТекСтрока.СчетДт;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
	КонецЕсли;	
	
	
//	НоваяСтрока.
	
КонецПроцедуры	
Процедура ДобавитьДвиженияНезавершенкаВода(ТекСтрока,ТаблНезавершПроизводствоДляРаспределния,СтруктураШапкиДокумента,Затрата,ТаблЗатратыНаВыпуск)
	
	НоваяСтрока = ТаблНезавершПроизводствоДляРаспределния.Добавить();
	НоваяСтрока.Организация 	= СтруктураШапкиДокумента.Организация;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока,"Подразделение,СтатьяЗатрат,СчетУчета,НоменклатурнаяГруппа,Заказ");
	НоваяСтрока.Заказ  	     = ?(ЗначениеЗаполнено(ТекСтрока.ЗаказНЗП),ТекСтрока.ЗаказНЗП,ТекСтрока.Заказ);
	НоваяСтрока.Количество	 = ТекСтрока.Количество;
	НоваяСтрока.Стоимость    = ТекСтрока.Сумма;
	НоваяСтрока.Затрата 	 = Затрата;
	НоваяСтрока.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;
	
	
	НоваяСтрока				    =  ТаблЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Организация 	= СтруктураШапкиДокумента.Организация;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока,"Подразделение,СтатьяЗатрат,СчетУчета,НоменклатурнаяГруппа,Продукция,ХарактеристикаПродукции,СерияПродукции,Спецификация,СтатьяЗатрат,Затрата,ХарактеристикаЗатраты,СерияЗатраты,Заказ,Сумма");
	НоваяСтрока.НоменклатурнаяГруппаНЗП	= ТекСтрока.НоменклатурнаяГруппа;
	НоваяСтрока.ПодразделениеНЗП		= ТекСтрока.Подразделение;
	НоваяСтрока.ЗаказНЗП				= ТекСтрока.Заказ;
	НоваяСтрока.КодОперации  = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
	КонецЕсли;	
	
	//НоваяСтрока.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.УслугиКонтрагентаНаПроизводство
	///ТаблВнезавершенку.Свернуть("Подразделение,СтатьяЗатрат,СчетУчета,НоменклатурнаяГруппа,Заказ,ЗаказНЗП","Количество");
	
КонецПроцедуры	

Процедура ЗаписатьИнформациюПоБазеРаспределения(ТабИспВоды,СтруктураШапкиДокумента,РегБазаРаспределения,СпособРаспределенияЗатрат)
	ИндексБазы = 0;
	//Для каждого ТекСтрока Из ТабИспВоды Цикл
	//	ИндексБазы 				= ИндексБазы +1;
	//	НоваяЗапись  			= РегБазаРаспределения.Добавить();
	//	НоваяЗапись.Период		 = СтруктураШапкиДокумента.дата;	
	//	НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация; 
	//	НоваяЗапись.СпособРаспределенияЗатрат = СпособРаспределенияЗатрат;
	//	НоваяЗапись.Подразделение   		  = ТекСтрока.подразделение;
	//	НоваяЗапись.СчетУчета 				  = ТекСтрока.СчетУчета;
	//	НоваяЗапись.НоменклатурнаяГруппа 	  = ТекСтрока.НоменклатурнаяГруппа;
	//	НоваяЗапись.Заказ					  = ТекСтрока.заказ;
	//	НоваяЗапись.Продукция				  = ТекСтрока.Продукция;
	//	НоваяЗапись.ХарактеристикаПродукции	  = ТекСтрока.ХарактеристикаПродукции;
	//	НоваяЗапись.СерияПродукции			  = ТекСтрока.СерияПродукции;
	//	НоваяЗапись.Спецификация			  = ТекСтрока.Спецификация;
	//	//сделать определение от заказа
	//	НоваяЗапись.ВариантВыпускаПродукции   = Перечисления.ВариантыВыпускаПродукции.СобственнаяПродукция;
	//	НоваяЗапись.ВидВыпуска				  = Перечисления.ВидыВыпуска.Выпуск;
	//	НоваяЗапись.НоменклатурнаяГруппаНЗП 	= ТекСтрока.НоменклатурнаяГруппа;
	//	НоваяЗапись.ПодразделениеНЗП			= ТекСтрока.Подразделение;
	//	НоваяЗапись.ЗаказНЗП					= ТекСтрока.ЗаказНЗП;
	//	НоваяЗапись.БазаПриход					= ТекСтрока.Количество;
	//	НоваяЗапись.База						= ТекСтрока.Количество;
	//	НоваяЗапись.ИндексБазыРаспределения     = ИндексБазы;
	//КонецЦикла;	
		
	
КонецПроцедуры	

Процедура СформироватьДвиженияПоПодразделениюЗатратВоды(ВыборкаНезавВода,ТаблНезавершПодразделениеВода,СтруктураШапкиДокумента,ВыборкаПоНастройкаВоды,РегЗатратыНаВыпуск)
	
	
	если ВыборкаНезавВода.Количество = 0 и ВыборкаНезавВода.Стоимость = 0 и ВыборкаНезавВода.ПостояннаяРазница = 0 и ВыборкаНезавВода.ВременнаяРазница = 0 Тогда
		возврат;
	КонецЕсли;	
	
	НоваяСтрока = ТаблНезавершПодразделениеВода.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаНезавВода);
	НоваяСтрока.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент;
	
	///НоваяСтрока = РегЗатратыНаВыпуск.Добавить();
	
	//возврат;
	НоваяСтрока = РегЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.Активность = Истина;
	
	НоваяСтрока.Подразделение  = ВыборкаНезавВода.Подразделение;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.СчетУчета 	= ВыборкаНезавВода.СчетУчета;
		НоваяСтрока.Организация	= ВыборкаНезавВода.Организация;
	КонецЕсли;	
		
	НоваяСтрока.Продукция 	= ВыборкаПоНастройкаВоды.Номенклатура;
	
	НоваяСтрока.Затрата 	= ВыборкаНезавВода.Затрата;
	НоваяСтрока.Заказ		= ВыборкаНезавВода.Заказ;
	НоваяСтрока.ХарактеристикаЗатраты =ВыборкаНезавВода.ХарактеристикаЗатраты;
	НоваяСтрока.СерияЗатраты          = ВыборкаНезавВода.СерияЗатраты;
	
	НоваяСтрока.НоменклатурнаяГруппаНЗП = ВыборкаНезавВода.НоменклатурнаяГруппа;
	НоваяСтрока.ЗаказНЗП = ВыборкаНезавВода.Заказ;
	НоваяСтрока.ПодразделениеНЗП = ВыборкаНезавВода.Подразделение;
	
	Если СтруктураШапкиДокумента.Свойство("ДетализацияПоФиксированнойСтатьеЗатрат") Тогда
		ДетализацияПоФиксированнойСтатьеЗатрат = СтруктураШапкиДокумента.ДетализацияПоФиксированнойСтатьеЗатрат;
	Иначе
		ДетализацияПоФиксированнойСтатьеЗатрат = Ложь;
	КонецЕсли;
	
	НоваяСтрока.СтатьяЗатрат  = ВыборкаНезавВода.СтатьяЗатрат;
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	
	НоваяСтрока.КосвенныеЗатраты = Ложь;
	НоваяСтрока.ЗатратыВстречногоВыпуска = Ложь;
	
	НоваяСтрока.Количество = ВыборкаНезавВода.Количество;
	НоваяСтрока.Сумма = ВыборкаНезавВода.Стоимость;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		 НоваяСтрока.ПостояннаяРазница   =  ВыборкаНезавВода.ПостояннаяРазница;
		 НоваяСтрока.ВременнаяРазница    =  ВыборкаНезавВода.ВременнаяРазница;
	КонецЕсли;	
	
		
	
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//	НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
	//	НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	//КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	//Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
	//	НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	//КонецЕсли;
	

	
КонецПроцедуры	

Процедура ОприходоватьВНезавершенкуИнФуПоВоде(ТекСтрока,СтруктураШапкиДокумента,ТаблНезавершПроизводствоДляРаспределния,Затрата)
	
	
	
	НоваяСтрока = ТаблНезавершПроизводствоДляРаспределния.Добавить();
	НоваяСтрока.Организация 	= СтруктураШапкиДокумента.Организация;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока,"Подразделение,СтатьяЗатрат,СчетУчета,НоменклатурнаяГруппа,Заказ");
	НоваяСтрока.Заказ  	     = ?(ЗначениеЗаполнено(ТекСтрока.ЗаказНЗП),ТекСтрока.ЗаказНЗП,ТекСтрока.Заказ);
	НоваяСтрока.Количество	 = ТекСтрока.Количество;
	НоваяСтрока.Стоимость    = ТекСтрока.СуммаРаспределения;
	НоваяСтрока.Затрата 	 = Затрата;
	НоваяСтрока.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ВременнаяРазница    = ТекСтрока.СуммаРаспределенияВременнаяРазница;
		НоваяСтрока.ПостояннаяРазница   = ТекСтрока.СуммаРаспределенияПостояннаяРазница;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОприходоватьСтокиВНезавершенку(ТекСтрока,СтруктураШапкиДокумента,ВыборкаНезавВода,ВыборкаПоНастройкаВоды,СуммаНаСтоки,ТаблНезавершПроизводствоДляРаспределния,РегистрБух,СуммаНаСтокиВременнаяРазница,СуммаНаСтокиПостояннаяРазница)
	  НоваяСтрока = ТаблНезавершПроизводствоДляРаспределния.Добавить();
	  НоваяСтрока.Организация   = СтруктураШапкиДокумента.Организация;
	  НоваяСтрока.Подразделение = ВыборкаПоНастройкаВоды.ПодразделениеВодаТехнологическая;
	  НоваяСтрока.СтатьяЗатрат  = ВыборкаПоНастройкаВоды.СтатьяЗатратВодаТехнологическая;
	  НоваяСтрока.СчетУчета		= ВыборкаПоНастройкаВоды.СчетУчетаВодаТехнологическая;
	  НоваяСтрока.Стоимость		= СуммаНаСтоки;
	  НоваяСтрока.КодОперации   = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
	  Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		  НоваяСтрока.ВременнаяРазница    = СуммаНаСтокиВременнаяРазница;
		  НоваяСтрока.ПостояннаяРазница   = СуммаНаСтокиПостояннаяРазница;
		  
	  КонецЕсли; 
	  
	  Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если СуммаНаСтоки <> 0 Тогда  
			НоваяПроводка = РегистрБух.Добавить();
			НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность	 = Истина;
			НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, вода технологическая";
			//													
			НоваяПроводка.Сумма = СуммаНаСтоки;
			//
			НоваяПроводка.СчетДт = ВыборкаПоНастройкаВоды.СчетУчетаВодаТехнологическая;
			//
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ВыборкаПоНастройкаВоды.ПодразделениеВодаТехнологическая);		
			//БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ВыборкаПоНастройкаВоды.СтатьяЗатратВодаТехнологическая);
			//												
			НоваяПроводка.СчетКт = ВыборкаНезавВода.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ВыборкаНезавВода.Подразделение);		
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаНезавВода.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ВыборкаНезавВода.СтатьяЗатрат);
		 КонецЕсли;	
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда 
			Если СуммаНаСтоки <> 0 Тогда
				НоваяПроводка = РегистрБух.Добавить();
				НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность	 = Истина;
				НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
				НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, вода технологическая";
				НоваяПроводка.ВидУчетаДт 	 = Перечисления.ВидыУчетаПоПБУ18.НУ;
				//													
				НоваяПроводка.Сумма = СуммаНаСтоки;
				//
				НоваяПроводка.СчетДт = ВыборкаПоНастройкаВоды.СчетУчетаВодаТехнологическая;
				//
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ВыборкаПоНастройкаВоды.ПодразделениеВодаТехнологическая);		
				//БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ВыборкаПоНастройкаВоды.СтатьяЗатратВодаТехнологическая);
				//												
				НоваяПроводка.СчетКт = ВыборкаНезавВода.СчетУчета;
				НоваяПроводка.ВидУчетаКт 	 = Перечисления.ВидыУчетаПоПБУ18.НУ;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ВыборкаНезавВода.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаНезавВода.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ВыборкаНезавВода.СтатьяЗатрат);
			КонецЕсли;	
			
			Если СуммаНаСтокиВременнаяРазница <> 0 Тогда
				НоваяПроводка = РегистрБух.Добавить();
				НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность	 = Истина;
				НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
				НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, вода технологическая";
				НоваяПроводка.ВидУчетаДт 	 = Перечисления.ВидыУчетаПоПБУ18.Вр;
				//													
				НоваяПроводка.Сумма = СуммаНаСтокиВременнаяРазница;
				//
				НоваяПроводка.СчетДт = ВыборкаПоНастройкаВоды.СчетУчетаВодаТехнологическая;
				//
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ВыборкаПоНастройкаВоды.ПодразделениеВодаТехнологическая);		
				//БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ВыборкаПоНастройкаВоды.СтатьяЗатратВодаТехнологическая);
				//												
				НоваяПроводка.СчетКт = ВыборкаНезавВода.СчетУчета;
				НоваяПроводка.ВидУчетаКт 	 = Перечисления.ВидыУчетаПоПБУ18.Вр;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ВыборкаНезавВода.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаНезавВода.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ВыборкаНезавВода.СтатьяЗатрат);
			КонецЕсли;	
			
			Если СуммаНаСтокиПостояннаяРазница <> 0 Тогда
				
				НоваяПроводка = РегистрБух.Добавить();
				НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность	 = Истина;
				НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
				НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, вода технологическая";
				НоваяПроводка.ВидУчетаДт 	 = Перечисления.ВидыУчетаПоПБУ18.ПР;
				//													
				НоваяПроводка.Сумма = СуммаНаСтокиПостояннаяРазница;
				//
				НоваяПроводка.СчетДт = ВыборкаПоНастройкаВоды.СчетУчетаВодаТехнологическая;
				//
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ВыборкаПоНастройкаВоды.ПодразделениеВодаТехнологическая);		
				//БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ВыборкаПоНастройкаВоды.СтатьяЗатратВодаТехнологическая);
				//												
				НоваяПроводка.СчетКт = ВыборкаНезавВода.СчетУчета;
				НоваяПроводка.ВидУчетаКт 	 = Перечисления.ВидыУчетаПоПБУ18.ПР;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ВыборкаНезавВода.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаНезавВода.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ВыборкаНезавВода.СтатьяЗатрат);
			КонецЕсли;	
			
		//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		//	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
		//	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		//		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		//		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;		  
	  
КонецПроцедуры	


Процедура СформироватьДвиженияПоРаспределениюВода(ТекСтрока,ВыборкаНезавВода,ТаблНезавершПодразделениеВода,ТаблНезавершПроизводствоДляРаспределния,ТаблЗатратыНаВыпуск,
	РегНезавершенноеПроизводство,РегистрБух,СтруктураШапкиДокумента,ВидУчетаПоПБУ18,Затрата,ДобавлятьКоличествоЗатраты )
	
	
	НоваяСтрока				    =  ТаблЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Организация 	= СтруктураШапкиДокумента.Организация;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока,"Подразделение,СтатьяЗатрат,СчетУчета,НоменклатурнаяГруппа,Продукция,ХарактеристикаПродукции,СерияПродукции,Спецификация,СтатьяЗатрат,Затрата,ХарактеристикаЗатраты,СерияЗатраты,Заказ,Сумма");
	НоваяСтрока.НоменклатурнаяГруппаНЗП	= ТекСтрока.НоменклатурнаяГруппа;
	НоваяСтрока.ПодразделениеНЗП		= ТекСтрока.Подразделение;
	НоваяСтрока.ЗаказНЗП				= ТекСтрока.Заказ;
	НоваяСтрока.КодОперации  			= Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.ПРГ_КорСчет					= ВыборкаНезавВода.СчетУчета; 
		НоваяСтрока.ПРГ_КорПодразделение    	= ВыборкаНезавВода.Подразделение; 
		НоваяСтрока.ПРГ_КорСтатьяЗатрат			= ВыборкаНезавВода.СтатьяЗатрат;
		НоваяСтрока.ПРГ_КорНоменклатурнаяГруппа = ВыборкаНезавВода.НоменклатурнаяГруппа;
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если ДобавлятьКоличествоЗатраты Тогда
			НоваяСтрока.Количество		  = ТекСтрока.Количество;
		КонецЕсли;	
		НоваяСтрока.ВременнаяРазница  = ТекСтрока.ВременнаяРазница;
		НоваяСтрока.ПостояннаяРазница = ТекСтрока.ПостояннаяРазница;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	  Если ТекСтрока.Сумма <> 0 Тогда	
		НоваяПроводка = РегистрБух.Добавить();
		НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность	 = Истина;
		НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
		НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, распределение затрат по воде";
		//													
		НоваяПроводка.Сумма = ТекСтрока.Сумма;
		//
		НоваяПроводка.СчетДт = ТекСтрока.СчетУчета;
		//
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ТекСтрока.Подразделение);		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ТекСтрока.СтатьяЗатрат);
		//												
		НоваяПроводка.СчетКт = ВыборкаНезавВода.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ВыборкаНезавВода.Подразделение);		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаНезавВода.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ВыборкаНезавВода.СтатьяЗатрат);
		//
		//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		//	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
		//	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		//		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		//		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		//	КонецЕсли;
		//КонецЕсли;
	 КонецЕсли;	
	 ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда	
		 
		Если ТекСтрока.Сумма <> 0 Тогда	
				НоваяПроводка = РегистрБух.Добавить();
				НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность	 = Истина;
				НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
				НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, распределение затрат по воде";
				//													
				НоваяПроводка.Сумма = ТекСтрока.Сумма;
				//
				НоваяПроводка.СчетДт = ТекСтрока.СчетУчета;
				//
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ТекСтрока.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ТекСтрока.СтатьяЗатрат);
				//												
				НоваяПроводка.СчетКт = ВыборкаНезавВода.СчетУчета;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ВыборкаНезавВода.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаНезавВода.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ВыборкаНезавВода.СтатьяЗатрат);
		КонецЕсли;	 
			
		Если ТекСтрока.ВременнаяРазница <> 0 Тогда	
				НоваяПроводка = РегистрБух.Добавить();
				НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность	 = Истина;
				НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
				НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, распределение затрат по воде";
				//													
				НоваяПроводка.Сумма = ТекСтрока.ВременнаяРазница;
				//
				НоваяПроводка.СчетДт = ТекСтрока.СчетУчета;
				НоваяПроводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
				//
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ТекСтрока.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ТекСтрока.СтатьяЗатрат);
				//												
				НоваяПроводка.СчетКт = ВыборкаНезавВода.СчетУчета;
				НоваяПроводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ВыборкаНезавВода.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаНезавВода.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ВыборкаНезавВода.СтатьяЗатрат);
		КонецЕсли;	 
			
		Если ТекСтрока.ПостояннаяРазница <> 0 Тогда	
				НоваяПроводка = РегистрБух.Добавить();
				НоваяПроводка.Организация    = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность	 = Истина;
				НоваяПроводка.Период		 = СтруктураШапкиДокумента.Дата;
				НоваяПроводка.Содержание 	 = "Расчет фактической себестоимости, распределение затрат по воде";
				//													
				НоваяПроводка.Сумма = ТекСтрока.ПостояннаяРазница;
				//
				НоваяПроводка.СчетДт = ТекСтрока.СчетУчета;
				НоваяПроводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
				//
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ТекСтрока.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ТекСтрока.СтатьяЗатрат);
				//												
				НоваяПроводка.СчетКт = ВыборкаНезавВода.СчетУчета;
				НоваяПроводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ВыборкаНезавВода.Подразделение);		
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ВыборкаНезавВода.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ВыборкаНезавВода.СтатьяЗатрат);
		КонецЕсли;	 
		
	 
  КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьЗапросДляФормированияБазыПрямыхЗатрат(СтруктураШапкиДокумента,ИспСтатьи=Ложь)
						  
	Запрос = Новый Запрос("ВЫБРАТЬ
							| ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатратСрезПоследних.Подразделение
							|ПОМЕСТИТЬ ТаблНеиспПодр
							|ИЗ
							|	РегистрСведений.ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатрат.СрезПоследних(&ДатаКонца, ) КАК ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатратСрезПоследних
							|ГДЕ
							|	ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатратСрезПоследних.Использование
							|СГРУППИРОВАТЬ ПО
							|	ПРГ_ИсключаемыеПодразделенияБазаПрямыхЗатратСрезПоследних.Подразделение
							| ;
							|ВЫБРАТЬ
							|	ПРГ_СтатьиДляРасчетаБазыПрямыхЗатратСрезПоследних.СтатьяЗатрат
							|ПОМЕСТИТЬ ТаблЗатрат
							|ИЗ
							|	РегистрСведений.ПРГ_СтатьиДляРасчетаБазыПрямыхЗатрат.СрезПоследних(
							|			&ДатаКонца,
							|			Организация = &Организация
							|				И Использование) КАК ПРГ_СтатьиДляРасчетаБазыПрямыхЗатратСрезПоследних
							|;
							|
							|////////////////////////////////////////////////////////////////////////////////
							|ВЫБРАТЬ
							|	ВыпускПродукции.Подразделение,
							|	ВыпускПродукции.СчетУчетаНЗП,
							|	СУММА(ВыпускПродукции.Количество) КАК Количество
							|ПОМЕСТИТЬ ТаблВыпуска
							|ИЗ
							|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
							|ГДЕ
							|	ВыпускПродукции.Период МЕЖДУ &ДатаНачала И &ДатаКонца
							|	И ВыпускПродукции.Организация = &Организация
							|	И ВыпускПродукции.Активность
							|	И ВыпускПродукции.СчетУчетаНЗП = &СчетУчета
							|	И Не ВыпускПродукции.Подразделение  в (выбрать ТаблНеиспПодр.Подразделение из ТаблНеиспПодр)
							|
							|СГРУППИРОВАТЬ ПО
							|	ВыпускПродукции.СчетУчетаНЗП,
							|	ВыпускПродукции.Подразделение
							|
							|ИМЕЮЩИЕ
							|	СУММА(ВыпускПродукции.Количество) > 0
							|;
							|
							|////////////////////////////////////////////////////////////////////////////////
							|ВЫБРАТЬ
							|	ЗатратыНаВыпуск.Подразделение,
							|	ЗатратыНаВыпуск.СчетУчета,
							|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
							|	ЗатратыНаВыпуск.ЗаказНЗП,
							|//ДляБухУчета СУММА(ЗатратыНаВыпуск.СуммаОборот) КАК Сумма,
							|//ДляНалУчета СУММА(ЗатратыНаВыпуск.СуммаОборот+ЗатратыНаВыпуск.ПостояннаяРазницаОборот+ЗатратыНаВыпуск.ВременнаяРазницаОборот) КАК Сумма,
							|	ЗатратыНаВыпуск.Организация,
							|	ЗатратыНаВыпуск.Продукция,"
							+?(ИспСтатьи,"ЗатратыНаВыпуск.СтатьяЗатрат,","")+"
							|	ЗатратыНаВыпуск.СерияПродукции,
							|	ЗатратыНаВыпуск.Спецификация,
							|	ЗатратыНаВыпуск.ХарактеристикаПродукции
							|ИЗ
							|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета%.Обороты(
							|			&ДатаНачала,
							|			&ДатаКонца,
							|			,
							|			СчетУчета В (&СчетУчета)
							|				И Организация = &Организация
							|				И СтатьяЗатрат В
							|					(ВЫБРАТЬ
							|						таблзатрат.СтатьяЗатрат
							|					ИЗ
							|						таблзатрат)
							|				И (подразделение, СчетУчета) В
							|					(ВЫБРАТЬ
							|						ТаблВыпуска.Подразделение,
							|						ТаблВыпуска.СчетУчетаНЗП
							|					ИЗ
							|						ТаблВыпуска)
//начало изменений Ожиганов А. 31.05.2017 б/н по письму Григорьевой исключение из базы распределения косвенных расходов сыворотки 
							|
							| И не  Продукция в (ВЫБРАТЬ
							|	ИсключаемаяНоменклатура.Номенклатура
							|ИЗ
							|	РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения КАК ИсключаемаяНоменклатура
							|ГДЕ
							|	ИсключаемаяНоменклатура.Активность 
							|	И ИсключаемаяНоменклатура.Период МЕЖДУ &ДатаНачала И &ДатаКонца
							|
							|СГРУППИРОВАТЬ ПО
							|	ИсключаемаяНоменклатура.Номенклатура)							
//конец изменений 							
							|) КАК ЗатратыНаВыпуск
							|
							|СГРУППИРОВАТЬ ПО
							|	ЗатратыНаВыпуск.Подразделение,
							|	ЗатратыНаВыпуск.СчетУчета,
							|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
							|	ЗатратыНаВыпуск.ЗаказНЗП,
							|	ЗатратыНаВыпуск.Организация,
							|	ЗатратыНаВыпуск.Продукция,"
							+?(ИспСтатьи,"ЗатратыНаВыпуск.СтатьяЗатрат,","")+"
							|	ЗатратыНаВыпуск.СерияПродукции,
							|	ЗатратыНаВыпуск.Спецификация,
							|	ЗатратыНаВыпуск.ХарактеристикаПродукции");
						  
						  
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						  
						  
	Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаКонца",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.УстановитьПараметр("СчетУчета",ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда		
		Запрос.УстановитьПараметр("СчетУчета",ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	КонецЕсли;	
	
	возврат Запрос;

КонецФункции	
Функция ПолучитьЗапросБазаПрямыхНУ(СтруктураШапкиДокумента)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Подразделение,
	                      |	&СчетУчета,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.НоменклатурнаяГруппа,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Заказ,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Продукция,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.ХарактеристикаПродукции,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.СерияПродукции,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Спецификация,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.ВариантВыпускаПродукции,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.ВидВыпуска,
	                      |	СУММА(БазаРаспределенияЗатратБухгалтерскийУчет.БазаПриход) КАК БазаПриход,
	                      |	СУММА(БазаРаспределенияЗатратБухгалтерскийУчет.База) КАК Сумма,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Заказ КАК ЗаказНЗП
	                      |ИЗ
	                      |	РегистрСведений.БазаРаспределенияЗатратБухгалтерскийУчет КАК БазаРаспределенияЗатратБухгалтерскийУчет
	                      |ГДЕ
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Период МЕЖДУ &Дата1 И &Дата2
	                      |	И БазаРаспределенияЗатратБухгалтерскийУчет.СпособРаспределенияЗатрат = &СпособРаспределенияЗатрат
	                      |	И НЕ БазаРаспределенияЗатратБухгалтерскийУчет.РаспределениеКосвенныхЗатрат
	                      |	И БазаРаспределенияЗатратБухгалтерскийУчет.Организация = &Организация
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.ВидВыпуска,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Подразделение,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.ВариантВыпускаПродукции,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.ХарактеристикаПродукции,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.НоменклатурнаяГруппа,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.СерияПродукции,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Спецификация,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Продукция,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Заказ,
	                      |	БазаРаспределенияЗатратБухгалтерскийУчет.Заказ");
						  
	Запрос.УстановитьПараметр("Дата1",НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Дата2",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетУчета",ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	Запрос.УстановитьПараметр("СпособРаспределенияЗатрат",Константы.ПРГ_СпособРаспределнияДляПрямыхЗатрат.Получить());
	
	возврат Запрос;
						  
КонецФункции	

Функция ПолучитьОстаткиНЗПВспогательноПроизводство(СтруктураШапкиДокумента)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_НастройкиЗакрытияКосвенныхРасходов.Подразделение,
	                      |	ПРГ_НастройкиЗакрытияКосвенныхРасходов.СчетУчетаБУ КАК СчетУчета,
	                      |	ПРГ_НастройкиЗакрытияКосвенныхРасходов.НоменклатурнаяГруппа,
	                      |	ПРГ_НастройкиЗакрытияКосвенныхРасходов.СпособРаспределенияЗатрат
	                      |ПОМЕСТИТЬ НастройкиЗакрытия
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_НастройкиЗакрытияКосвенныхРасходов КАК ПРГ_НастройкиЗакрытияКосвенныхРасходов
	                      |ГДЕ
	                      |	ПРГ_НастройкиЗакрытияКосвенныхРасходов.Организация = &Организация
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	НезавершенноеПроизводство.Организация,
	                      |	НезавершенноеПроизводство.Подразделение,
	                      |	НезавершенноеПроизводство.СчетУчета,
	                      |	НезавершенноеПроизводство.СтатьяЗатрат,
	                      |	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	                      |	НезавершенноеПроизводство.Заказ,
	                      |	НезавершенноеПроизводство.Затрата,
	                      |	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	                      |	НезавершенноеПроизводство.СерияЗатраты,
	                      |	НезавершенноеПроизводство.КоличествоОстаток КАК Количество,
	                      |	НезавершенноеПроизводство.СтоимостьОстаток КАК Стоимость,
	                      |	НастройкиЗакрытия.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаРаспределения,
	                      |	НастройкиЗакрытия.СпособРаспределенияЗатрат КАК СпособРаспределенияЗатрат
	                      |ИЗ
	                      |	РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.Остатки(
	                      |			&ДатаКонца,
	                      |			Организация = &Организация
	                      |				И (СчетУчета, Подразделение) В
	                      |					(ВЫБРАТЬ
	                      |						НастройкиЗакрытия.СчетУчета,
	                      |						НастройкиЗакрытия.Подразделение
	                      |					ИЗ
	                      |						НастройкиЗакрытия)) КАК НезавершенноеПроизводство
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиЗакрытия КАК НастройкиЗакрытия
	                      |		ПО НезавершенноеПроизводство.Подразделение = НастройкиЗакрытия.Подразделение
	                      |			И НезавершенноеПроизводство.СчетУчета = НастройкиЗакрытия.СчетУчета
	                      |ИТОГИ ПО
	                      |	СпособРаспределенияЗатрат");
						  
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаКонца",КонецДня(СтруктураШапкиДокумента.Дата)+1);
	возврат Запрос;
КонецФункции

Процедура ПолучитьНачальныйИКонечныйНомерПередела(
	СтруктураШапкиДокумента,
	СпособРасчета,
	НачальныйПередел,
	КонечныйПередел,
	ВсегоПеределов = 0,
	МинимальныйПередел = 0
	)
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА РаспределениеЗатрат.НачальныйПередел > ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0)
	|		И ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0) <> 0
	|	ТОГДА
	|		ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0)
	|	ИНАЧЕ
	|		РаспределениеЗатрат.НачальныйПередел
	|	КОНЕЦ КАК НачальныйПередел,
	|	РаспределениеЗатрат.КонечныйПередел,
	|	РаспределениеЗатратПолное.ВсегоПеределов,
	|	РаспределениеЗатратПолное.МинимальныйПередел
	|ИЗ (	
	|	ВЫБРАТЬ
	|		МИНИМУМ(
	|			ВЫБОР КОГДА РаспределениеЗатрат.Подразделение.ВидПодразделения В (&ВидыПодразделений) ТОГДА
	|				РаспределениеЗатрат.НомерПередела
	|			ИНАЧЕ
	|				9999
	|			КОНЕЦ
	|		) КАК НачальныйПередел,
	|		МАКСИМУМ(
	|			ВЫБОР КОГДА РаспределениеЗатрат.Подразделение.ВидПодразделения В (&ВидыПодразделений) ТОГДА
	|				РаспределениеЗатрат.НомерПередела
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		) КАК КонечныйПередел
	|		
	|	ИЗ
	|		РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатрат
	|	ГДЕ
	|		РаспределениеЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|		//ДляРеглУчета И РаспределениеЗатрат.Организация = &Организация
	|		
	|	) КАК РаспределениеЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			МИНИМУМ(НомерПередела) КАК МинимальныйПередел
	|		ИЗ
	|			РегистрСведений.ПорядокЗакрытияПодразделений%СуффиксОрганизаций%.СрезПоследних(&КонДата, 
	|				Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|				//ДляРеглУчета И Организация = &Организация 
	|				) КАК ПорядокЗакрытия
	|		ГДЕ
	|			НомерПередела <> 0
	|		) КАК ПорядокЗакрытия
	|	ПО
	|		Истина
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			МИНИМУМ(РаспределениеЗатратПолное.НомерПередела) КАК МинимальныйПередел,
	|			МАКСИМУМ(РаспределениеЗатратПолное.НомерПередела) КАК ВсегоПеределов
	|		ИЗ
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатратПолное
	|		ГДЕ
	|			РаспределениеЗатратПолное.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И РаспределениеЗатратПолное.Организация = &Организация
	|
	|		) КАК РаспределениеЗатратПолное
	|	ПО
	|		ИСТИНА
	|";	
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	НачальныйПередел = 0;
	КонечныйПередел = 0;
	ВсегоПеределов = 0;
	МинимальныйПередел = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НачальныйПередел = ?(Выборка.НачальныйПередел = NULL, 0, Выборка.НачальныйПередел);
			КонечныйПередел = ?(Выборка.КонечныйПередел = NULL, 0, Выборка.КонечныйПередел);
			ВсегоПеределов = ?(Выборка.ВсегоПеределов = NULL, 0, Выборка.ВсегоПеределов);
			МинимальныйПередел = ?(Выборка.МинимальныйПередел = NULL, 0, Выборка.МинимальныйПередел);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНачальныйИКонечныйНомерПередела()

Функция СформироватьЗапросПоБазеРаспределенияЗатрат(
	СтруктураШапкиДокумента,
	ТекстЗапросаСКомментариями,
	КосвенныеЗатраты
	)
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("РаспределениеКосвенныхЗатрат", КосвенныеЗатраты);
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ХарактерРаспределенияПроизводственныеРасходы", Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("ПустойХарактерРаспределения", Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПродукция", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());

	Возврат Запрос;

КонецФункции // СформироватьЗапросПоБазеРаспределенияЗатрат()

Функция СформироватьТекстЗапросаБазаРаспределенияЗатрат()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.Продукция,
	|	Распределение.ХарактеристикаПродукции,
	|	Распределение.СерияПродукции,
	|	Распределение.НомерПередела,
	|	Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ РаспределениеПродукцииПоПеределам
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И &РаспределениеКосвенныхЗатрат
	|	И Не Распределение.КорректировкаНЗП
	|	И Не Распределение.ОприходованиеНЗП
	|	И Не Распределение.ВозвратИзНЗП
	|	//ДляРеглУчета И Распределение.Организация = &Организация
 	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|
	|ПОМЕСТИТЬ ВыпускПродукцииПоПеределам
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|					
	|ГДЕ
	|	ВыпускПродукции.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка),
	|	МАКСИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение
	|			
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения КАК РаспределятьНаПодчиненныеПодразделения,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|	БазаРаспределенияЗатрат.Подразделение КАК ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.Заказ КАК ЗаказНЗП,
	|	ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка) КАК ХарактерРаспределенияЗатрат,
	|	
	|	МИНИМУМ(
	|		ЕСТЬNULL(ВыпускПродукции.НомерПередела, 1)
	|		) КАК НомерПередела,
	|
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь) КАК ЕНВД,
	|
	|	//ДляНалУчета СУММА(
	|	//ДляНалУчета 	ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 		БазаРаспределенияЗатрат.БазаПриходНУ
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		БазаРаспределенияЗатрат.БазаПриходНУ /
	|	//ДляНалУчета 		ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 			1
	|	//ДляНалУчета 		ИНАЧЕ
	|	//ДляНалУчета 			БазаРаспределенияЗатратВсего.БазаПриходНУ
	|	//ДляНалУчета 		КОНЕЦ
	|	//ДляНалУчета 	КОНЕЦ
	|	//ДляНалУчета ) КАК БазаПриходНУ,
	|	//ДляНалУчета МАКСИМУМ(
	|	//ДляНалУчета 	ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 		1
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		БазаРаспределенияНаПодчиненные.БазаПриходНУ /
	|	//ДляНалУчета 		ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ = 0 ТОГДА
	|	//ДляНалУчета 			1
	|	//ДляНалУчета 		ИНАЧЕ
	|	//ДляНалУчета 			БазаРаспределенияНаПодчиненныеВсего.БазаПриходНУ
	|	//ДляНалУчета 		КОНЕЦ
	|	//ДляНалУчета 	КОНЕЦ
	|	//ДляНалУчета ) КАК БазаНаПодчиненныеНУ,
	|
	|	СУММА(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			БазаРаспределенияЗатрат.БазаПриход
	|		ИНАЧЕ
	|			(БазаРаспределенияЗатрат.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияЗатратВсего.БазаПриход
	|			КОНЕЦ)
	|		КОНЕЦ
	|	) КАК БазаПриход,
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			БазаРаспределенияНаПодчиненные.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияНаПодчиненныеВсего.БазаПриход
	|			КОНЕЦ
	|		КОНЕЦ
	|	) КАК БазаНаПодчиненные
	|
	|ИЗ
	|	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияЗатратВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат = БазаРаспределенияЗатратВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияЗатратВсего.Подразделение			
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета = БазаРаспределенияЗатратВсего.СчетУчета
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияНаПодчиненные
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненные.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияНаПодчиненные.Подразделение
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета 	= БазаРаспределенияНаПодчиненные.СчетУчета
	|				
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляНалУчета СУММА(БазаРаспределенияЗатрат.БазаПриходНУ) КАК БазаПриходНУ,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат
	|
	|		) КАК БазаРаспределенияНаПодчиненныеВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненныеВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыпускПродукцииПоПеределам КАК ВыпускПродукции
	|	ПО
	|		БазаРаспределенияЗатрат.Подразделение = ВыпускПродукции.Подразделение
	|		И БазаРаспределенияЗатрат.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|	//ДляБухУчета	ЛЕВОЕ СОЕДИНЕНИЕ (												
	|	//ДляБухУчета		ВЫБРАТЬ
	|	//ДляБухУчета			СчетаУчетаЕНВД.Счет,
	|	//ДляБухУчета			Истина КАК ЕНВД
	|	//ДляБухУчета		ИЗ
	|	//ДляБухУчета			РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаЕНВД
	|	//ДляБухУчета		ГДЕ
	|	//ДляБухУчета			Не СчетаУчетаЕНВД.ПодлежитРаспределению
	|	//ДляБухУчета		) КАК СчетаУчетаЕНВД
	|	//ДляБухУчета	ПО
	|	//ДляБухУчета		БазаРаспределенияЗатрат.СчетУчета = СчетаУчетаЕНВД.Счет
	|			
	|ГДЕ
	|	БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|	И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.СпособРаспределенияЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|				//ДляРеглУчета Организация = &Организация
	|			) КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.НеРаспределять
	|			И ((&РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ХарактерРаспределенияПроизводственныеРасходы)
	|				ИЛИ 
	|				(Не &РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат = &ХарактерРаспределенияПроизводственныеРасходы)
	|				)
	|		)
	|	//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|	//ДляБухУчета И Не БазаРаспределенияЗатрат.СчетУчета.Забалансовый
	|			
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	БазаРаспределенияЗатрат.Заказ
	|			
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета ЕСТЬNULL(СчетаУчетаЕНВД.ЕНВД, Ложь),
	|	НомерПередела,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ
	|";

 	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаБазаРаспределенияЗатрат()

Процедура СформироватьБазуПрямыхЗатрат(СтруктураШапкиДокумента,СтруктураТаблицДвижений) Экспорт
	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ИмяРегБазы  = "БазаРаспределенияЗатратНалоговыйУчет";
	Иначе
		ИмяРегБазы  = "БазаРаспределенияЗатратБухгалтерскийУчет";
	КонецЕсли;	
	
	РегБаза = РегистрыСведений[ИмяРегБазы].СоздатьНаборЗаписей();
	РегБаза.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	ТаблБазы = РегБаза.Выгрузить();
	
	
	
	ИнндексБазы  = 0;
	СпособРаспределенияПрямых = Константы.ПРГ_СпособРаспределнияДляПрямыхЗатрат.Получить();
	
	// убрать
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БазаРаспределенияЗатрат.Организация
	                      |ИЗ
	                      |	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета%  КАК БазаРаспределенияЗатрат
	                      |ГДЕ
	                      |	БазаРаспределенияЗатрат.Регистратор = &Ссылка
	                      |	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат = &СпособРаспределенияЗатрат
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	БазаРаспределенияЗатрат.Организация");
						  
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						  
	Запрос.УстановитьПараметр("СпособРаспределенияЗатрат",СпособРаспределенияПрямых);					  
	Запрос.УстановитьПараметр("Ссылка",СтруктураШапкиДокумента.Ссылка);					  
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		 возврат;
	КонецЕсли;	
	
	ЗапросПобазе =  ПолучитьЗапросДляФормированияБазыПрямыхЗатрат(СтруктураШапкиДокумента);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ЗапросПобазе =	ПолучитьЗапросБазаПрямыхНУ(СтруктураШапкиДокумента);
	КонецЕслИ;	
	
	ВыборкаПоБазе = ЗапросПобазе.Выполнить().Выбрать();
	Пока ВыборкаПоБазе.Следующий() Цикл
		ИнндексБазы = ИнндексБазы+1;
		НоваяСтрока = ТаблБазы.Добавить();
		НоваяСтрока.Организация				    = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Подразделение 		 		= ВыборкаПоБазе.Подразделение;
		НоваяСтрока.НоменклатурнаяГруппа		= ВыборкаПоБазе.НоменклатурнаяГруппа;  
		НоваяСтрока.СчетУчета			 		= ВыборкаПоБазе.СчетУчета;  
		
		НоваяСтрока.Заказ				 	    = ВыборкаПоБазе.ЗаказНЗП;
		НоваяСтрока.Продукция					= ВыборкаПоБазе.Продукция;
		НоваяСтрока.ХарактеристикаПродукции		= ВыборкаПоБазе.ХарактеристикаПродукции;
		НоваяСтрока.СерияПродукции			 	= ВыборкаПоБазе.СерияПродукции;
		НоваяСтрока.Спецификация			 	= ВыборкаПоБазе.Спецификация;
		НоваяСтрока.ВариантВыпускаПродукции		= Перечисления.ВариантыВыпускаПродукции.СобственнаяПродукция;
		НоваяСтрока.СпособРаспределенияЗатрат 	=  СпособРаспределенияПрямых;
		
		НоваяСтрока.ВариантВыпускаПродукции		=  Перечисления.ВариантыВыпускаПродукции.СобственнаяПродукция;
		НоваяСтрока.ВидВыпуска					=  Перечисления.ВидыВыпуска.Выпуск;
		НоваяСтрока.ПодразделениеНЗП			=  ВыборкаПоБазе.Подразделение;
		НоваяСтрока.НоменклатурнаяГруппаНЗП		=  ВыборкаПоБазе.НоменклатурнаяГруппа;
		НоваяСтрока.ЗаказНЗП					=  ВыборкаПоБазе.ЗаказНЗП;
		НоваяСтрока.БазаПриход					=  ВыборкаПоБазе.Сумма;
		НоваяСтрока.База						=  ВыборкаПоБазе.Сумма;
		НоваяСтрока.РасчетСебестоимостиВыпуска	=  Истина;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			НоваяСтрока.БазаПриходНУ    =  НоваяСтрока.БазаПриход;
			НоваяСтрока.БазаНУ			=  НоваяСтрока.База;
		Иначе
			НоваяСтрока.ИндексБазыРаспределения		= ИнндексБазы;
		КонецЕсли;	
		//НоваяСтрока.РаспределениеКосвенныхЗатрат = Истина;
	КонецЦикла;	
	
	РегБаза.мПериод = СтруктураШапкиДокумента.Дата;
	РегБаза.мТаблицаДвижений = ТаблБазы;
	РегБаза.ВыполнитьДвижения();
	
	РегБаза.Записать(Ложь);
	
	// для детализации павловой
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗапросПобазеПРГ =  ПолучитьЗапросДляФормированияБазыПрямыхЗатрат(СтруктураШапкиДокумента,Истина);
		
		РегПРГ_БазаПрямыхЗатрат  = РегистрыСведений.ПРГ_БазаПрямыхЗатрат.СоздатьНаборЗаписей();
		РегПРГ_БазаПрямыхЗатрат.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		ТаблПРГ_БазаПрямыхЗатрат = РегПРГ_БазаПрямыхЗатрат.Выгрузить();
		
		ВыборкаПоБазе = ЗапросПобазеПРГ.Выполнить().Выбрать();
		Пока ВыборкаПоБазе.Следующий() Цикл
			НоваяСтрока = ТаблПРГ_БазаПрямыхЗатрат.Добавить();
			НоваяСтрока.Организация             = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Номенклатура            = ВыборкаПоБазе.Продукция;
			НоваяСтрока.Серия                   = ВыборкаПоБазе.СерияПродукции;
			НоваяСтрока.Характеристика          = ВыборкаПоБазе.ХарактеристикаПродукции;
			НоваяСтрока.СтатьяЗатрат            = ВыборкаПоБазе.СтатьяЗатрат;
			НоваяСтрока.СпособРаспределения     = СпособРаспределенияПрямых;
			НоваяСтрока.Подразделение			= ВыборкаПоБазе.Подразделение;
			НоваяСтрока.Сумма					= ВыборкаПоБазе.Сумма;
		КонецЦикла;	
		
		ТаблПРГ_БазаПрямыхЗатрат.Свернуть("Период,Активность,Организация,Номенклатура,Серия,Характеристика,СтатьяЗатрат,СпособРаспределения,Подразделение","Сумма");
		
		РегПРГ_БазаПрямыхЗатрат.мПериод = СтруктураШапкиДокумента.Дата;
		РегПРГ_БазаПрямыхЗатрат.мТаблицаДвижений = ТаблПРГ_БазаПрямыхЗатрат;
		РегПРГ_БазаПрямыхЗатрат.ВыполнитьДвижения();
		РегПРГ_БазаПрямыхЗатрат.Записать(Ложь);
	КонецЕсли;
	
	
	//***********************************************************
	//*************************************************************
	//РСАПРЕДЕЛЕНИЕ  ВСПОМОГАТЕЛЬНЫХ ПРОИЗВОДСТВ
	
	
	НачальныйПередел = 0;
	КонечныйПередел = 0;
	ВсегоПеределов = 0;
	МинимальныйПередел = 0;
	
	СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
	
	ПолучитьНачальныйИКонечныйНомерПередела(
		СтруктураШапкиДокумента,
		СпособРасчета,
		НачальныйПередел,
		КонечныйПередел,
		ВсегоПеределов,
		МинимальныйПередел
		);

	
	ТекстЗапросаСКомментариями 		   = СформироватьТекстЗапросаБазаРаспределенияЗатрат();
	ЗапросБазаРаспределенияНаПродукцию = СформироватьЗапросПоБазеРаспределенияЗатрат(СтруктураШапкиДокумента, ТекстЗапросаСКомментариями, Истина);	
	
	РезультатЗапросаБазаРаспределения  = ЗапросБазаРаспределенияНаПродукцию.Выполнить();
	
	ЗапросНЗП = ПолучитьОстаткиНЗПВспогательноПроизводство(СтруктураШапкиДокумента);
	Выборка = ЗапросНЗП.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СпособРаспределенияЗатрат =  Выборка.СпособРаспределенияЗатрат;
		ВыборкаНЗП = Выборка.Выбрать();
		Пока ВыборкаНЗП.Следующий() Цикл
			
			  //СторноНЗП();
		КонецЦикла;	
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Функция ПолучитьЗапросПоНезавершенкеКорректировка(СтруктураШапкиДокумента)
	Запрос = Новый Запрос(
				   "ВЫБРАТЬ
				   | //ДляБухУчета 	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат как СчетЗатрат,
				   | //ДляНалУчета 	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ как СчетЗатрат,
				   |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение
				   |ПОМЕСТИТЬ ТаблПодр
				   |ИЗ
				   |	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(
				   |			&ДатаОстатков,
				   |			Организация = &Организация
				   |				И Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних
				   |ГДЕ
				   |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СпособРаспределенияЗатрат.РаспределятьЗатратыНаУровеньВыше
				   | //ДляБухУчета И СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат В(&СчетаЗатрат)
				   | //ДляНалУчета И СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ В(&СчетаЗатрат)
				   |
				   |СГРУППИРОВАТЬ ПО
				   | //ДляБухУчета 	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат,
				   | //ДляНалУчета 	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ,
				   |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СУММА(ЕСТЬNULL(ВыпускПродукции.Количество, 0)) КАК Количество,
				   |	ТаблПодр.Подразделение,
				   |	ТаблПодр.СчетЗатрат
				   |ПОМЕСТИТЬ ТаблВыпПодр
				   |ИЗ
				   |	ТаблПодр КАК ТаблПодр
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
				   |		ПО ТаблПодр.Подразделение = ВыпускПродукции.Подразделение
				   |			И ТаблПодр.СчетЗатрат = ВыпускПродукции.СчетУчетаНЗП
				   |	и ВыпускПродукции.Период МЕЖДУ &ДатаНач И &ДатаКон
				   |	И (ВыпускПродукции.Регистратор ССЫЛКА Документ.ВыпускПродукции
				   |			ИЛИ ВыпускПродукции.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ТаблПодр.Подразделение,
				   |	ТаблПодр.СчетЗатрат
				   |
				   |ИМЕЮЩИЕ
				   |	СУММА(ЕСТЬNULL(ВыпускПродукции.Количество, 0)) = 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	НезавершенноеПроизводство.Подразделение КАК Подразделение,
				   |	НезавершенноеПроизводство.Организация,
				   |	НезавершенноеПроизводство.СчетУчета,
				   |	НезавершенноеПроизводство.СтатьяЗатрат,
				   |	НезавершенноеПроизводство.НоменклатурнаяГруппа,
				   |	НезавершенноеПроизводство.Заказ,
				   |	НезавершенноеПроизводство.Затрата,
				   |	НезавершенноеПроизводство.ХарактеристикаЗатраты,
				   |	НезавершенноеПроизводство.СерияЗатраты,
				   |	НезавершенноеПроизводство.КоличествоОстаток,
				   |	НезавершенноеПроизводство.СтоимостьОстаток,
				   |  //ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток,
				   |  //ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток,
				   |	НезавершенноеПроизводство.Подразделение.Родитель КАК Уровень1,
				   |	НезавершенноеПроизводство.Подразделение.Родитель.Родитель КАК Уровень2,
				   |	НезавершенноеПроизводство.Подразделение.Родитель.Родитель.Родитель КАК Уровень3
				   //начало изменений Ожиганов 11.01.2016 б/н в случае если это сельхоз-переработка используем используем первого родителя
				   | Поместить  НезавершенноеПроизводство
				   //конец изменений  
				   |ИЗ
				   |	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(
				   |			&ДатаОстатков,
				   |			Организация = &Организация
				   |				И (СчетУчета,Подразделение) В
				   |					(ВЫБРАТЬ
				   |	                    ТаблВыпПодр.СчетЗатрат,
				   |						ТаблВыпПодр.Подразделение
				   |					ИЗ
				   |						ТаблВыпПодр)) КАК НезавершенноеПроизводство
				   //начало изменений Ожиганов 11.01.2016 б/н в случае если это сельхоз-переработка используем используем первого родителя
				   |;
				   | ВЫБРАТЬ
				   |		ПРГ_Подразделения97.Подразделение,
				   |		//ДляБухУчета	ПРГ_Подразделения97.СчетУчетаБУ как СчетУчета
				   |		//ДляНалУчета	ПРГ_Подразделения97.СчетУчетаНУ как СчетУчета
				   | Поместить ПРГ_Подразделения97
				   |ИЗ
				   |	РегистрСведений.ПРГ_Подразделения97Счета.СрезПоследних(&ДатаКон, ) КАК ПРГ_Подразделения97
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	//ДляБухУчета ПРГ_Подразделения97.СчетУчетаБУ,
				   |	//ДляНалУчета  ПРГ_Подразделения97.СчетУчетаНУ,
				   |	ПРГ_Подразделения97.Подразделение
				   |;
				   
				   |ВЫБРАТЬ
				   |	НезавершенноеПроизводство.Подразделение КАК Подразделение,
				   |	НезавершенноеПроизводство.Организация,
				   |	НезавершенноеПроизводство.СчетУчета,
				   |	НезавершенноеПроизводство.СтатьяЗатрат,
				   |	НезавершенноеПроизводство.НоменклатурнаяГруппа,
				   |	НезавершенноеПроизводство.Заказ,
				   |	НезавершенноеПроизводство.Затрата,
				   |	НезавершенноеПроизводство.ХарактеристикаЗатраты,
				   |	НезавершенноеПроизводство.СерияЗатраты,
				   |	НезавершенноеПроизводство.КоличествоОстаток,
				   |	НезавершенноеПроизводство.СтоимостьОстаток,
				   |  //ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток,
				   |  //ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток,
				   |	НезавершенноеПроизводство.Уровень1  КАК Уровень1,
				   |	Выбор когда  ПРГ_Подразделения97.Подразделение есть null Тогда
				   |		НезавершенноеПроизводство.Уровень2  
				   |    Иначе
				   |   		Неопределено
				   |	Конец	КАК Уровень2,
				   |	Выбор когда  ПРГ_Подразделения97.Подразделение есть null Тогда
				   |		НезавершенноеПроизводство.Уровень3
				   |    Иначе
				   |   		Неопределено
				   |	Конец	КАК Уровень3
				   |ИЗ
				   |	НезавершенноеПроизводство
				   | ЛЕВОЕ СОЕДИНЕНИЕ
				   |   	ПРГ_Подразделения97  
				   |  ПО  НезавершенноеПроизводство.Подразделение = ПРГ_Подразделения97.Подразделение
				   |  	И  НезавершенноеПроизводство.СчетУчета	  =  ПРГ_Подразделения97.СчетУчета
				   //конец изменений  
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Подразделение
				   |ИТОГИ 
//начало изменений Ожиганов 11.01.2016 б/н в случае если это сельхоз-переработка используем используем первого родителя
				   |МАКСИМУМ(Уровень1),
				   |МАКСИМУМ(Уровень2),
				   |МАКСИМУМ(Уровень3)
				   |ПО
//конец изменений 				   
				   |	Подразделение");
				   
				   
//				   
				   
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
				   
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
    Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаЗатрат",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	
	возврат Запрос;
КонецФункции	

Функция ПолучитьИнформациюПоВыпуску(СтруктураШапкиДокумента)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СУММА(ВыпускПродукцииБухгалтерскийУчет.Количество) КАК Количество,
	                      |	ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП КАК СчетУчетаЗатрат,
	                      |	ВыпускПродукцииБухгалтерскийУчет.Подразделение.Родитель КАК Уровень1,
	                      |	ВыпускПродукцииБухгалтерскийУчет.Подразделение.Родитель.Родитель КАК Уровень2,
	                      |	ВыпускПродукцииБухгалтерскийУчет.Подразделение.Родитель.Родитель.Родитель КАК Уровень3
	                      |ИЗ
	                      |	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукцииБухгалтерскийУчет
	                      |ГДЕ
	                      |	ВыпускПродукцииБухгалтерскийУчет.Период МЕЖДУ &ДатаНач И &ДатаКон
	                      |	И (ВыпускПродукцииБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ВыпускПродукции
	                      |			ИЛИ ВыпускПродукцииБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
	                      |	И ВыпускПродукцииБухгалтерскийУчет.Организация = &Организация
	                      |	И ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП = &СчетУчетаНЗП
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП,
	                      |	ВыпускПродукцииБухгалтерскийУчет.Подразделение.Родитель,
	                      |	ВыпускПродукцииБухгалтерскийУчет.Подразделение.Родитель.Родитель,
	                      |	ВыпускПродукцииБухгалтерскийУчет.Подразделение.Родитель.Родитель.Родитель");
						  
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						  
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
    Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетУчетаНЗП",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	
	возврат Запрос;	
КонецФункции	

Процедура КорректировкаЗатратНЗП(СтруктураШапкиДокумента,СтруктураТаблицДвижений) Экспорт
	
	ЗапросНЗП 		= ПолучитьЗапросПоНезавершенкеКорректировка(СтруктураШапкиДокумента);
	ЗапросПоВыпуску = ПолучитьИнформациюПоВыпуску(СтруктураШапкиДокумента);
	
	ВыборкаНЗППодр = ЗапросНЗП.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаНЗППодр.Количество() = 0 Тогда
		возврат;
	КонецЕслИ;	
	
	ТаблВыпусков = ЗапросПоВыпуску.Выполнить().Выгрузить();
	Если ТаблВыпусков.Количество() = 0 Тогда
		возврат;
	КонецЕсли;	
	ТаблВыпусков.Индексы.Добавить("Уровень1,Уровень2,Уровень3");
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ИмяРегНЗП 		= "НезавершенноеПроизводствоНалоговыйУчет";
		ИмяРегБух  		= "Налоговый";
	Иначе
		ИмяРегНЗП		 = "НезавершенноеПроизводствоБухгалтерскийУчет";
		ИмяРегБух 		 = "Хозрасчетный";
	КонецЕсли;	
	
	
	НаборЗаписейНезавершенноеПроизводство  = РегистрыНакопления[ИмяРегНЗП].СоздатьНаборЗаписей();
	НаборЗаписейНезавершенноеПроизводство.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	НаборЗаписейРегБух  = РегистрыБухгалтерии[ИмяРегБух].СоздатьНаборЗаписей();
	НаборЗаписейРегБух.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);

	
	ТаблОшибок = Новый ТаблицаЗначений;
	ТаблОшибок.Колонки.Добавить("Подразделение");
	
	КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
	
	Пока ВыборкаНЗППодр.Следующий() Цикл
		
		НаПодразделение = Неопределено; 
		НайдЗнч =  ТаблВыпусков.Найти(ВыборкаНЗППодр.Уровень1,"Уровень1");
		Если НайдЗнч = Неопределено Тогда
			НайдЗнч = ТаблВыпусков.Найти(ВыборкаНЗППодр.Уровень2,"Уровень2");
			Если НайдЗнч = Неопределено Тогда
				НайдЗнч =  ТаблВыпусков.Найти(ВыборкаНЗППодр.Уровень3,"Уровень3");
				Если НайдЗнч <> Неопределено Тогда
					 НаПодразделение = НайдЗнч.Уровень3;
				КонецЕслИ;	
			Иначе
				НаПодразделение = НайдЗнч.Уровень2;
			КонецЕслИ;
			
		Иначе
			НаПодразделение = НайдЗнч.Уровень1;
		КонецЕсли;	
		
		Если НаПодразделение = Неопределено Тогда
			НоваяСтрока = ТаблОшибок.Добавить();
			НоваяСтрока.Подразделение = ВыборкаНЗППодр.Подразделение;
			продолжить;
		КонецЕсли;
		
		ВыборкаНЗПП	 =	 ВыборкаНЗППодр.Выбрать();
		
		Пока ВыборкаНЗПП.Следующий() Цикл
			
			Количество  = ВыборкаНЗПП.КоличествоОстаток;
			Сумма       = ВыборкаНЗПП.СтоимостьОстаток;
			ПостояннаяРазница = 0;
			ВременнаяРазница  = 0;
			Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ПостояннаяРазница = ВыборкаНЗПП.ПостояннаяРазницаОстаток;
				ВременнаяРазница  = ВыборкаНЗПП.ВременнаяРазницаОстаток;
			КонецЕсли;
			
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаНЗПП,
					ВыборкаНЗПП.Подразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Расход,
					НаборЗаписейНезавершенноеПроизводство,
					КодОперации);
					
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаНЗПП,
					НаПодразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Приход,
					НаборЗаписейНезавершенноеПроизводство,
					КодОперации);
					
					
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаНЗПП,
							НаПодразделение,
							Неопределено,
							Неопределено,
							Сумма,
							НаборЗаписейРегБух
							);
				КонецЕсли;	
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаНЗПП,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.НУ,
							Сумма,
							НаборЗаписейРегБух
							);
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаНЗПП,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.ПР,
							ПостояннаяРазница,
							НаборЗаписейРегБух
							);
					
					СформироватьПроводкуПоКорректировкеЗатрат(
						   СтруктураШапкиДокумента,
							ВыборкаНЗПП,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.ВР,
							ВременнаяРазница,
							НаборЗаписейРегБух
							);
			 КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Если НаборЗаписейНезавершенноеПроизводство.Количество() > 0 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;
	
	Если НаборЗаписейРегБух.Количество() > 0 Тогда
		НаборЗаписейРегБух.Записать(Ложь);
	КонецЕсли;
	
	
	
КонецПроцедуры	


Функция ПолучитьЗапросКорректировкаЗатратНЗППоРегиструНаПодразделение(СтруктураШапкиДокумента)
	Запрос = Новый Запрос(
				   "ВЫБРАТЬ
				   |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
				   |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат
				   |ПОМЕСТИТЬ ТаблПодр
				   |ИЗ
				   |	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(
				   |			&ДатаОстатков,
				   |			Организация = &Организация
				   |				И Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних
				   |ГДЕ
				   |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СпособРаспределенияЗатрат.РаспределятьЗатратыНаУровеньВыше
				   | //ДляБухУчета И СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат В(&СчетаЗатрат)
				   | //ДляНалУчета И СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ В(&СчетаЗатрат)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
				   |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СУММА(ЕСТЬNULL(ВыпускПродукции.Количество, 0)) КАК Количество,
				   |	ТаблПодр.Подразделение,
				   |	ТаблПодр.СчетЗатрат
				   |ПОМЕСТИТЬ ТаблВыпПодр
				   |ИЗ
				   |	ТаблПодр КАК ТаблПодр
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
				   |		ПО ТаблПодр.Подразделение = ВыпускПродукции.Подразделение
				   |			И ТаблПодр.СчетЗатрат = ВыпускПродукции.СчетУчетаНЗП
				   |	и ВыпускПродукции.Период МЕЖДУ &ДатаНач И &ДатаКон
				   |	И (ВыпускПродукции.Регистратор ССЫЛКА Документ.ВыпускПродукции
				   |			ИЛИ ВыпускПродукции.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ТаблПодр.Подразделение,
				   |	ТаблПодр.СчетЗатрат
				   |
				   |ИМЕЮЩИЕ
				   |	СУММА(ЕСТЬNULL(ВыпускПродукции.Количество, 0)) = 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	НезавершенноеПроизводство.Подразделение КАК Подразделение,
				   |	НезавершенноеПроизводство.Организация,
				   |	НезавершенноеПроизводство.СчетУчета,
				   |	НезавершенноеПроизводство.СтатьяЗатрат,
				   |	НезавершенноеПроизводство.НоменклатурнаяГруппа,
				   |	НезавершенноеПроизводство.Заказ,
				   |	НезавершенноеПроизводство.Затрата,
				   |	НезавершенноеПроизводство.ХарактеристикаЗатраты,
				   |	НезавершенноеПроизводство.СерияЗатраты,
				   |	НезавершенноеПроизводство.КоличествоОстаток,
				   |	НезавершенноеПроизводство.СтоимостьОстаток,
				   |  //ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток,
				   |  //ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток,
				   |	НезавершенноеПроизводство.Подразделение.Родитель КАК Уровень1,
				   |	НезавершенноеПроизводство.Подразделение.Родитель.Родитель КАК Уровень2,
				   |	НезавершенноеПроизводство.Подразделение.Родитель.Родитель.Родитель КАК Уровень3
				   |ИЗ
				   |	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(
				   |			&ДатаОстатков,
				   |			Организация = &Организация
				   |				И (СчетУчета,Подразделение) В
				   |					(ВЫБРАТЬ
				   |	                    ТаблВыпПодр.СчетЗатрат,
				   |						ТаблВыпПодр.Подразделение
				   |					ИЗ
				   |						ТаблВыпПодр)) КАК НезавершенноеПроизводство
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Подразделение
				   |ИТОГИ ПО
				   |	Подразделение");
				   
	Запрос = Новый Запрос("ВЫБРАТЬ
		   		   		  | //ДляБухУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаБУ КАК СчетЗатрат,
				   		  | //ДляНалУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаНУ КАК СчетЗатрат,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.Подразделение,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение
	                      |ПОМЕСТИТЬ ТаблВыпПодр
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_КорректировкаЗатратПоПодразделениям.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних
	                      |ГДЕ
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |
	                      |СГРУППИРОВАТЬ ПО
		   		   		  | //ДляБухУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаБУ,
				   		  | //ДляНалУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаНУ,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.Подразделение
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	НезавершенноеПроизводство.Подразделение КАК Подразделение,
	                      |	НезавершенноеПроизводство.Организация,
	                      |	НезавершенноеПроизводство.СчетУчета,
	                      |	НезавершенноеПроизводство.СтатьяЗатрат,
	                      |	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	                      |	НезавершенноеПроизводство.Заказ,
	                      |	НезавершенноеПроизводство.Затрата,
	                      |	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	                      |	НезавершенноеПроизводство.СерияЗатраты,
	                      |	НезавершенноеПроизводство.КоличествоОстаток,
						  |  //ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток,
						  |  //ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток,
	                      |	НезавершенноеПроизводство.СтоимостьОстаток,
	                      |	ТаблВыпПодр.НАПодразделение
	                      |ИЗ
	                      |	ТаблВыпПодр КАК ТаблВыпПодр
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(
	                      |				&ДатаОстатков,
	                      |				Организация = &Организация
	                      |					И (СчетУчета, Подразделение) В
	                      |						(ВЫБРАТЬ
	                      |							ТаблВыпПодр.СчетЗатрат,
	                      |							ТаблВыпПодр.Подразделение
	                      |						ИЗ
	                      |							ТаблВыпПодр)) КАК НезавершенноеПроизводство
	                      |		ПО ТаблВыпПодр.Подразделение = НезавершенноеПроизводство.Подразделение
	                      |			И ТаблВыпПодр.СчетЗатрат = НезавершенноеПроизводство.СчетУчета
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Подразделение
	                      |ИТОГИ ПО
	                      |	Подразделение");			   
				   
//				   
				   
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
				   
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
    Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаЗатрат",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	
	возврат Запрос;
КонецФункции	



Процедура КорректировкаЗатратНЗППоРегиструНаПодразделение(СтруктураШапкиДокумента,СтруктураТаблицДвижений) Экспорт
	
	ЗапросНЗП 		= ПолучитьЗапросКорректировкаЗатратНЗППоРегиструНаПодразделение(СтруктураШапкиДокумента);
	
	
	ВыборкаНЗППодр = ЗапросНЗП.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаНЗППодр.Количество() = 0 Тогда
		возврат;
	КонецЕслИ;	
	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ИмяРегНЗП 		= "НезавершенноеПроизводствоНалоговыйУчет";
		ИмяРегБух  		= "Налоговый";
	Иначе
		ИмяРегНЗП		 = "НезавершенноеПроизводствоБухгалтерскийУчет";
		ИмяРегБух 		 = "Хозрасчетный";
	КонецЕсли;	
	
	
	НаборЗаписейНезавершенноеПроизводство  = РегистрыНакопления[ИмяРегНЗП].СоздатьНаборЗаписей();
	НаборЗаписейНезавершенноеПроизводство.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	НаборЗаписейРегБух  = РегистрыБухгалтерии[ИмяРегБух].СоздатьНаборЗаписей();
	НаборЗаписейРегБух.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);

	
	ТаблОшибок = Новый ТаблицаЗначений;
	ТаблОшибок.Колонки.Добавить("Подразделение");
	
	КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
	
	Пока ВыборкаНЗППодр.Следующий() Цикл
		
		ВыборкаНЗПП	 =	 ВыборкаНЗППодр.Выбрать();
		
		Пока ВыборкаНЗПП.Следующий() Цикл
			
			НаПодразделение	= ВыборкаНЗПП.НаПодразделение;
			
			Количество  = ВыборкаНЗПП.КоличествоОстаток;
			Сумма       = ВыборкаНЗПП.СтоимостьОстаток;
			ПостояннаяРазница = 0;
			ВременнаяРазница  = 0;
			Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ПостояннаяРазница = ВыборкаНЗПП.ПостояннаяРазницаОстаток;
				ВременнаяРазница  = ВыборкаНЗПП.ВременнаяРазницаОстаток;
			КонецЕсли;
			
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаНЗПП,
					ВыборкаНЗПП.Подразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Расход,
					НаборЗаписейНезавершенноеПроизводство,
					КодОперации);
					
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаНЗПП,
					НаПодразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Приход,
					НаборЗаписейНезавершенноеПроизводство,
					КодОперации,
					Ложь //невставляем затрату
					);
					
					
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаНЗПП,
							НаПодразделение,
							Неопределено,
							Неопределено,
							Сумма,
							НаборЗаписейРегБух
							);
				КонецЕсли;	
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаНЗПП,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.НУ,
							Сумма,
							НаборЗаписейРегБух
							);
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаНЗПП,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.ПР,
							ПостояннаяРазница,
							НаборЗаписейРегБух
							);
					
					СформироватьПроводкуПоКорректировкеЗатрат(
						   СтруктураШапкиДокумента,
							ВыборкаНЗПП,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.ВР,
							ВременнаяРазница,
							НаборЗаписейРегБух
							);
			 КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Если НаборЗаписейНезавершенноеПроизводство.Количество() > 0 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;
	
	Если НаборЗаписейРегБух.Количество() > 0 Тогда
		НаборЗаписейРегБух.Записать(Ложь);
	КонецЕсли;
	
	
	
КонецПроцедуры	



Процедура КорректировкаЗатрат(СтруктураШапкиДокумента,СтруктураТаблицДвижений) Экспорт
	КорректировкаЗатратНЗП(СтруктураШапкиДокумента,СтруктураТаблицДвижений);
	КорректировкаЗатратНЗППоРегиструНаПодразделение(СтруктураШапкиДокумента,СтруктураТаблицДвижений);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		КорректировкаКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураТаблицДвижений);
		КорректировкаКосвенныхРасходовНаПодразделение(СтруктураШапкиДокумента,СтруктураТаблицДвижений);
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПроцедурыРасчетаСебестоимостиВыпуска.СписаниеОбщепроизводственныхИОбщехозяйственныхРасходовНаРБП(
			СтруктураШапкиДокумента
			);
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьЗапросПоКосвеннымРасходомКорректировка(СтруктураШапкиДокумента)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
						  |	//ДляБухУчета СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат   как СчетЗатрат
	                      |	//ДляНалУчета СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ как СчетЗатрат
	                      |ПОМЕСТИТЬ ТаблПодр
	                      |ИЗ
	                      |	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(
	                      |			&ДатаКон,
	                      |			Организация = &Организация
	                      |				И Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних
	                      |ГДЕ
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СпособРаспределенияЗатрат.РаспределятьЗатратыНаУровеньВыше
						  |	//ДляБухУчета И СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат В(&СчетаЗатрат)
						  |	//ДляНалУчета И СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ В(&СчетаЗатрат)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
	                      |//ДляБухУчета	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат
						  |//ДляНалУчета	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ЕСТЬNULL(ВыпускПродукции.Количество, 0)) КАК Количество,
	                      |	ТаблПодр.Подразделение,
	                      |	ТаблПодр.СчетЗатрат
	                      |ПОМЕСТИТЬ ТаблВыпПодр
	                      |ИЗ
	                      |	ТаблПодр КАК ТаблПодр
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	                      |		ПО ТаблПодр.Подразделение = ВыпускПродукции.Подразделение
	                      |			И &СчетУчетаНЗП = ВыпускПродукции.СчетУчетаНЗП
	                      | И
	                      |	ВыпускПродукции.Период МЕЖДУ &ДатаНач И &ДатаКон
	                      |	И (ВыпускПродукции.Регистратор ССЫЛКА Документ.ВыпускПродукции
	                      |			ИЛИ ВыпускПродукции.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТаблПодр.Подразделение,
	                      |	ТаблПодр.СчетЗатрат
	                      |
	                      |ИМЕЮЩИЕ
	                      |	СУММА(ЕСТЬNULL(ВыпускПродукции.Количество, 0)) = 0
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗатратыОстатки.Подразделение КАК Подразделение,
	                      |	ЗатратыОстатки.Организация,
	                      |	ЗатратыОстатки.СчетУчета,
	                      |	ЗатратыОстатки.СтатьяЗатрат,
	                      |	ЗатратыОстатки.НоменклатурнаяГруппа,
	                      |	ЗатратыОстатки.Заказ,
	                      |	ЗатратыОстатки.Подразделение.Родитель КАК Уровень1,
	                      |	ЗатратыОстатки.Подразделение.Родитель.Родитель КАК Уровень2,
	                      |	ЗатратыОстатки.Подразделение.Родитель.Родитель.Родитель КАК Уровень3,
						  |	//ДляНалУчета ЗатратыОстатки.ПостояннаяРазницаОстаток,
						  |	//ДляНалУчета ЗатратыОстатки.ВременнаяРазницаОстаток,
	                      |	ЗатратыОстатки.СуммаОстаток КАК СтоимостьОстаток
//начало изменений Ожиганов 11.01.2016 б/н в случае если это сельхоз-переработка используем используем первого родителя
                          | ПОместить ЗатратыОстатки
//конец изменений 
	                      |ИЗ
	                      |	РегистрНакопления.Затраты%СуффиксУчета%.Остатки(
	                      |			&ДатаОстатков,
	                      |			Организация = &Организация и СчетУчета = &СчетУчета
	                      |				И Подразделение В
	                      |					(ВЫБРАТЬ
	                      |						ТаблВыпПодр.Подразделение
	                      |					ИЗ
	                      |						ТаблВыпПодр)) КАК ЗатратыОстатки
	                      |ГДЕ
	                      |	ЗатратыОстатки.СчетУчета = &СчетУчета
//начало изменений Ожиганов 11.01.2016 б/н в случае если это сельхоз-переработка используем используем первого родителя
                          |;
						  | ВЫБРАТЬ
						  |		ПРГ_Подразделения97.Подразделение,
						  |		//ДляБухУчета	ПРГ_Подразделения97.СчетУчетаБУ как СчетУчета
						  |		//ДляНалУчета	ПРГ_Подразделения97.СчетУчетаНУ как СчетУчета
						  | Поместить ПРГ_Подразделения97
						  |ИЗ
						  |	РегистрСведений.ПРГ_Подразделения97Счета.СрезПоследних(&ДатаКон, ) КАК ПРГ_Подразделения97
						  |
						  |СГРУППИРОВАТЬ ПО
						  |	//ДляБухУчета ПРГ_Подразделения97.СчетУчетаБУ,
						  |	//ДляНалУчета  ПРГ_Подразделения97.СчетУчетаНУ,
						  |	ПРГ_Подразделения97.Подразделение
						  |;
						  |
	                      |ВЫБРАТЬ
	                      |	ЗатратыОстатки.Подразделение КАК Подразделение,
	                      |	ЗатратыОстатки.Организация,
	                      |	ЗатратыОстатки.СчетУчета,
	                      |	ЗатратыОстатки.СтатьяЗатрат,
	                      |	ЗатратыОстатки.НоменклатурнаяГруппа,
	                      |	ЗатратыОстатки.Заказ,
	                      |	ЗатратыОстатки.Уровень1 КАК Уровень1,
						  | Выбор когда   ПРГ_Подразделения97.Подразделение есть NULL Тогда
	                      |			ЗатратыОстатки.Уровень2 
						  |  Иначе
						  |     Неопределено	
						  | Конец  КАК Уровень2,
						  | Выбор когда   ПРГ_Подразделения97.Подразделение есть NULL Тогда
	                      |			ЗатратыОстатки.Уровень3 
						  | Иначе
						  |    НЕопределено
						  | Конец КАК Уровень3,
						  |	//ДляНалУчета ЗатратыОстатки.ПостояннаяРазницаОстаток,
						  |	//ДляНалУчета ЗатратыОстатки.ВременнаяРазницаОстаток,
	                      |	ЗатратыОстатки.СтоимостьОстаток КАК СтоимостьОстаток
	                      |ИЗ
						  |  ЗатратыОстатки						  
						  | ЛЕВОЕ СОЕДИНЕНИЕ
						  |   	ПРГ_Подразделения97  
						  |  ПО  ЗатратыОстатки.Подразделение = ПРГ_Подразделения97.Подразделение
						  |  	И  ЗатратыОстатки.СчетУчета	  =  ПРГ_Подразделения97.СчетУчета						  
//конец изменений 
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Подразделение
	                      |ИТОГИ 
//начало изменений Ожиганов 11.01.2016 б/н в случае если это сельхоз-переработка используем используем первого родителя
						|МАКСИМУМ(Уровень1),
						|МАКСИМУМ(Уровень2),
						|МАКСИМУМ(Уровень3)
						|  ПО
//конец изменений 						
	                    |	Подразделение");
						  
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						  
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
    Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	мСчЗатрат = Новый Массив;
	мСчЗатрат.Добавить(?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	мСчЗатрат.Добавить(?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД,ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы));
	
	Запрос.УстановитьПараметр("СчетаЗатрат",мСчЗатрат);
	Запрос.УстановитьПараметр("СчетУчета",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД,ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы));
	Запрос.УстановитьПараметр("СчетУчетаНЗП",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	
	возврат Запрос;
КонецФункции

Процедура КорректировкаКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураТаблицДвижений) Экспорт
	
	ЗапросКосв 		= ПолучитьЗапросПоКосвеннымРасходомКорректировка(СтруктураШапкиДокумента);
	ЗапросПоВыпуску = ПолучитьИнформациюПоВыпуску(СтруктураШапкиДокумента);
	
	ВыборкаКосв = ЗапросКосв.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаКосв.Количество() = 0 Тогда
		возврат;
	КонецЕслИ;	
	
	ТаблВыпусков = ЗапросПоВыпуску.Выполнить().Выгрузить();
	Если ТаблВыпусков.Количество() = 0 Тогда
		возврат;
	КонецЕсли;	
	ТаблВыпусков.Индексы.Добавить("Уровень1,Уровень2,Уровень3");
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ИмяРегЗатраты  = "ЗатратыНалоговыйУчет";
		ИмяРегБух      = "Налоговый";
	Иначе
		ИмяРегЗатраты  = "ЗатратыБухгалтерскийУчет";
		ИмяРегБух      = "Хозрасчетный";
	КонецЕсли;	

	
	НаборЗаписейЗатраты  = РегистрыНакопления[ИмяРегЗатраты].СоздатьНаборЗаписей();
	НаборЗаписейЗатраты.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	НаборЗаписейРегБух  = РегистрыБухгалтерии[ИмяРегБух].СоздатьНаборЗаписей();
	НаборЗаписейРегБух.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);

	
	ТаблОшибок = Новый ТаблицаЗначений;
	ТаблОшибок.Колонки.Добавить("Подразделение");
	
	КодОперации = Перечисления.КодыОперацийЗатраты.ВнутренниеУслугиНаПостоянныеЗатраты;
	
	Пока ВыборкаКосв.Следующий() Цикл
		
		НаПодразделение = Неопределено; 
		НайдЗнч =  ТаблВыпусков.Найти(ВыборкаКосв.Уровень1,"Уровень1");
		Если НайдЗнч = Неопределено Тогда
			НайдЗнч = ТаблВыпусков.Найти(ВыборкаКосв.Уровень2,"Уровень2");
			Если НайдЗнч = Неопределено Тогда
				НайдЗнч =  ТаблВыпусков.Найти(ВыборкаКосв.Уровень3,"Уровень3");
				Если НайдЗнч <> Неопределено Тогда
					 НаПодразделение = НайдЗнч.Уровень3;
				КонецЕслИ;	
			Иначе
				НаПодразделение = НайдЗнч.Уровень2;
			КонецЕслИ;
			
		Иначе
			НаПодразделение = НайдЗнч.Уровень1;
		КонецЕсли;	
		
		Если НаПодразделение = Неопределено Тогда
			НоваяСтрока = ТаблОшибок.Добавить();
			НоваяСтрока.Подразделение = ВыборкаКосв.Подразделение;
			продолжить;
		КонецЕсли;
		
		ВыборкаКосвСлед	 =	 ВыборкаКосв.Выбрать();
		
		Пока ВыборкаКосвСлед.Следующий() Цикл
			
			Количество  = 0;
			Сумма       = ВыборкаКосвСлед.СтоимостьОстаток;
			ПостояннаяРазница = 0;
			ВременнаяРазница  = 0;
			Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ПостояннаяРазница = ВыборкаКосвСлед.ПостояннаяРазницаОстаток;
				ВременнаяРазница  = ВыборкаКосвСлед.ВременнаяРазницаОстаток;
			КонецЕсли;
			
				СформироватьДвиженияПоРегиструЗатратКорректировка(
					СтруктураШапкиДокумента,
					ВыборкаКосвСлед,
					ВыборкаКосвСлед.Подразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Расход,
					НаборЗаписейЗатраты,
					КодОперации);
					
				СформироватьДвиженияПоРегиструЗатратКорректировка(
					СтруктураШапкиДокумента,
					ВыборкаКосвСлед,
					НаПодразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Приход,
					НаборЗаписейЗатраты,
					КодОперации);
					
					
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаКосвСлед,
							НаПодразделение,
							Неопределено,
							Неопределено,
							Сумма,
							НаборЗаписейРегБух
							);
				КонецЕсли;	
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаКосвСлед,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.НУ,
							Сумма,
							НаборЗаписейРегБух
							);
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаКосвСлед,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.ПР,
							ПостояннаяРазница,
							НаборЗаписейРегБух
							);
					
					СформироватьПроводкуПоКорректировкеЗатрат(
						   СтруктураШапкиДокумента,
							ВыборкаКосвСлед,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.ВР,
							ВременнаяРазница,
							НаборЗаписейРегБух
							);
			 КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Если НаборЗаписейЗатраты.Количество() > 0 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если НаборЗаписейРегБух.Количество() > 0 Тогда
		НаборЗаписейРегБух.Записать(Ложь);
	КонецЕсли;
	
	
	
КонецПроцедуры	


Функция ПолучитьЗапросПоКосвеннымРасходомКорректировкаНаПодразделение(СтруктураШапкиДокумента)
	Запрос = Новый Запрос("ВЫБРАТЬ
		   		   		  | //ДляБухУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаБУ КАК СчетЗатрат,
				   		  | //ДляНалУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаНУ КАК СчетЗатрат,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.Подразделение,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение
	                      |ПОМЕСТИТЬ ТаблВыпПодр
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_КорректировкаЗатратПоПодразделениям.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних
	                      |ГДЕ
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаБУ,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.Подразделение
	                      |;	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗатратыОстатки.Подразделение КАК Подразделение,
	                      |	ЗатратыОстатки.Организация,
	                      |	ЗатратыОстатки.СчетУчета,
	                      |	ЗатратыОстатки.СтатьяЗатрат,
	                      |	ЗатратыОстатки.НоменклатурнаяГруппа,
	                      |	ЗатратыОстатки.Заказ,
						  |	//ДляНалУчета ЗатратыОстатки.ПостояннаяРазницаОстаток,
						  |	//ДляНалУчета ЗатратыОстатки.ВременнаяРазницаОстаток,
	                      |	ЗатратыОстатки.СуммаОстаток КАК СтоимостьОстаток
	                      |ИЗ
	                      |	РегистрНакопления.Затраты%СуффиксУчета%.Остатки(
	                      |			&ДатаОстатков,
	                      |			Организация = &Организация
	                      |				И Подразделение В
	                      |					(ВЫБРАТЬ
	                      |						ТаблПодр.Подразделение
	                      |					ИЗ
	                      |						ТаблПодр)) КАК ЗатратыОстатки
	                      |ГДЕ
	                      |	ЗатратыОстатки.СчетУчета = &СчетУчета
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Подразделение
	                      |ИТОГИ ПО
	                      |	Подразделение");
						  
	Запрос = Новый Запрос("ВЫБРАТЬ
		   		   		  | //ДляБухУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаБУ КАК СчетЗатрат,
				   		  | //ДляНалУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаНУ КАК СчетЗатрат,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.Подразделение,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение
	                      |ПОМЕСТИТЬ ТаблВыпПодр
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_КорректировкаЗатратПоПодразделениям.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних
	                      |ГДЕ
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                      |
	                      |СГРУППИРОВАТЬ ПО
		   		   		  | //ДляБухУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаБУ,
				   		  | //ДляНалУчета ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.СчетУчетаНУ,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.НАПодразделение,
	                      |	ПРГ_КорректировкаЗатратПоПодразделениямСрезПоследних.Подразделение
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗатратыОстатки.Подразделение КАК Подразделение,
	                      |	ЗатратыОстатки.Организация,
	                      |	ЗатратыОстатки.СчетУчета,
	                      |	ЗатратыОстатки.СтатьяЗатрат,
	                      |	ЗатратыОстатки.НоменклатурнаяГруппа,
	                      |	ЗатратыОстатки.Заказ,
						  |	//ДляНалУчета ЗатратыОстатки.ПостояннаяРазницаОстаток,
						  |	//ДляНалУчета ЗатратыОстатки.ВременнаяРазницаОстаток,
	                      |	ЗатратыОстатки.СуммаОстаток КАК СтоимостьОстаток,
	                      |	ТаблВыпПодр.НАПодразделение
	                      |ИЗ
	                      |	ТаблВыпПодр КАК ТаблВыпПодр
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Затраты%СуффиксУчета%.Остатки(
	                      |				&ДатаОстатков,
	                      |				Организация = &Организация
	                      |					И (Подразделение, СчетУчета) В
	                      |						(ВЫБРАТЬ
	                      |							ТаблВыпПодр.Подразделение,
	                      |							ТаблВыпПодр.СчетЗатрат
	                      |						ИЗ
	                      |							ТаблВыпПодр)) КАК ЗатратыОстатки
	                      |		ПО ТаблВыпПодр.СчетЗатрат = ЗатратыОстатки.СчетУчета
	                      |			И ТаблВыпПодр.Подразделение = ЗатратыОстатки.Подразделение
	                      |ГДЕ
	                      |	ЗатратыОстатки.СчетУчета = &СчетУчета
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Подразделение
	                      |ИТОГИ ПО
	                      |	Подразделение");
						  
						  
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						  
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
    Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаЗатрат",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	Запрос.УстановитьПараметр("СчетУчета",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД,ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы));
	
	возврат Запрос;
КонецФункции



Процедура КорректировкаКосвенныхРасходовНаПодразделение(СтруктураШапкиДокумента,СтруктураТаблицДвижений) Экспорт
	
	ЗапросКосв 		= ПолучитьЗапросПоКосвеннымРасходомКорректировкаНаПодразделение(СтруктураШапкиДокумента);
	ВыборкаКосв = ЗапросКосв.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ИмяРегЗатраты  = "ЗатратыНалоговыйУчет";
		ИмяРегБух      = "Налоговый";
	Иначе
		ИмяРегЗатраты  = "ЗатратыБухгалтерскийУчет";
		ИмяРегБух      = "Хозрасчетный";
	КонецЕсли;	

	
	НаборЗаписейЗатраты  = РегистрыНакопления[ИмяРегЗатраты].СоздатьНаборЗаписей();
	НаборЗаписейЗатраты.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	НаборЗаписейРегБух  = РегистрыБухгалтерии[ИмяРегБух].СоздатьНаборЗаписей();
	НаборЗаписейРегБух.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);

	
	ТаблОшибок = Новый ТаблицаЗначений;
	ТаблОшибок.Колонки.Добавить("Подразделение");
	
	КодОперации = Перечисления.КодыОперацийЗатраты.ВнутренниеУслугиНаПостоянныеЗатраты;
	
	Пока ВыборкаКосв.Следующий() Цикл
		
		ВыборкаКосвСлед	 =	 ВыборкаКосв.Выбрать();
		
		Пока ВыборкаКосвСлед.Следующий() Цикл
			
			НаПодразделение = ВыборкаКосвСлед.НаПодразделение;
			Количество  = 0;
			Сумма       = ВыборкаКосвСлед.СтоимостьОстаток;
			ПостояннаяРазница = 0;
			ВременнаяРазница  = 0;
			Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ПостояннаяРазница = ВыборкаКосвСлед.ПостояннаяРазницаОстаток;
				ВременнаяРазница  = ВыборкаКосвСлед.ВременнаяРазницаОстаток;
			КонецЕсли;
			
			Если (Сумма = 0) и (ПостояннаяРазница = 0) 
				и  (ВременнаяРазница=0) Тогда
				продолжить;
			КонецЕсли;	
			
				СформироватьДвиженияПоРегиструЗатратКорректировка(
					СтруктураШапкиДокумента,
					ВыборкаКосвСлед,
					ВыборкаКосвСлед.Подразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Расход,
					НаборЗаписейЗатраты,
					КодОперации);
					
				СформироватьДвиженияПоРегиструЗатратКорректировка(
					СтруктураШапкиДокумента,
					ВыборкаКосвСлед,
					НаПодразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Приход,
					НаборЗаписейЗатраты,
					КодОперации);
					
					
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаКосвСлед,
							НаПодразделение,
							Неопределено,
							Неопределено,
							Сумма,
							НаборЗаписейРегБух
							);
				КонецЕсли;	
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаКосвСлед,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.НУ,
							Сумма,
							НаборЗаписейРегБух
							);
					СформироватьПроводкуПоКорректировкеЗатрат(
							СтруктураШапкиДокумента,
							ВыборкаКосвСлед,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.ПР,
							ПостояннаяРазница,
							НаборЗаписейРегБух
							);
					
					СформироватьПроводкуПоКорректировкеЗатрат(
						   СтруктураШапкиДокумента,
							ВыборкаКосвСлед,
							НаПодразделение,
							Неопределено,
							Перечисления.ВидыУчетаПоПБУ18.ВР,
							ВременнаяРазница,
							НаборЗаписейРегБух
							);
			 КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Если НаборЗаписейЗатраты.Количество() > 0 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если НаборЗаписейРегБух.Количество() > 0 Тогда
		НаборЗаписейРегБух.Записать(Ложь);
	КонецЕсли;
	
	
	
КонецПроцедуры	




Процедура СформироватьДвиженияПоРегиструЗатратКорректировка(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Подразделение,
	НоменклатурнаяГруппа,
	Количество,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	ВидДвижения,
	НаборЗаписейЗатраты,
	КодОперации
	)
	
	Если Количество = 0
	   И Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Незавершенное производство" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - заполняется характер затрат или номенклатура
	//	- ХарактеристикаЗатраты - не заполняется (для косвенных затрат) или заполняется характеристика номенклатуры
	//	- СерияЗатраты - не заполняется (для косвенных затрат) или заполняется серия номенклатуры.
	
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетУчета;
	КонецЕсли;
	
	НоваяСтрока.Подразделение = Подразделение;
	НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
	НоваяСтрока.Заказ = СтрокаВыборки.Заказ;
	
	НоваяСтрока.КодОперации	 = КодОперации;

	
	НоваяСтрока.Сумма 		= Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат()



Процедура СформироватьПроводкуПоКорректировкеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Подразделение,
	ХарактерЗатрат,
	ВидУчетаПоПБУ18,
	Сумма,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	
	НоваяПроводка.Содержание = "Корректировка затрат";
	НоваяПроводка.Сумма = Сумма;
	
	НоваяПроводка.СчетДт = СтрокаВыборки.СчетУчета;
	//БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", );
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", Подразделение);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);
										
	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
										
	
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);

		
 	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкуПоРаспределениюЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат или Неопределено - Текущий характер затрат
//	Затрата - ПеречислениеСсылка.ХарактерЗатрат или СправочникСсылка.Номенклатура,
//	ХарактеристикаЗатраты - СправочникСсылка.ХарактеристикиНоменклатуры (используется только для производственных расходов),
//	СерияЗатраты - СправочникСсылка.СерииНоменклатуры (используется только для производственных расходов),
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	Количество - Число - Количество затрат (используется только для производственных расходов)
//  Сумма - Число - Сумма затрат
//  ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//  ВременнаяРазница - Число - Сумма затрат в части временной разницы
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство".
//
Процедура СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Подразделение,
	НоменклатурнаяГруппа,
	Количество,
	Сумма,
	ПостояннаяРазница,
	ВременнаяРазница,
	ВидДвижения,
	НаборЗаписейНезавершенноеПроизводство,
	КодОперации,
	ПереноситьЗатратыИЗаказ = Истина
	)
	
	Если Количество = 0
	   И Сумма = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Незавершенное производство" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - заполняется характер затрат или номенклатура
	//	- ХарактеристикаЗатраты - не заполняется (для косвенных затрат) или заполняется характеристика номенклатуры
	//	- СерияЗатраты - не заполняется (для косвенных затрат) или заполняется серия номенклатуры.
	
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетУчета;
	КонецЕсли;
	
	НоваяСтрока.Подразделение = Подразделение;
	НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
	
	Если ПереноситьЗатратыИЗаказ Тогда
		НоваяСтрока.Заказ = СтрокаВыборки.Заказ;
		НоваяСтрока.Затрата = СтрокаВыборки.Затрата;
		НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаЗатраты;
		НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияЗатраты;
	КонецЕслИ;	
		
	НоваяСтрока.КодОперации	 = КодОперации;
	НоваяСтрока.НомерПередела = 0;		
	
	НоваяСтрока.Стоимость 	= Сумма;
	НоваяСтрока.Количество  = Количество;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат()




Функция СформироватьЗапросПоРБП(СтруктураШапкиДокумента)
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//					  |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
	//					  |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат КАК счетучета
	//					  |ПОМЕСТИТЬ ТаблВспом
	//					  |ИЗ
	//					  |	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(
	//					  |			&ДатаОстатков,
	//					  |	//ДляБухУчета СчетЗатрат В (&Счета)
	//					  |	//ДляНалУчета СчетЗатратНУ В (&Счета)
	//					  |				И Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//					  |				И 
	//					  |			Организация = &Организация
	//					  |			) КАК СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
	//					  |	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат
	//					  |;
	//					  |
	//					  |////////////////////////////////////////////////////////////////////////////////
	//					  |ВЫБРАТЬ
	//					  |	НезавершенноеПроизводство.Организация,
	//					  |	НезавершенноеПроизводство.Подразделение,
	//					  |	НезавершенноеПроизводство.СчетУчета,
	//					  |	НезавершенноеПроизводство.СтатьяЗатрат,
	//					  |	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	//					  |	НезавершенноеПроизводство.Заказ,
	//					  |	НезавершенноеПроизводство.Затрата,
	//					  |	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	//					  |	НезавершенноеПроизводство.СерияЗатраты,
	//					  |	НезавершенноеПроизводство.КоличествоОстаток,
	//					  |	//ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток как ПостояннаяРазница,
	//					  |	//ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток как ВременнаяРазница,
	//					  |	НезавершенноеПроизводство.СтоимостьОстаток
	//					  |ИЗ
	//					  |	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(
	//					  |			&ДатаОстатков,
	//					  |			(СчетУчета, Подразделение) В
	//					  |				(ВЫБРАТЬ
	//					  |					ТаблВспом.счетучета,
	//					  |					ТаблВспом.Подразделение
	//					  |				ИЗ
	//					  |					ТаблВспом)
	//					  |		) КАК НезавершенноеПроизводство");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |//ДляБухУчета  ПодрИСчетаУчета.СчетУчетаБУ как СчетУчета,
						  |//ДляНалУчета ПодрИСчетаУчета.СчетУчетаНУ как СчетУчета,
						  |ПодрИСчетаУчета.Подразделение
						  |ПОМЕСТИТЬ ТаблВспом
						  |ИЗ
						  |РегистрСведений.ПРГ_Подразделения97Счета.СрезПоследних(&ДатаОстатков, Подразделение.Владелец = &Организация 
						  |//ДляНалУчета и не Подразделение в иерархии (&МассПодр)
						  |) КАК ПодрИСчетаУчета	
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	НезавершенноеПроизводство.Организация,
						  |	НезавершенноеПроизводство.Подразделение,
						  |	НезавершенноеПроизводство.СчетУчета,
						  |	НезавершенноеПроизводство.СтатьяЗатрат,
						  |	НезавершенноеПроизводство.НоменклатурнаяГруппа,
						  |	НезавершенноеПроизводство.Заказ,
						  |	НезавершенноеПроизводство.Затрата,
						  |	НезавершенноеПроизводство.ХарактеристикаЗатраты,
						  |	НезавершенноеПроизводство.СерияЗатраты,
						  |	НезавершенноеПроизводство.КоличествоОстаток,
						  |	//ДляНалУчета НезавершенноеПроизводство.ПостояннаяРазницаОстаток как ПостояннаяРазница,
						  |	//ДляНалУчета НезавершенноеПроизводство.ВременнаяРазницаОстаток как ВременнаяРазница,
						  |	НезавершенноеПроизводство.СтоимостьОстаток
						  |ИЗ
						  |	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(
						  |			&ДатаОстатков,
						  |			(СчетУчета, Подразделение) В
						  |				(ВЫБРАТЬ
						  |					ТаблВспом.счетучета,
						  |					ТаблВспом.Подразделение
						  |
						  |				ИЗ
						  |					ТаблВспом)
						  |		) КАК НезавершенноеПроизводство");
	
	МассивСчетов = Новый Массив;					  
	Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД);
	Иначе
		МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
		МассивСчетов.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	КонецЕсли;	
	
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
	Запрос.УстановитьПараметр("Счета",МассивСчетов);
	Запрос.УстановитьПараметр("МассПодр",ПРГ_ПолучитьПодразделенияВыпуска(СтруктураШапкиДокумента));
	
	
	возврат Запрос;
КонецФункции	

Функция СоздатьЭлементРасходовБудущихПериодов(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатрат,
	Сумма
	) Экспорт
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
		НаименованиеРБП = "ОХР";
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		НаименованиеРБП = "ОПР";
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		НаименованиеРБП = "ПР";
	Иначе
		НаименованиеРБП = "";
	КонецЕсли;
	НаименованиеРБП = НаименованиеРБП + " за " + 
		ПредставлениеПериода(СтруктураШапкиДокумента.мНачДата, СтруктураШапкиДокумента.мКонДата);
	
	ДатаНачалаСписания = НачалоДня(ДобавитьМесяц(СтруктураШапкиДокумента.мНачДата, 1));
	ДатаОкончанияСписания = НачалоДня(ДобавитьМесяц(СтруктураШапкиДокумента.мКонДата, 1));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|
	|ГДЕ
	|	РасходыБудущихПериодов.ПодразделениеОрганизации = &ПодразделениеОрганизации
	|	И РасходыБудущихПериодов.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|	И РасходыБудущихПериодов.ДатаНачалаСписания = &ДатаНачалаСписания
	|	И РасходыБудущихПериодов.ДатаОкончанияСписания = &ДатаОкончанияСписания
	|	И РасходыБудущихПериодов.СтатьяЗатрат = &СтатьяЗатрат
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", СтрокаВыборки.Подразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатрат);
	Запрос.УстановитьПараметр("ДатаНачалаСписания", ДатаНачалаСписания);
	Запрос.УстановитьПараметр("ДатаОкончанияСписания", ДатаОкончанияСписания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СправочникОбъектРБП = Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
		СправочникОбъектРБП.Наименование = НаименованиеРБП;
		
		СправочникОбъектРБП.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппа;
		СправочникОбъектРБП.ПодразделениеОрганизации = СтрокаВыборки.Подразделение;
		СправочникОбъектРБП.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
		СправочникОбъектРБП.ДатаНачалаСписания = ДатаНачалаСписания;
		СправочникОбъектРБП.ДатаОкончанияСписания = ДатаОкончанияСписания;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СправочникОбъектРБП = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	СправочникОбъектРБП.ВидРБП = Перечисления.ВидыРБП.Прочие;
	//>>23.05.16 Степанов 52690
	СправочникОбъектРБП.ПРГ_ВидыРБПМСФО = Перечисления.ПРГ_ВидыРБПМСФО.Прочее;
	//<<
	СправочникОбъектРБП.СчетБУ = СтрокаВыборки.СчетУчета;
	СправочникОбъектРБП.СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаВыборки.СчетУчета));
	СправочникОбъектРБП.Сумма = Сумма;
	
	СправочникОбъектРБП.Записать();
	
	Возврат СправочникОбъектРБП.Ссылка;
	
КонецФункции // СоздатьЭлементРасходовБудущихПериодов()

Процедура ОтнесениеПрямыхНаРБП(СтруктураШапкиДокумента, СтруктураТаблицДвижений) Экспорт 
	
	
	//начало изменений в налоговом тоже относим на рпб
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		и  Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		Тогда
		
	//конец изменений 	
		  возврат;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ИмяРегНЗП 		= "НезавершенноеПроизводствоНалоговыйУчет";
		ИмяРегБух  		= "Налоговый";
	Иначе
		ИмяРегНЗП		 = "НезавершенноеПроизводствоБухгалтерскийУчет";
		ИмяРегБух 		 = "Хозрасчетный";
	КонецЕсли;	
	
	
	НаборЗаписейНезавершенноеПроизводство  = РегистрыНакопления[ИмяРегНЗП].СоздатьНаборЗаписей();
	НаборЗаписейНезавершенноеПроизводство.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	НаборЗаписейРегБух  = РегистрыБухгалтерии[ИмяРегБух].СоздатьНаборЗаписей();
	НаборЗаписейРегБух.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);

	КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
	ЗапросНЗП    = СформироватьЗапросПоРБП(СтруктураШапкиДокумента);
	РезЗапросаНЗП = ЗапросНЗП.Выполнить(); 
	ТаблПодрВыпуска  = Неопределено;
	
	Если     СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
		или  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблПодрВыпуска = ПРГ_РасчетСебестоимости.ПолучитьТаблПодрСВыпуском(СтруктураШапкиДокумента,РезЗапросаНЗП);
	КонецЕсли;	
	
	ВыборкаНЗПП  = РезЗапросаНЗП.Выбрать();
	Пока ВыборкаНЗПП.Следующий() Цикл
		
			Если     СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
				или  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Если ТаблПодрВыпуска.Найти(ВыборкаНЗПП.Подразделение,"Подразделение") <> Неопределено Тогда
					 продолжить;
				КонецЕсли;	
			КонецЕсли;	
		
		
				Количество =  ВыборкаНЗПП.КоличествоОстаток;
				Сумма		= ВыборкаНЗПП.СтоимостьОстаток;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					ПостояннаяРазница  =  ВыборкаНЗПП.ПостояннаяРазница;
					ВременнаяРазница   =  ВыборкаНЗПП.ВременнаяРазница;
				КонецЕсли;
				
				ЭлементРасхода = СоздатьЭлементРасходовБудущихПериодов(
					СтруктураШапкиДокумента,
					ВыборкаНЗПП,
					Перечисления.ХарактерЗатрат.ПроизводственныеРасходы,
					Сумма
					);
				
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаНЗПП,
					ВыборкаНЗПП.Подразделение,
					Неопределено,
					Количество,
					Сумма,
					ПостояннаяРазница,
					ВременнаяРазница,
					ВидДвиженияНакопления.Расход,
					НаборЗаписейНезавершенноеПроизводство,
					КодОперации);
					
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
						
					 СформироватьПроводкуПоСписаниюЗатратНаРБП20(
						СтруктураШапкиДокумента,
						ВыборкаНЗПП,
						ЭлементРасхода,
						Сумма,
						Неопределено,
						НаборЗаписейРегБух
						);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете  Тогда
						
					 СформироватьПроводкуПоСписаниюЗатратНаРБП20(
						СтруктураШапкиДокумента,
						ВыборкаНЗПП,
						ЭлементРасхода,
						Сумма,
						Перечисления.ВидыУчетаПоПБУ18.НУ,
						НаборЗаписейРегБух
						);
						
					 СформироватьПроводкуПоСписаниюЗатратНаРБП20(
						СтруктураШапкиДокумента,
						ВыборкаНЗПП,
						ЭлементРасхода,
						ВременнаяРазница,
						Перечисления.ВидыУчетаПоПБУ18.ВР,
						НаборЗаписейРегБух
						);
						
					 СформироватьПроводкуПоСписаниюЗатратНаРБП20(
						СтруктураШапкиДокумента,
						ВыборкаНЗПП,
						ЭлементРасхода,
						ПостояннаяРазница,
						Перечисления.ВидыУчетаПоПБУ18.ПР,
						НаборЗаписейРегБух
						);
						
				КонецЕсли;
				
				
					
				
				//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				//	СформироватьПроводкуПоКорректировкеЗатрат(
				//			СтруктураШапкиДокумента,
				//			ВыборкаНЗПП,
				//			НаПодразделение,
				//			Неопределено,
				//			Перечисления.ВидыУчетаПоПБУ18.НУ,
				//			Сумма,
				//			НаборЗаписейРегБух
				//			);
				//	СформироватьПроводкуПоКорректировкеЗатрат(
				//			СтруктураШапкиДокумента,
				//			ВыборкаНЗПП,
				//			НаПодразделение,
				//			Неопределено,
				//			Перечисления.ВидыУчетаПоПБУ18.ПР,
				//			ПостояннаяРазница,
				//			НаборЗаписейРегБух
				//			);
				//	
				//	СформироватьПроводкуПоКорректировкеЗатрат(
				//		   СтруктураШапкиДокумента,
				//			ВыборкаНЗПП,
				//			НаПодразделение,
				//			Неопределено,
				//			Перечисления.ВидыУчетаПоПБУ18.ВР,
				//			ВременнаяРазница,
				//			НаборЗаписейРегБух
				//			);
			 	//КонецЕсли;	
			КонецЦикла;
			
	Если НаборЗаписейНезавершенноеПроизводство.Количество() > 0 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;
	
	Если НаборЗаписейРегБух.Количество() > 0 Тогда
		НаборЗаписейРегБух.Записать(Ложь);
	КонецЕсли;	
	
			
КонецПроцедуры	

// Определяет, следует ли заполнять оборотные субконто (статью затрат и подразделение) в проводках
// по данным учетной политики
Функция ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.Свойство("УчетнаяПолитика") Тогда
		// Учетная политика в структуре должна быть
		Возврат Ложь; 
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.Свойство("ЗаполнятьСтатьиИПодразделенияВПроводкахПриРаспределенииЗатрат") Тогда
		// В учетной политике регл. учета ресурс должен быть
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента.УчетнаяПолитика.ЗаполнятьСтатьиИПодразделенияВПроводкахПриРаспределенииЗатрат;
	
КонецФункции

Процедура СформироватьПроводкуПоСписаниюЗатратНаРБП20(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	РасходыБудущихПериодов,
	Сумма,
	ВидУчетаПоПБУ18,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СчетДт = ПланыСчетов.Налоговый.ПрочиеРасходыБудущихПериодов;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность  = Истина;
	НоваяПроводка.Период      = СтруктураШапкиДокумента.Период;
	НоваяПроводка.Содержание  = "Списание затрат на расходы будущих периодов";
		
	НоваяПроводка.Сумма  = Сумма;
		
	НоваяПроводка.СчетДт = СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "РасходыБудущихПериодов", РасходыБудущихПериодов);
		
	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "СтатьиЗатрат") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);
	КонецЕсли;
	
	Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
	 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
		НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
		НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкуПоСписаниюЗатратНаРБП()

Функция ПРГ_ПолучитьПодразделенияВыпуска(СтруктураШапкиДокумента) Экспорт
	Результат = Новый Массив;
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		возврат Результат;
	КонецЕсли;	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВыпускПродукцииНалоговыйУчет.Подразделение,
	                      |	СУММА(ВыпускПродукцииНалоговыйУчет.Количество) КАК Количество
	                      |ИЗ
	                      |	РегистрНакопления.ВыпускПродукцииНалоговыйУчет КАК ВыпускПродукцииНалоговыйУчет
	                      |ГДЕ
	                      |	ВыпускПродукцииНалоговыйУчет.Активность
	                      |	И ВыпускПродукцииНалоговыйУчет.Период МЕЖДУ &Дата1 И &Дата2
	                      |	И ВыпускПродукцииНалоговыйУчет.Организация = &Организация
	                      |	И ВыпускПродукцииНалоговыйУчет.СчетУчетаНЗП В(&СчетУчетаНЗП)
	                      |	И ВыпускПродукцииНалоговыйУчет.КодОперации = &КодОперации
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВыпускПродукцииНалоговыйУчет.Подразделение");
						  
	Запрос.УстановитьПараметр("Дата1",НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Дата2",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("КодОперации",Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
	МассСчетов = Новый Массив;
	МассСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	МассСчетов.Добавить(ПланыСчетов.Налоговый.ПроизводствоИзДавальческогоСырья);
	Запрос.УстановитьПараметр("СчетУчетаНЗП",МассСчетов);
	
	выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		  Результат.Добавить(Выборка.Подразделение);
	КонецЦикла;	
	  
	возврат Результат;
					  
КонецФункции	


///***************************Брак

Функция ПолучитьЗапросНазАтраты()
	
	//возврат Новый Запрос("ВЫБРАТЬ
	//					 |	ХозрасчетныйОбороты.КорСубконто1 КАК Подразделение,
	//					 |	ХозрасчетныйОбороты.КорСубконто2 КАК СтатьяЗатрат,
	//					 |	ХозрасчетныйОбороты.СуммаОборот,
	//					 |	ХозрасчетныйОбороты.КорСубконто3 КАК НоменклатурнаяГруппа
	//					 
	//					 |ИЗ
	//					 |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	//					 |			&Дата1,
	//					 |			&Дата2,
	//					 |			,
	//					 |			Счет В ИЕРАРХИИ (&Счет),
	//					 |			&Субконто,
	//					 |			КорСубконто3 = &НомГруппа
	//					 |				И КорСубконто2 = &Затрата
	//					 |				И Субконто1 = &Подразделение,
	//					 |			КорСчет В ИЕРАРХИИ (&КорСчет),
	//					 |			&КорСубконто) КАК ХозрасчетныйОбороты");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ХозрасчетныйОбороты.КорСубконто1 КАК Подразделение,
	                      |	ХозрасчетныйОбороты.КорСубконто2 КАК СтатьяЗатрат,
	                      |	ХозрасчетныйОбороты.СуммаОборот,
	                      |	ХозрасчетныйОбороты.КорСубконто3 КАК НоменклатурнаяГруппа
	                      |ПОМЕСТИТЬ ТбалЗатрат
	                      |ИЗ
	                      |	РегистрБухгалтерии.%ИмяПланаСчетов%.Обороты(
	                      |			&Дата1,
	                      |			&Дата2,
	                      |			,
	                      |			Счет В ИЕРАРХИИ (&Счет),
	                      |			&Субконто,
	                      |			КорСубконто3 = &НомГруппа
	                      |				И КорСубконто2 = &Затрата
	                      |				И Субконто1 = &Подразделение,
	                      |			КорСчет В ИЕРАРХИИ (&КорСчет),
	                      |			&КорСубконто) КАК ХозрасчетныйОбороты
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	                      |	ХозрасчетныйОстатки.СуммаОстаток,
	                      |	ХозрасчетныйОстатки.КоличествоОстаток
	                      |ПОМЕСТИТЬ Таблном
	                      |ИЗ
	                      |	РегистрБухгалтерии.%ИмяПланаСчетов%.Остатки(&ДатаОст, Счет = &Сч43, &СубконтоНом, ) КАК ХозрасчетныйОстатки
	                      |ГДЕ
	                      |	ХозрасчетныйОстатки.СуммаОстаток > 0
	                      |	И ХозрасчетныйОстатки.КоличествоОстаток > 0
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Организация,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Подразделение,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.СчетУчета,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.НоменклатурнаяГруппа,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Продукция,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ХарактеристикаПродукции,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.СерияПродукции,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Спецификация,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Заказ,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ДокументВыпуска,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.СтатьяЗатрат,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Затрата,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ХарактеристикаЗатраты,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.СерияЗатраты,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.НоменклатурнаяГруппаНЗП,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ЗаказНЗП,
	                      |//ДляБухУчета 	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ПРГ_КорСчет,
	                      |//ДляБухУчета 	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ПРГ_КорПодразделение,
	                      |//ДляБухУчета 	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ПРГ_КорСтатьяЗатрат,
	                      |//ДляБухУчета 	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ПРГ_КорНоменклатурнаяГруппа,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.КоличествоОборот КАК Количество,
	                      |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.СуммаОборот КАК Сумма,
						  | //ДляБухУчета 0 КАК ПостояннаяРазница,
						  | //ДляБухУчета 0 КАК ВременнаяРазница,
						  |	//ДляНалУчета ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ПостояннаяРазницаОборот КАК ПостояннаяРазница,
						  |	//ДляНалУчета ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ВременнаяРазницаОборот КАК ВременнаяРазница,
						  |	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.ПодразделениеНЗП
	                      |ИЗ
	                      |	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета%.Обороты(
	                      |			&Дата1,
	                      |			&Дата2,
	                      |			,
	                      |			(Подразделение, СтатьяЗатрат, НоменклатурнаяГруппа) В
	                      |					(ВЫБРАТЬ
	                      |						ТбалЗатрат.Подразделение,
	                      |						ТбалЗатрат.СтатьяЗатрат,
	                      |						ТбалЗатрат.НоменклатурнаяГруппа
	                      |					ИЗ
	                      |						ТбалЗатрат)
	                      |				И Продукция В
	                      |					(ВЫБРАТЬ
	                      |						Таблном.Номенклатура
	                      |					ИЗ
	                      |						Таблном)) КАК ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты");
	     возврат Запрос;
КонецФункции


	 
Процедура ПРГ_ДоРаспределитьБрак(СтруктураШапкиДокумента,Корректировка=Неопределено,СтруктураТаблицДвижений) Экспорт
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	  или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
	   возврат;
    КонецЕсли; 
	
	
	//1 проверяем есть ли выпуск
    ЗапросПроверка = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                                  |	БракВПроизводстве.Регистратор
                                  |ИЗ
                                  |	РегистрНакопления.БракВПроизводстве%СуффиксУчета% КАК БракВПроизводстве
                                  |ГДЕ
                                  |	БракВПроизводстве.Регистратор = &Регистратор");
								  
	ЗапросПроверка.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ЗапросПроверка.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	
								  
	ЗапросПроверка.УстановитьПараметр("Регистратор",СтруктураШапкиДокумента.Ссылка);
	
	Если Не ЗапросПроверка.Выполнить().Выбрать().Следующий() Тогда
		 возврат;
	КонецЕсли;	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда	
		ПроцедурыРасчетаСебестоимостиВыпуска.ПРГЗакрытиеСчетовКосвенныхРасходовБрака(СтруктураШапкиДокумента, Истина,СтруктураТаблицДвижений);
	КонецЕсли;
	
	//проверяем есть ли закрытие брака
	
	ЗапросКбраку = Новый Запрос("ВЫБРАТЬ
	                            |	БракВПроизводствеОстатки.Подразделение,
	                            |	БракВПроизводствеОстатки.СтатьяЗатрат,
	                            |	БракВПроизводствеОстатки.НоменклатурнаяГруппа,
	                            |	БракВПроизводствеОстатки.СуммаОстаток,
	                            |	БракВПроизводствеОстатки.Организация,
	                            |	БракВПроизводствеОстатки.СчетУчета,
	                            |//ДляБухУчета	0 КАК ПостояннаяРазницаОстаток,
	                            |//ДляБухУчета	0 КАК ВременнаяРазницаОстаток
	                            |//ДляНалУчета	БракВПроизводствеОстатки.ПостояннаяРазницаОстаток КАК ПостояннаяРазницаОстаток,
	                            |//ДляНалУчета	БракВПроизводствеОстатки.ВременнаяРазницаОстаток КАК ВременнаяРазницаОстаток
	                            |ИЗ
	                            |	РегистрНакопления.БракВПроизводстве%СуффиксУчета%.Остатки(&ДатаОст, ) КАК БракВПроизводствеОстатки");
								
	ЗапросКбраку.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ЗапросКбраку.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
								
								
	Дата1   = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	Дата2 	= КонецМесяца(СтруктураШапкиДокумента.Дата);
	ДатаОст = Дата2 + 1;
	
	Регистратор = ?(Корректировка = Неопределено,СтруктураШапкиДокумента.Ссылка,Корректировка);
	Период  	= СтруктураШапкиДокумента.Дата;
	ЗапросКбраку.УстановитьПараметр("ДатаОст",ДатаОст);
	
	ТаблБрака = ЗапросКбраку.Выполнить().Выгрузить();
	
	Если ТаблБрака.Количество() = 0 Тогда
		Если Регистратор =СтруктураШапкиДокумента.Ссылка Тогда
		 	возврат;
		КонецЕсли;	
	КонецЕсли;	
		
	ИмяПрефиксРегистра = ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,"БухгалтерскийУчет","НалоговыйУчет");
	ИмяРегБух          = ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,"Хозрасчетный","Налоговый");
	ПланСчетов 		   = ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный,ПланыСчетов.Налоговый);

	РегБрака = РегистрыНакопления["БракВПроизводстве"+ИмяПрефиксРегистра].СоздатьНаборЗаписей();
	РегБрака.Отбор.Регистратор.Установить(Регистратор);

	РегЗатраты = РегистрыНакопления["ЗатратыНаВыпускПродукции"+ИмяПрефиксРегистра].СоздатьНаборЗаписей();
	РегЗатраты.Отбор.Регистратор.Установить(Регистратор);

	РегВыпуск = РегистрыНакопления["ВыпускПродукции"+ИмяПрефиксРегистра].СоздатьНаборЗаписей();
	РегВыпуск.Отбор.Регистратор.Установить(Регистратор);

	РегПартии = РегистрыНакопления["ПартииТоваровНаСкладах"+ИмяПрефиксРегистра].СоздатьНаборЗаписей();
	РегПартии.Отбор.Регистратор.Установить(Регистратор);

	РегНЗП = РегистрыНакопления["НезавершенноеПроизводство"+ИмяПрефиксРегистра].СоздатьНаборЗаписей();
	РегНЗП.Отбор.Регистратор.Установить(Регистратор);

	Хозрасчетный = РегистрыБухгалтерии[ИмяРегБух].СоздатьНаборЗаписей();
	Хозрасчетный.Отбор.Регистратор.Установить(Регистратор);

	Сч43 = ПланСчетов.НайтиПоКоду("43");
	Сч28 = ПланСчетов.НайтиПоКоду("28.01");
	
	ЗапросНАЗАтраты = ПолучитьЗапросНазАтраты();
	
	ЗапросНАЗАтраты.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ЗапросНАЗАтраты.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
			
	
	Для каждого ТекБрак Из ТаблБрака Цикл
		НоваяЗапись = РегБрака.Добавить();
		НоваяЗапись.ВидДвижения          = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Активность    		 = Истина;
		НоваяЗапись.Период		  		 = Период;
		НоваяЗапись.Организация		     = ТекБрак.Организация;
		НоваяЗапись.Подразделение 		 = ТекБрак.Подразделение;
		НоваяЗапись.НоменклатурнаяГруппа = ТекБрак.НоменклатурнаяГруппа;
		НоваяЗапись.СтатьяЗатрат         = ТекБрак.СтатьяЗатрат;
		НоваяЗапись.СчетУчета			 = Сч28;
		НоваяЗапись.Сумма 				 = ТекБрак.СуммаОстаток;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			НоваяЗапись.ПостояннаяРазница = ТекБрак.ПостояннаяРазницаОстаток;
			НоваяЗапись.ВременнаяРазница  = ТекБрак.ВременнаяРазницаОстаток;
		КонецЕсли;	
		НоваяЗапись.КодОперации			 = Перечисления.КодыОперацийБракВПроизводстве.СписаниеПартийВПроизводствоОперативно;
		
		///---------------ЗАПИСЬ
		
		ЗапросНАЗАтраты.УстановитьПараметр("Дата1",Дата1);
		ЗапросНАЗАтраты.УстановитьПараметр("Дата2",Дата2);
		ЗапросНАЗАтраты.УстановитьПараметр("ДатаОст",ДатаОст);
		
		КорСубконто = Новый Массив;
		КорСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		КорСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		КорСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		
		ЗапросНАЗАтраты.УстановитьПараметр("КорСубконто",КорСубконто);
		ЗапросНАЗАтраты.УстановитьПараметр("КорСчет",ПланСчетов.НайтиПоКоду("20.01.1"));	
		ЗапросНАЗАтраты.УстановитьПараметр("Субконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		ЗапросНАЗАтраты.УстановитьПараметр("Счет",Сч28);	
		
		ЗапросНАЗАтраты.УстановитьПараметр("Затрата",ТекБрак.СтатьяЗатрат);
		ЗапросНАЗАтраты.УстановитьПараметр("НомГруппа",ТекБрак.НоменклатурнаяГруппа);
		ЗапросНАЗАтраты.УстановитьПараметр("Подразделение",	ТекБрак.Подразделение);
		ЗапросНАЗАтраты.УстановитьПараметр("СубконтоНом",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ЗапросНАЗАтраты.УстановитьПараметр("Сч43",Сч43);
		Качество = Справочники.Качество.Новый;
		
		ТаблЗатрат = ЗапросНАЗАтраты.Выполнить().Выгрузить();
		//ТаблЗатрат.ВыбратьСтроку();
		
		ИтогоСумма = ТаблЗатрат.Итог("Сумма")
		+ТаблЗатрат.Итог("ПостояннаяРазница") + ТаблЗатрат.Итог("ВременнаяРазница");
		//РаспрСумма = ТекБрак.СуммаОстаток; 
		ПогСумма   			= ТекБрак.СуммаОстаток;
		ПогВременнаяРазница = ТекБрак.ВременнаяРазницаОстаток;
		ПогПостояннаяРазница = ТекБрак.ПостояннаяРазницаОстаток;
		
		Если ИтогоСумма = 0 Тогда
			Сообщить("Не удалось распределить "+ТекБрак.Подразделение+" \ "+ТекБрак.СтатьяЗатрат+" сумма для расчета = 0");
			продолжить;
		КонецЕсли;	
		
		ВсегоПогашено  = 0;
		Для каждого ТекСтрока Из ТаблЗатрат Цикл
			
				распрСумма 				   = Окр((ТекСтрока.Сумма + ТекСтрока.ВременнаяРазница+ТекСтрока.ПостояннаяРазница) / ИтогоСумма*ПогСумма,2); 
				распрСуммаВременнаяРазница = Окр((ТекСтрока.Сумма + ТекСтрока.ВременнаяРазница+ТекСтрока.ПостояннаяРазница) / ИтогоСумма*ПогВременнаяРазница,2); 
				распрСуммаПостояннаяРазница = Окр((ТекСтрока.Сумма + ТекСтрока.ВременнаяРазница+ТекСтрока.ПостояннаяРазница) / ИтогоСумма*ПогПостояннаяРазница,2); 
				
				ПогСумма   			= ПогСумма-распрСумма;
				ПогВременнаяРазница = ПогВременнаяРазница - распрСуммаВременнаяРазница;
				ПогПостояннаяРазница = ПогПостояннаяРазница - распрСуммаПостояннаяРазница;
				
				ИтогоСумма 	= 	ИтогоСумма-(ТекСтрока.Сумма+ТекСтрока.ВременнаяРазница+ТекСтрока.ПостояннаяРазница);
				ВсегоПогашено  = ВсегоПогашено+распрСумма;
				Если распрСумма = 0
					и распрСуммаВременнаяРазница  = 0
					и распрСуммаПостояннаяРазница = 0
					тогда продолжить; 
				конецесли;
			
			
				НоваяЗапись = РегЗатраты.Добавить();
				НоваяЗапись.Активность = Истина;
				НоваяЗапись.Период     = Период;
				ЗаполнитьЗначенияСвойств(НоваяЗапись,ТекСтрока);
				НоваяЗапись.Сумма = распрСумма;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НоваяЗапись.ПостояннаяРазница  = распрСуммаПостояннаяРазница;
					НоваяЗапись.ВременнаяРазница   = распрСуммаВременнаяРазница;
				КонецЕслИ;	
				
				НоваяЗапись.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьБракВПроизводстве;
				
				
				НоваяЗапись = РегНЗП.Добавить();
				НоваяЗапись.Активность = Истина;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период     = Период;
				НоваяЗапись.Стоимость  = РаспрСумма;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НоваяЗапись.ПостояннаяРазница  = распрСуммаПостояннаяРазница;
					НоваяЗапись.ВременнаяРазница   = распрСуммаВременнаяРазница;
				КонецЕслИ;	
				
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись,ТекСтрока,"Организация,Подразделение,СчетУчета,СтатьяЗатрат,НоменклатурнаяГруппа,Заказ,Затрата,ХарактеристикаЗатраты,СерияЗатраты");
				НоваяЗапись.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеБракВПроизводстве_Регламент;
				
				ВтораяЗапись  = РегНЗП.Добавить();
				ЗаполнитьЗначенияСвойств(ВтораяЗапись,НоваяЗапись);
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				НоваяЗапись = РегПартии.Добавить();
				НоваяЗапись.Активность = Истина;
				НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период        = Период;
				НоваяЗапись.Организация   = ТекСтрока.Организация; 
				НоваяЗапись. Номенклатура = ТекСтрока.Продукция;
				НоваяЗапись. СчетУчета 	  = Сч43;
				НоваяЗапись. Качество  	  = Качество;
				НоваяЗапись. Стоимость	  = распрСумма;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НоваяЗапись.ПостояннаяРазница  = распрСуммаПостояннаяРазница;
					НоваяЗапись.ВременнаяРазница   = распрСуммаВременнаяРазница;
				КонецЕслИ;	
				
				НоваяЗапись. КодОперации  = Перечисления.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость; 
				
				НоваяЗапись = РегВыпуск.Добавить();
				НоваяЗапись.Активность = Истина;
				НоваяЗапись.Период     = Период;
				НоваяЗапись.Качество   = Качество;
				НоваяЗапись.СчетДт     = Сч43;
				НоваяЗапись.СчетУчетаНЗП = ТекСтрока.СчетУчета; 
				ЗаполнитьЗначенияСвойств(НоваяЗапись,ТекСтрока,"Организация,Подразделение,НоменклатурнаяГруппа,Продукция,ХарактеристикаПродукции,СерияПродукции,Спецификация,Заказ");
				НоваяЗапись.Стоимость 		= распрСумма;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НоваяЗапись.ПостояннаяРазница  = распрСуммаПостояннаяРазница;
					НоваяЗапись.ВременнаяРазница   = распрСуммаВременнаяРазница;
				КонецЕслИ;	
				НоваяЗапись.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад;
				НоваяЗапись.ВариантВыпускаПродукции = Перечисления.ВариантыВыпускаПродукции.СобственнаяПродукция;
				
				
				
				СформироватьПрводокуДозакрытиеБрака(РаспрСумма,
						Хозрасчетный,
						?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,Перечисления.ВидыУчетаПоПБУ18.НУ,Неопределено),
						ТекБрак,
						ТекСтрока,
						Сч43,сч28,Период);
						
						
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СформироватьПрводокуДозакрытиеБрака(распрСуммаПостояннаяРазница,
						Хозрасчетный,
						?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,Перечисления.ВидыУчетаПоПБУ18.ПР,Неопределено),
						ТекБрак,
						ТекСтрока,
						Сч43,сч28,Период);
						
					СформироватьПрводокуДозакрытиеБрака(распрСуммаВременнаяРазница,
						Хозрасчетный,
						?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,Перечисления.ВидыУчетаПоПБУ18.ВР,Неопределено),
						ТекБрак,
						ТекСтрока,
						Сч43,сч28,Период);
						
				КонецЕсли;			
														
				//БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ТекСтрока.СтатьяЗатрат);
			
		КонеЦЦикла;	
	КонецЦикла;	
	
	ВариантЗаписи = ?(Регистратор =СтруктураШапкиДокумента.Ссылка,Ложь,Истина);
	
	//Сообщить(ВсегоПогашено);
	 //РегЗатраты.Записать();
	РегБрака.Записать(ВариантЗаписи);
	РегЗатраты.Записать(ВариантЗаписи);
	РегВыпуск.Записать(ВариантЗаписи);
	РегПартии.Записать(ВариантЗаписи);	
	РегНЗП.Записать(ВариантЗаписи);	
	Хозрасчетный.Записать(ВариантЗаписи);
	
КонецПроцедуры	

Процедура СформироватьПрводокуДозакрытиеБрака(Сумма,Хозрасчетный,ВидУчета,ТекБрак,ТекСтрока,Сч43,сч28,Период)
		Если Сумма =0 тогда
		     возврат;
		КонецЕсли;
		НоваяПроводка = Хозрасчетный.Добавить();
		НоваяПроводка.Организация    = ТекСтрока.Организация;
		НоваяПроводка.Активность	 = Истина;
		НоваяПроводка.Период		 = Период;
		НоваяПроводка.Содержание 	 = "Списание брака";
		Если ВидУчета <> Неопределено Тогда
			НоваяПроводка.ВидУчетаДт = ВидУчета;
			НоваяПроводка.ВидУчетаКТ = ВидУчета;
		КонецЕсли;	
		
		НоваяПроводка.Сумма = Сумма;

		НоваяПроводка.СчетДт = ТекСтрока.СчетУчета;

		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", ТекСтрока.Подразделение);		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", ТекСтрока.СтатьяЗатрат);
											
		НоваяПроводка.СчетКт = Сч28;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ТекБрак.Подразделение);		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ТекБрак.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", ТекСтрока.СтатьяЗатрат);
		
		
		НоваяПроводка = Хозрасчетный.Добавить();
		НоваяПроводка.Организация    = ТекСтрока.Организация;
		НоваяПроводка.Активность	 = Истина;
		НоваяПроводка.Период		 = Период;
		НоваяПроводка.Содержание 	 = "Выпуск продукции на склад";
		Если ВидУчета <> Неопределено Тогда
			НоваяПроводка.ВидУчетаДт = ВидУчета;
			НоваяПроводка.ВидУчетаКТ = ВидУчета;
		КонецЕсли;	
		
												
		НоваяПроводка.Сумма = Сумма;

		НоваяПроводка.СчетДт = Сч43;

		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", ТекСтрока.Продукция);		
											
		НоваяПроводка.СчетКт = ТекСтрока.СчетУчета;;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ТекСтрока.Подразделение);		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", ТекСтрока.НоменклатурнаяГруппа);
	
	КонецПроцедуры	
	

//начало изменений оптимизация
Процедура ПРГ_СформироватьВременнуюТаблицуСпособыРаспределения(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц
	)  Экспорт
	
	ТекстЗапросаСКомментариями = "ВЫБРАТЬ
	                             |	ПланСчетов.Ссылка
	                             |ПОМЕСТИТЬ ПланСчетов
	                             |ИЗ
	                             |	//ДляБухУчета ПланСчетов.Хозрасчетный КАК ПланСчетов
								 |	//ДляНалУчета ПланСчетов.Налоговый КАК ПланСчетов
	                             |ГДЕ
	                             |	ПланСчетов.Ссылка В ИЕРАРХИИ(&МассивСчетовЗатрат)
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	ПланСчетов.Ссылка
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	ИспользуемыеСтатьиЗатрат.Подразделение КАК Подразделение,
	                             |	ИспользуемыеСтатьиЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	                             |	ИспользуемыеСтатьиЗатрат.СчетУчета,
	                             |	ИспользуемыеСтатьиЗатрат.СчетУчета.Родитель КАК СчетУчетаРодитель1,
	                             |	ИспользуемыеСтатьиЗатрат.СчетУчета.Родитель.Родитель КАК СчетУчетаРодитель2,
	                             |	ИспользуемыеСтатьиЗатрат.СчетУчета.Родитель.Родитель.Родитель КАК СчетУчетаРодитель3
	                             |ПОМЕСТИТЬ ИспПодр
	                             |ИЗ
	                             |	(ВЫБРАТЬ
	                             |		БракВПроизводстве.Подразделение КАК Подразделение,
	                             |		БракВПроизводстве.СтатьяЗатрат КАК СтатьяЗатрат,
	                             |		БракВПроизводстве.СчетУчета КАК СчетУчета
	                             |	ИЗ
	                             |		РегистрНакопления.БракВПроизводстве%СуффиксУчета% КАК БракВПроизводстве
	                             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов КАК ПланСчетов
	                             |			ПО БракВПроизводстве.СчетУчета = ПланСчетов.Ссылка
	                             |	ГДЕ
	                             |		БракВПроизводстве.Период МЕЖДУ &НачДата И &КонДата
	                             |		И БракВПроизводстве.Организация = &Организация
	                             |	
	                             |	СГРУППИРОВАТЬ ПО
	                             |		БракВПроизводстве.СтатьяЗатрат,
	                             |		БракВПроизводстве.Подразделение,
	                             |		БракВПроизводстве.СчетУчета
	                             |	
	                             |	ОБЪЕДИНИТЬ ВСЕ
	                             |	
	                             |	ВЫБРАТЬ
	                             |		Затраты.Подразделение,
	                             |		Затраты.СтатьяЗатрат,
	                             |		Затраты.СчетУчета
	                             |	ИЗ
	                             |		РегистрНакопления.Затраты%СуффиксУчета% КАК Затраты
	                             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов КАК ПланСчетов
	                             |			ПО Затраты.СчетУчета = ПланСчетов.Ссылка
	                             |	ГДЕ
	                             |		Затраты.Период МЕЖДУ &НачДата И &КонДата
	                             |		И Затраты.Организация = &Организация
	                             |	
	                             |	СГРУППИРОВАТЬ ПО
	                             |		Затраты.Подразделение,
	                             |		Затраты.СтатьяЗатрат,
	                             |		Затраты.СчетУчета
	                             |	
	                             |	ОБЪЕДИНИТЬ ВСЕ
	                             |	
	                             |	ВЫБРАТЬ
	                             |		НезавершенноеПроизводство.Подразделение,
	                             |		НезавершенноеПроизводство.СтатьяЗатрат,
	                             |		НезавершенноеПроизводство.СчетУчета
	                             |	ИЗ
	                             |		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета% КАК НезавершенноеПроизводство
	                             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов КАК ПланСчетов
	                             |			ПО НезавершенноеПроизводство.СчетУчета = ПланСчетов.Ссылка
	                             |	ГДЕ
	                             |		НезавершенноеПроизводство.Период МЕЖДУ &НачДата И &КонДата
	                             |		И НезавершенноеПроизводство.Организация = &Организация
	                             |	
	                             |	СГРУППИРОВАТЬ ПО
	                             |		НезавершенноеПроизводство.СтатьяЗатрат,
	                             |		НезавершенноеПроизводство.Подразделение,
	                             |		НезавершенноеПроизводство.СчетУчета) КАК ИспользуемыеСтатьиЗатрат
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	ИспользуемыеСтатьиЗатрат.Подразделение,
	                             |	ИспользуемыеСтатьиЗатрат.СтатьяЗатрат,
	                             |	ИспользуемыеСтатьиЗатрат.СчетУчета,
	                             |	ИспользуемыеСтатьиЗатрат.СчетУчета.Родитель,
	                             |	ИспользуемыеСтатьиЗатрат.СчетУчета.Родитель.Родитель,
	                             |	ИспользуемыеСтатьиЗатрат.СчетУчета.Родитель.Родитель.Родитель
	                             |
	                             |ИНДЕКСИРОВАТЬ ПО
	                             |	СтатьяЗатрат,
	                             |	Подразделение
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	СпособыРаспределения.СтатьяЗатрат,
	                             |	ЕСТЬNULL(ИспПодр.Подразделение, СпособыРаспределения.Подразделение) КАК Подразделение,
	                             | //ДляБухУчета	ЕСТЬNULL(СпособыРаспределения.СчетЗатрат, ИспПодр.СчетУчета) КАК СчетЗатрат,
								 | //ДляНалУчета	ЕСТЬNULL(СпособыРаспределения.СчетЗатратНУ, ИспПодр.СчетУчета) КАК СчетЗатрат,
	                             |	СпособыРаспределения.Период,
	                             |	ЕСТЬNULL(СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения, ЛОЖЬ) КАК РаспределятьНаПодчиненныеПодразделения,
	                             |	ВЫБОР
	                             |		КОГДА СпособыРаспределения.Подразделение <> ИспПодр.Подразделение
	                             |			ТОГДА ИСТИНА
	                             |		ИНАЧЕ ЛОЖЬ
	                             |	КОНЕЦ КАК ЭтоСпособРаспределенияРодителя,
	                             |	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	                             |	СпособыРаспределения.СпособРаспределенияЗатрат,
	                             |	СпособыРаспределения.НеРаспределять
								 | ПОМЕСТИТЬ СпособыРаспределения%СуффиксУчета%
	                             |ИЗ
	                             |	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(&КонГраница, Организация = &Организация) КАК СпособыРаспределения
	                             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов КАК ПланСчетов
	                             |		//ДляБухУчета ПО СпособыРаспределения.СчетЗатрат = ПланСчетов.Ссылка
								 |		//ДляНалУчета ПО СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Ссылка
	                             |		Левое СОЕДИНЕНИЕ ИспПодр КАК ИспПодр
	                             |		ПО СпособыРаспределения.СтатьяЗатрат = ИспПодр.СтатьяЗатрат
	                             |			И (СпособыРаспределения.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	                             |				ИЛИ СпособыРаспределения.Подразделение = ИспПодр.Подразделение)
	                             |//ДляБухУчета И (СпособыРаспределения.СчетЗатрат = ИспПодр.СчетУчета
	                             |//ДляБухУчета ИЛИ СпособыРаспределения.СчетЗатрат = ИспПодр.СчетУчетаРодитель1
	                             |//ДляБухУчета ИЛИ СпособыРаспределения.СчетЗатрат = ИспПодр.СчетУчетаРодитель2
	                             |//ДляБухУчета ИЛИ СпособыРаспределения.СчетЗатрат = ИспПодр.СчетУчетаРодитель3)
	                             |//ДляНалУчета И (СпособыРаспределения.СчетЗатратНУ = ИспПодр.СчетУчета
	                             |//ДляНалУчета ИЛИ СпособыРаспределения.СчетЗатратНУ = ИспПодр.СчетУчетаРодитель1
	                             |//ДляНалУчета ИЛИ СпособыРаспределения.СчетЗатратНУ = ИспПодр.СчетУчетаРодитель2
	                             |//ДляНалУчета ИЛИ СпособыРаспределения.СчетЗатратНУ = ИспПодр.СчетУчетаРодитель3)
								 |";
	
	//ТекстЗапросаСКомментариями = "
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СпособыРаспределения.СтатьяЗатрат,
	//|	ЕСТЬNULL(Подразделения.Подразделение, СпособыРаспределения.Подразделение) КАК Подразделение,
	//|	//ДляБухУчета ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.СчетЗатрат) КАК СчетЗатрат,
	//|	//ДляНалУчета ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.СчетЗатратНУ) КАК СчетЗатрат,
	//|	//ДляМеждУчета ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.СчетЗатрат) КАК СчетЗатрат,
	//|	ЕСТЬNULL(
	//|		СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения,
	//|		Ложь
	//|		) КАК РаспределятьНаПодчиненныеПодразделения,
	//|	
	//|	ВЫБОР КОГДА Подразделения.Подразделение <> СпособыРаспределения.Подразделение
	//|		И СпособыРаспределения.Подразделение <>
	//|			//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	//|			//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//|	ТОГДА
	//|		Истина
	//|	ИНАЧЕ
	//|		Ложь
	//|	КОНЕЦ КАК ЭтоСпособРаспределенияРодителя,
	//|		
	//|	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	//|	СпособыРаспределения.СпособРаспределенияЗатрат,
	//|	СпособыРаспределения.НеРаспределять,
	//|	СпособыРаспределения.Период
	//|	
	//|ПОМЕСТИТЬ СпособыРаспределения%СуффиксУчета%
	//|ИЗ
	//|	РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	//|		//ДляРеглУчета Организация = &Организация 
	//|	) КАК СпособыРаспределения
	//|
	//|	ЛЕВОЕ СОЕДИНЕНИЕ (
	//|		ВЫБРАТЬ
	//|			Подразделения.Родитель КАК Родитель,
	//|			Подразделения.Ссылка КАК Подразделение
	//|		ИЗ
	//|			//ДляУпрУчета 	Справочник.Подразделения КАК Подразделения
	//|			//ДляРеглУчета 	Справочник.ПодразделенияОрганизаций КАК Подразделения
	//|		
	//|		//ДляРеглУчета 	ГДЕ
	//|		//ДляРеглУчета 		Подразделения.Владелец = &Организация
	//|		) КАК Подразделения
	//|	ПО
	//|		СпособыРаспределения.Подразделение = 
	//|			//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	//|			//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//|		ИЛИ (СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	//|			И 
	//|			(СпособыРаспределения.Подразделение = Подразделения.Подразделение
	//|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель
	//|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель
	//|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель.Родитель)
	//|			)
	//|			
	//|	//ДляРеглУчета 	ЛЕВОЕ СОЕДИНЕНИЕ (
	//|	//ДляРеглУчета 		ВЫБРАТЬ
	//|	//ДляРеглУчета 			ПланСчетов.Ссылка КАК Счет
	//|	//ДляРеглУчета 		ИЗ
	//|	//ДляРеглУчета 			ПланСчетов.%ИмяПланаСчетов% КАК ПланСчетов
	//|	//ДляРеглУчета 		ГДЕ
	//|	//ДляРеглУчета 			ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетовЗатрат)
	//|	//ДляРеглУчета 		) КАК ПланСчетов
	//|	//ДляРеглУчета 	ПО
	//|		//ДляБухУчета 	СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет
	//|		//ДляБухУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель
	//|		//ДляБухУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель
	//|		//ДляБухУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель.Родитель
	//|		
	//|		//ДляНалУчета 	СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Счет
	//|		//ДляНалУчета 		ИЛИ СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Счет.Родитель
	//|		//ДляНалУчета 		ИЛИ СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Счет.Родитель.Родитель
	//|		//ДляНалУчета 		ИЛИ СпособыРаспределения.СчетЗатратНУ = ПланСчетов.Счет.Родитель.Родитель.Родитель
	//|		
	//|		//ДляМеждУчета 	СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет
	//|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель
	//|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель
	//|		//ДляМеждУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель.Родитель
	////начало изменений оптим р/с
	//|ИНДЕКСИРОВАТЬ ПО
	//|       СтатьяЗатрат,
	//|       Подразделение,
	//|        //ДляБухУчета СчетЗатрат,
	//|        //ДляНалУчета СчетЗатрат,
	//|        //ДляМеждУчета СчетЗатрат,
	//|           Период	
	////конец изменений
	//|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		МассивСчетовЗатрат = Новый Массив;
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		МассивСчетовЗатрат = Новый Массив;
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.БракВПроизводстве);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство_);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбслуживающиеПроизводства);
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
		МассивСчетовЗатрат = Новый Массив;
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.БракВПроизводстве);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОсновноеПроизводство);
		//начало изменений ДС МСФО 03.12.2013
		//МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ВспомогательноеПроизводство);
		//конец изменений ДС МСФО 03.12.2013
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОбслуживающиеПроизводства);
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	//Рез = Запрос.Выполнить().Выгрузить();
	//Рез.ВыбратьСтроку();
	
КонецПроцедуры // СформироватьВременнуюТаблицуСпособыРаспределения()

Функция ПРГ_ПолучитьСписокНомГруп(НоменклатурнаяГруппа,РезультатЗапросаБазаНаПродукцию) Экспорт 
	
	Выборка = РезультатЗапросаБазаНаПродукцию.Выбрать();
	
	ТаблНоменкл = Новый ТаблицаЗначений;
	ТаблНоменкл .Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблНоменкл .Колонки.Добавить("НоменклатурнаяГруппа",Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	Пока Выборка.Следующий() Цикл
		НС = ТаблНоменкл .Добавить();
		НС.Номенклатура 		= Выборка.Продукция;
		НС.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппаНЗП;
	КонецЦикла;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблНоменкл.Номенклатура,
	                      |	ТаблНоменкл.НоменклатурнаяГруппа
	                      |ПОМЕСТИТЬ ТаблНоменкл
	                      |ИЗ
	                      |	&ТаблНоменкл КАК ТаблНоменкл
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Номенклатура.ВидНоменклатуры
	                      |ПОМЕСТИТЬ ТаблДопустВид
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Номенклатура.ВидНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблНоменкл.НоменклатурнаяГруппа
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Ном
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблДопустВид КАК ТаблДопустВид
	                      |		ПО Ном.ВидНоменклатуры = ТаблДопустВид.ВидНоменклатуры
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблНоменкл КАК ТаблНоменкл
	                      |		ПО Ном.Ссылка = ТаблНоменкл.Номенклатура
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТаблНоменкл.НоменклатурнаяГруппа");
						  
	Запрос.УстановитьПараметр("ТаблНоменкл",ТаблНоменкл);					  
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",НоменклатурнаяГруппа);
						  
	Результат = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.НоменклатурнаяГруппа);
	КонецЦикла;	
	
	возврат Результат;
КонецФункции

//конец изменений


 Функция ПолучитьЗапросПоВыпускуПодч(СтруктураШапкиДокумента) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СУММА(ВыпускПродукцииБухгалтерскийУчет.Количество) КАК Количество,
	                      |	ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП КАК СчетУчетаЗатрат,
	                      |	ВыпускПродукцииБухгалтерскийУчет.Подразделение КАК Уровень1
	                      |ИЗ
	                      |	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукцииБухгалтерскийУчет
	                      |ГДЕ
	                      |	ВыпускПродукцииБухгалтерскийУчет.Период МЕЖДУ &ДатаНач И &ДатаКон
	                      |	И (ВыпускПродукцииБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ВыпускПродукции
	                      |			ИЛИ ВыпускПродукцииБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
	                      |	И ВыпускПродукцииБухгалтерскийУчет.Организация = &Организация
	                      |	И ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП = &СчетУчетаНЗП
						  |	И ВыпускПродукцииБухгалтерскийУчет.Подразделение в иерархии (&Подразделение)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВыпускПродукцииБухгалтерскийУчет.СчетУчетаНЗП,
	                      |	ВыпускПродукцииБухгалтерскийУчет.Подразделение");
						  
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						  
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
    Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетУчетаНЗП",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	
	возврат Запрос;	
КонецФункции

Функция ПолучитьТаблПодрСВыпуском(СтруктураШапкиДокумента,РезЗапросаПоЗатратам) Экспорт
	РезТабл =   Новый ТаблицаЗначений;
	РезТабл.Колонки.Добавить("Подразделение");
	РезТабл.Индексы.Добавить("Подразделение");
	
	ТаблПодр = РезЗапросаПоЗатратам.Выгрузить();
	ТаблПодр.Свернуть("Подразделение");
	
	ЗапросКВыпуску = ПолучитьЗапросПоВыпускуПодч(СтруктураШапкиДокумента);
	Для каждого ТекСтрока  Из ТаблПодр Цикл
		ЗапросКВыпуску.УстановитьПараметр("Подразделение",ТекСтрока.Подразделение);
		Выборка = ЗапросКВыпуску.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НС = РезТабл.Добавить();
			НС.Подразделение = ТекСтрока.Подразделение;
		КонецЕсли;	
	КонецЦикла;	
	
	возврат РезТабл; 
КонецФункции


//начало изменений Ожиганов 25.01.2016 б/н перенос затрат в НУ по подразделениям 97 счета 
Функция ПолучитьЗапросПоВыпускуПервыйУровень(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|  	ПРГ_Подразделения97.Подразделение
				|Поместить ТаблПодр97
				|ИЗ
				|  РегистрСведений.ПРГ_Подразделения97Счета.СрезПоследних(&ДатаКон, ) КАК ПРГ_Подразделения97
				|ГДЕ 
				|  //ДляБухУчета ПРГ_Подразделения97.СчетУчетаБУ в (&СчетаЗатрат)
				|  //ДляНалУчета  ПРГ_Подразделения97.СчетУчетаНУ в (&СчетаЗатрат)
				|СГРУППИРОВАТЬ ПО
				|  ПРГ_Подразделения97.Подразделение
				| ;
				|
				|	
				|ВЫБРАТЬ
				|		  	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
				|		  	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат
				|		  ПОМЕСТИТЬ ТаблПодр
				|		  ИЗ
				|		  	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(
				|		  			&ДатаКон,
				|		  			Организация = &Организация
				|		  				И Подразделение  в (выбрать ТаблПодр97.Подразделение из ТаблПодр97)) КАК СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних
				|		  ГДЕ
				|		  	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СпособРаспределенияЗатрат.РаспределятьЗатратыНаУровеньВыше
				|		  	//ДляБухУчета И СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат В(&СчетаЗатрат)
				|		  	//ДляНалУчета И СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатратНУ В(&СчетаЗатрат)
				|		  
				|		  СГРУППИРОВАТЬ ПО
				|		  	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.Подразделение,
				|		  	СпособыРаспределенияСтатейЗатратОрганизацийСрезПоследних.СчетЗатрат
				|		  ;
				|		  
				|		  ////////////////////////////////////////////////////////////////////////////////
				|		  ВЫБРАТЬ
				|		  	СУММА(ЕСТЬNULL(ВыпускПродукции.Количество, 0)) КАК Количество,
				|		  	ТаблПодр.Подразделение,
				|		  	ТаблПодр.Подразделение.Родитель как Уровень1
				|		  ИЗ
				|		  	ТаблПодр КАК ТаблПодр
				|		  		Внутреннее СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
				|		  		ПО ТаблПодр.Подразделение = ВыпускПродукции.Подразделение
				|		  			И &СчетУчетаНЗП = ВыпускПродукции.СчетУчетаНЗП
				|		   И
				|		  	ВыпускПродукции.Период МЕЖДУ &ДатаНач И &ДатаКон
				|		  	И (ВыпускПродукции.Регистратор ССЫЛКА Документ.ВыпускПродукции
				|		  			ИЛИ ВыпускПродукции.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
				|		  
				|		  СГРУППИРОВАТЬ ПО
				|		  	ТаблПодр.Подразделение,
				|		  	ТаблПодр.Подразделение.Родитель
				|		  	
				|		  
				|		  ИМЕЮЩИЕ
				|		  	СУММА(ЕСТЬNULL(ВыпускПродукции.Количество, 0)) > 0
				|");
	
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		Запрос.Текст, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
						  
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураШапкиДокумента.Дата));
    Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОстатков",КонецМесяца(СтруктураШапкиДокумента.Дата)+1);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	мСчЗатрат = Новый Массив;
	мСчЗатрат.Добавить(?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	мСчЗатрат.Добавить(?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД,ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы));
	
	Запрос.УстановитьПараметр("СчетаЗатрат",мСчЗатрат);
	Запрос.УстановитьПараметр("СчетУчета",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД,ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы));
	Запрос.УстановитьПараметр("СчетУчетаНЗП",?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД,ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства));
	
	возврат Запрос;
	
	
КонецФункции	
	

Функция ПолучитьТаблПодрПервогоУровняСВыпуском(СтруктураШапкиДокумента,РезЗапросаПоЗатратам) Экспорт
	РезТабл =   Новый ТаблицаЗначений;
	РезТабл.Колонки.Добавить("Подразделение");
	РезТабл.Индексы.Добавить("Подразделение");
	
	ТаблПодр = РезЗапросаПоЗатратам.Выгрузить();
	ТаблПодр.Свернуть("Подразделение");
	
	ЗапросКВыпуску = ПолучитьЗапросПоВыпускуПервыйУровень(СтруктураШапкиДокумента);
	ЗапросКВыпуску.УстановитьПараметр("ТаблПодр97",ТаблПодр);
	
	Таблрез = ЗапросКВыпуску.Выполнить().Выгрузить();
	Таблрез.Индексы.Добавить("Уровень1");
	

	возврат Таблрез; 
	
КонецФункции

//конец изменений 
//конец изменений 
