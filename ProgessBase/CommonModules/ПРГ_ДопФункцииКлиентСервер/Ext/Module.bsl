
Функция ПолучитьЗначениеРазрешенногоПрава(Право)
	
	Если Право = ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьПревышениеОбъемЗаказаПриОтгрузке Тогда
		Результат = Ложь;
	ИначеЕсли Право = ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа Тогда
		Результат = Неопределено;
	Иначе
		Результат = Истина;
	КонецЕсли; 

	Возврат Результат;

КонецФункции // ЗначениеРазрешенногоПрава

Функция ПрочитатьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию, Пользователь)
	
	ВозвращаемыеЗначения = Новый Массив;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Пользователь"     , Пользователь);
	Запрос.УстановитьПараметр("ПравоПользователя", Право);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	РегистрЗначениеПрав.Значение
	               |ИЗ
	               |	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
	               |ГДЕ
	               |	РегистрЗначениеПрав.Право = &ПравоПользователя
	               |	И РегистрЗначениеПрав.Пользователь В
	               |			(ВЫБРАТЬ
	               |				ПользователиГруппы.Ссылка КАК Ссылка
	               |			ИЗ
	               |				Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	               |			ГДЕ
	               |				ПользователиГруппы.Пользователь = &Пользователь
	               |		
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |			ВЫБРАТЬ
	               |				ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	               |		
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |			ВЫБРАТЬ
	               |				&Пользователь)";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	Иначе
		Пока Выборка.Следующий() Цикл
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат ВозвращаемыеЗначения;

КонецФункции // ПрочитатьЗначениеПраваПользователя()

Функция ЕстьПравоУПользователя(ИмяПрава,ВСлучаеОтсутствияВДопПравахВозрИстину=Ложь)Экспорт 
	Перем Право;
	Если ТипЗнч(ИмяПрава) = Тип("ПланВидовХарактеристикСсылка.ПраваПользователей") Тогда
		Если Не ЗначениеЗаполнено(ИмяПрава) Тогда
			возврат  Ложь;
		КонецЕсли;	
		Право = ИмяПрава;
	ИначеЕсли ТипЗнч(ИмяПрава) = Тип("Строка") Тогда
		
		Если ПустаяСтрока(ИмяПрава) Тогда
			возврат Ложь;
		КонецЕслИ;	
		
		ПараметрИнициализирован = Ложь;
		Попытка
			Если ТипЗнч(ПараметрыСеанса.ПРГ_ДополнительныеПрава) = Тип("ФиксированнаяСтруктура") Тогда
				ПараметрИнициализирован = истина;
			КонецЕсли;	
		Исключение
		     ПараметрИнициализирован = Ложь;
		КонецПопытки;
		
		Если Не ПараметрИнициализирован  Тогда
			Запрос = Новый Запрос;
			Запрос .Текст = "ВЫБРАТЬ
			                |	ПраваПользователей.Ссылка,
			                |	ПраваПользователей.Наименование,
			                |	ПраваПользователей.Предопределенный
			                |ИЗ
			                |	ПланВидовХарактеристик.ПраваПользователей КАК ПраваПользователей
			                |ГДЕ
			                |	НЕ ПраваПользователей.ПометкаУдаления
			                |	И НЕ ПраваПользователей.ЭтоГруппа";
							
			СтруктураСоотв = Новый Структура;				
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если  Выборка.Предопределенный Тогда
					СтруктураСоотв.Вставить(Нрег(ПланыВидовХарактеристик.ПраваПользователей.ПолучитьИмяПредопределенного(Выборка.Ссылка)),Выборка.Ссылка);
				Иначе	
					СтруктураСоотв.Вставить(Нрег(Выборка.Наименование),Выборка.Ссылка);
				КонецЕслИ;	
			КонецЦикла;	
			ПараметрыСеанса.ПРГ_ДополнительныеПрава = Новый ФиксированнаяСтруктура(СтруктураСоотв);
		КонецЕсли;	
		ИщемСоотв 	  = Нрег(ИмяПрава);
		Если Не ПараметрыСеанса.ПРГ_ДополнительныеПрава.Свойство(ИщемСоотв,Право) Тогда
			//начало изменений для редактирования справочников
			Если ВСлучаеОтсутствияВДопПравахВозрИстину Тогда
				возврат Истина;
			Иначе	
				возврат Ложь;
			КонецЕсли;	
			//конец изменений
		КонецЕсли;	
	Иначе
		возврат ложь;
	КонецЕсли;	
	
	ЗначениеПоУмолчанию = Ложь;
	// потом удалить  чтобы убрана проверка для полный прав
	КэшДополнительныхПрав = глЗначениеПеременной("ЗначенияДополнительныхПравПользователя");
	
	МассивЗначенийПрава = КэшДополнительныхПрав[Право];
	
	Если МассивЗначенийПрава = Неопределено Тогда
		МассивЗначенийПрава = Новый Массив;
		
			ОбъектПрав = глЗначениеПеременной("ПрофильПолномочийПользователя");
			Если ЗначениеЗаполнено(ОбъектПрав) Тогда
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("ОбъектПрав", ОбъектПрав);
				Запрос.УстановитьПараметр("ПравоПользователя",   Право);
				
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РегистрЗначениеПрав.Значение КАК Значение
				|ИЗ
				|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
				|ГДЕ
				|	РегистрЗначениеПрав.Право = &ПравоПользователя
				|	И РегистрЗначениеПрав.Пользователь = &ОбъектПрав";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					ЗначениеПрава = Выборка.Значение;
				Иначе
					ЗначениеПрава = ЗначениеПоУмолчанию;
				КонецЕсли;
				МассивЗначенийПрава.Добавить(ЗначениеПрава);
			Иначе
				ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");	
				МассивЗначенийПрава = ПрочитатьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию, ТекущийПользователь);
			КонецЕсли;
		
		КэшДополнительныхПрав[Право] = МассивЗначенийПрава;
	КонецЕслИ;	
		#Если Сервер Тогда
			глЗначениеПеременнойУстановить("ЗначенияДополнительныхПравПользователя", КэшДополнительныхПрав, Истина);
		#КонецЕсли
	
	//вернуть на место, когда отладка 
	//МассивЗначенийПрава = УправлениеДопПравамиПользователей.ПолучитьЗначениеПраваПользователя(ЗначениеПрава, ложь);
			
	Возврат МассивЗначенийПрава.Найти(Истина) <> Неопределено;

КонецФункции

//m.ionov@a-prof.ru 20.12.2013
Функция ПолучитьКодСИМ(Номенклатура) Экспорт
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев(СокрЛП(Номенклатура.Код),СтрДлина(СокрЛП(Номенклатура.Код)) - 1); 
КонецФункции
//----m.ionov@a-prof.ru---

//m.ionov@a-prof.ru 20.12.2013
Функция ПолучитьСортСИМ(Номенклатура) Экспорт
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Прав(СокрЛП(Номенклатура.Код),1); 
КонецФункции
//----m.ionov@a-prof.ru---


Функция ПолучитьНумератор(Ссылка, Префикс, КолВоНулей)
	 возврат Новый Структура("Ссылка,Префикс,КолВоНулей",Ссылка, СокрЛП(Префикс), КолВоНулей);
КонецФункции	
 
Функция ЗаполнитьСтрокуСимв(Симв,КолСимв)
	Результат =""; 
	для к = 1 По КолСимв Цикл
		Результат = Результат + Симв;
	КонецЦикла;	
	возврат Результат;
КонецФункции	

Процедура ПрисвоитьНомер(Объект,ПрефиксИБ,ПрефиксОрг,СтандратнаяОбработка)  Экспорт
	
	ЭтоСпр = Ложь;
	ПустСсылка = Неопределено;
	МетаОбъекта  = Объект.Метаданные();
	ЭтоГруппа = Ложь;
	ДатаНумератора = '00010101';
	ВидОбъекта  = "";
	Если Метаданные.Справочники.Содержит(МетаОбъекта) Тогда
		ЭтоСпр 	   = Истина;
		ПустСсылка = Справочники[МетаОбъекта.Имя].ПустаяСсылка();
		Если МетаОбъекта.Иерархический Тогда
			ЭтоГруппа  = Объект.ЭтоГруппа;
		КонецЕсли;	
		ВидОбъекта  = "Спр.";
	ИначеЕсли Метаданные.Документы.Содержит(МетаОбъекта) Тогда
		ПустСсылка   = Документы[МетаОбъекта.Имя].ПустаяСсылка();
		ВидОбъекта  = "Док.";
	Иначе
		возврат;
	КонецЕсли;	
	
	ВидОбъекта  = ВидОбъекта+СокрЛП(Нрег(МетаОбъекта.Имя));
	//проверим по условиям
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_ВидыНумераторов.Ссылка,
	                      |	ПРГ_ВидыНумераторов.ТолькоГруппы,
	                      |	ПРГ_ВидыНумераторов.ИмяРеквизитаШапки,
	                      |	ПРГ_ВидыНумераторов.ЗначениеРеквизита,
	                      |	ПРГ_ВидыНумераторов.Префикс,
	                      |	ПРГ_ВидыНумераторов.КолВоНулей
	                      |ИЗ
	                      |	Справочник.ПРГ_ВидыНумераторов КАК ПРГ_ВидыНумераторов
	                      |ГДЕ
	                      |	ПРГ_ВидыНумераторов.ВидОбъекта = &ВидОбъекта
	                      |	И НЕ ПРГ_ВидыНумераторов.ПометкаУдаления");
						  

	Запрос.УстановитьПараметр("ВидОбъекта",ВидОбъекта);
	
	Выборка  = Запрос.Выполнить().Выбрать();
	Нумератор 	   = Неопределено;
	ОбщийНумератор = Неопределено;
	Пока Выборка.Следующий() Цикл //ищем по условию
		Попытка
			ИмяРеквизитаШапки = СокрЛП(Выборка.ИмяРеквизитаШапки);
			Если ИмяРеквизитаШапки = "" Тогда
				Если ЭтоГруппа Тогда
					Если Выборка.ТолькоГруппы Тогда
						ОбщийНумератор = ПолучитьНумератор(Выборка.Ссылка, Выборка.Префикс, Выборка.КолВоНулей);
					ИначеЕсли Не Выборка.ТолькоГруппы и ОбщийНумератор = Неопределено Тогда
						ОбщийНумератор = ПолучитьНумератор(Выборка.Ссылка, Выборка.Префикс, Выборка.КолВоНулей);
					КонецЕсли;	
				ИначеЕсли Не Выборка.ТолькоГруппы Тогда
					ОбщийНумератор = ПолучитьНумератор(Выборка.Ссылка, Выборка.Префикс, Выборка.КолВоНулей);
				КонецЕсли;	
			Иначе
				 Если  Не Выборка.ТолькоГруппы и Выборка.ЗначениеРеквизита
					= Объект[ИмяРеквизитаШапки] Тогда
				  	Нумератор = ПолучитьНумератор(Выборка.Ссылка, Выборка.Префикс, Выборка.КолВоНулей);
			  	КонецЕсли;
			 КонецЕсли;	
		Исключение
		   Сообщить("Ошибка получения реквизита " + ИмяРеквизитаШапки);
		КонецПопытки;
	КонецЦикла;	
	
	Если Нумератор = Неопределено Тогда
		Нумератор 	   = ОбщийНумератор;
	КонецЕсли;	
	
	Если Нумератор = Неопределено Тогда
		возврат;
	КонецЕсли;	
	
	Если НЕ ЭтоСпр Тогда
		ДатаНумератора = '00010101';
		Если МетаОбъекта.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
				ДатаНумератора = НачалоГода(Объект.Дата);
		ИначеЕсли МетаОбъекта.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
				ДатаНумератора = НачалоДня(Объект.Дата);
		ИначеЕсли МетаОбъекта.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
				ДатаНумератора = НачалоМесяца(Объект.Дата);
			ИначеЕсли МетаОбъекта.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
				ДатаНумератора = НачалоКвартала(Объект.Дата);
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_НумерацияОбъектов.Нумератор,
	                      |	ПРГ_НумерацияОбъектов.Номер,
	                      |	ПРГ_НумерацияОбъектов.ДатаНумератора
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_НумерацияОбъектов КАК ПРГ_НумерацияОбъектов
	                      |ГДЕ
	                      |	ПРГ_НумерацияОбъектов.Нумератор = &Нумератор
						  |"+?(НЕ ЭтоСпр,"  И ПРГ_НумерацияОбъектов.ДатаНумератора = &ДатаНумератора",""));
						  
	Запрос.УстановитьПараметр("Нумератор",Нумератор.Ссылка);
	Запрос.УстановитьПараметр("ДатаНумератора",ДатаНумератора);
	
	ЗначНомера = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначНомера = Выборка.Номер;
	КонецЕсли;	
	
	ЗначНомера = ?(ЗначНомера=0,1,ЗначНомера+1);
	
	//новый номер
	СтрЗначНомера	= Формат(ЗначНомера,"ЧЦ=15; ЧГ=");
    НовыйНомер 		= ЗаполнитьСтрокуСимв("0",Нумератор.КолВоНулей) + СтрЗначНомера;
	
	НПрефиксИБ	 = СокрЛП(ПрефиксИБ);
	НПрефиксИБ   = ?(НПрефиксИБ = "0","",НПрефиксИБ);
	НПрефиксОрг	 = СокрЛП(ПрефиксОрг);
	НПрефиксОрг  = ?(НПрефиксОрг= "0","",НПрефиксОрг);
	
	НовыйПрефикс =  НПрефиксИБ+НПрефиксОрг+Нумератор.Префикс;
	Если Нумератор.КолВоНулей > 0 Тогда
		 НовыйНомер = Прав(НовыйНомер,Нумератор.КолВоНулей);
		 ДлПрефикса   = СтрДлина(НовыйПрефикс);
		 Если ДлПрефикса > 0 Тогда
			 ЛидНули    = ЗаполнитьСтрокуСимв("0",ДлПрефикса);
			 Если ЛидНули = Лев(НовыйНомер,ДлПрефикса) Тогда
				 НовыйНомер = НовыйПрефикс+ Прав(НовыйНомер,Нумератор.КолВоНулей-ДлПрефикса);
			 Иначе
				 ВызватьИсключение "Ошибка присвоения нового номера";
			 КонецЕсли;
		 КонецЕсли;	 
	Иначе
		 НовыйНомер = НовыйПрефикс + НовыйНомер;
	КонецЕсли;	
	
	НаборНумерации  = РегистрыСведений.ПРГ_НумерацияОбъектов.СоздатьНаборЗаписей();
	НаборНумерации.Отбор.ДатаНумератора.Значение 	   = ДатаНумератора;
	НаборНумерации.Отбор.ДатаНумератора.Использование  = Истина;
	
	НаборНумерации.Отбор.Нумератор.Значение 	   		= Нумератор.Ссылка;
	НаборНумерации.Отбор.Нумератор.Использование 		= Истина;
	
	НоваяЗап = НаборНумерации.Добавить();
	НоваяЗап.ДатаНумератора     = ДатаНумератора;
	НоваяЗап.Нумератор			= Нумератор.Ссылка;
	НоваяЗап.Номер				= ЗначНомера;
	
	//Сообщить(НовыйНомер);
	
	НаборНумерации.Записать();
	
	СтандратнаяОбработка = Ложь;
	Если ЭтоСпр Тогда
		Объект.Код = НовыйНомер;
	Иначе
		Объект.Номер = НовыйНомер;
	КонецЕсли;	
	
	
КонецПроцедуры	

Процедура ЗаполнитьПоШаблонуОбъект(Объект, Шаблон) Экспорт
	
	Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		
		Попытка
			
			НайденноеЗначение = Шаблон.ЗначенияРеквизитов.Найти(Реквизит.Имя);
			
			Если НайденноеЗначение <> Неопределено Тогда
				
				Объект[Реквизит.Имя] = НайденноеЗначение.ЗначениеРеквизита;
				
			КонецЕсли;
			
		Исключение
			
			Сообщить(ОписаниеОшибки());
			
		КонецПопытки;       		
		
	КонецЦикла;
		
КонецПроцедуры

Функция ОпределитьСпецификацию(Номенклатура,ХарактеристикаНоменклатуры, Дата, Подразделение) Экспорт
	
	//m.ionov@a-prof.ru 23.04.2014
	//Делаем подстановку только активных спецификаций
	//ТолькоАктивные = Ложь; //потом убрать когда все устаканется
	ТолькоАктивные = Истина;
	//----m.ionov@a-prof.ru---
	
	Если   Подразделение <> Неопределено Тогда
		
		 ИспользуемПодразделение = Константы.ПРГ_ИспользоватьПодразделенияВСпецификациях.Получить();
		 
		 Если ИспользуемПодразделение Тогда
	
		     Запрос = Новый Запрос("ВЫБРАТЬ
		                           |	СпецификацииНоменклатурыВыходныеИзделия.Ссылка,
		                           |	СпецификацииНоменклатурыВыходныеИзделия.Подразделение КАК ЗначЗаполн
		                           |ИЗ
		                           |	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатурыВыходныеИзделия
		                           |ГДЕ
		                           |	СпецификацииНоменклатурыВыходныеИзделия.Подразделение В(&Подразделение)
		                           |	И СпецификацииНоменклатурыВыходныеИзделия.Ссылка.ВидСпецификации В(&ВидыСпецификации)
		                           |	И СпецификацииНоменклатурыВыходныеИзделия.Номенклатура = &Номенклатура
		                           |	" + ?(ТолькоАктивные," И СпецификацииНоменклатурыВыходныеИзделия.Ссылка.Активная","")+"");
								   
		  Иначе
			  //m.ionov@a-prof.ru 23.04.2014
			  //Добавил порядок вывода - чтобы поставлялись первые по активности
			  
			  //m.ionov@a-prof.ru 11.09.2014
			  //Добавили получения даты утверждения из регистра
			  //Запрос = Новый Запрос("ВЫБРАТЬ
			  //					 |	ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
			  //					 |	МАКСИМУМ(ОсновныеСпецификацииНоменклатурыСрезПоследних.Период) КАК ДатаОсновной
			  //					 |ПОМЕСТИТЬ ОснСпец
			  //					 |ИЗ
			  //					 |	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
			  //					 |
			  //					 |СГРУППИРОВАТЬ ПО
			  //					 |	ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры
			  //					 |;
			  //					 |
			  //					 |////////////////////////////////////////////////////////////////////////////////
			  //					 |ВЫБРАТЬ
			  //					 |	СпецификацииНоменклатурыВыходныеИзделия.Ссылка,
			  //					 |	СпецификацииНоменклатурыВыходныеИзделия.ТочкаМаршрута КАК ЗначЗаполн,
			  //					 |	ВЫБОР
			  //					 |		КОГДА ОснСпец.СпецификацияНоменклатуры ЕСТЬ NULL 
			  //					 |			ТОГДА 2
			  //					 |		ИНАЧЕ 1
			  //					 |	КОНЕЦ КАК Сорт,
			  //					 |	ОснСпец.ДатаОсновной КАК ДатаОсновной,
			  //					 |	СпецификацииНоменклатурыВыходныеИзделия.Ссылка.ДатаУтверждения КАК ДатаУтверждения
			  //					 |ИЗ
			  //					 |	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатурыВыходныеИзделия
			  //					 |		ЛЕВОЕ СОЕДИНЕНИЕ ОснСпец КАК ОснСпец
			  //					 |		ПО СпецификацииНоменклатурыВыходныеИзделия.Ссылка = ОснСпец.СпецификацияНоменклатуры
			  //					 |ГДЕ
			  //					 |	СпецификацииНоменклатурыВыходныеИзделия.ТочкаМаршрута В(&СписокТочекМаршрутов)
			  //					 |	И СпецификацииНоменклатурыВыходныеИзделия.Ссылка.ВидСпецификации В(&ВидыСпецификации)
			  //					 |	И СпецификацииНоменклатурыВыходныеИзделия.Номенклатура = &Номенклатура
			  //					 |	И СпецификацииНоменклатурыВыходныеИзделия.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
			  //  				   |"
			  //  				   + ?(ТолькоАктивные," И СпецификацииНоменклатурыВыходныеИзделия.Ссылка.Активная И СпецификацииНоменклатурыВыходныеИзделия.Ссылка.ДатаУтверждения <= &ДатаУтверждения","") + "
			  //					 |
			  //					 |УПОРЯДОЧИТЬ ПО
			  //					 |	Сорт,
			  //					 |	ДатаОсновной УБЫВ,
			  //					 |	ДатаУтверждения УБЫВ"); 
								   
				Запрос = Новый Запрос("ВЫБРАТЬ
				                      |	ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
				                      |	МАКСИМУМ(ОсновныеСпецификацииНоменклатурыСрезПоследних.Период) КАК ДатаОсновной
				                      |ПОМЕСТИТЬ ОснСпец
				                      |ИЗ
				                      |	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
				                      |
				                      |СГРУППИРОВАТЬ ПО
				                      |	ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры
				                      |;
				                      |
				                      |////////////////////////////////////////////////////////////////////////////////
				                      |ВЫБРАТЬ
				                      |	СпецификацииНоменклатурыВыходныеИзделия.Ссылка,
				                      |	СпецификацииНоменклатурыВыходныеИзделия.ТочкаМаршрута КАК ЗначЗаполн,
				                      |	ВЫБОР
				                      |		КОГДА ОснСпец.СпецификацияНоменклатуры ЕСТЬ NULL 
				                      |			ТОГДА 2
				                      |		ИНАЧЕ 1
				                      |	КОНЕЦ КАК Сорт,
				                      |	ОснСпец.ДатаОсновной КАК ДатаОсновной,
				                      |	ПРГ_ИсторияИзмененияСостоянияСпецификацииСрезПоследних.Период КАК ДатаУтверждения
				                      |ИЗ
				                      |	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатурыВыходныеИзделия
				                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОснСпец КАК ОснСпец
				                      |		ПО СпецификацииНоменклатурыВыходныеИзделия.Ссылка = ОснСпец.СпецификацияНоменклатуры
				                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ИсторияИзмененияСостоянияСпецификации.СрезПоследних(&ДатаУтверждения, ) КАК ПРГ_ИсторияИзмененияСостоянияСпецификацииСрезПоследних
				                      |		ПО СпецификацииНоменклатурыВыходныеИзделия.Ссылка = ПРГ_ИсторияИзмененияСостоянияСпецификацииСрезПоследних.СпецификацияНоменклатуры
				                      |			И (ПРГ_ИсторияИзмененияСостоянияСпецификацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбъектов.Утвержден))
									  |			И ПРГ_ИсторияИзмененияСостоянияСпецификацииСрезПоследних.Активная
				                      |ГДЕ
				                      |	СпецификацииНоменклатурыВыходныеИзделия.ТочкаМаршрута В(&СписокТочекМаршрутов)
				                      |	И СпецификацииНоменклатурыВыходныеИзделия.Ссылка.ВидСпецификации В(&ВидыСпецификации)
				                      |	И СпецификацииНоменклатурыВыходныеИзделия.Номенклатура = &Номенклатура
				                      |	И СпецификацииНоменклатурыВыходныеИзделия.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
				                      |
				                      |УПОРЯДОЧИТЬ ПО
				                      |	Сорт,
				                      |	ДатаОсновной УБЫВ,
				                      |	ДатаУтверждения УБЫВ"); 
								    								    
		  КонецЕсли;						   

		  Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		  Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
		  
		  Запрос.УстановитьПараметр("Дата",?(Дата='00010101',ТекущаяДата(),Дата));
		  Запрос.УстановитьПараметр("ДатаУтверждения",КонецДня(?(Дата='00010101',ТекущаяДата(),Дата))); //m.ionov@a-prof.ru 23.04.2014
		  
		  СписокПодразделений  = Новый Массив;
		  Если ИспользуемПодразделение тогда
			  СписокПодразделений.Добавить(Справочники.Подразделения.ПустаяСсылка());
		  КонецЕсли;
		  
		  //СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение
		  
		  СписокТочекМаршрутов = Новый Массив; 
		  СписокТочекМаршрутов.Добавить(Справочники.ТочкиМаршрута.ПустаяСсылка());
		  Если ЗначениеЗаполнено(Подразделение)  Тогда
			  Если Не ИспользуемПодразделение Тогда
			      ЗапросПоМарш = Новый Запрос("ВЫБРАТЬ
			                                |	ТочкиМаршрута.Ссылка
			                                |ИЗ
			                                |	Справочник.ТочкиМаршрута КАК ТочкиМаршрута
			                                |ГДЕ
			                                |	ТочкиМаршрута.Подразделение = &Подразделение");
											
					ЗапросПоМарш.УстановитьПараметр("Подразделение",Подразделение);
					ВыборкаПоМаршр = ЗапросПоМарш.Выполнить().Выбрать();
					Пока ВыборкаПоМаршр.Следующий() Цикл
						 Родитель  = ВыборкаПоМаршр.Ссылка;
						 Пока ЗначениеЗаполнено(Родитель) Цикл
							Если СписокТочекМаршрутов.Найти(Родитель)= Неопределено Тогда
								 СписокТочекМаршрутов.Добавить(Родитель); 
							Конецесли;	
							Родитель 	= Родитель.Родитель;
						 КонецЦикла; 
					 КонецЦикла;	
			  Иначе
				  СписокПодразделений.Добавить(Подразделение);
			  КонецЕсли;
		  КонецЕсли;	
	  
		  Если Не ИспользуемПодразделение Тогда
			 Запрос.УстановитьПараметр("СписокТочекМаршрутов",СписокТочекМаршрутов);					 
		  Иначе
			  Запрос.УстановитьПараметр("Подразделение",СписокПодразделений);
		  КонецЕсли; 
		  
		  
		  
		  СписокВидовСпецификаций  = Новый Массив;
		  СписокВидовСпецификаций.Добавить(Перечисления.ВидыСпецификаций.Сборочная);
		  СписокВидовСпецификаций.Добавить(Перечисления.ВидыСпецификаций.Полная);
		  
		  Запрос.УстановитьПараметр("ВидыСпецификации",СписокВидовСпецификаций);
		
		  СписокСсылок 					  = Новый СписокЗначений;
		  СписокСсылокПустойОтбор = Новый СписокЗначений;
						   
		  Выборка = Запрос.Выполнить().Выбрать();
		  Пока Выборка.Следующий() Цикл
			  Если ЗначениеЗаполнено(Выборка.ЗначЗаполн) тогда
				  СписокСсылок.Добавить(Выборка.Ссылка);
			  Иначе
				  СписокСсылокПустойОтбор.Добавить(Выборка.Ссылка);
			  КонецЕслИ; 
		  КонецЦикла; 
		  
		  Если СписокСсылок.Количество() > 0 Тогда
			  возврат СписокСсылок[0].Значение;
		  ИначеЕсли СписокСсылокПустойОтбор.Количество() > 0 Тогда
			   возврат СписокСсылокПустойОтбор[0].Значение;
		   Иначе
			   возврат Справочники.СпецификацииНоменклатуры.ПустаяСсылка();
		  КонецЕслИ; 
		  
	Иначе
		возврат УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры, Дата, Подразделение);
	КонецЕсли;	  
КонецФункции	

//Бирюков создание серии перенес из обработки создания серий
Функция СоздатьСериюНоменклатуры(Строка, Объект, СуффиксНаименованияСерии = "") Экспорт

	СерияНоменклатуры = Строка.СерияНоменклатуры;
	Номенклатура	  = Строка.Номенклатура;
	
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		НовЭлементСправочника = СерияНоменклатуры.ПолучитьОбъект();
	Иначе
		НовЭлементСправочника = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НовЭлементСправочника.Владелец = Номенклатура;
		Префикс = "";
		НовЭлементСправочника.УстановитьНовыйКод(Префикс);
	КонецЕсли;
	
	Ошибка = Истина;
	КодСерии = СокрЛП(СерияНоменклатуры.Код);
	
	Если ЗначениеЗаполнено(КодСерии) Тогда
		Старт = 1;
		Пока Ошибка Цикл
			Попытка
				КодСерии = Число(Сред(КодСерии,Старт));
				Ошибка = Ложь;
			Исключение
				Ошибка = Истина;
				Старт = Старт + 1;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	НаименованиеСерии =   СокрЛП(Формат(КодСерии,"ЧГ=")) + СуффиксНаименованияСерии;
	
	НовЭлементСправочника.Наименование 			= НаименованиеСерии;
	
	/// Кунов О.В., 15.08.2014 - 31111
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		НовЭлементСправочника.СерийныйНомер 		= ""+СокрЛП(Объект.НомерВходящегоДокумента)+"_"+ Формат(Объект.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
		НовЭлементСправочника.УЗ_АМ 				= Объект.УЗ_АМ;
		НовЭлементСправочника.УЗ_Поставщик 			= Объект.Контрагент;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВыпускПродукции") Тогда
		НовЭлементСправочника.СерийныйНомер 		= ""+СокрЛП(Объект.Номер)+"_"+ Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
		НовЭлементСправочника.УЗ_ДатаВыработки		= Объект.Дата;
		НовЭлементСправочника.СтранаПроисхождения	= Справочники.КлассификаторСтранМира.Россия;
		//{23.06.2016 Островерхий заявка №б/н 
		//НовЭлементСправочника.УЗ_Производитель		= Справочники.Контрагенты.НайтиПоНаименованию("ОАО Прогресс"); 
		НовЭлементСправочника.УЗ_Производитель		= ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Справочники.ПРГ_Служебный.ОрганизацияПоУмолчанию,"Объект");
		//23.06.2016 Островерхий} 
		
	КонецЕсли; 
	///	
	
	НовЭлементСправочника.УЗ_ДатаПоступления 	= Объект.Дата;
		
	Попытка
	    НовЭлементСправочника.Записать();
		Если Не ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			//m_ionov@mail.ru 21.09.2016
			//Сообщить("Добавлена новая серия " +  НовЭлементСправочника.Наименование, СтатусСообщения.Информация);
			ОбщегоНазначения.Сообщение("Добавлена новая серия " +  НовЭлементСправочника.Наименование, СтатусСообщения.Информация);
			//------- m_ionov@mail.ru -------
		КонецЕсли;
		
        Возврат НовЭлементСправочника.Ссылка;
	Исключение
		//m_ionov@mail.ru 21.09.2016
	    //Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		ОбщегоНазначения.Сообщение(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
		//------- m_ionov@mail.ru -------
	КонецПопытки;

КонецФункции 
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Процедура ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ДокументОбъект, СтруктураШапкиДокумента, 
	                                                    СтруктураПараметров, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                    ВидДвижения, Отказ, Заголовок) Экспорт
													  
	// По регистру ВзаиморасчетыСКонтрагентами
	
	Если ТаблицаПоВзаиморасчетам.Количество() > 0 Тогда
		
		НаборДвиженийВзаиморасчеты = ДокументОбъект.Движения.ВзаиморасчетыСКонтрагентами;
		
		
		ТаблицаДвижений = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.СоздатьНаборЗаписей().Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВзаиморасчетам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		
		НаборДвиженийВзаиморасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийВзаиморасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		// Проверка остатков
		
		Если Не Отказ Тогда
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборДвиженийВзаиморасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;
	
	// По регистру РасчетыСКонтрагентами
	
	Если ТаблицаПоРасчетам.Количество() > 0 Тогда
		
		НаборДвиженийРасчеты = ДокументОбъект.Движения.РасчетыСКонтрагентами;
		
		ТаблицаДвижений = РегистрыНакопления.РасчетыСКонтрагентами.СоздатьНаборЗаписей().Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоРасчетам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		
		Если СтруктураПараметров.Свойство("ЭтоВозврат") И СтруктураПараметров.ЭтоВозврат Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Возврат, "РасчетыВозврат");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат");
		КонецЕсли;
		
		НаборДвиженийРасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийРасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборДвиженийРасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры



Функция ПолучитьДатуНовогоАлгоритмовВСтомости() Экспорт 
  	 
	Если  Найти(Нрег(СтрокаСоединенияИнформационнойБазы()),"""progr_ozhiganov""") > 0 Тогда
		  возврат '20140201';
	КонецЕсли;	
	  
	возврат '20140301';
КонецФункции	



Функция ПРГ_ПолучитьВидТмц(НаимВидТМЦ)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_ВидыТМЦ.Ссылка
	                      |ИЗ
	                      |	Справочник.ПРГ_ВидыТМЦ КАК ПРГ_ВидыТМЦ
	                      |ГДЕ
	                      |	ПРГ_ВидыТМЦ.Наименование = &Наименование");
						  
    Запрос.УстановитьПараметр("Наименование",НаимВидТМЦ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		возврат Выборка.Ссылка;
	Иначе
		Попытка
			ОбъектВидТмц = Справочники.ПРГ_ВидыТМЦ.СоздатьЭлемент(); 
			ОбъектВидТмц.Наименование  = НаимВидТМЦ;
			ОбъектВидТмц.Записать();
			возврат ОбъектВидТмц.Ссылка;
		Исключение 
			Сообщить(ОписаниеОшибки());
			возврат Справочники.ПРГ_ВидыТМЦ.ПустаяСсылка();
		КонецПопытки;	
	КонецЕсли;	
КонецФункции 

Процедура ПРГ_ДобавитьЗнчВтаблсчетов(ТаблСчетов,Счет,СписокИскл,НаимВидТМЦ)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Хозрасчетный.Ссылка,
	                      |	Хозрасчетный.Представление,
	                      |	&ВидТМЦ КАК ВидТмц
	                      |ИЗ
	                      |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                      |ГДЕ
	                      |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Ссылка)
	                      |	И НЕ Хозрасчетный.Ссылка В (&СписокИскл)");
						  
	Запрос.УстановитьПараметр("Ссылка",Счет);
	Запрос.УстановитьПараметр("СписокИскл",СписокИскл);
	Запрос.УстановитьПараметр("ВидТМЦ",ПРГ_ПолучитьВидТмц(НаимВидТМЦ));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		  НоваяСтрока 		 = ТаблСчетов.Добавить();
		  НоваяСтрока.Счет   = Выборка.Ссылка;
		  НоваяСтрока.ВидТмц = Выборка.ВидТмц;
	КонецЦикла;	
КонецПроцедуры	

Функция ПолучитьТаблСчетовВидовТмц() Экспорт 
	
	 ТаблСчетов = Новый ТаблицаЗначений;
	 ТаблСчетов.Колонки.Добавить("Счет");
	 ТаблСчетов.Колонки.Добавить("ВидТМЦ");
	 
	 ТаблСчетов.Индексы.Добавить("Счет");
	 
	 СписокИскл = Новый Массив;
	 ПРГ_ДобавитьЗнчВтаблсчетов(ТаблСчетов,ПланыСчетов.Хозрасчетный.НайтиПоКоду("08"),СписокИскл,"Внеоборотные активы");
	 ПРГ_ДобавитьЗнчВтаблсчетов(ТаблСчетов,ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.01"),СписокИскл,"Сырье");
	 СписокИскл.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.01"));
	 ПРГ_ДобавитьЗнчВтаблсчетов(ТаблСчетов,ПланыСчетов.Хозрасчетный.НайтиПоКоду("10"),СписокИскл,"Материалы");
	 СписокИскл.Очистить();
	 ПРГ_ДобавитьЗнчВтаблсчетов(ТаблСчетов,ПланыСчетов.Хозрасчетный.НайтиПоКоду("21"),СписокИскл,"Полуфабрикаты");
	 
	 ПРГ_ДобавитьЗнчВтаблсчетов(ТаблСчетов,ПланыСчетов.Хозрасчетный.НайтиПоКоду("41"),СписокИскл,"Товары");
	 ПРГ_ДобавитьЗнчВтаблсчетов(ТаблСчетов,ПланыСчетов.Хозрасчетный.НайтиПоКоду("43"),СписокИскл,"Готовая продукция");
	 
	 возврат ТаблСчетов;
	 
КонецФункции	


Функция УдалитьЛидирующиеНули(Знач ПолноеЗначение) Экспорт 
	
	ПолноеЗначение = СокрЛП(ПолноеЗначение);
	ДлинаПолногоЗначения = СтрДлина(ПолноеЗначение);
	
	СокращенноеЗначение = "";
	
	Для Инд = 1 По ДлинаПолногоЗначения Цикл
		СимволОтличаетсяОтНуля = (Сред(ПолноеЗначение, Инд, 1) <> "0");
		Если СимволОтличаетсяОтНуля Тогда
			СокращенноеЗначение = Сред(ПолноеЗначение, Инд);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокращенноеЗначение;
	
КонецФункции

//********************************************************************************
//********************************************************************************
//***********************УЧЕТ НДС**************************************************

Функция КорректировкаРеализацииПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос();
	
	//ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
	//ДатаИсправляемогоДокумента = ИсправляемыйДокумент.Дата;
	
	ИсправляемыйДокумент = СтруктураШапкиДокумента.ДокументРеализации;
	ДатаИсправляемогоДокумента = ИсправляемыйДокумент.Дата;

	
	ИсходныйСчетФактура = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации, Истина);
	ИсходныйСчетФактураДата = ИсходныйСчетФактура.Дата;
	
	Если УчетНДС.ПолучитьПорядокКорректировкиНДС(ДатаИсправляемогоДокумента) = 1 И ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйСчетФактураДата = ИсправляемыйДокумент.Дата; 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсходныйСчетФактураДата", ИсходныйСчетФактураДата);
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование реализации"" КАК Содержание,
	|	ЗаписиКнигиПродаж.Организация,
	|	ЗаписиКнигиПродаж.Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот * -1 КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПродаж";
	
	СтруктураТаблиц = Новый Структура();
	//СтруктураТаблиц.Вставить("КнигаПродаж", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование реализации"" КАК Содержание,
	|	ЗаписиКнигиПокупок.Организация,
	|	ЗаписиКнигиПокупок.Поставщик,
	|	ЗаписиКнигиПокупок.СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот * -1 КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПокупок";
	
	//СтруктураТаблиц.Вставить("КнигаПокупок", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	NULL КАК Событие,
	|	NULL КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСПредъявленныйОстатки";
	
///	СтруктураТаблиц.Вставить("НДСПредъявленный", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСНачисленныйОстатки.Организация,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	NULL КАК Событие,
	|	NULL КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСНачисленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСНачисленный", Запрос.Выполнить().Выгрузить());
    	
	Возврат СтруктураТаблиц;
			
КонецФункции

Процедура ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураДвижений,ИмяРегистра,СсылкаНаДокумент) Экспорт
	Если не СтруктураДвижений.Свойство(ИмяРегистра) Тогда
		СтруктураДвижений.Вставить(ИмяРегистра,РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей());
		СтруктураДвижений[ИмяРегистра].Отбор.Регистратор.Установить(СсылкаНаДокумент);
	КонецЕсли;
КонецПроцедуры


Процедура ДобавитьДвиженияНДСПредъявленный(СтруктураШапкиДокумента,Движения,ТабНДСПредъявл)
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПредъявленный",СтруктураШапкиДокумента.Ссылка);
	ТабНДСПредъявл.Свернуть(
		"ВидЦенности, СтавкаНДС, Поставщик, Организация, СчетФактура, ИсправленныйСчетФактура, Событие, ДатаСобытия, 
		| СчетУчетаНДС, Регистратор, Период", "СуммаБезНДС, НДС");
		
	Для Каждого СтрокаДвижения Из ТабНДСПредъявл Цикл
		Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);	
	КонецЦикла;	
КонецПроцедуры	

Процедура ДобавитьДвиженияНДСКнигаПродаж(СтруктураШапкиДокумента,Движения,ТабНДСКП)
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж",СтруктураШапкиДокумента.Ссылка);
	
	ТабНДСКП.Свернуть("Организация, Покупатель, СчетФактура, ВидЦенности, СтавкаНДС, Событие, ДатаСобытия, ЗаписьДополнительногоЛиста, СторнирующаяЗаписьДопЛиста, 
		| КорректируемыйПериод, ИсправленныйСчетФактура, Период, Регистратор, СтавкаНДСДоИзменения",    // Шевченков 20170209   +"СтавкаНДСДоИзменения"
		"СуммаБезНДС, НДС");
		
	Для Каждого СтрокаДвижения Из ТабНДСКП Цикл
		// <- Шевченков 20170209 62040
		//начало изменений Ожиганов А. 28.02.2017 исправление движений по книге продаж в части корректировок 
//		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
//			СтрокаДвижения.СтавкаНДС = СтрокаДвижения.СтавкаНДСДоИзменения;
//		КонецЕсли;
		//конец изменений 
		// ->			
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);	
	КонецЦикла;	
КонецПроцедуры	

Функция СторноНДСПоПродажам(СтруктураШапкиДокумента,СтруктураТаблицСторноНДС,Движения)
	Если СтруктураТаблицСторноНДС.НДСНачисленный.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
		
		Для Каждого СтрокаДвижения Из СтруктураТаблицСторноНДС.НДСНачисленный Цикл
			
			// НДС Начисленный
			Движение = Движения.НДСНачисленный.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
			
			// Книга продаж
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
			Движение.Событие 		= Перечисления.СобытияПоНДСПродажи.Реализация;
			Движение.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
			
			//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			Если Не СтруктураШапкиДокумента.КорректировочныйСЧФ Тогда
				// Книга продаж сторно
				Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
				Движение.Событие 		= Перечисления.СобытияПоНДСПродажи.Реализация;
				Движение.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
				Движение.СуммаБезНДС	= - СтрокаДвижения.СуммаБезНДС;
				Движение.НДС			= - СтрокаДвижения.НДС;
			КонецЕсли;
		//начало изменений	
		БылоСторноНДСНач = Истина;	
		//конец изменений
		КонецЦикла;
		
		Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		ДатаСобытия = СтруктураШапкиДокумента.Дата;
		возврат Истина;
	КонецЕсли;
	возврат ложь;
КонецФункции

Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокРеализации) 
		И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И (Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументРеализации(ДокРеализации.ДокументРеализации, Исходный);
		
	Иначе
		Возврат ДокРеализации;
	КонецЕсли;	
	
КонецФункции

Процедура ПровестиКорректировкуРеализацииПоРегистрамНДС_Наша(СтруктураШапкиДокумента, ДокументСсылка,ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт
	
	УчетНДС.ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);
	
	Движения = Новый Структура();
		
	СтруктураТаблицСторноНДС = КорректировкаРеализацииПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента);
	//СтруктураТаблицДокумента = КорректировкаРеализацииПолучитьТаблицыДокумента(СтруктураШапкиДокумента);
	ТаблСторноКнигиПродаж = Новый ТаблицаЗначений;
	ТаблКорректировки     = Новый ТаблицаЗначений;
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж",ДокументСсылка);
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПредъявленный",ДокументСсылка);
	
	ТаблСторноКП         = Движения.НДСЗаписиКнигиПродаж.Выгрузить();
	ТаблКоррКП  		 = Движения.НДСЗаписиКнигиПродаж.Выгрузить();
	ТабНДСПредъявл  	 = Движения.НДСПредъявленный.Выгрузить();
	
	ТаблСторноКП.Колонки.Добавить("СтавкаНДСДоИзменения"); // Шевченков
	ТаблКоррКП.Колонки.Добавить("СтавкаНДСДоИзменения");   // Шевченков
	
	СторноБыло = СторноНДСПоПродажам(СтруктураШапкиДокумента,СтруктураТаблицСторноНДС,Движения);
	
	СчетФактура    				= СтруктураШапкиДокумента.Ссылка;
	ИсправляемыйДокумент 		= СтруктураШапкиДокумента.ДокументРеализации;
	КорректировкаПоСогласованию = СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	ОснованиеКорректировка 		= ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации");
	
	
	Сч19_09 = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации;
	Сч68_02 = ПланыСчетов.Хозрасчетный.НДС;
	
	ВидыЦенностейПоСчетамУчета = Неопределено;
	Был68  = Ложь;
	Для Каждого ТекСтрока Из ТаблицаПоТоварам Цикл
		ДобавитьДвиженияПоКорректировки(СтруктураШапкиДокумента, ТаблСторноКП,ТаблКоррКП,ТабНДСПредъявл,ТекСтрока, СтруктураШапкиДокумента.Дата,Не СтруктураШапкиДокумента.КорректировочныйСЧФ,
		СчетФактура,ИсправляемыйДокумент,КорректировкаПоСогласованию,ОснованиеКорректировка,Сч19_09,Сч68_02,Был68,ВидыЦенностейПоСчетамУчета);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаПоУслугам Цикл
		ДобавитьДвиженияПоКорректировки(СтруктураШапкиДокумента, ТаблСторноКП,ТаблКоррКП,ТабНДСПредъявл,ТекСтрока, СтруктураШапкиДокумента.Дата,Не СтруктураШапкиДокумента.КорректировочныйСЧФ,
		СчетФактура,ИсправляемыйДокумент,КорректировкаПоСогласованию,ОснованиеКорректировка,Сч19_09,Сч68_02,Был68,ВидыЦенностейПоСчетамУчета);
	КонецЦикла;
	
	
	ДобавитьДвиженияНДСПредъявленный(СтруктураШапкиДокумента,Движения,ТабНДСПредъявл);
	Если Был68 Тогда
		Если Не СторноБыло Тогда
			ДобавитьДвиженияНДСКнигаПродаж(СтруктураШапкиДокумента,Движения,ТаблСторноКП);
		КонецЕсли;	
		ДобавитьДвиженияНДСКнигаПродаж(СтруктураШапкиДокумента,Движения,ТаблКоррКП);
//начало изменений Ожиганов А. 28.02.2017 исправление движений по книге продаж в части корректировок 
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации")
     и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
	Тогда
		Если Не СторноБыло Тогда
			ДобавитьДвиженияНДСКнигаПродаж(СтруктураШапкиДокумента,Движения,ТаблСторноКП);
		КонецЕсли;	
		ДобавитьДвиженияНДСКнигаПродаж(СтруктураШапкиДокумента,Движения,ТаблКоррКП);
//конец изменений 
	КонецЕслИ;
	
	Для Каждого Элемент Из Движения Цикл
		НаборЗаписей = Элемент.Значение;
		Если НЕ Элемент.Ключ = "Хозрасчетный" Тогда
			НаборЗаписей.мПериод = СтруктураШапкиДокумента.Дата;
		КонецЕсли;		
		НаборЗаписей.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДвиженияПоКорректировки(СтруктураШапкиДокумента, ТаблСторноКП,ТаблКоррКП,ТабНДСПредъявл, СтрокаТЧ, Период, ФиксироватьСторно,
	СчетФактура,ИсправляемыйДокумент,КорректировкаПоСогласованию,ОснованиеКорректировка,Сч19_09,Сч68_02,Был68,ВидыЦенностейПоСчетамУчета) Экспорт
	
    
	Счет91 = Ложь;
	
	
	
	СчетУчетаНДСПоРеализации = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы), СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС);
	
	//СчетФактура    = СтруктураШапкиДокумента.Ссылка;
	НаСчет19 	     = Ложь;
	ВтораяПроводка   = Ложь;
	
	СтавкаНДС 		 = 0;	 
	//фиксируется разница	
	СписатьНДС 	  	 = СтрокаТЧ.НДС;
	СписатьСумма  	 = СтрокаТЧ.СуммаРегл-СписатьНДС;
	
	СуммаНДСКнПродаж   = 0;
	СуммаКнПродаж	   = 0;
	
	СуммаНДСКнПродаж2  = 0;
	СуммаКнПродаж2	   = 0;
	
	СуммаКнПокупок     = 0;
	СуммаНДСКнПокупок  = 0;
	
	СуммаКнПокупок2     = 0;
	СуммаНДСКнПокупок2  = 0;
	
	СуммаНДССторно1    = 0;
	СуммаСторно1 	   = 0;
	
	СуммаНДССторно2    = 0;
	СуммаСторно2 	   = 0;
	
	ФиксВВнигеПродаж1  = Ложь; 
	ФиксВВнигеПродаж2  = Ложь; 
	
	
	
	ВидЦенности = СтрокаТЧ.ВидЦенности;
	Если Не ЗначениеЗаполнено(ВидЦенности) Тогда
		ВидЦенности = УчетНДС.ОпределитьВидЦенности(
				СтрокаТЧ.Номенклатура, СтрокаТЧ.СчетУчетаБУ, , , , , СтрокаТЧ.Услуга, , ,ВидыЦенностейПоСчетамУчета);
	КонецЕсли;			
	
	
	Если КорректировкаПоСогласованию и СтрокаТЧ.НДС <> 0 Тогда
		НаСчет19 = (СписатьНДС < 0);
		Если НаСчет19 Тогда
			
			СуммаКнПокупок     = -1*СписатьСумма;
			СуммаНДСКнПокупок  = -1*СписатьНДС;
			
			//СФормироватьЗаписьНДСПредъявл(ТабНДСПредъявл,СтруктураШапкиДокумента,
			//Период,ВидЦенности,СчетФактура,ИсправляемыйДокумент, 
			//Сч19_09,СтрокаТЧ.СтавкаНДС,
			//-1*СписатьНДС,  -1 * СписатьСумма);
		Иначе
			Был68 = Был68 или ?(СписатьСумма <> 0,Истина,Ложь);
			//Был68 = Истина;
			Если ФиксироватьСторно Тогда
				СуммаНДСКнПродаж   = СтрокаТЧ.НДСИтоговый;
				СуммаКнПродаж	   = СтрокаТЧ.ПРГ_СуммаИтоговый - СтрокаТЧ.НДСИтоговый;
				
				СуммаНДССторно1  	= -1*СтрокаТЧ.НДСДоИзм;
				СуммаСторно1 	 	= -1*(СтрокаТЧ.ПРГ_СуммаДоИзм-СтрокаТЧ.НДСДоИзм);
			Иначе
				СуммаНДСКнПродаж   = СписатьНДС;
				СуммаКнПродаж	   = СписатьСумма;
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли  СтрокаТЧ.НДС <> 0 ИЛИ СтрокаТЧ.Сумма <> 0 Тогда       // Шевченков
	//ИначеЕсли  СтрокаТЧ.НДС <> 0 Тогда       // Шевченков
		///ИсправляемыйДокумент = СтруктураШапкиДокумента.ДокументРеализации; //УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
		Если ОснованиеКорректировка Тогда
			//СчетФактура    = ИсправляемыйДокумент;
			НаСчет19 	   = (СтрокаТЧ.НДСДоИзм - СтрокаТЧ.НДСДоКорр < 0);
			НаСчет19Исп    = (СтрокаТЧ.НДСИтоговый - СтрокаТЧ.НДСДоКорр < 0);
			ВтораяПроводка = НаСчет19 <> НаСчет19Исп;
			
			Если ВтораяПроводка Тогда
				СписатьНДС	   = СтрокаТЧ.НДСДоКорр 	  - СтрокаТЧ.НДСДоИзм;
			    СписатьСумма   = СтрокаТЧ.ПРГ_СуммаДоКорр - СтрокаТЧ.ПРГ_СуммаДоИзм-СписатьНДС;
			КонецЕсли;	
			
			Если НаСчет19 Тогда
				СуммаКнПокупок     = -1*СписатьСумма;
				СуммаНДСКнПокупок  = -1*СписатьНДС;
			Иначе
				Был68 = Был68 или ?(СписатьСумма <> 0,Истина,Ложь);
				
				Если ФиксироватьСторно Тогда
					
					Если  ВтораяПроводка Тогда
						
						// <- Шевченков
						Если ТипЗнч(СтруктураШапкиДокумента.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
							
							СуммаНДСКнПродаж = СтрокаТЧ.НДСДоКорр; 
							СуммаКнПродаж	 = (СтрокаТЧ.ПРГ_СуммаДоКорр-СтрокаТЧ.НДСДоКорр);  
							
							СуммаНДССторно1 = -1* СтрокаТЧ.НДСДоИзм;
							СуммаСторно1    = -1* СтрокаТЧ.ПРГ_СуммаДоИзм - СтрокаТЧ.НДСДоИзм;
														
						Иначе
							
							СуммаНДСКнПродаж   = СтрокаТЧ.НДСДоИзм;
							СуммаКнПродаж	   = СтрокаТЧ.ПРГ_СуммаДоИзм - СтрокаТЧ.НДСДоИзм;
							
							СуммаНДССторно1  	= -1* СтрокаТЧ.НДСДоКорр;
							СуммаСторно1 	 	= -1*(СтрокаТЧ.ПРГ_СуммаДоКорр-СтрокаТЧ.НДСДоКорр);
							
						КонецЕсли;
						// ->
						
						//СуммаНДСКнПродаж   = СтрокаТЧ.НДСДоИзм;
						//СуммаКнПродаж	   = СтрокаТЧ.ПРГ_СуммаДоИзм - СтрокаТЧ.НДСДоИзм;
						//
						//СуммаНДССторно1  	= -1* СтрокаТЧ.НДСДоКорр;
						//СуммаСторно1 	 	= -1*(СтрокаТЧ.ПРГ_СуммаДоКорр-СтрокаТЧ.НДСДоКорр);
						
					Иначе
						
						СуммаНДСКнПродаж   = СтрокаТЧ.НДСИтоговый;
						СуммаКнПродаж	   = СтрокаТЧ.ПРГ_СуммаИтоговый - СтрокаТЧ.НДСИтоговый;
						
						СуммаНДССторно1  	= -1*СтрокаТЧ.НДСДоИзм;
						СуммаСторно1 	 	= -1*(СтрокаТЧ.ПРГ_СуммаДоИзм-СтрокаТЧ.НДСДоИзм);
				
					КонецЕсли;
										
				Иначе
					
					СуммаНДСКнПродаж   = СписатьНДС;
					СуммаКнПродаж	   = СписатьСумма;
					
				КонецЕсли;	
			КонецЕсли;
			
			Если ВтораяПроводка Тогда
				
					ВтНаСчет19 	 	 = (СтрокаТЧ.НДСИтоговый - СтрокаТЧ.НДСДоКорр < 0);
					ВтСписатьНДС	 = СтрокаТЧ.НДСИтоговый - СтрокаТЧ.НДСДоКорр;					
					ВтСписатьСумма   = СтрокаТЧ.ПРГ_СуммаИтоговый - СтрокаТЧ.ПРГ_СуммаДоКорр-СписатьНДС;
					
				Если ВтНаСчет19 Тогда //
						
					СуммаНДСКнПокупок2  = -1*ВтСписатьНДС;
					СуммаКнПокупок2     = -1*ВтСписатьСумма;
					
				Иначе
					Был68 = Был68 или ?(ВтСписатьНДС <> 0,Истина,Ложь);	
					
					Если ФиксироватьСторно Тогда
						
						СуммаНДСКнПродаж2  = СтрокаТЧ.НДСИтоговый;
						СуммаКнПродаж2     = СтрокаТЧ.ПРГ_СуммаИтоговый - СтрокаТЧ.НДСИтоговый;
						
						ФиксВВнигеПродаж2  = Истина; 
	
 						СуммаНДССторно2 	= -1* СтрокаТЧ.НДСДоКорр;
						СуммаСторно2	 	= -1*(СтрокаТЧ.ПРГ_СуммаДоКорр-СтрокаТЧ.НДСДоКорр);
						
					Иначе
						
						СуммаНДСКнПродаж2  = СписатьНДС;
						СуммаКнПродаж2     = СписатьСумма;
						
					КонецЕсли;	
					
					
				КонецЕсли;		
		    КонецЕсли;	
		Иначе
			Был68 = Был68 или ?(СписатьНДС <> 0 ИЛИ СписатьСумма <> 0,Истина,Ложь);	    
			
			Если ФиксироватьСторно Тогда                           
				СуммаНДСКнПродаж   = СтрокаТЧ.НДСИтоговый;
				СуммаКнПродаж	   = СтрокаТЧ.ПРГ_СуммаИтоговый - СтрокаТЧ.НДСИтоговый;
				ФиксВВнигеПродаж1  = Истина; 
				
				СуммаНДССторно1  	= -1*СтрокаТЧ.НДСДоИзм;
				СуммаСторно1 	 	= -1*(СтрокаТЧ.ПРГ_СуммаДоИзм-СтрокаТЧ.НДСДоИзм);
			Иначе
				СуммаНДСКнПродаж   = СписатьСумма;
				СуммаКнПродаж	   = СписатьНДС;
			КонецЕсли;	
			
		КонецЕсли;
	Иначе
			Если ФиксироватьСторно Тогда                                                          
				СуммаНДСКнПродаж   = СтрокаТЧ.НДСИтоговый;
				СуммаКнПродаж	   = СтрокаТЧ.ПРГ_СуммаИтоговый - СтрокаТЧ.НДСИтоговый;
				
				СуммаНДССторно1  	= -1*СтрокаТЧ.НДСДоИзм;
				СуммаСторно1 	 	=  -1*(СтрокаТЧ.ПРГ_СуммаДоИзм-СтрокаТЧ.НДСДоИзм);
			КонецЕсли;			 
	
	КонецЕсли;
	
	Если СуммаКнПокупок <> 0 Тогда
			СФормироватьЗаписьНДСПредъявл(ТабНДСПредъявл,СтруктураШапкиДокумента,Период,ВидЦенности,
				СчетФактура,ИсправляемыйДокумент, Сч19_09,СтрокаТЧ.СтавкаНДС,СуммаНДСКнПокупок,СуммаКнПокупок);
	КонецЕсли;	
			
	Если СуммаКнПокупок2 <> 0 Тогда
			СФормироватьЗаписьНДСПредъявл(ТабНДСПредъявл,СтруктураШапкиДокумента,Период,ВидЦенности,
				СчетФактура,ИсправляемыйДокумент, Сч19_09,СтрокаТЧ.СтавкаНДС,СуммаНДСКнПокупок2,СуммаКнПокупок2);
	КонецЕсли;	
	
	Если СуммаКнПродаж <> 0 или ФиксВВнигеПродаж1 Тогда		
		  СФормироватьЗаписьПоКнигиПродаж(ТаблКоррКП,СтруктураШапкиДокумента,Период,             
				  	Перечисления.СобытияПоНДСПродажи.Реализация,					
					СтрокаТЧ.СтавкаНДС,ВидЦенности,
					СуммаНДСКнПродаж,
					СуммаКнПродаж,
					ИсправляемыйДокумент,СчетФактура,
					СтрокаТЧ.СтавкаНДС); // Шевченков
		
		
	КонецЕслИ;	
				
	Если СуммаКнПродаж2	<> 0 или ФиксВВнигеПродаж2 Тогда
		  СФормироватьЗаписьПоКнигиПродаж(ТаблКоррКП,СтруктураШапкиДокумента,Период,
				  	Перечисления.СобытияПоНДСПродажи.Реализация,
					СтрокаТЧ.СтавкаНДС,ВидЦенности,
					СуммаНДСКнПродаж2,
					СуммаКнПродаж2,
					ИсправляемыйДокумент,СчетФактура,
					СтрокаТЧ.СтавкаНДС); // Шевченков
	КонецЕсли;	
	
	Если СуммаСторно1 <> 0 Тогда                                                                       
				  СФормироватьЗаписьПоКнигиПродаж(ТаблСторноКП,СтруктураШапкиДокумента,Период,
				  	Перечисления.СобытияПоНДСПродажи.Реализация,
//начало изменений Ожиганов А. 28.02.2017 исправление движений по книге продаж в части корректировок 					
					//СтрокаТЧ.СтавкаНДС,ВидЦенности,
					СтрокаТЧ.СтавкаНДСДоИзменения,ВидЦенности,
//конец изменений 
					СуммаНДССторно1,
					СуммаСторно1,
					ИсправляемыйДокумент,Неопределено,
					СтрокаТЧ.СтавкаНДСДоИзменения); // Шевченков
	КонецЕсли;	
				
	Если СуммаСторно2 <> 0 Тогда
				  СФормироватьЗаписьПоКнигиПродаж(ТаблСторноКП,СтруктураШапкиДокумента,Период,
				  	Перечисления.СобытияПоНДСПродажи.Реализация,
	//начало изменений Ожиганов А. 28.02.2017 исправление движений по книге продаж в части корректировок 					
//					СтрокаТЧ.СтавкаНДС,ВидЦенности,
					СтрокаТЧ.СтавкаНДСДоИзменения,ВидЦенности,
	//конец изменений 					
					СуммаНДССторно2,
					СуммаСторно2,
					ИсправляемыйДокумент,Неопределено,
					СтрокаТЧ.СтавкаНДСДоИзменения); // Шевченков
	КонецЕсли;					
	
КонецПроцедуры

Процедура СФормироватьЗаписьНДСПредъявл(ТабНДСПредъявл,СтруктураШапкиДокумента,Период,ВидЦенности,
		СчетФактура,ИсправляемыйДокумент, Сч19_09,СтавкаНДС,СуммаНДС,СуммаБезНДС)
	
				НовСтр = ТабНДСПредъявл.Добавить();
				НовСтр.Регистратор	    = СтруктураШапкиДокумента.Ссылка;
				НовСтр.Период 			= Период;
				НовСтр.Организация  	= СтруктураШапкиДокумента.Организация; 
				НовСтр.СчетФактура  	= СчетФактура;
				НовСтр.ВидЦенности  	= ВидЦенности;
				
				НовСтр.СтавкаНДС    			= СтавкаНДС;
				НовСтр.СчетУчетаНДС 			= Сч19_09;
				НовСтр.Поставщик		        = СтруктураШапкиДокумента.Контрагент;
				НовСтр.ДатаСобытия				= Период;
				НовСтр.Событие 					= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
				
				НовСтр.СуммаБезНДС		 		=  СуммаБезНДС;
				НовСтр.НДС				 		=  СуммаНДС;
				
				НовСтр.ИсправленныйСчетФактура  = ИсправляемыйДокумент;
	
	
КонецПроцедуры	

Процедура СФормироватьЗаписьПоКнигиПродаж(ТаблКнигиПродаж,СтруктураШапкиДокумента,Период,Событие,
				СтавкаНДС,ВидЦенности,СуммаНДС,СуммаБезНДС,СчетФактура,ИсправленныйСчетФактура, СтавкаНДСДоИзменения = Неопределено)
	
			НовСтр 				    = ТаблКнигиПродаж.Добавить();
			НовСтр.Регистратор	    = СтруктураШапкиДокумента.Ссылка;
			НовСтр.Период 			= Период;
			НовСтр.Организация  	= СтруктураШапкиДокумента.Организация; 
			НовСтр.Покупатель	  	= СтруктураШапкиДокумента.Контрагент;
			НовСтр.СчетФактура      = СчетФактура;
			НовСтр.ВидЦенности      = ВидЦенности;
			НовСтр.Событие  		= Событие;			
			НовСтр.СтавкаНДС    	= СтавкаНДС;
			НовСтр.СтавкаНДСДоИзменения    	 = СтавкаНДСДоИзменения;
			
			НовСтр.СуммаБезНДС		 =  СуммаБезНДС;
			НовСтр.НДС				 =  СуммаНДС;
			
			НовСтр.ДатаСобытия				= Период;
			
			НовСтр.ЗаписьДополнительногоЛиста = Ложь;
			НовСтр.СторнирующаяЗаписьДопЛиста = Ложь;
			НовСтр.ИсправленныйСчетФактура    = ИсправленныйСчетФактура;
	
КонецПроцедуры	

//заполнение корректировок
///Заполнение корректировок записей регистров
Процедура ЗаполнитьСчетамиТаблицу(Счет,Табл,НУ=Ложь)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Хозрасчетный.Ссылка
	                      |ИЗ
	                      |	ПланСчетов."+?(НУ,"Налоговый","Хозрасчетный")+" КАК Хозрасчетный
	                      |ГДЕ
	                      |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)");
						  
	Запрос.УстановитьПараметр("Счет",Счет);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Табл.Добавить();
		НоваяСтрока.Счет = Выборка.Ссылка;
	КонецЦикла;	
КонецПроцедуры	

Процедура СформироватьДвижНЗП(ТекСтрока,НУ,РегНЗП,ВидВиж,ИмяСчета,ИмяСубконто,ИмяВидУчета,ТекДата,ИмяСчетаМат,ИмяСубкМат,ТаблСчетовМат)
			НоваяСтрока = РегНЗП.Добавить();
			НоваяСтрока.Период		   = ТекДата;
			НоваяСтрока.ВидДвижения    = ВидВиж;
			НоваяСтрока.Организация    = ТекСтрока.Организация;
			НоваяСтрока.Подразделение  = ТекСтрока[ИмяСубконто].Подразделения;
			НоваяСтрока.СчетУчета	   = ТекСтрока[ИмяСчета];
			НоваяСтрока.СтатьяЗатрат   = ТекСтрока[ИмяСубконто].СтатьиЗатрат;
			//начало изменений по сырью
			Если ЗначениеЗаполнено(ТекСтрока[ИмяСчетаМат]) и ЗначениеЗаполнено(НоваяСтрока.СтатьяЗатрат) Тогда
				НайдСтр = ТаблСчетовМат.Найти(ТекСтрока[ИмяСчетаМат],"Счет");
				Если НоваяСтрока.СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные и НайдСтр <> Неопределено Тогда
					НоваяСтрока.Затрата 			 = ТекСтрока[ИмяСубкМат].Номенклатура;
					НоваяСтрока.НоменклатурнаяГруппа = ТекСтрока[ИмяСубконто].НоменклатурныеГруппы;
				КонецЕсли;
			КонецЕсли;	
			//конец изменений
			Если НУ Тогда
				Если ТекСтрока[ИмяВидУчета]= Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
					НоваяСтрока.ПостояннаяРазница = ТекСтрока.Сумма;
				ИначеЕсли ТекСтрока[ИмяВидУчета] = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
					НоваяСтрока.ВременнаяРазница = ТекСтрока.Сумма;
				Иначе	
					НоваяСтрока.Стоимость 		 = ТекСтрока.Сумма;
				КонецЕсли;	
			Иначе	
				НоваяСтрока.Стоимость 		 = ТекСтрока.Сумма;
			КонецЕсли;	
			НоваяСтрока.КодОперации 	    = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
КонецПроцедуры	

Процедура СформироватьДвижЗатраты(ТекСтрока,НУ,РегЗатраты,ВидВиж,ИмяСчета,ИмяСубконто,ИмяВидУчета,ТекДата)
	   НоваяСтрока = РегЗатраты.Добавить();
	   НоваяСтрока.Период		 = ТекДата;
	   НоваяСтрока.ВидДвижения   = ВидВиж;
	   НоваяСтрока.Организация   = ТекСтрока.Организация;
	   НоваяСтрока.Подразделение = ТекСтрока[ИмяСубконто].Подразделения;
	   НоваяСтрока.СчетУчета	 = ТекСтрока[ИмяСчета];
	   НоваяСтрока.СтатьяЗатрат  = ТекСтрока[ИмяСубконто].СтатьиЗатрат;
			Если НУ Тогда
				Если ТекСтрока[ИмяВидУчета] = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
					НоваяСтрока.ПостояннаяРазница = ТекСтрока.Сумма;
				ИначеЕсли ТекСтрока[ИмяВидУчета] = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
					НоваяСтрока.ВременнаяРазница = ТекСтрока.Сумма;
				Иначе	
					НоваяСтрока.Сумма 		 = ТекСтрока.Сумма;
				КонецЕсли;	
			Иначе	
				НоваяСтрока.Сумма 		 = ТекСтрока.Сумма;
			КонецЕсли;	

	   НоваяСтрока.КодОперации   = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
КонецПроцедуры	

Процедура ЗаполнитьДвижАморт(ТаблАморт,ТекСтрока,НУ,РегАмортизация,ВидВиж,ИмяСчета,ИмяСубконто,ИмяВидУчета,ТекДата)
	
		Если НУ Тогда
			Если ТекСтрока[ИмяВидУчета] = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				возврат;
			КонецЕсли;	
        КонецЕсли;
	
	   НоваяСтрока = ТаблАморт.Добавить();
	   НоваяСтрока.Период			= ТекДата;
	   НоваяСтрока.Организация  	= ТекСтрока.Организация;
	   НоваяСтрока.ОсновноеСредство = ТекСтрока[ИмяСубконто].ОсновныеСредства;
	   НоваяСтрока.Амортизация      = ВидВиж*ТекСтрока.Сумма;
	
КонецПроцедуры
   
Процедура  СформироватьДвижАморт(ТаблАморт,РегАморт)
	  ТаблАморт.Свернуть("Период,ОсновноеСредство,Организация","Амортизация");
	  Для Каждого ТекСтрока Из ТаблАморт Цикл
		   НоваяСтрока = РегАморт.Добавить();
		   НоваяСтрока.Период			= ТекСтрока.Период;
		   НоваяСтрока.Организация  	= ТекСтрока.Организация;
		   НоваяСтрока.ОсновноеСредство = ТекСтрока.ОсновноеСредство;
		   НоваяСтрока.Амортизация      = ТекСтрока.Амортизация;
	  КонецЦикла; 
КонецПроцедуры	
   
   

Процедура СформироватьДвиженияСебТМЦ(ТекСтрока,НУ,РегПартии,ВидВиж,ИмяСчета,ИмяСубконто,ИмяВидУчета,ТекДата,ИмяКолВо)
	   НоваяСтрока = РегПартии.Добавить();
	   НоваяСтрока.Период		 = ТекДата;
	   НоваяСтрока.ВидДвижения   = ВидДвиженияНакопления.Приход;
	   НоваяСтрока.Организация   = ТекСтрока.Организация;
	   НоваяСтрока.Номенклатура  = ТекСтрока[ИмяСубконто].Номенклатура;
	   НоваяСтрока.СчетУчета	 = ТекСтрока[ИмяСчета];
	   НоваяСтрока.Качество 	 = Справочники.Качество.Новый;
	   
	   
	   Коэфф = ?(ВидВиж = ВидДвиженияНакопления.Приход,1,-1);
	   НоваяСтрока.Количество    = Коэфф * ТекСтрока[ИмяКолВо];
			Если НУ Тогда
				Если ТекСтрока[ИмяВидУчета] = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
					НоваяСтрока.ПостояннаяРазница = Коэфф * ТекСтрока.Сумма;
				ИначеЕсли ТекСтрока[ИмяВидУчета] = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
					НоваяСтрока.ВременнаяРазница = Коэфф * ТекСтрока.Сумма;
				Иначе	
					НоваяСтрока.Стоимость 		 = Коэфф * ТекСтрока.Сумма;
				КонецЕсли;	
			Иначе	
				НоваяСтрока.Стоимость 		 = Коэфф * ТекСтрока.Сумма;
			КонецЕсли;	

	   НоваяСтрока.КодОперации   = Перечисления.КодыОперацийПартииТоваров.Оприходование;
	
КонецПроцедуры	
			   
Процедура ДобавитьДвиженияВКорректировку(Операция,НУ=Ложь,Записывать=Ложь,Объект,ПРГ_БылиИзм) Экспорт 
	
	  Регистратор = Объект.Ссылка;
	  
	  ТаблОсАморт = Новый ТаблицаЗначений;
	  ТаблОсАморт.Колонки.Добавить("Период");
	  ТаблОсАморт.Колонки.Добавить("ОсновноеСредство");
	  ТаблОсАморт.Колонки.Добавить("Организация");
	  ТаблОсАморт.Колонки.Добавить("Амортизация",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	  ТаблСчетовНезавершенка = Новый ТаблицаЗначений;
	  ТаблСчетовНезавершенка.Колонки.Добавить("Счет");
	  ТаблСчетовНезавершенка.Индексы.Добавить("Счет");
	  
	  ПрефиксОпер = ?(НУ,"Налоговый","Хозрасчетный");
	  
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("20"),ТаблСчетовНезавершенка,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("23"),ТаблСчетовНезавершенка,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("29"),ТаблСчетовНезавершенка,НУ);
	  
	  ТаблСчетовАморт = Новый ТаблицаЗначений;
	  ТаблСчетовАморт.Колонки.Добавить("Счет");
	  ТаблСчетовАморт.Индексы.Добавить("Счет");
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("02.01"),ТаблСчетовАморт,НУ);
	  
	  
	  ТаблСчетовЗатрат = Новый ТаблицаЗначений;
	  ТаблСчетовЗатрат.Колонки.Добавить("Счет");
	  ТаблСчетовЗатрат.Индексы.Добавить("Счет");
	  
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("25"),ТаблСчетовЗатрат,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("26"),ТаблСчетовЗатрат,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("44"),ТаблСчетовЗатрат,НУ);
	  
	  
	  ТаблСчетовПартий = Новый ТаблицаЗначений;
	  ТаблСчетовПартий.Колонки.Добавить("Счет");
	  ТаблСчетовПартий.Индексы.Добавить("Счет");
	  
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("43"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("21"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("41"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.01"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.02"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.03"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.04"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.05"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.06"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.07"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.08"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.09"),ТаблСчетовПартий,НУ);
	  //ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.10"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.14.1"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.14.2"),ТаблСчетовПартий,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.14.5"),ТаблСчетовПартий,НУ);
	  
	  //начало изменений добавка по НЗП
	  ТаблСчетовСырья = Новый ТаблицаЗначений;
	  ТаблСчетовСырья.Колонки.Добавить("Счет");
	  ТаблСчетовСырья.Индексы.Добавить("Счет");
	  
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("43")   ,ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("21")   ,ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("41")   ,ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.01"),ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.02"),ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.03"),ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.04"),ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.05"),ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.06"),ТаблСчетовСырья,НУ);
	  ЗаполнитьСчетамиТаблицу(ПланыСчетов[ПрефиксОпер].НайтиПоКоду("10.07"),ТаблСчетовСырья,НУ);
	  //конец изменений 
	  
	  
	  
	  Префикс = ?(НУ,"НалоговыйУчет","БухгалтерскийУчет");
	  
	  //Затраты = РегистрыНакопления["Затраты"+Префикс].СоздатьНаборЗаписей();
	  //Затраты.Отбор.Регистратор.Установить(Регистратор);
	  
	  Затраты = Объект.Движения["Затраты"+Префикс];
	  
	  РегАмортОС = Объект.Движения["СтоимостьОС"+Префикс];
	  
	  //РегНЗП = РегистрыНакопления["НезавершенноеПроизводство"+Префикс].СоздатьНаборЗаписей();
	  //РегНЗП.Отбор.Регистратор.Установить(Регистратор);
	  
	  РегНЗП = Объект.Движения["НезавершенноеПроизводство"+Префикс];
	  
	  //РегПартий = РегистрыНакопления["ПартииТоваровНаСкладах"+Префикс].СоздатьНаборЗаписей();
	  //РегПартий.Отбор.Регистратор.Установить(Регистратор);
	  
	  РегПартий = Объект.Движения["ПартииТоваровНаСкладах"+Префикс];
	  
	  Если РегАмортОС.Количество() > 0 Тогда
		  РегАмортОС.Очистить();
	  КонецЕсли; 
	  
	  Если РегПартий.Количество() > 0 Тогда
		   РегПартий.Очистить();
	  КонецЕсли;		
			
	  Если Затраты.Количество() > 0 Тогда
	     //ЗаписатьИНФУВКорректировку(Объект,Затраты,ПРГ_БылиИзм);
		  Затраты.Очистить();
	  КонецЕсли;		
	  
	  Если РегНЗП.Количество() > 0 Тогда
		  РегНЗП.Очистить();
	  КонецЕсли;	
	  
	  //Организация = Операция.Отбор.Регистратор.Значение.Организация;
	  ТекДата 		 = Регистратор.Дата;
	  
	  Для Каждого ТекСтрока ИЗ Операция Цикл
			НайдЗнч = ТаблСчетовНезавершенка.Найти(ТекСтрока.СчетДт,"Счет");
			Если ТаблСчетовНезавершенка.Найти(ТекСтрока.СчетДт,"Счет") <> Неопределено Тогда
				СформироватьДвижНЗП(ТекСтрока,НУ,РегНЗП,ВидДвиженияНакопления.Приход,"СчетДт","СубконтоДт","ВидУчетаДт",ТекДата,"СчетКт","СубконтоКт",ТаблСчетовСырья);
			КонецЕсли;	
			
			Если ТаблСчетовНезавершенка.Найти(ТекСтрока.СчетКт,"Счет") <> Неопределено Тогда
				СформироватьДвижНЗП(ТекСтрока,НУ,РегНЗП,ВидДвиженияНакопления.Расход,"СчетКт","СубконтоКт","ВидУчетаКт",ТекДата,"СчетДт","СубконтоДт",ТаблСчетовСырья);
			КонецЕсли;	
			
			Если ТаблСчетовЗатрат.Найти(ТекСтрока.СчетДт,"Счет") <> Неопределено Тогда
				СформироватьДвижЗатраты(ТекСтрока,НУ,Затраты,ВидДвиженияНакопления.Приход,"СчетДт","СубконтоДт","ВидУчетаДт",ТекДата);
			КонецЕсли;	
			
			Если ТаблСчетовЗатрат.Найти(ТекСтрока.СчетКт,"Счет") <> Неопределено Тогда
				СформироватьДвижЗатраты(ТекСтрока,НУ,Затраты,ВидДвиженияНакопления.Расход,"СчетКт","СубконтоКт","ВидУчетаКт",ТекДата);
			КонецЕсли;
			
			//амортизация
			Если ТаблСчетовАморт.Найти(ТекСтрока.СчетДт,"Счет") <> Неопределено Тогда
				ЗаполнитьДвижАморт(ТаблОсАморт,ТекСтрока,НУ,РегАмортОС,-1,"СчетДт","СубконтоДт","ВидУчетаДт",ТекДата);
			КонецЕсли;	
			
			Если ТаблСчетовАморт.Найти(ТекСтрока.СчетКт,"Счет") <> Неопределено Тогда
				ЗаполнитьДвижАморт(ТаблОсАморт,ТекСтрока,НУ,РегАмортОС,1,"СчетКт","СубконтоКт","ВидУчетаКт",ТекДата);
			КонецЕсли;	
			
			
			ЕстьВДт = ТаблСчетовПартий.Найти(ТекСтрока.СчетДт,"Счет")<> Неопределено;
			ЕстьВКТ = ТаблСчетовПартий.Найти(ТекСтрока.СчетКт,"Счет")<> Неопределено;
			
			Если ЕстьВДт Тогда
				//СформироватьДвиженияСебТМЦ(ТекСтрока,НУ,РегПартии,ВидВиж,ИмяСчета,ИмяСубконто,ИмяВидУчета,ТекДата);
				СформироватьДвиженияСебТМЦ(ТекСтрока,НУ,РегПартий,ВидДвиженияНакопления.Приход,"СчетДт","СубконтоДт","ВидУчетаДт",ТекДата,"КоличествоДт");
			КонецЕсли;	
				
			Если ЕстьВКт Тогда	
				СформироватьДвиженияСебТМЦ(ТекСтрока,НУ,РегПартий,ВидДвиженияНакопления.Расход,"СчетКт","СубконтоКт","ВидУчетаКт",ТекДата,"КоличествоКт");	
			КонецЕсли;	
			
		КонецЦикла; 
		
	  СформироватьДвижАморт(ТаблОсАморт,РегАмортОС);
	  
	  Если РегАмортОС.Количество() > 0 Тогда
		 ЗаписатьИНФУВКорректировку(Объект,РегАмортОС,ПРГ_БылиИзм);  
	  КонецЕсли; 
		
	  Если РегПартий.Количество() > 0 Тогда
		ЗаписатьИНФУВКорректировку(Объект,РегПартий,ПРГ_БылиИзм);
	  КонецЕсли;		
			
	  Если Затраты.Количество() > 0 Тогда
	     ЗаписатьИНФУВКорректировку(Объект,Затраты,ПРГ_БылиИзм);
	  КонецЕсли;		
	  
	  Если РегНЗП.Количество() > 0 Тогда
	  	 ЗаписатьИНФУВКорректировку(Объект,РегНЗП,ПРГ_БылиИзм);
	  КонецЕсли;	
			
	  
	Если Записывать Тогда
		Затраты.Записать(Истина);	 
		РегНЗП.Записать(Истина);	  
		РегПартий.Записать(Истина);	  
	КонецЕсли; 
	
КонецПроцедуры	

Процедура ЗаписатьИНФУВКорректировку(Объект,Регистр,БылиИзм)
	
	МетаРег  = Регистр.Метаданные();
	Если Метаданные.РегистрыНакопления.Содержит(МетаРег) Тогда
		Таб  = Объект.ТаблицаРегистровНакопления;
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаРег) Тогда
		Таб  = Объект.ТаблицаРегистровБухгалтерии;
	Иначе
		Таб  = Объект.ТаблицаРегистровСведений;
	КонецЕсли;	
	
	МетаРег = Регистр.Метаданные();
	Если Таб.Найти(МетаРег.Имя,"Имя") = Неопределено Тогда
		НоваяСтрока = Таб.Добавить();
		НоваяСтрока.Имя           = МетаРег.Имя;
		НоваяСтрока.Представление = МетаРег.Представление();
		БылиИзм = Истина;
	КонецЕсли;
	
КонецПроцедуры	

Функция ЭтоДокМСФО(ДокОбъект) Экспорт
	ИмяДок = "док."+Нрег(ДокОбъект.Метаданные().Имя);
	Если ИмяДок = "док.расчетсебестоимостивыпуска" Тогда
		возврат ДокОбъект.ОтражатьВМеждународномУчете;
	ИначеЕсли ИмяДок = "док.корректировкастоимостисписаниятоваров" Тогда
		возврат ДокОбъект.ОтражатьВМеждународномУчете;
	ИначеЕсли ИмяДок = "док.корректировказаписейрегистров" Тогда
		возврат ДокОбъект.ДокМСФО;
	КонецЕсли;
	Если ПараметрыСеанса.ПРГ_ИмяОбъектовМСФО <> Неопределено Тогда
		Если ПараметрыСеанса.ПРГ_ИмяОбъектовМСФО .Найти(ИмяДок) <> Неопределено Тогда
			возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	возврат ложь;
КонецФункции	

Функция ЭтоРегистрМСФО(НаборЗаписей) Экспорт
	ИмяДок = "рег."+Нрег(НаборЗаписей.Метаданные().Имя);
	Если ПараметрыСеанса.ПРГ_ИмяОбъектовМСФО <> Неопределено Тогда
		Если ПараметрыСеанса.ПРГ_ИмяОбъектовМСФО .Найти(ИмяДок) <> Неопределено Тогда
			возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	возврат ложь;
КонецФункции	

///Процедуры для работы с внешними файлами

Процедура ПРГ_ВнФайлы_УдалитьФайлыВКаталоге(ИмяКаталога,УдалятьСамКаталог=Ложь) Экспорт
	ВремКаталог = СокрЛП(ИмяКаталога);
	Если Прав(ВремКаталог,1) <> "\" Тогда
		ВремКаталог = ВремКаталог+ "\";
	КонецЕсли;	
	
	УдалитьФайлы(ВремКаталог,"*.*");
	
	Если УдалятьСамКаталог Тогда
		ВремКаталог = Лев(ВремКаталог,СтрДлина(ВремКаталог)-1);
		УдалитьФайлы(ВремКаталог);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПРГ_ВнФайлы_ОпределитьКаталогПоМетаДанным(Мета,СоздКаталог) Экспорт
	
	ИмяКаталога = "";
	Если Метаданные.Справочники.Содержит(Мета) Тогда
		ИмяКаталога = "Спр_"+Мета.Имя;
	ИначеЕсли Метаданные.Документы.Содержит(Мета) Тогда
		ИмяКаталога = "Док_"+Мета.Имя;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(Мета) Тогда
		ИмяКаталога = "РС_"+Мета.Имя;
	КонецЕсли;
	
	Если ИмяКаталога = "" тогда
		Вызватьисключение "Не определен каталог !!!";
	КонецЕсли;	
	
	ПолныйПуть = ПараметрыСеанса.ПРГ_КаталогХраненияФайлов +ИмяКаталога+"\";
	Если СоздКаталог Тогда
		КаталогОбъекта = Новый Файл(ПолныйПуть);
		Если Не КаталогОбъекта.Существует() Тогда
				СоздатьКаталог(КаталогОбъекта.ПолноеИмя);
		КонецЕсли;	
	КонецЕсли;	
	
	возврат ПолныйПуть;
	
КонецФункции	

Функция ПРГ_ВнФайлы_ПолучитьКаталогХранения(ТекСсылка, СоздКаталог=Ложь) Экспорт
	Если ТекСсылка = Неопределено Тогда
		возврат "";
	КонецЕслИ;	
	
	ПолныйПуть =  ПРГ_ВнФайлы_ОпределитьКаталогПоМетаДанным(ТекСсылка.Метаданные(),СоздКаталог);

	//Сообщить();
	ИмяПодКаталога = ЗначениеВСтрокуВнутр(ТекСсылка);
	ИмяПодКаталога = Лев(ИмяПодКаталога,СтрДлина(ИмяПодКаталога)-1);
	//Удаляем все запятые 
	поз = Найти(ИмяПодКаталога,",");
	Пока поз > 0 Цикл
		ИмяПодКаталога = Сред(ИмяПодКаталога,поз+1);
		поз = Найти(ИмяПодКаталога,",");
	КонецЦикла;
		
	поз = Найти(ИмяПодКаталога,":");
	Пока поз > 0 Цикл
		ИмяПодКаталога = Сред(ИмяПодКаталога,поз+1);
		поз = Найти(ИмяПодКаталога,":");
	КонецЦикла;
	
	ПолныйПуть = ПолныйПуть+ИмяПодКаталога+"\";
	
	Если СоздКаталог Тогда
		КаталогОбъекта = Новый Файл(ПолныйПуть);
		Если Не КаталогОбъекта.Существует() Тогда
			Попытка
				СоздатьКаталог(КаталогОбъекта.ПолноеИмя);
			Исключение
				Сообщить(ОписаниеОшибки());
				возврат "";
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;	
	
	возврат ПолныйПуть; 
КонецФункции	

Функция ПРГ_ВнФайлы_ПолучитьИмяФайла(ТекСсылка) Экспорт
	Каталог = ПРГ_ВнФайлы_ПолучитьКаталогХранения(ТекСсылка);
	Если Каталог = "" Тогда
		возврат "";
	КонецЕсли;	
	
	НужноеИмяФайла = Нрег(СокрЛп(ТекСсылка.ИмяФайла));
	
	МассивНайденных = НайтиФайлы(Каталог, "*.*");
	Если МассивНайденных.Количество() > 0 Тогда
		 Если МассивНайденных.Количество() = 1 Тогда
				возврат МассивНайденных[0].ПолноеИмя;
		 Иначе
			 для к = 0 По  МассивНайденных.Количество()-1 Цикл
				 Если НужноеИмяФайла = Нрег(МассивНайденных[0].Имя) Тогда
					 возврат МассивНайденных[к].ПолноеИмя;
				 КонецЕсли; 
				  //вставить удаление
			 КонецЦикла; 
			 //ничего не нашли  
			 возврат МассивНайденных[0].ПолноеИмя;
		 КонецЕсли;		
	Иначе
		возврат "";
	КонецЕсли;	
КонецФункции	

Функция ПРГ_ВнФайлы_ПолучитьКаталогХраненияВрФайла(ТекСсылка) Экспорт
	
	Если ТекСсылка = Неопределено Тогда
		возврат "";
	КонецЕслИ;	
	
	ИмяКаталога = ПРГ_ВнФайлы_ОпределитьКаталогПоМетаДанным(ТекСсылка.Метаданные(),Истина);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(800);
	Пока истина Цикл
		 ИмяПодКаталога = СокрЛп(Формат(ГСЧ.СлучайноеЧисло(100000, 999999),"ЧЦ=6; ЧГ="));
		 Файл = Новый Файл(ИмяКаталога+ИмяПодКаталога+"\");
		 Если Не Файл.Существует() Тогда
			 ИмяКаталога= Файл.ПолноеИмя;
			 прервать;
		 КонецЕсли; 
	КонецЦикла; 
	
	СоздатьКаталог(ИмяКаталога);
	
	возврат ИмяКаталога+"\";
КонецФункции	

Процедура ПРГ_ВНФайлы_ОткрытьФайл(ТекСсылка,ВремФайл="")

		ПолноеИмяФайла = "";
		Если ПараметрыСеанса.ПРГ_КаталогХраненияФайлов <> "" Тогда
			Если НЕ ПустаяСтрока(ВремФайл) Тогда
				ПолноеИмяФайла = ВремФайл;
			Иначе
				ПолноеИмяФайла = ПРГ_ДопФункцииКлиентСервер.ПРГ_ВнФайлы_ПолучитьИмяФайла(ТекСсылка);
			КонецЕсли;	
		КонецЕсли;	
		Если ПолноеИмяФайла <> "" и ПараметрыСеанса.ПРГ_КаталогХраненияФайлов <> "" Тогда
			ИмяВремКаталога = РаботаСФайлами.ПолучитьИмяКаталога()+"\";
			ОбъектФайл      = Новый Файл(ПолноеИмяФайла);
			Попытка
				ИмяВремФайла    = РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ОбъектФайл.Имя);
				ПолнИмяВрФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяВремКаталога,ИмяВремФайла);
				//ПереместитьФайл(ПолноеИмяФайла,ПолнИмяВрФайла);
				ДвоичДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				ДвоичДанные.Записать(ИмяВремКаталога+ИмяВремФайла);
				//ФайлнаДиске = Новый   Файл(ИмяВремКаталога+ИмяВремФайла);
				//ФайлнаДиске.УстановитьТолькоЧтение(Истина);
				РаботаСФайлами.ОткрытьФайлДополнительнойИнформации(ИмяВремКаталога, ИмяВремФайла);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;	
		Иначе
			РаботаСФайлами.ОткрытьФайлы(ТекСсылка, Неопределено, Ложь);
	    КонецЕсли;

КонецПроцедуры

Процедура ПРГ_ВнФайлы_ОткрытьФайлы(ОбъектФайла, ВыделенныеСтроки,Пар=Ложь) Экспорт
	//вызываетя из хранилища дополнительной информации
	Если ВыделенныеСтроки = Неопределено Тогда
		
		СпособПерезаписи = "";
		Если ТипЗнч(ОбъектФайла) = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации") Тогда
			ПРГ_ВНФайлы_ОткрытьФайл(ОбъектФайла.Ссылка,ОбъектФайла.ПРГ_ВремИмяФайла);
		Иначе	
			ПРГ_ВНФайлы_ОткрытьФайл(ОбъектФайла.Ссылка);
		КонецЕсли;	
	Иначе
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога();
		ТолькоЧтение = Ложь;

		СпособПерезаписи = "";

		Для каждого СсылкаФайл из ВыделенныеСтроки Цикл

			ПРГ_ВНФайлы_ОткрытьФайл(СсылкаФайл);

		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФайлы()

Процедура ПРГ_ВнФайлы_ДобавитьФайлы(ОбъектФайла, ВидДанных = Неопределено, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	Если Не ОбъектФайла = Неопределено И ОбъектФайла.Пустая() Тогда
		#Если Клиент Тогда
			Предупреждение("Необходимо записать объект, которому принадлежит файл.");
		#Иначе	
			Сообщить("Необходимо записать объект, которому принадлежит файл.");
		#КонецЕсли	
		Возврат;
	КонецЕсли;

	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Истина);

	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблФайлов = Новый ТаблицаЗначений;
	ТаблФайлов.Колонки.Добавить("ИмяКталога");

	Для каждого ПолученноеИмяФайла Из Диалог.ВыбранныеФайлы Цикл

		ПолученныйФайл = Новый Файл(ПолученноеИмяФайла);
		#Если Клиент Тогда
			Состояние("Добавляется файл: " + ПолученныйФайл.Имя);
		#КонецЕсли

		НачатьТранзакцию();
		
		Отказ = Ложь;
		
		НовыйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
		НовыйФайл.Объект = ОбъектФайла;
		НовыйФайл.ИмяФайла = ПолученныйФайл.Имя;
		Если ИмяСправочника = "ХранилищеДополнительнойИнформации" Тогда
			НовыйФайл.ВидДанных = ВидДанных;
		КонецЕсли; 

		Попытка
			НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных());
			НовыйФайл.Записать();
			
			ПРГ_КаталогСсылки = ПРГ_ДопФункцииКлиентСервер.ПРГ_ВнФайлы_ПолучитьКаталогХранения(НовыйФайл.Ссылка,Истина);
			ДвоичДанные = Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя);
			ДвоичДанные.Записать(ПРГ_КаталогСсылки+НовыйФайл.ИмяФайла);
			НС = ТаблФайлов.Добавить();
			НС.ИмяКталога = ПРГ_КаталогСсылки;
		Исключение
			#Если Клиент Тогда
				Предупреждение("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
			#Иначе
			    Сообщить("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
			#КонецЕсли
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Для каждого ТекСтрока Из ТаблФайлов Цикл
				ПРГ_ДопФункцииКлиентСервер.ПРГ_ВнФайлы_УдалитьФайлыВКаталоге(ТекСтрока.ИмяКаталога,Истина);
			КонецЦикла;	
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли; 

	КонецЦикла;

КонецПроцедуры // ДобавитьФайлы()

Функция ПРГ_ВнФайлы_СохранитьФайл(СтруктураПараметров,ТекСсылка,СпособПерезаписи,ИмяСправочника="ХранилищеДополнительнойИнформации",ВопросОПерезаписи=Истина)
	Если СтруктураПараметров = Неопределено Тогда
		возврат Ложь;
	КонецЕсли;	
	Если ПараметрыСеанса.ПРГ_КаталогХраненияФайлов <> "" Тогда
		ПолноеИмяФайла = ПРГ_ДопФункцииКлиентСервер.ПРГ_ВнФайлы_ПолучитьИмяФайла(ТекСсылка);
		Если ПолноеИмяФайла <> "" Тогда
			НовИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(СтруктураПараметров.ИмяКаталога, РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ТекСсылка.ИмяФайла));
			
			ФайлНаДиске = Новый Файл(НовИмяФайла);
			КаталогНаДиске = Новый Файл(ФайлНаДиске.Путь);

			Если Не КаталогНаДиске.Существует() Тогда
				СоздатьКаталог(ФайлНаДиске.Путь);
			КонецЕсли;

			Если ФайлНаДиске.Существует() И ВопросОПерезаписи = Истина Тогда

				Если СпособПерезаписи = ""
				 ИЛИ Врег(СпособПерезаписи) = "ДА"
				 ИЛИ Врег(СпособПерезаписи) = "НЕТ" Тогда

					ФормаЗапросаПерезаписиФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаЗапросаПерезаписиФайлов");
					ФормаЗапросаПерезаписиФайлов.ТекстПредупреждения = 
					    "На локальном диске уже существует файл:
					    |" + ФайлНаДиске.Имя + "
					    |Перезаписать имеющийся файл?";
					СпособПерезаписи = ФормаЗапросаПерезаписиФайлов.ОткрытьМодально();

					Если СпособПерезаписи = Неопределено
					 ИЛИ Врег(СпособПерезаписи) = "НЕТ"
					 ИЛИ Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда
						Возврат Ложь;
					КонецЕсли;

				ИначеЕсли Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда

					Возврат Ложь;

				КонецЕсли;

				// Если существующему файлу установлено ТолькоЧтение, отменим эту установку.
				Если ФайлНаДиске.ПолучитьТолькоЧтение() Тогда
					ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				КонецЕсли;

			КонецЕсли;
			
			ДвоичДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ДвоичДанные.Записать(НовИмяФайла);
			ФайлнаДиске = Новый   Файл(НовИмяФайла);
			ФайлнаДиске.УстановитьТолькоЧтение(СтруктураПараметров.ТолькоЧтение);
		Иначе
			РаботаСФайлами.СохранитьФайл(СтруктураПараметров, ТекСсылка.ИмяФайла, ТекСсылка.Хранилище);
		КонецЕсли;	
	Иначе
		РаботаСФайлами.СохранитьФайл(СтруктураПараметров, ТекСсылка.ИмяФайла, ТекСсылка.Хранилище);
	КонецЕсли;	
	возврат истина;
КонецФункции

Функция ПРГ_ВнФайлы_ПолучитьСтруктуруПараметровДляСохраненияФайлов(ИмяКаталога, ИмяСправочника)

	ФормаСохраненияФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаСохраненияФайлов");
	ФормаСохраненияФайлов.ИмяКаталога    = ИмяКаталога;
	ФормаСохраненияФайлов.ТолькоЧтение   = Ложь;

	Если ИмяКаталога = Неопределено Тогда
		ФормаСохраненияФайлов.ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога();
		ФормаСохраненияФайлов.ОткрытьКаталог = Истина;
	Иначе
		ФормаСохраненияФайлов.ОткрытьКаталог = Ложь;
	КонецЕсли; 

	СтруктураПараметров = ФормаСохраненияФайлов.ОткрытьМодально();
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСФайлами.ПроверитьСуществованиеКаталога(СтруктураПараметров.ИмяКаталога) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровДляСохраненияФайлов()

Процедура ПРГ_ВнФайлы_СохранитьФайлы(ОбъектФайла, ВыделенныеСтроки = Неопределено, ИмяКаталога = Неопределено, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	Если (ВыделенныеСтроки <> Неопределено) И (ВыделенныеСтроки.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПРГ_ВнФайлы_ПолучитьСтруктуруПараметровДляСохраненияФайлов(ИмяКаталога, ИмяСправочника);
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СпособПерезаписи = "";
	
	Если ВыделенныеСтроки = Неопределено Тогда
		
		//ПРГ_ВнФайлы_СохранитьФайл(СтруктураПараметров, ОбъектФайла.ИмяФайла, ОбъектФайла.Хранилище, СпособПерезаписи);
		ПРГ_ВнФайлы_СохранитьФайл(СтруктураПараметров, ОбъектФайла.Ссылка, СпособПерезаписи);
		
	Иначе
		
		Для каждого СсылкаФайл из ВыделенныеСтроки Цикл
			
			//ПРГ_ВнФайлы_СохранитьФайл(СтруктураПараметров, СсылкаФайл.ИмяФайла, СсылкаФайл.Хранилище, СпособПерезаписи);
			ПРГ_ВнФайлы_СохранитьФайл(СтруктураПараметров, СсылкаФайл, СпособПерезаписи);
			
			Если СпособПерезаписи = Неопределено Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
	КонецЕсли;

	Если СтруктураПараметров.ОткрытьКаталог Тогда
		ЗапуститьПриложение("explorer " + СтруктураПараметров.ИмяКаталога);
	КонецЕсли;

КонецПроцедуры // СохранитьФайлы()

///Функции версиооности
Функция ПРГ_ВнФайлы_Версии_ОпределитьКаталог() Экспорт
	
	возврат ПараметрыСеанса.ПРГ_КаталогХраненияФайлов +"РС_ВерсииОбъектов\";	
	
КонецФункции	

Функция ПРГ_ВнФайлы_Верссии_ПолучитьИмя(Ссылка,НомерВерсии,Без_Версии=Ложь,ИдТипа = "")
	
	ЗнчСтр = ЗначениеВСтрокуВнутр(Ссылка);
	ЗнчСтр = Сред(ЗнчСтр,1,СтрДлина(ЗнчСтр)-1);
	//удаляем запятые
	ПозЗап = Найти(ЗнчСтр,",");
	Пока ПозЗап > 0 Цикл
		 ЗнчСтр = Сред(ЗнчСтр,ПозЗап+1);
		 ПозЗап = Найти(ЗнчСтр,",");
	КонецЦикла;	
	
	ПозДвоет = Найти(ЗнчСтр,":");
	Если ПозДвоет = 0 Тогда
		ВызватьИсключение "Не  удается сформировать каталог/файл хранения"; 
	КонецЕсли;	
	ИдТипа = Лев(ЗнчСтр,ПозДвоет-1);
	Если Без_Версии Тогда
		возврат Лев(ЗнчСтр,ПозДвоет-1)+"_"+Сред(ЗнчСтр,ПозДвоет+1);
	Иначе	
		возврат Лев(ЗнчСтр,ПозДвоет-1)+"_"+Сред(ЗнчСтр,ПозДвоет+1)+"_"+Формат(НомерВерсии,"ЧГ=");
	КонецЕсли;	
	
КонецФункции	

Функция ПРГ_ВнФайлы_Версии_ПолучитьКаталог(Ссылка,НомерВерсии,СоздКаталог=Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ВызватьИсключение "Не  заполнена ссылка"; 
	КонецЕслИ;	
	
	ПервыйУровень = ПРГ_ВнФайлы_Версии_ОпределитьКаталог();
	
	ИдТипа= "";
	ПодПапка = ПРГ_ВнФайлы_Верссии_ПолучитьИмя(Ссылка,НомерВерсии,истина,ИдТипа);
	Файл = Новый Файл(ПервыйУровень+ПодПапка);
	Если Файл.Существует() Тогда
		ПолныйКаталог = ПервыйУровень+ПодПапка+"\";
	Иначе
		ПолныйКаталог = ПервыйУровень+ИдТипа+"\"+ПодПапка+"\";
	КонецЕсли;	
	
	
	Если СоздКаталог Тогда
		СоздатьКаталог(ПолныйКаталог);
	КонецЕсли;	
	
	возврат ПолныйКаталог
	
КонецФункции	

Функция ПРГ_ВнФайлы_Версии_ПолучитьСущИмяФайла(Ссылка,НомерВерсии,Расширение=".zip") Экспорт
	
	Каталог = ПРГ_ВнФайлы_Версии_ПолучитьКаталог(Ссылка,НомерВерсии);
	
	Если Каталог = "" Тогда
		возврат "";
	КонецЕсли;	
	
	НужноеИмяФайла = Нрег(СокрЛп(ПРГ_ВнФайлы_Верссии_ПолучитьИмя(Ссылка,НомерВерсии)+Расширение));
	ОбъектФайл = Новый Файл(Каталог+НужноеИмяФайла);
	Если ОбъектФайл.Существует() Тогда
		возврат ОбъектФайл.ПолноеИмя;
	Иначе
		Если Расширение=".zip" Тогда
			НужноеИмяФайла =Нрег(СокрЛп(ПРГ_ВнФайлы_Верссии_ПолучитьИмя(Ссылка,НомерВерсии)+".xml"));
			ОбъектФайл = Новый Файл(Каталог+НужноеИмяФайла);
			Если ОбъектФайл.Существует() Тогда
				возврат ОбъектФайл.ПолноеИмя;
			Иначе
				возврат "";
			КонецЕсли;	
		КонецЕсли;	
		возврат "";
	КонецЕслИ;	
	
	//МассивНайденных = НайтиФайлы(Каталог, "*.*");
	//Если МассивНайденных.Количество() > 0 Тогда
	//	 Если МассивНайденных.Количество() = 1 Тогда
	//			возврат МассивНайденных[0].ПолноеИмя;
	//	 Иначе
	//		 для к = 0 По  МассивНайденных.Количество()-1 Цикл
	//			 Если НужноеИмяФайла = Нрег(МассивНайденных[0].Имя) Тогда
	//				 возврат МассивНайденных[к].ПолноеИмя;
	//			 КонецЕсли; 
	//			  //вставить удаление
	//		 КонецЦикла; 
	//		 //ничего не нашли  
	//		 возврат МассивНайденных[0].ПолноеИмя;
	//	 КонецЕсли;		
	//Иначе
	//	возврат "";
	//КонецЕсли;
	
КонецФункции	

Функция ПРГ_ВнФайлы_Версии_ПолучитьИмяФайла(Ссылка,НомерВерсии,Расширение=".xml") Экспорт
	
	Если НомерВерсии = "" Тогда
		вызватьисключение "не задан номер версии !!!";
	КонецЕсли;	
	
	Каталог = ПРГ_ВнФайлы_Версии_ПолучитьКаталог(Ссылка,НомерВерсии,Истина);
	
	Если Каталог = "" Тогда
		возврат "";
	КонецЕсли;	
	
	НужноеИмяФайла = Каталог+Нрег(СокрЛп(ПРГ_ВнФайлы_Верссии_ПолучитьИмя(Ссылка,НомерВерсии)+Расширение));
	
	возврат НужноеИмяФайла;
КонецФункции	

Функция ПРГ_ПолучитьОсновноеИзображение(ОсновноеИзображение) Экспорт 
	  Если Не ЗначениеЗаполнено(ОсновноеИзображение) Тогда
		  возврат Неопределено;
	  КонецЕсли;	
	  мКартинка = Неопределено;
	  Если ПараметрыСеанса.ПРГ_КаталогХраненияФайлов <> "" Тогда
			ИмяФайлаКартинки = ПРГ_ДопФункцииКлиентСервер.ПРГ_ВнФайлы_ПолучитьИмяФайла(ОсновноеИзображение);
			Если ИмяФайлаКартинки <> "" Тогда
				мКартинка = Новый Картинка(ИмяФайлаКартинки);
			Иначе	
				мКартинка =  ОсновноеИзображение.Хранилище.Получить();
			КонецЕсли;	
		Иначе
			мКартинка = ОсновноеИзображение.Хранилище.Получить();
		КонецЕсли; 
		
		Если мКартинка = Неопределено Тогда
			возврат Новый Картинка;
		Иначе
			возврат мКартинка;
		КонецЕсли;	
КонецФункции	


/// Кунов О.В., 16.10.2014 - 

Функция ЕстьКатегорияУПользователя(НаименованиеКатегории) Экспорт
	
	Физлицо = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
	Если Не ЗначениеЗаполнено(Физлицо) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1 КАК Единица
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектовРегистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииОбъектов КАК КатегорииОбъектовСправочник
	|		ПО КатегорииОбъектовРегистр.Категория = КатегорииОбъектовСправочник.Ссылка
	|ГДЕ
	|	КатегорииОбъектовСправочник.Наименование = &НаименованиеКатегории
	|	И КатегорииОбъектовСправочник.НазначениеКатегории = &НазначениеКатегории
	|	И КатегорииОбъектовРегистр.Объект = &Физлицо");
	
	Запрос.УстановитьПараметр("НаименованиеКатегории", НаименованиеКатегории);
	Запрос.УстановитьПараметр("НазначениеКатегории", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Результат = Не Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

///
//начало изменений согласно протокул дивизион ФКК нельзя записывать в АП и Подразделения Ожиганов 17.12.2014
Процедура ПРГ_ПроверкаНаЗаписьРеквизитов(Источник,Отказ)
	Если Источник.ОбменДанными.Загрузка  Тогда
		возврат;
	КонецЕсли;	
	ИмяРекв  = "";
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Подразделения") 
		или ТипЗнч(Источник) = Тип("СправочникОбъект.ПодразделенияОрганизаций") 
	Тогда
		ИмяРекв = "ПРГДивизион";
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.АдресаПоставки") Тогда
		ИмяРекв = "Дивизион";
	КонецЕсли;
	
	//{20.01.2015 Островерхий заявка №б/н 
	//Если ИмяРекв <> "" Тогда
	//	Если Источник[ИмяРекв]= Справочники.ПРГДивизионы.ФКК Тогда
	//		Отказ = Истина;
	//		Сообщить("В "+Источник+" нельзя задавать значение дивизион ФКК");
	//	КонецЕсли;
	//КонецЕсли; 
	Если НЕ ИмяРекв = "" Тогда
		
		МассивСлужебныхДивизионов = Справочники.ПРГ_Служебный.ПолучитьОбъектыИзГруппы(Справочники.ПРГ_Служебный.СлужебныеДивизионы);	
		Отказ = НЕ МассивСлужебныхДивизионов.Найти(Источник[ИмяРекв]) = Неопределено;
		
		Если Отказ Тогда
			Сообщить("В "+Источник+" нельзя задавать значение служебного дивизиона '"+Источник[ИмяРекв]+"'",СтатусСообщения.ОченьВажное);
		КонецЕсли; 
		
	КонецЕсли; 
	//20.01.2015 Островерхий} 
	//начало изменений Ожиганов 09.06.2015 36963  
	МетаОбъекта = Источник.Метаданные();
	//Blik 291015 группу спр номенклатура не проверяем 45478
	Если ТипЗнч(Источник) = ТИП("СправочникОбъект.Номенклатура") и Источник.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;

	Если Не Отказ и Метаданные.Справочники.Найти(МетаОбъекта.Имя) <> Неопределено Тогда
		 //Запрос к проверяемым реквизитам
		 Запрос = Новый Запрос("ВЫБРАТЬ
		                       |	ПРГ_ПроверкаЗаполненияРеквизитовСправочника.ИмяОбъекта,
		                       |	ПРГ_ПроверкаЗаполненияРеквизитовСправочника.ИмяРеквизита,
		                       |	ПРГ_ПроверкаЗаполненияРеквизитовСправочника.ЗначениеРеквизита,
		                       |	ПРГ_ПроверкаЗаполненияРеквизитовСправочника.ПроверяемыйРеквизит
		                       |ИЗ
		                       |	РегистрСведений.ПРГ_ПроверкаЗаполненияРеквизитовСправочника КАК ПРГ_ПроверкаЗаполненияРеквизитовСправочника
		                       |ГДЕ
		                       |	ПРГ_ПроверкаЗаполненияРеквизитовСправочника.ИмяОбъекта = &ИмяОбъекта");
							   
		
		Запрос.УстановитьПараметр("ИмяОбъекта","спр."+Нрег(МетаОбъекта.Имя));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Рекв 	 = МетаОбъекта.Реквизиты.Найти(Выборка.ИмяРеквизита);
			ПровРекв = МетаОбъекта.Реквизиты.Найти(Выборка.ПроверяемыйРеквизит);
			Если ПровРекв = Неопределено или Рекв = Неопределено Тогда
				//ошибочно задан реквизит
				продолжить;
			КонецЕсли;	
			Если Источник[Выборка.ИмяРеквизита] = Выборка.ЗначениеРеквизита Тогда
 				ПровЗнч = Источник[Выборка.ПроверяемыйРеквизит];
				ТипПроврекв = ТипЗнч(ПровЗнч);
				БылиОшибки = Ложь;
				Если  ПровЗнч = Неопределено  Тогда
					БылиОшибки = Истина;
				ИначеЕсли ТипПроврекв = Тип("Дата") и ПровЗнч = '00010101' Тогда
					БылиОшибки = Истина;
				ИначеЕсли ТипПроврекв = Тип("Булево") и Не ПровЗнч Тогда
					БылиОшибки = Истина;
				ИначеЕсли ТипПроврекв = Тип("Число") и ПровЗнч = 0 Тогда
					БылиОшибки = Истина;
				ИначеЕсли ТипПроврекв = Тип("Строка") и ПустаяСтрока(ПровЗнч) Тогда
					БылиОшибки = Истина;
				ИначеЕсли Не ЗначениеЗаполнено(ПровЗнч) Тогда
					БылиОшибки = Истина;
				КонецЕсли;	
				
				Если БылиОшибки Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит "+?(ПустаяСтрока(ПровРекв.Синоним),ПровРекв.Имя,ПровРекв.Синоним)+ " !!! Элемент не может быть записан !!!",Отказ);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	//конец изменений 	
КонецПроцедуры	

//{16.10.2014 Островерхий заявка №32780 // работанет для всех справочника Ожиганов 17.12.2014
Процедура ПРГПередЗаписьюКлючевыхСправочниковПередЗаписью(Источник, Отказ) Экспорт
	
	//
	ПРГ_ПроверкаНаЗаписьРеквизитов(Источник,Отказ);
	
	//начало изменений Ожиганов 08.07.2015 создание базы МСФО 
	Если Источник.ОбменДанными.Загрузка  Тогда
		возврат;
	КонецЕсли;	
	
	Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ПланОбменаИспользуется Тогда
		ВидОбъекта = "спр."+Нрег(Источник.Метаданные().Имя);
		Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО Тогда
			Если ПараметрыСеанса.ПРГ_ИмяОбъектовМСФО.Найти(ВидОбъекта) = Неопределено Тогда
				Сообщить("Cправочник редактируется в главной базе, не в базе МСФО !!!");
				Отказ = Истина;
				возврат;
			КонецЕсли;	
		Иначе
			Если ПараметрыСеанса.ПРГ_ИмяОбъектовМСФО.Найти(ВидОбъекта) <> Неопределено Тогда
				Сообщить("Cправочник редактируется в базе МСФО !!!");
				Отказ = Истина;
				возврат;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	ИмяРекв  = "";
	
	
	Если Отказ тогда
		возврат;
	КонецЕсли;	
	
	Если РольДоступна(Метаданные.ОсновнаяРоль.Имя) Тогда
		Возврат;	
	КонецЕсли; 
	
	МетаданныеИмя = Источник.МетаДанные().Имя;
	МетаданныеСиноним = Источник.МетаДанные().Синоним;

	Если Источник.ЭтоНовый() Тогда
		
		Отказ = НЕ ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьСозданиеСправочника"+МетаданныеИмя,Истина); // если нет значений в доправах даем право на редактирование
		
		#Если Клиент Тогда
			Если Отказ Тогда
				Текст = "Не достаточно прав на создание нового справочника "+МетаданныеСиноним;
				Сообщить(Текст);	
			КонецЕсли; 
		#КонецЕсли 
		
	Иначе	
		
		Отказ = НЕ ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьИзменениеСправочника"+МетаданныеИмя, Истина); // если нет значений в доправах даем право на редактирование
		
		#Если Клиент Тогда
			Если Отказ Тогда
				Текст = "Не достаточно прав на изменение справочника "+МетаданныеСиноним;
				Сообщить(Текст);	
			КонецЕсли; 
		#КонецЕсли 
		
	КонецЕсли; 
		
КонецПроцедуры
//16.10.2014 Островерхий} 

/// Кунов О.В., 09.12.2014 - 34322

Функция ПостроитьТаблицуОстатковПоПодотчетномуЛицу(СтруктураШапкиДокумента) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаУпрОстаток КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			&ГраницаОстатков,
	|			Организация = &Организация
	|				И ФизЛицо = &Физлицо
	|				И Валюта = &Валюта
	|				И ВЫБОР
	|					КОГДА &РасчетныйДокумент = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ РасчетныйДокумент = &РасчетныйДокумент
	|				КОНЕЦ) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки");
	
	Запрос.УстановитьПараметр("ГраницаОстатков", 	СтруктураШапкиДокумента.Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Валюта", 			СтруктураШапкиДокумента.ВалютаДокумента);
	Запрос.УстановитьПараметр("Физлицо",			СтруктураШапкиДокумента.Физлицо);
	
	РасчетныйДокумент = СтруктураШапкиДокумента.РасчетныйДокументРаботника;
	Запрос.УстановитьПараметр("РасчетныйДокумент",	? (ЗначениеЗаполнено(РасчетныйДокумент), РасчетныйДокумент, Неопределено));
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции

Процедура ЗаполнитьТаблицуВзаиморасчетовСПодотчетнымиЛицами(СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаОстатков) Экспорт
	
	СуммаКРаспределению = СтруктураШапкиДокумента.СуммаДокумента;
	
	Для Каждого СтрокаТаблицыОстатков Из ТаблицаОстатков Цикл
		
		Если СтрокаТаблицыОстатков.СуммаВзаиморасчетов > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ТаблицаВзаиморасчетов.Добавить();
		
		Движение.Организация 			= СтруктураШапкиДокумента.Организация;
		Движение.Физлицо	 			= СтруктураШапкиДокумента.Физлицо;
		Движение.Валюта		 			= СтруктураШапкиДокумента.ВалютаДокумента;
		
		Движение.РасчетныйДокумент		= СтрокаТаблицыОстатков.РасчетныйДокумент;
		Движение.СуммаВзаиморасчетов	= Мин(СуммаКРаспределению, -СтрокаТаблицыОстатков.СуммаВзаиморасчетов);
		Движение.СуммаУпр				= Мин(СуммаКРаспределению, -СтрокаТаблицыОстатков.СуммаУпр);
		
		СуммаКРаспределению = СуммаКРаспределению - Движение.СуммаВзаиморасчетов;
		
		Если Движение.СуммаВзаиморасчетов <> -СтрокаТаблицыОстатков.СуммаВзаиморасчетов Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммаКРаспределению > 0 Тогда
		
		Движение = ТаблицаВзаиморасчетов.Добавить();
		
		Движение.Организация 			= СтруктураШапкиДокумента.Организация;
		Движение.Физлицо	 			= СтруктураШапкиДокумента.Физлицо;
		Движение.Валюта		 			= СтруктураШапкиДокумента.ВалютаДокумента;
		
		Движение.РасчетныйДокумент 		= СтруктураШапкиДокумента.Ссылка;
		Движение.СуммаВзаиморасчетов 	= СуммаКРаспределению;
		Движение.СуммаУпр				= СуммаКРаспределению;
		
	КонецЕсли;
	
КонецПроцедуры

///
//начало изменений изменения границы изменения данных
Процедура ПРГ_УвеличитьСчетчикОповещений() Экспорт 
	//начало изменений граница изменения данных
	ЗначКонст = Константы.ПРГ_СчетчикИзменений.Получить();
	ЗначКонст  = ?(ЗначКонст > 99999999999999 ,0,ЗначКонст+1);
	Константы.ПРГ_СчетчикИзменений.Установить(ЗначКонст);
	ПараметрыСеанса.ПРГ_СчетчикИзменений = ЗначКонст;
	//конец изменений
КонецПроцедуры	

// для уменьшения времени проведениия
//, будем использовать формирование доков только по управленческому учету
Функция ПРГ_ПриФормированииДокОтгрузкиТолькоУпр() Экспорт
	//заменить на истину
	возврат Истина;
	
	Если Нрег(СокрЛП(Константы.ПРГ_СтрокаПодключения.Получить())) = Нрег(СтрокаСоединенияИнформационнойБазы()) Тогда
		возврат Ложь; //
	Иначе
		возврат Истина;
    КонецЕсли;
КонецФункции	

//начало изменений запуск обработки проведении в регламентированном учета
Процедура ЗапускПроведенияДокументовПоРеглУчету() Экспорт
	 СтрокаПодкл = СокрЛП(Константы.ПРГ_СтрокаПодключения.Получить());

	Если  Нрег(СтрокаПодкл) <> Нрег(СтрокаСоединенияИнформационнойБазы()) Тогда
		 возврат;
	КонецЕсли; 
	
	Обработка = Обработки.ПРГ_ПростановкаПризнакаБУНУ.Создать();
	Обработка.ПровестиВРеглУчете(Ложь,,,Неопределено);
КонецПроцедуры	
//конец изменений

Функция ПроверитьЭтоДействующийДоговор(Дата,Договор,ТекстОшибки) Экспорт
	Если Дата = '00010101' Тогда
		возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		возврат истина;
	КонецЕсли;	
	
	Если типЗнч(Договор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		возврат Истина;
	КонецЕсли;	
	
	ДатаСравн = Договор.ДатаРасторжения;
	Если Дата > ДатаСравн и ДатаСравн <> '00010101'  Тогда
		ТекстОшибки = "Дата документа/обработки "+СокрЛП(Формат(НачалоДня(Дата),"ДФ=dd.MM.yyyy"))+" больше, чем дата расторжения  договора "+СокрЛП(Формат(НачалоДня(ДатаСравн),"ДФ=dd.MM.yyyy"))+" !!!"+ТекстОшибки;
		возврат ложь;
	КонецЕсли;	
	
	ДатаСравн = Договор.СрокДействия;
	Если Дата > ДатаСравн и  ДатаСравн  <> '00010101'  Тогда
		ТекстОшибки = "Дата документа/обработки "+СокрЛП(Формат(НачалоДня(Дата),"ДФ=dd.MM.yyyy"))+" больше, чем срок действия договора "+СокрЛП(Формат(НачалоДня(ДатаСравн),"ДФ=dd.MM.yyyy"))+" !!! "+ТекстОшибки;
		возврат ложь;
	КонецЕсли;	
	
	возврат Истина;
КонецФункции	

Процедура СоздатьСообщениеКонтурПоЗаказуВведенномуНаОснованииИмпортированного(Объект)
	
	//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
	Ссылка 			  = Объект.Ссылка;
	//ДокументОснование = Ссылка.ДокументОснование;
	ДокументОснование = Объект.ДокументОснование;
	//конец изменений 
	//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
	//Если Не Ссылка.ПометкаУдаления И Справочники.КонтурEDI_Сообщения.НайтиПоРеквизиту("Документ", Ссылка).Пустая() И ЗначениеЗаполнено(ДокументОснование) Тогда
	Если Не Объект.ПометкаУдаления И ЗначениеЗаполнено(ДокументОснование) И Справочники.КонтурEDI_Сообщения.НайтиПоРеквизиту("Документ", Ссылка).Пустая()  Тогда
	//конец изменений 	
		ЗапросСообщенияПоОснованию = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтурEDI_Сообщения.Ссылка,
		|	КонтурEDI_Сообщения.Документ
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	КонтурEDI_Сообщения.Документ = &Документ
		|	И НЕ КонтурEDI_Сообщения.ПометкаУдаления");
		
		ЗапросСообщенияПоОснованию.УстановитьПараметр("Документ", ДокументОснование);
		
		РезультатЗапроса = ЗапросСообщенияПоОснованию.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СообщениеПоОснованию = Выборка.Ссылка;
			Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КП_ИмпортированныйЗаказ") Тогда
				//===
				НовоеСообщение = Справочники.КонтурEDI_Сообщения.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НовоеСообщение, СообщениеПоОснованию, , "Документ, ДатаЗагрузки, Родитель, Владелец");
				НовоеСообщение.Документ = Ссылка;
				ТипСообщения = НовоеСообщение.ТипСообщения;
				Если Лев(ТипСообщения, 1) = "#" Тогда
					НовоеСообщение.ТипСообщения = Сред(ТипСообщения, 2);
				КонецЕсли;
				НовоеСообщение.ДатаЗагрузки = ТекущаяДата();
				НовоеСообщение.ТребуемоеДействие = "РаботаЗавершена";
				НовоеСообщение.УстановитьНовыйКод();
				НовоеСообщение.Записать();
				//===
				СообщениеПоОснованиюОбъект = СообщениеПоОснованию.ПолучитьОбъект();
				СообщениеПоОснованиюОбъект.ТипСообщения = "#ORDERS";
				//СообщениеПоОснованиюОбъект.ТребуемоеДействие = "РаботаЗавершена";
				СообщениеПоОснованиюОбъект.Записать();
				//===
			КонецЕсли;
		КонецЦикла;
				
	КонецЕсли;
		
КонецПроцедуры

Процедура ПРГ_Контур_ПриЗаписиЗаказаНаОснованииИмпортированногоПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка  Тогда
		возврат;
	КонецЕсли;	
	
	Попытка
		//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
		//СоздатьСообщениеКонтурПоЗаказуВведенномуНаОснованииИмпортированного(Источник.Ссылка);
		СоздатьСообщениеКонтурПоЗаказуВведенномуНаОснованииИмпортированного(Источник);
		//конец изменений 
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
Функция ПолучитьТекстЗапросаДляРасчетаПДЗ(ВВалютеВзаиморасчетов=Истина) Экспорт 
	//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет)*-1
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК ПриходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК РасходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  			
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% -ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% -ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет ) * -1
			//конец изменений 
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  		
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход
	        |ПОМЕСТИТЬ ТаблКонтр
	        |{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
			|	И Не ВзаиморасчетыСКонтрагентами.НеУчитВДебиторке
			//конец изменений 
	        |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	        |{ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	        |	ВзаиморасчетыСКонтрагентами.Организация.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.ЦеноваяГруппаКонтрагента.* КАК ЦеноваяГруппаКонтрагента,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.КаналТовародвижения.* КАК КаналТовародвижения,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	        //|	ВзаиморасчетыСКонтрагентами.Контрагент.Проект.* КАК Проект
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	(СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ИНАЧЕ (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет)
			//конец изменений 
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |								ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ИНАЧЕ (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет)
			//конец изменений 
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |								ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%-ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |											ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |											ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ИНАЧЕ (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет)
			//конец изменений 
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |											ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |											ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Организация,
	        |	ДоговорКонтрагента,
	        |	Контрагент
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
			// <- Шевченков №52691 20160520
			|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ПРГ_ДопДниЗадолженности КАК ПРГ_ДопДниЗадолженности,
			// ->
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ КАК Дата,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
	        |НачалоПериода(ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,Месяц) КАК ДатаПериода,			
			//конец изменений 
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ КАК Регистратор,
			|ВЫБОР
			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
//начало изменений Ожиганов 29.12.2015 б/н более корректное левое соединение на SQL
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.РеализацияТоваровУслуг).АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.РеализацияТоваровУслуг).АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаРеализации).АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаРеализации).АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаЗаписейРегистров).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаЗаписейРегистров).АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга и  ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаДолга).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаДолга).АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной и  ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.ПРГ_СторноНакладной).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.ПРГ_СторноНакладной).АП_ДатаОплаты
//конец изменений 			
			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			//конец изменений 
			|КОНЕЦ КАК ДатаОплаты,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход,
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	        |							ТОГДА  ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходДельта,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходДельта,			
			//конец изменений 
	        |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	        |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	        |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	        |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	        |	ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты КАК ПроцентОтгрузки
			|{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
//начало изменений Ожиганов 29.12.2015 б/н более корректное левое соединение на SQL
			// |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
			//|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
			//|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
			//|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
			//|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПРГ_СторноНакладной КАК ПРГ_СторноНакладной
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = ПРГ_СторноНакладной.Ссылка
//конец изменений 			
			//конец изменений 
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	        |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	        |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	        |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
			|	И Не ВзаиморасчетыСКонтрагентами.НеУчитВДебиторке
			//конец изменений 
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
			// <- Шевченков №52691 20160520
			|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ПРГ_ДопДниЗадолженности,
			// ->
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
	        |НачалоПериода(ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,Месяц),			
			//конец изменений 
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
			|ВЫБОР
			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.РеализацияТоваровУслуг).АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.РеализацияТоваровУслуг).АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаРеализации).АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаРеализации).АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаЗаписейРегистров).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаЗаписейРегистров).АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга и  ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаДолга).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаДолга).АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной и  ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.ПРГ_СторноНакладной).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.ПРГ_СторноНакладной).АП_ДатаОплаты
			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			//конец изменений 
			|КОНЕЦ,
	        | ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Организация,
	        |	Контрагент,
	        |	ДоговорКонтрагента,
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			|	ДатаПериода,
			//конец изменений 
			|	ДатаОплаты,
			|	Дата,
	        |	Регистратор";
			
	Если ВВалютеВзаиморасчетов Тогда
		возврат СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаВзаиморасчетов");		
	Иначе			
		возврат СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаУПР");
	КонецЕсли;
	//конец изменений 
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА 0
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК ПриходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА 0
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК РасходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход
	        |ПОМЕСТИТЬ ТаблКонтр
	        |{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
	        |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	        |{ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	        |	ВзаиморасчетыСКонтрагентами.Организация.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.ЦеноваяГруппаКонтрагента.* КАК ЦеноваяГруппаКонтрагента,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.КаналТовародвижения.* КАК КаналТовародвижения,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	        //|	ВзаиморасчетыСКонтрагентами.Контрагент.Проект.* КАК Проект
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	(СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА 0
	        |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА 0
	        |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Организация,
	        |	ДоговорКонтрагента,
	        |	Контрагент
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ КАК Дата,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
	        |НачалоПериода(ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,Месяц) КАК ДатаПериода,			
			//конец изменений 
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ КАК Регистратор,
			|ВЫБОР
			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг и РеализацияТоваровУслуг.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации и КорректировкаРеализации.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров и КорректировкаЗаписейРегистров.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга и  КорректировкаДолга.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной и  ПРГ_СторноНакладной.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ПРГ_СторноНакладной.АП_ДатаОплаты
			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			//конец изменений 
			|КОНЕЦ КАК ДатаОплаты,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход,
	        |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	        |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	        |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	        |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	        |	ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты КАК ПроцентОтгрузки
			|{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	        |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПРГ_СторноНакладной КАК ПРГ_СторноНакладной
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = ПРГ_СторноНакладной.Ссылка
			//конец изменений 
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	        |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	        |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	        |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
	        |НачалоПериода(ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,Месяц),			
			//конец изменений 
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
			|ВЫБОР
			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг и РеализацияТоваровУслуг.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации и КорректировкаРеализации.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров и КорректировкаЗаписейРегистров.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга и  КорректировкаДолга.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной и  ПРГ_СторноНакладной.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ПРГ_СторноНакладной.АП_ДатаОплаты
			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			//конец изменений 
			|КОНЕЦ,
	        | ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Организация,
	        |	Контрагент,
	        |	ДоговорКонтрагента,
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			|	ДатаПериода,
			//конец изменений 
			|	ДатаОплаты,
			|	Дата,
	        |	Регистратор";
			
	Если ВВалютеВзаиморасчетов Тогда
		возврат СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаВзаиморасчетов");		
	Иначе			
		возврат СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаУПР");
	КонецЕсли;	
КонецФункции	
//конец изменений 
//начало изменений Ожиганов 25.05.2015 немножко оптимизируем 
Функция ПРГ_ОпределитьСчетаУчетаЦенностей(ОбъектыУчета = "", ДатаОбъекта = '00010101')

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	Если ОбъектыУчета = "Оборудование" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта >= '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		Иначе 
			Возврат СчетаУчетаЗатрат;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектыУчета = "ОС" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта < '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		КонецЕсли;
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли; 
	Если ОбъектыУчета = "НМА" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;  
	Если ОбъектыУчета = "ОбъектыСтроительства" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "Материалы" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	//СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция ПРГПолучитьСоотвествиеСчетовУчета()Экспорт
	ОбъектыУчета =  Новый Массив;
	ОбъектыУчета.Добавить("Оборудование");
	ОбъектыУчета.Добавить("ВНА");
	ОбъектыУчета.Добавить("ОС");
	ОбъектыУчета.Добавить("НМА");
	ОбъектыУчета.Добавить("ОбъектыСтроительства");
	ОбъектыУчета.Добавить("Материалы");
	
	Соотвествие = Новый Соответствие;
	
	Для каждого ТекЭл Из ОбъектыУчета Цикл
			 ФиксирМассив = Новый  ФиксированныйМассив(ПРГ_ОпределитьСчетаУчетаЦенностей(ТекЭл,'20140101'));
		     Соотвествие.Вставить(ТекЭл,ФиксирМассив);
	КонецЦикла;	
	
//	ФиксСоотв = Новый ФиксированноеСоответствие(Соотвествие);
	возврат  Новый ФиксированноеСоответствие(Соотвествие);
	
КонецФункции	


//конец изменений 
//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
Процедура ДобавитьВОбъектСвойстваДляУдаленияДвижения(Объект,РежимЗаписи) Экспорт 
	Если Объект.ЭтоНовый() Тогда
		возврат;
	КонецЕсли;	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СчетФактураВыданный.ВидСчетаФактуры
		                      |ИЗ
		                      |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		                      |ГДЕ
		                      |	СчетФактураВыданный.Ссылка = &Ссылка");
							  
		Запрос.УстановитьПараметр("Ссылка",Объект.ссылка);					  
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Выборка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
 			или Выборка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
		Иначе
			Если Объект.ДополнительныеСвойства.Свойство("ПРГСтароеОтражВрегл") Тогда
				 Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Истина);
			КонецЕслИ;	
		КонецЕслИ;	
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда	
		Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
			Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Истина);
		Иначе
		  	Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Ложь);
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗакрытиеЗаказовПокупателей") Тогда  	
		Если Объект.Заказы.Количество() = 0 Тогда
			Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Ложь);
		Иначе
			 Запрос = Новый Запрос("ВЫБРАТЬ
			                       |	ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя
			                       |ИЗ
			                       |	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ЗакрытиеЗаказовПокупателейЗаказы
			                       |ГДЕ
			                       |	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка = &Ссылка
			                       |	И (ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя.ОтражатьВБухгалтерскомУчете
			                       |			ИЛИ ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя.ОтражатьВНалоговомУчете)");
			Запрос.УстановитьПараметр("Ссылка",Объект.ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Истина);
			Иначе //когда такое можеть быть непонятно
				Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Ложь);
			КонецЕслИ;	
		КонецЕсли;	
		//начало изменений Ожиганов 05.06.2015 немножко оптимизируем 
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда  			
			Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Ложь);
			НеНужноЗакрыватьЗаказ = Ложь;
			Если Не Объект.ДополнительныеСвойства.Свойство("НеНужноЗакрыватьЗаказ",НеНужноЗакрыватьЗаказ) Тогда
				НеНужноЗакрыватьЗаказ = Ложь;
			КонецЕсли;	
			Если НеНужноЗакрыватьЗаказ Тогда
					МассивНеучРегистров= Новый Массив;
					МассивНеучРегистров.Добавить("РегистрНакопления.ТоварыВРезервеНаСкладах");
					МассивНеучРегистров.Добавить("РегистрНакопления.СвободныеОстатки");
					МассивНеучРегистров.Добавить("РегистрНакопления.РасчетыСКонтрагентами");
					МассивНеучРегистров.Добавить("РегистрНакопления.РазмещениеЗаказовПокупателей");
					МассивНеучРегистров.Добавить("РегистрНакопления.ЗаказыПокупателей");
					МассивНеучРегистров.Добавить("РегистрНакопления.ВнутренниеЗаказы");
					Объект.ДополнительныеСвойства.Вставить("МассивНеучРегистров",МассивНеучРегистров);
			Иначе		
			
				 Запрос = Новый Запрос("ВЫБРАТЬ
				                       |	СП_ЗаданиеНаПодбор.Ссылка,
				                       |	СП_ЗаданиеНаПодбор.ДатаФормированияДокументов
				                       |ИЗ
				                       |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
				                       |ГДЕ
				                       |	СП_ЗаданиеНаПодбор.Ссылка = &Ссылка");
									   
				Запрос.УстановитьПараметр("Ссылка",Объект.ссылка);								   
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					Если Выборка.ДатаФормированияДокументов = '00010101' Тогда
						МассивНеучРегистров= Новый Массив;
						МассивНеучРегистров.Добавить("РегистрНакопления.ТоварыВРезервеНаСкладах");
						МассивНеучРегистров.Добавить("РегистрНакопления.СвободныеОстатки");
						МассивНеучРегистров.Добавить("РегистрНакопления.РасчетыСКонтрагентами");
						МассивНеучРегистров.Добавить("РегистрНакопления.РазмещениеЗаказовПокупателей");
						МассивНеучРегистров.Добавить("РегистрНакопления.ЗаказыПокупателей");
						МассивНеучРегистров.Добавить("РегистрНакопления.ВнутренниеЗаказы");
						Объект.ДополнительныеСвойства.Вставить("МассивНеучРегистров",МассивНеучРегистров);
					КонецЕсли;	
				КонецЕслИ;	
		   КонецЕсли;		
	//конец изменений 	
	//начало изменений Ожиганов 05.06.2015 немножко оптимизируем 
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		Мета = Объект.Метаданные();
		МетаШапки = Мета.Реквизиты;
		Если МетаШапки.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено и МетаШапки.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	Док.ОтражатьВБухгалтерскомУчете,
			                      |	Док.ОтражатьВНалоговомУчете
			                      |ИЗ
			                      |	Документ."+Мета.Имя+" КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Ссылка");
								  
			Запрос.УстановитьПараметр("Ссылка",Объект.ссылка);					  
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Выборка.ОтражатьВБухгалтерскомУчете или Выборка.ОтражатьВНалоговомУчете);
			Иначе //когда такое можеть быть непонятно
				Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Ложь);
			КонецЕслИ;	
			Если НЕ Объект.ДополнительныеСвойства.ПРГСтароеОтражВрегл Тогда
					МассивНеучРегистров= Новый Массив;
					МассивНеучРегистров.Добавить("РегистрНакопления.ТоварыВРезервеНаСкладах");
					МассивНеучРегистров.Добавить("РегистрНакопления.СвободныеОстатки");
					МассивНеучРегистров.Добавить("РегистрНакопления.РазмещениеЗаказовПокупателей");
					Объект.ДополнительныеСвойства.Вставить("МассивНеучРегистров",МассивНеучРегистров);
			КонецЕсли;	
		Иначе
			Если Объект.ДополнительныеСвойства.Свойство("ПРГСтароеОтражВрегл") Тогда
				 Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Истина);
			 КонецЕслИ;	
		КонецЕсли;		 
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВнутреннийЗаказ") Тогда	 
		Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Ложь);
		МассивНеучРегистров= Новый Массив;
		МассивНеучРегистров.Добавить("РегистрНакопления.ТоварыВРезервеНаСкладах");
		МассивНеучРегистров.Добавить("РегистрНакопления.СвободныеОстатки");
		МассивНеучРегистров.Добавить("РегистрНакопления.РазмещениеЗаказовПокупателей");
		Объект.ДополнительныеСвойства.Вставить("МассивНеучРегистров",МассивНеучРегистров);
	//конец изменений 
	Иначе                         
		Мета = Объект.Метаданные();
		МетаШапки = Мета.Реквизиты;
		Если МетаШапки.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено и МетаШапки.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	Док.ОтражатьВБухгалтерскомУчете,
			                      |	Док.ОтражатьВНалоговомУчете
			                      |ИЗ
			                      |	Документ."+Мета.Имя+" КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Ссылка");
								  
			Запрос.УстановитьПараметр("Ссылка",Объект.ссылка);					  
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Выборка.ОтражатьВБухгалтерскомУчете или Выборка.ОтражатьВНалоговомУчете);
			Иначе //когда такое можеть быть непонятно
				Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Ложь);
			КонецЕслИ;	
		Иначе
			Если Объект.ДополнительныеСвойства.Свойство("ПРГСтароеОтражВрегл") Тогда
				 Объект.ДополнительныеСвойства.Вставить("ПРГСтароеОтражВрегл" ,Истина);
			 КонецЕслИ;	
		КонецЕсли;		 
	КонецЕсли;	
КонецПроцедуры

Функция ПРГЕстьРеализацииПровПоБУ(ДокументыОснования) Экспорт 
	Если ТипЗнч(ДокументыОснования) <> Тип("Массив") Тогда
		 Возврат Ложь;
	КонецЕсли;	
	 
	Если ДокументыОснования.Количество() = 0 Тогда
		 возврат Ложь;
	КонецЕсли;	
	
	ДокРеал = Новый Массив;
	для каждого ТекЭлем Из   ДокументыОснования Цикл
		Если ТипЗнч(ТекЭлем) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокРеал.Добавить(ТекЭлем);
		КонецЕсли;	
	КонецЦикла;	
	
	Если ДокРеал.Количество() = 0 Тогда
		возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Ссылка
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.Ссылка В(&Ссылка)
	                      |	И РеализацияТоваровУслуг.Проведен
	                      |	И РеализацияТоваровУслуг.ОтражатьВБухгалтерскомУчете");
						  
	Запрос.УстановитьПараметр("Ссылка",ДокРеал);						  
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		возврат Истина;
	Иначе
		возврат Ложь;
	КонецЕсли;	
КонецФункции

Функция ПРГПроводитьПоПартиям(СтруктураШапкиДокумента) Экспорт 
	Перем 	Упр, Бух, Нал;
	
	СтруктураШапкиДокумента.Свойство("ОтражатьВУправленческомУчете",Упр);
	СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете",Бух);
	СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете",Нал);
	
	 Упр  = ?(Упр=Неопределено,Истина,Упр);
	 Бух  = ?(Бух=Неопределено,Истина,Бух);
	 Нал  = ?(Нал=Неопределено,Истина,Нал);
	 
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	возврат  (Упр  и ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов) 
		              ИЛИ (Бух и ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух) 
					  ИЛИ (Нал и  ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал);

КонецФункции	

Функция ПолучитьСтруктРевизитаЗаказа(Заказ,СтруктРекв) Экспорт
	Перем ИмяДок;
	ТипЗнчЗаказ	= ТипЗнч(Заказ);
	Если ТипЗнчЗаказ = Тип("ДокументОбъект.ЗаказПокупателя") 
		или ТипЗнчЗаказ = Тип("ДокументОбъект.ВнутреннийЗаказ")
		или ТипЗнчЗаказ = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор")
		или ТипЗнчЗаказ = Тип("ДокументОбъект.ЗаказПоставщику")//Blik 251016 57270 н
		Тогда
		возврат Заказ;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		возврат Неопределено;
	КонецЕсли;	
	Если ТипЗнчЗаказ = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ИмяДок = "ЗаказПокупателя";
	ИначеЕсли ТипЗнчЗаказ = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда		
		ИмяДок = "ВнутреннийЗаказ";
	Иначе
		ИмяДок = Заказ.Метаданные().Имя;
	КонецЕсли;	
	
	ТекстПолей = "";
	Для каждого ТекЭлем Из СтруктРекв Цикл
		ТекстПолей =ТекстПолей+ ?(ПустаяСтрока(ТекстПолей),"",","+Символы.ПС)
		+" Док."+ТекЭлем.Ключ+" КАК "+ТекЭлем.Ключ; 
	КонецЦикла;	
	
	ТекстЗапроса		 = "ВЫБРАТЬ
	            		   | "+ТекстПолей+"
	            		   |ИЗ
	            		   |	Документ."+ИмяДок+" КАК Док
	            		   |ГДЕ
	            		   |	Док.Ссылка = &Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);					   
	Запрос.УстановитьПараметр("Ссылка",Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Для каждого ТекЭлем Из СтруктРекв Цикл
			Результат.Вставить(ТекЭлем.Ключ,Выборка[ТекЭлем.Ключ]);
		КонецЦикла;	
		возврат Результат;
	Иначе
		возврат Неопределено;
	КонецЕслИ;	
КонецФункции	

//Возвращает значение или структуру с именами и значениями реквизитов произвольного объекта ссылочного типа
// прочитанные из информационной базы
//
// Параметры:
//  Ссылка - произвольный объект ссылочного типа (справочник, документ, план обмена, ПВХ, задача)
//  СтруктураРеквизитов - Необязательно. Может содержать значения:
//                      строка - имя реквизита объекта.
//                      строка - имена реквизитов, перечисленные через запятую, в формате требований к свойствам структуры.
//                      структура - структура с именами реквизитов.
//
//
// Возвращаемое значение:
//  Структура - если СтруктураРеквизитов имеет тип Структура и заполнен - структура с именами и значениями указанных реквизитов
//  Структура - если СтруктураРеквизитов не указан или не заполнен - структура с именами и значениями всех реквизитов объекта
//  Произвольный - если СтруктураРеквизитов строкового типа - значение данного реквизита
//
Функция ПолучитьРеквизитыОбъекта(Знач Ссылка, Знач СтруктураРеквизитов = Неопределено) Экспорт

	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
    МетаданныеОбъекта = Ссылка.Метаданные();
    ИмяТаблицы = МетаданныеОбъекта.ПолноеИмя();

    ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
    ЭтоПланОбмена = ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
    ЭтоПВХ = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
    ЭтоПланВидовРасчета = ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
    ЭтоДокумент = (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)));
    ЭтоЗадача = Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));

    ТекстЗапроса = "ВЫБРАТЬ ";

    //Формируем список реквизитов объекта для запроса
    Если ТипЗнч(СтруктураРеквизитов) = Тип("Строка") И ЗначениеЗаполнено(СтруктураРеквизитов) Тогда

        ТекстЗапроса = ТекстЗапроса + СокрЛП(СтруктураРеквизитов);
        //Если передали список реквизитов, инициализируем структуру
        Если Найти(СтруктураРеквизитов, ",") <> 0 Тогда
            СтруктураРеквизитов = Новый Структура(СтруктураРеквизитов);
        КонецЕсли;

    ИначеЕсли ТипЗнч(СтруктураРеквизитов) = Тип("Структура") И СтруктураРеквизитов.Количество() > 0 Тогда

        Для каждого Реквизит Из СтруктураРеквизитов Цикл ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(Реквизит.Значение),Реквизит.Значение,Реквизит.Ключ) + " КАК " + Реквизит.Ключ + ","; КонецЦикла;

        //Отрезаем последнюю запятую
        ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);

    Иначе

        //Определяем список реквизитов объектов для подстановки в текст запроса
        СписокРеквизитов = "";
        Если ЭтоСправочник ИЛИ ЭтоПланОбмена ИЛИ ЭтоПВХ ИЛИ ЭтоПланВидовРасчета Тогда
            Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
                СписокРеквизитов = "Код,";
            КонецЕсли;
            Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
                СписокРеквизитов = СписокРеквизитов + "Наименование,";
            КонецЕсли;
            Если ЭтоСправочник ИЛИ ЭтоПВХ Тогда
                Если МетаданныеОбъекта.Иерархический Тогда
                    СписокРеквизитов = СписокРеквизитов + "Родитель,";
                КонецЕсли;
                Если ЭтоСправочник И (МетаданныеОбъекта.Владельцы.Количество() <> 0) Тогда
                    СписокРеквизитов = СписокРеквизитов + "Владелец,";
                КонецЕсли;
            КонецЕсли;
        ИначеЕсли ЭтоДокумент Тогда
            Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
                СписокРеквизитов = "Номер,";
            КонецЕсли;
            СписокРеквизитов =  СписокРеквизитов + "Дата,";
        ИначеЕсли ЭтоЗадача Тогда
            Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
                СписокРеквизитов = "Номер,";
            КонецЕсли;
            СписокРеквизитов =  СписокРеквизитов + "Дата,";
            Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
                СписокРеквизитов = СписокРеквизитов + "Наименование,";
            КонецЕсли;
        КонецЕсли;

        СписокРеквизитов = СписокРеквизитов + "ПометкаУдаления,";

        Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл СписокРеквизитов = СписокРеквизитов + Реквизит.Имя + ","; КонецЦикла;

        //Отрезаем последнюю запятую
        СписокРеквизитов = Лев(СписокРеквизитов, СтрДлина(СписокРеквизитов) - 1);
        СтруктураРеквизитов = Новый Структура(СписокРеквизитов);

        ТекстЗапроса = ТекстЗапроса + СписокРеквизитов;

    КонецЕсли;

    ТекстЗапроса = ТекстЗапроса + "
        |ИЗ " + ИмяТаблицы + "
        |ГДЕ Ссылка = &Ссылка";

    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("Ссылка", Ссылка);

    РезультатЗапроса = Запрос.Выполнить();
    Если НЕ РезультатЗапроса.Пустой() Тогда
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            Если ТипЗнч(СтруктураРеквизитов) = Тип("Строка") И ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
                Возврат Выборка[СтрЗаменить(СтруктураРеквизитов,".","")];
            Иначе
                ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
                Возврат СтруктураРеквизитов;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;

    Возврат Неопределено;

КонецФункции //ПолучитьРеквизитыОбъекта()

Функция ПолучитьСтруктРевизитаЗаказаСложНПоля(Заказ,СтруктРекв) Экспорт
	Перем ИмяДок;
	ТипЗнчЗаказ	= ТипЗнч(Заказ);
	Если ТипЗнчЗаказ = Тип("ДокументОбъект.ЗаказПокупателя") 
		или ТипЗнчЗаказ = Тип("ДокументОбъект.ВнутреннийЗаказ")
		или ТипЗнчЗаказ = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор")
		Тогда
		возврат Заказ;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		возврат Неопределено;
	КонецЕсли;	
	Если ТипЗнчЗаказ = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ИмяДок = "ЗаказПокупателя";
	ИначеЕсли ТипЗнчЗаказ = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда		
		ИмяДок = "ВнутреннийЗаказ";
	Иначе
		ИмяДок = Заказ.Метаданные().Имя;
	КонецЕсли;	
	
	ТекстПолей = "";
	Для каждого ТекЭлем Из СтруктРекв Цикл
		Если ТекЭлем.Значение <> Неопределено тогда
			ТекстПолей =ТекстПолей+ ?(ПустаяСтрока(ТекстПолей),"",","+Символы.ПС)
			+" Док."+ТекЭлем.Значение+" КАК "+ТекЭлем.Ключ;
		Иначе	
			ТекстПолей =ТекстПолей+ ?(ПустаяСтрока(ТекстПолей),"",","+Символы.ПС)
			+" Док."+ТекЭлем.Ключ+" КАК "+ТекЭлем.Ключ;
		КонецЕсли;	
	КонецЦикла;	
	
	ТекстЗапроса		 = "ВЫБРАТЬ
	            		   | "+ТекстПолей+"
	            		   |ИЗ
	            		   |	Документ."+ИмяДок+" КАК Док
	            		   |ГДЕ
	            		   |	Док.Ссылка = &Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);					   
	Запрос.УстановитьПараметр("Ссылка",Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Для каждого ТекЭлем Из СтруктРекв Цикл
			Результат.Вставить(ТекЭлем.Ключ,Выборка[ТекЭлем.Ключ]);
		КонецЦикла;	
		возврат Результат;
	Иначе
		возврат Неопределено;
	КонецЕслИ;	
КонецФункции	

Функция ПолучитьСтруктРевизитаСпрСложНПоля(Справоч,СтруктРекв) Экспорт
	Перем ИмяДок;
	ТипЗнчСправ	= ТипЗнч(Справоч);
	Если ТипЗнчСправ = Тип("СправочникОбъект.АдресаПоставки") 
		или ТипЗнчСправ = Тип("СправочникОбъект.Контрагенты")
		или ТипЗнчСправ = Тип("СправочникОбъект.Склады")
		Тогда
		возврат Справоч;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Справоч) Тогда
		возврат Неопределено;
	КонецЕсли;	
	Если ТипЗнчСправ = Тип("СправочникСсылка.АдресаПоставки") Тогда
		ИмяДок = "АдресаПоставки";
	ИначеЕсли ТипЗнчСправ = Тип("СправочникСсылка.Контрагенты") Тогда		
		ИмяДок = "Контрагенты";
	Иначе
		ИмяДок = Справоч.Метаданные().Имя;
	КонецЕсли;	
	
	ТекстПолей = "";
	Для каждого ТекЭлем Из СтруктРекв Цикл
		Если ТекЭлем.Значение <> Неопределено тогда
			ТекстПолей =ТекстПолей+ ?(ПустаяСтрока(ТекстПолей),"",","+Символы.ПС)
			+" Справ."+ТекЭлем.Значение+" КАК "+ТекЭлем.Ключ;
		Иначе	
			ТекстПолей =ТекстПолей+ ?(ПустаяСтрока(ТекстПолей),"",","+Символы.ПС)
			+" Справ."+ТекЭлем.Ключ+" КАК "+ТекЭлем.Ключ;
		КонецЕсли;	
	КонецЦикла;	
	
	ТекстЗапроса		 = "ВЫБРАТЬ
	            		   | "+ТекстПолей+"
	            		   |ИЗ
	            		   |	Справочник."+ИмяДок+" КАК Справ
	            		   |ГДЕ
	            		   |	Справ.Ссылка = &Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);					   
	Запрос.УстановитьПараметр("Ссылка",Справоч);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Для каждого ТекЭлем Из СтруктРекв Цикл
			Результат.Вставить(ТекЭлем.Ключ,Выборка[ТекЭлем.Ключ]);
		КонецЦикла;	
		возврат Результат;
	Иначе
		возврат Неопределено;
	КонецЕслИ;	
КонецФункции	

Функция ЕстьПравоУдалятьЗаказы() Экспорт 
	возврат ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьУдалениеЗаказов", Истина); // если нет значений в доправах даем право на редактирование	
КонецФункции
//конецФункции

//начало изменений Ожиганов 09.06.2015 

/// Кунов О.В., 05.07.2015 - 41421
Функция ПолучитьТаблицуКомпенсацииОграниченияСкидки(ДокументЗакрытиеЗаказов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПродажиОбороты.КоличествоОборот КАК КоличествоСкидки,
	|	ПродажиОбороты.СтоимостьБезСкидокОборот - ПродажиОбороты.СтоимостьОборот КАК СуммаСкидки,
	|	ПродажиОбороты.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВТ_ИспользованныеСкидки
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.ЗаказПокупателя В(&ЗаказыПокупателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//>>29.09.2016 Степанов
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ПолучательСкидки,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Дивизион,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.АдресПоставки,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ОбъектСкидки,
	//<<29.09.2016
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Контрагент,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ДоговорКонтрагента,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Номенклатура,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ХарактеристикаНоменклатуры,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ТоварнаяКатегория,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Брендообъем,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.УстановкаСкидокНоменклатуры,
	//>>170516 Степанов б/н
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор КАК ЗаказПокупателя,
	|	(ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоОборот - ЕСТЬNULL(ВТ_ИспользованныеСкидки.КоличествоСкидки, 0)) КАК Количество,
	|	(ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.СуммаСкидкиОборот - ЕСТЬNULL(ВТ_ИспользованныеСкидки.СуммаСкидки, 0)) КАК СуммаСкидки
	//|	- (ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоОборот - ЕСТЬNULL(ВТ_ИспользованныеСкидки.КоличествоСкидки, 0)) КАК Количество,
	//|	- (ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.СуммаСкидкиОборот - ЕСТЬNULL(ВТ_ИспользованныеСкидки.СуммаСкидки, 0)) КАК СуммаСкидки
	//<<170516
	|ИЗ
	|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Обороты(, , Регистратор, ) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИспользованныеСкидки КАК ВТ_ИспользованныеСкидки
	|		ПО ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор = ВТ_ИспользованныеСкидки.ЗаказПокупателя
	|ГДЕ
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор В(&ЗаказыПокупателя)");
	
	ЗаказыПокупателя = ДокументЗакрытиеЗаказов.Заказы.ВыгрузитьКолонку("ЗаказПокупателя");
	
	Запрос.УстановитьПараметр("ЗаказыПокупателя", ЗаказыПокупателя);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

//>> Степанов 170815; №42883
Функция ПолучитьТаблицуКомпенсацииОграниченияОбъемаПоставки(ДокументЗакрытиеЗаказов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.Регистратор КАК ЗаказПокупателя,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.ДоговорКонтрагента,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.Номенклатура,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.ХарактеристикаНоменклатуры,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.Брендообъем,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.УсловиеПоставкиПоДоговоруСКонтрагентом,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.КоличествоОборот КАК Количество
	|ИЗ
	|	РегистрНакопления.ПЦ_ОграничениеОбъемаПоставки.Обороты(, , Регистратор, ) КАК ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты
	|ГДЕ
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.Регистратор В(&ЗаказыПокупателя)";
	
	
	ЗапросПродажи = Новый Запрос;
	ЗапросПродажи.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоПродаж,
	|	ПродажиОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
	|	ПродажиОбороты.Номенклатура.НСИ_Брендообъем КАК Брендообъем,
	|	ПродажиОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.ЗаказПокупателя В(&ЗаказыПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.ЗаказПокупателя,
	|	ПродажиОбороты.Номенклатура.НСИ_Брендообъем,
	|	ПродажиОбороты.ДоговорКонтрагента,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры";
	
	ЗаказыПокупателя = ДокументЗакрытиеЗаказов.Заказы.ВыгрузитьКолонку("ЗаказПокупателя");
	Запрос.УстановитьПараметр("ЗаказыПокупателя", ЗаказыПокупателя);
	ЗапросПродажи.УстановитьПараметр("ЗаказыПокупателя", ЗаказыПокупателя);
    РезПродажи = ЗапросПродажи.Выполнить().Выгрузить();
	
	Рез = Запрос.Выполнить().Выгрузить();
	РезСвернутаяБезДоков = Рез.Скопировать();
	РезСвернутаяБезДоков.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,Брендообъем","Количество");
    РезСвернутаяБезДоков.ЗаполнитьЗначения(0,"Количество");	
	
	Если РезПродажи.Количество()>0 тогда
		Для Каждого РезСтрока из РезСвернутаяБезДоков цикл
			//в этой таблице суммируем продажи
			СтрокаСворачивания = "Номенклатура,ХарактеристикаНоменклатуры,Брендообъем";
			Если РезСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() тогда
				СтрокаСворачивания = СтрЗаменить(СтрокаСворачивания,"Номенклатура,","");
			КонецЕсли;	
			Если РезСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() тогда
				СтрокаСворачивания = СтрЗаменить(СтрокаСворачивания,"ХарактеристикаНоменклатуры,","");
			КонецЕсли;
			СвернутаяТЗпродаж = РезПродажи.Скопировать();
			СвернутаяТЗпродаж.Свернуть(СтрокаСворачивания,"КоличествоПродаж");
			
			СтруктураПоиска = Новый Структура(СтрокаСворачивания);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,РезСтрока);
			НайденныеСтроки = СвернутаяТЗпродаж.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					//РезСтрока.Количество = ?((-РезСтрока.Количество)>ТекСтрока.КоличествоПродаж,-РезСтрока.Количество-ТекСтрока.КоличествоПродаж,-РезСтрока.Количество);
					РезСтрока.Количество = РезСтрока.Количество + ТекСтрока.КоличествоПродаж;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		//очистка строк, достигших 0
		всего=РезСвернутаяБезДоков.Количество()-1;        
		сч=0;        
		пока сч<=всего цикл        
			Тек = РезСвернутаяБезДоков[сч];
			Если Тек.Количество = 0 тогда
				РезСвернутаяБезДоков.Удалить(сч);
				всего = всего -1;
			Иначе
				сч=сч+1;
			КонецЕсли;    
		Конеццикла;
	КонецЕсли;
	
	Если РезСвернутаяБезДоков.Количество()>0 тогда
		Для Каждого СтрокаРезСвернутаяБезДоков из РезСвернутаяБезДоков цикл
			СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Брендообъем");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаРезСвернутаяБезДоков);
			НайденныеСтроки = Рез.НайтиСтроки(СтруктураПоиска);
			ОстатокСуммыПродаж = СтрокаРезСвернутаяБезДоков.Количество;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ((-ТекСтрока.Количество)>=ОстатокСуммыПродаж) и (ОстатокСуммыПродаж>0) тогда
					ТекСтрока.Количество=ТекСтрока.Количество+ОстатокСуммыПродаж;
					ОстатокСуммыПродаж=0;
				ИначеЕсли ((-ТекСтрока.Количество)<ОстатокСуммыПродаж) и (ОстатокСуммыПродаж>0) тогда
					ТекСтрока.Количество = 0;
					ОстатокСуммыПродаж=ОстатокСуммыПродаж+ТекСтрока.Количество;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
	всего=Рез.Количество()-1;        
	сч=0;        
	пока сч<=всего цикл        
		Тек = Рез[сч];
		Если Тек.Количество = 0 тогда
			Рез.Удалить(сч);
			всего = всего -1;
		Иначе
			сч=сч+1;
		КонецЕсли;    
	Конеццикла;
	
	Возврат Рез;
	
КонецФункции
//<<

//начало изменений Ожиганов 08.07.2015 создание базы МСФО 
Процедура ПроверкаЗаписиДокументаМСФОПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	// Вставить содержимое обработчика.
	Если Источник.ОбменДанными.Загрузка Тогда
		 возврат;
	КонецЕсли;	
	
	Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ПланОбменаИспользуется Тогда
		ВидОбъекта = "док."+Нрег(Источник.Метаданные().Имя);
		ДокМСФО = ЭтоДокМСФО(Источник);
		Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО и Не ДокМСФО Тогда
			Сообщить("Документ редактируется в главной базе, не в базе МСФО !!!");
			Отказ = Истина;
			возврат;
		ИначеЕсли НЕ ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО и  ДокМСФО Тогда
				Сообщить("Документ редактируется в базе МСФО !!!");
				Отказ = Истина;
				возврат;
		КонецЕсли;	
		Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО и Не Отказ Тогда
			//убираем регистрацию изменений
			Источник.ОбменДанными.Получатели.Очистить();
		КонецЕсли;	
	КонецЕсли;		
	 
КонецПроцедуры

Процедура ПроверкаЗаписиРегистровМСФОПередЗаписью(Источник, Отказ, Замещение) Экспорт
	// Вставить содержимое обработчика.
	Если Источник.ОбменДанными.Загрузка Тогда
		 возврат;
	КонецЕсли;	
	 
	Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ПланОбменаИспользуется Тогда
		//начало изменений Ожиганов 03.08.2015 обмен с МСФО
		ЭтоМСФО = Ложь;
		ЭтоРегистрПоСпецДокументу = Ложь;
		Если Источник.Отбор.Найти("Регистратор") <> Неопределено Тогда
			Если ЗначениеЗаполнено(Источник.Отбор.Регистратор.Значение)
			 //начало изменений Ожиганов 04.08.2015 обмен МСФО
			 //и 	
			 //(ТипЗнч(Источник.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.РасчетСебестоимостиВыпуска")
			 //или ТипЗнч(Источник.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров"))
			 //конец изменений 
			 Тогда
				 ЭтоМСФО = ЭтоДокМСФО(Источник.Отбор.Регистратор.Значение);
				 ЭтоРегистрПоСпецДокументу = Истина;
		 	КонецЕсли; 
		КонецЕсли;	
		
		Если ЭтоРегистрПоСпецДокументу Тогда
			ОбъектМСФО = ЭтоМСФО;
		Иначе
			ВидОбъекта = "рег."+Нрег(Источник.Метаданные().Имя);
			ОбъектМСФО = ПараметрыСеанса.ПРГ_ИмяОбъектовМСФО.Найти(ВидОбъекта) <> Неопределено;
		КонецЕслИ;	
		
		//конец изменений 
		//>>200116 Степанов; исключения для объектов, не включенных в планы обмена, которые редактируюутся в обеих базах
		Если Нрег(Источник.Метаданные().Имя) = "пргстатистикавыгрузкивкубыolap" тогда
			//
		Иначе	
			Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО и Не ОбъектМСФО Тогда
				Сообщить("регистр редактируется в главной базе, не в базе МСФО !!!");
				Отказ = Истина;
				возврат;
			ИначеЕсли НЕ ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО и  ОбъектМСФО Тогда
				Сообщить("регистр редактируется в базе МСФО !!!");
				Отказ = Истина;
				возврат;
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО и Не Отказ Тогда
			//убираем регистрацию изменений
			Источник.ОбменДанными.Получатели.Очистить();
		КонецЕсли;	
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПроверкаЗаписиРегистровРасчетаМСФОПередЗаписью(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	// Вставить содержимое обработчика.
	Если Источник.ОбменДанными.Загрузка Тогда
		 возврат;
	КонецЕсли;	
	 
	Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ПланОбменаИспользуется Тогда
		Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО Тогда
				Сообщить("объект редактируется в главной базе !!!");
				Отказ = Истина;
				возврат;
		КонецЕсли;	
		Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО и Не Отказ Тогда
			//убираем регистрацию изменений
			Источник.ОбменДанными.Получатели.Очистить();
		КонецЕсли;				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаЗаписиПланыСчетовХарактВидовРасчетМСФОПередЗаписью(Источник, Отказ) Экспорт
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	Если Источник.ОбменДанными.Загрузка Тогда
		 возврат;
	КонецЕсли;
	 
	Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ПланОбменаИспользуется Тогда
		Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО Тогда
				Сообщить("объект редактируется в главной базе !!!");
				Отказ = Истина;
				возврат;
		КонецЕсли;	
		Если ПараметрыСеанса.ПРГ_ПараметрыОбменМСФО.ЭтоБазаМСФО и Не Отказ Тогда
			//убираем регистрацию изменений
			Источник.ОбменДанными.Получатели.Очистить();
		КонецЕсли;				
	КонецЕсли;
КонецПроцедуры
///
//конец изменений 
//начало изменений Ожиганов 03.08.2015 б/н процедура вывода тз в табдок
Процедура ПРГВывестиТаблЗнчВТабДок(ТаблЗнч,Заголовок = "",ВыделятьСтрокуЕслиЗнчНеНоль="") Экспорт
	#Если Клиент Тогда
	Если ТипЗнч(ТаблЗнч) <> Тип("ТаблицаЗначений") Тогда
		 возврат;
	 КонецЕсли;	
	 
	 ТабДок = Новый ТабличныйДокумент;
	 
	 //выводим колокни
	 Колонки = ТаблЗнч.Колонки;
	 н = 1;
	 к = 1;
	 Для каждого ТекКолонка Из Колонки Цикл
		 ТабДок.Область(н,к,н,к).Текст = ТекКолонка.Имя;
		 к = к+1;
	 КонецЦикла; 
	 
	 н = 2;
	 к = 1;
	 ЦветВыделения = Новый Цвет(255, 160, 122) ;
	 Для Каждого ТекСтрока Из ТаблЗнч Цикл
		 к = 1;
		 Для каждого ТекКолонка Из Колонки Цикл
			 ТабДок.Область(н,к,н,к).Текст = ТекСтрока[ТекКолонка.Имя];
			 к = к+1;
		 КонецЦикла; 
		 Если ВыделятьСтрокуЕслиЗнчНеНоль <> "" Тогда
			 Если ТекСтрока[ВыделятьСтрокуЕслиЗнчНеНоль] <> 0 Тогда
				Область = ТабДок.Область(н,1,н,ТабДок.ШиринаТаблицы); 
				Область.ЦветФона = ЦветВыделения;
			 КонецЕсли; 
		 КонецЕсли; 
		 н = н +  1;
	 КонецЦикла; 
	 
	  Область = ТабДок.Область(1,1,ТабДок.ВысотаТаблицы,ТабДок.ШиринаТаблицы);
	  Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента .Сплошная,1,Ложь);
	  Область.ГраницаСверху = Линия ;
	  Область.ГраницаСнизу  = Линия ;
	  Область.ГраницаСлева  = Линия ;
	  Область.ГраницаСправа = Линия ;
	  
	 ТабДок.Показать(Заголовок);
	#КонецЕсли
КонецПроцедуры	


/// Кунов О.В., 12.08.2015 - 42548
Процедура ПроверитьНаличиеСторноИлиКорректировки(ДокументРеализации, ДокументИсключение, Отказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ДокументРеализации = &ДокументРеализации
	|	И КорректировкаРеализации.Ссылка <> &ДокументИсключение
	|	И КорректировкаРеализации.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРГ_СторноНакладной.Ссылка
	|ИЗ
	|	Документ.ПРГ_СторноНакладной КАК ПРГ_СторноНакладной
	|ГДЕ
	|	ПРГ_СторноНакладной.ДокументОснование = &ДокументРеализации
	|	И ПРГ_СторноНакладной.Ссылка <> &ДокументИсключение
	|	И ПРГ_СторноНакладной.Проведен
	|");
	
	Запрос.УстановитьПараметр("ДокументИсключение", ДокументИсключение);
	Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Отказ = Истина;
		#Если Клиент Тогда
		Сообщить("По реализации " + ДокументРеализации.Номер + " уже введены корректирующие или отменяющие документы:");
		Пока Выборка.Следующий() Цикл
			Сообщить(Выборка.Ссылка);
		КонецЦикла;
		#КонецЕсли
	КонецЕсли;
	
	
КонецПроцедуры
///

/// Кунов О.В., 24.08.2015
Процедура ПроверитьВладельцаАдресаДоставки(Документ, Отказ) Экспорт 
	
	Грузополучатель = Документ.Грузополучатель;
	
	Если ЗначениеЗаполнено(Грузополучатель) И ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") И Грузополучатель.Владелец <> Документ.Контрагент Тогда
		Отказ = Истина;
		#Если Клиент Тогда
			Сообщить("Указан адрес доставки другого контрагента!");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры
///

/// Кунов О.В., 21.10.2015
Процедура НапечататьДокументыПакетноИзФормыСписка(ЭтаФорма, ВыделенныеСтроки) Экспорт
	
#Если Клиент Тогда
	СразуНаПринтер = Вопрос("Печатать сразу на принтер?", РежимДиалогаВопрос.ДаНетОтмена);
	Если СразуНаПринтер = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		СразуНаПринтер = (СразуНаПринтер = КодВозвратаДиалога.Да);
	КонецЕсли;
	
	ФормаВыбораПечатныхФорм = ПолучитьОбщуюФорму("ФормаВыбораПечатныхФорм", ЭтаФорма, ВыделенныеСтроки[0].Ссылка.ПолучитьОбъект());
	
	Если ФормаВыбораПечатныхФорм.ОткрытьМодально() <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДокументСсылка = ВыделеннаяСтрока.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Для каждого СтрокаКнопки Из ФормаВыбораПечатныхФорм.ЭлементыФормы.ДеревоМакетовПечати.ВыделенныеСтроки Цикл
			Расшифровка = СтрокаКнопки.Расшифровка;
			Если ТипЗнч(Расшифровка) = Тип("Структура") и Расшифровка.ВидПечатнойФормы = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
				ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(ДокументСсылка, Расшифровка);
				ЭтоДокумент = Метаданные.Документы.Содержит(ДокументОбъект.Метаданные());
				УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 0, СразуНаПринтер, ?(ЭтоДокумент, ОбщегоНазначения.СформироватьЗаголовокДокумента(ДокументОбъект), Строка(ДокументОбъект)), ДокументСсылка);
			Иначе
				ДокументОбъект.Печать(Расшифровка, 0, СразуНаПринтер);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
#КонецЕсли
	
КонецПроцедуры
///

/// Кунов О.В., 22.10.2015 - 43165
Процедура ПРГПриЗаписиСообщенияКонтурПриЗаписи(Источник, Отказ) Экспорт
	
	//начало изменений Ожиганов 23.10.2015 ошибка при обмене с МСФО
	Если Источник.ОбменДанными.Загрузка Тогда
		возврат;
	КонецЕсли;	
	//конец изменений 
	
	Запись = РегистрыСведений.ПРГ_ЖурналКонтура.СоздатьМенеджерЗаписи();
	
	Запись.Период 			= ТекущаяУниверсальнаяДата();
	Запись.Пользователь 	= ПараметрыСеанса.ТекущийПользователь;
	Запись.Сообщение		= Источник.Ссылка;
	Запись.Статус			= Источник.Статус;
	Запись.ЛокальноеВремя	= ТекущаяДата();
	
	Запись.Записать();
	
КонецПроцедуры
///


// <- Шевченков 47433 
//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
Функция ПолучитьТекстЗапросаДляРасчетаПКЗ(ВВалютеВзаиморасчетов=Истина) Экспорт 
	//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет)*1
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК ПриходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК РасходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  			
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% -ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% -ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет ) * 1
			//конец изменений 
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  		
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход
	        |ПОМЕСТИТЬ ТаблКонтр
	        |{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
			// <- Шевченков 47433
			|	И НЕ ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом 
			// ->
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
			//|	И Не ВзаиморасчетыСКонтрагентами.НеУчитВДебиторке
			//конец изменений 
	        |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	        |{ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	        |	ВзаиморасчетыСКонтрагентами.Организация.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.ЦеноваяГруппаКонтрагента.* КАК ЦеноваяГруппаКонтрагента,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.КаналТовародвижения.* КАК КаналТовародвижения,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	        //|	ВзаиморасчетыСКонтрагентами.Контрагент.Проект.* КАК Проект
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	(СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ИНАЧЕ (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет)
			//конец изменений 
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |								ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ИНАЧЕ (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет)
			//конец изменений 
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |								ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%-ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |											ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |											ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ИНАЧЕ (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет)
			//конец изменений 
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |											ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |											ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Организация,
	        |	ДоговорКонтрагента,
	        |	Контрагент
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ КАК Дата,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
	        |НачалоПериода(ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,Месяц) КАК ДатаПериода,			
			//конец изменений 
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ КАК Регистратор, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК Отсрочка,
			|ВЫБОР
			// <- Шевченков 47433
			|	Когда ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		Тогда ДобавитьКДате(ВзаиморасчетыСКонтрагентами.Период, День, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
			|       Иначе ВзаиморасчетыСКонтрагентами.Период
			// ->
//			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
////начало изменений Ожиганов 29.12.2015 б/н более корректное левое соединение на SQL
//			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
//			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.РеализацияТоваровУслуг).АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.РеализацияТоваровУслуг).АП_ДатаОплаты
//			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаРеализации).АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаРеализации).АП_ДатаОплаты
//			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаЗаписейРегистров).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаЗаписейРегистров).АП_ДатаОплаты
//			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга и  ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаДолга).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаДолга).АП_ДатаОплаты
//			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной и  ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.ПРГ_СторноНакладной).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.ПРГ_СторноНакладной).АП_ДатаОплаты
////конец изменений 			
//			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			//конец изменений 
			|КОНЕЦ КАК ДатаОплаты,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% - ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
			//конец изменений 
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход,
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	        |							ТОГДА  ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходДельта,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА (ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%Зачет) * 1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходДельта,			
			//конец изменений 
	        |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	        |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	        |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	        |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	        |	ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты КАК ПроцентОтгрузки
			|{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
//начало изменений Ожиганов 29.12.2015 б/н более корректное левое соединение на SQL
			// |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
			//|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
			//|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
			//|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
			//|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПРГ_СторноНакладной КАК ПРГ_СторноНакладной
			//|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = ПРГ_СторноНакладной.Ссылка
//конец изменений 			
			//конец изменений 
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	        |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	        |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	        |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
			// <- Шевченков 47433
			|	И НЕ ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом 
			// ->
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
			//|	И Не ВзаиморасчетыСКонтрагентами.НеУчитВДебиторке
			//конец изменений 
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
	        |НачалоПериода(ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,Месяц),			
			//конец изменений 
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
			|ВЫБОР
			// <- Шевченков 47433
			|	Когда ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		Тогда ДобавитьКДате(ВзаиморасчетыСКонтрагентами.Период, День, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
			|       Иначе ВзаиморасчетыСКонтрагентами.Период
			// ->
			//|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			////начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.РеализацияТоваровУслуг).АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.РеализацияТоваровУслуг).АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаРеализации).АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаРеализации).АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров и ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаЗаписейРегистров).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаЗаписейРегистров).АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга и  ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаДолга).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.КорректировкаДолга).АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной и  ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.ПРГ_СторноНакладной).АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор как Документ.ПРГ_СторноНакладной).АП_ДатаОплаты
			//|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			////конец изменений 
			|КОНЕЦ,
	        | ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Организация,
	        |	Контрагент,
	        |	ДоговорКонтрагента,
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			|	ДатаПериода,
			//конец изменений 
			|	ДатаОплаты,
			|	Дата,
	        |	Регистратор";
			
	Если ВВалютеВзаиморасчетов Тогда
		возврат СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаВзаиморасчетов");		
	Иначе			
		возврат СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаУПР");
	КонецЕсли;
	//конец изменений 
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА 0
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК ПриходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА 0
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК РасходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход
	        |ПОМЕСТИТЬ ТаблКонтр
	        |{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
	        |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	        |{ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	        |	ВзаиморасчетыСКонтрагентами.Организация.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.ЦеноваяГруппаКонтрагента.* КАК ЦеноваяГруппаКонтрагента,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.КаналТовародвижения.* КАК КаналТовародвижения,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	        //|	ВзаиморасчетыСКонтрагентами.Контрагент.Проект.* КАК Проект
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	(СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА 0
	        |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА 0
	        |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Организация,
	        |	ДоговорКонтрагента,
	        |	Контрагент
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ КАК Дата,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
	        |НачалоПериода(ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,Месяц) КАК ДатаПериода,			
			//конец изменений 
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ КАК Регистратор, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности,
			|ВЫБОР
			// <- Шевченков 47433
			|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		Тогда ДобавитьКДате(ВзаиморасчетыСКонтрагентами.Период, День, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
			|       Иначе ВзаиморасчетыСКонтрагентами.Период
			// ->
			//|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			////начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг и РеализацияТоваровУслуг.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации и КорректировкаРеализации.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров и КорректировкаЗаписейРегистров.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга и  КорректировкаДолга.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной и  ПРГ_СторноНакладной.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ПРГ_СторноНакладной.АП_ДатаОплаты
			//|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			////конец изменений 
			|КОНЕЦ КАК ДатаОплаты,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход,
	        |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	        |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	        |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	        |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	        |	ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты КАК ПроцентОтгрузки
			|{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	        |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПРГ_СторноНакладной КАК ПРГ_СторноНакладной
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = ПРГ_СторноНакладной.Ссылка
			//конец изменений 
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	        |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	        |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	        |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
	        |НачалоПериода(ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,Месяц),			
			//конец изменений 
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности,
			//начало изменений Ожиганов 16.04.2015 новый порядок расчет ДЗ 
			|ВЫБОР
			// <- Шевченков 47433
			|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		Тогда ДобавитьКДате(ВзаиморасчетыСКонтрагентами.Период, День, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
			|       Иначе ВзаиморасчетыСКонтрагентами.Период
			// ->
			//|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			////начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг и РеализацияТоваровУслуг.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации и КорректировкаРеализации.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров и КорректировкаЗаписейРегистров.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга и  КорректировкаДолга.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
			//|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной и  ПРГ_СторноНакладной.АП_ДатаОплаты<> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|		ТОГДА ПРГ_СторноНакладной.АП_ДатаОплаты
			//|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			////конец изменений 
			|КОНЕЦ,
	        | ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Организация,
	        |	Контрагент,
	        |	ДоговорКонтрагента,
			//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
			|	ДатаПериода,
			//конец изменений 
			|	ДатаОплаты,
			|	Дата,
	        |	Регистратор";
			
	Если ВВалютеВзаиморасчетов Тогда
		возврат СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаВзаиморасчетов");		
	Иначе			
		возврат СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаУПР");
	КонецЕсли;	
КонецФункции

Функция ПолучитьРассчитаннуюПКЗ(СписокКонтрагентов,Дата1,Дата2,ПоВсеКонтрагетам=Ложь) Экспорт
	
	Врем = ОбсчитатьКредиторку(СписокКонтрагентов,Дата1,Дата2,ПоВсеКонтрагетам=Ложь);
	Возврат Врем;
	
КонецФункции

Функция ПолучитьОбщуюТаблицу(Таблица1, Таблица2, Дата2)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица1.Дата,
	|	Таблица1.ДатаОплаты,
	|	Таблица1.ДнейПросрочено,
	|	Таблица1.Отсрочка,
	|	Таблица1.ПроцентОтгрузки,
	|	Таблица1.Организация,
	|	Таблица1.Контрагент,
	|	Таблица1.ДоговорКонтрагента,
	|	Таблица1.Регистратор,
	|	Таблица1.НачОст,
	|	Таблица1.Приход,
	|	Таблица1.Расход,
	|	Таблица1.КонОст,
	|	Таблица1.Погашено,
	|	Таблица1.Просрочено
	|ПОМЕСТИТЬ вт1
	|ИЗ
	|	&Таблица1 КАК Таблица1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица2.Дата,
	|	Таблица2.ДатаОплаты,
	|	Таблица2.ДнейПросрочено,
	|	Таблица2.Отсрочка,
	|	Таблица2.ПроцентОтгрузки,
	|	Таблица2.Организация,
	|	Таблица2.Контрагент,
	|	Таблица2.ДоговорКонтрагента,
	|	Таблица2.Регистратор,
	|	Таблица2.НачОст,
	|	Таблица2.Приход,
	|	Таблица2.Расход,
	|	Таблица2.КонОст,
	|	Таблица2.Погашено,
	|	Таблица2.Просрочено
	|ПОМЕСТИТЬ вт2
	|ИЗ
	|	&Таблица2 КАК Таблица2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт1.Дата,
	|	вт1.ДатаОплаты,
	|	ВЫБОР
	|		КОГДА вт1.КонОст < 0
	|				И вт1.ДатаОплаты < &Дата2
	|			ТОГДА РАЗНОСТЬДАТ(вт1.ДатаОплаты, &Дата2, ДЕНЬ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейПросрочено, &Дата2,
	|	вт1.Отсрочка,
	|	вт1.ПроцентОтгрузки,
	|	вт1.Организация,
	|	вт1.Контрагент,
	|	вт1.ДоговорКонтрагента,
	|	вт1.Регистратор,
	|	вт1.НачОст,
	|	вт1.Приход КАК Расход,
	|	вт1.Расход КАК Приход,
	|	вт1.КонОст,
	|	вт1.Погашено,
	|	вт1.Просрочено
	|ИЗ
	|	вт1 КАК вт1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт2.Дата,
	|	вт2.ДатаОплаты,
	|	ВЫБОР
	|		КОГДА вт2.КонОст < 0 И вт2.ДатаОплаты < &Дата2
	|			ТОГДА РАЗНОСТЬДАТ(вт2.ДатаОплаты, &Дата2, ДЕНЬ)
	|		ИНАЧЕ 0
	|	КОНЕЦ, &Дата2,
	|	вт2.Отсрочка,
	|	вт2.ПроцентОтгрузки,
	|	вт2.Организация,
	|	вт2.Контрагент,
	|	вт2.ДоговорКонтрагента,
	|	вт2.Регистратор,
	|	вт2.НачОст,
	|	вт2.Приход,
	|	вт2.Расход,
	|	вт2.КонОст,
	|	вт2.Погашено,
	|	вт2.Просрочено
	|ИЗ
	|	вт2 КАК вт2";
	Запрос.УстановитьПараметр("Таблица1", Таблица1);
	Запрос.УстановитьПараметр("Таблица2", Таблица2);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


























Функция ОбсчитатьКредиторку(СписокКонтрагентов,Дата1,Дата2,ПоВсеКонтрагетам=Ложь)

	ВыводитьВремя = Ложь;
	ТекВремя  = ТекущаяДата();	
	
	ТаблВрем				= ПолучитьРасчитаннуюДебиторку(СписокКонтрагентов,Дата1,Дата2);
	ТаблПоДокРасчетов       = ПолучитьТаблицуПоДокРасчетов(СписокКонтрагентов,Дата1,Дата2);
	
	ТаблИтого               = ПолучитьОбщуюТаблицу(ТаблВрем, ТаблПоДокРасчетов, КонецДня(Дата2));
	//
	//ТаблИтого               = ПолучитьОбщуюТаблицу(ТаблВрем, ТаблПоДокРасчетов, Дата2);
	Возврат ТаблИтого;
	
КонецФункции

Функция ПолучитьРасчитаннуюДебиторку(СписокКонтрагентов,Дата1,Дата2,ПоВсеКонтрагетам=Ложь)
	
	ОписЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписДата  = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата",ОписДата);
	ТаблИтого.Колонки.Добавить("ДатаОплаты",ОписДата);
	ТаблИтого.Колонки.Добавить("ДнейПросрочено",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	
	ТаблИтого.Колонки.Добавить("Отсрочка",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблИтого.Колонки.Добавить("ПроцентОтгрузки",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	
	ТаблИтого.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблИтого.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());
	
	
	ТаблИтого.Колонки.Добавить("НачОст",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Приход",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Расход",ОписЧисла);
	ТаблИтого.Колонки.Добавить("КонОст",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Погашено",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Просрочено",ОписЧисла);

	ПостроительЗапроса = Новый ПостроительЗапроса;
	//начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	//ПостроительЗапроса.Текст = ПолучитьТекстЗапроса();
	//ПостроительЗапроса.Текст = ПРГ_ДопФункцииКлиентСервер.ПолучитьТекстЗапросаДляРасчетаПКЗ();
	ПостроительЗапроса.Текст = ПолучитьТекстЗапросаДляРасчетаПКЗ1();
	//
	
	ПостроительЗапроса.Параметры.Вставить("Дата1",Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2",Дата2);
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Неопределено);
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	//МассивДоков .Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	ПостроительЗапроса.Параметры.Вставить("Контрагент", СписокКонтрагентов);
	Если ТипЗнч(СписокКонтрагентов) = Тип("СписокЗначений") или  
		ТипЗнч(СписокКонтрагентов) = Тип("Массив")
		Тогда
		Если ТипЗнч(СписокКонтрагентов) = Тип("Массив")Тогда	
			СписокДляОтбора  = Новый СписокЗначений;
			Для каждого ТекЭлем Из СписокКонтрагентов Цикл
		      СписокДляОтбора .Добавить(ТекЭлем);
		  КонецЦикла; 
	  	Иначе	  
		  СписокДляОтбора  = СписокКонтрагентов;
		КонецЕсли;  
		
		 Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		 Отбор .Использование = Истина;
		 Отбор .ВидСравнения = ВидСравнения.ВСписке;
		 Отбор .Значение 	 = СписокДляОтбора; 
	//{27.04.2015 Островерхий заявка №б/н 
	ИначеЕсли ТипЗнч(СписокКонтрагентов) = Тип("ТаблицаЗначений") Тогда
		
		СписокДляОтбора  = Новый СписокЗначений;
		Для каждого ТекЭлем Из СписокКонтрагентов Цикл
			СписокДляОтбора.Добавить(ТекЭлем.Контрагент);
		КонецЦикла;
		
		Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		Отбор .Использование = Истина;
		Отбор .ВидСравнения = ВидСравнения.ВСписке;
		Отбор .Значение 	 = СписокДляОтбора;
	//27.04.2015 Островерхий} 	 
	ИначеЕсли ТипЗнч(СписокКонтрагентов) = Тип("СправочникСсылка.Контрагенты") Тогда
		 Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		 Отбор .Использование = Истина;
		 Отбор .ВидСравнения = ВидСравнения.Равно;
		 Отбор .Значение 	 = СписокКонтрагентов;  
	 Иначе
		 //начало изменений Ожиганов 20.07.2015 оптимизация выгрузки мобильной торговли 
		 Если Не ПоВсеКонтрагетам Тогда
		 	вызватьисключение "неизвестный тип";
		 КонецЕслИ;	
		 //конец изменений 
	КонецЕсли;
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	ТаблИтоговаяРазвернуто = Истина;
			
	ПостроительЗапроса.Выполнить();	
	РезЗапроса 			   = ПостроительЗапроса.Результат;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	
	ТекСтрока =  Неопределено;
	Пока ВыборкаДетальная.Следующий() Цикл
		//ОбработкаПрерыванияПользователя();
		ИзмГруппировка = Ложь;
		Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			ТекОрганизация  = ВыборкаДетальная.Организация;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			ИзмГруппировка 		 = Истина;
		КонецЕсли;	
		
		//Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		//	ТекВалюта       = ВыборкаДетальная.Валюта;
		//	ИзмГруппировка = Истина;
		//КонецЕсли;	
		
		Если ИзмГруппировка Тогда
			ИтогКонОст 	   	   = ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			
			ИтогоРасход  	   = ВыборкаДетальная.РасходКон;
			ИтогоПриход  	   = ВыборкаДетальная.ПриходКон;
			
			ИтогоРасходНач   = ВыборкаДетальная.РасходНач;
			ИтогоПриходНач   = ВыборкаДетальная.ПриходНач;
			
			ИтогНачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
			
			ЗнакКонОст  	   = ?(ИтогКонОст > 0,1,-1);
			ЗнакНачОст  	   = ?(ИтогНачОст > 0,1,-1);
			ИзмГруппировка 	= Ложь;
			Если Не ТаблИтоговаяРазвернуто Тогда
				ТекСтрока = ТаблИтого.Добавить();
			КонецЕсли;
		КонецЕсли; 
		
		КонОст = 0;
		НачОст = 0;
		Приход = 0;
		Расход = 0;
		
		//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
		//покажем приход и расход по корректировке долга
		ПриходДельта = 0;
		РасходДельта = 0;
		//конец изменений 
		
		Если ЗнакКонОст = 1 Тогда
			КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		Иначе // знак -1
			КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		КонецЕсли;	  
		
		Если ЗнакНачОст = 1 Тогда
			НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
			ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		Иначе	
			НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
			ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		КонецЕсли;
		
		Если ВыборкаДетальная.Дата < Дата1 Тогда
			Приход = 0;
			Расход = 0;
		ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			Приход = ВыборкаДетальная.Приход;
			Расход = ВыборкаДетальная.Расход;
			//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  			   
			ПриходДельта = ВыборкаДетальная.ПриходДельта;
			РасходДельта = ВыборкаДетальная.РасходДельта;
			//конец изменений 
			НачОст = 0;
		КонецЕсли;
		
		//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
		//Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
		Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) и (ПриходДельта=0) и (РасходДельта=0) Тогда
			//конец изменений 
			продолжить;
		КонецЕсли;  
		
		Погашено   = 0;
		ДатаОплаты  = '00010101';
		// <- Шевченков 47433
		ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты; 
		//Если Приход > 0 или НачОст > 0 или КонОст > 0 Тогда
		//	ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
		//	Если ДатаОплаты  = '00010101' Тогда
		//  	  ДатаОплаты = ВыборкаДетальная.Дата;
		//	КонецЕсли;	  
		//	Погашено = НачОст+Приход-КонОст;
		//КонецЕсли; 
		// ->
		
		ДнейПросрочено = 0;
		Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср Тогда // и КонОст >0 Тогда // Шевченков 47433
			ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
		КонецЕсли; 
		
		Отсрочка 		 = 0;
		// <- Шевченков 47433
		Отсрочка 		 = ВыборкаДетальная.Отсрочка;
		//Если  ДатаОплаты <> '00010101' и (НачОст >0 или Приход>0 или КонОст > 0) Тогда
		//	 Отсрочка    = (НачалоДня(ДатаОплаты) - НачалоДня(ВыборкаДетальная.Дата))/(3600*24);
		//КонецЕсли;	  
		// ->
		
		//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
		//остатка по взаимоазачетам нет показываем сам документ с приходом и расходом
		Приход = Приход + ПриходДельта;
		Расход = Расход + РасходДельта;
		//конец изменений 
		
		
		Если ТаблИтоговаяРазвернуто Тогда
			НоваяСтрока 	   				  = ТаблИтого.Добавить();
			НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
			НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
			НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
			НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
			
		Иначе
			НоваяСтрока 					  = ТекСтрока;
		КонецЕсли;
		
		НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
		НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
		НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
		
		Если ДнейПросрочено > 0 Тогда
			НоваяСтрока.Просрочено			  = НоваяСтрока.Просрочено + КонОст;
		КонецЕсли;	  
		
		НоваяСтрока.ПроцентОтгрузки 	  = ВыборкаДетальная.ПроцентОтгрузки;
		Если НоваяСтрока.ПроцентОтгрузки 	<= 0 и (Приход > 0 или НачОст >0) Тогда
			НоваяСтрока.ПроцентОтгрузки   = 100;
		КонецЕсли;	
		НоваяСтрока.Отсрочка			  = Отсрочка;
		
		//НоваяСтрока.НачОст			  = (НоваяСтрока.НачОст + НачОст) * -1;
		НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
		НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
		// <- Шевченков 47433
		НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
		//НоваяСтрока.Расход			  = (НоваяСтрока.Приход + Приход) * -1;
		//НоваяСтрока.Приход			  = (НоваяСтрока.Расход + Расход) * -1;		  
		НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
		// ->
		//НоваяСтрока.КонОст			  = (НоваяСтрока.КонОст + КонОст) * -1;
		НоваяСтрока.Погашено 			  = (НоваяСтрока.Погашено + Погашено) * -1;
		
	КонецЦикла; 
	
	возврат ТаблИтого;
КонецФункции

Функция ПолучитьТекстЗапросаДляРасчетаПКЗ1(ВВалютеВзаиморасчетов=Истина) Экспорт 
	//начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ПоДокументамРасчетов,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВал,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр
	|ПОМЕСТИТЬ втДоговораНеПоДокументамРасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|				И ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
	|{ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.*,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент.*,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Организация.*,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА 0
	|						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|					КОНЕЦ
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|		КОНЕЦ) КАК ПриходКон,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА 0
	|						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|					КОНЕЦ
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|		КОНЕЦ) КАК РасходКон,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|										ТОГДА 0
	|									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|								КОНЕЦ
	|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|										ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПриходНач,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|										ТОГДА 0
	|									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|								КОНЕЦ
	|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|										ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасходНач,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|										ТОГДА 0
	|									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|								КОНЕЦ
	|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|										ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Приход,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|										ТОГДА 0
	|									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|								КОНЕЦ
	|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|										ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Расход
	|ПОМЕСТИТЬ ТаблКонтр
	|{ВЫБРАТЬ
	|	Организация.*,
	|	ДоговорКонтрагента.*,
	|	Контрагент.*}
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	|	И ВзаиморасчетыСКонтрагентами.Активность
	|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента В
	|			(ВЫБРАТЬ
	|				Внутр.ДоговорКонтрагента
	|			ИЗ
	|				втДоговораНеПоДокументамРасчетов КАК Внутр)
	//|	И Не ВзаиморасчетыСКонтрагентами.НеУчитВДебиторке
	|{ГДЕ
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	|	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	|	ВзаиморасчетыСКонтрагентами.Организация.*,
	|	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентами.Организация,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентами.Контрагент
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ВЫБОР
	|							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|								ТОГДА 0
	|							ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|						КОНЕЦ
	|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА ВЫБОР
	|							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|								ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|			КОНЕЦ - ВЫБОР
	|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА ВЫБОР
	|							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|								ТОГДА 0
	|							ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|						КОНЕЦ
	|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ВЫБОР
	|							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|								ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	|					ТОГДА ВЫБОР
	|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|								ТОГДА ВЫБОР
	|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|											ТОГДА 0
	|										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|									КОНЕЦ
	|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|								ТОГДА ВЫБОР
	|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|											ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ - ВЫБОР
	|				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	|					ТОГДА ВЫБОР
	|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|								ТОГДА ВЫБОР
	|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|											ТОГДА 0
	|										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|									КОНЕЦ
	|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|								ТОГДА ВЫБОР
	|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|											ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	|					ТОГДА ВЫБОР
	|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|								ТОГДА ВЫБОР
	|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|											ТОГДА 0
	|										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|									КОНЕЦ
	|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|								ТОГДА ВЫБОР
	|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|											ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	|					ТОГДА ВЫБОР
	|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|								ТОГДА ВЫБОР
	|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|											ТОГДА 0
	|										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|									КОНЕЦ
	|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|								ТОГДА ВЫБОР
	|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|											ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДоговорКонтрагента,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	|	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|	КОНЕЦ КАК Дата,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	|			ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|		КОНЕЦ, МЕСЯЦ) КАК ДатаПериода,
	|	ВЫБОР
	|		КОГДА НЕ ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения В (&ПустойДокумент)
	|			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	|	КОНЕЦ КАК Регистратор,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК Отсрочка,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВзаиморасчетыСКонтрагентами.Период, ДЕНЬ, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|	КОНЕЦ КАК ДатаОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
	|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Приход,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
	|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА (ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов - ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет) * -1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Расход,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
	|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет * -1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПриходДельта,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
	|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет * -1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасходДельта,
	|	МИНИМУМ(ТаблКонтр.ПриходНач) КАК ПриходНач,
	|	МИНИМУМ(ТаблКонтр.РасходНач) КАК РасходНач,
	|	МИНИМУМ(ТаблКонтр.ПриходКон) КАК ПриходКон,
	|	МИНИМУМ(ТаблКонтр.РасходКон) КАК РасходКон,
	|	ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты КАК ПроцентОтгрузки
	|{ВЫБРАТЬ
	|	Организация.*,
	|	ДоговорКонтрагента.*,
	|	Контрагент.*}
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	|		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	|			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	|			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	|	И ВзаиморасчетыСКонтрагентами.Активность
	|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента В
	|			(ВЫБРАТЬ
	|				Внутр.ДоговорКонтрагента
	|			ИЗ
	|				втДоговораНеПоДокументамРасчетов КАК Внутр)
	//|	И Не ВзаиморасчетыСКонтрагентами.НеУчитВДебиторке
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентами.Организация,
	|	ВзаиморасчетыСКонтрагентами.Контрагент,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	|			ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|		КОНЕЦ, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА НЕ ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения В (&ПустойДокумент)
	|			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	|	КОНЕЦ,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВзаиморасчетыСКонтрагентами.Период, ДЕНЬ, ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|	КОНЕЦ,
	|	ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ДатаПериода,
	|	ДатаОплаты,
	|	Дата,
	|	Регистратор";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуПоДокРасчетов(СписокКонтрагентов, Дата1, Дата2)
	
	Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ПоДокументамРасчетов,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ДОБАВИТЬКДАТЕ(ВзаиморасчетыСКонтрагентамиОстатки.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности) КАК ДатаОплаты,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВал,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаРеглОстаток КАК СуммаУпр
	|ПОМЕСТИТЬ втДоговораПоДокументамРасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	|			,
	|			ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|				И ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
	|{ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.*,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент.*,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Организация.*,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата КАК Дата,
	|	ДОБАВИТЬКДАТЕ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности) КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА &Дата2 > ДОБАВИТЬКДАТЕ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
	|				И ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток < 0
	|			ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности), &Дата2, ДЕНЬ)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДнейПросрочено,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК Отсрочка,
	|	0 КАК ПроцентОтгрузки,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.Организация КАК Организация,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.Контрагент,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДоговорКонтрагента,
	|	NULL КАК Валюта,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДокументРасчетовСКонтрагентом КАК Регистратор,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК НачОст,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.СуммаВзаиморасчетовПриход КАК Приход,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.СуммаВзаиморасчетовРасход КАК Расход,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК КонОст,
	|	0 КАК Погашено,
	|	0 КАК Просрочено
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(
	|			&Дата1,
	|			&Дата2,
	|			Период,
	|			,
	|			ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					Внутр.ДоговорКонтрагента
	|				ИЗ
	|					втДоговораПоДокументамРасчетов КАК Внутр)) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоговораПоДокументамРасчетов КАК втОстаткиПоДокументам
	|		ПО ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстаткиИОбороты.ДокументРасчетовСКонтрагентом = втОстаткиПоДокументам.ДокументРасчетовСКонтрагентом";
	
	ОписЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписДата  = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата",ОписДата);
	ТаблИтого.Колонки.Добавить("ДатаОплаты",ОписДата);
	ТаблИтого.Колонки.Добавить("ДнейПросрочено",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	
	ТаблИтого.Колонки.Добавить("Отсрочка",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблИтого.Колонки.Добавить("ПроцентОтгрузки",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	
	ТаблИтого.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблИтого.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());

	
	ТаблИтого.Колонки.Добавить("НачОст",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Приход",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Расход",ОписЧисла);
	ТаблИтого.Колонки.Добавить("КонОст",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Погашено",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Просрочено",ОписЧисла);
	
	//Дата1 = НачалоДня(УниверсальныйОтчет.ДатаНач);
	//Дата2 = КонецДня(УниверсальныйОтчет.ДатаКон);
	
	ТекВремя = ТекущаяДата();
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	//начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	//ПостроительЗапроса.Текст = ПолучитьТекстЗапроса();
	//ПостроительЗапроса.Текст = ПРГ_ДопФункцииКлиентСервер.ПолучитьТекстЗапросаДляРасчетаПКЗ();
	ПостроительЗапроса.Текст = Текст;
	//
	
	ПостроительЗапроса.Параметры.Вставить("Дата1",Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2",Дата2);
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Неопределено);
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	ДопустимыеОтборы 	=  Новый Массив;
	ДопустимыеОтборы.Добавить("договорконтрагента");
	ДопустимыеОтборы.Добавить("контрагент");
	ДопустимыеОтборы.Добавить("организация");
	ДопустимыеОтборы.Добавить("менеджерпокупателя");
	ДопустимыеОтборы.Добавить("валютавзаиморасчетов");

	ПостроительЗапроса.Параметры.Вставить("Контрагент", СписокКонтрагентов);
	Если ТипЗнч(СписокКонтрагентов) = Тип("СписокЗначений") или  
		ТипЗнч(СписокКонтрагентов) = Тип("Массив")
		Тогда
		Если ТипЗнч(СписокКонтрагентов) = Тип("Массив")Тогда	
			СписокДляОтбора  = Новый СписокЗначений;
			Для каждого ТекЭлем Из СписокКонтрагентов Цикл
			  СписокДляОтбора .Добавить(ТекЭлем);
		  КонецЦикла; 
	  	Иначе	  
		  СписокДляОтбора  = СписокКонтрагентов;
		КонецЕсли;  
		
		 Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		 Отбор .Использование = Истина;
		 Отбор .ВидСравнения = ВидСравнения.ВСписке;
		 Отбор .Значение 	 = СписокДляОтбора; 
	//{27.04.2015 Островерхий заявка №б/н 
	ИначеЕсли ТипЗнч(СписокКонтрагентов) = Тип("ТаблицаЗначений") Тогда
		
		СписокДляОтбора  = Новый СписокЗначений;
		Для каждого ТекЭлем Из СписокКонтрагентов Цикл
			СписокДляОтбора.Добавить(ТекЭлем.Контрагент);
		КонецЦикла;
		
		Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		Отбор .Использование = Истина;
		Отбор .ВидСравнения = ВидСравнения.ВСписке;
		Отбор .Значение 	 = СписокДляОтбора;
	//27.04.2015 Островерхий} 	 
	ИначеЕсли ТипЗнч(СписокКонтрагентов) = Тип("СправочникСсылка.Контрагенты") Тогда
		 Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		 Отбор .Использование = Истина;
		 Отбор .ВидСравнения = ВидСравнения.Равно;
		 Отбор .Значение 	 = СписокКонтрагентов;  
	 Иначе
		 //начало изменений Ожиганов 20.07.2015 оптимизация выгрузки мобильной торговли 
		 //Если Не ПоВсеКонтрагетам Тогда
		 //	вызватьисключение "неизвестный тип";
		 //КонецЕслИ;	
		 //конец изменений 
	КонецЕсли;
	
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	
	
	ПостроительЗапроса.Выполнить();	
	РезЗапроса 			   = ПостроительЗапроса.Результат;
	
	Возврат РезЗапроса;	
	
КонецФункции

// ->

// Шевченков
// ТекЯзык - элемент справочника "Языки народов мира"
Функция ПолучитьПереводНаЯзык(ТекОбъект, ТекЯзык) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_НаименованияНаИнЯзыках.Перевод
	|ИЗ
	|	РегистрСведений.ПРГ_НаименованияНаИнЯзыках КАК ПРГ_НаименованияНаИнЯзыках
	|ГДЕ
	|	ПРГ_НаименованияНаИнЯзыках.Объект = &Объект
	|	И ПРГ_НаименованияНаИнЯзыках.Язык = &Язык";
	Запрос.УстановитьПараметр("Объект", ТекОбъект);
	Запрос.УстановитьПараметр("Язык", ТекЯзык);
	
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(РезТЗ.Количество()<>0, РезТЗ[0].Перевод, "");
	
КонецФункции

Процедура ОткрытьФормуПеревода(Ссылка) Экспорт
	
	ФормаПеревода = РегистрыСведений.ПРГ_НаименованияНаИнЯзыках.ПолучитьФорму("ФормаОбъекта");
	ФормаПеревода.ТекОбъект = Ссылка;	
	ФормаПеревода.Открыть();
	
КонецПроцедуры

Функция СформироватьСтрокуСПереводом(ТекОбъект, ТекЯзык, НачинатьСНовойСтроки = Ложь, СимволРазделителя = " / ", НеВозвращатьИсходнуюСтроку = Ложь, СинонимНаЯзыке = "") Экспорт
	
	ТекстПеревода = ПолучитьПереводНаЯзык(ТекОбъект, ТекЯзык);
	
	ИсхТекст = Строка(ТекОбъект);
	
	Если ПустаяСтрока(ТекстПеревода) Тогда Возврат "" КонецЕсли;
	
	Возврат ?(НеВозвращатьИсходнуюСтроку, "", ИсхТекст) + ?(ПустаяСтрока(ТекстПеревода), "", СимволРазделителя) + ?(НачинатьСНовойСтроки, Символы.ПС, "") + ?(ПустаяСтрока(СинонимНаЯзыке), "", СинонимНаЯзыке + " ") + ТекстПеревода;
	
КонецФункции

Функция ПеревестиМесяц(СтрокаПеревода) Экспорт
	
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, " от ", " dd ");
	
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "января", "january");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "февраля", "february");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "марта", "march");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "апреля", "april");
	
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "мая", "may");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "июня", "june");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "июля", "july");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "августа", "august");
	
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "сентября", "september");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "октября", "october");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "ноября", "november");
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "декабря", "december");
	
	Возврат СтрокаПеревода;
	
	
КонецФункции

Функция ПеревестиТипДокумента(СтрокаПеревода) Экспорт
	
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, " от ", " dd ");
	
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "Задание на подбор", "Order for warehouse");	
	СтрокаПеревода = СтрЗаменить(СтрокаПеревода, "Счет на оплату", "Invoice");	
	
	Возврат СтрокаПеревода;
	
КонецФункции

Функция ЧислоПрописьюНаАнгл(Число) Экспорт
	
	Возврат СокрЛП(СтрЗаменить(ЧислоПрописью(Число, "L=en_US"), "00", ""));	
	
КонецФункции

//начало изменений б/н видимость реквизитов по молочному производству  07.09.2016 
Функция ПРГ_ИсппользуетсяБлокМолочногоПроизводства(ДатаПроверки = Неопределено)  Экспорт
	
	//m_ionov@mail.ru 21.09.2016
	Если ДатаПроверки = Неопределено Тогда
		ДатаПроверки = ТекущаяДата();
	КонецЕсли;
	//------- m_ionov@mail.ru -------
	
	ТекДата = Константы.МЗ_ДатаЗапускаМолочногоПроизводства.Получить();
	
	//на всякий случай вдруг поменяют тип
	Если ТипЗнч(ТекДата ) = Тип("Дата") Тогда
		Если ТекДата  = Дата(1,1,1) Тогда
			возврат Ложь;
		ИначеЕсли ДатаПроверки > ТекДата Тогда
			возврат Истина;
		Иначе
			возврат Ложь;
		КонецЕслИ;	
	Иначе	
		возврат Ложь;
	КонецЕслИ;	
	
КонецФункции	
//конец изменений 


/// Кунов О.В., 27.02.2017 - 62507
Функция ПолучитьОтделениеПользователя(АдресПоставки = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ТипЗнч(АдресПоставки) = Тип("СправочникСсылка.АдресаПоставки") Тогда
		Результат = АдресПоставки.НСИ_Отделение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_Настройки.Отделение
		|ИЗ
		|	(ВЫБРАТЬ
		|		НастройкиПользователей.Значение КАК Отделение,
		|		1 КАК Приоритет
		|	ИЗ
		|		РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|	ГДЕ
		|		НастройкиПользователей.Пользователь = &Пользователь
		|		И НастройкиПользователей.Настройка = &СвойствоОсновноеОтделение
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СоответствиеОтделенийИПользователей.Отделение,
		|		2
		|	ИЗ
		|		РегистрСведений.ПРГСоответствиеОтделенийИПользователей КАК СоответствиеОтделенийИПользователей
		|	ГДЕ
		|		СоответствиеОтделенийИПользователей.Пользователь = &Пользователь) КАК ВТ_Настройки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Настройки.Приоритет");
		
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("СвойствоОсновноеОтделение", ПланыВидовХарактеристик.НастройкиПользователей.АП_Отделение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Отделение;
		Иначе
			Результат = Справочники.НСИ_Отделения.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
///

/// Кунов О.В., 20.03.2017 - 63050
Процедура ПроверитьЗаказНаБлокировкиПродукции(ДокументСсылка, ТаблицаТоваров, Отказ) Экспорт
	
	НоменклатураЗаказа = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПРГ_БлокировкиПродукции.Номенклатура,
	|	ПРГ_БлокировкиПродукции.Контрагент,
	|	ПРГ_БлокировкиПродукции.ДатаНачала,
	|	ПРГ_БлокировкиПродукции.ДатаОкончания,
	|	ПРГ_БлокировкиПродукции.Отделение
	//|	ВЫБОР
	//|		КОГДА ПРГ_БлокировкиПродукции.Отделение = &Отделение
	//|			ТОГДА 1
	//|		КОГДА ПРГ_БлокировкиПродукции.Отделение = ЗНАЧЕНИЕ(Справочник.НСИ_Отделения.ПустаяСсылка)
	//|			ТОГДА 2
	//|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПРГ_БлокировкиПродукции КАК ПРГ_БлокировкиПродукции
	|ГДЕ
	|	ПРГ_БлокировкиПродукции.Контрагент = &Контрагент
	|	И ПРГ_БлокировкиПродукции.Номенклатура В(&Номенклатура)
	|	И ПРГ_БлокировкиПродукции.ДатаНачала <= &ДатаЗаказа
	|	И ПРГ_БлокировкиПродукции.ДатаОкончания >= &ДатаЗаказа
	|	И (ПРГ_БлокировкиПродукции.Отделение = &Отделение ИЛИ ПРГ_БлокировкиПродукции.Отделение = ЗНАЧЕНИЕ(Справочник.НСИ_Отделения.ПустаяСсылка))
	|
	//|УПОРЯДОЧИТЬ ПО Приоритет
	|");
	
	Запрос.УстановитьПараметр("Контрагент", 	ДокументСсылка.Контрагент);
	Запрос.УстановитьПараметр("Номенклатура", 	НоменклатураЗаказа);
	Запрос.УстановитьПараметр("ДатаЗаказа", 	ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Отделение", 		ДокументСсылка.КП_Отделение);
	
    БлокировкиПродукции = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаБлокировки Из БлокировкиПродукции Цикл
		Если ТаблицаТоваров.Найти(СтрокаБлокировки.Номенклатура, "Номенклатура") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		#Если Клиент Тогда
			СтрокаСообщения = "Номенклатура %6 <%1> для контрагента <%2> заблокирована";
			Если ЗначениеЗаполнено(СтрокаБлокировки.Отделение) Тогда
				СтрокаСообщения = СтрокаСообщения + " по отделению <%3>";
			Иначе
				СтрокаСообщения = СтрокаСообщения + " по всем отделениям";
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения + " с %4 по %5.
				|Необходимо убрать эту позицию из заказа.";
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
				СтрокаБлокировки.Номенклатура, СтрокаБлокировки.Контрагент, СтрокаБлокировки.Отделение,
				Формат(СтрокаБлокировки.ДатаНачала, "ДФ=dd.MM.yyyy"), Формат(СтрокаБлокировки.ДатаОкончания, "ДФ=dd.MM.yyyy"),
				СокрЛП(СтрокаБлокировки.Номенклатура.Код)
			);
			Сообщить(СтрокаСообщения);
		#КонецЕсли
		Отказ = Истина;
	КонецЦикла;
	
КонецПроцедуры
///

// #52740 Шевченков 20170412
Функция ЗапрещеноРедактированиеАктомСверки(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка КАК Акт
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	НЕ АктСверкиВзаиморасчетовПоДаннымОрганизации.ПКК_Проблемная
	|	И АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка.Проведен
	|	И АктСверкиВзаиморасчетовПоДаннымОрганизации.ДокументРегистратор = &Документ
	|	И АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка В
	|			(ВЫБРАТЬ различные
	|				АктСверкиВзаиморасчетовПКК_ИсторияСверки.Ссылка
	|			ИЗ
	|				Документ.АктСверкиВзаиморасчетов.ПКК_ИсторияСверки КАК АктСверкиВзаиморасчетовПКК_ИсторияСверки
	|			ГДЕ
	|				АктСверкиВзаиморасчетовПКК_ИсторияСверки.ВидИсторииСверки = &ВидИсторииСверки
	|				И АктСверкиВзаиморасчетовПКК_ИсторияСверки.Дата <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ВидИсторииСверки", Справочники.ПКК_ВидИсторийСверки.ДатаФомированияАктаРасхождений);

	Результат = Запрос.Выполнить().Выбрать();	
	
	Пока Результат.Следующий() Цикл
		
		//Сообщить("Редактирование запрещено документом " + Строка(Результат.Акт));
		//
		//Возврат Истина;
		
	КонецЦикла;
	
	Возврат Ложь;	
	
КонецФункции


/// Кунов О.В., 19.04.2017 - 64447
Процедура ПроставитьНомерПоставщика(Заказ) Экспорт
	
	Если ЗначениеЗаполнено(Заказ.ДоговорКонтрагента) И ЗначениеЗаполнено(Заказ.ДоговорКонтрагента.ПРГ_НомерПоставщика) Тогда
		Заказ.НСИ_НомерПоставщика = Заказ.ДоговорКонтрагента.ПРГ_НомерПоставщика;
	ИначеЕсли ЗначениеЗаполнено(Заказ.Контрагент) И ЗначениеЗаполнено(Заказ.Контрагент.НСИ_НомерПоставщика) Тогда
		Заказ.НСИ_НомерПоставщика = Заказ.Контрагент.НСИ_НомерПоставщика;
	КонецЕсли;
	
КонецПроцедуры
///
