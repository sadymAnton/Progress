
///////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ФУНКЦИИ

// Функция время начала замера
//
// Параметры:
//  КлючеваяОперация - ПеречислениеСсылка.КлючевыеОперации, замер этой ключевой операции начинается
//  ВызовСКлиента - Булево, указывает откуда был произведен вызов функции
//
// Возвращаемое значение:
//  Число - время начала замера
//  0 - если замер этой ключевой операции уже начат
//
Функция ЗафиксироватьВремяНачала(КлючеваяОперация, ВызовСКлиента) Экспорт
	
	Если Не ВыполнятьЗамерыПроизводительности() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВремяНачала = ТочноеВремя();
	Соответствие = ПолучитьПараметрСеанса();
	
	Если ВызовСКлиента Тогда
		Для Каждого КлючИЗначение Из Соответствие Цикл
			
			Если КлючИЗначение.Значение.АвтоЗавершение Тогда
				ТекстСообщения = "Замер интерактивной ключевой операции """ + КлючеваяОперация + """ не был начат,
					|т.к. начат замер интерактивной ключевой операции """ + КлючИЗначение.Ключ + """.";
				ЗаписатьВЖурналРегистрации("ЗафиксироватьВремяНачала",
					УровеньЖурналаРегистрации.Предупреждение,
					ТекстСообщения);
				Возврат 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	// Проверка, если замер времени выполнения ключевой операции уже начат,
	// то игнорировать повторный замер
	Если Соответствие.Получить(КлючеваяОперация) = Неопределено Тогда
		ПараметрыКО = Новый Структура("ВремяНачала, АвтоЗавершение", ВремяНачала, ВызовСКлиента);
		Соответствие.Вставить(КлючеваяОперация, ПараметрыКО);
		УстановитьПараметрСеанса(Соответствие);
	Иначе
		ВремяНачала = 0;
	КонецЕсли;
	
	Возврат ВремяНачала;
	
КонецФункции

// Процедура фиксирует время окончания замер
//
// Параметры:
//  КлючеваяОперация - ПеречислениеСсылка.КлючевыеОперации, замер этой ключевой операции заканчивается,
//  если параметр не указан, то предполагается, что начата замер только одной ключевой операции
//  ВызовИзОбработчикаОжидания - Булево, указывает откуда был произведен вызов функции
//
// Возвращаемое значение:
//  Число - время окончания замера
//  0 - если ни один замер не начат
//
Функция ЗафиксироватьВремяОкончания(КлючеваяОперация = Неопределено, ВызовИзОбработчикаОжидания) Экспорт
	
	Если Не ВыполнятьЗамерыПроизводительности() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВремяОкончания = ТочноеВремя();
	Соответствие = ПолучитьПараметрСеанса();
	
	// Если не начат ни один замер
	Если Соответствие.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ВремяНачала = Неопределено;
	// Завершается замер начатый на клиенте
	Если КлючеваяОперация = Неопределено И ВызовИзОбработчикаОжидания Тогда
		
		Для Каждого КлючИЗначение Из Соответствие Цикл
			// Замер начат на сервере
			Если Не КлючИЗначение.Значение.АвтоЗавершение Тогда
				Продолжить;
			КонецЕсли;
			
			КлючеваяОперация = КлючИЗначение.Ключ;
			ВремяНачала = КлючИЗначение.Значение.ВремяНачала;
			// Прерываем т.к. такой замер где АвтоЗавершение=Истина может быть только один
			Прервать;
		КонецЦикла;
		
	// Завершается замер начатый на сервере
	ИначеЕсли Не ВызовИзОбработчикаОжидания Тогда
		
		Если КлючеваяОперация = Неопределено Тогда
			// В такой ситуации может быть максимум 2 замера, один с клиента, другой с сервера
			Если Соответствие.Количество() > 2 Тогда
				Соответствие.Очистить();
				УстановитьПараметрСеанса(Соответствие);
				ВызватьИсключение "Начато несколько различных замеров на сервере.
					|В таких случаях необходимо указывать какая ключевая операция завершилась.";
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из Соответствие Цикл
				// Замер начат на клиенте
				Если КлючИЗначение.Значение.АвтоЗавершение Тогда
					Продолжить;
				КонецЕсли;
				
				КлючеваяОперация = КлючИЗначение.Ключ;
				ВремяНачала = КлючИЗначение.Значение.ВремяНачала;
				// Прерываем т.к. если замер начат на серере и не указана ключевая операция может быть только один такой замер
				Прервать;
			КонецЦикла;
		Иначе
			ПараметрыКО = Соответствие.Получить(КлючеваяОперация);
			// Если замер этой ключевой операции начинался
			Если Не ПараметрыКО = Неопределено Тогда
				ВремяНачала = ПараметрыКО.ВремяНачала;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Не удалось найти время начала указаной ключевой операции
	Если ВремяНачала = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Соответствие.Удалить(КлючеваяОперация);
	УстановитьПараметрСеанса(Соответствие);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ЗамерыВремени.СоздатьМенеджерЗаписи();
	Запись.ДатаЗамера = ТекущаяДата();
	Запись.КлючеваяОперация = КлючеваяОперация;
	Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
	Запись.ВремяВыполнения = (ВремяОкончания - ВремяНачала - ?(ВызовИзОбработчикаОжидания, 100, 0)) / 1000;
	Запись.ИмяПользователя = ИмяПользователя();
	Попытка
		Запись.Записать(Ложь);
	Исключение
		ЗаписатьВЖурналРегистрации("ЗафиксироватьВремяОкончания",
			УровеньЖурналаРегистрации.Ошибка,
			ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ВремяОкончания;
	
КонецФункции

// Функция получает значение параметра сеанса ТекущийЗамерВремени
//
// Возвращаемое занчение:
//  Соответствие - параметр сеанса установлен
//
Функция ПолучитьПараметрСеанса()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийЗамерВремени.Получить();
	
КонецФункции

// Процедура устанавливает значение параметра сеанса ТекущийЗамерВремени
// Параметры:
//  Соответствие - Произвольный тип данных, значение которое будет помещенов в параметр сеанса ТекущийЗамерВремени
//
Процедура УстановитьПараметрСеанса(Соответствие)
	
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеЗначения = Новый ХранилищеЗначения(Соответствие);
	ПараметрыСеанса.ТекущийЗамерВремени = ХранилищеЗначения;
	
КонецПроцедуры

// Функция получает точное время
//
// Возвращаемое значение:
//  Число - время с точностью до миллисекунд
Функция ТочноеВремя()
	
	Инструменты = ПолучитьИнструменты();
	
	Возврат ЗначениеТаймера(Инструменты);
	
КонецФункции

// Процедура записывает данные в журнал регистрации
//
// Параметры:
//  ИмяСобытия - Строка
//  Уровень - УровеньЖурналаРегистрации
//  ТекстСообщения - Строка
//
Процедура ЗаписатьВЖурналРегистрации(ИмяСобытия, Уровень, ТекстСообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		Уровень,
		,
		"Оценка производительности",
		ТекстСообщения);
	
КонецПроцедуры

// Функция получает занчение перечисления ОбщаяПроизводительностьСистемы
//
// Возвращаемое значение:
//  ПеречилсениеСсылка - значение перечисления
//  Неопределено - значение перечисления отсутствует
//
Функция ПолучитьПредопределенный() Экспорт
	
	Попытка
		Возврат Перечисления.КлючевыеОперации.ОбщаяПроизводительностьСистемы;
	Исключение
		Возврат Перечисления.КлючевыеОперации.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

// Функция определяет необходимость выполнения замеров
//
// Возвращаемое значение:
//  Булево - Истина выполнять, Ложь не выполнять
//
Функция ВыполнятьЗамерыПроизводительности()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ВыполнятьЗамерыПроизводительности.Получить();
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВНЕШНЕЙ КОМПОНЕНТОЙ

// Получить объект инструментов
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция ПолучитьИнструменты()
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьИнструменты();
	
КонецФункции // ПолучитьИнструменты()

// Создать объект инструментов
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция СоздатьИнструменты()
	
	Возврат Новый("Addin.ETP.Tools");
	
КонецФункции // СоздатьИнструменты()

// Подключить внешнюю компоненту КИП
//
Процедура ПодключитьВнешнийКомпонент()
	
	ИмяКомпонента = "ОбщийМакет.ОценкаПроизводительностиВнешнийКомпонент";

	Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
		#Если Клиент Тогда
			УстановитьВнешнююКомпоненту(ИмяКомпонента);
		#КонецЕсли
		
		Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
			ВызватьИсключение "Ошибка подключения внешнего компонента.";
		КонецЕсли;
	КонецЕсли;
	
	Инструменты = СоздатьИнструменты();
	ПодключеннаяВерсия = ВерсияКомпонента(Инструменты);
	ТребуемаяВерсия = "2.0.4.52";
	
	Если ПодключеннаяВерсия <> ТребуемаяВерсия Тогда
		ВызватьИсключение
			"Версия подключенного внешнего компонента ("
			+ ПодключеннаяВерсия
			+ ") не совпадает с требуемой версией ("
			+ ТребуемаяВерсия
			+ "). Для устранения несоответствия версий, выгрузите всех клиентов"
			" и перезагрузите сервер 1С:Предприятия этой информационной базы.";
	КонецЕсли;
	
КонецПроцедуры // ПодключитьВнешнийКомпонент()

// Выполнить метод внешнего компонента
//
// Параметры:
//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
//  Имя - Строка, имя выполняемого метода
//  Параметры - Структура, содержит имена и значения параметров
//
// Возвращаемое значение:
//   Произвольный - результат, возвращаемый методом
//
Функция ВыполнитьМетод(Объект, Имя, Параметры = Неопределено)
	
	ИменаПараметров = "";
	
	Если Параметры <> Неопределено Тогда
		Для каждого Параметр Из Параметры Цикл
			Если Не ПустаяСтрока(ИменаПараметров) Тогда
				ИменаПараметров = ИменаПараметров + ", ";
			КонецЕсли;
			
			ИменаПараметров = ИменаПараметров + "Параметры." + Параметр.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Возврат Вычислить("Объект." + Имя + "(" + ИменаПараметров + ")");
	Исключение
		Если Объект <> Неопределено И Объект.ЕстьОшибка() Тогда
			ВызватьИсключение Объект.ОписаниеОшибки();
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции // ВыполнитьМетод()

// Получить значение таймера для замера интервала времени
//
// Параметры:
//  Инструменты - Объект внешнего компонента
//
// Возвращаемое значение:
//  Число - текущее значение таймера в миллисекундах
//
Функция ЗначениеТаймера(Инструменты)
	
	Возврат ВыполнитьМетод(Инструменты, "ЗначениеТаймера");
	
КонецФункции // ЗначениеТаймера()

// Получить версию текущего компонента.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ВерсияКомпонента(Инструменты)
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьВерсию");
	
КонецФункции // ВерсияКомпонента()


///////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПАРАМЕТРОВ СЕАНСА

// Устанавливает параметры сеанса подсистемы оценка производительности
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра сеанса, значение которого необходимо установить
//  УстановленныеПараметры - массив - в данный параметр помещается информация об установленных параметрах сеанса
// 
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ТекущийЗамерВремени" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.ТекущийЗамерВремени = Новый ХранилищеЗначения(Новый Соответствие);
	
	УстановленныеПараметры.Добавить(ИмяПараметра);
	
КонецПроцедуры

