
Процедура ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(РезультатыРасчетов, ЗарегистрированныеВУчетеДанные, ИменаКолонок)
	
	Для каждого СтрокаТЗ Из ЗарегистрированныеВУчетеДанные Цикл
		ЗаполнитьЗначенияСвойств(РезультатыРасчетов.Добавить(), СтрокаТЗ, "ФизЛицо, МесяцНалоговогоПериода, Подразделение," + ИменаКолонок);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВписатьРесурсВРезультатыРасчетовНДФЛ(РезультатыРасчетов, МесяцНалоговогоПериода, Сумма, ИмяРесурса, РаспределяемаяСтрока, СтрокиРаспределения, КоэффициентыРаспределения, СтрокаКлючей = "ФизЛицо, МесяцНалоговогоПериода", ПоказательРаспределения = "Подразделение", ТочностьВеличины = 0) Экспорт 
	
	Если Сумма <> 0 Тогда
		РаспределениеРесурса = ОбщегоНазначенияЗК.РаспределитьПропорционально(Сумма,КоэффициентыРаспределения, ТочностьВеличины);
		Если РаспределениеРесурса = Неопределено Тогда
			НоваяСтрока = РезультатыРасчетов.Добавить();
			НоваяСтрока[ИмяРесурса] = Сумма; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РаспределяемаяСтрока, СтрокаКлючей);
			НоваяСтрока.МесяцНалоговогоПериода = МесяцНалоговогоПериода; 
		Иначе
			Индекс = 0;
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = РезультатыРасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, СтрокаКлючей + ", " + ПоказательРаспределения);
				НоваяСтрока[ИмяРесурса] = РаспределениеРесурса[Индекс];
				НоваяСтрока.МесяцНалоговогоПериода = МесяцНалоговогоПериода; 
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыделитьКоэффициентыРаспределенияИзКоллекцииСтрок(КоллекцияСтрокРаспределения, ИмяКолонки) Экспорт
	
	Коэффициенты = Новый Массив;
	
	Для каждого СтрокаРаспределения Из КоллекцияСтрокРаспределения Цикл
		Коэффициенты.Добавить(СтрокаРаспределения[ИмяКолонки]);
	КонецЦикла; 
	
	Возврат Коэффициенты
	
КонецФункции // ВыделитьКоэффициентыОтраженияИзМассиваСтрок()

////////////////////////////////////////////////////////////////////////////////
// Алгоритмы расчета

// Для указанного алгоритма расчета записи регистра расчетов дописывает  
//  в текст запроса используемые алгоритмом поля
//
// Параметры
//  ИмяАлгоритма - строка - "имя" алгоритма
//  КомментироватьРасчет - булево - обозначает режим, 
//                 в котором производится расчет
//  ТекстЗапроса - строка - текст запроса, который 
//                 используется в дальнейшем при расчете записей регистра
//  ПоляЗапроса - массив - содержит перечень полей
Процедура ДописатьПоляАлгоритмов(ИмяАлгоритма, КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса = Неопределено) Экспорт
	
	Если ИмяАлгоритма = "ИсчисленныйНДФЛ" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ИсчисленныйНДФЛ.ИсчисленныйНалог Как ИсчисленныйНалог";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("ИсчисленныйНалог");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "РасчетнаяБазаУдержаний" Тогда
		// если присоединяем к базе
		ТекстЗапроса = ТекстЗапроса + ",
		|	База.РезультатБаза КАК РезультатБаза";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("РезультатБаза");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "РазмерОграниченияПособия" Тогда
		// размер ограничения пособия по нетрудоспособности
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ЕСТЬNULL(РазмерММОТ.Размер, 0) КАК РазмерММОТ,
		|	ЕСТЬNULL(МаксимальныйРазмерЕжемесячнойСтраховойВыплаты.Размер, 0) КАК МаксимальныйРазмерЕжемесячнойСтраховойВыплаты,
		|	ЕСТЬNULL(РазмерММОТНаДатуДатаНачалаСобытия.Размер, 0) КАК РазмерММОТНаДатуДатаНачалаСобытия,
		|	ЕСТЬNULL(РазмерОграниченияПособия2010.Размер, 0) КАК РазмерОбщегоОграничения2010,
		|	ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) КАК РазмерОбщегоОграничения,
		|	ЕСТЬNULL(РазмерОграниченияПособия.РазмерПоБеременности, 0) КАК РазмерПоБеременности";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("РазмерММОТ");
			ПоляЗапроса.Добавить("МаксимальныйРазмерЕжемесячнойСтраховойВыплаты");
			ПоляЗапроса.Добавить("РазмерММОТНаДатуДатаНачалаСобытия");
			ПоляЗапроса.Добавить("РазмерОбщегоОграничения2010");
			ПоляЗапроса.Добавить("РазмерОбщегоОграничения");
			ПоляЗапроса.Добавить("РазмерПоБеременности");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "ВремяВКалендарныхДнях" Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|ВремяВКалендарныхДнях.КалендарныхДней КАК КалендарныхДней";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("КалендарныхДней");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "СдельныйЗаработок" Тогда
		// размер сдельного заработка
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
		|			ТОГДА NULL
		|		ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка 
		|	КОНЕЦ КАК РазмерСдельногоЗаработка,
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 27.10.2011 13:55 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
		|			ТОГДА NULL
		|		ИНАЧЕ ДанныеОСдельномЗаработке.ПроцентВыработки 
		|	КОНЕЦ КАК ПроцентВыработки,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ) КАК ОшибкаВводаФактическойВыработки";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("РазмерСдельногоЗаработка");
			ПоляЗапроса.Добавить("ОшибкаВводаФактическойВыработки");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "ДоходыОблагаемыеСтраховымиВзносамиЕСН" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|ОблагаемыеЕСНДоходы.Результат КАК ОблагаемыйЕСНДоход";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("ОблагаемыйЕСНДоход");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "УдержаноПоДокументу" Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	НакопленныеДанные.УжеНачисленоВТекущемПериоде,
		|	НакопленныеДанные.УжеНачисленоЗаВсюИсторию";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("УжеНачисленоВТекущемПериоде");
			ПоляЗапроса.Добавить("УжеНачисленоЗаВсюИсторию");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПочтовыеПереводы" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ЕСТЬNULL(ПочтовыеПереводы.РазмерПочтовогоПеревода,0) КАК РазмерПочтовогоПеревода,
		|	ЕСТЬNULL(ПочтовыеПереводы.ПоТарифу, Ложь) КАК ПоТарифу,
		|	ЕСТЬNULL(ПочтовыеПереводы.Процент, 0) КАК Процент,
		|	ПочтовыеПереводы.Получатель КАК Получатель,
		|	ПочтовыеПереводы.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
		|	ЕСТЬNULL(ПочтовыеПереводы.СуммаАлиментов, 0) КАК СуммаАлиментов";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("РазмерПочтовогоПеревода");
			ПоляЗапроса.Добавить("ПоТарифу");
			ПоляЗапроса.Добавить("Процент");
			ПоляЗапроса.Добавить("Получатель");
			ПоляЗапроса.Добавить("ПорядокИсчисленияИздержек");
			ПоляЗапроса.Добавить("СуммаАлиментов");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "АлиментыВПрожиточныхМинимумах" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ЕСТЬNULL(ПрожиточныеМинимумы.Размер,0) КАК ВеличинаПрожиточногоМинимума";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("ВеличинаПрожиточногоМинимума");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяАлгоритма = "СреднийЗаработокПособий" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|ЕСТЬNULL(ДанныеОСреднемЗаработке2011.ОграниченныйЗаработок,0) Как СреднийЗаработокПособий2011,
		|ЕСТЬNULL(ДанныеОСреднемЗаработке2011.ОтработаноДнейДляПособийПоМатеринству, 730) Как ОтработаноДнейДляПособийПоМатеринству,
		|ЕСТЬNULL(ДанныеОСреднемЗаработке2011.ИсключаемыхДнейДляПособийПоМатеринству, 0) Как ИсключаемыхДнейДляПособийПоМатеринству,
		|ЕСТЬNULL(ДанныеОСреднемЗаработке2011.Заработок,0) Как СреднийЗаработокПособий2011БезОграничений,
		|ЕСТЬNULL(ДанныеОСреднемЗаработке2011.МаксимальныйСреднийДвухПредшествующихКалендарныхЛет,0) Как МаксимальныйСреднийДвухПредшествующихКалендарныхЛет,
		|ВЫБОР
		|	КОГДА Основной.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		ТОГДА 0
		|	ИНАЧЕ ЕСТЬNULL(ПродолжительностьРабочегоВремени.Доля, 1)
		|КОНЕЦ Как ДоляММОТ,
		|ВЫБОР
		|	КОГДА Основной.ФизЛицо.ПостоянноПроживалВКрыму18Марта2014Года И ГОД(Основной.ДатаНачалаСобытия) = 2015
		|		ТОГДА ИСТИНА
		|	КОГДА Основной.ФизЛицо.ПостоянноПроживалВКрыму18Марта2014Года И ГОД(Основной.ДатаНачалаСобытия) = 2016
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ Как ОсобыйПорядокРасчетаСреднего,
		|ВЫБОР
		|	КОГДА Основной.ФизЛицо.ПостоянноПроживалВКрыму18Марта2014Года И ГОД(Основной.ДатаНачалаСобытия) = 2015
		|		ТОГДА 289
		|	КОГДА Основной.ФизЛицо.ПостоянноПроживалВКрыму18Марта2014Года И ГОД(Основной.ДатаНачалаСобытия) = 2016
		|		ТОГДА 654
		|	ИНАЧЕ 0 
		|КОНЕЦ Как УчитываемыхДнейВКалендарныхГодахПриОсобомПорядкеРасчета,
		|ВЫБОР
		|	КОГДА Основной.ФизЛицо.ПостоянноПроживалВКрыму18Марта2014Года И ГОД(Основной.ДатаНачалаСобытия) = 2015
		|		ТОГДА 1632.88
		|	КОГДА Основной.ФизЛицо.ПостоянноПроживалВКрыму18Марта2014Года И ГОД(Основной.ДатаНачалаСобытия) = 2016
		|		ТОГДА ВЫРАЗИТЬ((624000 + 670000) / 730 КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ 0 
		|КОНЕЦ Как ОграничениеСреднегоПриОсобомПорядкеРасчета,
		|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДнейПособий,0) Как ОтработаноДнейПособий, 
		|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДнейПособий2010,0) Как ОтработаноДнейПособий2010, 
		|ДанныеДляРасчетаСреднего.СреднийЗаработокПособий2010 Как СреднийЗаработокПособий2010,
		|ДанныеДляРасчетаСреднего.СреднийЗаработокПособий Как СреднийЗаработокПособий";
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("ОтработаноДнейПособий");
			ПоляЗапроса.Добавить("СреднийЗаработокПособий");
			ПоляЗапроса.Добавить("ОтработаноДнейПособий2010");
			ПоляЗапроса.Добавить("СреднийЗаработокПособий2010");
			ПоляЗапроса.Добавить("СреднийЗаработокПособий2011");
			ПоляЗапроса.Добавить("СреднийЗаработокПособий2011БезОграничений");
			ПоляЗапроса.Добавить("ОтработаноДнейДляПособийПоМатеринству");
			ПоляЗапроса.Добавить("ИсключаемыхДнейДляПособийПоМатеринству");
			ПоляЗапроса.Добавить("МаксимальныйСреднийДвухПредшествующихКалендарныхЛет");
			ПоляЗапроса.Добавить("ОсобыйПорядокРасчетаСреднего");
			ПоляЗапроса.Добавить("УчитываемыхДнейВКалендарныхГодахПриОсобомПорядкеРасчета");
			ПоляЗапроса.Добавить("ОграничениеСреднегоПриОсобомПорядкеРасчета");
			ПоляЗапроса.Добавить("ДоляММОТ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДописатьПоляАлгоритма()

// Для указанного алгоритма расчета записи регистра расчетов   
// исполняет вспомогательные запросы и дописывает текст запроса 
// используемые временные таблицы
//
// Параметры
//  ИмяАлгоритма - строка - "имя" алгоритма
//  КомментироватьРасчет - булево - обозначает режим, 
//                 в котором производится расчет
//  Запрос - запрос - запрос, который используется
//                 в дальнейшем при расчете записей регистра
//  ТекстЗапроса - строка - текст запроса, который 
//                 используется в дальнейшем при расчете записей регистра
//  Условие - строка - дополнительный текст запроса 
//  ИмяРегистра - строка - "имя" рассчитываемого регистра
//
Процедура ДописатьАлгоритмВЗапрос(ИмяАлгоритма = "", КомментироватьРасчет = Ложь, Запрос = Неопределено, ТекстЗапроса = "", Условие = "", ИмяРегистра = "") Экспорт
	
	// алгоритмы расчета записей регистров расчета
	
	Если ИмяАлгоритма = "ИсчисленныйНДФЛ" Тогда
		
		МассивУдержанийИЛ = Новый Массив;
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ);
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
		МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ);
		
		Запрос.УстановитьПараметр("парамМассивУдержанийИЛ", МассивУдержанийИЛ);
		
		// ИсчисленныйНДФЛ
		//	данные по исчисленному НДФЛ в текущем периоде регистрации
		//	Поля 
		//		НомерСтроки
		//		ИсчисленныйНалог
		//
		//	Описание
		//	Суммируем исчисленный НДФЛ по заданной организации в разрезе физлиц за 
		//  базовый период строки удержания
		//	
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо КАК Физлицо,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
		|ГДЕ
		|	Удержания.ВидРасчета В(&парамМассивУдержанийИЛ)
		|	И Удержания.Регистратор = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	МесяцУдержания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Физлица.НомерСтроки КАК НомерСтроки,
		|	СУММА(НДФЛРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
		|ПОМЕСТИТЬ ВТИсчисленныйНДФЛ
		|ИЗ
		|	ВТФизлица КАК Физлица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
		|		ПО Физлица.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
		|			И (НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ) = Физлица.МесяцУдержания)
		|ГДЕ
		|	НДФЛРасчетыСБюджетом.Организация = &парамОрганизация
		|	И НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
		|
		|СГРУППИРОВАТЬ ПО
		|	Физлица.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		// присоединяем данные по исчисленному НДФЛ
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНДФЛ КАК ИсчисленныйНДФЛ
		|ПО Основной.НомерСтроки = ИсчисленныйНДФЛ.НомерСтроки";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "РасчетнаяБазаУдержаний" Тогда	
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.Регистратор КАК Регистратор,
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо,
		|	Удержания.ПериодРегистрации,
		|	Удержания.Организация,
		|	Удержания.БазовыйПериодНачало,
		|	БазовыеВидыРасчета.ВидРасчета,
		|	Удержания.ПорядокРасчетаБазы,
		|	Удержания.БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТ_ЗаписиУдержаний
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО Удержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
		|ГДЕ
		|	&Условие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Удержания.Регистратор КАК Регистратор,
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо,
		|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
		|	Удержания.Организация,
		|	Удержания.БазовыйПериодНачало,
		|	Удержания.ВидРасчета,
		|	Удержания.ПорядокРасчетаБазы,
		|	Удержания.БазовыйПериодКонец,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_Удержания
		|ИЗ
		|	ВТ_ЗаписиУдержаний КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Удержания.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И Удержания.Организация = СотрудникиОрганизаций.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодРегистрации,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(База.РезультатБаза) КАК РезультатБаза,
		|	База.Регистратор КАК Регистратор,
		|	База.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТБаза
		|ИЗ
		|	(ВЫБРАТЬ
		|		База.Результат КАК РезультатБаза,
		|		Основной.Регистратор КАК Регистратор,
		|		Основной.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК База
		|			ПО Основной.ПериодРегистрации = База.ПериодРегистрации
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодНачало <= База.ПериодДействияНачало
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриПриемеНаРаботу)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК База
		|			ПО (Основной.ПериодРегистрации = НАЧАЛОПЕРИОДА(База.ПериодРегистрации, МЕСЯЦ))
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодНачало <= База.ПериодРегистрации
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриПриемеНаРаботу)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК База
		|			ПО Основной.ПериодРегистрации = База.ПериодРегистрации
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодКонец >= База.ПериодДействияНачало
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриУвольнении)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК База
		|			ПО (Основной.ПериодРегистрации = НАЧАЛОПЕРИОДА(База.ПериодРегистрации, МЕСЯЦ))
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодКонец >= База.ПериодРегистрации
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриУвольнении)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База1.РезультатБаза,
		|		База1.Регистратор,
		|		База1.НомерСтроки
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(
		|				&парамИзмеренияОсновного,
		|				&парамИзмеренияБазового,
		|				&парамРазрезы,
		|				&Условие
		|					И ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ЗаВесьПериод)) КАК База1
		|	ГДЕ
		|		((НЕ База1.Сторно)
		|				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База2.РезультатБаза,
		|		База2.Регистратор,
		|		База2.НомерСтроки
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|				&парамИзмеренияОсновного,
		|				&парамИзмеренияБазового,
		|				&парамРазрезы,
		|				&Условие
		|					И ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ЗаВесьПериод)) КАК База2
		|	ГДЕ
		|		((НЕ База2.Сторно)
		|				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
		|
		|СГРУППИРОВАТЬ ПО
		|	База.Регистратор,
		|	База.НомерСтроки";
		
		Разрезы = Новый Массив;
		Разрезы.Добавить("ПериодРегистрации");
		Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБаза Как База
		|		ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки
		|";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ВсегоОтработаноВремени" Тогда	
		
		// Сумма отработанного времени по видам времени: 
		//	ОтработанноеВПределахНормы,
		//	ЧасовоеОтработанноеВПределахНормы,
		//	ОтработанноеСверхНормы, необходим для расчета показателей ОтработаноВремениВДнях, ОтработаноВремениВЧасах
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисления.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Регистратор = &парамРегистратор
		|	И ОсновныеНачисления.Авторасчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТ_СписокВРПоДням
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТ_СписокВРПоЧасам
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическийПериодДействия.НомерСтроки,
		|	ФактическийПериодДействия.Сторно,
		|	ФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|	ФактическийПериодДействия.Организация КАК Организация,
		|	ФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
		|	ФактическийПериодДействия.ПериодДействияНачало,
		|	ФактическийПериодДействия.ПериодДействияКонец,
		|	ФактическийПериодДействия.ПериодРегистрации
		|ПОМЕСТИТЬ ВТ_ОсновныеФПД
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			Регистратор = &парамРегистратор
		|				И Авторасчет) КАК ФактическийПериодДействия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Организация,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НесгруппированныеДанные.НомерСтроки КАК НомерСтроки,
		|	СУММА(НесгруппированныеДанные.ОтработаноДней) КАК ВсегоОтработаноДней,
		|	СУММА(НесгруппированныеДанные.ОтработаноЧасов) КАК ВсегоОтработаноЧасов
		|ПОМЕСТИТЬ ВТВсегоОтработаноВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА Вспомогательный.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|				ТОГДА ВЫБОР
		|						КОГДА Вспомогательный.Сторно
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ * Вспомогательный.ОтработаноДней
		|			ИНАЧЕ ГрафикиРаботы.ОсновноеЗначение
		|		КОНЕЦ КАК ОтработаноДней,
		|		ВЫБОР
		|			КОГДА Вспомогательный.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|				ТОГДА 0
		|			ИНАЧЕ ГрафикиРаботы.ДополнительноеЗначение
		|		КОНЕЦ КАК ОтработаноЧасов
		|	ИЗ
		|		ВТ_ОсновныеФПД КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|					ВидРасчета В
		|							(ВЫБРАТЬ
		|								СписокВР.ВидРасчета
		|							ИЗ
		|								ВТ_СписокВРПоДням КАК СписокВР)
		|						И (Сотрудник, ПериодДействия) В
		|							(ВЫБРАТЬ
		|								ОсновныеНачисления.Сотрудник,
		|								ОсновныеНачисления.ПериодДействия
		|							ИЗ
		|								ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК Вспомогательный
		|			ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|				И Основной.Организация = Вспомогательный.Организация
		|				И Основной.ПериодДействия = Вспомогательный.ПериодДействия
		|				И (Основной.Сторно = Вспомогательный.Сторно
		|					ИЛИ Вспомогательный.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы))
		|				И Основной.ПериодРегистрации >= Вспомогательный.ПериодРегистрации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|			ПО (Вспомогательный.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
		|				И (Вспомогательный.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|				И (ГрафикиРаботы.Месяц = Вспомогательный.ПериодДействия)
		|				И (ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|				И (ГрафикиРаботы.Дата МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
		|				И (ГрафикиРаботы.Дата МЕЖДУ Вспомогательный.ПериодДействияНачало И Вспомогательный.ПериодДействияКонец)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Основной.НомерСтроки,
		|		0,
		|		ВЫБОР
		|			КОГДА Вспомогательный.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * Вспомогательный.ОтработаноЧасов
		|	ИЗ
		|		ВТ_ОсновныеФПД КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|					ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|						И ВидРасчета В
		|							(ВЫБРАТЬ
		|								СписокВР.ВидРасчета
		|							ИЗ
		|								ВТ_СписокВРПоЧасам КАК СписокВР)
		|						И (Сотрудник, ПериодДействия) В
		|							(ВЫБРАТЬ
		|								ОсновныеНачисления.Сотрудник,
		|								ОсновныеНачисления.ПериодДействия
		|							ИЗ
		|								ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК Вспомогательный
		|			ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|				И Основной.Организация = Вспомогательный.Организация
		|				И Основной.ПериодДействия = Вспомогательный.ПериодДействия
		|				И (Вспомогательный.ПериодДействияНачало МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
		|				И (Вспомогательный.ПериодДействияКонец МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)) КАК НесгруппированныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	НесгруппированныеДанные.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоОтработаноВремени КАК ВсегоОтработаноВремени
		|ПО Основной.НомерСтроки = ВсегоОтработаноВремени.НомерСтроки
		|";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "РазмерОграниченияПособия" Тогда	
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Основной.НомерСтроки КАК НомерСтроки,
		|	Основной.ПериодДействияНачало,
		|	Основной.ДатаНачалаСобытия,
		|	Основной.Сотрудник
		|ПОМЕСТИТЬ ВТРассчитываемыеЗаписиБольничных
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|ГДЕ
		|	Основной.Регистратор = &парамРегистратор
		|	И Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		// МаксимальныйРазмерЕжемесячнойСтраховойВыплаты
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		Размер - МаксимальныйРазмерЕжемесячнойСтраховойВыплаты
		//	Описание:
		//		получает МаксимальныйРазмерЕжемесячнойСтраховойВыплаты для каждой строки начислений
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	МаксимальныйРазмерЕжемесячнойСтраховойВыплаты.Размер КАК Размер
		|ПОМЕСТИТЬ ВТМаксимальныйРазмерЕжемесячнойСтраховойВыплаты
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(МаксимальныйРазмерЕжемесячнойСтраховойВыплаты.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты КАК МаксимальныйРазмерЕжемесячнойСтраховойВыплаты
		|			ПО (МаксимальныйРазмерЕжемесячнойСтраховойВыплаты.Период <= Основной.ПериодДействияНачало)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты КАК МаксимальныйРазмерЕжемесячнойСтраховойВыплаты
		|		ПО (МаксимальныйРазмерЕжемесячнойСтраховойВыплаты.Период = ДатыАктуальности.ДатаАктуальности)";
		Запрос.Выполнить();
		
		// РазмерММОТ
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		Размер - размер ММОТ
		//	Описание:
		//		получает размер ММОТ для каждой строки начислений
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
		|	МинимальнаяОплатаТрудаРФ.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерММОТ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|			ПО МинимальнаяОплатаТрудаРФ.Период <= Основной.ПериодДействияНачало
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальностиММОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|		ПО МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности";
		Запрос.Выполнить();
		
		// РазмерММОТ
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		Размер - размер ММОТ
		//	Описание:
		//		получает размер ММОТ для каждой строки начислений
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
		|	МинимальнаяОплатаТрудаРФ.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерММОТНаДатуДатаНачалаСобытия
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|			ПО МинимальнаяОплатаТрудаРФ.Период <= Основной.ДатаНачалаСобытия
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальностиММОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|		ПО МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности";
		Запрос.Выполнить();
		
		// РазмерОграниченияПособия
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		Размер - размер ограничения
		//	Описание:
		//		получает размер ограничения пособия для каждой строки начислений
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.Размер КАК Размер,
		|	РазмерОграниченияПособияПоНетрудоспособности.РазмерПоБеременности
		|ПОМЕСТИТЬ ВТРазмерОграниченияПособия
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности";
		Запрос.Выполнить();
		
		// ПредельнаяВеличинаБазы
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		Размер - размер ограничения
		//	Описание:
		//		получает размер ограничения пособия для каждой строки начислений
		//
		Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредельнаяВеличинаБазыСтраховыхВзносовСрезПоследних.РазмерФСС КАК Размер
		|ПОМЕСТИТЬ ВТПредельнаяВеличинаБазы
		|ИЗ
		|	РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.СрезПоследних(&ДатаЗакона213ФЗ, ) КАК ПредельнаяВеличинаБазыСтраховыхВзносовСрезПоследних";
		Запрос.Выполнить();
		
		// присоединяем данные о размере пособия
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерММОТ КАК РазмерММОТ
		|ПО Основной.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксимальныйРазмерЕжемесячнойСтраховойВыплаты КАК МаксимальныйРазмерЕжемесячнойСтраховойВыплаты
		|ПО Основной.НомерСтроки = МаксимальныйРазмерЕжемесячнойСтраховойВыплаты.ОсновнойНомерСтроки
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерММОТНаДатуДатаНачалаСобытия КАК РазмерММОТНаДатуДатаНачалаСобытия
		|ПО Основной.НомерСтроки = РазмерММОТНаДатуДатаНачалаСобытия.ОсновнойНомерСтроки
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаБазы КАК РазмерОграниченияПособия2010
		|ПО Истина
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОграниченияПособия КАК РазмерОграниченияПособия
		|ПО Основной.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ФактическийПериодДействия" Тогда	
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
		|	ФактическийПериодДействия.ПериодДействияНачало,
		|	ФактическийПериодДействия.ПериодДействияКонец,
		|	ФактическийПериодДействия.ВидРасчета,
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 27.10.2011 14:18 
		|	ФактическийПериодДействия.Показатель1,
		|	ФактическийПериодДействия.AVT_СреднийПроцентВыработки,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|	ФактическийПериодДействия.Сотрудник
		|ПОМЕСТИТЬ ВТФактическийПериодДействия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			Регистратор = &парамРегистратор
		|				И Авторасчет) КАК ФактическийПериодДействия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ВремяВКалендарныхДнях" Тогда	
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
		|	СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ФактическийПериодДействия.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК КалендарныхДней
		|ПОМЕСТИТЬ ВТВремяВКалендарныхДнях
		|ИЗ
		|	ВТФактическийПериодДействия КАК ФактическийПериодДействия
		|ГДЕ
		|	ФактическийПериодДействия.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическийПериодДействия.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяВКалендарныхДнях Как ВремяВКалендарныхДнях
		|ПО Основной.НомерСтроки = ВремяВКалендарныхДнях.НомерСтроки
		|";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "СдельныйЗаработок" Тогда	
		
		// СдельныйЗаработокОрганизацииТекст
		//	Поля:
		//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
		//		РазмерЗаработка - размер сдельного заработка
		//	Описание:
		//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок"
		//
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
		|	СУММА(ФактическаяВыработка.Выработка) КАК СуммаЗаработка,
		|	ЛОЖЬ КАК ОшибкаВводаФактическойВыработки,
		|	Начисления.Показатель1,
		|	Начисления.AVT_СреднийПроцентВыработки КАК AVT_СреднийПроцентВыработки,
		|	ФактическаяВыработка.AVT_Выработка КАК AVT_Выработка,
		|	СУММА(ФактическаяВыработка.AVT_ОтработаноДней) КАК AVT_ОтработаноДней,
		|	СУММА(ФактическаяВыработка.AVT_ОтработаноЧасов) КАК AVT_ОтработаноЧасов,
		|	СУММА(ФактическаяВыработка.AVT_ОтработаноДнейНочью) КАК AVT_ОтработаноДнейНочью,
		|	СУММА(ФактическаяВыработка.AVT_ОтработаноНочныхЧасов) КАК AVT_ОтработаноНочныхЧасов,
		|	СУММА(ФактическаяВыработка.AVT_ОтработаноДнейВПраздники) КАК AVT_ОтработаноДнейВПраздники,
		|	СУММА(ФактическаяВыработка.AVT_ОтработаноЧасовВПраздники) КАК AVT_ОтработаноЧасовВПраздники,
		|	ФактическаяВыработка.Регистратор
		|ПОМЕСТИТЬ ВТФактВыработкаНесгруппированныеДанные
		|ИЗ
		|	ВТФактическийПериодДействия КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
		|		ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
		|			И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
		|			И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.НомерСтроки,
		|	Начисления.Показатель1,
		|	Начисления.AVT_СреднийПроцентВыработки,
		|	ФактическаяВыработка.AVT_Выработка,
		|	ФактическаяВыработка.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БезУчетаСторно.НомерСтроки,
		|	БезУчетаСторно.Выработка,
		|	ВЫБОР
		|		КОГДА БезУчетаСторно.Сотрудник ЕСТЬ НЕ NULL 
		|				И БезУчетаСторно.Выработка ЕСТЬ НЕ NULL 
		|				И БезУчетаСторно.СуммаСторно <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	БезУчетаСторно.Показатель1,
		|	БезУчетаСторно.AVT_СреднийПроцентВыработки,
		|	БезУчетаСторно.AVT_Выработка,
		|	БезУчетаСторно.AVT_ОтработаноДней,
		|	БезУчетаСторно.AVT_ОтработаноЧасов,
		|	БезУчетаСторно.AVT_ОтработаноДнейНочью,
		|	БезУчетаСторно.AVT_ОтработаноНочныхЧасов,
		|	БезУчетаСторно.AVT_ОтработаноДнейВПраздники,
		|	БезУчетаСторно.AVT_ОтработаноЧасовВПраздники,
		|	NULL
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.НомерСтроки КАК НомерСтроки,
		|		СУММА(ФактическаяВыработка.Выработка) КАК Выработка,
		|		СУММА(ВЫБОР
		|				КОГДА ПроверкаКоличестваЗаписей.Сторно
		|					ТОГДА -1
		|				КОГДА ПроверкаКоличестваЗаписей.Сторно = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК СуммаСторно,
		|		ПроверкаКоличестваЗаписей.Сотрудник КАК Сотрудник,
		|		Начисления.AVT_СреднийПроцентВыработки КАК AVT_СреднийПроцентВыработки,
		|		СУММА(ФактическаяВыработка.AVT_ОтработаноЧасов) КАК AVT_ОтработаноЧасов,
		|		СУММА(ФактическаяВыработка.AVT_Выработка) КАК AVT_Выработка,
		|		Начисления.Показатель1 КАК Показатель1,
		|		СУММА(ФактическаяВыработка.AVT_ОтработаноДней) КАК AVT_ОтработаноДней,
		|		СУММА(ФактическаяВыработка.AVT_ОтработаноДнейНочью) КАК AVT_ОтработаноДнейНочью,
		|		СУММА(ФактическаяВыработка.AVT_ОтработаноНочныхЧасов) КАК AVT_ОтработаноНочныхЧасов,
		|		СУММА(ФактическаяВыработка.AVT_ОтработаноДнейВПраздники) КАК AVT_ОтработаноДнейВПраздники,
		|		СУММА(ФактическаяВыработка.AVT_ОтработаноЧасовВПраздники) КАК AVT_ОтработаноЧасовВПраздники
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
		|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
		|				И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
		|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
		|			ПО Начисления.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
		|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
		|				И Начисления.ВидРасчета = ПроверкаКоличестваЗаписей.ВидРасчета
		|				И Начисления.Организация = ПроверкаКоличестваЗаписей.Организация
		|				И (Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
		|				И (ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
		|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
		|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
		|	ГДЕ
		|		Начисления.Регистратор = &парамРегистратор
		|		И Начисления.Авторасчет
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.НомерСтроки,
		|		ФактическаяВыработка.Выработка,
		|		ПроверкаКоличестваЗаписей.Сотрудник,
		|		Начисления.AVT_СреднийПроцентВыработки,
		|		Начисления.Показатель1) КАК БезУчетаСторно
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойНомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТФактВыработкаНесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА ВТФактВыработкаНесгруппированныеДанные.AVT_Выработка > 0
		|				ТОГДА ВЫБОР
		|						КОГДА ВТФактВыработкаНесгруппированныеДанные.AVT_СреднийПроцентВыработки
		|							ТОГДА ВТФактВыработкаНесгруппированныеДанные.AVT_ОтработаноЧасов * ВТФактВыработкаНесгруппированныеДанные.Показатель1 * ВЫБОР
		|									КОГДА ДанныеДляСреднейВыработки.КоличествоНарядов > 0
		|										ТОГДА ДанныеДляСреднейВыработки.ПроцентВыработкиСумма / ДанныеДляСреднейВыработки.КоличествоНарядов
		|									ИНАЧЕ 0
		|								КОНЕЦ / 100
		|						ИНАЧЕ ВТФактВыработкаНесгруппированныеДанные.AVT_ОтработаноЧасов * ВТФактВыработкаНесгруппированныеДанные.Показатель1 * ВТФактВыработкаНесгруппированныеДанные.AVT_Выработка / 100
		|					КОНЕЦ
		|			ИНАЧЕ ВТФактВыработкаНесгруппированныеДанные.СуммаЗаработка
		|		КОНЕЦ) КАК СуммаЗаработка,
		|	СРЕДНЕЕ(ВЫБОР
		|			КОГДА ВТФактВыработкаНесгруппированныеДанные.AVT_СреднийПроцентВыработки
		|				ТОГДА ВЫБОР
		|						КОГДА ДанныеДляСреднейВыработки.КоличествоНарядов > 0
		|							ТОГДА ДанныеДляСреднейВыработки.ПроцентВыработкиСумма / ДанныеДляСреднейВыработки.КоличествоНарядов
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ ВТФактВыработкаНесгруппированныеДанные.AVT_Выработка
		|		КОНЕЦ) КАК ПроцентВыработки,
		|	МАКСИМУМ(ВТФактВыработкаНесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки,
		|	СУММА(ВТФактВыработкаНесгруппированныеДанные.AVT_ОтработаноДней) КАК AVT_ОтработаноДней,
		|	СУММА(ВТФактВыработкаНесгруппированныеДанные.AVT_ОтработаноЧасов) КАК AVT_ОтработаноЧасов,
		|	СУММА(ВТФактВыработкаНесгруппированныеДанные.AVT_ОтработаноДнейНочью) КАК AVT_ОтработаноДнейНочью,
		|	СУММА(ВТФактВыработкаНесгруппированныеДанные.AVT_ОтработаноНочныхЧасов) КАК AVT_ОтработаноНочныхЧасов,
		|	СУММА(ВТФактВыработкаНесгруппированныеДанные.AVT_ОтработаноДнейВПраздники) КАК AVT_ОтработаноДнейВПраздники,
		|	СУММА(ВТФактВыработкаНесгруппированныеДанные.AVT_ОтработаноЧасовВПраздники) КАК AVT_ОтработаноЧасовВПраздники
		|ПОМЕСТИТЬ ВТСдельныйЗаработокОрганизации
		|ИЗ
		|	ВТФактВыработкаНесгруппированныеДанные КАК ВТФактВыработкаНесгруппированныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТФактВыработкаНесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
		|			СУММА(ВТФактВыработкаНесгруппированныеДанные.AVT_Выработка) КАК ПроцентВыработкиСумма,
		|			КОЛИЧЕСТВО(ВТФактВыработкаНесгруппированныеДанные.ОсновнойНомерСтроки) КАК КоличествоНарядов
		|		ИЗ
		|			ВТФактВыработкаНесгруппированныеДанные КАК ВТФактВыработкаНесгруппированныеДанные
		
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТФактВыработкаНесгруппированныеДанные.ОсновнойНомерСтроки) КАК ДанныеДляСреднейВыработки
		|		ПО ВТФактВыработкаНесгруппированныеДанные.ОсновнойНомерСтроки = ДанныеДляСреднейВыработки.ОсновнойНомерСтроки
		
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТФактВыработкаНесгруппированныеДанные.ОсновнойНомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойНомерСтроки";
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
		
		// ЗАКОММЕНТИРОВАНО: Измайлова Полина 27.10.2011 13:53  
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
		//|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
		//|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
		//|ПОМЕСТИТЬ ВТСдельныйЗаработокОрганизации
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
		//|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
		//|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
		//|	ИЗ
		//|		ВТФактическийПериодДействия КАК Начисления
		//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
		//|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
		//|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
		//|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
		//|	
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	
		//|	ВЫБРАТЬ
		//|		БезУчетаСторно.НомерСтроки,
		//|		БезУчетаСторно.Выработка,
		//|		ВЫБОР
		//|			КОГДА БезУчетаСторно.Сотрудник ЕСТЬ НЕ NULL 
		//|					И БезУчетаСторно.Выработка ЕСТЬ НЕ NULL 
		//|					И БезУчетаСторно.СуммаСторно <> 0
		//|				ТОГДА ИСТИНА
		//|			ИНАЧЕ ЛОЖЬ
		//|		КОНЕЦ
		//|	ИЗ
		//|		(ВЫБРАТЬ
		//|			Начисления.НомерСтроки КАК НомерСтроки,
		//|			СУММА(ФактическаяВыработка.Выработка) КАК Выработка,
		//|			СУММА(ВЫБОР
		//|					КОГДА ПроверкаКоличестваЗаписей.Сторно
		//|						ТОГДА -1
		//|					КОГДА ПроверкаКоличестваЗаписей.Сторно = ЛОЖЬ
		//|						ТОГДА 1
		//|					ИНАЧЕ 0
		//|				КОНЕЦ) КАК СуммаСторно,
		//|			ПроверкаКоличестваЗаписей.Сотрудник КАК Сотрудник
		//|		ИЗ
		//|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		//|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
		//|				ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
		//|					И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
		//|					И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)))
		//|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
		//|				ПО Начисления.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
		//|					И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
		//|					И Начисления.ВидРасчета = ПроверкаКоличестваЗаписей.ВидРасчета
		//|					И Начисления.Организация = ПроверкаКоличестваЗаписей.Организация
		//|					И (Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
		//|					И (ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
		//|					И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
		//|							И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
		//|		ГДЕ
		//|			Начисления.Регистратор = &парамРегистратор
		//|			И Начисления.Авторасчет
		//|		
		//|		СГРУППИРОВАТЬ ПО
		//|			Начисления.НомерСтроки,
		//|			ФактическаяВыработка.Выработка,
		//|			ПроверкаКоличестваЗаписей.Сотрудник) КАК БезУчетаСторно) КАК НесгруппированныеДанные
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	НесгруппированныеДанные.ОсновнойНомерСтроки
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	ОсновнойНомерСтроки";
		Запрос.Выполнить();
		
		// присоединяем данные о сдельном заработке
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТСдельныйЗаработокОрганизации КАК ДанныеОСдельномЗаработке
		|ПО Основной.НомерСтроки = ДанныеОСдельномЗаработке.ОсновнойНомерСтроки";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ДоходыОблагаемыеСтраховымиВзносамиЕСН" Тогда
		
		// временная таблица с рассчитываемыми записями
		Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Основной.ФизЛицо КАК ФизЛицо,
			|	Основной.Организация КАК Организация,
			|	НАЧАЛОПЕРИОДА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ПериодДействияБазовый
			|				ТОГДА Основной.ПериодДействияНачало
			|			ИНАЧЕ Основной.БазовыйПериодНачало
			|		КОНЕЦ, МЕСЯЦ) КАК ПериодРасчета,
			|	Основной.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
			|	Основной.НомерСтроки,
			|	Основной.Регистратор,
			|	Основной.ПериодРегистрации
			|ПОМЕСТИТЬ ВТРассчитываемыеЗаписи
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|	И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо,
			|	Организация,
			|	ОбособленноеПодразделение,
			|	ПериодРасчета";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Основной.ФизЛицо КАК ФизЛицо,
			|	Основной.Организация КАК Организация,
			|	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) КАК ПериодРасчета,
			|	Основной.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
			|	Основной.НомерСтроки,
			|	Основной.Регистратор,
			|	НАЧАЛОПЕРИОДА(Основной.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации
			|ПОМЕСТИТЬ ВТРассчитываемыеЗаписи
			|ИЗ
			|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|	И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо,
			|	Организация,
			|	ОбособленноеПодразделение,
			|	ПериодРасчета";
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"УдержанияРаботниковОрганизаций",ИмяРегистра);
		КонецЕсли;
		Запрос.Выполнить();
		
		// ОблагаемыеЕСНДоходы - таблица с облагаемой базой
		//	Поля:
		//		НомерСтроки - номер строки рассчитываемых движений
		//		Результат - сумма доходов физлица за указанный период регистрации
		//	Описание:
		//		выбираются все облагаемые взносами в ПФР доходы физлица, начисленные 
		//      в указанном периоде регистрации по указанному в строке расчета 
		//      обособленному подразделению 
		//
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доходы.НомерСтроки КАК НомерСтроки,
		|	СУММА(Доходы.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТОблагаемыеЕСНДоходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		РассчитываемыеЗаписи.НомерСтроки КАК НомерСтроки,
		|		ДополнительныеНачисленияРаботниковОрганизаций.Результат - ДополнительныеНачисленияРаботниковОрганизаций.СкидкаПриНалогообложении КАК Результат
		|	ИЗ
		|		ВТРассчитываемыеЗаписи КАК РассчитываемыеЗаписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|			ПО РассчитываемыеЗаписи.Организация = ДополнительныеНачисленияРаботниковОрганизаций.Организация
		|				И РассчитываемыеЗаписи.ФизЛицо = ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо
		|				И РассчитываемыеЗаписи.ОбособленноеПодразделение = ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение
		|				И (РассчитываемыеЗаписи.ПериодРасчета = НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ))
		|	ГДЕ
		|		(ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
		|					И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь)
		|					И РассчитываемыеЗаписи.ПериодРегистрации < &ДатаЗаменыЕСНСтраховымиВзносами
		|				ИЛИ ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы.ВходитВБазуПФР
		|					И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь)
		|					И РассчитываемыеЗаписи.ПериодРегистрации >= &ДатаЗаменыЕСНСтраховымиВзносами)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РассчитываемыеЗаписи.НомерСтроки,
		|		ОсновныеНачисленияРаботниковОрганизаций.Результат
		|	ИЗ
		|		ВТРассчитываемыеЗаписи КАК РассчитываемыеЗаписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|			ПО РассчитываемыеЗаписи.ПериодРасчета = ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации
		|				И РассчитываемыеЗаписи.Организация = ОсновныеНачисленияРаботниковОрганизаций.Организация
		|				И РассчитываемыеЗаписи.ФизЛицо = ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
		|				И РассчитываемыеЗаписи.ОбособленноеПодразделение = ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение
		|	ГДЕ
		|		(ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
		|					И РассчитываемыеЗаписи.ПериодРегистрации < &ДатаЗаменыЕСНСтраховымиВзносами
		|				ИЛИ ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы.ВходитВБазуПФР
		|					И РассчитываемыеЗаписи.ПериодРегистрации >= &ДатаЗаменыЕСНСтраховымиВзносами)) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ДатаЗаменыЕСНСтраховымиВзносами", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТОблагаемыеЕСНДоходы КАК ОблагаемыеЕСНДоходы
		|ПО Основной.НомерСтроки = ОблагаемыеЕСНДоходы.НомерСтроки";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "УдержаноПоДокументу" Тогда
		
		// НакопленныеДанные
		// уже начислено по другим регистраторам в данном расчетном периоде и за всю историю
		// применяется для расчета удержаний "нарастающим итогом за месяц"
		//	Поля:
		//		Сотрудник
		//		ДокументОснование
		//		ВидРасчета
		//		УжеНачисленоВТекущемПериоде
		//		УжеНачисленоЗаВсюИсторию
		//	Описание:
		//		суммирует результаты по видам расчета и документам-основаниям
		//
		НакопленныеДанныеТекст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА Основной.ПериодРегистрации = НакопленныеДанные.ПериодРегистрации
		|					И Основной.БазовыйПериодНачало <= НакопленныеДанные.БазовыйПериодНачало
		|					И Основной.БазовыйПериодКонец >= НакопленныеДанные.БазовыйПериодКонец
		|				ТОГДА НакопленныеДанные.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК УжеНачисленоВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА НакопленныеДанные.ПериодРегистрации <= Основной.ПериодРегистрации
		|					И Основной.БазовыйПериодНачало >= НакопленныеДанные.БазовыйПериодНачало
		|				ТОГДА НакопленныеДанные.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК УжеНачисленоЗаВсюИсторию,
		|	НакопленныеДанные.ФизЛицо КАК ФизЛицо,
		|	НакопленныеДанные.ВидРасчета КАК ВидРасчета,
		|	НакопленныеДанные.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТНакопленныеДанные
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК НакопленныеДанные
		|		ПО Основной.ФизЛицо = НакопленныеДанные.ФизЛицо
		|			И Основной.ВидРасчета = НакопленныеДанные.ВидРасчета
		|			И Основной.ПериодРегистрации >= НакопленныеДанные.ПериодРегистрации
		|			И Основной.Организация = НакопленныеДанные.Организация
		|			И Основной.ДокументОснование = НакопленныеДанные.ДокументОснование
		|			И Основной.Регистратор <> НакопленныеДанные.Регистратор
		|			И Основной.Сторно = НакопленныеДанные.Сторно
		|ГДЕ
		|	Основной.Регистратор = &парамРегистратор
		|	И Основной.Авторасчет
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеДанные.ФизЛицо,
		|	НакопленныеДанные.ВидРасчета,
		|	НакопленныеДанные.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	ВидРасчета,
		|	ДокументОснование";
		
		Запрос.Текст = НакопленныеДанныеТекст;
		Запрос.Выполнить();
		
		// присоединяем сводные данные по документу основанию
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеДанные КАК НакопленныеДанные
		|ПО НакопленныеДанные.Физлицо = Основной.Физлицо
		|	И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета
		|	И НакопленныеДанные.ДокументОснование = Основной.ДокументОснование";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПочтовыеПереводы" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Основная.ФизЛицо КАК ФизЛицо,
		|	Основная.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДополнительнаяСт.ДокументОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|	КОНЕЦ КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыПочтовогоСбора
		|					И Основная.ПорядокИсчисленияИздержек <> ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка)
		|				ИЛИ Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыБанковНаДенежныеПереводы
		|					И Основная.ПорядокИсчисленияИздержек <> ЗНАЧЕНИЕ(Справочник.ТарифыБанковНаДенежныеПереводы.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоТарифу,
		|	ВЫБОР
		|		КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ДополнительнаяСт.Результат, 0)
		|		ИНАЧЕ ЕСТЬNULL(Дополнительная.Результат, 0)
		|	КОНЕЦ КАК СуммаАлиментов,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ВЫБОР
		|						КОГДА Основная.ПорядокИсчисленияИздержек В (ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ТарифыБанковНаДенежныеПереводы.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
		|							ТОГДА ДополнительнаяСт.Результат
		|						ИНАЧЕ ВЫБОР
		|								КОГДА ДополнительнаяСт.Результат = 0
		|									ТОГДА 0
		|								ИНАЧЕ (ДополнительнаяСт.Результат - ЕСТЬNULL(ДополнительнаяСт.ЗначениеС, 0)) * ЕСТЬNULL(ДополнительнаяСт.Процент, 0) / 100 + ЕСТЬNULL(ДополнительнаяСт.Сумма, 0)
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОГДА ТИПЗНАЧЕНИЯ(Основная.ПорядокИсчисленияИздержек) = ТИП(ЧИСЛО)
		|				ТОГДА Дополнительная.Результат
		|			КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыПочтовогоСбора
		|				ТОГДА ВЫБОР
		|						КОГДА Дополнительная.Результат = 0
		|							ТОГДА 0
		|						ИНАЧЕ (Дополнительная.Результат - Дополнительная.ЗначениеС) * Дополнительная.Процент / 100 + Дополнительная.Сумма
		|					КОНЕЦ
		|			КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыБанковНаДенежныеПереводы
		|				ТОГДА ВЫБОР
		|						КОГДА Дополнительная.БанковскиеИздержки = 0
		|							ТОГДА 0
		|						КОГДА Дополнительная.БанковскиеИздержки < Дополнительная.МинимальныйТариф
		|							ТОГДА Дополнительная.МинимальныйТариф
		|						КОГДА Дополнительная.БанковскиеИздержки > Дополнительная.МаксимальныйТариф
		|								И Дополнительная.МаксимальныйТариф > 0
		|							ТОГДА Дополнительная.МаксимальныйТариф
		|						ИНАЧЕ Дополнительная.БанковскиеИздержки
		|					КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК РазмерПочтовогоПеревода,
		|	Дополнительная.Процент КАК Процент,
		|	ЕСТЬNULL(Основная.ПорядокИсчисленияИздержек, 0) КАК ПорядокИсчисленияИздержек,
		|	ЕСТЬNULL(Основная.Получатель, ЗНАЧЕНИЕ(Справочник.КОнтрагенты.ПустаяСсылка)) КАК Получатель
		|ПОМЕСТИТЬ ВТПочтовыеПереводыТекст
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основная
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
		|			Дополнительная.ФизЛицо КАК ФизЛицо,
		|			Дополнительная.Организация КАК Организация,
		|			Дополнительная.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
		|			Дополнительная.Получатель КАК Получатель,
		|			Дополнительная.ВидРасчета КАК ВидРасчета,
		|			РасчетБазыДляТарифа.БазаДляТарифа КАК Результат,
		|			ЕСТЬNULL(ВЫБОР
		|					КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
		|						ТОГДА 0
		|					ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
		|				КОНЕЦ, 0) КАК ЗначениеС,
		|			ВЫБОР
		|				КОГДА (НЕ РазмерыТарифовПочтовогоСбора.Процент ЕСТЬ NULL )
		|					ТОГДА РазмерыТарифовПочтовогоСбора.Процент
		|				КОГДА (НЕ ТарифыБанков.Процент ЕСТЬ NULL )
		|					ТОГДА ТарифыБанков.Процент
		|				ИНАЧЕ Дополнительная.Показатель1
		|			КОНЕЦ КАК Процент,
		|			ЕСТЬNULL(РазмерыТарифовПочтовогоСбора.Сумма, 0) КАК Сумма,
		|			ЕСТЬNULL(ТарифыБанков.МинимальныйТариф, 0) КАК МинимальныйТариф,
		|			ЕСТЬNULL(ТарифыБанков.МаксимальныйТариф, 0) КАК МаксимальныйТариф,
		|			РасчетБазыДляТарифа.БазаДляТарифа * ЕСТЬNULL(ТарифыБанков.Процент, 0) / 100 КАК БанковскиеИздержки
		|		ИЗ
		|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
		|					Дополнительная.ФизЛицо КАК ФизЛицо,
		|					Дополнительная.Организация КАК Организация,
		|					СУММА(Дополнительная.Результат) КАК БазаДляТарифа,
		|					Дополнительная.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
		|					Дополнительная.Получатель КАК Получатель
		|				ИЗ
		|					РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
		|				ГДЕ
		|					Дополнительная.Регистратор = &парамРегистратор
		|					И (НЕ Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки)))
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Дополнительная.ПериодРегистрации,
		|					Дополнительная.ФизЛицо,
		|					Дополнительная.Организация,
		|					Дополнительная.ПорядокИсчисленияИздержек,
		|					Дополнительная.Получатель) КАК РасчетБазыДляТарифа
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
		|					ПО РасчетБазыДляТарифа.БазаДляТарифа >= РазмерыТарифовПочтовогоСбора.ЗначениеС
		|						И (РасчетБазыДляТарифа.БазаДляТарифа < ВЫБОР
		|							КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
		|								ТОГДА 99999999
		|							ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
		|						КОНЕЦ)
		|						И РасчетБазыДляТарифа.ПорядокИсчисленияИздержек = РазмерыТарифовПочтовогоСбора.Тариф
		|				ПО Дополнительная.ПериодРегистрации = РасчетБазыДляТарифа.ПериодРегистрации
		|					И Дополнительная.ФизЛицо = РасчетБазыДляТарифа.ФизЛицо
		|					И Дополнительная.ПорядокИсчисленияИздержек = РасчетБазыДляТарифа.ПорядокИсчисленияИздержек
		|					И Дополнительная.Получатель = РасчетБазыДляТарифа.Получатель
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифыБанковНаДенежныеПереводы КАК ТарифыБанков
		|				ПО Дополнительная.ПорядокИсчисленияИздержек = ТарифыБанков.Ссылка
		|		ГДЕ
		|			Дополнительная.Регистратор = &парамРегистратор
		|			И Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Дополнительная.ПериодРегистрации,
		|			Дополнительная.ФизЛицо,
		|			Дополнительная.Организация,
		|			Дополнительная.ВидРасчета,
		|			Дополнительная.ПорядокИсчисленияИздержек,
		|			Дополнительная.Получатель,
		|			РасчетБазыДляТарифа.БазаДляТарифа,
		|			ВЫБОР
		|				КОГДА (НЕ РазмерыТарифовПочтовогоСбора.Процент ЕСТЬ NULL )
		|					ТОГДА РазмерыТарифовПочтовогоСбора.Процент
		|				КОГДА (НЕ ТарифыБанков.Процент ЕСТЬ NULL )
		|					ТОГДА ТарифыБанков.Процент
		|				ИНАЧЕ Дополнительная.Показатель1
		|			КОНЕЦ,
		|			РасчетБазыДляТарифа.БазаДляТарифа * ЕСТЬNULL(ТарифыБанков.Процент, 0) / 100,
		|			ЕСТЬNULL(РазмерыТарифовПочтовогоСбора.Сумма, 0),
		|			ЕСТЬNULL(ТарифыБанков.МинимальныйТариф, 0),
		|			ЕСТЬNULL(ТарифыБанков.МаксимальныйТариф, 0),
		|			ЕСТЬNULL(ВЫБОР
		|					КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
		|						ТОГДА 0
		|					ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
		|				КОНЕЦ, 0)) КАК Дополнительная
		|		ПО Основная.ПериодРегистрации = Дополнительная.ПериодРегистрации
		|			И Основная.ФизЛицо = Дополнительная.ФизЛицо
		|			И Основная.Организация = Дополнительная.Организация
		|			И Основная.ВидРасчета = Дополнительная.ВидРасчета
		|			И Основная.Получатель = Дополнительная.Получатель
		|			И Основная.ПорядокИсчисленияИздержек = Дополнительная.ПорядокИсчисленияИздержек
		|			И (ВЫБОР
		|				КОГДА Основная.ПорядокИсчисленияИздержек В (ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ТарифыБанковНаДенежныеПереводы.ПустаяСсылка))
		|					ТОГДА Основная.Показатель1 = Дополнительная.Процент
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
		|			Дополнительная.ФизЛицо КАК ФизЛицо,
		|			Дополнительная.Организация КАК Организация,
		|			Дополнительная.ДокументОснование КАК ДокументОснование,
		|			Дополнительная.ВидРасчета КАК ВидРасчета,
		|			СУММА(Дополнительная.Результат) КАК Результат,
		|			ВЫБОР
		|				КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
		|					ТОГДА 0
		|				ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
		|			КОНЕЦ КАК ЗначениеС,
		|			РазмерыТарифовПочтовогоСбора.Процент КАК Процент,
		|			РазмерыТарифовПочтовогоСбора.Сумма КАК Сумма
		|		ИЗ
		|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
		|				ПО Дополнительная.ПорядокИсчисленияИздержек = РазмерыТарифовПочтовогоСбора.Тариф
		|					И Дополнительная.Результат >= РазмерыТарифовПочтовогоСбора.ЗначениеС
		|					И (Дополнительная.Результат < ВЫБОР
		|						КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
		|							ТОГДА 99999999
		|						ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
		|					КОНЕЦ)
		|		ГДЕ
		|			Дополнительная.Регистратор = &парамРегистратор
		|			И (НЕ Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки)))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Дополнительная.ПериодРегистрации,
		|			Дополнительная.ФизЛицо,
		|			Дополнительная.Организация,
		|			Дополнительная.ДокументОснование,
		|			Дополнительная.ВидРасчета,
		|			РазмерыТарифовПочтовогоСбора.Процент,
		|			РазмерыТарифовПочтовогоСбора.Сумма,
		|			ВЫБОР
		|				КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
		|					ТОГДА 0
		|				ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
		|			КОНЕЦ) КАК ДополнительнаяСт
		|		ПО Основная.ПериодРегистрации = ДополнительнаяСт.ПериодРегистрации
		|			И Основная.ФизЛицо = ДополнительнаяСт.ФизЛицо
		|			И Основная.Организация = ДополнительнаяСт.Организация
		|			И Основная.ДокументОснование = ДополнительнаяСт.ДокументОснование
		|			И Основная.ВидРасчета <> ДополнительнаяСт.ВидРасчета
		|ГДЕ
		|	Основная.Регистратор = &парамРегистратор
		|	И (ЕСТЬNULL(Дополнительная.Результат, 0) <> 0
		|				И Дополнительная.Получатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ Основная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки)))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	ДокументОснование,
		|	Организация,
		|	Получатель";
		Запрос.Выполнить();
		
		// присоединяем данные для расчета почтового перевода
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПочтовыеПереводыТекст КАК ПочтовыеПереводы
		|ПО Основной.Физлицо = ПочтовыеПереводы.Физлицо И
		|Основной.Организация = ПочтовыеПереводы.Организация И
		|Основной.ДокументОснование = ПочтовыеПереводы.ДокументОснование И
		|Основной.Получатель = ПочтовыеПереводы.Получатель И
		|Основной.ПорядокИсчисленияИздержек = ПочтовыеПереводы.ПорядокИсчисленияИздержек";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "АлиментыВПрожиточныхМинимумах" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Периоды.НомерСтроки,
		|	Периоды.Регистратор,
		|	ВеличинаПрожиточногоМинимума.Размер
		|ПОМЕСТИТЬ ВТПрожиточныеМинимумы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		Основной.Регистратор КАК Регистратор,
		|		МАКСИМУМ(ВеличинаПрожиточногоМинимума.Период) КАК Период,
		|		Основной.ДополнительныеДанные КАК ДополнительныеДанные
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВеличинаПрожиточногоМинимума КАК ВеличинаПрожиточногоМинимума
		|			ПО Основной.ДополнительныеДанные = ВеличинаПрожиточногоМинимума.ПрожиточныйМинимум
		|				И Основной.БазовыйПериодНачало >= ВеличинаПрожиточногоМинимума.Период
		|	ГДЕ
		|		Основной.Регистратор = &парамРегистратор
		|		И Основной.Авторасчет
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки,
		|		Основной.Регистратор,
		|		Основной.ДополнительныеДанные) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВеличинаПрожиточногоМинимума КАК ВеличинаПрожиточногоМинимума
		|		ПО Периоды.ДополнительныеДанные = ВеличинаПрожиточногоМинимума.ПрожиточныйМинимум
		|			И Периоды.Период = ВеличинаПрожиточногоМинимума.Период";
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПрожиточныеМинимумы КАК ПрожиточныеМинимумы
		|ПО ПрожиточныеМинимумы.НомерСтроки = Основной.НомерСтроки
		|	И ПрожиточныеМинимумы.Регистратор = Основной.Регистратор";
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "СреднийЗаработокПособий2011" Тогда
		
		Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
		Запрос.УстановитьПараметр("ВидРасчета", ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.СреднийЗаработок, "ПоЗаработкуПособийС2011"));
		
		Годы365дней = Новый Массив;
		ГодСобытия = Год(ОбщегоНазначенияЗК.ПолучитьРабочуюДату()) + 1;
		Для Сч = 1 По 30 Цикл
			Если ДеньГода(КонецГода(Дата(ГодСобытия - Сч, 1, 1))) = 365 Тогда
				Годы365дней.Добавить(ГодСобытия - Сч)
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("Годы365дней", Годы365дней);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеПоБольничномуЛистуГодыРасчетаСреднего2011.Год,
		|	ВЫБОР
		|		КОГДА НачислениеПоБольничномуЛистуГодыРасчетаСреднего2011.Год В (&Годы365дней)
		|			ТОГДА 365
		|		ИНАЧЕ 366
		|	КОНЕЦ КАК ОтработаноДнейДляПособийПоМатеринству,
		|	НачислениеПоБольничномуЛистуГодыРасчетаСреднего2011.Ссылка.Физлицо,
		|	НачислениеПоБольничномуЛистуГодыРасчетаСреднего2011.Ссылка.ДатаНачалаСобытия
		|ПОМЕСТИТЬ ВТГодыРасчетаСреднего
		|ИЗ
		|	Документ.НачислениеПоБольничномуЛисту.ГодыРасчетаСреднего2011 КАК НачислениеПоБольничномуЛистуГодыРасчетаСреднего2011
		|ГДЕ
		|	НачислениеПоБольничномуЛистуГодыРасчетаСреднего2011.Ссылка = &парамРегистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускПоУходуЗаРебенкомГодыРасчетаСреднего2011.Год,
		|	ВЫБОР
		|		КОГДА ОтпускПоУходуЗаРебенкомГодыРасчетаСреднего2011.Год В (&Годы365дней)
		|			ТОГДА 365
		|		ИНАЧЕ 366
		|	КОНЕЦ,
		|	ОтпускПоУходуЗаРебенкомГодыРасчетаСреднего2011.Ссылка.Физлицо,
		|	ОтпускПоУходуЗаРебенкомГодыРасчетаСреднего2011.Ссылка.ДатаНачала
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком.ГодыРасчетаСреднего2011 КАК ОтпускПоУходуЗаРебенкомГодыРасчетаСреднего2011
		|ГДЕ
		|	ОтпускПоУходуЗаРебенкомГодыРасчетаСреднего2011.Ссылка = &парамРегистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетСреднегоЗаработка.Результат КАК Результат,
		|	РасчетСреднегоЗаработка.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	РасчетСреднегоЗаработка.ФизЛицо,
		|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
		|	РасчетСреднегоЗаработка.ОтработаноДней
		|ПОМЕСТИТЬ ВТДанныеРегистраРасчета
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|ГДЕ
		|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|	И РасчетСреднегоЗаработка.ВидРасчета = &ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасчетСреднегоЗаработка.Результат) КАК Результат,
		|	РасчетСреднегоЗаработка.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	РасчетСреднегоЗаработка.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД) КАК РасчетныйГод,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД) < &ДатаЗакона213ФЗ
		|			ТОГДА &ДатаЗакона213ФЗ
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД)
		|	КОНЕЦ КАК ДатаОграниченияЗаработка,
		|	МАКСИМУМ(ДЕНЬГОДА(КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД))) - СУММА(РасчетСреднегоЗаработка.ОтработаноДней) КАК ОтработаноДнейДляПособийПоМатеринству,
		|	СУММА(РасчетСреднегоЗаработка.ОтработаноДней) КАК ИсключаемыхДней
		|ПОМЕСТИТЬ ВТДанныеРегистраСреднего2011
		|ИЗ
		|	ВТДанныеРегистраРасчета КАК РасчетСреднегоЗаработка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетСреднегоЗаработка.ДатаНачалаСобытия,
		|	РасчетСреднегоЗаработка.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД),
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД) < &ДатаЗакона213ФЗ
		|			ТОГДА &ДатаЗакона213ФЗ
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД)
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ГодыРасчетаСреднего.ДатаНачалаСобытия,
		|	ГодыРасчетаСреднего.Физлицо,
		|	ГодыРасчетаСреднего.ДатаНачалаСобытия,
		|	НАЧАЛОПЕРИОДА(ГодыРасчетаСреднего.ДатаНачалаСобытия, ГОД),
		|	ГодыРасчетаСреднего.ОтработаноДнейДляПособийПоМатеринству,
		|	0
		|ИЗ
		|	ВТГодыРасчетаСреднего КАК ГодыРасчетаСреднего
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегистраРасчета КАК ДанныеРегистраРасчета
		|		ПО ГодыРасчетаСреднего.Физлицо = ДанныеРегистраРасчета.ФизЛицо
		|			И ГодыРасчетаСреднего.ДатаНачалаСобытия = ДанныеРегистраРасчета.ДатаНачалаСобытия
		|			И (ГодыРасчетаСреднего.Год = ГОД(ДанныеРегистраРасчета.БазовыйПериодНачало))
		|ГДЕ
		|	ДанныеРегистраРасчета.ФизЛицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ГодыРасчетаСреднего.ДатаНачалаСобытия,
		|	ГодыРасчетаСреднего.Физлицо,
		|	ГодыРасчетаСреднего.ОтработаноДнейДляПособийПоМатеринству,
		|	ГодыРасчетаСреднего.ДатаНачалаСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыРегистра.ДатаОграниченияЗаработка,
		|	ЕСТЬNULL(ПредельнаяВеличинаБазыСтраховыхВзносов.РазмерФСС, 0) КАК Размер
		|ПОМЕСТИТЬ ВТПредельнаяВеличинаЗаработкаПоГодам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеРегистра.ДатаОграниченияЗаработка КАК ДатаОграниченияЗаработка,
		|		МАКСИМУМ(ПредельнаяВеличинаБазыСтраховыхВзносов.Период) КАК ПериодРегистра
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ДанныеРегистра.ДатаОграниченияЗаработка КАК ДатаОграниченияЗаработка
		|		ИЗ
		|			ВТДанныеРегистраСреднего2011 КАК ДанныеРегистра
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаНачалаСобытия, ГОД), МЕСЯЦ, -12)
		|		ИЗ
		|			ВТДанныеРегистраСреднего2011 КАК ДанныеРегистра
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаНачалаСобытия, ГОД), МЕСЯЦ, -24)
		|		ИЗ
		|			ВТДанныеРегистраСреднего2011 КАК ДанныеРегистра) КАК ДанныеРегистра
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов КАК ПредельнаяВеличинаБазыСтраховыхВзносов
		|			ПО ДанныеРегистра.ДатаОграниченияЗаработка >= ПредельнаяВеличинаБазыСтраховыхВзносов.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеРегистра.ДатаОграниченияЗаработка) КАК ДатыРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов КАК ПредельнаяВеличинаБазыСтраховыхВзносов
		|		ПО ДатыРегистра.ПериодРегистра = ПредельнаяВеличинаБазыСтраховыхВзносов.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеРегистраСреднего.Результат <= ПредельнаяВеличинаЗаработка.Размер
		|				ТОГДА ДанныеРегистраСреднего.Результат
		|			ИНАЧЕ ПредельнаяВеличинаЗаработка.Размер
		|		КОНЕЦ) КАК ОграниченныйЗаработок,
		|	ДанныеРегистраСреднего.ДатаНачалаСобытия,
		|	ДанныеРегистраСреднего.ФизЛицо,
		|	СУММА(ДанныеРегистраСреднего.Результат) КАК Заработок,
		|	СУММА(ДанныеРегистраСреднего.ОтработаноДнейДляПособийПоМатеринству) КАК ОтработаноДнейДляПособийПоМатеринству,
		|	(ЕСТЬNULL(ПредельнаяВеличинаПредыдущегоГода.Размер, 0) + ЕСТЬNULL(ПредельнаяВеличинаДваГодаНазад.Размер, 0)) / 730 КАК МаксимальныйСреднийДвухПредшествующихКалендарныхЛет,
		|	СУММА(ДанныеРегистраСреднего.ИсключаемыхДней) КАК ИсключаемыхДнейДляПособийПоМатеринству
		|ПОМЕСТИТЬ ВТДанныеОСреднемЗаработке2011
		|ИЗ
		|	ВТДанныеРегистраСреднего2011 КАК ДанныеРегистраСреднего
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаЗаработкаПоГодам КАК ПредельнаяВеличинаЗаработка
		|		ПО ДанныеРегистраСреднего.ДатаОграниченияЗаработка = ПредельнаяВеличинаЗаработка.ДатаОграниченияЗаработка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаЗаработкаПоГодам КАК ПредельнаяВеличинаПредыдущегоГода
		|		ПО (ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеРегистраСреднего.ДатаНачалаСобытия, ГОД), МЕСЯЦ, -12) = ПредельнаяВеличинаПредыдущегоГода.ДатаОграниченияЗаработка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаЗаработкаПоГодам КАК ПредельнаяВеличинаДваГодаНазад
		|		ПО (ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеРегистраСреднего.ДатаНачалаСобытия, ГОД), МЕСЯЦ, -24) = ПредельнаяВеличинаДваГодаНазад.ДатаОграниченияЗаработка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистраСреднего.ДатаНачалаСобытия,
		|	ДанныеРегистраСреднего.ФизЛицо,
		|	(ЕСТЬNULL(ПредельнаяВеличинаПредыдущегоГода.Размер, 0) + ЕСТЬNULL(ПредельнаяВеличинаДваГодаНазад.Размер, 0)) / 730
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыРегистра.ДатаНачалаСобытия,
		|	ДатыРегистра.Сотрудник,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= ДатыРегистра.ДатаНачалаСобытия
		|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА ВЫБОР
		|						КОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
		|								И РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|								И РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели <> 0
		|							ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.ДлительностьРабочейНедели / РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА РаботникиОрганизаций.ГрафикРаботы.СокращенноеРабочееВремя
		|					И РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|					И РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели <> 0
		|				ТОГДА РаботникиОрганизаций.ГрафикРаботы.ДлительностьРабочейНедели / РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|			ИНАЧЕ 1
		|		КОНЕЦ, 0) КАК Доля
		|ПОМЕСТИТЬ ВТПродолжительностьРабочегоВремени
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДанныеРегистра.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|		ДанныеРегистра.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК ДанныеРегистра
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО ДанныеРегистра.ДатаНачалаСобытия >= РаботникиОрганизаций.Период
		|				И ДанныеРегистра.Сотрудник = РаботникиОрганизаций.Сотрудник
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеРегистра.ДатаНачалаСобытия,
		|		ДанныеРегистра.Сотрудник) КАК ДатыРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ДатыРегистра.ПериодРегистра = РаботникиОрганизаций.Период
		|			И ДатыРегистра.Сотрудник = РаботникиОрганизаций.Сотрудник";
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьРабочегоВремени КАК ПродолжительностьРабочегоВремени
		|		ПО Основной.Сотрудник = ПродолжительностьРабочегоВремени.Сотрудник
		|			И Основной.ДатаНачалаСобытия = ПродолжительностьРабочегоВремени.ДатаНачалаСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСреднемЗаработке2011 КАК ДанныеОСреднемЗаработке2011
		|		ПО Основной.ФизЛицо = ДанныеОСреднемЗаработке2011.ФизЛицо
		|			И Основной.ДатаНачалаСобытия = ДанныеОСреднемЗаработке2011.ДатаНачалаСобытия";
		
	КонецЕсли;
	
	// алгоритмы прочих расчетов
	
	Если ИмяАлгоритма = "РасчетнаяБазаСреднегоЗаработка" Тогда	
		
		НачалоТекстаЗапроса = 
		"ВЫБРАТЬ
		|	РасчетСреднегоЗаработка.НомерСтроки,
		|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
		|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода,
		|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
		|	РасчетСреднегоЗаработка.ПериодРегистрации,
		|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
		|	РасчетСреднегоЗаработка.БазовыйПериодКонец,
		|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
		|	РасчетСреднегоЗаработка.Сотрудник.Физлицо КАК ФизЛицо,
		|	РасчетСреднегоЗаработка.Сотрудник.Организация КАК Организация,
		|	РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета,
		|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета КАК БазовыйВидРасчета,
		|	ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1 КАК ГодУчетаПремийПоИтогамГода
		|ПОМЕСТИТЬ ВТСтрокиСреднегоЗаработка
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|		ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
		|ГДЕ
		|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтраховыеВзносыСведенияОДоходахОбороты.Период КАК Период,
		|	СтраховыеВзносыСведенияОДоходахОбороты.ФизЛицо КАК ФизЛицо,
		|	СтраховыеВзносыСведенияОДоходахОбороты.Организация КАК Организация,
		|	СтраховыеВзносыСведенияОДоходахОбороты.ВидДохода КАК ВидДохода,
		|	СтраховыеВзносыСведенияОДоходахОбороты.СкидкаОборот
		|ПОМЕСТИТЬ ВТДанныеУчетаСкидок
		|ИЗ
		|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
		|			&парамДатаС,
		|			&парамДатаПо,
		|			Месяц,
		|			(ФизЛицо, Организация) В
		|					(ВЫБРАТЬ
		|						СтрокиСреднегоЗаработка.ФизЛицо,
		|						СтрокиСреднегоЗаработка.Организация
		|					ИЗ
		|						ВТСтрокиСреднегоЗаработка КАК СтрокиСреднегоЗаработка)
		|				И ВидДохода В (ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПрокуроров), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенкаПрокуроров), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка))) КАК СтраховыеВзносыСведенияОДоходахОбороты
		|ГДЕ
		|	СтраховыеВзносыСведенияОДоходахОбороты.Период >= &ДатаЗакона213ФЗ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ),
		|	ЕСНСведенияОДоходах.ФизЛицо,
		|	ЕСНСведенияОДоходах.Организация,
		|	ЕСНСведенияОДоходах.КодДоходаЕСН,
		|	СУММА(ЕСНСведенияОДоходах.Скидка)
		|ИЗ
		|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
		|ГДЕ
		|	(ЕСНСведенияОДоходах.ФизЛицо, ЕСНСведенияОДоходах.Организация) В
		|			(ВЫБРАТЬ
		|				СтрокиСреднегоЗаработка.ФизЛицо,
		|				СтрокиСреднегоЗаработка.Организация
		|			ИЗ
		|				ВТСтрокиСреднегоЗаработка КАК СтрокиСреднегоЗаработка)
		|	И ЕСНСведенияОДоходах.КодДоходаЕСН В (ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.МатпомощьПриРожденииРебенка))
		|	И ЕСНСведенияОДоходах.Период МЕЖДУ &парамДатаС И &парамДатаПо
		|	И ЕСНСведенияОДоходах.Период < &ДатаЗакона213ФЗ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСНСведенияОДоходах.ФизЛицо,
		|	ЕСНСведенияОДоходах.Организация,
		|	ЕСНСведенияОДоходах.КодДоходаЕСН,
		|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидДохода,
		|	ФизЛицо,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазаДополнительныеНачисления.РезультатБаза,
		|	БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
		|	БазаДополнительныеНачисления.НомерСтроки,
		|	БазаДополнительныеНачисления.ФизЛицо КАК ФизЛицо,
		|	БазаДополнительныеНачисления.Организация КАК Организация,
		|	БазаДополнительныеНачисления.ВидРасчетаРазрез,
		|	ВЫБОР
		|		КОГДА БазаДополнительныеНачисления.БазовыйПериодНачало < &ДатаЗакона213ФЗ
		|			ТОГДА БазаДополнительныеНачисления.ВидРасчетаРазрез.КодДоходаЕСН
		|		ИНАЧЕ БазаДополнительныеНачисления.ВидРасчетаРазрез.КодДоходаСтраховыеВзносы
		|	КОНЕЦ КАК КодДоходаСтраховыеВзносы,
		|	БазаДополнительныеНачисления.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	БазаДополнительныеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало
		|ПОМЕСТИТЬ ВТБазаДопНачисленийПоБЛ
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|			&парамИзмерения,
		|			&парамИзмерения,
		|			&парамРазрезыБЛ,
		|			Регистратор = &парамРегистратор
		|				И ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010))) КАК БазаДополнительныеНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БазовыйПериодНачало,
		|	КодДоходаСтраховыеВзносы,
		|	ФизЛицо,
		|	Организация" 
		+ ";" + Символы.ПС;
		
		Если КомментироватьРасчет Тогда
			
			Запрос.Текст = НачалоТекстаЗапроса +
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(База.РезультатБаза), 0) КАК РезультатБаза,
			|	ЕСТЬNULL(СУММА(База.СкидкаПоСтраховымВзносам), 0) КАК СкидкаПоСтраховымВзносам,
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.ВидРасчетаРазрез,
			|	База.ВидРасчетаРазрез.Наименование КАК ВидРасчетаНаименование,
			|	База.НомерСтроки КАК НомерСтроки,
			|	База.ОшибкаВводаСводногоТабеля,
			|	База.ДополнительноУменьшатьПропорциональныеПремии
			|ИЗ
			|	(ВЫБРАТЬ
			|		БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
			|		1 КАК ЧислоМесяцев,
			|		БазаОсновныеНачисления.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
			|		БазаОсновныеНачисления.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
			|		БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ОтработанноеВремя.Период ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ОшибкаВводаСводногоТабеля,
			|		0 КАК СкидкаПоСтраховымВзносам,
			|		ВЫБОР
			|			КОГДА БазаОсновныеНачисления.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА БазаОсновныеНачисления.ДатаНачалаБазовогоПериодаРазрез = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА БазаОсновныеНачисления.ДатаНачалаБазовогоПериодаРазрез МЕЖДУ БазаОсновныеНачисления.ДатаНачалаРасчетногоПериода И БазаОсновныеНачисления.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ДополнительноУменьшатьПропорциональныеПремии
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезы,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработок)
			|					И (БазовыйПериодНачало <> НАЧАЛОПЕРИОДА(БазовыйПериодНачало, МЕСЯЦ)
			|						ИЛИ БазовыйПериодКонец <> КОНЕЦПЕРИОДА(БазовыйПериодКонец, МЕСЯЦ))) КАК БазаОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|			ПО БазаОсновныеНачисления.Сотрудник = ОтработанноеВремя.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(БазаОсновныеНачисления.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.Период)
			|				И (ОтработанноеВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
			|				И (ОтработанноеВремя.ВЦеломЗаПериод)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисленияРаботниковОрганизаций.Результат,
			|		1,
			|		ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ))
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамЗаработок)
			|		И РасчетСреднегоЗаработка.БазовыйПериодНачало = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ)
			|		И РасчетСреднегоЗаработка.БазовыйПериодКонец = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, МЕСЯЦ)
			|		И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза,
			|		ВЫБОР
			|			КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
			|				ТОГДА 1
			|			ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
			|		КОНЕЦ,
			|		БазаДополнительныеНачисления.ВидРасчетаРазрез,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА БазаДополнительныеНачисления.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА БазаДополнительныеНачисления.ДатаНачалаБазовогоПериодаРазрез = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА БазаДополнительныеНачисления.ДатаНачалаБазовогоПериодаРазрез МЕЖДУ БазаДополнительныеНачисления.ДатаНачалаРасчетногоПериода И БазаДополнительныеНачисления.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезыДоп,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработокБезБольничных)) КАК БазаДополнительныеНачисления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза - ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0),
			|		1,
			|		БазаДополнительныеНачисления.ВидРасчетаРазрез,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0),
			|		ЛОЖЬ
			|	ИЗ
			|		ВТБазаДопНачисленийПоБЛ КАК БазаДополнительныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаСкидок КАК ДанныеУчетаСкидок
			|			ПО БазаДополнительныеНачисления.ФизЛицо = ДанныеУчетаСкидок.ФизЛицо
			|				И БазаДополнительныеНачисления.Организация = ДанныеУчетаСкидок.Организация
			|				И БазаДополнительныеНачисления.КодДоходаСтраховыеВзносы = ДанныеУчетаСкидок.ВидДохода
			|				И (БазаДополнительныеНачисления.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|				И БазаДополнительныеНачисления.БазовыйПериодНачало = ДанныеУчетаСкидок.Период
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		Дополнительные.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = Дополнительные.ГодУчетаПремийПоИтогамГода
			|				И (РасчетСреднегоЗаработка.ПериодРегистрации >= НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ))
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		ОсновныеНачисления.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И РасчетСреднегоЗаработка.ПериодРегистрации >= ОсновныеНачисления.ПериодРегистрации
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = ОсновныеНачисления.ГодУчетаПремийПоИтогамГода
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		Дополнительные.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = Дополнительные.ГодУчетаПремийПоИтогамГода
			|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (Дополнительные.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И Дополнительные.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И Дополнительные.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		ОсновныеНачисления.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И РасчетСреднегоЗаработка.ПериодРегистрации >= ОсновныеНачисления.ПериодРегистрации
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = ОсновныеНачисления.ГодУчетаПремийПоИтогамГода
			|				И (ОсновныеНачисления.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И ОсновныеНачисления.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И ОсновныеНачисления.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL ) КАК База
			|
			|СГРУППИРОВАТЬ ПО
			|	База.НомерСтроки,
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.ВидРасчетаРазрез,
			|	База.ВидРасчетаРазрез.Наименование,
			|	База.ОшибкаВводаСводногоТабеля,
			|	База.ДополнительноУменьшатьПропорциональныеПремии
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Разрезы = Новый Массив(2);
			Разрезы[0] = "ДатаНачалаБазовогоПериода";
			Разрезы[1] = "ВидРасчета";
			
			РазрезыДоп = Новый Массив(3);
			РазрезыДоп[0] = "ЧислоМесяцев";
			РазрезыДоп[1] = "ДатаНачалаБазовогоПериода";
			РазрезыДоп[2] = "ВидРасчета";
			
		Иначе
			
			Запрос.Текст = НачалоТекстаЗапроса +
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(База.РезультатБаза), 0) КАК РезультатБаза,
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.НомерСтроки КАК НомерСтроки,
			|	База.ОшибкаВводаСводногоТабеля,
			|	ЕСТЬNULL(СУММА(База.СкидкаПоСтраховымВзносам), 0) КАК СкидкаПоСтраховымВзносам,
			|	База.ДополнительноУменьшатьПропорциональныеПремии
			|ИЗ
			|	(ВЫБРАТЬ
			|		БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
			|		1 КАК ЧислоМесяцев,
			|		БазаОсновныеНачисления.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
			|		БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ОтработанноеВремя.Период ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ОшибкаВводаСводногоТабеля,
			|		0 КАК СкидкаПоСтраховымВзносам,
			|		ВЫБОР
			|			КОГДА БазаОсновныеНачисления.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА БазаОсновныеНачисления.ДатаНачалаБазовогоПериодаРазрез = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА БазаОсновныеНачисления.ДатаНачалаБазовогоПериодаРазрез МЕЖДУ БазаОсновныеНачисления.ДатаНачалаРасчетногоПериода И БазаОсновныеНачисления.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ДополнительноУменьшатьПропорциональныеПремии
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезы,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработок)
			|					И (БазовыйПериодНачало <> НАЧАЛОПЕРИОДА(БазовыйПериодНачало, МЕСЯЦ)
			|						ИЛИ БазовыйПериодКонец <> КОНЕЦПЕРИОДА(БазовыйПериодКонец, МЕСЯЦ))) КАК БазаОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|			ПО БазаОсновныеНачисления.Сотрудник = ОтработанноеВремя.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(БазаОсновныеНачисления.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.Период)
			|				И (ОтработанноеВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
			|				И (ОтработанноеВремя.ВЦеломЗаПериод)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисленияРаботниковОрганизаций.Результат,
			|		1,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ))
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамЗаработок)
			|		И РасчетСреднегоЗаработка.БазовыйПериодНачало = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ)
			|		И РасчетСреднегоЗаработка.БазовыйПериодКонец = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, МЕСЯЦ)
			|		И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза,
			|		ВЫБОР
			|			КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
			|				ТОГДА 1
			|			ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
			|		КОНЕЦ,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА БазаДополнительныеНачисления.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА БазаДополнительныеНачисления.ДатаНачалаБазовогоПериодаРазрез = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА БазаДополнительныеНачисления.ДатаНачалаБазовогоПериодаРазрез МЕЖДУ БазаДополнительныеНачисления.ДатаНачалаРасчетногоПериода И БазаДополнительныеНачисления.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезыДоп,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработокБезБольничных)) КАК БазаДополнительныеНачисления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза - ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0),
			|		1,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0),
			|		ЛОЖЬ
			|	ИЗ
			|		ВТБазаДопНачисленийПоБЛ КАК БазаДополнительныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаСкидок КАК ДанныеУчетаСкидок
			|			ПО БазаДополнительныеНачисления.ФизЛицо = ДанныеУчетаСкидок.ФизЛицо
			|				И БазаДополнительныеНачисления.Организация = ДанныеУчетаСкидок.Организация
			|				И БазаДополнительныеНачисления.КодДоходаСтраховыеВзносы = ДанныеУчетаСкидок.ВидДохода
			|				И (БазаДополнительныеНачисления.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|				И БазаДополнительныеНачисления.БазовыйПериодНачало = ДанныеУчетаСкидок.Период
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = Дополнительные.ГодУчетаПремийПоИтогамГода
			|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И РасчетСреднегоЗаработка.ПериодРегистрации >= ОсновныеНачисления.ПериодРегистрации
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = ОсновныеНачисления.ГодУчетаПремийПоИтогамГода
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = Дополнительные.ГодУчетаПремийПоИтогамГода
			|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (Дополнительные.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И Дополнительные.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И Дополнительные.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И РасчетСреднегоЗаработка.ПериодРегистрации >= ОсновныеНачисления.ПериодРегистрации
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = ОсновныеНачисления.ГодУчетаПремийПоИтогамГода
			|				И (ОсновныеНачисления.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И ОсновныеНачисления.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И ОсновныеНачисления.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL ) КАК База
			|
			|СГРУППИРОВАТЬ ПО
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.НомерСтроки,
			|	База.ОшибкаВводаСводногоТабеля,
			|	База.ДополнительноУменьшатьПропорциональныеПремии
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Разрезы = Новый Массив(1);
			Разрезы[0] = "ДатаНачалаБазовогоПериода";
			
			РазрезыДоп = Новый Массив(2);
			РазрезыДоп[0] = "ЧислоМесяцев";
			РазрезыДоп[1] = "ДатаНачалаБазовогоПериода";
			
		КонецЕсли;
		
		РазрезыДляБЛ = Новый Массив(1);
		РазрезыДляБЛ[0] = "ВидРасчета";
		Запрос.УстановитьПараметр("парамРазрезыБЛ",	РазрезыДляБЛ);
		
		Измерения = Новый Массив(1);
		Измерения[0] = "Сотрудник";
		Запрос.УстановитьПараметр("парамИзмерения",	Измерения);
		
		Запрос.УстановитьПараметр("парамРазрезы",	Разрезы);
		Запрос.УстановитьПараметр("парамРазрезыДоп",РазрезыДоп);
		
		Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ВремяСреднегоЗаработка" Тогда	
		
		// ЗаписиДанныхДляСреднего
		// Данные для расчета среднего заработка
		// Поля:
		//		НомерСтроки - ключевое поле в пределах регистратора,
		//		ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода - определяют расчетный период,
		//		БазовыйПериодНачало, БазовыйПериодКонец - определяют часть расчетного периода,
		//		ФизЛицо, Организация, Приказ - измерения регистра - для идентификации записи
		//		ВидРасчета - вид заработка для расчета среднего 
		//		СпособРасчета - способ расчета среднего заработка
		//
		// Описание:
		//		выбираем из регистра расчета среднего заработка все записи по регистратору по
		//      различным видам расчета в зависимости от состава параметра  "Заработок"
		//
		// БазовыеРасчетыОтпуска
		// Список начислений из ПВР ОсновныеНачисленияОрганизаций, по результатов которых ведется 
		// расчет среднего заработка для оплаты командировок и отпусков
		// Поля:
		//     ВидРасчета 
		//
		// БазовыеРасчеты
		// Список начислений из ПВР ОсновныеНачисленияОрганизаций, по результатов которых ведется 
		// расчет среднего заработка для выплаты пособий по нетрудоспособности
		// Поля:
		//     ВидРасчета 
		//
		// НормаПоПроизвКалендарю
		// Данные о норме дней по шестидневке
		// Поля:
		//		МесяцПериода,
		// 		ДнейПоПятидневке
		// 		ДнейПоШестидневке
		//
		// Описание:
		//		выбираем из производсвенного календаря с сумированием ресурса Шестидневка
		//		условие - с начала периода расчета среднего заработка по конец периода
		//		группируем по номеру месяца
		//
		// ВТПрогулыПоТабелюФПД
		// Прогулы зарегистрированные табелем, таблица фактического периода действия
		// Поля:
		//		Сотрудник,
		// 		ПериодРегистрации
		// 		ПериодДействия
		// 		ПериодДействияНачало
		// 		ПериодДействияКонец
		//		Дней
		//		Часов
		//
		// Описание:
		//		таблица фактического периода действия ПВР ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю
		//		условие - прогулы зарегистрированы табелем
		//
		// ВТПрогулыПоТабелюДанныеГрафика
		// Прогулы зарегистрированные табелем, таблица данные графика
		// Поля:
		//		Сотрудник,
		// 		ПериодРегистрации
		// 		ПериодДействия
		// 		ПроизводственныйКалендарьШестидневкаФактическийПериодДействия
		//
		// Описание:
		//		данные графика ПВР ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю
		//		условие - прогулы зарегистрированы табелем
		//
		////////////////////////////////////////////////////////////////////////////////
		// данные о продолжительности расчетного периода (ОтработаноДней и ОтработаноЧасов), а также
		// об отработанном времени и норме времени за расчетный период  -
		// 	нужны для включения премий, начисленных в фиксированных суммах, пропорционально отработанному времени)
		
		// к каждой записи из данных для расчета среднего выбираем записи основного регистра по правилу:
		// - если это запись по премиям в фикс. суммах - все записи основного регистра, попадающие в расчетный период
		// - если это запись по заработку и начинает расчетный период - записи основного регистра за все "затронутые" месяцы расчетного периода
		// - если же это одна из последующих записей по заработку - записи основного регистра за "затронутые" месяцы расчетного периода, кроме первого
		// для записей расчета среднего по премиям в фикс. суммах собираем отработанное время и норму по пятидневке за весь расчетный период
		// для записей по заработку собираем продолжительность её части расчетного периода
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаписиРасчетаСреднего.ПериодРегистрации,
		|	ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|	ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	ЗаписиРасчетаСреднего.БазовыйПериодКонец КАК БазовыйПериодКонец,
		|	ЗаписиРасчетаСреднего.Сотрудник КАК Сотрудник,
		|	ЗаписиРасчетаСреднего.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
		|	ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода,
		|	ЗаписиРасчетаСреднего.ВидРасчета КАК ВидРасчета,
		|	ЗаписиРасчетаСреднего.СпособРасчета КАК СпособРасчета,
		|	ЗаписиРасчетаСреднего.ВидУчетаВремени,
		|	ЗаписиРасчетаСреднего.Организация
		|ПОМЕСТИТЬ ВТЗаписиДанныхДляСреднего
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
		|ГДЕ
		|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 16:15                                           
		|ВЫБРАТЬ
		|	&парамДатаС КАК Период,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &парамДатаС
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы.AVT_ПроизводственныйКалендарь
		|	КОНЕЦ КАК Календарь,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_AVT_ДатыКадровыхИзменений
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&парамДатаС,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ЗаписиДанныхДляСреднего.Сотрудник
		|				ИЗ
		|					ВТЗаписиДанныхДляСреднего КАК ЗаписиДанныхДляСреднего)) КАК РаботникиОрганизацийСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.ГрафикРаботы.AVT_ПроизводственныйКалендарь,
		|	РаботникиОрганизаций.Сотрудник
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период > &парамДатаС
		|	И РаботникиОрганизаций.Период <= &парамДатаПо
		|	И РаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ЗаписиДанныхДляСреднего.Сотрудник
		|			ИЗ
		|				ВТЗаписиДанныхДляСреднего КАК ЗаписиДанныхДляСреднего)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.ПериодЗавершения,
		|	РаботникиОрганизаций.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь,
		|	РаботникиОрганизаций.Сотрудник
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
		|		ПО РаботникиОрганизаций.Период < ПериодыПерекрытия.Период
		|			И РаботникиОрганизаций.ПериодЗавершения >= ПериодыПерекрытия.Период
		|ГДЕ
		|	РаботникиОрганизаций.ПериодЗавершения > &парамДатаС
		|	И РаботникиОрганизаций.ПериодЗавершения <= &парамДатаПо
		|	И РаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ЗаписиДанныхДляСреднего.Сотрудник
		|			ИЗ
		|				ВТЗаписиДанныхДляСреднего КАК ЗаписиДанныхДляСреднего)
		|	И ПериодыПерекрытия.Сотрудник ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыКадровыхИзменений.Сотрудник КАК Сотрудник,
		|	ДатыКадровыхИзменений.Период КАК НачалоПериода,
		|	МИНИМУМ(ЕСТЬNULL(ДатыКадровыхИзменений1.Период, ДОБАВИТЬКДАТЕ(&парамДатаПо, СЕКУНДА, 1))) КАК КонецПериода,
		|	ДатыКадровыхИзменений.Календарь
		|ПОМЕСТИТЬ ВТ_AVT_ПериодыКадровогоПостоянства
		|ИЗ
		|	ВТ_AVT_ДатыКадровыхИзменений КАК ДатыКадровыхИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_AVT_ДатыКадровыхИзменений КАК ДатыКадровыхИзменений1
		|		ПО ДатыКадровыхИзменений.Период < ДатыКадровыхИзменений1.Период
		|			И ДатыКадровыхИзменений.Сотрудник = ДатыКадровыхИзменений1.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыКадровыхИзменений.Период,
		|	ДатыКадровыхИзменений.Календарь,
		|	ДатыКадровыхИзменений.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТБазовыеРасчетыОтпуска
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
		|	И (ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|			ИЛИ ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
		|				И ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное))
		|	И ОсновныеНачисленияОрганизаций.Ссылка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТВидыРасчетаЕжегодныхОтпусков
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
		|	И ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
		|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СреднийЗаработокБазовыеВидыРасчета.ВидРасчета КАК ПланВидовРасчета.ОсновныеНачисленияОрганизаций) КАК ВидРасчета
		|ПОМЕСТИТЬ ВТБазовыеРасчеты
		|ИЗ
		|	ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|ГДЕ
		|	СреднийЗаработокБазовыеВидыРасчета.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий))
		|	И СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
		|	И СреднийЗаработокБазовыеВидыРасчета.ВидРасчета.ЗачетНормыВремени
		|	И СреднийЗаработокБазовыеВидыРасчета.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
		|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
		|	И ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
		|	И ОсновныеНачисленияОрганизаций.Ссылка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 16:54 
		|	ПериодыКадровогоПостоянства.Сотрудник КАК Сотрудник,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцПериода,
		|	СУММА(ПроизводственныйКалендарь.Пятидневка) КАК ДнейПоПятидневке,
		|	СУММА(ПроизводственныйКалендарь.Пятидневка) * 8 - СУММА(ВЫБОР
		|			КОГДА ПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовПоПятидневке,
		|	СУММА(ПроизводственныйКалендарь.Шестидневка) КАК ДнейПоШестидневке,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроизводственныйКалендарь.ДатаКалендаря) КАК КалендарныхДней
		|ПОМЕСТИТЬ ВТНормаПоПроизвКалендарю
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 16:34 
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_AVT_ПериодыКадровогоПостоянства КАК ПериодыКадровогоПостоянства
		|	ПО ПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ПериодыКадровогоПостоянства.Календарь
		|		И ПроизводственныйКалендарь.ДатаКалендаря >= ПериодыКадровогоПостоянства.НачалоПериода
		|		И ПроизводственныйКалендарь.ДатаКалендаря < ПериодыКадровогоПостоянства.КонецПериода
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
		|ГДЕ
		|	ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &парамДатаС И &парамДатаПо
		|
		|СГРУППИРОВАТЬ ПО
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 16:59 
		|	ПериодыКадровогоПостоянства.Сотрудник,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 16:58 
		|	Сотрудник,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|	МесяцПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 16:54 
		|	ПериодыКадровогоПостоянства.Сотрудник КАК Сотрудник,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцПериода,
		|	ПроизводственныйКалендарь.ДатаКалендаря КАК Праздник
		|ПОМЕСТИТЬ ВТПраздники
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 16:34 
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_AVT_ПериодыКадровогоПостоянства КАК ПериодыКадровогоПостоянства
		|	ПО ПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ПериодыКадровогоПостоянства.Календарь
		|		И ПроизводственныйКалендарь.ДатаКалендаря >= ПериодыКадровогоПостоянства.НачалоПериода
		|		И ПроизводственныйКалендарь.ДатаКалендаря < ПериодыКадровогоПостоянства.КонецПериода
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|ГДЕ
		|	ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &парамДатаС И &парамДатаПо
		|	И ПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисленияРаботников.ПериодРегистрации КАК ПериодРегистрации,
		|	ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|	ОсновныеНачисленияРаботников.Сторно КАК Сторно,
		|	ОсновныеНачисленияРаботников.ВидРасчета КАК ВидРасчета,
		|	ОсновныеНачисленияРаботников.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ОсновныеНачисленияРаботников.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТДанныеФПД
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			ПериодДействия МЕЖДУ &парамДатаС И &парамДатаПо
		|				И Сотрудник В
		|					(ВЫБРАТЬ
		|						ЗаписиДанныхДляСреднего.Сотрудник
		|					ИЗ
		|						ВТЗаписиДанныхДляСреднего КАК ЗаписиДанныхДляСреднего)) КАК ОсновныеНачисленияРаботников
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеГрафика.Сотрудник КАК Сотрудник,
		|	ДанныеГрафика.ВидРасчета КАК ВидРасчета,
		|	ДанныеГрафика.ПериодРегистрации,
		|	ДанныеГрафика.ПериодДействия,
		|	ДанныеГрафика.ПериодДействияНачало,
		|	ДанныеГрафика.ПериодДействияКонец,
		|	ДанныеГрафика.Сторно,
		|	ДанныеГрафика.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия
		|ПОМЕСТИТЬ ВТДанныеГрафика
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
		|			ПериодДействия МЕЖДУ &парамДатаС И &парамДатаПо
		|				И Сотрудник В
		|					(ВЫБРАТЬ
		|						ЗаписиДанныхДляСреднего.Сотрудник
		|					ИЗ
		|						ВТЗаписиДанныхДляСреднего КАК ЗаписиДанныхДляСреднего)) КАК ДанныеГрафика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ПериодРегистрации,
		|	ОсновныеНачисления.ПериодДействия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	СУММА(РабочееВремя.Дней) КАК Дней,
		|	СУММА(РабочееВремя.Часов) КАК Часов
		|ПОМЕСТИТЬ ВТПрогулыПоТабелюФПД
		|ИЗ
		|	ВТДанныеФПД КАК ОсновныеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремя
		|		ПО ОсновныеНачисления.Сотрудник = РабочееВремя.Сотрудник
		|			И (ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю))
		|			И (РабочееВремя.Период МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (РабочееВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы))
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ПериодРегистрации,
		|	ОсновныеНачисления.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеГрафика.Сотрудник,
		|	ДанныеГрафика.ПериодРегистрации,
		|	ДанныеГрафика.ПериодДействия,
		|	ДанныеГрафика.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия
		|ПОМЕСТИТЬ ВТПрогулыПоТабелюДанныеГрафика
		|ИЗ
		|	ВТДанныеГрафика КАК ДанныеГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремя
		|		ПО ДанныеГрафика.Сотрудник = РабочееВремя.Сотрудник
		|			И (ДанныеГрафика.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю))
		|			И (РабочееВремя.Период МЕЖДУ ДанныеГрафика.ПериодДействияНачало И ДанныеГрафика.ПериодДействияКонец)
		|			И (РабочееВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК НомерСтроки,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК БазовыйПериодНачало,
		|	0 КАК ОтработаноПоПятидневке,
		|	0 КАК ОтработаноДней,
		|	0 КАК ОтработаноЧасов
		|ПОМЕСТИТЬ ВТДополнительныеДанные
		|ГДЕ
		|	ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработанноеВремя.НомерСтроки КАК НомерСтроки,
		|	СУММА(ОтработанноеВремя.ОтработаноПоПятидневке) КАК ОтработаноПоПятидневке,
		|	НормаПоПроизвКалендарю.НормаПоПятидневкеПоПроизвКалендарю,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.БазовыйПериодНачало, МЕСЯЦ) <> ОтработанноеВремя.БазовыйПериодНачало
		|				ТОГДА 0
		|			ИНАЧЕ ОтработанноеВремя.ОтработаноДней
		|		КОНЕЦ) КАК ОтработаноДней,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.БазовыйПериодНачало, МЕСЯЦ) <> ОтработанноеВремя.БазовыйПериодНачало
		|				ТОГДА 0
		|			ИНАЧЕ ОтработанноеВремя.ОтработаноЧасов
		|		КОНЕЦ) КАК ОтработаноЧасов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|		0 КАК ОтработаноПоПятидневке,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботников.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * РАЗНОСТЬДАТ(ОсновныеНачисленияРаботников.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ОсновныеНачисленияРаботников.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ) КАК ОтработаноДней,
		|		0 КАК ОтработаноЧасов
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
		|				ОсновныеНачисленияРаботников.ПериодРегистрации КАК ПериодРегистрации,
		|				ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|				ОсновныеНачисленияРаботников.Сторно КАК Сторно,
		|				ОсновныеНачисленияРаботников.ПериодДействияНачало КАК ПериодДействияНачало,
		|				ОсновныеНачисленияРаботников.ПериодДействияКонец КАК ПериодДействияКонец
		|			ИЗ
		|				ВТДанныеФПД КАК ОсновныеНачисленияРаботников
		|			ГДЕ
		|				ОсновныеНачисленияРаботников.ВидРасчета В
		|						(ВЫБРАТЬ
		|							БазовыеРасчеты.ВидРасчета
		|						ИЗ
		|							ВТБазовыеРасчеты КАК БазовыеРасчеты)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВТПрогулыТабеля.Сотрудник,
		|				ВТПрогулыТабеля.ПериодРегистрации,
		|				ВТПрогулыТабеля.ПериодДействия,
		|				ЛОЖЬ,
		|				ВТПрогулыТабеля.ПериодДействияНачало,
		|				ВТПрогулыТабеля.ПериодДействияКонец
		|			ИЗ
		|				ВТПрогулыПоТабелюФПД КАК ВТПрогулыТабеля) КАК ОсновныеНачисленияРаботников
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОсновныеНачисленияРаботников.ПериодРегистрации
		|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОсновныеНачисленияРаботников.ПериодДействия)
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		0,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботников.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеФПД КАК ОсновныеНачисленияРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТПраздники КАК Праздники
		|				ПО (Праздники.Праздник МЕЖДУ ОсновныеНачисленияРаботников.ПериодДействияНачало И ОсновныеНачисленияРаботников.ПериодДействияКонец)
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 17:15 
		|					И Праздники.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		|				И ((НЕ ОсновныеНачисленияРаботников.ВидРасчета В
		|						(ВЫБРАТЬ
		|							БазовыеРасчеты.ВидРасчета
		|						ИЗ
		|							ВТБазовыеРасчеты КАК БазовыеРасчеты)))
		|				И (ОсновныеНачисленияРаботников.ВидРасчета В
		|					(ВЫБРАТЬ
		|						БазовыеРасчеты.ВидРасчета
		|					ИЗ
		|						ВТВидыРасчетаЕжегодныхОтпусков КАК БазовыеРасчеты))
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОсновныеНачисленияРаботников.ПериодРегистрации
		|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОсновныеНачисленияРаботников.ПериодДействия)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
		|			ПО ЗаписиРасчетаСреднего.Организация = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий))
		|		И Праздники.Праздник ЕСТЬ НЕ NULL 
		|		И НЕ ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.НеУчитыватьПраздникиВоВремяОтпускаПриОплатеБольничных, ЛОЖЬ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеИндексируемыйЗаработок.НомерСтроки,
		|		ДанныеИндексируемыйЗаработок.БазовыйПериодНачало,
		|		ДанныеИндексируемыйЗаработок.ОтработаноПоПятидневке,
		|		ДанныеИндексируемыйЗаработок.ОтработаноДней,
		|		ДанныеИндексируемыйЗаработок.ОтработаноЧасов
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|			ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|			0 КАК ОтработаноПоПятидневке,
		|			ВЫБОР
		|				КОГДА ОтработанноеВремя.ВидРасчета В (&Прогулы)
		|					ТОГДА ОтработанноеВремя.НормаДней
		|				ИНАЧЕ ОтработанноеВремя.ОтработаноДней
		|			КОНЕЦ КАК ОтработаноДней,
		|			ВЫБОР
		|				КОГДА ОтработанноеВремя.ВидРасчета В (&Прогулы)
		|					ТОГДА ОтработанноеВремя.НормаЧасов
		|				ИНАЧЕ ОтработанноеВремя.ОтработаноЧасов
		|			КОНЕЦ КАК ОтработаноЧасов
		|		ИЗ
		|			ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|				ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
		|					И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОтработанноеВремя.ПериодРегистрации
		|					И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.ПериодДействия)
		|					И (ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|						ИЛИ ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|						ИЛИ ОтработанноеВремя.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы))
		|		ГДЕ
		|			ЗаписиРасчетаСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
		|			И ЗаписиРасчетаСреднего.СпособРасчета В(&парамНеОтпуск)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЗаписиРасчетаСреднего.НомерСтроки,
		|			ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|			0,
		|			ОтработанноеВремя.Дней,
		|			ОтработанноеВремя.Часов
		|		ИЗ
		|			ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрогулыПоТабелюФПД КАК ОтработанноеВремя
		|				ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
		|					И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОтработанноеВремя.ПериодРегистрации
		|					И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.ПериодДействия)
		|		ГДЕ
		|			ЗаписиРасчетаСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
		|			И ЗаписиРасчетаСреднего.СпособРасчета В(&парамНеОтпуск)) КАК ДанныеИндексируемыйЗаработок
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		0,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботников.Сотрудник ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА СУММА(ВЫБОР
		|						КОГДА ОсновныеНачисленияРаботников.Сторно
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ * РАЗНОСТЬДАТ(ОсновныеНачисленияРаботников.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ОсновныеНачисленияРаботников.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) < РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ), ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ), СЕКУНДА, 1), ДЕНЬ)
		|				ТОГДА ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА ЗаписиРасчетаСреднего.ДатаНачалаСобытия < &ДатаИзмененияКоличестваДнейДляОтпускных
		|						ТОГДА 29.4
		|					ИНАЧЕ 29.3
		|				КОНЕЦ / РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ), ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ), СЕКУНДА, 1), ДЕНЬ) * СУММА(ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботников.Сторно
		|									ТОГДА -1
		|								ИНАЧЕ 1
		|							КОНЕЦ * РАЗНОСТЬДАТ(ОсновныеНачисленияРаботников.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ОсновныеНачисленияРаботников.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК ЧИСЛО(7, 2))
		|			ИНАЧЕ  ВЫБОР
		|			КОГДА ЗаписиРасчетаСреднего.ДатаНачалаСобытия < &ДатаИзмененияКоличестваДнейДляОтпускных
		|				ТОГДА 29.4
		|			ИНАЧЕ 29.3
		|		КОНЕЦ
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
		|				ОсновныеНачисленияРаботников.ПериодРегистрации КАК ПериодРегистрации,
		|				ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|				ОсновныеНачисленияРаботников.Сторно КАК Сторно,
		|				ОсновныеНачисленияРаботников.ПериодДействияНачало КАК ПериодДействияНачало,
		|				ОсновныеНачисленияРаботников.ПериодДействияКонец КАК ПериодДействияКонец
		|			ИЗ
		|				ВТДанныеФПД КАК ОсновныеНачисленияРаботников
		|			ГДЕ
		|				ОсновныеНачисленияРаботников.ВидРасчета В
		|						(ВЫБРАТЬ
		|							БазовыеРасчеты.ВидРасчета
		|						ИЗ
		|							ВТБазовыеРасчетыОтпуска КАК БазовыеРасчеты)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВТПрогулыТабеля.Сотрудник,
		|				ВТПрогулыТабеля.ПериодРегистрации,
		|				ВТПрогулыТабеля.ПериодДействия,
		|				ЛОЖЬ,
		|				ВТПрогулыТабеля.ПериодДействияНачало,
		|				ВТПрогулыТабеля.ПериодДействияКонец
		|			ИЗ
		|				ВТПрогулыПоТабелюФПД КАК ВТПрогулыТабеля) КАК ОсновныеНачисленияРаботников
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОсновныеНачисленияРаботников.ПериодРегистрации
		|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОсновныеНачисленияРаботников.ПериодДействия)
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
		|		И ЗаписиРасчетаСреднего.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОсновныеНачисленияРаботников.Сотрудник,
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		ЗаписиРасчетаСреднего.БазовыйПериодКонец,
		|	    ЗаписиРасчетаСреднего.ДатаНачалаСобытия
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		0,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботников.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * ОсновныеНачисленияРаботников.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия,
		|		0
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
		|				ОсновныеНачисленияРаботников.ПериодРегистрации КАК ПериодРегистрации,
		|				ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|				ОсновныеНачисленияРаботников.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия КАК ПроизводственныйКалендарьШестидневкаФактическийПериодДействия,
		|				ОсновныеНачисленияРаботников.Сторно КАК Сторно
		|			ИЗ
		|				ВТДанныеГрафика КАК ОсновныеНачисленияРаботников
		|			ГДЕ
		|				ОсновныеНачисленияРаботников.ВидРасчета В
		|						(ВЫБРАТЬ
		|							БазовыеРасчеты.ВидРасчета
		|						ИЗ
		|							ВТБазовыеРасчетыОтпуска КАК БазовыеРасчеты)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВТПрогулыТабеля.Сотрудник,
		|				ВТПрогулыТабеля.ПериодРегистрации,
		|				ВТПрогулыТабеля.ПериодДействия,
		|				ВТПрогулыТабеля.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия,
		|				ЛОЖЬ
		|			ИЗ
		|				ВТПрогулыПоТабелюДанныеГрафика КАК ВТПрогулыТабеля) КАК ОсновныеНачисленияРаботников
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОсновныеНачисленияРаботников.ПериодРегистрации
		|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОсновныеНачисленияРаботников.ПериодДействия)
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
		|		И ЗаписиРасчетаСреднего.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		ВЫБОР
		|			КОГДА ЗаписиРасчетаСреднего.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|				ТОГДА ОтработанноеВремя.ОтработаноДнейПоПятидневке
		|			ИНАЧЕ ОтработанноеВремя.ОтработаноЧасовПоПятидневке
		|		КОНЕЦ,
		|		0,
		|		0
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОтработанноеВремя.ПериодРегистрации
		|				И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ОтработанноеВремя.ПериодДействияКонец
		|				И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ОтработанноеВремя.ПериодДействияНачало
		|				И (ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|					ИЛИ ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета В(&ФиксПремии)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДополнительныеДанные.НомерСтроки,
		|		ДополнительныеДанные.БазовыйПериодНачало,
		|		ДополнительныеДанные.ОтработаноПоПятидневке,
		|		ДополнительныеДанные.ОтработаноДней,
		|		ДополнительныеДанные.ОтработаноЧасов
		|	ИЗ
		|		ВТДополнительныеДанные КАК ДополнительныеДанные) КАК ОтработанноеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|			СУММА(ВЫБОР
		|					КОГДА ЗаписиРасчетаСреднего.ВидРасчета В (&ФиксПремии)
		|						ТОГДА ВЫБОР
		|								КОГДА ЗаписиРасчетаСреднего.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|									ТОГДА НормаПоПроизвКалендарю.ДнейПоПятидневке
		|								ИНАЧЕ НормаПоПроизвКалендарю.ЧасовПоПятидневке
		|							КОНЕЦ
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК НормаПоПятидневкеПоПроизвКалендарю
		|		ИЗ
		|			ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаПоПроизвКалендарю КАК НормаПоПроизвКалендарю
		|				ПО (НормаПоПроизвКалендарю.МесяцПериода МЕЖДУ ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода)
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 30.06.2011 17:12 
		|					И ЗаписиРасчетаСреднего.Сотрудник = НормаПоПроизвКалендарю.Сотрудник
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗаписиРасчетаСреднего.НомерСтроки) КАК НормаПоПроизвКалендарю
		|		ПО ОтработанноеВремя.НомерСтроки = НормаПоПроизвКалендарю.НомерСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработанноеВремя.НомерСтроки,
		|	НормаПоПроизвКалендарю.НормаПоПятидневкеПоПроизвКалендарю
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		// в запросе по отработанному времени отдельно обрабатываются прогулы - выберем их список
		ЗапросПВР = Новый Запрос(
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
		|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
		|");
		
		Запрос.УстановитьПараметр("Прогулы", ЗапросПВР.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		СписокСпособов = Новый Массив();
		СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
		СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
		СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
		СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
		СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
		Запрос.УстановитьПараметр("парамНеОтпуск", СписокСпособов);
		Запрос.УстановитьПараметр("ДатаИзмененияКоличестваДнейДляОтпускных", ДатаИзмененияКоличестваДнейДляОтпускных());
	КонецЕсли;
	
КонецПроцедуры // ДописатьАлгоритмВЗапрос()

// Для указанного алгоритма расчетывает ресурсы записи регистра расчетов   
Функция РассчитатьРесурсыПоАлгоритму(ИмяАлгоритма = "", КомментироватьРасчет = Ложь, Знач КомментарийВидаРасчета = Неопределено, СтрокаДвижений = Неопределено, ИсходныеДанные = Неопределено) Экспорт
	
	Если ИмяАлгоритма = "ПоСреднемуЗаработкуДляОтпуска" Тогда
		
		ОплачиваемоеВремя = ?(Не ЗначениеЗаполнено(ИсходныеДанные.ОплачиваемыеДниОтпуска), 0, ИсходныеДанные.ОплачиваемыеДниОтпуска);
		
		Если СтрокаДвижений.Сторно Или Не ЗначениеЗаполнено(ИсходныеДанные.ВидПособияСоциальногоСтрахования) Или Не ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(СтрокаДвижений.ПериодРегистрации, СтрокаДвижений.ОбособленноеПодразделение) Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасов = 0
					ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0 Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
					СтрокаДвижений.Результат = 0;
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = ?(СтрокаДвижений.Показатель1 = 0, 100, СтрокаДвижений.Показатель1);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Дни отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
			КонецЕсли;
			Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
				// переводим дни в часы: количество недель отпуска * длительность рабочей недели
				ОплачиваемоеВремя = ОплачиваемоеВремя / ИсходныеДанные.ЧислоДнейВНеделе * ИсходныеДанные.ДлительностьРабочейНедели;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Часы отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
				Иначе
					ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноДнейПоСреднему,2);
				КонецЕсли;
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100;
			СтрокаДвижений.Результат = Результат;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
		Иначе
			
			СтрокаДвижений.Результат = 0;
			СтрокаДвижений.ДополнительныйРезультат = 0;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("У страхователей, участвующих в пилотном проекте ФСС, пособие не начисляется", КомментарийВидаРасчета);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПоСреднемуЗаработкуФСС2011" Тогда
		
		ОплачиваемоеВремя = ?(Не ЗначениеЗаполнено(ИсходныеДанные.КалендарныхДней), 0, ИсходныеДанные.КалендарныхДней);
		
		Если Не ЗначениеЗаполнено(ИсходныеДанные.ВидПособияСоциальногоСтрахования) Или Не ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(СтрокаДвижений.ПериодРегистрации, СтрокаДвижений.ОбособленноеПодразделение) Тогда
			
			ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
			
			Если СтрокаДвижений.ПериодРегистрации < ДатаЗакона Или СтрокаДвижений.ПериодДействияНачало < ДатаЗакона Тогда
				Возврат Ложь
			КонецЕсли;
			
			Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мБезОграничений 
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничением
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничениемИВРазмереММОТ
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОграничениемВРазмереММОТ Тогда
				Возврат Ложь
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОплачиваемоеВремя) Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
				СтрокаДвижений.Результат = 0;
				СтрокаДвижений.ДополнительныйРезультат = 0;
				Возврат Истина;
			КонецЕсли;
			
			ЭтоПереходныйПериод = СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона И СтрокаДвижений.ПериодДействияНачало >= ДатаЗакона;
			Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений 
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничением
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничениемИВРазмереММОТ
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ Тогда
				ЭтоПереходныйПериод = Ложь
			КонецЕсли;
			
			Если ЭтоПереходныйПериод Тогда
				РезультатПоПравилам2010Года = 0;
				ДополнительныйРезультатПоПравилам2010Года = 0;
				ЗаработокЗаЕдиницуВремени2010Года = 0;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Пособие по страховому случаю, произошедшему до " + ДатаЗакона + ", за период после " + ДатаЗакона + " выплачивается по правилам 2011 года в том случае, если полученный результат превышает пособие, положенное по правилам 2010 года.", КомментарийВидаРасчета);
					КомментарийСтарогоПорядка = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по правилам 2010 года", КомментарийВидаРасчета);
				КонецЕсли;
				Если РассчитатьРесурсыПоАлгоритму("ПоСреднемуЗаработкуФСС213ФЗ", КомментироватьРасчет, КомментарийСтарогоПорядка, СтрокаДвижений, ИсходныеДанные) Тогда
					РезультатПоПравилам2010Года = СтрокаДвижений.Результат;
					ДополнительныйРезультатПоПравилам2010Года = СтрокаДвижений.ДополнительныйРезультат;
					ЗаработокЗаЕдиницуВремени2010Года = СтрокаДвижений.ДополнительныеДанные;
					СтрокаДвижений.Результат = 0;
					СтрокаДвижений.ДополнительныйРезультат = 0;
				КонецЕсли;
				Если КомментироватьРасчет Тогда
					КомментарийВидаРасчета = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по правилам 2011 года", КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			ПроцентОплаты = СтрокаДвижений.Показатель1;
			ПроцентОплатыБезЛьгот = СтрокаДвижений.Показатель2;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты от среднего заработка: " + ПроцентОплаты, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Оплачивается " + ОплачиваемоеВремя + " " + ОбщегоНазначенияЗК.ФормаМножественногоЧисла("день", "дня", "дней", ОплачиваемоеВремя), КомментарийВидаРасчета);
			КонецЕсли;
			
			ЭтоПособиеПоМатеринству = ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений 
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничением
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничениемИВРазмереММОТ
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ;
				
			Если ИсходныеДанные.ОсобыйПорядокРасчетаСреднего Тогда
				УчитываемыхДнейВКалендарныхГодах = ИсходныеДанные.УчитываемыхДнейВКалендарныхГодахПриОсобомПорядкеРасчета - ?(ЭтоПособиеПоМатеринству, ИсходныеДанные.ИсключаемыхДнейДляПособийПоМатеринству, 0);
			ИначеЕсли ЭтоПособиеПоМатеринству Тогда
				УчитываемыхДнейВКалендарныхГодах = ИсходныеДанные.ОтработаноДнейДляПособийПоМатеринству
			Иначе
				УчитываемыхДнейВКалендарныхГодах = 730
			КонецЕсли;
			
			ОграничениеВРазмереММОТ = ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ
					Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ;
					
			// Рассчитаем заработок за день
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйБезОграничений Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений Тогда
					ЗаработокЗаЕдиницуВремени = ?(Не ЗначениеЗаполнено(УчитываемыхДнейВКалендарныхГодах), 0, Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах, 2));
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Пособие начисляется без ограничения максимальными размерами", КомментарийВидаРасчета);
					КонецЕсли;
				ИначеЕсли ИсходныеДанные.ОсобыйПорядокРасчетаСреднего Тогда
					Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйНСиПЗСОграничением Тогда
						ЗаработокЗаЕдиницуВремени = ?(Не ЗначениеЗаполнено(УчитываемыхДнейВКалендарныхГодах), 0, Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах, 2));
						Если КомментироватьРасчет Тогда
							ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок для постоянно проживавших по состоянию на 18.03.2014 в Крыму рассчитывается без ограничения предельной величиной облагаемой базы по страховым взносам в ФСС", КомментарийВидаРасчета);
						КонецЕсли;
					Иначе
						ЗаработокЗаЕдиницуВремени = ?(Не ЗначениеЗаполнено(УчитываемыхДнейВКалендарныхГодах), 0, Мин(ИсходныеДанные.ОграничениеСреднегоПриОсобомПорядкеРасчета, Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах, 2)));
						Если КомментироватьРасчет Тогда
							Если ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений) И Не ОграничениеВРазмереММОТ Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок для постоянно проживавших по состоянию на 18.03.2014 в Крыму рассчитывается без ограничения предельной величиной облагаемой базы по страховым взносам в ФСС", КомментарийВидаРасчета);
								Если ИсходныеДанные.ОграничениеСреднегоПриОсобомПорядкеРасчета < ?(Не ЗначениеЗаполнено(УчитываемыхДнейВКалендарныхГодах), 0, Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах, 2)) Тогда
									ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок (" + Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах, 2) + ") дополнительно ограничен в соответствии с частью 9 статьи 10 Федерального закона от 22.12.2014 № 421-ФЗ предельной величиной " + ИсходныеДанные.ОграничениеСреднегоПриОсобомПорядкеРасчета, КомментарийВидаРасчета);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйНСиПЗСОграничением Тогда
					ЗаработокЗаЕдиницуВремени = ?(Не ЗначениеЗаполнено(УчитываемыхДнейВКалендарныхГодах), 0, Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах, 2));
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок рассчитывается без ограничения предельной величиной облагаемой базы по страховым взносам в ФСС", КомментарийВидаРасчета);
					КонецЕсли;
				Иначе 
					ЗаработокЗаЕдиницуВремени = ?(Не ЗначениеЗаполнено(УчитываемыхДнейВКалендарныхГодах), 0, ?(ЭтоПособиеПоМатеринству, Мин(Окр(ИсходныеДанные.МаксимальныйСреднийДвухПредшествующихКалендарныхЛет, 2),Окр(ИсходныеДанные.СреднийЗаработокПособий2011 / УчитываемыхДнейВКалендарныхГодах, 2)),Окр(ИсходныеДанные.СреднийЗаработокПособий2011 / УчитываемыхДнейВКалендарныхГодах, 2)));
					Если КомментироватьРасчет Тогда
						Если ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2011) И Не ОграничениеВРазмереММОТ Тогда
							ОбщегоНазначенияЗК.КомментарийРасчета("Заработок за каждый из расчетных лет ограничен предельной величиной облагаемой базы по страховым взносам в ФСС", КомментарийВидаРасчета);
							Если ЭтоПособиеПоМатеринству И Окр(ИсходныеДанные.МаксимальныйСреднийДвухПредшествующихКалендарныхЛет, 2) < ?(Не ЗначениеЗаполнено(УчитываемыхДнейВКалендарныхГодах), 0, Окр(ИсходныеДанные.СреднийЗаработокПособий2011 / УчитываемыхДнейВКалендарныхГодах, 2)) Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок (" + Окр(ИсходныеДанные.СреднийЗаработокПособий2011 / УчитываемыхДнейВКалендарныхГодах, 2) + ") для пособия на период отпуска по беременности и родам, начавшегося после 1 января 2013 года, дополнительно ограничен в соответствии с частью 3.3 статьи 14 предельной величиной " + Окр(ИсходныеДанные.МаксимальныйСреднийДвухПредшествующихКалендарныхЛет, 2), КомментарийВидаРасчета);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если КомментироватьРасчет Тогда
					Если Не ЗначениеЗаполнено(УчитываемыхДнейВКалендарныхГодах) Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Пособие по беременности и родам: все дни расчетного периода оказалось исключены, среднедневной заработок принят равным нулю.", КомментарийВидаРасчета);
					Иначе
						ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок для исчисления пособия: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			НормаВремени = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
			РайонныйКоэффициентДляУвеличенияПособия = Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
			
			// Ограничение заработка снизу
			РазмерОграниченияСнизу = ИсходныеДанные.РазмерММОТНаДатуДатаНачалаСобытия * Мин(ИсходныеДанные.ДоляММОТ, 1);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер среднедневногого заработка рассчитан из МРОТ в сумме " + ИсходныеДанные.РазмерММОТНаДатуДатаНачалаСобытия + ?(Мин(ИсходныеДанные.ДоляММОТ, 1) = 1,"", ", дополнительно учитывается коэффициент неполного рабочего времени в размере " + Мин(ИсходныеДанные.ДоляММОТ, 1)), КомментарийВидаРасчета);
			КонецЕсли;
			Если ЗаработокЗаЕдиницуВремени < РазмерОграниченияСнизу * 24 / 730 Тогда
				ЗаработокЗаЕдиницуВремени = Окр(РазмерОграниченияСнизу * 24 / 730, 2);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("В качестве заработка за месяц принята сумма: " + РазмерОграниченияСнизу + ?(РайонныйКоэффициентДляУвеличенияПособия <= 1, "", "; при исчислении пособия будет учтен РК " + ИсходныеДанные.РайонныйКоэффициентРФОрганизации), КомментарийВидаРасчета);
				КонецЕсли;
			Иначе
				РайонныйКоэффициентДляУвеличенияПособия = 1;
			КонецЕсли;
			
			ДневноеПособие = Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Размер дневного пособия составил: " + ДневноеПособие, КомментарийВидаРасчета);
			КонецЕсли;
			Результат = Окр(ОплачиваемоеВремя * ДневноеПособие * РайонныйКоэффициентДляУвеличенияПособия,2);
			
			// Ограничение пособия сверху
			Если ОграничениеВРазмереММОТ Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйНСиПЗСОграничением Тогда
				РайонныйКоэффициентДляММОТ = Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
				РазмерОграниченияСверху = ?(ОграничениеВРазмереММОТ, ИсходныеДанные.РазмерММОТ * РайонныйКоэффициентДляММОТ, 4 * ИсходныеДанные.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты);
				Если ОплачиваемоеВремя < НормаВремени Тогда
					ОграничениеПособия = Окр(РазмерОграниченияСверху / НормаВремени,2) * ОплачиваемоеВремя;
				Иначе
					ОграничениеПособия = Окр(РазмерОграниченияСверху,2);
				КонецЕсли;
				Если КомментироватьРасчет Тогда
					Если ОграничениеВРазмереММОТ Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер пособия рассчитан из МРОТ в сумме " + ИсходныеДанные.РазмерММОТ + ?(РайонныйКоэффициентДляММОТ = 1,"", " с учетом районного коэффициента в размере " + РайонныйКоэффициентДляММОТ), КомментарийВидаРасчета);
					Иначе
						ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер пособия рассчитан из максимального размера ежемесячной страховой выплаты в сумме " + ИсходныеДанные.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты, КомментарийВидаРасчета);
					КонецЕсли;
					Если ОплачиваемоеВремя < НормаВремени Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер за оплачиваемый период составляет: " + ОграничениеПособия, КомментарийВидаРасчета);
					Иначе
						ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер за месяц составляет: " + ОграничениеПособия, КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
				Результат = Мин(Результат, ОграничениеПособия);
			Иначе
				РазмерОграниченияСверху = 0;
			КонецЕсли;
			
			СтрокаДвижений.Результат = Результат;
			
			// часть пособия, финансируемая федеральным бюджетом
			Если ЗначениеЗаполнено(ПроцентОплатыБезЛьгот) И ЗначениеЗаполнено(ИсходныеДанные.ВидПособияСоциальногоСтрахования) Тогда
				
				ДневноеПособие = Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2);
				Результат = Окр(ОплачиваемоеВремя * ДневноеПособие * РайонныйКоэффициентДляУвеличенияПособия,2);
				
				Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года Тогда
					РазмерОграниченияСверху = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
					Если ОплачиваемоеВремя < НормаВремени Тогда
						ОграничениеПособия = Окр(РазмерОграниченияСверху / НормаВремени,2) * ОплачиваемоеВремя;
					Иначе
						ОграничениеПособия = Окр(РазмерОграниченияСверху,2);
					КонецЕсли;
				КонецЕсли;
				
				Если РазмерОграниченияСверху <> 0 Тогда
					Результат = Мин(Результат, ОграничениеПособия);
				КонецЕсли;
				
				Если Результат < СтрокаДвижений.Результат Тогда
					СтрокаДвижений.ДополнительныйРезультат = (СтрокаДвижений.Результат - Результат) * ?(СтрокаДвижений.Сторно,-1,1);
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Часть пособия, финансируемая Федеральным бюджетом, составляет: " + (СтрокаДвижений.Результат - Результат), КомментарийВидаРасчета);
					КонецЕсли;
				Иначе
					СтрокаДвижений.ДополнительныйРезультат = 0
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоПереходныйПериод Тогда
				Если КомментироватьРасчет Тогда
					КомментарийВидаРасчета = КомментарийВидаРасчета.Родитель;
				КонецЕсли;
				Если СтрокаДвижений.Сторно Или СтрокаДвижений.Результат < РезультатПоПравилам2010Года Тогда
					Если Не СтрокаДвижений.Сторно Тогда
						СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени2010Года;
						Если КомментироватьРасчет Тогда
							ОбщегоНазначенияЗК.КомментарийРасчета("Пособие начислено по правилам 2010 года", КомментарийВидаРасчета);
						КонецЕсли;
					КонецЕсли;
					СтрокаДвижений.Результат = РезультатПоПравилам2010Года;
					СтрокаДвижений.ДополнительныйРезультат = ДополнительныйРезультатПоПравилам2010Года;
				ИначеЕсли  Не СтрокаДвижений.Сторно И КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Пособие начислено по правилам 2011 года", КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
		Иначе // для участвующих в пилотном проекте ФСС пособие не начисляется
			
			СтрокаДвижений.Результат = 0;
			СтрокаДвижений.ДополнительныйРезультат = 0;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("У страхователей, участвующих в пилотном проекте ФСС, пособие не начисляется", КомментарийВидаРасчета);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПоСреднемуЗаработкуФСС213ФЗ" Тогда
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		
		Если СтрокаДвижений.ПериодРегистрации < ДатаЗакона213ФЗ Или СтрокаДвижений.ПериодДействияНачало < ДатаЗакона213ФЗ Тогда
			Возврат Ложь
		КонецЕсли;
		
		Если НЕ СтрокаДвижений.Сторно Тогда
			Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2010) Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
				СтрокаДвижений.Результат = 0;
				СтрокаДвижений.ДополнительныйРезультат = 0;
				Возврат Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий2010) Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
				СтрокаДвижений.Результат = 0;
				СтрокаДвижений.ДополнительныйРезультат = 0;
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		ПроцентОплаты = СтрокаДвижений.Показатель1;
		ПроцентОплатыБезЛьгот = СтрокаДвижений.Показатель2;
		
		ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныхДней = Null, 0,ИсходныеДанные.КалендарныхДней);
		
		// Рассчитаем заработок за день 
		// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
		Если НЕ СтрокаДвижений.Сторно Тогда
			
			ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2010 / ИсходныеДанные.ОтработаноДнейПособий2010,2);
			
			// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
			СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
			
		Иначе
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
		КонецЕсли;
		
		НормаВремени = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
		
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
			ОбщегоНазначенияЗК.КомментарийРасчета("Оплачивается " + ОплачиваемоеВремя + " " + ОбщегоНазначенияЗК.ФормаМножественногоЧисла("день", "дня", "дней", ОплачиваемоеВремя), КомментарийВидаРасчета);
			ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
		КонецЕсли;
		
		Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемС2010года 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничением Тогда
			РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения2010 / 365
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничениемИВРазмереММОТ Тогда
			РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения2010 / 365
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничением Тогда
			РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемПоБеременности Тогда
			РазмерОграничения = ИсходныеДанные.РазмерПоБеременности * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОграничениемВРазмереММОТ Тогда
			РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТбезРК Тогда
			РазмерОграничения = ИсходныеДанные.РазмерММОТ
		Иначе
			РазмерОграничения = 0;
		КонецЕсли;
		
		Если РазмерОграничения = 0 Тогда
			Результат = ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Пособие начисляется без ограничений", КомментарийВидаРасчета);
			КонецЕсли;
		ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемС2010года
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничением 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничениемИВРазмереММОТ Тогда
			ОграничениеПособия = Окр(РазмерОграничения,2);
			Результат = ОплачиваемоеВремя * Окр(Мин(ЗаработокЗаЕдиницуВремени, ОграничениеПособия) * ПроцентОплаты / 100,2);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Ограничение среднего заработка: " + ОграничениеПособия, КомментарийВидаРасчета);
			КонецЕсли;
		ИначеЕсли ОплачиваемоеВремя = 0 Тогда
			ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
		Иначе
			Если ОплачиваемоеВремя < НормаВремени Тогда
				ОграничениеПособия = Окр(РазмерОграничения / НормаВремени,2);
				Результат = ОплачиваемоеВремя * Мин(Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2), ОграничениеПособия);
			Иначе
				ОграничениеПособия = Окр(РазмерОграничения,2);
				Результат = Мин(ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2), ОграничениеПособия);
			КонецЕсли;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Ограничение пособия: " + ОграничениеПособия, КомментарийВидаРасчета);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
		СтрокаДвижений.Результат = Результат;
		
		Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничениемИВРазмереММОТ Тогда
			РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроцентОплатыБезЛьгот) И ЗначениеЗаполнено(ИсходныеДанные.ВидПособияСоциальногоСтрахования) Тогда
			Результат = 0;
			Если РазмерОграничения = 0 Тогда
				Результат = ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2);
			ИначеЕсли ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемС2010года 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничением Тогда
				ОграничениеПособия = Окр(РазмерОграничения,2);
				Результат = ОплачиваемоеВремя * Окр(Мин(ЗаработокЗаЕдиницуВремени, ОграничениеПособия) * ПроцентОплатыБезЛьгот / 100,2);
			ИначеЕсли ОплачиваемоеВремя <> 0 Тогда
				Если ОплачиваемоеВремя < НормаВремени Тогда
					ОграничениеПособия = Окр(РазмерОграничения / НормаВремени,2);
					Результат = ОплачиваемоеВремя * Мин(Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2), ОграничениеПособия);
				Иначе
					ОграничениеПособия = Окр(РазмерОграничения,2);
					Результат = Мин(ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2), ОграничениеПособия);
				КонецЕсли;
			КонецЕсли;
			
			Если Результат < СтрокаДвижений.Результат Тогда
				СтрокаДвижений.ДополнительныйРезультат = (СтрокаДвижений.Результат - Результат) * ?(СтрокаДвижений.Сторно,-1,1);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Часть пособия, финансируемая Федеральным бюджетом, составляет: " + (СтрокаДвижений.Результат - Результат), КомментарийВидаРасчета);
				КонецЕсли;
			Иначе
				СтрокаДвижений.ДополнительныйРезультат = 0
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПособиеПоУходуЗаРебенком213ФЗ" Тогда
		
		Если СтрокаДвижений.Показатель2 = 0 Тогда
			ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не указано количество детей, за которыми производится уход ");
			СтрокаДвижений.Результат = 0;
			Возврат Истина;
		КонецЕсли;
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		ДатаЗакона343ФЗ = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
		
		КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
		ОплачиваемыеДни = ИсходныеДанные.КалендарныхДней; // календарных дней за фактический период действия
		
		Если Не ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(СтрокаДвижений.ПериодРегистрации, СтрокаДвижений.ОбособленноеПодразделение) Тогда
			
			КоличествоДетейВсего = СтрокаДвижений.Показатель2;
			КоличествоПервыхДетей = СтрокаДвижений.Показатель3;
			
			Если ИсходныеДанные.ПериодДействияНачало < ДатаЗакона213ФЗ Тогда
				
				// часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
				//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в 
				//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия, 
				//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов 
				//	размера указанного заработка (дохода, денежного довольствия)."
				ПроцентОплаты = Мин(40 * КоличествоДетейВсего,100); 
				
				// части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
				//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате, 
				//	минимальный и максимальный размеры указанного пособия определяются с учетом этих коэффициентов."
				
				//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия"
				
				ОграничениеПособияСнизу = (ИсходныеДанные.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей 
					+ ИсходныеДанные.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
				ОграничениеПособияСверху = ИсходныеДанные.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет * КоличествоДетейВсего * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
				
				// определяем среднемесячный заработок путем умножения среднего дневного заработка на среднемесячное число календарных дней
				// согласно п.5 Разъяснения о порядке назначения и выплаты ежемесячного пособия по уходу за ребенком, утв. приказом 
				// Минздравсоцразвития РФ N 270, ФСС РФ N 106 от 13.04.2007
				
				РазмерПособия = Окр(СтрокаДвижений.Показатель1 * ПроцентОплаты / 100 * ?(ДеньГода(КонецГода(ИсходныеДанные.ПериодДействияНачало)) = 365,30.4,30.5), 2);
				
				// пособие за месяц с учетом ограничений
				ОрганиченныйРазмер = Макс(Мин(РазмерПособия, ОграничениеПособияСверху), ОграничениеПособияСнизу);
				
				Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
					Результат = Окр(ОрганиченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
				Иначе 
					Результат = ОрганиченныйРазмер;
				КонецЕсли;
				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия в процентах от среднего заработка: " + ПроцентОплаты, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия за месяц исходя из среднего заработка: " + РазмерПособия, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Учтенный районный коэффициент: " + Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер пособия: " + ОграничениеПособияСнизу, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер пособия: " + ОграничениеПособияСверху, КомментарийВидаРасчета);
					Если ОрганиченныйРазмер = РазмерПособия Тогда
						ТекстСообщения = "Расчет производится исходя из среднего заработка";
					ИначеЕсли ОрганиченныйРазмер = ОграничениеПособияСверху Тогда
						ТекстСообщения = "Расчет производится исходя из максимального размера пособия";
					Иначе
						ТекстСообщения = "Расчет производится исходя из минимального размера пособия";
					КонецЕсли;
					ОбщегоНазначенияЗК.КомментарийРасчета(ТекстСообщения, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Календарных дней в месяце: " + КалендарныхДнейВМесяце, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемые дни отпуска: " + ОплачиваемыеДни, КомментарийВидаРасчета);
				КонецЕсли;
				
			Иначе
				
				Если СтрокаДвижений.ДатаНачалаСобытия < '20170101' Тогда
					
					// для расчетов используется максимальный среднедневной заработок (из исчисленных по "старым" и по "новым" правилам)
					СреднедневнойЗаработок = Макс(СтрокаДвижений.Показатель1, СтрокаДвижений.Показатель6);
					
					// В соответствии с частью 5.1 статьи 14 Федеральный закон от 29 декабря 2006 года № 255-ФЗ «Об обязательном социальном 
					// страховании на случай временной нетрудоспособности и в связи с материнством»
					// определяем среднемесячный заработок путем умножения среднего дневного заработка на 30.4
					
					СреднийЗаработок = Окр(СреднедневнойЗаработок * 30.4, 2);
				
				Иначе
					
					Если СтрокаДвижений.Показатель1 <> СтрокаДвижений.Показатель6 И ЗначениеЗаполнено(СтрокаДвижений.Показатель6) Тогда  // рассчитываем из МРОТ
						// Пункт 23 "Положения об особенностях порядка исчисления пособий...", утв. Постановлением Правительства РФ от 15.06.2007 № 375:
						// В случаях, указанных в пункте 11(1) настоящего Положения ... ежемесячное пособие по уходу за ребенком определяется 
						// исходя из минимального размера оплаты труда, установленного федеральным законом на день наступления страхового случая 
						// (для лиц, работающих на момент наступления страхового случая на условиях неполного рабочего времени, - пропорционально продолжительности рабочего времени). 
						// При этом средний дневной заработок не рассчитывается и коэффициент 30,4 не применяется.
						СреднийЗаработок = СтрокаДвижений.Показатель6;
					Иначе
						// В соответствии с частью 5.1 статьи 14 Федеральный закон от 29 декабря 2006 года № 255-ФЗ «Об обязательном социальном 
						// страховании на случай временной нетрудоспособности и в связи с материнством»
						// определяем среднемесячный заработок путем умножения среднего дневного заработка на 30.4
						СреднийЗаработок = Окр(СтрокаДвижений.Показатель1 * 30.4, 2);
					КонецЕсли;
					
				КонецЕсли;
				
				// льготы предусмотрены статьей 18 Закона РФ от 15.05.1991 № 1244-1 «О социальной  
				// защите граждан, подвергшихся воздействию радиации вследствие катастрофы на 
				// Чернобыльской АЭС», дополнительные суммы пособия при этом финансируются
				// федеральным бюджетом
				КоэффициентЛьготы = Макс(СтрокаДвижений.Показатель4, 1); // если льгота не применяется, коэффициент будет равен 1
				КоэффициентФедеральногоБюджета = Мин(СтрокаДвижений.Показатель5, 1); 
								
				Если ИсходныеДанные.ПериодДействияНачало < ДатаЗакона343ФЗ Или СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона343ФЗ Тогда
					
					// Средний заработок, из которого исчисляется ежемесячное пособие по уходу за ребенком, не может превышать 
					// средний заработок, определяемый путем деления предельной величины базы для начисления страховых взносов 
					// в Фонд социального страхования Российской Федерации, установленной Федеральным законом "О страховых взносах 
					// в Пенсионный фонд Российской Федерации, Фонд социального страхования Российской Федерации, Федеральный фонд 
					// обязательного медицинского страхования и территориальные фонды обязательного медицинского страхования" на день 
					// наступления страхового случая, на 12.
					
					РазмерОграничения = Окр(ИсходныеДанные.РазмерОбщегоОграничения2010 / 12, 2);
					РазмерПособияИзСреднегоЗаработка = Мин(СреднийЗаработок, РазмерОграничения);
					
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер среднего заработка: " + РазмерОграничения, КомментарийВидаРасчета);
					КонецЕсли;
					
				Иначе // с 2011 года максимальный размер месячного среднего заработка не используется, т.к. ограничивается средний дневной заработок
					
					РазмерПособияИзСреднегоЗаработка = СреднийЗаработок;
					
				КонецЕсли;
				
				Если КомментироватьРасчет Тогда
					Если Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1) > 1 Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Учтенный районный коэффициент: " + Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
					КонецЕсли;
					ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок, из которого исчисляется пособие: " + СреднийЗаработок, КомментарийВидаРасчета);
				КонецЕсли;
				
				Если КоличествоПервыхДетей = 1 Тогда
					
					// если среди детей есть первый ребенок, считаем пособие на него отдельно
					
					РазмерПособия = Окр(РазмерПособияИзСреднегоЗаработка * 40 / 100, 2) * КоэффициентЛьготы;
					
					// части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
					//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате, 
					//	минимальный размер указанного пособия определяются с учетом этих коэффициентов."
					
					ОграничениеПособияСнизу = ИсходныеДанные.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
					ОрганиченныйРазмер = Макс(РазмерПособия, ОграничениеПособияСнизу);
					
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия на первого ребенка в процентах от среднего заработка: " + 40, КомментарийВидаРасчета);
						ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия на первого ребенка за месяц исходя из среднего заработка" + ?(КоэффициентЛьготы = 1, "", " с учетом " + КоэффициентЛьготы + "-кратной льготы") + ": " + РазмерПособия, КомментарийВидаРасчета);
						ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер пособия на первого ребенка" + ?(КоэффициентЛьготы = 1, "", " с учетом " + КоэффициентЛьготы + "-кратной льготы") + ": " + ОграничениеПособияСнизу, КомментарийВидаРасчета);
						Если ОрганиченныйРазмер = РазмерПособия Тогда
							ТекстСообщения = "Расчет пособия на первого ребенка производится исходя из среднего заработка";
						Иначе
							ТекстСообщения = "Расчет пособия на первого ребенка производится исходя из минимального размера пособия";
						КонецЕсли;
						ОбщегоНазначенияЗК.КомментарийРасчета(ТекстСообщения, КомментарийВидаРасчета);
					КонецЕсли;
					
					Если КоличествоДетейВсего > 1 Тогда
						
						МинимальныйРазмерПособия = ОграничениеПособияСнизу;
						
						// часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
						//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в 
						//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия, 
						//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов 
						//	размера указанного заработка (дохода, денежного довольствия)."
						ПроцентОплаты = Мин(40 * (КоличествоДетейВсего - 1), 100); 
						
						// части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
						//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате, 
						//	минимальный размер указанного пособия определяются с учетом этих коэффициентов."
						
						//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия"
						
						ОграничениеПособияСнизу = ИсходныеДанные.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - 1) * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
						МинимальныйРазмерПособия = МинимальныйРазмерПособия + ОграничениеПособияСнизу;
						
						РазмерПособия = Окр(РазмерПособияИзСреднегоЗаработка * ПроцентОплаты / 100, 2) * КоэффициентЛьготы;
						
						// пособие за месяц с учетом ограничений
						ОрганиченныйРазмер = ОрганиченныйРазмер + Макс(РазмерПособия, ОграничениеПособияСнизу);
						
						Если КомментироватьРасчет Тогда
							
							ТекстОписанияДетей = "на второго " + ?(КоличествоДетейВсего > 2,"","(и последующих детей) ");
							
							ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия " + ТекстОписанияДетей + "в процентах от среднего заработка: " + ПроцентОплаты, КомментарийВидаРасчета);
							ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия " + ТекстОписанияДетей + "за месяц исходя из среднего заработка" + ?(КоэффициентЛьготы = 1, "", " с учетом " + КоэффициентЛьготы + "-кратной льготы") + ": " + РазмерПособия, КомментарийВидаРасчета);
							ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер пособия " + ТекстОписанияДетей + ": " + ОграничениеПособияСнизу, КомментарийВидаРасчета);
							Если Макс(РазмерПособия, ОграничениеПособияСнизу) = РазмерПособия Тогда
								ТекстСообщения = "Расчет пособия " + ТекстОписанияДетей + "производится исходя из среднего заработка";
							Иначе
								ТекстСообщения = "Расчет пособия " + ТекстОписанияДетей + "производится исходя из минимального размера пособия";
							КонецЕсли;
							ОбщегоНазначенияЗК.КомментарийРасчета(ТекстСообщения, КомментарийВидаРасчета);
							Если ОрганиченныйРазмер <> Макс(Мин(ОрганиченныйРазмер, РазмерПособияИзСреднегоЗаработка), МинимальныйРазмерПособия) Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Суммированный размер пособия (" + ОрганиченныйРазмер + ") превысил 100% среднего заработка застрахованного лица (" + РазмерПособияИзСреднегоЗаработка + "); будет произведено дополнительное ограничение", КомментарийВидаРасчета);
							КонецЕсли;
						КонецЕсли;
						
						// из-за суммирования отдельно рассчитанных пособий минимальный и максимальный размер пособия придется проверять повторно
						ОрганиченныйРазмер = Макс(Мин(ОрганиченныйРазмер, РазмерПособияИзСреднегоЗаработка), МинимальныйРазмерПособия);
						
					КонецЕсли;
					
				Иначе
					
					// часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
					//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в 
					//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия, 
					//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов 
					//	размера указанного заработка (дохода, денежного довольствия)."
					ПроцентОплаты = Мин(40 * КоличествоДетейВсего, 100); 
					
					// части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
					//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате, 
					//	минимальный размер указанного пособия определяются с учетом этих коэффициентов."
					
					//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия"
					
					ОграничениеПособияСнизу = ИсходныеДанные.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * КоличествоДетейВсего * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1) * КоэффициентЛьготы;
					
					РазмерПособия = Окр(РазмерПособияИзСреднегоЗаработка * ПроцентОплаты / 100, 2) * КоэффициентЛьготы;
					
					// пособие за месяц с учетом ограничений
					ОрганиченныйРазмер = Макс(Мин(РазмерПособия, РазмерПособияИзСреднегоЗаработка), ОграничениеПособияСнизу);
					
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия в процентах от среднего заработка: " + ПроцентОплаты, КомментарийВидаРасчета);
						ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия за месяц исходя из среднего заработка" + ?(КоэффициентЛьготы = 1, "", " с учетом " + КоэффициентЛьготы + "-кратной льготы") + ": " + РазмерПособия, КомментарийВидаРасчета);
						Если РазмерПособия > РазмерПособияИзСреднегоЗаработка Тогда
							ОбщегоНазначенияЗК.КомментарийРасчета("Суммированный размер пособия (" + РазмерПособия + ") превысил 100% среднего заработка застрахованного лица (" + РазмерПособияИзСреднегоЗаработка + "); будет произведено дополнительное ограничение", КомментарийВидаРасчета);	
						КонецЕсли;
						ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер пособия: " + ОграничениеПособияСнизу, КомментарийВидаРасчета);
						Если РазмерПособия < ОграничениеПособияСнизу Тогда
							ТекстСообщения = "Расчет производится исходя из минимального размера пособия";
						Иначе
							ТекстСообщения = "Расчет производится исходя из среднего заработка";
						КонецЕсли;
						ОбщегоНазначенияЗК.КомментарийРасчета(ТекстСообщения, КомментарийВидаРасчета);
					КонецЕсли;
					
				КонецЕсли;
				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Календарных дней в месяце: " + КалендарныхДнейВМесяце, КомментарийВидаРасчета);
					ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемые дни отпуска: " + ОплачиваемыеДни, КомментарийВидаРасчета);
				КонецЕсли;
				
				Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
					Результат = Окр(ОрганиченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
				Иначе 
					Результат = ОрганиченныйРазмер;
				КонецЕсли;
				
				Если КоэффициентФедеральногоБюджета = 1 Тогда // пособие целиком за счет федерального бюджета
					СтрокаДвижений.ДополнительныйРезультат = Результат * ?(СтрокаДвижений.Сторно,-1,1);
				ИначеЕсли КоэффициентФедеральногоБюджета = 0.5 Тогда // пособие за счет федерального бюджета выплачивается частично
					
					ОрганиченныйРазмер = Макс(Окр(РазмерПособияИзСреднегоЗаработка * Мин(40 * КоличествоДетейВсего,100) / 100, 2), (ИсходныеДанные.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей + ИсходныеДанные.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1));
					Если ОплачиваемыеДни < КалендарныхДнейВМесяце Тогда
						ДопРезультат = Окр(ОрганиченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
					Иначе 
						ДопРезультат = ОрганиченныйРазмер;
					КонецЕсли;
					
					СтрокаДвижений.ДополнительныйРезультат = Макс(Результат - ДопРезультат, 0) * ?(СтрокаДвижений.Сторно,-1,1);
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДвижений.Результат = Результат;
			
		Иначе // для участвующих в пилотном проекте ФСС пособие не начисляется
			
			СтрокаДвижений.Результат = 0;
			СтрокаДвижений.ДополнительныйРезультат = 0;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("У страхователей, участвующих в пилотном проекте ФСС, пособие не начисляется", КомментарийВидаРасчета);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемыеДни * ?(СтрокаДвижений.Сторно,-1,1);
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ДоплатаДоСреднегоЗаработкаФСС2011" Тогда
		
		ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
		
		Если СтрокаДвижений.ПериодРегистрации < ДатаЗакона Или СтрокаДвижений.ПериодДействияНачало < ДатаЗакона Тогда
			Возврат Ложь
		КонецЕсли;
		
		Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мБезОграничений 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничением
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничениемИВРазмереММОТ
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОграничениемВРазмереММОТ Тогда
			Возврат Ложь
		КонецЕсли;
		
		ОплачиваемоеВремя = ИсходныеДанные.КалендарныхДней;
		
		ЭтоПереходныйПериод = СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона И СтрокаДвижений.ПериодДействияНачало >= ДатаЗакона;
		Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничением
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничениемИВРазмереММОТ
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ Тогда
			ЭтоПереходныйПериод = Ложь
		КонецЕсли;
		
		
		РезультатПоПравилам2010Года = 0; ЗаработокЗаЕдиницуВремени2010Года = 0;
		Если ЭтоПереходныйПериод Тогда
			
			// Рассчитаем заработок за день 
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если СтрокаДвижений.Сторно Тогда
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
			ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2010) Или Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий2010) Тогда
				ЗаработокЗаЕдиницуВремени = 0;
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2010 / ИсходныеДанные.ОтработаноДнейПособий2010,2);
			КонецЕсли;
			
			РезультатПоПравилам2010Года = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
			ЗаработокЗаЕдиницуВремени2010Года = ЗаработокЗаЕдиницуВремени;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по правилам 2010 года", КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по правилам 2011 года", КомментарийВидаРасчета);
			КонецЕсли;
		КонецЕсли;
		
		Если ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничением
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничениемИВРазмереММОТ
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ Тогда
			УчитываемыхДнейВКалендарныхГодах = ИсходныеДанные.ОтработаноДнейДляПособийПоМатеринству
		Иначе
			УчитываемыхДнейВКалендарныхГодах = 730
		КонецЕсли;
		
		// Рассчитаем заработок за день
		// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
		Если НЕ СтрокаДвижений.Сторно Тогда
			
			ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах,2);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
			
			// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
			СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
			
		Иначе
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
		КонецЕсли;
		
		РазмерОграниченияСнизу = ИсходныеДанные.РазмерММОТ * Мин(ИсходныеДанные.ДоляММОТ, 1);
		Если ЗаработокЗаЕдиницуВремени < РазмерОграниченияСнизу * 24 / 730 Тогда
			ЗаработокЗаЕдиницуВремени = Окр(РазмерОграниченияСнизу * 24 / 730 * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), 2);
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер среднедневногого заработка рассчитан из МРОТ в сумме " + ИсходныеДанные.РазмерММОТ + ?(Мин(ИсходныеДанные.ДоляММОТ, 1) = 1,"", " дополнительно учитывается коэффициент неполного рабочего времени в размере " + Мин(ИсходныеДанные.ДоляММОТ, 1)), КомментарийВидаРасчета);
				ОбщегоНазначенияЗК.КомментарийРасчета("В качестве среднего заработка за месяц принята сумма: " + РазмерОграниченияСнизу + "; размер среднедневного заработка" + ?(ИсходныеДанные.РайонныйКоэффициентРФОрганизации <= 1, "", " с учетом РК " + ИсходныеДанные.РайонныйКоэффициентРФОрганизации) + " составил: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			КонецЕсли;
		КонецЕсли;
		
		Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
		
		Если ЭтоПереходныйПериод Тогда
			Если СтрокаДвижений.Сторно Или Результат < РезультатПоПравилам2010Года Тогда
				Если Не СтрокаДвижений.Сторно Тогда
					СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени2010Года;
					Если КомментироватьРасчет Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок рассчитан по правилам 2010 года", КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
				Результат = РезультатПоПравилам2010Года;
			ИначеЕсли  Не СтрокаДвижений.Сторно И КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок рассчитан по правилам 2011 года", КомментарийВидаРасчета);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДвижений.Сторно И Не СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0 Тогда
			// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
			// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
			// поэтому для них получим базу прежним способом
			ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
			РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
		Иначе
			РезультатБаза = ИсходныеДанные.РезультатБаза;
		КонецЕсли;
		
		СреднийЗаработок = Результат;
		Результат = Макс(СреднийЗаработок - ?(РезультатБаза = NULL, 0, РезультатБаза), 0);
		
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
			ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок: " + СреднийЗаработок, КомментарийВидаРасчета);
			КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Вычитаемые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
			РасшифровкаБазы = ИсходныеДанные.Выбрать();
			Пока РасшифровкаБазы.Следующий() Цикл
				Если ЗначениеЗаполнено(РасшифровкаБазы.РезультатБаза) Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
		СтрокаДвижений.Результат = Результат;
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ДоплатаДоСреднегоЗаработкаФСС" Тогда
		
		Если ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("ДоплатаДоСреднегоЗаработкаФСС2011", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные) Тогда
			Возврат Истина
		КонецЕсли;
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		
		ЭтоПорядок2010 = СтрокаДвижений.ПериодРегистрации >= ДатаЗакона213ФЗ И СтрокаДвижений.ПериодДействияНачало >= ДатаЗакона213ФЗ;
		
		Если НЕ СтрокаДвижений.Сторно Тогда
			Если ЭтоПорядок2010 Тогда
				Если Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2010) Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
					СтрокаДвижений.Результат = 0;
					Возврат Истина;
				ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий2010) Тогда
					ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
					СтрокаДвижений.Результат = 0;
					Возврат Истина;
				КонецЕсли;
			ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий) Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
				СтрокаДвижений.Результат = 0;
				Возврат Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ИсходныеДанные.ОтработаноДнейПособий) Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
				СтрокаДвижений.Результат = 0;
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		// Рассчитаем заработок за день 
		// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
		Если НЕ СтрокаДвижений.Сторно Тогда
			
			Если ЭтоПорядок2010 Тогда
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2010 / ИсходныеДанные.ОтработаноДнейПособий2010,2);
			Иначе
				ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий / ИсходныеДанные.ОтработаноДнейПособий,2);
			КонецЕсли;
			
			// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
			СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
			
		Иначе
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
		КонецЕсли;
		
		Если СтрокаДвижений.Сторно И НЕ СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0 Тогда
			// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
			// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
			// поэтому для них получим базу прежним способом
			ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
			РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
		Иначе
			РезультатБаза = ИсходныеДанные.РезультатБаза;
		КонецЕсли;
		
		ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныхДней = Null, 0,ИсходныеДанные.КалендарныхДней);
		СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
		
		Результат = Макс(СреднийЗаработок - ?(РезультатБаза = NULL, 0, РезультатБаза), 0);
		
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
			ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
			ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок: " + СреднийЗаработок, КомментарийВидаРасчета);
			КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Вычитаемые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
			РасшифровкаБазы = ИсходныеДанные.Выбрать();
			Пока РасшифровкаБазы.Следующий() Цикл
				Если ЗначениеЗаполнено(РасшифровкаБазы.РезультатБаза) Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
		СтрокаДвижений.Результат = Результат;
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "ПочтовыеПереводы" Тогда
		
		Если ИсходныеДанные.ПоТарифу Тогда
			Если ИсходныеДанные.СуммаАлиментов > 500000 И ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": превышена максимальная сумма почтового перевода - 500000 рублей");
			Иначе
				СтрокаДвижений.Результат = ИсходныеДанные.РазмерПочтовогоПеревода;
			КонецЕсли;
		Иначе
			СтрокаДвижений.Результат = СтрокаДвижений["Показатель1"] / 100 * ОбщегоНазначенияЗК.ЦелМаксимальное(ИсходныеДанные.РазмерПочтовогоПеревода);
		КонецЕсли;
		
		Возврат Истина
		
	КонецЕсли;
	
	Если ИмяАлгоритма = "АлиментыВПрожиточныхМинимумах" Тогда
		
		УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
		СтрокаДвижений.Результат = Макс(СтрокаДвижений.Показатель1 * ИсходныеДанные.ВеличинаПрожиточногоМинимума / 100 - УжеНачисленоВТекущемПериоде, 0);
		
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Доля прож.минимума (%): " + СтрокаДвижений.Показатель1, КомментарийВидаРасчета);
			ОбщегоНазначенияЗК.КомментарийРасчета("Величина прожиточного минимума: " + ИсходныеДанные.ВеличинаПрожиточногоМинимума, КомментарийВидаРасчета);
			ОбщегоНазначенияЗК.КомментарийРасчета("Ранее зарегистрировано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
		КонецЕсли;
		
		Возврат Истина
		
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

// Дополняет данные о ставке налогообложения, используемой для резидентов РФ, 
// сведениями о реальной ставке обложения с учетом налогового статуса физического лица.
// В менеджер временных таблиц помещается таблица ВТСтавкаНДФЛПоСтавкеРезидента с уникальными записями с полями:
//		ФизическоеЛицо.
//		Статус
//		Период, переданная на вход дата
//		КодДохода, тип СправочникСсылка.ВидыДоходовНДФЛ
//		СтавкаНалогообложенияРезидента, тип ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента
//		СтавкаНДФЛ, тип ПеречислениеСсылка.НДФЛСтавки
//		СтавкаЧислом, тип Число, например, 0.13.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицу с полями:
//		ФизическоеЛицо
//		Период, дата на которую будет определен статус налогоплательщика
//		КодДохода, тип СправочникСсылка.ВидыДоходовНДФЛ
//		СтавкаНалогообложенияРезидента, тип ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента.
//	ИмяТаблицы - строка - имя обрабатываемой временной таблицы.
//	УчитыватьСтатусНаКонецГода - строка - необязательный, описание того, как следует учитывать изменение 
//		статуса на конец налогового периода, возможные значения:
//			"НеУчитыватьИзмененияСтатуса" (значение по умолчанию)
//			"УчитыватьИзмененияСтатусаДляРасчета"
//			"УчитыватьИзмененияСтатусаДляОтчетности"
//	МесяцКонцаГода - число - необязательный, описывает продолжительность отчетного (расчетного) периода в месяцах, налоговому периоду (год) соответствует значение 12
//
Процедура СоздатьВТСтавкаНДФЛПоСтавкеРезидента(МенеджерВременныхТаблиц, ИмяТаблицы, УчитыватьСтатусНаКонецГода = "НеУчитыватьИзмененияСтатуса", МесяцКонцаГода = 12) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаИзмененияНалогообложенияДивидендов", ПроведениеРасчетов.ДатаИзмененияНалогообложенияДивидендов());
	Запрос.УстановитьПараметр("ДатаЗакона285ФЗ", ПроведениеРасчетов.ДатаЗакона285ФЗ());
	Запрос.УстановитьПараметр("ДатаИзмененияПорядкаИсчисленияДляИностранцев", ПроведениеРасчетов.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев());
	Запрос.УстановитьПараметр("УчитыватьИзмененияСтатусаДляРасчета", УчитыватьСтатусНаКонецГода = "УчитыватьИзмененияСтатусаДляРасчета");
	Запрос.УстановитьПараметр("НеУчитыватьИзмененияСтатуса", УчитыватьСтатусНаКонецГода <> "УчитыватьИзмененияСтатусаДляРасчета" И УчитыватьСтатусНаКонецГода <> "УчитыватьИзмененияСтатусаДляОтчетности");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК СтавкаНалогообложения,
	|	0.13 КАК Размер
	|ПОМЕСТИТЬ ВТСтавкиНалогаЧислом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09),
	|	0.09
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35),
	|	0.35
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30),
	|	0.3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15),
	|	0.15";
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаПериоды.ФизЛицо,
	|	ФизическиеЛицаПериоды.Период,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаПериоды.Период < &ДатаЗакона285ФЗ
	|				И СтатусФизЛицКакНалогоплательщиковНДФЛ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Беженец)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|		ИНАЧЕ ЕСТЬNULL(СтатусФизЛицКакНалогоплательщиковНДФЛ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВТФизическиеЛицаСтатусыНДФЛ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписокФизическихЛиц.ФизЛицо КАК ФизЛицо,
	|		МАКСИМУМ(СтатусФизическихЛиц.Период) КАК ПериодСтатуса,
	|		СписокФизическихЛиц.Период КАК Период
	|	ИЗ
	|		#ТаблицаНДФЛ КАК СписокФизическихЛиц
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизическихЛиц
	|			ПО СписокФизическихЛиц.ФизЛицо = СтатусФизическихЛиц.ФизЛицо
	|				И (ВЫБОР
	|					КОГДА СписокФизическихЛиц.Период < &ДатаИзмененияПорядкаИсчисленияДляИностранцев
	|						ТОГДА КОНЕЦПЕРИОДА(СписокФизическихЛиц.Период, МЕСЯЦ)
	|					ИНАЧЕ СписокФизическихЛиц.Период
	|				КОНЕЦ >= СтатусФизическихЛиц.Период)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СписокФизическихЛиц.ФизЛицо,
	|		СписокФизическихЛиц.Период) КАК ФизическиеЛицаПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
	|		ПО ФизическиеЛицаПериоды.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
	|			И ФизическиеЛицаПериоды.ПериодСтатуса = СтатусФизЛицКакНалогоплательщиковНДФЛ.Период";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТаблицаНДФЛ", ИмяТаблицы);
	Запрос.Выполнить();
	
	Если УчитыватьСтатусНаКонецГода = "УчитыватьИзмененияСтатусаДляРасчета" Или УчитыватьСтатусНаКонецГода = "УчитыватьИзмененияСтатусаДляОтчетности" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.ФизЛицо,
		|	ФизическиеЛицаПериоды.Период,
		|	ВЫБОР
		|		КОГДА ФизическиеЛицаПериоды.Период < &ДатаЗакона285ФЗ
		|				И СтатусФизЛицКакНалогоплательщиковНДФЛ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Беженец)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
		|		ИНАЧЕ ЕСТЬNULL(СтатусФизЛицКакНалогоплательщиковНДФЛ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
		|	КОНЕЦ КАК Статус
		|ПОМЕСТИТЬ ВТСтатусыНаКонецГода
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокФизическихЛиц.ФизЛицо КАК ФизЛицо,
		|		МАКСИМУМ(СтатусФизическихЛиц.Период) КАК ПериодСтатуса,
		|		СписокФизическихЛиц.Период КАК Период
		|	ИЗ
		|		#ТаблицаНДФЛ КАК СписокФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизическихЛиц
		|			ПО СписокФизическихЛиц.ФизЛицо = СтатусФизическихЛиц.ФизЛицо
		|				И (КОНЕЦПЕРИОДА(СписокФизическихЛиц.Период, ГОД) >= СтатусФизическихЛиц.Период)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СписокФизическихЛиц.ФизЛицо,
		|		СписокФизическихЛиц.Период) КАК ФизическиеЛицаПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
		|		ПО ФизическиеЛицаПериоды.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
		|			И ФизическиеЛицаПериоды.ПериодСтатуса = СтатусФизЛицКакНалогоплательщиковНДФЛ.Период";
		
		Если МесяцКонцаГода <> 12 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КОНЕЦПЕРИОДА(СписокФизическихЛиц.Период, ГОД)","ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СписокФизическихЛиц.Период, ГОД), МЕСЯЦ, " + МесяцКонцаГода + "), СЕКУНДА, -1)")
		КонецЕсли;
		
	Иначе 	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.ФизЛицо,
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.Статус
		|ПОМЕСТИТЬ ВТСтатусыНаКонецГода
		|ИЗ
		|	ВТФизическиеЛицаСтатусыНДФЛ КАК ФизическиеЛицаПериоды";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТаблицаНДФЛ", ИмяТаблицы);
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНДФЛ.ФизЛицо,
	|	ТаблицаНДФЛ.Период,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &НеУчитыватьИзмененияСтатуса
	|				ТОГДА ФизическиеЛицаСтатусыНДФЛ.Статус
	|			КОГДА ФизическиеЛицаСтатусыНДФЛ.Статус = СтатусыНаКонецГода.Статус
	|				ТОГДА ФизическиеЛицаСтатусыНДФЛ.Статус
	|			КОГДА СтатусыНаКонецГода.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			КОГДА &УчитыватьИзмененияСтатусаДляРасчета
	|				ТОГДА ФизическиеЛицаСтатусыНДФЛ.Статус
	|			КОГДА ТаблицаНДФЛ.Период < &ДатаИзмененияПорядкаИсчисленияДляИностранцев
	|				ТОГДА СтатусыНаКонецГода.Статус
	|			КОГДА СтатусыНаКонецГода.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|				ТОГДА ВЫБОР
	|						КОГДА ФизическиеЛицаСтатусыНДФЛ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|						ИНАЧЕ ФизическиеЛицаСтатусыНДФЛ.Статус
	|					КОНЕЦ
	|			КОГДА ФизическиеЛицаСтатусыНДФЛ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|			ИНАЧЕ ФизическиеЛицаСтатусыНДФЛ.Статус
	|		КОНЕЦ, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус
	|ПОМЕСТИТЬ ВТСтатусыСУчетомИзменений
	|ИЗ
	|	#ТаблицаНДФЛ КАК ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСтатусыНДФЛ КАК ФизическиеЛицаСтатусыНДФЛ
	|		ПО ТаблицаНДФЛ.ФизЛицо = ФизическиеЛицаСтатусыНДФЛ.ФизЛицо
	|			И ТаблицаНДФЛ.Период = ФизическиеЛицаСтатусыНДФЛ.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусыНаКонецГода КАК СтатусыНаКонецГода
	|		ПО ТаблицаНДФЛ.ФизЛицо = СтатусыНаКонецГода.ФизЛицо
	|			И ТаблицаНДФЛ.Период = СтатусыНаКонецГода.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНДФЛ.ФизЛицо,
	|	ФизическиеЛицаСтатусыНДФЛ.Статус,
	|	ТаблицаНДФЛ.Период,
	|	ТаблицаНДФЛ.КодДохода,
	|	ТаблицаНДФЛ.СтавкаНалогообложенияРезидента,
	|	ВЫБОР
	|		КОГДА ТаблицаНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ФизическиеЛицаСтатусыНДФЛ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|				КОНЕЦ
	|		КОГДА ТаблицаНДФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ФизическиеЛицаСтатусыНДФЛ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|					КОГДА ТаблицаНДФЛ.Период >= &ДатаИзмененияНалогообложенияДивидендов
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|				КОНЕЦ
	|		КОГДА ЕСТЬNULL(ФизическиеЛицаСтатусыНДФЛ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|					КОГДА ТаблицаНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ КАК СтавкаНДФЛ
	|ПОМЕСТИТЬ ВТБезСтавкиНалогаЧислом
	|ИЗ
	|	#ТаблицаНДФЛ КАК ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусыСУчетомИзменений КАК ФизическиеЛицаСтатусыНДФЛ
	|		ПО ТаблицаНДФЛ.ФизЛицо = ФизическиеЛицаСтатусыНДФЛ.ФизЛицо
	|			И ТаблицаНДФЛ.Период = ФизическиеЛицаСтатусыНДФЛ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНДФЛ.ФизЛицо,
	|	ТаблицаНДФЛ.Статус,
	|	ТаблицаНДФЛ.Период,
	|	ТаблицаНДФЛ.КодДохода,
	|	ТаблицаНДФЛ.СтавкаНалогообложенияРезидента,
	|	ТаблицаНДФЛ.СтавкаНДФЛ,
	|	СтавкиНалогаЧислом.Размер КАК СтавкаЧислом
	|ПОМЕСТИТЬ ВТСтавкаНДФЛПоСтавкеРезидента
	|ИЗ
	|	ВТБезСтавкиНалогаЧислом КАК ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНалогаЧислом КАК СтавкиНалогаЧислом
	|		ПО ТаблицаНДФЛ.СтавкаНДФЛ = СтавкиНалогаЧислом.СтавкаНалогообложения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтатусыНаКонецГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТФизическиеЛицаСтатусыНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтавкиНалогаЧислом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтатусыСУчетомИзменений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТБезСтавкиНалогаЧислом";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТаблицаНДФЛ", ИмяТаблицы);
	Запрос.Выполнить();
	
КонецПроцедуры

// получить данные для расчета НДФЛ по ставке 13 процентов
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - месяц налогового периода, по который (включительно) считается налог. 
//  						Это текущий или будущий месяц относительно периода регистрации
//							Если Неопределено - нужно определить максимальный месяц налогового периода и 
//							минимальный месяц налоговго периода 
//  ПериодРегистрации - дата, по которую учитываются зарегистрированные доходы и начисленные налоги 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей НДФЛ
//  СписокФизЛицТекст - текст запроса выборки списка физлиц, по которым необходимо выполнить расчет налога
//	ДополнительныеПараметрыЗапроса - структура значений параметров запроса, необходимых для выполнения текста запроса "СписокФизЛицТекст"
//
// Возвращаемое значение:
//	Таблица значений с колонками: ФизЛицо, ПодразделениеОрганизации, МесяцНалоговогоПериода, Налог,ПримененныйВычетЛичный,ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой,ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой,ПримененныйВычетНаДетейИнвалидовОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов,ПримененныйВычетИмущественныйРасход,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании
//
Функция ПолучитьДанныеНДФЛПоРегистратору(Знач ПервыйМесяцНалоговогоПериода,
											Знач ПоследнийМесяцНалоговогоПериода,
											ПериодРегистрации,
											ОбособленноеПодразделение,
											Организация,
											Регистратор,
											Знач СписокФизЛицТекст,
											ДополнительныеПараметрыЗапроса = Неопределено,
											ЭтоПерерасчет = Ложь,
											КомментироватьРасчет = Ложь,
											ВозвращатьДанныеРасчетовБезПодразделений = Ложь,
											ДоходыДополнительно = Неопределено,
											НалогиДополнительно = Неопределено,
											ВычетыДополнительно = Неопределено, 
											РасчетПриМежрасчетнойВыплате = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	Запрос.УстановитьПараметр("НачалоМесяцаРасчета",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяцаРасчета",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("НачалоГодаРасчета",НачалоГода(ПериодРегистрации));
	
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ Физлицо
	|ПОМЕСТИТЬ ВТСписокФизЛиц
	|ИЗ (" + СписокФизЛицТекст + ") СписокФизЛиц
	|ИНДЕКСИРОВАТЬ ПО Физлицо";
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.Выполнить();
	
	Если ДоходыДополнительно = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПолученияДохода,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка) КАК КодДохода,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрации,
		|	0 КАК СуммаДохода,
		|	0 КАК СуммаВычета,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка) КАК КодВычета,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ОбособленноеПодразделение,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЛОЖЬ КАК ЗарегистрированоДляПромежуточногоРасчета
		|ПОМЕСТИТЬ ВТДополнительныеДоходы
		|ГДЕ
		|	ЛОЖЬ";
	Иначе
		Если ДоходыДополнительно.Колонки.Найти("ЗарегистрированоДляПромежуточногоРасчета") = Неопределено Тогда
			ДоходыДополнительно.Колонки.Добавить("ЗарегистрированоДляПромежуточногоРасчета", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сведения.Период,
		|	Сведения.ДатаПолученияДохода,
		|	Сведения.Организация,
		|	Сведения.ФизЛицо,
		|	Сведения.КодДохода,
		|	Сведения.ПериодРегистрации,
		|	Сведения.СуммаДохода,
		|	Сведения.СуммаВычета,
		|	Сведения.КодВычета,
		|	Сведения.ОбособленноеПодразделение,
		|	Сведения.ПодразделениеОрганизации,
		|	Сведения.ЗарегистрированоДляПромежуточногоРасчета
		|ПОМЕСТИТЬ ВТДополнительныеДоходы
		|ИЗ
		|	&КУчетуДополнительно КАК Сведения";
		Запрос.УстановитьПараметр("КУчетуДополнительно", ДоходыДополнительно);
	КонецЕсли;
	Запрос.Выполнить();
	
	Если НалогиДополнительно = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	0 КАК Налог
		|ПОМЕСТИТЬ ВТДополнительныеНалоги
		|ГДЕ
		|	ЛОЖЬ";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сведения.ФизЛицо,
		|	Сведения.МесяцНалоговогоПериода,
		|	Сведения.ПодразделениеОрганизации,
		|	Сведения.Налог
		|ПОМЕСТИТЬ ВТДополнительныеНалоги
		|ИЗ
		|	&КУчетуДополнительно КАК Сведения";
		Запрос.УстановитьПараметр("КУчетуДополнительно", НалогиДополнительно);
	КонецЕсли;
	Запрос.Выполнить();
	
	Если ВычетыДополнительно = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка) КАК КодВычета,
		|	0 КАК ПримененныйВычет
		|ПОМЕСТИТЬ ВТДополнительныеВычеты
		|ГДЕ
		|	ЛОЖЬ";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сведения.ФизЛицо,
		|	Сведения.МесяцНалоговогоПериода,
		|	Сведения.ПодразделениеОрганизации,
		|	Сведения.КодВычета,
		|	Сведения.ПримененныйВычет
		|ПОМЕСТИТЬ ВТДополнительныеВычеты
		|ИЗ
		|	&КУчетуДополнительно КАК Сведения";
		Запрос.УстановитьПараметр("КУчетуДополнительно", ВычетыДополнительно);
	КонецЕсли;
	Запрос.Выполнить();
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда
		
		// получим ПоследнийМесяцНалоговогоПериода
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Данные.Период
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДФЛСведенияОДоходах.Период КАК Период
		|	ИЗ
		|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|			ПО НДФЛСведенияОДоходах.ФизЛицо = Работники.ФизЛицо
		|	ГДЕ
		|		НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация
		|		И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяцаРасчета
		|		И НДФЛСведенияОДоходах.ЗарегистрированоДляПромежуточногоРасчета
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаДанныхРегистратора.Период
		|	ИЗ
		|		ВТДополнительныеДоходы КАК КорректировкаДанныхРегистратора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|			ПО КорректировкаДанныхРегистратора.ФизЛицо = Работники.ФизЛицо
		|	ГДЕ
		|		КорректировкаДанныхРегистратора.Организация = &ГоловнаяОрганизация) КАК Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.Период УБЫВ";
		
		Если РасчетПриМежрасчетнойВыплате Тогда
			Запрос.Текст = ТекстЗапроса;
		Иначе
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "И НДФЛСведенияОДоходах.ЗарегистрированоДляПромежуточногоРасчета", "");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПервыйМесяцНалоговогоПериода = Неопределено Тогда
		// получим самый ранний месяц налогового периода
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Данные.Период
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДФЛСведенияОДоходах.Период КАК Период
		|	ИЗ
		|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|			ПО (Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо)
		|	ГДЕ
		|		НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация
		|		И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяцаРасчета
		|		И НДФЛСведенияОДоходах.ЗарегистрированоДляПромежуточногоРасчета
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаДанныхРегистратора.Период
		|	ИЗ
		|		ВТДополнительныеДоходы КАК КорректировкаДанныхРегистратора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|			ПО КорректировкаДанныхРегистратора.ФизЛицо = Работники.ФизЛицо
		|	ГДЕ
		|		КорректировкаДанныхРегистратора.Организация = &ГоловнаяОрганизация) КАК Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.Период";
		
		Если РасчетПриМежрасчетнойВыплате Тогда
			Запрос.Текст = ТекстЗапроса;
		Иначе
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "И НДФЛСведенияОДоходах.ЗарегистрированоДляПромежуточногоРасчета", "");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаЗакона229ФЗ = ДатаЗакона229ФЗ();
	ДатаИзмененияИсчисленияДляИностранцев = ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев();
	Запрос.УстановитьПараметр("ДатаЗакона229ФЗ", ДатаЗакона229ФЗ);
	Запрос.УстановитьПараметр("ДатаЗакона285ФЗ", ДатаЗакона285ФЗ());
	Запрос.УстановитьПараметр("ДатаИзмененияИсчисленияДляИностранцев", ДатаИзмененияИсчисленияДляИностранцев);
	Запрос.УстановитьПараметр("КонецПериодаРасчета", КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("НачалоГодаПериодаРасчета", НачалоГода(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("КонецГодаПериодаРасчета", КонецГода(ПоследнийМесяцНалоговогоПериода));
	
	// Таблица ВТДатыПоМесяцам: список дат налоговых периодов, в которых рассчитывается налог 
	// Поля:
	//		Период
	
	НачМесяца = НачалоГода(ПервыйМесяцНалоговогоПериода);
	ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
	ДатыПоМесяцамТекст = ДатыПоМесяцамТекст + "
	|ПОМЕСТИТЬ ВТДатыПоМесяцам";
	Пока НачМесяца < НачалоМесяца(ПоследнийМесяцНалоговогоПериода) Цикл
		НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
		ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ДатыПоМесяцамТекст;
	Запрос.Выполнить();
	
	// первый год
	НачалоГода = НачалоГода(ПоследнийМесяцНалоговогоПериода);	
	ПериодыТекстПоГодам = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоНалоговогоПериода";
	ПериодыТекстПоГодам = ПериодыТекстПоГодам + "
	|ПОМЕСТИТЬ ВТПериодыПоГодам";
	Для Сч = Год(ПервыйМесяцНалоговогоПериода)+ 1 По Год(ПоследнийМесяцНалоговогоПериода) Цикл
		НачалоГода = НачалоГода(НачалоГода - 1);
		ПериодыТекстПоГодам = ПериодыТекстПоГодам +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ПериодыТекстПоГодам;
	Запрос.Выполнить();
	
	// Периоды
	// Таблица ВТПериодыНалогаНаДоходы: список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	
	Если ЭтоПерерасчет Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Физлицо КАК Физлицо,
		|	Месяцы.Период КАК Период,
		|	НАЧАЛОПЕРИОДА(Месяцы.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	НАЧАЛОПЕРИОДА(Месяцы.Период, ГОД) КАК НачалоГодаНалоговогоПериода,
		|	КОНЕЦПЕРИОДА(Месяцы.Период, ГОД) КАК КонецГодаНалоговогоПериода
		|ПОМЕСТИТЬ ВТПериодыНалогаНаДоходы
		|ИЗ
		|	ВТСписокФизЛиц КАК Работники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
		|		ПО (ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период";
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДохода.ФизЛицо КАК ФизЛицо,
		|	Месяцы.Период КАК Период,
		|	НАЧАЛОПЕРИОДА(Месяцы.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	НАЧАЛОПЕРИОДА(Месяцы.Период, ГОД) КАК НачалоГодаНалоговогоПериода,
		|	КОНЕЦПЕРИОДА(Месяцы.Период, ГОД) КАК КонецГодаНалоговогоПериода
		|ПОМЕСТИТЬ ВТПериодыНалогаНаДоходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|		МАКСИМУМ(НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)) КАК ПериодМакс,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяцаРасчета
		|					ТОГДА НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, ГОД)
		|				ИНАЧЕ &НачалоГодаРасчета
		|			КОНЕЦ) КАК ПериодМин
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НДФЛСведенияОДоходах.Период КАК Период,
		|			НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|			НДФЛСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		|		ИЗ
		|			РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|		ГДЕ
		|			НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) МЕЖДУ &НачалоГодаРасчета И &НачалоМесяцаРасчета
		|			И НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация
		|			И НДФЛСведенияОДоходах.ФизЛицо В
		|					(ВЫБРАТЬ
		|						Работники.Физлицо
		|					ИЗ
		|						ВТСписокФизЛиц КАК Работники)
		|			И &ЗарегистрированоДляПромежуточногоРасчета
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			НДФЛСведенияОДоходах.Период,
		|			НДФЛСведенияОДоходах.ФизЛицо,
		|			НДФЛСведенияОДоходах.ПериодРегистрации
		|		ИЗ
		|			ВТДополнительныеДоходы КАК НДФЛСведенияОДоходах
		|		ГДЕ
		|			НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация
		|			И НДФЛСведенияОДоходах.ФизЛицо В
		|					(ВЫБРАТЬ
		|						Работники.Физлицо
		|					ИЗ
		|						ВТСписокФизЛиц КАК Работники)) КАК НДФЛСведенияОДоходах
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НДФЛСведенияОДоходах.ФизЛицо) КАК ПериодыДохода
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
		|		ПО (Месяцы.Период МЕЖДУ ПериодыДохода.ПериодМин И ПериодыДохода.ПериодМакс)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период";
		Если РасчетПриМежрасчетнойВыплате Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ЗарегистрированоДляПромежуточногоРасчета","(НДФЛСведенияОДоходах.ЗарегистрированоДляПромежуточногоРасчета ИЛИ НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) < &НачалоМесяцаРасчета)");
		Иначе
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ЗарегистрированоДляПромежуточногоРасчета", "Истина");
		КонецЕсли;
	КонецЕсли;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК СтавкаНалогообложения,
	|	0.13 КАК Размер
	|ПОМЕСТИТЬ ВТСтавкиНалогаВПроцентах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09),
	|	0.09
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35),
	|	0.35
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30),
	|	0.3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15),
	|	0.15
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.НачалоНалоговогоПериода КАК НачалоНалоговогоПериода,
	|	УчетнаяПолитикаПоНДФЛ.ОсобенностиИсчисленияНДФЛ
	|ПОМЕСТИТЬ ВТПолитикаПримененияВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.НачалоНалоговогоПериода КАК НачалоНалоговогоПериода,
	|		МАКСИМУМ(УчетнаяПолитикаПоНДФЛ.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериодыПоГодам КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
	|			ПО Периоды.НачалоНалоговогоПериода >= УчетнаяПолитикаПоНДФЛ.Период
	|	ГДЕ
	|		УчетнаяПолитикаПоНДФЛ.Организация = &ГоловнаяОрганизация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.НачалоНалоговогоПериода) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
	|		ПО ДатыРегистра.ПериодРегистра = УчетнаяПолитикаПоНДФЛ.Период
	|ГДЕ
	|	УчетнаяПолитикаПоНДФЛ.Организация = &ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.НачалоНалоговогоПериода КАК НачалоНалоговогоПериода,
	|	ДатыРегистра.КодВычета КАК КодВычета,
	|	ЕСТЬNULL(РазмерВычетов.Размер, 0) КАК Размер,
	|	ЕСТЬNULL(РазмерВычетов.ОграничениеПоДоходам, 0) КАК ОграничениеПоДоходам
	|ПОМЕСТИТЬ ВТРазмерыСтандартныхВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.НачалоНалоговогоПериода КАК НачалоНалоговогоПериода,
	|		ВидыВычетов.Ссылка КАК КодВычета,
	|		МАКСИМУМ(РазмерВычетов.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериодыПоГодам КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычетыНДФЛ КАК ВидыВычетов
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК РазмерВычетов
	|			ПО (ВидыВычетов.Ссылка = РазмерВычетов.КодВычета)
	|				И Периоды.НачалоНалоговогоПериода >= РазмерВычетов.Период
	|	ГДЕ
	|		ВидыВычетов.ГруппаВычета В (ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные), ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.НачалоНалоговогоПериода,
	|		ВидыВычетов.Ссылка) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК РазмерВычетов
	|		ПО ДатыРегистра.ПериодРегистра = РазмерВычетов.Период
	|			И ДатыРегистра.КодВычета = РазмерВычетов.КодВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.ФизЛицо КАК ФизЛицо,
	|	ДатыРегистра.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Организация = &ГоловнаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименятьВычеты
	|ПОМЕСТИТЬ ВТПрименениеСтандартныхВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПрименениеВычетов.Период) КАК ПериодСреза,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|	ИЗ
	|		ВТПериодыНалогаНаДоходы КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК ПрименениеВычетов
	|			ПО Периоды.МесяцНалоговогоПериода >= ПрименениеВычетов.Период
	|				И Периоды.ФизЛицо = ПрименениеВычетов.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.МесяцНалоговогоПериода) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК ПрименениеВычетов
	|		ПО ДатыРегистра.ПериодСреза = ПрименениеВычетов.Период
	|			И ДатыРегистра.ФизЛицо = ПрименениеВычетов.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.ФизЛицо,
	|	ДатыРегистра.МесяцНалоговогоПериода,
	|	ДатыРегистра.НачалоГодаНалоговогоПериода,
	|	ЕСТЬNULL(ВычетыФизлиц.КодВычетаЛичный, ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)) КАК КодВычета
	|ПОМЕСТИТЬ ВТПраваНаЛичныеВычеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		Периоды.НачалоГодаНалоговогоПериода КАК НачалоГодаНалоговогоПериода
	|	ИЗ
	|		ВТПериодыНалогаНаДоходы КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО Периоды.МесяцНалоговогоПериода >= ВычетыФизлиц.Период
	|				И Периоды.ФизЛицо = ВычетыФизлиц.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.МесяцНалоговогоПериода,
	|		Периоды.НачалоГодаНалоговогоПериода) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ДатыРегистра.ПериодСреза = ВычетыФизлиц.Период
	|			И ДатыРегистра.ФизЛицо = ВычетыФизлиц.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.ФизЛицо КАК ФизЛицо,
	|	ДатыРегистра.МесяцНалоговогоПериода,
	|	ДатыРегистра.НачалоГодаНалоговогоПериода,
	|	ЕСТЬNULL(ДатыРегистра.КодВычета, ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)) КАК КодВычета,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВычетыНаДетей.ПериодЗавершения <= ДатыРегистра.МесяцНалоговогоПериода
	|					И ВычетыНаДетей.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВычетыНаДетей.КоличествоДетейЗавершения
	|			ИНАЧЕ ВычетыНаДетей.КоличествоДетей
	|		КОНЕЦ, 0) КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТПраваНаВычетыНаДетей
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		ВычетыНаДетей.КодВычета КАК КодВычета,
	|		МАКСИМУМ(ВычетыНаДетей.Период) КАК ПериодРегистра,
	|		Периоды.НачалоГодаНалоговогоПериода КАК НачалоГодаНалоговогоПериода
	|	ИЗ
	|		ВТПериодыНалогаНаДоходы КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыНаДетей КАК ВычетыНаДетей
	|			ПО Периоды.МесяцНалоговогоПериода >= ВычетыНаДетей.Период
	|				И Периоды.ФизЛицо = ВычетыНаДетей.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		ВычетыНаДетей.КодВычета,
	|		Периоды.МесяцНалоговогоПериода,
	|		Периоды.НачалоГодаНалоговогоПериода) КАК ДатыРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыНаДетей КАК ВычетыНаДетей
	|		ПО ДатыРегистра.ПериодРегистра = ВычетыНаДетей.Период
	|			И ДатыРегистра.ФизЛицо = ВычетыНаДетей.Физлицо
	|			И ДатыРегистра.КодВычета = ВычетыНаДетей.КодВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычеты.ФизЛицо,
	|	ВЫБОР
	|		КОГДА Вычеты.МесяцНалоговогоПериода < &ДатаЗакона229ФЗ
	|			ТОГДА НАЧАЛОПЕРИОДА(Вычеты.МесяцНалоговогоПериода, ГОД)
	|		ИНАЧЕ Вычеты.МесяцНалоговогоПериода
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	Вычеты.КодВычета,
	|	Вычеты.НалоговыйПериод,
	|	СУММА(Вычеты.Размер) КАК Размер
	|ПОМЕСТИТЬ ВТПравоНаИмущественныеВычеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Обороты.ФизЛицо КАК ФизЛицо,
	|		НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		Обороты.КодВычетаИмущественный КАК КодВычета,
	|		Обороты.Год КАК НалоговыйПериод,
	|		Обороты.РазмерПриход КАК Размер
	|	ИЗ
	|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.Обороты(
	|				&НачалоГодаПериодаРасчета,
	|				&КонецПериодаРасчета,
	|				Месяц,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ФизЛица.ФизЛицо
	|						ИЗ
	|							ВТСписокФизЛиц КАК ФизЛица)
	|					И Организация = &ГоловнаяОрганизация) КАК Обороты
	|	ГДЕ
	|		Обороты.Год = ГОД(Обороты.Период)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияРегистратора.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ДвиженияРегистратора.Период, МЕСЯЦ),
	|		ДвиженияРегистратора.КодВычетаИмущественный,
	|		ДвиженияРегистратора.Год,
	|		ВЫБОР
	|			КОГДА ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ДвиженияРегистратора.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК ДвиженияРегистратора
	|	ГДЕ
	|		ДвиженияРегистратора.Регистратор = &Регистратор
	|		И ДвиженияРегистратора.ФизЛицо В
	|				(ВЫБРАТЬ
	|					ФизЛица.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК ФизЛица)
	|		И ДвиженияРегистратора.Год = ГОД(ДвиженияРегистратора.Период)) КАК Вычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Вычеты.ФизЛицо,
	|	ВЫБОР
	|		КОГДА Вычеты.МесяцНалоговогоПериода < &ДатаЗакона229ФЗ
	|			ТОГДА НАЧАЛОПЕРИОДА(Вычеты.МесяцНалоговогоПериода, ГОД)
	|		ИНАЧЕ Вычеты.МесяцНалоговогоПериода
	|	КОНЕЦ,
	|	Вычеты.КодВычета,
	|	Вычеты.НалоговыйПериод
	|
	|ИМЕЮЩИЕ
	|	СУММА(Вычеты.Размер) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычеты.ФизЛицо,
	|	Вычеты.МесяцНалоговогоПериода,
	|	Вычеты.КодВычета,
	|	Вычеты.Подразделение,
	|	СУММА(Вычеты.СуммаОборот) КАК СуммаОборот
	|ПОМЕСТИТЬ ВТПредоставленныеСтандартныеИСоциальныеВычеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизЛицо КАК ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета КАК КодВычета,
	|		ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ПодразделениеОрганизации КАК Подразделение,
	|		ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ПримененныйВычет КАК СуммаОборот
	|	ИЗ
	|		РегистрНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ
	|	ГДЕ
	|		ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Организация = &ГоловнаяОрганизация
	|		И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизЛицо В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК СписокСотрудников)
	|		И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Регистратор <> &Регистратор
	|		И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|		И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период <= &КонецМесяцаРасчета
	|		И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период < &НачалоМесяцаРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеВычеты.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ДополнительныеВычеты.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ДополнительныеВычеты.КодВычета,
	|		ДополнительныеВычеты.ПодразделениеОрганизации,
	|		ДополнительныеВычеты.ПримененныйВычет
	|	ИЗ
	|		ВТДополнительныеВычеты КАК ДополнительныеВычеты
	|	ГДЕ
	|		ДополнительныеВычеты.ФизЛицо В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК СписокСотрудников)
	|		И ДополнительныеВычеты.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|		И НЕ ДополнительныеВычеты.КодВычета.ГруппаВычета В (ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные), ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО))) КАК Вычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Вычеты.ФизЛицо,
	|	Вычеты.МесяцНалоговогоПериода,
	|	Вычеты.КодВычета,
	|	Вычеты.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычеты.ФизЛицо,
	|	Вычеты.МесяцНалоговогоПериода,
	|	Вычеты.КодВычета,
	|	СУММА(Вычеты.Сумма) КАК Сумма,
	|	Вычеты.Подразделение
	|ПОМЕСТИТЬ ВТПредоставленоИмущественныхВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДвиженияРегистратора.ФизЛицо КАК ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ДвиженияРегистратора.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		ДвиженияРегистратора.КодВычетаИмущественный КАК КодВычета,
	|		ДвиженияРегистратора.Размер КАК Сумма,
	|		ДвиженияРегистратора.ПодразделениеОрганизации КАК Подразделение
	|	ИЗ
	|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК ДвиженияРегистратора
	|	ГДЕ
	|		ДвиженияРегистратора.Организация = &ГоловнаяОрганизация
	|		И ДвиженияРегистратора.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|		И ДвиженияРегистратора.Регистратор <> &Регистратор
	|		И ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияРегистратора.ФизЛицо В
	|				(ВЫБРАТЬ
	|					ФизЛица.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК ФизЛица)
	|		И ДвиженияРегистратора.Период < &НачалоМесяцаРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеВычеты.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ДополнительныеВычеты.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ДополнительныеВычеты.КодВычета,
	|		ДополнительныеВычеты.ПримененныйВычет,
	|		ДополнительныеВычеты.ПодразделениеОрганизации
	|	ИЗ
	|		ВТДополнительныеВычеты КАК ДополнительныеВычеты
	|	ГДЕ
	|		ДополнительныеВычеты.ФизЛицо В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК СписокСотрудников)
	|		И ДополнительныеВычеты.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|		И ДополнительныеВычеты.КодВычета.ГруппаВычета В (ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные), ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО))) КАК Вычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Вычеты.ФизЛицо,
	|	Вычеты.МесяцНалоговогоПериода,
	|	Вычеты.КодВычета,
	|	Вычеты.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРегистра.ФизЛицо КАК ФизЛицо,
	|	ПериодыРегистра.МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ПериодыРегистра.МесяцНалоговогоПериода < &ДатаЗакона285ФЗ
	|				И НЕ ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) В (ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент), ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Беженец))
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РезидентРФ,
	|	ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус
	|ПОМЕСТИТЬ ВТРезидентствоФизлицНаКонецГода
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.ФизЛицо КАК ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		МАКСИМУМ(СтатусНалогоплательщика.Период) КАК Период
	|	ИЗ
	|		ВТПериодыНалогаНаДоходы КАК Физлица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|			ПО Физлица.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|				И (СтатусНалогоплательщика.Период <= ВЫБОР
	|					КОГДА Физлица.КонецГодаНалоговогоПериода > &КонецМесяцаРасчета
	|						ТОГДА &КонецМесяцаРасчета
	|					ИНАЧЕ Физлица.КонецГодаНалоговогоПериода
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Физлица.ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|		ПО ПериодыРегистра.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|			И ПериодыРегистра.Период = СтатусНалогоплательщика.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРегистра.ФизЛицо КАК ФизЛицо,
	|	ПериодыРегистра.МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ПериодыРегистра.МесяцНалоговогоПериода < &ДатаЗакона285ФЗ
	|				И НЕ ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) В (ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент), ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Беженец))
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РезидентРФ,
	|	ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус
	|ПОМЕСТИТЬ ВТРезидентствоФизлицНаКонецМесяца
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.ФизЛицо КАК ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		МАКСИМУМ(СтатусНалогоплательщика.Период) КАК Период
	|	ИЗ
	|		ВТПериодыНалогаНаДоходы КАК Физлица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|			ПО Физлица.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|				И (СтатусНалогоплательщика.Период <= ВЫБОР
	|					КОГДА Физлица.МесяцНалоговогоПериода > &КонецМесяцаРасчета
	|						ТОГДА &КонецМесяцаРасчета
	|					ИНАЧЕ Физлица.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Физлица.ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|		ПО ПериодыРегистра.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|			И ПериодыРегистра.Период = СтатусНалогоплательщика.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо,
	|	Периоды.ФизЛицо.Наименование КАК Порядок,
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.НачалоГодаНалоговогоПериода,
	|	Периоды.КонецГодаНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА РезидентствоФизлицНаКонецГода.РезидентРФ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ РезидентствоФизлицНаКонецМесяца.РезидентРФ
	|	КОНЕЦ КАК Резидент,
	|	ВЫБОР
	|		КОГДА Периоды.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев
	|			ТОГДА ВЫБОР
	|					КОГДА РезидентствоФизлицНаКонецГода.РезидентРФ
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ РезидентствоФизлицНаКонецМесяца.РезидентРФ
	|				КОНЕЦ
	|		КОГДА РезидентствоФизлицНаКонецГода.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ИСТИНА
	|		КОГДА РезидентствоФизлицНаКонецМесяца.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент), ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяСтавкаПункта1Статьи224НК
	|ПОМЕСТИТЬ ВТПериодыФизлиц
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецМесяца КАК РезидентствоФизлицНаКонецМесяца
	|		ПО Периоды.ФизЛицо = РезидентствоФизлицНаКонецМесяца.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = РезидентствоФизлицНаКонецМесяца.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецГода КАК РезидентствоФизлицНаКонецГода
	|		ПО Периоды.ФизЛицо = РезидентствоФизлицНаКонецГода.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = РезидентствоФизлицНаКонецГода.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(МАКСИМУМ(РазмерВычетовНаДетей.ОграничениеПоДоходам), 0) КАК ОграничениеПоДоходам,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаДетей,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаДетейДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаДетейДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код116)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаТретьегоРебенка,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код120)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаТретьегоРебенкаДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код124)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаТретьегоРебенкаДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код115)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаВторогоРебенка,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код119)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаВторогоРебенкаДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код123)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаВторогоРебенкаДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаРебенкаИнвалида,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаРебенкаИнвалидаДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаРебенкаИнвалидаДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код130)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаДетейДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код135)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаДетейДвойнойДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код143)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаДетейДвойнойВторойДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код132)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаТретьегоРебенкаДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код139)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаТретьегоРебенкаДвойнойДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код147)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаТретьегоРебенкаДвойнойВторойДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код131)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаВторогоРебенкаДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код137)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаВторогоРебенкаДвойнойДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код145)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаВторогоРебенкаДвойнойВторойДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код117о)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаРебенкаИнвалидаДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код121о)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаРебенкаИнвалидаДвойнойДляОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код125о)
	|				ТОГДА ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетНаРебенкаИнвалидаДвойнойВторойДляОпекунов
	|ПОМЕСТИТЬ ВТВычетыНаДетей
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаДетей
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаДетей
	|			ПО ВычетыНаДетей.КодВычета = РазмерВычетовНаДетей.КодВычета
	|				И ВычетыНаДетей.НачалоГодаНалоговогоПериода = РазмерВычетовНаДетей.НачалоНалоговогоПериода
	|		ПО Периоды.ФизЛицо = ВычетыНаДетей.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаДетей.МесяцНалоговогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				ТОГДА ЕСТЬNULL(ПредоставленныеВычетыФизЛиц.СуммаОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОборот
	|ПОМЕСТИТЬ ВТСоциальныеВычетыПомесячно
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставленныеСтандартныеИСоциальныеВычеты КАК ПредоставленныеВычетыФизЛиц
	|		ПО Периоды.ФизЛицо = ПредоставленныеВычетыФизЛиц.ФизЛицо
	|			И (ПредоставленныеВычетыФизЛиц.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные))
	|			И Периоды.МесяцНалоговогоПериода = ПредоставленныеВычетыФизЛиц.МесяцНалоговогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо,
	|	Доходы.МесяцНалоговогоПериода,
	|	Доходы.ДатаПолученияДохода,
	|	Доходы.КодДохода,
	|	Доходы.КодВычета,
	|	Доходы.Подразделение,
	|	СУММА(Доходы.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|	СУММА(Доходы.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	Доходы.ЗарегистрированоДляПромежуточногоРасчета
	|ПОМЕСТИТЬ ВТДоходыФизлиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		Обороты.ФизЛицо КАК ФизЛицо,
	|		НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		Обороты.КодДохода КАК КодДохода,
	|		Обороты.КодВычета КАК КодВычета,
	|		Обороты.СуммаДохода КАК СуммаДоходаОборот,
	|		Обороты.СуммаВычета КАК СуммаВычетаОборот,
	|		Обороты.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|		Обороты.ПодразделениеОрганизации КАК Подразделение,
	|		Обороты.ЗарегистрированоДляПромежуточногоРасчета КАК ЗарегистрированоДляПромежуточногоРасчета
	|	ИЗ
	|		РегистрНакопления.НДФЛСведенияОДоходах КАК Обороты
	|	ГДЕ
	|		Обороты.Организация = &ГоловнаяОрганизация
	|		И Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|		И НЕ Обороты.КодДохода.НеОблагаетсяУНалоговогоАгента
	|		И Обороты.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|		И Обороты.ПериодРегистрации <= &КонецМесяцаРасчета
	|		И Обороты.ФизЛицо В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК СписокСотрудников)
	|		И &ЗарегистрированоДляПромежуточногоРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КорректировкаДанныхРегистратора.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(КорректировкаДанныхРегистратора.Период, МЕСЯЦ),
	|		КорректировкаДанныхРегистратора.КодДохода,
	|		КорректировкаДанныхРегистратора.КодВычета,
	|		КорректировкаДанныхРегистратора.СуммаДохода,
	|		КорректировкаДанныхРегистратора.СуммаВычета,
	|		КорректировкаДанныхРегистратора.ДатаПолученияДохода,
	|		КорректировкаДанныхРегистратора.ПодразделениеОрганизации,
	|		КорректировкаДанныхРегистратора.ЗарегистрированоДляПромежуточногоРасчета
	|	ИЗ
	|		ВТДополнительныеДоходы КАК КорректировкаДанныхРегистратора
	|	ГДЕ
	|		КорректировкаДанныхРегистратора.Организация = &ГоловнаяОрганизация
	|		И КорректировкаДанныхРегистратора.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|		И НЕ КорректировкаДанныхРегистратора.КодДохода.НеОблагаетсяУНалоговогоАгента
	|		И КорректировкаДанныхРегистратора.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|		И КорректировкаДанныхРегистратора.ФизЛицо В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК СписокСотрудников)) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизЛицо,
	|	Доходы.МесяцНалоговогоПериода,
	|	Доходы.КодДохода,
	|	Доходы.КодВычета,
	|	Доходы.ДатаПолученияДохода,
	|	Доходы.Подразделение,
	|	Доходы.ЗарегистрированоДляПромежуточногоРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоходыФизлиц.ФизЛицо,
	|	ДоходыФизлиц.ДатаПолученияДохода
	|ПОМЕСТИТЬ ВТДатыПолученияДохода
	|ИЗ
	|	ВТДоходыФизлиц КАК ДоходыФизлиц
	|ГДЕ
	|	ДоходыФизлиц.ДатаПолученияДохода >= &ДатаИзмененияИсчисленияДляИностранцев
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРегистра.ФизЛицо КАК ФизЛицо,
	|	ПериодыРегистра.ДатаПолученияДохода,
	|	ВЫБОР
	|		КОГДА РезидентствоФизлицНаКонецГода.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) В (ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент), ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Резидент,
	|	ВЫБОР
	|		КОГДА РезидентствоФизлицНаКонецГода.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|		ИНАЧЕ ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
	|	КОНЕЦ КАК СтатусСУчетомСостоянияНаКонецГода,
	|	ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус
	|ПОМЕСТИТЬ ВТРезидентствоФизлицНаДатуПолученияДохода
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.ФизЛицо КАК ФизЛицо,
	|		Физлица.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|		МАКСИМУМ(СтатусНалогоплательщика.Период) КАК Период
	|	ИЗ
	|		ВТДатыПолученияДохода КАК Физлица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|			ПО Физлица.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|				И (СтатусНалогоплательщика.Период <= ВЫБОР
	|					КОГДА Физлица.ДатаПолученияДохода > &КонецМесяцаРасчета
	|						ТОГДА &КонецМесяцаРасчета
	|					ИНАЧЕ Физлица.ДатаПолученияДохода
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Физлица.ФизЛицо,
	|		Физлица.ДатаПолученияДохода) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|		ПО ПериодыРегистра.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|			И ПериодыРегистра.Период = СтатусНалогоплательщика.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецГода КАК РезидентствоФизлицНаКонецГода
	|		ПО ПериодыРегистра.ФизЛицо = РезидентствоФизлицНаКонецГода.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ПериодыРегистра.ДатаПолученияДохода, МЕСЯЦ) = РезидентствоФизлицНаКонецГода.МесяцНалоговогоПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.Резидент,
	|	ВЫБОР
	|		КОГДА Периоды.Резидент
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ КАК СтавкаНалогообложенияНеРезидента,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаДоходаОборот, 0) - ВЫБОР
	|			КОГДА Периоды.Резидент
	|				ТОГДА ЕСТЬNULL(Обороты.СуммаВычетаОборот, 0)
	|			КОГДА Обороты.КодВычета.НеПредоставляетсяНерезидентам
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(Обороты.СуммаВычетаОборот, 0)
	|		КОНЕЦ) КАК ДоходыБезВычетов
	|ПОМЕСТИТЬ ВТДоходыСУчетомВычетовКДоходам
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыФизлиц КАК Обороты
	|		ПО Периоды.ФизЛицо = Обороты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = Обороты.МесяцНалоговогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.Резидент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(Обороты.ДатаПолученияДохода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	Обороты.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	Обороты.КодДохода,
	|	ВЫБОР
	|		КОГДА Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА РезидентствоФизлицНаДатуПолученияДохода.Резидент
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсчислятьНалогНарастающимИтогом,
	|	ВЫБОР
	|		КОГДА РезидентствоФизлицНаДатуПолученияДохода.Резидент
	|			ТОГДА ВЫБОР
	|					КОГДА Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|					КОГДА Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|				КОНЕЦ
	|		КОГДА Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|				И РезидентствоФизлицНаДатуПолученияДохода.СтатусСУчетомСостоянияНаКонецГода <> ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ КАК СтавкаНалогообложенияДохода,
	|	Обороты.Подразделение,
	|	СУММА(Обороты.СуммаДоходаОборот - ВЫБОР
	|			КОГДА РезидентствоФизлицНаДатуПолученияДохода.Резидент
	|				ТОГДА Обороты.СуммаВычетаОборот
	|			КОГДА Обороты.КодВычета.НеПредоставляетсяНерезидентам
	|				ТОГДА 0
	|			ИНАЧЕ Обороты.СуммаВычетаОборот
	|		КОНЕЦ) КАК ДоходыБезВычетов,
	|	СУММА(Обороты.СуммаДоходаОборот) КАК ВсеДоходы,
	|	РезидентствоФизлицНаДатуПолученияДохода.СтатусСУчетомСостоянияНаКонецГода КАК Статус,
	|	Обороты.ЗарегистрированоДляПромежуточногоРасчета
	|ПОМЕСТИТЬ ВТДоходыСоСтавками
	|ИЗ
	|	ВТДоходыФизлиц КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаДатуПолученияДохода КАК РезидентствоФизлицНаДатуПолученияДохода
	|		ПО Обороты.ФизЛицо = РезидентствоФизлицНаДатуПолученияДохода.ФизЛицо
	|			И Обороты.ДатаПолученияДохода = РезидентствоФизлицНаДатуПолученияДохода.ДатаПолученияДохода
	|ГДЕ
	|	Обороты.ДатаПолученияДохода >= &ДатаИзмененияИсчисленияДляИностранцев
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.ФизЛицо,
	|	Обороты.МесяцНалоговогоПериода,
	|	Обороты.ДатаПолученияДохода,
	|	Обороты.КодДохода,
	|	ВЫБОР
	|		КОГДА Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА РезидентствоФизлицНаДатуПолученияДохода.Резидент
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РезидентствоФизлицНаДатуПолученияДохода.Резидент
	|			ТОГДА ВЫБОР
	|					КОГДА Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|					КОГДА Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|				КОНЕЦ
	|		КОГДА Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|				И РезидентствоФизлицНаДатуПолученияДохода.СтатусСУчетомСостоянияНаКонецГода <> ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ,
	|	Обороты.Подразделение,
	|	РезидентствоФизлицНаДатуПолученияДохода.СтатусСУчетомСостоянияНаКонецГода,
	|	Обороты.ЗарегистрированоДляПромежуточногоРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(СУММА(Доходы.ДоходыБезВычетов), 0) КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТДоходыРезидентовПоМесяцам
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСУчетомВычетовКДоходам КАК Доходы
	|		ПО Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И (Доходы.Резидент)
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо,
	|	ЕСТЬNULL(СУММА(Доходы.ДоходыБезВычетов), 0)
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК Доходы
	|		ПО Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И (Доходы.ИсчислятьНалогНарастающимИтогом)
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода >= &ДатаИзмененияИсчисленияДляИностранцев
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(СУММА(Доходы.ДоходыБезВычетов), 0) КАК ОблагаемыйДоходЗаГод
	|ПОМЕСТИТЬ ВТДоходыРезидентовНарастающимЗаГод
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСУчетомВычетовКДоходам КАК Доходы
	|		ПО (Доходы.МесяцНалоговогоПериода МЕЖДУ Периоды.НачалоГодаНалоговогоПериода И Периоды.МесяцНалоговогоПериода)
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И (Доходы.Резидент)
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо,
	|	ЕСТЬNULL(СУММА(Доходы.ДоходыБезВычетов), 0)
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК Доходы
	|		ПО (Доходы.МесяцНалоговогоПериода МЕЖДУ Периоды.НачалоГодаНалоговогоПериода И Периоды.МесяцНалоговогоПериода)
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И (Доходы.ИсчислятьНалогНарастающимИтогом)
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода >= &ДатаИзмененияИсчисленияДляИностранцев
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.НачалоГодаНалоговогоПериода,
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо,
	|	Доходы.ДатаПолученияДохода,
	|	Доходы.ЗарегистрированоДляПромежуточногоРасчета
	|ПОМЕСТИТЬ ВТДатыПолученияДоходаДляНарастающегоДохода
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК Доходы
	|		ПО Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода >= &ДатаИзмененияИсчисленияДляИностранцев
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.НачалоГодаНалоговогоПериода,
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Периоды.МесяцНалоговогоПериода, МЕСЯЦ), ДЕНЬ),
	|	ЛОЖЬ
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК Доходы
	|		ПО Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И (Доходы.ДатаПолученияДохода = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Периоды.МесяцНалоговогоПериода, МЕСЯЦ), ДЕНЬ))
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода >= &ДатаИзмененияИсчисленияДляИностранцев
	|	И Доходы.ДатаПолученияДохода ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ДатаПолученияДохода,
	|	Периоды.ЗарегистрированоДляПромежуточногоРасчета,
	|	Периоды.ФизЛицо,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|						И Доходы.ИсчислятьНалогНарастающимИтогом
	|					ТОГДА Доходы.ДоходыБезВычетов
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ОблагаемыйДоходЗаМесяц,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ИсчислятьНалогНарастающимИтогом
	|					ТОГДА Доходы.ДоходыБезВычетов
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ОблагаемыйДоходЗаГод
	|ПОМЕСТИТЬ ВТДоходыПоДатамПолученияДоходаНарастающимЗаГод
	|ИЗ
	|	ВТДатыПолученияДоходаДляНарастающегоДохода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК Доходы
	|		ПО (Доходы.ДатаПолученияДохода >= Периоды.НачалоГодаНалоговогоПериода
	|					И Доходы.ДатаПолученияДохода < Периоды.ДатаПолученияДохода
	|				ИЛИ Доходы.ДатаПолученияДохода = Периоды.ДатаПолученияДохода
	|					И Доходы.ЗарегистрированоДляПромежуточногоРасчета = Периоды.ЗарегистрированоДляПромежуточногоРасчета
	|				ИЛИ Доходы.ДатаПолученияДохода = Периоды.ДатаПолученияДохода
	|					И НЕ Периоды.ЗарегистрированоДляПромежуточногоРасчета)
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ДатаПолученияДохода,
	|	Периоды.ЗарегистрированоДляПромежуточногоРасчета,
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВычетыЛичные.КодВычета КАК КодВычетаЛичный,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ЕСТЬNULL(РазмерВычетовЛичный.ОграничениеПоДоходам, 0)
	|					ИЛИ ЕСТЬNULL(РазмерВычетовЛичный.ОграничениеПоДоходам, 0) = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовЛичный.Размер, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыЛичные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаДетей
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетские,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаДетейДвойной
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаДетейДвойнойВторой
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеДвойныеВторые,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаТретьегоРебенка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенка,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаТретьегоРебенкаДвойной
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенкаДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаТретьегоРебенкаДвойнойВторой
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаВторогоРебенка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенка,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаВторогоРебенкаДвойной
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенкаДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаВторогоРебенкаДвойнойВторой
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенкаДвойныеВторые,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаРебенкаИнвалида
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаРебенкаИнвалидаДвойной
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаРебенкаИнвалидаДвойнойВторой
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовДвойныеВторые,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаДетейДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаДетейДвойнойДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеДвойныеОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаДетейДвойнойВторойДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеДвойныеВторыеОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаТретьегоРебенкаДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенкаОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаТретьегоРебенкаДвойнойДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенкаДвойныеОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаТретьегоРебенкаДвойнойВторойДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенкаДвойныеВторыеОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаВторогоРебенкаДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенкаОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаВторогоРебенкаДвойнойДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенкаДвойныеОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаВторогоРебенкаДвойнойВторойДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенкаДвойныеВторыеОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаРебенкаИнвалидаДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаРебенкаИнвалидаДвойнойДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовДвойныеОпекунов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ВычетыНаДетей.ОграничениеПоДоходам
	|					ИЛИ ВычетыНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ВычетыНаДетей.ВычетНаРебенкаИнвалидаДвойнойВторойДляОпекунов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовДвойныеВторыеОпекунов,
	|	РазмерВычетовЛичный.ОграничениеПоДоходам КАК ОграничениеПоДоходамЛичные,
	|	ВычетыНаДетей.ОграничениеПоДоходам КАК ОграничениеПоДоходамНаДетей
	|ПОМЕСТИТЬ ВТПраваНаСтандартныеВычетыПоМесяцам
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеСтандартныхВычетов КАК ПрименениеВычетов
	|		ПО Периоды.ФизЛицо = ПрименениеВычетов.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ПрименениеВычетов.МесяцНалоговогоПериода
 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаЛичныеВычеты КАК ВычетыЛичные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовЛичный
	|			ПО ВычетыЛичные.КодВычета = РазмерВычетовЛичный.КодВычета
	|				И ВычетыЛичные.НачалоГодаНалоговогоПериода = РазмерВычетовЛичный.НачалоНалоговогоПериода
	|		ПО Периоды.МесяцНалоговогоПериода = ВычетыЛичные.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = ВычетыЛичные.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК ДоходыСПредыдущегоМестаРаботы
	|		ПО Периоды.МесяцНалоговогоПериода = ДоходыСПредыдущегоМестаРаботы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = ДоходыСПредыдущегоМестаРаботы.ФизЛицо
	|			И (ДоходыСПредыдущегоМестаРаботы.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовНарастающимЗаГод КАК ДоходыНарастающимИтогом
	|		ПО Периоды.МесяцНалоговогоПериода = ДоходыНарастающимИтогом.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = ДоходыНарастающимИтогом.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыНаДетей КАК ВычетыНаДетей
	|		ПО Периоды.ФизЛицо = ВычетыНаДетей.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаДетей.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Доходы.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА Доходы.Резидент
	|					ТОГДА 0
	|				ИНАЧЕ Доходы.ДоходыБезВычетов
	|			КОНЕЦ * СтавкиНалогаВПроцентах.Размер КАК ЧИСЛО(13, 0))) КАК НалогНерезидента
	|ПОМЕСТИТЬ ВТНалогНерезидентов
	|ИЗ
	|	ВТДоходыСУчетомВычетовКДоходам КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНалогаВПроцентах КАК СтавкиНалогаВПроцентах
	|		ПО Доходы.СтавкаНалогообложенияНеРезидента = СтавкиНалогаВПроцентах.СтавкаНалогообложения
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизЛицо,
	|	Доходы.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ДатыДохода.ДатаПолученияДохода, МАКСИМУМ(ЕСТЬNULL(Доходы.ДатаПолученияДохода, НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Периоды.МесяцНалоговогоПериода, МЕСЯЦ), ДЕНЬ)))) КАК ДатаПолученияДохода,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.ПустаяСсылка) КАК Статус,
	|	ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка) КАК КодДохода,
	|	ЕСТЬNULL(СУММА(Доходы.ВсеДоходы), 0) КАК СуммаДохода,
	|	"""" КАК КодДоходаСтрокой,
	|	0 КАК НалогНерезидента,
	|	ИСТИНА КАК ИсчислятьНалогНарастающимИтогом,
	|	ЕСТЬNULL(ДатыДохода.ЗарегистрированоДляПромежуточногоРасчета, ЛОЖЬ) КАК ЗарегистрированоДляПромежуточногоРасчета,
	|	МАКСИМУМ(ЕСТЬNULL(Доходы.ДатаПолученияДохода, НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Периоды.МесяцНалоговогоПериода, МЕСЯЦ), ДЕНЬ))) КАК МаксимальнаяДатаПолученияДохода
	|ПОМЕСТИТЬ ВТДоходыНалоги
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК Доходы
	|		ПО Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК ДатыДохода
	|		ПО Периоды.ФизЛицо = ДатыДохода.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ДатыДохода.МесяцНалоговогоПериода
	|			И (ДатыДохода.ИсчислятьНалогНарастающимИтогом)
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода >= &ДатаИзмененияИсчисленияДляИностранцев
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо,
	|	ДатыДохода.ДатаПолученияДохода,
	|	ДатыДохода.ЗарегистрированоДляПромежуточногоРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода,
	|	Доходы.ДатаПолученияДохода,
	|	Доходы.Статус,
	|	Доходы.КодДохода,
	|	СУММА(Доходы.ДоходыБезВычетов),
	
	|	Доходы.КодДохода.КодДляОтчетности,
	|	ВЫРАЗИТЬ(СУММА(Доходы.ДоходыБезВычетов) * СтавкиНалогаВПроцентах.Размер КАК ЧИСЛО(13, 0)),
	|	ЛОЖЬ,
	|	Доходы.ЗарегистрированоДляПромежуточногоРасчета,
	|	Доходы.ДатаПолученияДохода
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК Доходы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНалогаВПроцентах КАК СтавкиНалогаВПроцентах
	|			ПО Доходы.СтавкаНалогообложенияДохода = СтавкиНалогаВПроцентах.СтавкаНалогообложения
	|		ПО Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И (НЕ Доходы.ИсчислятьНалогНарастающимИтогом)
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода >= &ДатаИзмененияИсчисленияДляИностранцев
	|	И Доходы.ФизЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	СтавкиНалогаВПроцентах.Размер,
	|	Периоды.МесяцНалоговогоПериода,
	|	Доходы.ДатаПолученияДохода,
	|	Доходы.КодДохода,
	|	Доходы.КодДохода.КодДляОтчетности,
	|	Доходы.Статус,
	|	Доходы.ЗарегистрированоДляПромежуточногоРасчета,
	|	Доходы.ДатаПолученияДохода
	|
	|ИМЕЮЩИЕ
	|	СУММА(Доходы.ДоходыБезВычетов) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.ФизЛицо.Наименование КАК Порядок,
	|	ГОД(Периоды.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Доходы.ИсчислятьНалогНарастающимИтогом,
	|	Доходы.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	Доходы.МаксимальнаяДатаПолученияДохода КАК МаксимальнаяДатаПолученияДоходаМесяца,
	|	Доходы.ЗарегистрированоДляПромежуточногоРасчета КАК ЗарегистрированоДляПромежуточногоРасчета,
	|	Доходы.Статус,
	|	Доходы.КодДоходаСтрокой,
	|	ВЫБОР
	|		КОГДА Доходы.ИсчислятьНалогНарастающимИтогом
	|			ТОГДА 0
	|		ИНАЧЕ Доходы.СуммаДохода
	|	КОНЕЦ КАК СуммаДохода,
	|	Доходы.СуммаДохода КАК ВсеДоходыЗаМесяц,
	|	Доходы.НалогНерезидента,
	|	ЕСТЬNULL(ДоходыПоДатамПолученияДоходаНарастающимИтогом.ОблагаемыйДоходЗаМесяц, 0) КАК ОблагаемыйДоход,
	|	ДоходыРезидентовПоМесяцам.ОблагаемыйДоход КАК ОблагаемыйДоходЗаМесяц,
	|	ЕСТЬNULL(ДоходыПоДатамПолученияДоходаНарастающимИтогом.ОблагаемыйДоходЗаГод, 0) КАК ОблагаемыйДоходНарастающимИтогом,
	|	СоциальныеВычеты.СуммаОборот КАК СоциальныйВычет,
	|	СтавкиНалогаВПроцентах.Размер КАК СтавкаДляРезидента,
	|	ПравоНаСтандартныеВычеты.КодВычетаЛичный,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыЛичные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетские,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенка,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенка,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторыеОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеДвойныеОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеДвойныеВторыеОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаДвойныеОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторыеОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаДвойныеОпекунов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаДвойныеВторыеОпекунов,
	|	ЕСТЬNULL(ПолитикаПримененияВычетов.ОсобенностиИсчисленияНДФЛ, ЗНАЧЕНИЕ(Перечисление.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом)) КАК ОсобенностиУчетаВычетов
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаСтандартныеВычетыПоМесяцам КАК ПравоНаСтандартныеВычеты
	|		ПО Периоды.ФизЛицо = ПравоНаСтандартныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ПравоНаСтандартныеВычеты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовНарастающимЗаГод КАК ДоходыРезидентовНарастающимЗаГод
	|		ПО Периоды.ФизЛицо = ДоходыРезидентовНарастающимЗаГод.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ДоходыРезидентовНарастающимЗаГод.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовПоМесяцам КАК ДоходыРезидентовПоМесяцам
	|		ПО Периоды.ФизЛицо = ДоходыРезидентовПоМесяцам.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ДоходыРезидентовПоМесяцам.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоциальныеВычетыПомесячно КАК СоциальныеВычеты
	|		ПО Периоды.ФизЛицо = СоциальныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = СоциальныеВычеты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНалогаВПроцентах КАК СтавкиНалогаВПроцентах
	|		ПО (СтавкиНалогаВПроцентах.СтавкаНалогообложения = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолитикаПримененияВычетов КАК ПолитикаПримененияВычетов
	|		ПО Периоды.НачалоГодаНалоговогоПериода = ПолитикаПримененияВычетов.НачалоНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыНалоги КАК Доходы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоДатамПолученияДоходаНарастающимЗаГод КАК ДоходыПоДатамПолученияДоходаНарастающимИтогом
	|			ПО Доходы.ФизЛицо = ДоходыПоДатамПолученияДоходаНарастающимИтогом.ФизЛицо
	|				И Доходы.МесяцНалоговогоПериода = ДоходыПоДатамПолученияДоходаНарастающимИтогом.МесяцНалоговогоПериода
	|				И Доходы.ДатаПолученияДохода = ДоходыПоДатамПолученияДоходаНарастающимИтогом.ДатаПолученияДохода
	|				И Доходы.ЗарегистрированоДляПромежуточногоРасчета = ДоходыПоДатамПолученияДоходаНарастающимИтогом.ЗарегистрированоДляПромежуточногоРасчета
	|		ПО Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода >= &ДатаИзмененияИсчисленияДляИностранцев
	|	И (НЕ Доходы.ИсчислятьНалогНарастающимИтогом
	|			ИЛИ Доходы.ДатаПолученияДохода = Доходы.МаксимальнаяДатаПолученияДохода
	|			ИЛИ ЕСТЬNULL(ДоходыПоДатамПолученияДоходаНарастающимИтогом.ОблагаемыйДоходЗаМесяц, 0) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ФизЛицо,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода,
	|	Доходы.ИсчислятьНалогНарастающимИтогом УБЫВ,
	|	ДатаПолученияДохода,
	|	ЗарегистрированоДляПромежуточногоРасчета УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФизлиц.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ПериодыФизлиц.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	Доходы.ДатаПолученияДохода,
	|	Доходы.Подразделение КАК Подразделение,
	|	СУММА(ЕСТЬNULL(Доходы.ДоходыБезВычетов, 0)) КАК СуммаДохода
	|ИЗ
	|	ВТПериодыФизлиц КАК ПериодыФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСоСтавками КАК Доходы
	|		ПО ПериодыФизлиц.ФизЛицо = Доходы.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ПериодыФизлиц.МесяцНалоговогоПериода, МЕСЯЦ) = Доходы.МесяцНалоговогоПериода)
	|ГДЕ
	|	ПериодыФизлиц.МесяцНалоговогоПериода >= &ДатаИзмененияИсчисленияДляИностранцев
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыФизлиц.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ПериодыФизлиц.МесяцНалоговогоПериода, МЕСЯЦ),
	|	Доходы.Подразделение,
	|	Доходы.ДатаПолученияДохода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода,
	|	Доходы.ДатаПолученияДохода,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.Порядок КАК Порядок,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.Резидент,
	|	ДоходыРезидентовПоМесяцам.ОблагаемыйДоход КАК ОблагаемыйДоходЗаМесяц,
	|	ДоходыРезидентовНарастающимЗаГод.ОблагаемыйДоходЗаГод КАК ОблагаемыйДоходНарастающимИтогом,
	|	СоциальныеВычеты.СуммаОборот КАК СоциальныйВычет,
	|	ВЫБОР
	|		КОГДА Периоды.Резидент
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НалогНерезидентов.НалогНерезидента, 0)
	|	КОНЕЦ КАК НалогЗаМесяц,
	|	СтавкиНалогаВПроцентах.Размер КАК СтавкаДляРезидента,
	|	ПравоНаСтандартныеВычеты.КодВычетаЛичный,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыЛичные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетские,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенка,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенка,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые,
	|	ЕСТЬNULL(ПолитикаПримененияВычетов.ОсобенностиИсчисленияНДФЛ, ЗНАЧЕНИЕ(Перечисление.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом)) КАК ОсобенностиУчетаВычетов,
	|	ГОД(Периоды.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	ПравоНаСтандартныеВычеты.ОграничениеПоДоходамЛичные,
	|	ПравоНаСтандартныеВычеты.ОграничениеПоДоходамНаДетей
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНалогНерезидентов КАК НалогНерезидентов
	|		ПО Периоды.ФизЛицо = НалогНерезидентов.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = НалогНерезидентов.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаСтандартныеВычетыПоМесяцам КАК ПравоНаСтандартныеВычеты
	|		ПО Периоды.ФизЛицо = ПравоНаСтандартныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ПравоНаСтандартныеВычеты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовНарастающимЗаГод КАК ДоходыРезидентовНарастающимЗаГод
	|		ПО Периоды.ФизЛицо = ДоходыРезидентовНарастающимЗаГод.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ДоходыРезидентовНарастающимЗаГод.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовПоМесяцам КАК ДоходыРезидентовПоМесяцам
	|		ПО Периоды.ФизЛицо = ДоходыРезидентовПоМесяцам.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ДоходыРезидентовПоМесяцам.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоциальныеВычетыПомесячно КАК СоциальныеВычеты
	|		ПО Периоды.ФизЛицо = СоциальныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = СоциальныеВычеты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНалогаВПроцентах КАК СтавкиНалогаВПроцентах
	|		ПО (СтавкиНалогаВПроцентах.СтавкаНалогообложения = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолитикаПримененияВычетов КАК ПолитикаПримененияВычетов
	|		ПО Периоды.НачалоГодаНалоговогоПериода = ПолитикаПримененияВычетов.НачалоНалоговогоПериода
	|
	|ГДЕ
	|	&УсловиеПомесячногоРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ФизЛицо,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код320о)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетРасходыНаСвоеОбучение,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код321)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетРасходыНаОбучениеДетей,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код324)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетРасходыНаЛечение,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код325)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетСтраховыеВзносыНаМедУслуги,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код326)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетРасходыНаДорогостоящееЛечение,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код329)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетВзносыНаДобровольноеСтрахованиеЖизни,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетИмущественныйРасходы,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетИмущественныйПроцентыПоКредитам,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код318)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетИмущественныйПроцентыПриПерекредитовании
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПравоНаИмущественныеВычеты КАК ПравоНаИмущественныеВычеты
	|		ПО Периоды.ФизЛицо = ПравоНаИмущественныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ПравоНаИмущественныеВычеты.МесяцНалоговогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФизлиц.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ПериодыФизлиц.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	Доходы.Подразделение КАК Подразделение,
	|	СУММА(ЕСТЬNULL(Доходы.СуммаДоходаОборот, 0) - ВЫБОР
	|			КОГДА ПериодыФизлиц.Резидент
	|				ТОГДА ЕСТЬNULL(Доходы.СуммаВычетаОборот, 0)
	|			КОГДА Доходы.КодВычета.НеПредоставляетсяНерезидентам
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(Доходы.СуммаВычетаОборот, 0)
	|		КОНЕЦ) КАК СуммаДохода
	|ИЗ
	|	ВТПериодыФизлиц КАК ПериодыФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыФизлиц КАК Доходы
	|		ПО ПериодыФизлиц.ФизЛицо = Доходы.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ПериодыФизлиц.МесяцНалоговогоПериода, МЕСЯЦ) = Доходы.МесяцНалоговогоПериода)
	|ГДЕ
	|	ПериодыФизлиц.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыФизлиц.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ПериодыФизлиц.МесяцНалоговогоПериода, МЕСЯЦ),
	|	Доходы.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(Налоги.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериодаДляПоиска,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	СУММА(Налоги.Налог) КАК Налог
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизЛицо КАК ФизЛицо,
	|		ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев
	|				ТОГДА НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода
	|		КОНЕЦ КАК МесяцНалоговогоПериода,
	|		РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ПодразделениеОрганизации КАК Подразделение,
	|		-РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Налог КАК Налог
	|	ИЗ
	|		РегистрНакопления.НДФЛРасчетыСБюджетом КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|	ГДЕ
	|		РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &Регистратор
	|		И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	|		И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|		И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|		И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация = &ГоловнаяОрганизация
	|		И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизЛицо В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК СписокСотрудников)
	|		И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период <= &КонецМесяцаРасчета
	|		И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период < &НачалоМесяцаРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеНалоги.ФизЛицо,
	|		ВЫБОР
	|			КОГДА ДополнительныеНалоги.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев
	|				ТОГДА НАЧАЛОПЕРИОДА(ДополнительныеНалоги.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ ДополнительныеНалоги.МесяцНалоговогоПериода
	|		КОНЕЦ,
	|		ДополнительныеНалоги.ПодразделениеОрганизации,
	|		-ДополнительныеНалоги.Налог
	|	ИЗ
	|		ВТДополнительныеНалоги КАК ДополнительныеНалоги
	|	ГДЕ
	|		ДополнительныеНалоги.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|		И ДополнительныеНалоги.ФизЛицо В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК СписокСотрудников)) КАК Налоги
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ФизЛицо,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Налоги.ФизЛицо,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛПредоставленныеСтандартныеВычеты.ФизЛицо КАК ФизЛицо,
	|	НДФЛПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛПредоставленныеСтандартныеВычеты.Подразделение КАК Подразделение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета В (ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105))
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|		КОНЕЦ) КАК КодВычетаЛичный,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета В (ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105))
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетЛичный,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетей,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код116)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенка,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код120)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код124)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код115)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенка,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код119)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенкаДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код123)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидовДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код130)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код135)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейДвойнойОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код143)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейДвойнойВторойОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код131)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенкаОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код137)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код145)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код132)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенкаОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код139)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код147)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код117о)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидовОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код121о)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код125о)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов
	|ИЗ
	|	ВТПредоставленныеСтандартныеИСоциальныеВычеты КАК НДФЛПредоставленныеСтандартныеВычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛПредоставленныеСтандартныеВычеты.Подразделение,
	|	НДФЛПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода,
	|	НДФЛПредоставленныеСтандартныеВычеты.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ИмущественныеВычеты.Подразделение КАК Подразделение,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код320о)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетРасходыНаСвоеОбучение,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код321)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетРасходыНаОбучениеДетей,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код324)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетРасходыНаЛечение,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код325)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетСтраховыеВзносыНаМедУслуги,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код326)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетРасходыНаДорогостоящееЛечение,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код329)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетИмущественныйРасход,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код318)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетИмущественныйПроцентыПриПерекредитовании
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставленоИмущественныхВычетов КАК ИмущественныеВычеты
	|		ПО Периоды.ФизЛицо = ИмущественныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ИмущественныеВычеты.МесяцНалоговогоПериода
	|ГДЕ
	|	ИмущественныеВычеты.Подразделение ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ИмущественныеВычеты.Подразделение,
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода,
	|	Подразделение";
	
	Если ВозвращатьДанныеРасчетовБезПодразделений Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПомесячногоРасчета", "Истина");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПомесячногоРасчета", "Периоды.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев");
	КонецЕсли;	
	Если РасчетПриМежрасчетнойВыплате Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ЗарегистрированоДляПромежуточногоРасчета","(ЗарегистрированоДляПромежуточногоРасчета ИЛИ НАЧАЛОПЕРИОДА(ПериодРегистрации, МЕСЯЦ) < &НачалоМесяцаРасчета)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗарегистрированоДляПромежуточногоРасчета", "Истина");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период < &НачалоМесяцаРасчета", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ДвиженияРегистратора.Период < &НачалоМесяцаРасчета", "");
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период < &НачалоМесяцаРасчета", "");
	КонецЕсли;
	Результат =	Запрос.ВыполнитьПакет();
	
	ВсегоРезультатов = Результат.Количество();
	ВыборкаРасчетов = Результат[ВсегоРезультатов - 6].Выбрать();
	
	ПравоНаИмущественныеВычеты = Результат[ВсегоРезультатов - 5].Выгрузить();
	ПравоНаИмущественныеВычеты.Индексы.Добавить("ФизЛицо, МесяцНалоговогоПериода");
	
	РаспределениеДоходовПоПодразделениям = Результат[ВсегоРезультатов - 4].Выгрузить();
	РаспределениеДоходовПоПодразделениям.Индексы.Добавить("ФизЛицо, МесяцНалоговогоПериода");
	
	ИсчисленоРанее = Результат[ВсегоРезультатов - 3].Выгрузить();
	СтандартныхВычетовРанее = Результат[ВсегоРезультатов - 2].Выгрузить();
	ИмущественныхВычетовРанее = Результат[ВсегоРезультатов - 1].Выгрузить();
	
	РаспределятьПоПодразделениям = Не ВозвращатьДанныеРасчетовБезПодразделений;
	
	ТипНалог = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(13,0));
	ТипВычет = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
	РезультатыРасчетов = СтандартныхВычетовРанее.СкопироватьКолонки();
	РезультатыРасчетов.Колонки.Добавить("Налог",ТипНалог);
	РезультатыРасчетов.Колонки.Добавить("ЗачтеноАвансовыхПлатежей",ТипНалог);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетИмущественныйРасход",ТипВычет);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетИмущественныйПроцентыПоКредитам",ТипВычет);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетИмущественныйПроцентыПриПерекредитовании",ТипВычет);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетРасходыНаСвоеОбучение",ТипВычет);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетРасходыНаОбучениеДетей",ТипВычет);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетРасходыНаЛечение",ТипВычет);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетСтраховыеВзносыНаМедУслуги",ТипВычет);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетРасходыНаДорогостоящееЛечение",ТипВычет);
	РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни",ТипВычет);
	
	Если ВозвращатьДанныеРасчетовБезПодразделений Тогда
		РезультатыРасчетов.Колонки.Добавить("Резидент", Новый ОписаниеТипов("Булево"));
		РезультатыРасчетов.Колонки.Добавить("ОблагаемыйДоходНарастающимИтогом",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ОграничениеПоДоходамЛичные",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ОграничениеПоДоходамНаДетей",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетЛичныйЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейИнвалидовДвойнойЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейИнвалидовЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейДвойнойВторойЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейДвойнойЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаТретьегоРебенкаДвойнойЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаТретьегоРебенкаЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаВторогоРебенкаДвойнойЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетНаВторогоРебенкаЗаМесяц",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетИмущественныйРасходыОстаток",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетИмущественныйПроцентыПриПерекредитованииОстаток",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("ВычетИмущественныйПроцентыПоКредитамОстаток",ТипВычет);
		РезультатыРасчетов.Колонки.Добавить("НалогЗаМесяц",ТипВычет);
	КонецЕсли;
	
	Если РаспределятьПоПодразделениям Тогда
		ВспомогательнаяТаблица = РезультатыРасчетов.СкопироватьКолонки();
		СтрокаРесурсов = "Налог,ПримененныйВычетЛичный" + 
						",ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой" +
						",ПримененныйВычетНаТретьегоРебенка,ПримененныйВычетНаТретьегоРебенкаДвойной,ПримененныйВычетНаТретьегоРебенкаДвойнойВторой" +
						",ПримененныйВычетНаВторогоРебенка,ПримененныйВычетНаВторогоРебенкаДвойной,ПримененныйВычетНаВторогоРебенкаДвойнойВторой" +
						",ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой" +
						",ПримененныйВычетНаДетейОпекунов,ПримененныйВычетНаДетейДвойнойОпекунов,ПримененныйВычетНаДетейДвойнойВторойОпекунов" +
						",ПримененныйВычетНаТретьегоРебенкаОпекунов,ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов" +
						",ПримененныйВычетНаВторогоРебенкаОпекунов,ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов" +
						",ПримененныйВычетНаДетейИнвалидовОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов" +
						",ПримененныйВычетРасходыНаСвоеОбучение,ПримененныйВычетРасходыНаОбучениеДетей,ПримененныйВычетРасходыНаЛечение,ПримененныйВычетСтраховыеВзносыНаМедУслуги,ПримененныйВычетРасходыНаДорогостоящееЛечение,ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни" +
						",ПримененныйВычетИмущественныйРасход,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании";
		МассивРесурсов = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СтрокаРесурсов);
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		КомментарийНДФЛ = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет НДФЛ");
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
	ТекущийГод = Год(ПериодРегистрации);
	
	// помесячный расчет
	Если ПервыйМесяцНалоговогоПериода < ДатаИзмененияИсчисленияДляИностранцев Или ВозвращатьДанныеРасчетовБезПодразделений Тогда
		Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("Порядок") Цикл
			Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("ФизЛицо") Цикл
				
				Если РаспределятьПоПодразделениям Тогда
					
					// Подготовим распределение, которое будет использоваться при отсутствии базы соответствующего месяца.
					
					СтруктураПоиска.ФизЛицо = ВыборкаРасчетов.ФизЛицо;
					
					БазаРаспределения = 0;
					МесяцПоиска = НачалоМесяца(ПериодРегистрации);
					Пока БазаРаспределения = 0 И Год(МесяцПоиска) = ТекущийГод Цикл
						СтруктураПоиска.МесяцНалоговогоПериода = МесяцПоиска;
						ДоходыМесяцаРасчета = РаспределениеДоходовПоПодразделениям.НайтиСтроки(СтруктураПоиска);
						БазаРаспределения = 0;
						Для каждого СтрокаРаспределения Из ДоходыМесяцаРасчета Цикл
							БазаРаспределения = БазаРаспределения + СтрокаРаспределения.СуммаДохода;
						КонецЦикла; 
						МесяцПоиска = ДобавитьМесяц(МесяцПоиска, -1);
					КонецЦикла;
					
					КоэффициентыПодразделенийМесяцаРасчета = ВыделитьКоэффициентыРаспределенияИзКоллекцииСтрок(ДоходыМесяцаРасчета, "СуммаДохода");
					
				КонецЕсли;
				
				Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл
					
					Если ВыборкаРасчетов.МесяцНалоговогоПериода >= ДатаИзмененияИсчисленияДляИностранцев И РаспределятьПоПодразделениям Тогда
						Продолжить;
					КонецЕсли;
					
					ВычетЛичныйОстаток = 0;
					ВычетНаДетейОстаток = 0;
					ВычетНаДетейДвойнойОстаток = 0;
					ВычетНаДетейДвойнойВторойОстаток = 0;
					ВычетНаТретьегоРебенкаОстаток = 0;
					ВычетНаТретьегоРебенкаДвойнойОстаток = 0;
					ВычетНаТретьегоРебенкаДвойнойВторойОстаток = 0;
					ВычетНаВторогоРебенкаОстаток = 0;
					ВычетНаВторогоРебенкаДвойнойОстаток = 0;
					ВычетНаВторогоРебенкаДвойнойВторойОстаток = 0;
					ВычетНаДетейИнвалидовОстаток = 0;
					ВычетНаДетейИнвалидовДвойнойОстаток = 0;
					ВычетНаДетейИнвалидовДвойнойВторойОстаток = 0;
					ВычетИмущественныйРасходыОстаток = 0;
					ВычетИмущественныйПроцентыПоКредитамОстаток = 0;
					ВычетИмущественныйПроцентыПриПерекредитованииОстаток = 0;
					ВычетСоциальныйОстаток = 0;
					ОблагаемыйДоход = 0;
					ДоходЗаМесяцОстаток = 0;
					НалогИсчисленный = 0;
					
					Пока ВыборкаРасчетов.Следующий() Цикл
						
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасчетов);
						
						Если РаспределятьПоПодразделениям Тогда
							ВспомогательнаяТаблица.Очистить();
							Доходы = РаспределениеДоходовПоПодразделениям.НайтиСтроки(СтруктураПоиска);
							БазаРаспределения = 0;
							Для каждого СтрокаРаспределения Из Доходы Цикл
								БазаРаспределения = БазаРаспределения + СтрокаРаспределения.СуммаДохода;
							КонецЦикла; 
							Если БазаРаспределения = 0 Тогда
								// если доходов за прошлый месяц нет - будем использовать текущее распределение
								Доходы = ДоходыМесяцаРасчета;
								КоэффициентыПодразделений = КоэффициентыПодразделенийМесяцаРасчета;
							Иначе
								КоэффициентыПодразделений = ВыделитьКоэффициентыРаспределенияИзКоллекцииСтрок(Доходы, "СуммаДохода");
							КонецЕсли;
							ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, ИсчисленоРанее.НайтиСтроки(СтруктураПоиска), "Налог");
							ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, СтандартныхВычетовРанее.НайтиСтроки(СтруктураПоиска), "ПримененныйВычетЛичный" +
									",ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой" +
									",ПримененныйВычетНаТретьегоРебенка,ПримененныйВычетНаТретьегоРебенкаДвойной,ПримененныйВычетНаТретьегоРебенкаДвойнойВторой" +
									",ПримененныйВычетНаВторогоРебенка,ПримененныйВычетНаВторогоРебенкаДвойной,ПримененныйВычетНаВторогоРебенкаДвойнойВторой" +
									",ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой");
							ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, ИмущественныхВычетовРанее.НайтиСтроки(СтруктураПоиска), "ПримененныйВычетИмущественныйРасход,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании");
						КонецЕсли;
						
						Если КомментироватьРасчет Тогда
							КомментарийМесяца = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет за " + Формат(ВыборкаРасчетов.МесяцНалоговогоПериода, "ДФ=ММММ"), КомментарийНДФЛ);
							Если ВыборкаРасчетов.Резидент Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Статус: резидент РФ (или высококвалифицированный иностранный специалист)", КомментарийМесяца);
								ОбщегоНазначенияЗК.КомментарийРасчета("Доход за период, всего: " + ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц, КомментарийМесяца,,,, Ложь);
							Иначе
								ОбщегоНазначенияЗК.КомментарийРасчета("Статус: не является резидентом РФ", КомментарийМесяца,,, Перечисления.ВидыСообщений.ВажнаяИнформация);
							КонецЕсли;
						КонецЕсли;
						
						Если ВыборкаРасчетов.Резидент Тогда
							
							Если КомментироватьРасчет Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Облагаемый доход нарастающим итогом за год: " + ВыборкаРасчетов.ОблагаемыйДоходНарастающимИтогом, КомментарийМесяца);
							КонецЕсли;
							
							// Расчет сумм примененных вычетов и налога
							
							ВычетСоциальныйЗаМесяц = 0;
							ВычетЛичныйЗаМесяц = 0;
							ВычетНаДетейЗаМесяц = 0;
							ВычетНаДетейДвойнойЗаМесяц = 0;
							ВычетНаДетейДвойнойВторойЗаМесяц = 0;
							ВычетНаТретьегоРебенкаЗаМесяц = 0;
							ВычетНаТретьегоРебенкаДвойнойЗаМесяц = 0;
							ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = 0;
							ВычетНаВторогоРебенкаЗаМесяц = 0;
							ВычетНаВторогоРебенкаДвойнойЗаМесяц = 0;
							ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = 0;
							ВычетНаДетейИнвалидовЗаМесяц = 0;
							ВычетНаДетейИнвалидовДвойнойЗаМесяц = 0;
							ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = 0;
							ВычетИмущественныйРасходыЗаМесяц = 0;
							ВычетИмущественныйПроцентыПоКредитамЗаМесяц = 0;
							ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц = 0;
							
							ВычетСоциальныйОстаток = ВычетСоциальныйОстаток + ВыборкаРасчетов.СоциальныйВычет;
							СтрокиПравНаИмущественныеВычеты = ПравоНаИмущественныеВычеты.НайтиСтроки(СтруктураПоиска);
							Если СтрокиПравНаИмущественныеВычеты.Количество() > 0 Тогда
								ВычетИмущественныйРасходыОстаток = ВычетИмущественныйРасходыОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйРасходы;
								ВычетИмущественныйПроцентыПоКредитамОстаток = ВычетИмущественныйПроцентыПоКредитамОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйПроцентыПоКредитам;
								ВычетИмущественныйПроцентыПриПерекредитованииОстаток = ВычетИмущественныйПроцентыПриПерекредитованииОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйПроцентыПриПерекредитовании;
							КонецЕсли;
							Если ВыборкаРасчетов.ОсобенностиУчетаВычетов = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом Тогда
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц;
								ВычетЛичныйОстаток = ВычетЛичныйОстаток + ВыборкаРасчетов.СтандартныеВычетыЛичные;
								ВычетНаДетейОстаток = ВычетНаДетейОстаток + ВыборкаРасчетов.СтандартныеВычетыДетские;
								ВычетНаДетейДвойнойОстаток = ВычетНаДетейДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойные;
								ВычетНаДетейДвойнойВторойОстаток = ВычетНаДетейДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеВторые;
								ВычетНаТретьегоРебенкаОстаток = ВычетНаТретьегоРебенкаОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенка;
								ВычетНаТретьегоРебенкаДвойнойОстаток = ВычетНаТретьегоРебенкаДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойные;
								ВычетНаТретьегоРебенкаДвойнойВторойОстаток = ВычетНаТретьегоРебенкаДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые;
								ВычетНаВторогоРебенкаОстаток = ВычетНаВторогоРебенкаОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенка;
								ВычетНаВторогоРебенкаДвойнойОстаток = ВычетНаВторогоРебенкаДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойные;
								ВычетНаВторогоРебенкаДвойнойВторойОстаток = ВычетНаВторогоРебенкаДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеВторые;
								ВычетНаДетейИнвалидовОстаток = ВычетНаДетейИнвалидовОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидов;
								ВычетНаДетейИнвалидовДвойнойОстаток = ВычетНаДетейИнвалидовДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойные;
								ВычетНаДетейИнвалидовДвойнойВторойОстаток = ВычетНаДетейИнвалидовДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые;
							Иначе
								ДоходЗаМесяцОстаток = ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц;
								Если КомментироватьРасчет Тогда
									ОбщегоНазначенияЗК.КомментарийРасчета("Стандартные вычеты: применяются в пределах месячного дохода", КомментарийМесяца,,,, Ложь);
									Если ДоходЗаМесяцОстаток = 0 Тогда
										ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты не применялись", КомментарийМесяца,,, Перечисления.ВидыСообщений.ВажнаяИнформация);
									КонецЕсли;
								КонецЕсли;
								ВычетЛичныйОстаток = ВыборкаРасчетов.СтандартныеВычетыЛичные;
								ВычетНаДетейОстаток = ВыборкаРасчетов.СтандартныеВычетыДетские;
								ВычетНаДетейДвойнойОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойные;
								ВычетНаДетейДвойнойВторойОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеВторые;
								ВычетНаТретьегоРебенкаОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенка;
								ВычетНаТретьегоРебенкаДвойнойОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойные;
								ВычетНаТретьегоРебенкаДвойнойВторойОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые;
								ВычетНаВторогоРебенкаОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенка;
								ВычетНаВторогоРебенкаДвойнойОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойные;
								ВычетНаВторогоРебенкаДвойнойВторойОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеВторые;
								ВычетНаДетейИнвалидовОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидов;
								ВычетНаДетейИнвалидовДвойнойОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойные;
								ВычетНаДетейИнвалидовДвойнойВторойОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые;
							КонецЕсли;
							
							Если ДоходЗаМесяцОстаток > 0 Тогда
								
								ВычетСоциальныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетСоциальныйОстаток);
								ВычетСоциальныйОстаток = ВычетСоциальныйОстаток - ВычетСоциальныйЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетСоциальныйЗаМесяц;
								
								Если ВыборкаРасчетов.КодВычетаЛичный = Справочники.ВычетыНДФЛ.Код103 Тогда
									ВычетЛичныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетЛичныйОстаток);
									ВычетЛичныйОстаток = ВычетЛичныйОстаток - ВычетЛичныйЗаМесяц;
									ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетЛичныйЗаМесяц;
								КонецЕсли;
								
								ВычетНаДетейЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейОстаток);
								ВычетНаДетейОстаток = ВычетНаДетейОстаток - ВычетНаДетейЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейЗаМесяц;
								
								ВычетНаДетейДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейДвойнойОстаток);
								ВычетНаДетейДвойнойОстаток = ВычетНаДетейДвойнойОстаток - ВычетНаДетейДвойнойЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейДвойнойЗаМесяц;
								
								ВычетНаДетейДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейДвойнойВторойОстаток);
								ВычетНаДетейДвойнойВторойОстаток = ВычетНаДетейДвойнойВторойОстаток - ВычетНаДетейДвойнойВторойЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейДвойнойВторойЗаМесяц;
								
								ВычетНаВторогоРебенкаЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаОстаток);
								ВычетНаВторогоРебенкаОстаток = ВычетНаВторогоРебенкаОстаток - ВычетНаВторогоРебенкаЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаЗаМесяц;
								
								ВычетНаВторогоРебенкаДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаДвойнойОстаток);
								ВычетНаВторогоРебенкаДвойнойОстаток = ВычетНаВторогоРебенкаДвойнойОстаток - ВычетНаВторогоРебенкаДвойнойЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаДвойнойЗаМесяц;
								
								ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаДвойнойВторойОстаток);
								ВычетНаВторогоРебенкаДвойнойВторойОстаток = ВычетНаВторогоРебенкаДвойнойВторойОстаток - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц;
								
								ВычетНаТретьегоРебенкаЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаОстаток);
								ВычетНаТретьегоРебенкаОстаток = ВычетНаТретьегоРебенкаОстаток - ВычетНаТретьегоРебенкаЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаЗаМесяц;
								
								ВычетНаТретьегоРебенкаДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаДвойнойОстаток);
								ВычетНаТретьегоРебенкаДвойнойОстаток = ВычетНаТретьегоРебенкаДвойнойОстаток - ВычетНаТретьегоРебенкаДвойнойЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаДвойнойЗаМесяц;
								
								ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаДвойнойВторойОстаток);
								ВычетНаТретьегоРебенкаДвойнойВторойОстаток = ВычетНаТретьегоРебенкаДвойнойВторойОстаток - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц;
								
								ВычетНаДетейИнвалидовЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовОстаток);
								ВычетНаДетейИнвалидовОстаток = ВычетНаДетейИнвалидовОстаток - ВычетНаДетейИнвалидовЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовЗаМесяц;
								
								ВычетНаДетейИнвалидовДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовДвойнойОстаток);
								ВычетНаДетейИнвалидовДвойнойОстаток = ВычетНаДетейИнвалидовДвойнойОстаток - ВычетНаДетейИнвалидовДвойнойЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовДвойнойЗаМесяц;
								
								ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовДвойнойВторойОстаток);
								ВычетНаДетейИнвалидовДвойнойВторойОстаток = ВычетНаДетейИнвалидовДвойнойВторойОстаток - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц;
								
								Если ВыборкаРасчетов.КодВычетаЛичный <> Справочники.ВычетыНДФЛ.Код103 Тогда
									ВычетЛичныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетЛичныйОстаток);
									ВычетЛичныйОстаток = ВычетЛичныйОстаток - ВычетЛичныйЗаМесяц;
									ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетЛичныйЗаМесяц;
								КонецЕсли;
								
								Если ВыборкаРасчетов.МесяцНалоговогоПериода >= ДатаЗакона229ФЗ Тогда
									ДоходЗаМесяцДляИмущественныхВычетов = Макс(0, ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц - ВычетСоциальныйЗаМесяц - ВычетЛичныйЗаМесяц 
																				- ВычетНаДетейЗаМесяц - ВычетНаДетейДвойнойЗаМесяц - ВычетНаДетейДвойнойВторойЗаМесяц 
																				- ВычетНаТретьегоРебенкаЗаМесяц - ВычетНаТретьегоРебенкаДвойнойЗаМесяц - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
																				- ВычетНаВторогоРебенкаЗаМесяц - ВычетНаВторогоРебенкаДвойнойЗаМесяц - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
																				- ВычетНаДетейИнвалидовЗаМесяц - ВычетНаДетейИнвалидовДвойнойЗаМесяц - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц);
								Иначе
									ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцОстаток
								КонецЕсли;
								
								Если ДоходЗаМесяцДляИмущественныхВычетов > 0 Тогда
									
									ВычетИмущественныйПроцентыПоКредитамЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйПроцентыПоКредитамОстаток);
									ВычетИмущественныйПроцентыПоКредитамОстаток = ВычетИмущественныйПроцентыПоКредитамОстаток - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
									ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
									ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
									
									ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйПроцентыПриПерекредитованииОстаток);
									ВычетИмущественныйПроцентыПриПерекредитованииОстаток = ВычетИмущественныйПроцентыПриПерекредитованииОстаток - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
									ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
									ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
									
									ВычетИмущественныйРасходыЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйРасходыОстаток);
									ВычетИмущественныйРасходыОстаток = ВычетИмущественныйРасходыОстаток - ВычетИмущественныйРасходыЗаМесяц;
									ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйРасходыЗаМесяц;
									
								КонецЕсли;
								
								Если РаспределятьПоПодразделениям Тогда
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетЛичныйЗаМесяц, "ПримененныйВычетЛичный", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейЗаМесяц, "ПримененныйВычетНаДетей", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейДвойнойЗаМесяц, "ПримененныйВычетНаДетейДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейДвойнойВторойЗаМесяц, "ПримененныйВычетНаДетейДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаЗаМесяц, "ПримененныйВычетНаТретьегоРебенка", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаДвойнойЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаЗаМесяц, "ПримененныйВычетНаВторогоРебенка", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаДвойнойЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовЗаМесяц, "ПримененныйВычетНаДетейИнвалидов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовДвойнойЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйРасходыЗаМесяц, "ПримененныйВычетИмущественныйРасход", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйПроцентыПоКредитамЗаМесяц, "ПримененныйВычетИмущественныйПроцентыПоКредитам", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц, "ПримененныйВычетИмущественныйПроцентыПриПерекредитовании", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
								КонецЕсли;
								
								Если КомментироватьРасчет Тогда
									Если ВычетСоциальныйЗаМесяц + ВычетЛичныйЗаМесяц 
										+ ВычетНаДетейЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц 
										+ ВычетНаТретьегоРебенкаЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
										+ ВычетНаВторогоРебенкаЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
										+ ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц + ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц + ВычетИмущественныйРасходыЗаМесяц <> 0 Тогда
										
										КомментарийВычетов = ОбщегоНазначенияЗК.КомментарийРасчета("Примененные вычеты, всего: " + (ВычетСоциальныйЗаМесяц + ВычетЛичныйЗаМесяц 
												+ ВычетНаДетейЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц 
												+ ВычетНаТретьегоРебенкаЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
												+ ВычетНаВторогоРебенкаЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
												+ ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц + ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц + ВычетИмущественныйРасходыЗаМесяц), КомментарийМесяца);
												
										Если ВычетСоциальныйЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный социальный вычет: " + ВычетСоциальныйЗаМесяц, КомментарийВычетов);
										КонецЕсли;
										Если ВычетЛичныйЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный личный вычет: " + ВычетЛичныйЗаМесяц, КомментарийВычетов);
										КонецЕсли;
										Если ВычетНаДетейЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + ВычетНаДетейЗаМесяц, КомментарийВычетов);
										КонецЕсли;
										Если ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц), КомментарийВычетов);
										КонецЕсли;
										Если ВычетНаВторогоРебенкаЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + ВычетНаВторогоРебенкаЗаМесяц, КомментарийВычетов);
										КонецЕсли;
										Если ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц), КомментарийВычетов);
										КонецЕсли;
										Если ВычетНаТретьегоРебенкаЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + ВычетНаТретьегоРебенкаЗаМесяц, КомментарийВычетов);
										КонецЕсли;
										Если ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц), КомментарийВычетов);
										КонецЕсли;
										Если ВычетНаДетейИнвалидовЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей-инвалидов: " + ВычетНаДетейИнвалидовЗаМесяц, КомментарийВычетов);
										КонецЕсли;
										Если ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей-инвалидов (двойной): " + (ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц), КомментарийВычетов);
										КонецЕсли;
										Если ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты на погашение процентов по ипотеке: " + (ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц), КомментарийВычетов);
										КонецЕсли;
										Если ВычетИмущественныйРасходыЗаМесяц <> 0 Тогда
											ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты по расходам на строительство: " + ВычетИмущественныйРасходыЗаМесяц, КомментарийВычетов);
										КонецЕсли;
									Иначе
										ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты не применялись", КомментарийМесяца,,, Перечисления.ВидыСообщений.ВажнаяИнформация);
									КонецЕсли;                
								КонецЕсли;
								
							КонецЕсли;
							
							ОблагаемыйДоход = Мин(ВыборкаРасчетов.ОблагаемыйДоходНарастающимИтогом, 
										Макс(0, ОблагаемыйДоход + ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц - (ВычетСоциальныйЗаМесяц + ВычетЛичныйЗаМесяц 
										+ ВычетНаДетейЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц 
										+ ВычетНаТретьегоРебенкаЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
										+ ВычетНаВторогоРебенкаЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
										+ ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц 
										+ ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц + ВычетИмущественныйРасходыЗаМесяц)));
										
							ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоход);			
							НалогЗаМесяц = Окр(ОблагаемыйДоходДляИсчисленияНалога * ВыборкаРасчетов.СтавкаДляРезидента) - НалогИсчисленный;
							НалогИсчисленный = НалогИсчисленный + НалогЗаМесяц;
							
							Если ВозвращатьДанныеРасчетовБезПодразделений Тогда
								
								СтрокаРезультата = РезультатыРасчетов.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаРасчетов, "ФизЛицо, МесяцНалоговогоПериода, Резидент, ОблагаемыйДоходНарастающимИтогом, ОграничениеПоДоходамЛичные, ОграничениеПоДоходамНаДетей");
								СтрокаРезультата.ВычетЛичныйЗаМесяц = ВычетЛичныйЗаМесяц;
								СтрокаРезультата.ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц;
								СтрокаРезультата.ВычетНаДетейИнвалидовДвойнойЗаМесяц = ВычетНаДетейИнвалидовДвойнойЗаМесяц;
								СтрокаРезультата.ВычетНаДетейИнвалидовЗаМесяц = ВычетНаДетейИнвалидовЗаМесяц;
								СтрокаРезультата.ВычетНаДетейДвойнойВторойЗаМесяц = ВычетНаДетейДвойнойВторойЗаМесяц;
								СтрокаРезультата.ВычетНаДетейДвойнойЗаМесяц = ВычетНаДетейДвойнойЗаМесяц;
								СтрокаРезультата.ВычетНаДетейЗаМесяц = ВычетНаДетейЗаМесяц;
								СтрокаРезультата.ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц;
								СтрокаРезультата.ВычетНаТретьегоРебенкаДвойнойЗаМесяц = ВычетНаТретьегоРебенкаДвойнойЗаМесяц;
								СтрокаРезультата.ВычетНаТретьегоРебенкаЗаМесяц = ВычетНаТретьегоРебенкаЗаМесяц;
								СтрокаРезультата.ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц;
								СтрокаРезультата.ВычетНаВторогоРебенкаДвойнойЗаМесяц = ВычетНаВторогоРебенкаДвойнойЗаМесяц;
								СтрокаРезультата.ВычетНаВторогоРебенкаЗаМесяц = ВычетНаВторогоРебенкаЗаМесяц;
								СтрокаРезультата.ВычетИмущественныйРасходыОстаток = ВычетИмущественныйРасходыОстаток;
								СтрокаРезультата.ВычетИмущественныйПроцентыПриПерекредитованииОстаток = ВычетИмущественныйПроцентыПриПерекредитованииОстаток;
								СтрокаРезультата.ВычетИмущественныйПроцентыПоКредитамОстаток = ВычетИмущественныйПроцентыПоКредитамОстаток;
								СтрокаРезультата.НалогЗаМесяц = НалогЗаМесяц;
								
							КонецЕсли;
							
							Если КомментироватьРасчет Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено налога нарастающим итогом за год: " + Окр(ОблагаемыйДоходДляИсчисленияНалога * ВыборкаРасчетов.СтавкаДляРезидента), КомментарийМесяца);
								ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено налога за месяц: " + НалогЗаМесяц, КомментарийМесяца);
								РанееНалогИсчисленный = ИсчисленоРанее.Скопировать(ИсчисленоРанее.НайтиСтроки(СтруктураПоиска),"Налог");
								РанееНалогИсчисленный = -РанееНалогИсчисленный.Итог("Налог");
								Если РанееНалогИсчисленный <> 0 Тогда
									ОбщегоНазначенияЗК.КомментарийРасчета("Зарегистрировано ранее налога за месяц: " + РанееНалогИсчисленный, КомментарийМесяца);
								КонецЕсли;
								ОбщегоНазначенияЗК.КомментарийРасчета("Результат расчета за " + Формат(ВыборкаРасчетов.МесяцНалоговогоПериода, "ДФ=ММММ") + ": " + (НалогЗаМесяц - РанееНалогИсчисленный), КомментарийНДФЛ);
							КонецЕсли;
							
						Иначе	
							
							НалогЗаМесяц = ВыборкаРасчетов.НалогЗаМесяц;
							
							Если КомментироватьРасчет Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Результат расчета за " + Формат(ВыборкаРасчетов.МесяцНалоговогоПериода, "ДФ=ММММ") + ": " + НалогЗаМесяц, КомментарийНДФЛ);
							КонецЕсли;
							
							Если ВозвращатьДанныеРасчетовБезПодразделений Тогда
								ЗаполнитьЗначенияСвойств(РезультатыРасчетов.Добавить(),ВыборкаРасчетов,"ФизЛицо, МесяцНалоговогоПериода, Резидент");
							КонецЕсли;
							
						КонецЕсли;
						
						Если РаспределятьПоПодразделениям Тогда
							
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, НалогЗаМесяц, "Налог", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений);
							
							ВспомогательнаяТаблица.Свернуть("ФизЛицо, МесяцНалоговогоПериода,Подразделение", СтрокаРесурсов);
							Для каждого СтрокаТЗ Из ВспомогательнаяТаблица Цикл
								ЕстьДанныеВСтроке = Ложь;
								Для каждого ИмяРесурса Из МассивРесурсов Цикл
									ЕстьДанныеВСтроке = СтрокаТЗ[ИмяРесурса] <> 0;
									Если ЕстьДанныеВСтроке Тогда
										Прервать;
									КонецЕсли;
								КонецЦикла;
								Если ЕстьДанныеВСтроке Тогда
									ЗаполнитьЗначенияСвойств(РезультатыРасчетов.Добавить(),СтрокаТЗ);
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// расчет по каждой дате получения дохода
	Если РаспределятьПоПодразделениям И ПоследнийМесяцНалоговогоПериода >= ДатаИзмененияИсчисленияДляИностранцев Тогда
		
		СтруктураПоискаИсчисленного = Новый Структура("ФизЛицо, МесяцНалоговогоПериодаДляПоиска");
		СтруктураПоискаПоДатам = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода");
		
		ИсчисленоРанее.Индексы.Добавить("ФизЛицо,МесяцНалоговогоПериодаДляПоиска"); 
		РаспределениеДоходовПоПодразделениям = Результат[ВсегоРезультатов - 7].Выгрузить();
		РаспределениеДоходовПоПодразделениям.Индексы.Добавить("ФизЛицо, МесяцНалоговогоПериода,ДатаПолученияДохода");
		
		ВыборкаРасчетов = Результат[ВсегоРезультатов - 8].Выбрать();
		Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("Порядок") Цикл
			Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("ФизЛицо") Цикл
				
				// Подготовим распределение, которое будет использоваться при отсутствии базы соответствующего месяца.
				
				СтруктураПоиска.ФизЛицо = ВыборкаРасчетов.ФизЛицо;
				СтруктураПоискаИсчисленного.ФизЛицо = ВыборкаРасчетов.ФизЛицо;
				
				БазаРаспределения = 0;
				МесяцПоиска = НачалоМесяца(ПериодРегистрации);
				Пока БазаРаспределения = 0 И Год(МесяцПоиска) = ТекущийГод Цикл
					СтруктураПоиска.МесяцНалоговогоПериода = МесяцПоиска;
					ДоходыМесяцаРасчета = РаспределениеДоходовПоПодразделениям.НайтиСтроки(СтруктураПоиска);
					БазаРаспределения = 0;
					Для каждого СтрокаРаспределения Из ДоходыМесяцаРасчета Цикл
						БазаРаспределения = БазаРаспределения + СтрокаРаспределения.СуммаДохода;
					КонецЦикла; 
					МесяцПоиска = ДобавитьМесяц(МесяцПоиска, -1);
				КонецЦикла;
				
				КоэффициентыПодразделенийМесяцаРасчета = ВыделитьКоэффициентыРаспределенияИзКоллекцииСтрок(ДоходыМесяцаРасчета, "СуммаДохода");
				
				Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл
					
					ВычетЛичныйОстаток = 0;
					ВычетНаДетейОстаток = 0;
					ВычетНаДетейДвойнойОстаток = 0;
					ВычетНаДетейДвойнойВторойОстаток = 0;
					ВычетНаТретьегоРебенкаОстаток = 0;
					ВычетНаТретьегоРебенкаДвойнойОстаток = 0;
					ВычетНаТретьегоРебенкаДвойнойВторойОстаток = 0;
					ВычетНаВторогоРебенкаОстаток = 0;
					ВычетНаВторогоРебенкаДвойнойОстаток = 0;
					ВычетНаВторогоРебенкаДвойнойВторойОстаток = 0;
					ВычетНаДетейИнвалидовОстаток = 0;
					ВычетНаДетейИнвалидовДвойнойОстаток = 0;
					ВычетНаДетейИнвалидовДвойнойВторойОстаток = 0;
					ВычетНаДетейОпекуновОстаток = 0;
					ВычетНаДетейДвойнойОпекуновОстаток = 0;
					ВычетНаДетейДвойнойВторойОпекуновОстаток = 0;
					ВычетНаТретьегоРебенкаОпекуновОстаток = 0;
					ВычетНаТретьегоРебенкаДвойнойОпекуновОстаток = 0;
					ВычетНаТретьегоРебенкаДвойнойВторойОпекуновОстаток = 0;
					ВычетНаВторогоРебенкаОпекуновОстаток = 0;
					ВычетНаВторогоРебенкаДвойнойОпекуновОстаток = 0;
					ВычетНаВторогоРебенкаДвойнойВторойОпекуновОстаток = 0;
					ВычетНаДетейИнвалидовОпекуновОстаток = 0;
					ВычетНаДетейИнвалидовДвойнойОпекуновОстаток = 0;
					ВычетНаДетейИнвалидовДвойнойВторойОпекуновОстаток = 0;
					ВычетИмущественныйРасходыОстаток = 0;
					ВычетИмущественныйПроцентыПоКредитамОстаток = 0;
					ВычетИмущественныйПроцентыПриПерекредитованииОстаток = 0;
					ВычетРасходыНаСвоеОбучениеОстаток = 0;
					ВычетРасходыНаОбучениеДетейОстаток = 0;
					ВычетРасходыНаЛечениеОстаток = 0;
					ВычетСтраховыеВзносыНаМедУслугиОстаток = 0;
					ВычетРасходыНаДорогостоящееЛечениеОстаток = 0;
					ВычетВзносыНаДобровольноеСтрахованиеЖизниОстаток = 0;
					ВычетСоциальныйОстаток = 0;
					ОблагаемыйДоход = 0;
					ДоходЗаМесяцОстаток = 0;
					НалогИсчисленный = 0;
					
					
					
					Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") Цикл
						
						Если ВыборкаРасчетов.МесяцНалоговогоПериода < ДатаИзмененияИсчисленияДляИностранцев Тогда
							Продолжить;
							
							
							
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасчетов);
						СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = ВыборкаРасчетов.МесяцНалоговогоПериода;
						
						ВспомогательнаяТаблица.Очистить();
						
						ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, ИсчисленоРанее.НайтиСтроки(СтруктураПоискаИсчисленного), "Налог");
						
						Если КомментироватьРасчет Тогда
							КомментарийМесяца = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет за " + Формат(ВыборкаРасчетов.МесяцНалоговогоПериода, "ДФ=ММММ"), КомментарийНДФЛ);
							РанееНалогИсчисленный = ИсчисленоРанее.Скопировать(ИсчисленоРанее.НайтиСтроки(СтруктураПоискаИсчисленного),"Налог");
							РанееНалогИсчисленный = -РанееНалогИсчисленный.Итог("Налог");
							Если РанееНалогИсчисленный <> 0 Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Зарегистрировано ранее налога за месяц: " + РанееНалогИсчисленный, КомментарийМесяца);
							КонецЕсли;
						КонецЕсли;
						
						// Расчет сумм примененных вычетов
						
						ВсегоВычетовЗаМесяц = 0;
						
						ВычетСоциальныйЗаМесяц = 0;
						ВычетЛичныйЗаМесяц = 0;
						ВычетНаДетейЗаМесяц = 0;
						ВычетНаДетейДвойнойЗаМесяц = 0;
						ВычетНаДетейДвойнойВторойЗаМесяц = 0;
						ВычетНаТретьегоРебенкаЗаМесяц = 0;
						ВычетНаТретьегоРебенкаДвойнойЗаМесяц = 0;
						ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = 0;
						ВычетНаВторогоРебенкаЗаМесяц = 0;
						ВычетНаВторогоРебенкаДвойнойЗаМесяц = 0;
						ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = 0;
						ВычетНаДетейИнвалидовЗаМесяц = 0;
						ВычетНаДетейИнвалидовДвойнойЗаМесяц = 0;
						ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = 0;
						ВычетНаДетейОпекуновЗаМесяц = 0;
						ВычетНаДетейДвойнойОпекуновЗаМесяц = 0;
						ВычетНаДетейДвойнойВторойОпекуновЗаМесяц = 0;
						ВычетНаТретьегоРебенкаОпекуновЗаМесяц = 0;
						ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц = 0;
						ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц = 0;
						ВычетНаВторогоРебенкаОпекуновЗаМесяц = 0;
						ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц = 0;
						ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц = 0;
						ВычетНаДетейИнвалидовОпекуновЗаМесяц = 0;
						ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц = 0;
						ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц = 0;
						ВычетИмущественныйРасходыЗаМесяц = 0;
						ВычетИмущественныйПроцентыПоКредитамЗаМесяц = 0;
						ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц = 0;
						ВычетРасходыНаСвоеОбучениеЗаМесяц = 0;
						ВычетРасходыНаОбучениеДетейЗаМесяц = 0;
						ВычетРасходыНаЛечениеЗаМесяц = 0;
						ВычетСтраховыеВзносыНаМедУслугиЗаМесяц = 0;
						ВычетРасходыНаДорогостоящееЛечениеЗаМесяц = 0;
						ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц = 0;
						
						ВычетСоциальныйОстаток = ВычетСоциальныйОстаток + ВыборкаРасчетов.СоциальныйВычет;
						СтрокиПравНаИмущественныеВычеты = ПравоНаИмущественныеВычеты.НайтиСтроки(СтруктураПоиска);
						Если СтрокиПравНаИмущественныеВычеты.Количество() > 0 Тогда
							ВычетРасходыНаСвоеОбучениеОстаток = ВычетРасходыНаСвоеОбучениеОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетРасходыНаСвоеОбучение;
							ВычетРасходыНаОбучениеДетейОстаток = ВычетРасходыНаОбучениеДетейОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетРасходыНаОбучениеДетей;
							ВычетРасходыНаЛечениеОстаток = ВычетРасходыНаЛечениеОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетРасходыНаЛечение;
							ВычетСтраховыеВзносыНаМедУслугиОстаток = ВычетСтраховыеВзносыНаМедУслугиОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетСтраховыеВзносыНаМедУслуги;
							ВычетРасходыНаДорогостоящееЛечениеОстаток = ВычетРасходыНаДорогостоящееЛечениеОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетРасходыНаДорогостоящееЛечение;
							ВычетВзносыНаДобровольноеСтрахованиеЖизниОстаток = ВычетВзносыНаДобровольноеСтрахованиеЖизниОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетВзносыНаДобровольноеСтрахованиеЖизни;
							ВычетИмущественныйРасходыОстаток = ВычетИмущественныйРасходыОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйРасходы;
							ВычетИмущественныйПроцентыПоКредитамОстаток = ВычетИмущественныйПроцентыПоКредитамОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйПроцентыПоКредитам;
							ВычетИмущественныйПроцентыПриПерекредитованииОстаток = ВычетИмущественныйПроцентыПриПерекредитованииОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйПроцентыПриПерекредитовании;
						КонецЕсли;
						Если ВыборкаРасчетов.ОсобенностиУчетаВычетов = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом Тогда
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц;
							ВычетЛичныйОстаток = ВычетЛичныйОстаток + ВыборкаРасчетов.СтандартныеВычетыЛичные;
							ВычетНаДетейОстаток = ВычетНаДетейОстаток + ВыборкаРасчетов.СтандартныеВычетыДетские;
							ВычетНаДетейДвойнойОстаток = ВычетНаДетейДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойные;
							ВычетНаДетейДвойнойВторойОстаток = ВычетНаДетейДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеВторые;
							ВычетНаТретьегоРебенкаОстаток = ВычетНаТретьегоРебенкаОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенка;
							ВычетНаТретьегоРебенкаДвойнойОстаток = ВычетНаТретьегоРебенкаДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойные;
							ВычетНаТретьегоРебенкаДвойнойВторойОстаток = ВычетНаТретьегоРебенкаДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые;
							ВычетНаВторогоРебенкаОстаток = ВычетНаВторогоРебенкаОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенка;
							ВычетНаВторогоРебенкаДвойнойОстаток = ВычетНаВторогоРебенкаДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойные;
							ВычетНаВторогоРебенкаДвойнойВторойОстаток = ВычетНаВторогоРебенкаДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеВторые;
							ВычетНаДетейИнвалидовОстаток = ВычетНаДетейИнвалидовОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидов;
							ВычетНаДетейИнвалидовДвойнойОстаток = ВычетНаДетейИнвалидовДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойные;
							ВычетНаДетейИнвалидовДвойнойВторойОстаток = ВычетНаДетейИнвалидовДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые;
							ВычетНаДетейОпекуновОстаток = ВычетНаДетейОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеОпекунов;
							ВычетНаДетейДвойнойОпекуновОстаток = ВычетНаДетейДвойнойОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеОпекунов;
							ВычетНаДетейДвойнойВторойОпекуновОстаток = ВычетНаДетейДвойнойВторойОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеВторыеОпекунов;
							ВычетНаТретьегоРебенкаОпекуновОстаток = ВычетНаТретьегоРебенкаОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаОпекунов;
							ВычетНаТретьегоРебенкаДвойнойОпекуновОстаток = ВычетНаТретьегоРебенкаДвойнойОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеОпекунов;
							ВычетНаТретьегоРебенкаДвойнойВторойОпекуновОстаток = ВычетНаТретьегоРебенкаДвойнойВторойОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторыеОпекунов;
							ВычетНаВторогоРебенкаОпекуновОстаток = ВычетНаВторогоРебенкаОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаОпекунов;
							ВычетНаВторогоРебенкаДвойнойОпекуновОстаток = ВычетНаВторогоРебенкаДвойнойОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеОпекунов;
							ВычетНаВторогоРебенкаДвойнойВторойОпекуновОстаток = ВычетНаВторогоРебенкаДвойнойВторойОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеВторыеОпекунов;
							ВычетНаДетейИнвалидовОпекуновОстаток = ВычетНаДетейИнвалидовОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовОпекунов;
							ВычетНаДетейИнвалидовДвойнойОпекуновОстаток = ВычетНаДетейИнвалидовДвойнойОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеОпекунов;
							ВычетНаДетейИнвалидовДвойнойВторойОпекуновОстаток = ВычетНаДетейИнвалидовДвойнойВторойОпекуновОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеВторыеОпекунов;
						Иначе
							ДоходЗаМесяцОстаток = ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц;
							Если КомментироватьРасчет Тогда
								ОбщегоНазначенияЗК.КомментарийРасчета("Стандартные вычеты: применяются в пределах месячного дохода", КомментарийМесяца,,,, Ложь);
								Если ДоходЗаМесяцОстаток = 0 Тогда
									ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты не применялись", КомментарийМесяца,,, Перечисления.ВидыСообщений.ВажнаяИнформация);
								КонецЕсли;
							КонецЕсли;
							ВычетЛичныйОстаток = ВыборкаРасчетов.СтандартныеВычетыЛичные;
							ВычетНаДетейОстаток = ВыборкаРасчетов.СтандартныеВычетыДетские;
							ВычетНаДетейДвойнойОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойные;
							ВычетНаДетейДвойнойВторойОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеВторые;
							ВычетНаТретьегоРебенкаОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенка;
							ВычетНаТретьегоРебенкаДвойнойОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойные;
							ВычетНаТретьегоРебенкаДвойнойВторойОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые;
							ВычетНаВторогоРебенкаОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенка;
							ВычетНаВторогоРебенкаДвойнойОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойные;
							ВычетНаВторогоРебенкаДвойнойВторойОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеВторые;
							ВычетНаДетейИнвалидовОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидов;
							ВычетНаДетейИнвалидовДвойнойОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойные;
							ВычетНаДетейИнвалидовДвойнойВторойОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые;
							ВычетНаДетейОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеОпекунов;
							ВычетНаДетейДвойнойОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеОпекунов;
							ВычетНаДетейДвойнойВторойОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеВторыеОпекунов;
							ВычетНаТретьегоРебенкаОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаОпекунов;
							ВычетНаТретьегоРебенкаДвойнойОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеОпекунов;
							ВычетНаТретьегоРебенкаДвойнойВторойОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторыеОпекунов;
							ВычетНаВторогоРебенкаОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаОпекунов;
							ВычетНаВторогоРебенкаДвойнойОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеОпекунов;
							ВычетНаВторогоРебенкаДвойнойВторойОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеВторыеОпекунов;
							ВычетНаДетейИнвалидовОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовОпекунов;
							ВычетНаДетейИнвалидовДвойнойОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеОпекунов;
							ВычетНаДетейИнвалидовДвойнойВторойОпекуновОстаток = ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеВторыеОпекунов;
						КонецЕсли;
						ЕстьВычетыЗаМесяц = Ложь;
						Если ДоходЗаМесяцОстаток > 0 И (ВыборкаРасчетов.ВсеДоходыЗаМесяц <> 0 Или ЭтоПерерасчет) Тогда
							
							ВычетСоциальныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетСоциальныйОстаток);
							ВычетСоциальныйОстаток = ВычетСоциальныйОстаток - ВычетСоциальныйЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетСоциальныйЗаМесяц;
							
							//Если ВыборкаРасчетов.КодВычетаЛичный = Справочники.ВычетыНДФЛ.Код103 Тогда
							//	ВычетЛичныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетЛичныйОстаток);
							//	ВычетЛичныйОстаток = ВычетЛичныйОстаток - ВычетЛичныйЗаМесяц;
							//	ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетЛичныйЗаМесяц;
							//КонецЕсли;
							
							ВычетНаДетейЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейОстаток);
							ВычетНаДетейОстаток = ВычетНаДетейОстаток - ВычетНаДетейЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейЗаМесяц;
							
							ВычетНаДетейДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейДвойнойОстаток);
							ВычетНаДетейДвойнойОстаток = ВычетНаДетейДвойнойОстаток - ВычетНаДетейДвойнойЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейДвойнойЗаМесяц;
							
							ВычетНаДетейДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейДвойнойВторойОстаток);
							ВычетНаДетейДвойнойВторойОстаток = ВычетНаДетейДвойнойВторойОстаток - ВычетНаДетейДвойнойВторойЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейДвойнойВторойЗаМесяц;
							
							ВычетНаВторогоРебенкаЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаОстаток);
							ВычетНаВторогоРебенкаОстаток = ВычетНаВторогоРебенкаОстаток - ВычетНаВторогоРебенкаЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаЗаМесяц;
							
							ВычетНаВторогоРебенкаДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаДвойнойОстаток);
							ВычетНаВторогоРебенкаДвойнойОстаток = ВычетНаВторогоРебенкаДвойнойОстаток - ВычетНаВторогоРебенкаДвойнойЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаДвойнойЗаМесяц;
							
							ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаДвойнойВторойОстаток);
							ВычетНаВторогоРебенкаДвойнойВторойОстаток = ВычетНаВторогоРебенкаДвойнойВторойОстаток - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц;
							
							ВычетНаТретьегоРебенкаЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаОстаток);
							ВычетНаТретьегоРебенкаОстаток = ВычетНаТретьегоРебенкаОстаток - ВычетНаТретьегоРебенкаЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаЗаМесяц;
							
							ВычетНаТретьегоРебенкаДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаДвойнойОстаток);
							ВычетНаТретьегоРебенкаДвойнойОстаток = ВычетНаТретьегоРебенкаДвойнойОстаток - ВычетНаТретьегоРебенкаДвойнойЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаДвойнойЗаМесяц;
							
							ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаДвойнойВторойОстаток);
							ВычетНаТретьегоРебенкаДвойнойВторойОстаток = ВычетНаТретьегоРебенкаДвойнойВторойОстаток - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц;
							
							ВычетНаДетейИнвалидовЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовОстаток);
							ВычетНаДетейИнвалидовОстаток = ВычетНаДетейИнвалидовОстаток - ВычетНаДетейИнвалидовЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовЗаМесяц;
							
							ВычетНаДетейИнвалидовДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовДвойнойОстаток);
							ВычетНаДетейИнвалидовДвойнойОстаток = ВычетНаДетейИнвалидовДвойнойОстаток - ВычетНаДетейИнвалидовДвойнойЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовДвойнойЗаМесяц;
							
							ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовДвойнойВторойОстаток);
							ВычетНаДетейИнвалидовДвойнойВторойОстаток = ВычетНаДетейИнвалидовДвойнойВторойОстаток - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц;
							
							ВычетНаДетейОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейОпекуновОстаток);
							ВычетНаДетейОпекуновОстаток = ВычетНаДетейОпекуновОстаток - ВычетНаДетейОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейОпекуновЗаМесяц;
							
							ВычетНаДетейДвойнойОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейДвойнойОпекуновОстаток);
							ВычетНаДетейДвойнойОпекуновОстаток = ВычетНаДетейДвойнойОпекуновОстаток - ВычетНаДетейДвойнойОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейДвойнойОпекуновЗаМесяц;
							
							ВычетНаДетейДвойнойВторойОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейДвойнойВторойОпекуновОстаток);
							ВычетНаДетейДвойнойВторойОпекуновОстаток = ВычетНаДетейДвойнойВторойОпекуновОстаток - ВычетНаДетейДвойнойВторойОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейДвойнойВторойОпекуновЗаМесяц;
							
							ВычетНаВторогоРебенкаОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаОпекуновОстаток);
							ВычетНаВторогоРебенкаОпекуновОстаток = ВычетНаВторогоРебенкаОпекуновОстаток - ВычетНаВторогоРебенкаОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаОпекуновЗаМесяц;
							
							ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаДвойнойОпекуновОстаток);
							ВычетНаВторогоРебенкаДвойнойОпекуновОстаток = ВычетНаВторогоРебенкаДвойнойОпекуновОстаток - ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц;
							
							ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаДвойнойВторойОпекуновОстаток);
							ВычетНаВторогоРебенкаДвойнойВторойОпекуновОстаток = ВычетНаВторогоРебенкаДвойнойВторойОпекуновОстаток - ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц;
							
							ВычетНаТретьегоРебенкаОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаОпекуновОстаток);
							ВычетНаТретьегоРебенкаОпекуновОстаток = ВычетНаТретьегоРебенкаОпекуновОстаток - ВычетНаТретьегоРебенкаОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаОпекуновЗаМесяц;
							
							ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаДвойнойОпекуновОстаток);
							ВычетНаТретьегоРебенкаДвойнойОпекуновОстаток = ВычетНаТретьегоРебенкаДвойнойОпекуновОстаток - ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц;
							
							ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаДвойнойВторойОпекуновОстаток);
							ВычетНаТретьегоРебенкаДвойнойВторойОпекуновОстаток = ВычетНаТретьегоРебенкаДвойнойВторойОпекуновОстаток - ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц;
							
							
							ВычетНаДетейИнвалидовОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовОпекуновОстаток);
							ВычетНаДетейИнвалидовОпекуновОстаток = ВычетНаДетейИнвалидовОпекуновОстаток - ВычетНаДетейИнвалидовОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовОпекуновЗаМесяц;
							
							ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовДвойнойОпекуновОстаток);
							ВычетНаДетейИнвалидовДвойнойОпекуновОстаток = ВычетНаДетейИнвалидовДвойнойОпекуновОстаток - ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц;
							
							ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовДвойнойВторойОпекуновОстаток);
							ВычетНаДетейИнвалидовДвойнойВторойОпекуновОстаток = ВычетНаДетейИнвалидовДвойнойВторойОпекуновОстаток - ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц;
							
							ВычетЛичныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетЛичныйОстаток);
							ВычетЛичныйОстаток = ВычетЛичныйОстаток - ВычетЛичныйЗаМесяц;
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетЛичныйЗаМесяц;
							
							ДоходЗаМесяцДляИмущественныхВычетов = Макс(0, ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц - ВычетСоциальныйЗаМесяц - ВычетЛичныйЗаМесяц 
								- ВычетНаДетейЗаМесяц - ВычетНаДетейДвойнойЗаМесяц - ВычетНаДетейДвойнойВторойЗаМесяц 
								- ВычетНаТретьегоРебенкаЗаМесяц - ВычетНаТретьегоРебенкаДвойнойЗаМесяц - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
								- ВычетНаВторогоРебенкаЗаМесяц - ВычетНаВторогоРебенкаДвойнойЗаМесяц - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
								- ВычетНаДетейИнвалидовЗаМесяц - ВычетНаДетейИнвалидовДвойнойЗаМесяц - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц
								- ВычетНаДетейОпекуновЗаМесяц - ВычетНаДетейДвойнойОпекуновЗаМесяц - ВычетНаДетейДвойнойВторойОпекуновЗаМесяц 
								- ВычетНаТретьегоРебенкаОпекуновЗаМесяц - ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц - ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц 
								- ВычетНаВторогоРебенкаОпекуновЗаМесяц - ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц - ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц 
								- ВычетНаДетейИнвалидовОпекуновЗаМесяц - ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц - ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц);
							
							Если ДоходЗаМесяцДляИмущественныхВычетов > 0 Тогда
								
								ВычетРасходыНаДорогостоящееЛечениеЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетРасходыНаДорогостоящееЛечениеОстаток);
								ВычетРасходыНаДорогостоящееЛечениеОстаток = ВычетРасходыНаДорогостоящееЛечениеОстаток - ВычетРасходыНаДорогостоящееЛечениеЗаМесяц;
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетРасходыНаДорогостоящееЛечениеЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетРасходыНаДорогостоящееЛечениеЗаМесяц;
								
								ВычетСтраховыеВзносыНаМедУслугиЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетСтраховыеВзносыНаМедУслугиОстаток);
								ВычетСтраховыеВзносыНаМедУслугиОстаток = ВычетСтраховыеВзносыНаМедУслугиОстаток - ВычетСтраховыеВзносыНаМедУслугиЗаМесяц;
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетСтраховыеВзносыНаМедУслугиЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетСтраховыеВзносыНаМедУслугиЗаМесяц;
								
								ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетВзносыНаДобровольноеСтрахованиеЖизниОстаток);
								ВычетВзносыНаДобровольноеСтрахованиеЖизниОстаток = ВычетВзносыНаДобровольноеСтрахованиеЖизниОстаток - ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц;
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц;
								
								ВычетРасходыНаЛечениеЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетРасходыНаЛечениеОстаток);
								ВычетРасходыНаЛечениеОстаток = ВычетРасходыНаЛечениеОстаток - ВычетРасходыНаЛечениеЗаМесяц;
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетРасходыНаЛечениеЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетРасходыНаЛечениеЗаМесяц;
								
								ВычетРасходыНаОбучениеДетейЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетРасходыНаОбучениеДетейОстаток);
								ВычетРасходыНаОбучениеДетейОстаток = ВычетРасходыНаОбучениеДетейОстаток - ВычетРасходыНаОбучениеДетейЗаМесяц;
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетРасходыНаОбучениеДетейЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетРасходыНаОбучениеДетейЗаМесяц;
								
								ВычетРасходыНаСвоеОбучениеЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетРасходыНаСвоеОбучениеОстаток);
								ВычетРасходыНаСвоеОбучениеОстаток = ВычетРасходыНаСвоеОбучениеОстаток - ВычетРасходыНаСвоеОбучениеЗаМесяц;
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетРасходыНаСвоеОбучениеЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетРасходыНаСвоеОбучениеЗаМесяц;
								
								ВычетИмущественныйПроцентыПоКредитамЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйПроцентыПоКредитамОстаток);
								ВычетИмущественныйПроцентыПоКредитамОстаток = ВычетИмущественныйПроцентыПоКредитамОстаток - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
								
								ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйПроцентыПриПерекредитованииОстаток);
								ВычетИмущественныйПроцентыПриПерекредитованииОстаток = ВычетИмущественныйПроцентыПриПерекредитованииОстаток - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
								
								ВычетИмущественныйРасходыЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйРасходыОстаток);
								ВычетИмущественныйРасходыОстаток = ВычетИмущественныйРасходыОстаток - ВычетИмущественныйРасходыЗаМесяц;
								ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйРасходыЗаМесяц;
								
							КонецЕсли;
							
							//Если РаспределятьПоПодразделениям Тогда
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетЛичныйЗаМесяц, "ПримененныйВычетЛичный", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейЗаМесяц, "ПримененныйВычетНаДетей", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейДвойнойЗаМесяц, "ПримененныйВычетНаДетейДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейДвойнойВторойЗаМесяц, "ПримененныйВычетНаДетейДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаЗаМесяц, "ПримененныйВычетНаТретьегоРебенка", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаДвойнойЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаЗаМесяц, "ПримененныйВычетНаВторогоРебенка", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаДвойнойЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовЗаМесяц, "ПримененныйВычетНаДетейИнвалидов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовДвойнойЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйРасходыЗаМесяц, "ПримененныйВычетИмущественныйРасход", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйПроцентыПоКредитамЗаМесяц, "ПримененныйВычетИмущественныйПроцентыПоКредитам", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//	ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц, "ПримененныйВычетИмущественныйПроцентыПриПерекредитовании", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
							//КонецЕсли;
							ВсегоВычетовЗаМесяц = ВычетСоциальныйЗаМесяц + ВычетЛичныйЗаМесяц 
									+ ВычетНаДетейЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц 
									+ ВычетНаТретьегоРебенкаЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
									+ ВычетНаВторогоРебенкаЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
									+ ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц 
									+ ВычетНаДетейОпекуновЗаМесяц + ВычетНаДетейДвойнойОпекуновЗаМесяц + ВычетНаДетейДвойнойВторойОпекуновЗаМесяц 
									+ ВычетНаТретьегоРебенкаОпекуновЗаМесяц + ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц 
									+ ВычетНаВторогоРебенкаОпекуновЗаМесяц + ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц 
									+ ВычетНаДетейИнвалидовОпекуновЗаМесяц + ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц 
									+ ВычетРасходыНаСвоеОбучениеЗаМесяц + ВычетРасходыНаОбучениеДетейЗаМесяц + ВычетРасходыНаЛечениеЗаМесяц + ВычетСтраховыеВзносыНаМедУслугиЗаМесяц + ВычетРасходыНаДорогостоящееЛечениеЗаМесяц + ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц
									+ ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц + ВычетИмущественныйРасходыЗаМесяц;
							
							ЕстьВычетыЗаМесяц = ВычетСоциальныйЗаМесяц <> 0 Или ВычетЛичныйЗаМесяц <> 0 
									Или ВычетНаДетейЗаМесяц <> 0 Или ВычетНаДетейДвойнойЗаМесяц <> 0 Или ВычетНаДетейДвойнойВторойЗаМесяц <> 0 
									Или ВычетНаВторогоРебенкаЗаМесяц <> 0 Или ВычетНаВторогоРебенкаДвойнойЗаМесяц <> 0 Или ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц <> 0 
									Или ВычетНаТретьегоРебенкаЗаМесяц <> 0 Или ВычетНаТретьегоРебенкаДвойнойЗаМесяц <> 0 Или ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц <> 0 
									Или ВычетНаДетейИнвалидовЗаМесяц <> 0 Или ВычетНаДетейИнвалидовДвойнойЗаМесяц <> 0 Или ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц <> 0 
									Или ВычетНаДетейОпекуновЗаМесяц <> 0 Или ВычетНаДетейДвойнойОпекуновЗаМесяц <> 0 Или ВычетНаДетейДвойнойВторойОпекуновЗаМесяц <> 0 
									Или ВычетНаВторогоРебенкаОпекуновЗаМесяц <> 0 Или ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц <> 0 Или ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц <> 0 
									Или ВычетНаТретьегоРебенкаОпекуновЗаМесяц <> 0 Или ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц <> 0 Или ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц <> 0 
									Или ВычетНаДетейИнвалидовОпекуновЗаМесяц <> 0 Или ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц <> 0 Или ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц <> 0 
									Или ВычетРасходыНаСвоеОбучениеЗаМесяц <> 0 Или ВычетРасходыНаОбучениеДетейЗаМесяц <> 0 Или ВычетРасходыНаЛечениеЗаМесяц <> 0 Или ВычетСтраховыеВзносыНаМедУслугиЗаМесяц <> 0 Или ВычетРасходыНаДорогостоящееЛечениеЗаМесяц <> 0 Или ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц <> 0
									Или ВычетИмущественныйПроцентыПоКредитамЗаМесяц <> 0 Или ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц <> 0 Или ВычетИмущественныйРасходыЗаМесяц <> 0;
									
						КонецЕсли;
						ДатаУчетаВычетов = ВыборкаРасчетов.МесяцНалоговогоПериода;
						ДоходыДляРаспределенияВычетов = Новый Массив;
						КоэффициентыДляРаспределенияВычетов = Новый Массив;
						
						НалогЗаМесяц = 0;
						Если ВыборкаРасчетов.ВсеДоходыЗаМесяц <> 0 Или ЭтоПерерасчет Тогда
							Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("ИсчислятьНалогНарастающимИтогом") Цикл
								Если ВыборкаРасчетов.ИсчислятьНалогНарастающимИтогом Тогда
									
									Если КомментироватьРасчет Тогда
										КомментарийРезидента = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по доходам налоговых резидентов (и приравненных к ним граждан ЕАЭС) нарастающим итогом", КомментарийМесяца);
										ОбщегоНазначенияЗК.КомментарийРасчета("Доход за период, всего: " + ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц, КомментарийРезидента,,,, Ложь);
									КонецЕсли;
									
									НачисленныйДоходЗаДату = 0;
									ИспользованоВычетовЗаМесяц = 0;
									Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("ДатаПолученияДохода") Цикл
										
										ЗаполнитьЗначенияСвойств(СтруктураПоискаПоДатам, ВыборкаРасчетов);
										
										Доходы = РаспределениеДоходовПоПодразделениям.НайтиСтроки(СтруктураПоискаПоДатам);
										БазаРаспределения = 0;
										Для каждого СтрокаРаспределения Из Доходы Цикл
											БазаРаспределения = БазаРаспределения + СтрокаРаспределения.СуммаДохода;
										КонецЦикла; 
										Если БазаРаспределения = 0 Тогда
											// если доходов за прошлый месяц нет - будем использовать текущее распределение
											Доходы = ДоходыМесяцаРасчета;
											КоэффициентыПодразделений = КоэффициентыПодразделенийМесяцаРасчета;
										Иначе
											КоэффициентыПодразделений = ВыделитьКоэффициентыРаспределенияИзКоллекцииСтрок(Доходы, "СуммаДохода");
										КонецЕсли;
										ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоходыДляРаспределенияВычетов, Доходы);
										ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КоэффициентыДляРаспределенияВычетов, КоэффициентыПодразделений);
										ДатаУчетаВычетов = ВыборкаРасчетов.ДатаПолученияДохода;
										
										ОблагаемыйДоходНаНачалоМесяца = ОблагаемыйДоход;
										ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета = 0;
										ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета = 0;
										ЕстьДоходыПромежуточногоРасчета = Ложь;
										ЕстьДоходыОкончательногоРасчета = Ложь;
										Пока ВыборкаРасчетов.Следующий() Цикл
											НачисленныйДоходЗаДату = ВыборкаРасчетов.ОблагаемыйДоход;
											Если ВыборкаРасчетов.ЗарегистрированоДляПромежуточногоРасчета  Тогда 
												ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета = Мин(ВыборкаРасчетов.ОблагаемыйДоходНарастающимИтогом, Макс(0, ОблагаемыйДоходНаНачалоМесяца + ВыборкаРасчетов.ОблагаемыйДоход - ВсегоВычетовЗаМесяц));
												ЕстьДоходыПромежуточногоРасчета = Истина;
											Иначе
												ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета = Мин(ВыборкаРасчетов.ОблагаемыйДоходНарастающимИтогом, Макс(0, ОблагаемыйДоходНаНачалоМесяца + ВыборкаРасчетов.ОблагаемыйДоход - ВсегоВычетовЗаМесяц));
												ЕстьДоходыОкончательногоРасчета = Истина;
											КонецЕсли;
										КонецЦикла;
										
										// Расчет сумм налога
										НалогЗаДату = 0;
										Если ВыборкаРасчетов.ДатаПолученияДохода < ВыборкаРасчетов.МаксимальнаяДатаПолученияДоходаМесяца Тогда
											
											Если ЕстьДоходыПромежуточногоРасчета Тогда
												ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета);			
												НалогСДохода = Макс(Окр(ОблагаемыйДоходДляИсчисленияНалога * ВыборкаРасчетов.СтавкаДляРезидента) - НалогИсчисленный, 0);
												НалогИсчисленный = НалогИсчисленный + НалогСДохода;
												НалогЗаМесяц = НалогЗаМесяц + НалогСДохода;
												НалогЗаДату = НалогЗаДату + НалогСДохода;
												ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.ДатаПолученияДохода, НалогСДохода, "Налог", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений);
											КонецЕсли;
											
											Если ЕстьДоходыОкончательногоРасчета Тогда
												ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);			
												НалогСДохода = Окр(ОблагаемыйДоходДляИсчисленияНалога * ВыборкаРасчетов.СтавкаДляРезидента) - НалогИсчисленный;
												НалогИсчисленный = НалогИсчисленный + НалогСДохода;
												НалогЗаМесяц = НалогЗаМесяц + НалогСДохода;
												НалогЗаДату = НалогЗаДату + НалогСДохода;
												ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.ДатаПолученияДохода, НалогСДохода, "Налог", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений);
											КонецЕсли;
											
										Иначе
											
											Если ЕстьДоходыПромежуточногоРасчета И ЕстьДоходыОкончательногоРасчета Тогда
												
												ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета);			
												НалогСДохода = Макс(Окр(ОблагаемыйДоходДляИсчисленияНалога * ВыборкаРасчетов.СтавкаДляРезидента) - НалогИсчисленный, 0);
												НалогИсчисленный = НалогИсчисленный + НалогСДохода;
												НалогЗаМесяц = НалогЗаМесяц + НалогСДохода;
												НалогЗаДату = НалогЗаДату + НалогСДохода;
												ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.ДатаПолученияДохода, НалогСДохода, "Налог", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений);
												
												ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);			
												НалогСДохода = Окр(ОблагаемыйДоходДляИсчисленияНалога * ВыборкаРасчетов.СтавкаДляРезидента) - НалогИсчисленный;
												НалогИсчисленный = НалогИсчисленный + НалогСДохода;
												НалогЗаМесяц = НалогЗаМесяц + НалогСДохода;
												НалогЗаДату = НалогЗаДату + НалогСДохода;
												ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.ДатаПолученияДохода, НалогСДохода, "Налог", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений);
												
												ОблагаемыйДоход = ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
												
											Иначе
												
												ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);			
												НалогСДохода = Окр(ОблагаемыйДоходДляИсчисленияНалога * ВыборкаРасчетов.СтавкаДляРезидента) - НалогИсчисленный;
												НалогИсчисленный = НалогИсчисленный + НалогСДохода;
												НалогЗаМесяц = НалогЗаМесяц + НалогСДохода;
												НалогЗаДату = НалогЗаДату + НалогСДохода;
												ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.ДатаПолученияДохода, НалогСДохода, "Налог", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений);
												
												ОблагаемыйДоход = ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
												
											КонецЕсли;
											
										КонецЕсли;
										
										Если КомментироватьРасчет Тогда
											Если ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("На дату получения дохода " + Формат(ВыборкаРасчетов.ДатаПолученияДохода, "ДЛФ=DD") + " исчислено налога: " + НалогЗаДату, КомментарийРезидента);
											КонецЕсли;
										КонецЕсли;
										Если ЕстьДоходыПромежуточногоРасчета И ЕстьДоходыОкончательногоРасчета Тогда
											ОблагаемыйДоходЗаДату = ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
										Иначе
											ОблагаемыйДоходЗаДату = ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
										КонецЕсли;
										ВсегоВычетовЗаДату = НачисленныйДоходЗаДату - (ОблагаемыйДоходЗаДату - ОблагаемыйДоходНаНачалоМесяца);
										ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - ИспользованоВычетовЗаМесяц;
										ИспользованоВычетовЗаМесяц = ИспользованоВычетовЗаМесяц + ВсегоВычетовЗаДату;
										
										Если ВсегоВычетовЗаДату * ВычетНаДетейЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетей", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейЗаМесяц = ВычетНаДетейЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейДвойнойЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейДвойнойЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейДвойнойЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейДвойнойЗаМесяц = ВычетНаДетейДвойнойЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейДвойнойВторойЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейДвойнойВторойЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейДвойнойВторойЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейДвойнойВторойЗаМесяц = ВычетНаДетейДвойнойВторойЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаВторогоРебенкаЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаВторогоРебенкаЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаВторогоРебенкаЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаВторогоРебенка", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаВторогоРебенкаЗаМесяц = ВычетНаВторогоРебенкаЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаВторогоРебенкаДвойнойЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаВторогоРебенкаДвойнойЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаВторогоРебенкаДвойнойЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаВторогоРебенкаДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаВторогоРебенкаДвойнойЗаМесяц = ВычетНаВторогоРебенкаДвойнойЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаВторогоРебенкаДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаТретьегоРебенкаЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаТретьегоРебенкаЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаТретьегоРебенкаЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаТретьегоРебенка", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаТретьегоРебенкаЗаМесяц = ВычетНаТретьегоРебенкаЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаТретьегоРебенкаДвойнойЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаТретьегоРебенкаДвойнойЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаТретьегоРебенкаДвойнойЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаТретьегоРебенкаДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаТретьегоРебенкаДвойнойЗаМесяц = ВычетНаТретьегоРебенкаДвойнойЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаТретьегоРебенкаДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейИнвалидовЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейИнвалидовЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейИнвалидовЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейИнвалидов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейИнвалидовЗаМесяц = ВычетНаДетейИнвалидовЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейИнвалидовДвойнойЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейИнвалидовДвойнойЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейИнвалидовДвойнойЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейИнвалидовДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейИнвалидовДвойнойЗаМесяц = ВычетНаДетейИнвалидовДвойнойЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейИнвалидовДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейОпекуновЗаМесяц = ВычетНаДетейОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейДвойнойОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейДвойнойОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейДвойнойОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейДвойнойОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейДвойнойОпекуновЗаМесяц = ВычетНаДетейДвойнойОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейДвойнойВторойОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейДвойнойВторойОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейДвойнойВторойОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейДвойнойВторойОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейДвойнойВторойОпекуновЗаМесяц = ВычетНаДетейДвойнойВторойОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаВторогоРебенкаОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаВторогоРебенкаОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаВторогоРебенкаОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаВторогоРебенкаОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаВторогоРебенкаОпекуновЗаМесяц = ВычетНаВторогоРебенкаОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц = ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц = ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаТретьегоРебенкаОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаТретьегоРебенкаОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаТретьегоРебенкаОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаТретьегоРебенкаОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаТретьегоРебенкаОпекуновЗаМесяц = ВычетНаТретьегоРебенкаОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;                                                                                                                                      
											ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц = ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц = ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейИнвалидовОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейИнвалидовОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейИнвалидовОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейИнвалидовОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейИнвалидовОпекуновЗаМесяц = ВычетНаДетейИнвалидовОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц = ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц = ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетЛичныйЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетЛичныйЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетЛичныйЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетЛичный", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетЛичныйЗаМесяц = ВычетЛичныйЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетРасходыНаДорогостоящееЛечениеЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетРасходыНаДорогостоящееЛечениеЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетРасходыНаДорогостоящееЛечениеЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетРасходыНаДорогостоящееЛечение", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетРасходыНаДорогостоящееЛечениеЗаМесяц = ВычетРасходыНаДорогостоящееЛечениеЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц = ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетСтраховыеВзносыНаМедУслугиЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетСтраховыеВзносыНаМедУслугиЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетСтраховыеВзносыНаМедУслугиЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетСтраховыеВзносыНаМедУслуги", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетСтраховыеВзносыНаМедУслугиЗаМесяц = ВычетСтраховыеВзносыНаМедУслугиЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетРасходыНаЛечениеЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетРасходыНаЛечениеЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетРасходыНаЛечениеЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетРасходыНаЛечение", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетРасходыНаЛечениеЗаМесяц = ВычетРасходыНаЛечениеЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетРасходыНаОбучениеДетейЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетРасходыНаОбучениеДетейЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетРасходыНаОбучениеДетейЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетРасходыНаОбучениеДетей", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетРасходыНаОбучениеДетейЗаМесяц = ВычетРасходыНаОбучениеДетейЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетРасходыНаСвоеОбучениеЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетРасходыНаСвоеОбучениеЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетРасходыНаСвоеОбучениеЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетРасходыНаСвоеОбучение", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетРасходыНаСвоеОбучениеЗаМесяц = ВычетРасходыНаСвоеОбучениеЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетИмущественныйПроцентыПоКредитамЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетИмущественныйПроцентыПоКредитамЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетИмущественныйПроцентыПоКредитамЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетИмущественныйПроцентыПоКредитам", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетИмущественныйПроцентыПоКредитамЗаМесяц = ВычетИмущественныйПроцентыПоКредитамЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетИмущественныйПроцентыПриПерекредитовании", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
											ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц = ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц - Учтено;
										КонецЕсли;
										Если ВсегоВычетовЗаДату * ВычетИмущественныйРасходыЗаМесяц > 0 Тогда
											Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ВычетИмущественныйРасходыЗаМесяц, ВсегоВычетовЗаДату), Макс(ВычетИмущественныйРасходыЗаМесяц, ВсегоВычетовЗаДату));
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, '00010101', Учтено, "ПримененныйВычетИмущественныйРасход", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
											ВычетИмущественныйРасходыЗаМесяц = ВычетИмущественныйРасходыЗаМесяц - Учтено;
										КонецЕсли;
										
									КонецЦикла; 		
									Если КомментироватьРасчет Тогда
										ОбщегоНазначенияЗК.КомментарийРасчета("Облагаемый доход нарастающим итогом за год: " + ВыборкаРасчетов.ОблагаемыйДоходНарастающимИтогом, КомментарийРезидента);
										Если ВсегоВычетовЗаМесяц <> 0 Тогда
											
											КомментарийВычетов = ОбщегоНазначенияЗК.КомментарийРасчета("Примененные вычеты, всего: " + ВсегоВычетовЗаМесяц, КомментарийРезидента);
											
											Если ВычетСоциальныйЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный социальный вычет: " + ВычетСоциальныйЗаМесяц, КомментарийВычетов);
											КонецЕсли;
											Если ВычетЛичныйЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный личный вычет: " + ВычетЛичныйЗаМесяц, КомментарийВычетов);
											КонецЕсли;
											Если ВычетНаДетейЗаМесяц + ВычетНаДетейОпекуновЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + (ВычетНаДетейЗаМесяц + ВычетНаДетейОпекуновЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетНаДетейДвойнойОпекуновЗаМесяц + ВычетНаДетейДвойнойВторойОпекуновЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаДетейДвойнойОпекуновЗаМесяц + ВычетНаДетейДвойнойВторойОпекуновЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетНаВторогоРебенкаОпекуновЗаМесяц + ВычетНаВторогоРебенкаЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + (ВычетНаВторогоРебенкаОпекуновЗаМесяц + ВычетНаВторогоРебенкаЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетНаТретьегоРебенкаОпекуновЗаМесяц + ВычетНаТретьегоРебенкаЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + (ВычетНаТретьегоРебенкаОпекуновЗаМесяц + ВычетНаТретьегоРебенкаЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовОпекуновЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей-инвалидов: " + ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовОпекуновЗаМесяц, КомментарийВычетов);
											КонецЕсли;
											Если ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц + ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей-инвалидов (двойной): " + (ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц + ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты на погашение процентов по ипотеке: " + (ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетИмущественныйРасходыЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты по расходам на строительство: " + ВычетИмущественныйРасходыЗаМесяц, КомментарийВычетов);
											КонецЕсли;
											Если ВычетРасходыНаСвоеОбучениеЗаМесяц + ВычетРасходыНаОбучениеДетейЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты по расходам обучение: " + (ВычетРасходыНаСвоеОбучениеЗаМесяц + ВычетРасходыНаОбучениеДетейЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетРасходыНаЛечениеЗаМесяц + ВычетСтраховыеВзносыНаМедУслугиЗаМесяц + ВычетРасходыНаДорогостоящееЛечениеЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты по расходам на лечение: " + (ВычетРасходыНаЛечениеЗаМесяц + ВычетСтраховыеВзносыНаМедУслугиЗаМесяц + ВычетРасходыНаДорогостоящееЛечениеЗаМесяц), КомментарийВычетов);
											КонецЕсли;
											Если ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц <> 0 Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("Вычет в сумме взносов по договорам добровольного страхования жизни: " + ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц, КомментарийВычетов);
											КонецЕсли;
										Иначе
											ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты не применялись", КомментарийРезидента,,, Перечисления.ВидыСообщений.ВажнаяИнформация);
										КонецЕсли;                
										ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено налога нарастающим итогом за год: " + Окр(ОблагаемыйДоходДляИсчисленияНалога * ВыборкаРасчетов.СтавкаДляРезидента), КомментарийМесяца);
									КонецЕсли;
									
								Иначе	
									Если КомментироватьРасчет Тогда
										КомментарийНеРезидента = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по доходам не являющихся резидентами по каждому доходу в отдельности", КомментарийМесяца);
										
									КонецЕсли;
									
									Пока ВыборкаРасчетов.СледующийПоЗначениюПоля("ДатаПолученияДохода") Цикл
										
										ЗаполнитьЗначенияСвойств(СтруктураПоискаПоДатам, ВыборкаРасчетов);
										Доходы = РаспределениеДоходовПоПодразделениям.НайтиСтроки(СтруктураПоискаПоДатам);
										БазаРаспределения = 0;
										Для каждого СтрокаРаспределения Из Доходы Цикл
											БазаРаспределения = БазаРаспределения + СтрокаРаспределения.СуммаДохода;
										КонецЦикла; 
										Если БазаРаспределения = 0 Тогда
											// если доходов за прошлый месяц нет - будем использовать текущее распределение
											Доходы = ДоходыМесяцаРасчета;
											КоэффициентыПодразделений = КоэффициентыПодразделенийМесяцаРасчета;
										Иначе
											КоэффициентыПодразделений = ВыделитьКоэффициентыРаспределенияИзКоллекцииСтрок(Доходы, "СуммаДохода");
										КонецЕсли;
										ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоходыДляРаспределенияВычетов, Доходы);
										ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КоэффициентыДляРаспределенияВычетов, КоэффициентыПодразделений);
										ДатаУчетаВычетов = ВыборкаРасчетов.ДатаПолученияДохода;
										
										Если КомментироватьРасчет Тогда
											КомментарийДаты = ОбщегоНазначенияЗК.КомментарийРасчета("Дата получения дохода: " + Формат(ВыборкаРасчетов.ДатаПолученияДохода, "ДЛФ=DD"), КомментарийНеРезидента);
											ОбщегоНазначенияЗК.КомментарийРасчета("Статус: " + ВыборкаРасчетов.Статус, КомментарийДаты);
										КонецЕсли;
										
										Пока ВыборкаРасчетов.Следующий() Цикл
											
											НалогСДохода = ВыборкаРасчетов.НалогНерезидента;
											НалогЗаМесяц = НалогЗаМесяц + НалогСДохода;
											
											Если КомментироватьРасчет Тогда
												ОбщегоНазначенияЗК.КомментарийРасчета("По доходу с кодом " + ВыборкаРасчетов.КодДоходаСтрокой + " в сумме " + Формат(ВыборкаРасчетов.СуммаДохода, "ЧДЦ=2") + " исчислено налога: " + НалогСДохода, КомментарийДаты);
											КонецЕсли;
											
											ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.ДатаПолученияДохода, НалогСДохода, "Налог", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений);
											
										КонецЦикла;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						ИндексПервойЗаписиВычета = ВспомогательнаяТаблица.Количество();
						ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, СтандартныхВычетовРанее.НайтиСтроки(СтруктураПоиска), "ПримененныйВычетЛичный" +
													",ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой" +
													",ПримененныйВычетНаВторогоРебенка,ПримененныйВычетНаВторогоРебенкаДвойной,ПримененныйВычетНаВторогоРебенкаДвойнойВторой" +
													",ПримененныйВычетНаТретьегоРебенка,ПримененныйВычетНаТретьегоРебенкаДвойной,ПримененныйВычетНаТретьегоРебенкаДвойнойВторой" +
													",ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой" +
													",ПримененныйВычетНаДетейОпекунов,ПримененныйВычетНаДетейДвойнойОпекунов,ПримененныйВычетНаДетейДвойнойВторойОпекунов" +
													",ПримененныйВычетНаВторогоРебенкаОпекунов,ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов" +
													",ПримененныйВычетНаТретьегоРебенкаОпекунов,ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов" +
													",ПримененныйВычетНаДетейИнвалидовОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов");
						ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, ИмущественныхВычетовРанее.НайтиСтроки(СтруктураПоиска), 
													"ПримененныйВычетИмущественныйРасход,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании" +
													",ПримененныйВычетРасходыНаСвоеОбучение,ПримененныйВычетРасходыНаОбучениеДетей,ПримененныйВычетРасходыНаЛечение,ПримененныйВычетСтраховыеВзносыНаМедУслуги,ПримененныйВычетРасходыНаДорогостоящееЛечение,ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни");
						Если ИндексПервойЗаписиВычета < ВспомогательнаяТаблица.Количество() Тогда
							ИндексПоследнейЗаписиВычета	= ВспомогательнаяТаблица.Количество() - 1;
							Для ИндексЗаписи = ИндексПервойЗаписиВычета По ИндексПоследнейЗаписиВычета Цикл
								ВспомогательнаяТаблица[ИндексЗаписи].МесяцНалоговогоПериода = ДатаУчетаВычетов
							КонецЦикла;	
						КонецЕсли;
						
						Если ЕстьВычетыЗаМесяц Тогда
							Для каждого СтрокаТЗ Из ВспомогательнаяТаблица Цикл
								Если Не ЗначениеЗаполнено(СтрокаТЗ.МесяцНалоговогоПериода) Тогда
									СтрокаТЗ.МесяцНалоговогоПериода = ДатаУчетаВычетов
								КонецЕсли;
							КонецЦикла;
							// если не все вычеты ранее зарегистрированы в процессе исчисления налога, зарегистрируем остатки
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетЛичныйЗаМесяц, "ПримененныйВычетЛичный", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейЗаМесяц, "ПримененныйВычетНаДетей", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейДвойнойЗаМесяц, "ПримененныйВычетНаДетейДвойной", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейДвойнойВторойЗаМесяц, "ПримененныйВычетНаДетейДвойнойВторой", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаТретьегоРебенкаЗаМесяц, "ПримененныйВычетНаТретьегоРебенка", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаТретьегоРебенкаДвойнойЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойной", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойнойВторой", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаВторогоРебенкаЗаМесяц, "ПримененныйВычетНаВторогоРебенка", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаВторогоРебенкаДвойнойЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойной", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойнойВторой", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейИнвалидовЗаМесяц, "ПримененныйВычетНаДетейИнвалидов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейИнвалидовДвойнойЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойной", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойнойВторой", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейОпекуновЗаМесяц, "ПримененныйВычетНаДетейОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейДвойнойОпекуновЗаМесяц, "ПримененныйВычетНаДетейДвойнойОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейДвойнойВторойОпекуновЗаМесяц, "ПримененныйВычетНаДетейДвойнойВторойОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаТретьегоРебенкаОпекуновЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаТретьегоРебенкаДвойнойОпекуновЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаТретьегоРебенкаДвойнойВторойОпекуновЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаВторогоРебенкаОпекуновЗаМесяц, "ПримененныйВычетНаВторогоРебенкаОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаВторогоРебенкаДвойнойОпекуновЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаВторогоРебенкаДвойнойВторойОпекуновЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейИнвалидовОпекуновЗаМесяц, "ПримененныйВычетНаДетейИнвалидовОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейИнвалидовДвойнойОпекуновЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетНаДетейИнвалидовДвойнойВторойОпекуновЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетИмущественныйРасходыЗаМесяц, "ПримененныйВычетИмущественныйРасход", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетИмущественныйПроцентыПоКредитамЗаМесяц, "ПримененныйВычетИмущественныйПроцентыПоКредитам", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц, "ПримененныйВычетИмущественныйПроцентыПриПерекредитовании", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетРасходыНаСвоеОбучениеЗаМесяц, "ПримененныйВычетРасходыНаСвоеОбучение", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетРасходыНаОбучениеДетейЗаМесяц, "ПримененныйВычетРасходыНаОбучениеДетей", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетРасходыНаЛечениеЗаМесяц, "ПримененныйВычетРасходыНаЛечение", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетСтраховыеВзносыНаМедУслугиЗаМесяц, "ПримененныйВычетСтраховыеВзносыНаМедУслуги", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетРасходыНаДорогостоящееЛечениеЗаМесяц, "ПримененныйВычетРасходыНаДорогостоящееЛечение", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
							ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ДатаУчетаВычетов, ВычетВзносыНаДобровольноеСтрахованиеЖизниЗаМесяц, "ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни", СтруктураПоиска, ДоходыДляРаспределенияВычетов, КоэффициентыДляРаспределенияВычетов,,,2);
						КонецЕсли;
						
						Если КомментироватьРасчет Тогда
							
							ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено налога за месяц: " + НалогЗаМесяц, КомментарийМесяца);
							ОбщегоНазначенияЗК.КомментарийРасчета("Результат расчета за " + Формат(ВыборкаРасчетов.МесяцНалоговогоПериода, "ДФ=ММММ") + ": " + (НалогЗаМесяц - РанееНалогИсчисленный), КомментарийНДФЛ);
						КонецЕсли;
						// для 2015 года парные записи с + и - за месяц из-за уточнения учета в результаты расчетов не пишем
						ВспомогательнаяТаблица.Свернуть("ФизЛицо, МесяцНалоговогоПериода,Подразделение", СтрокаРесурсов);
						Если НачалоГода(ВыборкаРасчетов.МесяцНалоговогоПериода) = ДатаИзмененияИсчисленияДляИностранцев Тогда
							НачалоМесяца = НачалоМесяца(ВыборкаРасчетов.МесяцНалоговогоПериода);
							СтрокиНалогов = ВспомогательнаяТаблица.Скопировать(,"Подразделение, Налог");
							СтрокиНалогов.Свернуть("Подразделение", "Налог");
							Если СтрокиНалогов.Итог("Налог") = 0 И СтрокиНалогов.Количество() = 2 Тогда
								Если СтрокиНалогов[0].Налог = - СтрокиНалогов[1].Налог И СтрокиНалогов[0].Налог * СтрокиНалогов[0].Налог = 1 Тогда // Произошло перераспределение по подразделениям из-за округления.
									СтрокиНалогов[0].Налог = 0;
									СтрокиНалогов[1].Налог = 0;
								КонецЕсли; 
							КонецЕсли;
							Для каждого СтрокаТЗ Из СтрокиНалогов Цикл
								СтрокиПодразделения = ВспомогательнаяТаблица.НайтиСтроки(Новый Структура("Подразделение", СтрокаТЗ.Подразделение));
								Если СтрокиПодразделения.Количество() = 1 Тогда
									Продолжить;
								КонецЕсли;
								Если СтрокаТЗ.Налог = 0 Тогда
									Для каждого СтрокаПодразделения Из СтрокиПодразделения Цикл
										СтрокаПодразделения.Налог = 0
									КонецЦикла;	
								Иначе
									СуммаПерерасчета = 0;
									Для каждого СтрокаПодразделения Из СтрокиПодразделения Цикл
										Если СтрокаПодразделения.МесяцНалоговогоПериода = НачалоМесяца И СтрокаПодразделения.Налог < 0 Тогда
											СуммаПерерасчета = СтрокаПодразделения.Налог;
											СтрокаНачалаМесяца = СтрокаПодразделения;
											Прервать;
										КонецЕсли;
									КонецЦикла;	
									Если СуммаПерерасчета < 0 Тогда
										Для каждого СтрокаПодразделения Из СтрокиПодразделения Цикл
											Если СуммаПерерасчета < 0 И СтрокаПодразделения.МесяцНалоговогоПериода > НачалоМесяца И СтрокаПодразделения.Налог > 0 Тогда
												СуммаЗачета = Мин(-СуммаПерерасчета, СтрокаПодразделения.Налог);
												СтрокаНачалаМесяца.Налог = СтрокаНачалаМесяца.Налог + СуммаЗачета;
												СтрокаПодразделения.Налог = СтрокаПодразделения.Налог - СуммаЗачета;
												СуммаПерерасчета = СтрокаНачалаМесяца.Налог;
											ИначеЕсли СуммаПерерасчета = 0 Тогда 
												Прервать;
											КонецЕсли;
										КонецЦикла;	
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Для каждого СтрокаТЗ Из ВспомогательнаяТаблица Цикл
							ЕстьДанныеВСтроке = Ложь;
							Для каждого ИмяРесурса Из МассивРесурсов Цикл
								ЕстьДанныеВСтроке = СтрокаТЗ[ИмяРесурса] <> 0;
								Если ЕстьДанныеВСтроке Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЕстьДанныеВСтроке Тогда
								ЗаполнитьЗначенияСвойств(РезультатыРасчетов.Добавить(),СтрокаТЗ);
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;  // месяц налогового периода
					
				КонецЦикла; // налоговый период
				
			КонецЦикла; // физлицо
		КонецЦикла; // по алфавиту
		
	КонецЕсли;
	
	РезультатыРасчетов.Колонки.Подразделение.Имя = "ПодразделениеОрганизации";
	
	ВписатьВРезультатЗачтенныеАвансы(Регистратор, Организация, ПоследнийМесяцНалоговогоПериода, РезультатыРасчетов, Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13, "Налог", "ЗачтеноАвансовыхПлатежей");
	
	Возврат РезультатыРасчетов;
	
КонецФункции  // ПолучитьДанныеНДФЛПоРегистратору


// Предназначена для дополнения рассчитанных сумм НДФЛ информацией о суммах подлежащих зачету авансовых платежей.
// Параметры:
//      Регистратор - ДокументСсылка - регистратор, для которого выполняется обработка исчисленного НДФЛ.
//		Организация - СправочникСсылка.Организации -
//		МесяцРасчета
//		РезультатыРасчетов - ТаблицаЗначений - с колонками
//				ФизическоеЛицо: должно быть непустым
//				МесяцНалоговогоПериода: должно быть непустым
//				Подразделение: тип СправочникСсылка.ПодразделенияОрганизаций
//              колонки сумм исчисленного налога и сумм авнсов к зачету, их имена передаются дополнительно
//				может содержать другие колонки
//		СтавкаНалога - ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента
//		ИмяКолонкиНалогаИсчисленного - строка -
//		ИмяКолонкиАвансаЗачтенного - строка -
//		ИсключатьДвиженияРегистратора - булево - признак того, надо ли при расчете исключать движения.
//
Процедура ВписатьВРезультатЗачтенныеАвансы(Регистратор, Организация, МесяцРасчета, РезультатыРасчетов, СтавкаНалога, ИмяКолонкиНалогаИсчисленного, ИмяКолонкиАвансаЗачтенного, ИсключатьДвиженияРегистратора = Истина) Экспорт 
	
	Если МесяцРасчета < ДатаИзмененияНалогообложенияДивидендов() Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ?(ИсключатьДвиженияРегистратора, Регистратор, Неопределено));
	Запрос.УстановитьПараметр("Исчислено", РезультатыРасчетов);
	Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента",СтавкаНалога);
	Запрос.УстановитьПараметр("КонецМесяцаРасчета",КонецМесяца(МесяцРасчета) + 1);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Исчислено.ФизЛицо,
	|	Исчислено.МесяцНалоговогоПериода,
	|	Исчислено.НалогПоСтавке13 КАК НалогПоСтавке13
	|ПОМЕСТИТЬ ВТСуммыНалога
	|ИЗ
	|	&Исчислено КАК Исчислено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыНалога.ФизЛицо,
	|	ГОД(СуммыНалога.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	СУММА(СуммыНалога.НалогПоСтавке13) КАК НалогПоСтавке13
	|ПОМЕСТИТЬ ВТВсегоИсчислено
	|ИЗ
	|	ВТСуммыНалога КАК СуммыНалога
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыНалога.ФизЛицо,
	|	ГОД(СуммыНалога.МесяцНалоговогоПериода)
	|
	|ИМЕЮЩИЕ
	|	СУММА(СуммыНалога.НалогПоСтавке13) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Авансы.ФизЛицо,
	|	Авансы.НалоговыйПериод,
	|	СУММА(Авансы.Остаток) КАК Остаток
	|ПОМЕСТИТЬ ВТАвансы
	|ИЗ
	|	(ВЫБРАТЬ
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.Год КАК НалоговыйПериод,
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.СуммаОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ.Остатки(
	|				&КонецМесяцаРасчета,
	|				(ФизЛицо, Год) В
	|						(ВЫБРАТЬ
	|							ФизЛица.ФизЛицо,
	|							ФизЛица.НалоговыйПериод
	|						ИЗ
	|							ВТВсегоИсчислено КАК ФизЛица)
	|					И Организация = &ГоловнаяОрганизация) КАК АвансовыеПлатежиИностранцевПоНДФЛОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияРегистратора.ФизЛицо,
	|		ДвиженияРегистратора.Год,
	|		ВЫБОР
	|			КОГДА ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияРегистратора.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ КАК ДвиженияРегистратора
	|	ГДЕ
	|		ДвиженияРегистратора.Регистратор = &ИсключаемыйРегистратор) КАК Авансы
	|
	|СГРУППИРОВАТЬ ПО
	|	Авансы.ФизЛицо,
	|	Авансы.НалоговыйПериод
	|
	|ИМЕЮЩИЕ
	|	СУММА(Авансы.Остаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоложительныйНДФЛ.ФизЛицо КАК ФизЛицо,
	|	ПоложительныйНДФЛ.НалоговыйПериод КАК НалоговыйПериод,
	|	ВЫБОР
	|		КОГДА ПоложительныйНДФЛ.НалогПоСтавке13 > ЕСТЬNULL(Незачтено.Остаток, 0)
	|			ТОГДА ЕСТЬNULL(Незачтено.Остаток, 0)
	|		ИНАЧЕ ПоложительныйНДФЛ.НалогПоСтавке13
	|	КОНЕЦ КАК КЗачету
	|ИЗ
	|	ВТВсегоИсчислено КАК ПоложительныйНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАвансы КАК Незачтено
	|		ПО ПоложительныйНДФЛ.ФизЛицо = Незачтено.ФизЛицо
	|			И ПоложительныйНДФЛ.НалоговыйПериод = Незачтено.НалоговыйПериод
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПоложительныйНДФЛ.НалогПоСтавке13 > ЕСТЬNULL(Незачтено.Остаток, 0)
	|				ТОГДА ЕСТЬNULL(Незачтено.Остаток, 0)
	|			ИНАЧЕ ПоложительныйНДФЛ.НалогПоСтавке13
	|		КОНЕЦ > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НалогПоСтавке13", ИмяКолонкиНалогаИсчисленного);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		КЗачету = Результат.Выгрузить();
		КЗачету.Индексы.Добавить("ФизЛицо, НалоговыйПериод");
		РезультатыРасчетов.Сортировать("ФизЛицо, МесяцНалоговогоПериода, ПодразделениеОрганизации");
		
		СуммаКЗачету = 0;
		НалоговыйПериод = 0; ФизЛицо = Неопределено;
		ПараметрыОтбора = Новый Структура("ФизЛицо, НалоговыйПериод");
		Для каждого СтрокаТЗ Из РезультатыРасчетов Цикл
			
			Если ФизЛицо <> СтрокаТЗ.ФизЛицо Или НалоговыйПериод <> Год(СтрокаТЗ.МесяцНалоговогоПериода) Тогда
				ФизЛицо = СтрокаТЗ.ФизЛицо;
				НалоговыйПериод = Год(СтрокаТЗ.МесяцНалоговогоПериода);
				
				ПараметрыОтбора.ФизЛицо = ФизЛицо;
				ПараметрыОтбора.НалоговыйПериод = НалоговыйПериод;
				СтрокиКЗачету = КЗачету.НайтиСтроки(ПараметрыОтбора);
				Если СтрокиКЗачету.Количество() = 0 Тогда
					СуммаКЗачету = 0
				Иначе
					СуммаКЗачету = СтрокиКЗачету[0].КЗачету
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаКЗачету = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТЗ[ИмяКолонкиНалогаИсчисленного] * СуммаКЗачету > 0 Тогда
				Если СуммаКЗачету > 0 Тогда
					СтрокаТЗ[ИмяКолонкиАвансаЗачтенного] = Мин(СтрокаТЗ[ИмяКолонкиНалогаИсчисленного],СуммаКЗачету);
				Иначе
					СтрокаТЗ[ИмяКолонкиАвансаЗачтенного] = Макс(СтрокаТЗ[ИмяКолонкиНалогаИсчисленного],СуммаКЗачету);
				КонецЕсли;
				СуммаКЗачету = СуммаКЗачету - СтрокаТЗ[ИмяКолонкиАвансаЗачтенного];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// По переданным движениям расчетов налогоплательщика по НДФЛ формирует движения по расчетам налогового агента
//
// Параметры
//  РасчетыПоНДФЛ - таблица значений по структуре совпадающая с рег-ром НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  таблица значений по структуре совпадающая с рег-ром РасчетыНалоговыхАгентовСБюджетомПоНДФЛ 
//
Функция РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(РасчетыПоНДФЛ) Экспорт 
	
	Если РасчетыПоНДФЛ.Колонки.Найти("ВключатьВДекларациюПоНалогуНаПрибыль") = Неопределено Тогда
		РасчетыПоНДФЛ.Колонки.Добавить("ВключатьВДекларациюПоНалогуНаПрибыль", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.УстановитьПараметр("ПустойКПП","");
	Запрос.УстановитьПараметр("РасчетыПоНДФЛ", РасчетыПоНДФЛ);
	Запрос.УстановитьПараметр("ДатаЗакона285ФЗ", ДатаЗакона285ФЗ());
	Запрос.УстановитьПараметр("ДатаЗакона366ФЗ", ДатаИзмененияНалогообложенияДивидендов());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.НомерСтроки,
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.КодДохода,
	|	НДФЛРасчетыСБюджетом.КПП,
	|	НДФЛРасчетыСБюджетом.КодПоОКАТО,
	|	НДФЛРасчетыСБюджетом.КодПоОКТМО,
	|	НДФЛРасчетыСБюджетом.Налог КАК Сумма,
	|	НДФЛРасчетыСБюджетом.Период,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НДФЛРасчетыСБюджетом.ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетом.ОбособленноеПодразделение
	|ПОМЕСТИТЬ ВТРасчетыФЛ
	|ИЗ
	|	&РасчетыПоНДФЛ КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Удержание)
	|	И НДФЛРасчетыСБюджетом.Налог <> 0";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРегистра.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ДатыРегистра.МесяцНалоговогоПериода < &ДатаЗакона285ФЗ
	|				И СтатусФизЛицКакНалогоплательщиковНДФЛ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Беженец)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|		ИНАЧЕ ЕСТЬNULL(СтатусФизЛицКакНалогоплательщиковНДФЛ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВТСтатусНалогоплательщика
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыФЛ.ФизЛицо КАК ФизЛицо,
	|		РасчетыФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		МАКСИМУМ(СтатусФизЛицКакНалогоплательщиковНДФЛ.Период) КАК Период,
	|		РасчетыФЛ.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ВТРасчетыФЛ КАК РасчетыФЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
	|			ПО РасчетыФЛ.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
	|				И РасчетыФЛ.МесяцНалоговогоПериода >= СтатусФизЛицКакНалогоплательщиковНДФЛ.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетыФЛ.ФизЛицо,
	|		РасчетыФЛ.МесяцНалоговогоПериода,
	|		РасчетыФЛ.НомерСтроки) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
	|		ПО ДатыРегистра.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
	|			И ДатыРегистра.Период = СтатусФизЛицКакНалогоплательщиковНДФЛ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыФЛ.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	РасчетыФЛ.ФизЛицо,
	|	РасчетыФЛ.ОбособленноеПодразделение КАК Организация,
	|	РасчетыФЛ.МесяцНалоговогоПериода,
	|	РасчетыФЛ.Сумма, 
	|	РасчетыФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.КПП <> &ПустойКПП
	|			ТОГДА РасчетыФЛ.КПП
	|		КОГДА ЕСТЬNULL(РасчетыФЛ.ПодразделениеОрганизации.КПП, &ПустойКПП) <> &ПустойКПП
	|			ТОГДА РасчетыФЛ.ПодразделениеОрганизации.КПП
	|		ИНАЧЕ ЕСТЬNULL(РасчетыФЛ.ОбособленноеПодразделение.КПП, &ПустойКПП)
	|	КОНЕЦ КАК КПП,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.КодПоОКАТО <> &ПустойКодПоОКАТО
	|			ТОГДА РасчетыФЛ.КодПоОКАТО
	|		КОГДА ЕСТЬNULL(РасчетыФЛ.ПодразделениеОрганизации.КодПоОКАТО, &ПустойКодПоОКАТО) <> &ПустойКодПоОКАТО
	|			ТОГДА РасчетыФЛ.ПодразделениеОрганизации.КодПоОКАТО
	|		ИНАЧЕ ЕСТЬNULL(РасчетыФЛ.ОбособленноеПодразделение.КодПоОКАТО, &ПустойКодПоОКАТО)
	|	КОНЕЦ КАК КодПоОКАТО,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.КодПоОКТМО <> &ПустойКодПоОКАТО
	|			ТОГДА РасчетыФЛ.КодПоОКТМО
	|		КОГДА ЕСТЬNULL(РасчетыФЛ.ПодразделениеОрганизации.КодПоОКТМО, &ПустойКодПоОКАТО) <> &ПустойКодПоОКАТО
	|			ТОГДА РасчетыФЛ.ПодразделениеОрганизации.КодПоОКТМО
	|		ИНАЧЕ ЕСТЬNULL(РасчетыФЛ.ОбособленноеПодразделение.КодПоОКТМО, &ПустойКодПоОКАТО)
	|	КОНЕЦ КАК КодПоОКТМО,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ВЫБОР
	|					КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|				КОНЕЦ
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыФЛ.МесяцНалоговогоПериода >= &ДатаЗакона366ФЗ
	|							И РасчетыФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|					КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|					КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|				КОНЕЦ
	|		КОГДА РасчетыФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ КАК Ставка,
	|	РасчетыФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсчисленоПоДивидендам
	|ИЗ
	|	ВТРасчетыФЛ КАК РасчетыФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусНалогоплательщика КАК Статусы
	|		ПО РасчетыФЛ.НомерСтроки = Статусы.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РасчетыНалоговогоАгента = Запрос.Выполнить().Выгрузить();
	РасчетыНалоговогоАгента.Колонки.Добавить("ОКАТО_КПП");
	РасчетыНалоговогоАгента.Колонки.Добавить("ОКТМО_КПП");
	Для каждого СтрокаТЗ Из РасчетыНалоговогоАгента Цикл
		СтрокаТЗ.ОКАТО_КПП = СправкиПоНДФЛ.СуммаОКАТОиКПП(СтрокаТЗ.КодПоОКАТО, СтрокаТЗ.КПП);
		СтрокаТЗ.ОКТМО_КПП = СправкиПоНДФЛ.СуммаОКАТОиКПП(СтрокаТЗ.КодПоОКТМО, СтрокаТЗ.КПП);
	КонецЦикла;
	
	Возврат РасчетыНалоговогоАгента
	
КонецФункции // РасчетыНалоговогоАгентаПоУдержанномуНДФЛ()

Процедура СформироватьРасчетыПоНДФЛПриВыплате(ВыборкаПоШапкеДокумента, ТекстТаблицыВыплаты = Неопределено, НаборЗаписейНДФЛ = Неопределено, НаборЗаписейРасчетыНА = Неопределено, СтруктураПараметровОтбора = Неопределено, УчитыватьДвиженияРегистратора = Ложь) Экспорт
	
	УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, "УпрощенныйУчетНДФЛ");
	Если УпрощенныйУчетНДФЛ Тогда
		Возврат
	КонецЕсли;	
	
	Если ТекстТаблицыВыплаты = Неопределено Или НаборЗаписейНДФЛ = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНДФЛ", ВыборкаПоШапкеДокумента.ДатаНДФЛ);
	Запрос.УстановитьПараметр("ДокументСсылка" , ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.Организация);
	//Запрос.УстановитьПараметр("ДатаНачалаУчетаСуммВозврата", '20130101');
	
	// формирование временной таблицы выплат ВТВыплатыФизлицам
	Запрос.Текст = ТекстТаблицыВыплаты;
	Результат = Запрос.Выполнить().Выгрузить(); 
	
	Если Результат[0].Количество = 0 Тогда // количество произведенных выплат физлицам по документу
		Возврат 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачалаУчетаСуммВозврата", '20130101');
	Запрос.УстановитьПараметр("ДокументСсылка" , ?(УчитыватьДвиженияРегистратора, Неопределено, ВыборкаПоШапкеДокумента.Ссылка));
	Если СтруктураПараметровОтбора <> Неопределено Тогда
		ТекстОтбора = "";
		Для каждого ПараметрОтбора Из СтруктураПараметровОтбора Цикл
			Запрос.УстановитьПараметр(ПараметрОтбора.Ключ, ПараметрОтбора.Значение);
			Если ЗначениеЗаполнено(ТекстОтбора) Тогда
				ТекстОтбора = ТекстОтбора + " И ";
			КонецЕсли;
			ТекстОтбора = ТекстОтбора + ПараметрОтбора.Ключ + " = &" + ПараметрОтбора.Ключ;
		КонецЦикла;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекстОтбора) Тогда
		ТекстОтбора = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
    |	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
    |	ЗарплатаКВыплатеОрганизацииЗарплата.Сумма
    |ИЗ
    |	ВТВыплатыФизлицам КАК ЗарплатаКВыплатеОрганизацииЗарплата";
    ОстаткиВыплаты = Запрос.Выполнить().Выгрузить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|ПОМЕСТИТЬ ВТОстаткиИОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|		НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|		ВЫБОР
	|			КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА НДФЛРасчетыСБюджетом.Налог
	|			ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|		КОНЕЦ КАК СальдоПоНалогу
	|	ИЗ
	|		РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|	ГДЕ
	|		НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|		И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|		И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|		И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|		И (НДФЛРасчетыСБюджетом.Период < &ДатаНачалаУчетаСуммВозврата
	|				ИЛИ НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.расход))
	|		И &ДополнительныйОтбор
	|		И НДФЛРасчетыСБюджетом.ФизЛицо В
	|				(ВЫБРАТЬ
	|					ВТВыплатыФизлицам.ФизЛицо
	|				ИЗ
	|					ВТВыплатыФизлицам)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛКЗачету.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(НДФЛКЗачету.Период, МЕСЯЦ),
	|		ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13),
	|		ВЫБОР
	|			КОГДА НДФЛКЗачету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА НДФЛКЗачету.СуммаНДФЛКЗачету
	|			ИНАЧЕ -НДФЛКЗачету.СуммаНДФЛКЗачету
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету
	|	ГДЕ
	|		НДФЛКЗачету.Регистратор <> &ДокументСсылка
	|		И НДФЛКЗачету.Организация = &ОбособленноеПодразделение
	|		И НДФЛКЗачету.Период < &ДатаНачалаУчетаСуммВозврата
	|		И НДФЛКЗачету.Период <= &ДатаНДФЛ
	|		И &ДополнительныйОтбор
	|		И НДФЛКЗачету.ФизЛицо В
	|				(ВЫБРАТЬ
	|					ВТВыплатыФизлицам.ФизЛицо
	|				ИЗ
	|					ВТВыплатыФизлицам)) КАК НДФЛРасчетыСБюджетом
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	СтавкаНалогообложенияРезидента,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.КодПоОКАТО КАК КодПоОКАТО,
	|	НДФЛРасчетыСБюджетом.КодПоОКТМО,
	|	НДФЛРасчетыСБюджетом.КПП КАК КПП,
	|	МАКСИМУМ(НДФЛРасчетыСБюджетом.Период) КАК Период,
	|	НДФЛРасчетыСБюджетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетом.КодДохода КАК КодДохода,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА НДФЛРасчетыСБюджетом.Налог
	|			ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|		КОНЕЦ) КАК СальдоПоНалогу,
	|	НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль
	|ПОМЕСТИТЬ ВТОстаткиИОборотыПодробно
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|	И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|	И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|	И (НДФЛРасчетыСБюджетом.Период < &ДатаНачалаУчетаСуммВозврата
	|			ИЛИ НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|	И &ДополнительныйОтбор
	|	И НДФЛРасчетыСБюджетом.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ВТВыплатыФизлицам.ФизЛицо
	|			ИЗ
	|				ВТВыплатыФизлицам)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД),
	|	НДФЛРасчетыСБюджетом.КодПоОКАТО,
	|	НДФЛРасчетыСБюджетом.КПП,
	|	НДФЛРасчетыСБюджетом.ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетом.КодДохода,
	|	НДФЛРасчетыСБюджетом.КодПоОКТМО,
	|	НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	СтавкаНалогообложенияРезидента,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", ТекстОтбора);
	Выборка = Запрос.Выполнить();
	
	// Выборка долгов по НДФЛ в разрезе месяцев налогового периода до 1 января 2013 года
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|ПОМЕСТИТЬ ВТНДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего
	|ИЗ
	|	ВТОстаткиИОборотыПодробно КАК НДФЛРасчетыСБюджетом
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НДФЛРасчетыСБюджетом.НалоговыйПериод КАК НалоговыйПериод,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|ПОМЕСТИТЬ ВТНДФЛРасчетыСБюджетомПоГодам
	|ИЗ
	|	ВТОстаткиИОбороты КАК НДФЛРасчетыСБюджетом
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.НалоговыйПериод,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Сумма КАК ВыплаченнаяСумма,
	|	НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетомПоГодам.НалоговыйПериод КАК НалоговыйПериод,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоГодам.СальдоПоНалогу, 0) КАК СальдоПоНалогуЗаНалоговыйПериод,
	|	НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцам.СальдоПоНалогу, 0) КАК СальдоПоНалогуЗаМесяц,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.СальдоПоНалогу, 0) КАК ВсегоЗаМесяцПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.СальдоПоНалогу, 0) КАК СальдоПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КодПоОКАТО, """") КАК КодПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КодПоОКТМО, """") КАК КодПоОКТМО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ВключатьВДекларациюПоНалогуНаПрибыль, ЛОЖЬ) КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.Период КАК ДатаРегистрацииКодаОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КПП, """") КАК КПП,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КодДохода, ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)) КАК КодДохода
	|ИЗ
	|	ВТВыплатыФизлицам КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиИОбороты КАК НДФЛРасчетыСБюджетомПоМесяцам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиИОборотыПодробно КАК НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.СтавкаНалогообложенияРезидента
	|				И НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.МесяцНалоговогоПериода
	|				И НДФЛРасчетыСБюджетомПоМесяцам.НалоговыйПериод = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.НалоговыйПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРасчетыСБюджетомПоГодам КАК НДФЛРасчетыСБюджетомПоГодам
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоГодам.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.НалоговыйПериод = НДФЛРасчетыСБюджетомПоГодам.НалоговыйПериод
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоГодам.СтавкаНалогообложенияРезидента
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего КАК НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.СтавкаНалогообложенияРезидента
	|				И НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.МесяцНалоговогоПериода
	|				И НДФЛРасчетыСБюджетомПоМесяцам.НалоговыйПериод = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.НалоговыйПериод
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо
	|ГДЕ
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцам.СальдоПоНалогу, 0) > 0
	|	И ЕСТЬNULL(НДФЛРасчетыСБюджетомПоГодам.СальдоПоНалогу, 0) > 0
	|	И НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода < &ДатаНачалаУчетаСуммВозврата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	СтавкаНалогообложенияРезидента,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода,
	|	ДатаРегистрацииКодаОКАТО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Физлицо") Цикл 
		
		СуммаКВыплате = Выборка.ВыплаченнаяСумма;
		
		Пока Выборка.СледующийПоЗначениюПоля("СтавкаНалогообложенияРезидента") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл
				// детальные записи по физлицу
				ОсталосьРаспределить = Мин(СуммаКВыплате,Выборка.СальдоПоНалогуЗаНалоговыйПериод);
				СуммаКВыплате = Макс(0,СуммаКВыплате - Выборка.СальдоПоНалогуЗаНалоговыйПериод);
				
				Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") И ОсталосьРаспределить > 0 Цикл
					
					// расчет суммы удерживаемого налога
					ПогашаемаяСумма = Мин(Выборка.СальдоПоНалогуЗаМесяц, ОсталосьРаспределить);
					ОсталосьРаспределить = ОсталосьРаспределить - ПогашаемаяСумма;
					
					ДвиженияПоУдержанию(НаборЗаписейНДФЛ, ПогашаемаяСумма, Выборка, ВыборкаПоШапкеДокумента);
					
				КонецЦикла;
				
				Если СуммаКВыплате = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СуммаКВыплате = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаВыплаты = ОстаткиВыплаты.Найти(Выборка.Физлицо, "Физлицо"); 
		СтрокаВыплаты.Сумма = СуммаКВыплате;
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВыплатыФизлицам", ОстаткиВыплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Сумма
	|ПОМЕСТИТЬ ВТВыплатыФизлицам
	|ИЗ
	|	&ВыплатыФизлицам КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Сумма > 0";
	Результат = Запрос.Выполнить().Выгрузить(); 
	
	Если Результат[0].Количество = 0 Тогда // количество оставшихся выплат физлицам
		Возврат 
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	МИНИМУМ(НДФЛРасчетыСБюджетом.Период) КАК Период,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.Организация
	|ПОМЕСТИТЬ ВТДатыПересмотраПрошлыхПериодов
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|	И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|	И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода < &ДатаНачалаУчетаСуммВозврата
	|	И НДФЛРасчетыСБюджетом.Период МЕЖДУ &ДатаНачалаУчетаСуммВозврата И &ДатаНДФЛ
	|	И &ДополнительныйОтбор
	|	И НДФЛРасчетыСБюджетом.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ВТВыплатыФизлицам.ФизЛицо
	|			ИЗ
	|				ВТВыплатыФизлицам)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.КодПоОКАТО КАК КодПоОКАТО,
	|	НДФЛРасчетыСБюджетом.КодПоОКТМО,
	|	НДФЛРасчетыСБюджетом.КПП КАК КПП,
	|	МАКСИМУМ(НДФЛРасчетыСБюджетом.Период) КАК Период,
	|	НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НДФЛРасчетыСБюджетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетом.КодДохода КАК КодДохода,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА НДФЛРасчетыСБюджетом.Налог
	|			ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|		КОНЕЦ) КАК СальдоПоНалогу
	|ПОМЕСТИТЬ ВТОстаткиИОборотыПодробно
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПересмотраПрошлыхПериодов КАК ДатыПересмотраПрошлыхПериодов
	|		ПО НДФЛРасчетыСБюджетом.ФизЛицо = ДатыПересмотраПрошлыхПериодов.ФизЛицо
	|			И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода = ДатыПересмотраПрошлыхПериодов.МесяцНалоговогоПериода
	|			И НДФЛРасчетыСБюджетом.Организация = ДатыПересмотраПрошлыхПериодов.Организация
	|			И НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = ДатыПересмотраПрошлыхПериодов.СтавкаНалогообложенияРезидента
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.Регистратор <> &ДокументСсылка
	|	И НДФЛРасчетыСБюджетом.Организация = &ГоловнаяОрганизация
	|	И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И НДФЛРасчетыСБюджетом.Период <= &ДатаНДФЛ
	|	И ВЫБОР
	|			КОГДА НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода < &ДатаНачалаУчетаСуммВозврата
	|					И ДатыПересмотраПрошлыхПериодов.Период ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ НДФЛРасчетыСБюджетом.Период >= ЕСТЬNULL(ДатыПересмотраПрошлыхПериодов.Период, &ДатаНачалаУчетаСуммВозврата)
	|		КОНЕЦ
	|	И &ДополнительныйОтбор
	|	И НДФЛРасчетыСБюджетом.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ВТВыплатыФизлицам.ФизЛицо
	|			ИЗ
	|				ВТВыплатыФизлицам)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.КодПоОКАТО,
	|	НДФЛРасчетыСБюджетом.КПП,
	|	НДФЛРасчетыСБюджетом.ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетом.КодДохода,
	|	НДФЛРасчетыСБюджетом.КодПоОКТМО,
	|	НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА НДФЛРасчетыСБюджетом.Налог
	|			ИНАЧЕ -НДФЛРасчетыСБюджетом.Налог
	|		КОНЕЦ) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	СтавкаНалогообложенияРезидента,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", ТекстОтбора);
	Запрос.Выполнить();
	
	// Выборка долгов по НДФЛ в разрезе месяцев налогового периода, начиная с 1 января 2013 года 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НДФЛРасчетыСБюджетом.НалоговыйПериод,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|ПОМЕСТИТЬ ВТОстаткиИОбороты
	|ИЗ
	|	ВТОстаткиИОборотыПодробно КАК НДФЛРасчетыСБюджетом
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.НалоговыйПериод,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.НалоговыйПериод,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу
	|ПОМЕСТИТЬ ВТНДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего
	|ИЗ
	|	ВТОстаткиИОборотыПодробно КАК НДФЛРасчетыСБюджетом
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, ГОД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу,
	|	ГОД(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТНДФЛРасчетыСБюджетомВсего
	|ИЗ
	|	ВТОстаткиИОбороты КАК НДФЛРасчетыСБюджетом
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	ГОД(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СУММА(НДФЛРасчетыСБюджетом.СальдоПоНалогу) КАК СальдоПоНалогу,
	|	2015 КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТНДФЛРасчетыСБюджетомПереходногоПериода
	|ИЗ
	|	ВТОстаткиИОбороты КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0) И ДАТАВРЕМЯ(2015, 11, 30, 23, 59, 29)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	ГОД(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо КАК Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Сумма КАК ВыплаченнаяСумма,
	|	НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцам.СальдоПоНалогу, 0) КАК СальдоПоНалогуЗаМесяц,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.СальдоПоНалогу, 0) КАК ВсегоЗаМесяцПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.СальдоПоНалогу, 0) КАК СальдоПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КодПоОКАТО, """") КАК КодПоОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КодПоОКТМО, """") КАК КодПоОКТМО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ВключатьВДекларациюПоНалогуНаПрибыль, ЛОЖЬ) КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.Период КАК ДатаРегистрацииКодаОКАТО,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КПП, """") КАК КПП,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.КодДохода, ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)) КАК КодДохода
	|ПОМЕСТИТЬ ВТДанныеДляРегистрации
	|ИЗ
	|	ВТВыплатыФизлицам КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиИОбороты КАК НДФЛРасчетыСБюджетомПоМесяцам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРасчетыСБюджетомВсего КАК НДФЛРасчетыСБюджетомВсего
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомВсего.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомВсего.СтавкаНалогообложенияРезидента
	|				И (ГОД(НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода) = НДФЛРасчетыСБюджетомВсего.НалоговыйПериод)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРасчетыСБюджетомПереходногоПериода КАК НДФЛРасчетыСБюджетомПереходногоПериода
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПереходногоПериода.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПереходногоПериода.СтавкаНалогообложенияРезидента
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиИОборотыПодробно КАК НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.СтавкаНалогообложенияРезидента
	|				И НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.МесяцНалоговогоПериода
	|				И НДФЛРасчетыСБюджетомПоМесяцам.НалоговыйПериод = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТО.НалоговыйПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего КАК НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего
	|			ПО НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.ФизЛицо
	|				И НДФЛРасчетыСБюджетомПоМесяцам.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.СтавкаНалогообложенияРезидента
	|				И (НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода, МЕСЯЦ) = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.МесяцНалоговогоПериода)
	|				И НДФЛРасчетыСБюджетомПоМесяцам.НалоговыйПериод = НДФЛРасчетыСБюджетомПоМесяцамПоОКАТОвсего.НалоговыйПериод
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = НДФЛРасчетыСБюджетомПоМесяцам.ФизЛицо
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НДФЛРасчетыСБюджетомПоМесяцам.МесяцНалоговогоПериода МЕЖДУ ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0) И ДАТАВРЕМЯ(2015, 11, 30, 23, 59, 29)
	|				ТОГДА ЕСТЬNULL(НДФЛРасчетыСБюджетомПереходногоПериода.СальдоПоНалогу, 0) > 0
	|						И ЕСТЬNULL(НДФЛРасчетыСБюджетомВсего.СальдоПоНалогу, 0) > 0
	|			ИНАЧЕ ЕСТЬNULL(НДФЛРасчетыСБюджетомВсего.СальдоПоНалогу, 0) > 0
	|		КОНЕЦ
	|	И ЕСТЬNULL(НДФЛРасчетыСБюджетомПоМесяцам.СальдоПоНалогу, 0) <> 0";
	Запрос.Выполнить();
	
	УчитыватьВыплатыПропорционально = ВыборкаПоШапкеДокумента.ДатаНДФЛ >= ДатаИзмененияСроковУплатыНалога(); 
	Если УчитыватьВыплатыПропорционально Тогда
		
		Запрос.УстановитьПараметр("Регистратор", ВыборкаПоШапкеДокумента.Ссылка);
		Запрос.УстановитьПараметр("ДатаВзаиморасчетов", КонецДня(ВыборкаПоШапкеДокумента.ДатаНДФЛ) + 1);

		Если КонецДня(ВыборкаПоШапкеДокумента.ДатаНДФЛ) = КонецМесяца(ВыборкаПоШапкеДокумента.ДатаНДФЛ) Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДанныеРегистра.Физлицо,
			|	СУММА(ДанныеРегистра.СуммаВзаиморасчетовОстаток) КАК ОстатокВзаиморасчетов
			|ПОМЕСТИТЬ ВТОстаткиКВыплате
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо КАК Физлицо,
			|		ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
			|				&ДатаВзаиморасчетов,
			|				Организация = &ОбособленноеПодразделение
			|					И &ДополнительныйОтбор
			|					И Физлицо В
			|						(ВЫБРАТЬ
			|							ПоФизлицам.Физлицо
			|						ИЗ
			|							ВТДанныеДляРегистрации КАК ПоФизлицам)) КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|		ВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|	ГДЕ
			|		ВзаиморасчетыСРаботникамиОрганизаций.Регистратор = &Регистратор
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Организация = &ОбособленноеПодразделение
			|		И &ДополнительныйОтбор
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Физлицо В
			|				(ВЫБРАТЬ
			|					ПоФизлицам.Физлицо
			|				ИЗ
			|					ВТДанныеДляРегистрации КАК ПоФизлицам)) КАК ДанныеРегистра
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.Физлицо";
		Иначе
			Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНДФЛ));
			Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ВыборкаПоШапкеДокумента.ДатаНДФЛ));
			Запрос.УстановитьПараметр("НачалоКонецМесяца", НачалоДня(КонецМесяца(ВыборкаПоШапкеДокумента.ДатаНДФЛ)));
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДанныеРегистра.Физлицо,
			|	СУММА(ДанныеРегистра.СуммаВзаиморасчетовОстаток) КАК ОстатокВзаиморасчетов
			|ПОМЕСТИТЬ ВТОстаткиКВыплате
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо КАК Физлицо,
			|		ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
			|				&НачалоМесяца,
			|				Организация = &ОбособленноеПодразделение
			|					И &ДополнительныйОтбор
			|					И Физлицо В
			|						(ВЫБРАТЬ
			|							ПоФизлицам.Физлицо
			|						ИЗ
			|							ВТДанныеДляРегистрации КАК ПоФизлицам)) КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|		ВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов * ВЫБОР
			|			КОГДА ВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА 1
			|			ИНАЧЕ -1
			|		КОНЕЦ
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|	ГДЕ
			|		ВзаиморасчетыСРаботникамиОрганизаций.Организация = &ОбособленноеПодразделение
			|		И &ДополнительныйОтбор
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Физлицо В
			|				(ВЫБРАТЬ
			|					ПоФизлицам.Физлицо
			|				ИЗ
			|					ВТДанныеДляРегистрации КАК ПоФизлицам)
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Период >= &НачалоМесяца
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Период < &ДатаВзаиморасчетов
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|		ВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|	ГДЕ
			|		ВзаиморасчетыСРаботникамиОрганизаций.Организация = &ОбособленноеПодразделение
			|		И &ДополнительныйОтбор
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Физлицо В
			|				(ВЫБРАТЬ
			|					ПоФизлицам.Физлицо
			|				ИЗ
			|					ВТДанныеДляРегистрации КАК ПоФизлицам)
			|		И ВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Период МЕЖДУ &НачалоКонецМесяца И &КонецМесяца
			|		И НЕ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций
			|		И НЕ ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ССЫЛКА Документ.ПереносДанных
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Регистратор.Дата < &ДатаВзаиморасчетов
			|		И ЕСТЬNULL(ВзаиморасчетыСРаботникамиОрганизаций.Регистратор.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = &НачалоМесяца
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
			|		ВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
			|	ГДЕ
			|		ВзаиморасчетыСРаботникамиОрганизаций.Регистратор = &Регистратор
			|		И &ДополнительныйОтбор
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Организация = &ОбособленноеПодразделение
			|		И ВзаиморасчетыСРаботникамиОрганизаций.Физлицо В
			|				(ВЫБРАТЬ
			|					ПоФизлицам.Физлицо
			|				ИЗ
			|					ВТДанныеДляРегистрации КАК ПоФизлицам)) КАК ДанныеРегистра
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.Физлицо";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", ТекстОтбора);
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРегистрации.ФизЛицо,
		|	МАКСИМУМ(ДанныеДляРегистрации.ВыплаченнаяСумма) КАК ВыплаченнаяСумма,
		|	СУММА(ДанныеДляРегистрации.СальдоПоНалогуЗаМесяц) КАК СальдоПоНалогу
		|ПОМЕСТИТЬ ВТВсегоПоФизлицам
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДанныеДляРегистрации.ФизЛицо КАК ФизЛицо,
		|		ДанныеДляРегистрации.ВыплаченнаяСумма КАК ВыплаченнаяСумма,
		|		ДанныеДляРегистрации.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|		ДанныеДляРегистрации.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		ДанныеДляРегистрации.СальдоПоНалогуЗаМесяц КАК СальдоПоНалогуЗаМесяц
		|	ИЗ
		|		ВТДанныеДляРегистрации КАК ДанныеДляРегистрации) КАК ДанныеДляРегистрации
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляРегистрации.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляРегистрации.Физлицо,
		|	ДанныеДляРегистрации.ВыплаченнаяСумма,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВЫБОР
		|						КОГДА ПоФизлицам.ВыплаченнаяСумма <= 0
		|							ТОГДА 0
		|						КОГДА ПоФизлицам.ВыплаченнаяСумма >= ОстаткиКВыплате.ОстатокВзаиморасчетов * 0.9
		|							ТОГДА 1
		|						ИНАЧЕ ПоФизлицам.ВыплаченнаяСумма / ОстаткиКВыплате.ОстатокВзаиморасчетов
		|					КОНЕЦ, 1) = 1
		|				ТОГДА ПоФизлицам.СальдоПоНалогу
		|			ИНАЧЕ ВЫРАЗИТЬ(ПоФизлицам.СальдоПоНалогу * ЕСТЬNULL(ВЫБОР
		|							КОГДА ПоФизлицам.ВыплаченнаяСумма <= 0
		|								ТОГДА 0
		|							КОГДА ПоФизлицам.ВыплаченнаяСумма >= ОстаткиКВыплате.ОстатокВзаиморасчетов * 0.9
		|								ТОГДА 1
		|							ИНАЧЕ ПоФизлицам.ВыплаченнаяСумма / ОстаткиКВыплате.ОстатокВзаиморасчетов
		|						КОНЕЦ, 1) КАК ЧИСЛО(15, 0))
		|		КОНЕЦ, 0) КАК ПредельнаяСумма,
		|	ДанныеДляРегистрации.СтавкаНалогообложенияРезидента,
		|	ДанныеДляРегистрации.МесяцНалоговогоПериода,
		|	ДанныеДляРегистрации.СальдоПоНалогуЗаМесяц,
		|	ДанныеДляРегистрации.ВсегоЗаМесяцПоОКАТО,
		|	ДанныеДляРегистрации.СальдоПоОКАТО,
		|	ДанныеДляРегистрации.КодПоОКАТО,
		|	ДанныеДляРегистрации.КодПоОКТМО,
		|	ДанныеДляРегистрации.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	ДанныеДляРегистрации.ДатаРегистрацииКодаОКАТО,
		|	ДанныеДляРегистрации.КПП,
		|	ДанныеДляРегистрации.ПодразделениеОрганизации,
		|	ДанныеДляРегистрации.КодДохода
		|ИЗ
		|	ВТДанныеДляРегистрации КАК ДанныеДляРегистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоПоФизлицам КАК ПоФизлицам
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиКВыплате КАК ОстаткиКВыплате
		|			ПО ПоФизлицам.ФизЛицо = ОстаткиКВыплате.Физлицо
		|		ПО ДанныеДляРегистрации.Физлицо = ПоФизлицам.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДляРегистрации.Физлицо,
		|	ДанныеДляРегистрации.СтавкаНалогообложенияРезидента,
		|	ДанныеДляРегистрации.МесяцНалоговогоПериода,
		|	ДанныеДляРегистрации.ДатаРегистрацииКодаОКАТО";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРегистрации.Физлицо,
		|	ДанныеДляРегистрации.ВыплаченнаяСумма КАК ПредельнаяСумма,
		|	ДанныеДляРегистрации.СтавкаНалогообложенияРезидента,
		|	ДанныеДляРегистрации.МесяцНалоговогоПериода,
		|	ДанныеДляРегистрации.СальдоПоНалогуЗаМесяц,
		|	ДанныеДляРегистрации.ВсегоЗаМесяцПоОКАТО,
		|	ДанныеДляРегистрации.СальдоПоОКАТО,
		|	ДанныеДляРегистрации.КодПоОКАТО,
		|	ДанныеДляРегистрации.КодПоОКТМО,
		|	ДанныеДляРегистрации.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	ДанныеДляРегистрации.ДатаРегистрацииКодаОКАТО,
		|	ДанныеДляРегистрации.КПП,
		|	ДанныеДляРегистрации.ПодразделениеОрганизации,
		|	ДанныеДляРегистрации.КодДохода
		|ИЗ
		|	ВТДанныеДляРегистрации КАК ДанныеДляРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДляРегистрации.Физлицо,
		|	ДанныеДляРегистрации.СтавкаНалогообложенияРезидента,
		|	ДанныеДляРегистрации.МесяцНалоговогоПериода,
		|	ДанныеДляРегистрации.ДатаРегистрацииКодаОКАТО";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВременнаяТаблица = НаборЗаписейНДФЛ.ВыгрузитьКолонки();
	Пока Выборка.СледующийПоЗначениюПоля("Физлицо") Цикл 
		
		ПредельнаяСумма = Выборка.ПредельнаяСумма;
		
		ВременнаяТаблица.Очистить();
		
		Пока Выборка.СледующийПоЗначениюПоля("СтавкаНалогообложенияРезидента") Цикл
			
			ВозвратПрошлыхПериодов = 0;
			
			Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") И ПредельнаяСумма > 0 Цикл
				
				Если Выборка.СальдоПоНалогуЗаМесяц > 0 Тогда
					
					Если ВозвратПрошлыхПериодов > 0 Тогда
						ПогашаемаяСумма = Мин(Выборка.СальдоПоНалогуЗаМесяц, ВозвратПрошлыхПериодов);
						СальдоПоНалогуЗаМесяц = Выборка.СальдоПоНалогуЗаМесяц - ПогашаемаяСумма;
					Иначе	
						ПогашаемаяСумма = 0;
						СальдоПоНалогуЗаМесяц = Выборка.СальдоПоНалогуЗаМесяц;
					КонецЕсли;
					
					Если СальдоПоНалогуЗаМесяц > 0 Тогда
						ПогашаемаяСумма = ПогашаемаяСумма + Мин(ПредельнаяСумма, СальдоПоНалогуЗаМесяц);
						ПредельнаяСумма = Макс(0,ПредельнаяСумма - СальдоПоНалогуЗаМесяц);
					КонецЕсли;
					
					Если ПогашаемаяСумма > 0 Тогда // движения по удержанию в пределах выплаченных сумм
						ДвиженияПоУдержанию(ВременнаяТаблица, ПогашаемаяСумма, Выборка, ВыборкаПоШапкеДокумента);

					КонецЕсли;
					
				Иначе
					
					// пишем движения по возврату как есть
					ДвиженияПоУдержанию(ВременнаяТаблица, Выборка.СальдоПоНалогуЗаМесяц, Выборка, ВыборкаПоШапкеДокумента);
					
				КонецЕсли;
				
				ВозвратПрошлыхПериодов = Макс(0, ВозвратПрошлыхПериодов - Выборка.СальдоПоНалогуЗаМесяц);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если УчитыватьВыплатыПропорционально Тогда
			КоэффициентыРаспределения = ВременнаяТаблица.ВыгрузитьКолонку("Налог");
			РаспределениеРесурса = ОбщегоНазначенияЗК.РаспределитьПропорционально(Выборка.ВыплаченнаяСумма, КоэффициентыРаспределения);
			Если РаспределениеРесурса <> Неопределено Тогда
				ВременнаяТаблица.ЗагрузитьКолонку(РаспределениеРесурса, "СуммаВыплаченногоДохода");
			КонецЕсли;
			Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
				СтрокаТЗ.СуммаВыплаченногоДохода = СтрокаТЗ.СуммаВыплаченногоДохода + СтрокаТЗ.Налог
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ВременнаяТаблица, НаборЗаписейНДФЛ);
		
	КонецЦикла;
	
	Если УчитыватьВыплатыПропорционально И НаборЗаписейНДФЛ.Количество() > 0 И (ВыборкаПоШапкеДокумента.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Отпускные Или ВыборкаПоШапкеДокумента.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПоБольничнымЛистам) Тогда
		
		ВременнаяТаблица = НаборЗаписейНДФЛ.Выгрузить();
		ВременнаяТаблица.Колонки.Добавить("НомерСтрокиТаблицы", Новый ОписаниеТипов("Число"));
		НомерСтрокиТаблицы = 0;
		Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
			СтрокаТЗ.НомерСтрокиТаблицы = НомерСтрокиТаблицы;
			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Движения", ВременнаяТаблица);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Движения.НомерСтрокиТаблицы,
		|	Движения.ФизЛицо,
		|	Движения.Организация,
		|	Движения.СтавкаНалогообложенияРезидента,
		|	Движения.МесяцНалоговогоПериода,
		|	Движения.ОбособленноеПодразделение,
		|	Движения.КодПоОКАТО,
		|	Движения.КПП,
		|	Движения.ПодразделениеОрганизации,
		|	Движения.КодПоОКТМО
		|ПОМЕСТИТЬ ВТДвижения
		|ИЗ
		|	&Движения КАК Движения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Движения.НомерСтрокиТаблицы,
		|	Движения.ФизЛицо,
		|	Движения.ОбособленноеПодразделение,
		|	НДФЛРасчетыСБюджетом.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТДвижения КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
		|		ПО Движения.ФизЛицо = НДФЛРасчетыСБюджетом.ФизЛицо
		|			И Движения.Организация = НДФЛРасчетыСБюджетом.Организация
		|			И Движения.МесяцНалоговогоПериода = НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода
		|			И Движения.СтавкаНалогообложенияРезидента = НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента
		|			И Движения.ОбособленноеПодразделение = НДФЛРасчетыСБюджетом.ОбособленноеПодразделение
		|			И Движения.ПодразделениеОрганизации = НДФЛРасчетыСБюджетом.ПодразделениеОрганизации
		|			И Движения.КПП = НДФЛРасчетыСБюджетом.КПП
		|			И Движения.КодПоОКТМО = НДФЛРасчетыСБюджетом.КодПоОКТМО
		|ГДЕ
		|	НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И НДФЛРасчетыСБюджетом.Налог <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистраторы.НомерСтрокиТаблицы
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗарплатаЗаМесяцОрганизаций КАК ЗарплатаЗаМесяцОрганизаций
		|		ПО Регистраторы.Регистратор = ЗарплатаЗаМесяцОрганизаций.Регистратор
		|			И Регистраторы.ФизЛицо = ЗарплатаЗаМесяцОрганизаций.Физлицо
		|			И Регистраторы.ОбособленноеПодразделение = ЗарплатаЗаМесяцОрганизаций.Организация
		|ГДЕ
		|	ЗарплатаЗаМесяцОрганизаций.ХарактерВыплаты В (ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Отпускные), ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПоБольничнымЛистам))
		|	И Регистраторы.Регистратор.ПерерассчитываемыйДокумент.Номер ЕСТЬ NULL";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		    СтрокаТЗ = ВременнаяТаблица.Найти(Выборка.НомерСтрокиТаблицы,"НомерСтрокиТаблицы");	
		    Если СтрокаТЗ <> Неопределено Тогда
				СтрокаТЗ.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные
			КонецЕсли;
		КонецЦикла;
		НаборЗаписейНДФЛ.Загрузить(ВременнаяТаблица)
		
	КонецЕсли;
	
	Для каждого СтрокаНабора Из НаборЗаписейНДФЛ Цикл
		СтрокаНабора.Активность = Истина
	КонецЦикла;
	
	Если НаборЗаписейРасчетыНА <> Неопределено И НаборЗаписейНДФЛ.Количество() > 0 Тогда
		НаборЗаписейРасчетыНА.Загрузить(ПроведениеРасчетов.РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(НаборЗаписейНДФЛ.Выгрузить()))
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоУдержанию(НаборЗаписейНДФЛ, ПогашаемаяСумма, Выборка, ВыборкаПоШапкеДокумента)
	
	Если Выборка.ВсегоЗаМесяцПоОКАТО = Выборка.СальдоПоОКАТО Или Выборка.ВсегоЗаМесяцПоОКАТО = 0 Тогда
		
		// запись удержания
		Движение = НаборЗаписейНДФЛ.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента); // Период, ГоловнаяОрганизация, ОбособленноеПодразделение 
		ЗаполнитьЗначенияСвойств(Движение,Выборка); // ФизЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода 
		// КодПоОКАТО, КПП, ПодразделениеОрганизации, КодПоОКТМО
		
		//свойства
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		// ресурсы
		Движение.Налог       = ПогашаемаяСумма;
		// реквизиты
		Движение.ВидСтроки	 = Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
		
	Иначе
		
		ФизЛицо = Выборка.ФизЛицо;
		СтавкаНалогообложенияРезидента = Выборка.СтавкаНалогообложенияРезидента;
		МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		
		ВременнаяТаблица = Новый ТаблицаЗначений;
		ВременнаяТаблица.Колонки.Добавить("КодПоОКАТО");
		ВременнаяТаблица.Колонки.Добавить("КодПоОКТМО");
		ВременнаяТаблица.Колонки.Добавить("КПП");
		ВременнаяТаблица.Колонки.Добавить("ПодразделениеОрганизации");
		ВременнаяТаблица.Колонки.Добавить("ВключатьВДекларациюПоНалогуНаПрибыль");
		ВременнаяТаблица.Колонки.Добавить("КодДохода");
		ВременнаяТаблица.Колонки.Добавить("СальдоПоОКАТО");
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(),Выборка);
		КонецЦикла;
		
		Результат = ОбщегоНазначенияЗК.РаспределитьПропорционально(ПогашаемаяСумма,ВременнаяТаблица.ВыгрузитьКолонку("СальдоПоОКАТО"));
		
		Для каждого СтрокаОКАТО Из ВременнаяТаблица Цикл
			
			// запись удержания
			Движение = НаборЗаписейНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента); // Период, ГоловнаяОрганизация, ОбособленноеПодразделение 
			
			//свойства
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			//измерения
			Движение.Физлицо     = ФизЛицо;
			Движение.СтавкаНалогообложенияРезидента = СтавкаНалогообложенияРезидента;
			Движение.МесяцНалоговогоПериода = МесяцНалоговогоПериода;
			// ресурсы
			Движение.Налог       = Результат[ВременнаяТаблица.Индекс(СтрокаОКАТО)];
			// реквизиты
			Движение.ВидСтроки	 = Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			Движение.КодПоОКАТО	 = СтрокаОКАТО.КодПоОКАТО; 
			Движение.КодПоОКТМО	 = СтрокаОКАТО.КодПоОКТМО; 
			Движение.КПП		 = СтрокаОКАТО.КПП; 
			Движение.ПодразделениеОрганизации = СтрокаОКАТО.ПодразделениеОрганизации; 
			Движение.КодДохода	 = СтрокаОКАТО.КодДохода; 
			Движение.ВключатьВДекларациюПоНалогуНаПрибыль	 = СтрокаОКАТО.ВключатьВДекларациюПоНалогуНаПрибыль; 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура ВписатьСуммыВыплаченнойЗарплатыВУдержанныеНалоги(НДФЛРасчетыСБюджетом, ВзаиморасчетыСРаботникамиОрганизаций, ДатаВыплатыЗарплаты = Неопределено, СрокУплаты = Неопределено, ДатыВыплатыСотрудникам = Неопределено) Экспорт 
//	
//	Если ДатыВыплатыСотрудникам = Неопределено Тогда
//		ДатыВыплатыСотрудникам = Новый ТаблицаЗначений;
//		ДатыВыплатыСотрудникам.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
//		ДатыВыплатыСотрудникам.Колонки.Добавить("ДатаВыплатыДохода", Новый ОписаниеТипов("Дата"));
//	КонецЕсли;
//	ДатыВыплатыСотрудникам.Индексы.Добавить("ФизЛицо");
//	
//	СуммыЗарплаты = ВзаиморасчетыСРаботникамиОрганизаций.Выгрузить(,"Физлицо,ВидДвижения,СуммаВзаиморасчетов");
//	Для каждого СтрокаВыплаты Из СуммыЗарплаты Цикл
//		Если СтрокаВыплаты.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
//			СтрокаВыплаты.СуммаВзаиморасчетов = - СтрокаВыплаты.СуммаВзаиморасчетов
//		КонецЕсли;
//	КонецЦикла;
//	СуммыЗарплаты.Свернуть("Физлицо", "СуммаВзаиморасчетов");
//	СуммыЗарплаты.Индексы.Добавить("Физлицо");
//	
//	СуммыНалога = НДФЛРасчетыСБюджетом.Выгрузить();
//	СуммыИсчисленногоНалога = СуммыНалога.Скопировать(СуммыНалога.НайтиСтроки(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Приход)));
//	СуммыУдержанногоНалога = СуммыНалога.Скопировать(СуммыНалога.НайтиСтроки(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход)));
//	Если ЗначениеЗаполнено(СрокУплаты) Тогда
//		СуммыУдержанногоНалога.ЗаполнитьЗначения(СрокУплаты,"СрокПеречисления");
//	КонецЕсли;
//	Если ЗначениеЗаполнено(ДатаВыплатыЗарплаты) Тогда
//		Для каждого СтрокаВыплаты Из СуммыУдержанногоНалога Цикл
//			Если СтрокаВыплаты.ВидСтроки <> Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание Тогда
//				Продолжить;
//			КонецЕсли;
//			СтрокаИсключения = ДатыВыплатыСотрудникам.Найти(СтрокаВыплаты.Физлицо,"Физлицо");
//			СтрокаВыплаты.Период = ?(СтрокаИсключения = Неопределено, ДатаВыплатыЗарплаты, СтрокаИсключения.ДатаВыплатыДохода);
//		КонецЦикла;
//	КонецЕсли;
//	
//	Для каждого СтрокаВыплаты Из СуммыЗарплаты Цикл
//		СуммаВыплаты = СтрокаВыплаты.СуммаВзаиморасчетов;
//		Если СуммаВыплаты = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		СтрокиФизлца = СуммыУдержанногоНалога.НайтиСтроки(Новый Структура("Физлицо", СтрокаВыплаты.Физлицо));
//		Если СтрокиФизлца.Количество() = 0 Тогда
//			Продолжить;
//		ИначеЕсли СтрокиФизлца.Количество() = 1 Тогда
//			СтрокиФизлца[0].СуммаВыплаченногоДохода = СуммаВыплаты + СтрокиФизлца[0].Налог
//		Иначе
//			Коэффициенты = Новый Массив();
//			Для каждого СтрокаФизлца Из СтрокиФизлца Цикл
//				Коэффициенты.Добавить(СтрокаФизлца.Налог)
//			КонецЦикла; 
//			РаспределениеСуммыВыплаты = ОбщегоНазначенияЗК.РаспределитьПропорционально(СуммаВыплаты, Коэффициенты);
//			Если РаспределениеСуммыВыплаты <> Неопределено Тогда
//				Индекс = 0;
//				Для каждого СтрокаФизлца Из СтрокиФизлца Цикл
//					СтрокаФизлца.СуммаВыплаченногоДохода = РаспределениеСуммыВыплаты[Индекс] + СтрокаФизлца.Налог;
//					Индекс = Индекс + 1;
//				КонецЦикла;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла; 
//	
//	ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(СуммыИсчисленногоНалога, СуммыУдержанногоНалога);
//	
//	НДФЛРасчетыСБюджетом.Загрузить(СуммыУдержанногоНалога);
//	
//КонецПроцедуры
Процедура ВписатьДатыВыплатыСрокУплатыВУдержанныеНалоги(НДФЛРасчетыСБюджетом, ДатаВыплатыЗарплаты = Неопределено, СрокУплаты = Неопределено, ДатыВыплатыСотрудникам = Неопределено) Экспорт 

	Если Не ЗначениеЗаполнено(СрокУплаты) И Не ЗначениеЗаполнено(ДатаВыплатыЗарплаты) Тогда
		Возврат
	КонецЕсли;
	
	Если ДатыВыплатыСотрудникам = Неопределено Тогда
		ДатыВыплатыСотрудникам = Новый ТаблицаЗначений;
		ДатыВыплатыСотрудникам.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ДатыВыплатыСотрудникам.Колонки.Добавить("ДатаВыплатыДохода", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	ДатыВыплатыСотрудникам.Индексы.Добавить("ФизЛицо");
	
	Для каждого Движение Из НДФЛРасчетыСБюджетом Цикл
		
		Если Движение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СрокУплаты) Тогда
			Движение.СрокПеречисления = СрокУплаты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаВыплатыЗарплаты) Тогда
			Если Движение.ВидСтроки <> Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание Тогда
				Продолжить;
			КонецЕсли;
			СтрокаИсключения = ДатыВыплатыСотрудникам.Найти(Движение.Физлицо,"Физлицо");
			Движение.Период = ?(СтрокаИсключения = Неопределено, ДатаВыплатыЗарплаты, СтрокаИсключения.ДатаВыплатыДохода);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
// Определяем, не мешают ли проведению выплат будущие движения по удержанному НДФЛ
//
// Параметры
//  Организация
//  Сотрудники - массив значений типа СправочникСсылка.ФизическиеЛица
//  ДатаРегистрации - дата предполагаемых движений по удержанию налога
//
Процедура ПроверитьХронологиюУчетаУдержанногоНДФЛ(Организация, Сотрудники, ДатаРегистрации, Отказ, Заголовок) Экспорт
	
	УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетНДФЛ");
	Если УпрощенныйУчетНДФЛ Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРегистрации", КонецДня(ДатаРегистрации));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛРасчетыСБюджетом.Регистратор,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(НДФЛРасчетыСБюджетом.Регистратор) КАК Описание
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.ФизЛицо В(&Сотрудники)
	|	И НДФЛРасчетыСБюджетом.Организация = &Организация
	|	И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И НДФЛРасчетыСБюджетом.Период > &ДатаРегистрации
	|	И НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Удержание)
	|	И НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Выявлено нарушение хронологии в учете удержанного НДФЛ: в данных присутствуют будущие записи, произведенные документом(ами)", Отказ, Заголовок);		
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("", Отказ, Заголовок, Перечисления.ВидыСообщений.Информация, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Представление,Расшифровка", Выборка.Описание, Выборка.Регистратор)));		
	КонецЦикла;
	ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Чтобы провести текущий документ, необходимо отменить проведение указанных документов.", Отказ, Заголовок, Перечисления.ВидыСообщений.Информация);		
	
КонецПроцедуры

Функция СтрокаНДФЛСодержитСуммыВычетов(СтрокаНДФЛ) Экспорт
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить("ПримененныйВычетЛичный");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетей");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейДвойной");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейДвойнойВторой");
	МассивРесурсов.Добавить("ПримененныйВычетНаТретьегоРебенка");
	МассивРесурсов.Добавить("ПримененныйВычетНаТретьегоРебенкаДвойной");
	МассивРесурсов.Добавить("ПримененныйВычетНаТретьегоРебенкаДвойнойВторой");
	МассивРесурсов.Добавить("ПримененныйВычетНаВторогоРебенка");
	МассивРесурсов.Добавить("ПримененныйВычетНаВторогоРебенкаДвойной");
	МассивРесурсов.Добавить("ПримененныйВычетНаВторогоРебенкаДвойнойВторой");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейИнвалидов");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейИнвалидовДвойной");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейИнвалидовДвойнойВторой");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейДвойнойОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейДвойнойВторойОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаТретьегоРебенкаОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаВторогоРебенкаОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейИнвалидовОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов");
	МассивРесурсов.Добавить("ПримененныйВычетИмущественныйРасход");
	МассивРесурсов.Добавить("ПримененныйВычетИмущественныйПроцентыПоКредитам");
	МассивРесурсов.Добавить("ПримененныйВычетИмущественныйПроцентыПриПерекредитовании");
	МассивРесурсов.Добавить("ПримененныйВычетРасходыНаСвоеОбучение");
	МассивРесурсов.Добавить("ПримененныйВычетРасходыНаОбучениеДетей");
	МассивРесурсов.Добавить("ПримененныйВычетРасходыНаЛечение");
	МассивРесурсов.Добавить("ПримененныйВычетСтраховыеВзносыНаМедУслуги");
	МассивРесурсов.Добавить("ПримененныйВычетРасходыНаДорогостоящееЛечение");
	МассивРесурсов.Добавить("ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни");

	Для каждого Значение Из МассивРесурсов Цикл
		Если СтрокаНДФЛ[Значение] > 0 Тогда
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь
	
КонецФункции // СтрокаНДФЛСодержитСуммыВычетов()

// Собираем заработок для пособий за переданные календарные годы
//
// Параметры
//  МассивЛет - массив лет, за которые собирается заработок
//
// Возвращаемое значение:
//   Таблица значений
//
Функция ЗаработокДляВыплатыПособийСоцСтрахованияС2011года(МассивЛет, Физлицо, Организация, УчитыватьЗаработокПредыдущихСтрахователей, ТолькоПоОбособленномуПодразделению = Ложь, УчитыватьВесьЗаработок = Ложь, КомментироватьРасчет = Ложь, КомментироватьДни = Ложь) Экспорт 
	
	РаннийГод = 10000;
	ПозднийГод = 0;
	Для каждого Значение Из МассивЛет Цикл
		РаннийГод = Мин(Значение, РаннийГод);
		ПозднийГод = Макс(Значение, ПозднийГод);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивЛет", МассивЛет);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("ПоВсейОрганизации", Не ТолькоПоОбособленномуПодразделению);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Начало", Дата(РаннийГод, 1, 1));
	Запрос.УстановитьПараметр("Окончание", КонецДня(Дата(ПозднийГод, 12, 31)));
	Запрос.УстановитьПараметр("ДатаДоЗакона212", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() - 1);
	Запрос.УстановитьПараметр("УчитыватьВесьЗаработок", УчитыватьВесьЗаработок);
	Запрос.УстановитьПараметр("ДатаСтрахованияВсехВременноПребывающих", РасчетСтраховыхВзносов.ДатаСтрахованияВсехВременноПребывающих());
    Запрос.УстановитьПараметр("ОграничениеПоПериодуРегистрации", Макс(ОбщегоНазначенияЗК.ПолучитьРабочуюДату(),КонецДня(Дата(ПозднийГод, 12, 31))));
	
	ДеньПериода = Дата(РаннийГод, 1, 1);
	Запрос.Текст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(ДеньПериода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	Запрос.Выполнить();
	ДеньПериода = ДеньПериода + 86400;
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(ДеньПериода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыМесяц";
	Пока ДеньПериода < Дата(ПозднийГод, 12, 31) Цикл
		ДеньПериода = ДеньПериода + 86400;
		ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(ДеньПериода,"ДФ=гггг,М,д,Ч,м,с") + ")";
		Если День(ДеньПериода) = День(КонецМесяца(ДеньПериода)) Тогда
			Запрос.Текст = ПериодыТекст;
			Запрос.Выполнить();
			ПериодыТекст = 
			"ВЫБРАТЬ
			|	ДатыПериода.Период
			|ПОМЕСТИТЬ ВТПериодыПромежуточная
			|ИЗ
			|	ВТПериодыМесяц КАК ДатыПериода
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДатыПериода.Период
			|ИЗ
			|	ВТПериоды КАК ДатыПериода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПериоды
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПериодыМесяц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыПромежуточная.Период
			|ПОМЕСТИТЬ ВТПериоды
			|ИЗ
			|	ВТПериодыПромежуточная КАК ПериодыПромежуточная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПериодыПромежуточная"; 
			
			Запрос.Текст = ПериодыТекст;
			Запрос.Выполнить();
			ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(ДеньПериода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыМесяц ГДЕ Ложь";
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)";
	Запрос.Выполнить();
	
	ТекстВТСтраховыеВзносы = 
	"ВЫБРАТЬ
	|	СУММА(СтраховыеВзносыСведенияОДоходахОбороты.Результат - СтраховыеВзносыСведенияОДоходахОбороты.Скидка) КАК Заработок,
	|	НАЧАЛОПЕРИОДА(СтраховыеВзносыСведенияОДоходахОбороты.ДатаПолученияДохода, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТДоходыПоМесяцам
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах КАК СтраховыеВзносыСведенияОДоходахОбороты
	|ГДЕ
	|	ГОД(СтраховыеВзносыСведенияОДоходахОбороты.ДатаПолученияДохода) В (&МассивЛет)
	|	И СтраховыеВзносыСведенияОДоходахОбороты.ВидДохода.ВходитВБазуФСС
	|	И СтраховыеВзносыСведенияОДоходахОбороты.ФизЛицо = &ФизЛицо
	|	И СтраховыеВзносыСведенияОДоходахОбороты.Организация = &ГоловнаяОрганизация
	|	И (СтраховыеВзносыСведенияОДоходахОбороты.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|			ИЛИ &ПоВсейОрганизации)
	|	И (НЕ СтраховыеВзносыСведенияОДоходахОбороты.ФизЛицо.ПостоянноПроживалВКрыму18Марта2014Года
	|			ИЛИ СтраховыеВзносыСведенияОДоходахОбороты.ДатаПолученияДохода >= ДАТАВРЕМЯ(2014, 3, 1, 0, 0, 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СтраховыеВзносыСведенияОДоходахОбороты.ДатаПолученияДохода, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТНеоблагаемыеВзносамиОтсутствия
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|	И НЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	|	И НЕ ЕСТЬNULL(ОсновныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы.ВходитВБазуФСС, ЛОЖЬ)
	|	И ОсновныеНачисленияОрганизаций.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|	И НЕ ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета
	|ПОМЕСТИТЬ ВТПериодыОтпускаПоУходуЗаРебенком
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						СотрудникиФизлица.Ссылка
	|					ИЗ
	|						ВТСотрудники КАК СотрудникиФизлица)
	|				И ФизЛицо = &ФизЛицо
	|				И ВидРасчета В
	|					(ВЫБРАТЬ
	|						НеоблагаемыеВзносамиОтсутствия.Ссылка
	|					ИЗ
	|						ВТНеоблагаемыеВзносамиОтсутствия КАК НеоблагаемыеВзносамиОтсутствия)
	|				И Организация = &ГоловнаяОрганизация
	|				И (ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					ИЛИ &ПоВсейОрганизации)
	|				И ГОД(ПериодДействия) В (&МассивЛет)
	|				И ПериодДействия > &ДатаДоЗакона212
	|				И ПериодРегистрации <= &ОграничениеПоПериодуРегистрации) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПериода.Период,
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета
	|ПОМЕСТИТЬ ВТДатыОтпуска
	|ИЗ
	|	ВТПериоды КАК ДатыПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОтпускаПоУходуЗаРебенком КАК ПериодыОтпускаПоУходуЗаРебенком
	|		ПО (ДатыПериода.Период МЕЖДУ ПериодыОтпускаПоУходуЗаРебенком.ПериодДействияНачало И ПериодыОтпускаПоУходуЗаРебенком.ПериодДействияКонец)
	|ГДЕ
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПериода.Период,
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ПериодыОтпускаПоУходуЗаРебенком.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДатыОтпуска.Период, МЕСЯЦ) КАК ПериодДействия,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатыОтпуска.Период) КАК ДнейИсключаемыхОтсутствий
	|ПОМЕСТИТЬ ВТПериодыИсключаемыхОтсутствий
	|ИЗ
	|	ВТДатыОтпуска КАК ДатыОтпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДатыОтпуска.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоходыПоМесяцам.Период
	|ПОМЕСТИТЬ ВТРасчетныеПериоды
	|ИЗ
	|	ВТДоходыПоМесяцам КАК ДоходыПоМесяцам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыИсключаемыхОтсутствий.ПериодДействия
	|ИЗ
	|	ВТПериодыИсключаемыхОтсутствий КАК ПериодыИсключаемыхОтсутствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Месяц,
	|	ВЫБОР
	|		КОГДА Периоды.Период < &ДатаСтрахованияВсехВременноПребывающих
	|			ТОГДА НЕ ЕСТЬNULL(ГражданствоФизЛиц.НеИмеетПравоНаПенсию, ЛОЖЬ)
	|		КОГДА ГражданствоФизЛиц.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыНестрахуемые)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИмеетПравоНаСтрахование
	|ПОМЕСТИТЬ ВТДанныеОПравеНаСтрахование
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТРасчетныеПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО (ГражданствоФизЛиц.ФизЛицо = &ФизЛицо)
	|				И (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО Периоды.ПериодРегистра = ГражданствоФизЛиц.Период
	|			И (ГражданствоФизЛиц.ФизЛицо = &Физлицо)";
	
	ТекстСтраховыеВзносы = 
	"ВЫБРАТЬ
	|	ГОД(Периоды.Период) КАК РасчетныйГод,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) КАК БазовыйПериодНачало,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьВесьЗаработок
	|				ТОГДА ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)
	|			КОГДА ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование
	|				ТОГДА ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Заработок,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьВесьЗаработок
	|				ТОГДА ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)
	|			КОГДА ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование
	|				ТОГДА ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейБолезниУходаЗаДетьми,
	|	ЗНАЧЕНИЕ(Справочник.Работодатели.ТекущийРаботодатель) КАК Страхователь,
	|	Периоды.Период КАК Период,
	|	ЕСТЬNULL(ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование, ЛОЖЬ) КАК ИмеетПравоНаСтрахование
	|ИЗ
	|	ВТРасчетныеПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоМесяцам КАК ДоходыПоМесяцам
	|		ПО Периоды.Период = ДоходыПоМесяцам.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаСтрахование КАК ДанныеОПравеНаСтрахование
	|		ПО Периоды.Период = ДанныеОПравеНаСтрахование.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИсключаемыхОтсутствий КАК ПериодыИсключаемыхОтсутствий
	|		ПО Периоды.Период = ПериодыИсключаемыхОтсутствий.ПериодДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Периоды.Период, ГОД),
	|	ГОД(Периоды.Период),
	|	Периоды.Период,
	|	ЕСТЬNULL(ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование, ЛОЖЬ)
	|
	|";
	
	ТекстВТЕСН = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТДополнительныеНачисления
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	НЕ ОсновныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСС
	|	И ОсновныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы.ВходитВБазуФСС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	НЕ ДополнительныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСС
	|	И ДополнительныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы.ВходитВБазуФСС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеУчета.Заработок) КАК Заработок,
	|	НАЧАЛОПЕРИОДА(ДанныеУчета.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТДоходыПоМесяцамЕСН
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка КАК Заработок,
	|		ЕСНСведенияОДоходах.Период КАК Период
	|	ИЗ
	|		РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|	ГДЕ
	|		ЕСНСведенияОДоходах.ФизЛицо = &ФизЛицо
	|		И ЕСНСведенияОДоходах.Организация = &ГоловнаяОрганизация
	|		И ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФСС
	|		И ГОД(ЕСНСведенияОДоходах.Период) В (&МассивЛет)
	|		И ЕСНСведенияОДоходах.Период МЕЖДУ &Начало И &Окончание
	|		И (ЕСНСведенияОДоходах.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				ИЛИ &ПоВсейОрганизации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеНачисленияРаботниковОрганизаций.Результат,
	|		ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = &ФизЛицо
	|		И ГОД(ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации) В (&МассивЛет)
	|		И ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &Начало И &ДатаДоЗакона212
	|		И ОсновныеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|		И (ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				ИЛИ &ПоВсейОрганизации)
	|		И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета В
	|				(ВЫБРАТЬ
	|					ВидыРасчета.Ссылка
	|				ИЗ
	|					ВТДополнительныеНачисления КАК ВидыРасчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеНачисленияРаботниковОрганизаций.Результат - ДополнительныеНачисленияРаботниковОрганизаций.СкидкаПриНалогообложении,
	|		ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо = &ФизЛицо
	|		И ГОД(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации) В (&МассивЛет)
	|		И ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &Начало И &ДатаДоЗакона212
	|		И ДополнительныеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|		И (ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				ИЛИ &ПоВсейОрганизации)
	|		И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета В
	|				(ВЫБРАТЬ
	|					ВидыРасчета.Ссылка
	|				ИЗ
	|					ВТДополнительныеНачисления КАК ВидыРасчета)) КАК ДанныеУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеУчета.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТНеоблагаемыеВзносамиОтсутствияЕСН
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|	И НЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	|	И НЕ ЕСТЬNULL(ОсновныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСС, ЛОЖЬ)
	|	И ОсновныеНачисленияОрганизаций.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|	И НЕ ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета
	|ПОМЕСТИТЬ ВТПериодыОтпускаПоУходуЗаРебенкомЕСН
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						СотрудникиФизлица.Ссылка
	|					ИЗ
	|						ВТСотрудники КАК СотрудникиФизлица)
	|				И ФизЛицо = &ФизЛицо
	|				И ВидРасчета В
	|					(ВЫБРАТЬ
	|						НеоблагаемыеВзносамиОтсутствия.Ссылка
	|					ИЗ
	|						ВТНеоблагаемыеВзносамиОтсутствияЕСН КАК НеоблагаемыеВзносамиОтсутствия)
	|				И Организация = &ГоловнаяОрганизация
	|				И (ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					ИЛИ &ПоВсейОрганизации)
	|				И ГОД(ПериодДействия) В (&МассивЛет)
	|				И ПериодДействия <= &ДатаДоЗакона212
	|				И ПериодРегистрации <= &ОграничениеПоПериодуРегистрации) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПериода.Период,
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета
	|ПОМЕСТИТЬ ВТДатыОтпускаЕСН
	|ИЗ
	|	ВТПериоды КАК ДатыПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОтпускаПоУходуЗаРебенкомЕСН КАК ПериодыОтпускаПоУходуЗаРебенком
	|		ПО (ДатыПериода.Период МЕЖДУ ПериодыОтпускаПоУходуЗаРебенком.ПериодДействияНачало И ПериодыОтпускаПоУходуЗаРебенком.ПериодДействияКонец)
	|ГДЕ
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПериода.Период,
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ПериодыОтпускаПоУходуЗаРебенком.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДатыОтпуска.Период, МЕСЯЦ) КАК ПериодДействия,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатыОтпуска.Период) КАК ДнейИсключаемыхОтсутствий
	|ПОМЕСТИТЬ ВТПериодыИсключаемыхОтсутствийЕСН
	|ИЗ
	|	ВТДатыОтпускаЕСН КАК ДатыОтпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДатыОтпуска.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоходыПоМесяцам.Период
	|ПОМЕСТИТЬ ВТПериодыЕСН
	|ИЗ
	|	ВТДоходыПоМесяцамЕСН КАК ДоходыПоМесяцам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыИсключаемыхОтсутствий.ПериодДействия
	|ИЗ
	|	ВТПериодыИсключаемыхОтсутствийЕСН КАК ПериодыИсключаемыхОтсутствий";
	
	ТекстЕСН = 
	"ВЫБРАТЬ
	|	ГОД(Периоды.Период) КАК РасчетныйГод,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) КАК БазовыйПериодНачало,
	|	СУММА(ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)) КАК Заработок,
	|	СУММА(ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)) КАК ДнейБолезниУходаЗаДетьми,
	|	ЗНАЧЕНИЕ(Справочник.Работодатели.ТекущийРаботодатель) КАК Страхователь,
	|	Периоды.Период КАК Период,
	|	ИСТИНА КАК ИмеетПравоНаСтрахование
	|ИЗ
	|	ВТПериодыЕСН КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоМесяцамЕСН КАК ДоходыПоМесяцам
	|		ПО Периоды.Период = ДоходыПоМесяцам.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИсключаемыхОтсутствийЕСН КАК ПериодыИсключаемыхОтсутствий
	|		ПО Периоды.Период = ПериодыИсключаемыхОтсутствий.ПериодДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, ГОД),
	|	ГОД(Периоды.Период)
	|
	|";
	
	ГодЗакона213ФЗ = Год(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	Если ПозднийГод < ГодЗакона213ФЗ Тогда
		Запрос.Текст = ТекстВТЕСН + ";" + Символы.ПС + ТекстЕСН + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + "Период";
	ИначеЕсли РаннийГод >= ГодЗакона213ФЗ Тогда
		Запрос.Текст = ТекстВТСтраховыеВзносы + ";" + Символы.ПС + ТекстСтраховыеВзносы + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + "Период";
	Иначе
		Запрос.Текст = ТекстВТЕСН + ";" + Символы.ПС + ТекстВТСтраховыеВзносы + ";" + Символы.ПС + ТекстЕСН + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстСтраховыеВзносы + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + "Период";
	КонецЕсли;
	ДанныеРасчета = Запрос.Выполнить().Выгрузить();
	//Blik 260215 36220 н
	//поправим количество дней,  
	//при оплате отпуско по уходу за ребенком до 1.5 и 3 лет в расчет попадают дни за оба вида оплаты что не верно
	Для каждого СтрокаТЗ Из ДанныеРасчета Цикл
		ДнейБолезниУходаЗаДетьми = СтрокаТЗ.ДнейБолезниУходаЗаДетьми;
		Если СтрокаТЗ.ДнейБолезниУходаЗаДетьми> (КонецМесяца(СтрокаТЗ.Период)-НачалоМесяца(СтрокаТЗ.Период))/86400 Тогда
			СтрокаТЗ.ДнейБолезниУходаЗаДетьми =  Окр(((КонецМесяца(СтрокаТЗ.Период)-НачалоМесяца(СтрокаТЗ.Период))/86400),0,1);
		Иначе
			СтрокаТЗ.ДнейБолезниУходаЗаДетьми = ДнейБолезниУходаЗаДетьми;
		КонецЕсли;
	КонецЦикла;
	//Blik 260215 36220 к
	Если КомментироватьРасчет Тогда
		ОписаниеРасчетныхЛет = "";
		Для каждого Значение Из МассивЛет Цикл
			ОписаниеРасчетныхЛет = ОписаниеРасчетныхЛет + ?(ЗначениеЗаполнено(ОписаниеРасчетныхЛет),", ","") + Формат(Значение,"ЧГ=0");
		КонецЦикла;
		КомментарийРасчетаСреднего = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет среднего заработка у текущего работодателя за " + ОписаниеРасчетныхЛет + " год(ы)");
		Год = 0;
		Для каждого СтрокаТЗ Из ДанныеРасчета Цикл
			Если Год <> СтрокаТЗ.РасчетныйГод Тогда
				КомментарийКалендарногоГода = ОбщегоНазначенияЗК.КомментарийРасчета(Формат(СтрокаТЗ.РасчетныйГод, "ЧГ=0") + " год", КомментарийРасчетаСреднего);
				Год = СтрокаТЗ.РасчетныйГод
			КонецЕсли;
			Месяц = Формат(СтрокаТЗ.Период, "ДФ=MMMM");
			Если Не УчитыватьВесьЗаработок И Не СтрокаТЗ.ИмеетПравоНаСтрахование Тогда
				УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Месяц, 6, Перечисления.ПолФизическихЛиц.Мужской, Месяц);
				ОписаниеПериода = НРег(Месяц) + " " + Формат(СтрокаТЗ.Период,"ДФ=гггг") + " г.";
				ОбщегоНазначенияЗК.КомментарийРасчета("Сотрудник в " + ОписаниеПериода + " не был застрахован, страховые взносы за него не уплачивались, месяц пропущен", КомментарийКалендарногоГода);
			Иначе
				ОбщегоНазначенияЗК.КомментарийРасчета("За " + НРег(Месяц) + " учтено заработка: " + СтрокаТЗ.Заработок + ?(КомментироватьДни,", дней болезни (отпуска по уходу за детьми): " + СтрокаТЗ.ДнейБолезниУходаЗаДетьми,""), КомментарийКалендарногоГода);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДанныеРасчета.Свернуть("РасчетныйГод,БазовыйПериодНачало,Страхователь","Заработок,ДнейБолезниУходаЗаДетьми");
	
	ЕстьДанныеОДоходах = ДанныеРасчета.Количество() > 0;
	Если ЕстьДанныеОДоходах Тогда
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТЗ Из ДанныеРасчета Цикл
			Если СтрокаТЗ.Заработок <= 0 И (Не КомментироватьДни Или СтрокаТЗ.ДнейБолезниУходаЗаДетьми <= 0) Тогда
				
				СтрокиКУдалению.Добавить(СтрокаТЗ);
				Если КомментироватьРасчет Тогда
					Если СтрокаТЗ.Заработок = 0 Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("За " + Формат(СтрокаТЗ.БазовыйПериодНачало,"ДФ=гггг") + " год данные о доходах не обнаружены, год пропущен", КомментарийРасчетаСреднего);
					Иначе
						ОбщегоНазначенияЗК.КомментарийРасчета("За " + Формат(СтрокаТЗ.БазовыйПериодНачало,"ДФ=гггг") + " год в целом получен отрицательный доход, год пропущен", КомментарийРасчетаСреднего);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		    ДанныеРасчета.Удалить(СтрокаКУдалению)
		КонецЦикла;	
	КонецЕсли;
	
	Если УчитыватьЗаработокПредыдущихСтрахователей Тогда
		
		Если КомментироватьРасчет Тогда
			КомментарийПредыдущихСтрахователей = ОбщегоНазначенияЗК.КомментарийРасчета("Данные о заработке на предыдущих местах работы");
		КонецЕсли;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаработокСотрудниковУДругихСтрахователей.Страхователь КАК Страхователь,
		|	ЗаработокСотрудниковУДругихСтрахователей.РасчетныйГод КАК РасчетныйГод,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаработокСотрудниковУДругихСтрахователей.Страхователь) КАК НаименованиеСтрахователя,
		|	ЗаработокСотрудниковУДругихСтрахователей.Заработок,
		|	ЗаработокСотрудниковУДругихСтрахователей.ДнейБолезниУходаЗаДетьми
		|ИЗ
		|	РегистрСведений.ЗаработокСотрудниковУДругихСтрахователей КАК ЗаработокСотрудниковУДругихСтрахователей
		|ГДЕ
		|	ЗаработокСотрудниковУДругихСтрахователей.ФизЛицо = &ФизЛицо
		|	И ЗаработокСотрудниковУДругихСтрахователей.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ЗаработокСотрудниковУДругихСтрахователей.Страхователь <> ЗНАЧЕНИЕ(Справочник.Работодатели.ТекущийРаботодатель)
		|	И ЗаработокСотрудниковУДругихСтрахователей.РасчетныйГод В(&МассивЛет)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетныйГод,
		|	Страхователь";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Если КомментироватьРасчет Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета("Справок по предыдущим страхователям не обнаружено!", КомментарийПредыдущихСтрахователей);
			КонецЕсли;
		Иначе
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДанныеРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				НоваяСтрока.БазовыйПериодНачало = Дата(Выборка.РасчетныйГод, 1, 1);
				Если КомментироватьРасчет Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("По страхователю """ + Выборка.НаименованиеСтрахователя + """ за " + Формат(Выборка.РасчетныйГод,"ЧГ=0") + " год учтено заработка: " + Выборка.Заработок + ?(КомментироватьДни,", дней болезни (отпуска по уходу за детьми): " + Выборка.ДнейБолезниУходаЗаДетьми,""), КомментарийПредыдущихСтрахователей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьДанныеОДоходах И ДанныеРасчета.Количество() = 0 Тогда
		ОбщегоНазначенияЗК.КомментарийРасчета("За указанные расчетные годы данные о доходах не обнаружены!", КомментарийРасчетаСреднего);
	КонецЕсли;
	
	Возврат ДанныеРасчета	
	
	
КонецФункции // ЗаработокДляВыплатыПособийСоцСтрахованияС2011года()

Процедура РасчетЗаработкаПособийС2011года(ДокументОбъект, ВыборкаПоШапкеДокумента = Неопределено, НаборРасчетСреднего = Неопределено, УчитыватьВесьЗаработок = Ложь, КомментироватьРасчет = Ложь, КомментироватьДни = Ложь) Экспорт 
	
	ДокументОбъект.РасчетСреднего2011.Очистить();
	
	Если ДокументОбъект.ГодыРасчетаСреднего2011.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДанныеРасчета = ЗаработокДляВыплатыПособийСоцСтрахованияС2011года(ДокументОбъект.ГодыРасчетаСреднего2011.ВыгрузитьКолонку("Год"), ДокументОбъект.Физлицо, ДокументОбъект.Организация, ДокументОбъект.УчитыватьЗаработокПредыдущихСтрахователей, Ложь, УчитыватьВесьЗаработок, КомментироватьРасчет, КомментироватьДни);
	Если ДанныеРасчета = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДокументОбъект.РасчетСреднего2011.Загрузить(ДанныеРасчета);
	
	Если НаборРасчетСреднего = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = ДокументОбъект.СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	ДанныеРасчета.Колонки.Заработок.Имя = "Результат";
	ДанныеРасчета.Колонки.ДнейБолезниУходаЗаДетьми.Имя = "ОтработаноДней";
	ДанныеРасчета.Свернуть("БазовыйПериодНачало","Результат, ОтработаноДней");
	ДанныеРасчета.Колонки.Добавить("ВидРасчета",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.СреднийЗаработок"));
	ДанныеРасчета.ЗаполнитьЗначения(ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.СреднийЗаработок, "ПоЗаработкуПособийС2011"),"ВидРасчета");
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,ФизЛицо,Сотрудник,Организация,ДатаНачалаСобытия,СпособРасчета";
	СтрокаСвойствИзСтрокиДанных = "БазовыйПериодНачало,ВидРасчета,Результат,ОтработаноДней";
	
	Для каждого СтрокаДанных Из ДанныеРасчета Цикл
		
		Движение = НаборРасчетСреднего.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
		ЗаполнитьЗначенияСвойств(Движение,СтрокаДанных,СтрокаСвойствИзСтрокиДанных);
		Движение.Активность  = Ложь;
		Если ЗначениеЗаполнено(Движение.БазовыйПериодНачало) Тогда
			Движение.БазовыйПериодКонец = КонецГода(Движение.БазовыйПериодНачало);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборРасчетСреднего.Записать();
	
КонецПроцедуры

Функция УчитываемыхДнейДляРасчетаСреднегоЗаработкаПособий2011(ДокументОбъект) Экспорт 
	
	Если ДокументОбъект.ЭтоПособиеПоМатеринству() И ДокументОбъект.ДатаСобытия() >= ДатаОтдельногоРасчетаПособийПоМатеринству() И ДокументОбъект.ДатаНазначенияПособия() >= ДатаОтдельногоРасчетаПособийПоМатеринству() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СреднийЗаработок", ДокументОбъект.РасчетСреднего2011.Выгрузить());
		
		ГодСобытия = Год(ДокументОбъект.ДатаСобытия());
		Если (ГодСобытия = 2015 Или ГодСобытия = 2016) И ЗначениеЗаполнено(ДокументОбъект.ФизЛицо) И ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументОбъект.ФизЛицо, "ПостоянноПроживалВКрыму18Марта2014Года") Тогда
			
			Если ГодСобытия = 2015 Тогда
				УчитываемыхДнейВКалендарныхГодах = 289
			Иначе
				УчитываемыхДнейВКалендарныхГодах = 654
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетСреднегоЗаработка.ДнейБолезниУходаЗаДетьми
			|ПОМЕСТИТЬ ВТРасчетСреднегоЗаработка
			|ИЗ
			|	&СреднийЗаработок КАК РасчетСреднегоЗаработка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(РасчетСреднегоЗаработка.ДнейБолезниУходаЗаДетьми) КАК ДнейБолезниУходаЗаДетьми
			|ИЗ
			|	ВТРасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат УчитываемыхДнейВКалендарныхГодах - ?(Не ЗначениеЗаполнено(Выборка.ДнейБолезниУходаЗаДетьми), 0, Выборка.ДнейБолезниУходаЗаДетьми)
			Иначе
				Возврат УчитываемыхДнейВКалендарныхГодах
			КонецЕсли;
		Иначе
			
			Годы365дней = Новый Массив;
			ГодСобытия = Год(ДокументОбъект.ДатаСобытия());
			Для Сч = 1 По 30 Цикл
				Если ДеньГода(КонецГода(Дата(ГодСобытия - Сч, 1, 1))) = 365 Тогда
					Годы365дней.Добавить(ГодСобытия - Сч)
				КонецЕсли;
			КонецЦикла;
			
			Запрос.УстановитьПараметр("ГодыРасчетаСреднего", ДокументОбъект.ГодыРасчетаСреднего2011.Выгрузить());
			Запрос.УстановитьПараметр("Годы365дней", Годы365дней);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД) КАК РасчетныйГод,
			|	РасчетСреднегоЗаработка.ДнейБолезниУходаЗаДетьми КАК ОтработаноДней
			|ПОМЕСТИТЬ ВТРасчетСреднегоЗаработка
			|ИЗ
			|	&СреднийЗаработок КАК РасчетСреднегоЗаработка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ГодыРасчетаСреднего.Год КАК РасчетныйГод
			|ПОМЕСТИТЬ ВТГодыРасчетаСреднего
			|ИЗ
			|	&ГодыРасчетаСреднего КАК ГодыРасчетаСреднего
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетСреднегоЗаработка.РасчетныйГод,
			|	МАКСИМУМ(ДЕНЬГОДА(КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.РасчетныйГод, ГОД))) - СУММА(РасчетСреднегоЗаработка.ОтработаноДней) КАК ОтработаноДнейДляПособийПоМатеринству
			|ПОМЕСТИТЬ ВТДанныеРегистраСреднего2011
			|ИЗ
			|	ВТРасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетСреднегоЗаработка.РасчетныйГод
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГодыРасчетаСреднего.РасчетныйГод,
			|	ВЫБОР
			|		КОГДА ГодыРасчетаСреднего.РасчетныйГод В (&Годы365дней)
			|			ТОГДА 365
			|		ИНАЧЕ 366
			|	КОНЕЦ
			|ИЗ
			|	ВТГодыРасчетаСреднего КАК ГодыРасчетаСреднего
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|		ПО (ГодыРасчетаСреднего.РасчетныйГод = ГОД(РасчетСреднегоЗаработка.РасчетныйГод))
			|ГДЕ
			|	РасчетСреднегоЗаработка.РасчетныйГод ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(ДанныеРегистраСреднего.ОтработаноДнейДляПособийПоМатеринству) КАК ОтработаноДнейДляПособийПоМатеринству
			|ИЗ
			|	ВТДанныеРегистраСреднего2011 КАК ДанныеРегистраСреднего";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат ?(Не ЗначениеЗаполнено(Выборка.ОтработаноДнейДляПособийПоМатеринству), 730, Выборка.ОтработаноДнейДляПособийПоМатеринству)
			Иначе
				Возврат 730
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ГодСобытия = Год(ДокументОбъект.ДатаСобытия());
		Если (ГодСобытия = 2015 Или ГодСобытия = 2016) И ЗначениеЗаполнено(ДокументОбъект.ФизЛицо) И ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДокументОбъект.ФизЛицо, "ПостоянноПроживалВКрыму18Марта2014Года") Тогда
			Если ГодСобытия = 2015 Тогда
				Возврат 289
			Иначе
				Возврат 654
			КонецЕсли;
		Иначе
			Возврат 730
		КонецЕсли;
		
		
	КонецЕсли;	
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Пилотный проект ФСС

Функция ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ДатаАктуальности, Организация) Экспорт
	
	Возврат НачалоМесяца(ДатаАктуальности) >= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ДатаПередачиФССВыплатыПособий");	
	
КонецФункции // ПособияПоОбязательномуСтрахованиюВыплачиваетФСС()

////////////////////////////////////////////////////////////////////////////////

// Создает строку в движениях  РасчетСреднегоЗаработка, заполняет по данным выборки 
// из запроса и возвращает ее
// Используется в СформироватьИЗаписатьДанныеРасчетаСреднего
// Параметры:
// 	Выборка - спозиционированная выборка результата запроса
//  НаборЗаписей - набор записей РасчетСреднегоЗаработка
//  Регистратор - документ
//  ВидРасчета - вид расчета среднего заработка
//
// Возвращаемое значение:
// Запись регистра расчета РасчетСреднегоЗаработка
//
Функция СоздатьСтрокуРасчетаСреднего(Выборка, НаборЗаписей, Регистратор, ВидРасчета) Экспорт
	
	Строка = НаборЗаписей.Добавить();
	
	// предопределенные поля
	Строка.ПериодРегистрации				= Выборка.ПериодРегистрации;
	Строка.ВидРасчета						= ВидРасчета;
	
	// измерения
	Строка.Сотрудник						= Выборка.Сотрудник;
	Строка.Физлицо							= Выборка.Физлицо;
	Строка.Организация						= Выборка.Организация;
	
	// реквизиты
	Строка.СпособРасчета					= Выборка.СпособРасчета;
	Строка.ВидУчетаВремени					= Выборка.ВидУчетаВремени;
	Строка.ДатаНачалаСобытия				= Выборка.ДатаНачалаСобытия;
	Строка.ДатаНачалаРасчетногоПериода		= Выборка.НачалоБП;
	Строка.ДатаОкончанияРасчетногоПериода	= Выборка.КонецБП;
	Строка.ПериодРасчетаСреднегоЗаработка	= Выборка.ПериодРасчетаСреднегоЗаработка;
	Строка.КоэффициентИндексации			= 1;
	
	Возврат Строка;
	
КонецФункции // СоздатьСтрокуРасчетаСреднего()

Процедура СкорректироватьНормируемыеВычетыПоНДФЛ(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ДополнительныеНачисления.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДоходыП28Ст217 = Новый Массив;
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2761);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2720);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2730);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2740);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2760);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2770);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2790);
	Запрос.УстановитьПараметр("ДоходыП28Ст217", ДоходыП28Ст217);
	Запрос.УстановитьПараметр("ДополнительныеНачисления", ДокументОбъект.ДополнительныеНачисления.Выгрузить());
	
	// прочитаем т.ч. документа и добавим в каждую строку Физлицо сотрудника и КодДоходаНДФЛ начисления
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.НомерСтроки,
	|	Работники.Сотрудник КАК Сотрудник,
	|	Работники.ВидРасчета КАК ВидРасчета,
	|	Работники.КодВычета,
	|	Работники.СуммаВычета
	|ПОМЕСТИТЬ ВТРаботники
	|ИЗ
	|	&ДополнительныеНачисления КАК Работники
	|ГДЕ
	|	Работники.Авторасчет
	|	И (НЕ Работники.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.Сотрудник.Физлицо КАК Физлицо,
	|	Работники.КодВычета КАК КодВычета,
	|	МИНИМУМ(Работники.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	ВТРаботники КАК Работники
	|ГДЕ
	|	Работники.ВидРасчета.КодДоходаНДФЛ В(&ДоходыП28Ст217)
	|
	|СГРУППИРОВАТЬ ПО
	|	Работники.Сотрудник.Физлицо,
	|	Работники.КодВычета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	КодВычета";
	ТаблицаВычетов = Запрос.Выполнить().Выгрузить();
	ТаблицаВычетов.Индексы.Добавить("Физлицо,КодВычета");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияРаботников.Сотрудник.Физлицо КАК Физлицо,
	|	НачисленияРаботников.КодВычета КАК КодВычета,
	|	НачисленияРаботников.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТРаботники КАК НачисленияРаботников
	|ГДЕ
	|	НачисленияРаботников.ВидРасчета.КодДоходаНДФЛ В(&ДоходыП28Ст217)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	КодВычета,
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПоиска = Новый Структура("Физлицо,КодВычета");
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ДокументОбъект.ДополнительныеНачисления.Найти(Выборка.НомерСтроки,"НомерСтроки");
		Если СтрокаТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Выборка);
			СтрокаВычета = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска)[0];
			Если СтрокаВычета.СуммаВычета = 0 Тогда
				СтрокаТЧ.СуммаВычета = 0
			ИначеЕсли СтрокаТЧ.Результат >= 0 Тогда
				СтрокаТЧ.СуммаВычета = Мин(СтрокаТЧ.Результат, СтрокаВычета.СуммаВычета);
				СтрокаВычета.СуммаВычета = Макс(0, СтрокаВычета.СуммаВычета - СтрокаТЧ.СуммаВычета);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкорректироватьНормируемыеВычетыПоНДФЛ()

// Проверяет необходимость выполнения перерасчета документа
// если в таблицах перерасчета по документу ссылка на который передана 
// есть хоть одна запись - возращает Истина
// Параметры:
//  Регистратор - ссылка на документ
// Возвращаемое значение:
//  булево
//
Функция НеобходимостьПерерасчета(Регистратор) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.ФизЛицо
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет");
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции  // НеобходимостьПерерасчета

// Возвращает вид учета времени в зависимости от вида расчета и вида графика 
Функция ПолучитьВидУчетаВремени(СпособРасчета, ВидВремени, СуммированныйУчетРабочегоВремени = Ложь, НачислениеВидУчетаВремени = Неопределено, Показатели = Неопределено) Экспорт
	
	// вид учета времени определяется по способу расчета
	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		или ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное 
		или ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку  
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка  
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом  
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда 
		
		Если СуммированныйУчетРабочегоВремени Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда	
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула
		И НачислениеВидУчетаВремени <> Неопределено Тогда
		Если НачислениеВидУчетаВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
		ИначеЕсли НачислениеВидУчетаВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
		Иначе
			
			ИмеютсяЧасовыеПоказатели = Ложь;
			ИмеютсяДневныеПоказатели = Ложь;
			Если Показатели <> Неопределено Тогда
				Для Каждого СтрокаПоказатель Из Показатели Цикл
					Если СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.КалендарныхДнейВмесяце
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
						Тогда ИмеютсяДневныеПоказатели = Истина;
					ИначеЕсли СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах
						ИЛИ  СтрокаПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая
						Тогда ИмеютсяЧасовыеПоказатели = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ИмеютсяЧасовыеПоказатели И Не ИмеютсяДневныеПоказатели Тогда
				ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
			Иначе
				ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;	
			КонецЕсли;
			
		КонецЕсли;
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 01.11.2011 11:26
		// ОПИСАНИЕ: добавлено в связи с расчетом оплаты праздничных по сдельным нарядам в начислении зарплаты.
	ИначеЕсли НачислениеВидУчетаВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники Тогда	
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 	
	Иначе
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
	КонецЕсли;
	
	Возврат ВидУчетаВремени;
КонецФункции

// Помещает в запрос временную таблицу "ВТПоказатели" с описанием
// показателей расчета, используемых в произвольных формулах
// Поля временной таблицы:
//    ВидРасчета,
//    КоличествоПоказателей,
//    РасчетИмеетБазовыеНачисления,
//    Показатель(1...N)ЯвляетсяРасчетнойБазой,
//    Показатель(1...N)Наименование,
//    Показатель(1...N)
//
// Параметры
//	ИмяРегистра - строка, имя регистра расчета
//	ИмяПВР - строка, имя соответствующего регистру расчета ПВР
//	ВнешнееУсловие - строка, задает условие для отбора записей расчета
//
// Возвращаемое значение:
//   число - количество показателей, используемых при расчете всех записей
//
Функция ПолучитьДанныеОПроизвольныхФормулахВЗапросе(Запрос, ИмяРегистра, ВнешнееУсловие, ИмяПВР) Экспорт 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТВидыРасчета
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " КАК Основной
	|ГДЕ
	|	" + ВнешнееУсловие + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка,
	|	Показатели.НомерСтроки,
	|	Показатели.Показатель
	|ПОМЕСТИТЬ ВТВСЕПоказатели
	|ИЗ
	|	ПланВидовРасчета." + ИмяПВР +".Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Ссылка В
	|			(ВЫБРАТЬ
	|				Основной.ВидРасчета
	|			ИЗ
	|				ВТВидыРасчета КАК Основной)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	Запрос.Выполнить();
	
	// Получим максимальное число показателей			
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КолВоПоказателей
	|ИЗ
	|	ВТВСЕПоказатели КАК Показатели";
	
	ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
	ВыборкаКоличестваПоказателей.Следующий();
	КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;		
	Если КоличествоПоказателей = Null Тогда
		КоличествоПоказателей = 0;
	КонецЕсли;
	
	// получим временную таблицу с расчетом показателей
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета КАК ВидРасчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВСЕПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РасчетИмеетБазовыеНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВСЕПоказатели.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РасчетИмеетОтработанноеВремя,
	|	МАКСИМУМ(ВСЕПоказатели.НомерСтроки) КАК КоличествоПоказателей";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА Показатели" + СчПоказателей + ".Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой,
		|	Показатели" + СчПоказателей + ".Показатель.Наименование КАК Показатель" + СчПоказателей + "Наименование,
		|	Показатели" + СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТВидыРасчета КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВСЕПоказатели КАК ВСЕПоказатели
	|		ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВСЕПоказатели КАК Показатели"+ СчПоказателей + "
	|		ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
	|			И Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.ВидРасчета";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА Показатели" + СчПоказателей + ".Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Показатели"+ СчПоказателей + ".Показатель";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	
	Запрос.Выполнить();	
	
	Возврат КоличествоПоказателей
	
КонецФункции // ()

Процедура ДобавитьПоказатели(НеобходимыеДанные, КоличествоПоказателей, ТекстЗапроса, КомментироватьРасчет, ПоляЗапроса, Показатель1Текст, Показатель1ТекстПредопределенный) Экспорт
	
	Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
		
		Если КоличествоПоказателей = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			| ВЫБОР
			|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
			| Ложь КАК РасчетИмеетОтработанноеВремя,
			| 0 КАК КоличествоПоказателей,";
		Иначе
			ТекстЗапроса = ТекстЗапроса + ",
			| ВЫБОР
			|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
			|			ТОГДА ИСТИНА
			|		КОГДА Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула)
			|			ТОГДА Показатели.РасчетИмеетБазовыеНачисления
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
			| Показатели.РасчетИмеетОтработанноеВремя КАК РасчетИмеетОтработанноеВремя,
			| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапроса.Добавить("КоличествоПоказателей");
			ПоляЗапроса.Добавить("РасчетИмеетБазовыеНачисления");
			ПоляЗапроса.Добавить("РасчетИмеетОтработанноеВремя");
			ПоляЗапроса.Добавить("ФормулаРасчета");
		КонецЕсли;
		
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			Если СчПоказателей > 6 Тогда					
				ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
			ИначеЕсли СчПоказателей > 1 Тогда
				ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
			Иначе
				ПоказательТекст = Показатель1Текст;
			КонецЕсли;					
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|Показатели.Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой Как Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой,
			|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование,
			|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
			
			Если КомментироватьРасчет Тогда
				ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "ЯвляетсяРасчетнойБазой");
				ПоляЗапроса.Добавить("Показатель" + СчПоказателей + "Наименование");
				ПоляЗапроса.Добавить("Показатель" + СчПоказателей);
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДАТЫ ИЗМЕНЕНИЯ ЗАКОНОДАТЕЛЬСТВА

// Возвращает дату вступления в силу Федерального закона от 24.07.2009 № 212-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаЗаменыЕСНСтраховымиВзносами() Экспорт 
	
	Возврат '20100101'
	
КонецФункции 

// Возвращает дату вступления в силу Федерального закона от 08.12.2010 № 343-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаНачалаРеформыСоцСтрахования() Экспорт 
	
	Возврат '20110101'
	
КонецФункции 

// Возвращает дату вступления в силу Федерального закона от 27.07.2010 № 229-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаЗакона229ФЗ() Экспорт 
	
	Возврат '20110101'
	
КонецФункции 

// Возвращает дату начала действия положений о беженцах Федерального закона от 04.10.2014 № 285-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаЗакона285ФЗ() Экспорт 
	
	Возврат '20140101'
	
КонецФункции 

// Возвращает дату вступления в силу Федерального Закона от 24.07.2009 № 212-ФЗ в очередной редакции
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов() Экспорт 
	
	Возврат '20110101'
	
КонецФункции // ДатаЗаменыЕСНСтраховымиВзносами()

// Возвращает дату вступления в силу Федерального Закона от 3 декабря 2011 года № 379-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаСниженияТарифовСтраховыхВзносов() Экспорт 
	
	Возврат '20120101'
	
КонецФункции // ДатаЗаменыЕСНСтраховымиВзносами()

// Возвращает дату вступления в силу статьи 1 Федерального закона от 25.02.2011 № 21-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаОтдельногоРасчетаПособийПоМатеринству() Экспорт 
	
	Возврат '20130101'
	
КонецФункции 

// Возвращает дату вступления в силу Федерального закона "О страховых тарифах на обязательное социальное страхование от несчастных случаев на производстве и профессиональных заболеваний на 2013 год и на плановый период 2014 и 2015 годов"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаВводаЛьготногоТарифаПоНС_ПЗдляИП() Экспорт 
	
	Возврат '20130101'
	
КонецФункции 

// Возвращает дату вступления в силу Федерального закона "О внесении изменений в отдельные законодательные акты Российской Федерации по вопросам обязательного пенсионного страхования"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаВводаДополнительногоТарифаЗаРаботыСДосрочнойПенсией() Экспорт 
	
	Возврат '20130101'
	
КонецФункции 

// Возвращает дату вступления в силу Федерального закона от 05.04.2013 № 36-ФЗ "О внесении изменений в статью 9 Федерального закона "Об обязательном социальном страховании от несчастных случаев на производстве и профессиональных заболеваний" и статью 1 Федерального закона "Об обязательном социальном страховании на случай временной нетрудоспособности и в связи с материнством"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаВводаОрганиченийДляПособийПоНС_ПЗ() Экспорт 
	
	Возврат '20130408'
	
КонецФункции 

Функция ДатаПереходаНаКодыОКТМО() Экспорт
	
	Возврат '20140101'
	
КонецФункции

Функция ДатаИзмененияКоличестваДнейДляОтпускных() Экспорт
	
	Возврат '20140402'
	
КонецФункции

// Возвращает дату вступления в силу Федерального закона от 24.11.2014 № 366-ФЗ. "О внесении изменений в часть вторую Налогового кодекса Российской Федерации и отдельные законодательные акты Российской Федерации"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаИзмененияНалогообложенияДивидендов() Экспорт 
	
	Возврат '20150101'
	
КонецФункции

Функция ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев() Экспорт 
	
	Возврат '20150101'
	
КонецФункции

// Возвращает дату вступления в силу Федерального Закона от 02.05.2015 № 113-ФЗ.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаИзмененияСроковУплатыНалога() Экспорт 
	
	Возврат '20160101'
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ДОКУМЕНТОВ

// Заполняем переданный набор записей регистра расчета ОсновныеНачисленияОрганизации переданными данными
Функция ДобавитьСтрокуОсновныхНачислений(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,ФизЛицо,Организация,ОбособленноеПодразделение";
	СтрокаСвойствИзСтрокиДокумента = ПроведениеРасчетовПереопределяемый.СтрокаСвойствИзСтрокиДокументаДляОсновныхНачислений();
	
	
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		СтрокаСвойствИзСтрокиДокумента = СтрокаСвойствИзСтрокиДокумента + ",НормаДней,НормаЧасов,НормаДнейПоПятидневке,НормаЧасовПоПятидневке";
	КонецЕсли;
	
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		СтрокаСвойствИзСтрокиДокумента = СтрокаСвойствИзСтрокиДокумента + ",ОтработаноДней,ОтработаноЧасов,ОтработаноДнейПоПятидневке,ОтработаноЧасовПоПятидневке";
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуОсновныхНачислений

// Заполняем переданный набор записей регистра расчета ДополнительныеНачисленияОрганизации переданными данными
Функция ДобавитьСтрокуДополнительныхНачислений(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ДатаНачалаСобытия,ФизЛицо,Организация,ОбособленноеПодразделение";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сторно,Результат,ОплаченоДнейЧасов,СторнируемыйДокумент,ЧислоМесяцев," 
									+ "Сотрудник,ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ГрафикРаботы,ВидУчетаВремени,"
									+ "Авторасчет,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Движение.ПериодРегистрации   = ВыборкаПоШапкеДокумента.ПериодРегистрацииДополнительныхНачислений;
	//+ Dansur  02.10.2013 0:53:51 #21926
	Если типзнч(ВыборкаПоШапкеДокумента.Ссылка)= Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") и ВыборкаПоШапкеДокумента.ДатаНачалаСобытия< ВыборкаПоШапкеДокумента.ПериодРегистрацииДополнительныхНачислений  тогда
		Если Движение.ВидРасчета=ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни или Движение.ВидРасчета=ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка тогда
			//Движение.ПериодРегистрации   =  ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|        ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Регистратор КАК Регистратор,
			|        ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ДокументОснование КАК ДокументОснование
			|ИЗ
			|        РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
			|                      НАЧАЛОПЕРИОДА(&ДатаУвольнения, ДЕНЬ),
			|                      ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛПроцентом), ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ), ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела), ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ), ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой), ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела))
			|                              И ФизЛицо = &Физлицо
			|                              И Активность) КАК ПлановыеУдержанияРаботниковОрганизацийСрезПоследних
			|ГДЕ
			|        ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.прекратить)
			|
			|СГРУППИРОВАТЬ ПО
			|        ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ДокументОснование,
			|        ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Регистратор";
			Запрос.УстановитьПараметр("ДатаУвольнения", ВыборкаПоШапкеДокумента.ДатаУвольнения);
			Запрос.УстановитьПараметр("Физлицо", ВыборкаПоШапкеДокумента.Сотрудник.Физлицо);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() тогда 
				Если НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия) < НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрацииДополнительныхНачислений) тогда
					Сообщить("Обнаружено действующее удержание по Исполнительному листу, Невозможно включить компенсацию отпуска при увольнении в базу обнаруженного исполнительного листа, т.к. они в разных периодах");
				иначе
					Движение.ПериодРегистрации   =  ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
					Сообщить("Обнаружено действующее удержание по Исполнительному листу, Компенсация отпуска при уволнении будет зарегистрирована датой увольнения");
				КонецЕсли;
				
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	//- Dansur  02.10.2013 1:03:21
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуДополнительныхНачислений()

// Заполняем переданный набор записей регистра расчета УдержанияРаботниковОрганизаций переданными данными
Функция ДобавитьСтрокуУдержаний(НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	
	СтрокаСвойствИзДокумента = "ФизЛицо,Организация,ОбособленноеПодразделение,ПериодРегистрации";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сторно,Результат," 
									+ "Сотрудник,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ГрафикРаботы,ВидУчетаВремени,"
									+ "Авторасчет,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Возврат Движение
	
КонецФункции // ДобавитьСтрокуДополнительныхНачислений()

// Процедура формирует сторно-записи по перерассчитываемому документу
Процедура СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент = Неопределено, ВыборкаПоШапкеДокумента = Неопределено, НаборОсновныеНачисления = Неопределено, НаборДополнительныеНачисления = Неопределено, НаборУдержания = Неопределено, ОсобыйВидРасчета = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда // по переданному документу заведомо нет движений
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("ПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДокументИсправление", ВыборкаПоШапкеДокумента.Ссылка);
	
	Если НаборОсновныеНачисления <> Неопределено Тогда // выполним запрос по основным начислениям
		
		Запрос.УстановитьПараметр("ОсобыйВидРасчета", ОсобыйВидРасчета);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета = &ОсобыйВидРасчета
		|			ТОГДА 0
		|		ИНАЧЕ -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета = &ОсобыйВидРасчета
		|			ТОГДА 0
		|		ИНАЧЕ -ОсновныеНачисления.ДополнительныйРезультат - ЕСТЬNULL(СУММА(СторноНачисления.ДополнительныйРезультат), 0)
		|	КОНЕЦ КАК ДополнительныйРезультат,
		|	-ОсновныеНачисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
		|	-ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
		|	-ОсновныеНачисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
		|	-ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
		|	-ОсновныеНачисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
		|	-ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
		|	-ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
		|	-ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
		|	-ОсновныеНачисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ГрафикРаботыНорма,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ОсновныеНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	НЕОПРЕДЕЛЕНО КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
		|	ОсновныеНачисления.БазовыйПериодНачало,
		|	ОсновныеНачисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
		|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
		|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
		|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрации)
		|			И (СторноНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.Регистратор)
		|			И (СторноНачисления.Регистратор <> &ДокументИсправление)
		|ГДЕ
		|	(НЕ ОсновныеНачисления.Сторно)
		|	И ОсновныеНачисления.Регистратор = &ПерерассчитываемыйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ГрафикРаботыНорма,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор,
		|	ОсновныеНачисления.Результат,
		|	ОсновныеНачисления.ДополнительныйРезультат,
		|	ОсновныеНачисления.НормаДней,
		|	ОсновныеНачисления.НормаЧасов,
		|	ОсновныеНачисления.НормаДнейПоПятидневке,
		|	ОсновныеНачисления.ОтработаноДней,
		|	ОсновныеНачисления.ОтработаноЧасов,
		|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
		|	ОсновныеНачисления.ОплаченоДнейЧасов,
		|	ОсновныеНачисления.ОтработаноЧасовПоПятидневке,
		|	ОсновныеНачисления.НормаЧасовПоПятидневке,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени,
		|	ОсновныеНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ОсновныеНачисления.БазовыйПериодНачало,
		|	ОсновныеНачисления.БазовыйПериодКонец";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Движение = ДобавитьСтрокуОсновныхНачислений(НаборОсновныеНачисления, ВыборкаПоШапкеДокумента, Выборка);
			Движение.ДополнительныйРезультат = Выборка.ДополнительныйРезультат;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборДополнительныеНачисления <> Неопределено Тогда // выполним запрос по дополнительным начислениям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.Сотрудник,
		|	ДополнительныеНачисления.ВидРасчета,
		|	ДополнительныеНачисления.Показатель1,
		|	ДополнительныеНачисления.Показатель2,
		|	ДополнительныеНачисления.Показатель3,
		|	ДополнительныеНачисления.Показатель4,
		|	ДополнительныеНачисления.Показатель5,
		|	ДополнительныеНачисления.Показатель6,
		|	-ДополнительныеНачисления.Результат КАК Результат,
		|	-ДополнительныеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	ДополнительныеНачисления.ПодразделениеОрганизации,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ДополнительныеНачисления.ДатаНачалаСобытия,
		|	ДополнительныеНачисления.ГрафикРаботы,
		|	ДополнительныеНачисления.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	ДополнительныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ДополнительныеНачисления.ЧислоМесяцев,
		|	ДополнительныеНачисления.БазовыйПериодНачало,
		|	ДополнительныеНачисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|ГДЕ
		|	(НЕ ДополнительныеНачисления.Сторно)
		|	И ДополнительныеНачисления.Регистратор = &ПерерассчитываемыйДокумент";
		
		// выполним запрос по дополнительным начислениям
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьСтрокуДополнительныхНачислений(НаборДополнительныеНачисления, ВыборкаПоШапкеДокумента, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборУдержания <> Неопределено Тогда // выполним запрос по удержаниям
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдержанияРаботниковОрганизаций.Сотрудник,
		|	УдержанияРаботниковОрганизаций.ВидРасчета,
		|	УдержанияРаботниковОрганизаций.Показатель1,
		|	УдержанияРаботниковОрганизаций.Показатель2,
		|	УдержанияРаботниковОрганизаций.Показатель3,
		|	УдержанияРаботниковОрганизаций.Показатель4,
		|	УдержанияРаботниковОрганизаций.Показатель5,
		|	УдержанияРаботниковОрганизаций.Показатель6,
		|	-УдержанияРаботниковОрганизаций.Результат КАК Результат,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	УдержанияРаботниковОрганизаций.ДатаНачалаСобытия,
		|	УдержанияРаботниковОрганизаций.ГрафикРаботы,
		|	УдержанияРаботниковОрганизаций.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	УдержанияРаботниковОрганизаций.Регистратор КАК СторнируемыйДокумент,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодНачало,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
		|ГДЕ
		|	(НЕ УдержанияРаботниковОрганизаций.Сторно)
		|	И УдержанияРаботниковОрганизаций.Регистратор = &ПерерассчитываемыйДокумент";
		
		// выполним запрос по дополнительным начислениям
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьСтрокуУдержаний(НаборУдержания, ВыборкаПоШапкеДокумента, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьСторноЗаписиПоПерерассчитываемомуДокументу()

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Функция РассчитатьДокументСреднегоЗаработка(Документ, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета = Ложь, РезультатЗапросаПоРасчетСреднего = Неопределено, КомментироватьРасчет = Ложь, ОсобыйВидРасчета = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Ссылка = Документ.Ссылка;
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		// получим реквизиты табличной части РасчетСреднего 
		
		Если РезультатЗапросаПоРасчетСреднего = Неопределено Тогда
			
			Запрос = Новый Запрос;
			
			// Установим параметры запроса
			Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокаРасчетСреднего.НомерСтроки,
			|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
			|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
			|	ВЫБОР
			|		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
			|		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
			|	КОНЕЦ КАК Организация,
			|	СтрокаРасчетСреднего.ВидРасчета,
			|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	ВЫБОР КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КОНЕЦ КАК БазовыйПериодКонец,
			|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
			|	СтрокаРасчетСреднего.НормаПоПятидневке,
			|	СтрокаРасчетСреднего.ОтработаноДней,
			|	СтрокаРасчетСреднего.ОтработаноЧасов,
			|	СтрокаРасчетСреднего.ЧислоМесяцев,
			|	СтрокаРасчетСреднего.КоэффициентИндексации,
			|	СтрокаРасчетСреднего.Результат
			|ИЗ
			|	Документ." + Документ.Метаданные().Имя + ".РасчетСреднего КАК СтрокаРасчетСреднего
			|
			|ГДЕ
			|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";
			
			РезультатЗапросаПоРасчетСреднего = Запрос.Выполнить();
			
		КонецЕсли;
		
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоРасчетСреднего.НомерСтроки) +
			""" табл. части ""Расчет среднего"": ";
			
			// Вид расчета
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.ВидРасчета) Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
			КонецЕсли;
			
			// Дата начала базового периода
			Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодНачало) Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
				// Дата окончания базового периода
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодКонец) Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
			ИначеЕсли ВыборкаПоРасчетСреднего.БазовыйПериодКонец < ВыборкаПоРасчетСреднего.БазовыйПериодНачало Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				Движение = НаборРасчетСреднего.Добавить();
				
				// Свойства
				Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Движение.БазовыйПериодНачало			= ВыборкаПоРасчетСреднего.БазовыйПериодНачало;
				Движение.БазовыйПериодКонец				= ВыборкаПоРасчетСреднего.БазовыйПериодКонец;
				Движение.ВидРасчета						= ВыборкаПоРасчетСреднего.ВидРасчета;
				
				// Измерения
				Движение.Сотрудник						= ВыборкаПоРасчетСреднего.Сотрудник;
				Движение.Физлицо						= ВыборкаПоРасчетСреднего.Физлицо;
				Движение.Организация					= ВыборкаПоРасчетСреднего.Организация;
				
				// Ресурсы
				Движение.Результат						= ВыборкаПоРасчетСреднего.Результат;
				Движение.ОтработаноПоПятидневке			= ВыборкаПоРасчетСреднего.ОтработаноПоПятидневке;
				Движение.НормаПоПятидневке				= ВыборкаПоРасчетСреднего.НормаПоПятидневке;
				Движение.ОтработаноДней					= ВыборкаПоРасчетСреднего.ОтработаноДней;
				Движение.ОтработаноЧасов				= ВыборкаПоРасчетСреднего.ОтработаноЧасов;
				
				// Реквизиты
				Движение.КоэффициентИндексации			= ВыборкаПоРасчетСреднего.КоэффициентИндексации;
				Движение.ЧислоМесяцев					= ВыборкаПоРасчетСреднего.ЧислоМесяцев;
				Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
				Движение.ДатаНачалаСобытия				= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
				Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
				Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
				Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			НаборРасчетСреднего.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	// Если это документ-исправление, тогда добавим сторно-записи из исправляемого документа.
	Если ЗначениеЗаполнено(Документ.ПерерассчитываемыйДокумент) Тогда
		ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(Документ.ПерерассчитываемыйДокумент, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления, , ОсобыйВидРасчета);
	КонецЕсли;
	
	Документ.СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	ТаблицаСторноЗаписей.Колонки.Удалить("СторнируемыйДокумент");
	ТаблицаСторноЗаписей.Колонки.Регистратор.Имя = "СторнируемыйДокумент";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,СтрокаСторно);
		
		// Свойства
		Движение.Сторно	= Истина;
		Движение.Авторасчет	= Истина;
		
	КонецЦикла;
	
	Если ТаблицаСторноЗаписей.Количество() <> 0 Тогда
		// если таблица сторно-записей не пустая, получим таблицу
		// начислений зависисяцих от тех начислений, которые зарегистрированы,
		
		ТаблицаОсновныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийОсновные(НаборОсновныеНачисления.Выгрузить());
		Для каждого СтрокаТаблицы Из ТаблицаОсновныхНачислений Цикл
			
			Если СтрокаТаблицы.Начислить > 0 Тогда
				// начисление зависит от сторнирующего, добавим не сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.Сторнировать > 0 Тогда
				
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Сторно	= Истина;
				Движение.Авторасчет	= Ложь;
				
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		ТаблицаДополнительныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаСторноЗаписей);
		Для каждого СтрокаТаблицы Из ТаблицаДополнительныхНачислений Цикл
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.Сторно	= Истина;
			Движение.Авторасчет	= Ложь;
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.СторнируемыйДокумент = Неопределено;
			Движение.Сторно	= Ложь;
			Движение.Авторасчет	= Истина;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Очистим начисления
	Документ.Начисления.Очистить();
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,Истина,,,КомментироватьРасчет);
		Иначе
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,,,,КомментироватьРасчет);
		КонецЕсли;
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			НаборОсновныеНачисления.Записать(Истина, Истина);
			
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,,,,КомментироватьРасчет);
			НаборДополнительныеНачисления.Записать(Истина, Истина);
			
			// повторный расчет на случай зависимости основных начислений от дополнительных
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,,,,КомментироватьРасчет);
			
		КонецЕсли;
		
		// перепишем записи начислений в документ
		ЗаписиНачислений = НаборОсновныеНачисления.Выгрузить();
		ЗаписиНачислений.Колонки.ПериодДействияНачало.Имя = "ДатаНачала";
		ЗаписиНачислений.Колонки.ПериодДействияКонец.Имя  = "ДатаОкончания";
		Документ.Начисления.Загрузить(ЗаписиНачислений);
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			// перепишем записи начислений в документ
			ЗаписиНачислений = НаборДополнительныеНачисления.Выгрузить();
			ЗаписиНачислений.Колонки.БазовыйПериодНачало.Имя = "ДатаНачала";
			ЗаписиНачислений.Колонки.БазовыйПериодКонец.Имя = "ДатаОкончания";
			Для каждого СтрокаТаблицы Из ЗаписиНачислений Цикл
				НоваяСтрока = Документ.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;			
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		ПроведениеРасчетовПереопределяемый.СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		// перепишем записи расчета среднего заработка в документ
		Документ.РасчетСреднего.Загрузить(НаборРасчетСреднего.Выгрузить());
	КонецЕсли;
	
	Если ПроведениеРасчетовПереопределяемый.ЗаписыватьДвиженияПриРасчетеДокументаСреднегоЗаработка(РассчитываемыеТаблицы, РежимПерерасчета) Тогда
		
		Если НаборОсновныеНачисления.Модифицированность() Тогда
			НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		Если НаборДополнительныеНачисления.Модифицированность() Тогда
			НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		Если НаборРасчетСреднего.Модифицированность() Тогда
			НаборРасчетСреднего.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		
		ПроведениеРасчетовПереопределяемый.ВыполнитьДополнительныеДействияПриРасчетеДокументаСреднегоЗаработка(Документ);
	КонецЕсли;
	
	Если Не РежимПерерасчета тогда
		
		// Удаляем движения для режима интерактивного расчета
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			НаборДополнительныеНачисления.Очистить();
			НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // РассчитатьДокументСреднегоЗаработка()

// Разбивает строку таблицы начислений на помесячные записи (длиной не более месяца)
// Параметры:
//		СтрокаНачислений - строка таблицы начислений, которую следует разбить
//		ТаблицаНачислений - таблица начислений, имеющая 2 обязательные колонки: КолонкаДатаНачала и  КолонкаДатаОкончания
//		КоллекцияКолонокТаблицы - коллекция колонок таблицы
//		КолонкаДатаНачала - имя колонки, содержащей дату начала периода записи
//		КолонкаДатаОкончания - имя колонки, содержащей дату окончания периода записи
Процедура РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачислений, ТаблицаНачислений, КолонкаДатаНачала = "ДатаНачала", КолонкаДатаОкончания = "ДатаОкончания") Экспорт
	
	НачалоПериода = СтрокаНачислений[КолонкаДатаНачала];
	КонецПериода = СтрокаНачислений[КолонкаДатаОкончания];
	
	Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) ИЛИ КонецПериода < НачалоПериода Тогда
		Возврат;// разбивать не надо
	КонецЕсли; 
	
	РазницаВМесяцах = (Год(КонецПериода)*12 + Месяц(КонецПериода)) - (Год(НачалоПериода)*12 + Месяц(НачалоПериода));
	
	// У первоначальной строки дату конца установим в конец первого месяца
	СтрокаНачислений[КолонкаДатаОкончания] = КонецМесяца(НачалоПериода);	
	
	ОчередноеНачалоМесяца = НачалоМесяца(НачалоПериода);
	Для Счетчик = 1 По РазницаВМесяцах Цикл
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		
		// Скопируем строку
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНачислений);
		
		// Установим период
		ОчередноеНачалоМесяца = ДобавитьМесяц(ОчередноеНачалоМесяца, 1);
		НоваяСтрока[КолонкаДатаНачала] = ОчередноеНачалоМесяца;	
		НоваяСтрока[КолонкаДатаОкончания] = КонецМесяца(ОчередноеНачалоМесяца);	
		
	КонецЦикла;
	
	// Для  последней строки установим конец периода в конец разбиваемого периода
	НоваяСтрока[КолонкаДатаОкончания]	 = КонецПериода;
	
КонецПроцедуры

// Сворачивает таблицу значений в которой расположены движения НДФЛСведенияОДоходах
// опирается на структуру метаданных - сворачивает все ресурсы по измерениям+реквизитам 
// Парамтеры:
//	ДвиженияНДФЛСведенияОДоходах - таблица значений
// Возвращаемое значение:
//	нет
Процедура СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах) Экспорт
	
	ОбщегоНазначенияЗК.СвернутьТаблицуДвиженийРегистраНакоплений("НДФЛСведенияОДоходах", ДвиженияНДФЛСведенияОДоходах)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокОсновныхВариантовНачисленийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
     
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
     СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);	 	
	 
	 ПроведениеРасчетовПереопределяемый.ДополнитьСписокОсновныхВариантовНачисленийОрганизации(СписокСпособов);
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокОсновныхВариантовНачисленийОрганизации()

// Возвращает список алгоритмов начислений, зависящих от среднего заработка
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПоСреднемуЗаработку() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокНачисленийПоСреднемуЗаработку()

// Возвращает список алгоритмов начислений, являющихся почасовыми отклонениями
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПочасовыхОтклонений() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокНачисленийПочасовыхОтклонений()

// Возвращает список регламентированных алгоритмов удержаний
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУдержанийОрганизации() Экспорт

	 СписокСпособов = Новый СписокЗначений;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУдержанийОрганизации()

Функция МассивРасчетовПоИсполнительнымЛистам() Экспорт
	
	МассивРасчетов = Новый Массив;
	МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ПочтовыйСборПоИЛ);
	МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
	МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ);
	МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
	МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ);
	МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой);
	МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("БанковскиеИздержкиПоИЛ");
	МассивИменЭлементов.Добавить("ИЛВПрожиточныхМинимумах");
	МассивЭлементов = ОбщегоНазначенияЗК.ОсобыеЭлементы(ПланыВидовРасчета.УдержанияОрганизаций, МассивИменЭлементов);
	Для каждого Элемент Из МассивЭлементов Цикл
		Если ЗначениеЗаполнено(Элемент) Тогда
			МассивРасчетов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРасчетов
	
КонецФункции // МассивРасчетовПоИсполнительнымЛистам()

// Возвращает алгоритмы начислений, не требующих указания валюты начислений, в виде соответствия
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Соответствие, содержащая подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСоответствиеСпособовРасчетаТребующихВалюту() Экспорт
	
	Список = ПроведениеРасчетовПереопределяемый.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
	СоответствиеСпособов = Новый Соответствие;
	Для Сч = 0 По Перечисления.СпособыРасчетаОплатыТруда.Количество() - 1 Цикл
		Значение = Перечисления.СпособыРасчетаОплатыТруда.Получить(Сч);
		СоответствиеСпособов.Вставить(Значение, Список.НайтиПоЗначению(Значение) = Неопределено);
	КонецЦикла;  
	
	Возврат СоответствиеСпособов
	
КонецФункции // Получить()

// Возвращает список процентных способов расчета
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПроцентом() Экспорт
	
	СписокСпособов = Новый Массив;
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	
	Возврат СписокСпособов;
	
КонецФункции

// Возвращает список предопределенных начислений
Функция ПредопределенныеНачисленияОрганизации() Экспорт
	
	СписокПредопределенныхВР = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОсновныеНачисленияОрганизаций.Ссылка,
	                      |	ОсновныеНачисленияОрганизаций.Наименование
	                      |ИЗ
	                      |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	                      |
	                      |ГДЕ
	                      |	(ОсновныеНачисленияОрганизаций.Предопределенный)");

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
	    СписокПредопределенныхВР.Добавить(Результат.Ссылка,Результат.Наименование);
	КонецЦикла;
	
    Возврат СписокПредопределенныхВР
	
КонецФункции

// Возвращает список кодов вычетов, относящихся к конкретным доходам
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   список значений, содержащий ссылки на предопределенные эл-ты спр-ка ВычетыНДФЛ
//
Функция ПолучитьСписокВычетовКДоходам() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.Код,
	|	ВычетыНДФЛ.Наименование
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	(НЕ ВычетыНДФЛ.ПометкаУдаления)
	|	И ВычетыНДФЛ.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетыНДФЛ.Код");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокВычетов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокВычетов.Добавить(Выборка.Ссылка,СокрЛП(Выборка.Код) + " (" + СокрЛП(Выборка.Наименование) + ")");
	КонецЦикла;
	
	Возврат СписокВычетов
	
КонецФункции // ПолучитьСписокВычетовКДоходам()

Функция ПолучитьСоответствиеДоходовИВычетов() Экспорт
	
	СоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов();
	Для каждого Элемент Из СоответствиеДоходовИВычетов Цикл
		СоответствиеДоходовИВычетов[Элемент.Ключ] = Элемент.Значение[0]
	КонецЦикла;
	
	Возврат СоответствиеДоходовИВычетов
	
КонецФункции

Функция ПолучитьТаблицуСоответствияДоходовИВычетов() Экспорт
	
	ТаблицаСоответствияДоходовИВычетов = Новый ТаблицаЗначений;
	ТаблицаСоответствияДоходовИВычетов.Колонки.Добавить("КодВычета",Новый ОписаниеТипов("СправочникСсылка.ВычетыНДФЛ"));
	ТаблицаСоответствияДоходовИВычетов.Колонки.Добавить("КодДохода",Новый ОписаниеТипов("СправочникСсылка.ДоходыНДФЛ"));
	
	СоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов();
	Для каждого Элемент Из СоответствиеДоходовИВычетов Цикл
		СтрокаТЗ = ТаблицаСоответствияДоходовИВычетов.Добавить();
		СтрокаТЗ.КодДохода = Элемент.Ключ;
		СтрокаТЗ.КодВычета = Элемент.Значение[0];
	КонецЦикла;
	
	Возврат ТаблицаСоответствияДоходовИВычетов
	
КонецФункции

// Проверяет соответствует ли указанный код вычета коду дохода по НДФЛ
//
// Параметры
//  КодДохода - тип СправочникСсылка.ДоходыНДФЛ, код дохода
//  КодВычета - тип СправочникСсылка.ВычетыНДФЛ, проверяемый код вычета
//
// Возвращаемое значение:
//   булево - ответ на вопрос "соответствует ли?"
//
Функция ВычетСоответствуетДоходу(КодДохода = Неопределено, КодВычета = Неопределено, СоответствиеДоходовИВычетов = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СоответствиеДоходовИВычетов) Тогда
		СоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов();
	КонецЕсли;
	
	МассивВычетовДляДохода = СоответствиеДоходовИВычетов[КодДохода];
	Если Не ЗначениеЗаполнено(МассивВычетовДляДохода) Тогда // по переданному коду дохода вычета не предусмотрено
		Возврат Не ЗначениеЗаполнено(КодВычета)
	Иначе
		Возврат МассивВычетовДляДохода.Найти(КодВычета) <> Неопределено
	КонецЕсли;
	
КонецФункции

// Выбирает все зарегистрированные в ИБ категории расчета кроме Справочники.КатегорииРасчетов.Первичное
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   список значений с категориями для выбора
//
Функция ПолучитьСписокЗависимыхКатегорийРасчета() Экспорт
	
	// Установим значение переключателя "ОчередностьНачисления" и список выбора для реквизита "КатегорияРасчета"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Первичное", Справочники.КатегорииРасчетов.Первичное);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииРасчетов.Ссылка,
	|	КатегорииРасчетов.Наименование
	|ИЗ
	|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов
	|ГДЕ
	|	КатегорииРасчетов.Ссылка <> &Первичное
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииРасчетов.Код";
	Категории = Запрос.Выполнить().Выбрать();
	СписокКатегорийРасчета = Новый СписокЗначений;
	Пока Категории.Следующий() Цикл
		СписокКатегорийРасчета.Добавить(Категории.Ссылка, Категории.Наименование);
	КонецЦикла;
	
	Возврат СписокКатегорийРасчета
	
КонецФункции // ПолучитьСписокВычетовКДоходам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчета(СведенияОВидахРасчета, ВидРасчета) Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		
		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
		
		СведенияОВидеРасчета = Новый Структура("
		|КодДоходаНДФЛ, 
		|СпособРасчета, 
		|ЗачетОтработанногоВремени,
		|ЗачетНормыВремени,
		|ВидВремени,
		|ПериодРасчетаСреднегоЗаработка,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|РазмерТребуется,
		|НеТребуетВалюты,
		|ТребуетВводаТарифногоРазряда, 
		|ОбозначениеВТабелеУчетаРабочегоВремени", 
		Неопределено,            			// КодДоходаНДФЛ
		Неопределено,            			// СпособРасчета
		Ложь,            					// ЗачетОтработанногоВремени
		Ложь,            					// ЗачетНормыВремени
		Неопределено,      					// ВидВремени
		0,            						// ПериодРасчетаСреднегоЗаработка
		Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству,
		Ложь,								// РазмерТребуется
		Ложь,                               // НеТребуетВалюты
		Ложь,	                            // ТребуетВводаТарифногоРазряда
		Неопределено);                      // ОбозначениеВТабелеУчетаРабочегоВремени
		
		СпособРасчета = ВидРасчета.СпособРасчета;
		ТипВР = ТипЗнч(ВидРасчета);
		// размер требует способ расчета
		СведенияОВидеРасчета.СпособРасчета = СпособРасчета;
		СведенияОВидеРасчета.РазмерТребуется = СпособРасчетаТребуетРазмер(СпособРасчета);
		СведенияОВидеРасчета.НеТребуетВалюты = СпособРасчетаНеТребуетВалюты(СпособРасчета);
		// размер требует вид расчета
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ВидВремени,ЗачетОтработанногоВремени,ЗачетНормыВремени,КодДоходаНДФЛ,ТребуетВводаТарифногоРазряда,ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,ПериодРасчетаСреднегоЗаработка,ОбозначениеВТабелеУчетаРабочегоВремени");
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
				СведенияОВидеРасчета.РазмерТребуется = Истина;
			КонецЕсли;	
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций")  Тогда
			ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"КодДоходаНДФЛ,ТребуетВводаТарифногоРазряда,ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка");
			Если СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда Тогда
				СведенияОВидеРасчета.НеТребуетВалюты = Истина
			КонецЕсли;
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				СведенияОВидеРасчета.ПериодРасчетаСреднегоЗаработка = ВидРасчета.ЧислоМесяцев;
			КонецЕсли;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
			Если ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,ПериодРасчетаСреднегоЗаработка");
			КонецЕсли;
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
	КонецЕсли;
	
	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчета

// функция проверяет необходимость задавать размер для расчета по заданному способу
// Парамерты:
//	СпособРасчета
//
// Возвращаемое значение:
//	булево - признак того, нужен ли размер для расчета таким способом
//
Функция СпособРасчетаТребуетРазмер(СпособРасчета) Экспорт
	Возврат НЕ (
    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула
  );
КонецФункции

Функция СпособРасчетаНеТребуетВалюты(СпособРасчета) Экспорт
	
	Возврат (
	
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
	
	);
	
КонецФункции

// Проверяет правильность заполнения реквизитов вида расчета 
// для некуоторых случаев выдает сообщение об ошибке
// для некоторых - возвращает текст сообщения
// 	Параметры:
//		ВидРасчета - объект Вид расчета
//		Отказ - признак отказа (проверка не прошла)
//	Возвращаемое значение:
//		ТекстСообщения - текст сообщения о результате проверки
Функция ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ПроверятьСоответствиеБазовыхИВедущихРасчетов = Истина, ОбработкаКомментариев) Экспорт
	
	МетаданныеВидаРасчета = ВидРасчета.Метаданные();
	
	ВидРасчетаЯвляетсяНачислением = ПроведениеРасчетовПереопределяемый.ВидРасчетаЯвляетсяНачислением(МетаданныеВидаРасчета);
	
	Если НЕ ЗначениеЗаполнено(ВидРасчета.Наименование) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задано наименование " + ?(ВидРасчетаЯвляетсяНачислением, "начисления", "удержания") + "!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли; 
	
	ЕстьРеквизитСпособРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("СпособРасчета") <> Неопределено;
	Если ЕстьРеквизитСпособРасчета И НЕ ЗначениеЗаполнено(ВидРасчета.СпособРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задан способ расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;
	
	ЭтоДоплата = ЕстьРеквизитСпособРасчета 
				И (ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
					Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	
	ЕстьРеквизитКатегорияНачисления = МетаданныеВидаРасчета.Реквизиты.Найти("КатегорияРасчета") <> Неопределено;
	Если ЕстьРеквизитКатегорияНачисления и НЕ ЗначениеЗаполнено(ВидРасчета.КатегорияРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не задана последовательность расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;
	
	// Вид расчета не может входить в собственную базу
	ВидРасчетаСсылка = ВидРасчета.Ссылка;
	
	// рассчитываем на то, что данная функция вызывается для видов расчета с поддержкой базового периода
	Если ВидРасчета.БазовыеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
		// в расчетную базу входят только начисления
		ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственной расчетной базы!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;
	
	Если ВидРасчета.ВедущиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственного списка ведущих начислений!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина;
	КонецЕсли;
	
	ЕстьРеквизитПроизвольнаяФормулаРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("ПроизвольнаяФормулаРасчета") <> Неопределено;
	Если ЕстьРеквизитПроизвольнаяФормулаРасчета И ВидРасчета.ПроизвольнаяФормулаРасчета И Не ЗначениеЗаполнено(ВидРасчета.ФормулаРасчета) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не заполнена формула расчета!", Перечисления.ВидыСообщений.Ошибка);
		Отказ = Истина
	КонецЕсли;
	
	// тарифный разряд не может запрашиваться в удержаниях
	ТипыПВРУдержаний = Новый Массив;
	ТипыПВРУдержаний.Добавить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"));
	ПроведениеРасчетовПереопределяемый.ТипыПВРУдержанийДополнить(ТипыПВРУдержаний);
	Если ТипыПВРУдержаний.Найти(ТипЗнч(ВидРасчета.Ссылка)) <> Неопределено Тогда
		ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд(ВидРасчета, ОбработкаКомментариев, Отказ);
	КонецЕсли;
	
	// если поддерживается период действия
	Если МетаданныеВидаРасчета.ИспользованиеПериодаДействия Тогда
		Если ВидРасчета.ВытесняющиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственного списка вытесняющих начислений!", Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстСообщения = "";
	// Проверим значение реквизита "Категория начисления".
	// Для ПВР "Удержания организаций" проверку пропустим.
	Если ЕстьРеквизитКатегорияНачисления и ВидРасчетаЯвляетсяНачислением и Не ПроведениеРасчетовПереопределяемый.ЕстьДоначисление(ВидРасчета) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазовыеВидыРасчета.ВидРасчета
		|ПОМЕСТИТЬ ВТ_ТаблицаБазовыхВидовРасчета
		|ИЗ
		|	&ТаблицаБазовыхВидовРасчета КАК БазовыеВидыРасчета";
		
		ТаблицаБазовыхВидовРасчета = Видрасчета.БазовыеВидыРасчета.Выгрузить();
		ТаблицаБазовыхВидовРасчета.Колонки.Добавить("Ссылка");
		ТаблицаБазовыхВидовРасчета.ЗаполнитьЗначения(Видрасчета,"Ссылка");
		Запрос.УстановитьПараметр("ТаблицаБазовыхВидовРасчета", ТаблицаБазовыхВидовРасчета);
		Запрос.Выполнить();
		
		Запрос.Текст = ПроведениеРасчетовПереопределяемый.ПолучитьТекстОписанияБазовыхНачислений(МетаданныеВидаРасчета);
		Категории = Запрос.Выполнить().Выбрать();
		Если Категории.Следующий() Тогда
			МаксимальныйИндексКатегории = Категории.МаксимальныйИндексКатегории;
			ЕстьДополнительныеВР = Категории.ЕстьДополнительныеВР;
			ЕстьОсновныеВР = Категории.ЕстьОсновныеВР;
		Иначе
			МаксимальныйИндексКатегории = "";
			ЕстьДополнительныеВР = Ложь;
			ЕстьОсновныеВР = Ложь;
		КонецЕсли;
		
		// Если в базу доп.начислений входят только основные, тогда категория расчета нам не интересна 
		НеПроверять = МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций И Не ЕстьДополнительныеВР И ЕстьОсновныеВР;
		
		Если НеПроверять Тогда // ничего не делаем
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(КатегорииРасчетов.Код) КАК МаксимальныйИндексКатегории
			|ИЗ
			|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов";
			
			Категории = Запрос.Выполнить().Выбрать();
			Категории.Следующий();
			МаксимальныйКодВСправочнике = Категории.МаксимальныйИндексКатегории;
			
			Если МаксимальныйИндексКатегории = МаксимальныйКодВСправочнике Тогда
				
				// В базе расчетов есть расчеты с максимальной категорией
				Если ЭтоДоплата Тогда
					ТекстСообщения = "Откорректируйте список Вычитаемых начислений. В список не должны входить начисления с категорией """ + МаксимальныйКодВСправочнике + """!.";
				Иначе	
					ТекстСообщения = "Откорректируйте список начислений Расчетная база. В базу не должны входить начисления с категорией  """ + МаксимальныйКодВСправочнике + """!.";
				КонецЕсли;
				
			Иначе
				
				ИндексВыбраннойКатегории = ВидРасчета.КатегорияРасчета.Код;
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	МИНИМУМ(КатегорииРасчетов.Код) КАК ИндексКатегории
				|ИЗ
				|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов
				|ГДЕ
				|	КатегорииРасчетов.Код > &Код";
				
				Запрос.УстановитьПараметр("Код", МаксимальныйИндексКатегории);
				Категории = Запрос.Выполнить().Выбрать();
				Категории.Следующий();
				ОжидаемаяКатегорияКод = Категории.ИндексКатегории;
				ОжидаемаяКатегория = Справочники.КатегорииРасчетов.НайтиПоКоду(ОжидаемаяКатегорияКод);
				Если ИндексВыбраннойКатегории <= МаксимальныйИндексКатегории Тогда
					// Категория начислений вида расчета должна быть на уровень выше любого из видов расчетов, составляющих базу расчета
					// Пользователь установил категорию меньше чем самая максимальная категория базы расчетов
					МаксимальнаяКатегорияБазы = Справочники.КатегорииРасчетов.НайтиПоКоду(МаксимальныйИндексКатегории);
					Если ЭтоДоплата Тогда
						ТекстСообщения = "Неверно установлена категория начисления. В список Вычитаемых начислений входят начисления с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
					Иначе	
						ТекстСообщения = "Неверно установлена категория начисления. В расчетную базу входят начисления с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
					КонецЕсли;
				ИначеЕсли ИндексВыбраннойКатегории > ОжидаемаяКатегорияКод тогда
					// Категория слишком большая - предупредим
					Если Не ЗначениеЗаполнено(МаксимальныйИндексКатегории) Тогда  // нет в базе ничего
						Если ЕстьРеквизитСпособРасчета Тогда
							Если ТипЗнч(ВидРасчета.Ссылка) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
								Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС
									Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
									
									ТекстСообщения = "Рекомендуется заполнить базовые начисления!";
								Иначе
									БылоСообщение = Ложь;
									Для Каждого Показатель Из ВидРасчета.Показатели Цикл
										Если  Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза
											Или Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза Тогда
											ТекстСообщения = "Рекомендуется заполнить базовые начисления!";
											БылоСообщение = Истина;
										КонецЕсли;
									КонецЦикла;
									Если Не БылоСообщение Тогда
										ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";								
									КонецЕсли;
								КонецЕсли;
							Иначе
								ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";
							КонецЕсли;
						КонецЕсли;
					Иначе
						МаксимальнаяКатегорияБазы = Справочники.КатегорииРасчетов.НайтиПоКоду(МаксимальныйИндексКатегории);
						Если ЭтоДоплата Тогда
							ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди вычитаемых начислений является категория """ + МаксимальнаяКатегорияБазы + """!";
						Иначе	
							ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди начислений расчетной базы является категория """ + МаксимальнаяКатегорияБазы + """!";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПроведениеРасчетовПереопределяемый.ЕстьДоначисление(ВидРасчета) Тогда
		
		ПроведениеРасчетовПереопределяемый.ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ОбработкаКомментариев);
		
	КонецЕсли;
	
	// Проверим соответствие списков базовых и ведущих расчетов
	Если ПроверятьСоответствиеБазовыхИВедущихРасчетов Тогда
		
		Для Каждого СтрокаБазовыйРасчет из ВидРасчета.БазовыеВидыРасчета Цикл
			
			Если ВидРасчета.ВедущиеВидыРасчета.Найти(СтрокаБазовыйРасчет.ВидРасчета,"ВидРасчета") = Неопределено Тогда
				Если ЭтоДоплата Тогда
					ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения),Символы.ПС,"") + "Список ведущих начислений отличается от списка начислений, вычитаемых при доплате. Рекомендуется синхронизировать указанные списки!";
				Иначе
					ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения),Символы.ПС,"") + "Список ведущих начислений отличается от списка расчетной базы. Рекомендуется синхронизировать указанные списки!";
				КонецЕсли;
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	// Если ВР связан со средним заработком, проверим, чтобы был заполнен реквизит "ПериодРасчетаСреднегоЗаработка"
	ЕстьРеквизитПериодРасчетаСреднегоЗаработка = МетаданныеВидаРасчета.Реквизиты.Найти("ПериодРасчетаСреднегоЗаработка") <> Неопределено;
	Если ЕстьРеквизитСпособРасчета и ЕстьРеквизитПериодРасчетаСреднегоЗаработка Тогда
		
		Если ПроведениеРасчетов.ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(ВидРасчета.СпособРасчета) <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ВидРасчета.ПериодРасчетаСреднегоЗаработка) и ВидРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать количество месяцев для расчета среднего заработка!", Перечисления.ВидыСообщений.Ошибка);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим соответствие способа отражения, кода ЕСН и отношения к ЕНВД
	Если (МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
		или МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций)
		и ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
		
		ПроведениеРасчетовПереопределяемый.ПроверитьОтражениеВУчетеВидаРасчета(ВидРасчета, Отказ, ОбработкаКомментариев);
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции //ПроверитьНастройкуВидаРасчета

Функция УстановитьФлагНачисляетсяВЦеломЗаМесяц(ПроизвольнаяФормулаРасчета, Показатели, СпособРасчета = Неопределено, БазовыйПериодПрошлыйМесяц = Ложь) Экспорт
	
	НачисляетсяВЦеломЗаМесяц = Истина;
	
	Если ПроизвольнаяФормулаРасчета Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБаза);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.СдельнаяВыработка);
		///////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Администратор 16.08.2012 12:15 
		// ОПИСАНИЕ: Добавляем новый вид показателей который будет расчитываться не за полный месяц
		//	а за период работы сотрудника
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.AVT_ОтработаноДнейПоПятидневке);
		
		// Администратор 16.08.2012 12:15  
		////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		
		ПоказателиСхемМотивацииПереопределяемый.ДополнитьПоказателиНачисляетсяВЦеломЗаМесяц(СписокПоказателей);
		
		Для Каждого СтрПоказателя Из Показатели Цикл
			Если СписокПоказателей.Найти(СтрПоказателя.Показатель) <> Неопределено Тогда
				НачисляетсяВЦеломЗаМесяц = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		НачисляетсяВЦеломЗаМесяц = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой ИЛИ БазовыйПериодПрошлыйМесяц;
		
	КонецЕсли;
	
	Возврат НачисляетсяВЦеломЗаМесяц;
	
КонецФункции

Процедура ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд(ВидРасчета, ОбработкаКомментариев, Отказ)
	
	МассивПоказателей = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ВидРасчета.Показатели Цикл
		Если СтрокаТабличнойЧасти.ЗапрашиватьПриКадровыхПеремещениях Тогда
			МассивПоказателей.Добавить(СтрокаТабличнойЧасти.Показатель);
		КонецЕсли;
	КонецЦикла;
	Если МассивПоказателей.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
		|				ГДЕ
		|					ПоказателиСхемМотивации.Ссылка В (&МассивПоказателей)
		|					И ПоказателиСхемМотивации.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибка,
		|	""Показатели типа """"Тарифный разряд"""" не могут запрашиваться в удержаниях"" КАК ТекстОшибки";
		Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.ЕстьОшибка Тогда
			ОбработкаКомментариев.ДобавитьСообщение(Выборка.ТекстОшибки, Перечисления.ВидыСообщений.Ошибка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТАЖЕМ
// 

// проверка того, что способ расчета относится к расчетам от стажа
Функция ЭтоРасчетОтСтажа(СпособРасчета) Экспорт
    Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;
КонецФункции

// Проверяет является ли способ расчета тем способом, которому требуется 
// информация о проценте надбавки за северный стаж
//
// Параметры:
//  СпособРасчета - ПеречислениеСсылка.СпособыРасчетаОплатыТруда
//
Функция ЭтоРасчетСеверныхНадбавок(СпособРасчета) Экспорт
    Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// ПолучитьПроцентыСевернойНадбавкиЗаПериод
// Предназначена для получения информации о процентах северной надбавки и датах начала их действия 
// за определенный период
// Параметры:
//  ДатаРегистрации - дата регистрации записи о стаже
//  ПорядокНачисления - порядок начисления северной надбавки - ПеречислениеСсылка.ПорядокНачисленияСеверныхНадбавок
//  НачальныйПроцент - процент на дату ДатаРегистрации
//  Месяцев - количество месяцев стажа на дату ДатаРегистрации
//  Дней - количество дней стажа на дату ДатаРегистрации
//  ДатаНачала - начало периода, в котором мы получаем сведения о процентах надбавки
//  ДатаОкончания - конец периода, в котором мы получаем сведения о процентах надбавки
//
// Возвращаемое значение:
//  Массив структур вида "Период, Процент"
//
Функция ПолучитьПроцентыСевернойНадбавкиЗаПериод(ДатаРегистрации, ПорядокНачисления, 
                        НачальныйПроцент, Месяцев, Дней, ДатаНачала, ДатаОкончания) Экспорт
                        
    мДлинаДня = 60*60*24;
    ВозврМассив = Новый Массив;
    
    // в общем случае шкала может состоять из двух участков
    РазмерПериода1 = 0;
    РазмерПрироста1 = 0;
    Ограничение1 = 0;
    РазмерПериода2 = 0;
    РазмерПрироста2 = 0;
    Ограничение2 = 0;
    Если      ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа1Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 20;
        Ограничение1 = 60;
        РазмерПериода2 = 6;
        РазмерПрироста2 = 10;
        Ограничение2 = 100;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа1Обычная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 100;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа2Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 20;
        Ограничение1 = 60;
        РазмерПериода2 = 12;
        РазмерПрироста2 = 20;
        Ограничение2 = 80;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа2Обычная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 60;
        РазмерПериода2 = 12;
        РазмерПрироста2 = 10;
        Ограничение2 = 80;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа3Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 50;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа3Обычная Тогда
        РазмерПериода1 = 12;
        РазмерПрироста1 = 10;
        Ограничение1 = 50;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа4Льготная Тогда
        РазмерПериода1 = 6;
        РазмерПрироста1 = 10;
        Ограничение1 = 30;
    ИначеЕсли ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа4Обычная Тогда
        РазмерПериода1 = 12;
        РазмерПрироста1 = 10;
        Ограничение1 = 10;
        РазмерПериода2 = 24;
        РазмерПрироста2 = 10;
        Ограничение2 = 30;
	Иначе // порядок не указан
        Элемент = Новый Структура("Период, Процент", ДатаНачала, 0);
        ВозврМассив.Добавить(Элемент);
		Возврат ВозврМассив;
	КонецЕсли;
    
    ДатаОтсчета = ДатаРегистрации - Дней * мДлинаДня;
    ПрошлоМесяцевПослеДатыОтсчета = (Год(ДатаНачала) - Год(ДатаОтсчета)) * 12 + Месяц(ДатаНачала) - Месяц(ДатаОтсчета) -
        ?(День(ДатаНачала) >= День(ДатаОтсчета), 0, 1);
    ПрошлоМесяцев = (Год(ДатаНачала) - Год(ДатаОтсчета)) * 12 + Месяц(ДатаНачала) - Месяц(ДатаОтсчета) -
        ?(День(ДатаНачала) >= День(ДатаОтсчета), 0, 1) + Месяцев;
    Если РазмерПериода2 = 0 Тогда    
        // у шкалы только один участок
        ПрошлоПериодов = Цел(ПрошлоМесяцев / РазмерПериода1);
        ОстатокМесяцев = ПрошлоМесяцев - ПрошлоПериодов * РазмерПериода1;
        Процент = Мин(НачальныйПроцент + ПрошлоПериодов * РазмерПрироста1, Ограничение1);
        Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
        ВозврМассив.Добавить(Элемент);
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, ПрошлоМесяцевПослеДатыОтсчета + РазмерПериода1 - ОстатокМесяцев);
        Пока ДатаСменыПроцента < ДатаОкончания Цикл
            Процент = Мин(Процент + РазмерПрироста1, Ограничение1);
            Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
            ВозврМассив.Добавить(Элемент);
            Если Процент = Ограничение1 Тогда
                Прервать;
            КонецЕсли;
            ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода1);
        КонецЦикла;
    ИначеЕсли НачальныйПроцент >= Ограничение1 Тогда
        // используем уже второй участок шкалы
        ПрошлоПериодов = Цел(ПрошлоМесяцев / РазмерПериода2);
        Процент = Мин(НачальныйПроцент + ПрошлоПериодов * РазмерПрироста2, Ограничение2);
        Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
        ВозврМассив.Добавить(Элемент);
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, (ПрошлоПериодов + 1) * РазмерПериода2);
        Пока ДатаСменыПроцента < ДатаОкончания Цикл
            Процент = Мин(Процент + РазмерПрироста2, Ограничение2);
            Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
            ВозврМассив.Добавить(Элемент);
            Если Процент = Ограничение2 Тогда
                Прервать;
            КонецЕсли;
            ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода1);
        КонецЦикла;
    Иначе
        // два участка у шкалы
        ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, - Месяцев);
        Процент = НачальныйПроцент;
        РазмерПрироста = РазмерПрироста1;
        РазмерПериода = РазмерПериода1;
        Ограничение = Ограничение1;
		Если ДатаСменыПроцента >= ДатаНачала И ДатаСменыПроцента <= ДатаОкончания Тогда
			Если ДатаСменыПроцента > ДатаНачала Тогда
				Элемент = Новый Структура("Период, Процент", ДатаНачала, Макс(Процент - РазмерПрироста,0));
				ВозврМассив.Добавить(Элемент);
			КонецЕсли;
			Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, НачальныйПроцент);
			ВозврМассив.Добавить(Элемент);
		Иначе
			Пока ДатаСменыПроцента < ДатаОкончания Цикл
				Если ДатаСменыПроцента = ДатаНачала Тогда
					Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
					ВозврМассив.Добавить(Элемент);
					Прервать;
				ИначеЕсли ДатаСменыПроцента > ДатаНачала Тогда
					Элемент = Новый Структура("Период, Процент", ДатаНачала, Макс(Процент - РазмерПрироста,НачальныйПроцент));
					ВозврМассив.Добавить(Элемент);
					Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
					ВозврМассив.Добавить(Элемент);
					Прервать;
				КонецЕсли;
				Процент = Процент + РазмерПрироста;
				Если Процент > Ограничение Тогда
					Если Процент > Ограничение2 Тогда 
						Процент = Ограничение2;
						Прервать;
					Иначе
						// если уже перешли на второй участок...
						// сначала отменим увеличение процента
						Процент = Процент - РазмерПрироста;
						// сменим параметры участка шкалы
						РазмерПрироста = РазмерПрироста2;
						РазмерПериода = РазмерПериода2;
						Ограничение = Ограничение2;
						// установим процент с использованием новых параметров
						Процент = Процент + РазмерПрироста;
					КонецЕсли;
				КонецЕсли;
				ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода);
				Если ДатаСменыПроцента > ДатаОкончания Тогда
					// если это уже за пределами периода - отменим увеличение процента
					Процент = Процент - РазмерПрироста;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// если так ничего и не добавили - вернем последнее значение процента на дату начала периода
			Если ВозврМассив.Количество() = 0 Тогда
				Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
				ВозврМассив.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
        
    Возврат ВозврМассив;
    
КонецФункции

// Функция выбирает стажи по физлицу из ТЧ "Стажи" справочника "Физические лица"
//
// Параметры
//  Физлицо		– СправочникСсылка.ФизическиеЛица – работник, которому вычисляется стаж
//  ДопУсловие	– Строка – строка дополнительного условия в запрос
//  ВидСтажа	– СправочникСсылка.ВидыСтажа - значение параметра для дополнительного условия
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса   – выборка со стажами работника
//
Функция ВыбратьСтажиРаботника(Физлицо, ДопУсловие = Неопределено, ВидСтажа = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	ФизическиеЛицаСтажи.ВидСтажа,
	|	ФизическиеЛицаСтажи.ВидСтажа.Наименование КАК Наименование,
	|	ФизическиеЛицаСтажи.ДатаОтсчета,
	|	ФизическиеЛицаСтажи.РазмерМесяцев,
	|	ФизическиеЛицаСтажи.РазмерДней
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК ФизическиеЛицаСтажи
	|ГДЕ
	|	ФизическиеЛицаСтажи.Ссылка = &Физлицо
	|	И ФизическиеЛицаСтажи.ДатаОтсчета <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Если ДопУсловие <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + " " + ДопУсловие;
		
		Если ВидСтажа <> Неопределено Тогда
			
			Запрос.УстановитьПараметр("ВидСтажа", ВидСтажа);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции // ВыбратьСтажиРаботника()

// определяет начало непрерывного стажа физлица
//
// Параметры
//  ДатаНачала - Дата, дата на которую формируется стаж
//  Физлицо - Справочник.ФизическиеЛица, физ. лицо для которого определяется стаж
//  Организация - Справочник.Организации, организация, где работает физлицо.
//
// Возвращаемое значение:
//  дата - дата начала непрерывного стажа
//
Функция ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаНачала, Физлицо, Организация, ВидСтажа = Неопределено) Экспорт
	
	Если ВидСтажа = Неопределено Тогда
		ВидСтажа = ПроведениеРасчетовПереопределяемый.ПолучитьВидСтажаПоУмолчаниюДляБольничногоЛиста(ДатаНачала);
	КонецЕсли;
	
	ВыборкаПоСтажу = ВыбратьСтажиРаботника(Физлицо, "И ФизическиеЛицаСтажи.ВидСтажа = &ВидСтажа", ВидСтажа);
	Если ВыборкаПоСтажу.Следующий() Тогда
		
		ДатаСтажа = ДобавитьМесяц(ВыборкаПоСтажу.ДатаОтсчета, - ВыборкаПоСтажу.РазмерМесяцев) - ВыборкаПоСтажу.РазмерДней*86400;
		
	Иначе // стаж не введен, возьмем дату последнего приема на работу.
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаАктуальности,
		|		Сотрудник.Физлицо = &Физлицо
		|			И Организация = &ГоловнаяОрганизация
		|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацийСрезПоследних";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаНачала);
		Запрос.УстановитьПараметр("Физлицо",					Физлицо);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаСтажа = Выборка.Период
		Иначе 
			ДатаСтажа = Дата(1,1,1)
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ДатаСтажа
	
КонецФункции // ПолучитьНачалоСтажаДляБольничногоЛиста()

////////////////////////////////////////////////////////////////////////////////
// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
// 

// процедура выполняет дописывание наборов записей перерасчетов основных начислений по 
// переданной выборке
// выборка должна содержать уникальные комбинации Физлицо+Регистратор (т.е. ОбъектПерерасчета)
// которых еще нет в таблице перерасчета
Процедура ДописатьПерерасчетыОсновныхНачислений(Выборка) Экспорт
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.Регистратор];
		Если Набор = Неопределено Тогда
			Набор = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектПерерасчета.Значение = Выборка.Регистратор;
			Набор.Отбор.ОбъектПерерасчета.Использование = Истина;
			Наборы.Вставить(Выборка.Регистратор, Набор);
		КонецЕсли;
		НоваяСтрока = Набор.Добавить();
		НоваяСтрока.ОбъектПерерасчета	= Выборка.Регистратор;
		НоваяСтрока.Сотрудник			= Выборка.Сотрудник;
		НоваяСтрока.ФизЛицо				= Выборка.Физлицо;
		НоваяСтрока.Организация			= Выборка.Организация;
	КонецЦикла;
	Для Каждого ЭлементСтруктуры Из Наборы Цикл
		// дописываем набор записей по данному объекту перерасчета
		ЭлементСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет дописывание наборов записей перерасчетов в
// регистр сведений ЗаполнениеПлановыхНачислений
//
Процедура ДописатьПерерасчетыВЗаполнениеПлановыхНачислений(Выборка) Экспорт
	
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.ОбъектЗаполнения];
		Если Набор = Неопределено Тогда
			Набор = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектЗаполнения.Значение = Выборка.ОбъектЗаполнения;
			Набор.Отбор.ОбъектЗаполнения.Использование = Истина;
			Наборы.Вставить(Выборка.ОбъектЗаполнения, Набор);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);
	КонецЦикла;
	
	Для Каждого ЭлементыСтруктуры Из Наборы Цикл
		ЭлементыСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДописатьПерерасчетыВЗаполнениеПлановыхНачислений()

Процедура ОбработатьТаблицуПерерасчетов(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные,
	|	ПерерасчетыДоп.ОбъектПерерасчета КАК ОбъектПерерасчетаДополнительные
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетыДоп
	|		ПО Начисления.СторнируемыйДокумент = ПерерасчетыДоп.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = ПерерасчетыДоп.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектПерерасчета.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные,
	|	ПерерасчетыДоп.ОбъектПерерасчета КАК ОбъектПерерасчетаДополнительные
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетыДоп
	|		ПО Начисления.СторнируемыйДокумент = ПерерасчетыДоп.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = ПерерасчетыДоп.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектПерерасчета.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция получает по таблице начислений таблицу зависимых начислений
//
// Параметры
//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
//  
// Возвращаемое заначение - – <Таблица значений>
Функция ПолучитьТаблицуЗависимыхНачисленийОсновные(ТаблицаНачислений) Экспорт
	
	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат ТаблицаНачислений;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	
	// поместим таблицу значений во временную таблицу
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействия КАК ПериодДействия,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ТаблицаНачислений.Сторно
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеНачисления.ПериодРегистрации,
	|	ЗависимыеНачисления.Регистратор,
	|	ЗависимыеНачисления.ВидРасчета,
	|	ЗависимыеНачисления.ПериодДействия КАК ПериодДействия,
	|	ЗависимыеНачисления.ПериодДействияНачало,
	|	ЗависимыеНачисления.ПериодДействияКонец,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент,
	|	ЗависимыеНачисления.Результат КАК Результат,
	|	ЗависимыеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	ЗависимыеНачисления.ОтработаноДней КАК ОтработаноДней,
	|	ЗависимыеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ЗависимыеНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	ЗависимыеНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	|	ЗависимыеНачисления.НормаДней КАК НормаДней,
	|	ЗависимыеНачисления.НормаЧасов КАК НормаЧасов,
	|	ЗависимыеНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	ЗависимыеНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.ВидРасчета.БазовыйПериодПрошлыйМесяц
	|			ТОГДА ЗависимыеНачисления.БазовыйПериодНачало
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияНачало
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.ВидРасчета.БазовыйПериодПрошлыйМесяц
	|			ТОГДА ЗависимыеНачисления.БазовыйПериодКонец
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияКонец
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.ВидРасчета.БазовыйПериодПрошлыйМесяц
	|			ТОГДА НАЧАЛОПЕРИОДА(ЗависимыеНачисления.БазовыйПериодНачало, МЕСЯЦ)
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействия
	|	КОНЕЦ КАК ПериодДействияПриведенный
	|ПОМЕСТИТЬ ВТ_ЗависимыеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			(НЕ ВидРасчета В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ОсновныеНачисления.ВидРасчета
	|						ИЗ
	|							ВТ_ОсновныеНачисления КАК ОсновныеНачисления))
	|				И ВЫБОР
	|					КОГДА ВидРасчета.БазовыйПериодПрошлыйМесяц
	|						ТОГДА (Сотрудник, НАЧАЛОПЕРИОДА(БазовыйПериодНачало, МЕСЯЦ)) В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									ОсновныеНачисления.Сотрудник,
	|									ОсновныеНачисления.ПериодДействия
	|								ИЗ
	|									ВТ_ОсновныеНачисления КАК ОсновныеНачисления)
	|					ИНАЧЕ (Сотрудник, ПериодДействия) В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ОсновныеНачисления.Сотрудник,
	|								ОсновныеНачисления.ПериодДействия
	|							ИЗ
	|								ВТ_ОсновныеНачисления КАК ОсновныеНачисления)
	|				КОНЕЦ) КАК ЗависимыеНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействияПриведенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.Сторнировать > 0
	|			ТОГДА ЗависимыеНачисления.ПериодДействияНачало
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияНачалоНеСторно
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.Сторнировать > 0
	|			ТОГДА ЗависимыеНачисления.ПериодДействияКонец
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияКонецНеСторно
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ЗависимыеНачисления.Сторнировать,
	|	ЗависимыеНачисления.Начислить КАК Начислить,
	|	ЗависимыеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|	ЗависимыеНачисления.ПериодРегистрацииЗависимогоНачисления,
	|	ЗависимыеНачисления.ПериодДействия,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ЗависимыеНачисления.Результат,
	|	ЗависимыеНачисления.ОплаченоДнейЧасов,
	|	ЗависимыеНачисления.ОтработаноДней,
	|	ЗависимыеНачисления.ОтработаноЧасов,
	|	ЗависимыеНачисления.ОтработаноДнейПоПятидневке,
	|	ЗависимыеНачисления.ОтработаноЧасовПоПятидневке,
	|	ЗависимыеНачисления.НормаДней,
	|	ЗависимыеНачисления.НормаЧасов,
	|	ЗависимыеНачисления.НормаДнейПоПятидневке,
	|	ЗависимыеНачисления.НормаЧасовПоПятидневке
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|		ЗависимыеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ЗависимыеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ДатаНачала
	|				ТОГДА ЗависимыеНачисления.ДатаНачала
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияНачало
	|		КОНЕЦ КАК ПериодДействияНачалоНеСторно,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ДатаОкончания
	|				ТОГДА ЗависимыеНачисления.ДатаОкончания
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияКонец
	|		КОНЕЦ КАК ПериодДействияКонецНеСторно,
	|		СУММА(ВЫБОР
	|				КОГДА ОсновныеНачисления.Сторно
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Сторнировать,
	|		СУММА(ВЫБОР
	|				КОГДА (НЕ ОсновныеНачисления.Сторно)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Начислить,
	|		ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
	|		ЗависимыеНачисления.ПериодРегистрации КАК ПериодРегистрацииЗависимогоНачисления,
	|		ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно КАК Сторно,
	|		ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|		ЗависимыеНачисления.Организация КАК Организация,
	|		ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|		ЗависимыеНачисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|		ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|		ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|		ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|		ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|		ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|		ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ЗависимыеНачисления.Авторасчет КАК Авторасчет,
	|		ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент,
	|		ЗависимыеНачисления.Результат КАК Результат,
	|		ЗависимыеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|		ЗависимыеНачисления.ОтработаноДней КАК ОтработаноДней,
	|		ЗависимыеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ЗависимыеНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|		ЗависимыеНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	|		ЗависимыеНачисления.НормаДней КАК НормаДней,
	|		ЗависимыеНачисления.НормаЧасов КАК НормаЧасов,
	|		ЗависимыеНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|		ЗависимыеНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке
	|	ИЗ
	|		ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗависимыеНачисления КАК ЗависимыеНачисления
	|			ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|				И ОсновныеНачисления.ПериодДействия = ЗависимыеНачисления.ПериодДействияПриведенный
	|				И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ДатаОкончания
	|				И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ДатаНачала
	|				И (ЗависимыеНачисления.ПериодРегистрации < ОсновныеНачисления.ПериодРегистрации)
	|				И ((НЕ ЗависимыеНачисления.Сторно))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|			ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК Вытесняющие
	|			ПО (Вытесняющие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Вытесняющие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|	ГДЕ
	|		((НЕ Ведущие.ВидРасчета ЕСТЬ NULL )
	|				ИЛИ (НЕ Вытесняющие.ВидРасчета ЕСТЬ NULL ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗависимыеНачисления.ПериодДействияНачало,
	|		ЗависимыеНачисления.ВидРасчета,
	|		ЗависимыеНачисления.ПериодДействияКонец,
	|		ОсновныеНачисления.Сотрудник,
	|		ОсновныеНачисления.ПериодРегистрации,
	|		ОсновныеНачисления.ПериодДействия,
	|		ЗависимыеНачисления.ПериодРегистрации,
	|		ЗависимыеНачисления.БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно,
	|		ЗависимыеНачисления.ФизЛицо,
	|		ЗависимыеНачисления.Организация,
	|		ЗависимыеНачисления.ГрафикРаботы,
	|		ЗависимыеНачисления.ГрафикРаботыНорма,
	|		ЗависимыеНачисления.ВидУчетаВремени,
	|		ЗависимыеНачисления.ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение,
	|		ЗависимыеНачисления.Авторасчет,
	|		ЗависимыеНачисления.Регистратор,
	|		ЗависимыеНачисления.Показатель1,
	|		ЗависимыеНачисления.Показатель2,
	|		ЗависимыеНачисления.Показатель3,
	|		ЗависимыеНачисления.Показатель4,
	|		ЗависимыеНачисления.Показатель5,
	|		ЗависимыеНачисления.Показатель6,
	|		ЗависимыеНачисления.Результат,
	|		ЗависимыеНачисления.ОплаченоДнейЧасов,
	|		ЗависимыеНачисления.ОтработаноДней,
	|		ЗависимыеНачисления.ОтработаноЧасов,
	|		ЗависимыеНачисления.ОтработаноДнейПоПятидневке,
	|		ЗависимыеНачисления.ОтработаноЧасовПоПятидневке,
	|		ЗависимыеНачисления.НормаДней,
	|		ЗависимыеНачисления.НормаЧасов,
	|		ЗависимыеНачисления.НормаДнейПоПятидневке,
	|		ЗависимыеНачисления.НормаЧасовПоПятидневке,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ДатаНачала
	|				ТОГДА ЗависимыеНачисления.ДатаНачала
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияНачало
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ДатаОкончания
	|				ТОГДА ЗависимыеНачисления.ДатаОкончания
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияКонец
	|		КОНЕЦ) КАК ЗависимыеНачисления
	|ГДЕ
	|	(НЕ(ЗависимыеНачисления.Сторнировать > 0
	|				И ЗависимыеНачисления.Начислить > 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	СторнируемыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.Сторнировать,
	|	ОсновныеНачисления.Начислить КАК Начислить,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.БазовыйПериодНачало,
	|	ОсновныеНачисления.БазовыйПериодКонец,
	|	ОсновныеНачисления.Сторно,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ГрафикРаботыНорма,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.ПодразделениеОрганизации,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисления.ДатаНачалаСобытия,
	|	ОсновныеНачисления.ОбособленноеПодразделение,
	|	ОсновныеНачисления.Авторасчет,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Результат,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДнейПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасовПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаДнейПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаЧасовПоПятидневке
	|ИЗ
	|	ВТ_Начисления КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
	|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
	|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
	|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
	|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрацииЗависимогоНачисления)
	|			И (СторноНачисления.ПериодРегистрации <= ОсновныеНачисления.ПериодРегистрации)
	|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.СторнируемыйДокумент)
	|			И (ОсновныеНачисления.Сторнировать > 0)
	|			И (НАЧАЛОПЕРИОДА(СторноНачисления.ПериодДействияКонец, ДЕНЬ) МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.БазовыйПериодНачало,
	|	ОсновныеНачисления.БазовыйПериодКонец,
	|	ОсновныеНачисления.Сторно,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ГрафикРаботыНорма,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.ПодразделениеОрганизации,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисления.ДатаНачалаСобытия,
	|	ОсновныеНачисления.ОбособленноеПодразделение,
	|	ОсновныеНачисления.Авторасчет,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	|	ОсновныеНачисления.Сторнировать,
	|	ОсновныеНачисления.Начислить,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.Результат,
	|	ОсновныеНачисления.НормаДней,
	|	ОсновныеНачисления.НормаЧасов,
	|	ОсновныеНачисления.НормаДнейПоПятидневке,
	|	ОсновныеНачисления.ОтработаноДней,
	|	ОсновныеНачисления.ОтработаноЧасов,
	|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
	|	ОсновныеНачисления.ОплаченоДнейЧасов,
	|	ОсновныеНачисления.ОтработаноЧасовПоПятидневке,
	|	ОсновныеНачисления.НормаЧасовПоПятидневке
	|
	|ИМЕЮЩИЕ
	|	(ВЫБОР
	|				КОГДА ОсновныеНачисления.Сторнировать > 0
	|					ТОГДА -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			И ОсновныеНачисления.Сторнировать > 0
	|		ИЛИ ОсновныеНачисления.Начислить > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начислить УБЫВ,
	|	ВидРасчета,
	|	ПериодДействияНачало
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПолучитьТаблицуЗависимыхНачисленийОсновные()
// Функция получает по таблице начислений таблицу зависимых начислений
//
// Параметры
//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
//  
// Возвращаемое заначение - – <Таблица значений>
Функция ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаНачислений) Экспорт
	
	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат ТаблицаНачислений;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопНачисления.Сотрудник,
	|	ДопНачисления.ВидРасчета,
	|	ДопНачисления.ПериодРегистрации,
	|	ДопНачисления.БазовыйПериодНачало,
	|	ДопНачисления.БазовыйПериодКонец,
	|	ДопНачисления.Сторно,
	|	ДопНачисления.ФизЛицо,
	|	ДопНачисления.Организация,
	|	ДопНачисления.ГрафикРаботы,
	|	ДопНачисления.ВидУчетаВремени,
	|	ДопНачисления.Показатель1,
	|	ДопНачисления.Показатель2,
	|	ДопНачисления.Показатель3,
	|	ДопНачисления.Показатель4,
	|	ДопНачисления.Показатель5,
	|	ДопНачисления.Показатель6,
	|	ДопНачисления.ПодразделениеОрганизации,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДопНачисления.ДатаНачалаСобытия,
	|	ДопНачисления.ОбособленноеПодразделение,
	|	ДопНачисления.ЧислоМесяцев,
	|	ДопНачисления.СторнируемыйДокумент,
	|	СУММА(ДопНачисления.Результат) КАК Результат
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|		ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно КАК Сторно,
	|		ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|		ЗависимыеНачисления.Организация КАК Организация,
	|		ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|		ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|		ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|		ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|		ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|		ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|		ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ЗависимыеНачисления.ЧислоМесяцев КАК ЧислоМесяцев,
	|		ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент,
	|		-ЗависимыеНачисления.Результат КАК Результат
	|	ИЗ
	|		ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ЗависимыеНачисления
	|			ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|				И (НАЧАЛОПЕРИОДА(ЗависимыеНачисления.ПериодРегистрации, МЕСЯЦ) < ОсновныеНачисления.ПериодРегистрации)
	|				И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.БазовыйПериодКонец
	|				И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.БазовыйПериодНачало
	|				И ((НЕ ЗависимыеНачисления.Сторно))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|			ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|	ГДЕ
	|		(НЕ Ведущие.ВидРасчета ЕСТЬ NULL )) КАК ДопНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДопНачисления.Сотрудник,
	|	ДопНачисления.ВидРасчета,
	|	ДопНачисления.ПериодРегистрации,
	|	ДопНачисления.БазовыйПериодНачало,
	|	ДопНачисления.БазовыйПериодКонец,
	|	ДопНачисления.Сторно,
	|	ДопНачисления.ФизЛицо,
	|	ДопНачисления.Организация,
	|	ДопНачисления.ГрафикРаботы,
	|	ДопНачисления.ВидУчетаВремени,
	|	ДопНачисления.ПодразделениеОрганизации,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДопНачисления.ДатаНачалаСобытия,
	|	ДопНачисления.ОбособленноеПодразделение,
	|	ДопНачисления.СторнируемыйДокумент,
	|	ДопНачисления.Показатель1,
	|	ДопНачисления.Показатель2,
	|	ДопНачисления.Показатель3,
	|	ДопНачисления.Показатель4,
	|	ДопНачисления.Показатель5,
	|	ДопНачисления.Показатель6,
	|	ДопНачисления.ЧислоМесяцев";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуЗависимыхНачисленийДополнительные()

// Удаляем записи перерасчетов как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи таблиц перерасчетов
//  
Процедура УдалитьСведенияОПерерасчетеДокумента(ДокументСсылка, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	ПерерасчетыПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	ДопПерерасчетыПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	СредПерерасчетыПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	МассивИсправленныхДокументов = Новый Массив;
	ТипРегистратора = ТипЗнч(ДокументСсылка);
	Если ТипРегистратора <> Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			ПерерасчетыФизлицПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			ДопПерерасчетыФизлицПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			СредПерерасчетыФизлицПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			// выберем исправленных физлиц - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросФизлиц = Новый Запрос;
			ЗапросФизлиц.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ДополнительныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ДополнительныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ОсновныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетСреднегоЗаработка.ФизЛицо
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &Регистратор";
			ЗапросФизлиц.УстановитьПараметр("Регистратор", ДокументСсылка);
			ЗапросФизлиц.УстановитьПараметр("ИсходныйДокумент", ОбъектПерерасчета);
			МассивФизлиц = ЗапросФизлиц.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ПерерасчетыФизлицПоДокументам.Записать();
			ПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	Если ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ДопПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ДопПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ДопПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДопПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ДопПерерасчетыФизлицПоДокументам.Записать();
			ДопПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	Если СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			СредПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из СредПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СредПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			СредПерерасчетыФизлицПоДокументам.Записать();
			СредПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удаляем записи перезаполнений как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи рег-ра перезаполнений
//  
Процедура УдалитьСведенияОПерезаполненииДокумента(ДокументСсылка, СотрудникиДокумента = Неопределено, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	НаборПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
	
	Если НаборПерезаполнения.Отбор.ОбъектЗаполнения.ТипЗначения.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		
		НаборСотрудниковПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
		
		МассивИсправленныхДокументов = Новый Массив;
		
		
		ДополнительноеУсловие = ?(ДокументСсылка.Метаданные().Реквизиты.ПерерассчитываемыйДокумент.Тип.СодержитТип(Тип("ДокументСсылка.ПереносДанных")), " И (НЕ ДокументыИсправления.ПерерассчитываемыйДокумент ССЫЛКА Документ.ПереносДанных)", "");
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление" + ДополнительноеУсловие + "";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			// выберем исправленных сотрудников - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросСотрудников = Новый Запрос;
			ЗапросСотрудников.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаполнениеПлановыхНачислений.Сотрудник
			|ИЗ
			|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
			|ГДЕ
			|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ОбъектЗаполнения
			|	И (&ПоВсемСотрудникам
			|			ИЛИ ЗаполнениеПлановыхНачислений.Сотрудник В (&Сотрудники))";
			ЗапросСотрудников.УстановитьПараметр("ОбъектЗаполнения", ДокументСсылка);
			ЗапросСотрудников.УстановитьПараметр("Сотрудники", СотрудникиДокумента);
			ЗапросСотрудников.УстановитьПараметр("ПоВсемСотрудникам", СотрудникиДокумента = Неопределено);
			МассивСотрудников = ЗапросСотрудников.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ТолькоПоИсправленнымДокументам Тогда 
			Если СотрудникиДокумента = Неопределено Тогда // удалим все записи перезаполнений по самому документу
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Записать(Истина);
			Иначе // удалим записи перезаполнений по переданным сотрудникам
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Прочитать();
				Для каждого Запись Из НаборПерезаполнения Цикл
					Если СотрудникиДокумента.Найти(Запись.Сотрудник) = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(),Запись);
					КонецЕсли;
				КонецЦикла;
				НаборСотрудниковПерезаполнения.Записать(Истина);
				НаборСотрудниковПерезаполнения.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборПерезаполнения.Прочитать();
			Для каждого Запись Из НаборПерезаполнения Цикл
				Если МассивСотрудников.Найти(Запись.Сотрудник) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			НаборСотрудниковПерезаполнения.Записать(Истина);
			НаборСотрудниковПерезаполнения.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЧисло(Слово)
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

Функция ПолучитьМассивРазделителей() Экспорт
	
	МассивРазделителей = Новый Массив;
	
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	Возврат МассивРазделителей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формульные расчеты

// Функция извлекает из участка формулы, где размещен вызов ОценитьПо(),
// текст первого параметра для дальнейшей обработки
//
Функция ПараметрФункцииОценитьПо(УчастокФормулыРасчета)
	
	ПараметрФункцииОценитьПо = "";
	
	НачалоОценитьПо = Найти(ВРег(УчастокФормулыРасчета), "ОЦЕНИТЬПО");
	
	// выбираем посимвольно строку после открывающейся скобки и до запятой (разделителя параметров)
	СимволНачалаПараметра = "(";
	СимволОкончанияПараметра = ",";
	
	СобиратьСимволы = Ложь;
	
	Для НомерСимвола = НачалоОценитьПо По СтрДлина(УчастокФормулыРасчета) Цикл
		Символ = Сред(УчастокФормулыРасчета, НомерСимвола, 1);
		Если СобиратьСимволы Тогда
			Если Символ = СимволОкончанияПараметра Тогда
				СобиратьСимволы = Ложь;
				Прервать;
			КонецЕсли;
			ПараметрФункцииОценитьПо = ПараметрФункцииОценитьПо + Символ;
		Иначе
			Если Символ = СимволНачалаПараметра Тогда
				СобиратьСимволы = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрФункцииОценитьПо;
	
КонецФункции // ПараметрФункцииОценитьПо

Функция ПолучитьТекстОценитьПо(ПараметрФункцииОценитьПо, Шкала, ПустаяШкала = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеС, 0) КАК ЗначениеС,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеПо, 0) КАК ЗначениеПо,
	|	СоставШкалОценкиПоказателейРасчета.Размер
	|ИЗ
	|	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
	|ГДЕ
	|	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя = &ШкалаОценкиПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставШкалОценкиПоказателейРасчета.НомерСтрокиШкалы";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ШкалаОценкиПоказателя", Шкала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Текст = "";
	
	Если Выборка.Количество() = 0 Тогда
		ПустаяШкала = Истина;
		Возврат Текст;
	КонецЕсли;
	
	ПроцентнаяШкала = Шкала.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная;
	
	КоличествоОткрытыхСкобок = 0;
	Пока Выборка.Следующий() Цикл
		
		Если КоличествоОткрытыхСкобок > 0 Тогда
			Текст = Текст + " , ";
		КонецЕсли;
		Текст = Текст + "?(" + ПараметрФункцииОценитьПо+ " >" + Формат(Выборка.ЗначениеС,"ЧРД=.; ЧН=0; ЧГ=0") + " И " + ПараметрФункцииОценитьПо + " <="  + Формат(Выборка.ЗначениеПо,"ЧРД=.; ЧН=0; ЧГ=0") + " ," + Формат(Выборка.Размер / ?(ПроцентнаяШкала, 100, 1),"ЧРД=.; ЧН=0; ЧГ=0");
		КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок + 1;
		
	КонецЦикла;
	
	КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
	Если КоличествоОткрытыхСкобок >= 0 И Текст <> "" Тогда
		Текст = Текст + ", 0";
	КонецЕсли;
	Пока КоличествоОткрытыхСкобок > 0 Цикл
		Текст = Текст + ")";
		КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции //ПолучитьТекстОценитьПо

Процедура СообщитьОбОшибке(ОбработкаКомментариев, ТекстСообщения, Отказ)
	
	Если ТипЗнч(ОбработкаКомментариев) = Тип("ОбработкаОбъект.СообщенияВыполняемыхДействий") Тогда
		Отказ = Истина;
		ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
	Иначе
		ОбщегоНазначенияЗК.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаИФормированиеФормулыРасчета(Отказ, Показатели, МассивРазделителей, ОператорыИФункцииОднойСтрокой, ОператорыИФункции, мПеременные, ОбработкаКомментариев, ТекстФормулы, мФормулаРасчета, мФормулаРасчетаПредставление) Экспорт
	
	Если Найти(ТекстФормулы, ";") <> 0 Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке("В формуле не допустимо использование символа "";""", Отказ);
		Отказ = Истина;
	КонецЕсли;
	
	Показатели.Очистить();
	
	// установим начальные значения
	НовыйТекст								= "";
	ДлинаСтроки								= СтрДлина(ТекстФормулы);
	ДлинаСтрокиБезПробелов					= СтрДлина(СокрП(ТекстФормулы));
	Слово									= "";
	СловоСобрано							= Ложь;
	КоличествоПоказателей					= 0;
	КоличествоНеПредопределенныхПоказателей	= 0;
	мФормулаРасчета							= "";
	мФормулаРасчетаПредставление			= "";
	
	// переменные для проверки правельности ввода показателей
	БылоОценитьПО			= Ложь;
	БылоОценитьПОВЦикле		= Ложь;
	ОткрытыхСкобок			= 0;
	ЗакрытыхСкобок			= 0;
	КонечествоПарамОценитьПО= 0;
	ПервыйСимвОценитьПО		= 1;
	ПоследийСимвОценитьПО	= 1;
	НомерНеШкальногоПоказателя= 0;
	НеШкальныеПоказатели	= Новый СписокЗначений;
	
	СсылкаПоказатели		= Неопределено;
	
	// Автоматически рассчитываемые показатели не хранятся в данных, 
	// поэтому на них не распространяется ограничение (6 показателей)
	АвтоРассчитываемыеПоказатели = АвтоматическиРассчитываемыеПоказатели();
	
	// разбор слов
	Для НомерАнализируемогоСимвола = 1 По ДлинаСтроки Цикл
		
		Символ = Сред(ТекстФормулы, НомерАнализируемогоСимвола, 1);
		
		Если  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СловоСобрано Тогда
			
			НомерПоказателя = 0;
			СловоВРег = ВРег(СокрЛ(Слово));
			Если Найти(ОператорыИФункции, СловоВРег) <> 0 Или ЭтоЧисло(Слово) Тогда
				
				Если СловоВРег = "ОЦЕНИТЬПО" Тогда
					Слово					= "ОценитьПо";
					БылоОценитьПО			= Истина;
					БылоОценитьПОВЦикле		= Истина;
					ПервыйСимвОценитьПО		= СтрДлина(НовыйТекст);
					ПервыйСимвОценитьПОФорм	= СтрДлина(мФормулаРасчета);
				КонецЕсли;
				
				// функции и числа записываем 
				НовыйТекст = НовыйТекст + Слово;
				мФормулаРасчета					= мФормулаРасчета + Слово;
				мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + Слово;
				
				
			ИначеЕсли мПеременные.Получить(Слово) <> Неопределено Тогда
				
				СсылкаПоказатели = Справочники.ПоказателиСхемМотивации.НайтиПоРеквизиту("Идентификатор",Слово);
				Если СсылкаПоказатели = Справочники.ПоказателиСхемМотивации.ПустаяСсылка() Тогда
					СообщитьОбОшибке(ОбработкаКомментариев, "Не найден показатель с идентификатором """ + Слово+ """", Отказ);
					Прервать;
				КонецЕсли;
				
				// в идентификаторы показателей подставляем случайные числа, чтобы Вычислить() не упала при делении на нули
				// или при операциях с разными типами данных 				
				НовыйТекст				= НовыйТекст + СтрЗаменить(Строка(мПеременные.Получить(Слово)),",",".");
				
				Если СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
					НеШкальныйПоказательСсылка = НеШкальныеПоказатели.НайтиПоЗначению(СсылкаПоказатели);
					Если НеШкальныйПоказательСсылка = Неопределено Тогда
						НеШкальныеПоказатели.Добавить(СсылкаПоказатели);
						НомерНеШкальногоПоказателя = НеШкальныеПоказатели.Количество();
					Иначе
						НомерНеШкальногоПоказателя = Число(НеШкальныеПоказатели.Индекс(НеШкальныйПоказательСсылка) + 1);
					КонецЕсли;
					
				КонецЕсли;
				
				ПоказательИзСписка = Показатели.НайтиПоЗначению(СсылкаПоказатели);
				Если ПоказательИзСписка = Неопределено Тогда
					КоличествоПоказателей	= КоличествоПоказателей + 1;	
					Показатели.Добавить(СсылкаПоказатели);
					мФормулаРасчета					= мФормулаРасчета + "ИсходныеДанные.Показатель"+КоличествоПоказателей;
					мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + "ИсходныеДанные.Показатель"+КоличествоПоказателей;
					
					Если АвтоРассчитываемыеПоказатели.Найти(СсылкаПоказатели) = Неопределено Тогда
						КоличествоНеПредопределенныхПоказателей = КоличествоНеПредопределенныхПоказателей + 1;
					КонецЕсли;
					
				Иначе
					НомерП = Число(Показатели.Индекс(ПоказательИзСписка) + 1);
					мФормулаРасчета					= мФормулаРасчета + "ИсходныеДанные.Показатель"+НомерП;
					мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + "ИсходныеДанные.Показатель"+НомерП;
				КонецЕсли;
				
				НомерПоказателя			= КоличествоПоказателей;
				
				// проверим правильность ввода показателей
				Если КоличествоНеПредопределенныхПоказателей > 6 Тогда
					СообщитьОбОшибке(ОбработкаКомментариев, "Количество не предопределенных показателей не может быть больше 6!", Отказ);
					Прервать;
				КонецЕсли;
				
			Иначе
				// а это уже что-то непонятное, такие вещи вводить мы не договаривались ...
				СообщитьОбОшибке(ОбработкаКомментариев, "Неопознанный показатель, оператор или функция: """ + Слово+ """", Отказ);
				Прервать;
			КонецЕсли;
			
			Если МассивРазделителей.Найти(Символ) <> Неопределено или  Найти(ОператорыИФункцииОднойСтрокой, Символ) <> 0 Тогда	
				
				Если БылоОценитьПОВЦикле Тогда
					Если Символ = "(" Тогда
						ОткрытыхСкобок = ОткрытыхСкобок + 1;
					ИначеЕсли Символ = ")" Тогда
						ЗакрытыхСкобок = ЗакрытыхСкобок + 1;
						Если ЗакрытыхСкобок = ОткрытыхСкобок Тогда			// Проверим, является ли показатель шкалой
							ПоследийСимвОценитьПО = НомерАнализируемогоСимвола+19;
							Если СсылкаПоказатели <> Неопределено Тогда
								Если СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И
									СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
									СообщитьОбОшибке(ОбработкаКомментариев, "Показатель №" + КоличествоПоказателей +" должен быть шкалой оценки!", Отказ);
									Прервать;
								ИначеЕсли Показатели.Количество() > 1 Тогда
									ПоказательШкала = СсылкаПоказатели;
									ПустаяШкала = Ложь;
									ТекстОценитьПо = ПолучитьТекстОценитьПо(ПараметрФункцииОценитьПо(Сред(мФормулаРасчета, ПервыйСимвОценитьПоФорм,ПоследийСимвОценитьПо)), ПоказательШкала, ПустаяШкала);
									Если ПустаяШкала Тогда
										СообщитьОбОшибке(ОбработкаКомментариев, "В качестве показателя №" + НомерПоказателя +" выбрана пустая оценочная шкала", Отказ);
									КонецЕсли;
									ЛеваяЧастьФормулы = Лев(мФормулаРасчета, ПервыйСимвОценитьПОФорм);
									мФормулаРасчета = ЛеваяЧастьФормулы + ТекстОценитьПо;
									НовыйТекст = Лев(НовыйТекст, ПервыйСимвОценитьПО) + СтрЗаменить(ТекстОценитьПо, "ИсходныеДанные.Показатель","");
								КонецЕсли;
								Если ДлинаСтрокиБезПробелов <> НомерАнализируемогоСимвола Тогда
									БылоОценитьПОВЦикле			= Ложь;
								КонецЕсли;
								ОткрытыхСкобок			= 0;
								ЗакрытыхСкобок			= 0;
								КонечествоПарамОценитьПО= 0;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли Символ = "," Тогда
						КонечествоПарамОценитьПО = КонечествоПарамОценитьПО + 1;
						Если КонечествоПарамОценитьПО > 1 Тогда
							СообщитьОбОшибке(ОбработкаКомментариев, "Количество параметров в функции ОценитьПо() не должно быть больше двух!", Отказ);
							Прервать;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли НомерПоказателя > 0 Тогда
					Если СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
						СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				НовыйТекст						= НовыйТекст + Символ;
				мФормулаРасчета					= мФормулаРасчета + Символ;
				мФормулаРасчетаПредставление	= мФормулаРасчетаПредставление + Символ;
			КонецЕсли;
			
			// сбросим все флаги
			Слово			= "";
			СловоСобрано	= Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// проверим не является ли последний показатель шкалой оценки 
	Если Не БылоОценитьПО И НовыйТекст <> "" И СсылкаПоказатели <> Неопределено Тогда
		Если СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
			СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
			СообщитьОбОшибке(ОбработкаКомментариев, "Показатель №" + КоличествоПоказателей +" не может быть шкалой оценки!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		// проверка формулы на прочие непредвиденные ошибки
		Если ЗначениеЗаполнено(НовыйТекст) Тогда
			Попытка
				Результат = Вычислить(НовыйТекст);
			Исключение
				СообщитьОбОшибке(ОбработкаКомментариев, "Ошибка в формуле расчета! " + ОписаниеОшибки(), Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// проверим нужа ли подмена базовых показателей
	ДелатьПодменуПоказателей		= Ложь;
	ЕстьПредопределенные			= Ложь;
	ЕстьНеПредопределенные			= Ложь;
	ЕстьНеПредопределенныеПослеПред	= Ложь;
	СчПоказателей = Показатели.Количество()-1;
	Пока СчПоказателей >= 0 Цикл
		Предопределенный = Показатели[СчПоказателей].Значение.Предопределенный;
		Если ЕстьПредопределенные И Не ЕстьНеПредопределенные Тогда
			ЕстьНеПредопределенныеПослеПред = (ЕстьНеПредопределенныеПослеПред Или Не Предопределенный) И ЕстьПредопределенные;
		ИначеЕсли ЕстьНеПредопределенные И Предопределенный Тогда
			// не все предопределенные показатели находятся в конце, нужно переносить их в конец и проверять не был ли изменён состав показателей
			ДелатьПодменуПоказателей = Истина;
			Прервать;
		КонецЕсли;
		ЕстьПредопределенные = ЕстьПредопределенные Или Предопределенный;
		ЕстьНеПредопределенные	= ЕстьНеПредопределенные Или Не Предопределенный;
		Если ЕстьНеПредопределенныеПослеПред И Предопределенный Тогда
			// не все предопределенные показатели находятся в конце, нужно переносить их в конец и проверять не был ли изменён состав показателей
			ДелатьПодменуПоказателей = Истина;
			Прервать;
		КонецЕсли;
		СчПоказателей = СчПоказателей - 1;
	КонецЦикла;
	
	Если ДелатьПодменуПоказателей Тогда
		// подменим номера базовым показателям
		НомераПредопределенныхПоказателей	= Новый Массив;	
		НомераПоказателей					= Новый Массив;	
		Для Сч = 1 По Показатели.Количество() Цикл	
			СсылкаПоказатели =Показатели[Сч-1].Значение;
			Если СсылкаПоказатели.Предопределенный И (СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная и 
				СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая И СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) Тогда
				НомераПредопределенныхПоказателей.Добавить(Сч);
			Иначе
				НомераПоказателей.Добавить(Сч);
			КонецЕсли;
		КонецЦикла;
		ЗаменяемНаПоказатель		= Показатели.Количество() + 1;
		НомераПоказателейКоличество	= НомераПоказателей.Количество();
		Для Каждого НомерПредопределенногоПоказателя Из НомераПредопределенныхПоказателей Цикл
			Если НомераПоказателейКоличество > 0 Тогда
				
				НомераПоказателей_Минус1 = НомераПоказателей[НомераПоказателейКоличество-1]-1;
				
				Показатель 														= Показатели[НомераПоказателей_Минус1];
				Показатель_1													= Показатели[НомерПредопределенногоПоказателя-1];
				Показатели.Удалить(НомераПоказателей_Минус1);
				Показатели.Вставить(НомераПоказателей_Минус1, Показатель_1.Значение,Показатель_1.Значение);
				Показатели.Удалить(НомерПредопределенногоПоказателя-1);
				Показатели.Вставить(НомерПредопределенногоПоказателя-1, Показатель.Значение, Показатель.Значение);
				
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1],"ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель);
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя,"ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1]);
				мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель,"ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя);
				
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1],"ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель);
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя,"ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1]);
				мФормулаРасчетаПредставление = СтрЗаменить(мФормулаРасчетаПредставление, "ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель,"ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя);
				
				НомераПоказателейКоличество = НомераПоказателейКоличество - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции //ПроверкаИФормированиеФормулыРасчета

Функция ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Показатели, Режим, ВыводитьИдентификатор = Ложь) Экспорт
	
	Числа = "0123456789";
	
	
	ОператорыИФункции				=  ".,+,-,/,*,ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,?,=,<,>,<=,>=,ОЦЕНИТЬПО,(,),И,ИЛИ,НЕ,OR,AND,NOT";
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)";
	
	МассивРазделителей = Новый Массив;
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	СловоСобрано		= Ложь;
	НайденПоказатель	= Ложь;
	
	Слово = "";
	
	ДлинаСтроки					= СтрДлина(ФормулаРасчета);
	НовыйHTMLКодФормулыРасчета	= "";
	
	
	// разбор слов
	НомерАнализируемогоСимвола = 1;
	Пока НомерАнализируемогоСимвола <= ДлинаСтроки Цикл
		
		Символ = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
		
		Если Символ = "." И Слово = "ИсходныеДанные" и Сред(ФормулаРасчета, НомерАнализируемогоСимвола+1, 10) = "Показатель" Тогда
			
			
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 10;
			НомерПоказателя = "";
			ШагВнутриЦикла = 0;
			ПродолжитьЦикл = Истина;
			Пока ПродолжитьЦикл Цикл
				
				НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
				СимволДляСравненияСЧислом = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
				Если Найти(Числа, СимволДляСравненияСЧислом) <> 0 Тогда
					НомерПоказателя = НомерПоказателя + СимволДляСравненияСЧислом;
					ПродолжитьЦикл  = (НомерАнализируемогоСимвола <= ДлинаСтроки);
				Иначе
					ПродолжитьЦикл = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Режим = "Текст" Тогда
				Если Показатели.Количество() >= Число(НомерПоказателя) Тогда
					Если ВыводитьИдентификатор Тогда
						ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель.Идентификатор);
					Иначе
						ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель);
					КонецЕсли;
				Иначе
					Возврат НовыйHTMLКодФормулыРасчета;
				КонецЕсли;
			Иначе
				Если Показатели.Количество() >= Число(НомерПоказателя) Тогда
					ПоказательДляФормулы = "<FONT color=#0000ff>" + Строка(Показатели[Число(НомерПоказателя) - 1].Показатель)+"</FONT>";
				Иначе
					Возврат НовыйHTMLКодФормулыРасчета;
				КонецЕсли;
			КонецЕсли;
			
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + ПоказательДляФормулы;
			
			НайденПоказатель = Истина;
			
			Слово = "";
			
		ИначеЕсли  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
			НайденПоказатель = Ложь;
			Слово = Слово + Символ;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			НайденПоказатель = Ложь;
		КонецЕсли;
		
		Если СловоСобрано И Не НайденПоказатель Тогда
			//	ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + Слово;
			СловоСобрано = Ложь;
			Слово = "";
		КонецЕсли;
		
		Если НЕ НайденПоказатель Тогда
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйHTMLКодФормулыРасчета;
	
КонецФункции //ПолучитьHTLMКодФормулыРасчета

// Формирует текстовую интерпретацию формулы по способу расчета и показателям для отображения
// на экране.
//
// Параметры
//  Объект - ПланВидовРасчетаОбъект для ПВР УправленческиеНачисления или УправленческиеУдержания
//	Режим - "Текст" - формула выводится в виде текста, "HTML" - в виде HTML кода, по умолчанию = "Текст"
// Возвращаемое значение:
//   Строка   – содержит текстовую интерпретацию формулы расчета.
//
Функция ВизуализироватьФормулуРасчета(Объект, Режим = "Текст", ЭтоРегламентированныеУдержания = Ложь) Экспорт
	
	СпособРасчета = Объект.СпособРасчета;
	
	Если Режим = "HTML" Тогда
		
		
		СтрокаФормулы ="
		|	<HTML><HEAD>
		|	</HEAD>
		|	<BODY vlink=#000 link=#000 scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1>
		|";
		
	КонецЕсли;
	
	ОписаниеСпособаРасчета = ПроведениеРасчетовПереопределяемый.ПолучитьОписаниеДополнительногоСпособа(СпособРасчета, Режим);
	Если ЗначениеЗаполнено(ОписаниеСпособаРасчета) Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ОписаниеСпособаРасчета;
		Иначе
			СтрокаФормулы = СтрокаФормулы + ОписаниеСпособаРасчета
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Или
		СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, до удержания указанной в документе суммы";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сдельная выработка>";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Сдельная выработка</FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<0>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = 0"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Пособие по уходу за ребенком до 3х лет>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Пособие по уходу за ребенком до 3х лет</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ""+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.Наименование + " * Время в днях"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в часах</FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		ОписаниеПроцента = ?(ЭтоРегламентированныеУдержания,"<Процент удержаний>","<Процент оплаты>");
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ОписаниеПроцента + " * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>" + ОписаниеПроцента + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Расчетная база</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений Тогда
		ОписаниеПроцента = ?(ЭтоРегламентированныеУдержания,"<Процент удержаний>","<Процент оплаты>");
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ОписаниеПроцента + " * <Доход, облагаемый ЕСН в части Федерального бюджета>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>" + ОписаниеПроцента + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Доход, облагаемый ЕСН в части Федерального бюджета</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент сбора> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент сбора</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Сумма по исполнительному листу</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.БанковскиеИздержки Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Тариф банка> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Тариф банка</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Сумма по исполнительному листу</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>)"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000> * </FONT> (<FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT>)"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Доля в процентах> * <Величина прожиточного минимума>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Доля в процентах</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff><Величина прожиточного минимума></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>), до удержания указанной в документе суммы"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff><Процент удержаний></FONT> <FONT color=#FF0000> * </FONT> <FONT color=#FF0000>(</FONT><FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT><FONT color=#FF0000>)</FONT>, до удержания указанной в документе суммы"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Процент доплаты> * <Вечернее время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Вечернее время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Процент доплаты> * <Ночное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Ночное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной (часовой) заработок> * <Время в днях (часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний дневной (часовой) заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в днях (часах)</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной заработок> * <Время в календарных днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний дневной заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в календарных днях</FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний месячный заработок> * (40% * Количество детей, но не более 100%) / <Число календарных дней в месяце> * <Число календарных дней выплаты пособия>, с учетом минимального и максимального размеров пособия на каждого ребёнка"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний месячный заработок</FONT> <FONT color=#FF0000> * (</FONT> 40% <FONT color=#FF0000> * </FONT><FONT color=#0000ff>Количество детей</FONT>, но не более 100% <FONT color=#FF0000>) / </FONT> <FONT color=#0000ff>Число календарных дней в месяце</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Число календарных дней выплаты пособия</FONT> , с учетом минимального и максимального размеров пособия на каждого ребёнка"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной заработок> * <Время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний дневной заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "> / <Норма времени за месяц в днях> * <Время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ee>Норма времени за месяц в днях</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в днях</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "> / <Норма времени за месяц в часах> * <Время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала дневной тарифной ставки> * <Время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала дневной тарифной ставки</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в днях</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в днях> * <Время в днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала месячной тарифной ставки</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ff>Норма времени за месяц в днях</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в днях</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала часовой тарифной ставки> * <Время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала часовой тарифной ставки</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала месячной тарифной ставки>  / <Норма времени за месяц в часах> * <Время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала месячной тарифной ставки</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Стаж> оценить по <Шкала процентов оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Стаж</FONT> оценить по <FONT color=#0000ff>Шкала процентов оплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Расчетная база</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Северный стаж> оценить по <Шкала надбавок> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Северный стаж</FONT> оценить по <FONT color=#0000ff>Шкала надбавок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Расчетная база</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок> - <Начислено>, <0>)";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Максимум</FONT><FONT color=#FF0000>(</FONT><FONT color=#0000ff>Средний заработок</FONT><FONT color=#FF0000> - </FONT><FONT color=#0000ff>Начислено</FONT> <FONT color=#FF0000>,</FONT> 0<FONT color=#FF0000>)</FONT>"		
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок, исчисленный по правилам ФСС> - <Начислено>, <0>)";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Максимум</FONT><FONT color=#FF0000>(</FONT><FONT color=#0000ff>Средний заработок, исчисленный по правилам ФСС</FONT><FONT color=#FF0000> - </FONT><FONT color=#0000ff>Начислено</FONT> <FONT color=#FF0000>,</FONT> 0<FONT color=#FF0000>)</FONT>"		
		КонецЕсли;
	ИначеЕсли Объект.ПроизвольнаяФормулаРасчета Тогда
		
		ФормулаРасчета	= Объект.ФормулаРасчетаПредставление;
		
		ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ПроведениеРасчетов.", "");
		
		СимволыДляЗамены = "/=-+*()?<,";
		
		Если Режим = "Текст" Тогда
			
			// заменим подставим вместо ИсходныеДанные.ПоказательN нужные показатели
			СтрокаФормулы = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		Иначе
			
			НоваяФормулаРасчета = "";
			Для НомерСимвола = 1 По СтрДлина(ФормулаРасчета) Цикл
				Символ = Сред(ФормулаРасчета,НомерСимвола,1);
				Если Найти(СимволыДляЗамены,Символ) > 0 Тогда
					НоваяФормулаРасчета = НоваяФормулаРасчета + "<FONT color=#FF0000>" + Символ + "</FONT>"; 
				Иначе
					НоваяФормулаРасчета = НоваяФормулаРасчета + Символ;
				КонецЕсли;
			КонецЦикла;	
			
			ФормулаРасчета = НоваяФормулаРасчета;
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " NOT ", "<FONT color=#FF0000> NOT </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " OR ", "<FONT color=#FF0000> OR </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " AND ", "<FONT color=#FF0000> AND </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " И ", "<FONT color=#FF0000> И </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " ИЛИ ", "<FONT color=#FF0000> ИЛИ </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " НЕ ", "<FONT color=#FF0000> НЕ </FONT>"); 
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " not ", "<FONT color=#FF0000> not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " or ", "<FONT color=#FF0000> or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " and ", "<FONT color=#FF0000> and </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " и ", "<FONT color=#FF0000> и </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " или ", "<FONT color=#FF0000> или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " не ", "<FONT color=#FF0000> не </FONT>");
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Not ", "<FONT color=#FF0000> Not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Or ", "<FONT color=#FF0000> Or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " And ", "<FONT color=#FF0000> And </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Или ", "<FONT color=#FF0000> Или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Не ", "<FONT color=#FF0000> Не </FONT>");		
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Цел", "<FONT color=#0000ff>Цел</FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Окр", "<FONT color=#0000ff>Окр</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Макс", "<FONT color=#0000ff>Макс</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Мин", "<FONT color=#0000ff>Мин</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "ОценитьПо", "<FONT color=#0000ff>ОценитьПо</FONT>");		
			
			СтрокаФормулы = СтрокаФормулы + "Результат = " +  ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		КонецЕсли;
	Иначе
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ""	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|</font></HTML>"
		КонецЕсли;
	КонецЕсли;
	
	Если Режим = "HTML" Тогда
				
		СтрокаФормулы = СтрокаФормулы + "
		|</font></HTML>"

	КонецЕсли;
	
    Возврат СтрокаФормулы;		
	
КонецФункции // ВизуализироватьФормулуРасчета()

Функция АвтоматическиРассчитываемыеПоказатели()
	
	АвтоРассчитываемыеПоказатели = Новый Массив;
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.КалендарныхДнейВмесяце);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВДнях);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБаза);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.СдельнаяВыработка);
	АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.Стаж);
	
	ПроведениеРасчетовПереопределяемый.ДополнитьМассивАвтоматическиРассчитываемыхПоказателей(АвтоРассчитываемыеПоказатели);
	
	Возврат АвтоРассчитываемыеПоказатели;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Законодательство

// Возвращает список кодов дохода, не требующих ни ввода вычетов, ни исчисления налога по ставкам 9% или 35%
//
// Параметры
//  нет
//
// Возвращаемое значение:
//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ 
//
Функция ПолучитьСписокКодовДоходаОсновныхНачислений() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.Представление
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	ДоходыНДФЛ.СтавкаНалогообложенияРезидента = &СтавкаНалогообложенияРезидента
	|	И (НЕ ДоходыНДФЛ.Ссылка В (&ЧастичноОблагаемыеДоходы))");
	
	СписокКодовДохода = Новый Массив;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2761);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2720);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2730);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2740);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2760);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2770);
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2790);
	Запрос.УстановитьПараметр("ЧастичноОблагаемыеДоходы",СписокКодовДохода);
	Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	
	СписокКодовДохода = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКодовДохода.Добавить(Выборка.Ссылка,Выборка.Представление);
	КонецЦикла;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка(),"");
	Возврат СписокКодовДохода;
	
КонецФункции // ПолучитьСписокКодовДоходаТребующихДополнительнойОбработки()

// Возвращает список кодов дохода, облагаемых по ставке 13%
//
// Параметры
//  нет
//
// Возвращаемое значение:
//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ 
//
Функция ПолучитьСписокКодовДоходаДополнительныхНачислений() Экспорт 
	
	СписокКодовДохода = Новый СписокЗначений;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.Представление
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	ДоходыНДФЛ.СтавкаНалогообложенияРезидента = &СтавкаНалогообложенияРезидента");
	
	Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента",Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);					  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКодовДохода.Добавить(Выборка.Ссылка,Выборка.Представление);
	КонецЦикла;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка(),"");
	
	Возврат СписокКодовДохода
	
КонецФункции // ПолучитьСписокКодовДоходаДопНачисленийТребующихДополнительнойОбработки()

// Возвращает список видов государственных единовременных пособий за счет ФСС
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления РазмерыГосударственныхПособий
//
Функция ПолучитьСписокРасходовПоСоцСтрахованию() Экспорт
	
	СписокПособий = Новый СписокЗначений;
	
	Для каждого ЗначениеПеречисления Из Перечисления.ВидыПособийСоциальногоСтрахования Цикл
		Если ЗначениеПеречисления = Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет 
			Или ЗначениеПеречисления = Перечисления.ВидыПособийСоциальногоСтрахования.ПриУсыновленииРебенка Тогда
			Продолжить;
		КонецЕсли;
		СписокПособий.Добавить(ЗначениеПеречисления)
	КонецЦикла; 
	
	Возврат СписокПособий
	
КонецФункции

// Процедура заполняет список вычетов и список допустимых кодов дохода
// в зависимости от вида договора.
//
Процедура ЗаполнитьСпискиКодовДоходовВычетовПоДоговорам(СписокВычетов, СписокАвторскихВознаграждений, ВидДоговора, ВидАвторскогоДоговора) Экспорт
	
	МассивВычетов = Новый Массив;
	СписокВычетов.Очистить();
	СписокАвторскихВознаграждений.Очистить();
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		
		МассивВычетов.Добавить(Справочники.ВычетыНДФЛ.Код403);
		
		СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2010);
		СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
		СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка());
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		
		МассивВычетов.Добавить(Справочники.ВычетыНДФЛ.Код404);
		МассивВычетов.Добавить(Справочники.ВычетыНДФЛ.Код405);
		
		Если ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.АвторскогоЗаказа Тогда
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2201);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2202);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2203);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2204);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2205);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2206);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2207);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2208);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2209);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2210);
		Иначе
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2210);
			СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код1300);
			Код1301 = Справочники.ДоходыНДФЛ.НайтиПоКоду("1301");
			Если ЗначениеЗаполнено(Код1301) Тогда
				СписокАвторскихВознаграждений.Добавить(Код1301);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Код,
	|	ВычетыНДФЛ.Наименование,
	|	ВычетыНДФЛ.Ссылка
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	ВычетыНДФЛ.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивВычетов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВычетов.Добавить(Выборка.Ссылка, СокрЛП(Выборка.Код) +" " + Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСпискиКодовДоходовВычетов()

////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//  ИмяДокумента - имя соответствующего объекта метаданных
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументИсправление(ДокументСсылка = Неопределено, Режим = Неопределено, ИмяДокумента = Неопределено, ИмяРеквизита = "ПерерассчитываемыйДокумент") Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если Режим = Неопределено Тогда
		Режим = ?(ДокументСсылка.Метаданные().Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента")	
	КонецЕсли;
	
	Если Режим = "КритерийОтбора" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	КритерийОтбора.ДокументыИсправления(&ИсходныйДокумент) КАК ДокументыИсправления
		|";
	ИначеЕсли Режим = "ТаблицаДокумента" Тогда
		Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
			ИмяДокумента = ДокументСсылка.Метаданные().Имя;
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления." + ИмяРеквизита + " = &ИсходныйДокумент";
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	Результат = Запрос.Выполнить();
	
	Если Режим = "КритерийОтбора" Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка
		Иначе
			Возврат Неопределено
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументСторнирование(ДокументСсылка = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыИсправления.Ссылка
	|ИЗ
	|	Документ.Сторнирование КАК ДокументыИсправления
	|ГДЕ
	|	ДокументыИсправления.СторнируемыйДокумент = &ИсходныйДокумент";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Документы.Сторнирование.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

// Определяет, можно ли изменять документ "задним числом", т.е. проверяет
//   отсутствие исправлений и сторнирований.
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  ОписаниеПричиныОтказа - переменная, куда возвращается описание проблемы
//
// Возвращаемое значение:
//  булево
//
Функция ДокументНельзяИзменятьЗаднимЧислом(ДокументСсылка = Неопределено, ОписаниеПричиныОтказа = "") Экспорт 
	
	ОписаниеПричиныОтказа = "";
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументИсправление(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был исправлен, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был сторнирован, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

// Выбирает из документов-исправлений сотрудников и помещает их в соответствие
//
// Параметры
//  ТекстЗапроса - строка. содержит текст запроса выора сотрудников
//  ДокументыИсправления - массив документов-исправлений
//  ИмяПоля - строка, имя поля запроса, содержащего сотрудника
//  ИмяПараметра - строка, имя параметра запроса, содержащего документы-исправления
//
// Возвращаемое значение:
//   Соответствие с сотрудниками документов исправлений
//
Функция СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса = "", ДокументыИсправления = Неопределено, ИмяПоля = "Сотрудник", ИмяПараметра = "Исправления") Экспорт
	
	Сотрудники = Новый Соответствие;
	
	Если ПустаяСтрока(ТекстЗапроса) Или Не ЗначениеЗаполнено(ДокументыИсправления) Тогда
		Возврат	Сотрудники
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр(ИмяПараметра,ДокументыИсправления);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сотрудники.Вставить(Выборка[ИмяПоля], Истина);
	КонецЦикла;
	
	Возврат Сотрудники
	
КонецФункции // СформироватьСоответствиеСотрудниковСИсправлениями()

// Обработчик подписки ПередЗаписьюДокументаИсправление
// 
Процедура ПередЗаписьюДокументаПроверкаИсправленногоДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Источник.Метаданные().Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
			ИмяРеквизита = "ИсправляемыйДокумент";
		Иначе
			ИмяРеквизита = "ПерерассчитываемыйДокумент";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолучитьДокументИсправление(Источник.Ссылка, , , ИмяРеквизита)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был исправлен, проведение документа запрещено!";
			Иначе
				ТекстСообщенияОбОшибке = "Документ был исправлен, отмена проведения документа запрещена!";
			КонецЕсли;
			ОбщегоНазначенияЗК.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
			
		ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(Источник.Ссылка)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был сторнирован, проведение документа запрещено!";
			Иначе
				ТекстСообщенияОбОшибке = "Документ был сторнирован, отмена проведения документа запрещена!";
			КонецЕсли;
			ОбщегоНазначенияЗК.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопированииДокументаИсправления(Источник, ОбъектКопирования) Экспорт
	
	Если Источник.Метаданные().Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
		ИмяРеквизита = "ИсправляемыйДокумент";
	Иначе
		ИмяРеквизита = "ПерерассчитываемыйДокумент";
	КонецЕсли;
	
	Источник[ИмяРеквизита] = Неопределено;
	
КонецПроцедуры

// Создает набор записей регистра, описание объекта метаданных которого передано
//
// Параметры
//  Движение - Объект метаданных, описывающий регистр, по которому производится движение
//
// Возвращаемое значение:
//   новый набор записей переданного регистра
//
Функция НаборЗаписейПоОбъектуМетаданных(Движение)
	
	НаборЗаписей = Неопределено;
	
	Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
		НаборЗаписей = РегистрыСведений[Движение.Имя].СоздатьНаборЗаписей();
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
		НаборЗаписей = РегистрыНакопления[Движение.Имя].СоздатьНаборЗаписей();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции // НаборДвиженийДокумента()


// Читает движения переданного документа, сохраняет их в соответствие,  
//  а затем очищает
//
// Параметры
//  ДокументСсылка - ДокументСсылка.<ИмяИсправляемогоДокумента>, исправляемый документ, 
//					чьи движения будут исправлены
//  СоответствиеДвижений - соответствие, в этот параметр возвращаются удаленные движения
//  Сотрудники, ФизЛица - соответствия, содержат сотрудников, физлиц, по которым следует  
//                  отбирать движения
//
// Возвращаемое значение:
//   нет
//
Процедура ОбработатьДвиженияИсправляемогоДокумента(ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено, Сотрудники = Неопределено, ФизЛица = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат
	КонецЕсли;
	
	Если СоответствиеДвижений = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");
	
	Если Режим = "ПоНесколькимСотрудникам" Тогда
		
		Если Не ЗначениеЗаполнено(Сотрудники) Тогда
			Возврат
		КонецЕсли;
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			Если Движение.Измерения.Найти("Сотрудник") <> Неопределено Или Движение.Реквизиты.Найти("Сотрудник") <> Неопределено Тогда
				МассивПроверки = Сотрудники;
				ИмяПоля = "Сотрудник";
			ИначеЕсли Движение.Измерения.Найти("ФизЛицо") <> Неопределено Или Движение.Реквизиты.Найти("ФизЛицо") <> Неопределено Тогда
				МассивПроверки = ФизЛица;
				ИмяПоля = "ФизЛицо";
			Иначе 
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура(ИмяПоля);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			
			НаборЗаписей.Прочитать();
			ВременнаяТЗ = НаборЗаписей.Выгрузить();
			СохраненныеДвижения = СоответствиеДвижений.Получить(Движение.Имя);
			Если СохраненныеДвижения <> Неопределено Тогда
				Для Каждого Строка Из СохраненныеДвижения Цикл
					ЗаполнитьЗначенияСвойств(ВременнаяТЗ.Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 26.09.2011 15:31 
			// ОПИСАНИЕ: удаляем из движений первичного больничного листа запись о том, что сотрудник по окончании
			//           периода работает, если был зарегистрирован второй больничный лист.
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.AVT_РегистрацияБольничныхЛистов") И 
				Движение.Ресурсы.Найти("Состояние") <> Неопределено Тогда
				СтруктураПоиска.Вставить("Состояние", Перечисления.СостоянияРаботникаОрганизации.Работает);
			ИначеЕсли СтруктураПоиска.Свойство("Состояние") Тогда
				СтруктураПоиска.Удалить("Состояние");
			КонецЕсли;
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
			УдаляемыеДвижения = ВременнаяТЗ.СкопироватьКолонки();
			Для каждого ОбъектПроверки Из МассивПроверки Цикл
				СтруктураПоиска[ИмяПоля] = ОбъектПроверки;
				МассивДвижений = ВременнаяТЗ.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаТЗ Из МассивДвижений Цикл
					ЗаполнитьЗначенияСвойств(УдаляемыеДвижения.Добавить(),СтрокаТЗ);
					ВременнаяТЗ.Удалить(СтрокаТЗ);
				КонецЦикла;
			КонецЦикла;
			СоответствиеДвижений.Вставить(Движение.Имя,УдаляемыеДвижения);
			НаборЗаписей.Загрузить(ВременнаяТЗ);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	ИначеЕсли Режим = "ПоОдномуСотруднику" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Прочитать();
			СоответствиеДвижений.Вставить(Движение.Имя,НаборЗаписей.Выгрузить());
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДвиженияИсправляемогоДокумента()

// Восстанавливает движения для переданного документа из переданного соответствия
//
Процедура ВосстановитьДвиженияИсправляемогоДокумента(ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат
	КонецЕсли;
	
	Если СоответствиеДвижений = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");	
	
	Если Режим = "ПоНесколькимСотрудникам" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВременнаяТЗ = СоответствиеДвижений[Движение.Имя];
			Если ВременнаяТЗ <> Неопределено Тогда
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
				Для каждого СтрокаТЗ Из ВременнаяТЗ Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
				КонецЦикла;
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Режим = "ПоОдномуСотруднику" Тогда
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			НаборЗаписей = НаборЗаписейПоОбъектуМетаданных(Движение);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Загрузить(СоответствиеДвижений[Движение.Имя]);
			НаборЗаписей.Записать(Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьДвиженияИсправляемогоДокумента()

// Заполняет документ-исправление по исходному кадровому документу
//
Процедура ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ЭтотОбъект.ИсправляемыйДокумент = ИсходныйДокумент;
	
	МД = ИсходныйДокумент.Метаданные();
	
	МассивНепереносимыхРеквизитов = Новый Массив;
	МассивНепереносимыхРеквизитов.Добавить("Проведен");
	МассивНепереносимыхРеквизитов.Добавить("Номер");
	МассивНепереносимыхРеквизитов.Добавить("Дата");
	МассивНепереносимыхРеквизитов.Добавить("ПометкаУдаления");
	МассивНепереносимыхРеквизитов.Добавить("Комментарий");
	МассивНепереносимыхРеквизитов.Добавить("Ответственный");
	МассивНепереносимыхРеквизитов.Добавить("КраткийСоставДокумента");
	МассивНепереносимыхРеквизитов.Добавить("ДанныеПрошлойВерсии");
	МассивНепереносимыхРеквизитов.Добавить("ИсправляемыйДокумент");
	МассивНепереносимыхРеквизитов.Добавить("ДвиженияИсправляемогоДокумента");
	
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из МД.Реквизиты Цикл
		Имя = Реквизит.Имя;
		Если МассивНепереносимыхРеквизитов.Найти(Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Реквизиты.Добавить(Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",	ИсходныйДокумент);
	Текст = "";
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Не ПустаяСтрока(Текст) Тогда
			Текст = Текст + ",";
		КонецЕсли;
		Текст = Текст + "
		|	Док." + Реквизит + " КАК " + Реквизит;
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|"+Текст+"
	|ИЗ
	|	Документ." + МД.Имя + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ИсходныйДокумент
	|	И Док.Проведен";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники",			Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам",	Сотрудники = Неопределено);
	
	Для Каждого МДТабличнаяЧасть Из МД.ТабличныеЧасти Цикл
		ЗаписиСторнируются	= МДТабличнаяЧасть.Реквизиты.Найти("Сторно") <> Неопределено;
		ЕстьСотрудник		= МДТабличнаяЧасть.Реквизиты.Найти("Сотрудник") <> Неопределено;
		
		РеквизитыТЧ = Новый Массив;
		Для Каждого РеквизитТЧ Из МДТабличнаяЧасть.Реквизиты Цикл
			Имя = РеквизитТЧ.Имя;
			Если Имя = "Сторно" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыТЧ.Добавить(Имя);
		КонецЦикла;
		
		Текст = "";
		Для Каждого РеквизитТЧ Из РеквизитыТЧ Цикл
			Текст = Текст + "
			|	Док." + РеквизитТЧ + " КАК " + РеквизитТЧ + ",";
		КонецЦикла;
		ТекстЗапроса =
		"ВЫБРАТЬ"+Текст+"
		|	Док.НомерСтроки
		|ПОМЕСТИТЬ ВТДок
		|ИЗ
		|	Документ." + МД.Имя + "." + МДТабличнаяЧасть.Имя + " КАК Док
		|ГДЕ
		|	Док.Ссылка = &ИсходныйДокумент
		|	И Док.Ссылка.Проведен
		|	" + ?(ЗаписиСторнируются, "И (НЕ Док.Сторно)", "") + "
		|	" + ?(ЕстьСотрудник, "И (&ПоВсемСотрудникам ИЛИ Док.Сотрудник В (&Сотрудники))", "") + "
		|;";
		
		Если ЗаписиСторнируются Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ИСТИНА КАК Сторно,
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЛОЖЬ,
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сторно УБЫВ,
			|	Док.НомерСтроки";
			
		Иначе
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Док.*
			|ИЗ
			|	ВТДок КАК Док
			|
			|УПОРЯДОЧИТЬ ПО
			|	Док.НомерСтроки";
			
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
		ЭтотОбъект[МДТабличнаяЧасть.Имя].Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ЭтотОбъект.ИсправляемыйДокумент.Пустая() Тогда
		Сотрудники	= Новый Массив;
		Физлица		= Новый Массив;
		Если ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти("РаботникиОрганизации") = Неопределено Тогда
			Сотрудники.Добавить(ЭтотОбъект.Сотрудник);
			Физлица.Добавить(ЭтотОбъект.Физлицо);
			
		Иначе
			МассивСтрок = ЭтотОбъект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сторно", Истина));
			Для Каждого Строка Из МассивСтрок Цикл
				Если Сотрудники.Найти(Строка.Сотрудник) = Неопределено Тогда
					Сотрудники.Добавить(Строка.Сотрудник);
				КонецЕсли;
				Если Физлица.Найти(Строка.Физлицо) = Неопределено Тогда
					Физлица.Добавить(Строка.Физлицо);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений = Неопределено Тогда
			СоответствиеДвижений = Новый Соответствие;
		КонецЕсли;
		ОбработатьДвиженияИсправляемогоДокумента(ЭтотОбъект.ИсправляемыйДокумент, СоответствиеДвижений, Сотрудники, Физлица);
		
		ЭтотОбъект.ДвиженияИсправляемогоДокумента = Новый ХранилищеЗначения(СоответствиеДвижений);
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений <> Неопределено Тогда
			ЭтотОбъект.ДвиженияИсправляемогоДокумента	= Неопределено;
			
			Если ЭтотОбъект.ИсправляемыйДокумент.Пустая() Тогда
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("ДокументСсылка",	ЭтотОбъект.Ссылка);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Док.ИсправляемыйДокумент
				|ИЗ
				|	Документ." + ЭтотОбъект.Метаданные().Имя + " КАК Док
				|ГДЕ
				|	Док.Ссылка = &ДокументСсылка";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ИсправляемыйДокумент = Выборка.ИсправляемыйДокумент;
					ВосстанавливатьДвижения		= Истина;
				КонецЕсли;
				
			Иначе
				ИсправляемыйДокумент = ЭтотОбъект.ИсправляемыйДокумент;
				ВосстанавливатьДвижения		= Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеКадровогоДокументаПриЗаписи(Отказ, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений) Экспорт
	
	Если ВосстанавливатьДвижения Тогда
		ВосстановитьДвиженияИсправляемогоДокумента(ИсправляемыйДокумент, СоответствиеДвижений);
		ВосстанавливатьДвижения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ КОНТРОЛЯ ПЕРИОДИЧЕСКИХ ВЫПЛАТ

Функция ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка, ДанныеДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// Проверка в форме выполняется в ПередЗаписью, поэтому ссылки еще нет, 
	//  используем ДанныеДокумента, при проведении - используем ссылку
	
	Если ДанныеДокумента <> Неопределено Тогда
		
		ТекстЗапроса =  "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокумента.ДатаНачала КАК ПериодНачисления,
		|	ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ДанныеДокумента.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ДанныеДокумента КАК ДанныеДокумента";
		
		Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
		
	Иначе		
		
		НаименованиеДокумента = Ссылка.Метаданные().Имя;
		
		Если НаименованиеДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
			
			ТекстЗапроса =  "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПериодНачисленияДатаНачала КАК ПериодНачисления,
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник КАК Сотрудник,
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка = &Ссылка
			|	И (НЕ НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сторно)";
			
		ИначеЕсли НаименованиеДокумента = "ПремииРаботниковОрганизаций" Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПремииРаботниковОрганизацийНачисления.Ссылка.ДатаНачалаБП КАК ПериодНачисления,
			|	ПремииРаботниковОрганизацийНачисления.Сотрудник КАК Сотрудник,
			|	ПремииРаботниковОрганизацийНачисления.Ссылка.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
			|ГДЕ
			|	ПремииРаботниковОрганизацийНачисления.Ссылка = &Ссылка
			|	И (НЕ ПремииРаботниковОрганизацийНачисления.Сторно)";
			
		ИначеЕсли НаименованиеДокумента = "РегистрацияРазовыхНачисленийРаботниковОрганизаций" Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.ПериодРегистрации КАК ПериодНачисления,
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сотрудник КАК Сотрудник,
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления
			|ГДЕ
			|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка = &Ссылка
			|	И (НЕ РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сторно)";
			
		Иначе
			
			ПроведениеРасчетовПереопределяемый.ДополнитьТекстЗапросаНабораПериодическихВыплат(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВГод)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, ГОД)
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВКвартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, КВАРТАЛ)
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВМесяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодНачисления,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ВидРасчета,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|		ПО ДанныеДокумента.ВидРасчета = ДополнительныеНачисленияОрганизаций.Ссылка
	|ГДЕ
	|	(НЕ ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления В (ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.НеОпределена), ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.ПустаяСсылка)))";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка) Экспорт
	
	Движения.ПериодическиеНачисления.Загрузить(ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка));
	
КонецПроцедуры

Функция ИменаПВРПоОдномуИзВР(ПВРСсылка)
	
	ИменаПВР = Новый Массив;
	ИменаПВР.Добавить("ОсновныеНачисленияОрганизаций");
	ИменаПВР.Добавить("ДополнительныеНачисленияОрганизаций");
	ИменаПВР.Добавить("УдержанияОрганизаций");
	
	МассивыИменПВРПоТипу = Новый Соответствие;
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), ИменаПВР);
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), ИменаПВР);
	МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), ИменаПВР);
	
	ПроведениеРасчетовПереопределяемый.ДополнитьСоответствиеИменПВРПоТипу(МассивыИменПВРПоТипу);
	
	Возврат МассивыИменПВРПоТипу[ТипЗнч(ПВРСсылка)];
	
КонецФункции // ИменаПВРПоОдномуИзВР

Функция ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВР)
	
	ТекстЗапроса = "";
	НомерПВР = 0;
	Пока НомерПВР < ИменаПВР.Количество() Цикл
		Если НомерПВР > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Ссылка КАК ВидРасчета,
		|	Показатель КАК Показатель,
		|	ЗапрашиватьПриКадровыхПеремещениях КАК ЗапрашиватьПриКадровыхПеремещениях";
		Если НомерПВР = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ПоказателиВидаРасчета";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	ПланВидовРасчета." + ИменаПВР[НомерПВР] + ".Показатели
		|";
		
		НомерПВР = НомерПВР + 1;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета,
	|	Показатель
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета

Функция СформироватьЗапросСвойствПоказателейВидовРасчета(ПоказателиФормулы, ПВРСсылка, ЭтоОсновноеНачисление)
	
	ТекстЗапроса = ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВРПоОдномуИзВР(ПВРСсылка));
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиВидовРасчета.Показатель
	|ПОМЕСТИТЬ ПоказателиУжеЗапрашиваются
	|ИЗ
	|	ПоказателиВидаРасчета КАК ПоказателиВидовРасчета
	|ГДЕ
	|	ПоказателиВидовРасчета.ВидРасчета <> &Ссылка
	|	И ПоказателиВидовРасчета.Показатель В(&ПоказателиФормулы)
	|	И ПоказателиВидовРасчета.ЗапрашиватьПриКадровыхПеремещениях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка КАК Показатель,
	|	ВЫБОР
	|		КОГДА ПоказателиСхемМотивации.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|				И (НЕ ПоказателиСхемМотивации.ТипПоказателя В (ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая), ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)))
	|			ТОГДА ВЫБОР
	|					КОГДА ПоказателиСхемМотивации.ТарифнаяСтавка
	|							ИЛИ ПоказателиСхемМотивации.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая))
	|						ТОГДА &ЭтоОсновноеНачисление
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПоказателиСхемМотивации.Ссылка В
	|										(ВЫБРАТЬ
	|											ПоказателиУжеЗапрашиваются.Показатель
	|										ИЗ
	|											ПоказателиУжеЗапрашиваются)
	|									И (НЕ ЕСТЬNULL(ПоказателиВидаРасчета.ЗапрашиватьПриКадровыхПеремещениях, ЛОЖЬ))
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|		ПО ПоказателиСхемМотивации.Ссылка = ПоказателиВидаРасчета.Показатель
	|			И (ПоказателиВидаРасчета.ВидРасчета = &Ссылка)
	|ГДЕ
	|	ПоказателиСхемМотивации.Ссылка В(&ПоказателиФормулы)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПоказателиФормулы", ПоказателиФормулы);
	Запрос.УстановитьПараметр("Ссылка", ПВРСсылка);
	Запрос.УстановитьПараметр("ЭтоОсновноеНачисление", ЭтоОсновноеНачисление);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросСвойствПоказателейВидовРасчета

Процедура ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, ПоказателиФормулы)
	
	Если Объект.Метаданные().Реквизиты.Найти("ЗачетОтработанногоВремени") <> Неопределено Тогда
		ЭтоОсновноеНачисление = Объект.ЗачетОтработанногоВремени;
	Иначе
		ЭтоОсновноеНачисление = Ложь;
	КонецЕсли;
	
	Выборка = СформироватьЗапросСвойствПоказателейВидовРасчета(ПоказателиФормулы, Объект.Ссылка, ЭтоОсновноеНачисление).Выбрать();
	
	Объект.Показатели.Очистить();
	Для Каждого ПоказательФормулы Из ПоказателиФормулы Цикл
		Выборка.Сбросить();
		Выборка.НайтиСледующий(ПоказательФормулы, "Показатель");
		ЗаполнитьЗначенияСвойств(Объект.Показатели.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуПоказателейВидаРасчета

// Процедура обеспечивает ввод формульных начислений и удержаний
//
Процедура УстановитьПараметрыВидаРасчета(Параметр, Объект, Элементыформы) Экспорт
	
	Объект.ФормулаРасчета				= Параметр[0];
	Объект.ФормулаРасчетаПредставление	= Параметр[2];
	Объект.СпособРасчета 				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	Объект.ПроизвольнаяФормулаРасчета	= Истина;
	
	ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, Параметр[1]);
	
	Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ПроведениеРасчетов.ВизуализироватьФормулуРасчета(Объект, "HTML", Объект.Метаданные().Имя = "УдержанияОрганизаций"));
	
КонецПроцедуры // УстановитьПараметрыВидаРасчета

// Процедура контролирует признак Запрашивать у показателей произвольной формулы так, 
// чтобы один и тот же показатель не мог быть запрошен в разных видах расчета одновременно, 
// так как это может привести к разным значениям одного и того же показателя
// Исключения составляют виды расчета, в которых этот признак уже был установлен ранее
//
Процедура ПроверитьУстановкуПризнакаЗапрашивать(ПВРОбъект, Отказ, ОбработкаКомментариев) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.ЗапрашиватьПриКадровыхПеремещениях КАК ЗапрашиватьПриКадровыхПеремещениях
	|ПОМЕСТИТЬ ПоказателиСхемМотивации
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВРПоОдномуИзВР(ПВРОбъект.Ссылка));
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Показатель КАК Показатель,
	|	ПоказателиУжеЗапрашиваются.ВидРасчета
	|ИЗ
	|	ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК ПоказателиУжеЗапрашиваются
	|		ПО ПоказателиСхемМотивации.Показатель = ПоказателиУжеЗапрашиваются.Показатель
	|			И (ПоказателиУжеЗапрашиваются.ЗапрашиватьПриКадровыхПеремещениях)
	|			И (ПоказателиУжеЗапрашиваются.ВидРасчета <> &Ссылка)
	|ГДЕ
	|	ПоказателиСхемМотивации.ЗапрашиватьПриКадровыхПеремещениях
	|	И (НЕ ПоказателиСхемМотивации.Показатель В
	|				(ВЫБРАТЬ
	|					ПоказателиВидаРасчета.Показатель
	|				ИЗ
	|					ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|				ГДЕ
	|					ПоказателиВидаРасчета.ВидРасчета = &Ссылка
	|					И ПоказателиВидаРасчета.ЗапрашиватьПриКадровыхПеремещениях))
	|ИТОГИ ПО
	|	Показатель";
	
	// ошибкой является установка признака запрашивать для уже запрашиваемых в других видах расчета показателей, 
	// если этот признак не был установлен ранее
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ПВРОбъект.Ссылка);
	Запрос.УстановитьПараметр("Показатели", ПВРОбъект.Показатели.Выгрузить(, "Показатель, ЗапрашиватьПриКадровыхПеремещениях"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоПоказателям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоказателям.Следующий() Цикл
			
			ОбработкаКомментариев.ДобавитьСообщение("Показатель формулы расчета " + ВыборкаПоПоказателям.Показатель + " уже запрашивается в нижеперечисленных видах расчета:", Перечисления.ВидыСообщений.Раздел);
			Выборка = ВыборкаПоПоказателям.Выбрать();
			Пока Выборка.Следующий() Цикл
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Строка(Выборка.ВидРасчета), Выборка.ВидРасчета));	
				ОбработкаКомментариев.ДобавитьСообщение("", Перечисления.ВидыСообщений.ПустаяСсылка(), Расшифровки);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУстановкуПризнакаЗапрашивать

////////////////////////////////////////////////////////////////////////////////

Функция ДанныеДляПромежуточногоРасчетаНДФЛ(Физлица, ДанныеДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбособленноеПодразделение",		ДанныеДокумента.ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ПериодРегистрации",				ДанныеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация",					ДанныеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Ссылка",							ДанныеДокумента.Ссылка);
	Запрос.УстановитьПараметр("Дата",							ДанныеДокумента.Дата);
	Запрос.УстановитьПараметр("Физлица",						Физлица);
	Запрос.УстановитьПараметр("ДатаИзмененияИсчисленияДляИностранцев", ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛСведенияОДоходах.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|ГДЕ
	|	НДФЛСведенияОДоходах.КодДохода <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &ПериодРегистрации
	|	И НДФЛСведенияОДоходах.ФизЛицо В(&Физлица)
	|	И НДФЛСведенияОДоходах.Организация = &Организация
	|	И НДФЛСведенияОДоходах.ЗарегистрированоДляПромежуточногоРасчета
	|	И НДФЛСведенияОДоходах.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И НДФЛСведенияОДоходах.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Сведения.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев
	|			ТОГДА НАЧАЛОПЕРИОДА(Сведения.МесяцНалоговогоПериода, МЕСЯЦ)
	|		ИНАЧЕ Сведения.МесяцНалоговогоПериода
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	Сведения.ФизЛицо,
	|	СУММА(Сведения.Налог) КАК Налог,
	|	Сведения.ПодразделениеОрганизации
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК Сведения
	|ГДЕ
	|	Сведения.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|	И Сведения.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	|	И Сведения.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И Сведения.ФизЛицо В(&Физлица)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Сведения.МесяцНалоговогоПериода < &ДатаИзмененияИсчисленияДляИностранцев
	|			ТОГДА НАЧАЛОПЕРИОДА(Сведения.МесяцНалоговогоПериода, МЕСЯЦ)
	|		ИНАЧЕ Сведения.МесяцНалоговогоПериода
	|	КОНЕЦ,
	|	Сведения.ФизЛицо,
	|	Сведения.ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПодразделениеОрганизации,
	|	СУММА(НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПримененныйВычет) КАК ПримененныйВычет,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета
	|ИЗ
	|	РегистрНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК НДФЛПредоставленныеСтандартныеВычетыФизЛиц
	|ГДЕ
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|	И НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо В(&Физлица)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПодразделениеОрганизации,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДФЛИмущественныеВычетыФизлиц.Период,
	|	НДФЛИмущественныеВычетыФизлиц.ФизЛицо,
	|	НДФЛИмущественныеВычетыФизлиц.ПодразделениеОрганизации,
	|	СУММА(НДФЛИмущественныеВычетыФизлиц.Размер),
	|	НДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
	|ГДЕ
	|	НДФЛИмущественныеВычетыФизлиц.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|	И НДФЛИмущественныеВычетыФизлиц.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДФЛИмущественныеВычетыФизлиц.ФизЛицо В(&Физлица)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛИмущественныеВычетыФизлиц.ФизЛицо,
	|	НДФЛИмущественныеВычетыФизлиц.ПодразделениеОрганизации,
	|	НДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный,
	|	НДФЛИмущественныеВычетыФизлиц.Период";
	Результаты = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Налоги,Вычеты",Результаты[1].Выгрузить(),Результаты[2].Выгрузить())
	
КонецФункции

Процедура ВписатьПромежуточныйНДФЛвДокумент(ТЧпоНДФЛ, ДанныеНДФЛ, ДатаПолученияДохода, ВсеМесяцыПолученияДохода) Экспорт
	
	Если ДанныеНДФЛ.Колонки.Найти("МесяцНалоговогоПериодаДляПоиска") = Неопределено Тогда
		ДанныеНДФЛ.Колонки.Добавить("МесяцНалоговогоПериодаДляПоиска", Новый ОписаниеТипов("Дата"));
		Для каждого СтрокаДанных Из ДанныеНДФЛ Цикл
			Если ЗначениеЗаполнено(СтрокаДанных.МесяцНалоговогоПериода) Тогда
				СтрокаДанных.МесяцНалоговогоПериодаДляПоиска = НачалоМесяца(СтрокаДанных.МесяцНалоговогоПериода)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийПериод = НачалоМесяца(ДатаПолученияДохода);
	ТекущийНДФЛ = ДанныеНДФЛ.Скопировать(ДанныеНДФЛ.НайтиСтроки(Новый Структура("МесяцНалоговогоПериодаДляПоиска",ТекущийПериод)));
	ТекущийНДФЛВсего = ТекущийНДФЛ.Итог("Налог");
	Если ТекущийНДФЛВсего < 0 Тогда // произошел перерасчет обязательств текущего периода из-за изменения данных "задним" числом
		Возврат
	КонецЕсли;
	Для каждого СтрокаДанных Из ТекущийНДФЛ Цикл
		ЗаполнитьЗначенияСвойств(ТЧпоНДФЛ.Добавить(), СтрокаДанных);
	КонецЦикла;
	ДанныеНДФЛ.Сортировать("МесяцНалоговогоПериода Убыв");
	Для каждого СтрокаДанных Из ДанныеНДФЛ Цикл  // налоги предыдущих периодов добавляем в пределах положительного налога текущего периода, не допуская возврата налога
		Если ВсеМесяцыПолученияДохода.Найти(СтрокаДанных.МесяцНалоговогоПериодаДляПоиска) <> Неопределено Тогда
			Если СтрокаДанных.МесяцНалоговогоПериодаДляПоиска = ТекущийПериод Тогда
				Продолжить;
			КонецЕсли;
			Если ТекущийНДФЛВсего + СтрокаДанных.Налог >= 0 Тогда
				Если СтрокаДанных.Налог <> 0 Или СтрокаНДФЛСодержитСуммыВычетов(СтрокаДанных) Тогда
					ЗаполнитьЗначенияСвойств(ТЧпоНДФЛ.Добавить(), СтрокаДанных);
				КонецЕсли;
				ТекущийНДФЛВсего = ТекущийНДФЛВсего + СтрокаДанных.Налог;
			ИначеЕсли ТекущийНДФЛВсего > 0 Тогда
				НоваяСтрока = ТЧпоНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
				НоваяСтрока.Налог = - ТекущийНДФЛВсего;
				ТекущийНДФЛВсего = 0
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросПоЗачтеннымАвансам(Ссылка, ВыборкаПоШапкеДокумента, ИмяТаблицы, ЭтоДокументНаОдногоСотрудника)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ГОД(СтрокиНДФЛ.МесяцНалоговогоПериода) КАК Год,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	&ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(СтрокиНДФЛ.ПодразделениеОрганизации.Владелец, СтрокиНДФЛ.Ссылка.Организация) КАК ОбособленноеПодразделение,
	|	СтрокиНДФЛ.ЗачтеноАвансовыхПлатежей КАК Сумма,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|	И СтрокиНДФЛ.ЗачтеноАвансовыхПлатежей <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ЭтоДокументНаОдногоСотрудника Тогда
		Запрос.УстановитьПараметр("ФизЛицо", ВыборкаПоШапкеДокумента.ФизЛицо);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФизЛицо", "СтрокиНДФЛ.ФизЛицо");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НачислениеОтпускаРаботникамОрганизаций", ИмяТаблицы);
	
	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ЗапросПоВычетамПоНДФЛ(Ссылка, ВыборкаПоШапкеДокумента, ИмяТаблицы, ЭтоДокументНаОдногоСотрудника)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	&ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетей,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенка,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенка,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойнойОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойнойВторойОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенкаОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенкаОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйРасход,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидов,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов,
	|	СтрокиНДФЛ.ПримененныйВычетРасходыНаСвоеОбучение,
	|	СтрокиНДФЛ.ПримененныйВычетРасходыНаОбучениеДетей,
	|	СтрокиНДФЛ.ПримененныйВычетРасходыНаЛечение,
	|	СтрокиНДФЛ.ПримененныйВычетСтраховыеВзносыНаМедУслуги,
	|	СтрокиНДФЛ.ПримененныйВычетРасходыНаДорогостоящееЛечение,
	|	СтрокиНДФЛ.ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СтрокиНДФЛ.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА СтрокиНДФЛ.ПодразделениеОрганизации.Владелец
	|				ИНАЧЕ СтрокиНДФЛ.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация
	|			КОНЕЦ <> ВЫБОР
	|				КОГДА СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА СтрокиНДФЛ.Ссылка.Организация
	|				ИНАЧЕ СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаУказанияПодразделения,
	|	ЕСТЬNULL(СтрокиНДФЛ.ПодразделениеОрганизации.Владелец, СтрокиНДФЛ.Ссылка.Организация) КАК ОбособленноеПодразделение
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ЭтоДокументНаОдногоСотрудника Тогда
		Запрос.УстановитьПараметр("ФизЛицо", ВыборкаПоШапкеДокумента.ФизЛицо);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФизЛицо", "СтрокиНДФЛ.ФизЛицо");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НачислениеОтпускаРаботникамОрганизаций", ИмяТаблицы);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоЛичнымВычетам(Ссылка, ВыборкаПоШапкеДокумента, ИмяТаблицы, ЭтоДокументНаОдногоСотрудника)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СтрокиНДФЛ.Ссылка.Организация
	|		ИНАЧЕ СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	&ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	СтрокиНДФЛ.Ссылка.Организация
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|	И СтрокиНДФЛ.ПримененныйВычетЛичный <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.НомерСтроки КАК НомерСтроки,
	|	ВычетыФизлиц.КодВычетаЛичный КАК КодВычетаЛичный
	|ПОМЕСТИТЬ ВТКодыЛичныхВычетов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		Периоды.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ВТДанныеДокумента КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО Периоды.МесяцНалоговогоПериода >= ВычетыФизлиц.Период
	|				И Периоды.ФизЛицо = ВычетыФизлиц.Физлицо
	|	ГДЕ
	|		Периоды.ПримененныйВычетЛичный <> 0
	|		И ВычетыФизлиц.КодВычетаЛичный <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.НомерСтроки) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ДатыРегистра.ФизЛицо = ВычетыФизлиц.Физлицо
	|			И ДатыРегистра.ПериодСреза = ВычетыФизлиц.Период
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ГОД(ДанныеДокумента.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	СУММА(ДанныеДокумента.ПримененныйВычетЛичный) КАК ПримененныйВычетСторно,
	|	МАКСИМУМ(ДанныеДокумента.МесяцНалоговогоПериода) КАК МаксимальныйМесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТОтрицательныеВычетыЗаГод
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО ДанныеДокумента.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ГОД(ДанныеДокумента.МесяцНалоговогоПериода)
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеДокумента.ПримененныйВычетЛичный) < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод КАК НалоговыйПериод,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета,
	|	СУММА(НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПримененныйВычет) КАК РанееПримененныйВычет
	|ПОМЕСТИТЬ ВТУжеПредоставленныеВычеты
	|ИЗ
	|	ВТОтрицательныеВычетыЗаГод КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК НДФЛПредоставленныеСтандартныеВычетыФизЛиц
	|		ПО ДанныеДокумента.ФизЛицо = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо
	|			И ДанныеДокумента.ГоловнаяОрганизация = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Организация
	|			И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.МаксимальныйМесяцНалоговогоПериода, ГОД) И КОНЕЦПЕРИОДА(ДанныеДокумента.МаксимальныйМесяцНалоговогоПериода, МЕСЯЦ))
	|ГДЕ
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета В (ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105))
	|	И НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Регистратор <> &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод,
	|	ДанныеДокумента.ПримененныйВычетСторно,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТЕстьРанееПредоставленныеВычеты
	|ИЗ
	|	ВТОтрицательныеВычетыЗаГод КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУжеПредоставленныеВычеты КАК СтандартныеВычеты
	|		ПО ДанныеДокумента.ФизЛицо = СтандартныеВычеты.ФизЛицо
	|			И ДанныеДокумента.НалоговыйПериод = СтандартныеВычеты.НалоговыйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод,
	|	ДанныеДокумента.ПримененныйВычетСторно
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтандартныеВычеты.РанееПримененныйВычет) >= -ДанныеДокумента.ПримененныйВычетСторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО СтрокиНДФЛ.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕстьРанееПредоставленныеВычеты КАК СторнируемыеВычеты
	|		ПО СтрокиНДФЛ.ФизЛицо = СторнируемыеВычеты.ФизЛицо
	|			И (ГОД(СтрокиНДФЛ.МесяцНалоговогоПериода) = СторнируемыеВычеты.НалоговыйПериод)
	|ГДЕ
	|	СторнируемыеВычеты.ФизЛицо ЕСТЬ NULL 
	|	И ВычетыФизлиц.КодВычетаЛичный ЕСТЬ NULL 
	|	И СтрокиНДФЛ.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	ВычетыФизлиц.КодВычетаЛичный КАК КодВычетаЛичный,
	|	СтрокиНДФЛ.ФизЛицо,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	ЕСТЬNULL(СтрокиНДФЛ.ПодразделениеОрганизации.Владелец, СтрокиНДФЛ.Организация) КАК ОбособленноеПодразделение
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО СтрокиНДФЛ.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СторнируемыеВычеты.ФизЛицо КАК ФизЛицо,
	|	СторнируемыеВычеты.НалоговыйПериод КАК НалоговыйПериод,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(СтрокиНДФЛ.ПримененныйВычетЛичный) КАК ПримененныйВычетЛичный,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	ЕСТЬNULL(СтрокиНДФЛ.ПодразделениеОрганизации.Владелец, СтрокиНДФЛ.Организация) КАК ОбособленноеПодразделение
	|ИЗ
	|	ВТЕстьРанееПредоставленныеВычеты КАК СторнируемыеВычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ПО (ГОД(СтрокиНДФЛ.МесяцНалоговогоПериода) = СторнируемыеВычеты.НалоговыйПериод)
	|			И СторнируемыеВычеты.ФизЛицо = СтрокиНДФЛ.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СторнируемыеВычеты.ФизЛицо,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	СторнируемыеВычеты.НалоговыйПериод,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	ЕСТЬNULL(СтрокиНДФЛ.ПодразделениеОрганизации.Владелец, СтрокиНДФЛ.Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУжеПредоставленныеВычеты.ФизЛицо КАК ФизЛицо,
	|	ВТУжеПредоставленныеВычеты.НалоговыйПериод КАК НалоговыйПериод,
	|	ВТУжеПредоставленныеВычеты.КодВычета,
	|	ВТУжеПредоставленныеВычеты.РанееПримененныйВычет
	|ИЗ
	|	ВТУжеПредоставленныеВычеты КАК ВТУжеПредоставленныеВычеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод";
	
	Если ЭтоДокументНаОдногоСотрудника Тогда
		Запрос.УстановитьПараметр("ФизЛицо", ВыборкаПоШапкеДокумента.ФизЛицо);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФизЛицо", "СтрокиНДФЛ.ФизЛицо");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НачислениеОтпускаРаботникамОрганизаций", ИмяТаблицы);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции 

// Проверяет правильность заполнения реквизитов в строке ТЧ "НДФЛ" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""НДФЛ"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ОшибкаУказанияПодразделения Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанное подразделение относится к другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры 

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокиВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписейСтандартныхВычетов = Неопределено, НаборЗаписейИмущественныхВычетов = Неопределено)
	Если НаборЗаписейСтандартныхВычетов <> Неопределено Тогда
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетей <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетей, Справочники.ВычетыНДФЛ.Код101);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойной <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойной, Справочники.ВычетыНДФЛ.Код102);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойнойВторой <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойнойВторой, Справочники.ВычетыНДФЛ.Код111);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенка <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенка, Справочники.ВычетыНДФЛ.Код116);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаДвойной <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаДвойной, Справочники.ВычетыНДФЛ.Код120);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой, Справочники.ВычетыНДФЛ.Код124);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенка <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенка, Справочники.ВычетыНДФЛ.Код115);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаДвойной <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаДвойной, Справочники.ВычетыНДФЛ.Код119);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаДвойнойВторой <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаДвойнойВторой, Справочники.ВычетыНДФЛ.Код123);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидов, Справочники.ВычетыНДФЛ.Код106);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойной <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойной, Справочники.ВычетыНДФЛ.Код107);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойнойВторой <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойнойВторой, Справочники.ВычетыНДФЛ.Код113);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейОпекунов, Справочники.ВычетыНДФЛ.Код130);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойнойОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойнойОпекунов, Справочники.ВычетыНДФЛ.Код135);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойнойВторойОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойнойВторойОпекунов, Справочники.ВычетыНДФЛ.Код143);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаОпекунов, Справочники.ВычетыНДФЛ.Код131);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов, Справочники.ВычетыНДФЛ.Код137);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов, Справочники.ВычетыНДФЛ.Код145);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаОпекунов, Справочники.ВычетыНДФЛ.Код132);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов, Справочники.ВычетыНДФЛ.Код139);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов, Справочники.ВычетыНДФЛ.Код147);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовОпекунов, Справочники.ВычетыНДФЛ.Код117о);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов, Справочники.ВычетыНДФЛ.Код121о);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов, Справочники.ВычетыНДФЛ.Код125о);
		КонецЕсли;
	КонецЕсли;
	Если НаборЗаписейИмущественныхВычетов <> Неопределено Тогда
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйРасход <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйРасход, Справочники.ВычетыНДФЛ.Код311);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйПроцентыПоКредитам <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйПроцентыПоКредитам, Справочники.ВычетыНДФЛ.Код312);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании, Справочники.ВычетыНДФЛ.Код318);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетРасходыНаСвоеОбучение <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетРасходыНаСвоеОбучение, Справочники.ВычетыНДФЛ.Код320о);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетРасходыНаОбучениеДетей <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетРасходыНаОбучениеДетей, Справочники.ВычетыНДФЛ.Код321);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетРасходыНаЛечение <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетРасходыНаЛечение, Справочники.ВычетыНДФЛ.Код324);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетСтраховыеВзносыНаМедУслуги <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетСтраховыеВзносыНаМедУслуги, Справочники.ВычетыНДФЛ.Код325);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетРасходыНаДорогостоящееЛечение <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетРасходыНаДорогостоящееЛечение, Справочники.ВычетыНДФЛ.Код326);
		КонецЕсли;
		Если ВыборкаПоСтрокамДокумента.ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни <> 0 Тогда
			ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни, Справочники.ВычетыНДФЛ.Код329);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

// По строке выборок из результатов запроса по документу формируем движения по регистрам вычетов по НДФЛ
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ШапкаДокумента		- выборка по данным шапки документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ЭтоСтандартныйВычет, НаборЗаписей, ПримененныйВычет, КодВычета)
	
	Движение = НаборЗаписей.Добавить();
	Если ЭтоСтандартныйВычет Тогда
		
		
		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		
		// Измерения
		Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		Движение.КодВычета	 	 	  		= КодВычета;
		
		// Ресурсы
		Движение.ПримененныйВычет			= ПримененныйВычет;
	Иначе
		
		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		Движение.Год					    = Год(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.КодВычетаИмущественный     = КодВычета;
		
		// Ресурсы
		Движение.Размер						= ПримененныйВычет; 
		
		// Реквизиты 
		Движение.МесяцРегистрации			= ?(ВыборкаПоШапкеДокумента.Дата > КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации), КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации), НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
		
	КонецЕсли;
	
	// Измерения
	Движение.Организация	 	   		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ФизЛицо	 	 	  		= ВыборкаПоСтрокамДокумента.ФизЛицо;
	// Реквизиты 
	Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОбособленноеПодразделение;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	
КонецПроцедуры 

Процедура ДобавитьСтрокуЛичногоВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписейСтандартныхВычетов, КодВычетаЛичный = Неопределено, СуммаВычета = Неопределено)
	
	Если КодВычетаЛичный = Неопределено Тогда
		КодВычетаЛичный = ВыборкаПоСтрокамДокумента.КодВычетаЛичный
	КонецЕсли;
	Если СуммаВычета = Неопределено Тогда
		СуммаВычета = ВыборкаПоСтрокамДокумента.ПримененныйВычетЛичный
	КонецЕсли;
	Если ЗначениеЗаполнено(КодВычетаЛичный) Тогда
		ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, СуммаВычета, КодВычетаЛичный);
	КонецЕсли;
	
КонецПроцедуры 

Процедура СформироватьПредоставленныеВычетыПоНДФЛ(ДокументОбъект, ВыборкаПоШапкеДокумента, ЭтоДокументНаОдногоСотрудника, Отказ, Заголовок) Экспорт 
	
	Ссылка = ДокументОбъект.Ссылка;
	ИмяТаблицы = ДокументОбъект.Метаданные().Имя;
	
	////////////////////////////////////////////////////////////////////////
	// личный вычет по НДФЛ
	
	МассивРезультатов = ЗапросПоЛичнымВычетам(Ссылка, ВыборкаПоШапкеДокумента, ИмяТаблицы, ЭтоДокументНаОдногоСотрудника);
	
	СтрокиБезКодов = МассивРезультатов[5];
	Если Не СтрокиБезКодов.Пустой() Тогда
		Отказ = Истина;
		ВыборкаПоНДФЛ = СтрокиБезКодов.Выбрать();
		Пока ВыборкаПоНДФЛ.Следующий() Цикл 
			Если ВыборкаПоНДФЛ.ПримененныйВычетЛичный > 0 Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В строке номер """+ СокрЛП(ВыборкаПоНДФЛ.НомерСтроки) +
				""" табл. части ""НДФЛ"": для указанного физического лица не зарегистрировано право на предоставление личного вычета!", Отказ, Заголовок);
				
			Иначе
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В строке номер """+ СокрЛП(ВыборкаПоНДФЛ.НомерСтроки) +
				""" табл. части ""НДФЛ"": для указанного физического лица сторнируется не начисленная ранее сумма личного вычета!", Отказ, Заголовок);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ВыборкаПоНДФЛ = МассивРезультатов[6].Выбрать();
		Пока ВыборкаПоНДФЛ.Следующий() Цикл 
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуЛичногоВычетаПоНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, ДокументОбъект.Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц);
		КонецЦикла;
		ВыборкаПоНДФЛ = МассивРезультатов[7].Выбрать();
		ТаблицаВычетов = МассивРезультатов[8].Выгрузить();
		СтруктураПоиска = Новый Структура("ФизЛицо","НалоговыйПериод");
		Пока ВыборкаПоНДФЛ.СледующийПоЗначениюПоля("ФизЛицо") Цикл 
			Пока ВыборкаПоНДФЛ.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл 
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаПоНДФЛ);
				СтрокиВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
				Пока ВыборкаПоНДФЛ.Следующий() Цикл 
					ОстатокВычета = ВыборкаПоНДФЛ.ПримененныйВычетЛичный;
					Пока (ОстатокВычета < 0) И (СтрокиВычетов.Количество()) Цикл
						СуммаВычета = -Мин(-ВыборкаПоНДФЛ.ПримененныйВычетЛичный, СтрокиВычетов[0].РанееПримененныйВычет);
						ДобавитьСтрокуЛичногоВычетаПоНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, ДокументОбъект.Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц,СтрокиВычетов[0].КодВычета,СуммаВычета);
						ОстатокВычета = ОстатокВычета - СуммаВычета;
						СтрокиВычетов[0].РанееПримененныйВычет = СтрокиВычетов[0].РанееПримененныйВычет + СуммаВычета;	
						Если СтрокиВычетов[0].РанееПримененныйВычет = 0 Тогда
							СтрокиВычетов.Удалить(0)
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// остальные вычеты по НДФЛ
	
	ВыборкаПоНДФЛ = ЗапросПоВычетамПоНДФЛ(Ссылка, ВыборкаПоШапкеДокумента, ИмяТаблицы, ЭтоДокументНаОдногоСотрудника).Выбрать();
	
	Пока ВыборкаПоНДФЛ.Следующий() Цикл 
		
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ, Заголовок);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокиВычетовПоНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, ДокументОбъект.Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц, ДокументОбъект.Движения.НДФЛИмущественныеВычетыФизлиц);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗачтенныеАвансыПоНДФЛ(ДокументОбъект, ВыборкаПоШапкеДокумента, ЭтоДокументНаОдногоСотрудника) Экспорт 
	
	Ссылка = ДокументОбъект.Ссылка;
	ИмяТаблицы = ДокументОбъект.Метаданные().Имя;
	
	ДатаРегистрации = ?(ВыборкаПоШапкеДокумента.Дата > КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),?(ВыборкаПоШапкеДокумента.Дата < ВыборкаПоШапкеДокумента.ПериодРегистрации,ВыборкаПоШапкеДокумента.ПериодРегистрации,ВыборкаПоШапкеДокумента.Дата));
	ВыборкаПоНДФЛ = ЗапросПоЗачтеннымАвансам(Ссылка, ВыборкаПоШапкеДокумента, ИмяТаблицы, ЭтоДокументНаОдногоСотрудника).Выбрать();
	
	Пока ВыборкаПоНДФЛ.Следующий() Цикл 
		
		Движение = ДокументОбъект.Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоНДФЛ);
		
		// Свойства
		Движение.Период						= ДатаРегистрации;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Реквизиты 
		Движение.МесяцНалоговогоПериода     	= НачалоМесяца(Движение.МесяцНалоговогоПериода);
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокиИсчисленногоУдержанногоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ЭтоДокументНаОдногоСотрудника, НаборЗаписей = Неопределено, УпрощенныйУчетНДФЛ = Ложь) Экспорт 
	
	Если НаборЗаписей = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДатаРегистрации = ?(ВыборкаПоШапкеДокумента.Дата > КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),?(ВыборкаПоШапкеДокумента.Дата < ВыборкаПоШапкеДокумента.ПериодРегистрации,ВыборкаПоШапкеДокумента.ПериодРегистрации,ВыборкаПоШапкеДокумента.Дата));
	
	Движение = НаборЗаписей.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	// Свойства
	Движение.Период						= ДатаРегистрации;
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Если ЭтоДокументНаОдногоСотрудника Тогда
		Движение.ФизЛицо                    	= ВыборкаПоШапкеДокумента.ФизЛицо;
	КонецЕсли;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ИсчисленоИзЗарплаты		= Истина;
	
	Если УпрощенныйУчетНДФЛ Тогда
		Движение = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
		
		// Свойства
		Движение.Период							= ДатаРегистрации;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Если ЭтоДокументНаОдногоСотрудника Тогда
			Движение.ФизЛицо                    	= ВыборкаПоШапкеДокумента.ФизЛицо;
		КонецЕсли;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		
		// Ресурсы
		Движение.Налог = ВыборкаПоСтрокамДокумента.Налог - ВыборкаПоСтрокамДокумента.ЗачтеноАвансовыхПлатежей;
		
		// Реквизиты 
		Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;				
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗачтеноАвансовыхПлатежей) Тогда
		
		Движение = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
		
		// Свойства
		Движение.Период						= ДатаРегистрации;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Если ЭтоДокументНаОдногоСотрудника Тогда
			Движение.ФизЛицо                    	= ВыборкаПоШапкеДокумента.ФизЛицо;
		КонецЕсли;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.МесяцНалоговогоПериода     	= НачалоМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		
		// Ресурсы
		Движение.Налог = ВыборкаПоСтрокамДокумента.ЗачтеноАвансовыхПлатежей;
		
		// Реквизиты 
		Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ЗачетАвансовыхПлатежей;
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты		= Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

Процедура СформироватьСоциальныеВычетыПоНДФЛ(ВыборкаПоШапкеДокумента, Физлицо, НаборЗаписейСтандартныхВычетов, ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций", Режим = "ПриПроведении") Экспорт 
	
	Если ВыборкаПоШапкеДокумента.ПериодРегистрации < '20130101' Тогда
		Возврат		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаАктуальности", КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаПоНДФЛСрезПоследних.РегистрироватьСоциальныйВычетТолькоПоЗаявлению,
	|	УчетнаяПолитикаПоНДФЛСрезПоследних.РегистрироватьСоциальныйВычетСледующимМесяцем
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоНДФЛ.СрезПоследних(&ДатаАктуальности, Организация = &Организация) КАК УчетнаяПолитикаПоНДФЛСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрироватьСоциальныйВычетТолькоПоЗаявлению = Ложь;
	РегистрироватьСоциальныйВычетСледующимМесяцем = Ложь;
	Если Выборка.Следующий() Тогда
		РегистрироватьСоциальныйВычетТолькоПоЗаявлению = Выборка.РегистрироватьСоциальныйВычетТолькоПоЗаявлению;
		РегистрироватьСоциальныйВычетСледующимМесяцем = Выборка.РегистрироватьСоциальныйВычетСледующимМесяцем;
	КонецЕсли;
	Если РегистрироватьСоциальныйВычетТолькоПоЗаявлению Тогда
		Возврат		
	КонецЕсли;
	Если РегистрироватьСоциальныйВычетСледующимМесяцем И Режим <> "ПриПроведении" Тогда
		Возврат		
	КонецЕсли;
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода", ?(РегистрироватьСоциальныйВычетСледующимМесяцем, ДобавитьМесяц(ВыборкаПоШапкеДокумента.ПериодРегистрации, 1), ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("Год", Год(Запрос.Параметры.МесяцНалоговогоПериода));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Ссылка.Организация КАК ОбособленноеПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеОрганизации,
	|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ФизЛицо,
	|	СУММА(НачислениеЗарплатыРаботникамОрганизацийУдержания.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК НачислениеЗарплатыРаботникамОрганизацийУдержания
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.ЯвляетсяДСВ
	|	И НачислениеЗарплатыРаботникамОрганизацийУдержания.Ссылка = &Ссылка
	|	И НачислениеЗарплатыРаботникамОрганизацийУдержания.ФизЛицо = &ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Ссылка.ПериодРегистрации,
	|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Ссылка.Организация,
	|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ФизЛицо,
	|	СУММА(ИсходныеДанные.ПримененныйВычет) КАК ПримененныйВычет
	|ПОМЕСТИТЬ ВТЗарегистрированоВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходныеДанные.ФизЛицо КАК ФизЛицо,
	|		НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПримененныйВычет КАК ПримененныйВычет
	|	ИЗ
	|		ВТИсходныеДанные КАК ИсходныеДанные
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК НДФЛПредоставленныеСтандартныеВычетыФизЛиц
	|			ПО ИсходныеДанные.ФизЛицо = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо
	|				И (ВЫБОР
	|					КОГДА ИсходныеДанные.ОбособленноеПодразделение.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА ИсходныеДанные.ОбособленноеПодразделение
	|					ИНАЧЕ ИсходныеДанные.ОбособленноеПодразделение.ГоловнаяОрганизация
	|				КОНЕЦ = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Организация)
	|				И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Регистратор <> &Ссылка)
	|				И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(ИсходныеДанные.МесяцНалоговогоПериода, ГОД) И ИсходныеДанные.МесяцНалоговогоПериода)
	|				И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсходныеДанные.ФизЛицо,
	|		НДФЛИмущественныеВычетыФизлиц.Размер
	|	ИЗ
	|		ВТИсходныеДанные КАК ИсходныеДанные
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
	|			ПО ИсходныеДанные.ФизЛицо = НДФЛИмущественныеВычетыФизлиц.ФизЛицо
	|				И (ВЫБОР
	|					КОГДА ИсходныеДанные.ОбособленноеПодразделение.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА ИсходныеДанные.ОбособленноеПодразделение
	|					ИНАЧЕ ИсходныеДанные.ОбособленноеПодразделение.ГоловнаяОрганизация
	|				КОНЕЦ = НДФЛИмущественныеВычетыФизлиц.Организация)
	|				И (НДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО))
	|				И (НДФЛИмущественныеВычетыФизлиц.Период МЕЖДУ НАЧАЛОПЕРИОДА(ИсходныеДанные.МесяцНалоговогоПериода, ГОД) И ИсходныеДанные.МесяцНалоговогоПериода)
	|				И (НДФЛИмущественныеВычетыФизлиц.Регистратор <> &Ссылка)
	|				И (НДФЛИмущественныеВычетыФизлиц.Год = &Год)
	|	ГДЕ
	|		НДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код326)) КАК ИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &Организация
	|	И СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				ИсходныеДанные.ФизЛицо
	|			ИЗ
	|				ВТИсходныеДанные КАК ИсходныеДанные)
	|	И СотрудникиОрганизаций.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния,
	|	РаботникиОрганизацийСрезПоследних.Период
	|ПОМЕСТИТЬ ВТПодразделенияОсновныхСотрудников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Организация = &Организация
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						Сотрудники.Ссылка
	|					ИЗ
	|						ВТСотрудники КАК Сотрудники)) КАК РаботникиОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПодразделенияОсновныхСотрудников.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
	|	ПодразделенияОсновныхСотрудников.Сотрудник.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТРаботающие
	|ИЗ
	|	ВТПодразделенияОсновныхСотрудников КАК ПодразделенияОсновныхСотрудников
	|ГДЕ
	|	ПодразделенияОсновныхСотрудников.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодразделенияОсновныхСотрудников.Сотрудник.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уволенные.СотрудникФизлицо КАК Физлицо,
	|	МАКСИМУМ(ПодразделенияОсновныхСотрудников.ПодразделениеОрганизации) КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТУволенные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПодразделенияОсновныхСотрудников.Сотрудник.Физлицо КАК СотрудникФизлицо,
	|		МАКСИМУМ(ПодразделенияОсновныхСотрудников.Период) КАК Период
	|	ИЗ
	|		ВТПодразделенияОсновныхСотрудников КАК ПодразделенияОсновныхСотрудников
	|	ГДЕ
	|		ПодразделенияОсновныхСотрудников.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПодразделенияОсновныхСотрудников.Сотрудник.Физлицо) КАК Уволенные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияОсновныхСотрудников КАК ПодразделенияОсновныхСотрудников
	|		ПО Уволенные.СотрудникФизлицо = ПодразделенияОсновныхСотрудников.Сотрудник.Физлицо
	|			И Уволенные.Период = ПодразделенияОсновныхСотрудников.Период
	|			И (ПодразделенияОсновныхСотрудников.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|СГРУППИРОВАТЬ ПО
	|	Уволенные.СотрудникФизлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.МесяцНалоговогоПериода,
	|	ИсходныеДанные.ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА Работающие.Физлицо ЕСТЬ НЕ NULL 
	|			ТОГДА Работающие.ПодразделениеОрганизации
	|		КОГДА Уволенные.Физлицо ЕСТЬ НЕ NULL 
	|			ТОГДА Уволенные.ПодразделениеОрганизации
	|		ИНАЧЕ ИсходныеДанные.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ИсходныеДанные.ФизЛицо,
	|	ВЫБОР
	|		КОГДА ИсходныеДанные.Результат + ЕСТЬNULL(ЗарегистрированоВычетов.ПримененныйВычет, 0) < 120000
	|			ТОГДА ИсходныеДанные.Результат
	|		ИНАЧЕ 120000 - ЕСТЬNULL(ЗарегистрированоВычетов.ПримененныйВычет, 0)
	|	КОНЕЦ КАК Результат
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированоВычетов КАК ЗарегистрированоВычетов
	|		ПО ИсходныеДанные.ФизЛицо = ЗарегистрированоВычетов.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающие КАК Работающие
	|		ПО ИсходныеДанные.ФизЛицо = Работающие.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУволенные КАК Уволенные
	|		ПО ИсходныеДанные.ФизЛицо = Уволенные.Физлицо";
	Если ЗначениеЗаполнено(Физлицо) Тогда
		Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НачислениеЗарплатыРаботникамОрганизацийУдержания.ФизЛицо = &ФизЛицо","");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"Документ.НачислениеЗарплатыРаботникамОрганизаций","Документ." + ИмяДокумента);
	ВыборкаПоНДФЛ = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоНДФЛ.Следующий() Цикл 
		ДобавитьСтрокуВычетаПоНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоНДФЛ.Результат, Справочники.ВычетыНДФЛ.Код320);
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьСторнируемыеДокументы(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений) Экспорт
	
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаСторнируемыхДокументов Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.СторнируемыйДокумент) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ)
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
		ТаблицаСторнируемыхДокументов.Удалить(СтрокаТЗ)
	КонецЦикла;
	
	ОбработанныеДокументы = Новый Соответствие;	
	Для каждого СтрокаТЗ Из ТаблицаСторнируемыхДокументов Цикл
		УточненныйДокумент = ОбработанныеДокументы[СтрокаТЗ.СторнируемыйДокумент];
		Если ЗначениеЗаполнено(УточненныйДокумент) Тогда
			СтрокаТЗ.СторнируемыйДокумент = УточненныйДокумент
		Иначе
			Если СтрокаТЗ.СторнируемыйДокумент.Метаданные().Реквизиты.Найти("ПерерассчитываемыйДокумент") = Неопределено Тогда
				ОбработанныеДокументы.Вставить(СтрокаТЗ.СторнируемыйДокумент, СтрокаТЗ.СторнируемыйДокумент);
				Продолжить;
			КонецЕсли;
			ПредыдущаяСсылка = СтрокаТЗ.СторнируемыйДокумент;
			СледующаяСсылка = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ПредыдущаяСсылка, "ПерерассчитываемыйДокумент");
			НовыеСтроки = Новый Массив;
			Пока ЗначениеЗаполнено(СледующаяСсылка) Цикл
				СтрокаТаблицыПромежуточныхИсправлений = ТаблицаПромежуточныхИсправлений.Добавить();
				СтрокаТаблицыПромежуточныхИсправлений.ПромежуточноеИсправление = ПредыдущаяСсылка;
				НовыеСтроки.Добавить(СтрокаТаблицыПромежуточныхИсправлений);
				ПредыдущаяСсылка = СледующаяСсылка;
				Если ПредыдущаяСсылка.Метаданные().Реквизиты.Найти("ПерерассчитываемыйДокумент") = Неопределено Тогда
					Прервать;
				КонецЕсли;
				СледующаяСсылка = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ПредыдущаяСсылка, "ПерерассчитываемыйДокумент")
			КонецЦикла;
			ОбработанныеДокументы.Вставить(СтрокаТЗ.СторнируемыйДокумент, ПредыдущаяСсылка);
			СтрокаТЗ.СторнируемыйДокумент = ПредыдущаяСсылка;
			Для каждого СтрокаТаблицыПромежуточныхИсправлений Из НовыеСтроки Цикл
				СтрокаТаблицыПромежуточныхИсправлений.СторнируемыйДокумент = ПредыдущаяСсылка;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет набор записей НДФЛСведенияОДоходах сведениями о доходах регистратора
// с учетом возможного сторнирования. Сторно-записи из документа-регистратора
// отражаем в учете с теми датами получения дохода, которые были зарегистрированы 
// сторнируемым документом; доходы минусуем, начиная с самой поздней даты.
//
// Параметры: 
//  НаборЗаписей - РегистрНакопленияНаборЗаписей.НДФЛСведенияОДоходах или Таблица значений соответствующей структуры
//  МенеджерВременныхТаблиц содержит временную таблицу ВТСторноНачисления с полями 
//		ИмяТЧ и НомерСтроки - идентифицируют исходную запись т.ч. документа-регистратора
//      Физлицо  
//      ДатаНачала  
//      ДатаОкончания  
//		Сотрудник
//      ВидРасчета  
//      КодДохода  
//      СуммаДохода  
//      КодВычета  
//		СуммаВычета
//		КоличествоДетей
//		ПодразделениеОрганизации
//		ПериодРегистрации
//		ДатаВыплатыДохода
//		Сторно
//		СторнируемыйДокумент
//  ВыборкаПоШапкеДокумента - содержит данные регистратора: ГоловнаяОрганизация и ОбособленноеПодразделение 
//  ДатаРегистрации - дата, этой датой будут зарегистрированы 
//  ДополнительныеПоля - строка, описание дополнительных полей, которые будут заполнены в регистре 
//  ДополнительныеУсловияСвязи - строка, описание дополнительных полей связи данных документа и регистра учета
//
// Возвращаемое значение:
//  Нет
//
Процедура СформироватьДоходыПоКодамНДФЛ(НаборЗаписей, МенеджерВременныхТаблиц, ВыборкаПоШапкеДокумента, ДатаРегистрации, ДополнительныеПоля = "", ДополнительныеУсловияСвязи = "") Экспорт
	
	Если ТипЗнч(НаборЗаписей) = Тип("ТаблицаЗначений") Тогда
		ВременнаяТаблица = НаборЗаписей	
	Иначе
		ВременнаяТаблица = НаборЗаписей.ВыгрузитьКолонки();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Физлицо,
	|	ДанныеДокумента.КодДохода,
	|	ДанныеДокумента.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТОтрицательныеДоходы
	|ИЗ
	|	ВТСторноНачисления КАК ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Физлицо,
	|	ДанныеДокумента.КодДохода,
	|	ДанныеДокумента.ПодразделениеОрганизации
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеДокумента.СуммаДохода) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Физлицо,
	|	ДанныеДокумента.ВидРасчета,
	|	ДанныеДокумента.КодДохода,
	|	СУММА(ДанныеДокумента.СуммаДохода) КАК СуммаДохода,
	|	ДанныеДокумента.КодВычета,
	|	СУММА(ДанныеДокумента.СуммаВычета) КАК СуммаВычета,
	|	ДанныеДокумента.КоличествоДетей,
	|	ДанныеДокумента.ПодразделениеОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
	|   ВЫБОР
	|		КОГДА ДанныеДокумента.КодДохода.СоответствуетОплатеТруда
	|			ТОГДА ВЫБОР
	|					КОГДА СотрудникиОрганизаций.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|						ТОГДА СотрудникиОрганизаций.ДатаУвольнения
	|					ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|				КОНЕЦ
	|		ИНАЧЕ ДанныеДокумента.ДатаВыплатыДохода
	|	КОНЕЦ КАК ДатаПолученияДохода,
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА ДанныеДокумента.КодДохода.СоответствуетОплатеТруда
	|				ТОГДА ВЫБОР
	|						КОГДА СотрудникиОрганизаций.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|							ТОГДА СотрудникиОрганизаций.ДатаУвольнения
	|						ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|					КОНЕЦ
	|			ИНАЧЕ ДанныеДокумента.ДатаВыплатыДохода
	|		КОНЕЦ, МЕСЯЦ) КАК Период
	|ИЗ
	|	ВТСторноНачисления КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ДанныеДокумента.Сотрудник = СотрудникиОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО ДанныеДокумента.Физлицо = ОтрицательныеДоходы.Физлицо
	|ГДЕ
	|	(ДанныеДокумента.СуммаДохода <> 0
	|			ИЛИ ДанныеДокумента.СуммаВычета <> 0)
	|	И ОтрицательныеДоходы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НЕОПРЕДЕЛЕНО,
	|	ДанныеДокумента.Физлицо,
	|	ДанныеДокумента.ВидРасчета,
	|	ДанныеДокумента.КодДохода,
	|	ДанныеДокумента.КодВычета,
	|	ДанныеДокумента.КоличествоДетей,
	|	ДанныеДокумента.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КодДохода.СоответствуетОплатеТруда
	|			ТОГДА ВЫБОР
	|					КОГДА СотрудникиОрганизаций.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|						ТОГДА СотрудникиОрганизаций.ДатаУвольнения
	|					ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|				КОНЕЦ
	|		ИНАЧЕ ДанныеДокумента.ДатаВыплатыДохода
	|	КОНЕЦ,
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА ДанныеДокумента.КодДохода.СоответствуетОплатеТруда
	|				ТОГДА ВЫБОР
	|						КОГДА СотрудникиОрганизаций.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|							ТОГДА СотрудникиОрганизаций.ДатаУвольнения
	|						ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|					КОНЕЦ
	|			ИНАЧЕ ДанныеДокумента.ДатаВыплатыДохода
	|		КОНЕЦ, МЕСЯЦ)
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ДанныеДокумента.СуммаДохода) <> 0
	|		ИЛИ СУММА(ДанныеДокумента.СуммаВычета) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПолученияДохода УБЫВ";
	
	Если ЗначениеЗаполнено(ДополнительныеПоля) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,", ДополнительныеПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО,", ДополнительныеПоля);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Движение = ВременнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,"ОбособленноеПодразделение"); //  ОбособленноеПодразделение
		ЗаполнитьЗначенияСвойств(Движение,Выборка); // Период, Физлицо, КодДохода, СуммаДохода, СуммаВычета, КодВычета, ПодразделениеОрганизации, КоличествоДетей, ВидРасчета
		
		// измерения 
		Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ПериодРегистрации 	= ДатаРегистрации;
		
		// реквизиты
		Движение.ИсчисленоИзЗарплаты= Истина;
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Физлицо
	|ИЗ
	|	ВТОтрицательныеДоходы КАК ДанныеДокумента";
	Если Запрос.Выполнить().Пустой() Тогда
		Если ТипЗнч(НаборЗаписей) <> Тип("ТаблицаЗначений") Тогда
			СвернутьДвиженияНДФЛСведенияОДоходах(ВременнаяТаблица);
			НаборЗаписей.Загрузить(ВременнаяТаблица);
		КонецЕсли;
		Возврат
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ИмяТЧ,
	|	МИНИМУМ(ДанныеДокумента.НомерСтроки) КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
	|	ДанныеДокумента.ВидРасчета,
	|	НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаНачала, МЕСЯЦ) КАК ДатаНачала,

	|	ДанныеДокумента.КодВычета,
	|	СУММА(ДанныеДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ДанныеДокумента.СуммаВычета) КАК СуммаВычета,
	|	ДанныеДокумента.ПодразделениеОрганизации,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Сторно
	|ПОМЕСТИТЬ ВТСтрокиДоходов
	|ИЗ
	|	ВТСторноНачисления КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Физлицо В
	|			(ВЫБРАТЬ
	|				ДанныеДокумента.Физлицо
	|			ИЗ
	|				ВТОтрицательныеДоходы КАК ДанныеДокумента)
	|
	|СГРУППИРОВАТЬ ПО
	|	НЕОПРЕДЕЛЕНО,
	|	ДанныеДокумента.ИмяТЧ,
	|	ДанныеДокумента.ВидРасчета,
	|	ДанныеДокумента.КодВычета,
	|	НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаНачала, МЕСЯЦ),
	|	ДанныеДокумента.ПодразделениеОрганизации,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ИмяТЧ,
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ВидРасчета,
	|	ДанныеДокумента.Сторно,
	|	СтрокиДокументаПоНомерСтроки.Физлицо,
	|	СтрокиДокументаПоНомерСтроки.ДатаВыплатыДохода,
	|	СтрокиДокументаПоНомерСтроки.ПериодРегистрации,
	|	СтрокиДокументаПоНомерСтроки.КодДохода,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Сторно
	|				И ЕСТЬNULL(СтрокиДокументаПоПериодуДействия.НомерСтроки, 0) <> ДанныеДокумента.НомерСтроки
	|			ТОГДА 0
	|		КОГДА СторноЗаписиДокумента.СуммаДохода ЕСТЬ NULL 
	|			ТОГДА ДанныеДокумента.СуммаДохода
	|		КОГДА НЕ ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода > 0
	|			ТОГДА ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода
	|		КОГДА ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода < 0
	|			ТОГДА ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДохода,
	|	ДанныеДокумента.КодВычета,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Сторно
	|				И ЕСТЬNULL(СтрокиДокументаПоПериодуДействия.НомерСтроки, 0) <> ДанныеДокумента.НомерСтроки
	|			ТОГДА 0
	|		КОГДА СторноЗаписиДокумента.СуммаДохода ЕСТЬ NULL 
	|			ТОГДА ДанныеДокумента.СуммаВычета
	|		КОГДА НЕ ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода > 0
	|			ТОГДА ДанныеДокумента.СуммаВычета + СторноЗаписиДокумента.СуммаВычета
	|		КОГДА ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода < 0
	|			ТОГДА ДанныеДокумента.СуммаВычета + СторноЗаписиДокумента.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВычета,
	|	ДанныеДокумента.ПодразделениеОрганизации,
	|	СтрокиДокументаПоНомерСтроки.КоличествоДетей,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
	|	СтрокиДокументаПоПериодуДействия.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТНачисленияСоСторноЗаписями
	|ИЗ
	|	ВТСтрокиДоходов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноНачисления КАК СтрокиДокументаПоПериодуДействия
	|		ПО (ДанныеДокумента.ДатаНачала = НАЧАЛОПЕРИОДА(СтрокиДокументаПоПериодуДействия.ДатаНачала, МЕСЯЦ))
	|			И ДанныеДокумента.ИмяТЧ = СтрокиДокументаПоПериодуДействия.ИмяТЧ
	|			И ДанныеДокумента.ВидРасчета = СтрокиДокументаПоПериодуДействия.ВидРасчета
	|			И ДанныеДокумента.Сотрудник = СтрокиДокументаПоПериодуДействия.Сотрудник
	|			И ДанныеДокумента.ПодразделениеОрганизации = СтрокиДокументаПоПериодуДействия.ПодразделениеОрганизации
	|			И ДанныеДокумента.Сторно = СтрокиДокументаПоПериодуДействия.Сторно
	|			И (ДанныеДокумента.Сторно)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноНачисления КАК СтрокиДокументаПоНомерСтроки
	|		ПО ДанныеДокумента.НомерСтроки = СтрокиДокументаПоНомерСтроки.НомерСтроки
	|			И ДанныеДокумента.ИмяТЧ = СтрокиДокументаПоНомерСтроки.ИмяТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДоходов КАК СторноЗаписиДокумента
	|		ПО ДанныеДокумента.ВидРасчета = СторноЗаписиДокумента.ВидРасчета
	|			И ДанныеДокумента.ИмяТЧ = СторноЗаписиДокумента.ИмяТЧ
	|			И ДанныеДокумента.Сотрудник = СторноЗаписиДокумента.Сотрудник
	|			И ДанныеДокумента.ДатаНачала = СторноЗаписиДокумента.ДатаНачала
	|			И ДанныеДокумента.ПодразделениеОрганизации = СторноЗаписиДокумента.ПодразделениеОрганизации
	|			И ДанныеДокумента.КодВычета = СторноЗаписиДокумента.КодВычета
	|			И (НЕ ДанныеДокумента.Сторно
	|					И СторноЗаписиДокумента.Сторно
	|				ИЛИ ДанныеДокумента.Сторно
	|					И НЕ СторноЗаписиДокумента.Сторно)
	|			И (&ДополнительноеУсловиеСвязи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСоСторноЗаписями.ИмяТЧ,
	|	НачисленияСоСторноЗаписями.НомерСтроки,
	|	НачисленияСоСторноЗаписями.СторнируемыйДокумент
	|ИЗ
	|	ВТНачисленияСоСторноЗаписями КАК НачисленияСоСторноЗаписями
	|ГДЕ
	|	НачисленияСоСторноЗаписями.Сторно";
	
	Если ЗначениеЗаполнено(ДополнительныеПоля) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,", ДополнительныеПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО,", ДополнительныеПоля);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДополнительныеУсловияСвязи) Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&ДополнительноеУсловиеСвязи", "Истина")
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&ДополнительноеУсловиеСвязи", ДополнительныеУсловияСвязи)
	КонецЕсли;
	
	ТаблицаСторнируемыхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаПромежуточныхИсправлений = ТаблицаСторнируемыхДокументов.СкопироватьКолонки("СторнируемыйДокумент");
	ТаблицаПромежуточныхИсправлений.Колонки.Добавить("ПромежуточноеИсправление", ТаблицаСторнируемыхДокументов.Колонки.СторнируемыйДокумент.ТипЗначения);
	УточнитьСторнируемыеДокументы(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений);
	Запрос.УстановитьПараметр("ТаблицаСторнируемыхДокументов", ТаблицаСторнируемыхДокументов);
	Запрос.УстановитьПараметр("ТаблицаПромежуточныхИсправлений", ТаблицаПромежуточныхИсправлений);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСторнируемыхДокументов.ИмяТЧ,
	|	ТаблицаСторнируемыхДокументов.НомерСтроки,
	|	ТаблицаСторнируемыхДокументов.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТТаблицаСторнируемыхДокументов
	|ИЗ
	|	&ТаблицаСторнируемыхДокументов КАК ТаблицаСторнируемыхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПромежуточныхИсправлений.ПромежуточноеИсправление,
	|	ТаблицаПромежуточныхИсправлений.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТТаблицаПромежуточныхИсправлений
	|ИЗ
	|	&ТаблицаПромежуточныхИсправлений КАК ТаблицаПромежуточныхИсправлений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛСведенияОДоходах.Период,
	|	НДФЛСведенияОДоходах.Регистратор,
	|	НДФЛСведенияОДоходах.СуммаДохода КАК СуммаДохода,
	|	НДФЛСведенияОДоходах.СуммаВычета КАК СуммаВычета,
	|	НДФЛСведенияОДоходах.ФизЛицо,
	|	НДФЛСведенияОДоходах.ПодразделениеОрганизации,
	|	НДФЛСведенияОДоходах.КодДохода,
	
	|	НДФЛСведенияОДоходах.ДатаПолученияДохода,
	|	НДФЛСведенияОДоходах.ВидРасчета
	|ПОМЕСТИТЬ ВТСведенияРегистраБезУточнений
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|ГДЕ
	|	НДФЛСведенияОДоходах.Регистратор В
	|			(ВЫБРАТЬ
	|				СторноЗаписи.СторнируемыйДокумент
	|			ИЗ
	|				ВТТаблицаСторнируемыхДокументов КАК СторноЗаписи)
	|	И НДФЛСведенияОДоходах.ФизЛицо В
	|			(ВЫБРАТЬ
	|				Начисления.Физлицо
	|			ИЗ
	|				ВТНачисленияСоСторноЗаписями КАК Начисления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияРегистраБезУточнений.Регистратор,
	|	СведенияРегистраБезУточнений.ФизЛицо,
	|	СведенияРегистраБезУточнений.КодДохода,
	|	СведенияРегистраБезУточнений.ВидРасчета,
	|	СведенияРегистраБезУточнений.ПодразделениеОрганизации,
	|	МИНИМУМ(СведенияРегистраБезУточнений.ДатаПолученияДохода) КАК ДатаПолученияДохода,
	|	МИНИМУМ(СведенияРегистраБезУточнений.Период) КАК Период
	|ПОМЕСТИТЬ ВТСторнируемыеСтрокиДоходов
	|ИЗ
	|	ВТСведенияРегистраБезУточнений КАК СведенияРегистраБезУточнений
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияРегистраБезУточнений.Регистратор,
	|	СведенияРегистраБезУточнений.ФизЛицо,
	|	СведенияРегистраБезУточнений.КодДохода,
	|	СведенияРегистраБезУточнений.ВидРасчета,
	|	СведенияРегистраБезУточнений.ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыСУточнением.Период,
	|	ДоходыСУточнением.Регистратор,
	|	СУММА(ДоходыСУточнением.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ДоходыСУточнением.СуммаВычета) КАК СуммаВычета,
	|	ДоходыСУточнением.ФизЛицо,
	|	ДоходыСУточнением.ПодразделениеОрганизации,
	|	ДоходыСУточнением.КодДохода,
	|	ДоходыСУточнением.ДатаПолученияДохода,
	|	ДоходыСУточнением.ВидРасчета
	|ПОМЕСТИТЬ ВТСведенияРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДФЛСведенияОДоходах.Период КАК Период,
	|		НДФЛСведенияОДоходах.Регистратор КАК Регистратор,
	|		НДФЛСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|		НДФЛСведенияОДоходах.КодДохода КАК КодДохода,
	|		НДФЛСведенияОДоходах.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|		НДФЛСведенияОДоходах.ВидРасчета КАК ВидРасчета,
	|		НДФЛСведенияОДоходах.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НДФЛСведенияОДоходах.СуммаДохода КАК СуммаДохода,
	|		НДФЛСведенияОДоходах.СуммаВычета КАК СуммаВычета
	|	ИЗ
	|		ВТСведенияРегистраБезУточнений КАК НДФЛСведенияОДоходах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛСведенияОДоходах.Период,
	|		СтрокиДоходов.Регистратор,
	|		СтрокиДоходов.ФизЛицо,
	|		СтрокиДоходов.КодДохода,
	|		НДФЛСведенияОДоходах.ДатаПолученияДохода,
	|		СтрокиДоходов.ВидРасчета,
	|		СтрокиДоходов.ПодразделениеОрганизации,
	|		НДФЛСведенияОДоходах.СуммаДохода,
	|		НДФЛСведенияОДоходах.СуммаВычета
	|	ИЗ
	|		ВТСторнируемыеСтрокиДоходов КАК СтрокиДоходов
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПромежуточныхИсправлений КАК ТаблицаПромежуточныхИсправлений
	|			ПО СтрокиДоходов.Регистратор = ТаблицаПромежуточныхИсправлений.СторнируемыйДокумент
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|			ПО (ТаблицаПромежуточныхИсправлений.ПромежуточноеИсправление = НДФЛСведенияОДоходах.Регистратор)
	|				И СтрокиДоходов.ФизЛицо = НДФЛСведенияОДоходах.ФизЛицо
	|				И СтрокиДоходов.КодДохода = НДФЛСведенияОДоходах.КодДохода
	|				И СтрокиДоходов.ВидРасчета = НДФЛСведенияОДоходах.ВидРасчета
	|				И СтрокиДоходов.ПодразделениеОрганизации = НДФЛСведенияОДоходах.ПодразделениеОрганизации
	|	ГДЕ
	|		НДФЛСведенияОДоходах.ФизЛицо ЕСТЬ НЕ NULL ) КАК ДоходыСУточнением
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыСУточнением.Период,
	|	ДоходыСУточнением.Регистратор,
	|	ДоходыСУточнением.ФизЛицо,
	|	ДоходыСУточнением.ПодразделениеОрганизации,
	|	ДоходыСУточнением.КодДохода,
	|	ДоходыСУточнением.ДатаПолученияДохода,
	|	ДоходыСУточнением.ВидРасчета
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДоходыСУточнением.СуммаДохода) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ИмяТЧ КАК ИмяТЧ,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Физлицо,
	|	ДанныеДокумента.ВидРасчета,
	|	ДанныеДокумента.КодДохода,
	|	ДанныеДокумента.СуммаДохода,
	|	ДанныеДокумента.КодВычета,
	|	ДанныеДокумента.СуммаВычета,
	|	ДанныеДокумента.КоличествоДетей,
	|	ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации, ДанныеДокумента.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
	|	ЕСТЬNULL(НДФЛСведенияОДоходах.ДатаПолученияДохода, ВЫБОР
	|			КОГДА ДанныеДокумента.КодДохода.СоответствуетОплатеТруда
	|				ТОГДА ВЫБОР
	|						КОГДА СотрудникиОрганизаций.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|							ТОГДА СотрудникиОрганизаций.ДатаУвольнения
	|						ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|					КОНЕЦ
	|			ИНАЧЕ ДанныеДокумента.ДатаВыплатыДохода
	|		КОНЕЦ) КАК ДатаПолученияДохода,
	|	КОНЕЦПЕРИОДА(ЕСТЬNULL(НДФЛСведенияОДоходах.Период, ВЫБОР
	|				КОГДА ДанныеДокумента.КодДохода.СоответствуетОплатеТруда
	|					ТОГДА ВЫБОР
	|							КОГДА СотрудникиОрганизаций.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|								ТОГДА СотрудникиОрганизаций.ДатаУвольнения
	|							ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ)
	|						КОНЕЦ
	|				ИНАЧЕ ДанныеДокумента.ДатаВыплатыДохода
	|			КОНЕЦ), МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА НДФЛСведенияОДоходах.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСторнируемыеДанныеУчета,
	|	ЕСТЬNULL(НДФЛСведенияОДоходах.СуммаДохода, 0) КАК СуммаДоходаВУчете,
	|	ЕСТЬNULL(НДФЛСведенияОДоходах.СуммаВычета, 0) КАК СуммаВычетаВУчете
	|ИЗ
	|	ВТНачисленияСоСторноЗаписями КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаСторнируемыхДокументов КАК ТаблицаСторнируемыхДокументов
	|		ПО ДанныеДокумента.ИмяТЧ = ТаблицаСторнируемыхДокументов.ИмяТЧ
	|			И ДанныеДокумента.НомерСтроки = ТаблицаСторнируемыхДокументов.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ДанныеДокумента.Сотрудник = СотрудникиОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияРегистра КАК НДФЛСведенияОДоходах
	|		ПО (ТаблицаСторнируемыхДокументов.СторнируемыйДокумент = НДФЛСведенияОДоходах.Регистратор)
	
	|			И ДанныеДокумента.Физлицо = НДФЛСведенияОДоходах.ФизЛицо
	|			И ДанныеДокумента.ПодразделениеОрганизации = НДФЛСведенияОДоходах.ПодразделениеОрганизации
	|			И (ВЫБОР
	|				КОГДА НДФЛСведенияОДоходах.ВидРасчета.КодДоходаНДФЛ ЕСТЬ NULL 
	|					ТОГДА ДанныеДокумента.КодДохода = НДФЛСведенияОДоходах.КодДохода
	|				ИНАЧЕ ДанныеДокумента.ВидРасчета = НДФЛСведенияОДоходах.ВидРасчета
	|			КОНЕЦ)
	|ГДЕ
	|	(ДанныеДокумента.СуммаДохода <> 0
	|			ИЛИ ДанныеДокумента.СуммаВычета <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяТЧ,
	|	НомерСтроки,
	|	ДатаПолученияДохода УБЫВ";
	
	Если ЗначениеЗаполнено(ДополнительныеПоля) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,", ДополнительныеПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО,", ДополнительныеПоля);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	
	
	
	
	Если ТипЗнч(НаборЗаписей) = Тип("ТаблицаЗначений") Тогда
		ВременнаяТаблица = НаборЗаписей	
	Иначе
		ВременнаяТаблица = НаборЗаписей.ВыгрузитьКолонки();
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИмяТЧ") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			Если Выборка.ЕстьСторнируемыеДанныеУчета Тогда
				
				СторноВсего = -Выборка.СуммаДохода;
				СторноВычета = -Выборка.СуммаВычета;
				
				Пока Выборка.Следующий() Цикл
					
					СуммаДохода = -Мин(СторноВсего, Выборка.СуммаДоходаВУчете);
					СторноВсего = СторноВсего + СуммаДохода;
					Если СторноВычета = 0 Тогда
						СуммаВычета = 0
					Иначе
						СуммаВычета = -Мин(СторноВычета, Выборка.СуммаВычетаВУчете);
						СторноВычета = СторноВычета + СуммаВычета;
					КонецЕсли;
					
					Движение = ВременнаяТаблица.Добавить();
					
					ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,"ОбособленноеПодразделение"); //  ОбособленноеПодразделение
					ЗаполнитьЗначенияСвойств(Движение,Выборка); // Период, Физлицо, КодДохода, СуммаДохода, СуммаВычета, КодВычета, ПодразделениеОрганизации, КоличествоДетей, ВидРасчета
					
					// измерения 
					Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					Движение.ПериодРегистрации 	= ДатаРегистрации;
					
					// ресурсы 
					Движение.СуммаДохода		= СуммаДохода;
					Движение.СуммаВычета		= СуммаВычета;
					
					// реквизиты
					Движение.ИсчисленоИзЗарплаты= Истина;
					
					Если СторноВсего = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Движение = ВременнаяТаблица.Добавить();
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,"ОбособленноеПодразделение"); //  ОбособленноеПодразделение
				ЗаполнитьЗначенияСвойств(Движение,Выборка); // Период, Физлицо, КодДохода, СуммаДохода, СуммаВычета, КодВычета, ПодразделениеОрганизации, КоличествоДетей, ВидРасчета
				
				// измерения 
				Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ПериодРегистрации 	= ДатаРегистрации;
				
				// реквизиты
				Движение.ИсчисленоИзЗарплаты= Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ТипЗнч(НаборЗаписей) <> Тип("ТаблицаЗначений") Тогда
		СвернутьДвиженияНДФЛСведенияОДоходах(ВременнаяТаблица);
		НаборЗаписей.Загрузить(ВременнаяТаблица);
	КонецЕсли;
	
КонецПроцедуры

Функция НалогиСоответствуютДоходам(ТаблицаДоходов, ТаблицаНалогов, ДатаВыплатыДохода) Экспорт

	ТаблицаДоходов.Свернуть("КодДохода, ДатаПолученияДохода", "СуммаДохода");
	ЕстьНалогНаДатуВыплаты = Истина;
	Если ТаблицаДоходов.Количество() > 0 и ТаблицаНалогов.Количество() > 0 Тогда
		ЕстьИныеДоходы = Ложь;
		Для каждого СтрокаТЗ Из ТаблицаДоходов Цикл
			СоответствуетОплатеТруда = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(СтрокаТЗ.КодДохода, "СоответствуетОплатеТруда");
			ЕстьИныеДоходы = ЕстьИныеДоходы Или (Не СоответствуетОплатеТруда И СтрокаТЗ.ДатаПолученияДохода = ДатаВыплатыДохода И СтрокаТЗ.СуммаДохода > 0);
			Если ЕстьИныеДоходы Тогда
				Прервать;
			КонецЕсли; 	
		КонецЦикла; 
		Если ЕстьИныеДоходы Тогда
			ЕстьНалогНаДатуВыплаты = ТаблицаНалогов.НайтиСтроки(Новый Структура("МесяцНалоговогоПериода", ДатаВыплатыДохода)).Количество() > 0;
		КонецЕсли;
	КонецЕсли;

	Возврат ЕстьНалогНаДатуВыплаты
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////

Процедура АктуализироватьДатыВыплатПоСотрудникам(ДокументОбъект) Экспорт
	
	СоответствиеФизлица = Новый Соответствие;
	СоответствиеСотрудник = Новый Соответствие;
	ПустоеФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ПустойСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	ОписаниеДокумента = ДокументОбъект.Метаданные();
	Для Каждого ТабличнаяЧасть Из ОписаниеДокумента.ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Имя = "ДатыВыплаты" Или ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЕстьСотрудник = ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") <> Неопределено;
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть.Имя] Цикл
			Если СтрокаТабличнойЧасти.Физлицо <> ПустоеФизлицо Тогда
				СоответствиеФизлица.Вставить(СтрокаТабличнойЧасти.Физлицо, "");
			ИначеЕсли ЕстьСотрудник И СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник	Тогда
				СоответствиеСотрудник.Вставить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	МассивСотрудников = Новый Массив;
	Для Каждого ЭлементСоответствия Из СоответствиеСотрудник Цикл
		МассивСотрудников.Добавить(ЭлементСоответствия.Ключ);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", МассивСотрудников);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеФизлица.Вставить(Выборка.Физлицо, "");
	КонецЦикла;
	
	ЛишниеСтроки = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ДатыВыплаты Цикл
		Если СоответствиеФизлица[СтрокаТабличнойЧасти.ФизЛицо] = Неопределено Тогда
			ЛишниеСтроки.Добавить(СтрокаТабличнойЧасти)
		КонецЕсли;
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из ЛишниеСтроки Цикл
		ДокументОбъект.ДатыВыплаты.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет даты выплат в переданной таблице документов по существующим в ИБ докам выплат и формирует списки дат-исключений для многосотрудниковых документов.
//
// Параметры: 
//  Организация - 
//  ОтчетныйПериод - дата - начало отчетного квартала
//  ДатаАктуальности - дата - 
//  ТаблицаДокументов - таблица значений, содержит, как минимум колонки
//  		Ссылка - ДокументСсылка
//          ХарактерВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//          ДатаВыплаты - дата - 
//          ДатаВыплатыВДокументе - дата -
//          ПозицияДокумента - дата - соответствует дате документа
//          ИмяПоляДатыВыплаты - строка -
//          ИмяДокумента - строка -
//          ЭтоВыплата - булево -
//
//  ДатыИсключения - cоответствие - для ссылок из соответствующей колонки таблицы документов может содержать таблицу значений с колонками ФизЛицо и ДатаВыплатыДохода, по окончании работы метода в это соответсвие помещаются новые данные о датах-исключениях в том же формате
//
Процедура ЗаполнитьДатуВыплаты(Организация, ОтчетныйПериод, ДатаАктуальности, ТаблицаДокументов, ДатыИсключения) Экспорт
	
	ТаблицаДатыИсключения = Новый ТаблицаЗначений;
	ТаблицаДатыИсключения.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПремииРаботниковОрганизаций, ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций, ДокументСсылка.РегистрацияРазовыхНачисленийРаботниковОрганизаций"));
	ТаблицаДатыИсключения.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДатыИсключения.Колонки.Добавить("ДатаВыплатыДохода", Новый ОписаниеТипов("Дата"));
	ДокументыИсключения = Новый Соответствие;
	Для каждого Элемент Из ДатыИсключения Цикл
		Для каждого СтрокаТЗ Из Элемент.Значение Цикл
			НоваяСтрока = ТаблицаДатыИсключения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Ссылка = Элемент.Ключ;
		КонецЦикла;
		ДокументыИсключения.Вставить(Элемент.Ключ, "");
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДатыИсключения", ТаблицаДатыИсключения); ТаблицаДатыИсключения = Неопределено;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("ДатаАктуальности", Мин(КонецКвартала(ОтчетныйПериод), ДатаАктуальности));
	Запрос.УстановитьПараметр("НачалоПоследнегоМесяца", НачалоМесяца(КонецКвартала(ОтчетныйПериод)));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("БудущаяДатаВыплатыДохода", ЗаполнениеДокументовЗК.ДатаВыплатыДохода(КонецКвартала(ОтчетныйПериод) + 1, Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.ХарактерВыплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.ДатаВыплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТаблицаДокументов.ДатаВыплатыВДокументе
	|		ИНАЧЕ ТаблицаДокументов.ДатаВыплаты
	|	КОНЕЦ КАК ДатаВыплаты,
	|	ТаблицаДокументов.ДатаВыплатыВДокументе
	|ПОМЕСТИТЬ ВТТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	НЕ ТаблицаДокументов.ЭтоВыплата
	|	И ПОДСТРОКА(ТаблицаДокументов.ИмяПоляДатыВыплаты, 1, 100) <> """"
	|	И ТаблицаДокументов.ДатаВыплаты <= &ДатаАктуальности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.ФизЛицо,
	|	ТаблицаДокументов.ДатаВыплатыДохода
	|ПОМЕСТИТЬ ВТТаблицаДатыИсключения
	|ИЗ
	|	&ТаблицаДатыИсключения КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка,
	|	ЕСТЬNULL(ТаблицаДатыИсключения.ДатаВыплатыДохода, ТаблицаДокументов.ДатаВыплаты) КАК ДатаВыплаты,
	|	ТаблицаДокументов.ДатаВыплатыВДокументе КАК ДатаВыплатыВДокументе,
	|	ТаблицаДокументов.ХарактерВыплаты,
	|	НДФЛРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	МИНИМУМ(НДФЛРасчетыСБюджетом.Период) КАК ДатаНачисления,
	|	ТаблицаДатыИсключения.ДатаВыплатыДохода
	|ПОМЕСТИТЬ ВТФизЛицаДокументов
	|ИЗ
	|	ВТТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|		ПО ТаблицаДокументов.Ссылка = НДФЛРасчетыСБюджетом.Регистратор
	|			И (НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаДатыИсключения КАК ТаблицаДатыИсключения
	|		ПО ТаблицаДокументов.Ссылка = ТаблицаДатыИсключения.Ссылка
	|			И (НДФЛРасчетыСБюджетом.ФизЛицо = ТаблицаДатыИсключения.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.ДатаВыплатыВДокументе,
	|	ТаблицаДокументов.ХарактерВыплаты,
	|	ТаблицаДокументов.ДатаВыплаты,
	|	ТаблицаДатыИсключения.ДатаВыплатыДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизЛицаДокументов.Ссылка,
	|	ФизЛицаДокументов.ДатаВыплаты,
	|	ФизЛицаДокументов.ДатаВыплатыВДокументе,
	|	ФизЛицаДокументов.ХарактерВыплаты,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(МИНИМУМ(ВзаиморасчетыСРаботникамиОрганизаций.Период), ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
	|	ФизЛицаДокументов.ФизЛицо,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(МИНИМУМ(ВыплатаЗарплаты.Период), ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыплатыЗарплаты,
	|	ФизЛицаДокументов.ДатаНачисления
	|ПОМЕСТИТЬ ВТДатыВыплатыПоДокументу
	|ИЗ
	|	ВТФизЛицаДокументов КАК ФизЛицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
	|		ПО ФизЛицаДокументов.ФизЛицо = ВзаиморасчетыСРаботникамиОрганизаций.Физлицо
	|			И ФизЛицаДокументов.ДатаВыплаты <= ВзаиморасчетыСРаботникамиОрганизаций.Период
	|			И ФизЛицаДокументов.ХарактерВыплаты = ВзаиморасчетыСРаботникамиОрганизаций.ХарактерВыплаты
	|			И (ВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|			И (ВзаиморасчетыСРаботникамиОрганизаций.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВыплатаЗарплаты
	|		ПО ФизЛицаДокументов.ФизЛицо = ВыплатаЗарплаты.Физлицо
	|			И ФизЛицаДокументов.ДатаВыплаты <= ВыплатаЗарплаты.Период
	|			И (ВыплатаЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата))
	|			И (ВыплатаЗарплаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|			И (ВыплатаЗарплаты.Организация = &Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизЛицаДокументов.Ссылка,
	|	ФизЛицаДокументов.ХарактерВыплаты,
	|	ФизЛицаДокументов.ДатаВыплаты,
	|	ФизЛицаДокументов.ДатаВыплатыВДокументе,
	|	ФизЛицаДокументов.ФизЛицо,
	|	ФизЛицаДокументов.ДатаНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыВыплатыПоДокументу.Ссылка,
	|	ДатыВыплатыПоДокументу.ХарактерВыплаты,
	|	ДатыВыплатыПоДокументу.ДатаВыплатыВДокументе,
	|	МИНИМУМ(ДатыВыплатыПоДокументу.Период) КАК РаннийПериод,
	|	МАКСИМУМ(ДатыВыплатыПоДокументу.Период) КАК ПозднийПериод,
	|	МИНИМУМ(ДатыВыплатыПоДокументу.ДатаВыплатыЗарплаты) КАК РанняяДатаВыплатыЗарплаты,
	|	МАКСИМУМ(ДатыВыплатыПоДокументу.ДатаВыплатыЗарплаты) КАК ПоздняяДатаВыплатыЗарплаты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВзаиморасчетыСРаботникамиОрганизаций.Регистратор ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПромежуточноеНачисление
	|ПОМЕСТИТЬ ВТДокументыИДаты
	|ИЗ
	|	ВТДатыВыплатыПоДокументу КАК ДатыВыплатыПоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
	|		ПО ДатыВыплатыПоДокументу.ФизЛицо = ВзаиморасчетыСРаботникамиОрганизаций.Физлицо
	|			И ДатыВыплатыПоДокументу.ДатаНачисления < ВзаиморасчетыСРаботникамиОрганизаций.Период
	|			И ДатыВыплатыПоДокументу.Период > ВзаиморасчетыСРаботникамиОрганизаций.Период
	|			И ДатыВыплатыПоДокументу.ХарактерВыплаты = ВзаиморасчетыСРаботникамиОрганизаций.ХарактерВыплаты
	|			И (ВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|			И (ВзаиморасчетыСРаботникамиОрганизаций.Организация = &Организация)
	|			И (ДатыВыплатыПоДокументу.ДатаВыплаты <> ЕСТЬNULL(ВзаиморасчетыСРаботникамиОрганизаций.Регистратор.ДатаВыплатыДохода, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыВыплатыПоДокументу.Ссылка,
	|	ДатыВыплатыПоДокументу.ХарактерВыплаты,
	|	ДатыВыплатыПоДокументу.ДатаВыплатыВДокументе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыВыплатПоФизЛицам.Ссылка,
	|	ДатыВыплатПоФизЛицам.ФизЛицо,
	|	ВЫБОР
	|		КОГДА ДатыВыплатПоФизЛицам.Период <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДатыВыплатПоФизЛицам.Период
	|		КОГДА Документы.ЕстьПромежуточноеНачисление
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА ДатыВыплатПоФизЛицам.ДатаВыплатыЗарплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДатыВыплатПоФизЛицам.ДатаВыплатыЗарплаты
	|		КОГДА ДатыВыплатПоФизЛицам.ДатаВыплатыВДокументе >= &НачалоПоследнегоМесяца
	|			ТОГДА &БудущаяДатаВыплатыДохода
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаВыплатыДохода
	|ПОМЕСТИТЬ ВТДатыПоФизлицам
	|ИЗ
	|	ВТДатыВыплатыПоДокументу КАК ДатыВыплатПоФизЛицам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыИДаты КАК Документы
	|		ПО ДатыВыплатПоФизЛицам.Ссылка = Документы.Ссылка
	|ГДЕ
	|	(ДатыВыплатПоФизЛицам.Ссылка ССЫЛКА Документ.ПремииРаботниковОрганизаций
	|			ИЛИ ДатыВыплатПоФизЛицам.Ссылка ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций
	|			ИЛИ ДатыВыплатПоФизЛицам.Ссылка ССЫЛКА Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоФизлицам.Ссылка КАК Ссылка,
	|	ДатыПоФизлицам.ДатаВыплатыДохода КАК ДатаВыплатыДохода,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатыПоФизлицам.ФизЛицо) КАК Количество
	|ПОМЕСТИТЬ ВТКоличествоФизлиц
	|ИЗ
	|	ВТДатыПоФизлицам КАК ДатыПоФизлицам
	|ГДЕ
	|	ДатыПоФизлицам.ДатаВыплатыДохода <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоФизлицам.Ссылка,
	|	ДатыПоФизлицам.ДатаВыплатыДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоФизлиц.Ссылка,
	|	МАКСИМУМ(КоличествоФизлиц.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТКоличествоДат
	|ИЗ
	|	ВТКоличествоФизлиц КАК КоличествоФизлиц
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоФизлиц.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоДат.Ссылка,
	|	МИНИМУМ(КоличествоФизлиц.ДатаВыплатыДохода) КАК ДатаВыплатыДохода
	|ПОМЕСТИТЬ ВТЛучшиеДаты
	|ИЗ
	|	ВТКоличествоДат КАК КоличествоДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоФизлиц КАК КоличествоФизлиц
	|		ПО КоличествоДат.Ссылка = КоличествоФизлиц.Ссылка
	|			И КоличествоДат.Количество = КоличествоФизлиц.Количество
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоДат.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыИДаты.Ссылка,
	|	ВЫБОР
	|		КОГДА ДокументыИДаты.ПозднийПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И ДокументыИДаты.ПоздняяДатаВыплатыЗарплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументыИДаты.ДатаВыплатыВДокументе >= &НачалоПоследнегоМесяца
	|						ТОГДА &БудущаяДатаВыплатыДохода
	|					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				КОНЕЦ
	|		КОГДА ДокументыИДаты.ПозднийПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И ДокументыИДаты.РанняяДатаВыплатыЗарплаты <> ДокументыИДаты.ПоздняяДатаВыплатыЗарплаты
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА ДокументыИДаты.ПозднийПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДокументыИДаты.РанняяДатаВыплатыЗарплаты
	|		КОГДА ДокументыИДаты.РаннийПериод <> ДокументыИДаты.ПозднийПериод
	|			ТОГДА ЕСТЬNULL(ЛучшиеДаты.ДатаВыплатыДохода, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		КОГДА ДокументыИДаты.ЕстьПромежуточноеНачисление
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДокументыИДаты.РаннийПериод
	|	КОНЕЦ КАК ДатаВыплаты,
	|	ВЫБОР
	|		КОГДА ДокументыИДаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				И ДокументыИДаты.ПоздняяДатаВыплатыЗарплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ""Отсутствует выплата зарплаты в текущем квартале""
	|		КОГДА ДокументыИДаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				И ДокументыИДаты.РанняяДатаВыплатыЗарплаты <> ДокументыИДаты.ПоздняяДатаВыплатыЗарплаты
	|			ТОГДА ""Выплата зарплаты выполнена в разные дни, либо не по всем сотрудникам""
	|		КОГДА ДокументыИДаты.ПозднийПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И ДокументыИДаты.ПоздняяДатаВыплатыЗарплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ""Отсутствуют выплаты по документу и выплата зарплаты в текущем квартале""
	|		КОГДА ДокументыИДаты.ПозднийПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И ДокументыИДаты.РанняяДатаВыплатыЗарплаты <> ДокументыИДаты.ПоздняяДатаВыплатыЗарплаты
	|			ТОГДА ""Отсутствует выплаты по документу, а выплата зарплаты выполнена в разные дни""
	|		КОГДА ДокументыИДаты.ПозднийПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА """"
	|		КОГДА ДокументыИДаты.РаннийПериод <> ДокументыИДаты.ПозднийПериод
	|			ТОГДА ""Выплата по документу выполнена в разные дни""
	|		КОГДА ДокументыИДаты.ЕстьПромежуточноеНачисление
	|			ТОГДА ""Перед выплатой обнаружено такое же начисление с другой датой выплаты""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Комментарий
	|ИЗ
	|	ВТДокументыИДаты КАК ДокументыИДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛучшиеДаты КАК ЛучшиеДаты
	|		ПО ДокументыИДаты.Ссылка = ЛучшиеДаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоФизлицам.Ссылка КАК Ссылка,
	|	ДатыПоФизлицам.ФизЛицо КАК ФизЛицо,
	|	ДатыПоФизлицам.ДатаВыплатыДохода КАК ДатаВыплатыДохода
	|ИЗ
	|	ВТДатыПоФизлицам КАК ДатыПоФизлицам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛучшиеДаты КАК ЛучшиеДаты
	|		ПО ДатыПоФизлицам.Ссылка = ЛучшиеДаты.Ссылка
	|ГДЕ
	|	ДатыПоФизлицам.ДатаВыплатыДохода <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ДатыПоФизлицам.ДатаВыплатыДохода <> ЕСТЬNULL(ЛучшиеДаты.ДатаВыплатыДохода, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДатаВыплатыДохода,
	|	ФизЛицо";
	Результаты = Запрос.ВыполнитьПакет();	
	ВсегоЗапросов = Результаты.Количество();
	Выборка = Результаты[ВсегоЗапросов - 2].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЗ = ТаблицаДокументов.Найти(Выборка.Ссылка, "Ссылка");
		Если СтрокаТЗ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка, , "Ссылка");
			Если СтрокаТЗ.ИмяДокумента <> "НачислениеЗарплатыРаботникамОрганизаций" И СтрокаТЗ.ПозицияДокумента > СтрокаТЗ.ДатаВыплаты Тогда
				СтрокаТЗ.ПозицияДокумента = СтрокаТЗ.ДатаВыплаты - 1
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаДатыИсключения = Результаты[ВсегоЗапросов - 1].Выгрузить();
	ТаблицаДатыИсключения.Индексы.Добавить("Ссылка");
	СтруктураПоиска = Новый Структура("Ссылка");
	Для каждого Элемент Из ДокументыИсключения Цикл
		СтруктураПоиска.Ссылка = Элемент.Ключ;
		ДатыИсключения.Вставить(Элемент.Ключ, ТаблицаДатыИсключения.Скопировать(ТаблицаДатыИсключения.НайтиСтроки(СтруктураПоиска)));
	КонецЦикла;
	
КонецПроцедуры
