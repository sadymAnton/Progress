////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ФОРМАМИ

//Устанавливает видимость реквизитов формы относящихся к ЕНВД
// Параметры:
//  ЭлементыФормы  - массив с коллекцией ЭУ формы, видимость которых необходимо определить
//  УчетнаяПолитикаПоНалоговомуУчету - структура, содержит данные учетной политики    
//  Организация -  Организация
//  Дата - Дата на которую определяем видимость ЭУ
//  ВидимостьНаДату - булево, значение ложь означает, что видимость будет установлена если в организации 
//  ЕНВД применялся вообще, не зависимо от даты которую передали
//
Процедура УстановитьВидимостьРеквизитовЕНВД(РеквизитыФормы, Организация, Дата, УчетнаяПолитикаПоНалоговомуУчету, ВидимостьНаДату = Истина) Экспорт
	
	ВидимостьЕНВД = Ложь;
	Если ВидимостьНаДату Тогда
		ВидимостьЕНВД = УчетнаяПолитикаПоНалоговомуУчету[КонецМесяца(Дата)][Организация].ОрганизацияЯвляетсяПлательщикомЕНВД И ЗначениеЗаполнено(Дата);
	Иначе
		Для каждого УчетнаяПолитикаНаДату Из УчетнаяПолитикаПоНалоговомуУчету Цикл
			Если Не УчетнаяПолитикаНаДату.Значение.Получить(Организация) = Неопределено Тогда
				ВидимостьЕНВД = УчетнаяПолитикаНаДату.Значение.Получить(Организация).ОрганизацияЯвляетсяПлательщикомЕНВД;
				Если ВидимостьЕНВД Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элемент Из РеквизитыФормы Цикл 

		Если ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "ОтнесениеРасходовКДеятельностиЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "ПодпадаетПодЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "СтатьяЗатратЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
			Элемент.ИзменятьВидимость	= ВидимостьЕНВД;	
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "СчетДт" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
			Элемент.ИзменятьВидимость	= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Субконто1" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
			Элемент.ИзменятьВидимость	= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Субконто2" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
			Элемент.ИзменятьВидимость	= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "Субконто3" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
			Элемент.ИзменятьВидимость	= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КолонкаТабличногоПоля") и Элемент.Имя = "СпособРаспределенияЗатрат" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
			Элемент.ИзменятьВидимость	= ВидимостьЕНВД;	
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода") и Элемент.Имя = "ОтнесениеРасходовКДеятельностиЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Надпись") и Элемент.Имя = "НадписьОтнесениеРасходовКДеятельностиЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Флажок") и Элемент.Имя = "ПодпадаетПодЕНВД" Тогда
			Элемент.Видимость			= ВидимостьЕНВД;	
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАВКАМИ НАЛОГОВ И ВЗНОСОВ

// Эта функция получает ставку взноса на страхование от несчастных случаев
//
// Параметры:      
//	Организация - СправочникСсылка.Организации - организация для которой нужно получить ставку
//	ДатаАктуальности - дата на которую нужно получить ставку
//
// Возвращаемое значение: 
//  Число - размер ставки, если ставка не задана - 0
//
Функция ПолучитьСтавкуВзносаНаСтрахованиеОтНесчастныхСлучаев(Организация, ДатаАктуальности) Экспорт
	Отбор = Новый Структура("Организация", Организация);
	Возврат РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ПолучитьПоследнее(ДатаАктуальности, Отбор).Ставка / 100;
	
КонецФункции // ПолучитьСтавкуВзносаНаСтрахованиеОтНесчастныхСлучаев

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Функция преобразует счет БУ в счет НУ в зависимости от вида расхода
//
// Параметры
//  СтруктураДанных - Структура - структура с данными преобразования
//                                Имена полей структуры - имена реквизитов 
//                                регистра.
//
// Возвращаемое значение
//  Счет налогового учета
//
Функция ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных) Экспорт

	Возврат БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных)
	
КонецФункции // ПреобразоватьСчетаБУвСчетНУ()

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт
	
	Возврат БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(Счет, Сообщать);
	
КонецФункции // СчетМожноИспользоватьВПроводках()

// Эта функция возвращает информацию о счете из переданного соответсвия
// Если в соответствии не найдена информация о счете - она подготавливается и 
// помещается в соответсвие
// Применяется для работы с формами в которых активно требуется получать 
// информащцию о счетах, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОСчетах - соответсвие у котрого в качестве ключа - ПланСчетовСсылка, а 
//  				  в качестве значения - структура из элементов
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто
//					  ВидСубконто2Представление - представление вида субконто
//					  ВидСубконто3Представление - представление вида субконто
//
//	Счет - ПланСчетовСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОСчете(СведенияОСчетах, Счет) Экспорт

	СведенияОСчете = СведенияОСчетах[Счет];

	Если СведенияОСчете = Неопределено Тогда

		СведенияОСчете = Новый Структура("КоличествоСубконто, ВидСубконто1, ВидСубконто2, ВидСубконто3, ТипСубконто1, ТипСубконто2, ТипСубконто3, ВидСубконто1Представление, ВидСубконто2Представление, ВидСубконто3Представление");

		СведенияОСчете.КоличествоСубконто = Счет.ВидыСубконто.Количество();

		Если СведенияОСчете.КоличествоСубконто > 0 Тогда

			ВидСубконто = Счет.ВидыСубконто[0].ВидСубконто;

			СведенияОСчете.ВидСубконто1              = ВидСубконто;
			СведенияОСчете.ТипСубконто1              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто1Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 1 Тогда

			ВидСубконто = Счет.ВидыСубконто[1].ВидСубконто;

			СведенияОСчете.ВидСубконто2              = ВидСубконто;
			СведенияОСчете.ТипСубконто2              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто2Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 2 Тогда

			ВидСубконто = Счет.ВидыСубконто[2].ВидСубконто;

			СведенияОСчете.ВидСубконто3              = ВидСубконто;
			СведенияОСчете.ТипСубконто3              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто3Представление = ВидСубконто.Наименование;

		КонецЕсли;

		СведенияОСчетах[Счет] = СведенияОСчете;

	КонецЕсли;

	Возврат СведенияОСчете;

КонецФункции  // ПолучитьСведенияОСчете

// Выполняет в табличном поле приведение значений субконто к типу, соответствующему счету
// сведения о счете передаются через параметр СведенияОСчете
// используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
//
// Параметры:
//	ТабличноеПоле 	- табличное поле 
//  ДтКт 			- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 					для колонок табличного поля поддерживаются имена 
//					типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 	- структура
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура ПривестиЗначениеСубконто(ТабличноеПоле, ДтКт, СведенияОСчете) Экспорт
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ТабличноеПоле, ДтКт, СведенияОСчете)
КонецПроцедуры   // ПривестиЗначениеСубконто

// Назначает видимость ячейкам строки табличного поля, соответствующим субконто
// в зависимлсти от счета. Сведения о счете передаются через параметр СведенияОСчете
// Используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
// при выводе строки
//
// Параметры:
//	ОформлениеСтроки 	- оформление строки
//  ДтКт 				- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 						для колонок табличного поля поддерживаются имена 
//						типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 		- структура
//					  	КоличествоСубконто - число
//                    	ТипСубконто1 - описание типа
//                    	ТипСубконто2 - описание типа
//                    	ТипСубконто3 - описание типа
//					    ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура НазначитьВидимостьСубконто(ОформлениеСтроки, ДтКт, СведенияОСчете) Экспорт
	
	Если СтрДлина(ДтКт) = 2 Тогда
		ОформлениеСтроки.Ячейки["Подразделение"+ДтКт].Видимость = СведенияОСчете.УчетПоПодразделениям;
		ОформлениеСтроки.Ячейки["Подразделение"+ДтКт].ТолькоПросмотр = не СведенияОСчете.УчетПоПодразделениям;
	КонецЕсли;
	
	Для СчетчикСубконто = 1 По 3 Цикл
		ПоказыватьСубконто = Не (СведенияОСчете.УчетПоПодразделениям и СведенияОСчете["ВидСубконто"+СчетчикСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		ПоказыватьСубконто = ПоказыватьСубконто и СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
		ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].Видимость = ПоказыватьСубконто;
		ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].ТолькоПросмотр = Не ПоказыватьСубконто;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура НазначитьВидимостьДополнительныхЯчеек(ОформлениеСтроки) Экспорт

	ВидимостьОКАТОКПП = ОформлениеСтроки.ДанныеСтроки.СчетКт = ПланыСчетов.Хозрасчетный.НДФЛ;
	ОформлениеСтроки.Ячейки["КодПоОКАТО"].Видимость = ВидимостьОКАТОКПП;
	ОформлениеСтроки.Ячейки["КодПоОКАТО"].ТолькоПросмотр = НЕ ВидимостьОКАТОКПП;
	Если не ОформлениеСтроки.Ячейки.найти("КодПоОКАТО") = Неопределено тогда
		ОформлениеСтроки.Ячейки["КодПоОКТМО"].Видимость = ВидимостьОКАТОКПП;
		ОформлениеСтроки.Ячейки["КодПоОКТМО"].ТолькоПросмотр = НЕ ВидимостьОКАТОКПП;
	Конецесли;	
	ОформлениеСтроки.Ячейки["КПП"].Видимость = ВидимостьОКАТОКПП;
	ОформлениеСтроки.Ячейки["КПП"].ТолькоПросмотр = НЕ ВидимостьОКАТОКПП;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПОСОБАМИ ОТРАЖЕНИЯ В УЧЕТЕ

// Функция получает данные способа отраженния
//
// Параметры
//  <СпособОтражения>  – <СправочникСсылка.Способы отраженияЗарплатыВРеглУчете> – способ отражения по которому
//						необходимо получить данные
// Возвращаемое значение:
//   Результат запроса
//
Функция ПолучитьХарактеристикуСпособаОтражения(СпособОтражения) Экспорт

	Если СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпособыОтражения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СпособыОтражения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетВыбран,
	|	ВЫБОР
	|		КОГДА СпособыОтражения.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БольничныйЗаСчетРаботодателя,
	|	ВЫБОР
	|		КОГДА СпособыОтражения.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОтражатьВБухучете,
	|	ВЫБОР
	|		КОГДА СпособыОтражения.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражениеНачисленийПоУмолчанию
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтражения
	|ГДЕ
	|	СпособыОтражения.Ссылка = &парамСпособОтражения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСпособОтражения", СпособОтражения);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();


КонецФункции // ПолучитьХарактеристикуСпособаОтражения()

