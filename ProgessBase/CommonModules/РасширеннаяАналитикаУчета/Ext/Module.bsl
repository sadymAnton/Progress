// Функция получает счет расходов бухгалтерского учета, соответствующий счету расходов
// по налоговому учету.
//
// Параметры:
//	СчетУчетаНУ - ПланСчетовСсылка.Налоговый - Счет учета затрат по налоговому учету
//  ТаблицаСоответствияСчетовНУиБУ - кэш соответствия счетов, готовится самой функцией
//
// Возвращаемое значение:
//	ПланСчетов.Хозрасчетный - Счет расходов по бухгалтерскому учету
//
Функция ПолучитьСчетБУПоСчетуНУ(
	СчетУчетаНУ,
	ТаблицаСоответствияСчетовНУиБУ = Неопределено
	) Экспорт
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СчетУчетаНУ) 
	    И ТипЗнч(СчетУчетаНУ) = Тип("ПланСчетовСсылка.Налоговый") Тогда
		
		Если СчетУчетаНУ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ОсновноеПроизводство) Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД;
			
		ИначеЕсли СчетУчетаНУ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ВспомогательныеПроизводства) Тогда
		  	СчетУчета = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД;
			
		ИначеЕсли СчетУчетаНУ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ОбслуживающиеПроизводства) Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваНеОблагаемоеЕНВД;
		
		ИначеЕсли СчетУчетаНУ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.БракВПроизводстве) Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.БракВПроизводствеНеОблагаемоеЕНВД;
			
		ИначеЕсли СчетУчетаНУ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы) Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД;
			
		ИначеЕсли СчетУчетаНУ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы) Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД
			
		ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ИздержкиОбращенияНеОблагаемыеЕНВД Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияНеОблагаемыеЕНВД;
			
		ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияРаспределяемые;
			
		ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД;
			
		ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.КоммерческиеРасходыРаспределяемые Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыРаспределяемые;
			
		КонецЕсли;
	КонецЕсли;	
	
	Если (НЕ ЗначениеЗаполнено(СчетУчета))
	  И ТаблицаСоответствияСчетовНУиБУ <> Неопределено Тогда
	  	СтрокаТаблицы = ТаблицаСоответствияСчетовНУиБУ.Найти(СчетУчетаНУ, "СчетНУ");
		Если СтрокаТаблицы <> Неопределено Тогда
			СчетУчета = СтрокаТаблицы.СчетБУ;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СчетУчета;
	
КонецФункции // ПолучитьСчетБУПоСчетуНУ()

// Функция формирует запрос по измерениям регистра сведений,
// соответствующего ключу аналитики.
//
// Параметры:
//	СправочникСсылка - СправочникСсылка - Ключ аналитики
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса по регистру сведений
//
Функция СформироватьЗапросПоЗначениямАналитики(СправочникСсылка) Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Тип("СправочникСсылка.КлючиАналитикиВидаУчета"), "АналитикаВидаУчета");
	Соответствие.Вставить(Тип("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"), "АналитикаРаспределенияЗатрат");
	Соответствие.Вставить(Тип("СправочникСсылка.КлючиАналитикиУчетаЗатрат"), "АналитикаУчетаЗатрат");
	Соответствие.Вставить(Тип("СправочникСсылка.КлючиАналитикиУчетаПартий"), "АналитикаУчетаПартий");
	Соответствие.Вставить(Тип("СправочникСсылка.КлючиАналитикиУчетаПрочихЗатрат"), "АналитикаУчетаПрочихЗатрат");
	
	Запрос = Новый Запрос;
	
	Элемент = Соответствие.Получить(ТипЗнч(СправочникСсылка));
	Если Элемент <> Неопределено Тогда
		ИмяРегистра = Элемент;
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.%ИмяРегистра% КАК Аналитика
		|ГДЕ
		|	Аналитика.Ссылка = &Ссылка
		|";
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ИмяРегистра%", Элемент);
		Запрос.УстановитьПараметр("Ссылка", СправочникСсылка);
		
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL
		|";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // СформироватьЗапросПоЗначениямАналитики()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ (ФОРМИРОВАНИЯ) ЗНАЧЕНИЯ КЛЮЧА АНАЛИТИКИ

// Процедура определяет используемые измерения расширенной аналитики
//
// Параметры:
//	СтруктураИзмерений - структура, содержит перечень измерений, которые нужно проверить,
//	УправленческийУчет - булево, если ИСТИНА то проверяется упр. учет, иначе регл.
//
Процедура ПолучитьИспользуемыеИзмерения(СтруктураИзмерений, УправленческийУчет = Ложь) Экспорт
	Запрос = Новый Запрос("");
	
	Если УправленческийУчет Тогда
		Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиАналитикиУчета.Код КАК Код,
			|	НастройкиАналитикиУчета.УправленческийУчет КАК Включен
			|ИЗ Справочник.НастройкиАналитикиУчета КАК НастройкиАналитикиУчета
			|ГДЕ
			|	НастройкиАналитикиУчета.Код В (&МассивИзмерений)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиАналитикиУчета.Код КАК Код,
			|	НастройкиАналитикиУчета.РегламентированныйУчет КАК Включен
			|ИЗ Справочник.НастройкиАналитикиУчета КАК НастройкиАналитикиУчета
			|ГДЕ
			|	НастройкиАналитикиУчета.Код В (&МассивИзмерений)";			
	КонецЕсли;
	
	МассивИзмерений = Новый Массив();
	Для Каждого ТекущееИзмерение Из СтруктураИзмерений Цикл
		МассивИзмерений.Добавить(ТекущееИзмерение.Ключ);
		СтруктураИзмерений.Вставить(ТекущееИзмерение.Ключ, Ложь);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивИзмерений",МассивИзмерений);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураИзмерений[СокрЛП(Выборка.Код)] = Выборка.Включен;
	КонецЦикла;	
КонецПроцедуры	

// Процедура заполнения настроек аналитики по шаблону.
//
// Параметры:
//	РежимИспользованияРасширеннойАналитики - ПеречислениеСсылка.РежимыИспользованияРасширеннойАналитики - Режим использования
//
Процедура ЗаполнитьНастройкиАналитикиПоШаблону(
	РежимИспользованияРасширеннойАналитики = Неопределено
	) Экспорт
	
	Если РежимИспользованияРасширеннойАналитики = Неопределено Тогда
		РежимИспользованияРасширеннойАналитики = глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
	КонецЕсли;
	
	ДопАналитикаРеглУчет = (РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	МакетНастройки = Справочники.НастройкиАналитикиУчета.ПолучитьМакет("НастройкиУчета");
	
	КоличествоСтрок = МакетНастройки.ВысотаТаблицы;
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		ОбластьИмя = МакетНастройки.Область(НомерСтроки, 2, НомерСтроки, 2);
		ИмяИзмерения = СокрЛП(ОбластьИмя.Текст);
		Если ПустаяСтрока(ИмяИзмерения) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникСсылка = Справочники.НастройкиАналитикиУчета.НайтиПоКоду(ИмяИзмерения);
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			Продолжить;
		КонецЕсли;
	
		ОбластьУпрУчет = МакетНастройки.Область(НомерСтроки, 3, НомерСтроки, 3);
		УпрУчет = Не ПустаяСтрока(ОбластьУпрУчет.Текст);
				
		Если Не ДопАналитикаРеглУчет Тогда
			ОбластьРеглУчет = МакетНастройки.Область(НомерСтроки, 5, НомерСтроки, 5);
			РеглУчет = Не ПустаяСтрока(ОбластьРеглУчет.Текст);
		Иначе
			ОбластьРеглУчет = МакетНастройки.Область(НомерСтроки, 4, НомерСтроки, 4);
			РеглУчет = Не ПустаяСтрока(ОбластьРеглУчет.Текст);
		КонецЕсли;
		
		// Колонка "Значение по умолчанию" - в её ячейках установлено свойство "СодержитЗначение"
		ОбластьЗначение = МакетНастройки.Область(НомерСтроки, 6, НомерСтроки, 6);
		ЗначениеПоУмолчанию = ОбластьЗначение.Значение;
		
		// Колонка "Только просмотр упр. учет" 
		ОбластьТолькоПросмотр = МакетНастройки.Область(НомерСтроки, 7, НомерСтроки, 7);
		ТолькоПросмотр = Не ПустаяСтрока(ОбластьТолькоПросмотр.Текст);
		
		// Колонка "Только просмотр регл. учет" 
		ОбластьТолькоПросмотрРегл = МакетНастройки.Область(НомерСтроки, 8, НомерСтроки, 8);
		ТолькоПросмотрРегл = Не ПустаяСтрока(ОбластьТолькоПросмотрРегл.Текст);
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();		
		СправочникОбъект.УправленческийУчет = УпрУчет;
		СправочникОбъект.РегламентированныйУчет = РеглУчет;
		СправочникОбъект.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;
		СправочникОбъект.ТолькоПросмотр = ТолькоПросмотр;
		СправочникОбъект.ТолькоПросмотрРегл = ТолькоПросмотрРегл;
		
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНастройкиАналитикиПоШаблону()

// Функция получает массив элементов с признаком "ТолькоПросмотр".
//
// Возвращаемое значение:
//	Массив - Массив элементов
//
Функция ПолучитьМассивНастроекРАТолькоПросмотр() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиАналитикиУчета.Ссылка КАК Ссылка,
	|	НастройкиАналитикиУчета.ТолькоПросмотр КАК ТолькоПросмотр,
	|	НастройкиАналитикиУчета.ТолькоПросмотрРегл КАК ТолькоПросмотрРегл
	|ИЗ
	|	Справочник.НастройкиАналитикиУчета КАК НастройкиАналитикиУчета
	|ГДЕ
	|	НастройкиАналитикиУчета.ТолькоПросмотр
	|	ИЛИ НастройкиАналитикиУчета.ТолькоПросмотрРегл
	|
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьМассивНастроекРАТолькоПросмотр()

// Функция проверяет заполнение настроек аналитики учета.
//
// Возвращаемое значение:
//	Булево - признак заполненности настроек аналитики
//
Функция ЗаполненыНастройкиАналитикиУчета()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиАналитикиУчета.Код
	|ИЗ
	|	Справочник.НастройкиАналитикиУчета КАК НастройкиАналитикиУчета
	|ГДЕ
	|	НастройкиАналитикиУчета.УправленческийУчет
	|	ИЛИ НастройкиАналитикиУчета.РегламентированныйУчет
	|
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапроса.Пустой());
	
КонецФУнкции // ЗаполненыНастройкиАналитикиУчета()

// Функция формирует шаблон измерений ключа аналитики учета прочих затрат.
//
// Параметры:
//	ИмяРегистра - Строка - Имя регистра
//
// Возвращаемое значение:
//	ТаблицаЗначений - Шаблон измерений
//	
Функция ШаблонИзмеренийИзМакета(ИмяРегистра)
	
	ШаблонИзмерений = Новый ТаблицаЗначений;
	Колонки = ШаблонИзмерений.Колонки;
	Колонки.Добавить("Измерение");
	Колонки.Добавить("Значение");
	Колонки.Добавить("УпрУчет");
	Колонки.Добавить("РеглУчет");
	
	Индексы = ШаблонИзмерений.Индексы;
	Индексы.Добавить("УпрУчет");
	Индексы.Добавить("РеглУчет");
	
	МакетНастройки = РегистрыСведений[ИмяРегистра].ПолучитьМакет("НастройкиУчета");
	
	КоличествоСтрок = МакетНастройки.ВысотаТаблицы;
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		ОбластьИмя = МакетНастройки.Область(НомерСтроки, 1, НомерСтроки, 1);
		ИмяИзмерения = СокрЛП(ОбластьИмя.Текст);
		Если ПустаяСтрока(ИмяИзмерения) Тогда
			Продолжить;
		КонецЕсли;
			
		ОбластьУпрУчет = МакетНастройки.Область(НомерСтроки, 2, НомерСтроки, 2);
		УпрУчет = Не ПустаяСтрока(ОбластьУпрУчет.Текст);
		
		ОбластьРеглУчет = МакетНастройки.Область(НомерСтроки, 3, НомерСтроки, 3);
		РеглУчет = Не ПустаяСтрока(ОбластьРеглУчет.Текст);
		
		ОбластьЗначение = МакетНастройки.Область(НомерСтроки, 4, НомерСтроки, 4);
		ЗначениеПоУмолчанию = ОбластьЗначение.Значение;
		
		НоваяСтрока = ШаблонИзмерений.Добавить();
		НоваяСтрока.Измерение = ИмяИзмерения;
		НоваяСтрока.Значение = ЗначениеПоУмолчанию;
		НоваяСтрока.УпрУчет = УпрУчет;
		НоваяСтрока.РеглУчет = РеглУчет;
		
	КонецЦикла;
	
	Возврат ШаблонИзмерений;
	
КонецФункции // ШаблонИзмеренийИзМакета()

// Функция формирует шаблон измерений ключа аналитики.
//
// Параметры:
//	ИмяРегистра - Строка - Имя регистра сведений - ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Возвращаемое значение:
//	ТаблицаЗначений - Шаблон измерений
//
Функция ШаблонИзмеренийКлючаАналитики(
	ИмяРегистра,
	СтруктураКлючиАналитики
	)
	
	Перем ШаблонИзмерений;
	
	ИмяСтруктурыИзмерений = "Шаблон" + ИмяРегистра;
	
	Если СтруктураКлючиАналитики = Неопределено
	 ИЛИ Не СтруктураКлючиАналитики.Свойство(ИмяСтруктурыИзмерений, ШаблонИзмерений) Тогда
		
	 	Если Не ЗаполненыНастройкиАналитикиУчета() Тогда
			ЗаполнитьНастройкиАналитикиПоШаблону();
		КонецЕсли;
		
		Если ИмяРегистра = "АналитикаУчетаПрочихЗатрат" Тогда
			ШаблонИзмерений = ШаблонИзмеренийИзМакета(ИмяРегистра);
		Иначе
		
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	НастройкиАналитикиУчета.УправленческийУчет КАК УпрУчет,
			|	НастройкиАналитикиУчета.РегламентированныйУчет КАК РеглУчет,
			|	НастройкиАналитикиУчета.ЗначениеПоУмолчанию КАК Значение,
			|	НастройкиАналитикиУчета.Код КАК Измерение
			|ИЗ
			|	Справочник.НастройкиАналитикиУчета КАК НастройкиАналитикиУчета
			|ГДЕ
			|	НастройкиАналитикиУчета.Родитель = &Родитель
			|	И НастройкиАналитикиУчета.Предопределенный
			|	И (Не НастройкиАналитикиУчета.ЭтоГруппа)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НастройкиАналитикиУчета.Наименование
			|
			|";
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Родитель", Справочники.НастройкиАналитикиУчета[ИмяРегистра]);
			РезультатЗапроса = Запрос.Выполнить();
			ШаблонИзмерений = РезультатЗапроса.Выгрузить();
			
		КонецЕсли;
			
		Индексы = ШаблонИзмерений.Индексы;
		Индексы.Добавить("УпрУчет");
		Индексы.Добавить("РеглУчет");
				
		Если СтруктураКлючиАналитики <> Неопределено Тогда
			СтруктураКлючиАналитики.Вставить(ИмяСтруктурыИзмерений, ШаблонИзмерений);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ШаблонИзмерений;
	
КонецФункции // ШаблонИзмеренийКлючаАналитики()

// Процедура формирует структуру для получения ключа аналитики "Аналитика вида учета".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	СтруктураИзмерений - Структура - Структура измерений ключа аналитики
//
Процедура СкорректироватьЗначенияКлючаАналитикиВидаУчета(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтруктураИзмерений
	)
		
	// Подразделение организации должно указываться в свойстве "ПодразделениеОрганизации".
	Если СтруктураИзмерений.Свойство("Подразделение")
	   И ТипЗнч(СтруктураИзмерений.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций")
	Тогда
		СтруктураИзмерений.ПодразделениеОрганизации = СтруктураИзмерений.Подразделение;
		СтруктураИзмерений.Подразделение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
	// Определим, требуется ли заполнять счет налогового учета
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		ОтражатьВНалоговомУчете = Ложь;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РасчетСебестоимостиВыпуска") Тогда
		
		// Документ отражается в налоговом учете всегда, кроме УСН
		ПрименяетсяУСН = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы;
		
		ОтражатьВНалоговомУчете = НЕ ПрименяетсяУСН;
			
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") Тогда
		
		// При УСН значение этого свойства - Ложь
		ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
		
	Иначе
		
		// Как правило, операции должны отражаться в налоговом учете
		ОтражатьВНалоговомУчете = Истина;
		
	КонецЕсли;
		
	// Счет налогового учета должен указываться в свойстве "СчетУчетаНУ".
	Если ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	   И СтруктураИзмерений.Свойство("СчетУчета")
	   И ТипЗнч(СтруктураИзмерений.СчетУчета) = Тип("ПланСчетовСсылка.Налоговый")
	Тогда
		СтруктураИзмерений.СчетУчетаНУ = СтруктураИзмерений.СчетУчета;
		СтруктураИзмерений.СчетУчета = ПолучитьСчетУчетаБУ(СтруктураИзмерений.СчетУчетаНУ);
	КонецЕсли;
	
	// Если не указан счет бухгалтерского учета, подберем соответствующий счет.
	Если ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	   И СтруктураИзмерений.Свойство("СчетУчета")
	   И СтруктураИзмерений.Свойство("СчетУчетаНУ")
	   И Не ЗначениеЗаполнено(СтруктураИзмерений.СчетУчета)
	   И ЗначениеЗаполнено(СтруктураИзмерений.СчетУчетаНУ)
	Тогда
		СтруктураИзмерений.СчетУчета = ПолучитьСчетУчетаБУ(СтруктураИзмерений.СчетУчетаНУ);
	КонецЕсли;
	
	// Если не указан счет налогового учета, подберем соответствующий счет.
	Если ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	   И ОтражатьВНалоговомУчете
	   И СтруктураИзмерений.Свойство("СчетУчета")
	   И СтруктураИзмерений.Свойство("СчетУчетаНУ")
	   И ЗначениеЗаполнено(СтруктураИзмерений.СчетУчета)
	   И Не ЗначениеЗаполнено(СтруктураИзмерений.СчетУчетаНУ)
	Тогда
		СтруктураИзмерений.СчетУчетаНУ = ПолучитьСчетУчетаНУ(СтруктураИзмерений.СчетУчета);
	КонецЕсли;
	
	// Очистим счет налогового учета, если документ не отражается в налоговом учете.
	Если ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	   И Не ОтражатьВНалоговомУчете
	   И СтруктураИзмерений.Свойство("СчетУчетаНУ")
	Тогда
		СтруктураИзмерений.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьЗначенияКлючаАналитикиВидаУчета()

// Процедура формирует структуру для получения ключа аналитики "Аналитика учета затрат".
//
// Параметры:
//	СтруктураИзмерений - Структура - Структура измерений ключа аналитики
//
Процедура СкорректироватьЗначенияКлючаАналитикиУчетаЗатрат(
	СтруктураИзмерений
	)
	
	ВидЗатрат = ?(СтруктураИзмерений.Свойство("СтатьяЗатрат") И ЗначениеЗаполнено(СтруктураИзмерений.СтатьяЗатрат),
		СтруктураИзмерений.СтатьяЗатрат.ВидЗатрат,
		Перечисления.ВидыЗатрат.Материальные);
	
	Если СтруктураИзмерений.УчетЗатратПоНоменклатуре = Неопределено
	   И СтруктураИзмерений.Свойство("ХарактерЗатрат")
	   И Не УчитыватьЗатратыПоНоменклатуре(СтруктураИзмерений.ХарактерЗатрат, ВидЗатрат)
	Тогда
	    Если СтруктураИзмерений.Свойство("Затрата") Тогда
			СтруктураИзмерений.Затрата = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		Если СтруктураИзмерений.Свойство("ХарактеристикаЗатраты") Тогда
			СтруктураИзмерений.ХарактеристикаЗатраты = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		Если СтруктураИзмерений.Свойство("СерияЗатраты") Тогда
			СтруктураИзмерений.СерияЗатраты = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры // СкорректироватьЗначенияКлючаАналитикиУчетаЗатрат()

// Процедура формирует структуру для получения ключа аналитики "Аналитика учета партий".
//
// Параметры:
//	СтруктураИзмерений - Структура - Структура измерений ключа аналитики
//
Процедура СкорректироватьЗначенияКлючаАналитикиУчетаПартий(
	СтруктураИзмерений
	)
	
	Если СтруктураИзмерений.Свойство("Заказ")
	   И Не ЗначениеЗаполнено(СтруктураИзмерений.Заказ)
	Тогда
		СтруктураИзмерений.Заказ = Неопределено;
	КонецЕсли;
	
	Если СтруктураИзмерений.Свойство("СтатусПартии") Тогда
		Если СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция
		  ИЛИ СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка
		  ИЛИ СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование Тогда
			СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
		ИначеЕсли СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка Тогда		
			СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьЗначенияКлючаАналитикиУчетаПартий()

// Функция формирует структуру для получения ключа аналитики.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	КлючАналитики - ПеречислениеСсылка.КлючиАналитики - Идентификатор ключа аналитики
//	ПараметрыАналитики - Коллекция - Коллекция параметров для получения ключа
//		(Структура, Выборка из результата запроса, Строка табличной части и т.п.)
//	ШаблонИзмерений - ТаблицаЗначений - Шаблон измерений ключа аналитики
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МассивИзмерений - Массив - Массив измерений ключа аналитики
//
// Возвращаемое значение:
//	Структура - Структура измерений ключа аналитики
//
Функция СтруктураИзмеренийКлючаАналитики(
	СтруктураШапкиДокумента,
	КлючАналитики,
	ПараметрыАналитики,
	ШаблонИзмерений,
	ВидОтраженияВУчете,
	МассивИзмерений
	)
	
	СтруктураИзмерений = Новый Структура;
	
	Для Каждого Строка Из ШаблонИзмерений Цикл
		СтруктураИзмерений.Вставить(СокрЛП(Строка.Измерение), Строка.Значение);
		МассивИзмерений.Добавить(СокрЛП(Строка.Измерение));
	КонецЦикла;
	
	СтруктураИзмерений.Вставить("УчетЗатратПоНоменклатуре");
	
	ЗаполнитьЗначенияСвойств(СтруктураИзмерений, ПараметрыАналитики);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СтруктураОтбора = Новый Структура("УпрУчет", Ложь);
	Иначе
		СтруктураОтбора = Новый Структура("РеглУчет", Ложь);
	КонецЕсли;
	
	// Очистим значения в соответствии с видом учета.
	Массив = ШаблонИзмерений.НайтиСтроки(СтруктураОтбора);
	Если Массив.Количество() > 0 Тогда
		Для Каждого Строка Из Массив Цикл
			СтруктураИзмерений[СокрЛП(Строка.Измерение)] = Строка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если КлючАналитики = Перечисления.КлючиАналитики.АналитикаВидаУчета Тогда
		СкорректироватьЗначенияКлючаАналитикиВидаУчета(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			СтруктураИзмерений
		);
	ИначеЕсли КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаЗатрат Тогда
		СкорректироватьЗначенияКлючаАналитикиУчетаЗатрат(СтруктураИзмерений);
		
	ИначеЕсли КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаПартий Тогда
		СкорректироватьЗначенияКлючаАналитикиУчетаПартий(СтруктураИзмерений);
		
	КонецЕсли;
	
	Возврат СтруктураИзмерений;
		
КонецФункции // СтруктураИзмеренийКлючаАналитики()

////////////////////////////////////////////////////////////////////////////////

// Функция определяет учет затрат по номенклатуре.
//
// Параметры:
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат
//	ВидЗатрат - ПеречислениеСсылка.ВидыЗатрат - Вид затрат
//
// Возвращаемое значение:
//	Булево - Истина - Затраты учитываются по номенклатуре
//			 Ложь - Затраты не учитываются по номенклатуре
//
Функция УчитыватьЗатратыПоНоменклатуре(
	ХарактерЗатрат,
	ВидЗатрат
	) Экспорт
	
	Если (Не ЗначениеЗаполнено(ХарактерЗатрат)
	 		ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
	 		ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ЗаготовлениеИПриобретениеМЦ)
	   И (Не ЗначениеЗаполнено(ВидЗатрат)
	 		ИЛИ ВидЗатрат = Перечисления.ВидыЗатрат.Материальные)
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // УчитыватьЗатратыПоНоменклатуре()

// Функция формирует строку наименования ключа аналитики.
//
// Параметры:
//	МассивИзмерений - Массив - Массив измерений ключа аналитики
//	МенеджерЗаписи - РегистрСведенийМенеджерЗаписи - Запись регистра сведений
//
// Возвращаемое значение:
//	Строка - Полное наименование ключа аналитики
//
Функция ПолучитьПолноеНаименованиеКлючаАналитики(
	МассивИзмерений,
	МенеджерЗаписи
	)
	
	Наименование = "";
	
	Для Каждого Элемент Из МассивИзмерений Цикл
		
		// Получим представление значения, которое указано в измерении регистра сведений.
		Значение = МенеджерЗаписи[Элемент];
		Если ЗначениеЗаполнено(Значение) И Значение <> Ложь Тогда
			// Булевы значения представляем только текстом "Истина"
			ТекстЗначения = Строка(МенеджерЗаписи[Элемент]);
			Наименование = Наименование + ТекстЗначения + "; ";
		КонецЕсли;
		
	КонецЦикла;
	
	Если Прав(Наименование, 2) = "; " Тогда
		Наименование = Лев(Наименование, СтрДлина(Наименование) - 2);
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции // ПолучитьПолноеНаименованиеКлючаАналитики()

// Функция получает ключ аналитики из таблицы значений (кэша).
//
// Параметры:
//	СтруктураИзмерений - Структура - Структура значений измерений ключа аналитики
//	ИмяКлючаАналитики - Строка - Имя ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Возвращаемое значение:
//	СправочникСсылка - Значение ключа аналитики
//
Функция ПолучитьКлючАналитикиИзТаблицы(
	СтруктураИзмерений,
	ИмяКлючаАналитики,
	СтруктураКлючиАналитики
	)
	
	ТаблицаКлючаАналитики = Неопределено;
	ЭлементКлючАналитики = Неопределено;
	
	Если СтруктураКлючиАналитики.Свойство(ИмяКлючаАналитики, ТаблицаКлючаАналитики) Тогда
		
		МассивСтрок = ТаблицаКлючаАналитики.НайтиСтроки(СтруктураИзмерений);
		Если МассивСтрок.Количество() > 0 Тогда
			ЭлементКлючАналитики = МассивСтрок[0].КлючАналитики;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭлементКлючАналитики;
	
КонецФункции // ПолучитьКлючАналитикиИзТаблицы()

// Процедура добавляет ключ аналитики в таблицу значений (для кэширования)
//
// Параметры:
//	СтруктураИзмерений - Структура - Структура значений измерений ключа аналитики
//	ИмяКлючаАналитики - Строка - Имя ключа аналитики
//	ЭлементКлючАналитики - СправочникСсылка - Элемент справочника - ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
Процедура ДобавитьКлючАналитикиВТаблицу(
	СтруктураИзмерений,
	ИмяКлючаАналитики,
	ЭлементКлючАналитики,
	СтруктураКлючиАналитики
	)
	
	ТаблицаКлючаАналитики = Неопределено;
	
	Если Не СтруктураКлючиАналитики.Свойство(ИмяКлючаАналитики, ТаблицаКлючаАналитики) Тогда
		
		ТаблицаКлючаАналитики = Новый ТаблицаЗначений;
		Индекс = "";
		Для Каждого Элемент Из СтруктураИзмерений Цикл
			ТаблицаКлючаАналитики.Колонки.Добавить(Элемент.Ключ);
			Индекс = Индекс + Элемент.Ключ + ",";
		КонецЦикла;
		Индекс = Лев(Индекс, СтрДлина(Индекс) - 1);
		ТаблицаКлючаАналитики.Индексы.Добавить(Индекс);
		ТаблицаКлючаАналитики.Колонки.Добавить("КлючАналитики");
		
	КонецЕсли;
		
	НоваяСтрока = ТаблицаКлючаАналитики.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураИзмерений);
	НоваяСтрока.КлючАналитики = ЭлементКлючАналитики;
	
	СтруктураКлючиАналитики.Вставить(ИмяКлючаАналитики, ТаблицаКлючаАналитики);
	
КонецПроцедуры // ДобавитьКлючАналитикиВТаблицу()

// Функция получает ключ аналитики из регистра сведений или
// создает новый элемент в случае отсутствия.
//
// Параметры:
//	СтруктураИзмерений - Структура - Структура значений измерений ключа аналитики
//	МассивИзмерений - Массив - Массив измерений ключа аналитики
//	ИмяСправочника - Строка - Имя справочника - ключа аналитики
//	ИмяРегистра - Строка - Имя регистра сведений - ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Возвращаемое значение:
//	СправочникСсылка - Значение ключа аналитики
//
Функция ПолучитьСоздатьКлючАналитики(
	СтруктураИзмерений,
	МассивИзмерений,
	ИмяСправочника,
	ИмяРегистра,
	СтруктураКлючиАналитики
	)
	
	ЭлементКлючАналитики = Неопределено;
	
	// Попробуем получить ключ аналитики из кэша.
	Если СтруктураКлючиАналитики <> Неопределено Тогда
		ЭлементКлючАналитики = ПолучитьКлючАналитикиИзТаблицы(
			СтруктураИзмерений,
			ИмяРегистра,
			СтруктураКлючиАналитики
		);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЭлементКлючАналитики) Тогда
		
		// Возвращаем пустую ссылку на ключ аналитики затрат, если все измерения не заполнены,
		// так как такая логика (указывать пустую ссылку) предусмотрена при формировании движений
		// в общем модулей УправлениеПроизводствомДвиженияПоРегистрам
		Если ИмяРегистра = "АналитикаУчетаЗатрат" Тогда
			ЕстьЗаполненныеИзмерения = Ложь;
			Для Каждого Измерение Из СтруктураИзмерений Цикл
				ЕстьЗаполненныеИзмерения = ЕстьЗаполненныеИзмерения ИЛИ ЗначениеЗаполнено(Измерение.Значение);
			КонецЦикла;
			Если НЕ ЕстьЗаполненныеИзмерения Тогда
				Возврат Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			ЭлементКлючАналитики = МенеджерЗаписи.Ссылка;
		Иначе
			
			// Заполним измерения регистра, т.к. после чтения они пустые.
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
			
			// Создадим новый элемент справочника - ключ аналитики.
			СправочникОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
			СправочникОбъект.Наименование = ПолучитьПолноеНаименованиеКлючаАналитики(
				МассивИзмерений,
				МенеджерЗаписи
			);
			СправочникОбъект.Записать();
			
			ЭлементКлючАналитики = СправочникОбъект.Ссылка;
			
			МенеджерЗаписи.Ссылка = ЭлементКлючАналитики;
			МенеджерЗаписи.Записать(Ложь);
			
		КонецЕсли;
		
		// Добавим новый ключ аналитики в кэш.
		Если СтруктураКлючиАналитики <> Неопределено Тогда
			ДобавитьКлючАналитикиВТаблицу(
				СтруктураИзмерений,
				ИмяРегистра,
				ЭлементКлючАналитики,
				СтруктураКлючиАналитики
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементКлючАналитики = Неопределено Тогда
		ЭлементКлючАналитики = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЭлементКлючАналитики;
	
КонецФункции // ПолучитьСоздатьКлючАналитики()

// Функция получает элемент справочника - ключ аналитики вида учета.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ПараметрыАналитики - Коллекция - Коллекция параметров для получения ключа
//	КлючАналитики - ПеречислениеСсылка.КлючиАналитики - Идентификатор ключа аналитики
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Возвращаемое значение:
//	СправочникСсылка - Значение ключа аналитики
//
Функция ПолучитьЗначениеКлючаАналитики(
	СтруктураШапкиДокумента,
	ПараметрыАналитики,
	КлючАналитики,
	ВидОтраженияВУчете,
	СтруктураКлючиАналитики = Неопределено
	) Экспорт
	
	Если КлючАналитики = Перечисления.КлючиАналитики.АналитикаВидаУчета Тогда
		ИмяСправочника = "КлючиАналитикиВидаУчета";
		ИмяРегистра = "АналитикаВидаУчета";
		
	ИначеЕсли КлючАналитики = Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат Тогда
		ИмяСправочника = "КлючиАналитикиРаспределенияЗатрат";
		ИмяРегистра = "АналитикаРаспределенияЗатрат";
		
	ИначеЕсли КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаЗатрат Тогда
		ИмяСправочника = "КлючиАналитикиУчетаЗатрат";
		ИмяРегистра = "АналитикаУчетаЗатрат";
		
	ИначеЕсли КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаПартий Тогда
		ИмяСправочника = "КлючиАналитикиУчетаПартий";
		ИмяРегистра = "АналитикаУчетаПартий";
		
	ИначеЕсли КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат Тогда
		ИмяСправочника = "КлючиАналитикиУчетаПрочихЗатрат";
		ИмяРегистра = "АналитикаУчетаПрочихЗатрат";

	Иначе
		СтруктураИзмерений = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Указан неправильный ключ аналитики!
			|Функция <ПолучитьЗначениеКлючаАналитики>");
	КонецЕсли;
		
	ШаблонИзмерений = ШаблонИзмеренийКлючаАналитики(
		ИмяРегистра,
		СтруктураКлючиАналитики
	);
	МассивИзмерений = Новый Массив;
	СтруктураИзмерений = СтруктураИзмеренийКлючаАналитики(
		СтруктураШапкиДокумента,
		КлючАналитики,
		ПараметрыАналитики,
		ШаблонИзмерений,
		ВидОтраженияВУчете,
		МассивИзмерений
	);
	
	Если СтруктураИзмерений <> Неопределено Тогда
		ЭлементКлючАналитики = ПолучитьСоздатьКлючАналитики(
			СтруктураИзмерений,
			МассивИзмерений,
			ИмяСправочника,
			ИмяРегистра,
			СтруктураКлючиАналитики
		);
	Иначе
		ЭлементКлючАналитики = Неопределено;
	КонецЕсли;
	
	Возврат ЭлементКлючАналитики;
	
КонецФункции // ПолучитьКлючАналитикиВидаУчета()

// Функция получает счет расходов бухгалтерского учета, соответствующий счету расходов
// по налоговому учету.
//
// Параметры:
//	СчетУчетаНУ - ПланСчетовСсылка.Налоговый - Счет учета затрат по налоговому учету
//
// Возвращаемое значение:
//	ПланСчетов.Хозрасчетный - Счет расходов по бухгалтерскому учету
//
Функция ПолучитьСчетУчетаБУ(
	СчетУчетаНУ
	)
	
	Если СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД;
		
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД;
		
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваНеОблагаемоеЕНВД;
	
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.БракВПроизводствеНеОблагаемоеЕНВД;
		
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД;
		
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД
		
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ИздержкиОбращенияНеОблагаемыеЕНВД Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияНеОблагаемыеЕНВД;
		
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияРаспределяемые;
		
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД;
		
	ИначеЕсли СчетУчетаНУ = ПланыСчетов.Налоговый.КоммерческиеРасходыРаспределяемые Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыРаспределяемые;
		
	КонецЕсли;
	
	Возврат СчетУчета;
	
КонецФункции // ПолучитьСчетУчетаБУ()

// Функция получает счет прямых расходов налогового учета, соответствующий счету расходов
// по бухгалтерскому учету.
//
// Параметры:
//	СчетУчета - ПланСчетов.Хозрасчетный - Счет учета расходов по бухгалтерскому учету
//
// Возвращаемое значение:
//	ПланСчетовСсылка.Налоговый - Счет расходов по налоговому учету
//
Функция ПолучитьСчетУчетаНУ(
	СчетУчета
	) Экспорт
	
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваНеОблагаемоеЕНВД Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств;
	
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.БракВПроизводствеНеОблагаемоеЕНВД Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД
		  ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые
	Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД
		  ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыРаспределяемые
	Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияНеОблагаемыеЕНВД Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.ИздержкиОбращенияНеОблагаемыеЕНВД;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияРаспределяемые Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.КоммерческиеРасходыНеОблагаемыеЕНВД;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыРаспределяемые Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.КоммерческиеРасходыРаспределяемые;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД
	      ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД
		  ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД
		  ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД
		  ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.БракВПроизводствеОблагаемоеЕНВД
		  ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД
		  ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД
		  ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД
	Тогда
		СчетУчетаНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
		
	Иначе
		
		СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчета));
		
	КонецЕсли;
	
	Возврат СчетУчетаНУ;
	
КонецФункции // ПолучитьСчетУчетаНУ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ "УЧЕТ ЗАТРАТ"

// Процедура формирует движения по регистру "Учет затрат"
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//	АналитикаВидаУчета - СправочникСсылка.АналитикаВидаУчета - Ключ аналитики
//	АналитикаУчетаЗатрат - СправочникСсылка.АналитикаУчетаЗатрат - Ключ аналитики
//	АналитикаУчетаПартий - СправочникСсылка.АналитикаУчетаПартий - Ключ аналитики
//	АналитикаРаспределенияЗатрат - СправочникСсылка.АналитикаРаспределенияЗатрат - Ключ аналитики
//	КорАналитикаВидаУчета - СправочникСсылка.АналитикаВидаУчета - Ключ аналитики
//	КорАналитикаУчетаЗатрат - СправочникСсылка.АналитикаУчетаЗатрат - Ключ аналитики
//	КорАналитикаУчетаПартий - СправочникСсылка.АналитикаУчетаПартий - Ключ аналитики
//	КорАналитикаРаспределенияЗатрат - СправочникСсылка.АналитикаРаспределенияЗатрат - Ключ аналитики
//	ВидДвижения - ВидДвиженияНакопления - Вид движения по регистру
//	КодОперации - ПеречислениеСсылка.КодыОперацийНезавершенноеПроизводство - Код операции
//	Количество - Число - Количество затрат
//	Стоимость - Число - Стоимость затрат
//	КоличествоНУ - Число - Количество затрат
//	СтоимостьНУ - Число - Стоимость затрат
//	ПостояннаяРазница - Число - Сумма затрат в части постоянной разницы
//	НаборЗаписейУчетЗатрат - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Учет затрат"
//	ЗаписыватьДвижения - Булево - Использовать ограничение размера набора записей регистра
//
Процедура СформироватьДвиженияПоРегиструУчетЗатрат(
	СтруктураШапкиДокумента,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаУчетаПартий,
	АналитикаРаспределенияЗатрат,
	КорАналитикаВидаУчета,
	КорАналитикаУчетаЗатрат,
	КорАналитикаУчетаПартий,
	КорАналитикаРаспределенияЗатрат,
	ВидДвижения,
	КодОперации,
	Количество,
	Стоимость,
	КоличествоНУ,
	СтоимостьНУ,
	ПостояннаяРазница,
	НаборЗаписейУчетЗатрат,
	ЗаписыватьДвижения = Истина
	) Экспорт
	
	Если Количество = 0
	   И Стоимость = 0
	   И КоличествоНУ = 0
	   И СтоимостьНУ = 0
	   И ПостояннаяРазница = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// Прочие затраты в регистре не должны отражаться.
	Если ТипЗнч(АналитикаВидаУчета) = Тип("СправочникСсылка.КлючиАналитикиУчетаПрочихЗатрат")
	 ИЛИ Не ЗначениеЗаполнено(АналитикаВидаУчета)
	Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Учет затрат" должны быть заполнены измерения:
	//	- АналитикаВидаУчета
	//	- АналитикаУчетаЗатрат
	//	- АналитикаУчетаПартий
	//	- АналитикаРаспределенияЗатрат
	//
	// Реквизиты:
	//	- КодОперации
	//	- КорАналитикаВидаУчета
	//	- КорАналитикаУчетаЗатрат
	//	- КорАналитикаУчетаПартий
	//	- КорАналитикаРаспределенияЗатрат
	//	- НомерСтрокиСписанныхТоваров
	//
	// Ресурсы;
	//	- Количество
	//	- Стоимость
	//	- КоличествоНУ
	//	- СтоимостьНУ
	//	- ПостояннаяРазница
	
	НоваяСтрока = НаборЗаписейУчетЗатрат.Добавить();
	НоваяСтрока.Активность = Истина;
	//Для некоторых видов документов движения по регистру могут формироваться датой оплаты а не датой документа
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		НоваяСтрока.Период = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.ДатаОплаты);
	Иначе
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	КонецЕсли;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.КодОперации = КодОперации;
	
	НоваяСтрока.АналитикаВидаУчета = АналитикаВидаУчета;
	НоваяСтрока.АналитикаУчетаЗатрат = АналитикаУчетаЗатрат;
	НоваяСтрока.АналитикаУчетаПартий = АналитикаУчетаПартий;
	НоваяСтрока.АналитикаРаспределенияЗатрат = АналитикаРаспределенияЗатрат;
	
	// Корр аналитика всегда определяется перед вызовом процедуры формирования движений.
	НоваяСтрока.КорАналитикаВидаУчета = ?(ЗначениеЗаполнено(КорАналитикаВидаУчета), КорАналитикаВидаУчета, Неопределено);
	НоваяСтрока.КорАналитикаУчетаЗатрат = КорАналитикаУчетаЗатрат;
	НоваяСтрока.КорАналитикаРаспределенияЗатрат = КорАналитикаРаспределенияЗатрат;
	НоваяСтрока.КорАналитикаУчетаПартий = КорАналитикаУчетаПартий;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Стоимость = Стоимость;
	
	Если ТипЗнч(НаборЗаписейУчетЗатрат) = Тип("РегистрНакопленияНаборЗаписей.УчетЗатратРегл") Тогда
		НоваяСтрока.КоличествоНУ = КоличествоНУ;
		НоваяСтрока.СтоимостьНУ = СтоимостьНУ;
		
		Если СтруктураШапкиДокумента.Свойство("ПоддержкаПБУ18")
		   И Не СтруктураШапкиДокумента.ПоддержкаПБУ18
		Тогда
			НоваяСтрока.ПостояннаяРазница = 0;
		Иначе
			НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗаписыватьДвижения Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим есть ли в структуре шапки документа значение размера набора для записи регистров учет затрат.
	// Если нет - получим значение из константы и закэшируем в структуре шапки
	Если НЕ СтруктураШапкиДокумента.Свойство("РазмерНабораПриЗаписиРегистровУчетаЗатрат") Тогда
		СтруктураШапкиДокумента.Вставить("РазмерНабораПриЗаписиРегистровУчетаЗатрат", глЗначениеПеременной("РазмерНабораПриЗаписиРегистровУчетаЗатрат"));
	КонецЕсли;
	
	// Если количество записей в наборе равно установленному размеру набора для записи - запишем набор
	Если НаборЗаписейУчетЗатрат.Количество() = СтруктураШапкиДокумента.РазмерНабораПриЗаписиРегистровУчетаЗатрат Тогда
		НаборЗаписейУчетЗатрат.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструУчетЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ОТРАЖЕНИЮ ЗАТРАТ

// Процедура формирует движения по регистру "Учет затрат" (отражение затрат) по виду учета.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат по управленческому или бухгалтерскому учету
//	ХарактерЗатратНУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат по налоговому учету
//	Проект - СправочникСсылка.Проекты или СправочникСсылка.ВидыРаспределенияПоПроектам - Проект для учета затрат
//	КоличествоУпр - Число - Количество затрат
//	СуммаУпр - Число - Стоимость затрат
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура ДвижениеПоРегиструУчетЗатратПоВидуУчета(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатрат,
	ХарактерЗатратНУ,
	Проект,
	КоличествоУпр,
	СуммаУпр,
	ВидОтраженияВУчете,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	) Экспорт
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
	    ИмяРегистра = "УчетЗатрат";
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
		ИмяРегистра = "УчетЗатратРегл";
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не определено формирование движений по виду отражения в учете: """ + ВидОтраженияВУчете + """.
			|Процедура <ДвижениеПоРегиструУчетЗатратПоВидуУчета>");
		Возврат;
	КонецЕсли;
		
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		ИмяРегистра,
		СтруктураНаборыЗаписей
	);
	
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
		
	АналитикаВидаУчета = Неопределено;
	АналитикаУчетаЗатрат = Неопределено;
	АналитикаУчетаПартий = Неопределено;
	АналитикаРаспределенияЗатрат = Неопределено;
	УчетЗатратПоНоменклатуре = Истина;
	УчетЗатратПоПроектам = Ложь;
	
	ПолучитьАналитикуОтраженияЗатрат(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		Проект,
		ХарактерЗатрат,
		ХарактерЗатратНУ,
		Неопределено, // КодОперации
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики,
		АналитикаВидаУчета,
		АналитикаУчетаЗатрат,
		АналитикаУчетаПартий,
		АналитикаРаспределенияЗатрат,
		УчетЗатратПоНоменклатуре,
		УчетЗатратПоПроектам
	);
	
	Количество = 0;
	КоличествоНал = 0;
	Сумма = 0;
	СуммаНал = 0;
	ПостояннаяРазница = 0;
	
	КорКоличество = 0;
	КорКоличествоНал = 0;
	КорСумма = 0;
	КорСуммаНал = 0;
	КорПостояннаяРазница = 0;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			Если ХарактерЗатрат <> Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете
			   И ЗначениеЗаполнено(ХарактерЗатрат)
			Тогда
		    	Сумма = СуммаУпр;
				Количество = КоличествоУпр;
			КонецЕсли;
			
			КорСумма = СуммаУпр;
			КорКоличество = КоличествоУпр;
			
		КонецЕсли;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ЗаготовлениеИПриобретениеМЦ Тогда
				Если ХарактерЗатратНУ = Неопределено Тогда
					Сумма = СтрокаВыборки.СуммаБух;
					Количество = СтрокаВыборки.КоличествоБух;
				КонецЕсли;
				
			ИначеЕсли ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие
			   И ЗначениеЗаполнено(ХарактерЗатрат)
			Тогда
				Сумма = СтрокаВыборки.СуммаБух;
				Количество = СтрокаВыборки.КоличествоБух;
			КонецЕсли;
			
			КорСумма = СтрокаВыборки.СуммаБух;
			КорКоличество = СтрокаВыборки.КоличествоБух;
			
		КонецЕсли;
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если ХарактерЗатратНУ <> Перечисления.ХарактерЗатрат.Прочие
			   И ЗначениеЗаполнено(ХарактерЗатратНУ)
			Тогда
				КоличествоНал = СтрокаВыборки.КоличествоНал;
				
				// Переквалификация суммы НУ в ПР выполняется только в случае внешнего поступления/выбытия затрат.
				// В остальных случаях переквалификация выполняется при расчете себестоимости.
				Если СтрокаВыборки.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения 
					 И (НЕ ТипЗнч(СтрокаВыборки.КорАналитикаВидаУчета) = Тип("СправочникСсылка.КлючиАналитикиВидаУчета") 
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаВыборки.КорАналитикаВидаУчета)) Тогда
					ПостояннаяРазница = СтрокаВыборки.ПостояннаяРазница + СтрокаВыборки.СуммаНал;
				Иначе
					СуммаНал = СтрокаВыборки.СуммаНал;
					ПостояннаяРазница = СтрокаВыборки.ПостояннаяРазница;
				КонецЕсли;
				
			КонецЕсли;
			
			КорКоличествоНал = СтрокаВыборки.КоличествоНал;
			КорСуммаНал = СтрокаВыборки.СуммаНал;
			КорПостояннаяРазница = СтрокаВыборки.ПостояннаяРазница;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивХарактеровЗатрат = Новый Массив;
	МассивХарактеровЗатрат.Добавить(Неопределено);
	МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы);
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
		МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.Прочие);
	КонецЕсли;
	
	Если МассивХарактеровЗатрат.Найти(ХарактерЗатрат) = Неопределено
	 ИЛИ МассивХарактеровЗатрат.Найти(ХарактерЗатратНУ) = Неопределено
	Тогда
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			СтрокаВыборки.КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			СтрокаВыборки.ВидДвижения,
			СтрокаВыборки.КодОперации,
			?(УчетЗатратПоНоменклатуре, Количество, 0),
			Сумма,
			?(УчетЗатратПоНоменклатуре, КоличествоНал, 0), // КоличествоНУ
			СуммаНал,
			ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВыборки.КорАналитикаВидаУчета) Тогда
		
		КорВидДвижения = ?(СтрокаВыборки.ВидДвижения = ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
		
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			СтрокаВыборки.КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			КорВидДвижения,
			СтрокаВыборки.КодОперации,
			КорКоличество,
			КорСумма,
			КорКоличествоНал,
			КорСуммаНал,
			КорПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
		
КонецПроцедуры // ДвижениеПоРегиструУчетЗатратПоВидуУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ПОГАШЕНИЮ СТОИМОСТИ СПЕЦОДЕЖДЫ

// Процедура формирует движения по регистру "Учет затрат" (погашение стоимости) по виду учета.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	Стоимость - Число - Погашенная стоимость
//	ПостояннаяРазница - Число - Погашенная стоимость в части постоянной разницы
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура ДвижениеПоРегиструУчетЗатратПогашениеСтоимости(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидОтраженияВУчете,
	Стоимость,
	ПостояннаяРазница,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	) Экспорт
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
	    ИмяРегистра = "УчетЗатрат";
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
		ИмяРегистра = "УчетЗатратРегл";
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не определено формирование движений по виду отражения в учете: """ + ВидОтраженияВУчете + """.
			|Процедура <ДвижениеПоРегиструУчетЗатратПогашениеСтоимости>");
		Возврат;
	КонецЕсли;
		
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		ИмяРегистра,
		СтруктураНаборыЗаписей
	);
	
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.ПогашеннаяСтоимость);
	
	СтруктураПараметров.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	СтруктураПараметров.Вставить("Организация", СтрокаВыборки.Организация);
	СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетУчета);
	СтруктураПараметров.Вставить("СчетУчетаНУ", СтрокаВыборки.СчетУчетаНУ);
	
	АналитикаВидаУчета = ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаВидаУчета,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
		
	СформироватьДвиженияПоРегиструУчетЗатрат(
		СтруктураШапкиДокумента,
		АналитикаВидаУчета,
		СтрокаВыборки.АналитикаУчетаЗатрат,
		СтрокаВыборки.АналитикаУчетаПартий,
		СтрокаВыборки.АналитикаРаспределенияЗатрат,
		Неопределено, // КорАналитикаВидаУчета,
		Неопределено, // КорАналитикаУчетаЗатрат,
		Неопределено, // КорАналитикаУчетаПартий,
		Неопределено, // КорАналитикаРаспределенияЗатрат,
		ВидДвиженияНакопления.Приход,
		Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПогашениеСтоимости,
		0, // Количество
		- Стоимость,
		0, // КоличествоНУ
		0, // СтоимостьНУ,
		- ПостояннаяРазница,
		СтруктураНаборыЗаписей[ИмяРегистра]
	);
	
КонецПроцедуры // ДвижениеПоРегиструУчетЗатратПогашениеСтоимости()

// Процедура формирует движения по регистру "Учет затрат" (материалы в эксплуатации) по виду учета.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаТаблицыОстатков - СтрокаТаблицыЗначений - Текущая строка таблицы остатков
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	Количество - Число - Количество материалов
//	Стоимость - Число - Стоимость материалов
//	ПогашеннаяСтоимость - Чисто - Сумма погашенной стоимости
//	КорректировкаСтоимостиСписания - Число - Сумма корректировки стоимости для операций по фикс. стоимости
//	КоличествоНУ - Число - Количество материалов по налоговому учету
//	СтоимостьНУ - Число - Стоимость материалов по налоговому учету
//	ПостояннаяРазница - Число - Погашенная стоимость в части постоянной разницы
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура ДвижениеПоРегиструУчетЗатратМатериалыВЭксплуатации(
	СтруктураШапкиДокумента,
	СтрокаТаблицыОстатков,
	СтрокаВыборки,
	ВидОтраженияВУчете,
	Количество,
	Стоимость,
	ПогашеннаяСтоимость,
	КорректировкаСтоимостиСписания,
	КоличествоНУ,
	СтоимостьНУ,
	ПостояннаяРазница,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	) Экспорт
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
	    ИмяРегистра = "УчетЗатрат";
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
		ИмяРегистра = "УчетЗатратРегл";
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не определено формирование движений по виду отражения в учете: """ + ВидОтраженияВУчете + """.
			|Процедура <ДвижениеПоРегиструУчетЗатратМатериалыВЭксплуатации>");
		Возврат;
	КонецЕсли;
		
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		ИмяРегистра,
		СтруктураНаборыЗаписей
	);
	
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатацииФикс);
	
	Если МассивКодовОпераций.Найти(СтрокаВыборки.КодОперации) <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФизЛицо", СтрокаВыборки.ФизЛицоПолучатель);
		СтруктураПараметров.Вставить("НазначениеИспользования", СтрокаВыборки.НазначениеИспользованияПолучатель);
		СтруктураПараметров.Вставить("ДокументПередачи", СтрокаТаблицыОстатков.ДокументПередачи);
	
		КорАналитикаУчетаПартий = ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			СтруктураПараметров,
			Перечисления.КлючиАналитики.АналитикаУчетаПартий,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);

	Иначе
		КорАналитикаУчетаПартий = СтрокаВыборки.КорАналитикаУчетаПартий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаВыборки.ДокументПередачи) Тогда
	
		// Сторнирование движений без партии.
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки.АналитикаВидаУчета,
			СтрокаВыборки.АналитикаУчетаЗатрат,
			СтрокаВыборки.АналитикаУчетаПартий,
			СтрокаВыборки.АналитикаРаспределенияЗатрат,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			СтрокаВыборки.КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Расход,
			СтрокаВыборки.КодОперации,
			- Количество,
			- Стоимость,
			- Количество,
			0, // СтоимостьНУ,
			0, // ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
			
		// Добавление движений с указаниям партии.
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаТаблицыОстатков.АналитикаВидаУчета,
			СтрокаТаблицыОстатков.АналитикаУчетаЗатрат,
			СтрокаТаблицыОстатков.АналитикаУчетаПартий,
			СтрокаТаблицыОстатков.АналитикаРаспределенияЗатрат,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Расход,
			СтрокаВыборки.КодОперации,
			Количество,
			Стоимость,
			КоличествоНУ,
			СтоимостьНУ,
			ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			СтрокаВыборки.КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			СтрокаВыборки.АналитикаВидаУчета,
			СтрокаВыборки.АналитикаУчетаЗатрат,
			СтрокаВыборки.АналитикаУчетаПартий,
			СтрокаВыборки.АналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			СтрокаВыборки.КодОперации,
			- Количество,
			- Стоимость,
			- Количество,
			0, // СтоимостьНУ,
			0, // ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
			
		// Добавление движений с указаниям партии.
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			СтрокаТаблицыОстатков.АналитикаВидаУчета,
			СтрокаТаблицыОстатков.АналитикаУчетаЗатрат,
			СтрокаТаблицыОстатков.АналитикаУчетаПартий,
			СтрокаТаблицыОстатков.АналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			СтрокаВыборки.КодОперации,
			Количество,
			Стоимость,
			КоличествоНУ,
			СтоимостьНУ,
			ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
	Если ПогашеннаяСтоимость <> 0 Тогда
		
		Если МассивКодовОпераций.Найти(СтрокаВыборки.КодОперации) <> Неопределено Тогда
		
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.ПогашеннаяСтоимость);
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
				СтруктураПараметров.Вставить("Организация", СтрокаВыборки.Организация);
				СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизации);
				СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетЗатрат);
				СтруктураПараметров.Вставить("СчетУчетаНУ", СтрокаВыборки.СчетЗатратНУ);
			Иначе
				СтруктураПараметров.Вставить("Подразделение", СтрокаВыборки.ПодразделениеПолучатель);
			КонецЕсли;
		
			КорАналитикаВидаУчета = ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				СтруктураПараметров,
				Перечисления.КлючиАналитики.АналитикаВидаУчета,
				ВидОтраженияВУчете,
				СтруктураКлючиАналитики
			);
			
		Иначе
			КорАналитикаВидаУчета = СтрокаВыборки.КорАналитикаВидаУчета;
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаТаблицыОстатков.АналитикаВидаУчетаПогашеннаяСтоимость,
			СтрокаТаблицыОстатков.АналитикаУчетаЗатрат,
			СтрокаТаблицыОстатков.АналитикаУчетаПартий,
			СтрокаТаблицыОстатков.АналитикаРаспределенияЗатрат,
			КорАналитикаВидаУчета, // КорАналитикаВидаУчета
			СтрокаВыборки.КорАналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
			КорАналитикаУчетаПартий, // АналитикаУчетаПартий
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат, // АналитикаРаспределенияЗатрат
			ВидДвиженияНакопления.Расход,
			СтрокаВыборки.КодОперации,
			0, // Количество,
			ПогашеннаяСтоимость,
			0, // Количество,
			0, // СтоимостьНУ,
			0, // ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			СтрокаТаблицыОстатков.АналитикаВидаУчетаПогашеннаяСтоимость, // КорАналитикаВидаУчета
			СтрокаТаблицыОстатков.АналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
			СтрокаТаблицыОстатков.АналитикаУчетаПартий, // АналитикаУчетаПартий
			СтрокаТаблицыОстатков.АналитикаРаспределенияЗатрат, // АналитикаРаспределенияЗатрат
			ВидДвиженияНакопления.Приход,
			СтрокаВыборки.КодОперации,
			0, // Количество,
			ПогашеннаяСтоимость,
			0, // Количество,
			0, // СтоимостьНУ,
			0, // ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		МассивФиксСтоимость = Новый Массив;
		МассивФиксСтоимость.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатацииФикс);
		МассивФиксСтоимость.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатацииФикс);
		МассивФиксСтоимость.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатацииФикс);
		
		Если МассивФиксСтоимость.Найти(СтрокаВыборки.КодОперации) <> Неопределено Тогда
			
			СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				СтрокаТаблицыОстатков.АналитикаВидаУчета,
				СтрокаТаблицыОстатков.АналитикаУчетаЗатрат,
				СтрокаТаблицыОстатков.АналитикаУчетаПартий,
				СтрокаТаблицыОстатков.АналитикаРаспределенияЗатрат,
				СтрокаВыборки.КорАналитикаВидаУчета, // КорАналитикаВидаУчета
				СтрокаВыборки.КорАналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
				СтрокаВыборки.КорАналитикаУчетаПартий, // АналитикаУчетаПартий
				СтрокаВыборки.КорАналитикаРаспределенияЗатрат, // АналитикаРаспределенияЗатрат
				ВидДвиженияНакопления.Расход,
				СтрокаВыборки.КодОперации,
				0, // Количество,
				КорректировкаСтоимостиСписания,
				0, // Количество,
				0, // СтоимостьНУ,
				0, // ПостояннаяРазница,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПоРегиструУчетЗатратМатериалыВЭксплуатации()

// Процедура формирует движения по регистру "Учет затрат" (передача материалов в эксплуатацию).
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура ДвижениеПоРегиструУчетЗатратПередачаВЭксплуатацию(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтруктураНаборыЗаписей
	) Экспорт
	
	КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПередачаМатериаловВЭксплуатацию;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистра = "УчетЗатрат";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
	
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки.АналитикаВидаУчета,
			СтрокаВыборки.АналитикаУчетаЗатрат,
			СтрокаВыборки.АналитикаУчетаПартий,
			СтрокаВыборки.АналитикаРаспределенияЗатрат,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			СтрокаВыборки.КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Расход,
			КодОперации,
			СтрокаВыборки.КоличествоУпр,
			СтрокаВыборки.СтоимостьУпр,
			0, // КоличествоНУ,
			0, // СтоимостьНУ,
			0, // ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			СтрокаВыборки.КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			СтрокаВыборки.АналитикаВидаУчета,
			СтрокаВыборки.АналитикаУчетаЗатрат,
			СтрокаВыборки.АналитикаУчетаПартий,
			СтрокаВыборки.АналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			КодОперации,
			СтрокаВыборки.КоличествоУпр,
			СтрокаВыборки.СтоимостьУпр,
			0, // КоличествоНУ,
			0, // СтоимостьНУ,
			0, // ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "УчетЗатратРегл";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			КоличествоНал = СтрокаВыборки.КоличествоНал;
			СтоимостьНал = СтрокаВыборки.СтоимостьНал;
			ПостояннаяРазница = СтрокаВыборки.ПостояннаяРазница;
		Иначе
			КоличествоНал = 0;
			СтоимостьНал = 0;
			ПостояннаяРазница = 0;
		КонецЕсли;
	
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки.АналитикаВидаУчета,
			СтрокаВыборки.АналитикаУчетаЗатрат,
			СтрокаВыборки.АналитикаУчетаПартий,
			СтрокаВыборки.АналитикаРаспределенияЗатрат,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			СтрокаВыборки.КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Расход,
			КодОперации,
			СтрокаВыборки.КоличествоБух,
			СтрокаВыборки.СтоимостьБух,
			КоличествоНал,
			СтоимостьНал,
			ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки.КорАналитикаВидаУчета,
			СтрокаВыборки.КорАналитикаУчетаЗатрат,
			СтрокаВыборки.КорАналитикаУчетаПартий,
			СтрокаВыборки.КорАналитикаРаспределенияЗатрат,
			СтрокаВыборки.АналитикаВидаУчета,
			СтрокаВыборки.АналитикаУчетаЗатрат,
			СтрокаВыборки.АналитикаУчетаПартий,
			СтрокаВыборки.АналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			КодОперации,
			СтрокаВыборки.КоличествоБух,
			СтрокаВыборки.СтоимостьБух,
			КоличествоНал,
			СтоимостьНал,
			ПостояннаяРазница,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
	КонецЕсли;
		
КонецПроцедуры // ДвижениеПоРегиструУчетЗатратПередачаВЭксплуатацию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ КЛЮЧЕЙ АНАЛИТИКИ ВЫПУСКА ПРОДУКЦИИ И УСЛУГ

// Функция определяет учет затрат по проектам.
//
// Параметры:
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат
//
// Возвращаемое значение:
//	Булево - Истина - Затраты учитываются по проектам
//			 Ложь - Затраты не учитываются по проектам
//
Функция УчитыватьЗатратыПоПроектам(
	ХарактерЗатрат
	) Экспорт
	
	Если ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
	   И ХарактерЗатрат <> Перечисления.ХарактерЗатрат.БракВПроизводстве
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // УчитыватьЗатратыПоПроектам()

// Процедура получает ключи аналитики отражения затрат.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	Проект - СправочникСсылка.Проекты или СправочникСсылка.ВидыРаспределенияПоПроектам - Проект для учета затрат
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат
//	ХарактерЗатратНУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей налогового учета
//	КодОперации - ПеречислениеСсылка.КодыОпераций - Код операции
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете для получения ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Выходные параметры:
//	АналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	АналитикаУчетаЗатрат - СправочникСсылка.КлючиАналитикиУчетаЗатрат - Ключ аналитики
//	АналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//	АналитикаРаспределенияЗатрат - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	УчетЗатратПоНоменклатуре - Булево - Признак учета затрат по номенклатуре
//	УчетЗатратПоПроектам - Булево - Признак учета затрат по проектам
//
Процедура ПолучитьАналитикуОтраженияЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Проект,
	ХарактерЗатрат,
	ХарактерЗатратНУ,
	КодОперации,
	ВидОтраженияВУчете,
	СтруктураКлючиАналитики,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаУчетаПартий,
	АналитикаРаспределенияЗатрат,
	УчетЗатратПоНоменклатуре,
	УчетЗатратПоПроектам
	) Экспорт
	
	АналитикаВидаУчета = Неопределено;
	АналитикаУчетаЗатрат = Неопределено;
	АналитикаУчетаПартий = Неопределено;
	АналитикаРаспределенияЗатрат = Неопределено;
	
	Если ХарактерЗатрат  = Неопределено Тогда
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
				СтрокаВыборки.СчетДт, 
				СтрокаВыборки.СтатьяЗатратПолучатель
			);
		Иначе
			ХарактерЗатрат = СтрокаВыборки.ХарактерЗатратПолучатель;
		КонецЕсли;
	КонецЕсли;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы
	 	ИЛИ
	 	(Не ЗначениеЗаполнено(ХарактерЗатрат)
		И Не ЗначениеЗаполнено(ХарактерЗатратНУ))
	Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	   И ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете
	Тогда
		Возврат;
	КонецЕсли;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
	   И (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете)
	Тогда
		КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат;
	Иначе
		КлючАналитики = Перечисления.КлючиАналитики.АналитикаВидаУчета;
	КонецЕсли;
	
	// Внутренние услуги всегда учитываем по номенклатуре и количеству, не зависимо от характера затрат.
	Если КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты
	 ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
	Тогда
		УчетЗатратПоНоменклатуре = Истина;
	Иначе
		УчетЗатратПоНоменклатуре = УчитыватьЗатратыПоНоменклатуре(
			ХарактерЗатрат,
			СтрокаВыборки.ВидЗатрат
		);
	КонецЕсли;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ЗаготовлениеИПриобретениеМЦ
	   И ХарактерЗатратНУ = Неопределено
	Тогда
		ЭтоЗаготовлениеИПриобретениеМЦ = Истина;
	Иначе
		ЭтоЗаготовлениеИПриобретениеМЦ = Ложь;
	КонецЕсли;
	
	УчетЗатратПоПроектам = Ложь;

	СтруктураПараметров = Новый Структура;
	
	Если КлючАналитики = Перечисления.КлючиАналитики.АналитикаВидаУчета Тогда
	
		СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.Затраты);
		
		СтруктураПараметров.Вставить("Подразделение", СтрокаВыборки.ПодразделениеПолучатель);	
		УчетЗатратПоПроектам = УчитыватьЗатратыПоПроектам(ХарактерЗатрат);
		Если УчетЗатратПоПроектам Тогда
			СтруктураПараметров.Вставить("Проект", Проект);
		КонецЕсли;
			
		СтруктураПараметров.Вставить("Организация", СтрокаВыборки.Организация);
		Если Не ЭтоЗаготовлениеИПриобретениеМЦ Тогда
			СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
		КонецЕсли;
		
		Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы
		 ИЛИ КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты
		 ИЛИ КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты
		Тогда
			СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетЗатрат);
			СтруктураПараметров.Вставить("СчетУчетаНУ", СтрокаВыборки.СчетЗатратНУ);
		Иначе
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ЗаготовлениеИПриобретениеМЦ Тогда
				Если ЭтоЗаготовлениеИПриобретениеМЦ Тогда
					СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетДт);
				Иначе
					СтруктураПараметров.Вставить("СчетУчетаНУ", СтрокаВыборки.СчетДтНУ);
				КонецЕсли;
			Иначе
				СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетДт);
				СтруктураПараметров.Вставить("СчетУчетаНУ", СтрокаВыборки.СчетДтНУ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат Тогда
		
		СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетДт);
		СтруктураПараметров.Вставить("СчетУчетаНУ", СтрокаВыборки.СчетДтНУ);
		
		СтруктураПараметров.Вставить("Субконто1", СтрокаВыборки.Субконто1);
		СтруктураПараметров.Вставить("Субконто2", СтрокаВыборки.Субконто2);
		СтруктураПараметров.Вставить("Субконто3", СтрокаВыборки.Субконто3);
		
		СтруктураПараметров.Вставить("СубконтоНУ1", СтрокаВыборки.СубконтоНУ1);
		СтруктураПараметров.Вставить("СубконтоНУ2", СтрокаВыборки.СубконтоНУ2);
		СтруктураПараметров.Вставить("СубконтоНУ3", СтрокаВыборки.СубконтоНУ3);
		
	КонецЕсли;
		
	АналитикаВидаУчета = ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		КлючАналитики,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	// Для аналитики учета прочих затрат другие ключи аналитики не заполняются.
	Если КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ЗаготовлениеИПриобретениеМЦ Тогда
		Если ХарактерЗатратНУ = Неопределено Тогда
			СтруктураПараметров.Вставить("ХарактерЗатрат", ХарактерЗатрат);
		Иначе
			СтруктураПараметров.Вставить("ХарактерЗатрат", ХарактерЗатратНУ);
		КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ХарактерЗатрат", ХарактерЗатрат);
	КонецЕсли;
	
	Если УчетЗатратПоНоменклатуре Тогда
		
		СтруктураПараметров.Вставить("УчетЗатратПоНоменклатуре", УчетЗатратПоНоменклатуре);
		СтруктураПараметров.Вставить("Затрата", СтрокаВыборки.Затрата);
		СтруктураПараметров.Вставить("ХарактеристикаЗатраты", СтрокаВыборки.ХарактеристикаЗатраты);
		
		Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
			СтруктураПараметров.Вставить("СерияЗатраты", СтрокаВыборки.СерияЗатраты);
		КонецЕсли;
		
	Иначе
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			СтруктураПараметров.Вставить("СпособРаспределенияЗатрат", СтрокаВыборки.СпособРаспределенияЗатрат);
		КонецЕсли;
		
	КонецЕсли;
	
	АналитикаУчетаЗатрат = ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
		
	СтруктураПараметров = Новый Структура;
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.ЗаказПолучатель);
		
	ИначеЕсли Не ЭтоЗаготовлениеИПриобретениеМЦ
		И (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете)
	Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.ЗаказПолучательРегл);
	КонецЕсли;
	
	АналитикаУчетаПартий = ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаПартий,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);

	СтруктураПараметров = Новый Структура;
	Если Не ЭтоЗаготовлениеИПриобретениеМЦ Тогда
		СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
		СтруктураПараметров.Вставить("Продукция", СтрокаВыборки.ПродукцияПолучатель);
		СтруктураПараметров.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаПродукцииПолучатель);
		СтруктураПараметров.Вставить("СерияПродукции", СтрокаВыборки.СерияПродукцииПолучатель);
	КонецЕсли;
	
	АналитикаРаспределенияЗатрат = ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
КонецПроцедуры // ПолучитьАналитикуОтраженияЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "УЧЕТ ПРОДАЖ И СЕБЕСТОИМОСТИ"

// Результат функции определяет поведение программы при выполнении следующих действий:
// - формирование движений по регистру УчетПродажИСебестоимости
//		(влияет на способ определения аналитики Заказ в аналитике учета партий)
// - выполнение операции "Определение списка реализованных услуг" документа РСВ
//		(влияет на заполнение аналитики Заказ в аналитике учета партий для движений услуг по регистрам учета затрат)
//
Функция УчитыватьПродажиПоЗаказамПокупателей() Экспорт
	Возврат Истина;
КонецФункции

// Процедура получает ключи аналитики учета продаж.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете для получения ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Выходные параметры:
//	АналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	АналитикаУчетаНоменклатуры - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	АналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//
Процедура ПолучитьАналитикуУчетаПродаж(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидОтраженияВУчете,
	СтруктураКлючиАналитики,
	АналитикаВидаУчета,
	АналитикаУчетаНоменклатуры,
	АналитикаУчетаПартий
	)
	
	СтруктураПараметров = Новый Структура;
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Проект) Тогда
		СтруктураПараметров.Вставить("Проект", СтруктураШапкиДокумента.Проект);
	Иначе
		СтруктураПараметров.Вставить("Проект", СтрокаВыборки.Проект);
	КонецЕсли;
		
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Подразделение", СтруктураШапкиДокумента.Подразделение);
	
	Если СтруктураШапкиДокумента.Свойство("ПодразделениеОрганизации") Тогда
		СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтруктураШапкиДокумента.ПодразделениеОрганизации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетДоходовБУ);
	СтруктураПараметров.Вставить("СчетУчетаНУ", СтрокаВыборки.СчетДоходовНУ);
	
	СтруктураПараметров.Вставить("Субконто1", СтрокаВыборки.СубконтоБУ);
	СтруктураПараметров.Вставить("СубконтоНУ1", СтрокаВыборки.СубконтоНУ);
	
	Если ТипЗнч(СтрокаВыборки.СубконтоБУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		КлючАналитики = Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат;
	Иначе
		КлючАналитики = Перечисления.КлючиАналитики.АналитикаВидаУчета;
	КонецЕсли;
	
	АналитикаВидаУчета = ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		КлючАналитики,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.СубконтоБУ);
	СтруктураПараметров.Вставить("Продукция", СтрокаВыборки.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияПродукции", СтрокаВыборки.СерияНоменклатуры);
	
	АналитикаУчетаНоменклатуры = ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
		
	СтруктураПараметров = Новый Структура;
	Если УчитыватьПродажиПоЗаказамПокупателей() Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.ЗаказПокупателя);
	Иначе
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.Заказ);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Комиссионер", 		СтруктураШапкиДокумента.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКомиссионера", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	АналитикаУчетаПартий = ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаПартий,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
КонецПроцедуры // ПолучитьАналитикуУчетаПродаж()

// Процедура формирует движения по регистру "Учет продаж и себестоимости"
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//	АналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	АналитикаУчетаНоменклатуры - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	АналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//	Количество - Число - Количество проданной номенклатуры
//	Стоимость - Число - Стоимость продажи
//	НДС - Число - НДС продажи
//	Себестоимость - Число - Себестоимость продажи
//	НаборЗаписейУчетПродаж - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Учет продаж и себестоимости"
//
Процедура СформироватьДвиженияПоРегиструУчетПродажИСебестоимости(
	СтруктураШапкиДокумента,
	АналитикаВидаУчета,
	АналитикаУчетаНоменклатуры,
	АналитикаУчетаПартий,
	Количество,
	Стоимость,
	НДС,
	Себестоимость,
	НаборЗаписейУчетПродаж
	)
	
	Если Количество = 0
	   И Стоимость = 0
	   И НДС = 0
	   И Себестоимость = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Учет продаж и себестоимости" должны быть заполнены измерения:
	//	- АналитикаВидаУчета
	//	- АналитикаУчетаНоменклатуры
	//	- АналитикаУчетаПартий
	//
	// Ресурсы;
	//	- Количество
	//	- Стоимость
	//	- НДС
	//	- Себестоимость
	
	НоваяСтрока = НаборЗаписейУчетПродаж.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	НоваяСтрока.АналитикаВидаУчета = АналитикаВидаУчета;
	НоваяСтрока.АналитикаУчетаНоменклатуры = АналитикаУчетаНоменклатуры;
	НоваяСтрока.АналитикаУчетаПартий = АналитикаУчетаПартий;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Стоимость = Стоимость;
	НоваяСтрока.НДС = НДС;
	НоваяСтрока.Себестоимость = Себестоимость;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейУчетПродаж.Количество() = 1000 Тогда
		НаборЗаписейУчетПродаж.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструУчетПродажИСебестоимости()

// Функция формирует структуру колонок для таблицы продаж.
//
// Возвращаемое значение:
//	Структура - Структура колонок
//
Функция СформироватьСтруктуруКолонокТаблицыПродаж()
	
	СтруктураКолонок = Новый Структура;
	
	СтруктураКолонок.Вставить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	СтруктураКолонок.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СтруктураКолонок.Вставить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	СтруктураКолонок.Вставить("СубконтоБУ", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СтруктураКолонок.Вставить("СубконтоНУ", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СтруктураКолонок.Вставить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	СтруктураКолонок.Вставить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	МассивТиповЗаказа = Новый Массив;
	МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	Если УчитыватьПродажиПоЗаказамПокупателей() Тогда
		СтруктураКолонок.Вставить("ЗаказПокупателя", Новый ОписаниеТипов(МассивТиповЗаказа));
	Иначе
		СтруктураКолонок.Вставить("Заказ",           Новый ОписаниеТипов(МассивТиповЗаказа));
	КонецЕсли;
	
	МассивТиповПроекта = Новый Массив;
	МассивТиповПроекта.Добавить(Тип("СправочникСсылка.Проекты"));
	МассивТиповПроекта.Добавить(Тип("СправочникСсылка.ВидыРаспределенияПоПроектам"));
	СтруктураКолонок.Вставить("Проект", Новый ОписаниеТипов(МассивТиповПроекта));
	
	СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СтруктураКолонок.Вставить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	СтруктураКолонок.Вставить("СчетДоходовБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СтруктураКолонок.Вставить("СчетДоходовНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	
	Возврат СтруктураКолонок;
	
КонецФункции // СформироватьСтруктуруКолонокТаблицыПродаж()

// Процедура формрует движения по продажам.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаДокумента - ТаблицаЗначений - Таблица документа
//
Процедура СформироватьДвиженияПоПродажам(
	СтруктураШапкиДокумента,
	ТаблицаДокумента
	) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("ИспользоватьРасширеннуюАналитику") Тогда
		ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
			И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
		СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
	 ИЛИ Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("Контрагент") Тогда
		СтруктураШапкиДокумента.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") Тогда
		СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента", Неопределено);
	КонецЕсли;
	
	Если ТаблицаДокумента.Колонки.Найти("ПринадлежностьНоменклатуры") <> Неопределено Тогда
		ТаблицаПродаж = ТаблицаДокумента.Скопировать(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка()));
	Иначе	
		ТаблицаПродаж = ТаблицаДокумента.Скопировать();
	КонецЕсли;	
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		"УчетПродажИСебестоимости", 
		СтруктураНаборыЗаписей
	);
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКолонок = СформироватьСтруктуруКолонокТаблицыПродаж();
	Для Каждого Колонка Из СтруктураКолонок Цикл
		
		Если ТаблицаПродаж.Колонки.Найти(Колонка.Ключ) = Неопределено Тогда
			ТаблицаПродаж.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Знак = -1;
	Иначе
		Знак = 1;
	КонецЕсли;
	
	СтруктураКлючиАналитики = Новый Структура;
	ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПродаж Цикл
		
		АналитикаВидаУчета = Неопределено;
		АналитикаУчетаНоменклатуры = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		
		ПолучитьАналитикуУчетаПродаж(
			СтруктураШапкиДокумента,
			СтрокаТабличнойЧасти,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики,
			АналитикаВидаУчета,
			АналитикаУчетаНоменклатуры,
			АналитикаУчетаПартий
		);
		
		СформироватьДвиженияПоРегиструУчетПродажИСебестоимости(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			АналитикаУчетаНоменклатуры,
			АналитикаУчетаПартий,
			Знак * СтрокаТабличнойЧасти.Количество,
			Знак * (СтрокаТабличнойЧасти.СуммаБезНДС + СтрокаТабличнойЧасти.НДС),
			Знак * СтрокаТабличнойЧасти.НДС,
			0, // Себестоимость
			СтруктураНаборыЗаписей.УчетПродажИСебестоимости
		);
		
	КонецЦикла;
	
	УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(СтруктураНаборыЗаписей);
	
КонецПроцедуры // СформироватьДвиженияПоПродажам()

///////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ОБСЛУЖИВАНИЯ КЛЮЧЕЙ РАСШИРЕННОЙ АНАЛИТИКИ

// Процедура получает структуру хранения ключей аналитики.
//
// Параметры:
//	нет
//
Функция ПолучитьСтруктуруКлючей()
	СтруктураКлючей = Новый Структура("АналитикаВидаУчета,
							|АналитикаРаспределенияЗатрат,
							|АналитикаУчетаЗатрат,
							|АналитикаУчетаПартий,
							|АналитикаУчетаПрочихЗатрат",
							"КлючиАналитикиВидаУчета",
							"КлючиАналитикиРаспределенияЗатрат",
							"КлючиАналитикиУчетаЗатрат",
							"КлючиАналитикиУчетаПартий",
							"КлючиАналитикиУчетаПрочихЗатрат");
	Возврат СтруктураКлючей;
КонецФункции	

// Удаляет не используемые ключи аналитики.
//
// Параметры:
//	ТолькоТестировать - булево, если необходимо только тестировать без исправления то Истина.
//
Процедура УдалитьКлючиАналитики(ТолькоТестировать) Экспорт
	
	МассивМетаданныхРегистровКлючей = Новый Массив();
	МассивМетаданныхРегистровКлючей.Добавить(Метаданные.РегистрыСведений.АналитикаВидаУчета);
	МассивМетаданныхРегистровКлючей.Добавить(Метаданные.РегистрыСведений.АналитикаРаспределенияЗатрат);
	МассивМетаданныхРегистровКлючей.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаЗатрат);
	МассивМетаданныхРегистровКлючей.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаПартий);
	МассивМетаданныхРегистровКлючей.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаПрочихЗатрат);
	
	ТребуетсяПроверкаСсылочнойЦелостности = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КлючиАналитикиВидаУчета.Ссылка
	               |ИЗ
	               |	Справочник.КлючиАналитикиВидаУчета КАК КлючиАналитикиВидаУчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат.Обороты КАК УчетЗатратОбороты
	               |		ПО КлючиАналитикиВидаУчета.Ссылка = УчетЗатратОбороты.АналитикаВидаУчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатратРегл.Обороты КАК УчетЗатратРеглОбороты
	               |		ПО КлючиАналитикиВидаУчета.Ссылка = УчетЗатратРеглОбороты.АналитикаВидаУчета
	               |ГДЕ
	               |	УчетЗатратОбороты.АналитикаВидаУчета ЕСТЬ NULL 
	               |	И УчетЗатратРеглОбороты.АналитикаВидаУчета ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КлючиАналитикиРаспределенияЗатрат.Ссылка
	               |ИЗ
	               |	Справочник.КлючиАналитикиРаспределенияЗатрат КАК КлючиАналитикиРаспределенияЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат.Обороты КАК УчетЗатратОбороты
	               |		ПО КлючиАналитикиРаспределенияЗатрат.Ссылка = УчетЗатратОбороты.АналитикаРаспределенияЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатратРегл.Обороты КАК УчетЗатратРеглОбороты
	               |		ПО КлючиАналитикиРаспределенияЗатрат.Ссылка = УчетЗатратРеглОбороты.АналитикаРаспределенияЗатрат
	               |ГДЕ
	               |	УчетЗатратОбороты.АналитикаРаспределенияЗатрат ЕСТЬ NULL 
	               |	И УчетЗатратРеглОбороты.АналитикаРаспределенияЗатрат ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КлючиАналитикиУчетаЗатрат.Ссылка
	               |ИЗ
	               |	Справочник.КлючиАналитикиУчетаЗатрат КАК КлючиАналитикиУчетаЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат.Обороты КАК УчетЗатратОбороты
	               |		ПО КлючиАналитикиУчетаЗатрат.Ссылка = УчетЗатратОбороты.АналитикаУчетаЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатратРегл.Обороты КАК УчетЗатратРеглОбороты
	               |		ПО КлючиАналитикиУчетаЗатрат.Ссылка = УчетЗатратРеглОбороты.АналитикаУчетаЗатрат
	               |ГДЕ
	               |	УчетЗатратОбороты.АналитикаУчетаЗатрат ЕСТЬ NULL 
	               |	И УчетЗатратРеглОбороты.АналитикаУчетаЗатрат ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КлючиАналитикиУчетаПартий.Ссылка
	               |ИЗ
	               |	Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат.Обороты КАК УчетЗатратОбороты
	               |		ПО КлючиАналитикиУчетаПартий.Ссылка = УчетЗатратОбороты.АналитикаУчетаПартий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатратРегл.Обороты КАК УчетЗатратРеглОбороты
	               |		ПО КлючиАналитикиУчетаПартий.Ссылка = УчетЗатратРеглОбороты.АналитикаУчетаПартий
	               |ГДЕ
	               |	УчетЗатратОбороты.АналитикаУчетаПартий ЕСТЬ NULL 
	               |	И УчетЗатратРеглОбороты.АналитикаУчетаПартий ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КлючиАналитикиУчетаПрочихЗатрат.Ссылка
	               |ИЗ
	               |	Справочник.КлючиАналитикиУчетаПрочихЗатрат КАК КлючиАналитикиУчетаПрочихЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат КАК УчетЗатратОбороты
	               |		ПО КлючиАналитикиУчетаПрочихЗатрат.Ссылка = УчетЗатратОбороты.КорАналитикаВидаУчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРеглОбороты
	               |		ПО КлючиАналитикиУчетаПрочихЗатрат.Ссылка = УчетЗатратРеглОбороты.КорАналитикаВидаУчета
	               |ГДЕ
	               |	УчетЗатратОбороты.АналитикаУчетаПартий ЕСТЬ NULL 
	               |	И УчетЗатратРеглОбороты.АналитикаУчетаПартий ЕСТЬ NULL";
				   
	Результат = Запрос.Выполнить();			   
	Если НЕ Результат.Пустой() Тогда
		МассивСсылок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
		Для Каждого ЗначениеМассива Из МассивСсылок Цикл
			МассивНайденныйхСсылок = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка",ЗначениеМассива));
			Если МассивНайденныйхСсылок <> Неопределено Тогда
				НетСсылок = Истина;
				Для Каждого ТекущаяСсылка Из МассивНайденныйхСсылок Цикл
					Если МассивМетаданныхРегистровКлючей.Найти(ТекущаяСсылка.Метаданные) = Неопределено Тогда
						НетСсылок = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				
				Если НетСсылок Тогда
					Если ТолькоТестировать Тогда
						Сообщить("Найден ключ на который нет ссылок " + ЗначениеМассива);
					Иначе	
						Сообщить("Удален ключ " + ЗначениеМассива);
						Объект = ЗначениеМассива.ПолучитьОбъект();
						Объект.Удалить();
						ТребуетсяПроверкаСсылочнойЦелостности = Истина;
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	Если ТребуетсяПроверкаСсылочнойЦелостности Тогда
		ПроверитьСсылочнуюЦелостностьКлючейАналитики(Ложь);
	КонецЕсли;	
КонецПроцедуры	

// Обновляет наименования ключей аналитики.
//
// Параметры:
//	ТолькоТестировать - булево, если необходимо только тестировать без исправления то Истина.
//
Процедура ОбновитьНаименованияКлючейАналитики(ТолькоТестировать) Экспорт
	
	Запрос = Новый Запрос();
	
	СтруктураКлючей = ПолучитьСтруктуруКлючей();
							
	Для Каждого КлючАналитики Из СтруктураКлючей Цикл						
		Запрос.Текст = "ВЫБРАТЬ";
		СтруктураИзмерений = Новый Структура();
		МассивИзмерений = Новый Массив();
		ШаблонИзмерений = ШаблонИзмеренийКлючаАналитики(КлючАналитики.Ключ, Неопределено);
		Для Каждого ТекущаяСтрока Из ШаблонИзмерений Цикл
			МассивИзмерений.Добавить(СокрЛП(ТекущаяСтрока.Измерение));
		КонецЦикла;	
		
		Для Каждого ТекущаяКолонка Из Метаданные.РегистрыСведений[КлючАналитики.Ключ].Измерения Цикл
			Запрос.Текст = Запрос.Текст + "
					   |	РегистрАналитики." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя + ",";
		КонецЦикла;			   
		Запрос.Текст = Запрос.Текст + "						
					   |	РегистрАналитики.Ссылка КАК Ссылка,
		               |	КлючиАналитики.Наименование КАК Наименование

		               |ИЗ
		               |	РегистрСведений." + КлючАналитики.Ключ + " КАК РегистрАналитики
					   |	ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + КлючАналитики.Значение + " КАК КлючиАналитики
					   |	ПО КлючиАналитики.Ссылка = РегистрАналитики.Ссылка
					   |ГДЕ
					   |	НЕ КлючиАналитики.Ссылка ЕСТЬ NULL";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() ТОгда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				НовоеНаименование = СокрЛП(Лев(ПолучитьПолноеНаименованиеКлючаАналитики(МассивИзмерений,Выборка),150));
				Если НовоеНаименование <> СокрЛП(Выборка.Наименование) Тогда
					Если ТолькоТестировать Тогда
						Сообщить("Для элемента справочника " + КлючАналитики.Значение + " указано не верное наименование """ + Выборка.Наименование + """. Правильное наименование """ + НовоеНаименование + """");
					Иначе	
						Сообщить("Для элемента справочника " + КлючАналитики.Значение + " измененно наименование. Старое наименование """ + Выборка.Наименование + """. Новое наименование """ + НовоеНаименование + """");
						Объект = Выборка.Ссылка.ПолучитьОбъект();
						Объект.Наименование = НовоеНаименование;
						Объект.Записать();
					КонецЕсли;				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры	

// Проверяет ссылочную целостность ключей аналитики.
//
// Параметры:
//	ТолькоТестировать - булево, если необходимо только тестировать без исправления то Истина.
//
Процедура ПроверитьСсылочнуюЦелостностьКлючейАналитики(ТолькоТестировать) Экспорт
	
	Запрос = Новый Запрос();
	СтруктураКлючей = ПолучитьСтруктуруКлючей();
							
	Для Каждого КлючАналитики Из СтруктураКлючей Цикл						
		Запрос.Текст = "ВЫБРАТЬ";
		МассивИзмерений = Новый Массив();
		ШаблонИзмерений = ШаблонИзмеренийКлючаАналитики(КлючАналитики.Ключ, Неопределено);
		Для Каждого ТекущаяСтрока Из ШаблонИзмерений Цикл
			МассивИзмерений.Добавить(СокрЛП(ТекущаяСтрока.Измерение));
		КонецЦикла;	
		
		ТаблицаДляПроверкиСуществованияСсылок = Новый ТаблицаЗначений();
		ТаблицаДляПроверкиСуществованияСсылок.Колонки.Добавить("Ссылка");
		Для Каждого ТекущаяКолонка Из Метаданные.РегистрыСведений[КлючАналитики.Ключ].Измерения Цикл
			ТаблицаДляПроверкиСуществованияСсылок.Колонки.Добавить(ТекущаяКолонка.Имя);
			Запрос.Текст = Запрос.Текст + "
					   |	РегистрАналитики." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя + ",";
		КонецЦикла;			   
		
		Запрос.Текст = Запрос.Текст + "
		               |	РегистрАналитики.Ссылка
		               |ИЗ
		               |	РегистрСведений." + КлючАналитики.Ключ + " КАК РегистрАналитики
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + КлючАналитики.Значение + " КАК КлючиАналитики
		               |		ПО РегистрАналитики.Ссылка = КлючиАналитики.Ссылка
		               |ГДЕ
		               |	КлючиАналитики.Ссылка ЕСТЬ NULL ";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() ТОгда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					//Удаляем запись с пустой ссылкой
					НовоеНаименование = ПолучитьПолноеНаименованиеКлючаАналитики(МассивИзмерений,Выборка);
					
					Если ТолькоТестировать Тогда
						Сообщить("Для записи """+ НовоеНаименование + """ регистра сведений " + КлючАналитики.Ключ + " не указана ссылка на элемент справочника " + КлючАналитики.Значение + ". Запись в регистре необходимо удалить.");
					Иначе	
						Сообщить("Для записи """+ НовоеНаименование + """ регистра сведений " + КлючАналитики.Ключ + " не указана ссылка на элемент справочника " + КлючАналитики.Значение + ". Запись удалена.");
						УдалитьЗаписьИзРегистраСОтбором(КлючАналитики.Ключ,МассивИзмерений,Выборка);
					КонецЕсли;
				Иначе
					//Проверим, есть ли другие ссылки на этот элемент
					НоваяСтрока = ТаблицаДляПроверкиСуществованияСсылок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				КонецЕсли;	
			КонецЦикла;
			
			Если ТаблицаДляПроверкиСуществованияСсылок.Количество() > 0 Тогда
				МассивСсылок = ТаблицаДляПроверкиСуществованияСсылок.ВыгрузитьКолонку("Ссылка");
				ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
				Для Каждого СтрокаТаблицы Из ТаблицаДляПроверкиСуществованияСсылок Цикл
					ТаблицаСсылокОтбор = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка",СтрокаТаблицы.Ссылка));
					ЕстьДругиеСсылкиНаОбъект = Ложь;
					Для Каждого ТекущаяСтрокаТаблицыСсылок Из ТаблицаСсылокОтбор Цикл
						Если ТекущаяСтрокаТаблицыСсылок[2].Имя <> КлючАналитики.Ключ Тогда
							//Есть и другие ссылки на данный объект
							НовоеНаименование = ПолучитьПолноеНаименованиеКлючаАналитики(МассивИзмерений,СтрокаТаблицы);
							ЕстьДругиеСсылкиНаОбъект = Истина;
							Если ТолькоТестировать Тогда
								Сообщить("Для записи """+ НовоеНаименование + """ регистра сведений " + КлючАналитики.Ключ + " указана ссылка на не существующий элемент справочника " + КлючАналитики.Значение + ". Необходимо создать новый элемент по этой ссылке.");
							Иначе	
								Сообщить("Для записи """+ НовоеНаименование + """ регистра сведений " + КлючАналитики.Ключ + " указана ссылка на не существующий элемент справочника " + КлючАналитики.Значение + ". По ссылке создан элемент справочника.");
							
								СпрКлюч = Справочники[КлючАналитики.Значение].СоздатьЭлемент();
								СпрКлюч.УстановитьСсылкуНового(ТекущаяСтрокаТаблицыСсылок[0]);
								СпрКлюч.Наименование = НовоеНаименование;
								СпрКлюч.Записать();
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;	
					Если НЕ ЕстьДругиеСсылкиНаОбъект Тогда
						//Других ссылок нет
						НовоеНаименование = ПолучитьПолноеНаименованиеКлючаАналитики(МассивИзмерений,СтрокаТаблицы);
						Если ТолькоТестировать Тогда
							Сообщить("Для записи """+ НовоеНаименование + """ регистра сведений " + КлючАналитики.Ключ + " указана ссылка на не существующий элемент справочника " + КлючАналитики.Значение + ". Необходимо удалить запись из регистра");
						Иначе	
							Сообщить("Для записи """+ НовоеНаименование + """ регистра сведений " + КлючАналитики.Ключ + " указана ссылка на не существующий элемент справочника " + КлючАналитики.Значение + ". Запись регистра удалена");
							УдалитьЗаписьИзРегистраСОтбором(КлючАналитики.Ключ,МассивИзмерений, СтрокаТаблицы);
						КонецЕсли;				
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

// Удаляет записи из регистра сведений с данными ключа
//
// Параметры:
//	ИмяРегистра - строка, имя регистра,
//	МассивИзмерений - массив, содержит список измерений по которым накладывается отбор,
//	СтруктураОтбора - структура, содержит значения отбора.
//
Процедура УдалитьЗаписьИзРегистраСОтбором(ИмяРегистра,МассивИзмерений, СтруктураОтбора)
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Для Каждого ТекущееИзмерение Из МассивИзмерений Цикл
		НаборЗаписей.Отбор[ТекущееИзмерение].Установить(СтруктураОтбора[ТекущееИзмерение]);
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОЛУЧЕНИЯ НАБОРОВ ЗАПИСЕЙ РЕГИСТРОВ

// Функция получает структуру с именами регистров.
//
// Возвращаемое значение:
//	Структура - Структура имен регистров
//
Функция ПолучитьСтруктуруИменРегистровУпр()
	
	Структура = Новый Структура;
	Структура.Вставить("УчетЗатрат", "УчетЗатрат");
	
	Структура.Вставить("ПродажиСебестоимость", "ПродажиСебестоимость");
	Структура.Вставить("СтроительствоОбъектовОсновныхСредств", "СтроительствоОбъектовОсновныхСредств");
	Структура.Вставить("ЗатратыНаСтроительствоОбъектовОсновныхСредств", "ЗатратыНаСтроительствоОбъектовОсновныхСредств");
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруИменРегистровБух()

// Функция получает структуру с именами регистров.
//
// Возвращаемое значение:
//	Структура - Структура имен регистров
//
Функция ПолучитьСтруктуруИменРегистровРегл()
	
	Структура = Новый Структура;
	Структура.Вставить("УчетЗатрат", "УчетЗатратРегл");
	
	Структура.Вставить("ПродажиСебестоимость", "ПродажиСебестоимость");
	Структура.Вставить("СтроительствоОбъектовОсновныхСредств", "СтроительствоОбъектовОсновныхСредств");
	Структура.Вставить("ЗатратыНаСтроительствоОбъектовОсновныхСредств", "ЗатратыНаСтроительствоОбъектовОсновныхСредств");
	
	Структура.Вставить("Хозрасчетный", "Хозрасчетный");
	Структура.Вставить("Налоговый", "Налоговый");
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруИменРегистровБух()

// Процедура получает набор записей регистра.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтруктураИменРегистров - Структура или Неопределено - Структура имен регистров
//	
// Возвращаемое значение:
//  СтруктураНаборыЗаписей – Структура - Структура наборов записей регистров.
//
Функция ПолучитьНаборыЗаписейРегистров(
	СтруктураШапкиДокумента,
	СтруктураИменРегистров = Неопределено
	) Экспорт
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	Если СтруктураИменРегистров = Неопределено Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			СтруктураИменРегистров = ПолучитьСтруктуруИменРегистровУпр();
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураИменРегистров = ПолучитьСтруктуруИменРегистровРегл();
			
		Иначе
			Возврат СтруктураНаборыЗаписей;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Регистр Из СтруктураИменРегистров Цикл
		
		ИмяРегистра = Регистр.Значение;
		
		Если ИмяРегистра = "Хозрасчетный" ИЛИ ИмяРегистра = "Налоговый" Тогда
			НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		КонецЕсли;
			
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		СтруктураНаборыЗаписей.Вставить(Регистр.Ключ, НаборЗаписей);
		
	КонецЦикла;
	
	Возврат СтруктураНаборыЗаписей;

КонецФункции // ПолучитьНаборыЗаписейРегистров()

////////////////////////////////////////////////////////////////////////////////

// Функция устанавливает значение свойства ОтладочныйРежим переданной структуры
// Позволяет во время отладки включить формирование запросов по временным таблицам
// 
// Параметры:
//  СтруктураШапкиДокумента - структура, свойство которой будет изменено
//  ОтладочныйРежим - значение свойства
// 
// Возвращаемое значение:
//  Всегда возвращает Истина
Функция ВключитьОтладочныйРежим(СтруктураШапкиДокумента, ОтладочныйРежим = Истина) Экспорт
	
   СтруктураШапкиДокумента.Вставить("ОтладочныйРежим", ОтладочныйРежим);
   
   Возврат Истина;
   
КонецФункции

// Процедура формирует запрос по временной таблице.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
Процедура ПоказатьВременнуюТаблицу(
	СтруктураШапкиДокумента,
	МенеджерВременныхТаблиц,
	ИмяВременнойТаблицы
	) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("ОтладочныйРежим")
	 ИЛИ Не СтруктураШапкиДокумента.ОтладочныйРежим
	Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры // ПоказатьВременнуюТаблицу()

// Процедура формирует запрос по временной таблице.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
Функция ВыгрузитьВременнуюТаблицу(
	МенеджерВременныхТаблиц,
	ИмяВременнойТаблицы
	) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ВыгрузитьВременнуюТаблицу()
