// МЕХАНИЗМ ОБЩИХ ПЕРЕМЕННЫХ
//
// Для работы с механизмом общих переменных используются функции
//	1. глЗначениеПеременной - для получения значения переменной
//	2. глЗначениеПеременнойУстановить - для изменения значения переменной 
//									(используется в исключительных ситуациях, не для всех переменных).
// 
// ВАЖНО: не следует явно вызывать экспортные функции этого модуля


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА ОБЩИХ ПЕРЕМЕННЫХ

// Функция предназначена для получения значения по имени переменной из КЭШа конфигурации
// Вызывается из функции ПолучитьЗначениеПеременной
//
// Параметры:
//	Имя					- Строка, имя переменной
//	НайденноеЗначение	- Произвольное значение, значение переменной. Заполняется в ходе выполнения функции
//  Кэш					- КЭШ из которого получали значение. Заполняется в ходе выполнения функции
//  ПоместитьВКэш		- Булево, Истина, если значение требуется поместить в КЭШ. Заполняется в ходе выполнения функции
//
// Возвращаемое значение: 
//  Булево - Истина, если значение было получено из КЭШа, иначе Ложь
//
Функция ПолучитьИзКэшаКонфигурации(Имя, НайденноеЗначение, Кэш, ПоместитьВКэш) Экспорт
	
	#Если Клиент ИЛИ ВнешнееСоединение Тогда
	Кэш = глОбщиеЗначения;
	#Иначе	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	#КонецЕсли
	
	Если Кэш <> Неопределено Тогда
		// Ищем значение в структуре
		Если Кэш.Свойство(Имя, НайденноеЗначение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	//Не нашли значение в кэше - вычисленное значение надо будет поместить в Кэш
	ПоместитьВКэш = Истина;
	
	Возврат Ложь;
	
КонецФункции // 

// Функция предназначена для получения значения по имени переменной
// Вызывается из функции глЗначениеПеременной
//
// Параметры:
//	Имя - Строка, имя переменной
//
// Возвращаемое значение: 
//  Произвольное значение
//
Функция ПолучитьЗначениеПеременной(Имя) Экспорт
	
	ИмяПараметраВР = ВРег(Имя);
	
	НайденноеЗначение = Неопределено;
	
	Кэш = Неопределено;
	ПоместитьВКэш = Ложь;
	
	НайденноеЗначение = ОбщегоНазначенияЗКПереопределяемый.ПолучитьЗначениеПеременной(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш);
	
	Если НайденноеЗначение = Неопределено Тогда
		
		Если ИмяПараметраВР = ВРег("глКомпонентаСклоненияФИО") Тогда
			#Если Клиент Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				Попытка
					// Загружаем внешнюю компоненту
					ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native);
					НайденноеЗначение = Новый("AddIn.Decl.CNameDecl");
				Исключение
					// Не удалось выполнить операции с внешней компонентой
					ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки внешней компоненты для склонения ФИО! Функции склонения будут недоступны!");
				КонецПопытки;
			КонецЕсли; 
			#КонецЕсли
			
		ИначеЕсли ИмяПараметраВР = ВРег("глТекущийПользователь") Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли; 
			
		ИначеЕсли ИмяПараметраВР = ВРег("глОбработкаАвтоОбменДанными") Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = ПроцедурыОбменаДанными.ВыполнитьИнициализациюАвтообменаПриНачалеРаботы();
			КонецЕсли; 
			
		// Для получения переменной используется КЭШ конфигурации, 
		// т.к. ее значение может изменяться программно в течение сеанса
		ИначеЕсли ИмяПараметраВР = ВРег("УчетнаяПолитикаОтраженияЗарплатыВУчете") Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = ЗаполнениеУчетнойПолитикиНалоговомуУчету();	
			КонецЕсли; 
			
		ИначеЕсли ВРег(ИмяПараметраВР) = ВРег("глКоллекцияЗначенийЗаголовков") Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = ЗаполнитьКоллекциюЗначенийЗаголовков();
			КонецЕсли; 
			
		ИначеЕсли ИмяПараметраВР = ВРег("ДатаНачалаОпределенияСчетовПриПроведенииДокументов") Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = СчетаУчетаВДокументах.ПолучитьДатуПервогоДокументаУстановкиСчетовУчетаНоменклатуры();
			КонецЕсли; 
			
		ИначеЕсли ИмяПараметраВР = ВРег("глСоответствиеТекстовЭлектронныхПисем")
			ИЛИ ИмяПараметраВР = ВРег("ЗначенияНастроекПользователей")  
			ИЛИ ИмяПараметраВР = ВРег("ЗначенияДополнительныхПравПользователя") 
			ИЛИ ИмяПараметраВР = ВРег("КэшСтратегииАвтонумерации") Тогда
			
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = Новый Соответствие;
			КонецЕсли;
			
		ИначеЕсли ИмяПараметраВР = ВРег("ТаблицаСоответствийФайловЭлектронныхПисем") Тогда
			
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = Новый ТаблицаЗначений;
				НайденноеЗначение.Колонки.Добавить("ИД"          ,Новый ОписаниеТипов("Строка"));
				НайденноеЗначение.Колонки.Добавить("ПутьКФайлу"  ,Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
		// Эти переменные используются только на клиенте
		#Если Клиент Тогда
		ИначеЕсли ИмяПараметраВР = ВРег("глОбработкаАвтоПолученияОтправкиЭлектронныхПисем") Тогда	
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
			КонецЕсли; 
			
		ИначеЕсли ИмяПараметраВР = ВРег("глЗапрашиватьПодтверждениеПриЗакрытии") Тогда	
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = Истина;		
			КонецЕсли; 
		#КонецЕсли
		
		ИначеЕсли ИмяПараметраВР = ВРег("глОбработкаСообщений") Тогда
		#Если Клиент Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = Обработки.СообщенияВыполняемыхДействий.Создать();		
			КонецЕсли; 
		#Иначе
		    // На сервере данное значение нельзя кэшировать текущим способом
			НайденноеЗначение = Обработки.СообщенияВыполняемыхДействий.Создать();
		#КонецЕсли
		
		ИначеЕсли ИмяПараметраВР = ВРег("глСпискиРегистраторов") Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = ЗаполнитьСтруктуруРегистрРегистраторы();
			КонецЕсли; 
			
		ИначеЕсли ИмяПараметраВР = ВРег("глЕстьВалютныеПоказателиОрганизаций") Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = ПоказыватьВалюту();
			КонецЕсли; 
			
		ИначеЕсли ВРег(ИмяПараметраВР) = ВРег("глОграничитьКоличествоСотрудниковПриПечатиВедомости") Тогда
			НастройкиЗащитыПерсональныхДанных = РегистрыСведений.НастройкаЗащитыПерсональныхДанных.Получить();
			
			НайденноеЗначение = НастройкиЗащитыПерсональныхДанных.ОграничитьКоличествоСотрудниковПриПечатиВедомости;
		//начало изменений не используемым версионность при проведении документов
		ИначеЕсли ИмяПараметраВР = ВРег("ИспользоватьВерсионированиеОбъектов") Тогда
			Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
				НайденноеЗначение = Константы[ИмяПараметраВР].Получить();
			КонецЕсли; 
		//конец изменений 
		Иначе
			
			// Остальные переменные получим используя механизм повторно возвращамых значений
			НайденноеЗначение = РаботаСОбщимиПеременнымиПовтИсп.ПолучитьЗначениеПеременной(Имя);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ПоместитьВКэш Тогда
		
		#Если Клиент ИЛИ ВнешнееСоединение Тогда
			
			Если глОбщиеЗначения = Неопределено Тогда
				глОбщиеЗначения = Новый Структура;
			КонецЕсли; 
			глОбщиеЗначения.Вставить(Имя, НайденноеЗначение);
			
		#Иначе	
			
			// В функции ПолучитьИзКэшаКонфигурации получили значение параметра сеанса
			// Добавим в него новое значение переменной и поместим в КЭШ
			Кэш.Вставить(Имя, НайденноеЗначение);
			ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
			
		#КонецЕсли
		
	КонецЕсли; 
	
	Возврат НайденноеЗначение;
	
КонецФункции

Процедура УстановитьЗначениеПеременной(ИмяПараметра, ЗначениеПараметра, ОбновитьКэшНаСервере = Ложь) Экспорт
	
	#Если Клиент ИЛИ ВнешнееСоединение Тогда
		// обновление переменной на клиенте или во внешнем соединении  
		
		// если глобальная переменная глОбщиеЗначения еще не инициализирована, инициализируем ее 
		Если глОбщиеЗначения = Неопределено Тогда
			глОбщиеЗначения = Новый Структура;
		КонецЕсли;
		
		// Установим новое значение переменной
		глОбщиеЗначения.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		Если ВРег(ИмяПараметра) = ВРег("глТекущийПользователь") Тогда
			// Сбросим кэш дополнительных прав и настроек пользователя
			УстановитьЗначениеПеременной("ЗначенияДополнительныхПравПользователя", Новый Соответствие());
			УстановитьЗначениеПеременной("ЗначенияНастроекПользователей",          Новый Соответствие());
		КонецЕсли;
		
		Если НЕ ОбновитьКэшНаСервере Тогда
			Возврат;			
		КонецЕсли;
	#КонецЕсли
	
	// Обновим значение переменной в кэше на сервере. Это происходит в двух случаях:
	// 1. при выполнении на клиенте, когда ОбновитьКэшНаСервере = Истина (см. выше)
	// 2. при выполнении на сервере
	КэшНаСервере = ПараметрыСеанса.ОбщиеЗначения.Получить();
		
	// Если ПараметрыСеанса.ОбщиеЗначения еще не инициализирована, инициализируем ее 
	Если КэшНаСервере = Неопределено Тогда
		КэшНаСервере = Новый Структура;
	КонецЕсли;
	
	КэшНаСервере.Вставить(ИмяПараметра, ЗначениеПараметра);
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(КэшНаСервере);
	
КонецПроцедуры

// Процедура добавляет обязательные значения в кэш ОбщиеЗначения при запуске системы и после очистки кэша
//
Процедура ДобавитьОбязательныеЗначенияВКэш() Экспорт
	глЗначениеПеременной("РазрешитьВыводитьСообщенияВПанельКомментариев");
	глЗначениеПеременной("ДублироватьСообщенияВЖурналРегистрации");
	УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ВыводитьСообщенияВПанельКомментариев");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ АКТУАЛЬНОСТИ ЗНАЧЕНИЙ ПЕРМЕННЫХ

// Процедура очищает переменные глОбщиеЗначения и ПараметрыСеанса.ОбщиеЗначения
// используемые функцией глЗначениеПеременной.
//
Процедура ОчиститьДанныеКЭШа()

	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	глОбщиеЗначения = Неопределено;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	//Добавление обязательных значений в кеш ОбщиеЗначения
	ДобавитьОбязательныеЗначенияВКэш();
КонецПроцедуры
 
Процедура ОбновитьКЭШПриЗаписиКонстант(Источник, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		ОчиститьДанныеКЭШа();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьКЭШПриЗаписиРегистраСведений(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ Отказ Тогда
		ОчиститьДанныеКЭШа();
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЧИСЛЯЮЩИЕ ЗНАЧЕНИЯ ПЕРЕМЕННЫХ

// Процедура инициализирует глобальную переменную УчетнаяПолитикаОтраженияЗарплатыВУчете.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиНалоговомуУчету() Экспорт
	
	УчетнаяПолитикаПоНалоговомуУчету = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
	
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Справочники.Организации.ПустаяСсылка(),Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(),Перечисления.ПорядкиОкругленияЕСН.Точно,Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
		УчетнаяПолитикаПоНалоговомуУчету.Вставить('00010101',УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПериодыУчетнойПолитики.Период) КАК КонечныйПериод,
		|	МИНИМУМ(ПериодыУчетнойПолитики.Период) КАК НачальныйПериод
		|ИЗ
		|	(ВЫБРАТЬ
		|		УчетнаяПолитикаНалоговыйУчет.Период КАК Период
		|	ИЗ
		|		РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет) КАК ПериодыУчетнойПолитики";
		Выборка = Запрос.Выполнить().Выбрать();
		ПериодыТекст =
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период
		|ПОМЕСТИТЬ ВТПериоды";
		Если Выборка.Следующий() Тогда
			НачальныйПериод = Выборка.НачальныйПериод;
			КонечныйПериод = Выборка.КонечныйПериод;
			Если ЗначениеЗаполнено(НачальныйПериод) Тогда
				
				// скорректируем даты, чтобы ограничить количество записей
				НачальныйПериод = Макс(НачальныйПериод, НачалоМесяца(ДобавитьМесяц(ОбщегоНазначения.ПолучитьРабочуюДату(), -210)));
				КонечныйПериод = Мин(КонечныйПериод, НачалоМесяца(ДобавитьМесяц(ОбщегоНазначения.ПолучитьРабочуюДату(),36)));
				КонечныйПериод = Макс(КонечныйПериод, НачальныйПериод);
				
				// конец месяца налогового периода
				КонецМесяца = КонецМесяца(НачальныйПериод);
				// первый месяц
				ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")КАК Период ПОМЕСТИТЬ ВТПериоды";
				// прибавим остальные месяцы
				Пока КонецМесяца < КонечныйПериод Цикл
					КонецМесяца = КонецМесяца(КонецМесяца+1);
			    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВТПериоды.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчет.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ , ЛОЖЬ) КАК УСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомЕНВД, ЛОЖЬ) КАК ОрганизацияЯвляетсяПлательщикомЕНВД,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОбъектНалогообложенияУСН, ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.ПустаяСсылка)) КАК ОбъектНалогообложенияУСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.УплачиватьДобровольныеВзносыВФСС, ЛОЖЬ) КАК УплачиватьДобровольныеВзносыВФСС,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка)) КАК ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ТочностьИсчисленияЕСН, ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругленияЕСН.Точно)) КАК ТочностьИсчисленияЕСН,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ТочностьИсчисленияПФР, ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругленияЕСН.Точно)) КАК ТочностьИсчисленияПФР,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ПорядокРасчетаВычетаФБ, ЗНАЧЕНИЕ(Перечисление.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов)) КАК ПорядокРасчетаВычетаФБ
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК ВТПериоды
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
		|			МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ДатаРегистра,
		|			ВТПериоды.Период КАК Период
		|		ИЗ
		|			ВТПериоды КАК ВТПериоды
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|				ПО ВТПериоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|		
		|		СГРУППИРОВАТЬ ПО
		|			УчетнаяПолитикаНалоговыйУчет.Организация,
		|			ВТПериоды.Период) КАК ДатыУстановленияУчПолитикиНалоговыйУчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
		|			ПО ДатыУстановленияУчПолитикиНалоговыйУчет.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|				И ДатыУстановленияУчПолитикиНалоговыйУчет.ДатаРегистра = УчетнаяПолитикаНалоговыйУчет.Период
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = ДатыУстановленияУчПолитикиНалоговыйУчет.Организация)
		|			И (ВТПериоды.Период = ДатыУстановленияУчПолитикиНалоговыйУчет.Период)
		|		
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
							
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
				Структура = Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ");
				ЗаполнитьЗначенияСвойств(Структура,Выборка);
				УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Выборка.Организация,Структура);
			КонецЦикла;
			УчетнаяПолитикаПоНалоговомуУчету.Вставить(?(ЗначениеЗаполнено(Выборка.Период),КонецМесяца(Выборка.Период),Выборка.Период),УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
			УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
			УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить(Справочники.Организации.ПустаяСсылка(),Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(), Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
					
		КонецЦикла;
		
	Иначе 
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие = Новый Соответствие;
		УчетнаяПолитикаПоНалоговомуУчетуСоответствие.Вставить("",Новый Структура("УСН,ОбъектНалогообложенияУСН,ОрганизацияЯвляетсяПлательщикомЕНВД,УплачиватьДобровольныеВзносыВФСС,ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете, ТочностьИсчисленияЕСН, ТочностьИсчисленияПФР, ПорядокРасчетаВычетаФБ",Ложь,Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка(),Ложь,Ложь,Перечисления.ВариантыУчетаРасходовПоНалогамСФОТВНалоговомУчете.ПустаяСсылка(),Перечисления.ПорядкиОкругленияЕСН.Точно,Перечисления.ПорядкиОкругленияЕСН.Точно, Перечисления.ПорядкиИсчисленияВычетаПоЕСН.ПоСуммеСтраховыхВзносов));
		УчетнаяПолитикаПоНалоговомуУчету.Вставить('00010101',УчетнаяПолитикаПоНалоговомуУчетуСоответствие);
	КонецЕсли; 
    
	Возврат УчетнаяПолитикаПоНалоговомуУчету;
	
КонецФункции// ЗаполнениеУчетнойПолитикиНалоговомуУчету

// Функция инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналу.
// Переменная содержит структуру.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиПоПерсоналу()Экспорт
	
	УчетнаяПолитикаПоПерсоналу = Новый Структура();
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.УчетнаяПолитикаПоПерсоналу.Ресурсы Цикл
		УчетнаяПолитикаПоПерсоналу.Вставить(Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
	КонецЦикла;
	УчетнаяПолитикаПоПерсоналу.КоличествоДнейОтпускаВГод = 20;
	УчетнаяПолитикаПоПерсоналу.УпрощенныйУчетВзаиморасчетов = Истина;
	
	Выборка = РегистрыСведений.УчетнаяПолитикаПоПерсоналу.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(УчетнаяПолитикаПоПерсоналу, Выборка)
	КонецЦикла;
	
    Возврат УчетнаяПолитикаПоПерсоналу;	
КонецФункции

// Заполняет структуру - Регистр и список регистраторов этого регистра
//
// Возвращаемое значение:
//   Структура   - Ключ - Имя регистра, Значение - СписокЗначений, регистраторы этого регистра
//
Функция ЗаполнитьСтруктуруРегистрРегистраторы()

	Регистраторы = Новый Структура("Регистр","СписокРегистраторов");
	
	Для каждого МетаданныеДокумент Из Метаданные.Документы Цикл
		
		Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл
			
			СписокРегистраторов = Неопределено;
			Если НЕ Регистраторы.Свойство(МетаданныеРегистр.Имя, СписокРегистраторов) Тогда
				СписокРегистраторов = Новый СписокЗначений;
			КонецЕсли;
			
			СписокРегистраторов.Добавить(Документы[МетаданныеДокумент.Имя], МетаданныеДокумент.Синоним);

			Регистраторы.Вставить(МетаданныеРегистр.Имя, СписокРегистраторов);
			
		КонецЦикла;	
			
	КонецЦикла;
	
	Возврат Регистраторы;

КонецФункции // ЗаполнитьСтруктуруРегистрРегистраторы()

// Определяет есть ли денежные показатели с незаполненной валютой
//
Функция ОпределитьНаличиеВалютныхПоказателей()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	 |	ПоказателиСхемМотивации.Ссылка
	 |ИЗ
	 |	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	 |ГДЕ
	 |	ПоказателиСхемМотивации.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
	 |	И ПоказателиСхемМотивации.Валюта = Значение(Справочник.Валюты.ПустаяСсылка)");
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 Возврат Выборка.Следующий();
	
 КонецФункции
 
// Определяет нужно ли показывать валюту
//
Функция ПоказыватьВалюту()
	
	ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуютсяНачисленияВВалюте");
	Возврат ОпределитьНаличиеВалютныхПоказателей() Или ?(ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций = NULL, Ложь,ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций);
	
КонецФункции

