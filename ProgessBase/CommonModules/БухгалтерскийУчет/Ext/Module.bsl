// Функция преобразует счет БУ в счет НУ в зависимости от вида расхода
//
// Параметры
//  СтруктураДанных - Структура - структура с данными преобразования
//                                Имена полей структуры - имена реквизитов 
//                                регистра.
//  ССубконто       - Булево    - признак возврата субконто НУ
//	МассивСчетовНУ - Массив - Массив счетов налогового учета
//
// Возвращаемое значение
//  Счет налогового учета
//
Функция ПреобразоватьСчетаБУвСчетНУ(
	СтруктураДанных, 
	ВозвращатьСубконто = Ложь, 
	Знач ДатаСреза = Неопределено,
	МассивСчетовНУ = Неопределено
	) Экспорт

	Перем ТекстУсловий;

	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;

	Результат = ПланыСчетов.Налоговый.ПустаяСсылка();

	Если НЕ ЗначениеЗаполнено(СтруктураДанных) Тогда
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос();
	
	ТекстУсловия = "Учитывается";
	Для каждого ПолеСтруктуры Из СтруктураДанных Цикл

		ТекстУсловия = ТекстУсловия + Символы.ПС + "И "+ПолеСтруктуры.Ключ + " = &" + ПолеСтруктуры.Ключ;
		Запрос.УстановитьПараметр(ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);

	КонецЦикла;
	
	Если МассивСчетовНУ <> Неопределено Тогда
		ТекстУсловия = ТекстУсловия + Символы.ПС + "И СчетНУ В (&МассивСчетовНУ)";
		Запрос.УстановитьПараметр("МассивСчетовНУ", МассивСчетовНУ);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеСчетовБУиНУ.СчетБУ КАК СчетБУ,
	               |	СоответствиеСчетовБУиНУ.СчетКоррБУ КАК СчетКоррБУ,
	               |	СоответствиеСчетовБУиНУ.ВидЗатратНУ КАК ВидЗатратНУ,
	               |	СоответствиеСчетовБУиНУ.СчетНУ КАК СчетНУ,
	               |	СоответствиеСчетовБУиНУ.Учитывается
	               |ИЗ
	               |	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&ДатаСреза, " + ТекстУсловия + ") КАК СоответствиеСчетовБУиНУ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СчетБУ,
	               |	СчетКоррБУ,
	               |	ВидЗатратНУ,
	               |	СчетНУ";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		Возврат Выборка.СчетНУ;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПреобразоватьСчетаБУвСчетНУ()

// Производит замену субконто НУ на субконто БУ, если у них одинаковые типы-
// 
Процедура ЗаменитьСубконтоНУ(СчетБУ, СчетНУ, НомерСубконто, СубконтоБУ, СубконтоНУ) Экспорт

	Если НЕ ЗначениеЗаполнено(СчетБУ) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		Возврат;
	КонецЕсли;

	Если СчетНУ.ВидыСубконто.Количество() >= НомерСубконто Тогда
		Если СчетБУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения = 
			СчетНУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения Тогда

			СубконтоНУ = СубконтоБУ;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаменитьСубконтоНУ()

// Формирует структуру с вложенной таблицой на основании таблицы(дерева) значений
Функция ПреобразоватьТаблицуЗначенийВСтруктуру(ТаблицаЗначений,СтруктураОбщихРеквизитов,ФормироватьВложеннуюТаблицу,СтруктураКолонок = Неопределено,КоллекцияКолонокДереваЗначений=Неопределено)Экспорт
	НоваяСтруктура = новый структура();
	
	Для каждого ОбщийРеквизит из СтруктураОбщихРеквизитов цикл
		НоваяСтруктура.Вставить(?(НЕ ЗначениеЗаполнено(ОбщийРеквизит.Значение),ОбщийРеквизит.Ключ,ОбщийРеквизит.Значение),
			?(ТаблицаЗначений.Количество()>0,ТаблицаЗначений[0][ОбщийРеквизит.Ключ],Неопределено));
	КонецЦикла;
	Если ФормироватьВложеннуюТаблицу тогда
		Если НЕ ЗначениеЗаполнено(СтруктураКолонок) тогда
			СтруктураКолонок = новый Структура();
			Для каждого СтараяКолонка из ТаблицаЗначений.Колонки Цикл
				Если СтруктураОбщихРеквизитов.Свойство(СтараяКолонка.Имя) тогда
					Продолжить;
				Иначе
					СтруктураКолонок.Вставить(СтараяКолонка.Имя);
				Конецесли;
			КонецЦикла;
		КонецЕсли;
		Если СтруктураКолонок.Количество()=0 тогда
			НоваяТаблица =новый ТаблицаЗначений();
		Иначе
			НоваяТаблица = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаЗначений, СтруктураКолонок,,Истина,КоллекцияКолонокДереваЗначений);
		КонецеслИ;
		НоваяСтруктура.Вставить("Таблица",НоваяТаблица);
	Конецесли;
	Возврат НоваяСтруктура;
КонецФункции

// Функция возвращает остаток по счету бухгалтерского учета
// Возвращаемое значение - таблица значений в развороте по аналитике с учетом фильтра
Функция ПолучитьОстатокПоСчету(Организация,Период,Счет,Валюта=Неопределено ,Субконто1=Неопределено, Субконто2=Неопределено,Субконто3=Неопределено,ЗнакФильтрПоОстаткам=0) Экспорт

	ВидПланаСчетов = Счет.Метаданные().Имя;

	Субконто    = Новый Массив(3);
	Субконто[0] = Субконто1;
	Субконто[1] = Субконто2;
	Субконто[2] = Субконто3;

	ФильтрПоСубконто = "";

	Для Каждого ТекВидСубконто Из Счет.ВидыСубконто Цикл
		Если НЕ ТекВидСубконто.ТолькоОбороты И НЕ Субконто[ТекВидСубконто.НомерСтроки-1] = Неопределено Тогда
			ФильтрПоСубконто = ФильтрПоСубконто + " И Субконто" + ТекВидСубконто.НомерСтроки + " = &Субконто" + ТекВидСубконто.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ВыбиратьВалюту			= (не Счет.Метаданные().ПризнакиУчета.Найти("Валютный")= Неопределено);
	ВыбиратьВалютнуюСумму	= (не Метаданные.РегистрыБухгалтерии[ВидПланаСчетов].Ресурсы.Найти("ВалютнаяСумма")= Неопределено);
	ОтборПоОрганизации		= (не Метаданные.РегистрыБухгалтерии[ВидПланаСчетов].Измерения.Найти("Организация")= Неопределено);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"      , Период);
	Запрос.УстановитьПараметр("Счет"        , Счет);
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("Субконто1"   , Субконто[0]);
	Запрос.УстановитьПараметр("Субконто2"   , Субконто[1]);
	Запрос.УстановитьПараметр("Субконто3"   , Субконто[2]);
	Запрос.УстановитьПараметр("Валюта"      , Валюта);
	ВидыСубконто = Счет.ВидыСубконто.ВыгрузитьКолонку("ВидСубконто");
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	ЗнакОстатков = ?(ТипЗнч(ЗнакФильтрПоОстаткам) = Тип("Число"), ЗнакФильтрПоОстаткам, 0);
	Запрос.УстановитьПараметр("Множитель", ?(ЗнакОстатков < 0, -1, 1));
	
	КоличествоСубконто = ВидыСубконто.Количество();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Счет,"
	+ ?(КоличествоСубконто > 0, " 
	|	Субконто1,", "НЕОПРЕДЕЛЕНО КАК Субконто1,")
	+ ?(КоличествоСубконто > 1, " 
	|	Субконто2,", "НЕОПРЕДЕЛЕНО КАК Субконто2,")
	+ ?(КоличествоСубконто > 2, " 
	|	Субконто3,", "НЕОПРЕДЕЛЕНО КАК Субконто3,")
	+ "
	|	ЕСТЬNULL(СуммаОстаток, 0) * &Множитель КАК СуммаОстаток"
	+ ?(ВыбиратьВалюту, ", 
	|	ЕСТЬNULL(Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта", "")
	+ ?(ВыбиратьВалютнуюСумму, ", 
	|	ЕСТЬNULL(ВалютнаяСуммаОстаток, 0)  * &Множитель КАК ВалютнаяСуммаОстаток", ",
	|	ЕСТЬNULL(СуммаОстаток, 0)  * &Множитель КАК ВалютнаяСуммаОстаток")
	+ "
	|ИЗ
	|	РегистрБухгалтерии." + ВидПланаСчетов + ".Остатки(&Период, Счет = &Счет, &ВидыСубконто, #Фильтр#) КАК Остатки"
	+ ?(ЗнакОстатков <> 0, "
	|
	|ГДЕ
	|	"
	+ ?(НЕ ЗначениеЗаполнено(Валюта), 
	"ЕСТЬNULL(Остатки.СуммаОстаток, 0) * &Множитель > 0", "ЕСТЬNULL(Остатки.ВалютнаяСуммаОстаток, 0) * &Множитель > 0"), "")
	+ "
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3"
	+ ?(ВыбиратьВалюту,",
	|	Валюта","");
		
	Фильтр = "";
	Если ОтборПоОрганизации Тогда
		Фильтр = Фильтр + " И Организация = &Организация";
	КонецЕсли;
	Если ЗначениеЗаполнено(Валюта) И Счет.Валютный Тогда
		Фильтр = Фильтр + " И Валюта = &Валюта";
	КонецЕсли;
	Фильтр = Фильтр + ФильтрПоСубконто;
	Если Не ПустаяСтрока(Фильтр) Тогда // Убираем первое "И"
		Фильтр = Сред(Фильтр, 3);
	КонецЕсли;
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
				
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		СтруктураЗначенийБлокировки   = Новый Структура;
		
		Если ТипЗнч(Период) = Тип("МоментВремени") Тогда
			СтруктураЗначенийБлокировки.Вставить("Период", Период.Дата); 
		ИначеЕсли ТипЗнч(Период) = Тип("Дата") Тогда
			СтруктураЗначенийБлокировки.Вставить("Период", Период); 
		КонецЕсли; 
		СтруктураЗначенийБлокировки.Вставить("Счет", Счет); 
		Если ОтборПоОрганизации Тогда
			СтруктураЗначенийБлокировки.Вставить("Организация", Организация); 
		КонецЕсли;
		Если ЗначениеЗаполнено(Валюта) И Счет.Валютный Тогда
			СтруктураЗначенийБлокировки.Вставить("Валюта", Валюта); 
		КонецЕсли;
		Для Каждого ТекВидСубконто Из Счет.ВидыСубконто Цикл
			Если НЕ ТекВидСубконто.ТолькоОбороты И НЕ Субконто[ТекВидСубконто.НомерСтроки-1] = Неопределено Тогда
				СтруктураЗначенийБлокировки.Вставить("Субконто"+ ТекВидСубконто.НомерСтроки, Субконто[ТекВидСубконто.НомерСтроки-1]); 
			КонецЕсли;
		КонецЦикла;
		
		Отказ     = Ложь;
		Заголовок = "";
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
				
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Фильтр#", Фильтр);	
	
	Остатки = Запрос.Выполнить().Выгрузить();

	Возврат Остатки;

КонецФункции // ПолучитьОстатокПоСчету()

// Процедура удаляет из набора записи в зависимости от вида регламентной операции
//
Процедура ЗачиститьНаборЗаписейОтРегламентныхОпераций(НаборЗаписей, МассивРегОпераций, ИмяРеквизита = "ВидРегламентнойОперации") Экспорт
	
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВсегоЗаписей = (НаборЗаписей.Количество());

	Для Индекс = 1 по ВсегоЗаписей Цикл
		
		ЗначениеРеквизита = НаборЗаписей[ВсегоЗаписей - Индекс][ИмяРеквизита];
		Если МассивРегОпераций.Найти(ЗначениеРеквизита) <> Неопределено Тогда
			НаборЗаписей.Удалить(ВсегоЗаписей - Индекс);
		КонецЕсли;

	КонецЦикла;

Конецпроцедуры // ЗачиститьНаборЗаписейОтРегламентныхОпераций()

// Записывает наборы записей регистров Хозрасчетный и Налоговый коллекции Движения, если они модифицированы.
// Движения записываются без режима замещения.
// Необходимо вызывать, если движения по этим регистрам могут формироваться
// - с использованием коллекции Движения ("из модуля документа")
// - с использованием наборов записей (из подписок на событие ПриПроведении, из процедур серверных модулей)
// Вызывать нужно перед тем, как вызываются процедуры серверных модулей или обработчик подписки на событие
Процедура ЗаписатьДвижения(Движения) Экспорт
	
	Регистры = Новый Массив();
	Регистры.Добавить("Хозрасчетный");
	Регистры.Добавить("Налоговый");
	
	Для Каждого ИмяРегистра Из Регистры Цикл
		
		// Получим набор записей
		НаборЗаписей = Движения.Найти(ИмяРегистра);
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Убедимся, что не модифицирован
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет принадлежность субсчета счету.
//
Функция ЭтоСубсчет( Субсчет, Счет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Субсчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ( Субсчет.ПринадлежитЭлементу(Счет) ИЛИ Субсчет = Счет);
	
КонецФункции // ЭтоСубсчет()

// Функция формирует конец периода формирования отчета.
//
Функция КонецПериодаОтчета(КонДата) Экспорт
	
	Возврат ?(КонДата = Дата('00010101000000'), КонДата, КонецДня(КонДата));
	
КонецФункции // КонецПериодаОтчета()

// Если в переданном поле ввода предполагается вводить элемент спр-ка
//  ПодразделенияОрганизаций или БанковскиеСчета, то в качестве владельца
//  будущего значения указывается Организация документа
//
// Параметры
//  Элемент - поле ввода значения субконто
//
// Возвращаемое значение:
//   нет
//
Процедура УказатьВладельцаПолюВвода(Элемент, Владелец) Экспорт

	ОписаниеТипа = Элемент.ОграничениеТипа;
	Если ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) или
		ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.БанковскиеСчета")) Тогда
		Элемент.ВыборПоВладельцу = Владелец
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает субконто на счете. Если такое субконто не счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - вид субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "", ВидыСубконтоСчета = Неопределено) Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если ВидыСубконтоСчета = Неопределено Тогда
	     ВидыСубконтоСчета = Счет.ВидыСубконто;
	КонецЕсли; 

	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда
		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат;
		КонецЕсли;
		ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;
	Иначе
		Если Метаданные.ПланыСчетов.Найти("Международный") <> Неопределено И ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Международный") Тогда
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоМеждународные[ИмяСубконто];
		Иначе
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];
		КонецЕсли;
		Если ВидыСубконтоСчета.Найти( ВидСубк) = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубк, ЗначениеСубконто);
	ИначеЕсли Сообщать Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">",, Заголовок);
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

Функция ОпределитьВидСубконтоПоСчету(Счет, КэшВидовСубконтоПоСчетам) Экспорт
	Если Счет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если КэшВидовСубконтоПоСчетам = Неопределено Тогда
		КэшВидовСубконтоПоСчетам = Новый Соответствие;
	КонецЕсли; 
	
	ВидыСубконтоПоСчету = КэшВидовСубконтоПоСчетам[Счет];
	Если ВидыСубконтоПоСчету = Неопределено Тогда
		ВидыСубконтоПоСчету = Счет.ВидыСубконто;
		КэшВидовСубконтоПоСчетам.Вставить(Счет, ВидыСубконтоПоСчету);
	КонецЕсли; 
	
	Возврат ВидыСубконтоПоСчету;
	
КонецФункции

// Фукция предназначена для определения названия объекта
// учета по его счету учета. Название объекта выдается в родительном падеже
Функция ПолучитьНазваниеОбъекта(СчетУчета) Экспорт
	
	Если Сред(СчетУчета.Код, 4, 1) = "." Тогда
		СчетУчетаКод = Лев(СчетУчета.Код, 3);
	Иначе
		СчетУчетаКод = Лев(СчетУчета.Код, 2);
	КонецЕсли;
	
	Если СчетУчетаКод = "10" Тогда
		
		Если Лев(СчетУчета.Код, 5) = "10.09" Тогда
				Возврат "инвентаря";
				
		ИначеЕсли Лев(СчетУчета.Код, 7) = "10.11.1" Тогда
				Возврат "спецодежды";
				
		ИначеЕсли Лев(СчетУчета.Код, 7) = "10.11.2" Тогда
				Возврат "спецоснастки";
				
		Иначе
				Возврат "материалов";
				
		КонецЕсли;

	ИначеЕсли СчетУчетаКод = "20" Тогда
			Возврат "продукции для давальца";
		
	ИначеЕсли СчетУчетаКод = "21" Тогда
			Возврат "полуфабрикатов";
			
	ИначеЕсли СчетУчетаКод = "41" Тогда
			Возврат "товаров";
			
	ИначеЕсли СчетУчетаКод = "43" Тогда
			Возврат "продукции";
			
	ИначеЕсли СчетУчетаКод = "45" Тогда
		Возврат "отгруженных товаров";
		
	ИначеЕсли СчетУчетаКод = "001" Тогда
			Возврат "арендованных основных средств";
		
	ИначеЕсли СчетУчетаКод = "002" Тогда
			Возврат "товаров на ответственное хранение";
			
	ИначеЕсли СчетУчетаКод = "003" Тогда
			Возврат "материалов в переработку";
			
	ИначеЕсли СчетУчетаКод = "004" Тогда
			Возврат "товаров комитента";
			
	ИначеЕсли СчетУчетаКод = "005" Тогда
			Возврат "оборудования для монтажа";
			
	Иначе
			Возврат "";
			
	КонецЕсли;
	
	
КонецФункции

Функция СформироватьСодержаниеПроводкиПоВходящемуДокументу(Структура, ВидОперации) Экспорт

	Для Каждого Строка Из Структура Цикл
		Если  НЕ Строка.Содержание = Неопределено Тогда
			ВидОперацииТекст = Строка.Содержание;
			
		ИначеЕсли Найти(ВидОперации, "Поступление") > 0 Тогда
			ВидОперацииТекст = ВидОперации +" "+ ПолучитьНазваниеОбъекта(Строка.СчетУчетаБУ);
		Иначе 
			ВидОперацииТекст = ВидОперации;
		КонецЕсли;
		
		Строка.Содержание = ВидОперацииТекст + " по " + Строка.ВидДокВходящий + " " + Строка.НомерВходящегоДокумента + " от " + Формат(Строка.ДатаВходящегоДокумента, "ДЛФ=Д");
	КонецЦикла
КонецФункции	

Функция СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаТоваров, ВидДокВходящий, НомерВходящегоДокумента, ДатаВходящегоДокумента) Экспорт

	ТаблицаТоваров.Колонки.Добавить("ВидДокВходящий");
	ТаблицаТоваров.ЗаполнитьЗначения(ВидДокВходящий, "ВидДокВходящий");
	ТаблицаТоваров.Колонки.Добавить("НомерВходящегоДокумента");
	ТаблицаТоваров.ЗаполнитьЗначения(НомерВходящегоДокумента, "НомерВходящегоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ДатаВходящегоДокумента");
	ТаблицаТоваров.ЗаполнитьЗначения(ДатаВходящегоДокумента, "ДатаВходящегоДокумента");
	
	Если ТаблицаТоваров.Колонки.найти("Содержание") = Неопределено Тогда
		
		ТаблицаТоваров.Колонки.Добавить("Содержание");
	КонецЕсли;
	
КонецФункции
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕОЦЕНКИ ВАЛЮТНЫХ СЧЕТОВ

// ПРОЦЕДУРЫ СПИСАНИЯ РБП

Функция РазностьДатВДнях(Дата1, Дата2)
	
	мДлинаСуток = 86400; // в секундах
	
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);
	
КонецФункции

Функция СуммаСписанияЗаМесяц(мНачДата, мКонДата, СтатьяРасходовБудущихПериодов, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Остаток, ВспомогательныеДанные = Неопределено) Экспорт
	
	Если Остаток = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);
	
	ПоправкаНаВисокосныйГодВНачалеПериода = 0;
	ПоправкаНаВисокосныйГодВКонцеПериода  = 0;
	Если Лев(Строка(КонецМесяца(ДатаНачалаСписания)), 5) = "29.02" И НЕ Лев(Строка(ДатаНачалаСписания), 5) = "01.02" Тогда
		ПоправкаНаВисокосныйГодВНачалеПериода = -1;
	КонецЕсли;
	Если Лев(Строка(КонецМесяца(ДатаОкончанияСписания)), 5) = "29.02" Тогда
		ПоправкаНаВисокосныйГодВКонцеПериода = -1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;
		
	ИначеЕсли СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
		КоличествоДней = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания) + 1;
		ЦенаДня = Остаток / КоличествоДней;
		Если КонецМесяца(ДатаОкончанияСписания) = КонецМесяца(ДатаНачалаСписания) Тогда 
			КоличествоДнейТекущегоМесяца = День(ДатаОкончанияСписания); 
			КоличествоДней = КоличествоДнейТекущегоМесяца;
			СуммаСписания  = Остаток;
		Иначе	
			КоличествоДнейТекущегоМесяца = РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1; 
			СуммаСписания = ЦенаДня * КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоДней;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = КоличествоДнейТекущегоМесяца;
		КонецЕсли;
	Иначе
		
		ДоляПоследнегоМесяца = День(ДатаОкончанияСписания) / (День(КонецМесяца(ДатаОкончанияСписания)) + ПоправкаНаВисокосныйГодВКонцеПериода);
		Если КонецМесяца(ДатаНачалаСписания) = КонецМесяца(ДатаОкончанияСписания) Тогда
			ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
			КоличествоМесяцев  = ДоляПоследнегоМесяца;
		Иначе
			ДоляТекущегоМесяца   = (РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1 + ПоправкаНаВисокосныйГодВНачалеПериода) / (День(КонецМесяца(ДатаНачалаСписания)) + ПоправкаНаВисокосныйГодВНачалеПериода);
			КоличествоМесяцевСеридины = 0;
			ТекущаяДата = ДобавитьМесяц(КонецМесяца(ДатаНачалаСписания), 1);
			Пока КонецМесяца(ДатаОкончанияСписания) >= ТекущаяДата Цикл
				КоличествоМесяцевСеридины = КоличествоМесяцевСеридины + 1;
				ТекущаяДата               = ДобавитьМесяц(ТекущаяДата, 1);
			КонецЦикла;
			КоличествоМесяцев = КоличествоМесяцевСеридины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
		КонецЕсли;
		
		СуммаСписания = ?(КоличествоМесяцев = 0, 0, Остаток * ДоляТекущегоМесяца / КоличествоМесяцев);
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоМесяцев;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = ДоляТекущегоМесяца;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Остаток > 0 Тогда
		Возврат Мин(СуммаСписания, Остаток);
	Иначе
		Возврат Макс(СуммаСписания, Остаток);
	КонецЕсли;
	
КонецФункции // СуммаСписанияЗаМесяц()

Процедура РасчетИСписаниеРБП(СтруктураШапкиДокумента, Отказ, ВидРБП, ВидУчета, мПроводки, ЗаписьРасчетаРБП) Экспорт
	
	мНачДата    = СтруктураШапкиДокумента.мНачДата;
	мКонДата    = СтруктураШапкиДокумента.мКонДата;
	мНачГраница = СтруктураШапкиДокумента.мНачГраница;
	мКонГраница = СтруктураШапкиДокумента.мКонГраница;
	Ссылка = СтруктураШапкиДокумента.Ссылка;
	
	ТабЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	ХарактерЗатрат = Новый СписокЗначений;
	ХарактерЗатрат.Добавить( Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);     // 20/23
	ХарактерЗатрат.Добавить( Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы); // 25
	ХарактерЗатрат.Добавить( Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);    // 26
	ХарактерЗатрат.Добавить( Перечисления.ХарактерЗатрат.БракВПроизводстве);           // 28
	ХарактерЗатрат.Добавить( Перечисления.ХарактерЗатрат.ИздержкиОбращения);           // 44
	ХарактерЗатрат.Добавить( Перечисления.ХарактерЗатрат.КоммерческиеРасходы);         // 44
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВидУчета = "БУ" Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("КонецМесяца", СтруктураШапкиДокумента.мКонГраница);
		Запрос.УстановитьПараметр("ВидРБП",      ВидРБП);
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
        Массив.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
		Запрос.УстановитьПараметр("Счет",        Массив);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Остаток,
		|	ХозрасчетныйОстатки.Счет КАК Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&КонецМесяца,
		|		Счет В ИЕРАРХИИ (&Счет),
		|		,
		|		Организация = &Организация
		|			И (Субконто1.ВидРБП В (&ВидРБП)
		|				ИЛИ Субконто2.ВидРБП В (&ВидРБП)
		|				ИЛИ Субконто3.ВидРБП В (&ВидРБП))) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Субконто3,
		|	ХозрасчетныйОстатки.Счет";
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Счет   = Выборка.Счет;
			РБП         = УстановитьРБП(Выборка);
			Если РБП = "" Тогда
				Продолжить;
			КонецЕсли;
			Если РБП.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
				Продолжить;
			КонецЕсли;      
			
			СчетБУ = РБП.СчетБУ;
			
			Если НЕ ЗначениеЗаполнено(РБП) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата начала списания !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата окончания списания !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетБУ) Тогда
				
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен реквизит ""Счет БУ"" !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				Продолжить;
			КонецЕсли;
			
			ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
			ДатаНачала = ?(РБП.ДатаНачалаСписания > мНачДата, РБП.ДатаНачалаСписания, мНачДата);
			СуммаСписания = СуммаСписанияЗаМесяц(СтруктураШапкиДокумента.мНачДата, СтруктураШапкиДокумента.мКонДата, РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.Остаток, ВспомогательныеДанныеРасчета);
			
			Если СуммаСписания = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетБУ);

			
			ПроводкаБУ = мПроводки.Добавить();
			ПроводкаБУ.Период       = СтруктураШапкиДокумента.Дата;
			ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаБУ.СчетДт       = СчетБУ;
						
			Если ПроизводственныеРасходы Тогда
				УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "Подразделения",        РБП.ПодразделениеОрганизации);
				УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "НоменклатурныеГруппы", РБП.НоменклатурнаяГруппа);
				УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "СтатьиЗатрат",         РБП.СтатьяЗатрат);
				УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "ОбъектыСтроительства", РБП.ОбъектСтроительства);
				УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "СпособыСтроительства", РБП.СпособСтроительства);
			Иначе
				УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, РБП.СубконтоБУ1);
				УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, РБП.СубконтоБУ2);
				УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, РБП.СубконтоБУ3);
			КонецЕсли;

			ПроводкаБУ.СчетКт       = Счет;
			УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 1, Выборка.Субконто1);
			УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 2, Выборка.Субконто2);
			УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 3, Выборка.Субконто3);
			
			ПроводкаБУ.Сумма        = СуммаСписания;
			ПроводкаБУ.Содержание   = "Списание РБП";
			ПроводкаБУ.НомерЖурнала = "";
			
			// Сформируем строку таблицы для отражения затрат по бух. учету.
			НоваяСтрока = ТабЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РБП);
			НоваяСтрока.СчетЗатрат   = СчетБУ;
			НоваяСтрока.СчетЗатратНУ = РБП.СчетНУ;
			НоваяСтрока.СуммаБух     = СуммаСписания;
			
			СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
			СтрокаЗаписьРасчетаРБП.ДатаНачала = РБП.ДатаНачалаСписания;
			СтрокаЗаписьРасчетаРБП.ДатаОкончания = РБП.ДатаОкончанияСписания;
			СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДней = ВспомогательныеДанныеРасчета.КоличествоМесяцевДней;
			СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДнейТекущегоПериода = ВспомогательныеДанныеРасчета.КоличествоМесяцевДнейТекущегоПериода;
			СтрокаЗаписьРасчетаРБП.СпособПризнанияРасходов = РБП.СпособПризнанияРасходов;
			СтрокаЗаписьРасчетаРБП.СчетУчета = Счет;
			СтрокаЗаписьРасчетаРБП.СчетСписания = СчетБУ;
			СтрокаЗаписьРасчетаРБП.Сумма = СуммаСписания;
			СтрокаЗаписьРасчетаРБП.Статья = РБП;
			СтрокаЗаписьРасчетаРБП.СуммаДоговора = РБП.Сумма;
			СтрокаЗаписьРасчетаРБП.НачОстаток = Выборка.Остаток;
			СтрокаЗаписьРасчетаРБП.КонОстаток = Выборка.Остаток - СуммаСписания;
				
		КонецЦикла;
		
		
		мПроводки.записать(Ложь);
	КонецЕсли;
	
	Если ВидУчета = "НУ" Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
		Запрос.УстановитьПараметр("ВидРБП",      ВидРБП);
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.РасходыБудущихПериодов);
		Запрос.УстановитьПараметр("Счет",        Массив);
		Запрос.УстановитьПараметр("СчетИсключение",ПланыСчетов.Налоговый.УбыткиПрошлыхЛет);
		
		//начало изменений Ожиганов А. 02.10.2017 71357 устранение разниц по РБП, которые возникают из-за расчета сумм списания по видам учета 
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	НалоговыйОстатки.Субконто1 КАК Субконто1,
		//|	НалоговыйОстатки.Субконто2 КАК Субконто2,
		//|	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК Остаток,
		//|	НалоговыйОстатки.Счет КАК Счет,
		//|	НалоговыйОстатки.ВидУчета КАК ВидУчета
		//|ИЗ
		//|	РегистрБухгалтерии.Налоговый.Остатки(
		//|		&КонецМесяца,
		//|		Счет В ИЕРАРХИИ (&Счет) И Не Счет В ИЕРАРХИИ (&СчетИсключение),
		//|		,
		//|		Организация = &Организация
		//|		    И (Субконто1.ВидРБП В (&ВидРБП)
		//|		        ИЛИ Субконто2.ВидРБП В (&ВидРБП)
		//|		        ИЛИ Субконто3.ВидРБП В (&ВидРБП))) КАК НалоговыйОстатки
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	НалоговыйОстатки.Субконто1,
		//|	НалоговыйОстатки.Субконто2,
		//|	НалоговыйОстатки.Счет,
		//|	НалоговыйОстатки.ВидУчета
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Счет,
		//|	Субконто1,
		//|	Субконто2,
		//|	ВидУчета";
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалоговыйОстатки.Субконто1 КАК Субконто1,
		|	НалоговыйОстатки.Субконто2 КАК Субконто2,
		|	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК Остаток,
		|	НалоговыйОстатки.Счет КАК Счет,
		|	СУММА(ВЫБОР
		|			КОГДА НалоговыйОстатки.ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)
		|				ТОГДА НалоговыйОстатки.СуммаОстатокДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОстатокНУ,
		|	СУММА(ВЫБОР
		|			КОГДА НалоговыйОстатки.ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ВР)
		|				ТОГДА НалоговыйОстатки.СуммаОстатокДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОстатокВР,
		|	СУММА(ВЫБОР
		|			КОГДА НалоговыйОстатки.ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ПР)
		|				ТОГДА НалоговыйОстатки.СуммаОстатокДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОстатокПР
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(
		|			&КонецМесяца,
		|			Счет В ИЕРАРХИИ (&Счет)
		|				И НЕ Счет В ИЕРАРХИИ (&СчетИсключение),
		|			,
		|			Организация = &Организация
		|				И (Субконто1.ВидРБП В (&ВидРБП)
		|					ИЛИ Субконто2.ВидРБП В (&ВидРБП)
		|					ИЛИ Субконто3.ВидРБП В (&ВидРБП))) КАК НалоговыйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОстатки.Субконто1,
		|	НалоговыйОстатки.Субконто2,
		|	НалоговыйОстатки.Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет,
		|	Субконто1,
		|	Субконто2";
		
		ТаблОстатков = Новый ТаблицаЗначений;
		ТаблОстатков.Колонки.Добавить("Остаток",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ТаблОстатков.Колонки.Добавить("СуммаСписания",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ТаблОстатков.Колонки.Добавить("ВидУчета",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУчетаПоПБУ18"));
		ТаблОстатков.Колонки.Добавить("Субконто1");
		ТаблОстатков.Колонки.Добавить("Субконто2");
		//конец изменений 	
		
		Результат = Запрос.Выполнить();
		
		//начало изменений Ожиганов А. 02.10.2017 71357 устранение разниц по РБП, которые возникают из-за расчета сумм списания по видам учета 
		//Выборка = Результат.Выбрать();
		ВыборкаРБП = Результат.Выбрать();
		//Пока Выборка.Следующий() Цикл
		Пока ВыборкаРБП.Следующий() Цикл
		//конец изменений 
		
			//начало изменений Ожиганов А. 02.10.2017 71357 устранение разниц по РБП, которые возникают из-за расчета сумм списания по видам учета 
			//РБП         = УстановитьРБП(Выборка);
			РБП         = УстановитьРБП(ВыборкаРБП);
			//конец изменений 
			Если РБП = "" Тогда
				Продолжить;
			КонецЕсли;
			Если РБП.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
				Продолжить;
			КонецЕсли;      
			
			//начало изменений Ожиганов А. 02.10.2017 71357 устранение разниц по РБП, которые возникают из-за расчета сумм списания по видам учета 
			//Счет        = Выборка.Счет;
			Счет        = ВыборкаРБП.Счет;
			//конец изменений 
			СчетНУ      = РБП.СчетНУ;
			//начало изменений Ожиганов А. 02.10.2017 71357 устранение разниц по РБП, которые возникают из-за расчета сумм списания по видам учета 
			//ВидУчета    = Выборка.ВидУчета;
			//конец изменений 
			
			Если НЕ ЗначениеЗаполнено(РБП) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата начала списания !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата окончания списания !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				Продолжить;
			КонецЕсли;
			
			
			Если НЕ ЗначениеЗаполнено(СчетНУ) И Не СтруктураШапкиДокумента.мПрименениеУСН Тогда
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен реквизит ""Счет НУ "" !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				Продолжить;
			КонецЕсли;
			
			ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
			ДатаНачала = ?(РБП.ДатаНачалаСписания > мНачДата, РБП.ДатаНачалаСписания, мНачДата);
			//начало изменений Ожиганов А. 02.10.2017 71357 устранение разниц по РБП, которые возникают из-за расчета сумм списания по видам учета 
			ТаблОстатков.Очистить();
			НС = ТаблОстатков.Добавить();
			НС.Остаток 		 = ВыборкаРБП.ОстатокНУ;
			НС.СуммаСписания = 0;
			НС.ВидУчета       = Перечисления.ВидыУчетаПоПБУ18.НУ;
			НС.Субконто1      = ВыборкаРБП.Субконто1;
			НС.Субконто2      = ВыборкаРБП.Субконто2;
			
			НС = ТаблОстатков.Добавить();
			НС.Остаток 		 = ВыборкаРБП.ОстатокПР;
			НС.СуммаСписания = 0;
			НС.ВидУчета      = Перечисления.ВидыУчетаПоПБУ18.ПР;
			НС.Субконто1      = ВыборкаРБП.Субконто1;
			НС.Субконто2      = ВыборкаРБП.Субконто2;
			
			
			НС = ТаблОстатков.Добавить();
			НС.Остаток 		 = ВыборкаРБП.ОстатокВР;
			НС.СуммаСписания = 0;
			НС.ВидУчета      = Перечисления.ВидыУчетаПоПБУ18.ВР;
			НС.Субконто1      = ВыборкаРБП.Субконто1;
			НС.Субконто2      = ВыборкаРБП.Субконто2;
			
			
			СуммаСписанияВсего = Окр(СуммаСписанияЗаМесяц(СтруктураШапкиДокумента.мНачДата, СтруктураШапкиДокумента.мКонДата, РБП, ДатаНачала, РБП.ДатаОкончанияСписания, ВыборкаРБП.Остаток, ВспомогательныеДанныеРасчета),2);
			//просчитаем сумму списания по видам учета 
			Для Каждого ТекСтрока Из ТаблОстатков Цикл
				ТекСтрока.СуммаСписания  = Окр(СуммаСписанияЗаМесяц(СтруктураШапкиДокумента.мНачДата, СтруктураШапкиДокумента.мКонДата, РБП, ДатаНачала, РБП.ДатаОкончанияСписания, ТекСтрока.Остаток, ВспомогательныеДанныеРасчета),2);
			КонецЦикла;	
			//конец изменений 
			
			Если СуммаСписанияВсего <> ТаблОстатков.Итог("СуммаСписания") Тогда
				 Разница = СуммаСписанияВсего - ТаблОстатков.Итог("СуммаСписания");
				 Если Разница <> 0 Тогда
					 для каждого ТекСтрока Из ТаблОстатков Цикл
						 Если ТекСтрока.СуммаСписания <> 0 Тогда
							 //начало изменений Ожиганов А. 03.10.2017 добавим проверку на остаток
							 Если ТекСтрока.Остаток < 0 Тогда
								 Если ТекСтрока.Остаток  - ТекСтрока.СуммаСписания + Разница <=0 Тогда
									 ТекСтрока.СуммаСписания =  ТекСтрока.СуммаСписания + Разница;
									 Разница = 0;
									 прервать
						 		 КонецЕсли; 
							 ИначеЕсли ТекСтрока.Остаток > 0 Тогда
								 Если ТекСтрока.Остаток  - ТекСтрока.СуммаСписания + Разница >=0 Тогда 
									 ТекСтрока.СуммаСписания =  ТекСтрока.СуммаСписания + Разница;
									 Разница = 0;
									 прервать;
								 КонецЕсли; 
							 КонецЕсли; 
						 КонецЕсли; 
					 КонецЦикла; 
					 Если Разница <> 0 Тогда
						 ОбщегоНазначения.Сообщение("Не удалось распределить разницу по НУ для "+ВыборкаРБП.Субконто1);
					 КонецЕсли;	 
				 КонецЕсли; 
			КонецЕсли;	
			
			для каждого Выборка  Из ТаблОстатков Цикл
				 СуммаСписания = Выборка.СуммаСписания;
				 ВидУчета 		= Выборка.ВидУчета;
			//конец изменений 
			
			Если СуммаСписания = 0 Тогда
				Продолжить;
			КонецЕсли;
	    	ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетНУ, "Налоговый");
			
			ПроводкаНУ = мПроводки.Добавить();
			ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНУ;
			Если ПроизводственныеРасходыНУ Тогда
				УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Подразделения",        РБП.ПодразделениеОрганизации);
				УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НоменклатурныеГруппы", РБП.НоменклатурнаяГруппа);
				УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат",         РБП.СтатьяЗатрат);
				УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ОбъектыСтроительства", РБП.ОбъектСтроительства);
				УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СпособыСтроительства", РБП.СпособСтроительства);
			Иначе
				УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, РБП.СубконтоНУ1);
				УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, РБП.СубконтоНУ2);
				УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, РБП.СубконтоНУ3);
			КонецЕсли;
			
			ПроводкаНУ.СчетКт       = Счет;
			ПроводкаНУ.СубконтоКт.РасходыБудущихПериодов = РБП;
			УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Выборка.Субконто2);
			ПроводкаНУ.ВидУчетаКт     = ВидУчета;
			
			ПроводкаНУ.Сумма        = СуммаСписания;
			ПроводкаНУ.Содержание   = "Списание РБП";
			ПроводкаНУ.НомерЖурнала = "";
			
			Если ЗначениеЗаполнено(РБП.СтатьяЗатрат) Тогда
				ПроводкаНУ.ВидУчетаДТ = ?(РБП.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
			ИначеЕсли ТипЗнч(РБП.СубконтоБУ1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ПроводкаНУ.ВидУчетаДТ = ?(РБП.СубконтоБУ1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
			ИначеЕсли ТипЗнч(РБП.СубконтоБУ2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ПроводкаНУ.ВидУчетаДТ = ?(РБП.СубконтоБУ2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
			ИначеЕсли ТипЗнч(РБП.СубконтоБУ3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ПроводкаНУ.ВидУчетаДТ = ?(РБП.СубконтоБУ3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
			ИначеЕсли ТипЗнч(РБП.СубконтоБУ1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ПроводкаНУ.ВидУчетаДТ  = ?(НЕ РБП.СубконтоБУ1.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
			ИначеЕсли ТипЗнч(РБП.СубконтоБУ2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ПроводкаНУ.ВидУчетаДТ  = ?(НЕ РБП.СубконтоБУ2.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
			ИначеЕсли ТипЗнч(РБП.СубконтоБУ3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ПроводкаНУ.ВидУчетаДТ  = ?(НЕ РБП.СубконтоБУ3.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
			Иначе
				ПроводкаНУ.ВидУчетаДТ     = ВидУчета;
			КонецЕсли;
			
			
			НоваяСтрока = ТабЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РБП);
			
			НоваяСтрока.СчетЗатрат = РБП.СчетБУ;
			НоваяСтрока.СчетЗатратНУ = СчетНУ;
			
			Если ВидУчета = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
				НоваяСтрока.СуммаБух     = СуммаСписания;
				НоваяСтрока.СуммаНал     = СуммаСписания;
			ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				НоваяСтрока.ПостояннаяРазница = СуммаСписания;
			Иначе
				НоваяСтрока.ВременнаяРазница = СуммаСписания;
			КонецЕсли;	
			
			СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
			СтрокаЗаписьРасчетаРБП.ДатаНачала = РБП.ДатаНачалаСписания;
			СтрокаЗаписьРасчетаРБП.ДатаОкончания = РБП.ДатаОкончанияСписания;
			СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДней = ВспомогательныеДанныеРасчета.КоличествоМесяцевДней;
			СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДнейТекущегоПериода = ВспомогательныеДанныеРасчета.КоличествоМесяцевДнейТекущегоПериода;
			СтрокаЗаписьРасчетаРБП.СпособПризнанияРасходов = РБП.СпособПризнанияРасходов;
			СтрокаЗаписьРасчетаРБП.СчетУчета = Счет;
			СтрокаЗаписьРасчетаРБП.СчетСписания = СчетНУ;
			СтрокаЗаписьРасчетаРБП.Сумма = СуммаСписания;
			СтрокаЗаписьРасчетаРБП.Статья = РБП;
			СтрокаЗаписьРасчетаРБП.СуммаДоговора = РБП.Сумма;
			СтрокаЗаписьРасчетаРБП.НачОстаток = Выборка.Остаток;
			СтрокаЗаписьРасчетаРБП.КонОстаток = Выборка.Остаток - СуммаСписания;
			СтрокаЗаписьРасчетаРБП.ВидУчета = ВидУчета;
			
		//начало изменений Ожиганов А. 02.10.2017 71357 устранение разниц по РБП, которые возникают из-за расчета сумм списания по видам учета 
		КонецЦикла;
		//конец изменений 
		КонецЦикла;
		
		
		мПроводки.записать(Ложь);		
	КонецЕсли;
	
	Если ТабЗатрат.Количество() > 0 Тогда
		
		ВремСтруктураШапкиДокумента = Новый Структура;
		ВремСтруктураШапкиДокумента.Вставить("Ссылка", СтруктураШапкиДокумента.Ссылка);
		ВремСтруктураШапкиДокумента.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		ВремСтруктураШапкиДокумента.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		
		Если ВидУчета = "БУ" Тогда
			ВремСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Истина);
			
			Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") Тогда
				ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
			Иначе
				ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
			КонецЕсли;
			
			ВремСтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", Ложь); // отключим формирование временных разниц
		Иначе
			ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
		КонецЕсли;
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			ВремСтруктураШапкиДокумента,
			ТабЗатрат
		);
	КонецЕсли;
	
	БухгалтерскийУчет.ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	ЗаписьРасчетаРБП,
	РегистрыСведений.РасчетСписанияРБП,
	"Организация,ПериодРасчета,Активность,Регистратор,Статья,СчетУчета,СчетСписания,СпособПризнанияРасходов,ДатаНачала,ДатаОкончания,ВидУчета,КоличествоМесяцевДнейТекущегоПериода,КоличествоМесяцевДней,СуммаДоговора",
	"Сумма,НачОстаток,КонОстаток");
	
КонецПроцедуры

Функция УстановитьРБП(Выборка)
	
	Если ТипЗнч(Выборка.Субконто1)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто1;
	ИначеЕсли ТипЗнч(Выборка.Субконто2)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто2;
	ИначеЕсли ТипЗнч(Выборка.Субконто3)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто3;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ ПОЛЬЗОВАТЕЛЯ (ОТСУТСТВУЮТ НА СЕРВЕРЕ И ВО ВНЕШНЕМ СОЕДИНЕНИИ)



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЗЫВАЕМЫЕ ИЗ ПУНКТОВ МЕНЮ

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный")
	   И ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Налоговый") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если Счет.ЗапретитьИспользоватьВПроводках Тогда

		Если Сообщать Тогда
			#Если Клиент Тогда
				Предупреждение("Счет " + СокрЛП(Счет)+" """ + Счет.Наименование + """ нельзя использовать в проводках.");
			#КонецЕсли
		КонецЕсли;

		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()

#Если Клиент Тогда

// Обработка выбора первого субконто и открытие справочника владельца Организации
// него, если он существует.
//
Процедура ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация) Экспорт

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);

	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);

	КонецЕсли;

	Если Не СтандартнаяОбработка Тогда 

		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры

// Обработка изменения первого субконто в документах.
//
// Параметры:
//  Элемент  - измененный элемент управления.
//  ДокОбъект - документ, в котором произошло изменение.
//  СписокСубконто - список имен реквизитов субконто, связанных с измененным значением.
//  
Процедура ОбработатьИзменениеСубконто(Элемент, ДокОбъект, СписокСубконто) Экспорт

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		Для каждого ТекСубконто из СписокСубконто Цикл
			
			ЗначениеСубконто = ДокОбъект[ТекСубконто.Значение];
			Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					Если НЕ (ЗначениеСубконто.Владелец = Элемент.Значение) Тогда
						ДокОбъект[ТекСубконто.Значение] = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

Процедура ОткрытьЖурналПроводок(Ссылка, Регистр = "БУ") Экспорт

	Если Регистр = "БУ" Тогда

		ФормаСписка = РегистрыБухгалтерии.Хозрасчетный.ПолучитьФормуСписка();
		
		Если ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			// Сбрасываем предыдущие отборы
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Сбросить();
			
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Значение      = Ссылка;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Использование = Истина;
			
			ФормаСписка.ЭлементыФормы.Список.НастройкаОтбора["Регистратор"].Доступность = Ложь;
			
			ФормаСписка.Открыть();
			
		КонецЕсли;

	Иначе

		//Организация = Ссылка.Организация;

		ФормаСписка = РегистрыБухгалтерии.Налоговый.ПолучитьФормуСписка();

		Если ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			// Сбрасываем предыдущие отборы
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Сбросить();
			
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Значение      = Ссылка;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Использование = Истина;
			
			ФормаСписка.ЭлементыФормы.Список.НастройкаОтбора["Регистратор"].Доступность = Ложь;
			
			ФормаСписка.Открыть();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УНИВЕРСАЛИЗАЦИИ ПРОМЖУТОЧНЫХ ДАННЫХ

#Если Клиент тогда

// Процедура отрабатывает установку отбора по владельцу-организации 
// для первого субконто.
//
//  Также процедура устанавливает отборы в формах выбора партий номенклатуры, 
// документов расчетов с контрагентами и партий материалов в эксплуатации.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров = Неопределено, ОграничениеТипаЭлемента = Неопределено) Экспорт
	
	Если не ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") тогда
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЭлемента =Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() >0 тогда
		ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			Если СписокПараметров.Свойство("Контрагент") Тогда
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 

	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		Если не Элемент.ОграничениеТипа.Типы().Количество()=0 Тогда
			ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		Иначе
			ОграничениеТипаЭлемента = Элемент.ТипЗначения;
		КонецЕсли; 
		
 		СтандартнаяОбработка = Ложь;

		СтруктураПараметров  = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода,СчетДляОпределенияОстатков, СторонаСчета");

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда

			ЗаполнитьЗначенияСвойств(СтруктураПараметров,СписокПараметров); 
			СтруктураПараметров.Вставить("Организация", Организация);

			Если СписокПараметров.Свойство("Дата") Тогда
				Если ТипЗнч(СписокПараметров.Дата) = Тип("Дата") Тогда
					СтруктураПараметров.Вставить("КонецПериода", СписокПараметров.Дата - 1);
				КонецЕсли;
			КонецЕсли;

			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СписокПараметров.СчетУчета);
			КонецЕсли;

			Если СписокПараметров.Свойство("СторонаПроводки") Тогда
				СтруктураПараметров.Вставить("СторонаСчета", ?(СписокПараметров.СторонаПроводки = "Дт", 1, 0));
			КонецЕсли;
			
			Если СписокПараметров.Свойство("НачалоПериода") Тогда
				СтруктураПараметров.Вставить("НачалоПериода", СписокПараметров.НачалоПериода);
			КонецЕсли;

		КонецЕсли;

		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипаЭлемента);

		Возврат;

	КонецЕсли;

	Если Не СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()
#КонецЕсли
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Выполняет в табличном поле приведение значений субконто к типу, соответствующему счету
// сведения о счете передаются через параметр СведенияОСчете
// используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
//
// Параметры:
//	ТабличноеПоле 	- табличное поле 
//  ДтКт 			- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 					для колонок табличного поля поддерживаются имена 
//					типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 	- структура
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура ПривестиЗначениеСубконто(ТабличноеПоле, ДтКт, СведенияОСчете) Экспорт
	Для СчетчикСубконто = 1 По 3 Цикл
		Если СведенияОСчете.КоличествоСубконто >= СчетчикСубконто Тогда
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = СведенияОСчете["ТипСубконто"+СчетчикСубконто].ПривестиЗначение(ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто]);
		Иначе
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры   // ПривестиЗначениеСубконто

// Назначает видимость ячейкам строки табличного поля, соответствующим субконто
// в зависимлсти от счета. Сведения о счете передаются через параметр СведенияОСчете
// Используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
// при выводе строки
//
// Параметры:
//	ОформлениеСтроки 	- оформление строки
//  ДтКт 				- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 						для колонок табличного поля поддерживаются имена 
//						типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 		- структура
//					  	КоличествоСубконто - число
//                    	ТипСубконто1 - описание типа
//                    	ТипСубконто2 - описание типа
//                    	ТипСубконто3 - описание типа
//					    ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура НазначитьВидимостьСубконто(ОформлениеСтроки, ДтКт, СведенияОСчете, СведенияОСтатьеЗатрат = Неопределено) Экспорт
	Для СчетчикСубконто = 1 По 3 Цикл
		ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].Видимость = СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
		//ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].ТолькоПросмотр = не СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
	КонецЦикла;
	Если СведенияОСтатьеЗатрат <> Неопределено И ОформлениеСтроки.Ячейки.Найти("СпособРаспределенияЗатрат") <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.СпособРаспределенияЗатрат.Видимость = СведенияОСтатьеЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	КонецЕсли;
КонецПроцедуры

// Функция формирует список счетов (список значений), включая субсчета, входящие в иерархию.
//
// Параметры
//  ПланСчетов      - имя плана счетов
//  СчетаСтрокой    - строка, содержащая список кодов счетов, разделенных запятыми
//  ИсключитьГруппы - булево, исключать из массива счетов счета-группы или нет
//	СообщатьОбОтсутствииСчета - булево, выдавать ли сообщение, если счет с таким кодом не найден
//
// Возвращаемое значение
//  Список значений, содержащий счета выбранного плана счетов
//
Функция ПолучитьМассивСчетов(ИмяПланаСчетов, Знач СчетаСтрокой = "", ИсключитьГруппы = Ложь, СообщатьОбОтсутствииСчета = Истина) Экспорт

	МассивСчетов = Новый Массив;
	
	// Преобразуем переданную строку в массив ссылок на план счетов
	СчетаСтрокой = СтрЗаменить(СчетаСтрокой, " ", "");
	Пока Не ПустаяСтрока(СчетаСтрокой) Цикл

		// Определим код очередного счета
		Поз = Найти(СчетаСтрокой, ",");
		Если Поз = 0 Тогда
			Код = СчетаСтрокой;
			СчетаСтрокой = "";
		Иначе
			Код = Лев(СчетаСтрокой, Поз - 1);
			СчетаСтрокой = Сред(СчетаСтрокой, Поз + 1);
		КонецЕсли;

		// Определим ссылку на счет по коду
		Счет = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду(Код);
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			Если СообщатьОбОтсутствииСчета Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не найден счет с кодом """ + Код + """ (план счетов - " + ИмяПланаСчетов + ")");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		МассивСчетов.Добавить(Счет);

	КонецЦикла;

	// Подготовим текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.%ПланСчетов% КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетов) И %ВключатьГруппы%
	|";
	
	Если ИсключитьГруппы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВключатьГруппы%", 
		"ПланСчетов.Ссылка НЕ В (
		| 	ВЫБРАТЬ
		|		ПланСчетов.Родитель
		|	ИЗ
		|		ПланСчетов.%ПланСчетов% КАК ПланСчетов
		|	ГДЕ
		|		ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетов)
		|)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВключатьГруппы%", "Истина");
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПланСчетов%", ИмяПланаСчетов);
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);

	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));

	Возврат СписокСчетов;

КонецФункции //ПолучитьМассивСчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕЧАТИ ОТЧЕТОВ ПО РЕГЛАМЕНТНЫМ ОПЕРАЦИЯМ

Процедура ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, ТаблицаДвижений, ВспомогательныйРегистр, СтрокаГруппировки,СтрокаСуммирования) Экспорт
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	ВспомогательныйРасчет = ВспомогательныйРегистр.СоздатьНаборЗаписей();
	ВспомогательныйРасчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	ВспомогательныйРасчет.Прочитать();
	ВспомогательныйРасчет.Загрузить(ТаблицаДвижений);
	ВспомогательныйРасчет.Записать();
КонецПроцедуры

Процедура ПечатьСправкиРасчета(Объект, СтруктураШапкиДокумента, ВариантОтчета = 1) Экспорт
	
	СправкаРасчет = Объект.Создать();
	ФормаОбъекта = СправкаРасчет.ПолучитьФорму();
	СправкаРасчет.ИспользоватьИнуюНастройку = Истина;
	СправкаРасчет.Организация = СтруктураШапкиДокумента.Организация;
	СправкаРасчет.ПериодРегистрации = КонецМесяца(СтруктураШапкиДокумента.Дата);
	СправкаРасчет.ВариантОтчета = ВариантОтчета;
	ФормаОбъекта.Открыть();
КонецПроцедуры

Функция УпорядочитьСубконтоДляВыгрузкиНабораЗаписейРегистраБухгалтерии(ТЗНабораЗаписей) Экспорт
		Для каждого Строка из ТЗНабораЗаписей Цикл
		//По дт
		ВидыСубконто = Новый Массив(3);
		Субконто 	 = Новый Массив(3);
		Счет = Строка.СчетДт;
		Для каждого ВидСубконто из Счет.ВидыСубконто Цикл
			ВидыСубконто[ВидСубконто.номерСтроки-1] = ВидСубконто.ВидСубконто;
			Если ВидСубконто.ВидСубконто = Строка["ВидСубконтоДт1"] тогда
				Субконто[ВидСубконто.номерСтроки-1] = Строка["СубконтоДт1"];
			ИначеЕсли ВидСубконто.ВидСубконто = Строка["ВидСубконтоДт2"] тогда
				Субконто[ВидСубконто.номерСтроки-1] = Строка["СубконтоДт2"];
			ИначеЕсли ВидСубконто.ВидСубконто = Строка["ВидСубконтоДт3"] тогда
				Субконто[ВидСубконто.номерСтроки-1] = Строка["СубконтоДт3"];
			КонецЕсли;
		КонецЦикла;
		Для А=1 по 3 Цикл
			Строка["ВидСубконтоДт"+А] = ВидыСубконто[А-1];
			Строка["СубконтоДт"+А]	  = Субконто[А-1];
		КонецЦикла;
		//По кт
		ВидыСубконто = Новый Массив(3);
		Субконто 	 = Новый Массив(3);
		Счет = Строка.СчетКт;
		Для каждого ВидСубконто из Счет.ВидыСубконто Цикл
			ВидыСубконто[ВидСубконто.номерСтроки-1] = ВидСубконто.ВидСубконто;
			Если ВидСубконто.ВидСубконто = Строка["ВидСубконтоКт1"] тогда
				Субконто[ВидСубконто.номерСтроки-1] = Строка["СубконтоКт1"];
			ИначеЕсли ВидСубконто.ВидСубконто = Строка["ВидСубконтоКт2"] тогда
				Субконто[ВидСубконто.номерСтроки-1] = Строка["СубконтоКт2"];
			ИначеЕсли ВидСубконто.ВидСубконто = Строка["ВидСубконтоКт3"] тогда
				Субконто[ВидСубконто.номерСтроки-1] = Строка["СубконтоКт3"];
			КонецЕсли;
		КонецЦикла;
		Для А=1 по 3 Цикл
			Строка["ВидСубконтоКт"+А] = ВидыСубконто[А-1];
			Строка["СубконтоКт"+А]	  = Субконто[А-1];
		КонецЦикла;
	КонецЦикла;
    Возврат ТЗНабораЗаписей;
КонецФункции

Процедура УстановитьСубконтоПоВидуСубконто(Счет, Субконто, ВидСубконто, ЗначениеСубконто) Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Счет.ВидыСубконто.Найти(ВидСубконто) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубконто + ">");
	КонецЕсли;

КонецПроцедуры // БухгалтерскийУчет.УстановитьСубконто()

Процедура ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(НаборЗаписей,ТаблицаДополнений) Экспорт
	
	ОтрабатыватьСубконто = Метаданные.РегистрыБухгалтерии.Содержит(НаборЗаписей.Метаданные());
	
	Для каждого Строка из ТаблицаДополнений Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		Для каждого Колонка из ТаблицаДополнений.Колонки Цикл
			Если Колонка.Имя = "МоментВремени" или Колонка.Имя = "НомерСтроки" тогда
				Продолжить;
			КонецЕсли;
			Если ОтрабатыватьСубконто и Найти(Колонка.Имя,"Субконто")>0 тогда
				Если Найти(Колонка.Имя,"ВидСубконто")>0 тогда
					Если НЕ ЗначениеЗаполнено(Строка[Колонка.Имя]) тогда
						Продолжить;
					КонецЕсли;
					НомерСубконто  = Прав(Колонка.Имя,1);
					Если Найти(Колонка.Имя,"Дт")+Найти(Колонка.Имя,"Кт")>0 тогда
						СторонаСчета   = Лев(Прав(Колонка.Имя,3),2);
					Иначе
						СторонаСчета   = "";
					Конецесли;
					УстановитьСубконтоПоВидуСубконто(Строка["Счет"+СторонаСчета],НоваяЗапись["Субконто"+СторонаСчета],Строка[Колонка.Имя],Строка["Субконто"+СторонаСчета+НомерСубконто]);
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Попытка 
					НоваяЗапись[Колонка.Имя] =  Строка[Колонка.Имя];
				Исключение
					//Не смогли заполнить реквизит... Видно его нет.
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

// Функция возвращает количество для записи в проводку
// Если на счете не ведется количественный учет, то возвращается 0
//
// Параметры:
// 		Счет - счет проводки
//      Количество - количество для проводки
//		
// Возврат:
//		Количество для записи в проводку
//
Функция КоличествоВПроводку(Счет, Количество) Экспорт
	
	Если Не Счет.Пустая() 
	   И Счет.Количественный Тогда
		Возврат Количество;
		
	Иначе
		Возврат 0;
		
	КонецЕсли;

КонецФункции // КоличествоВПроводку()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Эта функция возвращает информацию о статье затарат как субконто счета по данным строки табличного поля
// Если в соответствии не найдена информация о статье - она подготавливается и 
// помещается в соответсвие
// Применяется для работы с формами в которых активно требуется получать 
// информащцию о статьях, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОСтатьяхЗатрат - соответсвие у котрого в качестве ключа - СправочникСсылка, а 
//  				  	в качестве значения - структура из одного элемента 
//						ХарактерЗатрат типа ПеречислениеСсылка.ХарактерЗатрат
//
//	ДанныеСтроки - данные строки
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОСтатьеЗатратПоСтроке(СведенияОСтатьяхЗатрат, ДтКт, ДанныеСтроки) Экспорт
	ТипСтатьяЗатратСсылка = Тип("СправочникСсылка.СтатьиЗатрат");
	Для СчетчикСубконто = 1 По 3 Цикл
		Если ТипЗнч(ДанныеСтроки["Субконто"+ДтКт+СчетчикСубконто]) = ТипСтатьяЗатратСсылка Тогда
			Возврат ПолучитьСведенияОСтатьеЗатрат(СведенияОСтатьяхЗатрат, ДанныеСтроки["Субконто"+ДтКт+СчетчикСубконто]);
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// локальня функция для использования в ПолучитьСведенияОСтатьеЗатратПоСтроке
Функция ПолучитьСведенияОСтатьеЗатрат(СведенияОСтатьяхЗатрат, СтатьяЗатрат) Экспорт
	СведенияОСтатьеЗатрат = СведенияОСтатьяхЗатрат[СтатьяЗатрат];
	Если СведенияОСтатьеЗатрат = Неопределено Тогда
		СведенияОСтатьеЗатрат = Новый Структура("ХарактерЗатрат");
		СведенияОСтатьеЗатрат.ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
		СведенияОСтатьяхЗатрат[СтатьяЗатрат] = СведенияОСтатьеЗатрат;
	КонецЕсли;
	Возврат СведенияОСтатьеЗатрат;
КонецФункции

// Процедура устанавливает субконто на счете. Если такое субконто не счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - вид субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура ЗаполнитьСубконто(Проводка, СтрокаДокумента, СубконтоДт1 = Неопределено, СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, СубконтоКт3 = Неопределено) Экспорт
    СтруктураПараметров = новый Структура("КэшПоВидамСубконто",новый Соответствие());
	// Заполняем дебет:
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				Если ЗначениеЗаполнено(СтрокаДокумента.Склад) Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			КонецЕсли;

			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СубконтоДт1, СубконтоДт2, СубконтоДт3,,СтруктураПараметров);

		КонецЦикла;

	КонецЕсли;

	// Заполняем кредит
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);
				ИначеЕсли ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт1) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт1);
				ИначеЕсли ТипЗнч(СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт2) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт2);
				ИначеЕсли ТипЗнч(СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт3) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт3);
				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			КонецЕсли;

			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СубконтоКт1, СубконтоКт2, СубконтоКт3,,СтруктураПараметров);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСубконто()

//Процедура предназначена для сворачивания набора записей регистра бухгалтерии "Хозрасчетный":
//1) Формирует исходные данные для сворачивания:  
//  	список колонок для группировки и для суммирования
//2) Вызывает универсальную процедуру сворачивания набора записей
//Параметры: НаборЗаписейРегистраБухгалтерии, тип - набор записей регистров бухгалтерии Хозрасчетный
Процедура СвернутьНаборЗаписейРегистраБухгалтерии(НаборЗаписейРегистраБухгалтерии) Экспорт
	
	//колонки таблицы значений, которые будут суммироваться
    СтрокаСуммирование = "Сумма, КоличествоДт, КоличествоКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт";
    //колонки таблицы значений, по которым будет выполняться группировка
	СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
		"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
		"Содержание, НомерЖурнала, СписаниеПартий, ДатаЗаписи, "+
		"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
		"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
		"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
		"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
		"ВалютаДт, ВалютаКт, НДСПродукции";
	
	ВестиРеглУчетРасчетовСПерсоналомСводно = глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
	
	МассивСчетовРасчетовСПерсоналом = Новый Массив;
	// Если способ ведения расчетов с персоналом - сводно,
	// то перед сворачиванием могут потребоваться дополнительные действия по очистке аналитики в проводках
	Если ВестиРеглУчетРасчетовСПерсоналомСводно Тогда
		// Подготовка массива счетов учета расчетов с персоналом
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
		МассивСчетовРасчетовСПерсоналом.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);
	КонецЕсли;
	
	ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(НаборЗаписейРегистраБухгалтерии,
								СтрокаГруппировка, СтрокаСуммирование,
								ВестиРеглУчетРасчетовСПерсоналомСводно, МассивСчетовРасчетовСПерсоналом);
	
КонецПроцедуры



