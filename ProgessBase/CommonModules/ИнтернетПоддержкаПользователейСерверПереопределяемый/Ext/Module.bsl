
// Переопределяет наличие регламентированной отчетности в данной конфигураци.
//
// Параметры:
//	Наличие - Булево - Истина, если есть регламентированная отчетность, Ложь - иначе. (По умолчанию Истина)
//
Процедура НаличиеРегОтчетности(Наличие) Экспорт
	
	Наличие = Истина;
	
КонецПроцедуры

// Переопределяет условное имя конфигурации, необходимо только для регламентированной отчетности.
//
// Параметры:
// 	УсловноеИмяКонфигурации - Строка - условное имя конфигурации.
//
Процедура ПолучитьУсловноеИмяКонфигурации(УсловноеИмяКонфигурации) Экспорт
	
	УсловноеИмяКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
КонецПроцедуры	

// Переопределяет версию обработки "Обновление конфигурации".
//
// Параметры:
//	Версия - Строка - версия обработки.
//
// Пример для БП:
//	Версия = Обработки.ОбновлениеКонфигурации.Создать().Метаданные().Комментарий;
//
Процедура ПолучитьВерсиюОбработкиОбновленияКонфигурации(Версия) Экспорт
	
	Версия = Обработки.ОбновлениеКонфигурации.Создать().Метаданные().Комментарий;
	
КонецПроцедуры

// Процедура получает таблицу значений регламентированной отчетности.
//
// Параметры:
//	ТаблицаРезультатаЗапроса - ТаблицаЗначений с колонками:
//		ВерсияОтчета - Строка - версия внешнего отчета.
//		НаименованияОтчета - Строка - источник отчета.
//		Наименование - Строка - наименование отчета.
//
Процедура ПолучитьРегламентированныеОтчеты(ТаблицаРезультатаЗапроса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	РегламентированныеОтчеты.ВнешнийОтчетВерсия КАК ВерсияОтчета,
		|	РегламентированныеОтчеты.ИсточникОтчета КАК НаименованияОтчета,
		|	РегламентированныеОтчеты.Наименование как Наименование
		|ИЗ
		|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		|ГДЕ
		|	РегламентированныеОтчеты.ПометкаУдаления = &ПометкаУдаления
		|	И РегламентированныеОтчеты.НеПоказыватьВСписке = &НеПоказыватьВСписке
		|	И РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ВнешнийОтчетИспользовать";
	
	Запрос.УстановитьПараметр("ПометкаУдаления",			Ложь);
	Запрос.УстановитьПараметр("НеПоказыватьВСписке",		Ложь);
	Запрос.УстановитьПараметр("ВнешнийОтчетИспользовать",	Истина);
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЭЛЕКТРОННЫМ ДОКУМЕНТООБОРОТОМ

// Определяет необходимость выполнения расшифровки контрольного маркера на
// сервере 1С:Предприятия
//
// Параметры:
// ВыполнятьНаСервере (Булево) - выходной параметр: Истина - выполнять
//	на сервере, Ложь - в противном случае. Значение по умолчанию - Истина
//
Процедура ВыполнятьАвторизациюСертификатаНаСервере(ВыполнятьНаСервере) Экспорт
	
	ВыполнятьНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
	
КонецПроцедуры

// Процедура полцчения пароля к закрытому ключу ЭЦП
//
// Параметры
//	СертификатЭЦП - СправочникСсылкаСертификатЭЦП - ссылка сертификата ЭЦП
//	ПарольДоступаЭЦП - Строка - пароль доступа
//
Процедура ОпределитьСохраненныйПарольСертификатаЭЦП(СертификатЭЦП, ПарольДоступаЭЦП) Экспорт
	
	Если СертификатЭЦП.ЗапомнитьПарольКСертификату Тогда
		ПарольДоступаЭЦП = СертификатЭЦП.ПарольПользователя;
	КонецЕсли;
	
КонецПроцедуры

// Процедура рашифровки зашифрованного маркера, полученного с сервера на основе выбранного сертификата
//
// Параметры
//	ЗашифрованныеДвоичныеДанные - зашифрованные двоичные данные, полученные с сервера
//	СертификатЭЦП - выбранный сертификат, при помощи которого было выполнено шифрование
//	МаркерИдентификации - возвращаемый расшифрованный маркер идентификации
//
Процедура РасшифроватьМаркерИдентификацииВладельцаСертификата(ЗашифрованныеДвоичныеДанные, СертификатЭЦП, МаркерИдентификации, Знач ПарольДоступа) Экспорт
	
	// Инициализация менеджера криптографии
	НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
	ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		// менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки, либо
		// отсутствует ПО криптопровайдера
		Возврат;
	КонецПопытки;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольДоступа;
	
	// Расшифровка
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныеДвоичныеДанные);
	Исключение
		МаркерИдентификации = "НесовпадениеПароля";
		Возврат;
	КонецПопытки;
	ИмяФайлаДвоичныхДанных = ПолучитьИмяВременногоФайла("txt");
	РасшифрованныеДвоичныеДанные.Записать(ИмяФайлаДвоичныхДанных);
	ТекстовыйДок = Новый ТекстовыйДокумент;
	ТекстовыйДок.Прочитать(ИмяФайлаДвоичныхДанных);
	МаркерИдентификации = ТекстОвыйДок.ПолучитьТекст();
	
	Попытка
		УдалитьФайлы(ИмяФайлаДвоичныхДанных);
	Исключение
	КонецПопытки;

КонецПроцедуры

// Процедура заполняет данные для заполнения формы регистрации на основании выбранной организации
//
// Параметры
//	Организация - ссылка справочника Организация
//	ВозвращаемаяСтруктура - возвращаемая структура с данными об организации
//
Процедура ПолучитьРегистрационныеДанныеОрганизации(Организация, ВозвращаемаяСтруктура) Экспорт
	
	ПакетЗапросов = Новый Запрос;
	
	ПакетЗапросов.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Поле1 КАК Индекс,
	|	КонтактнаяИнформация.Поле2 КАК Регион,
	|	КонтактнаяИнформация.Поле3 КАК Район,
	|	КонтактнаяИнформация.Поле4 КАК Город,
	|	КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
	|	КонтактнаяИнформация.Поле6 КАК Улица,
	|	КонтактнаяИнформация.Поле7 КАК Дом,
	|	КонтактнаяИнформация.Поле8 КАК Корпус,
	|	КонтактнаяИнформация.Поле9 КАК Квартира
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Организация
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактнаяИнформация.Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Представление КАК Телефон
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Организация
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактнаяИнформация.Вид УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.НаименованиеСокращенное КАК Наименование,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ""ФизЛицо""
	|		ИНАЧЕ ""ЮрЛицо""
	|	КОНЕЦ               КАК ЮрФизЛицо,
	|	Организации.ИНН     КАК ИНН,
	|	Организации.КПП     КАК КПП,
	|	Организации.ОГРН    КАК ОГРН,
	|	Организации.КодИМНС КАК КодИМНС
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФиз.Фамилия  КАК Фамилия,
	|	ФИОФиз.Имя      КАК Имя,
	|	ФИОФиз.Отчество КАК Отчество
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтвЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФиз
	|		ПО (ФИОФиз.ФизЛицо = ОтвЛица.ФизическоеЛицо)
	|ГДЕ
	|	ОтвЛица.СтруктурнаяЕдиница = &Организация
	|	И ОтвЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)";
	
	ПакетЗапросов.Параметры.Вставить("Организация", Организация);
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();
	
	// Возвращаемая структура должна содержать все перечисленные ниже
	// ключи и их значения - строки
	// Проверка свойств в дальнейшем не выполняется
	ВозвращаемаяСтруктура.Очистить();
	
	ВозвращаемаяСтруктура.Вставить("ОрганизацияСсылка", Организация);
	
	ВыборкаАдреса = МассивРезультатов[0].Выбрать();
	Если ВыборкаАдреса.Следующий() Тогда
		ВозвращаемаяСтруктура.Вставить("Индекс"         , ВыборкаАдреса.Индекс);
		ВозвращаемаяСтруктура.Вставить("Регион"         , ВыборкаАдреса.Регион);
		ВозвращаемаяСтруктура.Вставить("Район"          , ВыборкаАдреса.Район);
		ВозвращаемаяСтруктура.Вставить("Город"          , ВыборкаАдреса.Город);
		ВозвращаемаяСтруктура.Вставить("НаселенныйПункт", ВыборкаАдреса.НаселенныйПункт);
		ВозвращаемаяСтруктура.Вставить("Улица"          , ВыборкаАдреса.Улица);
		ВозвращаемаяСтруктура.Вставить("Дом"            , ВыборкаАдреса.Дом);
		ВозвращаемаяСтруктура.Вставить("Корпус"         , ВыборкаАдреса.Корпус);
		ВозвращаемаяСтруктура.Вставить("Квартира"       , ВыборкаАдреса.Квартира);
	Иначе
		ВозвращаемаяСтруктура.Вставить("Индекс"         , "");
		ВозвращаемаяСтруктура.Вставить("Регион"         , "");
		ВозвращаемаяСтруктура.Вставить("Район"          , "");
		ВозвращаемаяСтруктура.Вставить("Город"          , "");
		ВозвращаемаяСтруктура.Вставить("НаселенныйПункт", "");
		ВозвращаемаяСтруктура.Вставить("Улица"          , "");
		ВозвращаемаяСтруктура.Вставить("Дом"            , "");
		ВозвращаемаяСтруктура.Вставить("Корпус"         , "");
		ВозвращаемаяСтруктура.Вставить("Квартира"       , "");
	КонецЕсли;
	
	ВыборкаТелефона = МассивРезультатов[1].Выбрать();
	Если ВыборкаТелефона.Следующий() Тогда
		ВозвращаемаяСтруктура.Вставить("Телефон", ВыборкаТелефона.Телефон);
	Иначе
		ВозвращаемаяСтруктура.Вставить("Телефон", "");
	КонецЕсли;
	
	ВыборкаСведенияОбОрганизации = МассивРезультатов[2].Выбрать();
	Если ВыборкаСведенияОбОрганизации.Следующий() Тогда
		ВозвращаемаяСтруктура.Вставить("Наименование", ВыборкаСведенияОбОрганизации.Наименование);
		ВозвращаемаяСтруктура.Вставить("ИНН"         , ВыборкаСведенияОбОрганизации.ИНН);
		ВозвращаемаяСтруктура.Вставить("КПП"         , ВыборкаСведенияОбОрганизации.КПП);
		ВозвращаемаяСтруктура.Вставить("ОГРН"        , ВыборкаСведенияОбОрганизации.ОГРН);
		ВозвращаемаяСтруктура.Вставить("КодИМНС"     , ВыборкаСведенияОбОрганизации.КодИМНС);
		ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"   , ВыборкаСведенияОбОрганизации.ЮрФизЛицо);
	Иначе
		ВозвращаемаяСтруктура.Вставить("Наименование", "");
		ВозвращаемаяСтруктура.Вставить("ИНН"         , "");
		ВозвращаемаяСтруктура.Вставить("КПП"         , "");
		ВозвращаемаяСтруктура.Вставить("ОГРН"        , "");
		ВозвращаемаяСтруктура.Вставить("КодИМНС"     , "");
		ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"   , "ЮрЛицо");
	КонецЕсли;
	
	ВыборкаФИОРуководителя = МассивРезультатов[3].Выбрать();
	Если ВыборкаФИОРуководителя.Следующий() Тогда
		ВозвращаемаяСтруктура.Вставить("Фамилия" , ВыборкаФИОРуководителя.Фамилия);
		ВозвращаемаяСтруктура.Вставить("Имя"     , ВыборкаФИОРуководителя.Имя);
		ВозвращаемаяСтруктура.Вставить("Отчество", ВыборкаФИОРуководителя.Отчество);
	Иначе
		ВозвращаемаяСтруктура.Вставить("Фамилия" , "");
		ВозвращаемаяСтруктура.Вставить("Имя"     , "");
		ВозвращаемаяСтруктура.Вставить("Отчество", "");
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращающая двоичные данные выбранного сертификата
//
// Параметры
//	СертификатЭЦп - выбранный сертификат - ссылка
//	ДвоичныеДанныеСертификата - Двоичные данные сертификата
//
Процедура ПолучитьДвоичныеДанныеСертификата(СертификатЭЦП, ДвоичныеДанныеСертификата) Экспорт
	
	Попытка
		ДвоичныеДанныеСертификата = СертификатЭЦП.ФайлСертификата.Получить();
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура передает в обработку тип значения справочника сертификатов ЭЦП
//
Процедура ОписаниеТиповСправочникаСертификатовЭД(ОписаниеТиповСертификатаЭЦП) Экспорт
	
	ОписаниеТиповСертификатаЭЦП = Новый ОписаниеТипов("СправочникСсылка.СертификатыЭЦП");
	
КонецПроцедуры

// Процедура поиска элемента справочника СертификатыЭЦП по отпечатку
// Параметры:
//	Отпечаток - Строка - строка отпечатка
//	СсылкаСправочникаЭЦП - СправочникСсылкаСертификатыЭЦП - найденная ссылка справочника сертификата ЭЦП
//
Процедура НайтиСертификатЭЦППоОтпечатку(Отпечаток, СсылкаСправочникаЭЦП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Отпечаток = &Отпечаток";
	
	Запрос.Параметры.Вставить("Отпечаток", Отпечаток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СсылкаСправочникаЭЦП = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура Получения отпечатка сертификата
// Параметры
// СертификатЭЦП - ссылка на справочник сертификатов
// ОтпечатокСертификата - Отпечаток сертификата
//
Процедура ПолучитьОтпечатокСертификата(СертификатЭЦП, ОтпечатокСертификата) Экспорт
	
	Если ТипЗнч(СертификатЭЦП) = Тип("СправочникСсылка.СертификатыЭЦП") И ЗначениеЗаполнено(СертификатЭЦП) Тогда
		ОтпечатокСертификата = СертификатЭЦП.Отпечаток;
	КонецЕсли;
	
КонецПроцедуры

