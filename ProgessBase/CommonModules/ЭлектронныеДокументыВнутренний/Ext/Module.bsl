////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыВнутренний: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД

// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьНакладнуюПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = НакладнаяСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога
			+ ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьНакладнуюCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.СуммаСНДС);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьТорг12ФНСПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Продавец);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_OTORG12");
	СтруктураЭД.Вставить("КНД", "1175004");
	
	ОтправительФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(СсылкаНаОбъект.Организация);
	СтруктураПараметров = Торг12СтруктураПараметров(ОтправительФизЛицо);
	
	ТекстОшибки = "";
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		// Передаим параметр "ВидОперации" кор. документа через механизм доп. параметров.
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("ВидОперации",             XMLСтрока(СтруктураПараметров.ВидОперации));
		ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
		
		// Разберем документы основания.
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокументыОснования) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(
				СтруктураПараметров.ДокументыОснования);
			Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				СтруктураДопДанных = Новый Структура;
				СтруктураДопДанных.Вставить("ВидДокументаОснования",    Строка.ВидЭД);
				СтруктураДопДанных.Вставить("НомерДокументаОснования",  Строка.НомерДокументаОтправителя);
				СтруктураДопДанных.Вставить("ДатаДокументаОтправителя", Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
				СтруктураДопДанных.Вставить("ИДЭДДокументаОснования",   Строка.Наименование);
				ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из СтруктураПараметров.ТаблицаТоваров Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
				ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(
					СтрокаТаблицы.ДокументОснование);
				Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
					СтруктураДопДанных = Новый Структура;
					СтруктураДопДанных.Вставить("ВидДокументаОснования",    Строка.ВидЭД);
					СтруктураДопДанных.Вставить("НомерДокументаОснования",  Строка.НомерДокументаОтправителя);
					СтруктураДопДанных.Вставить("ДатаДокументаОтправителя", Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
					СтруктураДопДанных.Вставить("ИДЭДДокументаОснования",   Строка.Наименование);
					ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Товары", Истина,
						СтрокаТаблицы.НомерСтроки);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		Если Сред(СтруктураПараметров.ИдЭДО, 2, 2) = "BE" Тогда
			СтруктураПараметров.ИдЭДО = Лев(СтруктураПараметров.ИдЭДО, 1) + "EB";
		КонецЕсли;
		
		Если СформироватьТорг12CML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Формирует элемент справочника ЭДПрисоединенныеФайлы для ТОРГ-12 покупатель
//
//Параметры:
//СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент
//
// Возвращаемое значение:
//  ЭДПрисоединенныеФайлы - заполненный электронный документ
//
Функция СформироватьЭДТорг12Покупатель(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							СсылкаНаЭД,
							"ВладелецФайла, УникальныйИД, ВерсияРегламентаЭДО, СуммаДокумента");
	
	СтруктураЭД = СформироватьФайлТорг12Покупатель(СсылкаНаЭД);
	Если ТипЗнч(СтруктураЭД) = Тип("Структура") И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
													РеквизитыЭД.ВладелецФайла,
													СтруктураЭД.ИдФайла,
													"xml",
													ДатаСозданияФайла,
													ТекущаяДатаСеанса(),
													АдресВоВременномХранилище,
													Неопределено,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		
		СтруктураЭД.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД",                   РеквизитыЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец",    СсылкаНаЭД);
		СтруктураЭД.Вставить("ВерсияРегламентаЭДО",            РеквизитыЭД.ВерсияРегламентаЭДО);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);
		СтруктураЭД.Вставить("СуммаДокумента",                 РеквизитыЭД.СуммаДокумента);
		
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирует электронный документ расходной накладной (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаЭД    - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьФайлТорг12Покупатель(СсылкаНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СсылкаНаЭД,
					"НомерЭД, Контрагент, Наименование, ВладелецФайла, НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СоглашениеЭД, СуммаДокумента, ВладелецФайла, ДатаФормированияЭДОтправителем");
	
	НастройкиОбменаЭД = РеквизитыЭД.СоглашениеЭД;
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Покупатель);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД", РеквизитыЭД.НомерЭД);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Если ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД) Тогда
		СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	Иначе // через ОператораЭДО
		СтруктураУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(НастройкиОбменаЭД,
			РеквизитыЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель", СтруктураУчастника.ИдентификаторКонтрагента);
	КонецЕсли;
	
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыЭД.Наименование);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "DP_PTORG12");
	СтруктураЭД.Вставить("КНД",                              "1175005");
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	ОтправительФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(РеквизитыЭД.Организация);
	СтруктураПараметров = Торг12ПокупательСтруктураПараметров(ОтправительФизЛицо);
	
	ТекстОшибки = "";
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоТорг12Покупатель(
												СсылкаНаЭД,
												СтруктураЭД,
												СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(РеквизитыЭД.ВладелецФайла, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		СтруктураПараметров.Вставить("ВремДокТН", Прав(СтрЗаменить("0"
			+ Формат(РеквизитыЭД.ДатаФормированияЭДОтправителем, "ДЛФ=T"), ":", "."), 8));
		СтруктураПараметров.Вставить("ДатаДокТН", Формат(РеквизитыЭД.ДатаФормированияЭДОтправителем, "ДФ=dd.MM.yyyy"));
		СтруктураПараметров.Вставить("НомерТоварнойНакладной", РеквизитыЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаТоварнойНакладной", РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		
		ТЗ_ЭЦП = Новый ТаблицаЗначений;
		ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
		СтруктураПараметров.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
		// ЭЦП полученного файла
		ЗаполнитьЭЦППолученногоФайла(СсылкаНаЭД, СтруктураПараметров.ПолученныеЭЦП);
		
		ИдФайлТН = РеквизитыЭД.Наименование;
		СтруктураПараметров.Вставить("ИдФайлТН", ИдФайлТН);
		Если Сред(СтруктураПараметров.ИННЮЛ, 6, 2) = (Символ(49) + Символ(54)) Тогда
			СтруктураПараметров.ИННЮЛ = Лев(СтруктураПараметров.ИННЮЛ, 5) + Символ(54) + Символ(49) + Сред(СтруктураПараметров.ИННЮЛ, 8);
		КонецЕсли;

		Если СформироватьТорг12ПокупательCML(СтруктураПараметров) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", СтруктураПараметров.ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьКорДокументПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить(
						"НомерДокументаОтправителя",
						ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "OKORDOC");
	СтруктураЭД.Вставить("КНД", "");
	
	ДеревоКорректировочногоДокумента = ОбщегоНазначенияЭД.ДеревоДокумента("СоглашениеОбИзмененииСтоимостиОтправитель");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоКорректировочномуДокументу(
												СсылкаНаОбъект,
												СтруктураЭД,
												ДеревоКорректировочногоДокумента);
	
	ТекстОшибки = "";
	ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоКорректировочногоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляФНС(ДеревоКорректировочногоДокумента, СтруктураЭД);
		
		// Передаим параметр "ВидОперации" кор. документа через механизм доп. параметров.
		ВидОперации = ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "ДопДанные.Подписанные.ВидОперации");
		ВставитьЗначениеВДерево(ДеревоКорректировочногоДокумента,
								"ДопДанные.Подписанные.ВидОперации",
								XMLСтрока(ВидОперации));
		
		СтруктураДопДанных = Новый Структура;
		СтрокаДокументыОснования = ДеревоКорректировочногоДокумента.Строки.Найти("ДокументыОснования", "ПолныйПуть");
		// Разберем документы основания.
		Если ЗначениеЗаполнено(СтрокаДокументыОснования.Значение) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтрокаДокументыОснования.Значение);
			
			СтрокаДопДанных = ДеревоКорректировочногоДокумента.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
			Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВидДокументаОснования", Строка.ВидЭД);
				ДобавитьЗначениеВДерево(СтрокаДопДанных,
										"ДопДанные.Подписанные.НомерДокументаОснования",
										Строка.НомерДокументаОтправителя);
				ДобавитьЗначениеВДерево(СтрокаДопДанных,
										"ДопДанные.Подписанные.ДатаДокументаОснования",
										Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
				ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ИДЭДДокументаОснования", Строка.Наименование);
			КонецЦикла;
		КонецЕсли;
		
		СтрокаТаблицаТоваров = ДеревоКорректировочногоДокумента.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");

		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ДокументОснование") Тогда
				ДокументОснование = ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ДокументОснование");
				Если ЗначениеЗаполнено(ДокументОснование) Тогда
					ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(ДокументОснование);
					СтрокаДопДанных = Товар.Строки.Найти("ТаблицаТоваров.НомерСтроки.ДопДанные.Подписанные", "ПолныйПуть", Истина);
					Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
						ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ВидДокументаОснования", Строка.ВидЭД);
						ДобавитьЗначениеВДерево(СтрокаДопДанных,
												"ДопДанные.Подписанные.НомерДокументаОснования",
												Строка.НомерДокументаОтправителя);
						ДобавитьЗначениеВДерево(СтрокаДопДанных,
												"ДопДанные.Подписанные.ДатаДокументаОснования",
												Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
						ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ИДЭДДокументаОснования", Строка.Наименование);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоКорректировочногоДокумента,
								"ПолноеИмяФайла",
								АдресКаталога + ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "ИдФайл") + ".xml");
		ИдЭДО = ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "РеквизитыОператораЭДО.ИдЭДО");
		Если Сред(ИдЭДО, 2, 2) = "BE" Тогда
			ВставитьЗначениеВДерево(ДеревоКорректировочногоДокумента, "РеквизитыОператораЭДО.ИдЭДО", Лев(ИдЭДО, 1) + "EB");
		КонецЕсли;
		
		Если СформироватьКорректировочныйДокументCML(ДеревоКорректировочногоДокумента) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураЭД.Вставить(
					"СуммаДокумента",
					ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "ВсегоПоНакладной.СуммаСНДС"));
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить(
									"ПолноеИмяФайла",
									ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "ПолноеИмяФайла"));
			СтруктураПараметров.Вставить(
									"УникальныйИдентификатор",
									ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "УникальныйИдентификатор"));
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "ПолноеИмяДопФайла")) Тогда
				СтруктураПараметров.Вставить(
										"ПолноеИмяДопФайла",
										ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "ПолноеИмяДопФайла"));
			
				СтруктураПараметров.Вставить(
										"ИдентификаторДопФайла",
										ЗначениеРеквизитаВДереве(ДеревоКорректировочногоДокумента, "ИдентификаторДопФайла"));
			КонецЕсли;
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Формирует элемент справочника ЭДПрисоединенныеФайлы для соглашения об изменении стоимости получателя
//
//Параметры:
//СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент
//
// Возвращаемое значение:
//  ЭДПрисоединенныеФайлы - заполненный электронный документ
//
Функция СформироватьЭДКорДокументаПолучатель(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СсылкаНаЭД,
						"ВладелецФайла, УникальныйИД, ВерсияРегламентаЭДО, СуммаДокумента");
	СтруктураЭД = СформироватьФайлКорДокументаПолучателя(СсылкаНаЭД);
	Если ТипЗнч(СтруктураЭД) = Тип("Структура")
			И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								РеквизитыЭД.ВладелецФайла,
								СтруктураЭД.ИдФайла,
								"xml",
								ДатаСозданияФайла,
								ТекущаяДатаСеанса(),
								АдресВоВременномХранилище,
								Неопределено,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		
		СтруктураЭД.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД",                   РеквизитыЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец",    СсылкаНаЭД);
		СтруктураЭД.Вставить("ВерсияРегламентаЭДО",            РеквизитыЭД.ВерсияРегламентаЭДО);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);
		СтруктураЭД.Вставить("СуммаДокумента",                 РеквизитыЭД.СуммаДокумента);
		
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирует электронный документ корректировочной расходной накладной (титул отправителя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаЭД    - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьФайлКорДокументаПолучателя(СсылкаНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СсылкаНаЭД,
						"СоглашениеЭД, Контрагент, Наименование, ВладелецФайла, НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента, ДатаФормированияЭДОтправителем");
	НастройкиОбменаЭД = РеквизитыЭД.СоглашениеЭД;
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД",                   Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	СтруктураЭД.Вставить("НаправлениеЭД",           Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",                 Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Если ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД) Тогда
		СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	Иначе // через ОператораЭДО
		СтруктураУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(НастройкиОбменаЭД,
			РеквизитыЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель", СтруктураУчастника.ИдентификаторКонтрагента);
	КонецЕсли;
	
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыЭД.Наименование);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "PKORDOC");
	СтруктураЭД.Вставить("КНД",                              "");
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	ДеревоДокумента = ОбщегоНазначенияЭД.ДеревоДокумента("СоглашениеОбИзмененииСтоимостиПолучатель");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоКорректировочномуДокументуПолучатель(
																				СсылкаНаЭД,
																				СтруктураЭД,
																				ДеревоДокумента);

	ТекстОшибки = "";
	ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
		ДобавитьСлужебныеПоляФНС(ДеревоДокумента, СтруктураЭД);
		
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ВремДокТН",
								Прав(СтрЗаменить("0" + Формат(РеквизитыЭД.ДатаФормированияЭДОтправителем, "ДЛФ=T"), ":", "."), 8));
		ВставитьЗначениеВДерево(ДеревоДокумента,
								"ДатаДокТН",
								Формат(РеквизитыЭД.ДатаФормированияЭДОтправителем, "ДФ=dd.MM.yyyy"));
		ВставитьЗначениеВДерево(ДеревоДокумента, "НомерТоварнойНакладной", РеквизитыЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ДатаТоварнойНакладной",  РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
		ИдФайл = ЗначениеРеквизитаВДереве(ДеревоДокумента, "ИдФайл");
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		ТЗ_ЭЦП = Новый ТаблицаЗначений;
		ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
		СтруктураПараметров.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
		// ЭЦП полученного файла
		ЗаполнитьЭЦППолученногоФайла(СсылкаНаЭД, СтруктураПараметров.ПолученныеЭЦП);
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ИдФайлТН", РеквизитыЭД.Наименование);
		ИННЮЛ = ЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыОператораЭДО.ИННЮЛ");
		Если Сред(ИННЮЛ, 6, 2) = (Символ(49) + Символ(54)) Тогда
			ИННЮЛ = Лев(ИННЮЛ, 5) + Символ(54) + Символ(49) + Сред(ИННЮЛ, 8);
		КонецЕсли;
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыОператораЭДО.ИННЮЛ", ИННЮЛ);
		
		Если СформироватьКорректировочныйДокументПокупательCML(ДеревоДокумента) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ счета на оплату покупателю по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьСчетНаОплатуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = СчетНаОплатуСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);

	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьСчетНаОплатуCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ заказа поставщику по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьЗаказПоставщикуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗаказТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЗаказПоставщикуСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьЗаказCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ заказа клиента по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьЗаказКлиентаПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтветНаЗаказ);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить(
						"НомерДокументаОтправителя",
						ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЗаказКлиентаСтруктураПараметров();
	
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтветуНаЗаказ(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
			
		Если СформироватьЗаказCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ каталога товаров по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ 
//  или ссылка на организацию в случае выгрузки ЭД через механизм однократной сделки;
//  ТоварыКаталога - таблица значений, содержащая перечень номенклатуры,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьКаталогНоменклатуры(НастройкиОбменаЭД, ДополнительныеПараметры, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВерсияСхемы",   "2.06");
	СтруктураЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.КаталогТоваров);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",       ВернутьИдЭД(НастройкиОбменаЭД.Организация));
	СтруктураЭД.Вставить("ДатаЭД",        ТекущаяДатаСеанса());
	
	СтруктураЭД.Вставить("Отправитель",   НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Организация",   НастройкиОбменаЭД.Организация);
	
	Если НастройкиОбменаЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		
		ШаблонСообщения = НСтр("ru = 'Каталог %1 от %2'");
		НаименованиеКаталога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			НастройкиОбменаЭД.Организация, Формат(СтруктураЭД.ДатаЭД, "ДЛФ=Д"));
	Иначе
		СтруктураЭД.Вставить("Контрагент",    НастройкиОбменаЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель",    НастройкиОбменаЭД.ИдентификаторКонтрагента);
		СтруктураЭД.Вставить("ВладелецЭД",    НастройкиОбменаЭД.СоглашениеЭД);
		СтруктураЭД.Вставить("СоглашениеЭД",  НастройкиОбменаЭД.СоглашениеЭД);
		СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(
			НастройкиОбменаЭД.СоглашениеЭД));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
		
		ШаблонСообщения = НСтр("ru = 'Каталог %1 для %2 от %3'");
		НаименованиеКаталога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			НастройкиОбменаЭД.Организация, НастройкиОбменаЭД.Контрагент, Формат(СтруктураЭД.ДатаЭД, "ДЛФ=Д"));
	КонецЕсли;
	
	// Получение таблицы товаров из временного хранилища.
	ТоварыКаталога = "";
	ДополнительныеПараметры.Свойство("ТоварыКаталога", ТоварыКаталога);
	ТоварыКаталога = ПолучитьИзВременногоХранилища(ТоварыКаталога);
	
	// Формирование и заполнение дерева по макету.
	ДеревоКаталога = ОбщегоНазначенияЭД.ДеревоДокумента("КаталогТоваров");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоКаталогуТоваровCML(НастройкиОбменаЭД.Организация, ТоварыКаталога,
		ДеревоКаталога);
		
	// Проверяем заполнение полей, отмеченных в макете как обязательные.
	ТекстОшибки = "";
	ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоКаталога, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоКаталога, СтруктураЭД);
		
		НаименованиеКаталога = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКаталога);
		ВставитьЗначениеВДерево(ДеревоКаталога, "Наименование", НаименованиеКаталога);
		
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			ЭлектронныеДокументыСлужебный.РабочийКаталог(, НастройкиОбменаЭД.Организация.УникальныйИдентификатор()),
			НаименованиеКаталога);
		
		ШаблонИмениФайла = НСтр("ru = '%1.xml'");
		ПолноеИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоКаталога, "ПолноеИмяФайла", ПолноеИмяФайла);
		
		Если СформироватьКаталогCML(ДеревоКаталога) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   НаименованиеКаталога);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
		
	Иначе
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ прайс-листа по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьПрайсПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПрайсЛист);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", НастройкиОбменаЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ПрайсЛистСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьПрайсЛистCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ выполнения работ по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьАктВыполненныхРаботПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ТекстОшибки = "";
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктВыполненныхРабот);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = АктВыполненныхРаботСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАктуВыполненныхРабот(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьАктCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.СуммаДокумента);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ Акт выполненных работ формата 5.01 по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьАкт501ФНСПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктИсполнитель);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(
		СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_IAKTPRM");
	СтруктураЭД.Вставить("КНД", "1175006");
	
	ОтправительФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(СсылкаНаОбъект.Организация);
	СтруктураПараметров = Акт501СтруктураПараметров(ОтправительФизЛицо);
	
	ТекстОшибки = "";
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		// Передаим параметр "ВидОперации" кор. документа через механизм доп. параметров.
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("ВидОперации",             XMLСтрока(СтруктураПараметров.ВидОперации));
		ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
		
		// Разберем документы основания.
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокументыОснования) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(
				СтруктураПараметров.ДокументыОснования);
			Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				СтруктураДопДанных = Новый Структура;
				СтруктураДопДанных.Вставить("ВидДокументаОснования",   Строка.ВидЭД);
				СтруктураДопДанных.Вставить("НомерДокументаОснования", Строка.НомерДокументаОтправителя);
				СтруктураДопДанных.Вставить("ДатаДокументаОснования",  Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
				СтруктураДопДанных.Вставить("ИДЭДДокументаОснования",  Строка.Наименование);
				ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаОписанийУслуг Из СтруктураПараметров.ТаблицаОписанийУслуг Цикл
			Для Каждого СтрокаТаблицы Из СтрокаОписанийУслуг.Услуги Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
					ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(
						СтрокаТаблицы.ДокументОснование);
					Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
						СтруктураДопДанных = Новый Структура;
						СтруктураДопДанных.Вставить("ВидДокументаОснования",    Строка.ВидЭД);
						СтруктураДопДанных.Вставить("НомерДокументаОснования",  Строка.НомерДокументаОтправителя);
						СтруктураДопДанных.Вставить("ДатаДокументаОтправителя", Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
						СтруктураДопДанных.Вставить("ИДЭДДокументаОснования",   Строка.Наименование);
						ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Услуги", Истина,
							Строка(СтрокаОписанийУслуг.НомерСтроки) + "." + СтрокаТаблицы.НомерСтроки);
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",          АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		СтруктураПараметров.Вставить("ВерсияРегламентаЭДО",     НастройкиОбменаЭД.ВерсияРегламентаЭДО);
		Если Сред(СтруктураПараметров.ИННЮЛ, 6, 2) = "16" Тогда
			СтруктураПараметров.ИННЮЛ = Лев(СтруктураПараметров.ИННЮЛ, 5) + "61" + Сред(СтруктураПараметров.ИННЮЛ, 8);
		КонецЕсли;
		Если СформироватьАкт501CML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.ТаблицаУслуг.Итог("СуммаСНДС"));
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Формирует элемент справочника ЭДПрисоединенныеФайлы для акта заказчика
//
//Параметры:
//СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент
//
// Возвращаемое значение:
//  ЭДПрисоединенныеФайлы - заполненный электронный документ
//
Функция СформироватьЭДАкт501Заказчик(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СсылкаНаЭД,
						"ВладелецФайла, УникальныйИД, ВерсияРегламентаЭДО, СуммаДокумента");
	СтруктураЭД = СформироватьФайлАкт501Заказчик(СсылкаНаЭД);
	Если ТипЗнч(СтруктураЭД) = Тип("Структура")
		И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
									РеквизитыЭД.ВладелецФайла,
									СтруктураЭД.ИдФайла,
									"xml", ДатаСозданияФайла,
									ТекущаяДатаСеанса(),
									АдресВоВременномХранилище,
									Неопределено,
									,
									Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		
		СтруктураЭД.Вставить("СтатусЭД",                       Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД",                   РеквизитыЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец",    СсылкаНаЭД);
		СтруктураЭД.Вставить("ВерсияРегламентаЭДО",            РеквизитыЭД.ВерсияРегламентаЭДО);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);
		СтруктураЭД.Вставить("СуммаДокумента",                 РеквизитыЭД.СуммаДокумента);
		
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирует электронный документ расходной накладной (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаЭД    - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьФайлАкт501Заказчик(СсылкаНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СсылкаНаЭД,
						"СоглашениеЭД, Контрагент, Наименование, ВладелецФайла, НомерДокументаОтправителя, ДатаДокументаОтправителя, Организация, СуммаДокумента, ДатаФормированияЭДОтправителем, ВерсияРегламентаЭДО");
	НастройкиОбменаЭД = РеквизитыЭД.СоглашениеЭД;
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктЗаказчик);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД", Новый УникальныйИдентификатор());
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Если ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД) Тогда
		СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	Иначе // через ОператораЭДО
		СтруктураУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(НастройкиОбменаЭД,
			РеквизитыЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель", СтруктураУчастника.ИдентификаторКонтрагента);
	КонецЕсли;
	
	СтруктураЭД.Вставить("ДатаЭД",                           ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель",                      НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыЭД.Наименование);
	СтруктураЭД.Вставить("ВладелецЭД",                       РеквизитыЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",        РеквизитыЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",         РеквизитыЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация",                      РеквизитыЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",                       РеквизитыЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",                     РеквизитыЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла",                   "DP_ZAKTPRM");
	СтруктураЭД.Вставить("КНД",                              "1175007");
	СтруктураЭД.Вставить("СуммаДокумента",                   РеквизитыЭД.СуммаДокумента);
	
	ОтправительФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(РеквизитыЭД.Организация);
	СтруктураПараметров = Акт501ЗаказчикСтруктураПараметров(ОтправительФизЛицо);
	
	ТекстОшибки = "";
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаЭД, СтруктураЭД, СтруктураПараметров);
	Если ПроверитьЗаполнениеОбязательныхПолей(РеквизитыЭД.ВладелецФайла, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		СтруктураПараметров.Вставить("ВремДокАкт", Прав(СтрЗаменить("0"
			+ Формат(РеквизитыЭД.ДатаФормированияЭДОтправителем, "ДЛФ=T"), ":", "."), 8));
		СтруктураПараметров.Вставить("ДатаДокАкт", Формат(РеквизитыЭД.ДатаФормированияЭДОтправителем, "ДФ=dd.MM.yyyy"));
		СтруктураПараметров.Вставить("НомерАкта", РеквизитыЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаАкта", РеквизитыЭД.ДатаДокументаОтправителя);
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		
		ТЗ_ЭЦП = Новый ТаблицаЗначений;
		ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
		СтруктураПараметров.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
		
		// ЭЦП полученного файла
		ЗаполнитьЭЦППолученногоФайла(СсылкаНаЭД, СтруктураПараметров.ПолученныеЭЦП);
		
		ИдФайлАкт = РеквизитыЭД.Наименование;
		СтруктураПараметров.Вставить("ИдФайлАкт", ИдФайлАкт);
		Если Сред(СтруктураПараметров.ИдЭДО, 2, 2) = "BE" Тогда
			СтруктураПараметров.ИдЭДО = Лев(СтруктураПараметров.ИдЭДО, 1) + "EB";
		КонецЕсли;
		
		Если СформироватьАкт501ЗаказчикCML(СтруктураПараметров, РеквизитыЭД.ВерсияРегламентаЭДО) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", СтруктураПараметров.ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ отчета комитента по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ВерсияСхемы", "4.02");
	
	// Сформируем структуру параметров для ОтчетаОПродажахКомиссионногоТовара и заполним ее.
	СтруктураПараметров = СтруктураПараметровПоОтчетуОПродажахКомиссионногоТовара();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(
		СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	
	СтруктураСлужебныхПолей(СтруктураПараметров);
	ЗаполнитьСтруктуруСлужебныхПолей(СтруктураЭД, СтруктураПараметров);
	
	ТекстОшибки = "";
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ отчета комитента о списании по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ОтчетОСписанииКомиссионногоТовараСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ передача товаров между организациями по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьПередачуТоваровМеждуОрганизациями(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Интеркампани);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.ОрганизацияПолучатель);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ПередачаТоваровМеждуОрганизациямиСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ возврат товаров между организациями по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьВозвратТоваровМеждуОрганизациями(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Интеркампани);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.ОрганизацияПолучатель);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ВозвратТоваровМеждуОрганизациямиСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(
												СсылкаНаОбъект,
												СтруктураЭД,
												СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
	
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ счет фактура по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьСчетФактуру(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ЭтоКорректировочныйСФ = ЭлектронныеДокументыПереопределяемый.ЭтоКорректировочныйДокумент(СсылкаНаОбъект);
	
	// Сформируем и заполним структуру электронного документа.
	СтруктураЭД = Новый Структура;
	Если ЭтоКорректировочныйСФ Тогда
		СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Иначе
		СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.СчетФактура);
	КонецЕсли;
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",   НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",    НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",       ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",        ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД",    СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя",  СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",   НастройкиОбменаЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",    НастройкиОбменаЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД",  НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("УникальныйИдентификатор",   Новый УникальныйИдентификатор);
	
	// Сформируем структуру параметров для счет-фактуры и заполним ее.
	ОтправительФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(НастройкиОбменаЭД.Организация);
	СтруктураПараметров = ЭСФСтруктураПараметров(ЭтоКорректировочныйСФ, ОтправительФизЛицо);
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	ТекстОшибки = "";
	РезультатФормирования = Ложь;
	
	Если ЭтоКорректировочныйСФ Тогда
		ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	Иначе
		ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	КонецЕсли;

	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(СтруктураПараметров.ДокументыОснования);
		ДокументыОснования = Новый Массив;
		Для каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
			ДокументОснование  = Новый Структура;
			ДокументОснование.Вставить("ВидДокументаОснования",   Строка.ВидЭД);
			ДокументОснование.Вставить("НомерДокументаОснования", Строка.НомерДокументаОтправителя);
			ДокументОснование.Вставить("ДатаДокументаОснования",  Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
			ДокументОснование.Вставить("ИДЭДДокументаОснования",  Строка.Наименование);
			
			ДокументыОснования.Добавить(ДокументОснование);
		КонецЦикла;
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("ДокументыОснования", ДокументыОснования);
		
		ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		Если ЭтоКорректировочныйСФ Тогда
			СтруктураЭД.Вставить("КНД", "1115108");
			СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_KORSFAKT");
			ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
			РезультатФормирования = СформироватьКорректировочныйСчетФактуруCML(СтруктураПараметров);
		Иначе
			СтруктураЭД.Вставить("КНД", "1115101");
			СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_SFAKT");
			ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
			Если Сред(СтруктураПараметров.ИННЮЛ, 6, 2) = "16" Тогда
				СтруктураПараметров.ИННЮЛ = Лев(СтруктураПараметров.ИННЮЛ, 5) + "61" + Сред(СтруктураПараметров.ИННЮЛ, 8);
			КонецЕсли;
			РезультатФормирования = СформироватьСчетФактуруCML(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		Если ЭтоКорректировочныйСФ Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.ТаблицаТоваров.Итог("Сумма"));
		Иначе
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.СуммаСНДСВсего);
		КонецЕсли;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ платежное поручение по ссылке на документ ИБ.
//
// Параметры:
// СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
// ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьПлатежноеПоручение(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ПлатежноеПоручение);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",       ВернутьИдЭД(СсылкаНаОбъект, "", СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД",        ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД",    СсылкаНаОбъект);
	СтруктураЭД.Вставить(
			"НомерДокументаОтправителя",
			ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация",              СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент",               СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("Автор",                    ПараметрыСеанса.ТекущийПользователь);
	СтруктураЭД.Вставить("СоглашениеЭД",             НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрограммаБанка",           НастройкиОбменаЭД.ПрограммаБанка);
	
	СтруктураПараметров = ПлатежноеПоручениеСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект,
																				СтруктураЭД,
																				СтруктураПараметров);
	СтруктураПараметров.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Номер, Дата, СуммаДокумента, ПлательщикРасчСчет, ПлательщикИНН, ПолучательРасчСчет, ПолучательИНН");
	
	СтруктураПараметров.Вставить("Контрагент",  СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	
	ТекстОшибки = "";
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
			
		ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.СоглашениеЭД, "ПрограммаБанка");
		
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			ЭДСформирован = СформироватьПлатежноеПоручениеСбербанкCML(СтруктураПараметров);
		Иначе
			ЭДСформирован = СформироватьПлатежноеПоручениеCML(СтруктураПараметров);
		КонецЕсли;
			
		Если ЭДСформирован И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.СуммаДокумента);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.ВидЭД,
			ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Формирует элемент справочника ЭДПрисоединенныеФайлы для заказа выписки банка
//
//Параметры:
//БанковскийСчет - СправочникСсылка - счет, по которому формируется запрос выписки
//ДатаНачала - Дата, начальная дата периода запроса выписки
//ДатаОкончания = Дата, конечная дата периода запроса выписки
//СоглашениеЭД - СправочникСсылка.СоглашенияЭД - Соглашение
//ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - сформированный электронный документ
//
Процедура СформироватьЭДЗаказВыписки(ДатаНачала, ДатаОкончания, СоглашениеЭД, ЭД) Экспорт
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СоглашениеЭД, "Организация, Контрагент");
	
	МассивБанковскихСчетов = Новый Массив;
	ЭлектронныеДокументыПереопределяемый.ПолучитьНомераБанковскихСчетов(РеквизитыСоглашения.Организация,
																		РеквизитыСоглашения.Контрагент,
																		МассивБанковскихСчетов);
	Если МассивБанковскихСчетов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Найдены актуальные банковские счета для организации: %1 с банком: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ТекстСообщения,
															РеквизитыСоглашения.Организация,
															РеквизитыСоглашения.Контрагент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;

	Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(РеквизитыСоглашения.Контрагент,
																					СоглашениеЭД);
	
	ПакетXDTO = ПолучитьЗаказВыпискиCML(ДатаНачала,
										ДатаОкончания,
										МассивБанковскихСчетов,
										РеквизитыСоглашения.Контрагент);
		
	Если ПакетXDTO=Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПолноеИмяФайла);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись,
							ПакетXDTO,
							"ClientBankExchange",
							"urn:1C.ru:ClientBankExchange",
							,
							НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ШаблонСообщения = НСтр("ru='Запрос выписки с %1 по %2'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																			 Формат(ДатаНачала, "ДЛФ=D"), 
																			 Формат(ДатаОкончания, "ДЛФ=D"));
	
	ЭД = ПрисоединенныеФайлы.ДобавитьФайл(СоглашениеЭД,
										  ТекстСообщения,
										  "xml",
										  ТекущаяДатаСеанса(),
										  ТекущаяДатаСеанса(),
										  АдресФайла,
										  ,
										  ,
										  Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Автор", ПользователиСервер.АвторизованныйПользователь());
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗапросВыписки);
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров.Вставить("Ответственный", Ответственный);
	СтруктураПараметров.Вставить("Организация", РеквизитыСоглашения.Организация);
	СтруктураПараметров.Вставить("Контрагент", РеквизитыСоглашения.Контрагент);
	СтруктураПараметров.Вставить("ВладелецЭД", СоглашениеЭД);
	СтруктураПараметров.Вставить("СоглашениеЭД", СоглашениеЭД);
	СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
	
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров);
	
КонецПроцедуры

//Формирует элемент справочника ЭДПрисоединенныеФайлы для уведомления об уточнении
//
//Параметры:
//СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент
// ТекстУточнения - Строка - содержимое уточнения
//
// Возвращаемое значение:
//  Структура - структура с данными документа
//
Функция СформироватьФайлУведомлениеОбУточненииПоЭД(СсылкаНаЭД, ТекстУточнения) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СсылкаНаЭД,
						"ПолучательЭД, Организация, ОтправительЭД, Контрагент, НомерЭД, Наименование, ДатаСоздания, СуммаДокумента");
	
	СтруктураЭД = СтруктураУведомленияОбУточнении(); // для создания ЭДПрисоединенныеФайлы
	
	СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;
	СтруктураЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	СтруктураЭД.НомерЭД = Новый УникальныйИдентификатор(РеквизитыЭД.НомерЭД);
	СтруктураЭД.ИдОтправителя = РеквизитыЭД.ПолучательЭД;
	СтруктураЭД.Отправитель = РеквизитыЭД.Организация;
	СтруктураЭД.ИдПолучателя = РеквизитыЭД.ОтправительЭД;
	СтруктураЭД.Получатель = РеквизитыЭД.Контрагент;
	СтруктураЭД.ИдФайла = ОпределитьИдФайлаЭД(СтруктураЭД);
	СтруктураЭД.ИмяПолученногоФайлаБезРасширения =  РеквизитыЭД.Наименование;
	// Дата и время получения файла
	СтруктураЭД.ДатаВремяПолучения = РеквизитыЭД.ДатаСоздания;
	СтруктураЭД.ТекстУточнения = ТекстУточнения;
	СтруктураЭД.ИдПолучателя = РеквизитыЭД.ОтправительЭД;
	СтруктураЭД.Получатель = РеквизитыЭД.Контрагент;
	СтруктураЭД.Вставить("СуммаДокумента", РеквизитыЭД.СуммаДокумента);
	СтруктураПараметров = ПодготовитьДанныеПоУведомлению(СсылкаНаЭД, СтруктураЭД);
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("Clarif");
	СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СформироватьИмяФайлаЭД(СтруктураЭД));
	
	Если ЗаполнитьФайлУведомленияОбУточнении(СтруктураПараметров) Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		СтруктураЭД.АдресВоВременномХранилище = АдресВоВременномХранилище;
		
		ВозвращаемоеЗначение = СтруктураЭД;
	КонецЕсли;
	УдалитьФайлы(АдресКаталога);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Формирует элемент справочника ЭДПрисоединенныеФайлы для извещения
//
//Параметры:
//СсылкаНаЭД - СправочникСсылка - ссылка на новый элемент
//
// Возвращаемое значение:
//  Структура - структура с данными документа
//
Функция СформироватьФайлИзвещенияПоЭД(СсылкаНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СсылкаНаЭД,
						"СоглашениеЭД, Контрагент, ТипЭлементаВерсииЭД, Наименование, ДатаСоздания, СуммаДокумента");
	
	НастройкиОбменаЭД = РеквизитыЭД.СоглашениеЭД;
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ИзвещениеОПолучении);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",       Новый УникальныйИдентификатор());
	
	Если ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД) Тогда
		СтруктураЭД.Вставить("Получатель",   НастройкиОбменаЭД.Контрагент);
		СтруктураЭД.Вставить("ИдПолучателя", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	Иначе // через ОператораЭДО
		СтруктураУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(НастройкиОбменаЭД,
			РеквизитыЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель",   СтруктураУчастника.Контрагент);
		СтруктураЭД.Вставить("ИдПолучателя", СтруктураУчастника.ИдентификаторКонтрагента);
		
		Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
			
			СтруктураЭД.Вставить("ОператорЭДО", СтруктураНастроекОператораЭДО());
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЭД.Вставить("ИдОтправителя", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Отправитель",   НастройкиОбменаЭД.Организация);
	СтруктураЭД.Вставить("ИдФайла",       ОпределитьИдФайлаЭД(СтруктураЭД));
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", РеквизитыЭД.Наименование);
	// Дата и время получения файла.
	СтруктураЭД.Вставить("ДатаВремяПолучения", РеквизитыЭД.ДатаСоздания);
	
	СтруктураПараметров = ПодготовитьДанныеПоИзвещению(СсылкаНаЭД, СтруктураЭД);
	Если ЗаполнитьФайлИзвещенияОПолучении(СтруктураПараметров) Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		СтруктураЭД.Вставить("СуммаДокумента",            РеквизитыЭД.СуммаДокумента);
		ВозвращаемоеЗначение = СтруктураЭД;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьАктНаПередачуПрав(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВерсияСхемы", "2.06");
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктНаПередачуПрав);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
						ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	ДеревоАкта = ОбщегоНазначенияЭД.ДеревоДокумента("АктНаПередачуПрав");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоАкта);
	
	ТекстОшибки = "";
	ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоАкта, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоАкта, СтруктураЭД);
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоАкта,
								"ПолноеИмяФайла",
								АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		ВставитьЗначениеВДерево(ДеревоАкта, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоАкта, "Дата", СтруктураЭД.ДатаДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоАкта, "ХозОперация", "Передача прав");
		ВставитьЗначениеВДерево(ДеревоАкта, "Роль", "Лицензиар");
		
		Если СформироватьАктНаПередачуПравCML(ДеревоАкта) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ЗначениеРеквизитаВДереве(ДеревоАкта, "ПолноеИмяФайла"));
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

// Заполняет свойство объекта XDTO.
//
// Параметры
//  ОбъектXDTO   – объект заполнения,
//  ИмяСвойства  - свойство объекта,
//  Значение     - устанавливаемое значение,
//  Обязательное - булево - признак обязательности заполнения свойства,
//  ТекстОшибки  - строка - текст ошибки в случае неудачного заполнения
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ВыгрузитьЭДвФайл(ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "windows-1251") Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры

// Возвращает идентификационный номер электронного документа.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на электронный документ, идентификационный номер которого необходимо получить,
//  ИДОтправителя - строка, идентификационный номер отправителя электронного документа, 
//  НомерВерсии - число, номер версии электронного документа.
//
// Возвращаемое значение:
//  строка формата "ИдОтправителя#ИДСсылкиОбъектаИБ##НомерВерсии"
//
Функция ВернутьИдЭД(СсылкаНаОбъект, ИдОтправителя = Неопределено, НомерВерсии = Неопределено) Экспорт
	
	ИдЭД = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	
	Возврат ИдЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// CML

// Функция получает тип значения CML
//
// Параметры
//  Тип - Тип   - исходный тип
//  ВерсияСхемы - версия схемы CML
//
// Возвращаемое значение:
//  ТипЗначения - Тип значения
//
Функция ПолучитьТипЗначенияCML(Тип, ВерсияСхемы = "4.02") Экспорт
	
	Попытка
		Если ВерсияСхемы <> "4.02" Тогда
			ТипЗначения = ФабрикаXDTO.Тип(ВерсияСхемы, Тип);
		Иначе
			ТипЗначения = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", Тип);
		КонецЕсли
	Исключение
		
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Разбор файлов

// Осуществляет разбор файла с реквизитами контрагента
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора) Экспорт
	
	ОшибкаРазбора = Ложь;
	СтруктураВозврата.Вставить("ТелефонПартнера");
	СтруктураВозврата.Вставить("ТелефонКЛ");
	СтруктураВозврата.Вставить("АдресЭППартнера");
	СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("БИКБанка");
	СтруктураВозврата.Вставить("КоррСчетБанка");
	СтруктураВозврата.Вставить("ПредставлениеБанка");
	СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента");
	СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов");
	СтруктураВозврата.Вставить("БИКБанкаДляРасчетов");
	СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов");
	СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов");
	СтруктураВозврата.Вставить("ВидКомпании");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("НаименованиеКонтрагента");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей");
	СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица");
	СтруктураВозврата.Вставить("ФамилияКЛ");
	СтруктураВозврата.Вставить("ИмяКЛ");
	СтруктураВозврата.Вставить("ОтчествоКЛ");
	СтруктураВозврата.Вставить("ФамилияКонтрагента");
	СтруктураВозврата.Вставить("ИмяКонтрагента");
	СтруктураВозврата.Вставить("ОтчествоКонтрагента");
	СтруктураВозврата.Вставить("Название");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей");

	РезультатРазбора = Ложь;
	ЭлектронныеДокументыПереопределяемый.РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора);
	
	Если ТипЗнч(РезультатРазбора) <> Тип("Булево") ИЛИ РезультатРазбора = Ложь Тогда
		ОбъектXML = Новый ЧтениеXML;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
		ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ВремФайл);
		
		Попытка
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Исключение
			ОбъектXML.Закрыть();
			ОшибкаРазбора = Истина;
			Возврат;
		КонецПопытки;
		
		Если НЕ ЭД.Тип() = ПолучитьТипЗначенияCML("Контрагент", "4.02") Тогда
			ОшибкаРазбора = Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			СвойствоЭД = ЭД.Свойства().Получить("Контакты");
			Если НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено Тогда
				Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
					Если ТекКонтакт.Тип = "Телефон рабочий" Тогда
						СтруктураВозврата.ТелефонПартнера = ТекКонтакт.Значение;
						СтруктураВозврата.ТелефонКЛ = ТекКонтакт.Значение;
					ИначеЕсли ТекКонтакт.Тип = "Почта" Тогда
						СтруктураВозврата.АдресЭППартнера = ТекКонтакт.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");
			Если СвойствоЭД <> Неопределено Тогда
				
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					Для Каждого ТекСв Из ЗнДанных.РасчетныйСчет Цикл
						
						СтруктураВозврата.НомерСчета = ТекСв.НомерСчета;
						СтруктураВозврата.БИКБанка = ТекСв.Банк.БИК;
						СтруктураВозврата.КоррСчетБанка = ТекСв.Банк.СчетКорреспондентский;
						СтруктураВозврата.ПредставлениеБанка = ТекСв.Банк.Наименование;
						СтруктураВозврата.УказатьБанковскийСчетКонтрагента = Истина;
						
						Если НЕ ТекСв.БанкКорреспондент = Неопределено Тогда
							СтруктураВозврата.ИспользуетсяБанкДляРасчетов = Истина;
							СтруктураВозврата.БИКБанкаДляРасчетов = ТекСв.БанкКорреспондент.БИК;
							СтруктураВозврата.КоррСчетБанкаДляРасчетов = ТекСв.БанкКорреспондент.СчетКорреспондентский;
							СтруктураВозврата.ПредставлениеБанкаДляРасчетов = ТекСв.БанкКорреспондент.Наименование;
						КонецЕсли;
						Прервать;
					КонецЦикла
				КонецЕсли;
			КонецЕсли;
			
			СтруктураВозврата.УказыватьЮридическиеРеквизиты = Истина;
			ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
			
			СвойствоЭД = ЭД.Свойства().Получить("ЮрЛицо");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					СтруктураВозврата.ВидКомпании = 0;
					СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
					Если СвойствоИНН <> Неопределено Тогда
						СтруктураВозврата.ИНН = ЗнДанных.Получить(СвойствоИНН);
					КонецЕсли;
					СвойствоКПП = ЗнДанных.Свойства().Получить("КПП");
					Если СвойствоКПП <> Неопределено Тогда
						СтруктураВозврата.КПП = ЗнДанных.Получить(СвойствоКПП);
					КонецЕсли;
					СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
					Если СвойствоОКПО <> Неопределено Тогда
						СтруктураВозврата.КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
					КонецЕсли;
					СвойствоОФНаим = ЗнДанных.Свойства().Получить("ОфициальноеНаименование");
					Если СвойствоОФНаим <> Неопределено Тогда
						СтруктураВозврата.НаименованиеКонтрагента = ЗнДанных.Получить(СвойствоОфНаим);
					КонецЕсли;
					
					СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
					Если СвойствоЮрАдрес <> Неопределено Тогда
						ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
						Если ЗнЮрАдрес <> Неопределено Тогда
							
							СтруктураВозврата.ЮридическийАдрес = ЗнЮрАдрес.Представление;
							ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
							Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
								Если ТекСв.Тип = "Почтовый индекс" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление =  "Индекс";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "НаселенныйПункт";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 ТОгда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = ТекСв.Тип;
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								КонецЕсли;
							КонецЦикла;
							
							СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдресЗначенияПолей;
						КонецЕсли
					КонецЕсли;
					
					СвойствоРуководитель = ЗнДанных.Свойства().Получить("Руководитель");
					Если СвойствоРуководитель <> Неопределено Тогда
						ЗнРуководитель = ЗнДанных.Получить(СвойствоРуководитель);
						Если ЗнРуководитель <> Неопределено Тогда
							СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");
							Если СвойствоФизЛицо<> Неопределено Тогда
								ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);
								Если ФизЛицо <> Неопределено Тогда
									СтруктураВозврата.УказатьДанныеКонтактногоЛица = Истина;
									ФамилияКЛ = ""; ИмяКЛ = ""; ОтчествоКЛ = "";
									ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФизЛицо.ПолноеНаименование, ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
									СтруктураВозврата.ФамилияКЛ =  ФамилияКЛ;
									СтруктураВозврата.ИмяКЛ =      ИмяКЛ;
									СтруктураВозврата.ОтчествоКЛ = ОтчествоКЛ;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("ФизЛицо");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					
					СтруктураВозврата.ВидКомпании = 2;
					СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
					Если СвойствоИНН <> Неопределено Тогда
						СтруктураВозврата.ИНН = ЗнДанных.Получить(СвойствоИНН);
					КонецЕсли;
					
					СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
					Если СвойствоОКПО <> Неопределено Тогда
						КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
						СтруктураВозврата.КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
					КонецЕсли;
					
					СвойствоОФНаим = ЗнДанных.Свойства().Получить("ПолноеНаименование");
					Если СвойствоОФНаим <> Неопределено Тогда
						СтруктураВозврата.НаименованиеКонтрагента = ЗнДанных.Получить(СвойствоОфНаим);
						ФамилияКонтрагента = ""; ИмяКонтрагента = ""; ОтчествоКонтрагента = "";
						
						ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СтруктураВозврата.НаименованиеКонтрагента,
																	ФамилияКонтрагента,
																	ИмяКонтрагента,
																	ОтчествоКонтрагента);
						СтруктураВозврата.ФамилияКонтрагента =  ФамилияКонтрагента;
						СтруктураВозврата.ИмяКонтрагента =      ИмяКонтрагента;
						СтруктураВозврата.ОтчествоКонтрагента = ОтчествоКонтрагента;
					КонецЕсли;
					
					СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
					Если СвойствоЮрАдрес <> Неопределено Тогда
						
						ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
						Если ЗнЮрАдрес <> Неопределено Тогда
							
							СтруктураВозврата.ЮридическийАдрес = ЗнЮрАдрес.Представление;
							ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
							Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
								Если ТекСв.Тип = "Почтовый индекс" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "Индекс";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "НаселенныйПункт";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = ТекСв.Тип;
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								КонецЕсли;
							КонецЦикла;
							
							СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдресЗначенияПолей;
						КонецЕсли
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("Наименование");
			Если СвойствоЭД <> Неопределено Тогда
				СтруктураВозврата.Название = ЭД.Получить(СвойствоЭД);
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("Адрес");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					
					СтруктураВозврата.ФактическийАдрес = ЗнДанных.Представление;
					ФактическийАдресЗначенияПолей = Новый СписокЗначений;
					Для Каждого ТекСв Из ЗнДанных.АдресноеПоле Цикл
						Если ТекСв.Тип = "Почтовый индекс" Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Представление = "Индекс";
							ФактАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Представление = "НаселенныйПункт";
							ФактАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Значение = ТекСв.Значение;
							ФактАдресЗначения.Представление = ТекСв.Тип;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураВозврата.ФактическийАдресЗначенияПолей = ФактическийАдресЗначенияПолей;
				КонецЕсли;
			КонецЕсли;
		Исключение
			
			ОшибкаРазбора = Истина;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Разбирает файл данных электронного документа, создает/изменяет объекты ИБ по данным ЭД.
//
// Параметры:
//  СтруктураПараметров - структура параметров для разбора электронного документа, 
//  ДеревоРазбора - дерево значений, структура данных ранее разобранных ЭД.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами созданных/измененных объектов ИБ
//
Функция РазобратьФайлДанных(СтруктураПараметров, ДеревоРазбора = Неопределено) Экспорт
	
	Если ДеревоРазбора = Неопределено Тогда
		ДеревоРазбора = ИнициализироватьДеревоРазбора();
	КонецЕсли;
	
	Возврат ПолучитьДанныеИзФайла(СтруктураПараметров, ДеревоРазбора);
	
КонецФункции

// Получает ключевые данные файла из заголовка электронного документа с помощью XDTO-пакета.
//
// Параметры:
//  ИмяФайла - строка, путь к файлу, данные которого надо получить.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами электронного документа
//
Функция ПрочитатьШапкуФайлаCMLпоXDTO(ИмяФайла) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	СтруктураПараметров = Новый Структура;
	СтруктураУчастников = Новый Структура;
	
	ВидЭД = Неопределено;
	Отправитель = Неопределено;
	
	НомерДокументаОтправителя = Неопределено;
	ДатаДокументаОтправителя = Неопределено;
	ДатаФормированияЭДОтправителем = Неопределено;
	ИдЭДВладельца = Неопределено;
	НеизвестныйЭД = Ложь;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если НЕ ЭД.Свойства().Получить("ИД") = Неопределено Тогда
			ИдЭД = ЭД.Ид;
		КонецЕсли;
		
		ЕстьСвойствоИдФайл = ЭД.Свойства().Получить("ИдФайл") <> Неопределено;
		
		Если ЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Заказчик,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			СтруктураУчастников = Новый Структура;
			
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			СтруктураУчастников = Новый Структура;
			
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
			Отправитель = "Покупатель";
			ПризнакПродавца = Ложь;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Комитент,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			ПрочитатьДанныеКонтрагента(ЭД.Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
			Отправитель = "Покупатель";
			ПризнакПродавца = Ложь;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Комитент,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			ПрочитатьДанныеКонтрагента(ЭД.Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Если ЭД.Роль = "Продавец" Тогда
				ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
				Отправитель = "Продавец";
				ПризнакПродавца = Истина;
				
				ПрочитатьДанныеКонтрагента(ЭД.Заказчик,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
				ПрочитатьДанныеКонтрагента(ЭД.Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ИначеЕсли ЭД.Роль = "Покупатель" Тогда	
				ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
				Отправитель = "Покупатель";
				ПризнакПродавца = Ложь;
				
				ПрочитатьДанныеКонтрагента(ЭД.Заказчик,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
				ПрочитатьДанныеКонтрагента(ЭД.Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			КонецЕсли;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			Ошибка = ложь;
			
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
			ДатаДокументаОтправителя  = ЭД.ДатаФормирования;
			ПризнакПродавца = Истина;
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("КоммерческаяИнформация", "urn:1C.ru:commerceml_2") Тогда
			Если ТипЗнч(ЭД.Каталог) = Тип("ОбъектXDTO") Тогда
				ИдЭД = ЭД.Каталог.Ид;
				ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
			ИначеЕсли ТипЗнч(ЭД.Документ) = Тип("СписокXDTO") Тогда
				ИдЭД = ЭД.Документ[0].Ид;
				Если ЭД.Документ[0].ХозОперация = "Передача прав" Тогда
					ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
				КонецЕсли;
			КонецЕсли;
			ДатаДокументаОтправителя  = ЭД.ДатаФормирования;
			ПризнакПродавца = Истина;
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
			ПризнакПродавца = Истина;
			ДатаДокументаОтправителя  = ЭД.ДействительноС;
		ИначеЕсли ЕстьСвойствоИдФайл Тогда
			ИдЭД = ЭД.ИдФайл;
			// Обрабатываем случай когда к нам пришел сторонний XML файл.
			Если НЕ ЗначениеЗаполнено(ОбъектXML.URIПространстваИмен) Тогда
				
				// Вставляем во временный файл ЭД пространство имен 1С.
				ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭД, ИмяФайла);
			КонецЕсли;
			
			Если Найти(ЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "SFAKT"));
				ВидЭД = Перечисления.ВидыЭД.СчетФактура;
				ПризнакПродавца = Истина;
			ИначеЕсли Найти(ЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда // корректировочный счет-фактура
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "KORSFAKT"));
				ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
				ПризнакПродавца = Истина;
			ИначеЕсли Найти(ЭД.ИдФайл, "OKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OKORDOC"));
				ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
				ПризнакПродавца = Истина;
				НомерДокументаОтправителя = ЭД.Документ.СвТНО.ТН.НомТН;
				ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
				ДатаДокументаОтправителя  = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ СтрЗаменить(ЭД.Документ.ВремДок, ".", ""));
				
				ДеревоРазбора = ИнициализироватьДеревоРазбора();
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
				
				НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
				Поставщик = Неопределено;
				Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
					Поставщик = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
				ИначеЕсли ЭД.Документ.СвТНО.Поставщик <> Неопределено Тогда
					Поставщик = ЭД.Документ.СвТНО.Поставщик;
				КонецЕсли;
				Плательщик = ЭД.Документ.СвТНО.Плательщик;
				Ошибка = Ложь;
				
				Если Поставщик <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
				КонецЕсли;
				Если Плательщик <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
				КонецЕсли;
				
				СтруктураУчастников = Новый Структура;
				СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
				СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
				
			ИначеЕсли Найти(ЭД.ИдФайл, "OTORG12") > 0 Тогда // торг-12 титул продавца
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OTORG12"));
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
				ПризнакПродавца = Истина;
				НомерДокументаОтправителя = ЭД.Документ.СвТНО.ТН.НомТН;
				ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
				ДатаДокументаОтправителя  = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ СтрЗаменить(ЭД.Документ.ВремДок, ".", ""));
				
				ДеревоРазбора = ИнициализироватьДеревоРазбора();
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
				
				НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
				Поставщик = Неопределено;
				Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
					Поставщик = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
				ИначеЕсли ЭД.Документ.СвТНО.Поставщик <> Неопределено Тогда
					Поставщик = ЭД.Документ.СвТНО.Поставщик;
				КонецЕсли;
				Плательщик = ЭД.Документ.СвТНО.Плательщик;
				Ошибка = Ложь;
				
				Если Поставщик <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
				КонецЕсли;
				Если Плательщик <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
				КонецЕсли;
				
				СтруктураУчастников = Новый Структура;
				СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
				СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
				
			ИначеЕсли Найти(ЭД.ИдФайл, "PTORG12") > 0 Тогда // торг-12 титул покупателя
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "PTORG12"));
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
				ПризнакПродавца = Ложь;
				ИдЭДВладельца = Прав(СокрП(ЭД.Документ.ИдТНО.ИдФайлТН), 36);
				НомерДокументаОтправителя = ЭД.Документ.СвТНП.НомТН;
				ДатаДок = ЭД.Документ.СвТНП.ДатаТН;
				ДатаДокументаОтправителя  = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ СтрЗаменить(ЭД.Документ.ВремДок, ".", ""));
			ИначеЕсли Найти(ЭД.ИдФайл, "PKORDOC") > 0 Тогда // корректировочный торг-12 титул покупателя
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "PKORDOC"));
				ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
				ПризнакПродавца = Ложь;
				ИдЭДВладельца = Прав(СокрП(ЭД.Документ.ИдТНО.ИдФайлТН), 36);
				НомерДокументаОтправителя = ЭД.Документ.СвТНП.НомТН;
				ДатаДок = ЭД.Документ.СвТНП.ДатаТН;
				ДатаДокументаОтправителя  = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ СтрЗаменить(ЭД.Документ.ВремДок, ".", ""));
			ИначеЕсли Найти(ЭД.ИдФайл, "IAKTPRM") > 0 Тогда // Акт титул исполнителя
				АктВНовомФормате = АктВНовомФормате(ИмяФайла);
				Если АктВНовомФормате Тогда
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM2"));
				Иначе
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM"));
				КонецЕсли;
				ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
				ПризнакПродавца = Истина;
				НомерДокументаОтправителя = ЭД.Документ.СвАктИ.НомАкт;
				ДатаАкта = ЭД.Документ.СвАктИ.ДатаАкт;
				ДатаДокументаОтправителя  = Дата(Сред(ДатаАкта, 7, 4) + Сред(ДатаАкта, 4, 2) + Сред(ДатаАкта, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ ?(АктВНовомФормате, "", СтрЗаменить(ЭД.Документ.ВремДок, ".", "")));
				
				ДеревоРазбора = ИнициализироватьДеревоРазбора();
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
				
				НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
				Ошибка = Ложь;
				
				Исполнитель = ЭД.Документ.СвАктИ.Исполнитель;
				Если Исполнитель <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");
				КонецЕсли;
				
				Если АктВНовомФормате(ИмяФайла) Тогда
						ДеревоДопДанных = Неопределено;
						ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
						Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
							ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
						КонецЕсли;
						Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
							ДанныеЗаказчика = ДанныеЗаказчикаИзДопДанных(ДеревоДопДанных);
							Если НЕ ДанныеЗаказчика = Неопределено Тогда
								ПрочитатьДанныеКонтрагента(ДанныеЗаказчика, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
							КонецЕсли;
						КонецЕсли;
				Иначе
					Заказчик = ЭД.Документ.СвАктИ.Заказчик;
					Если Заказчик <> Неопределено Тогда
						ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
					КонецЕсли;
				КонецЕсли;
				
				СтруктураУчастников = Новый Структура;
				
				СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
				СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
			ИначеЕсли Найти(ЭД.ИдФайл, "ZAKTPRM") > 0 Тогда // Акт титул заказчика
				АктВНовомФормате = АктВНовомФормате(ИмяФайла);
				Если АктВНовомФормате Тогда
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "ZAKTPRM2"));
				Иначе
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "ZAKTPRM"));
				КонецЕсли;
				ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
				ПризнакПродавца = Ложь;
				ИдЭДВладельца = Прав(СокрП(ЭД.Документ.СвАктИ.ИдАктИ.ИдФайлАктИ), 36);
				НомерДокументаОтправителя = ЭД.Документ.СвАктИ.СвАктИ.НомАкт;
				ДатаАкт = ЭД.Документ.СвАктИ.СвАктИ.ДатаАкт;
				ДатаДокументаОтправителя = Дата(Сред(ДатаАкт, 7, 4) + Сред(ДатаАкт, 4, 2) + Сред(ДатаАкт, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ ?(АктВНовомФормате, "", СтрЗаменить(ЭД.Документ.ВремДок, ".", "")));
			Иначе
				НеизвестныйЭД = Истина;
			КонецЕсли
		Иначе
			НеизвестныйЭД = Истина;
		КонецЕсли;
		Если НеизвестныйЭД Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("НомерЭД", ИдЭД);
		СтруктураПараметров.Вставить("ВидЭД",   ВидЭД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(ИдЭД);
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		
		СтруктураПараметров.Вставить("НомерВерсииЭД",   НомерВерсииЭД);
		СтруктураПараметров.Вставить("ПризнакПродавца", ПризнакПродавца);
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",  ДатаДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтруктураПараметров.Вставить("ИдЭДВладельца", ИдЭДВладельца);
		Если СтруктураУчастников.Свойство("Организация") Тогда
			СтруктураПараметров.Вставить("Организация", СтруктураУчастников.Организация);
		КонецЕсли;
		Если СтруктураУчастников.Свойство("Контрагент") Тогда
			СтруктураПараметров.Вставить("Контрагент", СтруктураУчастников.Контрагент);
		КонецЕсли;
	Исключение
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Только для внутреннего использования
Процедура ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭлектронныйДокумент, ИмяФайла)
	
	ОбъектXML.Закрыть();
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	
	// Определим наше пространство имен
	URIПространстваИмен = "";
	Если Найти(ЭлектронныйДокумент.ИдФайл, "ON_SFAKT") > 0 Тогда
		URIПространстваИмен = "SFAKT";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "ON_KORSFAKT") > 0 Тогда // корректировочный счет-фактура
		URIПространстваИмен = "KORSFAKT";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "OTORG12") > 0 Тогда // торг-12 титул продавца
		URIПространстваИмен = "OTORG12";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "OKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
		URIПространстваИмен = "OKORDOC";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "PKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
		URIПространстваИмен = "PKORDOC";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "PTORG12") > 0 Тогда // торг-12 титул покупателя
		URIПространстваИмен = "PTORG12";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "IAKTPRM") > 0 Тогда // Акт титул исполнителя
		Если АктВНовомФормате(ИмяФайла) Тогда
			URIПространстваИмен = "IAKTPRM2";
		Иначе
			URIПространстваИмен = "IAKTPRM";
		КонецЕсли;
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "ZAKTPRM") > 0 Тогда // Акт титул заказчика
		Если АктВНовомФормате(ИмяФайла) Тогда
			URIПространстваИмен = "ZAKTPRM2";
		Иначе
			URIПространстваИмен = "ZAKTPRM";
		КонецЕсли;
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "DP_IZVPOL") > 0 Тогда
		URIПространстваИмен = "DP_IZVPOL";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "DP_UVUTOCH") > 0 Тогда
		URIПространстваИмен = "DP_UVUTOCH";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "POD_DPIZVPOL") > 0 Тогда
		URIПространстваИмен = "DP_IZVPOL";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "DP_PDOTPR") > 0 Тогда
		URIПространстваИмен = "DP_PDOTPR";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "DP_PDPOL") > 0 Тогда
		URIПространстваИмен = "DP_PDPOL";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "POD") > 0 Тогда
		URIПространстваИмен = "PDO";
	КонецЕсли;
	
	// Установим пространство имен 1С
	Если НЕ ЗначениеЗаполнено(ДокументDOM.ЭлементДокумента.URIПространстваИмен) Тогда
		ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", URIПространстваИмен);
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УдалитьПространствоИмен(ИмяФайла, ПространствоИмен)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайла,"windows-1251");
	СтрокаФайл = Текст.ПолучитьСтроку(2);
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИмен + """", "");
	Текст.ЗаменитьСтроку(2, СтрокаФайл);
	Текст.Записать(ИмяФайла, "windows-1251");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

// Получает информацию о товаре в массиве ЭД
//
// Параметры:
//  МассивЭД - массив ссылок на элементы справочника ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Таблица значений, содержащая информацию о товаре.
//
Функция ПолучитьИнформациюОТоваре(МассивЭД) Экспорт
	
	ТаблицаВозврата = Неопределено;
	ИменаДопКолонок = "";
	
	Для Каждого ТекЭД ИЗ МассивЭД Цикл
		Если ТекЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ТекЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ТекЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ЭД = ТекЭД.ЭлектронныйДокументВладелец;
		Иначе
			ЭД = ТекЭД;
		КонецЕсли;
		ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла = Неопределено Тогда
				ШаблонОшибки = НСтр("ru = 'Чтение электронного документа: %1.
				|Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			ДеревоДопДанных = Неопределено;
			ВыборкаЭДДопДанных = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(ЭД);
			Если ВыборкаЭДДопДанных.Следующий() Тогда
				ДопДанныеЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаЭДДопДанных.Ссылка,
					ВыборкаЭДДопДанных.Ссылка.УникальныйИдентификатор(), Истина);
				СсылкаНаДДДопДанныхЭД = "";
				Если ДопДанныеЭД.Свойство("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДДДопДанныхЭД)
					И ЗначениеЗаполнено(СсылкаНаДДДопДанныхЭД) Тогда
					ДанныеДопФайла = ПолучитьИзВременногоХранилища(СсылкаНаДДДопДанныхЭД);
				
					Если ЗначениеЗаполнено(ДопДанныеЭД.Расширение) Тогда
						ИмяФайлаДопДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопДанныеЭД.Расширение);
					Иначе
						ИмяФайлаДопДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
					КонецЕсли;
				
					Если ИмяФайлаДопДанных = Неопределено Тогда
						ШаблонОшибки = НСтр("ru = 'Чтение электронного документа доп. данных: %1.
						|Не удалось прочитать электронный документ доп. данных. Проверьте настройку рабочего каталога.'");
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ВыборкаЭДДопДанных.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						Продолжить;
					КонецЕсли;
					ДанныеДопФайла.Записать(ИмяФайлаДопДанных);
					ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ИмяФайлаДопДанных);
				КонецЕсли;
			КонецЕсли;
		
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 ИЛИ Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог(, ЭД.УникальныйИдентификатор());
				Если ПапкаДляРаспаковки = Неопределено Тогда
					ШаблонОшибки = НСтр("ru = 'Чтение электронного документа: %1.
					|Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
					Продолжить;
				КонецЕсли;
				УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
				Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
					ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
					Попытка
						ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
					Исключение
						ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
							ТекстОшибки, ТекстСообщения);
						Продолжить;
					КонецПопытки;
				Иначе
					ФайлПриемник = ПапкаДляРаспаковки + "\" + Новый УникальныйИдентификатор + ".xml";
					ЭлектронныеДокументыСлужебный.УдалитьЛишнийСлэшВПути(ФайлПриемник);
					КопироватьФайл(ИмяФайла, ФайлПриемник);
				КонецЕсли;
				ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
					ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
					Если Найти(РаспакованныйФайл.Имя, "packageDescription") Тогда
						Продолжить;
					КонецЕсли;
					ИнформацияОТовареИзФайлаXML(ИмяФайлаДанных, ТаблицаВозврата, ЭД, ДеревоДопДанных, ИменаДопКолонок);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Если ТипЗнч(ТаблицаВозврата) = Тип("ТаблицаЗначений") Тогда
		ТаблицаВозврата.Свернуть("ИД, Артикул, Наименование, БазоваяЕдиницаКод, БазоваяЕдиницаНаименование,
			|БазоваяЕдиницаНаименованиеПолное, БазоваяЕдиницаМеждународноеСокращение, Описание, ЭД" + ИменаДопКолонок);
	КонецЕсли;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

// Только для внутреннего использования
Процедура ИнформацияОТовареИзФайлаXML(ПолноеИмяФайла,
									  ТаблицаВозврата,
									  ЭД,
									  ДеревоДопДанных = Неопределено,
									  ИменаДопКолонок = "") Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	НеизвестныйЭД = Ложь;
	Попытка
		ОбъектXML.ОткрытьФайл(ПолноеИмяФайла);
		ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		НаборДанных = Неопределено;
		ЕстьСвойствоИдФайл = ЭД_XML.Свойства().Получить("ИдФайл") <> Неопределено;
		
		Если ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			НаборДанных = ЭД_XML["Предложения"].Предложение;
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML,,,,, ИменаДопКолонок);
		ИначеЕсли ЭД_XML.Тип() = ПолучитьТипЗначенияCML("КоммерческаяИнформация", "urn:1C.ru:commerceml_2") Тогда
			Если ТипЗнч(ЭД_XML.Каталог) = Тип("ОбъектXDTO") Тогда
				НаборДанных = ЭД_XML.Каталог["Товары"].Товар;
			ИначеЕсли ТипЗнч(ЭД_XML.Документ) = Тип("СписокXDTO") Тогда
				НаборДанных = ЭД_XML.Документ[0]["Товары"].Товар;
			КонецЕсли;
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML,,,,, ИменаДопКолонок);
		ИначеЕсли ЭД_XML.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02")
				ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02")
				ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02")
				ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02")
				ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02")
				ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02")
				ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			Если ЭД_XML["Товары"] <> Неопределено Тогда
				НаборДанных = ЭД_XML["Товары"].Товар;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML, , , , , ИменаДопКолонок);
			КонецЕсли;
		ИначеЕсли ЕстьСвойствоИдФайл Тогда
			// Обрабатываем случай когда к нам пришел сторонний XML файл.
			Если НЕ ЗначениеЗаполнено(ОбъектXML.URIПространстваИмен) Тогда
		
				// Вставляем во временный файл ЭД пространство имен 1С.
				ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭД_XML, ПолноеИмяФайла);
			КонецЕсли;
			
			Если Найти(ЭД_XML.ИдФайл, "OTORG12") > 0 Тогда
				ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OTORG12"));
				НаборДанных = ЭД_XML.Документ.СвТНО.ТН.Таблица.СвТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных,
					Истина, "Товары", , ИменаДопКолонок);
			ИначеЕсли Найти(ЭД_XML.ИдФайл, "OKORDOC") > 0 Тогда
				ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OKORDOC"));
				НаборДанных = ЭД_XML.Документ.СвТНО.ТН.Таблица.СвТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных,
					Истина, "Товары", , ИменаДопКолонок);
			ИначеЕсли Найти(ЭД_XML.ИдФайл, "IAKTPRM") > 0 Тогда
				Если АктВНовомФормате(ПолноеИмяФайла) Тогда
					ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM2"));
				Иначе
					ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM"));
				КонецЕсли;
				НаборДанныхОписанияРабот = ЭД_XML.Документ.СвАктИ.ОписРабот;
				НаборДанных = Неопределено;
				// Переберем номенклатуру из всех табличных частей акта.
				Для Сч = 0 По НаборДанныхОписанияРабот.Количество() - 1 Цикл
					ЭлементОписания = НаборДанныхОписанияРабот.ПолучитьXDTO(Сч);
					НаборДанных = ЭлементОписания.ПолучитьСписок("Работа");
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных,
						Истина, "Услуги", Сч + 1, ИменаДопКолонок);
				КонецЦикла;
			ИначеЕсли Найти(ЭД_XML.ИдФайл, "KORSFAKT") > 0 Тогда
				ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "KORSFAKT"));
				НаборДанных = ЭД_XML.Документ.ТаблКСчФ.СведТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных,
					Истина, "Товары");
			ИначеЕсли Найти(ЭД_XML.ИдФайл, "SFAKT") > 0 Тогда
				ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "SFAKT"));
				НаборДанных = ЭД_XML.Документ.ТаблСчФакт.СведТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных,
					Истина, "Товары");
			Иначе
				НеизвестныйЭД = Истина;
			КонецЕсли;
		Иначе
			НеизвестныйЭД = Истина;
		КонецЕсли;
		
		Если НеизвестныйЭД Тогда
			Если ПользователиСервер.ЭтоПолноправныйПользовательИБ() Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип при чтении данных из ЭД %1!'"), ЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ОбъектXML.Закрыть();
			Возврат;
		КонецЕсли;
		
	Исключение
		Если ПользователиСервер.ЭтоПолноправныйПользовательИБ() Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из ЭД %1: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ЭД, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД) Экспорт
	
	ТипЭлементаВерсииЭД = СсылкаНаЭД.ТипЭлементаВерсииЭД;
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		Иначе
			ВозвращаемыйТип = Неопределено;
		КонецЕсли;
	Иначе
		Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура 
		 ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			ВозвращаемыйТип = Неопределено;
		Иначе
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемыйТип;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  ПолноеИмяФайла - строка, путь к файлу, по которому необходимо сформировать печатную форму.
//  НаправлениеЭД - перечисление НаправлениеЭД
//  ИД - уникальный идентификатор объекта ЭД
//  
//  ИмяФайлаДопДанных - строка, путь к файлу доп.данных.
// 
//  ВидЭД - перечисление ссылка ВидыЭД, возвращает в вызывающую процедуру вид обрабатываемого ЭД.
// Возвращаемое значение:
//  Табличный документ с данными электронного документа.
//
Функция СформироватьПечатнуюФормуЭД(ПолноеИмяФайла, 
									НаправлениеЭД,
									ИД = Неопределено,
									ИмяФайлаПодчиненногоЭД = Неопределено,
									Знач НаименованиеЭД = Неопределено,
									ИмяФайлаДопДанных = Неопределено,
									ВидЭД = Неопределено) Экспорт
	
	Результат = СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ИмяФайлаДопДанных);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПечатнаяФормаЭД(Результат, НаправлениеЭД, ИД, ИмяФайлаПодчиненногоЭД, НаименованиеЭД, ВидЭД);
	
КонецФункции

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  СтруктураРазбораФайла - структура, содержит дерево разбора ЭД.
//  НаправлениеЭД - перечисление НаправлениеЭД
//  ИД - уникальный идентификатор объекта ЭД
//  
//  ИмяФайлаДопДанных - строка, путь к файлу доп.данных.
//  ВидЭД - перечисление ссылка ВидыЭД, возвращает в вызывающую процедуру вид обрабатываемого ЭД.
//
// Возвращаемое значение:
//  Табличный документ с данными электронного документа.
//
Функция ПечатнаяФормаЭД(СтруктураРазбораФайла, НаправлениеЭД, ИД = Неопределено, ИмяФайлаПодчиненногоЭД = Неопределено,
		Знач НаименованиеЭД = Неопределено, ВидЭД = Неопределено) Экспорт
	
	ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
	
	ВидЭД = СтрокаОбъекта.ВидЭД;
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбщийТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		НаименованиеЭД = Строка(ИД);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеЭД) Тогда
		МакетИдентификатораДокумента = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ИдентификаторДокумента");
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = НаименованиеЭД;
		ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		
		Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
			ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			ДанныеПокупателя = Новый Структура;
			Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
				НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, Перечисления.НаправленияЭД.Исходящий,
					Перечисления.НаправленияЭД.Входящий);
				ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя);
			КонецЕсли;
			
			ДанныеЭДДляПечати = ПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументТОРГ12_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ДанныеПокупателя);
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ДанныеПокупателя = Новый Структура;
			Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
				НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, Перечисления.НаправленияЭД.Исходящий,
					Перечисления.НаправленияЭД.Входящий);
				ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя);
			КонецЕсли;
			
			ДанныеЭДДляПечати = ПолучитьДанныеКорректировочногоДокументаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументКорректировочныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ДанныеПокупателя);
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик ТОгда
			
			ДанныеЗаказчика = Новый Структура;
			Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
				НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, Перечисления.НаправленияЭД.Исходящий,
					Перечисления.НаправленияЭД.Входящий);
				ЗаполнитьДанныеЗаказчика(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеЗаказчика);
			КонецЕсли;
			
			ДанныеЭДДляПечати = ПолучитьДанныеАкта501ДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументАкт501(ТабличныйДокумент, ДанныеЭДДляПечати, ДанныеЗаказчика);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, "Заказ");
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, "Заказ");
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеКорректировочногоСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументКорректировочныйСчетФактура_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеПрайсЛистаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументПрайсЛист_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеКаталогаТоваровДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеАктаНаПередачуПравДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументАктНаПередачуПрав(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот ТОгда
			
			ДанныеЭДДляПечати = ПолучитьДанныеАктовВыполненныхРаботДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеПодтвержденияДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументПодтверждение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеИзвещенияДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументИзвещение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеУточненияДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД);
			ЗаполнитьТабличныйДокументУточнение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			
				Если СтрокаОбъекта.ОписаниеТипа = "Сбербанк" Тогда
				ДанныеЭДДляПечати = ПолучитьДанныеПлатежногоПорученияСбербанкДляПечати(СтрокаОбъекта, ДеревоРазбора);
			Иначе
				ДанныеЭДДляПечати = ПолучитьДанныеПлатежногоПорученияДляПечати(СтрокаОбъекта);
			КонецЕсли;
			ЗаполнитьТабличныйДокументПлатежноеПоручениеИсходящее_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ИД);
		
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеЗапросаВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументЗапросВыписки_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументВыписки_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеКвитанцииДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументКвитанция_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		КонецЕсли;
		
		ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ТабличныйДокумент);
		
		ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
		ОбщийТабДок.АвтоМасштаб = Истина;
		ОбщийТабДок.ОтображатьЗаголовки = Ложь;
		ОбщийТабДок.ОтображатьСетку = Ложь;
		ОбщийТабДок.ТолькоПросмотр = Истина;
		
		Возврат ОбщийТабДок;
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка формирования табличного документа:
		|%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
													НСтр("ru = 'формирования табличного документа'"),
													ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
													ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Получает значение реквизита шапки электронного документа по его имени из строки разобранных данных.
//
// Параметры:
//  СтрокаДерева - строка дерева значений, параметры разбора электронного документа,
//  ИмяРеквизита - строка, имя реквизита, значение которого надо получить,
//  ДеревоРазбора - дерево значений - полная структура с данными разбора электронного документа.
//
// Возвращаемое значение:
//  Значение реквизита шапки электронного документа.
//
Функция ПолучитьРеквизитШапкиЭД(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // вернем ссылку
			Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Иначе
			Результат = НайденнаяСтрока.ЗначениеРеквизита;
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
			// тогда нашли всего лишь индекс строки.
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, умещаются ли переданные табличные документы
// на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//  Булево – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина)

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Преобразования значений

//Собирает из элементов структуры адреса строку записи адреса в формате 8 запятых
Функция СобратьАдрес(Знач СтруктураАдрес)
	
	Возврат "" + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.КодРегион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Кварт
	
КонецФункции

//Функция раскладывает строку с данными об адресе (в формате 8 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Индекс = "";
	КодРегион = "";
	Район = "";
	Город = "";
	НаселПункт = "";
	Улица = "";
	Дом = "";
	Корпус = "";
	Кварт = "";

	МассивАдрес = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();

	Если ЭлементовВМассиве > 0 тогда
		Индекс = СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве > 1 тогда
		КодРегион = СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 тогда
		Район = СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 тогда
		Город = СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 тогда
		НаселПункт = СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве > 5 тогда
		Улица = СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве > 6 тогда
		Дом = СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве > 7 тогда
		Корпус = СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве > 8 тогда
		Кварт = СокрЛП(МассивАдрес[8]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Индекс", Индекс);
	СтруктураВозврата.Вставить("КодРегион", КодРегион);
	СтруктураВозврата.Вставить("Район", Район);
	СтруктураВозврата.Вставить("Город", Город);
	СтруктураВозврата.Вставить("НаселПункт", НаселПункт);
	СтруктураВозврата.Вставить("Улица", Улица);
	СтруктураВозврата.Вставить("Дом", Дом);
	СтруктураВозврата.Вставить("Корпус", Корпус);
	СтруктураВозврата.Вставить("Кварт", Кварт);
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

// Ищет и возвращает первый ЭД, который имеет определенный ВидЭД и подчинен ЭД
// Если не найден - возвращается пустая ссылка
//
// Параметры
//  ЭД – СправочникСсылка.ЭДПрисоединенныеФайлы - владелец искомого электронного документа
//  ВидЭД – Перечисления.ВидыЭД - вид искомого электронного документа
//
// Возвращаемое значение:
// СправочникСсылка.ЭДПрисоединенныеФайлы
//
Функция ПодчиненныйДокумент(ЭД, ВидЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &Ссылка
	               |	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД";
	Запрос.УстановитьПараметр("Ссылка", ЭД);
	Запрос.УстановитьПараметр("ВидЭД",  ВидЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
	
КонецФункции

// Подготавливает строку запроса для получения банковской выписки
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - по какому соглашению идет обмен с банком
//  <ДатаНачала>  - <Дата> - дата начала периода запроса выписки
//  <ДатаНачала>  - <Дата> - дата окончания периода запроса выписки
//  <ИдентификаторЗапроса> - <УникальныйИдентификатор> - идентификатор запроса
//  <ФайлЗапроса> - <Строка> - файл для сохранения сформированного запроса
//  <ЕстьОшибка> - <Булево> - признак ошибки при формировании запроса
//
Процедура СформироватьЗапросВыписки(СоглашениеЭД,
									ДатаНачала,
									ДатаОкончания,
									ИдентификаторЗапроса,
									ФайлЗапроса,
									ЕстьОшибка) Экспорт

	ПространствоИмен = "http://bssys.com/upg/request";
	
	ТекстОшибки = "";
	ЕстьОшибка  = Ложь;
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	
	Попытка
		Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СоглашениеЭД, "Организация");
		Банк        = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СоглашениеЭД, "Контрагент");
		МассивСчетов = Новый Массив;
		ЭлектронныеДокументыПереопределяемый.ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивСчетов);
		
		Если МассивСчетов.Количество()=0 Тогда
			ТекстОшибки = НСтр("ru = 'Для формирования запроса выписки необходимо добавить банковский счет организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЕстьОшибка = Истина;
			Возврат;
		КонецЕсли;
		
		StmtReqType = ПолучитьОбъектТипаCML("StmtReqType", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(StmtReqType, "docExtId",   Строка(ИдентификаторЗапроса), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(StmtReqType, "createTime", ТекущаяДатаСеанса(),          Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(StmtReqType, "beginDate",  ДатаНачала,                   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(StmtReqType, "endDate",    КонецДня(ДатаОкончания),      Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(StmtReqType, "stmtType",   101,                          Истина, ТекстОшибки);
		
		РеквизитСокращенноеНаименованиеОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
																					"СокращенноеНаименованиеОрганизации");
		Если НЕ ЗначениеЗаполнено(РеквизитСокращенноеНаименованиеОрганизации) Тогда
			РеквизитСокращенноеНаименованиеОрганизации = "Наименование";
		КонецЕсли;
		Наименование = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, РеквизитСокращенноеНаименованиеОрганизации);
		ЗаполнитьСвойствоXDTO(StmtReqType, "orgName", Наименование, , ТекстОшибки);
		
		Accounts = ПолучитьОбъектТипаCML("StmtReqType.Accounts", ПространствоИмен);
		
		БИК = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Банк, "Код");
		Для Каждого Счет из МассивСчетов Цикл
			Acc = ПолучитьОбъектТипаCML("Acc",ПространствоИмен);
			ЗаполнитьСвойствоXDTO(Acc, "__content", Счет, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Acc, "bic",       БИК,  Истина, ТекстОшибки);
			Accounts.Account.Добавить(Acc);
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(StmtReqType, "Accounts", Accounts, Истина, ТекстОшибки);
		
		StmtReqType.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение Нстр("ru = 'Ошибка формирования запроса выписки'");
		КонецЕсли;
		
		ВыгрузитьЭДвФайл(StmtReqType, ФайлЗапроса);

	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонСообщения,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ЕстьОшибка = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьКорректировочныйСчетФактуруCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "KORSFAKT";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС  = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока46 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр",ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина,
			ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг,Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		
		СвКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "НомерКСчФ", СтруктураПараметров.НомерКоррСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "ДатаКСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаКоррСчФ), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "КодОКВ", СтруктураПараметров.КодВалюты, Истина, ТекстОшибки);
		
		НомерИсправленияКоррСчФ = Неопределено;
		ДатаИсправленияКоррСчФ = Неопределено;
		Если СтруктураПараметров.Свойство("НомерИсправленияКоррСчФ", НомерИсправленияКоррСчФ)
			И СтруктураПараметров.Свойство("ДатаИсправленияКоррСчФ", ДатаИсправленияКоррСчФ)
			И ЗначениеЗаполнено(НомерИсправленияКоррСчФ)
			И ЗначениеЗаполнено(ДатаИсправленияКоррСчФ) Тогда
			
			ИспрКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрКСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрКСчФ, "НомИспрКСчФ", НомерИсправленияКоррСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрКСчФ, "ДатаИспрКСчФ", ДатаДД_ММ_ГГГГ(ДатаИсправленияКоррСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИспрКСчФ", ИспрКСчФ, , ТекстОшибки);
		КонецЕсли;
		
		НомерИсправленияСчФ = Неопределено;
		ДатаИсправленияСчФ = Неопределено;
		Если СтруктураПараметров.Свойство("НомерИсправленияИсходногоСчФ", НомерИсправленияСчФ)
			И СтруктураПараметров.Свойство("ДатаИсправленияИсходногоСчФ", ДатаИсправленияСчФ)
			И ЗначениеЗаполнено(НомерИсправленияСчФ)
			И ЗначениеЗаполнено(ДатаИсправленияСчФ) Тогда
			
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомерИсправленияСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ,"ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(ДатаИсправленияСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИспрСчФ", ИспрСчФ, , ТекстОшибки);
		КонецЕсли;
		
		СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФCML(СвПрод, СтруктураПараметров.Организация, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвКСчФ, "СвПрод", СвПрод, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФCML(СвПокуп, СтруктураПараметров.Контрагент, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвКСчФ, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвКСчФ", СвКСчФ, Истина, ТекстОшибки);
		
		ТаблКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ", ПространствоИменСхемы);
		
		Для Каждого Товар из СтруктураПараметров.ТаблицаТоваров Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СведТов, "НомСтр", Товар.НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаименованиеНоменклатуры, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_ТовДо", Товар.ЕдиницаИзмеренияКодДо, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_ТовПосле", Товар.ЕдиницаИзмеренияКод, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "КолТовДо", Товар.КоличествоДо, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "КолТовПосле", Товар.Количество, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТовДо", Окр(Товар.ЦенаДо, 2), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТовПосле", Окр(Товар.Цена, 2), , ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.СуммаБезНДСДо) И ЗначениеЗаполнено(Товар.СуммаБезНДС) Тогда
				СтоимТип = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИменСхемы);
				
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", Товар.СуммаБезНДСДо, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм", Товар.СуммаБезНДС, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУвел", Товар.СуммаБезНДСУвеличение, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Товар.СуммаБезНДСУменьшение, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СведТов, "СтТовБезНДС", СтоимТип, , ТекстОшибки);
			КонецЕсли;
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Товар.АкцизаДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизДо", СумАкцизТип, Истина, ТекстОшибки);
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Товар.Акциза, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизПосле", СумАкцизТип, Истина, ТекстОшибки);
			
			РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИменСхемы);
			АкцизаДо = ?(Товар.АкцизаДо = "без акциза", 0, Товар.АкцизаДо);
			АкцизаПосле = ?(Товар.Акциза = "без акциза", 0, Товар.Акциза);
			Если АкцизаДо < АкцизаПосле Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", АкцизаПосле - АкцизаДо, , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУм", АкцизаДо - АкцизаПосле, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизРазн", РазнСумНалТип, Истина, ТекстОшибки);
			
			НалСтДо = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НалСтДо", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСтДо, "НалСтВел", Товар.СтавкаНДСДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСтДо, "НалСтТип", Товар.СтавкаНДСТипДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСтДо", НалСтДо, Истина, ТекстОшибки);
			
			НалСтПосле = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НалСтПосле", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСтПосле, "НалСтВел", Товар.СтавкаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСтПосле, "НалСтТип", Товар.СтавкаНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСтПосле", НалСтПосле, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если Товар.СтавкаНДСДо = "без НДС" Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "без НДС", Истина, ТекстОшибки);
			ИначеЕсли Товар.СуммаНДСДо = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СуммаНДСДо, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалДо", СумНДСТип, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если Товар.СтавкаНДС = "без НДС" Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "без НДС", Истина, ТекстОшибки);
			ИначеЕсли Товар.СуммаНДС = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалПосле", СумНДСТип, Истина, ТекстОшибки);
			
			РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(Товар.СуммаНДСУменьшение) Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУм", Товар.СуммаНДСУменьшение, , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", Товар.СуммаНДСУвеличение, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалРазн", РазнСумНалТип, Истина, ТекстОшибки);
			
			СтоимТип = ПолучитьОбъектТипаCML("СтоимТип",ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", Товар.СуммаДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм",Товар.Сумма, Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.СуммаУвеличение) Тогда
				ЗаполнитьСвойствоXDTO(СтоимТип,"СтоимУвел", Товар.СуммаУвеличение, , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Товар.СуммаУменьшение, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СтТовУчНал", СтоимТип, , ТекстОшибки);
			
			Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
				Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Товары", Строка(Товар.НомерСтроки)) Тогда
					СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
					ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТаблКСчФ.СведТов.Добавить(СведТов);
		КонецЦикла;
		
		Если СтруктураПараметров.СуммаСНДСВсегоУвеличение > 0 И СтруктураПараметров.СуммаБезНДСВсегоУвеличение > 0 Тогда
			ВсегоУвел = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУвел", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовБезНДСВсего", СтруктураПараметров.СуммаБезНДСВсегоУвеличение, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовУчНалВсего", СтруктураПараметров.СуммаСНДСВсегоУвеличение, Истина, ТекстОшибки);
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если СтруктураПараметров.СуммаНДСУвеличение = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(СтруктураПараметров.СуммаНДСУвеличение, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТаблКСчФ, "ВсегоУвел", ВсегоУвел, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.СуммаСНДСВсегоУменьшение > 0 И СтруктураПараметров.СуммаБезНДСВсегоУменьшение > 0 Тогда
			ВсегоУм = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУм", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовБезНДСВсего", СтруктураПараметров.СуммаБезНДСВсегоУменьшение, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовУчНалВсего", СтруктураПараметров.СуммаСНДСВсегоУменьшение, Истина, ТекстОшибки);
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если СтруктураПараметров.СуммаНДСУменьшение = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе	
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(СтруктураПараметров.СуммаНДСУменьшение, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТаблКСчФ, "ВсегоУм", ВсегоУм, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "ТаблКСчФ", ТаблКСчФ, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьСчетФактуруCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "SFAKT";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   СтруктураПараметров.ИдФайл,  Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),  Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		
		СвСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ),Истина,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "КодОКВ", СтруктураПараметров.КодВалюты, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.НомерИсправленияИсходногоСчФ)
			И ЗначениеЗаполнено(СтруктураПараметров.ДатаИсправленияИсходногоСчФ) Тогда
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", СтруктураПараметров.НомерИсправленияИсходногоСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаИсправленияИсходногоСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвСчФакт,"ИспрСчФ", ИспрСчФ,,ТекстОшибки);
		КонецЕсли;
		
		СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФCML(СвПрод, СтруктураПараметров.Организация, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПрод", СвПрод, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСДляЭСФCML(СвПокуп, СтруктураПараметров.Контрагент, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвГрузоотправителя = "";
		Если НЕ СтруктураПараметров.ТолькоУслуги И СтруктураПараметров.Свойство("СведенияОГрузоотправителе", СвГрузоотправителя)
			И ТипЗнч(СвГрузоотправителя) = Тип("Структура") Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИменСхемы);
			ОнЖе = "";
			Если СвГрузоотправителя.Свойство("ОнЖе", ОнЖе) И ОнЖе = Истина Тогда // "=" - т.к. тип ОнЖе может быть не булево
				ЗаполнитьСвойствоXDTO(ГрузОт, "ОнЖе", "он же", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
			Иначе
				Грузоотправитель = Неопределено;
				СвГрузПолуч = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
				Если СвГрузоотправителя.Свойство("Грузоотправитель", Грузоотправитель)
					И ЗаполнитьДанныеГрузоотправителяПолучателяЭСФCML(СвГрузПолуч, Грузоотправитель, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", СвГрузПолуч, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Грузополучатель = Неопределено;
		СвГрузПолуч = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
		Если НЕ СтруктураПараметров.ТолькоУслуги И СтруктураПараметров.Свойство("Грузополучатель", Грузополучатель)
			И ЗаполнитьДанныеГрузоотправителяПолучателяЭСФCML(СвГрузПолуч, Грузополучатель, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузПолуч", СвГрузПолуч, Истина, ТекстОшибки);
		КонецЕсли;
		
		ПлатежныеДокументы = Неопределено;
		Если СтруктураПараметров.Свойство("ПлатежныеДокументы", ПлатежныеДокументы) И ТипЗнч(ПлатежныеДокументы) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаПлатежки Из ПлатежныеДокументы Цикл
				СвПРД = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.СвПРД", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвПРД, "НомерПРД", СтрокаПлатежки.НомерПРД, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвПРД, "ДатаПРД", ДатаДД_ММ_ГГГГ(СтрокаПлатежки.ДатаПРД), Истина, ТекстОшибки);
				СвСчФакт.СвПРД.Добавить(СвПРД);
			КонецЦикла
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвСчФакт, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", СвСчФакт, Истина, ТекстОшибки);
		ТаблСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт", ПространствоИменСхемы);
		
		Для Каждого Товар из СтруктураПараметров.ТаблицаТоваров Цикл
			КолонкиТЗ = СтруктураПараметров.ТаблицаТоваров.Колонки;
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомСтр", Товар.НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаименованиеНоменклатуры, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "СтТовУчНал", Товар.Сумма, Истина, ТекстОшибки);
			
			Акциз = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.Акциз", ПространствоИменСхемы);
			Если НЕ ЗначениеЗаполнено(Товар.Акциза) Тогда
				ЗначениеАкциза = "без акциза";
			Иначе
				Если ТипЗнч(Товар.Акциза) = Тип("Число") Тогда
					ЗначениеАкциза = Формат(Товар.Акциза, "ЧДЦ=2; ЧРД=.; ЧГ=");
				Иначе
					ЗначениеАкциза = СокрЛП(Товар.Акциза);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Акциз, "СумАкциз", ЗначениеАкциза, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Акциз", Акциз, Истина, ТекстОшибки);
			
			НалСт = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.НалСт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСт, "НалСтВел", Товар.СтавкаНДС, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСт, "НалСтТип", Товар.СтавкаНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСт", НалСт, Истина, ТекстОшибки);
			
			Если КолонкиТЗ.Найти("ЕдиницаИзмеренияКод") <> Неопределено И ЗначениеЗаполнено(Товар.ЕдиницаИзмеренияКод) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.ЕдиницаИзмеренияКод, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("Количество") <> Неопределено И ЗначениеЗаполнено(Товар.Количество) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КолТов", Товар.Количество, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("Цена") <> Неопределено И ЗначениеЗаполнено(Товар.Цена) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТов", Товар.Цена, , ТекстОшибки);
			КонецЕсли;
			Если КолонкиТЗ.Найти("СуммаБезНДС") <> Неопределено И ЗначениеЗаполнено(Товар.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СтТовБезНДС", Товар.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			
			Если КолонкиТЗ.Найти("КодСтраныПроисхождения") <> Неопределено Тогда
				Если ТипЗнч(Товар.КодСтраныПроисхождения) = Тип("Массив") Тогда
					Для Каждого КодСтраны Из Товар.КодСтраныПроисхождения Цикл
						СведТов.КодПроисх.Добавить(КодСтраны);
					КонецЦикла;
				ИначеЕсли ЗначениеЗаполнено(Товар.КодСтраныПроисхождения) Тогда
					СведТов.КодПроисх.Добавить(Товар.КодСтраныПроисхождения);
				КонецЕсли;
			КонецЕсли;
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если ВРег(СокрЛП(Товар.СтавкаНДС)) = ВРег("без НДС") Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "без НДС", Истина, ТекстОшибки);
			Иначе
				Если Товар.СуммаНДС = 0 Тогда
					ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
				Иначе
					ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			
			Если КолонкиТЗ.Найти("НомерТаможеннойДекларации") <> Неопределено Тогда
				Если ТипЗнч(Товар.НомерТаможеннойДекларации) = Тип("Массив") Тогда
					Для Каждого ТД ИЗ Товар.НомерТаможеннойДекларации Цикл
						СведТов.НомерТД.Добавить(ТД);
					КонецЦикла;
				ИначеЕсли ТипЗнч(Товар.НомерТаможеннойДекларации) = Тип("Строка") И ЗначениеЗаполнено(Товар.НомерТаможеннойДекларации) Тогда
					СведТов.НомерТД.Добавить(Товар.НомерТаможеннойДекларации);
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
				Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Товары", Строка(Товар.НомерСтроки)) Тогда
					СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
					ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТаблСчФакт.СведТов.Добавить(СведТов);
		КонецЦикла;
		
		ВсегоОпл = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИменСхемы);
		СуммаБезНДСВсего = Неопределено;
		Если СтруктураПараметров.Свойство("СуммаБезНДСВсего", СуммаБезНДСВсего) Тогда
			ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", СуммаБезНДСВсего, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", СтруктураПараметров.СуммаСНДСВсего, Истина, ТекстОшибки);
		
		СумНалВсего = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего", ПространствоИменСхемы);
		
		Если СтруктураПараметров.СуммаНДСВсего = 0 Тогда
			ЗаполнитьСвойствоXDTO(СумНалВсего,"СумНДС", "без НДС", Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(СумНалВсего,"СумНДС", Формат(СтруктураПараметров.СуммаНДСВсего, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
				ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНалВсего, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТаблСчФакт, "ВсегоОпл", ВсегоОпл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТаблСчФакт, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Соглашение об и.
//
// Параметры
//  ДеревоДанных – ДеревоЗначений, содержит данные для формирования ЭД
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьКорректировочныйДокументCML(ДеревоДанных)
	
	ТекстОшибки = "";
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
		
	ПространствоИменСхемы = "OKORDOC";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЗначениеРеквизитаВДереве(ДеревоДанных,"ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЗначениеРеквизитаВДереве(ДеревоДанных,"ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(
				СвУчДокОбор,
				"ИдОтпр",
				ОписаниеТиповСтрока43.ПривестиЗначение(ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдОтпр")),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				СвУчДокОбор,
				"ИдПок",
				ОписаниеТиповСтрока43.ПривестиЗначение(ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдПок")),
				Истина,
				ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			НаимОрг = ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.НаимОрг");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
			ИННЮЛ = ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИННЮЛ");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
			ИдЭДО = ЗначениеРеквизитаВДереве(ДеревоДанных,"РеквизитыОператораЭДО.ИдЭДО");
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
			
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(
				Документ,
				"ДатаДок",
				ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаДок")),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ЗначениеРеквизитаВДереве(ДеревоДанных,"ВремДок"), Истина, ТекстОшибки);
		
		СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		
		Поставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНС(Поставщик, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Поставщик") Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик", Поставщик, , ТекстОшибки);
		КонецЕсли;
		
		Плательщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНС(Плательщик, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "Плательщик") Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик", Плательщик, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		
		ГрузоотправительЗаполнен = ЗаполнитьДанныеУчастникаФНС(
											Грузоотправитель,
											ДеревоДанных,
											ТекстОшибки,
											ПространствоИменСхемы,
											"Грузоотправитель");
		
		Если ГрузоотправительЗаполнен Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ГрузОт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", Грузоотправитель, , ТекстОшибки);
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель.КодОКПД")) Тогда
				ЗаполнитьСвойствоXDTO(
						ГрузОт,
						"ОКДП",
						ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель.КодОКПД"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель.СтруктурноеПодразделение")) Тогда
				ЗаполнитьСвойствоXDTO(
						ГрузОт,
						"СтруктПодр",
						ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель.СтруктурноеПодразделение"),
						,
						ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузОт", ГрузОт, , ТекстОшибки);
		КонецЕсли;
		
		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ГрузополучательЗаполнен = ЗаполнитьДанныеУчастникаФНС(
											Грузополучатель,
											ДеревоДанных,
											ТекстОшибки,
											ПространствоИменСхемы,
											"Грузополучатель");
		
		Если ГрузополучательЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч", Грузополучатель, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНаименование"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНомер"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДата"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДопСведения")) Тогда
			Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНаименование")) Тогда
				ЗаполнитьСвойствоXDTO(
						Основание,
						"НаимОсн",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНаименование"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНомер")) Тогда
				ЗаполнитьСвойствоXDTO(
						Основание,
						"НомОсн",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеНомер"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДата")) Тогда
				ЗаполнитьСвойствоXDTO(
						Основание,
						"ДатаОсн",
						ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДата")),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДопСведения")) Тогда
				ЗаполнитьСвойствоXDTO(
						Основание,
						"ДопСвОсн",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ДокОснованиеДопСведения"),
						,
						ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "Основание", Основание, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяНомер"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяДата")) Тогда
			ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТранНакл", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяНомер")) Тогда
				ЗаполнитьСвойствоXDTO(
						ТранНакл,
						"НомТранНакл",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяНомер"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяДата")) Тогда
				ЗаполнитьСвойствоXDTO(
						ТранНакл,
						"ДатаТранНакл",
						ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных,"ТранспортнаяНакладнаяДата")),
						,
						ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ТранНакл", ТранНакл, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"КодВидаОперации")) Тогда
			ЗаполнитьСвойствоXDTO(
					СвТНО,
					"ВидОперации",
					ЗначениеРеквизитаВДереве(ДеревоДанных,"КодВидаОперации"),
					,
					ТекстОшибки);
		КонецЕсли;
		
		ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(
				ТН,
				"НомТН",
				ЗначениеРеквизитаВДереве(ДеревоДанных,"НомерТоварнойНакладной"),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				ТН,
				"ДатаТН",
				ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаТоварнойНакладной")),
				Истина,
				ТекстОшибки);
		
		Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");

		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.Значение, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СведТов,
					"НаимЕдИзм",
					Строка(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмерения")),
					Истина,
					ТекстОшибки);
			МассаНеттоДоКорректировки = ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНеттоДоКорректировки");
			МассаНеттоДоКорректировки = ?(ЗначениеЗаполнено(МассаНеттоДоКорректировки), МассаНеттоДоКорректировки, 0);
			ЗаполнитьСвойствоXDTO(СведТов, "НеттоДоКорректировки", МассаНеттоДоКорректировки, Истина, ТекстОшибки);
			МассаНетто = ?(ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто")),
							ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто"),
							0);
			ЗаполнитьСвойствоXDTO(СведТов, "Нетто", МассаНетто, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"НаимТов",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"ОКЕИ_Тов",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеХарактеристики")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"ХарактерТов",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеХарактеристики"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Сорт")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"СортТов",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Сорт"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Артикул")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"АртикулТов",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Артикул"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КодТовара")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"КодТов",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КодТовара"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ВидУпаковки")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"ВидУпак",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ВидУпаковки"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоВОдномМесте")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"Место",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоВОдномМесте"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоМест")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"КолМест",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоМест"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаБрутто")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"Брутто",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаБрутто"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЦенаДоКорректировки")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"ЦенаДоКорректировки",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЦенаДоКорректировки"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Цена")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"Цена",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Цена"),
						,
						ТекстОшибки);
			КонецЕсли;
			СумБезНДСДоКорректировки = ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДСДоКорректировки");
			Если ЗначениеЗаполнено(СумБезНДСДоКорректировки) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДСДоКорректировки", СумБезНДСДоКорректировки, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"СумБезНДС",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС")) Тогда
				СтавкаНДС = ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
				ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", СтавкаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДСДоКорректировки")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"СумНДСДоКорректировки",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДСДоКорректировки"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"СумНДС",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДСДоКорректировки")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"СумУчНДСДоКорректировки",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДСДоКорректировки"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС")) Тогда
				ЗаполнитьСвойствоXDTO(
						СведТов,
						"СумУчНДС",
						ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС"),
						,
						ТекстОшибки);
			КонецЕсли;
					
			СтруктураДопДанных = Новый Структура;
			СтрокаДопДанных = Товар.Строки.Найти("ТаблицаТоваров.НомерСтроки.ДопДанные.НеПодписанные", "ПолныйПуть", Истина);
			Для Каждого Элемент из СтрокаДопДанных.Строки Цикл
				СтруктураДопДанных.Вставить(ОбщегоНазначенияЭД.НазваниеКолонки(Элемент.ПолныйПуть), Элемент.Значение);
			КонецЦикла;
			
			Номенклатура = ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Номенклатура");
			ИДТовара = Номенклатура.УникальныйИдентификатор();
			Характеристика = ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Характеристика");
			ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
			Упаковка = ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Упаковка");
			ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
	
			СтруктураДопДанных.Вставить("ИД", Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки));
			
			ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
																СтруктураДопДанных,
																"Товары",
																Ложь,
																Товар.Значение);
						
			СтруктураДопДанных = Новый Структура;
			СтрокаДопДанных = Товар.Строки.Найти("ТаблицаТоваров.НомерСтроки.ДопДанные.Подписанные", "ПолныйПуть", Истина);
			Для Каждого Элемент из СтрокаДопДанных.Строки Цикл
				СтруктураДопДанных.Вставить(ОбщегоНазначенияЭД.НазваниеКолонки(Элемент.ПолныйПуть), Элемент.Значение);
			КонецЦикла;
						
			МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(
								"OKORDOC",
								"Файл.Документ.СвТНО.ТН.Таблица.СвТов",
								"ИнфПолСтр",
								ВидФасетаXDTO.МаксДлина);
								
			СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	
			ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
																СтруктураДопДанных,
																"Товары",
																Истина,
																Товар.Значение);
			
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ДопДанные.Подписанные")) Тогда
				ЕстьДопДанные = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров,
																	ТекстОшибки,
																	Истина,
																	"Товары",
																	Строка(Товар.Значение));
				Если ЕстьДопДанные Тогда
					СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
					ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Таблица.СвТов.Добавить(СведТов);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.КоличествоМест"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаБрутто"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДС"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДС"))
		 ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДС")) Тогда
			
			ВсегоНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.КоличествоМест")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"КолМестВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.КоличествоМест"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаБрутто")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"БруттоВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаБрутто"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"НеттоДоКорректировкиВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"НеттоВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.МассаНетто"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДСДоКорректировки")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"СумБезНДСДоКорректировкиВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДСДоКорректировки"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДС")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"СумБезНДСВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаБезНДС"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДСДоКорректировки")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"СумНДСДоКорректировкиВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДСДоКорректировки"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДС")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"СумНДСВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаНДС"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДСДоКорректировки")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"СумУчНДСДоКорректировкиВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДСДоКорректировки"),
						,
						ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДС")) Тогда
				ЗаполнитьСвойствоXDTO(
						ВсегоНакл,
						"СумУчНДСВс",
						ЗначениеРеквизитаВДереве(ДеревоДанных,"ВсегоПоНакладной.СуммаСНДС"),
						,
						ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		КонецЕсли;
		
		КоличествоПорядковыхНомеровЗаписей = ЗначениеРеквизитаВДереве(
													ДеревоДанных,
													"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей");
		ВсегоМест = ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест");
		КоличествоПорядковыхНомеровЗаписейПрописью = ЗначениеРеквизитаВДереве(
															ДеревоДанных,
															"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью");
		ВсегоМестПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью");
		МассаГрузаНеттоПрописью = ЗначениеРеквизитаВДереве(
											ДеревоДанных,
											"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНеттоПрописью");
		МассаГрузаБруттоПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных,
															"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБруттоПрописью");
		МассаГрузаБрутто = ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто");
		МассаГрузаНетто  = ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто");
		
		Если ЗначениеЗаполнено(КоличествоПорядковыхНомеровЗаписей) ИЛИ ЗначениеЗаполнено(ВсегоМест)
		 ИЛИ ЗначениеЗаполнено(КоличествоПорядковыхНомеровЗаписейПрописью) ИЛИ ЗначениеЗаполнено(ВсегоМестПрописью)
		 ИЛИ ЗначениеЗаполнено(МассаГрузаНеттоПрописью) ИЛИ ЗначениеЗаполнено(МассаГрузаБруттоПрописью)
		 ИЛИ ЗначениеЗаполнено(МассаГрузаБрутто) ИЛИ ЗначениеЗаполнено(МассаГрузаНетто) Тогда
			ТНОбщ = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.ТНОбщ", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(КоличествоПорядковыхНомеровЗаписей) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗап", КоличествоПорядковыхНомеровЗаписей, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(КоличествоПорядковыхНомеровЗаписейПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗапПр", КоличествоПорядковыхНомеровЗаписейПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВсегоМест) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМест", ВсегоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВсегоМестПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМестПр", ВсегоМестПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(МассаГрузаНетто) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "Нетто", МассаГрузаНетто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(МассаГрузаНеттоПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "НеттоПр", МассаГрузаНеттоПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(МассаГрузаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "Брутто", МассаГрузаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(МассаГрузаБруттоПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "БруттоПр", МассаГрузаБруттоПрописью, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ТН, "ТНОбщ", ТНОбщ, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза")) Тогда
			ОтпускГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз", ПространствоИменСхемы);
			Если НЕ ПустаяСтрока(ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму")) Тогда
				ЗаполнитьСвойствоXDTO(
						ОтпускГруз,
						"СумОтпуск",
						ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму"),
						Истина,
						ТекстОшибки);
			КонецЕсли;
			ОтпущеноНаСуммуПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью");
			Если ЗначениеЗаполнено(ОтпущеноНаСуммуПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпускПр", ОтпущеноНаСуммуПрописью, , ТекстОшибки);
			КонецЕсли;
			ПриложениеКоличествоЛистов = ЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"СведенияПоОтпускуГруза.ПриложениеКоличествоЛистов");
			Если ЗначениеЗаполнено(ПриложениеКоличествоЛистов) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрил", ПриложениеКоличествоЛистов, , ТекстОшибки);
			КонецЕсли;
			ПриложениеКоличествоЛистовПрописью = ЗначениеРеквизитаВДереве(
														ДеревоДанных,
														"СведенияПоОтпускуГруза.ПриложениеКоличествоЛистовПрописью");
			Если ЗначениеЗаполнено(ПриложениеКоличествоЛистовПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрилПр", ПриложениеКоличествоЛистовПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска")) Тогда
				ЗаполнитьСвойствоXDTO(
						ОтпускГруз,
						"ДатаОтпуск",
						ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска")),
						,
						ТекстОшибки);
			КонецЕсли;
			ОтпускРазрешил = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			ЗаполненоОтпускРазрешил = ЗаполнитьДолжностноеЛицоФНС(
												ОтпускРазрешил,
												ДеревоДанных,
												ТекстОшибки,
												ПространствоИменСхемы,
												"СведенияПоОтпускуГруза.ОтпускРазрешил");
			Если ЗаполненоОтпускРазрешил Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускРазреш", ОтпускРазрешил, , ТекстОшибки);
			КонецЕсли;
			Бухгалтер = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			ЗаполненБухгалтер = ЗаполнитьДолжностноеЛицоФНС(Бухгалтер,
															ДеревоДанных,
															ТекстОшибки,
															ПространствоИменСхемы,
															"СведенияПоОтпускуГруза.Бухгалтер");
			Если ЗаполненБухгалтер Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "Бухгалтер", Бухгалтер, , ТекстОшибки);
			КонецЕсли;
			ОтпускПроизвел = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			ЗаполненоОтпускПроизвел = ЗаполнитьДолжностноеЛицоФНС(
												ОтпускПроизвел,
												ДеревоДанных,
												ТекстОшибки,
												ПространствоИменСхемы,
												"СведенияПоОтпускуГруза.ОтпускПроизвел");
			Если ЗаполненоОтпускПроизвел Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускПроизв", ОтпускПроизвел, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ОтпускГруз", ОтпускГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтруктураДопДанных = Новый Структура;
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть", Истина);
		Для Каждого Элемент из СтрокаДопДанных.Строки Цикл
			СтруктураДопДанных.Вставить(ОбщегоНазначенияЭД.НазваниеКолонки(Элемент.ПолныйПуть), Элемент.Значение);
		КонецЦикла;
		ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Ложь);
						
		СтруктураДопДанных = Новый Структура;
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
		Для Каждого Элемент из СтрокаДопДанных.Строки Цикл
			СтруктураДопДанных.Вставить(ОбщегоНазначенияЭД.НазваниеКолонки(Элемент.ПолныйПуть), Элемент.Значение);
		КонецЦикла;
						
		МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(
								"OKORDOC",
								"Файл.Документ.СвТНО.ИнфПол",
								"ТекстИнф",
								ВидФасетаXDTO.МаксДлина);
								
		СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
		ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
	
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
			Если ДопФайлСформирован Тогда
				ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
				ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла", СтруктураПараметров.ИдентификаторДопФайла);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		Если ЗаполнитьВДеревеДанныеПодписанта(Подписант, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ВыгрузитьЭДвФайл(Файл, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  ДеревоДанных – дерево значений - содержит данные для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьКорректировочныйДокументПокупательCML(ДеревоДанных)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = "PKORDOC";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ЗначениеРеквизитаВДереве(ДеревоДанных,"ИдФайл"));
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"),       , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(
				СвУчДокОбор,
				"ИдОтпр",
				ОписаниеТиповСтрока43.ПривестиЗначение(ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдОтпр")),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				СвУчДокОбор,
				"ИдПок",
				ОписаниеТиповСтрока43.ПривестиЗначение(ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдПок")),
				Истина,
				ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО")) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					"НаимОрг",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.НаимОрг"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					"ИННЮЛ",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИННЮЛ"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					СвОЭДОтпр,
					"ИдЭДО",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОператораЭДО.ИдЭДО"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(
				Документ,
				"ДатаДок",
				ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДок")),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				Документ,
				"ВремДок",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДок"),
				Истина,
				ТекстОшибки);
		
		ИдТНО = ПолучитьОбъектТипаCML("Файл.Документ.ИдТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ИдФайлТН", ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайлТН"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				ИдТНО,
				"ДатаДокТН",
				ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокТН")),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ВремДокТН", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВремДокТН"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ИдТНО", ИдТНО, Истина, ТекстОшибки);
		
		СвТНП = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомФорм", ЗначениеРеквизитаВДереве(ДеревоДанных, "НомФорм"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				СвТНП,
				"НомТН",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"),
				,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				СвТНП,
				"ДатаТН",
				ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной")),
				Истина,
				ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза")) Тогда
			ПолучилГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(
					ПолучилГруз,
					"ДатаПолуч",
					ДатаДД_ММ_ГГГГ(ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза")),
					Истина,
					ТекстОшибки);
					
			ОрганизацияВыдавшаяДоверенность = ЗначениеРеквизитаВДереве(
													ДеревоДанных,
													"Доверенность.ОрганизацияВыдавшаяДоверенность");
			НомерДоверенности = ЗначениеРеквизитаВДереве(ДеревоДанных, "Доверенность.НомерДоверенности");
			ДатаДоверенности  = ЗначениеРеквизитаВДереве(ДеревоДанных, "Доверенность.ДатаДоверенности");
			ДопСведенияОВыдачеДоверенности = ЗначениеРеквизитаВДереве(
													ДеревоДанных,
													"Доверенность.ДопСведенияОВыдачеДоверенности");
			ДопСведенияОДоверенномЛице = ЗначениеРеквизитаВДереве(
													ДеревоДанных,
													"Доверенность.ДопСведенияОДоверенномЛице");
			Если ЗначениеЗаполнено(ОрганизацияВыдавшаяДоверенность) ИЛИ ЗначениеЗаполнено(НомерДоверенности)
				ИЛИ ЗначениеЗаполнено(ДатаДоверенности) ИЛИ ЗначениеЗаполнено(ДопСведенияОВыдачеДоверенности)
				ИЛИ ЗначениеЗаполнено(ДопСведенияОДоверенномЛице) Тогда
				
				Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность", ПространствоИменСхемы);
				
				Если ЗначениеЗаполнено(НомерДоверенности) Тогда
					ЗаполнитьСвойствоXDTO(Доверенность, "НомДоверен", НомерДоверенности, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДатаДоверенности) Тогда
					ЗаполнитьСвойствоXDTO(Доверенность, "ДатаДоверен", ДатаДД_ММ_ГГГГ(ДатаДоверенности), , ТекстОшибки);
				КонецЕсли;
				
				ЛицоВыдавшееДоверенностьДолжность = ЗначениеРеквизитаВДереве(
															ДеревоДанных,
															"Доверенность.ЛицоВыдавшееДоверенность.Должность");
				ЛицоВыдавшееДоверенностьФамилия   = ЗначениеРеквизитаВДереве(
															ДеревоДанных,
															"Доверенность.ЛицоВыдавшееДоверенность.Фамилия");

				Если ЗначениеЗаполнено(ОрганизацияВыдавшаяДоверенность) ИЛИ ЗначениеЗаполнено(ДопСведенияОВыдачеДоверенности)
					ИЛИ ЗначениеЗаполнено(ЛицоВыдавшееДоверенностьДолжность)
					ИЛИ ЗначениеЗаполнено(ЛицоВыдавшееДоверенностьФамилия) Тогда
					
					ВыданаКем = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем", ПространствоИменСхемы);
					
					Если ЗначениеЗаполнено(ОрганизацияВыдавшаяДоверенность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем", ОрганизацияВыдавшаяДоверенность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДопСведенияОВыдачеДоверенности) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем", ДопСведенияОВыдачеДоверенности, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ЛицоВыдавшееДоверенностьДолжность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем", ЛицоВыдавшееДоверенностьДолжность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ЛицоВыдавшееДоверенностьФамилия) Тогда
						ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ЛицоВыдавшееДоверенностьФамилия, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(
								ФИОТип,
								"Имя",
								ЗначениеРеквизитаВДереве(ДеревоДанных, "Доверенность.ЛицоВыдавшееДоверенность.Имя"),
								Истина,
								ТекстОшибки);
						ЛицоВыдавшееДоверенностьОтчество = ЗначениеРеквизитаВДереве(ДеревоДанных,
																					"Доверенность.ЛицоВыдавшееДоверенность.Отчество");
						Если ЗначениеЗаполнено(ЛицоВыдавшееДоверенностьОтчество) Тогда
							ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ЛицоВыдавшееДоверенностьОтчество, , ТекстОшибки);
						КонецЕсли;
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Доверенность, "ВыданаКем", ВыданаКем, , ТекстОшибки);
				КонецЕсли;
				
				ДопСведенияОДоверенномЛице = ЗначениеРеквизитаВДереве(ДеревоДанных, "Доверенность.ДопСведенияОДоверенномЛице");
				ДоверенноеЛицоДолжность    = ЗначениеРеквизитаВДереве(ДеревоДанных, "Доверенность.ДоверенноеЛицо.Должность");
				ДоверенноеЛицоФамилия      = ЗначениеРеквизитаВДереве(ДеревоДанных, "Доверенность.ДоверенноеЛицо.Фамилия");
				Если ЗначениеЗаполнено(ДопСведенияОДоверенномЛице) ИЛИ ЗначениеЗаполнено(ДоверенноеЛицоДолжность)
					ИЛИ ЗначениеЗаполнено(ДоверенноеЛицоФамилия) Тогда
					
					ВыданаКому = ПолучитьОбъектТипаCML(
										"Файл.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому",
										ПространствоИменСхемы);
					
					Если ЗначениеЗаполнено(ДопСведенияОДоверенномЛице) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому", ДопСведенияОДоверенномЛице, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДоверенноеЛицоДолжность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", ДоверенноеЛицоДолжность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДоверенноеЛицоФамилия) Тогда
						ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ДоверенноеЛицоФамилия, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(
								ФИОТип,
								"Имя",
								ЗначениеРеквизитаВДереве(ДеревоДанных, "Доверенность.ДоверенноеЛицо.Имя"),
								Истина,
								ТекстОшибки);
						ДоверенноеЛицоОтчество = ЗначениеРеквизитаВДереве(ДеревоДанных, "Доверенность.ДоверенноеЛицо.Отчество");
						Если ЗначениеЗаполнено(ДоверенноеЛицоОтчество) Тогда
							ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ДоверенноеЛицоОтчество, , ТекстОшибки);
						КонецЕсли;
						ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Доверенность, "ВыданаКому", ВыданаКому, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ПолучилГруз, "Доверенность", Доверенность, , ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "ГрузПринял")) Тогда
				ГрузПринял = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНС(ГрузПринял, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "ГрузПринял") Тогда
					ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПринял", ГрузПринял, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "ГрузПолучил")) Тогда
				ГрузПолучил = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				ГрузПолучилДанныеЗаполнены = ЗаполнитьДолжностноеЛицоФНС(
													ГрузПолучил,
													ДеревоДанных,
													ТекстОшибки,
													ПространствоИменСхемы,
													"ГрузПолучил");
				Если ГрузПолучилДанныеЗаполнены Тогда
					ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПолучил", ГрузПолучил, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СвТНП, "ПолучилГруз", ПолучилГруз, , ТекстОшибки);
		КонецЕсли;
				
		СтруктураДопДанных = Новый Структура;
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть", Истина);
		Для Каждого Элемент из СтрокаДопДанных.Строки Цикл
			СтруктураДопДанных.Вставить(ОбщегоНазначенияЭД.НазваниеКолонки(Элемент.ПолныйПуть), Элемент.Значение);
		КонецЦикла;
		ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Ложь);
						
		СтруктураДопДанных = Новый Структура;
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
		Для Каждого Элемент из СтрокаДопДанных.Строки Цикл
			СтруктураДопДанных.Вставить(ОбщегоНазначенияЭД.НазваниеКолонки(Элемент.ПолныйПуть), Элемент.Значение);
		КонецЦикла;
						
		МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(
								"OKORDOC",
								"Файл.Документ.СвТНО.ИнфПол",
								"ТекстИнф",
								ВидФасетаXDTO.МаксДлина);
								
		СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
		ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
	
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНП, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНП", СвТНП, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		Если ЗаполнитьВДеревеДанныеПодписанта(Подписант, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;

		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(Файл, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьТорг12CML(СтруктураПараметров)
	
	ТекстОшибки = "";
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "OTORG12";
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
			
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		
		СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", СтруктураПараметров.ОКУДПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", СтруктураПараметров.НомФорм, Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Поставщик, СтруктураПараметров.Поставщик, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик", Поставщик, , ТекстОшибки);
		КонецЕсли;
		
		Плательщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Плательщик, СтруктураПараметров.Плательщик, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик", Плательщик, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Грузоотправитель, СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, 
				ТекстОшибки, ПространствоИменСхемы) Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ГрузОт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", Грузоотправитель, , ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураПараметров.СведенияОГрузоотправителе.КодОКДП) Тогда
				ЗаполнитьСвойствоXDTO(ГрузОт, "ОКДП", СтруктураПараметров.СведенияОГрузоотправителе.КодОКДП, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение) Тогда
				ЗаполнитьСвойствоXDTO(ГрузОт, "СтруктПодр", СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение,,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузОт", ГрузОт, , ТекстОшибки);
		КонецЕсли;
		
		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Грузополучатель, СтруктураПараметров.Грузополучатель, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч", Грузополучатель, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНаименование) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНомер)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДата) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДопСведения) Тогда
			Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНаименование) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", СтруктураПараметров.ДокОснованиеНаименование, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНомер) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "НомОсн", СтруктураПараметров.ДокОснованиеНомер, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДата) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДокОснованиеДата), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДопСведения) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", СтруктураПараметров.ДокОснованиеДопСведения, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "Основание", Основание, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяНомер)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяДата) Тогда
			ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТранНакл", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяНомер) Тогда
				ЗаполнитьСвойствоXDTO(ТранНакл, "НомТранНакл", СтруктураПараметров.ТранспортнаяНакладнаяНомер, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяДата) Тогда
				ЗаполнитьСвойствоXDTO(ТранНакл, "ДатаТранНакл", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ТранспортнаяНакладнаяДата), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ТранНакл", ТранНакл, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.КодВидаОперации) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ВидОперации", СтруктураПараметров.КодВидаОперации, , ТекстОшибки);
		КонецЕсли;
		
		ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ТН, "НомТН", СтруктураПараметров.НомерТоварнойНакладной, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаТоварнойНакладной), Истина, ТекстОшибки);
		
		Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		
		ТЗТовары = СтруктураПараметров.ТаблицаТоваров;
		
		Для Каждого Товар Из ТЗТовары Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", Строка(Товар.ЕдиницаИзмерения), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Нетто", ?(ЗначениеЗаполнено(Товар.МассаНетто), Товар.МассаНетто, 0), Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.НаименованиеНоменклатуры) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаименованиеНоменклатуры, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.БазоваяЕдиницаКод) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.БазоваяЕдиницаКод, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.НаименованиеХарактеристики) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ХарактерТов", Товар.НаименованиеХарактеристики, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Сорт) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СортТов", Товар.Сорт, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Артикул) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", Товар.Артикул, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КодТовара) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КодТов", Товар.КодТовара, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.ВидУпаковки) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ВидУпак", Товар.ВидУпаковки, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КоличествоВОдномМесте) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Место", Товар.КоличествоВОдномМесте, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КоличествоМест) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КолМест", Товар.КоличествоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.МассаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Брутто", Товар.МассаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Цена) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Цена", Товар.Цена, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", Товар.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СтавкаНДС) Тогда
				СтавкаНДС = Число(СтрЗаменить(Товар.СтавкаНДС, "%", ""));
				ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", СтавкаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СуммаНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", Товар.СуммаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СуммаСНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", Товар.СуммаСНДС, , ТекстОшибки);
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
				Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Товары", Строка(Товар.НомерСтроки)) Тогда
					СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
					ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Таблица.СвТов.Добавить(СведТов);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.КоличествоМест)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаБрутто)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаНетто)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаНДС)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС) Тогда
			
			ВсегоНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.КоличествоМест) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "КолМестВс", СтруктураПараметров.ВсегоПоНакладной.КоличествоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "БруттоВс", СтруктураПараметров.ВсегоПоНакладной.МассаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаНетто) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "НеттоВс", СтруктураПараметров.ВсегоПоНакладной.МассаНетто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		КонецЕсли;
		
		СтОбщСвед = СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной;
		Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписей)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.ВсегоМест)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.ВсегоМестПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНеттоПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБруттоПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБрутто) Тогда
			ТНОбщ = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.ТНОбщ", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписей) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗап", СтОбщСвед.КоличествоПорядковыхНомеровЗаписей, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗапПр", СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.ВсегоМест) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМест", СтОбщСвед.ВсегоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.ВсегоМестПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМестПр", СтОбщСвед.ВсегоМестПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНетто) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "Нетто", СтОбщСвед.МассаГрузаНетто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНеттоПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "НеттоПр", СтОбщСвед.МассаГрузаНеттоПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "Брутто", СтОбщСвед.МассаГрузаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБруттоПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "БруттоПр", СтОбщСвед.МассаГрузаБруттоПрописью, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ТН, "ТНОбщ", ТНОбщ, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);
		
		СтСведОтпуск = СтруктураПараметров.СведенияПоОтпускуГруза;
		Если ЗначениеЗаполнено(СтСведОтпуск.ОтпущеноНаСумму) Тогда
			ОтпускГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпуск", СтСведОтпуск.ОтпущеноНаСумму, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтСведОтпуск.ОтпущеноНаСуммуПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпускПр", СтСведОтпуск.ОтпущеноНаСуммуПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ПриложениеКоличествоЛистов) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрил", СтСведОтпуск.ПриложениеКоличествоЛистов, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ПриложениеКоличествоЛистовПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрилПр", СтСведОтпуск.ПриложениеКоличествоЛистовПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ДатаОтпуска) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ДатаОтпуск", ДатаДД_ММ_ГГГГ(СтСведОтпуск.ДатаОтпуска), , ТекстОшибки);
			КонецЕсли;
			ОтпускРазрешил = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазрешил, СтСведОтпуск.ОтпускРазрешил,
					ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускРазреш", ОтпускРазрешил, , ТекстОшибки);
			КонецЕсли;
			Бухгалтер = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(Бухгалтер, СтСведОтпуск.Бухгалтер, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "Бухгалтер", Бухгалтер, , ТекстОшибки);
			КонецЕсли;
			ОтпускПроизвел = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(ОтпускПроизвел, СтСведОтпуск.ОтпускПроизвел,
					ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускПроизв", ОтпускПроизвел, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ОтпускГруз", ОтпускГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
			УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьТорг12ПокупательCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = "PTORG12";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр),
			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),
			Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		
		ИдТНО = ПолучитьОбъектТипаCML("Файл.Документ.ИдТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ИдФайлТН", СтруктураПараметров.ИдФайлТН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ДатаДокТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДокТН), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ВремДокТН", СтруктураПараметров.ВремДокТН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ИдТНО", ИдТНО, Истина, ТекстОшибки);
		
		СвТНП = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНП, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "ОКУДПервДок", СтруктураПараметров.ОКУДПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомФорм", СтруктураПараметров.НомФорм, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомТН", СтруктураПараметров.НомерТоварнойНакладной, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "ДатаТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаТоварнойНакладной), Истина,
			ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДатаПолученияГруза) Тогда
			ПолучилГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ПолучилГруз, "ДатаПолуч", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаПолученияГруза), Истина,
				ТекстОшибки);
			
			Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность", ПространствоИменСхемы);
			Если ЗаполнитьДанныеДоверенности(Доверенность, СтруктураПараметров.Доверенность, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ПолучилГруз, "Доверенность", Доверенность, , ТекстОшибки);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(СтруктураПараметров.ГрузПринял.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ГрузПринял.Фамилия) Тогда
				ГрузПринял = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНСCML(ГрузПринял, СтруктураПараметров.ГрузПринял, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПринял", ГрузПринял, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ГрузПолучил.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ГрузПолучил.Фамилия) Тогда
				ГрузПолучил = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНСCML(ГрузПолучил, СтруктураПараметров.ГрузПолучил, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПолучил", ГрузПолучил, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СвТНП, "ПолучилГруз", ПолучилГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНП, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНП", СвТНП, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
			УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Торг-12.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьНакладнуюCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ",СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя,
			ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);
		
		Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы,"Грузополучатель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);
		
		Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);
		
		Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента") И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента") Тогда
			
			Основание = ПолучитьОбъектТипаCML("ТОРГ12.Основание", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(Основание,"НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Основание,"ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Основание,"НаименованиеДокументаОснования", "Заказ поставщику", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Основание", Основание, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ТаблицаТоваров.Количество(), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ТаблицаТоваров.Количество(), , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", ТаблицаТоваров.Итог("СуммаБезНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(), , ",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(), , ",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью",
			ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", ИтогиПрописью, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			ПП = 0;
			
			Товары= ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				ПП = ПП + 1;
				
				Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП, , ТекстОшибки);
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", ТекТовар.СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", ТекТовар.СуммаСНДС, , ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Налог", НалогПоСтроке, , ТекстОшибки);
				
				Если НЕ (ТаблицаТоваров.Колонки.Найти("НомерПоДаннымКлиента") = Неопределено
					ИЛИ ТаблицаТоваров.Колонки.Найти("ДатаПоДаннымКлиента") = Неопределено)
					И ЗначениеЗаполнено(ТекТовар.НомерПоДаннымКлиента) И ЗначениеЗаполнено(ТекТовар.ДатаПоДаннымКлиента) Тогда
					
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.НомерПоДаннымКлиента);
					
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "НомерПоДаннымКлиента", НовыйОбъект);
					ТипОбъектаДата = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
					
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.ДатаПоДаннымКлиента);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "ДатаПоДаннымКлиента", НовыйОбъект);
				КонецЕсли;
				
				Если НЕ ТаблицаТоваров.Колонки.Найти("СрокГодности") = Неопределено
					И ЗначениеЗаполнено(ТекТовар.СрокГодности) Тогда
					
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.СрокГодности);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "СрокГодности", НовыйОбъект);
				КонецЕсли;
				Если (НЕ (ТаблицаТоваров.Колонки.Найти("НомерГТД") = Неопределено)) И ЗначениеЗаполнено(ТекТовар.НомерГТД) Тогда
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.НомерГТД);
					Товар.Добавить(ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "НомерГТД", НовыйОбъект);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет на оплату.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьСчетНаОплатуCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("СчетНаОплату",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		РеквизитыПолучателя = ПолучитьОбъектТипаCML("СчетНаОплату.РеквизитыПолучателя", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "НомерСчета", СтруктураПараметров.РасчетныйСчет.НомерСчета, Истина, ТекстОшибки);
		
		// Банк
		Банк =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", СтруктураПараметров.РасчетныйСчет.КоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "Наименование", СтруктураПараметров.РасчетныйСчет.Банк, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "БИК", СтруктураПараметров.РасчетныйСчет.БИК, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Банк", Банк, Истина, ТекстОшибки);
		
		// БанкКорреспондент
		Если СтруктураПараметров.Свойство("БанкКорреспондент") Тогда
			БанкКорреспондент =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "СчетКорреспондентский", СтруктураПараметров.БанкКорреспондент.КоррСчет, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "Наименование", СтруктураПараметров.БанкКорреспондент.Банк, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "БИК", СтруктураПараметров.БанкКорреспондент.БИК, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "БанкКорреспондент", БанкКорреспондент, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "РеквизитыПолучателя", РеквизитыПолучателя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "НазначениеПлатежа", СтруктураПараметров.НазначениеПлатежа, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОкончанияДействияСчета", СтруктураПараметров.СрокПлатежа, Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("СчетНаОплату.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Поставщик, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Поставщик, , ТекстОшибки);
		
		Покупатель = ПолучитьОбъектТипаCML("СчетНаОплату.Покупатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Покупатель, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Покупатель", Покупатель, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("СчетНаОплату.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		Руководитель = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Руководитель,
							  "ПолноеНаименование", 
							  ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СтруктураПараметров.Руководитель),
							  Истина,
							  ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Руководитель", Руководитель, Истина, ТекстОшибки);
		
		Бухгалтер = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Бухгалтер, "ПолноеНаименование",
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СтруктураПараметров.Бухгалтер), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Бухгалтер", Бухгалтер, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента")
			И ЗначениеЗаполнено(СтруктураПараметров.НомерПоДаннымКлиента)
			И ЗначениеЗаполнено(СтруктураПараметров.ДатаПоДаннымКлиента) Тогда
			
			ДокументОснования = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "НаименованиеДокументаОснования", СтруктураПараметров.ДокументОснование, Истина, ТекстОшибки);
			ДокументЭО.ДокументОснования.Добавить(ДокументОснования);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЧастичнаяОплата") Тогда
			ЧастичнаяОплата = СтруктураПараметров.ЧастичнаяОплата;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		
		Если СтруктураПараметров.Свойство("ТаблицаТоваров") Тогда
			ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		КонецЕсли;
		
		Если НЕ ЧастичнаяОплата Тогда
			Если ТаблицаТоваров.Количество() > 0 Тогда
				
				Товары = ПолучитьОбъектТипаCML("СчетНаОплату.Товары", СтруктураПараметров.ВерсияСхемы);
				Для Каждого ТекТовар Из ТаблицаТоваров Цикл
					
					Товар = ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
					
					ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
					
					ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
					
					СтруктураЕдИзм = Новый Структура();
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
					СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
					СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
					
					Если СтруктураПараметров.ЦенаВключаетНДС Тогда
						СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
					Иначе
						СуммаБезНДС = ТекТовар.Сумма;
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
					
					Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(Стоимость, "СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Стоимость, "СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Стоимость, "СуммаОбщая", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
					
					// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
					
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					Если СтавкаНДСЧислом <> Неопределено Тогда
						ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
					КонецЕсли;
					Стоимость.Налог.Добавить(НалогПоСтроке);
					ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);
					
					Если НЕ ТаблицаТоваров.Колонки.Найти("СуммаСкидки") = Неопределено И ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
						СкидкиПоСтроке =  ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
						СкидкаПоСтроке =  ПолучитьОбъектТипаCML("Скидка", СтруктураПараметров.ВерсияСхемы);
						
						ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
						
						СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
						
						ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
					КонецЕсли;
					
					Товары.Товар.Добавить(Товар);
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") ТОгда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество() > 0 Тогда
				
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о списании комиссионного товара.
//
// Параметры:
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Комитент = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);
		
		Комиссионер = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(ТекТовар.СуммаСНДС / ТекТовар.Количество, 2), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Сумма", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, ,  ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Заказ поставщику.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьЗаказCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ЗаказКлиента", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Роль", СтруктураПараметров.Роль, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("ЗаказКлиента.Исполнитель", СтруктураПараметров.ВерсияСхемы);
		Если СтруктураПараметров.Роль = "Покупатель" Тогда
			СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Контрагент", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		ИначеЕсли СтруктураПараметров.Роль = "Продавец" Тогда
			СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Организация", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Исполнитель, , ТекстОшибки);
		
		Заказчик = ПолучитьОбъектТипаCML("ЗаказКлиента.Заказчик", СтруктураПараметров.ВерсияСхемы);
		Если СтруктураПараметров.Роль = "Покупатель" Тогда
			СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Организация", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		ИначеЕсли СтруктураПараметров.Роль = "Продавец" Тогда
			СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Контрагент", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Заказчик, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки, Истина);
				
				Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Стоимость, "СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Стоимость, "СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Стоимость, "СуммаОбщая", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				Стоимость.Налог.Добавить(НалогПоСтроке);
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
					СкидкиПоСтроке = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
					СкидкаПоСтроке = ПолучитьОбъектТипаCML("Скидка", СтруктураПараметров.ВерсияСхемы);
					
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Процент", ТекТовар.ПроцентСкидки, Истина, ТекстОшибки);
					СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
					
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ЗаказКлиента.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезСкидкиИтог", ТаблицаТоваров.Итог("Сумма")
			- ТаблицаТоваров.Итог("СуммаСкидки"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСкидкиИтог", ТаблицаТоваров.Итог("СуммаСкидки"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымКлиента) Тогда
			
			ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", "По данным клиента");
			ДокументЭО.ДокументОснования.Добавить(ДокументОснование);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымПоставщика")
			И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымПоставщика) Тогда
			
			ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования",СтруктураПараметров.ВерсияСхемы);
			
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымПоставщика);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымПоставщика);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", "По данным поставщика");
			ДокументЭО.ДокументОснования.Добавить(ДокументОснование);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта", СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("АдресДоставки") Тогда
			АдресДоставки = СтруктураПараметров.АдресДоставки;
			АдресДоставкиСклад = ПолучитьОбъектТипаCML("Склад", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(АдресДоставкиСклад, "ИД", Строка(Новый УникальныйИдентификатор), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АдресДоставкиСклад, "Наименование", СтруктураПараметров.АдресДоставки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "АдресДоставкиСклад", АдресДоставкиСклад, , ТекстОшибки);
		КонецЕсли;
		
		// Этапы графика оплаты.
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") ТОгда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество()>0 Тогда
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Комментарий") И ЗначениеЗаполнено(СтруктураПараметров.Комментарий) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"Комментарий", СтруктураПараметров.Комментарий, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Комитент = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);
		
		Комиссионер = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(ТекТовар.СуммаПродажи / ТекТовар.Количество, 2), Истина, ТекстОшибки);
				СуммыПоТовару = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары.Товар.СуммыПоТовару",
					СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаОбщая", ТекТовар.СуммаПродажи, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				СуммыПоТовару.Налог.Добавить(НалогПоСтроке);
				
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", СуммыПоТовару, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЦенаКомитента", Окр(ТекТовар.СуммаСНДС/ТекТовар.Количество, 2), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаКомитента", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаВознаграждения", ТекТовар.СуммаВознаграждения, , ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.ИтогоПоДокументу",
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаКомитентаИтог", ТаблицаТоваров.Итог("СуммаСНДС"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаПродажиИтог", ТаблицаТоваров.Итог("СуммаПродажи"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаВознагражденияИтог", ТаблицаТоваров.Итог("СуммаВознаграждения"), , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Процент") И ЗначениеЗаполнено (СтруктураПараметров.Процент) Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "Процент", СтруктураПараметров.Процент, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Услуга") И ЗначениеЗаполнено (СтруктураПараметров.Услуга) Тогда
			Услуга = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Услуга", СтруктураПараметров.ВерсияСхемы);
			СформироватьДанныеПоТоваруCML(Услуга, СтруктураПараметров.Услуга, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
			Если СтруктураПараметров.Свойство("СуммаНДСВознаграждения")
				И СтруктураПараметров.Свойство("СтавкаНДСВознаграждения") Тогда
				
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", СтруктураПараметров.СуммаНДСВознаграждения, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(СтруктураПараметров.СтавкаНДСВознаграждения);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Услуга, "Налог", НалогПоСтроке, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Услуга", Услуга, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаНачала", СтруктураПараметров.НачалоПериода, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КонецПериода") Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаКонца", СтруктураПараметров.КонецПериода, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ФормаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ФормаОплаты) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО, "ФормаОплаты", СтруктураПараметров.ФормаОплаты, , ТекстОшибки);
		КонецЕсли;
		
		// Этапы графика оплаты.
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") Тогда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество() > 0 Тогда
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("СпособРасчета") И ЗначениеЗаполнено (СтруктураПараметров.СпособРасчета) Тогда
			Если СтруктураПараметров.СпособРасчета = "Процент от разности суммы продажи и суммы комитента" Тогда
				ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", "От разницы", , ТекстОшибки);
			ИначеЕсли СтруктураПараметров.СпособРасчета = "Процент от суммы продажи" Тогда
				ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", "От суммы", , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДатаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ДатаОплаты) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОплаты", СтруктураПараметров.ДатаОплаты, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Акта выполненных работ.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьАктCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("АктОПриемке",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Валюта =  ПолучитьОбъектТипаCML("Валюта", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		
		// Организация
		Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Исполнитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Контрагент, , ТекстОшибки);
		
		// Контрагент
		Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Заказчик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Контрагент, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("АктОПриемке.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаОбщая", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалога", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНалога", ТаблицаТоваров.Итог("СуммаБезНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("АктОПриемке.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("АктОПриемке.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Стоимость, "СуммаБезНалога", ТекТовар.СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				Стоимость.Налог.Добавить(НалогПоСтроке);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСНДС) Тогда
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаОбщая", ТекТовар.СуммаСНДС, , ТекстОшибки);
				КонецЕсли;
				
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, , ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
					СкидкиПоСтроке = ПолучитьОбъектТипаCML("АктОПриемке.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
					
					СкидкаПоСтроке = ПолучитьОбъектТипаCML("Скидка",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
					
					СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.СуммаСНДС - ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
				КонецЕсли;
				
				Если НЕ ТаблицаТоваров.Колонки.Найти("Содержание") = Неопределено
					И ЗначениеЗаполнено(ТекТовар.Содержание) ТОгда
					
					ЗаполнитьСвойствоXDTO(Товар, "Описание", ТекТовар.Содержание, , ТекстОшибки);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ТекстДокумента = ПолучитьОбъектТипаCML("АктОПриемке.ТекстДокумента", СтруктураПараметров.ВерсияСхемы);
		
		Заголовок = СтруктураПараметров.ДополнительнаяИнформацияШапки + Символы.ПС +
		"Мы, нижеподписавшиеся,  представитель ИСПОЛНИТЕЛЯ, с одной стороны и  представитель ЗАКАЗЧИКА с другой стороны,
		|составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги):";
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "Заголовок", XMLСтрока(Заголовок), , ТекстОшибки);
		
		Описание =  СтруктураПараметров.ДополнительнаяИнформация;
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "ОписаниеВыполненныхРабот", Описание, , ТекстОшибки);
		
		Претензии = "Вышеперечисленные работы(услуги) выполнены полностью и в срок. Заказчик претензий по объему,
		|качеству и срокам работ (услуг) не имеет.";
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "Претензии", Претензии, ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ТекстДокумента", ТекстДокумента, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьАкт501CML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	Если СтруктураПараметров.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		ПространствоИменСхемы = "IAKTPRM2";
	Иначе
		ПространствоИменСхемы = "IAKTPRM";
	КонецЕсли;
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(СтруктураПараметров.ВерсПрог) Тогда
			ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		Если СтруктураПараметров.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		КонецЕсли;
		
		СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(СтруктураПараметров.НомерАкта) Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", СтруктураПараметров.НомерАкта, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаАкта), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СвАктИ, "Заголовок", СтруктураПараметров.Заголовок, Истина, ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Исполнитель, СтруктураПараметров.Исполнитель, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "Исполнитель", Исполнитель, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			СтруктураДопДанных = Новый Структура;
			Если СтруктураПараметров.Заказчик.ЭтоФизЛицо Тогда
				СтруктураДопДанных.Вставить("ЗаказчикФамилия",  СтруктураПараметров.Заказчик.Фамилия);
				СтруктураДопДанных.Вставить("ЗаказчикИмя",      СтруктураПараметров.Заказчик.Имя);
				СтруктураДопДанных.Вставить("ЗаказчикОтчество", СтруктураПараметров.Заказчик.Отчество);
				СтруктураДопДанных.Вставить("ЗаказчикИНН",      СтруктураПараметров.Заказчик.ИНН);
			Иначе
				СтруктураДопДанных.Вставить("Заказчик",    СтруктураПараметров.Заказчик.НаименованиеОрганизации);
				СтруктураДопДанных.Вставить("ЗаказчикИНН", СтруктураПараметров.Заказчик.ИНН);
				СтруктураДопДанных.Вставить("ЗаказчикКПП", СтруктураПараметров.Заказчик.КПП);
			КонецЕсли;
			ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
		Иначе
			Заказчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
			Если ЗаполнитьДанныеУчастникаФНСCML(Заказчик, СтруктураПараметров.Заказчик, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(СвАктИ, "Заказчик", Заказчик, Истина, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		ТЗОписанийУслуг = СтруктураПараметров.ТаблицаОписанийУслуг;
		Для Каждого ОписаниеУслуги Из ТЗОписанийУслуг Цикл
			
			ОписРабот = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ОписРабот", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ОписаниеУслуги.НачалоРабот) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "НачРабот",    ДатаДД_ММ_ГГГГ(ОписаниеУслуги.НачалоРабот), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.КонецРабот) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "КонРабот",    ДатаДД_ММ_ГГГГ(ОписаниеУслуги.КонецРабот), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.СуммаБезНДСИтого) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "СумБезНДСИт", ОписаниеУслуги.СуммаБезНДСИтого, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.СуммаНДСИтого) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "СумНДСИт",    ОписаниеУслуги.СуммаНДСИтого, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ОписРабот, "СумУчНДСИт",  ОписаниеУслуги.СуммаСНДСИтого, Истина, ТекстОшибки);
			
			ТЗУслуг = ОписаниеУслуги.Услуги;
			
			Для Каждого Услуга Из ТЗУслуг Цикл
				Работа = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ОписРабот.Работа", ПространствоИменСхемы);
				
				ЗаполнитьСвойствоXDTO(Работа, "Номер", Услуга.НомерСтроки, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Работа, "НаимЕдИзм", Строка(Услуга.ЕдиницаИзмерения), Истина, ТекстОшибки);
				
				Если ЗначениеЗаполнено(Услуга.НаименованиеНоменклатуры) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "НаимРабот", Услуга.НаименованиеНоменклатуры, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.БазоваяЕдиницаКод) И ТипЗнч(Услуга.БазоваяЕдиницаКод) = Тип("Строка")
						И СтрДлина(Услуга.БазоваяЕдиницаКод) = 3 И ЭтоЧисло(Услуга.БазоваяЕдиницаКод) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "ОКЕИ", Услуга.БазоваяЕдиницаКод, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.Количество) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "Количество", Услуга.Количество, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.Цена) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "Цена", Услуга.Цена, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СуммаБезНДС) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумБезНДС", Услуга.СуммаБезНДС, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СуммаНДС) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумНДС", Услуга.СуммаНДС, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СуммаСНДС) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумУчНДС", Услуга.СуммаСНДС, , ТекстОшибки);
				КонецЕсли;
				
				Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
					Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Услуги",
						Строка(ТЗОписанийУслуг.Индекс(ОписаниеУслуги) + 1) + "." + Услуга.НомерСтроки) Тогда
						
						СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
						ЗаполнитьСвойствоXDTO(Работа, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Работа, "Описание", Услуга.Описание, , ТекстОшибки);
				
				ОписРабот.Работа.Добавить(Работа);
			КонецЦикла;
			
			СвАктИ.ОписРабот.Добавить(ОписРабот);
		КонецЦикла;
		
		СдалЗаполнено = Ложь;
		ДоверенностьЗаполнена = Ложь;
		СведПоУслугам = СтруктураПараметров.СведенияПоВыполнениюУслуг;
		Сдал = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(СведПоУслугам.ДатаИсполнения) Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ДатаИсполн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.СведенияПоВыполнениюУслуг.ДатаИсполнения), , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		ПодписьИсполн = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
		Если ЗаполнитьДолжностноеЛицоФНСCML(ПодписьИсполн, СтруктураПараметров.СведенияПоВыполнениюУслуг.ПодписьИсполнителя,
			ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ПодписьИсполн", ПодписьИсполн, , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		
		Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ДоверенИсполн", ПространствоИменСхемы);
		Если ЗаполнитьДанныеДоверенности(Доверенность, СтруктураПараметров.СведенияПоВыполнениюУслуг.Доверенность, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ДоверенИсполн", Доверенность, , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		
		Если СдалЗаполнено Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "Сдал", Сдал, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвАктИ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
			УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьАкт501ЗаказчикCML(СтруктураПараметров, ВерсияРегламентаЭДО)
	
	ТекстОшибки = "";
	Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		ПространствоИменСхемы = "ZAKTPRM2";
	Иначе
		ПространствоИменСхемы = "ZAKTPRM";
	КонецЕсли;

	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр),
			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),
			Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		
		Если ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		КонецЕсли;

		СведенияАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		
		ИдАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИдАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ИдФайлАктИ", СтруктураПараметров.ИдФайлАкт, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ДатаДокАктИ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДокАкт), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ВремДокАктИ", СтруктураПараметров.ВремДокАкт, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "ИдАктИ", ИдАктИ, Истина, ТекстОшибки);
		
		СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", СтруктураПараметров.НомерАкта, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаАкта), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);
		
		// Заполним свойства принимающей стороны Принял
		Если ЗначениеЗаполнено(СтруктураПараметров.ДатаЗаказа) Тогда
			Принял = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ДатаЗаказа) Тогда
				ЗаполнитьСвойствоXDTO(Принял, "ДатаЗаказ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаЗаказа), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.Претензия) Тогда
				ЗаполнитьСвойствоXDTO(Принял, "Претенз", СтруктураПараметров.Претензия, , ТекстОшибки);
			КонецЕсли;
			
			Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ДоверенЗаказ", ПространствоИменСхемы);
			Если ЗаполнитьДанныеДоверенности(Доверенность, СтруктураПараметров.Доверенность, ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(Принял, "ДоверенЗаказ", Доверенность, , ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПодписьЗаказ.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ПодписьЗаказ.Фамилия) Тогда
				ПодписьЗаказ = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНСCML(ПодписьЗаказ, СтруктураПараметров.ПодписьЗаказ, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(Принял, "ПодписьЗаказ", ПодписьЗаказ, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияАктИ, "Принял", Принял, , ТекстОшибки);
		КонецЕсли;
		
		// Заполним текстовые дополнительные свойства ИнфПол
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвАктИ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СведенияАктИ, Истина, ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Если ЗаполнитьДанныеПодписантаCML(Подписант, СтПодписант, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
			УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИменСхемы);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
			
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с каталогом товаров
//
// Параметры
//  ДеревоДанных – дерево значений для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования ЭД.
//
Функция СформироватьКаталогCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ФайлСформирован = Ложь;
	
	ПространствоИменСхемы = "urn:1C.ru:commerceml_2";
	Попытка
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		Каталог = ПолучитьОбъектТипаCML("Каталог", ПространствоИменСхемы);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"),
			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", XMLДатаВремя(ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаФормирования")), Истина, ТекстОшибки);
		
		// Каталог.
		ЗаполнитьСвойствоXDTO(Каталог, "Ид", ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "СодержитТолькоИзменения", ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СодержитТолькоИзменения"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "Наименование", ЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование"), Истина, ТекстОшибки);
		
		// Владелец.
		Владелец = ПолучитьОбъектТипаCML("Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Владелец, ДеревоДанных, "Владелец", ПространствоИменСхемы, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Товары.
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Каталог.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Каталог.Товары.Товар", ПространствоИменСхемы);
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Каталог, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "Каталог", Каталог, Истина, ТекстОшибки);
		
		// Подписант.
		Подписант = ПолучитьОбъектТипаCML("Подписант", ПространствоИменСхемы);
		
		Если ЗаполнитьДанныеПодписантаCML_206(Подписант, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы) Тогда
			Подписанты = ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
			Подписанты.Подписант.Добавить(Подписант);
			ЗаполнитьСвойствоXDTO(Каталог, "Подписанты", Подписанты, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Запись файла электронного документа.
		КоммерческаяИнформация.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с прайс-листом
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьПрайсЛистCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		
		ПрайсЭО = ПолучитьОбъектТипаCML("ПрайсЛист", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		
		// Владелец.
		Контрагент = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "Владелец", Контрагент, Истина, ТекстОшибки);
		
		ИдТипаЦен = Строка(Новый УникальныйИдентификатор);
		
		// Предложения.
		Если ТаблицаТоваров.Количество()>0 Тогда
			Предложения = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения", СтруктураПараметров.ВерсияСхемы);
			
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Предложение = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Предложение, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				Цены = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение.Цены", СтруктураПараметров.ВерсияСхемы);
				Цена = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение.Цены.Цена", СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Цена, "ИдТипаЦены", ИдТипаЦен, Истина,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "Цена", ТекТовар.Цена, Истина,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "МинКоличество", ТекТовар.Количество, , ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				Цены.Цена.Добавить(Цена);
				ЗаполнитьСвойствоXDTO(Предложение, "Цены", Цены, Истина, ТекстОшибки);
				
				Предложения.Предложение.Добавить(Предложение);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ПрайсЭО, 	"Предложения",	Предложения, Истина, ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДействительноС",XMLДата(СтруктураПараметров.Дата), , ТекстОшибки);
		
		// ТипыЦен
		ТипыЦен = ПолучитьОбъектТипаCML("ПрайсЛист.ТипыЦен", СтруктураПараметров.ВерсияСхемы);
		ТипЦены = ПолучитьОбъектТипаCML("ТипЦены", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ТипЦены, "Ид", ИдТипаЦен, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Описание") Тогда
			ЗаполнитьСвойствоXDTO(ТипЦены, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТипЦены, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		ТипыЦен.ТипЦены.Добавить(ТипЦены);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ТипыЦен", ТипыЦен, , ТекстОшибки);
		
		ПрайсЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ПрайсЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя,
			ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);
		
		Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы,"Грузополучатель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);
		
		Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);
		
		Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ТаблицаТоваров.Количество(), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ТаблицаТоваров.Количество(), , ТекстОшибки);
		Если СтруктураПараметров.ЦенаВключаетНДС Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС",
				ТаблицаТоваров.Итог("Сумма") - ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		Иначе	
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") , , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью",
			ЧислоПрописью(ТаблицаТоваров.Количество(), ,",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью",
			ЧислоПрописью(ТаблицаТоваров.Количество(), ,",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью",
			ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", ИтогиПрописью, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество()>0 Тогда 
			ПП = 0;
			Товары = ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				ПП = ПП + 1;
				Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП, , ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе	
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(СуммаБезНДС / ТекТовар.Количество, 2), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", ТекТовар.СуммаСНДС, , ТекстОшибки);
				
				// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
				
				СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
				Если СтавкаНДСЧислом <> Неопределено Тогда
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Налог", НалогПоСтроке, , ТекстОшибки);
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Соглашение об и.
//
// Параметры
//  ДеревоДанных – ДеревоЗначений, содержит данные для формирования ЭД
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьАктНаПередачуПравCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ФайлСформирован = Ложь;
	
	ПространствоИменСхемы = "urn:1C.ru:commerceml_2";
	Попытка
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		Документ = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"),
			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", XMLДатаВремя(ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаФормирования")), Истина, ТекстОшибки);
		
		// Документ.
		ЗаполнитьСвойствоXDTO(Документ, "Ид",			ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Номер",		ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"),	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Дата",			ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ХозОперация",	ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация"),Истина,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Роль",			ЗначениеРеквизитаВДереве(ДеревоДанных, "Роль"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Валюта",		ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта"),	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Курс",			ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Сумма",		ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"),	Истина, ТекстОшибки);
		
		// Лицензиар.
		Лицензиар = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Лицензиар, ДеревоДанных, "Лицензиар", ПространствоИменСхемы, ТекстОшибки);
		
		// Лицензиат.
		Лицензиат = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Лицензиат, ДеревоДанных, "Лицензиат", ПространствоИменСхемы, ТекстОшибки);
		
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		Контрагенты.Контрагент.Добавить(Лицензиар);
		Контрагенты.Контрагент.Добавить(Лицензиат);
		
		// Плательщик.
		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "Плательщик") = Истина Тогда
			Плательщик = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
			ЗаполнитьДанныеУчастникаCML(Плательщик, ДеревоДанных, "Плательщик", ПространствоИменСхемы, ТекстОшибки);
			Контрагенты.Контрагент.Добавить(Плательщик);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "Контрагенты", Контрагенты, Истина, ТекстОшибки);
		
		// КодПартнера.
		ДопРеквизиты = ПолучитьОбъектТипаCML("Документ.ЗначенияРеквизитов", ПространствоИменСхемы);
		Реквизит = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Реквизит, "Наименование", "КодПартнера", Истина, ТекстОшибки);
		Реквизит.Значение.Добавить(ЗначениеРеквизитаВДереве(ДеревоДанных, "КодПартнера"));
		
		ДопРеквизиты.ЗначениеРеквизита.Добавить(Реквизит);
		
		// УсловияПередачи.
		УсловияПередачи = ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияПередачи");
		Если ЗначениеЗаполнено(УсловияПередачи) Тогда
			Реквизит = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Реквизит, "Наименование", "УсловияПередачи", Истина, ТекстОшибки);
			Реквизит.Значение.Добавить(УсловияПередачи);
			
			ДопРеквизиты.ЗначениеРеквизита.Добавить(Реквизит);
		КонецЕсли;
		
		// ДокументыОснования.
		ДокументыОснования = ДеревоДанных.Строки.Найти("ДокументыОснования", "ПолныйПуть");
		Если ЗначениеЗаполнено(ДокументыОснования.Значение) Тогда
			Реквизит = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Реквизит, "Наименование", "ДокументыОснования", Истина, ТекстОшибки);
			Для Каждого НомерСтроки Из ДокументыОснования.Строки Цикл
				Для Каждого СтрокаДО Из НомерСтроки.Строки Цикл
					Реквизит.Значение.Добавить(СтрокаДО.Значение);
				КонецЦикла;
			КонецЦикла;
			ДопРеквизиты.ЗначениеРеквизита.Добавить(Реквизит);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "ЗначенияРеквизитов", ДопРеквизиты, , ТекстОшибки);
		
		// СрокПлатежа.
		СрокПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокПлатежа");
		Если ЗначениеЗаполнено(СрокПлатежа) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "СрокПлатежа", СрокПлатежа, , ТекстОшибки);
		КонецЕсли;
		
		// Комментарий.
		Комментарий = ЗначениеРеквизитаВДереве(ДеревоДанных, "Комментарий");
		Если ЗначениеЗаполнено(Комментарий) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Комментарий", Комментарий, , ТекстОшибки);
		КонецЕсли;
		
		// Налоги.
		Налоги = ДеревоДанных.Строки.Найти("Налоги", "ПолныйПуть");
		Если ЗначениеЗаполнено(Налоги.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(Налоги, "Документ.Налоги", "Налог", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "Налоги", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Скидки.
		Скидки = ДеревоДанных.Строки.Найти("Скидки", "ПолныйПуть");
		Если ЗначениеЗаполнено(Скидки.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(Скидки, "Документ.Скидки", "Скидка", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "Скидки", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// ДопРасходы.
		ДопРасходы = ДеревоДанных.Строки.Найти("ДопРасходы", "ПолныйПуть");
		Если ЗначениеЗаполнено(ДопРасходы.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(ДопРасходы, "Документ.ДопРасходы", "ДопРасход", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "ДопРасходы", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Товары.
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Документ, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		Подписант = ПолучитьОбъектТипаCML("Подписант", ПространствоИменСхемы);
		
		Если ЗаполнитьДанныеПодписантаCML_206(Подписант, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы) Тогда
			Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
			Подписанты.Подписант.Добавить(Подписант);
			ЗаполнитьСвойствоXDTO(Документ, "Подписанты", Подписанты, Истина, ТекстОшибки);
		КонецЕсли;
		
		КоммерческаяИнформация.Документ.Добавить(Документ);
		
		// Запись файла электронного документа.
		КоммерческаяИнформация.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Структуры параметров, общих для схем ФНС

Процедура ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров)
	
	СтруктураПараметров.ВерсПрог = "1С:Предприятие 8";
	СтруктураПараметров.ВерсФорм = "5.01";
	СтруктураПараметров.ИдОтпр = СтруктураЭД.Отправитель;
	СтруктураПараметров.ИдПок = СтруктураЭД.Получатель;
	Если СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		ИЛИ СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров);
	Иначе // заполним данными Организации или нулевыми значениями, т.к. поля обязательны к заполнению в формате ФНС
		ЗаполнитьРеквизитыПустогоОператораЭДО(СтруктураПараметров, СтруктураЭД.Организация);
	КонецЕсли;
	ТекДатаВремя = ТекущаяДатаСеанса();
	СтруктураПараметров.ДатаДок = Формат(ТекДатаВремя, "ДФ=dd.MM.yyyy");
	СтруктураПараметров.ВремДок = Прав(СтрЗаменить("0" + Формат(ТекДатаВремя, "ДЛФ=T"), ":", "."), 8);
	СтруктураПараметров.ВидЭД = СтруктураЭД.ВидЭД;
	СтруктураПараметров.КНД = СтруктураЭД.КНД;
	СтруктураПараметров.УникальныйИдентификатор = СтруктураЭД.УникальныйИдентификатор;
	
	Если СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.СчетФактура Тогда
		Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			СтруктураПараметров.НаимПервДок = "Товарная накладная";
			СтруктураПараметров.ОКУДПервДок = "0330212";
			СтруктураПараметров.НомФорм = "ТОРГ-12";
		ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			СтруктураПараметров.НаимПервДок = "Акт о выполнении работ (оказании услуг)";
		ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			СтруктураПараметров.НомФорм = "Корректировочный документ получатель";
		КонецЕсли;
	КонецЕсли;
	ГГГГММДД = СтрЗаменить(Формат(ТекДатаВремя, "ДФ=yyyy-MM-dd"), "-", "");
	СтруктураФайла = Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
									 СтруктураЭД.ПрефиксИдФайла,
									 СтруктураЭД.Получатель,
									 СтруктураЭД.Отправитель,
									 ГГГГММДД,
									 СтруктураЭД.УникальныйИдентификатор);
	СтруктураПараметров.ИдФайл = ЭлектронныеДокументыСлужебный.ФНСИмяФайла(СтруктураФайла);
	
КонецПроцедуры

Процедура СтруктураСлужебныхПолейФНС(СтруктураСлужебныеПоля = Неопределено)
	
	Если ТипЗнч(СтруктураСлужебныеПоля) <> Тип("Структура") Тогда
		СтруктураСлужебныеПоля = Новый Структура;
	КонецЕсли;
	
	СтруктураСлужебныеПоля.Вставить("ВерсПрог");
	СтруктураСлужебныеПоля.Вставить("ВерсФорм");
	СтруктураСлужебныеПоля.Вставить("ИдФайл");
	СтруктураСлужебныеПоля.Вставить("ИдОтпр");
	СтруктураСлужебныеПоля.Вставить("ИдПок");
	СтруктураСлужебныеПоля.Вставить("НаимОрг");
	СтруктураСлужебныеПоля.Вставить("ИННЮЛ");
	СтруктураСлужебныеПоля.Вставить("ИдЭДО");
	СтруктураСлужебныеПоля.Вставить("КНД");
	СтруктураСлужебныеПоля.Вставить("ВидЭД");
	
	СтруктураСлужебныеПоля.Вставить("ДатаДок");
	СтруктураСлужебныеПоля.Вставить("ВремДок");
	СтруктураСлужебныеПоля.Вставить("НаимПервДок");
	СтруктураСлужебныеПоля.Вставить("ОКУДПервДок"); // Используется только для ТОРГ-12
	СтруктураСлужебныеПоля.Вставить("НомФорм");     // Используется только для ТОРГ-12
	СтруктураСлужебныеПоля.Вставить("УникальныйИдентификатор");
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруСлужебныхПолей(СтруктураЭД, СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("ВерсияСхемы", СтруктураЭД.ВерсияСхемы);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	
КонецПроцедуры

Процедура СтруктураСлужебныхПолей(СтруктураСлужебныеПоля = Неопределено)
	
	Если ТипЗнч(СтруктураСлужебныеПоля) <> Тип("Структура") Тогда
		СтруктураСлужебныеПоля = Новый Структура;
	КонецЕсли;
	
	СтруктураСлужебныеПоля.Вставить("ДатаФормирования");
	СтруктураСлужебныеПоля.Вставить("ВерсияСхемы");
	СтруктураСлужебныеПоля.Вставить("Ид");
	СтруктураСлужебныеПоля.Вставить("ВидЭД");
	СтруктураСлужебныеПоля.Вставить("НаправлениеЭД");
	
КонецПроцедуры

Функция СтруктураРеквизитовДоверенностиФНС()
	
	СтруктураСведений = Новый Структура;
	
	СтруктураСведений.Вставить("НомерДоверенности");
	СтруктураСведений.Вставить("ДатаДоверенности");
	СтруктураСведений.Вставить("ОрганизацияВыдавшаяДоверенность");
	СтруктураСведений.Вставить("ДопСведенияОВыдачеДоверенности");
	СтруктураСведений.Вставить("ДопСведенияОДоверенномЛице");
	СтруктураСведений.Вставить("ЛицоВыдавшееДоверенность", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураСведений.Вставить("ДоверенноеЛицо", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	Возврат СтруктураСведений;
	
КонецФункции

Функция СтруктураРеквизитовУчастникаОбменаФНС()
	
	СтруктураУчастника = Новый Структура;
	
	СтруктураУчастника.Вставить("ЭтоФизЛицо");
	СтруктураУчастника.Вставить("КодОКПО");
	СтруктураУчастника.Вставить("НаименованиеОрганизации");
	СтруктураУчастника.Вставить("ИНН");
	СтруктураУчастника.Вставить("КПП");
	СтруктураУчастника.Вставить("КодОКОПФ");
	СтруктураУчастника.Вставить("Фамилия");
	СтруктураУчастника.Вставить("Имя");
	СтруктураУчастника.Вставить("Отчество");
	СтруктураУчастника.Вставить("Адрес", СтруктураАдресаФНС());
	СтруктураУчастника.Вставить("Телефон");
	СтруктураУчастника.Вставить("Факс");
	СтруктураУчастника.Вставить("БанковскийСчет", Новый Структура("НомерСчета, НаимБанк, БИК"));
	
	Возврат СтруктураУчастника;
	
КонецФункции

Функция СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо = Ложь)
	
	СтруктураУчастника = Новый Структура;
	
	СтруктураУчастника.Вставить("ЭтоФизЛицо");
	СтруктураУчастника.Вставить("ИНН");
	СтруктураУчастника.Вставить("Фамилия");
	СтруктураУчастника.Вставить("Имя");
	СтруктураУчастника.Вставить("Отчество");
	СтруктураУчастника.Вставить("Должность");
	СтруктураУчастника.Вставить("СвидетельствоОРегистрацииИП");
	СтруктураУчастника.Вставить("ОбязательныеПоля", "ИНН, Фамилия, Имя, ЭтоФизЛицо" + ?(ЭтоФизЛицо,"",", Должность"));
	
	Возврат СтруктураУчастника;
	
КонецФункции

Функция СтруктураОбщихСведений()
	
	СтруктураСведений = Новый Структура;
	
	СтруктураСведений.Вставить("КоличествоПорядковыхНомеровЗаписей");
	СтруктураСведений.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью");
	СтруктураСведений.Вставить("ВсегоМест");
	СтруктураСведений.Вставить("ВсегоМестПрописью");
	СтруктураСведений.Вставить("МассаГрузаНетто");
	СтруктураСведений.Вставить("МассаГрузаНеттоПрописью");
	СтруктураСведений.Вставить("МассаГрузаБрутто");
	СтруктураСведений.Вставить("МассаГрузаБруттоПрописью");
	
	Возврат СтруктураСведений;
	
КонецФункции

Функция ОтчетОПродажахКомиссионногоТовараТаблицаТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажи");
	ТаблицаТоваров.Колонки.Добавить("СуммаВознаграждения");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция СтруктураПараметровПоОтчетуОПродажахКомиссионногоТовара()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	
	СтруктураПараметров.Вставить("ТаблицаТоваров", ОтчетОПродажахКомиссионногоТовараТаблицаТоваров());
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("СтавкаНДСВознаграждения");
	СтруктураПараметров.Вставить("СуммаНДСВознаграждения");
	СтруктураПараметров.Вставить("СуммаВознаграждения");
	СтруктураПараметров.Вставить("НалогообложениеНДС");
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты");
	СтруктураПараметров.Вставить("НачалоПериода");
	СтруктураПараметров.Вставить("КонецПериода");
	СтруктураПараметров.Вставить("ФормаОплаты");
	СтруктураПараметров.Вставить("СпособРасчета");
	СтруктураПараметров.Вставить("Процент");
	СтруктураПараметров.Вставить("ДатаОплаты");
	СтруктураПараметров.Вставить("Услуга");
	СтруктураПараметров.Вставить("ИтоговаяСтрока");
	
	ДополнительныеРеквизитыДляТаблицыТоваров = Новый Структура;
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ДатаПродажи");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("СтавкаНДС");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательНаименование");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательИНН");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательКПП");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательФактАдрес", СтруктураАдресаФНС());
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательЮрАдрес", СтруктураАдресаФНС());
	СтруктураПараметров.Вставить("ДополнительныеРеквизитыДляТаблицыТоваров", ДополнительныеРеквизитыДляТаблицыТоваров);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Номер, Дата, Исполнитель, Организация, Контрагент, Сумма, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "ИД, Наименование, Количество, БазоваяЕдиницаКод, СуммаПродажи, СуммаСНДС");

	Возврат СтруктураПараметров;
	
КонецФункции

// Структура параметров ТОРГ12

Функция Торг12СтруктураСведенийПоОтпускуГруза()
	
	СтруктураОтпуска = Новый Структура;
	
	СтруктураОтпуска.Вставить("ПриложениеКоличествоЛистов");
	СтруктураОтпуска.Вставить("ПриложениеКоличествоЛистовПрописью");
	СтруктураОтпуска.Вставить("ОтпущеноНаСумму");
	СтруктураОтпуска.Вставить("ОтпущеноНаСуммуПрописью");
	СтруктураОтпуска.Вставить("ДатаОтпуска");
	СтруктураОтпуска.Вставить("ОтпускРазрешил", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураОтпуска.Вставить("Бухгалтер", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураОтпуска.Вставить("ОтпускПроизвел", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	Возврат СтруктураОтпуска;
	
КонецФункции

Функция Торг12СтруктураВсегоПоНакладной()
	
	СтруктураВсего = Новый Структура;
	
	СтруктураВсего.Вставить("КоличествоМест");
	СтруктураВсего.Вставить("МассаБрутто");
	СтруктураВсего.Вставить("МассаНетто");
	СтруктураВсего.Вставить("СуммаБезНДС");
	СтруктураВсего.Вставить("СуммаНДС");
	СтруктураВсего.Вставить("СуммаСНДС");
	
	Возврат СтруктураВсего;
	
КонецФункции

Функция Торг12ТаблицаСведенийОТоваре()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция Торг12СтруктураПараметров(ЭтоФизЛицо)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерТоварнойНакладной");
	СтруктураПараметров.Вставить("ДатаТоварнойНакладной");
	
	СтруктураПараметров.Вставить("ВидОперации");
	СтруктураПараметров.Вставить("ДокументыОснования");
	
	СтруктураПараметров.Вставить("ТаблицаТоваров", Торг12ТаблицаСведенийОТоваре());
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо));
	СтруктураПараметров.Вставить("ОбщиеСведенияОТоварнойНакладной", СтруктураОбщихСведений());
	СтруктураПараметров.Вставить("ВсегоПоНакладной", Торг12СтруктураВсегоПоНакладной());
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("Грузоотправитель", СтруктураРеквизитовУчастникаОбменаФНС());
	СведенияОГрузоотправителе.Вставить("СтруктурноеПодразделение");
	СведенияОГрузоотправителе.Вставить("КодОКДП");
	
	СтруктураПараметров.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	СтруктураПараметров.Вставить("Грузополучатель", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Поставщик", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Плательщик", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("ДокОснованиеНаименование");
	СтруктураПараметров.Вставить("ДокОснованиеНомер");
	СтруктураПараметров.Вставить("ДокОснованиеДата");
	СтруктураПараметров.Вставить("ДокОснованиеДопСведения");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата");
	СтруктураПараметров.Вставить("КодВидаОперации");
	СтруктураПараметров.Вставить("СведенияПоОтпускуГруза", Торг12СтруктураСведенийПоОтпускуГруза());
	
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "НомерТоварнойНакладной, ДатаТоварнойНакладной, ТаблицаТоваров, Подписант");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "НомерСтроки, ЕдиницаИзмерения, СуммаСНДС");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Торг12ПокупательСтруктураПараметров(ЭтоФизЛицо)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо));
	СтруктураПараметров.Вставить("ДатаПолученияГруза");
	СтруктураПараметров.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());
	СтруктураПараметров.Вставить("ГрузПринял", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураПараметров.Вставить("ГрузПолучил", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("PTORG12", "Файл.Документ.СвТНП.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Подписант");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЭСФСтруктураПараметров(ЭтоКорректировочныйСФ, ЭтоФизЛицо = Ложь)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерСчФ"); // Порядковый номер счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
	СтруктураПараметров.Вставить("ДатаСчФ"); // Дата составления счета-фактуры счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
	СтруктураПараметров.Вставить("КодВалюты"); // Валюта: Код (Строка 4) 
	СтруктураПараметров.Вставить("НомерИсправленияИсходногоСчФ"); // (optional) Исправление: № (Строка 1а)
	СтруктураПараметров.Вставить("ДатаИсправленияИсходногоСчФ"); // (optional) Исправление: Дата  (Строка 1а)
	
	СтруктураПараметров.Вставить("Организация", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Организация.Вставить("ОбязательныеПоля", "НаименованиеОрганизации, Адрес, ЭтоФизЛицо" + ?(ЭтоФизЛицо,", Фамилия, Имя",""));
	
	СтруктураПараметров.Вставить("Контрагент", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Контрагент.Вставить("ОбязательныеПоля", "НаименованиеОрганизации, Адрес, ЭтоФизЛицо");
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(Истина)); // в параметрах подписанта для СФ, должность - не обязательный реквизит.
	
	СтруктураПараметров.Вставить("ДокументыОснования");
	
	Если ЭтоКорректировочныйСФ Тогда
		СтруктураПараметров.Вставить("НомерКоррСчФ"); // Порядковый номер корректировочного счета-фактуры (Строка 1)
		СтруктураПараметров.Вставить("ДатаКоррСчФ"); // Дата составления корректировочного счета-фактуры (Строка 1)
		СтруктураПараметров.Вставить("НомерИсправленияКоррСчФ"); // (optional) Исправление: № (Строка 1а)
		СтруктураПараметров.Вставить("ДатаИсправленияКоррСчФ"); // (optional) Исправление: Дата  (Строка 1а)
		
		// Сведения таблицы корректировочного счета-фактуры
		СтруктураПараметров.Вставить("ТаблицаТоваров", КорЭСФТаблицаСведенийОТоваре());
		
		// Реквизиты строки Всего увеличение (сумма строк (В) по графам 5, 8 и 9)
		СтруктураПараметров.Вставить("СуммаБезНДСВсегоУвеличение"); // Всего увеличение, Стоимость товаров (работ, услуг), имущественных прав без налога - всего (строка Всего увеличение/Графа 5)
		СтруктураПараметров.Вставить("СуммаСНДСВсегоУвеличение"); // Всего увеличение, Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (строка Всего увеличение/Графа 9)
		СтруктураПараметров.Вставить("СуммаНДСУвеличение"); // Всего увеличение, Сумма налога (строка Всего увеличение/Графа 8)
		
		// Реквизиты строки Всего уменьшение (сумма строк (Г) по графам 5, 8 и 9)
		СтруктураПараметров.Вставить("СуммаБезНДСВсегоУменьшение"); // всего уменьшение, Стоимость товаров (работ, услуг), имущественных прав без налога - всего (строка Всего уменьшение/Графа 5)
		СтруктураПараметров.Вставить("СуммаСНДСВсегоУменьшение"); // всего уменьшение, Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (строка Всего уменьшение/Графа 9)
		СтруктураПараметров.Вставить("СуммаНДСУменьшение"); // всего уменьшение, Сумма налога (строка Всего уменьшение/Графа 8)
		МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("KORSFAKT", "Файл.Документ.СвКСчФ.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
		МаксДлинаСтр = ПолучитьСвойствоПоляXDTOСхемы("KORSFAKT", "Файл.Документ.ТаблКСчФ.СведТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	Иначе
		// Если счет-фактура составляется на выполнение работы (оказание услуги), грузоотправитель/грузополучатель) - ставится прочерк.
		СтруктураПараметров.Вставить("ТолькоУслуги", Ложь);
		
		// При формировании ЭСФ, для грузоотправителя/грузополучателя) используются только следующие поля структуры:
		// ЭтоФизЛицо, НаименованиеОрганизации, Фамилия, Имя, Отчество, Адрес.
		СтруктураПараметров.Вставить("Грузополучатель", СтруктураРеквизитовУчастникаОбменаФНС());
		
		СведенияОГрузоотправителе = Новый Структура;
		СведенияОГрузоотправителе.Вставить("Грузоотправитель", СтруктураРеквизитовУчастникаОбменаФНС());
		СведенияОГрузоотправителе.Вставить("ОнЖе", Ложь); // может указываться только для грузоотправителя
		СтруктураПараметров.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
		// Сведения о платежно-расчетном документе (строка 5)
		ПлатежныеДокументы = Новый ТаблицаЗначений();
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД"); // Номер платежно-расчетного документа
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД"); // Дата составления платежно-расчетного документа
		СтруктураПараметров.Вставить("ПлатежныеДокументы", ПлатежныеДокументы);
		
		СтруктураПараметров.Вставить("ТаблицаТоваров", ЭСФТаблицаСведенийОТоваре());
		СтруктураПараметров.Вставить("СуммаБезНДСВсего"); // Стоимость товаров (работ, услуг), имущественных прав без налога - всего
		СтруктураПараметров.Вставить("СуммаСНДСВсего"); // Стоимость товаров (работ, услуг), имущественных прав с налогом - всего
		СтруктураПараметров.Вставить("СуммаНДСВсего"); // Сумма НДС, предъявляемая покупателю
		МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("SFAKT", "Файл.Документ.СвСчФакт.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
		МаксДлинаСтр = ПолучитьСвойствоПоляXDTOСхемы("SFAKT", "Файл.Документ.ТаблСчФакт.СведТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлинаСтр - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "НомерСчФ, ДатаСчФ, КодВалюты, Организация, Контрагент, Подписант,
	|ТаблицаТоваров" + ?(ЭтоКорректировочныйСФ, "", ", СуммаСНДСВсего"));
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"НомерСтроки, НаименованиеНоменклатуры, Акциза, СтавкаНДС, СтавкаНДСТип, Сумма" //, СуммаНДС
		+ ?(ЭтоКорректировочныйСФ, ", АкцизаДо, СтавкаНДСДо, СтавкаНДСТипДо, СуммаДо", "")); //СуммаНДСДо, СуммаНДСУменьшение, СуммаНДСУвеличение, СуммаУменьшение, СуммаУвеличение
	
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Акт501СтруктураСведенийПоВыполнениюУслуг()
	
	СтруктураВыполнения = Новый Структура;
	СтруктураВыполнения.Вставить("ДатаИсполнения");
	СтруктураВыполнения.Вставить("ПодписьИсполнителя", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураВыполнения.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());
	
	Возврат СтруктураВыполнения;
	
КонецФункции

Функция Акт501ТаблицаСведенийОбУслугах()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("НомерСтроки");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаУслуг.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("ИД");
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Функция Акт501ТаблицаСведенийОбОписанииУслуг()
	
	ТаблицаОписанийУслуг = Новый ТаблицаЗначений;
	ТаблицаОписанийУслуг.Колонки.Добавить("НомерСтроки");
	ТаблицаОписанийУслуг.Колонки.Добавить("НачалоРабот");
	ТаблицаОписанийУслуг.Колонки.Добавить("КонецРабот");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаБезНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаСНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("Услуги");
	
	Возврат ТаблицаОписанийУслуг;
	
КонецФункции

Функция Акт501СтруктураПараметров(ЭтоФизЛицо)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерАкта");
	СтруктураПараметров.Вставить("ДатаАкта");
	
	СтруктураПараметров.Вставить("ВидОперации");
	СтруктураПараметров.Вставить("ДокументыОснования");
	
	СтруктураПараметров.Вставить("Заголовок", "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель
	|ЗАКАЗЧИКА с другой стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).");
	
	СтруктураПараметров.Вставить("Исполнитель",  СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Заказчик",     СтруктураРеквизитовУчастникаОбменаФНС());
	
	СтруктураПараметров.Вставить("ТаблицаОписанийУслуг", Акт501ТаблицаСведенийОбОписанииУслуг());
	СтруктураПараметров.Вставить("ТаблицаУслуг", Акт501ТаблицаСведенийОбУслугах());
	
	СтруктураПараметров.Вставить("СведенияПоВыполнениюУслуг", Акт501СтруктураСведенийПоВыполнениюУслуг());
	
	СтруктураПараметров.Вставить("Подписант",    СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо));
	
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("IAKTPRM2", "Файл.Документ.СвАктИ.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("IAKTPRM2", "Файл.Документ.СвАктИ.ОписРабот.Работа", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "ДатаАкта, ТаблицаОписанийУслуг, Подписант");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "СуммаСНДСИтого, Услуги, Услуги.НомерСтроки, Услуги.ЕдиницаИзмерения");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Акт501ЗаказчикСтруктураПараметров(ЭтоФизЛицо)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС(ЭтоФизЛицо));
	СтруктураПараметров.Вставить("НомерАкта");
	СтруктураПараметров.Вставить("ДатаАкта");
	СтруктураПараметров.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());
	СтруктураПараметров.Вставить("ПодписьЗаказ", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураПараметров.Вставить("ДатаЗаказа");
	СтруктураПараметров.Вставить("Претензия");
	
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы("ZAKTPRM2", "Файл.Документ.СвАктИ.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Подписант");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Структура адреса содержит все возможные варианты заполнения адреса:
// Структурированный адрес (по КЛАДР), произвольный российский/иностранный.
// Тип адреса выбирается из списка значений ТипыАдресов и заполняется
// соответствующая структура, описанная в значении элемента списка.
// Пометка в списке типов должна быть одна, иначе будет браться первый тип адреса
// с пометкой и по этому типу будут заполняться данные адреса в ЭД.
//
Функция СтруктураАдресаФНС()
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	СтруктураАдреса.Вставить("ОбязательныеПоля", "КодРегион");

	
	ТипыАдресов = Новый СписокЗначений;
	ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);
	
	Возврат ТипыАдресов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка обязательных полей

Функция ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ТЗ, Знач ПоляТЗ, ИмяТЗ, ТекстОшибки)
	
	Если ТЗ.Количество() > 0 Тогда
		//СтруктураОбязательныхКолонок = Новый Структура(ПоляТЗ);
		МассивОбязательныхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляТЗ);
		Для Каждого Элемент Из МассивОбязательныхКолонок Цикл
			Элемент = СокрЛП(Элемент);
			// Доп. проверка наличия обязательных колонок во вложенных таблицах см. функцию Акт501СтруктураПараметров.
			Если Найти(Элемент, ".") = 0 И ТЗ.Колонки.Найти(Элемент) = Неопределено Тогда
					ШаблонОшибки = НСтр("ru = 'В таблице ""%1"" отсутствует обязательная к заполнению колонка: ""%2.""'");
					
					ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
						Элемент);
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ИмяТЗ, ПользовательскоеПредставление) + Символы.ПС;
					МассивОбязательныхКолонок.Удалить(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого Строка Из ТЗ Цикл
			Для Каждого Элемент Из МассивОбязательныхКолонок Цикл
				Элемент = СокрЛП(Элемент);
				// Проверка заполненности обязательных полей во вложенных таблицах см. функцию Акт501СтруктураПараметров.
				Если Найти(Элемент, ".") <> 0 Тогда
					ВложеннаяТаблица = Лев(Элемент, Найти(Элемент, ".") - 1);
					ОбязательныйПараметрВложеннойТаблицы = Сред(Элемент, Найти(Элемент, ".") + 1);
					
					ПользовательскоеПредставлениеТЗ = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(
						Источник, ВложеннаяТаблица);
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, Строка[ВложеннаяТаблица], ОбязательныйПараметрВложеннойТаблицы,
						ПользовательскоеПредставлениеТЗ, ТекстОшибки);
				Иначе
					ЗначениеПараметра = Строка[Элемент];
					Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
						ПроверитьЗаполнениеОбязательныхПолей(ЗначениеПараметра, ТекстОшибки);
					ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						ШаблонОшибки = НСтр("ru = 'В строке №%1 таблицы ""%2"" не заполнено значение ""%3.""'");
						
						ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
							Элемент);
						ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
							ТЗ.Индекс(Строка) + 1, ИмяТЗ, ПользовательскоеПредставление) + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Не заполнена обязательная таблица: ""%1.""'");
		ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяТЗ) + Символы.ПС;
	КонецЕсли;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

// Проверяет заполнение обязательных полей в СтруктуреПараметров, если значением
// обязательного поля является вложенная структура, то она рекурсивно проверяется
// в этой же функции, если значением обязательного поля является вложенная таблица
// значений, то она передаётся на проверку в функцию ПроверитьЗаполнениеОбязательныхПолейТЗ.
// Список обязательных полей проверяемой структуры, берется из значения элемента
// структуры с ключем "ОбязательныеПоля"
// Список обязательных колонок таблицы значений, берется из значения элемента структуры
// с ключом "ОбязательныеПоляТаблицыЗначений".
//
// Параметры:
//  Источник             - ссылка - ссылка на объект информационной базы.
//  СтруктураПараметров  - структура - проверяемая структура с данными.
//  ТекстОшибки - Строка - строка содержащая описание незаполненных полей
//    проверяемой структуры, может быть показана пользователю в вызывающей процедуре.
//
// Возвращаемое значение:
//  ПараметрыЗаполнены - Булево - Истина - если обязательные поля заполнены, иначе - Ложь.
//
Функция ПроверитьЗаполнениеОбязательныхПолей(Источник, СтруктураПараметров, ТекстОшибки = "")
	
	ОбязательныеПоля = "";
	ЗначениеПараметра = "";
	
	Если СтруктураПараметров.Свойство("ДанныеПодготовлены") И Не СтруктураПараметров.ДанныеПодготовлены Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураОбязательныхПолей = СтруктураПараметров;
	Если СтруктураПараметров.Свойство("ОбязательныеПоля", ОбязательныеПоля) Тогда
		СтруктураОбязательныхПолей = Новый Структура(ОбязательныеПоля);
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураОбязательныхПолей Цикл
		Если СтруктураПараметров.Свойство(Элемент.Ключ, ЗначениеПараметра) Тогда
			Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
				ПроверитьЗаполнениеОбязательныхПолей(Источник, ЗначениеПараметра, ТекстОшибки);
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
				ПоляТЗ = "";
				ПользовательскоеПредставлениеТЗ = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
					Элемент.Ключ);
				Если СтруктураПараметров.Свойство("ОбязательныеПоляТаблицыЗначений", ПоляТЗ) Тогда
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ЗначениеПараметра, ПоляТЗ, ПользовательскоеПредставлениеТЗ,
						ТекстОшибки);
				Иначе
					ШаблонОшибки = НСтр("ru = 'Не заполнен перечень обязательных полей таблицы: ""%1"".'");
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставлениеТЗ) + Символы.ПС;
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле структуры параметров: ""%1"".'");
					
					ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
						Элемент.Ключ);
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставление) + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ШаблонОшибки = НСтр("ru = 'Отсутствует обязательное поле в структуре параметров: ""%1"".'");
			ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				Элемент.Ключ) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

Процедура ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
	
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		ДанныеПокупателя.Вставить("ДоверенностьНомер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьНомер"));
		ДанныеПокупателя.Вставить("ДоверенностьДата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьДата"));
		ДанныеПокупателя.Вставить("ДоверенностьВыдана", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьВыдана"));
		ДанныеПокупателя.Вставить("ГрузПринялДолжность", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПринялДолжность"));
		ДанныеПокупателя.Вставить("ГрузПринялФИО", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПринялФИО"));
		ДанныеПокупателя.Вставить("ГрузПолучилДолжность", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилДолжность"));
		ДанныеПокупателя.Вставить("ГрузПолучилФИО", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилФИО"));
		ДанныеПокупателя.Вставить("ДатаПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗаказчика(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеЗаказчика)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
	
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		ДанныеЗаказчика.Вставить("Претензии", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Претензии"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеДоверенности(ДоверенностьXDTO, СтруктураДанныхДоверенности, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	Если ТипЗнч(СтруктураДанныхДоверенности) = Тип("Структура")
		И (ЗначениеЗаполнено(СтруктураДанныхДоверенности.ОрганизацияВыдавшаяДоверенность)
		ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.НомерДоверенности)
		ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДатаДоверенности)
		ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОВыдачеДоверенности)
		ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОДоверенномЛице)) Тогда
		
		Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.НомерДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "НомДоверен",
			СтруктураДанныхДоверенности.НомерДоверенности, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДатаДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ДатаДоверен",
			ДатаДД_ММ_ГГГГ(СтруктураДанныхДоверенности.ДатаДоверенности), , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ОрганизацияВыдавшаяДоверенность)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОВыдачеДоверенности)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Должность)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Фамилия) Тогда
			ВыданаКем = ПолучитьОбъектТипаCML("ДоверенностьТип.ВыданаКем", ПространствоИменСхемы);
			
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ОрганизацияВыдавшаяДоверенность) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем",
				СтруктураДанныхДоверенности.ОрганизацияВыдавшаяДоверенность, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОВыдачеДоверенности) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем",
				СтруктураДанныхДоверенности.ДопСведенияОВыдачеДоверенности, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Должность) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем",
				СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Должность, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Фамилия) Тогда
				ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия",
				СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Фамилия, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Имя",
				СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Имя, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Отчество) Тогда
					ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество",
					СтруктураДанныхДоверенности.ЛицоВыдавшееДоверенность.Отчество, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ВыданаКем", ВыданаКем, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОДоверенномЛице)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Должность)
			ИЛИ ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Фамилия) Тогда
			ВыданаКому = ПолучитьОбъектТипаCML("ДоверенностьТип.ВыданаКому", ПространствоИменСхемы);
			
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДопСведенияОДоверенномЛице) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому",
				СтруктураДанныхДоверенности.ДопСведенияОДоверенномЛице, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Должность) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", СтруктураДанныхДоверенности.ДоверенноеЛицо.Должность, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Фамилия) Тогда
				ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", СтруктураДанныхДоверенности.ДоверенноеЛицо.Фамилия, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", СтруктураДанныхДоверенности.ДоверенноеЛицо.Имя, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(СтруктураДанныхДоверенности.ДоверенноеЛицо.Отчество) Тогда
					ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", СтруктураДанныхДоверенности.ДоверенноеЛицо.Отчество, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДоверенностьXDTO, "ВыданаКому", ВыданаКому, , ТекстОшибки);
		КонецЕсли;
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДанныеПодписантаCML(ПодписантXDTO, СтруктураДанныхПодписанта, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	Если ТипЗнч(СтруктураДанныхПодписанта) = Тип("Структура") Тогда
		Если ТипЗнч(СтруктураДанныхПодписанта.ЭтоФизЛицо) = Тип("Булево") И СтруктураДанныхПодписанта.ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураДанныхПодписанта.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураДанныхПодписанта.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураДанныхПодписанта.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтруктураДанныхПодписанта.ИНН, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.СвидетельствоОРегистрацииИП) Тогда
				ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтруктураДанныхПодписанта.СвидетельствоОРегистрацииИП, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПодписантXDTO, "ИП", ИП, Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураДанныхПодписанта.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураДанныхПодписанта.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураДанныхПодписанта.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураДанныхПодписанта.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", СтруктураДанныхПодписанта.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", СтруктураДанныхПодписанта.Должность, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПодписантXDTO,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
		КонецЕсли;
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазрешилXDTO, ДолжностноеЛицо, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	Если ТипЗнч(ДолжностноеЛицо) = Тип("Структура") И ЗначениеЗаполнено(ДолжностноеЛицо.Фамилия) Тогда
		ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ДолжностноеЛицо.Фамилия, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ДолжностноеЛицо.Имя, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ДолжностноеЛицо.Отчество) Тогда
			ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ДолжностноеЛицо.Отчество, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДолжностноеЛицо.Должность) Тогда
			ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "Должность", ДолжностноеЛицо.Должность, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "ФИО", ФИОТип, Истина, ТекстОшибки);
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДанныеУчастникаФНСCML(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника.ЭтоФизЛицо) = Тип("Булево") Тогда
		ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		
		Если СтруктураПараметровУчастника.ЭтоФизЛицо Тогда
			СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", СтруктураПараметровУчастника.ИНН, ,ТекстОшибки);
			
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураПараметровУчастника.Фамилия,Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураПараметровУчастника.Имя, Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураПараметровУчастника.Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
			Если ПространствоИменСхемы = "IAKTPRM2" Тогда
				СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", "---", , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, , ТекстОшибки);
			КонецЕсли;
			Наименование = СтруктураПараметровУчастника.Фамилия + " " +
				СтруктураПараметровУчастника.Имя + " " + СтруктураПараметровУчастника.Отчество;
		Иначе
			СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СтруктураПараметровУчастника.НаименованиеОрганизации,  ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СтруктураПараметровУчастника.ИНН, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СтруктураПараметровУчастника.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, , ТекстОшибки);
			Если ПространствоИменСхемы = "IAKTPRM2" Тогда
				СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "---", Истина ,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Имя",     "---", Истина ,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
			КонецЕсли;
			Наименование = СтруктураПараметровУчастника.НаименованиеОрганизации;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.КодОКПО) Тогда
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО", СтруктураПараметровУчастника.КодОКПО, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Адрес = "";
	Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
		ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакт = ПолучитьОбъектТипаCML("УчастникТип.Контакт", ПространствоИменСхемы);
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.Телефон) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "УчастникТип.Контакт", "Тлф", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(Лев(СтруктураПараметровУчастника.Телефон, Длина));
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Номер телефона превышает допустимую длину %1 симв. (участник обмена %2).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД("Заполнение XDTO", ТекстСообщения);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "Тлф", Значение, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.Факс) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "УчастникТип.Контакт", "Факс", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(Лев(СтруктураПараметровУчастника.Факс, Длина));
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Номер факса превышает допустимую длину %1 симв. (участник обмена %2).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД("Заполнение XDTO", ТекстСообщения);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "Факс", Значение, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", Контакт, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь; 
	РеквизитыБанка = "НомерСчета, НаимБанк, БИК";
	БанковскиеРеквизиты = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИменСхемы);
	СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИменСхемы);
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровУчастника.БанковскийСчет Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) И Найти(РеквизитыБанка, ЭлементСтруктуры.Ключ) > 0 Тогда
			Если ЭлементСтруктуры.Ключ = "НомерСчета" Тогда
				ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение, ,ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СвБанк, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение, ,ТекстОшибки);
			КонецЕсли;
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "СвБанк", СвБанк, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанковскиеРеквизиты, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Функция ЗаполнитьДанныеУчастникаФНСДляЭСФCML(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника.ЭтоФизЛицо) = Тип("Булево") Тогда
		ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИменСхемы);
		
		Если СтруктураПараметровУчастника.ЭтоФизЛицо Тогда
			СвФЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвФЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", СтруктураПараметровУчастника.ИНН, ,ТекстОшибки);
			
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураПараметровУчастника.Фамилия,Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураПараметровУчастника.Имя, Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураПараметровУчастника.Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
		Иначе
			СвЮЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СтруктураПараметровУчастника.НаименованиеОрганизации,  ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СтруктураПараметровУчастника.ИНН, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СтруктураПараметровУчастника.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Адрес = "";
	Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
		ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Процедура СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ВерсияСхемы = "4.01", ИмяСвойства = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяСвойства) Тогда
		ИмяСвойства = ВидКонтрагента;
	КонецЕсли;
	
	ДанныеКонтрагента = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства, ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);
	ИдКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(ДанныеКонтрагента, ВидКонтрагента);
	ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, Истина, ТекстОшибки);
	
	// Заполнение реквизитов юридического или физического лица.
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);
	
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование);
	
	Если НЕ ЗначениеЗаполнено(ПолноеНаименование) Тогда
		ПолноеНаименование = ?(ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование), ДанныеЮрФизЛица.ПолноеНаименование,
			ДанныеЮрФизЛица.Представление);
	КонецЕсли;
	
	РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФизЛицо", "ЮрЛицо");
	РеквизитыКонтрагентаXDTO = ПолучитьОбъектТипаCML("Контрагент."+РеквизитыКонтрагентаИмя, ВерсияСхемы);
	
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ПолноеНаименованиеИмя, ПолноеНаименование, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ИНН", ДанныеЮрФизЛица.ИНН, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "КПП", ДанныеЮрФизЛица.КПП, , ТекстОшибки);
	
	Если НЕ ЭтоФизЛицо Тогда
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ОКПО", ДанныеЮрФизЛица.КодПоОКПО, , ТекстОшибки);
	КонецЕсли;
	
	// Юр.адрес или адрес регистрации.
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ЮридическийАдрес) Тогда
		
		ЮридическийАдресИмя  = ?(ЭтоФизЛицо, "АдресРегистрации", "ЮридическийАдрес");
		ЮридическийАдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		
		ЗаполнитьСвойствоXDTO(ЮридическийАдресXDTO, "Представление", ДанныеЮрФизЛица.ЮридическийАдрес, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ЮридическийАдресИмя, ЮридическийАдресXDTO, , ТекстОшибки);
		
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Контрагент, РеквизитыКонтрагентаИмя, РеквизитыКонтрагентаXDTO, , ТекстОшибки);
	
	// РасчетныеСчета.
	РасчСчет = Неопределено;
	Если ((ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетОрганизации", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетКонтрагента", РасчСчет))
		ИЛИ (ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузополучателя", РасчСчет)))
		И ЗначениеЗаполнено(РасчСчет) Тогда
		
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемы);
		РасчетныйСчет = ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РасчетныйСчет, "НомерСчета", РасчСчет.НомерСчета, Истина, ТекстОшибки);
		
		// Банк
		Банк = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", РасчСчет.Банк.КоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "Наименование", РасчСчет.Банк.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "БИК", РасчСчет.Банк.Код, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РасчетныйСчет, "Банк", Банк, Истина, ТекстОшибки);
		
		// Банк корреспондент
		Если ЗначениеЗаполнено(РасчСчет.БанкДляРасчетов) Тогда
			БанкКорр = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(БанкКорр, "СчетКорреспондентский", РасчСчет.БанкДляРасчетов.КоррСчет, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорр, "Наименование", РасчСчет.БанкДляРасчетов.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорр, "БИК", РасчСчет.БанкДляРасчетов.Код, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РасчетныйСчет, "БанкКорреспондент", БанкКорр, , ТекстОшибки);
		КонецЕсли;
		
		РасчетныеСчета.РасчетныйСчет.Добавить(РасчетныйСчет);
		ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , ТекстОшибки);
	КонецЕсли;
	
	// Адрес
	Если ТипЗнч(ДанныеЮрФизЛица) = Тип("Структура") И ДанныеЮрФизЛица.Свойство("ФактическийАдрес")
		И ЗначениеЗаполнено(ДанныеЮрФизЛица.ФактическийАдрес) Тогда
		
		АдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", ДанныеЮрФизЛица.ФактическийАдрес, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресXDTO, , ТекстОшибки);
	КонецЕсли;
	
	// Контакты организации
	Если (ВидКонтрагента = "Организация") Тогда
		ТаблицаКонтактов = ЭлектронныеДокументыПереопределяемый.ПолучитьКонтактнуюИнформацию(ДанныеКонтрагента);
		Если ТаблицаКонтактов.Количество()>0 Тогда
			Контакты = ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемы);
			ЕстьКонтакты = Ложь;
			Для Каждого СтрокаКонтакта из ТаблицаКонтактов Цикл
				Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемы);
				ТекстОшибки = "";
				Если СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"EmailОрганизации") Тогда
						
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Почта");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип", Тип, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"ТелефонОрганизации") Тогда
					
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Телефон рабочий");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"ФаксОрганизации") Тогда
					
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Факс");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
					
				КонецЕсли;
				Если ТекстОшибки="" Тогда
					Контакты.Контакт.Добавить(Контакт);
					ЕстьКонтакты = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьКонтакты Тогда
				ЗаполнитьСвойствоXDTO(Контрагент, "Контакты",	Контакты, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

Функция ЗаполнитьДанныеГрузоотправителяПолучателяЭСФCML(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	Перем ЭтоФизЛицо, Адрес, НаименованиеОрганизации, Фамилия, Имя, Отчество;
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника) = Тип("Структура")
		И СтруктураПараметровУчастника.Свойство("ЭтоФизЛицо", ЭтоФизЛицо) И ТипЗнч(ЭтоФизЛицо) = Тип("Булево") Тогда
		НаимГОП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП", ПространствоИменСхемы);
		Если ЭтоФизЛицо Тогда
			ФИОИП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП.ФИОИП",  ПространствоИменСхемы);
			СтруктураПараметровУчастника.Свойство("Фамилия", Фамилия);
			СтруктураПараметровУчастника.Свойство("Имя", Имя);
			СтруктураПараметровУчастника.Свойство("Отчество", Отчество);
			ЗаполнитьСвойствоXDTO(ФИОИП, "Фамилия", Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИОИП, "Имя", Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИОИП, "Отчество", Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(НаимГОП, "ФИОИП", ФИОИП, Истина, ТекстОшибки);
		Иначе
			СтруктураПараметровУчастника.Свойство("НаименованиеОрганизации", НаименованиеОрганизации);
			ЗаполнитьСвойствоXDTO(НаимГОП, "НаимОрг", НаименованиеОрганизации, Истина ,ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "НаимГОП", НаимГОП, Истина, ТекстОшибки);
		
		Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
			ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
		КонецЕсли;
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Процедура ЗаполнитьАдресФНС(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы)
	
	Если ТипЗнч(АдресМестонахождения) = Тип("СписокЗначений") Тогда
		ЗаполненныйТип = Неопределено;
		Для Каждого Элемент Из АдресМестонахождения Цикл
			Если Элемент.Пометка Тогда
				ЗаполненныйТип = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
			АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
			СхемаСчетаФактуры = (Найти(ПространствоИменСхемы, "SFAKT") <> 0);
			Адрес = ЗаполненныйТип.Значение;
			Если ЗаполненныйТип.Представление = "Структурированный" Тогда
				АдрРФ = ПолучитьОбъектТипаCML("АдресТип.АдрРФ", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", Адрес.КодРегион, СхемаСчетаФактуры, ТекстОшибки);
				РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
				Для Каждого Элемент Из Адрес Цикл
					Если Найти(РеквизитыАдреса, Элемент.Ключ) > 0 И ЗначениеЗаполнено(Элемент.Значение) Тогда
						ЗаполнитьСвойствоXDTO(АдрРФ, Элемент.Ключ, Элемент.Значение, , ТекстОшибки);
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, СхемаСчетаФактуры, ТекстОшибки);
			ИначеЕсли НЕ СхемаСчетаФактуры И ЗаполненныйТип.Представление = "Произвольный" Тогда
				// В схеме ТОРГ-12 и Акт, адрес в виде строки передается в элементе схемы "АдрТекст".
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрТекст", Адрес.АдресСтрокой, , ТекстОшибки);
			Иначе
				// В схеме счета-фактуры, адрес в виде строки передается в элементе схемы "АдрИНО".
				АдресXDTO = ПолучитьОбъектТипаCML("АдресТип.АдрИНО", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(АдресXDTO, "КодСтр", Адрес.КодСтраны, СхемаСчетаФактуры, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрТекст", Адрес.АдресСтрокой, СхемаСчетаФактуры, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрИНО", АдресXDTO, СхемаСчетаФактуры, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, СхемаСчетаФактуры, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML(Товар, СтруктураПараметров, ТекстОшибки, ВерсияСхемы = "4.01")
	
	// Формируем ИД товара.
	Если ЗначениеЗаполнено(СтруктураПараметров.Ид) Тогда
		ИДТовара = СтруктураПараметров.Ид;
	Иначе
		Номенклатура = СтруктураПараметров.Номенклатура;
		ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
		
		ИДХарактеристики = ""; ИДУпаковки = "";
		Если СтруктураПараметров.Владелец().Колонки.Найти("Характеристика") <> Неопределено Тогда
			Характеристика = СтруктураПараметров.Характеристика;
			ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
		КонецЕсли;
		Если СтруктураПараметров.Владелец().Колонки.Найти("Упаковка") <> Неопределено Тогда
			Упаковка = СтруктураПараметров.Упаковка;
			ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
		КонецЕсли;
		
		ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Товар, "Ид", ИДТовара, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ШтрихКод") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", СтруктураПараметров.ШтрихКод, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Артикул") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Артикул", СтруктураПараметров.Артикул, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ИДТовара") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ИДТовара", СтруктураПараметров.ИДТовара, , ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Товар, "Наименование", СтруктураПараметров.Наименование, Истина, ТекстОшибки);
	
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ВерсияСхемы);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", СтруктураПараметров.БазоваяЕдиницаКод, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Наименование", СтруктураПараметров.БазоваяЕдиницаНаименование, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", СтруктураПараметров.БазоваяЕдиницаНаименованиеПолное, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", СтруктураПараметров.БазоваяЕдиницаМеждународноеСокращение, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Описание") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ДополнительныеРеквизиты") <> Неопределено
		И СтруктураПараметров.ДополнительныеРеквизиты <> Неопределено Тогда
		
		Для Каждого Элемент Из СтруктураПараметров.ДополнительныеРеквизиты Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Элемент.Ключ, Истина, ТекстОшибки);
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива ИЗ Элемент.Значение Цикл
					// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
					Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
						Если ТипЗнч(ЭлементМассива) = Тип("СписокЗначений") Тогда
							ЗаполненныйТип = Неопределено;
							Для Каждого Элемент Из ЭлементМассива Цикл
								Если Элемент.Пометка Тогда
									ЗаполненныйТип = Элемент;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
								Адрес = ЗаполненныйТип.Значение;
								Если ЗаполненныйТип.Представление = "Структурированный" Тогда
									ЭлементМассива = СобратьАдрес(Адрес);
								Иначе
									ЭлементМассива = Адрес.АдресСтрокой;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ЗначениеРеквизита.Значение.Добавить(ЭлементМассива)
				КонецЦикла;
			Иначе
				// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
				Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
					Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
						ЗаполненныйТип = Неопределено;
						Для Каждого Элемент Из Элемент.Значение Цикл
							Если Элемент.Пометка Тогда
								ЗаполненныйТип = Элемент;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
							Адрес = ЗаполненныйТип.Значение;
							Если ЗаполненныйТип.Представление = "Структурированный" Тогда
								Элемент.Значение = СобратьАдрес(Адрес);
							Иначе
								Элемент.Значение = Адрес.АдресСтрокой;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЗначениеРеквизита.Значение.Добавить(Элемент.Значение)
			КонецЕсли;
			
			Товар.ДополнительныеРеквизиты.Добавить(ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, СтруктураПараметров, ТекстОшибки, МассивКолонок)
	
	Для каждого Колонка из МассивКолонок Цикл
		Если Колонка = "ВидОплаты" ТОгда
			
			Если СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Аванс (до обеспечения)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Аванс (до подтверждения)") Тогда
				ВариантОплаты = "Аванс";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Кредит (после отгрузки)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Кредит (после поступления)") Тогда
				ВариантОплаты = "Кредит";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Предоплата (до отгрузки)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Предоплата (до поступления)") Тогда
				ВариантОплаты = "Предоплата";
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ВидОплаты", ВариантОплаты, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ДатаПлатежа" ТОгда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ДатаПлатежа", XMLДата(СтруктураПараметров.ДатаПлатежа), Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ПроцентПлатежа" ТОгда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ПроцентПлатежа", СтруктураПараметров.ПроцентПлатежа, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "СуммаПлатежа" ТОгда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"СуммаПлатежа", СтруктураПараметров.СуммаПлатежа, Истина, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураПараметров, ТекстОшибки)
	
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", СтруктураПараметров.ЕдиницаИзмеренияКод, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование", СтруктураПараметров.ЕдиницаИзмеренияНаименование, ,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент", СтруктураПараметров.Коэффициент, , ТекстОшибки);
	
КонецПроцедуры

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка установки значения свойства ""%1""!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД("Заполнение XDTO", ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки
	
КонецПроцедуры

Функция XMLЧисло(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция XMLДатаВремя(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;
	
	Возврат "0001-01-01T00:00:00";
	
КонецФункции

Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

Функция ДатаДД_ММ_ГГГГ(ДатаВремя)
	
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		ВозврЗначение = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Иначе
		ВозврЗначение = Лев(ДатаВремя, 10);
	КонецЕсли;
	
	Возврат ВозврЗначение;
	
КонецФункции

Функция ВернутьНомерВерсииИзИдЭД(ИдОтправителя)
	
	НомерВерсии = 0;
	НачПозиция = Найти(ИдОтправителя, "##");
	Если НачПозиция > 0 Тогда
		НомерВерсии = Сред(ИдОтправителя, НачПозиция + 2, СтрДлина(ИдОтправителя) - (НачПозиция + 1));
	КонецЕсли;
	
	Возврат НомерВерсии;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// CML

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = СтрРазделить(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ПолучитьЗначениеТипаCML(Тип, Значение)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипЗначения = ПолучитьТипЗначенияCML(Тип);
	Иначе
		ТипЗначения = Тип;
	КонецЕсли;
	
	Если ТипЗначения = Неопределено Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	НовоеЗначение = ФабрикаXDTO.Создать(ТипЗначения, Значение);
	
	Возврат НовоеЗначение;
	
КонецФункции

Функция СтрРазделить(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = Найти(Строка, "{");
	КонПозицияПервогоЭлемента = Найти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = Найти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Разбор файлов

Процедура ПрочитатьАктОПриемкеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоСуммаОбщая = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаОбщая");
		Если СвойствоСуммаОбщая <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СвойствоСуммаОбщая));
		КонецЕсли;
		СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
		Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");
	Если СвойствоЭД <> Неопределено Тогда
		Исполнитель = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Заказчик");
	Если СвойствоЭД <> Неопределено Тогда
		Заказчик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ТекстДокумента");
	Если СвойствоЭД <> Неопределено Тогда
		ТекстДокумента = ЭД.Получить(СвойствоЭД);
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Заголовок");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("ОписаниеВыполненныхРабот");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОписаниеВыполненныхРабот", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Претензии");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Претензии", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
	Конецесли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");
	Если СвойствоЭД <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьАкт501XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: "+КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		СтрокаДокументОснование = НовыйЭД.Строки.Найти("ИДЭДДокументаОснования", "Реквизит", Истина);
		Если СтрокаДокументОснование <> Неопределено Тогда
			ДокументОснование = ПолучитьДокументОснование(СтрокаДокументОснование.ЗначениеРеквизита);
			Если ДокументОснование <> Неопределено Тогда
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ДокументыОснования");
				ДобавитьРеквизитШапкиОбъекта(НайденныйТипВДереве, "ДокументОснования", ДокументОснование, ДокументОснование);
				НайденнаяСтрока = НайденныйТипВДереве.Строки.Найти(ДокументОснование, "СсылкаНаОбъект");
				НайденнаяСтрока.ИндексСтроки = НайденныйТипВДереве.ИндексСтроки + "_"
					+ Строка(НайденныйТипВДереве.Строки.Индекс(НайденнаяСтрока));
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Основание", НайденнаяСтрока.ИндексСтроки, ДокументОснование);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвАктИ.НомАкт);
	ДатаДок = ЭД.Документ.СвАктИ.ДатаАкт;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ЭД.Документ.СвАктИ.Заголовок);
	
	Исполнитель = ЭД.Документ.СвАктИ.Исполнитель;
	Если Исполнитель <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
		КонецЕсли;
	КонецЕсли;
	
	Заказчик = Неопределено;
	Если НЕ ЭД.Документ.СвАктИ.Свойства().Получить("Заказчик") = Неопределено Тогда
		Заказчик = ЭД.Документ.СвАктИ.Заказчик;
	ИначеЕсли ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		Заказчик = ДанныеЗаказчикаИзДопДанных(ДеревоДопДанных);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЗаказчикВДопДанных", Истина);
	КонецЕсли;
	Если Заказчик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");
		КонецЕсли;
	КонецЕсли;
	
	НаборДанныхОписанияРабот = ЭД.Документ.СвАктИ.ОписРабот;
	СуммаДокумента = 0;
	Если ТипЗнч(НаборДанныхОписанияРабот) = Тип("СписокXDTO") Тогда
		Сч = 1;
		Для Каждого ЭлементОписания Из НаборДанныхОписанияРабот Цикл
			
			СписокОписаний = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "СписокОписаний");
			
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "НачРабот",  ЭлементОписания.НачРабот);
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "КонРабот",  ЭлементОписания.КонРабот);
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "Сумма",     ЭлементОписания.СумБезНДСИт);
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "СуммаНДС",  ЭлементОписания.СумНДСИт);
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "СуммаСНДС", ЭлементОписания.СумУчНДСИт);
			
			СуммаДокумента = СуммаДокумента + ?(ЗначениеЗаполнено(ЭлементОписания.СумУчНДСИт), ЭлементОписания.СумУчНДСИт, 0);
			
			// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
			АвторЭДПокупатель = Ложь;
			ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
			
			НаборДанных = ЭлементОписания.Работа;
			Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
				Для Каждого Элемент Из НаборДанных Цикл
					НаимТовара = ""; ИдТовара = "";
					ЕстьДопРеквизиты = Ложь;
					
					СписокТЧ = Новый СписокЗначений;
					СписокТЧ.Добавить(Элемент.Номер,      "Номер");
					СписокТЧ.Добавить(Элемент.НаимРабот,  "Наименование");
					СписокТЧ.Добавить(Элемент.Количество, "Количество");
					СписокТЧ.Добавить(Элемент.Цена,       "Цена");
					СписокТЧ.Добавить(Элемент.СумБезНДС,  "Сумма");
					СписокТЧ.Добавить(Элемент.СумНДС,     "СуммаНДС");
					СписокТЧ.Добавить(Элемент.СумУчНДС,   "СуммаСНДС");
					СписокТЧ.Добавить(Элемент.Описание,   "Описание");
					СписокТЧ.Добавить(Элемент.НаимЕдИзм,  "ЕдиницаИзмеренияНаименование");
					СписокТЧ.Добавить(Элемент.ОКЕИ,       "ЕдиницаИзмеренияКод");
					
					// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
					Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
						Если Найти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
							// В инф.поле xml-строка неактуального формата.
							ОбъектXML = Новый ЧтениеXML;
							Попытка
								ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
								УслугаXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
								СписокТЧ.Добавить(УслугаXDTO["Ид"], "ИД");
							Исключение
							КонецПопытки;
						Иначе
							// В инф.поле xml-строка Актуального формата.
							ИнфПол = Элемент.ИнфПолСтр;
							ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Услуги", Строка(Сч) + "." + Элемент.Номер);
						КонецЕсли;
					КонецЕсли;
					
					ИдТовара = "";
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Строка(Сч) + "." + Элемент.Номер, "Услуги", Ошибка);
					
					РеквизитыНоменклатуры = Новый Структура;
					РеквизитыЕдиницыИзмерения = Новый Структура;
					РеквизитыБазовойЕдиницыИзмерения = Новый Структура;
					
					Для Каждого ЭлементСЗ Из СписокТЧ Цикл
						
						// Номенклатура.
						Если ЭлементСЗ.Представление = "Наименование" Тогда
							РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "Характеристика" Тогда
							РеквизитыНоменклатуры.Вставить("Характеристика", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
							РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "БазоваяЕдиницаКод" Тогда
							РеквизитыБазовойЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "БазоваяЕдиницаНаименование" Тогда
							РеквизитыБазовойЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
							РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
							РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
							ИдТовара = ЭлементСЗ.Значение;
						ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
							СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(ЭлементСЗ.Значение);
							ЭлементСЗ.Значение = СтавкаНалога;
						ИначеЕсли ЭлементСЗ.Представление = "ИДЭДДокументаОснования" Тогда
							ДокументОснование = ПолучитьДокументОснование(ЭлементСЗ.Значение);
							Если ДокументОснование <> Неопределено Тогда
								СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					НаимРабот = "";
					РеквизитыНоменклатуры.Свойство("Наименование", НаимРабот);
					КодЕдИзм = "";
					Если РеквизитыБазовойЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
						НаименованиеЕдИзм = "";
						РеквизитыБазовойЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
							РеквизитыБазовойЕдиницыИзмерения);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм), НаименованиеЕдИзм,
							ЕдИзм, РеквизитыБазовойЕдиницыИзмерения, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
					
					КодЕдИзм = "";
					Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
						НаименованиеЕдИзм = "";
						РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
							РеквизитыЕдиницыИзмерения);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(КодЕдИзм),
							НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
					
					// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
					Если ИдентификацияПоНоменклатуреКомпании Тогда
						СтруктураИд = РазобратьИДТовара(ИдТовара);
						Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Иначе
						// Номенклатура поставщиков.
						РеквизитыНоменклатурыПоставщика = Новый Структура;
						ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
						ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
						
						РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
						РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
						
						Если ЗначениеЗаполнено(НаимРабот) Тогда
							РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимРабот);
						КонецЕсли;
						
						НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
							РеквизитыНоменклатурыПоставщика);
						
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимРабот, НоменклатураПоставщика,
							РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
						СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
						
						Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
							РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
							РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
						КонецЕсли;
						СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
						ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара);
						
						Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
					КонецЕсли;
					
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимРабот, Номенклатура,
					РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
					
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
					
					ДобавитьРеквизитыТЧОбъекта(СписокОписаний, "Работа", СписокТЧ);
				КонецЦикла;
			КонецЕсли;
			Сч = Сч + 1;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СписокОписаний", СписокОписаний);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьАкт501ЗаказчикXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	Если ЭД.Документ.СвАктИ.Принял <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвАктИ.Принял.ДатаЗаказ;
		ДатаПолучения = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.НомДоверен);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО <> Неопределено Тогда
					ВспомогательнаяСтруктура.Вставить("ФИО", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Имя + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО <> Неопределено Тогда
					ВспомогательнаяСтруктура.Вставить("ФИО", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Имя + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
			Если ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялДолжность", ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.Должность);
				Если ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО <> Неопределено Тогда
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Имя + " " + ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЭД.Документ.СвАктИ.Принял.Претенз <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Претензии", ЭД.Документ.СвАктИ.Принял.Претенз);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТОРГ12XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНО.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		СтрокаДокументОснование = НовыйЭД.Строки.Найти("ИДЭДДокументаОснования", "Реквизит", Истина);
		Если СтрокаДокументОснование <> Неопределено Тогда
			ДокументОснование = ПолучитьДокументОснование(СтрокаДокументОснование.ЗначениеРеквизита);
			Если ДокументОснование <> Неопределено Тогда
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ДокументыОснования");
				ДобавитьРеквизитШапкиОбъекта(НайденныйТипВДереве, "ДокументОснования", ДокументОснование, ДокументОснование);
				НайденнаяСтрока = НайденныйТипВДереве.Строки.Найти(ДокументОснование, "СсылкаНаОбъект");
				НайденнаяСтрока.ИндексСтроки = НайденныйТипВДереве.ИндексСтроки + "_"
					+ Строка(НайденныйТипВДереве.Строки.Индекс(НайденнаяСтрока));
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Основание", НайденнаяСтрока.ИндексСтроки, ДокументОснование);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвТНО.ТН.НомТН);
	ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));
	
	СуммаДокумента = ?(ЗначениеЗаполнено(ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс), ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс,
		ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
	Грузоотправитель = Неопределено;
	ДопПараметрыГрузоотправителя = Новый Структура;
	Поставщик = ЭД.Документ.СвТНО.Поставщик;
	Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
		ДопПараметрыГрузоотправителя.Вставить("СтруктурноеПодразделение", ЭД.Документ.СвТНО.ГрузОт.СтруктПодр);
		ДопПараметрыГрузоотправителя.Вставить("ОКДП", ЭД.Документ.СвТНО.ГрузОт.ОКДП);
		Грузоотправитель = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
		Если Не ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт = Неопределено Тогда
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Телефоны", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф);
			КонецЕсли;
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Факс", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поставщик <> Неопределено Тогда
		Грузоотправитель = Поставщик;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьРуководителя", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОРуководителя",
				ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьГлавБухгалтера", ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОГлавБухгалтера",
				ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьКладовщика", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОКладовщика",
				ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
	КонецЕсли;
	
	Если Грузоотправитель <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
		Если ДопПараметрыГрузоотправителя.Количество() > 0 Тогда
			ИндексУзла = ДеревоРазбора.Строки.Найти("Грузоотправитель", "Реквизит", Истина);
			Если ИндексУзла <> Неопределено И ЗначениеЗаполнено(ИндексУзла.ЗначениеРеквизита) Тогда
				СтрокаГрузоотправителя = ДеревоРазбора.Строки.Найти(ИндексУзла.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаГрузоотправителя <> Неопределено Тогда
					Для Каждого ДопПараметр Из ДопПараметрыГрузоотправителя Цикл
						ДобавитьРеквизитШапкиОбъекта(СтрокаГрузоотправителя, ДопПараметр.Ключ, ДопПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ГрузПолуч <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(ЭД.Документ.СвТНО.ГрузПолуч, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	// Грузоотправитель и Поставщик - необязательные элементы xsd-схемы,
	// но один из этих элементов обязательно должен быть заполнен
	// (Согласно подп. "в" п.2 ст. 9 Федерального закона от 21.11.1996 №129-ФЗ).
	Если Поставщик = Неопределено Тогда
		Поставщик = Грузоотправитель;
	КонецЕсли;
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Плательщик = ЭД.Документ.СвТНО.Плательщик;
	Если Плательщик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.Основание <> Неопределено Тогда
		ДатаПоДаннымКлиента = ЭД.Документ.СвТНО.Основание.ДатаОсн;
		Если ЗначениеЗаполнено(ДатаПоДаннымКлиента) Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Дата(Сред(ДатаПоДаннымКлиента, 7, 4)
				+ Сред(ДатаПоДаннымКлиента, 4, 2) + Сред(ДатаПоДаннымКлиента, 1, 2)));
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ЭД.Документ.СвТНО.Основание.НомОсн);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОснования", ЭД.Документ.СвТНО.Основание.НаимОсн);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Документ.СвТНО.ОКУДПервДок);
	
	Если ЭД.Документ.СвТНО.ТН.ТНОбщ <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗап);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗапПр);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМест);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМестПр);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.БруттоПр);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумБезНДСВс);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумНДСВс);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ЭД.Документ.СвТНО.ОтпускГруз.СумОтпускПр);
		ДатаДок = ЭД.Документ.СвТНО.ОтпускГруз.ДатаОтпуск;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтпуска", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЛистовВПрилПрописью", ЭД.Документ.СвТНО.ОтпускГруз.КолПрилПр);
	КонецЕсли;
	
	НаборДанных = ЭД.Документ.СвТНО.ТН.Таблица.СвТов;
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			СписокТЧ.Добавить(Элемент.НомТов,      "Номер");
			СписокТЧ.Добавить(Элемент.НаимТов,     "Наименование");
			СписокТЧ.Добавить(Элемент.ХарактерТов, "НаименованиеХарактеристики");
			СписокТЧ.Добавить(Элемент.СортТов,     "Сорт");
			СписокТЧ.Добавить(Элемент.АртикулТов,  "Артикул");
			СписокТЧ.Добавить(Элемент.НаимЕдИзм,   "ЕдиницаИзмеренияНаименование");
			СписокТЧ.Добавить(Элемент.ОКЕИ_Тов,    "ЕдиницаИзмеренияКод");
			СписокТЧ.Добавить(Элемент.КодТов,      "ТоварКод");
	
			СписокТЧ.Добавить(Элемент.Нетто,     "Количество");
			СписокТЧ.Добавить(Элемент.КолМест,   "Мест");
			СписокТЧ.Добавить(Элемент.ВидУпак,   "Упаковка");
			СписокТЧ.Добавить(Элемент.Место,     "КоличествоВОдномМесте");
			СписокТЧ.Добавить(Элемент.Нетто,     "МассаНетто");
			СписокТЧ.Добавить(Элемент.Брутто,    "МассаБрутто");
			СписокТЧ.Добавить(Элемент.Цена,      "Цена");
			СписокТЧ.Добавить(Элемент.СумБезНДС, "Сумма");
			СписокТЧ.Добавить(Элемент.СумНДС,    "СуммаНДС");
			СписокТЧ.Добавить(Элемент.СумУчНДС,  "СуммаСНДС");
			
			// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
			Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) И Найти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
				
				СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Элемент.СтавкаНДС);
				СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
				
				// В инф.поле xml-строка неактуального формата.
				ОбъектXML = Новый ЧтениеXML;
				Попытка
					ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
					ТоварXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					РазобратьСтрокуТЧCML(ТоварXDTO, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				Исключение
				КонецПопытки;
			Иначе
				Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
					// В инф.поле xml-строка Актуального формата.
					ИнфПол = Элемент.ИнфПолСтр;
					ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Элемент.НомТов);
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Элемент.НомТов, "Товары", Ошибка);
				КонецЕсли;
				РеквизитыНоменклатуры = Новый Структура;
				РеквизитыЕдиницыИзмерения = Новый Структура;
				ИдТовара = "";
				СтавкаНДСПереданаДопПараметром = Ложь;
				Для Каждого ЭлементСЗ Из СписокТЧ Цикл
					
					// Номенклатура.
					Если ЭлементСЗ.Представление = "Наименование" Тогда
						РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Характеристика" Тогда
						РеквизитыНоменклатуры.Вставить("Характеристика", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
						РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
						ИдТовара = ЭлементСЗ.Значение;
						
					// Проверка наличия ставки НДС в доп. параметрах.
					ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
						СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(ЭлементСЗ.Значение);
						ЭлементСЗ.Значение = СтавкаНалога;
						СтавкаНДСПереданаДопПараметром = Истина;
					ИначеЕсли ЭлементСЗ.Представление = "ИДЭДДокументаОснования" Тогда
						ДокументОснование = ПолучитьДокументОснование(ЭлементСЗ.Значение);
						Если ДокументОснование <> Неопределено Тогда
							СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// Ставка НДС может прийти в доп. параметрах.
				Если НЕ СтавкаНДСПереданаДопПараметром Тогда
					СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Элемент.СтавкаНДС);
					СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
				КонецЕсли;
				
				НаимТовара = "";
				РеквизитыНоменклатуры.Свойство("Наименование", НаимТовара);
				
				КодЕдИзм = "";
				Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
					НаименованиеЕдИзм = "";
					РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
						РеквизитыЕдиницыИзмерения);
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм),
						НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
				// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
				Если ИдентификацияПоНоменклатуреКомпании Тогда
					СтруктураИд = РазобратьИДТовара(ИдТовара);
					Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
						ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
							СтруктураИд.ИДХарактеристики);
						Если СписокТЧ.НайтиПоЗначению(ХарактеристикаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
						КонецеСли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
						УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
							СтруктураИд.ИДУпаковки);
						Если СписокТЧ.НайтиПоЗначению(УпаковкаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
						КонецеСли;
					КонецЕсли;
				Иначе
					// Номенклатура поставщиков.
					РеквизитыНоменклатурыПоставщика = Новый Структура;
					ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
					ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
					
					РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
					РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
					Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаимТовара) Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
					КонецЕсли;
					
					НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
						РеквизитыНоменклатурыПоставщика);
					
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
						РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
					
					Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
						РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
						РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
					КонецЕсли;
					СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
					ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара);
					
					Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
					Конецесли;
				КонецЕсли;
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
					РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
				
				ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТОРГ12ПокупательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНП.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНП.ПолучилГруз <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвТНП.ПолучилГруз.ДатаПолуч;
		ДатаПолучения = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.НомДоверен);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО <> Неопределено Тогда
					ВспомогательнаяСтруктура.Вставить("ФИО", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Фамилия + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Имя + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО <> Неопределено Тогда
					ВспомогательнаяСтруктура.Вставить("ФИО", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Фамилия + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Имя + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.Должность);
			Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Фамилия + " "
					+ ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Имя + " " + ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.Должность);
			Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Фамилия + " "
					+ ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Имя + " " + ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьНакладнуюXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("СуммаВсего");
	Если СвойствоЭД <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Грузоотправитель");
	Если СвойствоЭД <> Неопределено Тогда
		Грузоотправитель = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Грузополучатель");
	Если СвойствоЭД <> Неопределено Тогда
		Грузополучатель = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеКонтрагента(Грузополучатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Поставщик");
	Если СвойствоЭД <> Неопределено Тогда
		Поставщик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Плательщик");
	Если СвойствоЭД <> Неопределено Тогда
		Плательщик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Основание");
	Если СвойствоЭД<>Неопределено Тогда
		Основание = ЭД.Получить(СвойствоЭД);
		Если НЕ Основание=Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Основание.ДатаДокументаОснования);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", Основание.НомерДокументаОснования);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ОКУД");
	Если СвойствоЭД<>Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
		КоличествоЗаписей = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписей");
		Если КоличествоЗаписей<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ИтогоПоДокументуXDTO.Получить(КоличествоЗаписей));
		КонецЕсли;
		КоличествоМест = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМест");
		Если КоличествоМест <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ИтогоПоДокументуXDTO.Получить(КоличествоМест));
		КонецЕсли;
		СуммаБезНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезНДС");
		Если СуммаБезНДС <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ИтогоПоДокументуXDTO.Получить(СуммаБезНДС));
		КонецЕсли;
		СуммаНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНДС");
		Если СуммаНДС <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ИтогоПоДокументуXDTO.Получить(СуммаНДС));
		КонецЕсли;
		СуммаСУчетомНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСУчетомНДС");
		Если СуммаСУчетомНДС <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСНДС", ИтогоПоДокументуXDTO.Получить(СуммаСУчетомНДС));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогиПрописьюXDTO = ЭД.Получить(СвойствоЭД);
		КоличествоЗаписейПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписейПрописью");
		Если КоличествоЗаписейПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ИтогоПоДокументуXDTO.Получить(
				КоличествоЗаписейПрописью));
		КонецЕсли;
		КоличествоМестПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМестПрописью");
		Если КоличествоМестПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ИтогоПоДокументуXDTO.Получить(КоличествоМестПрописью));
		КонецЕсли;
		СуммаВсегоПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаВсегоПрописью");
		Если СуммаВсегоПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ИтогоПоДокументуXDTO.Получить(СуммаВсегоПрописью));
		КонецЕсли;
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Каталог.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	
	// Заполняем данные о владельце каталога.
	// Контрагент
	Элемент = ЭД.Каталог.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда 
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя + "_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, ИдКонтрагента,
		РеквизитыКонтрагента, ЭД.Каталог.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);
	
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		РеквизитыПартнера = Новый Структура();
		РеквизитыПартнера.Вставить("Контрагент", Контрагент);
		ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Партнеры");
		ЗнДопАналитики = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
		
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем данные о товарах каталога.
	НаборДанных = ЭД.Каталог["Товары"].Товар;
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД.Каталог, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьПрайсXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена.
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.ДействительноС);
	
	// Контрагент
	Элемент = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП.
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента, РеквизитыКонтрагента, ЭД.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДействительноС);
	
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		РеквизитыПартнера = Новый Структура();
		РеквизитыПартнера.Вставить("Контрагент", Контрагент);
		ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Партнеры");
		ЗнДопАналитики = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
		
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Товары
	Предложения = ЭД.Предложения.ПолучитьСписок("Предложение");
	Для Каждого Элемент Из Предложения Цикл
		
		СписокТЧ = Новый СписокЗначений;
		НаименованиеТовара = "";
		ИдТовара           = "";
		АртикулТовара      = "";
		
		// Номенклатура.
		РеквизитыНоменклатуры = Новый Структура;
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			// Разберем свойства Товара.
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ЗнДанных);
				ИдТовара = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
				РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Наименование", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
				РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
						РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
						РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыНоменклатурыПоставщика.Вставить("Наименование", РеквизитыНоменклатуры.Наименование);
		НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ИдТовара,
			РеквизитыНоменклатурыПоставщика, ЭД.Ид);
		
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, РеквизитыНоменклатурыПоставщика.Наименование,
			НоменклатураПоставщика, РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика,
			СтруктураРеквизитовТовара, ЭД.Ид);
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		Конецесли;
		
		
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара,
			РеквизитыНоменклатурыПоставщика.Наименование, Номенклатура, РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
		
		ЗначениеЦены = 0;
		ЕдиницаИзмерения = "";
		Цены = Элемент.Цены.ПолучитьСписок("Цена");
		Для Каждого Цена Из Цены Цикл
			ЗначениеЦены = Цена.Цена;
			СписокТЧ.Добавить(ЗначениеЦены, "Цена");
			ЗнДанных = Цена.ЕдиницаИзмерения;
			
			РеквизитыЕдИзм = Новый Структура;
			РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
			РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
			СвойствоКоличество = Цена.Свойства().Получить("МинКоличество");
			Если СвойствоКоличество<>Неопределено Тогда
				СписокТЧ.Добавить(Цена.МинКоличество, "Количество");
			КонецЕсли;
			ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
				РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
			Если ЗначениеЗаполнено(ЕдИзм) Тогда
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
			
	СвойствоЭД = ЭД.Свойства().Получить("НазначениеПлатежа");
	НазначениеПлатежа = ЭД.Получить(СвойствоЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаОкончанияДействияСчета");
	ДатаОкончанияДействияСчета = ЭД.Получить(СвойствоЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияДействияСчета", ДатаОкончанияДействияСчета);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Поставщик");
	Поставщик = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Покупатель");
	Покупатель = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог",      ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");
	Если СвойствоСуммаНалогаИтог <> Неопределено Тогда
		СуммаНалогаИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	КонецЕсли;
	
	СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
	Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
		ЦенаВключаетНДС =  ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	Если СвойствоЭД <> Неопределено И ЭД.Получить(СвойствоЭД) <> Неопределено Тогда
		НаборДанных = ЭД["Товары"].Товар;
		ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Руководитель");
	Если СвойствоЭД <> Неопределено Тогда
		Руководитель = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель.ПолноеНаименование);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Бухгалтер");
	Если СвойствоЭД <> Неопределено Тогда
		Бухгалтер = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бухгалтер", Бухгалтер.ПолноеНаименование);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД <> Неопределено Тогда
		Для Каждого ДокументОснованияXDTO ИЗ ЭД.ДокументОснования Цикл
			СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
			Если СвойствоНомерДокументаОснования <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокументаОснования", ДокументОснованияXDTO.НомерДокументаОснования);
			КонецЕсли;
			СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
			Если СвойствоДатаДокументаОснования <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДокументаОснования", ДокументОснованияXDTO.ДатаДокументаОснования);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	
	Если ЭД.Роль = "Покупатель" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
	ИначеЕсли ЭД.Роль = "Продавец" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");
	Исполнитель = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Если ЭД.Роль = "Покупатель" Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли ЭД.Роль = "Продавец" Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Заказчик");
	Заказчик = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		Если ЭД.Роль = "Покупатель" Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли ЭД.Роль = "Продавец" Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог",      ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");
	Если СвойствоСуммаНалогаИтог <> Неопределено Тогда
		СуммаНалогаИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	КонецЕсли;
	
	СвойствоСуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезСкидкиИтог");
	Если СвойствоСуммаБезСкидкиИтог <> Неопределено Тогда
		СуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаБезСкидкиИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезСкидкиИтог", СуммаБезСкидкиИтог);
	КонецЕсли;
	
	СвойствоСуммаСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСкидкиИтог");
	Если СвойствоСуммаСкидкиИтог <> Неопределено Тогда
		СуммаСкидкиИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаСкидкиИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСкидкиИтог", СуммаСкидкиИтог);
	КонецЕсли;
	
	СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
	Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
		ЦенаВключаетНДС = ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД <> Неопределено Тогда
		Для Каждого ДокументОснованияXDTO ИЗ ЭД.ДокументОснования Цикл
			СвойствоНаименованиеДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НаименованиеДокументаОснования");
			Если СвойствоНаименованиеДокументаОснования <> Неопределено Тогда
				Если ДокументОснованияXDTO.НаименованиеДокументаОснования = "По данным клиента" Тогда
					СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
					Если СвойствоНомерДокументаОснования <> Неопределено Тогда
						ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ДокументОснованияXDTO.НомерДокументаОснования);
					КонецЕсли;
					СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
					Если СвойствоДатаДокументаОснования <> Неопределено Тогда
						ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", ДокументОснованияXDTO.ДатаДокументаОснования);
					КонецЕсли;
				ИначеЕсли ДокументОснованияXDTO.НаименованиеДокументаОснования = "По данным поставщика" Тогда
					СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
					Если СвойствоНомерДокументаОснования <> Неопределено Тогда
						ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымПоставщика", ДокументОснованияXDTO.НомерДокументаОснования);
					КонецЕсли;
					СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
					Если СвойствоДатаДокументаОснования <> Неопределено Тогда
						ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымПоставщика", ДокументОснованияXDTO.ДатаДокументаОснования);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.АдресДоставкиСклад <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "АдресДоставки", ЭД.АдресДоставкиСклад.Наименование);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комментарий");
	Если СвойствоЭД <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяИнформация", ЭД.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Комитент");
	Комитент = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");
	Комиссионер = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогоПоДокументу", ИтогоПоДокументу);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента",   ИтогоПоДокументу);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Комитент");
	Комитент = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");
	Комиссионер = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);
	СвойствоСуммаКомитентаИтог = ИтогоПоДокументу.Свойства().Получить("СуммаКомитентаИтог");
	СуммаКомитентаИтог = ИтогоПоДокументу.Получить(СвойствоСуммаКомитентаИтог);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаКомитента", СуммаКомитентаИтог);
	СвойствоСуммаПродажиИтог = ИтогоПоДокументу.Свойства().Получить("СуммаПродажиИтог");
	СуммаПродажиИтог = ИтогоПоДокументу.Получить(СвойствоСуммаПродажиИтог);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаПродажиИтог);
	СвойствоСуммаВознагражденияИтог = ИтогоПоДокументу.Свойства().Получить("СуммаВознагражденияИтог");
	Если СвойствоСуммаВознагражденияИтог <> Неопределено Тогда
		СуммаВознагражденияИтог = ИтогоПоДокументу.Получить(СвойствоСуммаВознагражденияИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВознаграждения", СуммаВознагражденияИтог);
	КонецЕсли;
	
	СвойствоПроцент = ИтогоПоДокументу.Свойства().Получить("Процент");
	Если СвойствоПроцент <> Неопределено Тогда
		Процент = ИтогоПоДокументу.Получить(СвойствоПроцент);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПроцентВознаграждения", Процент);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		КодВалюты = ВалютаXDTO.КодОКВ;
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("Наименование", ВалютаXDTO.НаименованиеСокращенноеОКВ);
			ДопРеквизиты.Вставить("НаименованиеПолное", ВалютаXDTO.НаименованиеПолноеОКВ);
			ДопРеквизиты.Вставить("КодМКВ", ВалютаXDTO.КодМКВ);
			
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ВалютаXDTO.Курс;
		Если Курс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаНачала");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаНачала = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачалоПериода", ДатаНачала);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаКонца");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаКонца = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонецПериода", ДатаКонца);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ФормаОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ФормаОплаты = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФормаОплаты",
			ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ФормыОплаты", ФормаОплаты));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("СпособРасчета");
	Если СвойствоЭД <> Неопределено Тогда
		СпособРасчета = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения",
			ЭлектронныеДокументыПовтИсп.НайтиПеречисление("СпособРасчета", СпособРасчета));
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения",
			ЭлектронныеДокументыПовтИсп.НайтиПеречисление("СпособРасчета", "Не рассчитывается"));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаОплаты = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Услуга");
	Если СвойствоЭД <> Неопределено Тогда
		Услуга = ЭД.Получить(СвойствоЭД);
		СвойствоНалог = Услуга.Свойства().Получить("Налог");
		Если СвойствоНалог <> Неопределено Тогда
			Налог = Услуга.Получить(СвойствоНалог);
			Если ВРег(Налог.ТипНалога) = "НДС" Тогда
				
				СвойствоВеличинаСтавкиНалога = Налог.Свойства().Получить("ВеличинаСтавкиНалога");
				// Если СвойствоВеличинаСтавкиНалога = Неопределено, то передавали СтавкуНДС = "БезНДС".
				СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтавкаНДСВознаграждения", СтавкаНалога);
				
				СвойствоСумма = Налог.Свойства().Получить("Сумма");
				Если СвойствоСумма <> Неопределено Тогда
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДСВознаграждения", Налог.Сумма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвСчФакт.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		ДокументыОснования = НовыйЭД.Строки.Найти("ДокументыОснования", "Реквизит", Истина);
		Если ДокументыОснования <> Неопределено Тогда
			Для каждого Строка Из ДокументыОснования.Строки Цикл
				ПараметрыДокументаОснования = Строка.ЗначениеРеквизита;
				
				ИДЭДДокументаОснования = "";
				Если ПараметрыДокументаОснования.Свойство("ИДЭДДокументаОснования", ИДЭДДокументаОснования)
					И ЗначениеЗаполнено(ИДЭДДокументаОснования) Тогда
					
					ДокументОснование = ПолучитьДокументОснование(ИДЭДДокументаОснования);
					Если ДокументОснование <> Неопределено Тогда
						Строка.СсылкаНаОбъект = ДокументОснование;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвСчФакт.НомерСчФ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ДатаСчФ));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвСчФакт.КодОКВ);
	Если НЕ ЭД.Документ.СвСчФакт.ИспрСчФ = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.ГрузОт = Неопределено Тогда
		Если НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр = Неопределено Тогда
			Если НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг = Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг);
			Иначе
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель",
				ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Фамилия + " " + ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Имя
					+ " " + ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Отчество);
			КонецЕсли;
			Если Не ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно = Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительКодСтраны", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр);
			Иначе
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрРФ));
			КонецЕсли
		ИначеЕсли НЕ ЭД.Документ.СвСчФакт.ГрузОт.ОнЖе = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", "он же");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч = Неопределено Тогда
		Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузополучатель", ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД,
			"Грузополучатель",
			ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Фамилия + " " + ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Имя
				+ " " + ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Отчество);
		КонецЕсли;
		
		Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.АдрТекст);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательКодСтраны", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.КодСтр);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрРФ));
		КонецЕсли
	КонецЕсли;
	
	Продавец = ЭД.Документ.СвСчФакт.СвПрод;
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Покупатель = ЭД.Документ.СвСчФакт.СвПокуп;
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.СвПРД = Неопределено И ЭД.Документ.СвСчФакт.СвПРД.Количество() > 0 Тогда
		ПлатежныеДокументы = "";
		ПервыйЭлемент = Истина;
		Для Каждого СтрокаПлатежа Из ЭД.Документ.СвСчФакт.СвПРД Цикл
			ПлатежныеДокументы = ПлатежныеДокументы + ?(ПервыйЭлемент,"",", № ") + СтрокаПлатежа.НомерПРД + " от " + СтрокаПлатежа.ДатаПРД;
			ПервыйЭлемент = Ложь;
		КонецЦикла;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежныйДокумент", ПлатежныеДокументы);
	КонецЕсли;
	
	Если Не ЭД.Документ.Подписант.ИП = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантЮЛ", ЭД.Документ.Подписант.ЮЛ.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ЮЛ.ФИО.Имя + " " + ЭД.Документ.Подписант.ЮЛ.ФИО.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННЮЛ", ЭД.Документ.Подписант.ЮЛ.ИННЮЛ);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДС",ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНал", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДС",     СуммаНДССФПривестиКТребуемомуФормату(
		ЭД.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНДС));
	
	Для каждого Товар ИЗ ЭД.Документ.ТаблСчФакт.СведТов Цикл
		
		СписокТЧ = Новый СписокЗначений;
		СписокТЧ.Добавить(Товар.НомСтр,         "НомСтр");
		СписокТЧ.Добавить(Товар.НаимТов,        "НаимТов");
		СписокТЧ.Добавить(Товар.ОКЕИ_Тов,       "ОКЕИ_Тов");
		СписокТЧ.Добавить(Товар.КолТов,         "КолТов");
		СписокТЧ.Добавить(Товар.ЦенаТов,        "ЦенаТов");
		СписокТЧ.Добавить(Товар.СтТовБезНДС,    "СтТовБезНДС");
		СписокТЧ.Добавить(Товар.СтТовУчНал,     "СтТовУчНал");
		СписокТЧ.Добавить(Товар.НалСт.НалСтВел, "НалСтВел");
		СписокТЧ.Добавить(Товар.НалСт.НалСтТип, "НалСтТип");
		СписокТЧ.Добавить(Товар.Акциз.СумАкциз, "СумАкциз");
		СписокТЧ.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНал.СумНДС), "СумНДС");
		
		Если ЗначениеЗаполнено(Товар.ИнфПолСтр) Тогда
			// В инф.поле xml-строка Актуального формата.
			ИнфПол = Товар.ИнфПолСтр;
			ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
			ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Товар.НомСтр, "Товары", Ошибка);
		КонецЕсли;
		
		Если НЕ Товар.НомерТД = Неопределено И Товар.НомерТД.Количество() > 0 Тогда
			НомераТД = "";
			Для Каждого СтрокаТД Из Товар.НомерТД Цикл
				НомераТД = НомераТД + СтрокаТД + ", ";
			КонецЦикла;
			СписокТЧ.Добавить(НомераТД, "НомерТД");
		КонецЕсли;
		
		Если НЕ Товар.КодПроисх = Неопределено И Товар.КодПроисх.Количество() > 0 Тогда
			СписокТЧ.Добавить(Товар.КодПроисх[0], "КодПроисх");
		КонецЕсли;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
	НовыйЭД.ОписаниеОбъекта = "Корректировочный";
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвКСчФ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		ДокументыОснования = НовыйЭД.Строки.Найти("ДокументыОснования", "Реквизит", Истина);
		Если ДокументыОснования <> Неопределено Тогда
			Для каждого Строка Из ДокументыОснования.Строки Цикл
				ПараметрыДокументаОснования = Строка.ЗначениеРеквизита;
				
				ИДЭДДокументаОснования = "";
				Если ПараметрыДокументаОснования.Свойство("ИДЭДДокументаОснования", ИДЭДДокументаОснования)
					И ЗначениеЗаполнено(ИДЭДДокументаОснования) Тогда
					
					ДокументОснование = ПолучитьДокументОснование(ИДЭДДокументаОснования);
					Если ДокументОснование <> Неопределено Тогда
						Строка.СсылкаНаОбъект = ДокументОснование;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвКСчФ.НомерКСчФ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаКСчФ));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаФактуры", ЭД.Документ.СвКСчФ.НомерСчФ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСчетаФактуры", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаСчФ));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвКСчФ.КодОКВ);
	Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрКСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрКСчФ = Неопределено Тогда
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));
	КонецЕсли;
	Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрСчФ = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправленияСчетаФактуры", ЭД.Документ.СвКСчФ.ИспрСчФ.НомИспрСчФ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправленияСчетаФактуры", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	
	Продавец = ЭД.Документ.СвКСчФ.СвПрод;
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Покупатель = ЭД.Документ.СвКСчФ.СвПокуп;
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	Если Не ЭД.Документ.Подписант.Свойства().Получить("ИП") = Неопределено 
		И НЕ ЭД.Документ.Подписант.ИП = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);
			
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантЮЛ", ЭД.Документ.Подписант.ЮЛ.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ЮЛ.ФИО.Имя + " " + ЭД.Документ.Подписант.ЮЛ.ФИО.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННЮЛ", ЭД.Документ.Подписант.ЮЛ.ИННЮЛ);
	КонецЕсли;
	
	Если НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУвел") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУвел = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовБезНДСВсего);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовУчНалВсего);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУвел", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУвел.СумНал.СумНДС));
	КонецЕсли;
	
	Если НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУм") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУм = Неопределено Тогда
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовБезНДСВсего);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовУчНалВсего);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУм", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУм.СумНал.СумНДС));
	КонецЕсли;
	
	СуммаДокумента = 0;
	
	Для каждого Товар ИЗ ЭД.Документ.ТаблКСчФ.СведТов Цикл
		
		СписокТЧ = Новый СписокЗначений;
		СписокТч.Добавить(Товар.НомСтр, "НомСтр");
		СписокТч.Добавить(Товар.НаимТов, "НаимТов");
		Если НЕ Товар.Свойства().Получить("ОКЕИ_ТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.ОКЕИ_ТовДо, "ОКЕИ_ТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ОКЕИ_ТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.ОКЕИ_ТовПосле, "ОКЕИ_ТовПосле");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("КолТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.КолТовДо, "КолТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("КолТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.КолТовПосле, "КолТовПосле");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ЦенаТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.ЦенаТовДо, "ЦенаТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ЦенаТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.ЦенаТовПосле, "ЦенаТовПосле");
		КонецЕсли;
		
		Если НЕ Товар.Свойства().Получить("СтТовБезНДС") = Неопределено
			И НЕ Товар.СтТовБезНДС = Неопределено Тогда
			СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимДоИзм, "СтТовБезНДСДоИзм");
			СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимПослеИзм, "СтТовБезНДСПослеИзм");
			Если НЕ Товар.СтТовБезНДС.Свойства().Получить("СтоимУвел") = Неопределено Тогда
				СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимУвел, "СтТовБезНДСУвел");
			КонецЕсли;
			Если НЕ Товар.СтТовБезНДС.Свойства().Получить("СтоимУм") = Неопределено Тогда
				СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимУм, "СтТовБезНДСУм");
			КонецЕсли;
		КонецЕсли;
		
		СписокТч.Добавить(Товар.АкцизДо.СумАкциз, "АкцизДо");
		СписокТч.Добавить(Товар.АкцизПосле.СумАкциз, "АкцизПосле");
		СписокТч.Добавить(Товар.АкцизРазн.СумУвел, "АкцизУвел");
		СписокТч.Добавить(Товар.АкцизРазн.СумУм, "АкцизУм");
		СписокТч.Добавить(Товар.НалСтДо.НалСтВел, "НалСтВелДо");
		СписокТч.Добавить(Товар.НалСтДо.НалСтТип, "НалСтТипДо");
		СписокТч.Добавить(Товар.НалСтПосле.НалСтВел, "НалСтВелПосле");
		СписокТч.Добавить(Товар.НалСтПосле.НалСтТип, "НалСтТипПосле");
		СписокТч.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНалДо.СумНДС), "СумНДСДо");
		СписокТч.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНалПосле.СумНДС), "СумНДСПосле");
		СписокТч.Добавить(Товар.СумНалРазн.СумУвел, "СумНДСУвел");
		СписокТч.Добавить(Товар.СумНалРазн.СумУм, "СумНДСУм");
		СписокТч.Добавить(Товар.СтТовУчНал.СтоимДоИзм, "СтТовУчНалДоИзм");
		СписокТч.Добавить(Товар.СтТовУчНал.СтоимПослеИзм, "СтТовУчНалПослеИзм");
		СуммаДокумента = СуммаДокумента
						+ ?(ЗначениеЗаполнено(Товар.СтТовУчНал.СтоимПослеИзм), Товар.СтТовУчНал.СтоимПослеИзм, 0);
		Если НЕ Товар.СтТовУчНал.Свойства().Получить("СтоимУвел") = Неопределено Тогда
			СписокТч.Добавить(Товар.СтТовУчНал.СтоимУвел, "СтТовУчНалУвел");
		КонецЕсли;
		Если НЕ Товар.СтТовУчНал.Свойства().Получить("СтоимУм") = Неопределено Тогда
			СписокТч.Добавить(Товар.СтТовУчНал.СтоимУм, "СтТовУчНалУм");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Товар.ИнфПолСтр) Тогда
			// В инф.поле xml-строка Актуального формата.
			ИнфПол = Товар.ИнфПолСтр;
			ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
			ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Товар.НомСтр, "Товары", Ошибка);
		КонецЕсли;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйДокументXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
	НовыйЭД.ОписаниеОбъекта = "Корректировочный";
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНО.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И Найти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		СтрокаДокументОснование = НовыйЭД.Строки.Найти("ИДЭДДокументаОснования", "Реквизит", Истина);
		Если СтрокаДокументОснование <> Неопределено Тогда
			ДокументОснование = ПолучитьДокументОснование(СтрокаДокументОснование.ЗначениеРеквизита);
			Если ДокументОснование <> Неопределено Тогда
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ДокументыОснования");
				ДобавитьРеквизитШапкиОбъекта(НайденныйТипВДереве, "ДокументОснования", ДокументОснование, ДокументОснование);
				НайденнаяСтрока = НайденныйТипВДереве.Строки.Найти(ДокументОснование, "СсылкаНаОбъект");
				НайденнаяСтрока.ИндексСтроки = НайденныйТипВДереве.ИндексСтроки + "_"
					+ Строка(НайденныйТипВДереве.Строки.Индекс(НайденнаяСтрока));
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Основание", НайденнаяСтрока.ИндексСтроки, ДокументОснование);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = XMLЗначение(Тип("ПеречислениеСсылка.ВидыОперацийЭД"), ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвТНО.ТН.НомТН);
	ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));
	
	СуммаДокумента = ?(ЗначениеЗаполнено(ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс), ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс,
		ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
	Грузоотправитель = Неопределено;
	ДопПараметрыГрузоотправителя = Новый Структура;
	Поставщик = ЭД.Документ.СвТНО.Поставщик;
	Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
		ДопПараметрыГрузоотправителя.Вставить("СтруктурноеПодразделение", ЭД.Документ.СвТНО.ГрузОт.СтруктПодр);
		ДопПараметрыГрузоотправителя.Вставить("ОКДП", ЭД.Документ.СвТНО.ГрузОт.ОКДП);
		Грузоотправитель = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
		Если Не ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт = Неопределено Тогда
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Телефоны", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф);
			КонецЕсли;
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Факс", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поставщик <> Неопределено Тогда
		Грузоотправитель = Поставщик;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьРуководителя", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОРуководителя",
				ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьГлавБухгалтера", ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОГлавБухгалтера",
				ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьКладовщика", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОКладовщика",
				ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
	КонецЕсли;
	
	Если Грузоотправитель <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
		Если ДопПараметрыГрузоотправителя.Количество() > 0 Тогда
			ИндексУзла = ДеревоРазбора.Строки.Найти("Грузоотправитель", "Реквизит", Истина);
			Если ИндексУзла <> Неопределено И ЗначениеЗаполнено(ИндексУзла.ЗначениеРеквизита) Тогда
				СтрокаГрузоотправителя = ДеревоРазбора.Строки.Найти(ИндексУзла.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаГрузоотправителя <> Неопределено Тогда
					Для Каждого ДопПараметр Из ДопПараметрыГрузоотправителя Цикл
						ДобавитьРеквизитШапкиОбъекта(СтрокаГрузоотправителя, ДопПараметр.Ключ, ДопПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ГрузПолуч <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(ЭД.Документ.СвТНО.ГрузПолуч, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	// Грузоотправитель и Поставщик - необязательные элементы xsd-схемы,
	// но один из этих элементов обязательно должен быть заполнен
	// (Согласно подп. "в" п.2 ст. 9 Федерального закона от 21.11.1996 №129-ФЗ).
	Если Поставщик = Неопределено Тогда
		Поставщик = Грузоотправитель;
	КонецЕсли;
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Плательщик = ЭД.Документ.СвТНО.Плательщик;
	Если Плательщик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.Основание <> Неопределено Тогда
		ДатаПоДаннымКлиента = ЭД.Документ.СвТНО.Основание.ДатаОсн;
		Если ЗначениеЗаполнено(ДатаПоДаннымКлиента) Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Дата(Сред(ДатаПоДаннымКлиента, 7, 4)
				+ Сред(ДатаПоДаннымКлиента, 4, 2) + Сред(ДатаПоДаннымКлиента, 1, 2)));
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ЭД.Документ.СвТНО.Основание.НомОсн);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОснования", ЭД.Документ.СвТНО.Основание.НаимОсн);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ТН.ТНОбщ <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗап);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗапПр);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМест);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМестПр);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.БруттоПр);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумБезНДСВс);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумНДСВс);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ЭД.Документ.СвТНО.ОтпускГруз.СумОтпускПр);
		ДатаДок = ЭД.Документ.СвТНО.ОтпускГруз.ДатаОтпуск;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтпуска", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЛистовВПрилПрописью", ЭД.Документ.СвТНО.ОтпускГруз.КолПрилПр);
	КонецЕсли;
	
	НаборДанных = ЭД.Документ.СвТНО.ТН.Таблица.СвТов;
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			СписокТЧ.Добавить(Элемент.НомТов,      "Номер");
			СписокТЧ.Добавить(Элемент.НаимТов,     "Наименование");
			СписокТЧ.Добавить(Элемент.ХарактерТов, "НаименованиеХарактеристики");
			СписокТЧ.Добавить(Элемент.КодТов,      "ТоварКод");
			СписокТЧ.Добавить(Элемент.СортТов,     "Сорт");
			СписокТЧ.Добавить(Элемент.АртикулТов,  "Артикул");
			СписокТЧ.Добавить(Элемент.НаимЕдИзм,   "ЕдиницаИзмеренияНаименование");
			СписокТЧ.Добавить(Элемент.ОКЕИ_Тов,    "ЕдиницаИзмеренияКод");
	
			СписокТЧ.Добавить(Элемент.НеттоДоКорректировки, "КоличествоДоКорректировки");
			СписокТЧ.Добавить(Элемент.Нетто,     "Количество");
			СписокТЧ.Добавить(Элемент.КолМест,   "Мест");
			СписокТЧ.Добавить(Элемент.ВидУпак,   "Упаковка");
			СписокТЧ.Добавить(Элемент.Место,     "КоличествоВОдномМесте");
			СписокТЧ.Добавить(Элемент.НеттоДоКорректировки, "МассаНеттоДоКорректировки");
			СписокТЧ.Добавить(Элемент.Нетто,     "МассаНетто");
			СписокТЧ.Добавить(Элемент.Брутто,    "МассаБрутто");
			СписокТЧ.Добавить(Элемент.ЦенаДоКорректировки,      "ЦенаДоКорректировки");
			СписокТЧ.Добавить(Элемент.Цена,      "Цена");
			СписокТЧ.Добавить(Элемент.СумБезНДСДоКорректировки, "СуммаДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумБезНДС, "Сумма");
			СписокТЧ.Добавить(Элемент.СумНДСДоКорректировки,    "СуммаНДСДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумНДС,    "СуммаНДС");
			СписокТЧ.Добавить(Элемент.СумУчНДСДоКорректировки,  "СуммаСНДСДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумУчНДС,  "СуммаСНДС");
			
			// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
			Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) И Найти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
				
				СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Элемент.СтавкаНДС);
				СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
				
				// В инф.поле xml-строка неактуального формата.
				ОбъектXML = Новый ЧтениеXML;
				Попытка
					ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
					ТоварXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					РазобратьСтрокуТЧCML(ТоварXDTO, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				Исключение
				КонецПопытки;
			Иначе
				Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
					// В инф.поле xml-строка Актуального формата.
					ИнфПол = Элемент.ИнфПолСтр;
					ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Элемент.НомТов);
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Элемент.НомТов, "Товары", Ошибка);
				КонецЕсли;
				РеквизитыНоменклатуры = Новый Структура;
				РеквизитыЕдиницыИзмерения = Новый Структура;
				ИдТовара = "";
				СтавкаНДСПереданаДопПараметром = Ложь;
				Для Каждого ЭлементСЗ Из СписокТЧ Цикл
					
					// Номенклатура.
					Если ЭлементСЗ.Представление = "Наименование" Тогда
						РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Характеристика" Тогда
						РеквизитыНоменклатуры.Вставить("Характеристика", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
						РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
						ИдТовара = ЭлементСЗ.Значение;
						
					// Проверка наличия ставки НДС в доп. параметрах.
					ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
						СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(ЭлементСЗ.Значение);
						ЭлементСЗ.Значение = СтавкаНалога;
						СтавкаНДСПереданаДопПараметром = Истина;
					ИначеЕсли ЭлементСЗ.Представление = "ИДЭДДокументаОснования" Тогда
						ДокументОснование = ПолучитьДокументОснование(ЭлементСЗ.Значение);
						Если ДокументОснование <> Неопределено Тогда
							СписокТЧ.Добавить(ДокументОснование, "ДокументОснование");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// Ставка НДС может прийти в доп. параметрах.
				Если НЕ СтавкаНДСПереданаДопПараметром Тогда
					СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Элемент.СтавкаНДС);
					СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
				КонецЕсли;
				
				НаимТовара = "";
				РеквизитыНоменклатуры.Свойство("Наименование", НаимТовара);
				
				КодЕдИзм = "";
				Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
					НаименованиеЕдИзм = "";
					РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
						РеквизитыЕдиницыИзмерения);
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм),
						НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
				// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
				Если ИдентификацияПоНоменклатуреКомпании Тогда
					СтруктураИд = РазобратьИДТовара(ИдТовара);
					Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
						ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
						Если СписокТЧ.НайтиПоЗначению(ХарактеристикаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
						КонецеСли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
						УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
						Если СписокТЧ.НайтиПоЗначению(УпаковкаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
						КонецеСли;
					КонецЕсли;
				Иначе
					// Номенклатура поставщиков.
					РеквизитыНоменклатурыПоставщика = Новый Структура;
					ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
					ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
					
					РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
					РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
					Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаимТовара) Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
					КонецЕсли;
					
					НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
						РеквизитыНоменклатурыПоставщика);
					
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
						РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
					
					Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
						РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
						РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
					КонецЕсли;
					СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
					ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара);
					
					Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
					Конецесли;
				КонецЕсли;
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
					РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
				
				ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйДокументПолучательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНП.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНП.ПолучилГруз <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвТНП.ПолучилГруз.ДатаПолуч;
		ДатаПолучения = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.НомДоверен);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО <> Неопределено Тогда
					ВспомогательнаяСтруктура.Вставить("ФИО", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Фамилия + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Имя + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО <> Неопределено Тогда
					ВспомогательнаяСтруктура.Вставить("ФИО", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Фамилия + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Имя + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.Должность);
			Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Фамилия + " "
					+ ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Имя + " " + ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.Должность);
			Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Фамилия + " "
					+ ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Имя + " " + ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДокументПоСхеме206_XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Документ = ЭД.Документ[0];
	Если Документ.ХозОперация = "Передача прав" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);
	Для Каждого ТекСвойство Из Документ.Свойства() Цикл
		Элемент = Документ.Получить(ТекСвойство);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоПростойТипЭлементаXDTO(Элемент) Тогда
			Если ТекСвойство.Имя = "Валюта" Тогда
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
				
				ДопРеквизиты = Новый Структура;
				ДопРеквизиты.Вставить("Код", Элемент);
				
				Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(Элемент));
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Элемент, "Код валюты: " + Элемент, Валюта,
					ДопРеквизиты, ДеревоРазбора, Ошибка);
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
			ИначеЕсли ТекСвойство.Имя = "Сумма" Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", Элемент);
			Иначе
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ТекСвойство.Имя, Элемент);
			КонецЕсли;
		ИначеЕсли ТекСвойство.Имя = "Контрагенты" Тогда
			Для Каждого Контрагент Из Элемент.Контрагент Цикл
				ПрочитатьДанныеКонтрагентаCML(Контрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Контрагент.Роль);
			КонецЦикла;
		ИначеЕсли ТекСвойство.Имя = "ЗначенияРеквизитов" Тогда
			ПрочитатьСписокЗначенийРеквизитовCML(Элемент.ЗначениеРеквизита, НовыйЭД, Ошибка);
		ИначеЕсли ТекСвойство.Имя = "Товары" Тогда
			Если ТипЗнч(Элемент.Товар) = Тип("СписокXDTO") Тогда
				Для Каждого Товар Из Элемент.Товар Цикл
					СписокТЧ = Новый СписокЗначений;
					РазобратьСтрокуТЧCML(Товар, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Найти("Налоги Скидки ДопРасходы", ТекСвойство.Имя) > 0 Тогда
			ДанныеСпискаЗначенийCML(Элемент, НовыйЭД, Ошибка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает данные электронного документа из файла, заполняет дерево значений для загрузки в ИБ,
// создает/изменяет необходимые объекты ИБ.
// 
// Параметры:
//  СтруктураПараметров - структура параметров для разбора электронного документа, 
//  ДеревоРазбора - дерево значений, структура данных для загрузки в ИБ,
//  НаправлениеЭД - направление электронного документа, требующего разбора.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами созданных/измененных объектов ИБ
//
Функция ПолучитьДанныеИзФайла(СтруктураПараметров, ДеревоРазбора, НаправлениеЭД = Неопределено)
	
	Если НЕ СтруктураПараметров.Свойство("ПолноеИмяФайла") Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВладелецЭД") Тогда
		СсылкаНаВладельца = СтруктураПараметров.ВладелецЭД;
	Иначе
		СсылкаНаВладельца = Неопределено;
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	КонецЕсли;
	НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	
	ФайлДопДанных = "";
	ДеревоДопДанных = Неопределено;
	Если СтруктураПараметров.Свойство("ФайлДопДанных", ФайлДопДанных) Тогда
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ФайлДопДанных);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
		СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ОшибкаЗаписи = Ложь;
	Результат = ПрочитатьФайлCMLпоXDTO(СтруктураПараметров.ПолноеИмяФайла, ДеревоРазбора, НовыйЭД, Истина);
	Если Результат Тогда
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты
		ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
		
		Попытка
			СсылкаНаВладельца = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора,
				СсылкаНаВладельца);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Заполнение документа на основе ЭД.'"),
																						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																						ТекстСообщения);
			ОшибкаЗаписи = Истина;
		КонецПопытки;
		
		// Дозаполняем структуру параметров из файла данных.
		СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаВладельца);
		СтруктураПараметров.Вставить("ВидЭД",      НовыйЭД.ВидЭД);
		НомерЭД = НовыйЭД.ИД;
		Если Не ЗначениеЗаполнено(НомерЭД) Тогда
			УИД = Новый УникальныйИдентификатор;
			НомерЭД = Строка(УИД) + "##1";
		КонецЕсли;
		СтруктураПараметров.Вставить("НомерЭД", НомерЭД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(НовыйЭД.ИД);
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		СтруктураПараметров.Вставить("НомерВерсииЭД",             НомерВерсииЭД);
		СтруктураПараметров.Вставить("НаправлениеЭД",             НовыйЭД.НаправлениеЭД);
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Номер"));
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Дата"));
		СтруктураПараметров.Вставить("СуммаДокумента",            ПолучитьРеквизитШапкиЭД(НовыйЭД, "СуммаДокумента"));
		ОрганизацияПолучатель = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
		Если ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
			СтруктураПараметров.Вставить("Организация", ОрганизацияПолучатель);
		Иначе
			
		КонецЕсли;
		СтруктураПараметров.Вставить("Контрагент", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент", ДеревоРазбора));
	КонецЕсли;
	СтруктураПараметров.Вставить("Загружен", НЕ ОшибкаЗаписи);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Разбираем строковую конструкцию вида "ИНН_КПП"
//
// Возвращаемое значение:
//  Структура параметров с ИНН и КПП
//
Функция РазобратьИДКонтрагента(Знач СтрокаИД)
	
	ПозицияРазделителя1 = Найти(СтрокаИД, "#");
	СтруктураПоиска = Новый Структура;
	ПозицияРазделителя1 = Найти(СтрокаИД, "_");
	Если ПозицияРазделителя1 > 0 Тогда
		ИНН = Лев(СтрокаИД, ПозицияРазделителя1 - 1);
		КПП = Сред(СтрокаИД, ПозицияРазделителя1 + 1, СтрДлина(СтрокаИД) - ПозицияРазделителя1);
	ИначеЕсли СтрДлина(СтрокаИД) > 0 Тогда
		ИНН = СокрЛП(СтрокаИД);
		КПП = "";
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ИНН", ИНН);
	СтруктураПоиска.Вставить("КПП", КПП);
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Функция преобразует строку в дату и время
//
// Параметры:
//  Зн - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС"
//
// Возвращаемое значение:
//  Значение типа "ДатаВремя"
//
Функция ПолучитьДатуВремяИзСтроки(Зн)
	
	Результат = Неопределено;
	Зн = СтрЗаменить(Зн, "-", "");
	Зн = СтрЗаменить(Зн, ":", "");
	Если СтрДлина(Зн) - Найти(Зн, " ") = 5 Тогда // время в формате Ч:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "0");
	ИначеЕсли Найти(Зн, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		Зн = СтрЗаменить(Зн, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "");
	КонецЕсли;
	
	Попытка
		Результат = Дата(Зн); // дата и время в виде "ГГГГММДДЧЧММСС"
	Исключение
		Попытка
			Результат = Дата(Лев(Зн, 8)); // только дата "ГГГГММДД"
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьФайлCMLпоXDTO(ИмяФайла, ДеревоРазбора, НовыйЭД, ПоказыватьОшибки = Ложь)
	
	ОбъектXML = Новый ЧтениеXML;
	Ошибка = Ложь;
	НеизвестныйЭД = Ложь;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		ЕстьСвойствоИдФайл = ЭД.Свойства().Получить("ИдФайл") <> Неопределено;
		
		Если ЕстьСвойствоИдФайл Тогда //чтение файлов без namespace
			// Обрабатываем случай когда к нам пришел сторонний XML файл.
			Если НЕ ЗначениеЗаполнено(ОбъектXML.URIПространстваИмен) Тогда
				
				// Вставляем во временный файл ЭД пространство имен 1С.
				ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭД, ИмяФайла);
			КонецЕсли;
			
			Если Найти(ЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "SFAKT"));
				ПрочитатьСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "KORSFAKT"));
				ПрочитатьКорректировочныйСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "OTORG12") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OTORG12"));
				ПрочитатьТОРГ12XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "PTORG12") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "PTORG12"));
				ПрочитатьТОРГ12ПокупательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "IAKTPRM") > 0 Тогда
				Если АктВНовомФормате(ИмяФайла) Тогда
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM2"));
				Иначе
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM"));
				КонецЕсли;
				ПрочитатьАкт501XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "ZAKTPRM") > 0 Тогда
				Если АктВНовомФормате(ИмяФайла) Тогда
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "ZAKTPRM2"));
				Иначе
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "ZAKTPRM"));
				КонецЕсли;
				ПрочитатьАкт501ЗаказчикXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "OKORDOC") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OKORDOC"));
				ПрочитатьКорректировочныйДокументXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "PKORDOC") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "PKORDOC"));
				ПрочитатьКорректировочныйДокументПолучательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "DP_IZVPOL") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "DP_IZVPOL"));
				ПрочитатьИзвещениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "DP_UVUTOCH") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "DP_UVUTOCH"));
				ПрочитатьУточнениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "POD_DPIZVPOL") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "DP_IZVPOL"));
				ПрочитатьПодтверждениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "DP_PDOTPR") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,ПолучитьТипЗначенияCML("Файл", "DP_PDOTPR"));
				ПрочитатьПодтверждениеДатыОтправкиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "DP_PDPOL") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "DP_PDPOL"));
				ПрочитатьПодтверждениеДатыПолученияXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "POD") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "PDO"));
				ПрочитатьПодтверждениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			Иначе
				НеизвестныйЭД = Истина;
			КонецЕсли;
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02") Тогда
			УдалитьПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("КоммерческаяИнформация","urn:1C.ru:commerceml_2") Тогда
			Если ЭД.Свойства().Получить("ПакетПредложений") <> Неопределено И ЭД.Получить("ПакетПредложений") <> Неопределено Тогда
				НеизвестныйЭД = Истина;
			ИначеЕсли ЭД.Свойства().Получить("Каталог") <> Неопределено И ЭД.Получить("Каталог") <> Неопределено Тогда
				ПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Свойства().Получить("Документ") <> Неопределено И ТипЗнч(ЭД.Документ) = Тип("СписокXDTO") Тогда
				ПрочитатьДокументПоСхеме206_XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			КонецЕсли;
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			ПрочитатьПрайсXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02") Тогда
			ПрочитатьАктОПриемкеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02") Тогда
			ПрочитатьНакладнуюXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02") Тогда
			ПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02") Тогда
			ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02") Тогда
			ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			ПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ClientBankExchange","urn:1C.ru:ClientBankExchange") Тогда
			Если ЭД.СекцияПлатежногоДокумента.Количество()=1 И ЭД.СекцияРасчСчет=Неопределено Тогда
				ПрочитатьПлатежноеПоручениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли НЕ ЭД.УсловияОтбора=Неопределено Тогда
				ПрочитатьЗапросВыпискиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			КонецЕсли;
		ИначеЕсли ЭД.Свойства().Получить("СекцияРасчСчет") <> Неопределено Тогда
			ОбъектXML.ОткрытьФайл(ИмяФайла);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
										  ПолучитьТипЗначенияCML("ClientBankExchange", "urn:1C.ru:ClientBankExchange"));
			ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("StatementType","http://bssys.com/upg/response") Тогда
			ПрочитатьВыпискуСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("InfoForStampType","http://bssys.com/upg/response") Тогда
			ПрочитатьШтампСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("PayDocRu","http://bssys.com/upg/request") Тогда
			ПрочитатьПлатежноеПоручениеСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("StmtReqType","http://bssys.com/upg/request") Тогда
			ПрочитатьЗапросВыпискиСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли НЕ ЭД.Свойства().Получить("Tickets")=Неопределено И НЕ ЭД.Tickets=Неопределено Тогда
			ПрочитатьОтветСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		Иначе
			НеизвестныйЭД = Истина;
		КонецЕсли;
		Если НеизвестныйЭД Тогда
			Если ПользователиСервер.ЭтоПолноправныйПользовательИБ() Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Ошибка = Истина;
		КонецЕсли;
	Исключение
		Ошибка = Истина;
		ТекстСообщения = Неопределено;
		Если ПользователиСервер.ЭтоПолноправныйПользовательИБ() ИЛИ ПоказыватьОшибки Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	Возврат НЕ Ошибка;
	
КонецФункции

Функция СоставнойАдрес(Параметры)
	
	ВозврЗнч = "";
	Для Каждого Свойство ИЗ Параметры.Свойства() Цикл
		ДобПараметр = "";
		Если НЕ ЗначениеЗаполнено(Параметры[Свойство.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		Если Свойство.Имя = "Индекс" Тогда
			ДобПараметр = Параметры[Свойство.Имя];
		ИначеЕсли Свойство.Имя = "КодРегион" Тогда
			ДобПараметр = ЭлектронныеДокументыПереопределяемый.НазваниеРегиона(Параметры.КодРегион);
		Иначе
			ДобПараметр = "";
			Если Свойство.Имя = "Дом" Тогда
				ДобПараметр = "дом № ";
			ИначеЕсли Свойство.Имя = "Корпус" Тогда
				ДобПараметр = "корпус ";
			ИначеЕсли Свойство.Имя = "Кварт" Тогда
				ДобПараметр = "кв. ";
			КонецЕсли;
			ДобПараметр = ДобПараметр + Параметры[Свойство.Имя];
		КонецЕсли;
		Если ЗначениеЗаполнено(ДобПараметр) Тогда
			ВозврЗнч = ?(ЗначениеЗаполнено(ВозврЗнч), ВозврЗнч + ", ", "") + ДобПараметр;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозврЗнч;
	
КонецФункции

Функция ИнициализироватьДеревоРазбора()
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	ДеревоРазбора.Колонки.Добавить("ДопДанные");
	
	Возврат ДеревоРазбора;
	
КонецФункции

Функция ДатаИзСтроки(Строка)
	
	Возврат Дата(Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2) + "000000");
	
КонецФункции

Процедура ПрочитатьДанныеКонтрагента(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль = "")
	
	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани) Тогда
		ВидКонтрагента = "Организации";
		Если Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
			ИмяРеквизита = "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
			ИмяРеквизита = "Контрагент";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ИначеЕсли Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель" Тогда
			ИмяРеквизита = Роль;
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
	ИначеЕсли Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
	ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	ИначеЕсли Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = Роль;
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	КонецЕсли;
	
	// Контрагент
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	ИначеЕсли Элемент.Тип().URIПространстваИмен = "OTORG12"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM2"
		ИЛИ Элемент.Тип().URIПространстваИмен = "OKORDOC"
		ИЛИ Элемент.Тип().URIПространстваИмен = "SFAKT"
		ИЛИ Элемент.Тип().URIПространстваИмен = "KORSFAKT" Тогда
		ИдКонтрагента = "";
		Если Элемент.ИдСв <> Неопределено Тогда
			Если Элемент.ИдСв.СвЮЛ <> Неопределено И НЕ Элемент.ИдСв.СвЮЛ.НаимОрг = "---" Тогда
				РеквизитыКонтрагента.Вставить("ПолноеНаименование", Элемент.ИдСв.СвЮЛ.НаимОрг);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвЮЛ.ИННЮЛ);
				РеквизитыКонтрагента.Вставить("КПП", Элемент.ИдСв.СвЮЛ.КПП);
				Если Элемент.ИдСв.СвЮЛ.Свойства().Получить("ОКОПФ") <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("ОКОПФ", Элемент.ИдСв.СвЮЛ.ОКОПФ);
				КонецЕсли;
				Если ЗначениеЗаполнено(Элемент.ИдСв.СвЮЛ.ИННЮЛ) Тогда
					ИдКонтрагента = Элемент.ИдСв.СвЮЛ.ИННЮЛ + Элемент.ИдСв.СвЮЛ.КПП;
				КонецЕсли;
				РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			ИначеЕсли Элемент.ИдСв.СвФЛ <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить("ПолноеНаименование",
					Элемент.ИдСв.СвФЛ.ФИОИП.Фамилия +" "+ Элемент.ИдСв.СвФЛ.ФИОИП.Имя
					+ " " + Элемент.ИдСв.СвФЛ.ФИОИП.Отчество);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвФЛ.ИННФЛ);
				ИдКонтрагента = Элемент.ИдСв.СвФЛ.ИННФЛ;
				РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Свойства().Получить("ОКПО") <> Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);
		КонецЕсли;
		ЭлементАдрес = Элемент.Адрес;
		Если ЭлементАдрес <> Неопределено Тогда
			ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");
			Если ЭлементАдрес.АдрРФ <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", СоставнойАдрес(ЭлементАдрес.АдрРФ));
			ИначеЕсли ЭлементАдрес.АдрИно <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИно.АдрТекст);
				РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИно.КодСтр);
			ИначеЕсли ЗначениеЗаполнено(ЭлементАдрес.АдрТекст) Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Свойства().Получить("Контакт") <> Неопределено Тогда
			ЭлементКонтакты = Элемент.Контакт;
			Если ЭлементКонтакты <> Неопределено Тогда
				Если ЭлементКонтакты.Тлф <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);
				КонецЕсли;
				Если ЭлементКонтакты.Факс <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				ИдКонтрагента = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Роль") Тогда
				Если ВРег(ЗнДанных) = ВРег("Продавец") Тогда
					Если НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара Тогда
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					Иначе
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
					КонецЕсли;
				ИначеЕсли ВРег(ЗнДанных) = ВРег("Покупатель") Тогда
					Если НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
					Иначе
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
				РеквизитыУчастника = ЗнДанных;
				Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
					РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
					Если РеквизитУчастника <> Неопределено Тогда
						Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
						ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
							РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
						Иначе // остальное по именам
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Адрес") Тогда
				РеквизитыКонтрагента.Вставить("ФактическийАдрес_Представление", ЗнДанных.Представление);
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Контакты") Тогда
				ТаблицаКонтактов = Новый ТаблицаЗначений();
				ТаблицаКонтактов.Колонки.Добавить("Вид");
				ТаблицаКонтактов.Колонки.Добавить("Представление");
				ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
				Для Каждого Контакт из ЗнДанных.Контакт Цикл
					Вид = Неопределено;
					Если Контакт.Тип = "Почта" Тогда
						Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailКонтрагента");
					ИначеЕсли Контакт.Тип = "Телефон рабочий" Тогда
						Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
					ИначеЕсли Контакт.Тип = "Факс" Тогда
						Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксКонтрагента");
					КонецЕсли;
					Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
						НовКонт = ТаблицаКонтактов.Добавить();
						НовКонт.Вид = Вид;
						НовКонт.Представление = Контакт.Значение;
						НовКонт.ЗначенияПолей = Контакт.Комментарий;
					КонецЕсли;
				КонецЦикла;
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);
			Иначе // остальное по именам
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
	// Определяем расчетный счет контрагента
	Если НЕ ТипЗнч(Элемент) = Тип("Структура") Тогда
		Если Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено Тогда
			РасчетныеСчета = Элемент.РасчетныеСчета;
			Если РасчетныеСчета <> Неопределено Тогда
				РасчетныеСчетаXDTO = РасчетныеСчета.ПолучитьСписок("РасчетныйСчет");
				Для Каждого РасчетныйСчетXDTO Из РасчетныеСчетаXDTO Цикл
					ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
					Прервать;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Элемент.Свойства().Получить("БанкРекв") <> Неопределено И Элемент.БанкРекв <> Неопределено Тогда
			ПрочитатьДанныеПоРасчетномуСчетуТорг12(НовыйЭД, Элемент.БанкРекв, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("РеквизитыПолучателя") <> Неопределено Тогда
		СвойствоЭД = ЭД.Свойства().Получить("РеквизитыПолучателя");
		РеквизитыПолучателя = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РеквизитыПолучателя, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
	КонецЕсли;
	
	// Доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			РеквизитыПартнера = Новый Структура();
			РеквизитыПартнера.Вставить("Контрагент", Контрагент);
			ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Партнеры");
			
			ЗнДопАналитики = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
			Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
					+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) И НЕ ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
					Продолжить;
				КонецЕсли;
				// Разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
							
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
						
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										// Если СвойствоВеличинаСтавкиНалога = Неопределено, то передавали СтавкуНДС = "БезНДС".
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма, "СуммаСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Описание") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Содержание");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свой-во ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
					РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				
				Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "",
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдЭД = ?(ЭД.Свойства().Получить("ИД") = Неопределено, "", ЭД.Ид);
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	НаимТовара = "";
	ИдТовара = "";
	ЕстьДопРеквизиты = Ложь;
	
	// Номенклатура.
	РеквизитыНоменклатуры = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		// Разберем свойства Товара.
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
			ИдТовара = РеквизитыНоменклатуры.Ид;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
			РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
			НаимТовара = РеквизитыНоменклатуры.Наименование;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
			РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
				НаимЕдИзм = "";
				Если ЗнДанных.Свойства().Получить("Наименование") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					НаимЕдИзм = ЗнДанных.Наименование;
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("НаименованиеКраткое") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.НаименованиеКраткое);
					НаимЕдИзм = ЗнДанных.НаименованиеКраткое;
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("НаименованиеПолное") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("НаименованиеПолное", ЗнДанных.НаименованиеПолное);
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("МеждународноеСокращение") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("МеждународноеСокращение", ЗнДанных.МеждународноеСокращение);
				КонецЕсли;
				ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, НаимЕдИзм,
					ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
				Если НЕ ЗнДанных.Свойства().Получить("Наименование") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
				КонецЕсли;
				Если НЕ ЗнДанных.Свойства().Получить("Коэффициент") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Коэффициент", ЗнДанных.Коэффициент);
				КонецЕсли;
				ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(ЗнДанных.Код),
					ЗнДанных.Наименование, ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налог") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				Если ВРег(ЗнДанных.ТипНалога) = "НДС" Тогда
					// Если СвойствоВеличинаСтавкиНалога = Неопределено, то передавали СтавкуНДС = "БезНДС".
					СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(ЗнДанных.ВеличинаСтавкиНалога);
					СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
					СписокТЧ.Добавить(ЗнДанных.Сумма, "СуммаНДС");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаБезНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаСУчетомНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "СуммаСНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("СрокГодности") Тогда
			СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = новый Структура;
			Для Каждого ЭлементДанных из ЗнДанных Цикл
				МассивЗначений = Новый Массив;
				Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
					МассивЗначений.Добавить(ЭлементЗначения)
				КонецЦикла;
				СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
			КонецЦикла;
			
		// Схема 2.06:
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Единица") Тогда
			РеквизитыЕдИзм = Новый Структура;
			Если ЗначениеЗаполнено(ЗнДанных) Тогда
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных);
				ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных), РеквизитыЕдИзм);
				НаименованиеЕИ = ?(ЗначениеЗаполнено(ЕдИзм), ЕдИзм.Наименование, Неопределено);
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(ЗнДанных), НаименованиеЕИ,
					ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
			Если ТипЗнч(ЗнДанных.Налог) = Тип("СписокXDTO") Тогда
				МассивСтруктур = Новый Массив;
				Для Каждого Налог Из ЗнДанных.Налог Цикл
					СтруктураНалога = Новый Структура;
					Для Каждого СвойствоНалога Из Налог.Свойства() Цикл
						ЗначениеНалога = Налог.Получить(СвойствоНалога);
						Если НЕ ЗначениеЗаполнено(ЗначениеНалога) Тогда
							Продолжить;
						ИначеЕсли СвойствоНалога.Имя = "Ставка" Тогда
							ЗначениеНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(ЗначениеНалога);
						КонецЕсли;
						СтруктураНалога.Вставить(СвойствоНалога.Имя, ЗначениеНалога);
					КонецЦикла;
					МассивСтруктур.Добавить(СтруктураНалога);
				КонецЦикла;
				Если МассивСтруктур.Количество() > 0 Тогда
					СтруктураНалога = МассивСтруктур[0];
					СтавкаНДС = "";
					НДСУчтеноВСумме = "";
					СуммаНДС = 0;
					Если НЕ СтруктураНалога.Свойство("Ставка", СтавкаНДС) Тогда
						СтавкаНДС = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС("Без НДС");
					КонецЕсли;
					Если НЕ СтруктураНалога.Свойство("УчтеноВСумме", НДСУчтеноВСумме) Тогда
						НДСУчтеноВСумме = Ложь;
					КонецЕсли;
					Если НЕ СтруктураНалога.Свойство("Сумма", СуммаНДС) Тогда
						СуммаНДС = 0;
					КонецЕсли;
					СписокТЧ.Добавить(СтавкаНДС, "СтавкаНДС");
					СписокТЧ.Добавить(СуммаНДС, "СуммаНДС");
					СписокТЧ.Добавить(НДСУчтеноВСумме, "НДСУчтеноВСумме");
				КонецЕсли;
				Если МассивСтруктур.Количество() > 1 Тогда
					СписокТЧ.Добавить(МассивСтруктур, "Налоги");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ДопРасходы") Тогда
			МассивСтруктур = Новый Массив;
			Для Каждого ЭлСписка Из ЗнДанных[ТекСвойство.Имя] Цикл
				СтруктураДанных = Новый Структура;
				Для Каждого СвойствоДопСписка Из ЭлСписка.Свойства() Цикл
					ЗначениеДопСписка = Налог.Получить(СвойствоДопСписка);
					Если НЕ ЗначениеЗаполнено(ЗначениеДопСписка) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураНалога.Вставить(СвойствоДопСписка.Имя, ЗначениеДопСписка);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураДанных);
			КонецЦикла;
			СписокТЧ.Добавить(МассивСтруктур, ТекСвойство.Имя);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеЗначенияРеквизитов")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ЗначенияРеквизитов") Тогда
			ПрочитатьСписокЗначенийРеквизитовCML(ЗнДанных.ЗначениеРеквизита, СписокТЧ, Ошибка)
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Сумма") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаЗаЕдиницу") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Цена");
		Иначе
			СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
	Если ИдентификацияПоНоменклатуреКомпании Тогда
		СтруктураИд = РазобратьИДТовара(ИдТовара);
		Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
		Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
			ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
			СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
			УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
			СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
		КонецЕсли;
	Иначе
		// Номенклатура поставщиков.
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
		Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаимТовара) Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
		КонецЕсли;
		
		НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
			РеквизитыНоменклатурыПоставщика, ИдЭД);
		
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
			РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара, ИдЭД);
		
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		Конецесли;
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
	
	ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоГрафикуОплаты(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) И НЕ ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
					Продолжить;
				КонецЕсли;
				Если ВРег(ТекСвойство.Имя) = ВРег("ДатаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ДатаПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ПроцентПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ПроцентПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "СуммаПлатежа");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ВидОплаты") Тогда
					Если ЗнДанных = "Аванс" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Аванс (до обеспечения)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель"  Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Аванс (до подтверждения)"), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Предоплата" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Предоплата (до отгрузки)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Предоплата (до поступления)"), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Кредит" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Кредит (после отгрузки)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Кредит (после поступления)"), "ВариантОплаты");
						КонецЕсли;
					КонецЕсли;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "ЭтапыГрафикаОплаты", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		
		Для Каждого Элемент Из НаборДанных Цикл
			
			СписокТЧ = Новый СписокЗначений;
			НаименованиеТовара = "";
			ИдТовара = "";
			АртикулТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура.
			РеквизитыНоменклатуры = Новый Структура;
			РеквизитыНоменклатурыПоставщика = Новый Структура;
			ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
			ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
			РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатурыПоставщика.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
						
						Если ЗнДанных.Свойства().Получить("Наименование") <> Неопределено Тогда
							НаименованиеБазовойВеличины = ЗнДанных.Наименование;
							РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						КонецЕсли;
						Если ЗнДанных.Свойства().Получить("НаименованиеПолное") <> Неопределено Тогда
							НаименованиеБазовойВеличины = ЗнДанных.НаименованиеПолное;
							РеквизитыЕдИзм.Вставить("НаименованиеПолное", ЗнДанных.НаименованиеПолное);
						КонецЕсли;
						Если ЗнДанных.Свойства().Получить("МеждународноеСокращение") <> Неопределено Тогда
							РеквизитыЕдИзм.Вставить("МеждународноеСокращение", ЗнДанных.МеждународноеСокращение);
						КонецЕсли;
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код,
							НаименованиеБазовойВеличины, ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						РеквизитыНоменклатурыПоставщика.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
						
						Если ЗнДанных.Свойства().Получить("Пересчет") <> Неопределено Тогда
							Пересчеты = ЗнДанных.Пересчет;
							Если ТипЗнч(Пересчеты) = Тип("СписокXDTO") Тогда
								
								ЕдиницыХраненияОстатков = Новый ТаблицаЗначений;
								ЕдиницыХраненияОстатков.Колонки.Добавить("Наименование");
								ЕдиницыХраненияОстатков.Колонки.Добавить("Коэффициент");
								Для Каждого ЭлементПересчета Из Пересчеты Цикл
									
									НоваяСтрока = ЕдиницыХраненияОстатков.Добавить();
									НоваяСтрока.Наименование = ЭлементПересчета.Единица;
									НоваяСтрока.Коэффициент  = ЭлементПересчета.Коэффициент;
									
								КонецЦикла;
								РеквизитыНоменклатуры.Вставить("Пересчет", ЕдиницыХраненияОстатков);
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для Каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
			Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
			КонецЕсли;
			Если ЗначениеЗаполнено(НаимТовара) Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
			КонецЕсли;
			Если ЕстьДопРеквизиты Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
			КонецЕсли;
			
			НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
				РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
			НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
			
			Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
				РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			КонецЕсли;
			Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчетуТорг12(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДеревоРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
	
	// Обработка банка счета
	
	БанкXDTO = РасчетныйСчетXDTO.СвБанк;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("Код",			БанкXDTO.БИК);
	РеквизитыБанка.Вставить("Наименование", БанкXDTO.НаимБанк);
	
	БанкСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора
	ТипБанкиВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
	
	// Обработка самого счета
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета, РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: " + РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчету(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДеревоРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
	
	БанкXDTO = РасчетныйСчетXDTO.Банк;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);
	РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);
	РеквизитыБанка.Вставить("КоррСчет",     БанкXDTO.СчетКорреспондентский);
	
	БанкСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора.
	ТипБанкиВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
	
	//Обработка банка корреспондента
	ЕстьБанкКорреспондент = Ложь;
	СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
	Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
		
		ЕстьБанкКорреспондент = Истина;
		БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;
		
		РеквизитыБанкаКорреспондента = Новый Структура;
		РеквизитыБанкаКорреспондента.Вставить("Код",          БанкКорреспондентXDTO.БИК);
		РеквизитыБанкаКорреспондента.Вставить("Наименование", БанкКорреспондентXDTO.Наименование);
		РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     БанкКорреспондентXDTO.СчетКорреспондентский);
		
		БанкКорреспондентСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки",
			РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
		
		// Создаем объект банка в дереве разбора
		ТипБанкиКоррВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанкаКорреспондента = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
			"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДеревоРазбора,
			Ошибка);
		
	КонецЕсли;	
	
	// Обработка самого счета	
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета,
		РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора.
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: "
		+ РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ЕстьБанкКорреспондент Тогда
		ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
	КонецЕсли;	
	
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли	
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе	
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код,
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										// Если СвойствоВеличинаСтавкиНалога = Неопределено, то передавали СтавкуНДС = "БезНДС".
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;
							
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") Тогда
					СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе // Все остальные случаи - ищем по номенклатуре поставщика.
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ОтветНаЗаказ) ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код,
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", ЕдИзм);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", ЕдИзм);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										// Если СвойствоВеличинаСтавкиНалога = Неопределено, то передавали СтавкуНДС = "БезНДС".
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;	
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
										СписокТЧ.Добавить(Скидка.Процент,"ПроцентРучнойСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
				КонецЕсли;
			Иначе
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
					РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				
				СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
				ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураРеквизитовТовара, ЭД.Ид);
		
				Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
				Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
					СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
					СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
				Конецесли;
				
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных)
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура.
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, 
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										// Если СвойствоВеличинаСтавкиНалога = Неопределено, то передавали СтавкуНДС = "БезНДС".
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаПродажи");
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "СуммаБезНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Цена") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ЦенаПродажи");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаКомитента") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Цена");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаКомитента") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Сумма");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						
						Если ЭлементДанных.Значение.Количество() > 1 Тогда
							МассивЗначений = Новый Массив;
							Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							// Для адресов покупателя разберем строку адреса в структуру адреса ФНС
							Если ЭлементДанных.Наименование = "ПокупательФактАдрес" ИЛИ ЭлементДанных.Наименование = "ПокупательЮрАдрес" Тогда
								ЭлементЗначения = РазложитьАдрес(ЭлементЗначения);
							ИначеЕсли ЭлементДанных.Наименование = "ДатаПродажи" Тогда
								ЭлементЗначения = ПолучитьДатуВремяИзСтроки(ЭлементЗначения);
							КонецЕсли;
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
							СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
						Иначе
						
							ЭлементЗначения = ЭлементДанных.Значение[0];
							// Для адресов покупателя разберем строку адреса в структуру адреса ФНС
							Если ЭлементДанных.Наименование = "ПокупательФактАдрес" ИЛИ ЭлементДанных.Наименование = "ПокупательЮрАдрес" Тогда
								ЭлементЗначения = РазложитьАдрес(ЭлементЗначения);
							ИначеЕсли ЭлементДанных.Наименование = "ДатаПродажи" Тогда
								ЭлементЗначения = ПолучитьДатуВремяИзСтроки(ЭлементЗначения);
							КонецЕсли;
							СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, ЭлементЗначения);
						КонецЕсли;
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДопРеквизиты Тогда
				СписокТЧ.Добавить(СтруктураДопРеквизитов, "ДополнительныеРеквизиты");
			КонецЕсли;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
					СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
					СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Ошибка) Экспорт
	
	ОтборБезСсылокНаОбъекты = Новый Структура;
	ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);
	ПорядокСозданияТиповОбъектов = ЭлектронныеДокументыПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов();
	Для Каждого СтрокаТипОбъекта Из ПорядокСозданияТиповОбъектов Цикл
		НайденнаяСтрокаТипа = ДеревоРазбора.Строки.Найти(СтрокаТипОбъекта.ТипОбъекта, "ТипОбъекта");
		Если НайденнаяСтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Всегда будет перезаполнять Номенклатуру поставщика
		Если СтрокаТипОбъекта.ТипОбъекта = "НоменклатураПоставщиков" Тогда
			Для Каждого СтрокаОбъекта Из НайденнаяСтрокаТипа.Строки Цикл
				СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиБезСсылокНаОбъекты = НайденнаяСтрокаТипа.Строки.НайтиСтроки(ОтборБезСсылокНаОбъекты);
			Для Каждого СтрокаОбъекта Из СтрокиБезСсылокНаОбъекты Цикл
				СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено)
	
	// Добавить в реквизиты шапки ЭлектронныеДокументы
	НовСтрока                   = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит          = ИмяРеквизита;
	НовСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыТЧОбъекта(СтрокаЭлементов, ИмяТЧ, СписокРеквизитов)
	
	// Добавить в реквизиты ТЧ ЭлектронныеДокументы
	НовСтрока          = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяТЧ;
	Для Каждого ТекЭлСписка Из СписокРеквизитов Цикл
		НовСтрокаТЧ                   = НовСтрока.Строки.Добавить();
		НовСтрокаТЧ.Реквизит          = ТекЭлСписка.Представление;
		НовСтрокаТЧ.ЗначениеРеквизита = ТекЭлСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ЗначениеТипаОбъекта)
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();
		НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;
		НайденнаяСтрока.ИндексСтроки = Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа = ОпределитьТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Если НЕ ЭтоНоменклатура(СсылкаНаОбъект) Тогда
				ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				// Проверим, что Описания совпадают по одной ссылке
				Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта Тогда
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>'"), СсылкаНаОбъект,
						НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
				КонецЕсли;
			Иначе
				// У номенклатуры может быть такое, в случае когда несколько элементов вход.данных
				// имеют ссылку на один элемент справочника.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СсылкаНаОбъект",  СсылкаНаОбъект);
				ПараметрыОтбора.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
				ПараметрыОтбора.Вставить("ИД",              ИдОбъекта);
				НайденныеСтроки = СтрокаТипаВДереве.Строки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
					НайденнаяСтрока.СсылкаНаОбъект  = СсылкаНаОбъект;
					НайденнаяСтрока.ИД              = ИдОбъекта;
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
					НайденнаяСтрока.ОписаниеТипа    = ОпределитьТипОбъекта(
						СтрокаТипаВДереве.ТипОбъекта);
					НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
						НайденнаяСтрока));
					ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
				Иначе // Непредвиденная ситуация
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: неуникальное описание для ИД <%1>, Описание <%2>'"),
						ИдОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД              = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ОпределитьТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ОпределитьТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Процедура ДобавитьДопРеквизиты(СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь)
	
	Для Каждого ТекЭл Из ДопРеквизиты Цикл
		
		Если ТипЗнч(ТекЭл.Значение) = Тип("ОбъектXDTO") Тогда
		Иначе
			
			Если ЗначениеЗаполнено(ТекЭл.Значение) Тогда
				Если ТипЗнч(ТекЭл.Значение) = Тип("Массив") Тогда
					Для Каждого ТекЭлМассива Из ТекЭл.Значение Цикл
						Если ТипЗнч(ТекЭлМассива) = Тип("Структура") Тогда
							ДобавитьДопРеквизиты(СтрокаДереваРазбора, ТекЭлМассива, ДеревоРазбора, Отказ);
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поищем, возможно уже есть такой реквизит с таким же значением.
					НайденнаяСтрока = СтрокаДереваРазбора.Строки.Найти(ТекЭл.Ключ, "Реквизит", Истина);
					Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЗначениеРеквизита = ТекЭл.Значение Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрока = СтрокаДереваРазбора.Строки.Добавить();
					НовСтрока.Реквизит          = ТекЭл.Ключ;
					НовСтрока.ЗначениеРеквизита = ТекЭл.Значение;
					// Если ИндексСтроки, то попытка найти СсылкуНаОбъект.
					Если ТипЗнч(НовСтрока.ЗначениеРеквизита) = Тип("Строка") Тогда
						НайденнаяСтрока = ДеревоРазбора.Строки.Найти(НовСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
						Если НайденнаяСтрока <> Неопределено Тогда
							Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
								НовСтрока.СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьИДТовара(знач ИД)
	
	СтруктураВозврата = Новый Структура("ИДТовара, ИДХарактеристики, ИДУпаковки");
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Поз = Найти(ИД, "#");
	Если Поз > 0 Тогда
		
		СтруктураВозврата.ИДТовара = Сред(ИД, 1 , Поз - 1);
		Если СтрДлина(ИД) > Поз Тогда
			
			Ид = Сред(ИД, Поз + 1);
			Поз = Найти(ИД, "#");
			Если Поз > 0 Тогда
				СтруктураВозврата.ИДХарактеристики = Сред(ИД, 1 ,Поз - 1);
			КонецЕсли;
			
			Если СтрДлина(ИД) > Поз Тогда
				СтруктураВозврата.ИДУпаковки = Сред(ИД, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьСтруктуруТовара()
	
	СтруктураВозврата = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДанныеЗаказчикаИзДопДанных(ДеревоДопДанных)
	
	Заказчик = Неопределено;
	СтрокаШапка = ДеревоДопДанных.Строки.Найти("Шапка");
	Если НЕ СтрокаШапка = Неопределено Тогда
		СтруктураДанныхЗаказчика = Новый Структура;
		СформироватьСтруктуруПоДопДанным(СтрокаШапка, СтруктураДанныхЗаказчика);
		Заказчик = Новый Структура;
		НаименованиеЗаказчика = "";
		Если СтруктураДанныхЗаказчика.Свойство("Заказчик", НаименованиеЗаказчика) Тогда //ЮрЛицо
			Заказчик.Вставить("ПолноеНаименование", НаименованиеЗаказчика);
			ИННЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИНН", ИННЗаказчика) Тогда
				Заказчик.Вставить("ИНН", ИННЗаказчика);
			КонецЕсли;
			КППЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикКПП", КППЗаказчика) Тогда
				Заказчик.Вставить("КПП", КППЗаказчика);
			КонецЕсли;
			Заказчик.Вставить("ЮрФизЛицо", ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
		Иначе // ФизЛицо
			ФамилияЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикФамилия", ФамилияЗаказчика) Тогда
				НаименованиеЗаказчика = ФамилияЗаказчика;
			КонецЕсли;
			ИмяЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИмя", ИмяЗаказчика) Тогда
				НаименованиеЗаказчика = НаименованиеЗаказчика + " " + ИмяЗаказчика;
			КонецЕсли;
			ОтчествоЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикОтчество", ОтчествоЗаказчика) Тогда
				НаименованиеЗаказчика = НаименованиеЗаказчика + " " + ОтчествоЗаказчика;
			КонецЕсли;
			Заказчик.Вставить("ПолноеНаименование", НаименованиеЗаказчика);
			ИННЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИНН", ИННЗаказчика) Тогда
				Заказчик.Вставить("ИНН", ИННЗаказчика);
			КонецЕсли;
			Заказчик.Вставить("ЮрФизЛицо", ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Заказчик;

КонецФункции

// Возвращает ссылка на элемент справочника
//
// Параметры:
//  Наименование - Строка, название справочника в метаданных
//  ИД - Уникальный идентификатор элемента
//
// Возвращаемое значение:
//  Ссылка на элемент справочника
//
Функция ЭлементСправочникаПоИД(Наименование, ИД)
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(Наименование);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Если ЗначениеЗаполнено(ИД) Тогда
			UID = Новый УникальныйИдентификатор(ИД);
			Результат = Справочники[ИмяПрикладногоСправочника].ПолучитьСсылку(UID);
		Иначе
			Результат = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку(Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Чтение xml по схеме версии 2.06

Функция ЭтоПростойТипЭлементаXDTO(Элемент)
	
	ЭтоПростойТип = Истина;
	ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("СписокXDTO")
		ИЛИ ТипЭлемента = Тип("ОбъектXDTO")
		ИЛИ ТипЭлемента = Тип("ЗначениеXDTO") Тогда
		ЭтоПростойТип = Ложь;
	КонецЕсли;
	
	Возврат ЭтоПростойТип;
	
КонецФункции

// Процедура выполняет чтение универсальной структуры данных схемы 2.06 (разработанной
// для передачи произвольных данных в шапке и в табличных частях: список из набора пар:
// наименование реквизита и список значений реквизитов.
//
// Параметры:
//  ЗначенияРеквизитов - СписокXDTO - список реквизитов и значений.
//  Приемник - строка дерева данных, список значений - строка дерева, в которую помещаются извлечённые из xml-файла данные,
//    либо список значений (при разборе таблицы товаров).
//  Ошибка - Булево - флаг ошибки.
//
Процедура ПрочитатьСписокЗначенийРеквизитовCML(ЗначенияРеквизитов, Приемник, Ошибка)
	
	Для Каждого Реквизит Из ЗначенияРеквизитов Цикл
		
		НаименованиеРеквизита = Реквизит.Наименование;
		Если ТипЗнч(Реквизит.Значение) = Тип("СписокXDTO") Тогда
			Если Реквизит.Значение.Количество() > 0 Тогда
				МассивЗначений = Новый Массив;
				Для Каждого Значение Из Реквизит.Значение Цикл
					МассивЗначений.Добавить(Значение);
				КонецЦикла;
				ЗначениеРеквизита = ?(МассивЗначений.Количество() > 1, МассивЗначений, МассивЗначений[0]);
				Если ТипЗнч(Приемник) = Тип("СписокЗначений") Тогда
					Приемник.Добавить(ЗначениеРеквизита, НаименованиеРеквизита);
				Иначе
					ДобавитьРеквизитШапкиОбъекта(Приемник, НаименованиеРеквизита, ЗначениеРеквизита);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеКонтрагентаCML(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль = "")

	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если Роль = "Поставщик" ИЛИ (Роль = "Лицензиар" И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий)
		ИЛИ (Роль = "Лицензиат" И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий) Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
	ИначеЕсли Роль = "Получатель" ИЛИ (Роль = "Лицензиат" И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий)
		ИЛИ (Роль = "Лицензиар" И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий) Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ДопАналитика = "Партнер";
	ИначеЕсли Роль = "Плательщик" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = Роль;
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ДопАналитика = "Партнер";
	КонецЕсли;
	
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ОфициальноеНаименование")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ПолноеНаименование") Тогда
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ЗнДанных);
			ЮрФизЛицо = ?(ВРег(ТекСвойство.Имя) = ВРег("ПолноеНаименование"), "ФизЛицо", "ЮрЛицо");
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ЮрФизЛицо", ЮрФизЛицо));
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Адрес") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ЮридическийАдрес") Тогда
			ПрефиксАдреса = ?(ВРег(ТекСвойство.Имя) = ВРег("Адрес"), "ФактическийАдрес", "ЮридическийАдрес");
			Для Каждого Свойство Из ЗнДанных.Свойства() Цикл
				Реквизит = ЗнДанных[Свойство.Имя];
				Если Реквизит <> Неопределено Тогда
					Если ВРег(Свойство.Имя) = ВРег("Представление") Тогда
						РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "_Представление", Реквизит);
					ИначеЕсли ВРег(Свойство.Имя) = ВРег("АдресноеПоле") Тогда
						СтруктураАдреса = Новый Структура;
						Для Каждого ЭлементАдреса Из Реквизит Цикл
							СтруктураАдреса.Вставить(ЭлементАдреса.Тип, ЭлементАдреса.Значение);
						КонецЦикла;
						Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
							РеквизитыКонтрагента.Вставить("АдресСтруктурой", СтруктураАдреса);
						КонецЕсли;
					Иначе
						РеквизитыКонтрагента.Вставить(Свойство.Имя, Реквизит);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Руководитель") Тогда
			СтРеквизитов = Новый Структура;
			Для Каждого Свойство Из ЗнДанных.Свойства() Цикл
				Реквизит = ЗнДанных[Свойство.Имя];
				Если Реквизит <> Неопределено Тогда
					Если ЭтоПростойТипЭлементаXDTO(Реквизит) Тогда
						СтРеквизитов.Вставить(Реквизит, Свойство.Имя);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			РеквизитыКонтрагента.Вставить("Руководитель", СтРеквизитов);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Контакты") Тогда
			ТаблицаКонтактов = Новый ТаблицаЗначений();
			ТаблицаКонтактов.Колонки.Добавить("Вид");
			ТаблицаКонтактов.Колонки.Добавить("Представление");
			ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
			Для Каждого Контакт из ЗнДанных.Контакт Цикл
				Вид = Неопределено;
				Если Контакт.Тип = "Почта" Тогда
					Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailКонтрагента");
				ИначеЕсли Контакт.Тип = "Телефон рабочий" Тогда
					Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
				ИначеЕсли Контакт.Тип = "Факс" Тогда
					Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксКонтрагента");
				КонецЕсли;
				Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
					НовКонт = ТаблицаКонтактов.Добавить();
					НовКонт.Вид = Вид;
					НовКонт.Представление = Контакт.Значение;
					НовКонт.ЗначенияПолей = Контакт.Комментарий;
				КонецЕсли;
			КонецЦикла;
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
	// Определяем расчетный счет контрагента
	Если НЕ ТипЗнч(Элемент) = Тип("Структура") Тогда
		Если Элемент.Свойства().Получить("РасчетныйСчет") <> Неопределено
			И ТипЗнч(Элемент.РасчетныйСчет) = Тип("ОбъектXDTO") Тогда
			РасчетныйСчет = Элемент.РасчетныйСчет;
			ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчет, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	// Доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			РеквизитыПартнера = Новый Структура();
			РеквизитыПартнера.Вставить("Контрагент", Контрагент);
			ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Партнеры");
			
			ЗнДопАналитики = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
			Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
					+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура читает простой список содержащий элементы простых типов (строка, число, ...).
// Прочитанные данные элемента списка помещаются в структуру (ключ - наименование параметра, значение - значение),
// структуры параметров помещаются в массив, массив записывается в дерево значений с именем объекта XDTO, элементом
// которого является список.
//
// Параметры:
//  ОбъектXDTO - объект XDTO - объект, содержащий единственный элемент - читаемый список XDTO.
//  НовыйЭД - строка дерева значений - строка дерева данных, в которую помещается массив с прочитанными данными.
//  Ошибка - строка - текст ошибки, возникшей в процессе обработки списка XDTO.
//
Процедура ДанныеСпискаЗначенийCML(ОбъектXDTO, НовыйЭД, Ошибка)
	
	МассивСтруктур = Новый Массив;
	СвойстваОбъекта = ОбъектXDTO.Свойства();
	Если СвойстваОбъекта.Количество() > 0 Тогда
		Если СвойстваОбъекта[0].ВерхняяГраница = -1 Тогда
			ИмяСписка = СвойстваОбъекта[0].Имя;
			Для Каждого ЭлементСписка Из ОбъектXDTO[ИмяСписка] Цикл
				СтруктураДанных = Новый Структура;
				Для Каждого Элемент Из ЭлементСписка.Свойства() Цикл
					Значение = ЭлементСписка[Элемент.Имя];
					СтруктураДанных.Вставить(Элемент.Имя, Значение);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСтруктур.Количество() > 0 Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ОбъектXDTO.ВладеющееСвойство().Имя, МассивСтруктур);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом разбора

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает дерево с данными файла
//
// Параметры:
//  ПолноеИмяФайла - Строка, путь к файлу
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа
//  ФайлДопДанных - Строка, путь к файлу с дополнительными данными
//
// Возвращаемое значение:
//  Структура - данные дерева
//
Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД = Неопределено, ФайлДопДанных = Неопределено) Экспорт
	
	ДеревоРазбора = ИнициализироватьДеревоРазбора();
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	Иначе 
		НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	КонецЕсли;
	
	Если ФайлДопДанных <> Неопределено Тогда
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ФайлДопДанных);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Результат = ПрочитатьФайлCMLпоXDTO(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД);
	
	Если НЕ Результат Тогда // ошибка разбора ЭД
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта"); // раздел ЭлектронныеДокументы
	СтрокаОбъекта = НайденнаяСтрока.Строки[0];
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, СтрокаОбъекта);
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ТОРГ-12

Функция ПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ПолноеНаименование"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ИНН"));
	СведенияОГрузоотправителе.Вставить("КПП", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.КПП"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО", 		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ЮридическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ФактическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.НомерСчета"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Наименование"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Код"));
	СведенияОГрузоотправителе.Вставить("КоррСчет",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.КоррСчет"));
	СведенияОГрузоотправителе.Вставить("Телефоны",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ПолноеНаименование"));
	СведенияОГрузополучателе.Вставить("ИНН", 			   	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ИНН"));
	СведенияОГрузополучателе.Вставить("КПП", 			   	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.КПП"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО", 		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ЮридическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ФактическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("НомерСчета",		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.НомерСчета"));
	СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Наименование"));
	СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Код"));
	СведенияОГрузополучателе.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.КоррСчет"));
	СведенияОГрузополучателе.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПодразделения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.СтруктурноеПодразделение"));
	ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",	"");
	ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",			"");
	
	ДанныеЗаполненияШапки.Вставить("ОснованиеНомер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ОснованиеДата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеОснования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеОснования"));
	
	ДанныеЗаполненияШапки.Вставить("НомерДокумента",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("Курс", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АдресДоставки"));
	
	ДанныеЗаполненияПодвала = Новый Структура;
	
	ДанныеЗаполненияПодвала.Вставить("КоличествоЛистовВПриложении", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЛистовВПрилПрописью"));
	ДанныеЗаполненияПодвала.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЗаписейПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ВсегоМестПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоМестПрописью"));
	ДанныеЗаполненияПодвала.Вставить("МассаГрузаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "МассаГрузаПрописью"));
	ДанныеЗаполненияПодвала.Вставить("СуммаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВсегоПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ДатаОтпуска", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаОтпуска"));
	
	ДанныеЗаполненияПодвала.Вставить("ДолжностьРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьКладовщика"));
	ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ФИОГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ФИОКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОКладовщика"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаНетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаБрутто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоМест", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоВОдномМесте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ТоварКод");
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.КоличествоВОдномМесте = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоВОдномМесте");
		
		НоваяСтрока.КоличествоМест = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Мест");
		
		НоваяСтрока.МассаБрутто = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаБрутто");
		НоваяСтрока.МассаНетто = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаНетто");
		
		НоваяСтрока.ВидУпаковки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Упаковка");
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.СуммаНДС),НоваяСтрока.СуммаНДС,0);
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = "без НДС";
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Подвал", ДанныеЗаполненияПодвала);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ ТОРГ-12.
//
Процедура ЗаполнитьТабличныйДокументТОРГ12_ЭД(ТабличныйДокумент, ДанныеПечати, ДанныеПокупателя)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(?(ДанныеПокупателя.Количество() > 0, "ЭД_ТОРГ12Покупателя", "ЭД_ТОРГ12"));
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ТОРГ12";
	
	ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);
	
	НомерСтраницы = 1;
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб|ОсновныеДанныеТаблицы");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице|ОсновныеДанныеТаблицы");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего|ОсновныеДанныеТаблицы");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
	КонецЕсли;
	
	// Выводим табличную часть документа
	ТЧТовары = ДанныеПечати.Товары;
	
	КоличествоСтрок = ТЧТовары.Количество();
	
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
		
		ДанныеСтроки.КоэффициентПересчета  = ?(ЗначениеЗаполнено(СтрокаТовары.КоличествоВОдномМесте),СтрокаТовары.КоличествоВОдномМесте,1);
		ДанныеСтроки.Количество  = СтрокаТовары.Количество;
		ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
		
		ДанныеСтроки.Сумма     = СтрокаТовары.Сумма;
		ДанныеСтроки.СуммаНДС  = СтрокаТовары.СуммаНДС;
		ДанныеСтроки.СуммаСНДС = СтрокаТовары.СуммаСНДС;
		
		ДанныеСтроки.Цена = СтрокаТовары.Цена;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
		
		
		Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				
			КонецЕсли;
			
			Если ДанныеСтроки.Номер <> 1 И Не ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// Очистим итоги по странице.
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭЦП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭЦП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭЦП.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭЦП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати.Подвал, Макет, ТабличныйДокумент, ДанныеПокупателя);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки ТОРГ-12.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет ТОРГ-12
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ОбластьМакета.Параметры.Основание = 
		?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеОснования), ДанныеПечати.НаименованиеОснования, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеНомер), " № " + ДанныеПечати.ОснованиеНомер, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеДата), " от " + Формат(ДанныеПечати.ОснованиеДата, "ДЛФ=Д"), "");
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОГрузоотправителе,
		"ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОГрузополучателе,
		"ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПокупателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
		
	ОбластьМакета.Параметры.АдресДоставки = ДанныеПечати.АдресДоставки;
		
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала ТОРГ-12.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  Макет - Макет ТОРГ-12
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент, ДанныеПокупателя)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.Заполнить(ДанныеПокупателя);
	
	ПолнаяДатаДокумента = Формат(ДанныеПечати.ДатаОтпуска, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со СЧЕТ (ЗАКАЗ КЛИЕНТА)

Функция ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, Тип = "Счет")
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("БИКБанкаПолучателя",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкПолучателяПредставление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаПолучателяПредставление", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ДанныеЗаполненияШапки.Вставить("СчетПолучателяПредставление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	ДанныеЗаполненияШапки.Вставить("БИКБанкаКорреспондента",           ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкКорреспондент",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаКорреспондента",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
	
	ДанныеЗаполненияШапки.Вставить("Номер",             ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",              ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СрокПлатежа"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОкончанияДействияСчета"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("Руководитель",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Руководитель"));
	ДанныеЗаполненияШапки.Вставить("Бухгалтер",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Бухгалтер"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("Сумма",             ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаИтог"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки",     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"АдресДоставки"));

	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Наименование");
			ИДТовара = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.Код   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		КонецЕсли;
		
		НоваяСтрока.Артикул          = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		Упаковка                     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"ЕдиницаИзмерения");
		БазоваяЕдиницаИзмерения      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество       = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"КоличествоУпаковок");
		НоваяСтрока.Цена             = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
        ТоварыСумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
        Если Не ЗначениеЗаполнено(ТоварыСумма) Тогда
            ТоварыСумма = 0;
		КонецЕсли;
		НоваяСтрока.Сумма = ТоварыСумма;
		НоваяСтрока.СуммаНДС         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		
	КонецЦикла;
	
	// ЭтапыОплаты
	ТЗЭтапыОплаты = Новый ТаблицаЗначений;
	
	Если Тип = "Заказ" Тогда
		ТЗЭтапыОплаты.Колонки.Добавить("ВариантОплаты");
	КонецЕсли;
	ТЗЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("ПроцентПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("СуммаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("НомерСтроки");
	НомерСтроки = 1;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ЭтапыГрафикаОплаты"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗЭтапыОплаты.Добавить();
		Если Тип = "Заказ" Тогда
			НоваяСтрока.ВариантОплаты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВариантОплаты");
		КонецЕсли;
		НоваяСтрока.ДатаПлатежа    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаПлатежа");
		НоваяСтрока.ПроцентПлатежа = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПроцентПлатежа");
		НоваяСтрока.СуммаПлатежа   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПлатежа");
		НоваяСтрока.НомерСтроки    = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",       ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",      ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыОплаты", ТЗЭтапыОплаты);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Счет-заказ.
//
Процедура ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеПечати, Тип = "Счет")
	
	ИспользоватьРучныеСкидки         = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетЗаказ");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_СчетЗаказ";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		ЧастичнаяОплата = Ложь;
	Иначе
		ЧастичнаяОплата = Истина;
	КонецЕсли;
	
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки
		ИЛИ ИспользоватьАвтоматическиеСкидки);
	
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки ТОгда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если НЕ ВыводитьКоды Тогда
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	Если  ЕстьСкидки ТОгда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = Новый ТаблицаЗначений;
	ТаблицаЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	Если ДанныеПечати.Свойство("ДатаПлатежа") Тогда
		НовСтрока = ТаблицаЭтапыОплаты.Добавить();
		НовСтрока.ДатаПлатежа = ДанныеПечати.ДатаПлатежа;
	КонецЕсли; 
	
	ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип);
	
	СоответствиеСтавокНДС = Новый Соответствие();
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
	
	Если ЧастичнаяОплата Тогда
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата"));
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
		
		ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.Шапка.НазначениеПлатежа;
		ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");
		ОбластьИтого.Параметры.Всего = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтого);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СуммаНДС) Тогда
			
			ОбластьНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");
			ОбластьНДС.Параметры.НДС = "В т.ч. НДС:";
			ОбластьНДС.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьНДС);
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки ТОгда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок	   = 0;
		ВсегоБезСкидок = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = СтрокаТовары.Товар;
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
			Иначе
				СуммаПоСтроке = СтрокаТовары.Сумма;
			КонецЕсли;
			
			ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
			
			Если ЕстьСкидки ТОгда
				СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
				ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок = ВсегоСкидок + СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			Сумма = Сумма + СуммаПоСтроке;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
		КонецЦикла;
		
		Если  ЕстьСкидки ТОгда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
		
		Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСуммаНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(СуммаНДС);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСкидок = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ВсегоСкидок);
			ОбластьДанных.Параметры.ВсегоБезСкидок = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ВсегоБезСкидок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("СтавкаНДС", ТекСтавкаНДС.Ключ);
				НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ТаблицаТоварыНДС = ТаблицаТовары.Скопировать(НайденныеСтроки, "СуммаНДС");
					ТаблицаТоварыНДС.Свернуть(, "СуммаНДС");
					СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.Ключ, ТаблицаТоварыНДС[0].СуммаНДС);
					
					ТабличныйДокумент.Вывести(ОбластьНомера);
					
					Если ВыводитьКоды Тогда
						ТабличныйДокумент.Присоединить(ОбластьКодов);
					КонецЕсли;
					
					ТабличныйДокумент.Присоединить(ОбластьТовар);
					
					ОбластьДанных.Параметры.НДС = ЭлектронныеДокументыПереопределяемый.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ,
						ДанныеПечати.Шапка.ЦенаВключаетНДС);
					ОбластьДанных.Параметры.ВсегоНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ТаблицаТоварыНДС[0].СуммаНДС);
					ТабличныйДокумент.Присоединить(ОбластьДанных);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма + СуммаНДС);
			ТабличныйДокумент.Вывести(ОбластьИтогоСНДС)
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыОплаты;
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты"));
		Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			Область.Параметры.Заполнить(ТекЭтап);
			Область.Параметры.ТекстНДС = ЭлектронныеДокументыПереопределяемый.СформироватьТекстНДСЭтапаОплаты(
				СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ИтогоЭтапыОплаты"));
	КонецЕсли;
	
	ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки счета, заказа.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет СчетЗаказ
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип)
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПолучателе = ДанныеПечати.Шапка.СведенияОПолучателе;
	
	Если Тип = "Счет" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДатаПлатежа) Тогда
			
			НадписьСрокДействия = НСтр("ru='Счет действителен до %СрокДействия%.'");
			НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%",
				Формат(ДанныеПечати.Шапка.ДатаПлатежа, "ДЛФ=D"));
			ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.БанкКорреспондент) Тогда
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаКорреспондента;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкКорреспондент;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаКорреспондента;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
		Иначе	
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаПолучателя;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкПолучателяПредставление;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетПолучателяПредставление;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если Тип = "Счет" Тогда
		ТекстЗаголовка = НСтр("ru='Счет на оплату № %НомерДокумента% от %ДатаДокумента% г.'");
	ИначеЕсли Тип = "Заказ" Тогда
		ТекстЗаголовка = НСтр("ru='Заказ клиента № %НомерДокумента% от %ДатаДокумента% г.'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет", НСтр("ru='Поставщик:'"), НСтр("ru='Исполнитель:'"));
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет", НСтр("ru='Покупатель:'"), НСтр("ru='Заказчик:'"));
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПолучателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
		ОбластьМакета.Параметры.НазначениеПлатежа = ДанныеПечати.Шапка.НазначениеПлатежа;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("АдресДоставки");
		ОбластьМакета.Параметры.АдресДоставки = ДанныеПечати.Шапка.АдресДоставки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала счета, заказа.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  Макет - Макет СчетЗаказ
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип)
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьМакета.Параметры.ФИОРуководителя = ДанныеПечати.Шапка.Руководитель;
		ОбластьМакета.Параметры.ФИОБухгалтера   = ДанныеПечати.Шапка.Бухгалтер;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЗАКАЗОМ ПОСТАВЩИКУ

Функция ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер",                    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",                     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",                 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "АдресДоставки"));

	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("НаименованиеНоменклатурыПоставщика");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			или СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			НоваяСтрока.Код = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
			НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			ИДТовара = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
			НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Артикул");
		КонецЕсли;
		Упаковка = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения");
		БазоваяЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоУпаковок");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		
        ТоварыСумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
        Если Не ЗначениеЗаполнено(ТоварыСумма) Тогда
            ТоварыСумма = 0;
		КонецЕсли;
		НоваяСтрока.Сумма = ТоварыСумма;
		
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Заказ поставщику".
//
Процедура ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	ИспользоватьРучныеСкидки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьРучныеСкидкиВЗакупках");
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ЗаказПоставщику");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ЗаказПоставщику";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	КолонкаКодов  = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки);
	
	Если ЕстьСкидки Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
	КонецЕсли;
	
	Если ЕстьСкидки ТОгда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	КонецЕсли;
	
	// Заполнить реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Заказ поставщику № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьАдресДоставки = Макет.ПолучитьОбласть("АдресДоставки");
	ОбластьАдресДоставки.Параметры.АдресДоставки = ДанныеПечати.Шапка.АдресДоставки;
	ТабличныйДокумент.Вывести(ОбластьАдресДоставки);
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		
		ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
		ТабличныйДокумент.Присоединить(ОбластьКодов);
		
	КонецЕсли;
	
	ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
	КонецЕсли;
	
	Сумма          = 0;
	СуммаНДС       = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НомерСтроки    = 0;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = СтрокаТовары.НаименованиеНоменклатурыПоставщика;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
		СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
		Иначе
			СуммаПоСтроке = СтрокаТовары.Сумма;
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
		
		ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Сумма     = Сумма + СуммаПоСтроке;
		СуммаНДС  = СуммаНДС + СтрокаТовары.СуммаНДС;
		
		Если ЕстьСкидки Тогда
			ВсегоСкидок    = ВсегоСкидок    + СуммаСкидки;
			ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	
	Если ЕстьСкидки Тогда
		
		ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
	КонецЕсли;
	
	ОбластьДанных.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	// Вывести ИтогоНДС
	Если ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьДанных.Параметры.НДС = НСтр("ru='В том числе НДС:'");
		Иначе
			ОбластьДанных.Параметры.НДС = НСтр("ru='Сумма НДС:'");
		КонецЕсли;
		ОбластьДанных.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со СЧЕТ-ФАКТУРА

Функция ПолучитьДанныеСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	
	ДанныеЗаполненияШапки.Вставить("Номер", "Счет-фактура №" + НомерДокумента +" от "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	ДатаИспрСтрокой = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");
	НомерИсправления = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления");
	
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", "Исправление №"
		+ ?(ЗначениеЗаполнено(НомерИсправления), НомерИсправления, "--") + " от "
		+ ?(ЗначениеЗаполнено(ДатаИспрСтрокой), Формат(ДатаИспрСтрокой, "ДЛФ=DD"), "--"));
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ГрузоотправительАдрес"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузополучатель"));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ГрузополучательАдрес"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", "Продавец: " + ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", "Адрес: " + ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = ДанныеЗаполненияШапки.СведенияОПоставщике.КПП;
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", "ИНН/КПП продавца: " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	Если ЗначениеЗаполнено(СведенияОГрузоотправителе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", "Грузоотправитель и его адрес: "
			+ СведенияОГрузоотправителе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузоотправителе.ФактическийАдрес), ", "
			+ СведенияОГрузоотправителе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", "Грузоотправитель и его адрес: --"); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузополучателе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", "Грузополучатель и его адрес: "
			+ СведенияОГрузополучателе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузополучателе.ФактическийАдрес), ", "
			+ СведенияОГрузополучателе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", "Грузополучатель и его адрес: --"); 
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ПоДокументу", "К платежно-расчетному документу № "
		+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлатежныйДокумент"));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя","Покупатель: " + ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", "Адрес: " + ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = ДанныеЗаполненияШапки.СведенияОПокупателе.КПП;
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", "ИНН/КПП покупателя: " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Валюта: код %1", КодВалюты);
	ДанныеЗаполненияШапки.Вставить("Валюта", ТекстВалюта);
	
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовБезНДС"));
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДС"));
	ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНал"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("СуммаБезНДС");
	ТЗ.Колонки.Добавить("Акциз");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СтранаПроисхожденияКод");
	ТЗ.Колонки.Добавить("ПредставлениеСтраны");
	ТЗ.Колонки.Добавить("ПредставлениеГТД");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаимТов");
		ОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_Тов");
		НоваяСтрока.ЕдиницаИзмеренияКод = ОКЕИ;

		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТов");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТов");
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДС");
		НоваяСтрока.Акциз = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумАкциз");
		ПредставлениеСтавкиНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВел");
		НоваяСтрока.СтавкаНДС = ?(ПредставлениеСтавкиНДС = "без НДС", ПредставлениеСтавкиНДС, ПредставлениеСтавкиНДС + " %");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНал");
		СтранаПроисхожденияКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодПроисх");
		НоваяСтрока.СтранаПроисхожденияКод = СтранаПроисхожденияКод;

		НоваяСтрока.ПредставлениеГТД = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерТД");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Счет-фактура".
//
Процедура ЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетФактура1137");
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	// Выводим заголовок таблицы.
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеДанныеТаблицы");
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ДанныеСтроки = СтруктураДанныеСтроки(1);
	
	// Создаем массив для проверки вывода.
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа.
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтого   = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
		Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		Иначе
			Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
			КонецЕсли;
			Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовары.СтранаПроисхожденияКод = "643" Тогда
			СтрокаТовары.СтранаПроисхожденияКод = "--";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭЦП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭЦП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭЦП.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭЦП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьПодвала);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с КОРРЕКТИРОВОЧНЫЙ СЧЕТ-ФАКТУРА

Функция ПолучитьДанныеКорректировочногоСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	ДанныеЗаполненияШапки.Вставить("Номер", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ДанныеЗаполненияШапки.Вставить("Дата", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления");
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");
	ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправленияСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("НомерИсправленияСчетаФактуры", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправленияСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("ДатаИсправленияСчетаФактуры", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", "Продавец: " + ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", "Адрес: " + ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
		
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = ДанныеЗаполненияШапки.СведенияОПоставщике.КПП;
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", "ИНН/КПП продавца: " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя","Покупатель: " + ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", "Адрес: " + ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
		
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = ДанныеЗаполненияШапки.СведенияОПокупателе.КПП;
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", "ИНН/КПП покупателя: " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Валюта: код %1", КодВалюты);
	ДанныеЗаполненияШапки.Вставить("Валюта", ТекстВалюта);
	
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаБезНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СтТовБезНДСВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДСУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаСНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНалВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаБезНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СтТовБезНДСВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДСУм"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаСНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНалВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияДо");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКодДо");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("КоличествоДо");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("ЦенаДо");
	ТЗ.Колонки.Добавить("СуммаБезНДС");
	ТЗ.Колонки.Добавить("СуммаБезНДСДо");
	ТЗ.Колонки.Добавить("Акциз");
	ТЗ.Колонки.Добавить("АкцизДо");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДСДо");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаНДСДо");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СуммаСНДСДо");
	ТЗ.Колонки.Добавить("РазницаБезНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаБезНДСУменьшение");
	ТЗ.Колонки.Добавить("РазницаНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаНДСУменьшение");
	ТЗ.Колонки.Добавить("РазницаСНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаСНДСУменьшение");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаимТов");
		
		ОКЕИДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_ТовДо");
		ОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_ТовПосле");
		НоваяСтрока.ЕдиницаИзмеренияКод = ОКЕИ;
		
		НоваяСтрока.КоличествоДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТовДо");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТовПосле");
		НоваяСтрока.ЦенаДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТовДо");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТовПосле");
		НоваяСтрока.СуммаБезНДСДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСДоИзм");
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСПослеИзм");
		НоваяСтрока.АкцизДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "АкцизДо");
		НоваяСтрока.Акциз = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "АкцизПосле");
		ПредставлениеСтавкиНДСДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВелДо");
		НоваяСтрока.СтавкаНДСДо = ?(ПредставлениеСтавкиНДСДо = "без НДС", ПредставлениеСтавкиНДСДо, ПредставлениеСтавкиНДСДо + " %");
		ПредставлениеСтавкиНДСПосле = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВелПосле");
		НоваяСтрока.СтавкаНДС = ?(ПредставлениеСтавкиНДСПосле = "без НДС",
			ПредставлениеСтавкиНДСПосле,ПредставлениеСтавкиНДСПосле + " %");
		НоваяСтрока.СуммаНДСДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСДо");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСПосле");
		НоваяСтрока.СуммаСНДСДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалДоИзм");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалПослеИзм");
		НоваяСтрока.РазницаБезНДСУвеличение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"СтТовБезНДСУвел");
		НоваяСтрока.РазницаНДСУвеличение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСУвел");
		НоваяСтрока.РазницаСНДСУвеличение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалУвел");
		НоваяСтрока.РазницаБезНДСУменьшение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСУм");
		НоваяСтрока.РазницаНДСУменьшение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСУм");
		НоваяСтрока.РазницаСНДСУменьшение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалУм");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Корректировочный Счет-фактура".
//
Процедура ЗаполнитьТабличныйДокументКорректировочныйСчетФактура_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетФактураКорректировочный1137");
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеДанныеТаблицы");
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ДанныеСтроки = СтруктураДанныеСтроки(1);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтого   = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
		Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		Иначе
			Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
			КонецЕсли;
			Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭЦП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭЦП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭЦП.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭЦП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьПодвала);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с КОРРЕКТИРОВОЧНЫМ ДОКУМЕНТОМ

Функция ПолучитьДанныеКорректировочногоДокументаДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ПолноеНаименование"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ИНН"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО", 		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ЮридическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ФактическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.НомерСчета"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Наименование"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Код"));
	СведенияОГрузоотправителе.Вставить("КоррСчет",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.КоррСчет"));
	СведенияОГрузоотправителе.Вставить("Телефоны",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ПолноеНаименование"));
	СведенияОГрузополучателе.Вставить("ИНН", 			   	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ИНН"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО", 		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ЮридическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ФактическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("НомерСчета",		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.НомерСчета"));
	СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Наименование"));
	СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Код"));
	СведенияОГрузополучателе.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.КоррСчет"));
	СведенияОГрузополучателе.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПодразделения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.СтруктурноеПодразделение"));
	ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО", 		 ДанныеЗаполненияШапки.СведенияОПоставщике.КодПоОКПО);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",	"");
	ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",			ДанныеЗаполненияШапки.СведенияОПокупателе.КодПоОКПО);

	ДанныеЗаполненияШапки.Вставить("ОснованиеНомер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ОснованиеДата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеОснования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеОснования"));
	
	ДанныеЗаполненияШапки.Вставить("НомерДокумента",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаДокумента",		Формат(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"), "ДЛФ=Д"));
	ДанныеЗаполненияШапки.Вставить("НомерОснования",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерДокументаОснования"));
	ДанныеЗаполненияШапки.Вставить("ДатаОснования",		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДокументаОснования"));
	
	ДанныеЗаполненияШапки.Вставить("Курс", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АдресДоставки"));
	
	ДанныеЗаполненияПодвала = Новый Структура;
	
	ДанныеЗаполненияПодвала.Вставить("КоличествоЛистовВПриложении", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЛистовВПрилПрописью"));
	ДанныеЗаполненияПодвала.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЗаписейПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ВсегоМестПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоМестПрописью"));
	ДанныеЗаполненияПодвала.Вставить("МассаГрузаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "МассаГрузаПрописью"));
	ДанныеЗаполненияПодвала.Вставить("СуммаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВсегоПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ДатаОтпуска", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаОтпуска"));
	
	ДанныеЗаполненияПодвала.Вставить("ДолжностьРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьКладовщика"));
	ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ФИОГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ФИОКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОКладовщика"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("ЦенаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДСДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДСДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаНеттоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаНетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаБрутто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоМест", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоВОдномМесте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ТоварКод");
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.КоличествоДоКорректировки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоДоКорректировки");
		НоваяСтрока.КоличествоВОдномМесте = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоВОдномМесте");
		
		НоваяСтрока.КоличествоМест = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Мест");
		НоваяСтрока.МассаБрутто = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаБрутто");
		
		НоваяСтрока.МассаНеттоДоКорректировки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаНеттоДоКорректировки");
		НоваяСтрока.МассаНетто = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаНетто");
		
		НоваяСтрока.ВидУпаковки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Упаковка");
		
		НоваяСтрока.ЦенаДоКорректировки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаДоКорректировки");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.СуммаДоКорректировки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаДоКорректировки");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДСДоКорректировки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДСДоКорректировки");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСНДСДоКорректировки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДСДоКорректировки");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.СуммаНДС), НоваяСтрока.СуммаНДС, 0);
		Если Не ЗначениеЗаполнено (НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = "без НДС";
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Подвал", ДанныеЗаполненияПодвала);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Корректировочный Счет-фактура".
//
Процедура ЗаполнитьТабличныйДокументКорректировочныйДокумент_ЭД(ТабличныйДокумент, ДанныеПечати, ДанныеПокупателя)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(?(ДанныеПокупателя.Количество() > 0, "ЭД_СоглашениеОбИзмененииСтоимостиПолучатель", "ЭД_СоглашениеОбИзмененииСтоимостиОтправитель"));
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_СогласованиеCторон";
	
	ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);
	
	НомерСтраницы = 1;
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб|ОсновныеДанныеТаблицы");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице|ОсновныеДанныеТаблицы");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего|ОсновныеДанныеТаблицы");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
	КонецЕсли;
	
	// Выводим табличную часть документа
	ТЧТовары = ДанныеПечати.Товары;
	
	КоличествоСтрок = ТЧТовары.Количество();
	
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
		
		ДанныеСтроки.КоэффициентПересчета  = ?(ЗначениеЗаполнено(СтрокаТовары.КоличествоВОдномМесте), СтрокаТовары.КоличествоВОдномМесте, 1);
		
		ДанныеСтроки.КоличествоДоКорректировки  = СтрокаТовары.КоличествоДоКорректировки;
		ДанныеСтроки.Количество  = СтрокаТовары.Количество;
		ДанныеСтроки.МассаНеттоДоКорректировки = СтрокаТовары.МассаНеттоДоКорректировки;
		ДанныеСтроки.МассаНетто = СтрокаТовары.МассаНетто;
		
		ДанныеСтроки.СуммаДоКорректировки     = СтрокаТовары.СуммаДоКорректировки;
		ДанныеСтроки.Сумма                    = СтрокаТовары.Сумма;
		ДанныеСтроки.СуммаНДСДоКорректировки  = СтрокаТовары.СуммаНДСДоКорректировки;
		ДанныеСтроки.СуммаНДС                 = СтрокаТовары.СуммаНДС;
		ДанныеСтроки.СуммаСНДСДоКорректировки = СтрокаТовары.СуммаСНДСДоКорректировки;
		ДанныеСтроки.СуммаСНДС                = СтрокаТовары.СуммаСНДС;
		
		ДанныеСтроки.ЦенаДоКорректировки = СтрокаТовары.ЦенаДоКорректировки;
		ДанныеСтроки.Цена = СтрокаТовары.Цена;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
		
		
		Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭЦП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭЦП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭЦП.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭЦП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати.Подвал, Макет, ТабличныйДокумент, ДанныеПокупателя);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ПРАЙС-ЛИСТ

Функция ПолучитьДанныеПрайсЛистаДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаФормирования"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Цена");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул          = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Код              = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.Товар            = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Упаковка.Наименование");
		НоваяСтрока.Цена             = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Количество       = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПрайсЛист_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ПрайсЛист");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвал    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ = Д");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
		СведенияОПоставщике.ПолноеНаименование,
		СведенияОПоставщике.Представление);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТаблицаТовары = ДанныеПечати.Товары;
	НомерСтроки = 1;
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭД прочитанными по схеме 2.06

Функция СтруктураДанныхКонтрагента(СтрокаОбъекта, ДеревоРазбора, ИмяРеквизита)
	
	Структура = Новый Структура;
	Наименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизита + ".Наименование");
	ПолнНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизита + ".ПолноеНаименование");
	Структура.Вставить("Представление", ?(ЗначениеЗаполнено(Наименование), Наименование, ПолнНаименование));
	Структура.Вставить("ПолноеНаименование", ?(ЗначениеЗаполнено(ПолнНаименование), ПолнНаименование, Наименование));
	Структура.Вставить("ИНН", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизита + ".ИНН"));
	Структура.Вставить("КПП", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизита + ".КПП"));
	Структура.Вставить("ЮридическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизита + ".ЮридическийАдрес_Представление"));
	Структура.Вставить("ФактическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизита + ".ФактическийАдрес_Представление"));
		
	Возврат Структура;
	
КонецФункции

Функция ТаблицаТоваров(СтрокаОбъекта, ДеревоРазбора, ИмяТаблицы)
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("НДСУчтеноВСумме");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", ИмяТаблицы));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		НоваяСтрока.ТоварКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.НДСУчтеноВСумме = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НДСУчтеноВСумме");
		НоваяСтрока.ВидУпаковки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВидУпаковки");
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НДСВСумме = ?(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НДСУчтеноВСумме") = Истина, Истина, Ложь);
		
		НоваяСтрока.Сумма = Сумма - ?(НДСВСумме, СуммаНДС, 0);
		НоваяСтрока.СуммаНДС = СуммаНДС;
		НоваяСтрока.СуммаСНДС = Сумма + ?(НДСВСумме, 0, СуммаНДС);
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		
		ЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиница");
		Если ЗначениеЗаполнено(ЕИ) Тогда
			НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиница.Наименование");
			НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиница.Код");
		Иначе
			НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
			НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Код");
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТЗ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с Актом на передачу прав (2.06)

Функция ПолучитьДанныеАктаНаПередачуПравДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = СтруктураДанныхКонтрагента(СтрокаОбъекта, ДеревоРазбора, "Контрагент");
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОЛицензиате", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОЛицензиаре", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = СтруктураДанныхКонтрагента(СтрокаОбъекта, ДеревоРазбора, "Организация");
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОЛицензиаре", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОЛицензиате", СведенияООрганизации);
	КонецЕсли;
	
	ДокументыОснования = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Основание = "";
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
			Для Каждого Элемент Из ДокументыОснования Цикл
				Основание = ?(ЗначениеЗаполнено(Основание), "; ", "") + Элемент;
			КонецЦикла;
		Иначе
			Основание = ДокументыОснования;
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("Основание", Основание);
	КонецЕсли;
	
	СведенияОПлательщике = СтруктураДанныхКонтрагента(СтрокаОбъекта, ДеревоРазбора, "Плательщик");
	ДанныеЗаполненияШапки.Вставить("СведенияОПлательщике", СведенияОПлательщике);
	
	ДанныеЗаполненияШапки.Вставить("НомерДокумента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаДокумента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("УсловияПередачи", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "УсловияПередачи"));
	ДанныеЗаполненияШапки.Вставить("КодПартнера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодПартнера"));
	ОтсрочкаПлатежаДней = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОтсрочкаПлатежаДней");
	ДанныеЗаполненияШапки.Вставить("ОтсрочкаПлатежаДней", ?(ЗначениеЗаполнено(ОтсрочкаПлатежаДней), ОтсрочкаПлатежаДней, 45));
	ПроцентШтрафаЗаДеньПросрочки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПроцентШтрафаЗаДеньПросрочки");
	ДанныеЗаполненияШапки.Вставить("ПроцентШтрафаЗаДеньПросрочки", ?(ЗначениеЗаполнено(ПроцентШтрафаЗаДеньПросрочки), ПроцентШтрафаЗаДеньПросрочки, 0.1));
	
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаФормирования"));
	
	СуммаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаДокумента");
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код");
	ДанныеЗаполненияШапки.Вставить("СуммаПрописью", ЭлектронныеДокументыПереопределяемый.СуммаПрописью(СуммаДокумента, КодВалюты));
	
	Товары = ТаблицаТоваров(СтрокаОбъекта, ДеревоРазбора, "СтрокаТЧ");
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАктНаПередачуПрав(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	Шапка = ДанныеПечати.Шапка;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_АктНаПередачуПрав");
	
	// Выводим шапку акта
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставлениеЛицензиара = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		Шапка.СведенияОЛицензиаре,
		"ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеЛицензиата = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		Шапка.СведенияОЛицензиате,
		"ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		Шапка.СведенияОПлательщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
		
	Если ЗначениеЗаполнено(Шапка.УсловияПередачи) Тогда
		ОбластьМакета.Области.ОбластьУсловияПередачи.Текст = Шапка.УсловияПередачи;
	Иначе
		ОбластьМакета.Параметры.ЛицензиарНаименование = ?(ЗначениеЗаполнено(Шапка.СведенияОЛицензиаре.Представление),
			Шапка.СведенияОЛицензиаре.Представление, Шапка.СведенияОЛицензиаре.ПолноеНаименование);
		ОбластьМакета.Параметры.ЛицензиатНаименование = ?(ЗначениеЗаполнено(Шапка.СведенияОЛицензиате.Представление),
			Шапка.СведенияОЛицензиате.Представление, Шапка.СведенияОЛицензиате.ПолноеНаименование);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	НомерСтраницы = 1;
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб|ОсновныеДанныеТаблицы");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка|ОсновныеДанныеТаблицы");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице|ОсновныеДанныеТаблицы");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего|ОсновныеДанныеТаблицы");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицы");
		ОбластьМакетаДД           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭЦП = Макет.ПолучитьОбласть("ЗаголовокТаб|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭЦП           = Макет.ПолучитьОбласть("Строка|ДопДанныеТаблицыБезЭЦП");
	КонецЕсли;
	
	// Выводим табличную часть документа
	ТЧТовары = ДанныеПечати.Товары;
	Если ТЧТовары.Колонки.Найти("СуммаНДС") <> Неопределено И ТЧТовары.Итог("СуммаНДС") > 0 Тогда
		ЕстьНДС = Истина;
	Иначе
		ЕстьНДС = Ложь;
	КонецЕсли;
	
	КоличествоСтрок = ТЧТовары.Количество();
	
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТовары);
		ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
		
		Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
			Иначе
				Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
				КонецЕсли;
				Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				
			КонецЕсли;
			
			Если ДанныеСтроки.Номер <> 1 И Не ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// Очистим итоги по странице.
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
			СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(ДанныеСтроки.Номер), "НомерСтр");
			Если СтрокаТаблицыДД <> Неопределено Тогда
				Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
					ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
					ОбластьМакетаДД.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
					ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
				Иначе
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДДСЭЦП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭЦП);
					КонецЕсли;
					Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДДБезЭЦП.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭЦП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаФормирования, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с каталогом файлов

Функция ПолучитьДанныеКаталогаТоваровДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОПоставщике.Вставить("ИНН", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Контрагент.ИНН"));
	СведенияОПоставщике.Вставить("КПП", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Контрагент.КПП"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаФормирования"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Артикул");
		НоваяСтрока.Код     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.Товар   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
		
		Упаковка = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения.Наименование");
		ЕдиницаИзмеренияНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.ЕдиницаИзмерения.Наименование");
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияНаименование) Тогда
			ЕдиницаИзмеренияНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.ЕдиницаИзмерения.НаименованиеПолное");
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмеренияНаименование;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_КаталогТоваров");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвал    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ=Д");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
		СведенияОПоставщике.ПолноеНаименование, СведенияОПоставщике.Представление);
	ОбластьШапка.Параметры.Заполнить(СведенияОПоставщике);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТаблицаТовары = ДанныеПечати.Товары;
	НомерСтроки = 1;
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с АКТОМ ВЫПОЛНЕННЫХ РАБОТ

Функция ПолучитьДанныеАктовВыполненныхРаботДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ТекстШапки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Заголовок"));
	ДанныеЗаполненияШапки.Вставить("ОписаниеВыполненныхРабот", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ОписаниеВыполненныхРабот"));
	ДанныеЗаполненияШапки.Вставить("Претензии", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Претензии"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("Содержание");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
		НоваяСтрока.Содержание = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Содержание");
		НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСкидки = ?(НоваяСтрока.СуммаСкидки = Неопределено, 0, НоваяСтрока.СуммаСкидки);
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	ТаблицаУслуг = ДанныеПечати.Товары;
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаУслуг, Истина);
	Если ТаблицаУслуг.Итог("СуммаНДС") > 0 Тогда
		ЕстьНДС = истина;
	Иначе	
		ЕстьНДС = Ложь;
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Акт");
	
	// Выводим шапку акта
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета  = Макет.ПолучитьОбласть("ТекстШапки");
	ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы Услуги
	СуффиксОбласти = ?(ЕстьСкидки, "СоСкидкой", "") + ?(ЕстьНДС, "СНДС", "");
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Сумма       = 0;
	СуммаНДС    = 0;
	НомерСтроки = 0;
	
	// Выводим строки таблицы Услуги
	Для каждого СтрокаУслуги из ТаблицаУслуг Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаУслуги);
		ОбластьСтроки.Параметры.ЕдиницаИзмерения = СтрокаУслуги.БазоваяЕдиницаНаименование;
		
		Если ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			ОбластьСтроки.Параметры.Товар = СтрокаУслуги.Содержание;
		Иначе
			ОбластьСтроки.Параметры.Товар = СтрокаУслуги.ТоварНаименование;
		КонецЕсли;
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаУслуги.Сумма + СтрокаУслуги.СуммаНДС;
		Иначе
			СуммаПоСтроке = СтрокаУслуги.Сумма;
		КонецЕсли;
		
		ОбластьСтроки.Параметры.Сумма = СуммаПоСтроке;
		
		Если ЕстьСкидки Тогда
			
			ОбластьСтроки.Параметры.Скидка         = СтрокаУслуги.СуммаСкидки;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ФорматСумм(СуммаПоСтроке + СтрокаУслуги.СуммаСкидки);
			
		КонецЕсли;
		
		Сумма    = Сумма    + СуммаПоСтроке;
		СуммаНДС = СуммаНДС + СтрокаУслуги.СуммаНДС;
		
		ТабличныйДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
	Если ЕстьНДС Тогда
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'В том числе НДС:'");
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Сумма НДС'");
		КонецЕсли;
	Иначе
		ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ОписаниеВыполненныхРабот;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Претензии                = ДанныеПечати.Шапка.Претензии;
	ОбластьМакета.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;
	ОбластьМакета.Параметры.ЮрАдресИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;
	ОбластьМакета.Параметры.ИННИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПоставщике.КПП) Тогда
		ОбластьМакета.Параметры.КППИсполнителя       = "КПП:  " + ДанныеПечати.Шапка.СведенияОПоставщике.КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;
	ОбластьМакета.Параметры.КорСчетИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.КорСчет;
	ОбластьМакета.Параметры.БанкИсполнителя          = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;
	ОбластьМакета.Параметры.БИКИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;
	ОбластьМакета.Параметры.ПредставлениеЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;
	ОбластьМакета.Параметры.ЮрАдресЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;
	ОбластьМакета.Параметры.ИННЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПокупателе.КПП) Тогда
		ОбластьМакета.Параметры.КППЗаказчика         = "КПП:  " + ДанныеПечати.Шапка.СведенияОПокупателе.КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.РасчетныйСчетЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;
	ОбластьМакета.Параметры.КорСчетЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.КорСчет;
	ОбластьМакета.Параметры.БанкЗаказчика            = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;
	ОбластьМакета.Параметры.БИКЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Функция ПолучитьДанныеАкта501ДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", 
								  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ЮрФизЛицо",
								  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮрФизЛицо"));
	СведенияОКонтрагенте.Вставить("КПП",
								  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН",
								  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",
								  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	ЮридическийАдрес = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"Контрагент.ЮридическийАдрес_Представление");
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес", ЮридическийАдрес);
	ФактическийАдрес = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"Контрагент.ФактическийАдрес_Представление");
	СведенияОКонтрагенте.Вставить("ФактическийАдрес", ФактическийАдрес);
	РасчетныйСчет = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																 СтрокаОбъекта,
																 "БанковскийСчетКонтрагента.НомерСчета");
	СведенияОКонтрагенте.Вставить("РасчетныйСчет", РасчетныйСчет);
	КорСчет = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
														   СтрокаОбъекта,
														   "БанковскийСчетКонтрагента.Банк.КоррСчет");
	СведенияОКонтрагенте.Вставить("КорСчет", КорСчет);
	Банк = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
														СтрокаОбъекта,
														"БанковскийСчетКонтрагента.Банк.Наименование");
	СведенияОКонтрагенте.Вставить("Банк", Банк);
	БИК = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
													   СтрокаОбъекта,
													   "БанковскийСчетКонтрагента.Банк.Код");
	СведенияОКонтрагенте.Вставить("БИК", БИК);
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	ПолноеНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	  СтрокаОбъекта,
																	  "Организация.ПолноеНаименование");
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолноеНаименование);
	СведенияООрганизации.Вставить("ИНН",
								  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",
								  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",
								  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	ЮридическийАдрес = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"Организация.ЮридическийАдрес_Представление");
	СведенияООрганизации.Вставить("ЮридическийАдрес", ЮридическийАдрес);
	ФактическийАдрес = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																	СтрокаОбъекта,
																	"Организация.ФактическийАдрес_Представление");
	СведенияООрганизации.Вставить("ФактическийАдрес", ФактическийАдрес);
	РасчетныйСчет = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																 СтрокаОбъекта,
																 "БанковскийСчетОрганизации.НомерСчета");
	СведенияООрганизации.Вставить("РасчетныйСчет", РасчетныйСчет);
	КорСчет = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
														   СтрокаОбъекта,
														   "БанковскийСчетОрганизации.Банк.КоррСчет");
	СведенияООрганизации.Вставить("КорСчет", КорСчет);
	Банк = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
														СтрокаОбъекта,
														"БанковскийСчетОрганизации.Банк.Наименование");
	СведенияООрганизации.Вставить("Банк", Банк);
	БИК = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
													   СтрокаОбъекта,
													   "БанковскийСчетОрганизации.Банк.Код");
	СведенияООрганизации.Вставить("БИК", БИК);
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер",
								   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", 
								   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("ТекстШапки",
								   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Заголовок"));
	ДанныеЗаполненияШапки.Вставить("Претензии",
								   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Претензии"));
	ДанныеЗаполненияШапки.Вставить("ЗаказчикВДопДанных",
								   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЗаказчикВДопДанных"));
		
	ТЗОписанийРабот = Новый ТаблицаЗначений;
	ТЗОписанийРабот.Колонки.Добавить("НачалоРабот");
	ТЗОписанийРабот.Колонки.Добавить("КонецРабот");
	ТЗОписанийРабот.Колонки.Добавить("Сумма");
	ТЗОписанийРабот.Колонки.Добавить("СуммаНДС");
	ТЗОписанийРабот.Колонки.Добавить("СуммаСНДС");
	ТЗОписанийРабот.Колонки.Добавить("Работы");
	
	СтрокиТЧОписанийРабот = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СписокОписаний"));
	Для Каждого СтрокаТЧОписанийРабот Из СтрокиТЧОписанийРабот Цикл
		
		НоваяСтрокаОписанийРабот = ТЗОписанийРабот.Добавить();
		ОписаниеРабот = СтрокаТЧОписанийРабот.ЗначениеРеквизита;
		
		НоваяСтрокаОписанийРабот.НачалоРабот = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																							ОписаниеРабот,
																							"НачРабот");
		НоваяСтрокаОписанийРабот.КонецРабот = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																						   ОписаниеРабот,
																						   "КонРабот");
		НоваяСтрокаОписанийРабот.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																						  ОписаниеРабот,
																						  "Сумма");
		НоваяСтрокаОписанийРабот.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																						 ОписаниеРабот,
																						 "СуммаНДС");
		НоваяСтрокаОписанийРабот.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, ОписаниеРабот, "СуммаСНДС");
		
		ТЗРабот = Новый ТаблицаЗначений;
		ТЗРабот.Колонки.Добавить("НомерСтроки");
		ТЗРабот.Колонки.Добавить("НаименованиеРабот");
		ТЗРабот.Колонки.Добавить("ЕдиницаИзмерения");
		ТЗРабот.Колонки.Добавить("Количество");
		ТЗРабот.Колонки.Добавить("Цена");
		ТЗРабот.Колонки.Добавить("Сумма");
		ТЗРабот.Колонки.Добавить("СуммаНДС");
		ТЗРабот.Колонки.Добавить("СуммаСНДС");
		ТЗРабот.Колонки.Добавить("Описание");
		
		СтрокиТЧРабот = ОписаниеРабот.Строки.НайтиСтроки(Новый Структура("Реквизит", "Работа"));
		Для Каждого СтрокаТЧРабот Из СтрокиТЧРабот Цикл
			
			НоваяСтрока = ТЗРабот.Добавить();
			НоваяСтрока.НомерСтроки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"Номер");
			НоваяСтрока.НаименованиеРабот = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"Номенклатура.Наименование");
			НоваяСтрока.Описание = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Описание");
			НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"ЕдиницаИзмеренияНаименование");
			НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Количество");
			НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Цена");
			НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Сумма");
			НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "СуммаНДС");
			НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "СуммаСНДС");
			
		КонецЦикла;
		
		НоваяСтрокаОписанийРабот.Работы = ТЗРабот;
	КонецЦикла;
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("ОписанияРабот", ТЗОписанийРабот);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАкт501(ТабличныйДокумент, ДанныеПечати, ДанныеЗаказчика)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	ТаблицаОписанийРабот = ДанныеПечати.ОписанияРабот;
	Если ТаблицаОписанийРабот.Итог("СуммаНДС") > 0 Тогда
		ЕстьНДС = Истина;
	Иначе
		ЕстьНДС = Ложь;
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Акт501");
	
	// Выводим шапку акта
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ШаблонЗаголовка = НСтр("ru='Акт № %1 от %2 г'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ДанныеПечати.Шапка.Номер,
		Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Услуги", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот|ДопДанныеТаблицы");
		ОбластьМакетаДД = Макет.ПолучитьОбласть("СтрокаРабот|ДопДанныеТаблицы");
		ОбластьЗаголовокТаблицыДДСЭЦП = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот|ДопДанныеТаблицыСЭЦП");
		ОбластьМакетаДДСЭЦП = Макет.ПолучитьОбласть("СтрокаРабот|ДопДанныеТаблицыСЭЦП");
		ОбластьЗаголовокТаблицыДДБезЭЦП = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот|ДопДанныеТаблицыБезЭЦП");
		ОбластьМакетаДДБезЭЦП = Макет.ПолучитьОбласть("СтрокаРабот|ДопДанныеТаблицыБезЭЦП");
	КонецЕсли;
	
	// Выводим заголовок таблицы Услуги
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот|ОсновныеДанныеТаблицы");
	
	НомерОписания = 0;
	Для Каждого СтрокаОписанийРабот Из ТаблицаОписанийРабот Цикл
		
		НомерОписания = НомерОписания + 1;
		ОбластьМакета.Параметры.Заполнить(СтрокаОписанийРабот);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		Иначе
			Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДСЭЦП);
			КонецЕсли;
			Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДДБезЭЦП);
			КонецЕсли;
		КонецЕсли;
		
		// Выводим строки таблицы Услуги
		ОбластьСтрокиРабот = Макет.ПолучитьОбласть("СтрокаРабот|ОсновныеДанныеТаблицы");
		Для Каждого СтрокаРаботы Из СтрокаОписанийРабот.Работы Цикл
			
			ОбластьСтрокиРабот.Параметры.НомерСтроки = СтрокаРаботы.НомерСтроки;
			
			ОбластьСтрокиРабот.Параметры.Заполнить(СтрокаРаботы);
			
			Если ЗначениеЗаполнено(СтрокаРаботы.Описание) Тогда
				ОбластьСтрокиРабот.Параметры.НаимРабот = СтрокаРаботы.Описание;
			Иначе
				ОбластьСтрокиРабот.Параметры.НаимРабот = СтрокаРаботы.НаименованиеРабот;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокиРабот);
			Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
				СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(НомерОписания) + "." + СтрокаРаботы.НомерСтроки, "НомерСтр");
				Если СтрокаТаблицыДД <> Неопределено Тогда
					Если СтруктураНаличияДопДанных.ЕстьПодписанные И СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
						ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ОбластьМакетаДД.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
					Иначе
						Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
							ОбластьМакетаДДСЭЦП.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
							ТабличныйДокумент.Присоединить(ОбластьМакетаДДСЭЦП);
						КонецЕсли;
						Если СтруктураНаличияДопДанных.ЕстьНеПодписанные Тогда
							ОбластьМакетаДДБезЭЦП.Параметры.Неподписанные = СтрокаТаблицыДД.НеПодписанныеДанные;
							ТабличныйДокумент.Присоединить(ОбластьМакетаДДБезЭЦП);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(СтрокаОписанийРабот.СуммаСНДС);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если ЕстьНДС Тогда
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Сумма НДС'");
			ОбластьМакета.Параметры.ВсегоНДС = СтрокаОписанийРабот.СуммаНДС;
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Претензии");
	Претензии = ?(ДанныеЗаказчика.Свойство("Претензии"), ДанныеЗаказчика.Претензии, Неопределено);
	ОбластьМакета.Параметры.Претензии = Претензии;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ВремТабДок = Новый ТабличныйДокумент;
	
	ОбластьМакетаИсполнитель = Макет.ПолучитьОбласть("Подписи|Исполнитель");
	ОбластьМакетаИсполнитель.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;
	ОбластьМакетаИсполнитель.Параметры.ЮрАдресИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;
	ОбластьМакетаИсполнитель.Параметры.ИННИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПоставщике.КПП) Тогда
		ОбластьМакетаИсполнитель.Параметры.КППИсполнителя       = "КПП:  " + ДанныеПечати.Шапка.СведенияОПоставщике.КПП;
	КонецЕсли;
	ОбластьМакетаИсполнитель.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;
	ОбластьМакетаИсполнитель.Параметры.КорСчетИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.КорСчет;
	ОбластьМакетаИсполнитель.Параметры.БанкИсполнителя          = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;
	ОбластьМакетаИсполнитель.Параметры.БИКИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;
	
	ВремТабДок.Вывести(ОбластьМакетаИсполнитель);
		
	Если НЕ ДанныеПечати.Шапка.ЗаказчикВДопДанных = Истина Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи|Заказчик");
		ОбластьМакета.Параметры.ПредставлениеЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;
		ОбластьМакета.Параметры.ЮрАдресЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;
		ОбластьМакета.Параметры.ИННЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПокупателе.КПП) Тогда
			ОбластьМакета.Параметры.КППЗаказчика         = "КПП:  " + ДанныеПечати.Шапка.СведенияОПокупателе.КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.РасчетныйСчетЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;
		ОбластьМакета.Параметры.КорСчетЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.КорСчет;
		ОбластьМакета.Параметры.БанкЗаказчика            = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;
		ОбластьМакета.Параметры.БИКЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;
		ВремТабДок.Присоединить(ОбластьМакета);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ВремТабДок);
		
	ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ОТЧЕТОМ О ПРОДАЖАХ КОМИССИОННОГО ТОВАРА

Функция ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКомитенте = Новый Структура;
	СведенияОКомитенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияОКомитенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияОКомитенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияОКомитенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияОКомитенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомитенте);
	КонецЕсли;
	
	СведенияОКомиссионере = Новый Структура;
	СведенияОКомиссионере.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКомиссионере.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКомиссионере.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКомиссионере.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКомиссионере.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомиссионере);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.КодОКВ"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаДокумента"));
	ДанныеЗаполненияШапки.Вставить("СуммаКомитента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаКомитента"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("СуммаВознаграждения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВознаграждения"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СуммаВознаграждения");
	ТЗ.Колонки.Добавить("СуммаПродажи");
	ТЗ.Колонки.Добавить("ЦенаПродажи");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ДополнительныеРеквизиты");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Код             = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		НоваяСтрока.Артикул         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Наименование    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Наименование");
		
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Количество");
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.ЦенаПродажи = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаПродажи");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаПродажи = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПродажи");
		НоваяСтрока.СуммаВознаграждения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"СуммаВознаграждения");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		
		СтруктураДополнительныхРеквизитов = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДополнительныеРеквизиты");
		Если ЗначениеЗаполнено(СтруктураДополнительныхРеквизитов) Тогда
			ДополнительныеРеквизиты = ""; 
			Для Каждого Элемент Из СтруктураДополнительныхРеквизитов Цикл
				ДополнительныеРеквизиты = ДополнительныеРеквизиты + Элемент.Ключ + ":";
				ЗначенияРеквизита = "";
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для Каждого ЭлементМассива ИЗ Элемент.Значение Цикл
						// Для адресов покупателя разберем строку адреса в структуру адреса ФНС
						Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
							ЭлементМассива = СобратьАдрес(ЭлементМассива);
						КонецЕсли;
						ЗначенияРеквизита = ЗначенияРеквизита + Строка(ЭлементМассива) + ", ";
					КонецЦикла;
				Иначе
					ЭлементМассива = Элемент.Значение;
					// Для адресов покупателя разберем строку адреса в структуру адреса ФНС
					Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
						ЭлементМассива = СобратьАдрес(ЭлементМассива);
					КонецЕсли;
					ЗначенияРеквизита = ЗначенияРеквизита + Строка(ЭлементМассива) + ", ";
				КонецЕсли;
				ДополнительныеРеквизиты = ДополнительныеРеквизиты + ЗначенияРеквизита;
			КонецЦикла;
			НоваяСтрока.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ отчет о продажах комиссионного товара
//
Процедура ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ОтчетПоКомиссии");
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Выводим общие реквизиты шапки.
	ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати.Шапка, "Отчет о продажах комиссионного товара", Макет,
		ТабличныйДокумент);
	
	// Выводим заголовок таблицы.
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами");
		ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	ЗаголовокТаблицы.Параметры.Валюта = ДанныеПечати.Шапка.НаименованиеВалюты;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выводим многострочную часть документа.
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	
	НомерСтроки = 0;
	Товары = ДанныеПечати.Товары;
	Для Каждого СтрокаТовары из Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьМакета.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = СтрокаТовары.Наименование;
		ОбластьМакета.Параметры.ЦенаКомитента     = СтрокаТовары.Цена;
		ОбластьМакета.Параметры.СуммаКомитента    = СтрокаТовары.Сумма;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(ДанныеПечати.Шапка, Товары, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала отчета о продажах комиссионного товара.
//
// Параметры:
//  ДанныеПечати -  Данные шапки документа
//  Товары - Данные табличной части документа
//  Макет - Макет ОтчетПоКомиссии
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(ДанныеПечати, Товары, Макет, ТабличныйДокумент)
	
	СуммаПродажи = ДанныеПечати.СуммаДокумента;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.СуммаКомитентаВсего      = ДанныеПечати.СуммаКомитента;
	ОбластьМакета.Параметры.СуммаПродажиВсего        = СуммаПродажи;
	ОбластьМакета.Параметры.СуммаВознагражденияВсего = ДанныеПечати.СуммаВознаграждения;
	ОбластьМакета.Параметры.ИтоговаяСтрока           = ДанныеПечати.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ОТЧЕТОМ О СПИСАНИИ КОМИССИОННОГО ТОВАРА

Функция ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКомитенте = Новый Структура;
	СведенияОКомитенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияОКомитенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияОКомитенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияОКомитенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияОКомитенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомитенте);
	КонецЕсли;
	
	СведенияОКомиссионере = Новый Структура;
	СведенияОКомиссионере.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКомиссионере.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКомиссионере.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКомиссионере.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКомиссионере.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомиссионере);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогоПоДокументу"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Код                          = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		НоваяСтрока.Артикул                      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Наименование                 = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Наименование");
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Количество                   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена                         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма                        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ отчет о списании комиссионного товара
//
Процедура ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ОтчетПоКомиссииОСписании");
	
	Заголовок = "Отчет о списании комиссионного товара";
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Выводим общие реквизиты шапки
	ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати.Шапка, Заголовок, Макет, ТабличныйДокумент);
	
	// Выводим заголовок таблицы
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами");
		ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	ЗаголовокТаблицы.Параметры.Валюта = ДанныеПечати.Шапка.НаименованиеВалюты;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Для каждого СтрокаТовары из ДанныеПечати.Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьМакета.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = СтрокаТовары.Наименование;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(ДанныеПечати.Шапка, ДанныеПечати.Товары, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки отчета по комиссии
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет отчета
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати, Заголовок, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОКомитенте = ДанныеПечати.СведенияОПоставщике;
	СведенияОКомиссионере = ДанныеПечати.СведенияОПокупателе;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТекстЗаголовка = НСтр("ru='" + Заголовок + " № %1 от %2 г.'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ДанныеПечати.Номер,
		Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'"));

	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ОбластьМакета.Параметры.ПредставлениеКомитента = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		СведенияОКомитенте, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеКомиссионера = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		СведенияОКомиссионере, "ПолноеНаименование,");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала отчета по комиссии о списании.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ВыборкаПоДокументам - ВыборкаИзРезультатаЗапроса - Данные табличной части документа
//  Макет - Макет ОтчетКомитенту
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(ДанныеПечати, Товары, Макет, ТабличныйДокумент)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	СуммаВсего = ДанныеПечати.СуммаДокумента;
	
	ОбластьМакета.Параметры.СуммаВсего = СуммаВсего;
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с печатными формами

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//  Структура - Структура хранения итоговых сумм
//
Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНДСНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоСуммаНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	
	Возврат Структура;
	
КонецФункции

// Функция формирования структуры хранения данных строки.
//
// Параметры:
//  КоэффициентПересчета - Число - Коэффициент пересчета в валюту регл. учета
//
// Возвращаемое значение:
//  Структура - Структура данных строки товаров
//
Функция СтруктураДанныеСтроки(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("КоличествоДоКорректировки", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("ЦенаДоКорректировки", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("СуммаДоКорректировки", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("СуммаНДСДоКорректировки", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаСНДСДоКорректировки", 0);
	Структура.Вставить("СуммаСНДС", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНеттоДоКорректировки", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице    = 0;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
	
КонецПроцедуры

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  ДанныеСтроки - Структура - Структура данных строки товаров
//
Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице    = ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоСуммаНДС    = ИтоговыеСуммы.ИтогоСуммаНДС + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто + ДанныеСтроки.МассаНетто;
	
	ИтоговыеСуммы.ИтогоСуммаДоКорректировки     = ИтоговыеСуммы.ИтогоСуммаДоКорректировки + ДанныеСтроки.СуммаДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки  = ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки + ДанныеСтроки.СуммаНДСДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки = ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки + ДанныеСтроки.СуммаСНДСДоКорректировки;
	
КонецПроцедуры

// Функция форматирования сумм
//
// Параметры:
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "")
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" + ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
		+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

// Функция приводит к требуемому формату сумму НДС, если она имеет числовое представление.
//
// Параметры:
// СуммаНДС - строка, сумма НДС (без НДС, -, число).
//
// Возвращаемое значение:
// ВозвращаемаяСумма - если входящий параметр - представление числа, то возвращаемое значение - число.
//
Функция СуммаНДССФПривестиКТребуемомуФормату(СуммаНДС)
	
	Если Найти(СуммаНДС, ".") > 0 ИЛИ Найти(СуммаНДС, ",") > 0 ИЛИ Найти(СуммаНДС, "-") > 0 Тогда
		ВозвращаемаяСумма = Число(СуммаНДС);
	Иначе
		ВозвращаемаяСумма = СуммаНДС;
	КонецЕсли;
	
	Возврат ВозвращаемаяСумма;
	
КонецФункции

// Проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета)
	
	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка к просмотру служебного ЭД

Функция ПолучитьДанныеУчастникаОбменаЭД(УчастникОбмена)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если УчастникОбмена.Свойства().Получить("ОтпрЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ОтпрЮЛ.НаимОрг + ", " + УчастникОбмена.ОтпрЮЛ.ИННЮЛ + "/"
			+ УчастникОбмена.ОтпрЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ПолЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ПолЮЛ.НаимОрг + ", " + УчастникОбмена.ПолЮЛ.ИННЮЛ + "/"
			+ УчастникОбмена.ПолЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ОтпрИП") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = СокрЛП(УчастникОбмена.ОтпрИП.ФИО.Фамилия + " " + УчастникОбмена.ОтпрИП.ФИО.Имя + " "
			+ УчастникОбмена.ОтпрИП.ФИО.Отчество) + ", " + УчастникОбмена.ОтпрИП.ИННФЛ;
		ИначеЕсли УчастникОбмена.Свойства().Получить("ЮЛ") <> Неопределено И УчастникОбмена.ЮЛ <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ЮЛ.НаимОрг + ", " + УчастникОбмена.ЮЛ.ИННЮЛ + "/" + УчастникОбмена.ЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ИП") <> Неопределено И УчастникОбмена.ИП <> Неопределено Тогда
		
		ВозвращаемоеЗначение = СокрЛП(УчастникОбмена.ИП.ФИО.Фамилия + " " + УчастникОбмена.ИП.ФИО.Имя + " "
			+ УчастникОбмена.ИП.ФИО.Отчество) + ", " + УчастникОбмена.ИП.ИННФЛ;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ОперЭДО") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ОперЭДО.НаимОрг + ", " + УчастникОбмена.ОперЭДО.ИННЮЛ;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с подтверждением

// ПДПЭСФ, ПДОИПЭСФ
Процедура ПрочитатьПодтверждениеДатыПолученияXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                 ЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.ОтпрДок.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",               ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ПолДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.ПолДок.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",             ЭД.Документ.СведПодтв.ДатаОтпр);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",            ЭД.Документ.СведПодтв.ВремяОтпр);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",                 ЭД.Документ.КНД);
	Если ЭД.Документ.КНД = "1115112" Тогда
		ПараметрЗаголовка = "получения";
		ОтправленПолучен = "получен";
	Иначе
		ПараметрЗаголовка = "отправки";
		ОтправленПолучен = "отправлен";
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	
КонецПроцедуры

// ПДОЭСФ
Процедура ПрочитатьПодтверждениеДатыОтправкиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                 ЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвОтпрДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.СвОтпрДок.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",               ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвПолДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.СвПолДок.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",             ЭД.Документ.СведПодтв.ДатаОтпр);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",            ЭД.Документ.СведПодтв.ВремяОтпр);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",                 ЭД.Документ.КНД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",        "отправки");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",        "отправлен");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	
КонецПроцедуры

// ПДО
Процедура ПрочитатьПодтверждениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",      ЭД.Документ.СведПодтв.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",   ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвОтпр));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",    ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ПолДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",  ЭД.Документ.СведПодтв.ДатаДок);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки", ЭД.Документ.СведПодтв.ВремяДок);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",      ЭД.Документ.КНД);
	Если ЭД.Документ.КНД = "1167002" Тогда
		ПараметрЗаголовка = "получения";
		ОтправленПолучен = "получен";
	Иначе
		ПараметрЗаголовка = "отправки";
		ОтправленПолучен = "отправлен";
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	
КонецПроцедуры

// Процедура заполняет табличный документ Подтверждение (ПДО, ПДП, ПДОИП).
//
Процедура ЗаполнитьТабличныйДокументПодтверждение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Подтверждение";
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Подтверждение");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Функция ПолучитьДанныеПодтвержденияДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("ОператорЭДО", "Оператор электронного документооборота "
		+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОператорЭДО"));
	
	ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	
	ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаОтправки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОтправки"));
	ДанныеЗаполненияШапки.Вставить("ВремяОтправки",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ВремяОтправки"));
	
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	ДанныеЗаполненияШапки.Вставить("ПараметрЗаголовка", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПараметрЗаголовка"));
	ДанныеЗаполненияШапки.Вставить("КНДФормы", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"КНДФормы"));
	ДанныеЗаполненияШапки.Вставить("Отправлен_Получен", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Отправлен_Получен"));
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр извещений

// Процедура заполняет табличный документ Извещение.
//
Процедура ЗаполнитьТабличныйДокументИзвещение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Извещение";
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Извещение");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Извещение о получении электронного документа'");
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ПрочитатьИзвещениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                ЭД.Документ.СвИзвПолуч.СведПолФайл.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",             ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя",
		?(ЭД.Документ.ОтпрДок.ОперЭДО <> Неопределено, ЭД.Документ.ОтпрДок.ОперЭДО.ИдОперЭДО,
		ЭД.Документ.ОтпрДок.ИдУчастЭДО));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя", ЭД.Документ.УчастЭДО.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",           ЭД.Документ.СвИзвПолуч.ДатаПол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",          ЭД.Документ.СвИзвПолуч.ВремяПол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",       "");
	
КонецПроцедуры

Функция ПолучитьДанныеИзвещенияДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	
	ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));
	ДанныеЗаполненияШапки.Вставить("ВремяПолучения",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));
	
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование извещений

Процедура ДозаполнитьСтруктуруТипДокументДляИзвещенияОПолучении(СтруктураДокумента)
	
	// Структура участника ЭДО
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИдУчастникаЭДО");
	СтруктураДанных.Вставить("УчастникЭДО");
	СтруктураДокумента.Вставить("ОтправительЭД", СтруктураДанных);
	
	// Структура извещения
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаПолучения");
	СтруктураДанных.Вставить("ВремяПолучения");
	СтруктураДанных.Вставить("ИмяПолученногоФайла");
	
	ТЗ_ЭЦП = Новый ТаблицаЗначений;
	ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
	
	СтруктураДанных.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
	
	ДанныеПолученногоЭД = Новый Структура;
	ДанныеПолученногоЭД.Вставить("НаимДокумента");
	ДанныеПолученногоЭД.Вставить("НомерДокумента");
	ДанныеПолученногоЭД.Вставить("ДатаДокумента");
	
	СтруктураДанных.Вставить("ДанныеПолученногоДокумента", ДанныеПолученногоЭД);
	
	СтруктураДокумента.Вставить("ДанныеИзвещения", СтруктураДанных);
	
	// Структура получателя
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИдУчастникаЭДО");
	СтруктураДанных.Вставить("УчастникЭДО");
	
	СтруктураДокумента.Вставить("ПолучательЭД", СтруктураДанных);
	
	// Структура подписанта
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Должность");
	СтруктураДанных.Вставить("ФИО", СоздатьСтруктуруТипФИО());
	
	СтруктураДокумента.Вставить("Подписант", СтруктураДанных);
	
КонецПроцедуры

Процедура СформироватьДанныеПоУчастникуЭДО(УчастникЭДО, СтруктураПараметров, ВидУчастникаЭДО, ТекстОшибки, ПространствоИмен, ВерсияФормата)
	
	ДанныеУчастникаЭДО = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ВидУчастникаЭДО, ДанныеУчастникаЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИдУчастЭДО", СтруктураПараметров.ИдУчастникаЭДО, Истина, ТекстОшибки);
	
	// Заполнение реквизитов
	Если ВидУчастникаЭДО = "ОператорЭДО" Тогда
		РеквизитыОператора = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ОперЭДО"), ВерсияФормата);
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "НаимОрг", ДанныеУчастникаЭДО.Наименование, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "ИННЮЛ", ДанныеУчастникаЭДО.ИНН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "ИдОперЭДО", ДанныеУчастникаЭДО.ИдентификаторОператора, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникЭДО, "ОперЭДО", РеквизитыОператора, Истина, ТекстОшибки);
	Иначе
		ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеУчастникаЭДО);
		ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеУчастникаЭДО);
		
		ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
		ПолноеНаименование = "";
		ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование);
		
		Если НЕ ЗначениеЗаполнено(ПолноеНаименование) Тогда
			ПолноеНаименование = ?(ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование), ДанныеЮрФизЛица.ПолноеНаименование,
				ДанныеЮрФизЛица.Представление);
		КонецЕсли;
		
		РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФЛТип", "ЮЛТип");
		РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, РеквизитыКонтрагентаИмя), ВерсияФормата);
		
		Если ЭтоФизЛицо Тогда
			РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", ДанныеЮрФизЛица.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", ДанныеЮрФизЛица.Имя, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", ДанныеЮрФизЛица.Отчество, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", ПолноеНаименование, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", ДанныеЮрФизЛица.КПП, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭЦППолученногоФайла(СсылкаНаОбъект, ТаблицаЗначений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Подпись
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтрока = ТаблицаЗначений.Добавить();
		НовСтрока.ЭЦП = Base64Строка(Выборка.Подпись.Получить());
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта)
	
	// Возьмем первый действующий сертификат для соответствующего вида ЭД
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыЭЦПВидыДокументов.Ссылка,
	|	СертификатыЭЦПВидыДокументов.Ссылка.ДолжностьПоСертификату КАК Должность,
	|	СертификатыЭЦПВидыДокументов.Ссылка.ФайлСертификата КАК Сертификат
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|ГДЕ
	|	СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидЭД
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация";
	Запрос.УстановитьПараметр("ВидЭД", СтруктураЭД.ВидЭД);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Сертификат = Новый СертификатКриптографии(Выборка.Сертификат.Получить());
		КомуВыдан = "";
		Если Сертификат.Субъект.Свойство("CN", КомуВыдан) Тогда // ФИО возьмем из сертификата
			Фамилия = "";
			Имя = "";
			Отчество = "";
			СокрФИО = ЭлектронныеДокументы.ФамилияИнициалыФизЛица(КомуВыдан, Фамилия, Имя, Отчество); // разложим на Ф, И, О
			СтруктураПараметровПодписанта.ФИО.Вставить("Фамилия",  Фамилия);
			СтруктураПараметровПодписанта.ФИО.Вставить("Имя",      Имя);
			СтруктураПараметровПодписанта.ФИО.Вставить("Отчество", Отчество);
			
			Должность = "---";
			ЭлектронныеДокументыПереопределяемый.ДолжностьПодписанта(КомуВыдан, Организация, Должность);
			СтруктураПараметровПодписанта.Вставить("Должность", Должность);
		КонецЕсли;
	КонецЦикла;
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта);
	
КонецПроцедуры

Функция ЗаполнитьФайлИзвещенияОПолучении(СтруктураПараметров)
	
	ТекстОшибки = "";
	ПространствоИмен = "DP_IZVPOL";
	ПутьКОписанию = "{" + ПространствоИмен + "}.Файл";
	
	Попытка
		ЭД = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		// Общая информация
		ЗаполнитьСвойствоXDTO(ЭД, "ИдФайл", СтруктураПараметров.ИдФайла, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "ВерсПрог", СтруктураПараметров.ВерсияПрограммы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "ВерсФорм", СтруктураПараметров.ВерсияФормата, Истина, ТекстОшибки);
		
		ДокументЭО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "КНД", СтруктураПараметров.Документ.КодКНД, Истина, ТекстОшибки);
		
		// Отправитель извещения
		Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.УчастЭДО");
		СформироватьДанныеПоУчастникуЭДО(Отправитель, СтруктураПараметров.Документ.ОтправительЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "УчастЭДО", Отправитель, Истина, ТекстОшибки);
		
		// Получатель извещения
		Получатель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.ОтпрДок");
		Если СтруктураПараметров.Документ.ПолучательЭД.Свойство("ОператорЭДО") Тогда
			ТипПолучателя = "ОператорЭДО";
		Иначе
			ТипПолучателя = "УчастникЭДО";
		КонецЕсли;
		
		СформироватьДанныеПоУчастникуЭДО(Получатель, СтруктураПараметров.Документ.ПолучательЭД, ТипПолучателя, ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОтпрДок", Получатель, Истина, ТекстОшибки);
		
		// Сведения извещения
		ИзвещениеЭД = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.СвИзвПолуч");
		ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "ДатаПол",  СтруктураПараметров.Документ.ДанныеИзвещения.ДатаПолучения, Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "ВремяПол", СтруктураПараметров.Документ.ДанныеИзвещения.ВремяПолучения, Истина,
			ТекстОшибки);
		
		// Данные о полученном файле
		ПолученныйЭД = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "СведПолФайл"));
		ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяПостФайла", СтруктураПараметров.Документ.ДанныеИзвещения.ИмяПолученногоФайла,
			Истина, ТекстОшибки);
		
		// ЭЦП полученного файла в кодировке Base64
		ТЗ_ЭЦП = СтруктураПараметров.Документ.ДанныеИзвещения.ПолученныеЭЦП;
		Если ТЗ_ЭЦП.Количество() > 0 Тогда
			Для Каждого ТекСтроки Из ТЗ_ЭЦП Цикл
				ПолученныйЭД.ЭЦППолФайл.Добавить(ТекСтроки.ЭЦП);
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "СведПолФайл", ПолученныйЭД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "СвИзвПолуч", ИзвещениеЭД, Истина, ТекстОшибки);
		
		// Подписант
		Подписант = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "Подписант"));
		ЗаполнитьСвойствоXDTO(Подписант, "Должность", СтруктураПараметров.Документ.Подписант.Должность, Истина, ТекстОшибки);
		// Его ФИО
		ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", СтруктураПараметров.Документ.Подписант.ФИО.Фамилия, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", СтруктураПараметров.Документ.Подписант.ФИО.Имя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Отчество", СтруктураПараметров.Документ.Подписант.ФИО.Отчество, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "Документ", ДокументЭО, Истина, ТекстОшибки);
		
		ЭД.Проверить();
		ФайлИзвещения = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ВыгрузитьЭДвФайл(ЭД, ФайлИзвещения, Ложь, "windows-1251");
		УдалитьПространствоИмен(ФайлИзвещения, ПространствоИмен);
		
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ФайлИзвещения);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПодготовитьДанныеПоИзвещению(СсылкаНаОбъект, СтруктураЭД)
	
	СтруктураПараметров = СоздатьСтруктуруТипФайл(СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("ИдФайла", СтруктураЭД.ИдФайла);
	СтруктураПараметров.Вставить("ВерсияПрограммы", НСтр("ru = '1С:Предприятие 8'"));
	СтруктураПараметров.Вставить("ВерсияФормата", "1.02");
	
	// Документ
	СтруктураПараметров.Документ.Вставить("КодКНД", "1115110");
	СтруктураПараметров.Документ.ОтправительЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДОтправителя);
	СтруктураПараметров.Документ.ОтправительЭД.Вставить("УчастникЭДО", СтруктураЭД.Отправитель);
	СтруктураПараметров.Документ.ПолучательЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДПолучателя);
	Если СтруктураЭД.Свойство("ОператорЭДО") Тогда
		Если Сред(СтруктураЭД.ОператорЭДО.ИНН, 6, 2) = "16" Тогда
			СтруктураЭД.ОператорЭДО.ИНН = Лев(СтруктураЭД.ОператорЭДО.ИНН, 5) + "61" + Сред(СтруктураЭД.ОператорЭДО.ИНН, 8);
		КонецЕсли;
		СтруктураПараметров.Документ.ПолучательЭД.Вставить("ОператорЭДО", СтруктураЭД.ОператорЭДО);
	Иначе
		СтруктураПараметров.Документ.ПолучательЭД.Вставить("УчастникЭДО", СтруктураЭД.Получатель);
	КонецЕсли;
	
	// Данные извещения по полученному файлу
	СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ДатаПолучения", ВернутьДатуЭСФ(СтруктураЭД.ДатаВремяПолучения));
	СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ВремяПолучения", ВернутьВремяЭСФ(СтруктураЭД.ДатаВремяПолучения));
	СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ИмяПолученногоФайла",
		СтруктураЭД.ИмяПолученногоФайлаБезРасширения);
	
	// ЭЦП полученного файла
	ЗаполнитьЭЦППолученногоФайла(СсылкаНаОбъект, СтруктураПараметров.Документ.ДанныеИзвещения.ПолученныеЭЦП);
	
	// ЭЦП полученного файла
	ЗаполнитьДанныеПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров.Документ.Подписант);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция СформироватьИмяФайлаЭД(СтруктураЭД)
	
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		СтрокаИмени = СтруктураЭД.ИдФайла+".xml";
	Иначе
		СтрокаИмени = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	КонецЕсли;
	СтрокаИмени = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(СтрокаИмени, Истина);
	
	Возврат СтрокаИмени;
	
КонецФункции

Функция ОпределитьИдФайлаЭД(СтруктураЭД)
	
	ТекстИд = "";
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		
		// Формат имени по ЭСФ: DP_IZVPOL_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru = 'DP_IZVPOL_%1_%2_%3_%4'");
		Если СтруктураЭД.Свойство("ОператорЭДО") И СтруктураЭД.ОператорЭДО.Свойство("ИдентификаторОператора") Тогда
			ИдПолучателя = СтруктураЭД.ОператорЭДО.ИдентификаторОператора;
		Иначе
			ИдПолучателя = СтруктураЭД.ИдПолучателя;
		КонецЕсли;
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, ИдПолучателя, СтруктураЭД.ИдОтправителя,
			ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		// Формат имени по ЭСФ: DP_UVUTOCH_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru = 'DP_UVUTOCH_%1_%2_%3_%4'");
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, СтруктураЭД.ИдПолучателя,
			СтруктураЭД.ИдОтправителя, ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	КонецЕсли;
	
	ИдФайлаЭД = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(ТекстИд);
	
	Возврат ИдФайлаЭД;
	
КонецФункции

Функция ВернутьДатуСтрокойДляИД(ДатаВремя)
	
	Возврат Формат(ДатаВремя, "ДФ=yyyyMMdd");
	
КонецФункции

Функция ВернутьДатуЭСФ(ДатаВремя)
	
	ДатаЭСФ = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Возврат ДатаЭСФ;
	
КонецФункции

Функция ВернутьВремяЭСФ(ДатаВремя)
	
	ВремяЭСФ = Формат(Час(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=");
	
	Возврат ВремяЭСФ;
	
КонецФункции

Функция СоздатьСтруктуруТипФИО()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Фамилия");
	СтруктураДанных.Вставить("Имя");
	СтруктураДанных.Вставить("Отчество");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СоздатьСтруктуруТипФайл(ВидЭД)
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ИдФайла");
	СтруктураДанных.Вставить("ВерсияПрограммы");
	СтруктураДанных.Вставить("ВерсияФормата");
	СтруктураДанных.Вставить("ВидЭД",    ВидЭД);
	СтруктураДанных.Вставить("Документ", СоздатьСтруктуруТипДокумент(ВидЭД));
	СтруктураДанных.Вставить("ОбязательныеПараметры", "ИдФайла, ВерсияПрограммы, ВерсияФормата, Документ");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СоздатьСтруктуруТипДокумент(ВидЭД)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("КодКНД"); // код классификатора налоговой документации
	
	Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ДозаполнитьСтруктуруТипДокументДляИзвещенияОПолучении(СтруктураДанных);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ДозаполнитьСтруктуруТипДокументДляУведомленияОбУточнении(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр уведомлений об уточнении

// Процедура заполняет табличный документ Уведомление об уточнении.
//
Процедура ЗаполнитьТабличныйДокументУточнение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Уточнение";
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Уточнение");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Уведомление об уточнении'");
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ПрочитатьУточнениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",          ЭД.Документ.СвУведУточ.СведПолФайл.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",       ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",        ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",     ЭД.Документ.СвУведУточ.ДатаПол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",    ЭД.Документ.СвУведУточ.ВремяПол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстУточнения",    ЭД.Документ.СвУведУточ.ТекстУведУточ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка", "");
	
КонецПроцедуры

Процедура ДозаполнитьСтруктуруТипДокументДляУведомленияОбУточнении(СтруктураДокумента)
	
	// Структура участника ЭДО
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИдУчастникаЭДО");
	СтруктураДанных.Вставить("УчастникЭДО");
	
	СтруктураДокумента.Вставить("ОтправительЭД", СтруктураДанных);
	
	// Структура извещения
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаПолучения");
	СтруктураДанных.Вставить("ВремяПолучения");
	СтруктураДанных.Вставить("ИмяПолученногоФайла");
	СтруктураДанных.Вставить("ТекстУточнения");
	
	ТЗ_ЭЦП = Новый ТаблицаЗначений;
	ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
	
	СтруктураДанных.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
	
	ДанныеПолученногоЭД = Новый Структура;
	ДанныеПолученногоЭД.Вставить("НаимДокумента");
	ДанныеПолученногоЭД.Вставить("НомерДокумента");
	ДанныеПолученногоЭД.Вставить("ДатаДокумента");
	
	СтруктураДанных.Вставить("ДанныеПолученногоДокумента", ДанныеПолученногоЭД);
	
	СтруктураДокумента.Вставить("ДанныеУточнения", СтруктураДанных);
	
	// Структура получателя
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИдУчастникаЭДО");
	СтруктураДанных.Вставить("УчастникЭДО");
	
	СтруктураДокумента.Вставить("ПолучательЭД", СтруктураДанных);
	
	// Структура подписанта
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Должность");
	СтруктураДанных.Вставить("ФИО", СоздатьСтруктуруТипФИО());
	
	СтруктураДокумента.Вставить("Подписант", СтруктураДанных);
	
КонецПроцедуры

Функция ПолучитьДанныеУточненияДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));
	ДанныеЗаполненияШапки.Вставить("ВремяПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));
	ДанныеЗаполненияШапки.Вставить("ТекстУточнения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ТекстУточнения"));
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ЭДУточнение = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИД);
	
	Если ЭДУточнение.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
	Иначе
		ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
	КонецЕсли;
	
	ЭДПодтверждениеДаты = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(ЭДУточнение.УникальныйИД,
		Перечисления.НаправленияЭД.Входящий, Перечисления.ВидыЭД.Подтверждение, ТипЭлементаВерсииЭД);
	
	Если ЭДПодтверждениеДаты <> Неопределено Тогда
		ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭДПодтверждениеДаты, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла <> Неопределено Тогда
				
				ДанныеЭД.Записать(ИмяФайла);
				
				СтруктураПодтверждения = СформироватьДеревоРазбора(ИмяФайла, ЭДПодтверждениеДаты.НаправлениеЭД);
				
				Если СтруктураПодтверждения <> Неопределено И СтруктураПодтверждения.Количество() > 0 Тогда
					ДанныеЗаполненияШапки.Вставить("ДатаОтправления", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ДатаОтправки"));
					ДанныеЗаполненияШапки.Вставить("ВремяОтправления", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ВремяОтправки"));
					ДанныеЗаполненияШапки.Вставить("ОператорЭДО", "оператора электронного документооборота "
						+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(СтруктураПодтверждения.ДеревоРазбора,
						СтруктураПодтверждения.СтрокаОбъекта, "ОператорЭДО"));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьДанныеПоУведомлению(СсылкаНаОбъект, СтруктураЭД)
	
	СтруктураПараметров = СоздатьСтруктуруТипФайл(СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("ИдФайла", СтруктураЭД.ИдФайла);
	СтруктураПараметров.Вставить("ВерсияПрограммы", НСтр("ru = '1С:Предприятие 8'"));
	СтруктураПараметров.Вставить("ВерсияФормата", "1.02");
	
	// Данные по документу.
	СтруктураПараметров.Документ.Вставить("КодКНД", "1115113");
	СтруктураПараметров.Документ.ОтправительЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДОтправителя);
	СтруктураПараметров.Документ.ОтправительЭД.Вставить("УчастникЭДО", СтруктураЭД.Отправитель);
	СтруктураПараметров.Документ.ПолучательЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДПолучателя);
	СтруктураПараметров.Документ.ПолучательЭД.Вставить("УчастникЭДО", СтруктураЭД.Получатель);
	
	// Данные уведомления об уточнении по полученному файлу.
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ДатаПолучения", ВернутьДатуЭСФ(СтруктураЭД.ДатаВремяПолучения));
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ВремяПолучения", ВернутьВремяЭСФ(СтруктураЭД.ДатаВремяПолучения));
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ИмяПолученногоФайла", СтруктураЭД.ИмяПолученногоФайлаБезРасширения);
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ТекстУточнения", СтруктураЭД.ТекстУточнения);
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("НомерОтклоненногоЭД", СсылкаНаОбъект.НомерЭД);
	
	// ЭЦП полученного файла.
	ЗаполнитьЭЦППолученногоФайла(СсылкаНаОбъект, СтруктураПараметров.Документ.ДанныеУточнения.ПолученныеЭЦП);
	
	// ЭЦП полученного файла.
	ЗаполнитьДанныеПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров.Документ.Подписант);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЗаполнитьФайлУведомленияОбУточнении(СтруктураПараметров)
	
	ТекстОшибки = "";
	ПространствоИмен = "DP_UVUTOCH";
	ПутьКОписанию = "{" + ПространствоИмен + "}.Файл";
	
	Попытка
		ЭД = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		// Общая информация
		ЗаполнитьСвойствоXDTO(ЭД, "ИдФайл",   СтруктураПараметров.ИдФайла, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "ВерсПрог", СтруктураПараметров.ВерсияПрограммы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "ВерсФорм", СтруктураПараметров.ВерсияФормата, Истина, ТекстОшибки);
		
		ДокументЭО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "КНД", СтруктураПараметров.Документ.КодКНД, Истина, ТекстОшибки);
		
		// Отправитель извещения
		Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.УчастЭДО");
		СформироватьДанныеПоУчастникуЭДО(Отправитель, СтруктураПараметров.Документ.ОтправительЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "УчастЭДО", Отправитель, Истина, ТекстОшибки);
		
		// Получатель извещения
		Получатель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.ОтпрДок");
		СформироватьДанныеПоУчастникуЭДО(Получатель, СтруктураПараметров.Документ.ПолучательЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОтпрДок", Получатель, Истина, ТекстОшибки);
		
		// Сведения уточнения
		УточнениеЭД = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.СвУведУточ");
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "ДатаПол",  СтруктураПараметров.Документ.ДанныеУточнения.ДатаПолучения, Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "ВремяПол", СтруктураПараметров.Документ.ДанныеУточнения.ВремяПолучения, Истина,
			ТекстОшибки);
		
		// Данные о полученном файле
		ПолученныйЭД = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "СведПолФайл"));
		ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяПостФайла", СтруктураПараметров.Документ.ДанныеУточнения.ИмяПолученногоФайла,
			Истина, ТекстОшибки);
		
		// ЭЦП полученного файла в кодировке Base64.
		ТЗ_ЭЦП = СтруктураПараметров.Документ.ДанныеУточнения.ПолученныеЭЦП;
		Если ТЗ_ЭЦП.Количество() > 0 Тогда
			Для Каждого ТекСтроки Из ТЗ_ЭЦП Цикл
				ПолученныйЭД.ЭЦППолФайл.Добавить(ТекСтроки.ЭЦП);
			КонецЦикла;
		КонецЕсли;
		
		ДанПолучДок = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.СвУведУточ.ДанПолучДок");
		ЗаполнитьСвойствоXDTO(ДанПолучДок, "НаимДок", "ДокОснование", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанПолучДок, "НомСФ", СтруктураПараметров.Документ.ДанныеУточнения.НомерОтклоненногоЭД, ,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанПолучДок, "ДатаСФ", СтруктураПараметров.Документ.ДанныеУточнения.ДатаПолучения, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "ДанПолучДок", ДанПолучДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "СведПолФайл", ПолученныйЭД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "ТекстУведУточ", СтруктураПараметров.Документ.ДанныеУточнения.ТекстУточнения, Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "СвУведУточ", УточнениеЭД, Истина, ТекстОшибки);
		
		// Подписант
		Подписант = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "Подписант"));
		ЗаполнитьСвойствоXDTO(Подписант, "Должность", СтруктураПараметров.Документ.Подписант.Должность, Истина, ТекстОшибки);
		
		ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", СтруктураПараметров.Документ.Подписант.ФИО.Фамилия, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", СтруктураПараметров.Документ.Подписант.ФИО.Имя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Отчество", СтруктураПараметров.Документ.Подписант.ФИО.Отчество, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "Документ", ДокументЭО, Истина, ТекстОшибки);
		
		ЭД.Проверить();
		
		ВыгрузитьЭДвФайл(ЭД, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		УдалитьПространствоИмен(СтруктураПараметров.ПолноеИмяФайла, ПространствоИмен);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '1% (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование уведомлений об уточнении

Функция СтруктураУведомленияОбУточнении()
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД");
	СтруктураЭД.Вставить("НаправлениеЭД");
	СтруктураЭД.Вставить("НомерЭД");
	СтруктураЭД.Вставить("ИдОтправителя");
	СтруктураЭД.Вставить("ИдПолучателя");
	СтруктураЭД.Вставить("Отправитель");
	СтруктураЭД.Вставить("Получатель");
	СтруктураЭД.Вставить("ИдФайла");
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения");
	СтруктураЭД.Вставить("ДатаВремяПолучения");
	СтруктураЭД.Вставить("ТекстУточнения");
	СтруктураЭД.Вставить("АдресВоВременномХранилище");
	
	Возврат СтруктураЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оператор ЭДО

Процедура ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров)
	
	СтруктураРеквизитов = СтруктураНастроекОператораЭДО();
	Наименование = "";
	ИНН = "";
	ИдентификаторОператора = "";
	СтруктураРеквизитов.Свойство("Наименование", Наименование);
	СтруктураРеквизитов.Свойство("ИНН", ИНН);
	СтруктураРеквизитов.Свойство("ИдентификаторОператора", ИдентификаторОператора);
	СтруктураПараметров.Вставить("НаимОрг", Наименование);
	СтруктураПараметров.Вставить("ИННЮЛ", ИНН);
	СтруктураПараметров.Вставить("ИдЭДО", ИдентификаторОператора);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПустогоОператораЭДО(СтруктураПараметров, ДанныеПоОрганизации)
	
	Наименование = НСтр("ru = 'Без оператора ЭДО'");
	ИНН = "1111111117"; // первый ИНН, отвечающий требованиям формата
	
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеПоОрганизации);
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование) Тогда
		Наименование = ДанныеЮрФизЛица.ПолноеНаименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ИНН) Тогда
		ИНН = ДанныеЮрФизЛица.ИНН;
	КонецЕсли;
	СтруктураПараметров.Вставить("НаимОрг", Наименование);
	СтруктураПараметров.Вставить("ИННЮЛ", Лев(ИНН, 10));
	СтруктураПараметров.Вставить("ИдЭДО", "---");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент банка

// Только для внутреннего использования
Функция ПолучитьМассивИдентификаторовВыпискиБанка(ЭДВыписка) Экспорт
	
	МассивВнешнихИдентификаторов = Новый Массив;
	
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭДВыписка);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла") И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат МассивВнешнихИдентификаторов;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = СформироватьДеревоРазбора(ИмяФайла, Неопределено);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат МассивВнешнихИдентификаторов;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		
		НомерСчета = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "РасчСчет");
		
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
				
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ЭтоИсходящийПлатеж = (НомерСчета = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет"));
			Если ЭтоИсходящийПлатеж Тогда
				ИДВнешний = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ИдПлатежа");
				МассивВнешнихИдентификаторов.Добавить(ИДВнешний);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивВнешнихИдентификаторов;

КонецФункции

Процедура ЗаполнитьТабличныйДокументВыписки_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ВыпискаБанка");
	ДанныеШапки = ДанныеПечати.Шапка;
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеШапки);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	Обороты = ДанныеПечати.Обороты;
	Для каждого Платеж ИЗ Обороты Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьСтрока.Параметры.Заполнить(Платеж);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Заполнить(ДанныеШапки);
	ТабличныйДокумент.Вывести(ОбластьПодвал);
		
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументЗапросВыписки_ЭД(ТабличныйДокумент, ДанныеПечати)
		
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ЗапросВыписки");

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ДанныеШапки = ДанныеПечати.Шапка;
	
	ОбластьЗаголовок.Параметры.ДатаНачалаПериода            = ДанныеШапки.ДатаНачала;
	ОбластьЗаголовок.Параметры.ДатаОкончанияПериода         = ДанныеШапки.ДатаКонца;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	РасчетныеСчета = ДанныеПечати.РасчетныеСчета;
	
	ОбластьСтрокаРасчетныйСчет = Макет.ПолучитьОбласть("СтрокаТЧ");
	
	Для Каждого СтрокаТЧ из РасчетныеСчета Цикл
		ОбластьСтрокаРасчетныйСчет.Параметры.Заполнить(СтрокаТЧ);
		ТабличныйДокумент.Вывести(ОбластьСтрокаРасчетныйСчет);
	КонецЦикла;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПлатежноеПоручениеИсходящее_ЭД(ТабличныйДокумент, Реквизиты, ИД)
		
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ПлатежноеПоручение");

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	
	ОбластьМакета.Параметры.НаименованиеНомер            = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + Реквизиты.Номер;
	ОбластьМакета.Параметры.ДатаДокумента                = Формат(Реквизиты.Дата, "ДЛФ=D");
	ОбластьМакета.Параметры.ВидПлатежа                   = Реквизиты.ВидПлатежа;
	ОбластьМакета.Параметры.ИННПлательщика               = Реквизиты.ПлательщикИНН;
	ОбластьМакета.Параметры.КПППлательщика               = Реквизиты.ПлательщикКПП;
	ОбластьМакета.Параметры.ТекстПлательщика             = Реквизиты.Плательщик;
	ОбластьМакета.Параметры.СуммаЧислом                  = Реквизиты.Сумма;
	ОбластьМакета.Параметры.НомерСчетаПлательщика        = Реквизиты.ПлательщикСчет;
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = Реквизиты.ПлательщикБанк1 + " " + Реквизиты.ПлательщикБанк2;
	ОбластьМакета.Параметры.БИКБанкаПлательщика          = Реквизиты.ПлательщикБИК;
	ОбластьМакета.Параметры.СчетБанкаПлательщика         = Реквизиты.ПлательщикКорсчет;
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя  = Реквизиты.ПолучательБанк1 + " " + Реквизиты.ПолучательБанк2;
	ОбластьМакета.Параметры.БИКБанкаПолучателя	         = Реквизиты.ПолучательБИК;
	ОбластьМакета.Параметры.СчетБанкаПолучателя          = Реквизиты.ПолучательКорсчет;
	ОбластьМакета.Параметры.НомерСчетаПолучателя         = Реквизиты.ПолучательСчет;
	ОбластьМакета.Параметры.ИННПолучателя                = Реквизиты.ПолучательИНН;
	ОбластьМакета.Параметры.КПППолучателя                = Реквизиты.ПолучательКПП;
	ОбластьМакета.Параметры.ТекстПолучателя              = Реквизиты.Получатель;
	ОбластьМакета.Параметры.Очередность                  = Реквизиты.Очередность;
	ОбластьМакета.Параметры.НазначениеПлатежа            = Реквизиты.НазначениеПлатежа;
	Если Реквизиты.ЭтоНалоговыйПлатеж Тогда
		ОбластьМакета.Параметры.КодБК                    = Реквизиты.ПоказательКБК;
		ОбластьМакета.Параметры.КодОКАТО                 = Реквизиты.ОКАТО;
		ОбластьМакета.Параметры.ПоказательОснования      = Реквизиты.ПоказательОснования;
		ОбластьМакета.Параметры.ПоказательПериода        = Реквизиты.ПоказательПериода;
		ОбластьМакета.Параметры.ПоказательНомера         = Реквизиты.ПоказательНомера;
		ОбластьМакета.Параметры.ПоказательДаты           = Реквизиты.ПоказательДаты;
		ОбластьМакета.Параметры.ПоказательТипа           = Реквизиты.ПоказательТипа;
		ОбластьМакета.Параметры.СтатусСоставителя        = Реквизиты.СтатусСоставителя;
	КонецЕсли;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ЗначениеЗаполнено(ИД) Тогда
		СсылкаНаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИД);
		Квитанция = ПодчиненныйДокумент(СсылкаНаЭД, Перечисления.ВидыЭД.Квитанция);
		Если ЗначениеЗаполнено(Квитанция) Тогда
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Квитанция);
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ВремФайл = ПолучитьИмяВременногоФайла("xml");
			Если НЕ ВремФайл = Неопределено Тогда
				ДанныеЭД.Записать(ВремФайл);
				Результат = СформироватьДеревоРазбора(ВремФайл, перечисления.НаправленияЭД.Входящий);
				УдалитьФайлы(ВремФайл);
				Если НЕ Результат = Неопределено Тогда
					ДеревоРазбора = Результат.ДеревоРазбора;
					СтрокаОбъекта = Результат.СтрокаОбъекта;
					ДатаПоступления = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
						"ДатаПоступленияВБанкПлательщика");
					ДатаСписания = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
						"ДатаСписанияСоСчетаПлательщика");
					ОбластьМакета.Параметры.ДатаПоступления = Формат(ДатаПоступления, "ДЛФ=D");
					ОбластьМакета.Параметры.ДатаСписания = Формат(ДатаСписания, "ДЛФ=D");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ИД) Тогда
		УникальныйИд = Новый УникальныйИдентификатор(ИД);
		СсылкаНаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИд);
		Штамп = ПодчиненныйДокумент(СсылкаНаЭД, Перечисления.ВидыЭД.ШтампБанка);
		Если ЗначениеЗаполнено(Штамп) Тогда
			ОбластьШтамп = Макет.ПолучитьОбласть("Штамп");
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СсылкаНаЭД);
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ВремФайл = ПолучитьИмяВременногоФайла("xml");
			Если НЕ ВремФайл = Неопределено Тогда
				ДанныеЭД.Записать(ВремФайл);
				Результат = СформироватьДеревоРазбора(ВремФайл, перечисления.НаправленияЭД.Входящий);
				УдалитьФайлы(ВремФайл);
				Если НЕ Результат = Неопределено Тогда
					ДеревоРазбора = Результат.ДеревоРазбора;
					СтрокаОбъекта = Результат.СтрокаОбъекта;
					ОбластьШтамп.Параметры.НазваниеБанка = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
						"НазваниеБанка");
					ОбластьШтамп.Параметры.Бранч = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
						"Бранч");
					ОбластьШтамп.Параметры.ДопОфис = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
						"ДопОфис") + " " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Филиал");
					ОбластьШтамп.Параметры.ДатаОперации = ?(ЗначениеЗаполнено(ДатаПоступления), ДатаПоступления, ДатаСписания);
					СоглашениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "СоглашениеЭД");
					Если ЗначениеЗаполнено(СоглашениеЭД) Тогда
						Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "Контрагент");
						Если ЗначениеЗаполнено(Банк) Тогда
							ОбластьШтамп.Параметры.БИК = Банк.Код;
						КонецЕсли;
					КонецЕсли;
					ТабличныйДокумент.Вывести(ОбластьШтамп);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументКвитанция_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Квитанция");

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьТикетСББОЛ = Макет.ПолучитьОбласть("ТикетСББОЛ");
	ОбластьТикетСББОЛ.Параметры.ТикетСББОЛ = ДанныеПечати.ТикетСББОЛ;
	ТабличныйДокумент.Вывести(ОбластьТикетСББОЛ);
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСозданияКвитка) Тогда
		ОбластьДатаСозданияКвитка = Макет.ПолучитьОбласть("ДатаСозданияКвитка");
		ОбластьДатаСозданияКвитка.Параметры.ДатаСозданияКвитка = ДанныеПечати.ДатаСозданияКвитка;
		ТабличныйДокумент.Вывести(ОбластьДатаСозданияКвитка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.КодСостоянияДокумента) Тогда
		ОбластьКодСостоянияДокумента = Макет.ПолучитьОбласть("КодСостоянияДокумента");
		ОбластьКодСостоянияДокумента.Параметры.КодСостоянияДокумента = ДанныеПечати.КодСостоянияДокумента;
		ТабличныйДокумент.Вывести(ОбластьКодСостоянияДокумента);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.ИдентификаторОрганизации) Тогда
		ОбластьИдентификаторОрганизации = Макет.ПолучитьОбласть("ИдентификаторОрганизации");
		ОбластьИдентификаторОрганизации.Параметры.ИдентификаторОрганизации = ДанныеПечати.ИдентификаторОрганизации;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = Макет.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ДанныеПечати.ИдентификаторДокумента;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСписанияСоСчетаПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПостановкиВКартотеку) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПоступленияВБанкПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПеречисленияПлатежа) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкомПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкаПолучателя) Тогда
			ОбластьБанковскиеДаты = Макет.ПолучитьОбласть("БанковскиеДаты");
			ТабличныйДокумент.Вывести(ОбластьБанковскиеДаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСписанияСоСчетаПлательщика) Тогда
		ОбластьДатаСписанияСоСчетаПлательщика = Макет.ПолучитьОбласть("ДатаСписанияСоСчетаПлательщика");
		ОбластьДатаСписанияСоСчетаПлательщика.Параметры.ДатаСписанияСоСчетаПлательщика = ДанныеПечати.ДатаСписанияСоСчетаПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаСписанияСоСчетаПлательщика);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПостановкиВКартотеку) Тогда
		ОбластьДатаПостановкиВКартотеку = Макет.ПолучитьОбласть("ДатаПостановкиВКартотеку");
		ОбластьДатаПостановкиВКартотеку.Параметры.ДатаПостановкиВКартотеку = ДанныеПечати.ДатаПостановкиВКартотеку;
		ТабличныйДокумент.Вывести(ОбластьДатаПостановкиВКартотеку);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкомПлательщика) Тогда
		ОбластьДатаОтметкиБанкомПлательщика = Макет.ПолучитьОбласть("ДатаОтметкиБанкомПлательщика");
		ОбластьДатаОтметкиБанкомПлательщика.Параметры.ДатаОтметкиБанкомПлательщика = ДанныеПечати.ДатаОтметкиБанкомПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаОтметкиБанкомПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПоступленияВБанкПлательщика) Тогда
		ОбластьДатаПоступленияВБанкПлательщика = Макет.ПолучитьОбласть("ДатаПоступленияВБанкПлательщика");
		ОбластьДатаПоступленияВБанкПлательщика.Параметры.ДатаПоступленияВБанкПлательщика = ДанныеПечати.ДатаПоступленияВБанкПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаПоступленияВБанкПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПеречисленияПлатежа) Тогда
		ОбластьДатаПеречисленияПлатежа = Макет.ПолучитьОбласть("ДатаПеречисленияПлатежа");
		ОбластьДатаПеречисленияПлатежа.Параметры.ДатаПеречисленияПлатежа = ДанныеПечати.ДатаПеречисленияПлатежа;
		ТабличныйДокумент.Вывести(ОбластьДатаПеречисленияПлатежа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкаПолучателя) Тогда
		ОбластьДатаОтметкиБанкаПолучателя = Макет.ПолучитьОбласть("ДатаОтметкиБанкаПолучателя");
		ОбластьДатаОтметкиБанкаПолучателя.Параметры.ДатаОтметкиБанкаПолучателя = ДанныеПечати.ДатаОтметкиБанкаПолучателя;
		ТабличныйДокумент.Вывести(ОбластьДатаОтметкиБанкаПолучателя);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.АвторСообщения) ИЛИ ЗначениеЗаполнено(ДанныеПечати.СообщениеИзБанка) Тогда
		ОбластьСообщениеИзБанка = Макет.ПолучитьОбласть("СообщениеИзБанка");
		ТабличныйДокумент.Вывести(ОбластьСообщениеИзБанка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.АвторСообщения) Тогда
		ОбластьАвторСообщения = Макет.ПолучитьОбласть("АвторСообщения");
		ОбластьАвторСообщения.Параметры.АвторСообщения = ДанныеПечати.АвторСообщения;
		ТабличныйДокумент.Вывести(ОбластьАвторСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.СообщениеИзБанка) Тогда
		ОбластьТекстСообщения = Макет.ПолучитьОбласть("ТекстСообщения");
		ОбластьТекстСообщения.Параметры.СообщениеИзБанка = ДанныеПечати.СообщениеИзБанка;
		ТабличныйДокумент.Вывести(ОбластьТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Возвращает строку данных выписки банка и номер счета
//
// Параметры
//  <ЭД>  - <СправочникСсылка.ЭДПрисоединенныеФайлы> - содержит файл выписки банка
//  <ТекстВыписки>  - строка данных выписки сформированная по формату
//  <НомерСчета>  - строка, номер счета в выписке
//
Процедура ПолучитьДанныеВыпискиБанка(ЭД, ТекстВыписки, НомерСчета) Экспорт

	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла") И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = СформироватьДеревоРазбора(ИмяФайла, ЭД.НаправлениеЭД);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
			
		Текст = Новый ТекстовыйДокумент();

		Текст.ДобавитьСтроку("1CClientBankExchange");
		Текст.ДобавитьСтроку("ВерсияФормата=1.05");
		Текст.ДобавитьСтроку("Кодировка=Windows");
		ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, "Отправитель");
		Текст.ДобавитьСтроку("Получатель="
			+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Получатель"));
		ДатаСоздания = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСоздания");
		Если ЗначениеЗаполнено(ДатаСоздания) Тогда
			Текст.ДобавитьСтроку("ДатаСоздания=" + Формат(ДатаСоздания, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		ВремяСоздания = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВремяСоздания");
		Если ЗначениеЗаполнено(ВремяСоздания) Тогда
			Текст.ДобавитьСтроку("ВремяСоздания=" + Формат(ВремяСоздания, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		Текст.ДобавитьСтроку("ДатаНачала="
			+ Формат(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаНачала"),
				"ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("ДатаКонца="
			+ Формат(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаКонца"), "ДФ=dd.MM.yyyy"));
		НомерСчета = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "РасчСчет");
		Текст.ДобавитьСтроку("РасчСчет=" + НомерСчета);
		Текст.ДобавитьСтроку("СекцияРасчСчет");
		Текст.ДобавитьСтроку("ДатаНачала="
			+ Формат(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаНачала"),
				"ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("ДатаКонца="
			+ Формат(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаКонца"), "ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("РасчСчет=" + НомерСчета);
		Текст.ДобавитьСтроку("НачальныйОстаток="
			+ Формат(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НачальныйОстаток"),
				"ЧРД=.; ЧГ="));
		ВсегоПоступило = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВсегоПоступило");
		Если ЗначениеЗаполнено(ВсегоПоступило) Тогда
			Текст.ДобавитьСтроку("ВсегоПоступило=" + Формат(ВсегоПоступило, "ЧРД=.; ЧГ="));
		КонецЕсли;
		ВсегоСписано = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВсегоСписано");
		Если ЗначениеЗаполнено(ВсегоСписано) Тогда
			Текст.ДобавитьСтроку("ВсегоСписано=" + Формат(ВсегоСписано, "ЧРД=.; ЧГ="));
		КонецЕсли;
		КонечныйОстаток = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КонечныйОстаток");
		Если ЗначениеЗаполнено(КонечныйОстаток) Тогда
			Текст.ДобавитьСтроку("КонечныйОстаток=" + Формат(КонечныйОстаток, "ЧРД=.; ЧГ="));
		КонецЕсли;
		Текст.ДобавитьСтроку("КонецРасчСчет");
			
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Текст.ДобавитьСтроку("СекцияДокумент="
				+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СекцияДокумент"));
			Текст.ДобавитьСтроку("Номер="
				+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номер"));
			Текст.ДобавитьСтроку("Дата="
				+ Формат(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Дата"), "ДФ=dd.MM.yyyy"));
			Текст.ДобавитьСтроку("Сумма="
				+ Формат(ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма"), "ЧРД=.; ЧГ="));
			КвитанцияДата = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КвитанцияДата");
			Если ЗначениеЗаполнено(КвитанцияДата) Тогда
				Текст.ДобавитьСтроку("КвитанцияДата=" + Формат(КвитанцияДата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			КвитанцияВремя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КвитанцияВремя");
			Если ЗначениеЗаполнено(КвитанцияВремя) Тогда
				Текст.ДобавитьСтроку("КвитанцияВремя=" + Формат(КвитанцияВремя, "ДЛФ=T"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "КвитанцияСодержание");
			
			Текст.ДобавитьСтроку("ПлательщикСчет="
				+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет"));
			ДатаСписано= ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаСписано");
			Если ЗначениеЗаполнено(ДатаСписано) Тогда
				Текст.ДобавитьСтроку("ДатаСписано=" + Формат(ДатаСписано, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик");
			Текст.ДобавитьСтроку("ПлательщикИНН="
				+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикИНН"));
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКПП");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикРасчСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБИК");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКорсчет");
			
			Текст.ДобавитьСтроку("ПолучательСчет="
				+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательСчет"));
			ДатаПоступило = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаПоступило");
			Если ЗначениеЗаполнено(ДатаПоступило) Тогда
				Текст.ДобавитьСтроку("ДатаПоступило=" + Формат(ДатаПоступило, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель");
			Текст.ДобавитьСтроку("ПолучательИНН="
				+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательИНН"));
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКПП");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательРасчСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБИК");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКорсчет");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидОплаты");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа5");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа6");
				
			ЭтоПлатежВБюджет = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЭтоПлатежВБюджет");
			Если ЭтоПлатежВБюджет = Истина Тогда
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "СтатусСоставителя");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательКБК");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ОКАТО");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательОснования");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательПериода");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательНомера");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательДаты");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательТипа");
			КонецЕсли;
				
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Очередность");
			СрокАкцепта = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СрокАкцепта");
			Если ЗначениеЗаполнено(СрокАкцепта) Тогда
				Текст.ДобавитьСтроку("СрокАкцепта=" + Формат(СрокАкцепта,"ЧДЦ=0; ЧГ="));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидАккредитива");
			СрокПлатежа = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СрокПлатежа");
			Если ЗначениеЗаполнено(СрокПлатежа) Тогда
				Текст.ДобавитьСтроку("СрокПлатежа=" + Формат(СрокПлатежа, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			УсловиеОплаты1 = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "УсловиеОплаты");
			Если ЗначениеЗаполнено(УсловиеОплаты1) Тогда
				Текст.ДобавитьСтроку("УсловиеОплаты1="+ УсловиеОплаты1);
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлатежПоПредст");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ДополнУсловия");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НомерСчетаПоставщика");
			ДатаОтсылкиДок = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаОтсылкиДок");
			Если ЗначениеЗаполнено(ДатаОтсылкиДок) Тогда
				Текст.ДобавитьСтроку("ДатаОтсылкиДок="+ Формат(ДатаОтсылкиДок, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			Текст.ДобавитьСтроку("КонецДокумента");
		КонецЦикла;
	
		Текст.ДобавитьСтроку("КонецФайла");
		
		ТекстВыписки = Текст.ПолучитьТекст();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;

	ДатаСоставления =  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСоздания");
	ВремяСоставления = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВремяСоздания");
	ДанныеЗаполненияШапки.Вставить( "ДатаСоставленияВыписки", 
									Формат(ДатаСоставления, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСоставления, "ДЛФ=T"));
	ДатаНачала = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");
	ДанныеЗаполненияШапки.Вставить( "ДатаНачала", Формат(ДатаНачала,"ДФ=dd.MM.yyyy"));
	ДатаКонца = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");
	ДанныеЗаполненияШапки.Вставить( "ДатаОкончания", Формат(ДатаКонца, "ДФ=dd.MM.yyyy"));
	НомерСчета = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "РасчСчет");
	ДанныеЗаполненияШапки.Вставить( "НомерСчета", НомерСчета);
	ДанныеЗаполненияШапки.Вставить( "ВхОстаток",
									ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НачальныйОстаток"));
	ДанныеЗаполненияШапки.Вставить( "Кредит",
									ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВсегоПоступило"));
	ДанныеЗаполненияШапки.Вставить( "Дебет",
									ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВсегоСписано"));
	ДанныеЗаполненияШапки.Вставить( "ИсхОстаток",
									ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КонечныйОстаток"));
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ДатаОперации");
	ТЗ.Колонки.Добавить("КО");
	ТЗ.Колонки.Добавить("НомерДокумента");
	ТЗ.Колонки.Добавить("Дебет");
	ТЗ.Колонки.Добавить("Кредит");
	ТЗ.Колонки.Добавить("БИК");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ОснованиеОперации");
			
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ДатаОперации   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Дата");
		НоваяСтрока.КО             = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВидОплаты");
		НоваяСтрока.НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номер");
		СчетПлательщика            = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
		ПлатежИсходящий = (СчетПлательщика = НомерСчета);
		Если ПлатежИсходящий Тогда
			НоваяСтрока.Дебет      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
			НоваяСтрока.БИК        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательБИК");
			ИННКорреспондента      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательИНН");
			СчетКорреспондента     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательСчет");
			БанкКорреспондента     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Получатель3");
		Иначе
			НоваяСтрока.Кредит     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
			НоваяСтрока.БИК        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикБИК");
			ИННКорреспондента      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикИНН");
			СчетКорреспондента     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
			БанкКорреспондента     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Плательщик3");
		КонецЕсли;
		НоваяСтрока.Наименование = " ИНН " + ИННКорреспондента + Символы.ПС + СчетКорреспондента + Символы.ПС 
			+ БанкКорреспондента;
		НоваяСтрока.ОснованиеОперации = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(   ДеревоРазбора,
																						СтрокаТЧ,
																						"НазначениеПлатежа");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Обороты", ТЗ);
		
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПолучитьДанныеЗапросаВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;

	ДанныеЗаполненияШапки.Вставить("ДатаНачала", 
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаНачала"));
	ДанныеЗаполненияШапки.Вставить("ДатаКонца",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаКонца"));
		
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСчета");
			
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.НомерСчета = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерСчета");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("РасчетныеСчета", ТЗ);
		
	Возврат ДанныеДляОбъекта;

	
КонецФункции

Функция ПолучитьДанныеКвитанцииДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполнения = Новый Структура;

	ДанныеЗаполнения.Вставить("ТикетСББОЛ",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ТикетСББОЛ"));
	ДанныеЗаполнения.Вставить("ДатаСозданияКвитка",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСозданияКвитка"));
	ДанныеЗаполнения.Вставить("КодСостоянияДокумента",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодСостоянияДокумента"));
	ДанныеЗаполнения.Вставить("ИдентификаторОрганизации",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторОрганизации"));
	ДанныеЗаполнения.Вставить("ИдентификаторДокумента",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента"));
	ДанныеЗаполнения.Вставить("ДатаСписанияСоСчетаПлательщика",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика"));
	ДанныеЗаполнения.Вставить("ДатаОтметкиБанкомПлательщика",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПлательщика"));
	ДанныеЗаполнения.Вставить("ДатаПостановкиВКартотеку",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПостановкиВКартотеку"));
	ДанныеЗаполнения.Вставить("ДатаПоступленияВБанкПлательщика",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика"));
	ДанныеЗаполнения.Вставить("ДатаПеречисленияПлатежа",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПеречисленияПлатежа"));
	ДанныеЗаполнения.Вставить("ДатаОтметкиБанкаПолучателя",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкаПолучателя"));
	ДанныеЗаполнения.Вставить("АвторСообщения",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АвторСообщения"));
	ДанныеЗаполнения.Вставить("СообщениеИзБанка",
		ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СообщениеИзБанка"));
		
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПолучитьДанныеПлатежногоПорученияДляПечати(СтрокаОбъекта)
	
	ДанныеДляОбъекта = Новый Структура;
	
	Для Каждого РеквизитСтроки из СтрокаОбъекта.Строки Цикл
		ДанныеДляОбъекта.Вставить(РеквизитСтроки.Реквизит,РеквизитСтроки.ЗначениеРеквизита);
	КонецЦикла;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьЗаказВыпискиCML(ДатаНачала, ДатаКонца, МассивБанковскихСчетов, Банк) Экспорт
	
	Попытка
		URI = "urn:1C.ru:ClientBankExchange";
		
		Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"ClientBankExchange"));
		Пакет.ВерсияФормата = "1.05";
		Пакет.Получатель = Банк.Наименование;
		Пакет.Отправитель = "1С: Предприятие";
		Пакет.ДатаСоздания = ТекущаяДатаСеанса();
		Пакет.ВремяСоздания = ТекущаяДатаСеанса();
		
		УсловияОтбора = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"УсловияОтбора"));
		УсловияОтбора.ДатаНачала = ДатаНачала;
		УсловияОтбора.ДатаКонца = ДатаКонца;
		Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
			УсловияОтбора.РасчСчет.Добавить(НомерСчета);
		КонецЦикла;
		
		Пакет.УсловияОтбора = УсловияОтбора;
		
		Пакет.Проверить();
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Пакет;
	
КонецФункции

Процедура ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",   ЭД.Отправитель);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",    ЭД.Получатель);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания",  ЭД.ДатаСоздания);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяСоздания", ЭД.ВремяСоздания);
	Если НЕ ЭД.СекцияРасчСчет = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.СекцияРасчСчет.ДатаНачала);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЭД.СекцияРасчСчет.ДатаКонца);
		Если ЭД.СекцияРасчСчет.РасчСчета.Количество()>0 Тогда
			РеквизитыРасчСчета = ЭД.СекцияРасчСчет.РасчСчета[0];
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "РасчСчет",         РеквизитыРасчСчета.РасчСчет);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачальныйОстаток", РеквизитыРасчСчета.НачальныйОстаток);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоПоступило",   РеквизитыРасчСчета.ВсегоПоступило);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоСписано",     РеквизитыРасчСчета.ВсегоСписано);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонечныйОстаток",  РеквизитыРасчСчета.КонечныйОстаток);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементПлатежа из ЭД.СекцияПлатежногоДокумента Цикл
		РеквизитыПлатежа = Новый СписокЗначений;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.СекцияДокумент, "СекцияДокумент");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Номер, "Номер");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Дата,  "Дата");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Сумма, "Сумма");
		Если НЕ ЭлементПлатежа.Квитанция = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияДата,       "КвитанцияДата");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияВремя,      "КвитанцияВремя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияСодержание, "КвитанцияСодержание");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикСчет, "ПлательщикСчет");
		Если НЕ ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано.__content, "ДатаСписано");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано.ИдПлатежа, "ИдПлатежа");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик,         "Плательщик");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикИНН,      "ПлательщикИНН");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикКПП,      "ПлательщикКПП");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1,        "Плательщик1");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик2,        "Плательщик2");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик3,        "Плательщик3");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик4,        "Плательщик4");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикРасчСчет, "ПлательщикРасчСчет");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБанк1,    "ПлательщикБанк1");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБанк2,    "ПлательщикБанк2");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБИК,      "ПлательщикБИК");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикКорсчет,  "ПлательщикКорсчет");
		
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательСчет,      "ПолучательСчет");
		Если НЕ ЭлементПлатежа.РеквизитыПолучателя.ДатаПоступило = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ДатаПоступило.__content, "ДатаПоступило");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель,          "Получатель");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательИНН,       "ПолучательИНН");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательКПП,       "ПолучательКПП");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель1,         "Получатель1");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель2,         "Получатель2");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель3,         "Получатель3");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель4,         "Получатель4");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательРасчСчет,  "ПолучательРасчСчет");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБанк1,     "ПолучательБанк1");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБанк2,     "ПолучательБанк2");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБИК,       "ПолучательБИК");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательКорсчет,   "ПолучательКорсчет");
		
		Если НЕ ЭлементПлатежа.РеквизитыПлатежа = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.ВидПлатежа,         "ВидПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.ВидОплаты,          "ВидОплаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.Очередность,        "Очередность");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа,  "НазначениеПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа1, "НазначениеПлатежа1");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа2, "НазначениеПлатежа2");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа3, "НазначениеПлатежа3");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа4, "НазначениеПлатежа4");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа5, "НазначениеПлатежа5");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа6, "НазначениеПлатежа6");
		КонецЕсли;
		
		Если НЕ ЭлементПлатежа.ПлатежиВБюджет = Неопределено Тогда
			РеквизитыПлатежа.Добавить(Истина, "ЭтоПлатежВБюджет");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.СтатусСоставителя,   "СтатусСоставителя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательКБК,       "ПоказательКБК");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ОКАТО,               "ОКАТО");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательОснования, "ПоказательОснования");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательПериода,   "ПоказательПериода");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательНомера,    "ПоказательНомера");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательДаты,      "ПоказательДаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательТипа,      "ПоказательТипа");
		Иначе
			РеквизитыПлатежа.Добавить(Ложь, "ЭтоПлатежВБюджет");
		КонецЕсли;
		
		Если НЕ ЭлементПлатежа.ДополнительныеРеквизиты = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.СрокАкцепта,          "СрокАкцепта");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ВидАккредитива,       "ВидАккредитива");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.СрокПлатежа,          "СрокПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.УсловиеОплаты,        "УсловиеОплаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ПлатежПоПредст,       "ПлатежПоПредст");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ДополнУсловия,        "ДополнУсловия");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.НомерСчетаПоставщика, "НомерСчетаПоставщика");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ДатаОтсылкиДок,       "ДатаОтсылкиДок");
		КонецЕсли;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыПлатежа);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки;
	
	ЗапросВыписки = ЭД.УсловияОтбора;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЗапросВыписки.ДатаНачала);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЗапросВыписки.ДатаКонца);
	Для Каждого Элемент из ЗапросВыписки.РасчСчет Цикл
		РеквизитыСчета = Новый СписокЗначений;
		РеквизитыСчета.Добавить(Элемент, "НомерСчета");
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
	
	ПлатежныйДокумент = ЭД.СекцияПлатежногоДокумента[0];
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер",          ПлатежныйДокумент.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",           ПлатежныйДокумент.Дата);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СекцияДокумент", ПлатежныйДокумент.СекцияДокумент);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма",          ПлатежныйДокумент.Сумма);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ПлатежныйДокумент.Сумма);
	Если Не ПлатежныйДокумент.ПлатежиВБюджет = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоНалоговыйПлатеж",  Истина);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтатусСоставителя",   ПлатежныйДокумент.ПлатежиВБюджет.СтатусСоставителя);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательКБК",       ПлатежныйДокумент.ПлатежиВБюджет.ПоказательКБК);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКАТО",               ПлатежныйДокумент.ПлатежиВБюджет.ОКАТО);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательОснования", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательОснования);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательПериода",   ПлатежныйДокумент.ПлатежиВБюджет.ПоказательПериода);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательНомера",    ПлатежныйДокумент.ПлатежиВБюджет.ПоказательНомера);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательДаты",      ПлатежныйДокумент.ПлатежиВБюджет.ПоказательДаты);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательТипа",      ПлатежныйДокумент.ПлатежиВБюджет.ПоказательТипа);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоНалоговыйПлатеж",  Ложь);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОплаты",          ПлатежныйДокумент.РеквизитыПлатежа.ВидОплаты);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа",         ПлатежныйДокумент.РеквизитыПлатежа.ВидПлатежа);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа",  ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа1", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа2", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа3", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа3);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа4", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа4);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа5", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа5);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа6", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа6);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность",        ПлатежныйДокумент.РеквизитыПлатежа.Очередность);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСписано",        ПлатежныйДокумент.РеквизитыПлательщика.ДатаСписано);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик",         ПлатежныйДокумент.РеквизитыПлательщика.Плательщик);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик1",        ПлатежныйДокумент.РеквизитыПлательщика.Плательщик1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик2",        ПлатежныйДокумент.РеквизитыПлательщика.Плательщик2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик3",        ПлатежныйДокумент.РеквизитыПлательщика.Плательщик3);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Плательщик4",        ПлатежныйДокумент.РеквизитыПлательщика.Плательщик4);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИК",      ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикБИК);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБанк1",    ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикБанк1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБанк2",    ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикБанк2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН",      ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикИНН);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП",      ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикКПП);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКорсчет",  ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикКорсчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикРасчСчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикСчет",     ПлатежныйДокумент.РеквизитыПлательщика.ПлательщикСчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоступило",      ПлатежныйДокумент.РеквизитыПолучателя.ДатаПоступило);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",         ПлатежныйДокумент.РеквизитыПолучателя.Получатель);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель1",        ПлатежныйДокумент.РеквизитыПолучателя.Получатель1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель2",        ПлатежныйДокумент.РеквизитыПолучателя.Получатель2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель3",        ПлатежныйДокумент.РеквизитыПолучателя.Получатель3);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель4",        ПлатежныйДокумент.РеквизитыПолучателя.Получатель4);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИК",      ПлатежныйДокумент.РеквизитыПолучателя.ПолучательБИК);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБанк1",    ПлатежныйДокумент.РеквизитыПолучателя.ПолучательБанк1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБанк2",    ПлатежныйДокумент.РеквизитыПолучателя.ПолучательБанк2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН",      ПлатежныйДокумент.РеквизитыПолучателя.ПолучательИНН);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП",      ПлатежныйДокумент.РеквизитыПолучателя.ПолучательКПП);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКорсчет",  ПлатежныйДокумент.РеквизитыПолучателя.ПолучательКорсчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", ПлатежныйДокумент.РеквизитыПолучателя.ПолучательРасчСчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательСчет",     ПлатежныйДокумент.РеквизитыПолучателя.ПолучательСчет);
	
КонецПроцедуры

Процедура ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, ИмяПараметра)
	
	ЗначениеПараметра = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяПараметра);
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Текст.ДобавитьСтроку(ИмяПараметра + "=" + ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

// Возвращает результат успеха формирования файла ЭД Платежное поручение.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьПлатежноеПоручениеCML(СтруктураПараметров) 
	
	ВерсияСхемы = "urn:1C.ru:ClientBankExchange";
	
	ТекстОшибки = "";
	Попытка 
		
		ClientBankExchange = ПолучитьОбъектТипаCML("ClientBankExchange", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "ВерсияФормата", "1.05", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "Получатель", СтруктураПараметров.ПлательщикБанк, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "Отправитель", "1С: Предприятие", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "ДатаСоздания", ТекущаяДатаСеанса(), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ClientBankExchange, "ВремяСоздания", ТекущаяДатаСеанса(), , ТекстОшибки);
		
		ПлатежноеПоручениеЭО = ПолучитьОбъектТипаCML("ПлатежныйДокумент", ВерсияСхемы);
		Если ЗначениеЗаполнено (СтруктураПараметров.ИдДокумента) Тогда
			ЗаполнитьСвойствоXDTO(
					ПлатежноеПоручениеЭО,
					"ИдДокумента",
					Строка(СтруктураПараметров.УникальныйИдентификатор),
					,
					ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "СекцияДокумент", "ПлатежноеПоручение", Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Дата", СтруктураПараметров.Дата, Истина, ТекстОшибки);
		СуммаДокумента = Формат(СтруктураПараметров.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Сумма", СуммаДокумента, Истина, ТекстОшибки);
		
		РеквизитыПлательщика = ПолучитьОбъектТипаCML("РеквизитыПлательщика", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(
				РеквизитыПлательщика,
				"ПлательщикСчет",
				СтруктураПараметров.ПлательщикРасчСчет,
				Истина,
				ТекстОшибки);
		ПлательщикОднойСтрокой = "ИНН " + СтруктураПараметров.ПлательщикИНН + " " + СтруктураПараметров.ПлательщикНаим; 
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикНаим) Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик1", СтруктураПараметров.ПлательщикНаим, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикИНН) Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикИНН", СтруктураПараметров.ПлательщикИНН, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.НепрямыеРасчетыУПлательщика = Истина Тогда
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикРасчСчет) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик2", СтруктураПараметров.ПлательщикРасчСчет, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикБанк) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик3", СтруктураПараметров.ПлательщикБанк, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикГородБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик4", СтруктураПараметров.ПлательщикГородБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикКоррСчет) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикРасчСчет", СтруктураПараметров.ПлательщикКоррСчет, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикБанкДляРасчетов) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБанк1", СтруктураПараметров.ПлательщикБанкДляРасчетов, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикГородРЦБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБанк2", СтруктураПараметров.ПлательщикГородРЦБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикБИКРЦБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБИК", СтруктураПараметров.ПлательщикБИКРЦБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикКоррСчетРЦБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикКорсчет", СтруктураПараметров.ПлательщикКоррСчетРЦБанка, ,
					ТекстОшибки);
			КонецЕсли;
			ПлательщикОднойСтрокой = ПлательщикОднойСтрокой + " р/с " + СтруктураПараметров.ПлательщикРасчСчет + " в "
				+ СтруктураПараметров.ПлательщикБанк + " " + СтруктураПараметров.ПлательщикГородБанка;
				
		Иначе
				
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикРасчСчет) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикРасчСчет", СтруктураПараметров.ПлательщикРасчСчет, ,
				ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикБанк) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБанк1", СтруктураПараметров.ПлательщикБанк, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикГородБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБанк2", СтруктураПараметров.ПлательщикГородБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикБИКБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБИК", СтруктураПараметров.ПлательщикБИКБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПлательщикКоррСчет) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикКорсчет", СтруктураПараметров.ПлательщикКоррСчет, ,
					ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик", ПлательщикОднойСтрокой, , ТекстОшибки);
		
		РеквизитыПолучателя = ПолучитьОбъектТипаCML("РеквизитыПолучателя", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательСчет", СтруктураПараметров.ПолучательРасчСчет, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательНаим) Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель1", СтруктураПараметров.ПолучательНаим, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательИНН) Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательИНН", СтруктураПараметров.ПолучательИНН, , ТекстОшибки);
		КонецЕсли;
		
		ПолучательОднойСтрокой = "ИНН " + СтруктураПараметров.ПолучательИНН + " " + СтруктураПараметров.ПолучательНаим;
		
		Если СтруктураПараметров.НепрямыеРасчетыУПолучателя = Истина Тогда
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательРасчСчет) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель2", СтруктураПараметров.ПолучательРасчСчет, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательБанк) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель3", СтруктураПараметров.ПолучательБанк, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательГородБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель4", СтруктураПараметров.ПолучательГородБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательКоррСчет) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательРасчСчет", СтруктураПараметров.ПолучательКоррСчет, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательБанкДляРасчетов) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБанк1", СтруктураПараметров.ПолучательБанкДляРасчетов, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательГородРЦБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБанк2", СтруктураПараметров.ПолучательГородРЦБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательБИКРЦБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБИК", СтруктураПараметров.ПолучательБИКРЦБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательКоррСчетРЦБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательКорсчет", СтруктураПараметров.ПолучательКоррСчетРЦБанка, ,
					ТекстОшибки);
			КонецЕсли;
			ПолучательОднойСтрокой = ПолучательОднойСтрокой + " р/с " + СтруктураПараметров.ПолучательРасчСчет + " в "
				+ СтруктураПараметров.ПолучательБанк + " " + СтруктураПараметров.ПолучательГородБанка;
		Иначе
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательРасчСчет) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательРасчСчет", СтруктураПараметров.ПолучательРасчСчет, ,
				ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательБанк) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБанк1", СтруктураПараметров.ПолучательБанк, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательГородБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБанк2", СтруктураПараметров.ПолучательГородБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательБИКБанка) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБИК", СтруктураПараметров.ПолучательБИКБанка, ,
					ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ПолучательКоррСчет) Тогда
				ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательКорсчет", СтруктураПараметров.ПолучательКоррСчет, ,
					ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель", ПолучательОднойСтрокой, , ТекстОшибки);
		
		Если СтруктураПараметров.ПеречислениеВБюджет = Истина Тогда
			
			ПлатежиВБюджет = ПолучитьОбъектТипаCML("ПлатежиВБюджет", ВерсияСхемы);
			
			СтатусСоставителя = СтруктураПараметров.СтатусСоставителя;
			Если НЕ ЗначениеЗаполнено(СтатусСоставителя) ИЛИ ПустаяСтрока(СтатусСоставителя) Тогда
				СтатусСоставителя = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "СтатусСоставителя", СтатусСоставителя, Истина, ТекстОшибки);
			
			ПлательщикКПП = СтруктураПараметров.ПлательщикКПП;
			ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикКПП", ПлательщикКПП, Истина, ТекстОшибки);
			
			ПолучательКПП = СтруктураПараметров.ПолучательКПП;
			ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательКПП", ПолучательКПП, Истина, ТекстОшибки);
		
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательКБК", СтруктураПараметров.КодБК, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ОКАТО", СтруктураПараметров.КодОКАТО, Истина, ТекстОшибки);
			
			ПоказательОснования = СтруктураПараметров.ПоказательОснования;
			Если НЕ ЗначениеЗаполнено(ПоказательОснования) ИЛИ ПустаяСтрока(ПоказательОснования) Тогда
				ПоказательОснования = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательОснования", ПоказательОснования, Истина, ТекстОшибки);
			
			ПоказательПериода = СтруктураПараметров.ПоказательПериода;
			Если НЕ ЗначениеЗаполнено(ПоказательПериода) ИЛИ ПустаяСтрока(ПоказательПериода)
				ИЛИ ПоказательПериода = "  .  .    " Тогда
				
				ПоказательПериода = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательПериода", ПоказательПериода, Истина, ТекстОшибки);
			
			ПоказательНомера = СтруктураПараметров.ПоказательНомера;
			Если НЕ ЗначениеЗаполнено(ПоказательНомера) ИЛИ ПустаяСтрока(ПоказательНомера) Тогда
				ПоказательНомера = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательНомера", ПоказательНомера, Истина, ТекстОшибки);
			
			ПоказательДаты = СтруктураПараметров.ПоказательДаты;
			Если НЕ ЗначениеЗаполнено(ПоказательДаты) Тогда
				ПоказательДаты = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательДаты", ПоказательДаты, Истина, ТекстОшибки);
			
			ПоказательТипа = СтруктураПараметров.ПоказательТипа;
			Если НЕ ЗначениеЗаполнено(ПоказательТипа) ИЛИ ПустаяСтрока(ПоказательТипа) Тогда
				ПоказательТипа = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджет, "ПоказательТипа", ПоказательТипа, Истина, ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПлательщика", РеквизитыПлательщика, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПолучателя", РеквизитыПолучателя, Истина, ТекстОшибки);
		
		РеквизитыПлатежа = ПолучитьОбъектТипаCML("РеквизитыПлатежа", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "ВидПлатежа", "Электронно", , ТекстОшибки);
		Если ЗначениеЗаполнено(СтруктураПараметров.ВидОплаты) Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "ВидОплаты", СтруктураПараметров.ВидОплаты, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПараметров.Очередность) Тогда
			ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "Очередность", СтруктураПараметров.Очередность, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПараметров.НазначениеПлатежа) Тогда
			НазначениеПлатежа = СтрЗаменить(СтруктураПараметров.НазначениеПлатежа, Символы.ПС, "");
			НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, Символы.ВК, "");
			НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, Символы.ПФ, "");
			ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа", НазначениеПлатежа, , ТекстОшибки);
		КонецЕсли;
		НазначениеПлатежа = "";
		Для Счетчик = 1 По СтрЧислоСтрок(СтруктураПараметров.НазначениеПлатежа) Цикл
			ТекСтрока = СтрПолучитьСтроку(СтруктураПараметров.НазначениеПлатежа, Счетчик);
			Пока СтрДлина(ТекСтрока) > 35 Цикл
				НазначениеПлатежа = НазначениеПлатежа + Сред(ТекСтрока, 1, 35) + Символы.ПС;
				ТекСтрока = Сред(ТекСтрока, 36);
			КонецЦикла;
			НазначениеПлатежа = НазначениеПлатежа + ТекСтрока + Символы.ПС;
		КонецЦикла;
		
		КоличествоСтрокНП = СтрЧислоСтрок(НазначениеПлатежа);
		Если КоличествоСтрокНП > 6 Тогда
			КоличествоСтрокНП = 6;
		КонецЕсли;
		
		Для Сч = 1 По КоличествоСтрокНП Цикл
			ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа" + Сч,
				СтрПолучитьСтроку(НазначениеПлатежа, Сч), , ТекстОшибки);
		КонецЦикла;
		Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
			ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа" + Сч, "", , ТекстОшибки);
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПлатежа", РеквизитыПлатежа, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.ПеречислениеВБюджет Тогда
			ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "ПлатежиВБюджет", ПлатежиВБюджет, Истина, ТекстОшибки);
		КонецЕсли;
		ClientBankExchange.СекцияПлатежногоДокумента.Добавить(ПлатежноеПоручениеЭО);
		
		ClientBankExchange.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(ClientBankExchange, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;

	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Для того, чтобы передать дополнительные данные в печатную форму, надо:
// 1. в функции подготовки данных (в переопределяемом модуле) создать структуру, где ключ - имя передаваемого
//  дополнительного параметра, а значение - соответственно, значение доп.параметра и передать в интерфейсную функцию
//  "ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных" (описание параметров в комментарии к ней).
// 2. в функции подготовки данных к печати "ПолучитьДанные...ДляПечати", прописать чтение передаваемых
//  доп.данных по имени (с которым доп параметр помещался в структуру на шаге 1) и присвоение требуемому реквизиту макета.
//
Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

// Структура параметров ЭСФ

Функция КорЭСФТаблицаСведенийОТоваре()
	
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки"); // Номер строки таблицы
		ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры"); // Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДо"); // (optional) Код единицы измерения, до изменения (Графа 2, строка А)
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод"); // (optional) Код единицы измерения, после изменения (Графа 2, строка Б)
		ТаблицаТоваров.Колонки.Добавить("КоличествоДо"); //(optional) Количество (объем), до изменения (Графа 3, строка А)
		ТаблицаТоваров.Колонки.Добавить("Количество"); // (optional) Количество (объем), после изменения (Графа 3, строка Б)
		ТаблицаТоваров.Колонки.Добавить("ЦенаДо"); // (optional) Цена (тариф) за единицу измерения, до изменения (Графа 4, строка А)
		ТаблицаТоваров.Колонки.Добавить("Цена"); // (optional) Цена (тариф) за единицу измерения, после изменения (Графа 4, строка Б)
		
		//(optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5)
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДо"); //  Стоимость до изменения (Строка А)
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС"); // Стоимость после изменения (Строка Б)
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСУменьшение"); //(optional) Стоимость -  увеличение (Строка В)
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСУвеличение"); //(optional) Стоимость - уменьшение (Строка Г)
		
		// В том числе сумма акциза, до изменения (Графа 6, строка А)
		ТаблицаТоваров.Колонки.Добавить("АкцизаДо");
		ТаблицаТоваров.Колонки.Добавить("Акциза");
		
		// Налоговая ставка, до изменения (Графа 7, строка А)
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДо"); // Налоговая ставка - величина (строка: 0, 10, 18, 20, 10/110, 18/118, без НДС)
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТипДо"); // Тип налоговой ставки (процент, дробь, текст)
		
		// Налоговая ставка, после  изменения (Графа 7, строка Б)
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС"); // Налоговая ставка - величина (строка: 0, 10, 18, 20, 10/110, 18/118, без НДС)
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип"); // Тип налоговой ставки (процент, дробь, текст)
		
		
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСДо"); // Сумма НДС, предъявляемая покупателю, до изменения (Графа 8)
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС"); // Сумма НДС, предъявляемая покупателю, до изменения (Графа 8)
		
		// Сумма налога, увеличение (уменьшение) (Графа 8, строки В, Г)
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСУменьшение");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСУвеличение");
		
		//Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9)
		ТаблицаТоваров.Колонки.Добавить("СуммаДо");
		ТаблицаТоваров.Колонки.Добавить("Сумма");
		ТаблицаТоваров.Колонки.Добавить("СуммаУменьшение");
		ТаблицаТоваров.Колонки.Добавить("СуммаУвеличение");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ЭСФТаблицаСведенийОТоваре()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	// Сведения о товаре (работе, услуге)
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки"); // Номер строки таблицы
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры"); // Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод"); // (optional) Код единицы измерения (Графа 2)
	ТаблицаТоваров.Колонки.Добавить("Количество"); // (optional) Количество (объем) (Графа 3)
	ТаблицаТоваров.Колонки.Добавить("Цена"); // (optional) Цена (тариф) за единицу измерения (Графа 4)
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС"); // (optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5)
	ТаблицаТоваров.Колонки.Добавить("Сумма"); // Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9)
	ТаблицаТоваров.Колонки.Добавить("Акциза"); // В том числе сумма акциза (Графа 6)
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС"); // Налоговая ставка - величина
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип"); // Тип налоговой ставки
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС"); // Сумма НДС, предъявляемая покупателю (Графа 8)
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения"); // (optional) Цифровой код страны происхождения товара (Графа 10)
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации"); // (optional) Номер таможенной декларации (Графа11)
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбъектCML = ПолучитьОбъектТипаCML(ИмяОбъекта, ПространствоИменСхемы);
	
	Если ОбъектCML <> Неопределено И ТипЗнч(ВидФасета) = Тип("ВидФасетаXDTO") Тогда
		СвойстваОбъекта = ОбъектCML.Свойства();
		ИскомоеСвойство = СвойстваОбъекта.Получить(ИмяСвойства);
		Если ИскомоеСвойство <> Неопределено Тогда
			Фасет = ИскомоеСвойство.Тип.Фасеты.Получить(ВидФасета);
			ВозвращаемоеЗначение = Фасет.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

Процедура СформироватьТЗПоНаборуДанныхXDTO(ТЗ, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных = Неопределено,
	ЕстьСвойствоИдФайл = Ложь, ИмяТЧ = Неопределено, НомерСтроки = Неопределено, ИменаДопКолонок = "")
	
	КС80 = Новый КвалификаторыСтроки(80);
	КС255 = Новый КвалификаторыСтроки(255);
	КС3000 = Новый КвалификаторыСтроки(3000);
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ОписаниеТиповС80 = Новый ОписаниеТипов(МассивСтрока, , КС80);
	ОписаниеТиповС255 = Новый ОписаниеТипов(МассивСтрока, , КС255);
	ОписаниеТиповС3000 = Новый ОписаниеТипов(МассивСтрока, , КС3000);
	МассивТипЭД = Новый Массив;
	МассивТипЭД.Добавить(Тип("СправочникСсылка.ЭДПрисоединенныеФайлы"));
	МассивТипЭД.Добавить(Тип("Структура"));
	ОписаниеТиповЭД = Новый ОписаниеТипов(МассивТипЭД);
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ИД", ОписаниеТиповС80);
	ТЗ.Колонки.Добавить("Артикул", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Наименование", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКод",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Описание",ОписаниеТиповС3000);
	ТЗ.Колонки.Добавить("ЭД",ОписаниеТиповЭД);
	
	Для Каждого ТекЭлемент Из НаборДанных Цикл
		НовЗапись = ТЗ.Добавить();
		НовЗапись.ЭД = ЭД;
		Если ЕстьСвойствоИдФайл Тогда
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ИнфПолСтр) И ДеревоДопДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Найти(ТекЭлемент.ИнфПолСтр, "xml") = 0 Тогда
				СвойстваТекЭлемента = ТекЭлемент.Свойства();
				Если СвойстваТекЭлемента.Получить("НомТов") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомТов);
				ИначеЕсли СвойстваТекЭлемента.Получить("НомСтр") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомСтр);
				ИначеЕсли СвойстваТекЭлемента.Получить("Номер") <> Неопределено Тогда
					НомСтр = Строка(НомерСтроки) + "." + ТекЭлемент.Номер;
				Иначе
					Продолжить;
				КонецЕсли;
				ПрочитатьИнфПол(ТекЭлемент.ИнфПолСтр, ДеревоДопДанных, ИмяТЧ, НомСтр);
				
				Если ДеревоДопДанных <> Неопределено И ДеревоДопДанных.Строки.Количество() > 0 Тогда
					СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
					СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
					Если СтрокиДерева.Количество() > 0 Тогда
						СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомСтр);
						СтрокиДерева = СтрокиДерева[0].Строки.НайтиСтроки(СтруктураПоиска);
						Если СтрокиДерева.Количество() > 0 Тогда
							СтрокаВладелец = СтрокиДерева[0];
							СтрокаИД = СтрокаВладелец.Строки.Найти("ИД", "ИмяРеквизита");
							СтрокаБЕНаименованиеПолное = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименованиеПолное", "ИмяРеквизита");
							СтрокаБЕМСокращение = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаМеждународноеСокращение", "ИмяРеквизита");
							СтрокаБЕНаименование = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименование", "ИмяРеквизита");
							СтрокаБЕКод = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаКод", "ИмяРеквизита");
							Если СтрокаИД <> Неопределено Тогда
								НовЗапись.ИД = СтрокаИД.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименованиеПолное <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаНаименованиеПолное = СтрокаБЕНаименованиеПолное.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕМСокращение <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаМеждународноеСокращение = СтрокаБЕМСокращение.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименование <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаНаименование = СтрокаБЕНаименование.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕКод <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаКод = СтрокаБЕКод.ЗначениеРеквизита;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Элемент = ТекЭлемент;
			Иначе
				ОбъектXML.УстановитьСтроку(ТекЭлемент.ИнфПолСтр);
				Элемент = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
			КонецЕсли;
		Иначе
			Элемент = ТекЭлемент;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("ИД") = Неопределено Тогда
			НовЗапись.ИД = Элемент.ИД;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Наименование") = Неопределено Тогда
			НовЗапись.Наименование = Элемент.Наименование;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимРабот") = Неопределено Тогда
			НовЗапись.Наименование = ТекЭлемент.НаимРабот;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимТов") = Неопределено Тогда
			НовЗапись.Наименование = ТекЭлемент.НаимТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ_Тов") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ_Тов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимЕдИзм") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаНаименование = ТекЭлемент.НаимЕдИзм;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("БазоваяЕдиница") = Неопределено Тогда
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Код") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаКод = Элемент.БазоваяЕдиница.Код;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Наименование") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименование = Элемент.БазоваяЕдиница.Наименование;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("НаименованиеПолное") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименованиеПолное = Элемент.БазоваяЕдиница.НаименованиеПолное;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("МеждународноеСокращение") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаМеждународноеСокращение = Элемент.БазоваяЕдиница.МеждународноеСокращение;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Артикул") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.Артикул;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("АртикулТов") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.АртикулТов;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Описание") = Неопределено Тогда
			НовЗапись.Описание = Элемент.Описание;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("ДополнительныеРеквизиты") = Неопределено Тогда
			Для Каждого ЭлементДанных из Элемент.ДополнительныеРеквизиты Цикл
				Если ТЗ.Колонки.Найти("Доп_" + ЭлементДанных.Наименование) = Неопределено Тогда
					ТЗ.Колонки.Добавить("Доп_" + ЭлементДанных.Наименование, ОписаниеТиповС255);
					ИменаДопКолонок = ИменаДопКолонок + ", "+ "Доп_" + ЭлементДанных.Наименование;
				КонецЕсли;
				Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
					НовЗапись["Доп_" + ЭлементДанных.Наименование] = ЭлементЗначения;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСтруктуруПоДопДанным(Дерево, СтруктураДопДанных)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
			Структура = Новый Структура;
			СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, Структура);
		ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
		Иначе
			СтруктураДопДанных.Вставить(СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		СтруктураОтбора = Новый Структура("ИмяРеквизита", "Набор");
		СтрокиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаДопДанных Из СтрокиДопДанные Цикл
			Для Каждого СтрокаДерева Из СтрокаДопДанных.Строки Цикл
				Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
					Структура = Новый Структура;
					СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ЗначениеРеквизита, Структура);
				ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
					НовСтрока = Неопределено;
					Для Каждого Строка Из СтрокаДерева.Строки Цикл
						Если Строка.ЗначениеРеквизита = "Структура" Тогда
							Если НовСтрока = Неопределено Тогда
								НовСтрока                   = НовыйЭД.Строки.Добавить();
								НовСтрока.Реквизит          = СтрокаДерева.ЗначениеРеквизита;
								НовСтрока.ЗначениеРеквизита = СтрокаДерева.ИмяРеквизита;
							КонецЕсли;
							Структура = Новый Структура;
							СформироватьСтруктуруПоДопДанным(Строка, Структура);
							ДобавитьРеквизитШапкиОбъекта(НовСтрока, Строка.ИмяРеквизита, Структура);
						Иначе
							ДобавитьРеквизитШапкиОбъекта(НовыйЭД, Строка.ЗначениеРеквизита, Строка.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
				КонецЕсли;
			КонецЦикла;
			ВозвращаемоеЗначение = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, НомерСтроки, ИмяТЧ, Ошибка)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
		СтрокиШапкиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиШапкиДопДанные.Количество() > 0 Тогда
			СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиТЧДопДанные = СтрокиШапкиДопДанные[0].Строки.НайтиСтроки(СтруктураОтбора);
			Если СтрокиТЧДопДанные.Количество() > 0 Тогда
				Для Каждого СтрокаДерева Из СтрокиТЧДопДанные[0].Строки Цикл
					Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
						Структура = Новый Структура;
						СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
						СписокТЧ.Добавить(Структура, СтрокаДерева.ЗначениеРеквизита);
					ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
						СписокТЧ.Добавить(СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"), СтрокаДерева.ЗначениеРеквизита);
					Иначе
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.ИмяРеквизита);
					КонецЕсли;
				КонецЦикла;
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция АктВНовомФормате(ИмяФайла)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Документ" Тогда
			Пока ЧтениеXML.СледующийАтрибут() Цикл
				Если ЧтениеXML.ЛокальноеИмя = "ВремДок" Тогда
					Если СтрДлина(ЧтениеXML.Значение) = 8 Тогда   // например 12.45.55
						ЧтениеXML.Закрыть();
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка дополнительных данных ЭД

// Формирование xml-файла/строки

Функция РекурсивноОбработатьСтрокиДерева(МассивСтрок, Рекв, ПространствоИменСхемы, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, ТекстОшибки)
	
	Для Каждого СтрокаДЗ Из МассивСтрок Цикл
		Если НЕ ЮридическиЗначимый И СтрокаДЗ.ЮридическиЗначимый Тогда
			// Если ЮридическиЗначимый = Истина, то входящий МассивСтрок содержит только юридически значимые реквизиты.
			// В противном случае, МассивСтрок - смешанный, поэтому надо пропускать юридически значимые реквизиты (т.к. они
			// будут передаваться отдельно от незначимых, в разных файлах).
			Продолжить;
		КонецЕсли;
		Реквизит = ПолучитьОбъектТипаCML("Реквизит.Реквизит", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Реквизит, "Имя", СтрокаДЗ.ИмяРеквизита, , ТекстОшибки);
		Если ЗначениеЗаполнено(СтрокаДЗ.ЗначениеРеквизита) Тогда
			ЗаполнитьСвойствоXDTO(Реквизит, "Значение", СтрокаДЗ.ЗначениеРеквизита, , ТекстОшибки);
		КонецЕсли;
		МассивСтрокДЗ = СтрокаДЗ.Строки;
		Если МассивСтрокДЗ.Количество() > 0 Тогда // добавляем наборы и массивы данных:
			РекурсивноОбработатьСтрокиДерева(МассивСтрокДЗ, Реквизит, ПространствоИменСхемы, ЮридическиЗначимый,
				ЕстьДанныеДляДопФайла, ТекстОшибки);
			Рекв.Реквизит.Добавить(Реквизит);
		Иначе // добавляем конечные значения реквизитов:
			Если ЮридическиЗначимый = СтрокаДЗ.ЮридическиЗначимый Тогда
				Рекв.Реквизит.Добавить(Реквизит);
				ЕстьДанныеДляДопФайла = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция СформироватьУниверсальныйДопФайлCML(СтруктураПараметров,
											ТекстОшибки,
											Знач ЮридическиЗначимый = Ложь,
											ИмяТЧ = Неопределено,
											НомерСтроки = Неопределено)
	
	// ИмяТЧ и НомерСтроки заполняются только для юридически значимой информации (информация - которая будет помещена в
	// основном файле (ИнфПол, ИнфПолСтр) и подписана ЭЦП).
	Если ЗначениеЗаполнено(ИмяТЧ) ИЛИ НомерСтроки <> Неопределено Тогда
		ЮридическиЗначимый = Истина;
	КонецЕсли;
	ДопФайлСформирован = Ложь;
	ПространствоИменСхемы = "ДопФайлУниверсальный";
	Попытка
		ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
		Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") И ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			ЕстьДанныеДляДопФайла = Ложь;
			ДопФайл = ПолучитьОбъектТипаCML("ДопФайл", ПространствоИменСхемы);
			Данные = ПолучитьОбъектТипаCML("ДопФайл.Данные", ПространствоИменСхемы);
			
			Если НомерСтроки <> Неопределено Тогда
				// Если НомерСтроки - заполнено, то формируется строка ИнфПолСтр по юридически значимой информации и конкретной строке ТЧ.
				СтОтбора = Новый Структура;
				СтОтбора.Вставить("ТЧ", Истина);
				СтОтбора.Вставить("ИмяРеквизита", "Список");
				СтОтбора.Вставить("ЗначениеРеквизита", ИмяТЧ);
				МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если МассивСтрокДЗ.Количество() > 0 Тогда
					// В нужной ТЧ найдем требующуюся строку (НомерСтроки):
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомерСтроки);
					МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки;//.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Если ЮридическиЗначимый=Истина, значит формируется строка ИнфПол(ИнфПолСтр).
				Если ЮридическиЗначимый Тогда
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", ИмяТЧ);
					МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки;//.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
					КонецЕсли;
				Иначе
					МассивСтрокДЗ = ДеревоДопДанных.Строки;
				КонецЕсли;
			КонецЕсли;

			Если МассивСтрокДЗ.Количество() > 0 Тогда
				РекурсивноОбработатьСтрокиДерева(МассивСтрокДЗ, Данные, ПространствоИменСхемы, ЮридическиЗначимый,
					ЕстьДанныеДляДопФайла, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ДопФайл, "Данные", Данные, Истина, ТекстОшибки);
			КонецЕсли;
			
			ИдДопФайла = Новый УникальныйИдентификатор;
			ЗаполнитьСвойствоXDTO(ДопФайл, "ИдФайла", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ИдДопФайла", Строка(ИдДопФайла), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ВерсияФормата", "1", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ДатаФормирования", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ДопФайл.Проверить();
			
			Если ЕстьДанныеДляДопФайла И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЮридическиЗначимый Тогда
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.УстановитьСтроку();
					ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДопФайл);
					СтрXML = ЗаписьXML.Закрыть();
					НачПоз = Найти(СтрXML, "<Данные>");
					КолСимв = Найти(СтрXML, "</Данные>") - НачПоз + СтрДлина("</Данные>");
					СтрXML = Сред(СтрXML, НачПоз, КолСимв);
					СтруктураПараметров.Вставить("ИнфПол", СтрXML);
				Иначе
					СтруктураПараметров.Вставить("ИдентификаторДопФайла", ИдДопФайла);
					
					ПолноеИмяФайла = ЭлектронныеДокументыСлужебный.РабочийКаталог() + ИдДопФайла + ".xml";
					СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ПолноеИмяФайла);
					ВыгрузитьЭДвФайл(ДопФайл, ПолноеИмяФайла, Ложь);
				КонецЕсли;
				ДопФайлСформирован = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДопФайлСформирован;
	
КонецФункции

// Разбор xml-файла/строки

Функция РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Для Каждого Реквизит Из ОбъектРазбора.Реквизит Цикл
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", Реквизит.Имя, Реквизит.Значение);
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора, Истина);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита = Реквизит.Имя;
			СтрДЗ.ЗначениеРеквизита = Реквизит.Значение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		Если Реквизит.Реквизит <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ, ЮридическиЗначимый);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Универсальный доп. файл, представляет из себя дерево с неограниченным уровнем вложений. Каждый элемент дерева имеет
// реквизиты (Имя, Значение) и подчиненные элементы (ветки), с таким же составом, как и у текущего элемента.
//
// Параметры:
//  ДопФайл - строка - путь к файлу.
//
// Возвращаемое значение - Неопределено, либо ДеревоЗначений.
//
Функция РазобратьУниверсальныйДопФайл(ДопФайл)
	
	ДеревоДопДанных = ДеревоДопДанных();
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ДопФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
		ОбъектXML.Закрыть();
		Если ЭД.Данные <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(ЭД.Данные, ДеревоДопДанных);
		КонецЕсли;
	Исключение
		ДеревоДопДанных = Неопределено;
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ДопФайл, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ДеревоДопДанных;
	
КонецФункции

Процедура ПрочитатьИнфПол(Знач СтрокаXML, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки = Неопределено)
	
	// Тег <Данные> - обязательный для xml-строки в формате универсального доп.файла.
	Если Найти(СтрокаXML, "<Данные>") > 0 Тогда
		СтрокаXML = "<ДопФайл ИдФайла=""1"" ИдДопФайла=""1"" ВерсияФормата=""1"" ДатаФормирования=""2000-01-01T00:00:00"" xmlns=""ДопФайлУниверсальный"">"
			+ СтрокаXML + "</ДопФайл>";
			
		ДеревоСозданоРаньше = Истина;
		Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
			ДеревоДопДанных = ДеревоДопДанных();
			ДеревоСозданоРаньше = Ложь;
		КонецЕсли;
		ОбъектXML = Новый ЧтениеXML;
		
		Попытка
			ОбъектXML.УстановитьСтроку(СтрокаXML);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
			ОбъектXML.Закрыть();
			Если ЭД.Данные <> Неопределено Тогда
				СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
				Если СтрокаДЗ = Неопределено Тогда
					СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
					СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
					Если НомерСтроки = Неопределено Тогда
						СтрокаДЗ.ИмяРеквизита = "Набор";
					Иначе
						СтрокаДЗ.ИмяРеквизита = "Список";
					КонецЕсли;
				КонецЕсли;
				Если НомерСтроки <> Неопределено Тогда
					СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки)));
					Если СтрокиДЗ.Количество() > 0 Тогда
						СтрокаДЗ = СтрокиДЗ[0];
					Иначе
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				РекурсивноРазобратьДопФайл(ЭД.Данные, СтрокаДЗ, Истина);
			КонецЕсли;
		Исключение
			Если Не ДеревоСозданоРаньше Тогда
				ДеревоДопДанных = Неопределено;
			КонецЕсли;
			ОбъектXML.Закрыть();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возникла ошибка при чтении данных из строки доп.данных. (%1)'"), ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Разбор дерева доп. данных для печатных форм

Функция СформироватьДопДанныеСтрок(ДеревоДопДанных, ИмяЧитаемойТаблицы, ТаблицаВозврата)
	
	СтруктураВозврата = Новый Структура("ЕстьПодписанные, ЕстьНеПодписанные", Ложь, Ложь);
	
	Если ДеревоДопДанных <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяЧитаемойТаблицы);
		СтрокиСписка = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиСписка.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("Нпп");
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			Для Каждого СтрокаСписка Из СтрокиСписка[0].Строки Цикл
				ТаблицаДопДанных.Очистить();
				ПрочитатьСтрокиДереваРекурсивно(СтрокаСписка.Строки, ТаблицаДопДанных);
				
				Если ТаблицаДопДанных.Количество() > 0 Тогда
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
					КонецЦикла;
					ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
					СтрокаТЗВозврата = ТаблицаВозврата.Добавить();
					СтрокаТЗВозврата.НомерСтр = СтрокаСписка.ЗначениеРеквизита;
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						Если СтрокаТЗ.ЮридическиЗначимый Тогда
							СтруктураВозврата.ЕстьПодписанные = Истина;
							СтрокаТЗВозврата.ПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.ПодписанныеДанные),
								СтрокаТЗВозврата.ПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						Иначе
							СтруктураВозврата.ЕстьНеПодписанные = Истина;
							СтрокаТЗВозврата.НеПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.НеПодписанныеДанные),
								СтрокаТЗВозврата.НеПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПрочитатьСтрокиДереваРекурсивно(СтрокиДерева, ТаблицаДопДанных, ИмяРодителя = "")
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" ИЛИ СтрокаДерева.ИмяРеквизита = "Массив" 
			ИЛИ СтрокаДерева.ИмяРеквизита = "Список" ИЛИ СтрокаДерева.ИмяРеквизита = "Нпп"
			ИЛИ СтрокаДерева.ЗначениеРеквизита = "Структура" Тогда
			
			ИмяРодителя = ИмяРодителя + СтрокаДерева.ЗначениеРеквизита;
			ПрочитатьСтрокиДереваРекурсивно(СтрокаДерева.Строки, ТаблицаДопДанных, ИмяРодителя);
		Иначе
			СтрокаТЗ = ТаблицаДопДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент)
	
	Если ДеревоДопДанных <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", "Шапка");
		СтрокиШапки = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиШапки.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			ПрочитатьСтрокиДереваРекурсивно(СтрокиШапки, ТаблицаДопДанных);
			
			Если ТаблицаДопДанных.Количество() > 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ДопДанныеШапки_Шапка");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакетаСЭЦП = Макет.ПолучитьОбласть("ДопДанныеШапки_Строка");
				ОбластьМакетаБезЭЦП = Макет.ПолучитьОбласть("ДопДанныеШапки_СтрокаБезЭЦП");
				ТаблицаДопДанных.Колонки.Добавить("Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
				КонецЦикла;
				ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					ОбластьМакета = ?(СтрокаТЗ.ЮридическиЗначимый, ОбластьМакетаСЭЦП, ОбластьМакетаБезЭЦП);
					ОбластьМакета.Параметры.Заполнить(СтрокаТЗ);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с документами основаниями

// Только для внутреннего использования
Функция ПолучитьДокументОснование(Идентификатор)
	
	ДокументОснование = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Наименование = &Наименование
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|	И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|		ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
	|	ИЛИ (ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|		И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ОтчетОПродажахКомиссионногоТовара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("Наименование", Идентификатор);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокументОснование = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьПараметрыДокументовОснований(ДокументыОснования)
	
	ТаблицаПараметровДокументовОснований = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|			ТОГДА ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.Наименование
	|		ИНАЧЕ ЭДПрисоединенныеФайлы.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|			ТОГДА ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ВидЭД
	|		ИНАЧЕ ЭДПрисоединенныеФайлы.ВидЭД
	|	КОНЕЦ КАК ВидЭД,
	|	ВЫБОР
	|		КОГДА НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|			ТОГДА ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.НомерДокументаОтправителя
	|		ИНАЧЕ ЭДПрисоединенныеФайлы.НомерДокументаОтправителя
	|	КОНЕЦ КАК НомерДокументаОтправителя,
	|	ВЫБОР
	|		КОГДА НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|			ТОГДА ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ДатаДокументаОтправителя
	|		ИНАЧЕ ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя
	|	КОНЕЦ КАК ДатаДокументаОтправителя
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла В(&ВладелецФайла)
	|	И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|			ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументыОснования);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТаблицаПараметровДокументовОснований = Результат.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаПараметровДокументовОснований;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Типы объектов

// Получает имя владельца справочника НоменклатураПоставщика.
//
// Возвращаемое значение:
//  ИмяСправочника - строковое имя владельца.
//
Функция ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков()
	
	ИмяРеквизитаВладельца = Неопределено;
	ЭлектронныеДокументыПереопределяемый.ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца);
	
	Если ИмяРеквизитаВладельца = Неопределено Тогда // не задано соответствие
		ТекстСообщения = НСтр("ru = 'В коде прикладного решения необходимо указать имя реквизита для владельца номенклатуры поставщиков.'");
		ЗаписьЖурналаРегистрации(ЭлектронныеДокументыСлужебный.ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(),
								 УровеньЖурналаРегистрации.Предупреждение,
								 ,
								 ,
								 ТекстСообщения);
		ИмяРеквизитаВладельца = "";
	КонецЕсли;
	
	Возврат ИмяРеквизитаВладельца;
	
КонецФункции

// Определяет, является ли параметр ссылкой на номенклатуру
//
// Параметры:
//  СсылкаНаОбъект - любой объект.
//
// Возвращаемое значение:
//  Булево - Истина, если это ссылка на элемент справочника Номенклатура ИЛИ НоменклатураПоставщиков
//
Функция ЭтоНоменклатура(СсылкаНаОбъект)
	
	Результат = Ложь;
	
	Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ОпределитьТипОбъекта("Номенклатура"));
	Если НЕ Результат И ОпределитьТипОбъекта("НоменклатураПоставщиков") <> Неопределено Тогда
		Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ОпределитьТипОбъекта("НоменклатураПоставщиков"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет тип объекта по текстовому представлению.
//
// Параметры:
//  ОписаниеТипаОбъекта - строка, текстовое представление типа объекта.
//
Функция ОпределитьТипОбъекта(ОписаниеТипаОбъекта)
	
	ТипОбъекта = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ОписаниеТипаОбъекта);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		ТипОбъекта = "СправочникСсылка." + ИмяПрикладногоСправочника;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

Процедура ПрочитатьВыпискуСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка;
		
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОрганизации",                     ЭД.orgName);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоставленияВыписки",                      ЭД.stmtDateTime);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК",                                         ЭД.bic);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоследнейОперации",                       ЭД.lastMovetDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "РасчСчет",                                    ЭД.Acc);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачальныйОстаток",                            ЭД.enterBal);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонечныйОстаток",                             ЭД.outBal);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала",                                  ЭД.beginDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",                                   ЭД.endDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоСписано",                                ЭД.debetSum);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоПоступило",                              ЭД.creditSum);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПредыдущейОперации",                      ЭД.DatePLast);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КурсНаНачалоПериода",                         ЭД.rateIn);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КурсНаКонецПериода",                          ЭД.rateOut);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВходящийОстатокВНациональнойВалюте",          ЭД.enterBalNat);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИсходящийОстатокВНациональнойВалюте",         ЭД.outBalNat);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлановыйИсходящийОстаток",                    ЭД.planOutBal);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлановыйИсходящийОстатокВНациональнойВалюте", ЭД.planOutBalNat);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипЗапросаВыписки",                           ЭД.stmtType);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокумента",                              ЭД.docNum);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "УчетнаяЗапись",                               ЭД.accountName);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДебетВНациональнойВалюте",                    ЭД.debetSumNat);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КредитВНациональнойВалюте",                   ЭД.creditSumNat);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Исполнитель",                                 ЭД.author);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДопИнформация",                               ЭД.docComment);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторВыписки",                        ЭД.docId);
	
	Если НЕ ЭД.Docs = Неопределено Тогда
		Для Каждого Документ из ЭД.Docs.TransInfo Цикл
			РеквизитыДокумента = Новый СписокЗначений;
			РеквизитыДокумента.Добавить(Документ.chargeOffDate,    "ДатаСписания");
			РеквизитыДокумента.Добавить(Документ.dpp,              "ДатаПеречисления");
			РеквизитыДокумента.Добавить(Документ.fileDate,         "ДатаПостановкиВКартотеку");
			РеквизитыДокумента.Добавить(Документ.recDate,          "ДатаОтметкиБанкаПолучателя");
			РеквизитыДокумента.Добавить(Документ.receiptDate,      "ДатаПоступленияВБанкПлательщика");
			РеквизитыДокумента.Добавить(Документ.signDate,         "ДатаОтметкиБанкомПлательщика");
			РеквизитыДокумента.Добавить(Документ.bankNumDoc,       "Номер");
			РеквизитыДокумента.Добавить(Документ.branchCode,       "КодПодразделения");
			РеквизитыДокумента.Добавить(Документ.carryDate,        "ДатаСписано");
			РеквизитыДокумента.Добавить(Документ.dc,               "ПризнакПриложения");
			РеквизитыДокумента.Добавить(Документ.docCurr,          "ВалютаПлатежа");
			РеквизитыДокумента.Добавить(Документ.docDate,          "Дата");
			РеквизитыДокумента.Добавить(Документ.docNum,           "НомерРасчетногоДокумента");
			РеквизитыДокумента.Добавить(Документ.docSum,           "Сумма");
			РеквизитыДокумента.Добавить(Документ.docSumNat,        "СуммаДокументаВНациональнойВалюте");
			РеквизитыДокумента.Добавить(Документ.paymentOrder,     "Очередность");
			РеквизитыДокумента.Добавить(Документ.paytKind,         "ВидПлатежа");
			РеквизитыДокумента.Добавить(Документ.purpose,          "НазначениеПлатежа");
			РеквизитыДокумента.Добавить(Документ.transKind,        "ВидОплаты");
			РеквизитыДокумента.Добавить(Документ.urgentSBRF,       "ДопУслуга");
			РеквизитыДокумента.Добавить(Документ.docId,            "ИдентификаторДокумента");
			РеквизитыДокумента.Добавить(Документ.payeeName,        "Получатель");
			РеквизитыДокумента.Добавить(Документ.payeeName,        "Получатель1");
			РеквизитыДокумента.Добавить(Документ.payeeAcc,         "ПолучательСчет");
			РеквизитыДокумента.Добавить(Документ.payeeINN,         "ПолучательИНН");
			РеквизитыДокумента.Добавить(Документ.payeeBankBic,     "БИКБанкаПолучателя");
			РеквизитыДокумента.Добавить(Документ.payeeBankCorrAcc, "СчетБанкаПолучателя");
			РеквизитыДокумента.Добавить(Документ.payeeBankName,    "НаименованиеБанкаПолучателя");
			РеквизитыДокумента.Добавить(Документ.payerName,        "Плательщик");
			РеквизитыДокумента.Добавить(Документ.payerName,        "Плательщик1");
			РеквизитыДокумента.Добавить(Документ.payerAcc,         "ПлательщикСчет");
			РеквизитыДокумента.Добавить(Документ.payerINN,         "ПлательщикИНН");
			РеквизитыДокумента.Добавить(Документ.payerBankBic,     "БИКБанкаПлательщика");
			РеквизитыДокумента.Добавить(Документ.payerBankCorrAcc, "СчетБанкаПлательщика");
			РеквизитыДокумента.Добавить(Документ.payerBankName,    "НаименованиеБанкаПлательщика");
			РеквизитыДокумента.Добавить(Документ.s_TI,             "Переоценка");
			РеквизитыДокумента.Добавить(Документ.Info,             "ДополнительнаяИнформация");

			Если Не Документ.DepartmentalInfo = Неопределено Тогда
				РеквизитыДокумента.Добавить(Истина, "ЭтоНалоговыйПлатеж");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.cbc,          "ПоказательКБК");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.docDate,      "ПоказательДаты");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.docNo,        "ПоказательНомера");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.drawerStatus, "СтатусСоставителя");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.kpp102,       "ПлательщикКПП");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.kpp103,       "ПолучательКПП");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.okato,        "КодОКАТО");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.paytReason,   "ПоказательОснования");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.taxPaytKind,  "ПоказательТип");
				РеквизитыДокумента.Добавить(Документ.DepartmentalInfo.taxPeriod,    "ПоказательПериода");
			Иначе
				РеквизитыДокумента.Добавить(Ложь, "ЭтоНалоговыйПлатеж");
			КонецЕсли;
			Если Не Документ.DiffDoc = Неопределено Тогда
				РеквизитыДокумента.Добавить(Истина, "ЭтоКартотека");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.docDateCard,              "ДатаОтсылкиДок");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.docNumberCard,            "НомерДокументаКартотека");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.docShifr,                 "ШифрДокументаКартотека");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditAcceptDate, "СрокАкцепта");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditAddCond,    "ДополнУсловия");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditDemandDocs, "ПлатежПоПредст");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditPayAcc,     "НомерСчетаПоставщика");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditPaymCond,   "Условие1");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditPeriodVal,  "СрокПлатежа");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.letterOfCreditType,       "ВидАккредитива");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.NumPaymentCard,           "НомерПлатежа");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.OperContent,              "СодержаниеОперации");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.PayingCondition,          "УсловиеОплаты");
				РеквизитыДокумента.Добавить(Документ.DiffDoc.SumRestCard,              "СуммаОстаткаПлатежа");
			Иначе
				РеквизитыДокумента.Добавить(Ложь, "ЭтоКартотека");
			КонецЕсли;
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыДокумента);
		КонецЦикла
	КонецЕсли;
	
	Если НЕ ЭД.InfoForStamp = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазваниеБанка", ЭД.InfoForStamp.BankName);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отделение",     ЭД.InfoForStamp.BranchName);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Офис",          ЭД.InfoForStamp.SubBranchName);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Филиал",        ЭД.InfoForStamp.SubBranchNum);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрочитатьШтампСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ШтампБанка;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазваниеБанка", ЭД.BankName);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бранч",         ЭД.BranchName);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДопОфис",       ЭД.SubBranchName);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Филиал",        ЭД.SubBranchNum);

КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
		НовыйЭД.ОписаниеТипа = "Сбербанк";
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокумента",        ЭД.AccDoc.AccDocNo);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДокумента",         ЭД.AccDoc.docDate);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа",            ЭД.AccDoc.paytKind);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСозданияДокумента", ЭД.AccDoc.docDate);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОперации",           ЭД.AccDoc.TransKind);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяУслуга",  ЭД.AccDoc.urgentSBRF);
		
		Если НЕ ЭД.Credit = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦелевоеПоручение",                ЭД.Credit.flagTargetAssignment);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИспользоватьСобственныеСредства", ЭД.Credit.flagUseOwnMeans);
			Если НЕ ЭД.Credit.Свойства().Получить("CredConNum") = Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерКредитногоДоговора",     ЭД.Credit.CredConNum);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЭД.AccDoc.Свойства().Получить("CodeVO") = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодВидаВалютнойОперации", ЭД.AccDoc.CodeVO);
		КонецЕсли;
		
		Если НЕ ЭД.DepartmentalInfo = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежиВБюджет",      Истина);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтатусСоставителя",   ЭД.DepartmentalInfo.drawerStatus);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодБК",               ЭД.DepartmentalInfo.cbc);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодОКАТО",            ЭД.DepartmentalInfo.okato);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательОснования", ЭД.DepartmentalInfo.paytReason);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательПериода",   ЭД.DepartmentalInfo.taxPeriod);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательНомера",    ЭД.DepartmentalInfo.docNo);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательДаты",      ЭД.DepartmentalInfo.docDate);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательТипа",      ЭД.DepartmentalInfo.taxPaytKind);
		КонецЕсли;
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИННПлательщика",        ЭД.Payer.inn);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПППлательщика",        ЭД.Payer.kpp);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаЧислом",           ЭД.AccDoc.docSum);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента",        ЭД.AccDoc.docSum);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстПлательщика",      ЭД.Payer.Name);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаПлательщика", ЭД.Payer.PersonalAcc);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанкаПлательщика", ЭД.Payer.Bank.Name);
		Если НЕ ЭД.Payer.Bank.Свойства().Получить("BankCity")=Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаселенныйПунктБанкаПлательщика", ЭД.Payer.Bank.BankCity);
		КонецЕсли;
		Если НЕ ЭД.Payer.Bank.Свойства().Получить("SettlementType")=Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипНаселенногоПунктаБанкаПлательщика", ЭД.Payer.Bank.SettlementType);
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИКБанкаПлательщика",  ЭД.Payer.Bank.bic);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СчетБанкаПлательщика", ЭД.Payer.Bank.correspAcc);
		Если НЕ ЭД.Payer.Свойства().Получить("Filial") = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФилиалБанкаПлательщика", ЭД.Payer.Filial);
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанкаПолучателя", ЭД.Payee.Bank.Name);
		Если НЕ ЭД.Payee.Bank.Свойства().Получить("BankCity")=Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаселенныйПунктБанкаПолучателя", ЭД.Payee.Bank.BankCity);
		КонецЕсли;
		Если НЕ ЭД.Payee.Bank.Свойства().Получить("SettlementType")=Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипНаселенногоПунктаБанкаПолучателя", ЭД.Payee.Bank.SettlementType);
		КонецЕсли;
		Если НЕ ЭД.Payee.Свойства().Получить("Filial") = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФилиалБанкаПолучателя", ЭД.Payee.Filial);
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИКБанкаПолучателя",   ЭД.Payee.Bank.bic);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СчетБанкаПолучателя",  ЭД.Payee.Bank.correspAcc);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИННПолучателя",        ЭД.Payee.inn);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПППолучателя",        ЭД.Payee.kpp);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаПолучателя", ЭД.Payee.PersonalAcc);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстПолучателя",      ЭД.Payee.Name);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность",          ЭД.AccDoc.priority);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа",    ЭД.AccDoc.purpose);
		
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",           ЭД.docExtId);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСозданияЗапроса",              ЭД.createTime);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачалаПериода",                ЭД.beginDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияПериода",             ЭД.endDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипЗапроса",                       ЭД.stmtType);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежноеНаименованиеОрганизации", ЭД.orgName);
	Для Каждого Элемент из ЭД.Accounts.Account Цикл
		РеквизитыСчета = Новый СписокЗначений;
		РеквизитыСчета.Добавить(Элемент.bic,       "БИК");
		РеквизитыСчета.Добавить(Элемент.__content, "НомерСчета");
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	КонецЦикла;
			
КонецПроцедуры

Процедура ПрочитатьОтветСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Квитанция;
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТикетСББОЛ",         ЭД.Tickets.Ticket[0].docId);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСозданияКвитка", ЭД.Tickets.Ticket[0].createTime);
	Если НЕ ЭД.Tickets.Ticket[0].Свойства().Получить("Info") = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодСостоянияДокумента", ЭД.Tickets.Ticket[0].Info.statusStateCode);
		Если НЕ ЭД.Tickets.Ticket[0].Info.Свойства().Получить("orgId") = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОрганизации", ЭД.Tickets.Ticket[0].Info.orgId);
		КонецЕсли;
		Если НЕ ЭД.Tickets.Ticket[0].Info.Свойства().Получить("docExtId") = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Tickets.Ticket[0].Info.docExtId);
		КонецЕсли;
		Если НЕ ЭД.Tickets.Ticket[0].Info.BankDate = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСписанияСоСчетаПлательщика", 
				ЭД.Tickets.Ticket[0].Info.BankDate.chargeOffDate);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПостановкиВКартотеку",
				ЭД.Tickets.Ticket[0].Info.BankDate.fileDate);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПостановкиВКартотеку",
				ЭД.Tickets.Ticket[0].Info.BankDate.signDate);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоступленияВБанкПлательщика",
				ЭД.Tickets.Ticket[0].Info.BankDate.receiptDate);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПеречисленияПлатежа",
				ЭД.Tickets.Ticket[0].Info.BankDate.dpp);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПеречисленияПлатежа",
				ЭД.Tickets.Ticket[0].Info.BankDate.recDate);
		КонецЕсли;
		Если НЕ ЭД.Tickets.Ticket[0].Info.MsgFromBank = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "АвторСообщения",   ЭД.Tickets.Ticket[0].Info.MsgFromBank.author);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СообщениеИзБанка", ЭД.Tickets.Ticket[0].Info.MsgFromBank.message);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИнформацияОРасположенииБанка(СтрокаРазбора)

	СтруктураВозврата = Новый Структура("ТипНаселенногоПункта, НазваниеНаселенногоПункта");
	ПозПробела = Найти(СтрокаРазбора, " ");
	Если ПозПробела > 0 Тогда
		СтруктураВозврата.ТипНаселенногоПункта = Сред(СтрокаРазбора, 1, ПозПробела - 1);
		Если ПозПробела < СтрДлина(СтрокаРазбора) Тогда
			СтруктураВозврата.НазваниеНаселенногоПункта = Сред(СтрокаРазбора, ПозПробела + 1);
		КонецЕсли
	КонецЕсли;
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Платежное поручение.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//   Булево - признак успеха формирования
//
Функция СформироватьПлатежноеПоручениеСбербанкCML(СтруктураПараметров) 
		
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	Попытка

		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		PayDocRu = ПолучитьОбъектТипаCML("PayDocRu",ПространствоИмен);
		ЗаполнитьСвойствоXDTO(
				PayDocRu,
				"docExtId",
				Строка(СтруктураПараметров.УникальныйИдентификатор),
				Истина,
				ТекстОшибки);
		
		AccDoc = ПолучитьОбъектТипаCML("PayDocRu.AccDoc",ПространствоИмен);

		ЗаполнитьСвойствоXDTO(AccDoc, "purpose",   СтруктураПараметров.НазначениеПлатежа, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(AccDoc, "accDocNo",  СтруктураПараметров.Номер,             Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(AccDoc, "docDate",   СтруктураПараметров.Дата,              Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(AccDoc, "docSum",    СтруктураПараметров.СуммаДокумента,    Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(AccDoc, "transKind", "01",                                  Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				AccDoc,
				"paytKind",
				?(ЗначениеЗаполнено(СтруктураПараметров.ВидПлатежа), НРег(СтруктураПараметров.ВидПлатежа), "0"),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(AccDoc, "priority", СтруктураПараметров.Очередность, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocRu, "AccDoc", AccDoc, Истина, ТекстОшибки);
		
		Payer = ПолучитьОбъектТипаCML("Payer",ПространствоИмен);
		ЗаполнитьСвойствоXDTO(Payer, "Name", СтруктураПараметров.ПлательщикНаим, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Payer, "inn",         СтруктураПараметров.ПлательщикИНН,      Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Payer, "kpp",         СтруктураПараметров.ПлательщикКПП,            , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Payer, "personalAcc", СтруктураПараметров.ПлательщикРасчСчет, Истина, ТекстОшибки);

		Bank = ПолучитьОбъектТипаCML("Bank",ПространствоИмен);
		ЗаполнитьСвойствоXDTO(Bank, "bic",        СтруктураПараметров.ПлательщикБИКБанка, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Bank, "Name",       СтруктураПараметров.ПлательщикБанк,     Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Bank, "correspAcc", СтруктураПараметров.ПлательщикКоррСчет, Истина, ТекстОшибки);
		ИнформацияОРасположенииБанка = ИнформацияОРасположенииБанка(СтруктураПараметров.ПлательщикГородБанка);
		ЗаполнитьСвойствоXDTO(Bank, "BankCity", ИнформацияОРасположенииБанка.НазваниеНаселенногоПункта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				Bank,
				"SettlementType",
				ИнформацияОРасположенииБанка.ТипНаселенногоПункта,
				Истина,
				ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Payer, "Bank", Bank, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(PayDocRu, "Payer", Payer, Истина, ТекстОшибки);
		
		Payee = ПолучитьОбъектТипаCML("Payee",ПространствоИмен);
		ЗаполнитьСвойствоXDTO(Payee, "Name",        СтруктураПараметров.ПолучательНаим,     Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Payee, "inn",         СтруктураПараметров.ПолучательИНН,      Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Payee, "kpp",         СтруктураПараметров.ПолучательКПП,            , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Payee, "personalAcc", СтруктураПараметров.ПолучательРасчСчет, Истина, ТекстОшибки);
		
		Bank = ПолучитьОбъектТипаCML("Bank",ПространствоИмен);
		ЗаполнитьСвойствоXDTO(Bank, "bic",        СтруктураПараметров.ПолучательБИКБанка, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Bank, "Name",       СтруктураПараметров.ПолучательБанк,     Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Bank, "correspAcc", СтруктураПараметров.ПолучательКоррСчет, Истина, ТекстОшибки);
		ИнформацияОРасположенииБанка = ИнформацияОРасположенииБанка(СтруктураПараметров.ПолучательГородБанка);
		ЗаполнитьСвойствоXDTO(Bank, "BankCity", ИнформацияОРасположенииБанка.НазваниеНаселенногоПункта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
				Bank,
				"SettlementType",
				ИнформацияОРасположенииБанка.ТипНаселенногоПункта,
				Истина,
				ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Payee, "Bank", Bank, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(PayDocRu, "Payee", Payee, Истина, ТекстОшибки);

		Если СтруктураПараметров.ПеречислениеВБюджет Тогда
			DepartmentalInfo =  ПолучитьОбъектТипаCML("PayDocRu.DepartmentalInfo",ПространствоИмен);
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "drawerStatus", СтруктураПараметров.СтатусСоставителя, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "cbc",          СтруктураПараметров.КодБК,             Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "okato",        СтруктураПараметров.КодОКАТО,          Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "paytReason", СтруктураПараметров.ПоказательОснования, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "taxPeriod",  СтруктураПараметров.НалоговыйПериод,     Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "docNo", СтруктураПараметров.НомерНалоговогоДокумента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					DepartmentalInfo,
					"docDate",
					СтруктураПараметров.ДатаНалоговогоДокумента,
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					DepartmentalInfo,
					"taxPaytKind",
					СтруктураПараметров.ТипНалоговогоПлатежа,
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(PayDocRu, "DepartmentalInfo", DepartmentalInfo, , ТекстОшибки);
		КонецЕсли;
		
		PayDocRu.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(PayDocRu, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		ФайлСформирован = Ложь;
		
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Функция ПолучитьДанныеПлатежногоПорученияСбербанкДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить(
						"Номер",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерДокумента"));
	ДанныеДляОбъекта.Вставить(
						"Дата",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДокумента"));
	ДанныеДляОбъекта.Вставить("СекцияДокумент", "ПлатежноеПоручение");
	ДанныеДляОбъекта.Вставить(
						"Сумма",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаЧислом"));
						
	ПлатежиВБюджет = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлатежиВБюджет");
	Если Не ПлатежиВБюджет = Неопределено Тогда
		ДанныеДляОбъекта.Вставить("ЭтоНалоговыйПлатеж", Истина);
		ДанныеДляОбъекта.Вставить(
							"СтатусСоставителя",
							ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СтатусСоставителя"));
		ДанныеДляОбъекта.Вставить(
							"ПоказательКБК",
							ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодБК"));
		ДанныеДляОбъекта.Вставить(
							"ОКАТО",
							ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодОКАТО"));
		ДанныеДляОбъекта.Вставить(
							"ПоказательОснования",
							ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательОснования"));
		ДанныеДляОбъекта.Вставить(
							"ПоказательПериода",
							ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательПериода"));
		ДанныеДляОбъекта.Вставить(
							"ПоказательНомера",
							ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательНомера"));
		ДанныеДляОбъекта.Вставить(
							"ПоказательДаты",
							ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательДаты"));
		ДанныеДляОбъекта.Вставить(
							"ПоказательТипа",
							ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательТипа"));
		Иначе
			ДанныеДляОбъекта.Вставить("ЭтоНалоговыйПлатеж", Ложь);
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить(
						"ВидОплаты",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВидОперации"));
	ДанныеДляОбъекта.Вставить(
						"ВидПлатежа",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВидПлатежа"));
	ДанныеДляОбъекта.Вставить(
						"НазначениеПлатежа",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НазначениеПлатежа"));
	ДанныеДляОбъекта.Вставить(
						"Очередность",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Очередность"));
	ДанныеДляОбъекта.Вставить(
						"Плательщик",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ТекстПлательщика"));
	ДанныеДляОбъекта.Вставить(
						"Плательщик1",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ТекстПлательщика"));
	ДанныеДляОбъекта.Вставить(
						"Плательщик2",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаПлательщика"));
	ДанныеДляОбъекта.Вставить(
						"ПлательщикБанк1",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеБанкаПлательщика"));
	ТипНаселенногоПунктаБанкаПлательщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																						СтрокаОбъекта,
																						"ТипНаселенногоПунктаБанкаПлательщика");
	НаселенныйПунктБанкаПлательщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
												ДеревоРазбора,
												СтрокаОбъекта,
												"НаселенныйПунктБанкаПлательщика");
	ДанныеДляОбъекта.Вставить(
						"ПлательщикБанк2",
						ТипНаселенногоПунктаБанкаПлательщика + " " + НаселенныйПунктБанкаПлательщика);
	ДанныеДляОбъекта.Вставить(
						"ПлательщикБИК",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БИКБанкаПлательщика"));
	ДанныеДляОбъекта.Вставить(
						"ПлательщикИНН",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИННПлательщика"));
	ДанныеДляОбъекта.Вставить(
						"ПлательщикКПП",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КПППлательщика"));
	ДанныеДляОбъекта.Вставить(
						"ПлательщикКорСчет",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаПлательщика"));
	ДанныеДляОбъекта.Вставить(
						"ПлательщикСчет",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаПлательщика"));
						
	ДанныеДляОбъекта.Вставить(
						"Получатель",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ТекстПолучателя"));
	ДанныеДляОбъекта.Вставить(
						"Получатель1",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ТекстПолучателя"));
	ДанныеДляОбъекта.Вставить(
						"Получатель2",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаПолучателя"));
	ДанныеДляОбъекта.Вставить(
						"ПолучательБанк1",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеБанкаПолучателя"));
	ТипНаселенногоПунктаБанкаПолучателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
												ДеревоРазбора,
												СтрокаОбъекта,
												"ТипНаселенногоПунктаБанкаПолучателя");
	НаселенныйПунктБанкаПолучателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
												ДеревоРазбора,
												СтрокаОбъекта,
												"НаселенныйПунктБанкаПолучателя");
	ДанныеДляОбъекта.Вставить(
						"ПолучательБанк2",
						ТипНаселенногоПунктаБанкаПолучателя + " " + НаселенныйПунктБанкаПолучателя);
	ДанныеДляОбъекта.Вставить(
						"ПолучательБИК",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БИКБанкаПолучателя"));
	ДанныеДляОбъекта.Вставить(
						"ПолучательИНН",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИННПолучателя"));
	ДанныеДляОбъекта.Вставить(
						"ПолучательКПП",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КПППолучателя"));
	ДанныеДляОбъекта.Вставить(
						"ПолучательКорСчет",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаПолучателя"));
	ДанныеДляОбъекта.Вставить(
						"ПолучательСчет",
						ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаПолучателя"));
						
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Определяет имя файла электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//
Функция ОпределитьИмяФайлаЭД(ВидЭД, СсылкаНаОбъект, Знач ВерсияЭД = Неопределено)
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НомерВладельца", СсылкаНаОбъект.Номер);
		СтруктураПараметров.Вставить("ДатаВладельца", СсылкаНаОбъект.Дата);
		ВерсияЭД = ?(ВерсияЭД = Неопределено, ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект), ВерсияЭД);
		Если ТипЗнч(ВерсияЭД) = Тип("Дата") Тогда
			ВерсияЭД = Формат(ВерсияЭД, "ДФ=dd.MM.yyyy; ДЛФ=DT; ДП=-");
		КонецЕсли;
		СтруктураПараметров.Вставить("ВерсияЭД", ВерсияЭД);
		СтрокаИмени = ЭлектронныеДокументыСлужебный.ТранслитПредставлениеЭД(ВидЭД, СтруктураПараметров) + ".xml";
	Иначе
		СтрокаИмени = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	КонецЕсли;
	СтрокаИмени = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(СтрокаИмени, Истина);
	
	Возврат СтрокаИмени;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументы1СТакскомСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Оператор ЭДО Такском

// Только для внутреннего использования
Функция СтруктураНастроекТакском() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Наименование", "ООО Такском");
	СтруктураНастроек.Вставить("АдресВебСервиса", "https://1C-api.taxcom.ru/v1.2/API/");
	СтруктураНастроек.Вставить("ИНН", "7704211201");
	СтруктураНастроек.Вставить("ИдентификаторОператора", "2AL");
	
	Возврат СтруктураНастроек;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование контейнера

// Только для внутреннего использования
Функция СформироватьЭДПрисоединенныйФайлПакетаТакском(Конверт, АдресЗашифрованныхДанныхНаКлиенте = Неопределено) Экспорт
	
	КонтейнерСформирован = Ложь;
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	Если ПодготовленныеДокументы.Количество() = 1 Тогда
		
		ТекстОшибки = "";
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(
							"Send",
							ПодготовленныеДокументы[0].УникальныйИдентификатор());
		
		Для Каждого ДокументНаОтправку Из ПодготовленныеДокументы Цикл
			
			// Сохраняем основной файл и дополнительный файл с подписями.
			СтруктураФайловЭД = Новый Структура;
			СтруктураФайловЭД.Вставить("ГлавныйФайл");
			СтруктураФайловЭД.Вставить("ДополнительныйФайл");
			
			//Создадим таблицу подписей для загрузки в дерево транспортной информации такском
			ТаблицаПодписей = Новый ТаблицаЗначений;
			ТаблицаПодписей.Колонки.Добавить("Имя");
			ТаблицаПодписей.Колонки.Добавить("Путь");
			
			СтруктураФайловЭД.Вставить("ГлавныйФайлПодписи", ТаблицаПодписей);
			СтруктураФайловЭД.Вставить("ДополнительныйФайлПодписи", ТаблицаПодписей);
			
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ДокументНаОтправку);
			
			// Шифрование ЭД
			Если Конверт.ДанныеЗашифрованы Тогда
				Если АдресЗашифрованныхДанныхНаКлиенте <> Неопределено Тогда // шифрование произведено на клиенте
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = АдресЗашифрованныхДанныхНаКлиенте;
				Иначе
					ПараметрыШифрования = ЭлектронныеДокументыСлужебный.ПолучитьМассивАдресовСертификатовШифрования(ДокументНаОтправку);
					Если ПараметрыШифрования <> Неопределено Тогда
						Попытка
							НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
							ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
							ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
							ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
							
							МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
							МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
							МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
							МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
						Исключение
							ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
							УдалитьФайлы(АдресКаталога, "*");
							Возврат КонтейнерСформирован;
						КонецПопытки;
						
						МассивСертификатов = Новый Массив;
						Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
							
							ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
							Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
							МассивСертификатов.Добавить(Сертификат);
						КонецЦикла;
						
						ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
						ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументНаОтправку.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий  Тогда
				ЭлектронныеДокументыСлужебный.СохранитьВместеСПоследнейЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога,
					СтруктураФайловЭД);
			Иначе
				ЭлектронныеДокументыСлужебный.СохранитьВместеСЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СтруктураФайловЭД);
			КонецЕсли;
			ЭлектронныеДокументыСлужебный.СохранитьФайлыДопДанныхЭД(ДокументНаОтправку, АдресКаталога, СтруктураФайловЭД);
			
			// Формируем meta.xml.
			СформироватьЭДТранспортнойИнформацииТакском(ДокументНаОтправку, СтруктураФайловЭД, АдресКаталога, ТекстОшибки);
			
			// Формируем card.xml
			СформироватьЭДКарточкиТакском(ДокументНаОтправку, АдресКаталога, ТекстОшибки);
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			// Формируем пакет ЭД через создание zip-контейнера.
			ЗипКонтейнер = Новый ЗаписьZipФайла();
			ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
			ЗипКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
			
			ОбъектыДобавляемыеВАрхив = АдресКаталога + "*";
			ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив, РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			
			Попытка
				ЗипКонтейнер.Записать();
				// Сохраним зип-контейнер в присоединенных файлах к конверту.
				ЭлектронныеДокументыСлужебный.ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
				КонтейнерСформирован = Истина;
			Исключение
				ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование пакета ЭД'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
			КонецПопытки;
		Иначе
			ШаблонСообщения = НСтр("ru = 'При формировании пакета возникли следующие ошибки:
			|%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		УдалитьФайлы(АдресКаталога);
	Иначе
		ШаблонСообщения = НСтр("ru = 'Ошибка при обработке пакета ЭД %1!
		|Для передачи через оператора Такском, пакет ЭД должен содержать 1 электронный документ!
		|Необхомидо повторно сформировать электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Конверт.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КонтейнерСформирован;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен с такском

// Только для внутреннего использования
Функция ТестСвязиСТакском(СтруктураПараметровЗапросаМаркера, ВыводитьСообщения = Истина) Экспорт
	
	// Блок проверки соединения с Такском.
	Соединение = ПолучитьСоединение();
	Маркер = ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Истина);
	
	РезультатТеста = НСтр("ru = 'Не пройден.'");
	ПройденУспешно = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ПройденУспешно = Истина;
	КонецЕсли;
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
	КонецЕсли;
	
	Возврат ПройденУспешно;
	
КонецФункции

// Только для внутреннего использования
Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол) Экспорт
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
	
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта,8);
		ЗащищенноеСоединение = ложь;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол =  "https";
		Адрес = Сред(АдресСайта,9);
		ЗащищенноеСоединение = истина;
	КонецЕсли;
	
КонецПроцедуры 

// Возвращает маркер
//
// Параметры:
//  СтруктураПараметровЗапросаМаркера - Структура, содержит параметры запроса маркера;
//  Соединение - HTTPСоединение, соединение с сервисом Такском
//  Расшифровывать - Булево, указание, производить ли расшифровку маркера.
//                   Используется если расшифровка будет производиться на клиенте
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные маркера
//
Функция ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Расшифровывать = Истина) Экспорт
	
	Маркер = Неопределено;
		
	Если ЗначениеЗаполнено(СтруктураПараметровЗапросаМаркера.СертификатПодписи) Тогда
		
		ПарольКСертификату = Неопределено;
		СтруктураПараметровЗапросаМаркера.Свойство("ПарольПользователя", ПарольКСертификату);
		Если ПарольКСертификату <> Неопределено ИЛИ НЕ Расшифровывать Тогда
			АдресРесурса = "CertificateLogin";
			
			ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("txt");
			СертификатПодписи = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("cer");
			
			ДвоичныеДанныеСертификата = СтруктураПараметровЗапросаМаркера.ФайлСертификата;
			ДвоичныеДанныеСертификата.Записать(СертификатПодписи);
			
			Заголовки = "";
			ЭлектронныеДокументыСлужебный.ДобавитьПараметрВЗаголовок(Заголовки,
																	 "Integrator-Id",
																	 "1C_22BFE9D5-E77D-424A-BC6D-D8A3496C05FE");
			
			Попытка
				Соединение.ОтправитьДляОбработки(СертификатПодписи, АдресРесурса, ИмяФайлаРезультата, Заголовки);
			Исключение
				ТекстСообщения = НСтр("ru = 'Ошибка авторизации на сервере оператора электронного документооборота Такском!
				|(подробности см. в Журнале регистрации).'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
															НСтр("ru = 'авторизация на сервере Такском'"),
															ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
															ТекстСообщения);
					
				Возврат Неопределено;
			КонецПопытки;
			
			Если Расшифровывать тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьСрокДействияСертификата(
										СтруктураПараметровЗапросаМаркера.СертификатПодписи);
				Маркер = РасшифроватьМаркер(ИмяФайлаРезультата, ПарольКСертификату);
				СтруктураПараметровЗапросаМаркера.Вставить("МаркерРасшифрованный", Маркер);
			Иначе
				Маркер = Новый ДвоичныеДанные(ИмяФайлаРезультата);
				СтруктураПараметровЗапросаМаркера.Вставить("МаркерЗашифрованный", Маркер);
			КонецЕсли;
			
			УдалитьФайлы(ИмяФайлаРезультата);
			УдалитьФайлы(СертификатПодписи);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не указан сертификат авторизации оператора электронного документооборота Такском.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Маркер;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

// Функция выполняет отправку файлов, находящихся в каталоге "АдресКаталогаОтправки".
//
// Параметры:
//  Маркер                      - двоичные данные или строка - расшифрованный маркер;
//  АдресКаталогаОтправки       - строка, полный путь к каталогу с передаваемыми файлами;
//  АдресРесурса                - строка, адрес веб-сервиса;
//  ФлагОтладки - Булево.
//
// Возвращаемое значение:
//  РезультатОтправки - Число (количество отправленных документов)
//
Функция ОтправитьЧерезТакском(Маркер, АдресКаталогаОтправки, АдресРесурса, ФлагОтладки = Ложь) Экспорт
	
	РезультатОтправки = 0;
	
	Соединение = ПолучитьСоединение();
	
	Если ЗначениеЗаполнено(Маркер) Тогда
		Если ТипЗнч(Маркер) <> Тип("Строка") Тогда
			Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
		КонецЕсли;
		ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
		Для Каждого Файл Из ФайлыОтправки Цикл
			ПромежуточныйРезультат = ПередатьПакетЭДОператораЭДО(Файл, Маркер, Соединение, АдресРесурса, ФлагОтладки);
			РезультатОтправки = РезультатОтправки + ПромежуточныйРезультат;
		КонецЦикла;
	КонецЕсли;
	
	УдалитьФайлы(АдресКаталогаОтправки);
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

// Получить новые электронные документы от Такском
//
// Параметры:
//  СтруктураВозврата - структура с полями: "ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение"
//  СоответствиеПаролейДляЭДО - структура - соответствие паролей для ЭДО
//  ПолучитьВесьСписок - получить список ЭД без ограничения выборки по дате
//
Процедура ПолучитьНовыеЭДОператорТакском(СтруктураВозврата,
										 СоотвСоглашенийИСтруктурСертификатов,
										 ПолучитьВесьСписок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СоотвСоглашенийИСтруктурСертификатов) Тогда
		СоотвСоглашенийИСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.СоотвСоглашенийИСтруктурСертификатовДляАвторизацииСервер();
		Если НЕ ЗначениеЗаполнено(СоотвСоглашенийИСтруктурСертификатов) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияЧерезОЭДО.Ссылка КАК Соглашение,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭД КАК ДатаПолученияЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЧерезОЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|		ПО (СостоянияОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашенияЧерезОЭДО.Ссылка)
	|ГДЕ
	|	СоглашенияЧерезОЭДО.СтатусСоглашения = &СтатусСоглашения
	|	И СоглашенияЧерезОЭДО.СпособОбменаЭД = &СпособОбменаЧерезОЭДО
	|	И НЕ СоглашенияЧерезОЭДО.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПустойСправочникСертификатов", Справочники.СертификатыЭЦП.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийЭД.Действует);
	Запрос.УстановитьПараметр("СпособОбменаЧерезОЭДО", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Элемент Из СоотвСоглашенийИСтруктурСертификатов Цикл
		
		Соглашение = Элемент.Ключ;
		СтСертификата = Элемент.Значение;
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		ПарольКСертификату = Неопределено;
		Если ТипЗнч(СтСертификата) = Тип("Структура")
			И (СтСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			ИЛИ СтСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
			И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
			СтСертификата.Свойство("ПарольПользователя", ПарольКСертификату);
			Если НЕ ЗначениеЗаполнено(МаркерРасшифрованный) И ПарольКСертификату = Неопределено
				ИЛИ НЕ ЭлектронныеДокументыСлужебныйВызовСервера.РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтСертификата) Тогда
				Продолжить;
			Иначе
				МаркерРасшифрованный = СтСертификата.МаркерРасшифрованный;
			КонецЕсли;
			СтрокаТЗ = ТЗ.Найти(Соглашение);
			ДатаВремяЗапроса = Неопределено;
			Если СтрокаТЗ <> Неопределено Тогда
				ДатаВремяЗапроса = СтрокаТЗ.ДатаПолученияЭД;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Соединение = ПолучитьСоединение();
		
		Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(МаркерРасшифрованный);
		
		ПолученыВсеДокументы = Ложь;
		
		Пока НЕ ПолученыВсеДокументы Цикл
			
			ДатаВремяЗапроса = Формат(ДатаВремяЗапроса, "ДФ='yyyy-MM-dd HH:mm:ss'");
			СписокЭД_XML = ПолучитьСписокЭДОператораЭДО(Маркер, Соединение, "GetMessageList", ДатаВремяЗапроса);
			
			СписокИДДокументов = "";
			ДатаВремяЗапроса   = РазобратьТекстСпискаЭД(СписокЭД_XML, СписокИДДокументов);
			
			Если СписокИДДокументов.Количество() = 0 Тогда
				ПолученыВсеДокументы = Истина;
				Прервать;
			КонецЕсли;
			
			СдвигатьДату = Истина;
			Для Каждого Стр Из СписокИДДокументов Цикл
				
				Если НЕ ПакетЭДУжеЗагружен(Стр.ИДДокумента) Тогда
					
					ФайлЭД = ПолучитьЭДОператораЭДО(Маркер, Соединение, ПарольКСертификату, Стр.ИДДокумента);
					
					Если ФайлЭД <> Неопределено Тогда
						ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ФайлЭД);
						
						СтруктураПараметров = ПолучитьДанныеВходящегоЭД(ДвоичныеДанныеЭлемента,
																		Стр.КодТранзакции,
																		Стр.ИДДокументооборота,
																		Стр.ИДДокумента);
						Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
							ПакетЭД = ЭлектронныеДокументыСлужебный.СформироватьНовыйПакетЭД(СтруктураПараметров);
							
							Если ЗначениеЗаполнено(ПакетЭД.Ссылка) Тогда
								ИмяФайла = "EDI_" + СтруктураПараметров.ВнешнийУИД;
								АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
								
								ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка,
																					  ИмяФайла,
																					  "zip",
																					  ТекущаяДатаСеанса(),
																					  ТекущаяДатаСеанса(),
																					  АдресВХранилище,
																					  ,
																					  ,
																					  Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
								
								СтруктураВозврата.МассивВозврата.Добавить(ПрисоединенныйФайл);
								РаспаковыватьПакет = НЕ СтруктураПараметров.Зашифрован;
								СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", РаспаковыватьПакет, ПакетЭД.Ссылка);
								Если РаспаковыватьПакет Тогда
									ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(
																									ПакетЭД.Ссылка, , Неопределено);
									СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
								КонецЕсли;
								СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
							КонецЕсли;
						ИначеЕсли Стр.КодТранзакции = "PostDateConfirmation"
							ИЛИ Стр.КодТранзакции = "SendConfirmation" 
							ИЛИ Стр.КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
							СдвигатьДату = Ложь;
						Иначе
							СохранитьНеизвестныйПакет(ДвоичныеДанныеЭлемента, Соглашение);
						КонецЕсли;
						УдалитьФайлы(ФайлЭД);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДатаВремяЗапроса) И СписокИДДокументов.Количество() > 0 И СдвигатьДату Тогда
				
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
				Запись.СоглашениеОбИспользованииЭД = Соглашение;
				Запись.Прочитать();
				Запись.ДатаПолученияЭД = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Сред(ДатаВремяЗапроса, 0,
					Найти(ДатаВремяЗапроса, ".") - 1), "-", ""), " ", ""), ":", ""));
				Запись.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Получить новые электронные документы от Такском
//
// Параметры:
//  АдресРесурса - строка - адрес ресурса
//  ДатаПоследнегоЗапроса - дата - дата последнего запроса
//  Маркер - двоичные данные или строка - расшифрованный маркер;
//
// Возвращаемое значение:
//  СписокЭД_XML - список электронных документов
//
Функция ПолучитьЧерезТакском(АдресРесурса, ДатаПоследнегоЗапроса, Маркер) Экспорт
	
	Соединение = ПолучитьСоединение();
	
	Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
	
	СписокЭД_XML = ПолучитьСписокЭДОператораЭДО(Маркер, Соединение, АдресРесурса, ДатаПоследнегоЗапроса);
	
	Возврат СписокЭД_XML;
	
КонецФункции

// Отправляет в такском информацию об принятии или отклонении приглашения
Функция ПринятьОтклонитьКонтактЧерезТакском(Идентификатор, ПриглашениеПринято, Маркер) Экспорт
	
	АдресСоединения = "";
	ЗащищенноеСоединение = Ложь;
	ПротоколСоединения = "";
	
	ОпределитьПараметрыСайта("https://1" + Символ(67) + "-"
		+ Символ(97) + Символ(112) + Символ(105) + "."
		+ Символ(116) + Символ(97) + Символ(120) + Символ(99) + Символ(111) + Символ(109) + "."
		+ Символ(114) + Символ(117) + "/v1.2/" + Символ(65) + Символ(80) + Символ(73) + "/",
		ЗащищенноеСоединение, АдресСоединения, ПротоколСоединения);
	Прокси = ЭлектронныеДокументыСлужебный.СформироватьПрокси(ПротоколСоединения);
	Соединение = Новый HTTPСоединение(АдресСоединения, , , , Прокси, ЗащищенноеСоединение);
	
	Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
	
	ОперацияВыполнена = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		Если ПриглашениеПринято Тогда
			АдресРесурса = "AcceptContact?id=" + Идентификатор;
		Иначе
			АдресРесурса = "RejectContact?id=" + Идентификатор;
		КонецЕсли;
		
		Заголовки = "";
		ЭлектронныеДокументыСлужебный.ДобавитьпараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ОперацияВыполнена = Истина;
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка обработки %1 приглашения на сервере Такском!
			|(подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				?(ПриглашениеПринято, "принятия", "отклонения"));
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Получение ЭД.'"),
																						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																						ТекстСообщения);
			УдалитьФайлы(ИмяФайлаРезультата);
			ОперацияВыполнена = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОперацияВыполнена;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
// ПакетЭД             - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов,
// ПапкаДляРаспаковки  - строка - пусть к папке,
// ПараметрыШифрования - Структура, настройки шифрования, применимые к данному пакету электронных документов.
//
// Возвращаемое значение:
//  СтруктураВозврата - массив двоичных данных.
//
Функция ВернутьМассивДвоичныхДанныхПакетаТакском(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования) Экспорт
	
	ФайлАрхива = "";
	ФайлРасшифрованногоАрхива = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "СпособОбменаЭД");
	ЕстьКриптосредствоНаСервере = СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			 					  И ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
	
	Если НЕ ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Ext", ПакетЭД.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	Попытка
		// Проверим, что соглашение, указанное в пакете, до сих пор действует.
		Соглашение = ПакетЭД.СоглашениеЭД;
		Если Соглашение.Пустая() ИЛИ Соглашение.СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует Тогда
			СообщениеИсключения = НСтр("ru = 'По данному пакету электронных документов нет действующего соглашения.
			|Распаковка невозможна.'");
			ВызватьИсключение(СообщениеИсключения);
			
			Возврат Неопределено;
		КонецЕсли;
		
		// Необходимо получить архив пакета из присоединенных файлов к документу.
		ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Для каждого из пакетов необходимо определить файл с данными.
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки, "*"); 
		
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
				ТекстОшибки, ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
		
		// Расшифровать файл с данными
		МассивФайлИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
		
		Если МассивФайлИнформации.Количество() > 0 Тогда
			ФайлИнформации = МассивФайлИнформации[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		МассивФайлКарточки = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
		
		Если МассивФайлКарточки.Количество() > 0 Тогда
			ФайлКарточки = МассивФайлКарточки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		СоответствиеФайлПараметры = ПолучитьСоответствиеФайлПараметры(ФайлИнформации, ФайлКарточки);
		
		Если СоответствиеФайлПараметры.Количество() = 0 Тогда
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
			ИЛИ ЕстьКриптосредствоНаСервере Тогда
			
			НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
			
			Попытка
				
				МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
				МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
				МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
				МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
			Исключение
				// Менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки,
				// либо отсутствует ПО криптопровайдера, в этом случае менеджерам присваиваем "Неопределено"
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		Иначе
			
			МенеджерКриптографии = Неопределено;
			
		КонецЕсли;
		
		МассивФайловИзвещений = НайтиФайлы(ПапкаДляРаспаковки, "*ИзвещениеОПолученииДокумента*.xml", Истина);
		МассивФайловДанных = Новый Массив;
		
		ЭтоПроизвольныйЭД = Ложь;
		
		Для Каждого ЭлементСоответствия Из СоответствиеФайлПараметры Цикл
			ТипДанных = ОпределитьТипДанныхПоКодуТранзакции(ЭлементСоответствия.Значение.КодТранзакции);
			
			// Получена подпись второй стороны (подтверждение)
			Если ТипДанных = "Подпись" Тогда
				
			Иначе
				МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствия.Ключ, Истина);
				ДобавитьЭлементыМассиваИсточникаВМассивПриемник(МассивФайловДанных, МассивФайловИсточник);
				ТекстПроизвольногоЭД = "";
				ЭтоПроизвольныйЭД = ЭлементСоответствия.Значение.ДопДанные.Свойство("ПроизвольныйДокумент", ТекстПроизвольногоЭД);
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПроизвольныйЭД Тогда
			СоответствиеФайлПараметры.Вставить("Текст", ТекстПроизвольногоЭД);
			СоответствиеФайлПараметры.Вставить("ЭтоПроизвольныйЭД", Истина);
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ТипДанных", ТипДанных);
		СтруктураВозврата.Вставить("СоответствиеФайлПараметры", СоответствиеФайлПараметры);
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанных", ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайловДанных));
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанныхИзвещений",
								   ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайловИзвещений));
		СтруктураВозврата.Вставить("ПапкаДляРаспаковки", ПапкаДляРаспаковки);
		Возврат СтруктураВозврата;
		
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Только для внутреннего использования
Функция ОбработатьДвоичныеДанныеПакетаТакском(
					ПакетЭД,
					ДанныеРаспаковки,
					ПапкаДляРаспаковки,
					ЕстьКриптосредствоНаКлиенте,
					СоответствиеЭДИПодписей,
					СтруктураВозврата) Экспорт
	
	КоличествоОбработанныхДокументов = 0;
	
	МассивВозвратаДобавленныхФайлов             = Новый Массив;
	МассивВозвратаДобавленныхФайловДляИзвещений = Новый Массив;
	
	МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
	МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
	
	ЕстьОшибкаРаспаковки = Ложь;
	
	Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
		
		МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
																			СтруктураДанных.ИмяФайла,
																			ПапкаДляРаспаковки,
																			СтруктураДанных.ДвоичныеДанные,
																			ДанныеРаспаковки.СоответствиеФайлПараметры,
																			Истина);
		МассивДобавленныхФайловДляИзвещений = Новый Массив;
		МассивДобавленныхФайлов = ДобавитьДанныеПоПакетуЭД(
											ПакетЭД,
											МассивСтруктурПодписей,
											СтруктураДанных,
											ДанныеРаспаковки.СоответствиеФайлПараметры,
											ПапкаДляРаспаковки,
											ЕстьОшибкаРаспаковки,
											ЕстьКриптосредствоНаКлиенте,
											Истина,
											МассивДобавленныхФайловДляИзвещений,
											СоответствиеЭДИПодписей);
		
		Если НЕ ЕстьОшибкаРаспаковки И ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") Тогда
			КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + МассивДобавленныхФайлов.Количество();
		КонецЕсли;
		
		Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивВозвратаДобавленныхФайлов, МассивДобавленныхФайлов);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(
								МассивВозвратаДобавленныхФайловДляИзвещений,
								МассивДобавленныхФайловДляИзвещений);
		
	КонецЦикла;
	
	Если НЕ ЕстьОшибкаРаспаковки Тогда
		
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(
													ПакетЭД,
													ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
		ЭлектронныеДокументыСлужебный.УдалитьПапкуНаСервере(ПапкаДляРаспаковки);
		
	Иначе
		КоличествоОбработанныхДокументов = 0;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("МассивДобавленныхФайлов",             МассивДобавленныхФайлов);
	СтруктураВозврата.Вставить("МассивДобавленныхФайловДляИзвещений", МассивДобавленныхФайловДляИзвещений);
	СтруктураВозврата.Вставить("МассивВладельцев",                    МассивВладельцев(МассивДобавленныхФайлов));
	
	Возврат КоличествоОбработанныхДокументов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Приглашения к обмену

// Только для внутреннего использования
Функция ИсходящийЗапросПриглашенияТакском(ТаблицаОбработки, СтруктураДопПараметров) Экспорт
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/contacts}.Contacts";
	Попытка
		Контакты = ПолучитьОбъектТипаCML(ПутьКОписанию);
		ЗаполнитьСвойствоXDTO(Контакты, "Asof", ТекущаяДатаСеанса(), , ТекстОшибки);
		Для Каждого ТекСтрока Из ТаблицаОбработки Цикл
			Контакт = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Contact");
			ЗаполнитьСвойствоXDTO(Контакт, "Name", ТекСтрока.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Inn", ТекСтрока.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Kpp", ТекСтрока.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "Email", ТекСтрока.АдресЭП, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контакт, "ExternalContactId", ТекСтрока.ВнешнийКод, , ТекстОшибки);
			Контакты.Contact.Добавить(Контакт);
		КонецЦикла;
		Контакты.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ВыгрузитьЭДвФайл(Контакты, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
	Исключение
		
		ТекстСообщения = ТекстОшибки + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование приглашения к обмену'"),
																					ТекстОшибки,
																					ТекстСообщения);
			
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСоединение() Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	НастройкиОператора = СтруктураНастроекТакском();
	ОпределитьПараметрыСайта(НастройкиОператора.АдресВебСервиса, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = ЭлектронныеДокументыСлужебный.СформироватьПрокси(Протокол);
	
	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПреобразоватьТекстСтатуса(КодСтатуса)
	
	Если КодСтатуса = "InvalidINN" Тогда
		ВозвращаемоеЗначение = "Неправильный ИНН";
	ИначеЕсли КодСтатуса = "InvalidEmail" Тогда
		ВозвращаемоеЗначение = "Неправильный адрес электронной почты";
	ИначеЕсли КодСтатуса = "Incoming" Тогда
		ВозвращаемоеЗначение = "Входящий запрос";
	ИначеЕсли КодСтатуса = "Rejected" Тогда
		ВозвращаемоеЗначение = "Отсоединен";
	ИначеЕсли КодСтатуса = "Accepted" Тогда
		ВозвращаемоеЗначение = "Присоединен";
	Иначе
		ВозвращаемоеЗначение = КодСтатуса;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭтоЧисло(Строка)
	
	ЗначениеВозврата = Истина;
	Попытка
		Число = Число(Строка);
	Исключение
		ЗначениеВозврата = Ложь;
	КонецПопытки;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьКодТранзакции(ЭлектронныйДокумент, КодРегламента, ПризнакПодписи = Ложь)
	
	КодТранзакции = Неопределено;
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ТипЭлементаВерсииЭД, ВидЭД");
	
	Если КодРегламента = "Invoice" Тогда
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
			КодТранзакции = "SendConfirmationReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
			КодТранзакции = "PostDateConfirmationReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
			КодТранзакции = "ReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
			КодТранзакции = "ReceiveNoticePostDateConfirmationReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			КодТранзакции = "CorrectionNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
			КодТранзакции = "CorrectionNoticeReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			КодТранзакции = "Invoice";
		КонецЕсли;
		
	ИначеЕсли КодРегламента = "Formalized" Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			КодТранзакции = "VendorTitle";
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			КодТранзакции = "CustomerTitle";
		КонецЕсли;
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП Тогда
			КодТранзакции = "ReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ Тогда
			КодТранзакции = "MainDocumentReject"; // VendorTitleReject
		КонецЕсли;
		
	ИначеЕсли КодРегламента = "Nonformalized" Тогда
		КодТранзакции = "MainDocument";
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП Тогда
			КодТранзакции = "ReceiveNotice";
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ Тогда
			КодТранзакции = "MainDocumentReject";
		КонецЕсли;
		
		Если ПризнакПодписи Тогда
			КодТранзакции = "MainDocumentResign";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КодТранзакции;
	
КонецФункции

Функция ПолучитьКодРегламента(ЭлектронныйДокумент)
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВерсияРегламентаЭДО, ТипЭлементаВерсииЭД, ВидЭД, ЭлектронныйДокументВладелец");
	
	КодРегламента = "Nonformalized";
	
	// Изменим код регламента при использовании версии регламента 20.
	Если ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			КодРегламента = "Formalized";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		КодРегламента = "Invoice";
	КонецЕсли;
	
	Возврат КодРегламента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен с такском

Функция РасшифроватьМаркер(ИмяФайлаРезультата, ПарольКСертификатуОператора)
	
	НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
	ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ПарольКСертификатуОператора) Тогда
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольКСертификатуОператора;
	КонецЕсли;
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("113");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат РасшифрованныеДвоичныеДанные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

Функция ПередатьПакетЭДОператораЭДО(Файл, Маркер, Соединение, Знач АдресРесурса, ФлагОтладки)
	
	ПараметрВозврата = 0;
	Если ЗначениеЗаполнено(Маркер) Тогда
		Заголовки = "";
		ЭлектронныеДокументыСлужебный.ДобавитьпараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("txt");
		
		АдресРесурса = АдресРесурса + ?(АдресРесурса = "SendMessage", "/" + СтрЗаменить(Файл.Имя, "-", ""), "");
		
		Если ФлагОтладки Тогда 
			КопироватьФайл(Файл.ПолноеИмя,
						   ЭлектронныеДокументыСлужебныйВызовСервера.ТекущийКаталогВременныхФайлов() + Файл.Имя);
		КонецЕсли;
		
		Попытка
			Соединение.ОтправитьДляОбработки(Файл.ПолноеИмя, АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ПараметрВозврата = 1;
		Исключение
			ПараметрВозврата = 0;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = СтрЗаменить(Результат, """", "");
				Результат = СтрЗаменить(Результат, ":", ",");
				МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
				
				ШаблонОшибки = НСтр("ru = '%1: %2.'");
				ТекстОшибкиОператораТакском = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
					
				КодОшибки = МассивПараметровОшибки[5];
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке(КодОшибки, ТекстОшибкиОператораТакском);
				
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'отправка пакета ЭД'"),
																							Результат,
																							ТекстСообщения);
			КонецЕсли;
			
		КонецПопытки;
		
		УдалитьФайлы(ИмяФайлаРезультата);
	КонецЕсли;
	
	Возврат ПараметрВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

Функция ПолучитьСписокЭДОператораЭДО(Маркер, Соединение, Знач АдресРесурса, ДатаПоследнегоЗапроса)
	
	ИмяФайлаРезультата = Неопределено;
	Если ЗначениеЗаполнено(Маркер) Тогда
		АдресРесурса = АдресРесурса + ?(ЗначениеЗаполнено(ДатаПоследнегоЗапроса), "?date=" + ДатаПоследнегоЗапроса, "");
		Заголовки = "";
		
		ЭлектронныеДокументыСлужебный.ДобавитьПараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Ошибка получения входящих электронных документов на сервере Такском!
			|(подробности см. в Журнале регистрации).'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Получение ЭД'"),
																						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																						ТекстСообщения);
				
			УдалитьФайлы(ИмяФайлаРезультата);
			ИмяФайлаРезультата = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

Функция РазобратьТекстСпискаЭД(СписокЭД_XML, ТЗ)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДДокументооборота");
	ТЗ.Колонки.Добавить("КодТранзакции");
	ТЗ.Колонки.Добавить("ИДДокумента");
	ТЗ.Колонки.Добавить("Приоритет");
	
	ДатаВремяЗапроса = Неопределено;
	
	Если ЗначениеЗаполнено(СписокЭД_XML) Тогда
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(СписокЭД_XML);
		
		ИДДокументооборота = Неопределено;
		КодТранзакции      = Неопределено;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ContainerDescription" Тогда
				ДатаВремяЗапроса = ЧтениеХМЛ.ПолучитьАтрибут("LastRecordDateTime");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "DocFlow" Тогда
				ИДДокументооборота = ЧтениеХМЛ.ПолучитьАтрибут("Id");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Document" Тогда
				КодТранзакции      = ЧтениеХМЛ.ПолучитьАтрибут("TransactionCode");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Identifiers" Тогда
				СтрТЗ = ТЗ.Добавить();
				СтрТЗ.ИДДокументооборота = ИДДокументооборота;
				СтрТЗ.КодТранзакции      = КодТранзакции;
				
				Если КодТранзакции = "VendorTitle" ИЛИ КодТранзакции = "CustomerTitle" Тогда
					
					СтрТЗ.Приоритет = 0;
				ИначеЕсли КодТранзакции = "MainDocument" Тогда
					
					СтрТЗ.Приоритет = 1;
				ИначеЕсли КодТранзакции = "Invoice" Тогда
					
					СтрТЗ.Приоритет = 2;
				ИначеЕсли КодТранзакции = "PostDateConfirmation"
					ИЛИ КодТранзакции = "SendConfirmation"
					ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
					
					СтрТЗ.Приоритет = 3;
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					
					СтрТЗ.Приоритет = 4;
				ИначеЕсли КодТранзакции = "MainDocumentReject" Тогда
					
					СтрТЗ.Приоритет = 5;
				Иначе
					
					СтрТЗ.Приоритет = 6;
				КонецЕсли;
				
				СтрТЗ.ИДДокумента = ЧтениеХМЛ.ПолучитьАтрибут("InternalId");
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ТЗ.Сортировать("Приоритет");
	КонецЕсли;
	
	Возврат ДатаВремяЗапроса;
	
КонецФункции

Функция ПолучитьЭДОператораЭДО(Маркер, Соединение, СтруктураПараметровЗапросаМаркера, ИДДокумента, Рекурсия = Ложь)
	
	ИмяФайлаРезультата = Неопределено;
	Если ЗначениеЗаполнено(Маркер) Тогда
		АдресРесурса = "GetMessage/" + ИДДокумента;
		Заголовки = "";
		
		ЭлектронныеДокументыСлужебный.ДобавитьПараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		Попытка
			Соединение.Получить(АдресРесурса, ИмяФайлаРезультата, Заголовки);
		Исключение
			// Если возникла ошибка по причине истечения времени действия маркера,
			// то пробуем получить новый маркер и повторить попытку получения ЭД.
			УдалитьФайлы(ИмяФайлаРезультата);
			ИмяФайлаРезультата = Неопределено;
			Если НЕ Рекурсия И ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
				Маркер = ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Истина);
				Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
				ИмяФайлаРезультата = ПолучитьЭДОператораЭДО(Маркер,
															Соединение,
															СтруктураПараметровЗапросаМаркера,
															ИДДокумента,
															Истина);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

Функция ПакетЭДУжеЗагружен(ИДДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийУИД = &ВнешнийУИД
	|	И ПакетЭД.Направление = &Направление";
	Запрос.УстановитьПараметр("Направление", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("ВнешнийУИД",  ИДДокумента);
	
	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Возврат НЕ РезультатПустой;
	
КонецФункции

Функция ПолучитьДанныеВходящегоЭД(ДвоичныеДанные, КодТранзакции, ИДДокументооборота, ИДДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	
	Если КодТранзакции = "PostDateConfirmation"
		ИЛИ КодТранзакции = "SendConfirmation" 
		ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation"
		ИЛИ КодТранзакции = "ErrorMessage" Тогда
		
		Если КодТранзакции = "PostDateConfirmation" Тогда
			ЭДСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДДокументооборота));
			ЭДНайден = (ЭДСсылка.ПолучитьОбъект() <> Неопределено);
			
		ИначеЕсли КодТранзакции = "ErrorMessage" Тогда
			ЭДСсылка = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(ИДДокументооборота);
			ЭДНайден = (ЭДСсылка <> Неопределено);
		Иначе
			ЭДСсылка = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(
															ИДДокументооборота,
															Перечисления.НаправленияЭД.Входящий,
															,
															Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
			ЭДНайден = (ЭДСсылка <> Неопределено);
		КонецЕсли;
		
		Если ЭДНайден Тогда
			НастройкиСоглашения = Новый Структура;
			НастройкиСоглашения.Вставить("Основание",   ЭДСсылка.СоглашениеЭД);
			НастройкиСоглашения.Вставить("Организация", ЭДСсылка.Организация);
			НастройкиСоглашения.Вставить("Контрагент",  ЭДСсылка.Контрагент);
			ИДОтправителя = ЭДСсылка.ОтправительЭД;
			ИДПолучателя  = ЭДСсылка.ПолучательЭД;
		КонецЕсли;
	Иначе
		
		ИмяВременногоФайлаЗИП = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
		КлючУникальности = Новый УникальныйИдентификатор();
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Input", КлючУникальности);
		ОшибкаРаспаковки = Ложь;
		
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение
			ОшибкаРаспаковки = Истина;
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
																   ТекстОшибки,
																   ТекстСообщения);
		КонецПопытки;
		
		Если НЕ ОшибкаРаспаковки Тогда
			
			МассФайлКарточки  = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
			
			Если МассФайлКарточки.Количество() > 0 Тогда
				ФайлКарточки = МассФайлКарточки[0];
			Иначе
				ФайлКарточки = Неопределено;
			КонецЕсли;
			
			ИДПолучателя  = Неопределено;
			ИДОтправителя = Неопределено;
			Если ФайлКарточки <> Неопределено Тогда
				
				ОбъектXML = Новый ЧтениеXML;
				СтруктураЗначений = Новый Структура;
				
				Попытка
					ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					ОбъектXML.Закрыть();
					ИДОтправителя = ЭД.Sender.Abonent.ID;
					ИДПолучателя  = ЭД.Receiver.Abonent.ID;
					НастройкиСоглашения = ЭлектронныеДокументыСлужебный.ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя, Истина);
				Исключение
					ОбъектXML.Закрыть();
					
					ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
																								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																								ТекстСообщения);
					НастройкиСоглашения = Неопределено;
					
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		УдалитьФайлы(ИмяВременногоФайлаЗИП);
		УдалитьФайлы(ПапкаДляРаспаковки);
	КонецЕсли;
	
	
	Если НастройкиСоглашения <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("Соглашение",          НастройкиСоглашения.Основание);
		СтруктураПараметров.Вставить("АдресОтправителя",    Неопределено);
		СтруктураПараметров.Вставить("АдресПолучателя",     Неопределено);
		СтруктураПараметров.Вставить("Зашифрован",          Ложь);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия20);
		СтруктураПараметров.Вставить("ВнешнийУИД",          ИДДокумента);
		СтруктураПараметров.Вставить("СтатусПакета",        Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтруктураПараметров.Вставить("НаправленияЭД",       Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

Процедура ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO(ИмяФайла, КодРегламента, КодТранзакции, СтруктураФайлаЭД)
	
	ОбъектXML = Новый ЧтениеXML;
	ИдЭД                      = Неопределено;
	ВидЭД                     = Неопределено;
	НаправлениеЭД             = Неопределено;
	НомерДокументаОтправителя = Неопределено;
	ДатаДокументаОтправителя  = Неопределено;
	ТипЭлементаВерсииЭД       = Неопределено;
	СтатусЭДВладельца         = Неопределено;
	ТекстСообщения            = Неопределено;
	ОписаниеОшибки            = Неопределено;
	ТекстУточнения            = Неопределено;
	
	СтруктураУчастников = Новый Структура;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		
		Если КодТранзакции = "ErrorMessage" Тогда
			ОписаниеОшибки      = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке(ЭД.КодОшибки, ЭД.Описание);
			ВидЭД               = Перечисления.ВидыЭД.Ошибка;
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка;
			СтатусЭДВладельца   = Перечисления.СтатусыЭД.ОшибкаПередачи;
		Иначе
			ИдЭД = ЭД.ИдФайл;
			НомерВерсииЭД = 0;
			
			Если КодРегламента = "Nonformalized" ИЛИ КодРегламента = "Formalized" Тогда
				
				Если КодТранзакции = "PostDateConfirmation" Тогда
					ВидЭД               = Перечисления.ВидыЭД.Подтверждение;
					Если ЭД.Документ.КНД = "1115112" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
					Иначе
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО;
					КонецЕсли;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя  = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "CorrectionNotice" ИЛИ КодТранзакции = "MainDocumentReject" Тогда
					ВидЭД               = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.ОтклоненПолучателем;
					ДатаДокументаОтправителя  = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвУведУточ.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвУведУточ.ВремяПол, ".", ""));
					ТекстУточнения      = ЭД.Документ.СвУведУточ.ТекстУведУточ;
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					ВидЭД               = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.Доставлен;
					ДатаДокументаОтправителя  = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
				Иначе
					ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: неизвестный код транзакции (подробности см. в Журнале регистрации).'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайла);
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
						НСтр("ru = 'Неизвестный код транзакции:'") + " " + КодТранзакции, ТекстСообщения);
				КонецЕсли;
				
			Иначе
				Если КодТранзакции = "PostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "SendConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Получен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Получен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Доставлен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
				ИначеЕсли КодТранзакции = "CorrectionNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.ОтклоненПолучателем;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвУведУточ.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвУведУточ.ВремяПол, ".", ""));
					ТекстУточнения           = ЭД.Документ.СвУведУточ.ТекстУведУточ;
				ИначеЕсли КодТранзакции = "CorrectionNoticeReceiveNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отклонен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
				Иначе
					ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: неизвестный код транзакции (подробности см. в Журнале регистрации).'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайла);
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
						НСтр("ru = 'Неизвестный код транзакции:'") + " " + КодТранзакции, ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		
		СтруктураФайлаЭД.НомерВерсииЭД             = НомерВерсииЭД;
		СтруктураФайлаЭД.ВидЭд                     = ВидЭД;
		СтруктураФайлаЭД.НомерЭД                   = ИдЭД;
		СтруктураФайлаЭД.НаправлениеЭД             = НаправлениеЭД;
		СтруктураФайлаЭД.СтатусЭДВладельца         = СтатусЭДВладельца;
		СтруктураФайлаЭД.ТипЭлементаВерсииЭД       = ТипЭлементаВерсииЭД;
		СтруктураФайлаЭД.НомерДокументаОтправителя = НомерДокументаОтправителя;
		СтруктураФайлаЭД.ДатаДокументаОтправителя  = ДатаДокументаОтправителя;
		СтруктураФайлаЭД.ОписаниеОшибки            = ОписаниеОшибки;
		СтруктураФайлаЭД.ТекстУточнения            = ТекстУточнения;
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьЭлементыМассиваИсточникаВМассивПриемник(МассивПриемник, МассивИсточник)
	
	Для Каждого ЭлементМассива Из МассивИсточник Цикл
		
		МассивПриемник.Добавить(ЭлементМассива);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеВСоответствие(СоответствиеВозврата, ПредставлениеДокумента, ВложеннаяСтруктура)
	
	СоответствиеВозврата.Вставить(ПредставлениеДокумента, ВложеннаяСтруктура);
	ПредставлениеДокумента = "";
	
КонецПроцедуры

// В данной функции обрабатываются входящие служебные документы:
// ПДО, ИОП, УОУ - т.е. документы пришедшие в ответ на ранее отправленный ЭД.
//
// Параметры:
// МассивДобавленныхФайловДляИзвещений - Добавленные ЭД, на основании которых надо сформировать извещения о получении
//
Функция ДобавитьДанныеПоПакетуЭД(ПакетЭД,
								СтруктураДанныхПодписей,
								СтруктураДанных,
								СоответствиеФайлПараметры,
								ПапкаДляРаспаковки,
								ФлагОшибки = Ложь,
								ЕстьКриптосредствоНаКлиенте = Неопределено,
								ЭтоXML = Ложь,
								МассивДобавленныхФайловДляИзвещений,
								СоответствиеЭДИПодписей = Неопределено)
								
	УстановитьПривилегированныйРежим(Истина);
								
	Если Найти(СтруктураДанных.ИмяФайла, "ИзвещениеОПолученииДокумента") > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "СпособОбменаЭД");
	ЕстьКриптосредствоНаСервере = СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			 					  И ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
	
	МассивДобавленныхФайлов = Новый Массив;
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
		ИЛИ ЕстьКриптосредствоНаСервере Тогда
		
		НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			// Менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки,
			// либо отсутствует ПО криптопровайдера, в этом случае менеджерам присваиваем "Неопределено"
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
	Иначе
		МенеджерКриптографии = Неопределено;
	КонецЕсли;
	
	Если НЕ ЕстьКриптосредствоНаКлиенте = Истина
		И СтруктураДанныхПодписей.Количество() > 0 И МенеджерКриптографии = Неопределено Тогда
		
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки пакета:
		|%1
		|Пакет содержит электронные цифровые подписи. Для распаковки требуется наличие криптосредства на компьютере.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
		
		// Если распаковка на клиенте, тогда выводить сообщение
		Если НЕ ЕстьКриптосредствоНаКлиенте = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Распаковка пакета'"), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		ФлагОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		Соглашение = ПакетЭД.СоглашениеЭД;
		
		ФайлДанных = СтруктураДанных.ДвоичныеДанные;
		ФайлРасшифрованногоАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(?(ЭтоXML, "xml", "zip"));
		ФайлДанных.Записать(ФайлРасшифрованногоАрхива);
		
		РасшифрованныйФайлДанных = Новый Файл(ФайлРасшифрованногоАрхива);
		
		СтруктураФайлаЭД = СформироватьСтруктуруФайлаЭД();
		
		ПапкаДляРасшифровки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Dec");
		ЭлектронныеДокументыСлужебный.УдалитьЛишнийСлэшВПути(ПапкаДляРасшифровки);
		УдалитьФайлы(ПапкаДляРасшифровки, "*");
		
		Если ЭтоXML Тогда
			КопироватьФайл(РасшифрованныйФайлДанных.ПолноеИмя, ПапкаДляРасшифровки + СтруктураДанных.ИмяФайла);
		Иначе
			ЧтениеЗИП = Новый ЧтениеZIPФайла(РасшифрованныйФайлДанных.ПолноеИмя);
			Попытка
				ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРасшифровки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРасшифровки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
																	   ТекстОшибки,
																	   ТекстСообщения);
				УдалитьФайлы(ПапкаДляРасшифровки);
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*.xml");
		Если ФайлыРасшифровки.Количество() = 0 Тогда
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		Иначе
			ФайлСДанными = ФайлыРасшифровки[0];
			
			СтруктураСлужебныхДанных = СоответствиеФайлПараметры.Получить(ФайлСДанными.Имя);
			КодРегламента = СтруктураСлужебныхДанных.КодРегламента;
			КодТранзакции = СтруктураСлужебныхДанных.КодТранзакции;
			Попытка
				ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO(
						ФайлСДанными.ПолноеИмя,
						КодРегламента,
						КодТранзакции,
						СтруктураФайлаЭД);
				СтруктураФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
				СтруктураФайлаЭД.СоглашениеЭД  = Соглашение;
				СтруктураФайлаЭД.Организация   = ПакетЭДОбъект.Организация;
				СтруктураФайлаЭД.Контрагент    = ПакетЭДОбъект.Контрагент;
			Исключение
				УдалитьФайлы(ПапкаДляРасшифровки);
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		// Для служебных документов, в НомерЭД помещается DocFlow.Id
		// УИД первичного ЭД в ИБ отправителя, он же УникальныйИД в ИБ получателя.
		ГУИДПервичногоЭД = СтруктураСлужебныхДанных.УникальныйИД;
		
		ЭлектронныйДокументВладелец = Неопределено;
		
		// Для неформализованного документооборота служебные документы поступают только в ИБ отправителя
		Если КодРегламента = "Nonformalized" ИЛИ КодРегламента = "Formalized"
			ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка
			ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
			ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			
			ПервичныйЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДПервичногоЭД));
			ЭлектронныйДокументВладелец = ПервичныйЭД;
			ПервичныйЭДНайден = (ПервичныйЭД.ПолучитьОбъект() <> Неопределено);
			
		Иначе
			ПервичныйЭД = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(
																ГУИДПервичногоЭД,
																Перечисления.НаправленияЭД.Входящий,
																,
																Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
			ПервичныйЭДНайден = ПервичныйЭД <> Неопределено;
			
			Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
				ЭлектронныйДокументВладелец = ПервичныйЭД;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПервичныйЭДНайден Тогда
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЭлектронныйДокументВладелец = Неопределено Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			
			Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
				
				Параметры.Вставить("ВидЭД", Перечисления.ВидыЭД.ИзвещениеОПолучении);
				Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
			Иначе
				
				Параметры.Вставить("ВидЭД", Перечисления.ВидыЭД.УведомлениеОбУточнении);
				Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ);
			КонецЕсли;
			
			ЭлектронныйДокументВладелец = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(ГУИДПервичногоЭД,
				Параметры.НаправлениеЭД, Параметры.ВидЭД, Параметры.ТипЭлементаВерсииЭД);
		КонецЕсли;
		
		Если ЭлектронныйДокументВладелец = Неопределено Тогда
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		КонецЕсли;
		
		ВладелецЭД = ПервичныйЭД.ВладелецФайла;
		
		Если СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.Ошибка Тогда
			
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при передаче электронного документа %1, получатель %2.
			|(подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПервичныйЭД,
				ПервичныйЭД.Контрагент);
			
			ПодробныйШаблонОшибки = НСтр("ru = 'При передаче электронного документа %1, возникла ошибка: %2.
			|Документ информационной базы (владелец электронного документа) - %3;
			|Соглашение об обмене электронными документами - %4.'");
			ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодробныйШаблонОшибки, ПервичныйЭД,
				СтруктураФайлаЭД.ОписаниеОшибки, ВладелецЭД, ПервичныйЭД.СоглашениеЭД);

			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Передача электронного документа'"),
																						ПодробныйТекстОшибки,
																						ТекстСообщения);
			
			СтруктураОбновленияПараметров = Новый Структура;
			СтруктураОбновленияПараметров.Вставить("ВладелецЭД",     ВладелецЭД);
			СтруктураОбновленияПараметров.Вставить("ВидЭД",          ПервичныйЭД.ВидЭД);
			СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",  ПервичныйЭД.НаправлениеЭД);
			СтруктураОбновленияПараметров.Вставить("Контрагент",     ПервичныйЭД.Контрагент);
			СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",   ПервичныйЭД.СоглашениеЭД);
			СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ОписаниеОшибки);
			СтруктураОбновленияПараметров.Вставить("СтатусЭД", ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
				СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
			
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров);
			
		Иначе
			
			// Поместим файл данных в присоединенные файлы к документу БД.
			ДобавленныйФайл = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(ГУИДПервичногоЭД,
				СтруктураФайлаЭД.НаправлениеЭД, СтруктураФайлаЭД.ВидЭД, СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
			
			Если Не ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлДанных);
				ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ФайлСДанными.Имя).Подписи;
				
				ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецЭД, ФайлСДанными.ИмяБезРасширения,
					СтрЗаменить(РасшифрованныйФайлДанных.Расширение, ".", ""), ТекущаяДатаСеанса(), ТекущаяДатаСеанса(),
					АдресВоВременномХранилище, Неопределено, , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				
				Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПакетЭД.Контрагент, Соглашение);
				
				Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
					
					Если Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
						ПараметрыУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(Соглашение,
							СтруктураФайлаЭД.Контрагент);
						
						Если НЕ ПараметрыУчастника.Свойство("ИдентификаторКонтрагента") Тогда
							УдалитьФайлы(ПапкаДляРасшифровки);
							Возврат Неопределено;
						Иначе
							ИдентификаторКонтрагента = ПараметрыУчастника.ИдентификаторКонтрагента;
						КонецЕсли;
					Иначе
						ИдентификаторКонтрагента = Соглашение.ИдентификаторКонтрагента;
					КонецЕсли;
					
					СтруктураОбновленияПараметров = Новый Структура;
					СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                  ВладелецЭД);
					СтруктураОбновленияПараметров.Вставить("ВидЭД",                       СтруктураФайлаЭД.ВидЭД);
					СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
					СтруктураОбновленияПараметров.Вставить("НомерЭД",                     ЭлектронныйДокументВладелец.НомерЭД);
					СтруктураОбновленияПараметров.Вставить("Организация",                 СтруктураФайлаЭД.Организация);
					СтруктураОбновленияПараметров.Вставить("Контрагент",                  СтруктураФайлаЭД.Контрагент);
					СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",               СтруктураФайлаЭД.НомерВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("НомерДокументаОтправителя",   СтруктураФайлаЭД.НомерДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("ДатаДокументаОтправителя",    СтруктураФайлаЭД.ДатаДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("Ответственный",               Ответственный);
					СтруктураОбновленияПараметров.Вставить("Отправитель",                 ИдентификаторКонтрагента);
					СтруктураОбновленияПараметров.Вставить("Получатель",                  Соглашение.ИдентификаторОрганизации);
					СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",                Соглашение);
					СтруктураОбновленияПараметров.Вставить("УникальныйИД",                ГУИДПервичногоЭД);
					СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
					СтруктураОбновленияПараметров.Вставить("ВерсияРегламентаЭДО",         ЭлектронныйДокументВладелец.ВерсияРегламентаЭДО);
					СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",         СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("СтатусЭД",
						ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Получен, ДобавленныйФайл));
					Если СтруктураОбновленияПараметров.Свойство("Организация")
						И СтруктураОбновленияПараметров.Организация <> Соглашение.Организация Тогда
						
						УдалитьФайлы(ПапкаДляРасшифровки);
						ВызватьИсключение(НСтр("ru = 'Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении!'"));
						
					КонецЕсли;
					
					ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров);
					
					СтруктураОбновленияПараметров = Новый Структура;
					СтруктураОбновленияПараметров.Вставить("ВладелецЭД",    ВладелецЭД);
					СтруктураОбновленияПараметров.Вставить("ВидЭД",         ПервичныйЭД.ВидЭД);
					СтруктураОбновленияПараметров.Вставить("НаправлениеЭД", ПервичныйЭД.НаправлениеЭД);
					СтруктураОбновленияПараметров.Вставить("Контрагент",    СтруктураФайлаЭД.Контрагент);
					СтруктураОбновленияПараметров.Вставить("СтатусЭД",
						ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
					СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",  ПервичныйЭД.СоглашениеЭД);
					
					Если ЗначениеЗаполнено(СтруктураФайлаЭД.ТекстУточнения) Тогда
						СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ТекстУточнения);
					КонецЕсли;
					
					ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров);
					
					Если КодРегламента = "Invoice" Тогда
						
						Если КодТранзакции <> "ReceiveNotice" И КодТранзакции <> "CorrectionNoticeReceiveNotice" Тогда
							
							МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
							
						КонецЕсли;
						
						Если КодТранзакции = "PostDateConfirmation" ИЛИ КодТранзакции = "SendConfirmation"
							ИЛИ КодТранзакции = "ReceiveNotice" ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
							
							ЭлектронныеДокументыПереопределяемый.ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ДобавленныйФайл);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// Добавим информацию о подписях
				Если ЗначениеЗаполнено(ПодписиФайлаДанных) Тогда
					МассивДанныхПодписей = Новый Массив;
					СоответствиеЭДИПодписей = Новый Соответствие;
					Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
						ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
						ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
							
						Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
								ИЛИ ЕстьКриптосредствоНаСервере Тогда
							// Определим сертификаты криптографии из подписи
							СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
							Если СертификатыПодписи.Количество() <> 0 Тогда
								Сертификат = СертификатыПодписи[0];
								
								ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ДобавленныйФайл, ДвоичныеДанныеПодписи,
									Base64Строка(Сертификат.Отпечаток), ТекущаяДатаСеанса(), "", ИмяФайлаПодписи,
									ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
									Сертификат.Выгрузить());
									
							КонецЕсли;
						Иначе
							МассивДанныхПодписей.Добавить(ДвоичныеДанныеПодписи);
						КонецЕсли;
					КонецЦикла;
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
							ИЛИ ЕстьКриптосредствоНаСервере Тогда
						ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ДобавленныйФайл);
					Иначе
						СоответствиеЭДИПодписей.Вставить(ДобавленныйФайл, МассивДанныхПодписей);
					КонецЕсли;
				КонецЕсли;
				МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УдалитьФайлы(ПапкаДляРасшифровки);
		
		// Добавим информацию о присоединенном файле в документ пакета электронных документов.
		Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
			НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
			НовыйЭлектронныйДокумент.ОбъектВладелец = ДобавленныйФайл.ВладелецФайла;
		КонецЦикла;
		
		Если МенеджерКриптографии <> Неопределено Тогда
			ПодтвержденныеДокументы = ЭлектронныеДокументыСлужебный.ОбработатьПодтвержденияДокументов(ПапкаДляРаспаковки,
				СоответствиеФайлПараметры, ПакетЭДОбъект);
			Для Каждого ПодтвержденныйДокумент Из ПодтвержденныеДокументы Цикл
				МассивДобавленныхФайлов.Добавить("Подтверждение " + Строка(ПодтвержденныйДокумент));
			КонецЦикла;
		КонецЕсли;
		
		ПакетЭДОбъект.Записать();
		
		Возврат МассивДобавленныхФайлов;
	Исключение
		ФлагОшибки = Истина;
		
		УдалитьФайлы(ФайлРасшифрованногоАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ВернутьМассивПредставленийПодписей(МассивПредставления)
	
	МассивВозврата = Новый Массив;
	Для Каждого Элемент Из МассивПредставления Цикл
		МассивВозврата.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ПолучитьИмяФайлаДанных(СтрокаПути)
	
	ПозицияСлэш = Найти(СтрокаПути, "/");
	Пока ПозицияСлэш > 0 Цикл
		СтрокаПути = Сред(СтрокаПути, ПозицияСлэш + 1);
		ПозицияСлэш = Найти(СтрокаПути, "/");
	КонецЦикла;
	Возврат СтрокаПути;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСоответствиеФайлПараметры(ФайлТранспортнойИнф, ФайлКарточки) Экспорт
	
	ПредставленияПодписей = Новый Массив;
	ПодписиДопДанных = Новый Массив;
	СоответствиеВозврата  = Новый Соответствие;
	КодТранзакции = "";
	КодРегламента = "";
	НомерЭДКарточки = Строка(Новый УникальныйИдентификатор);
	НомерЭД = "";
	СтруктураДопДанных = Новый Структура;
	
	ОбъектXML = Новый ЧтениеXML;
	СтруктураЗначений = Новый Структура;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
			ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card"));
		ОбъектXML.Закрыть();
		Если ЭД.Identifiers.ExternalIdentifier <> Неопределено Тогда
			НомерЭДКарточки = ЭД.Identifiers.ExternalIdentifier;
		КонецЕсли;
		Если ЭД.Description <> Неопределено Тогда
			Если ЭД.Description.AdditionalData <> Неопределено И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
				СтруктураДопПараметров = Новый Структура;
				Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
					СтруктураДопПараметров.Вставить(Свойство.Name, Свойство.Value);
				КонецЦикла;
				Если СтруктураДопПараметров.Количество() > 0 Тогда
					СтруктураДопДанных.Вставить("ДопПараметры", СтруктураДопПараметров);
				КонецЕсли;
			КонецЕсли;
			// Определим заголовок произвольного ЭД.
			ПроизвольныйЭД = Истина;
			Если ЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
				ПроизвольныйЭД = ЭД.Description.Title = Строка(Перечисления.ВидыЭД.ПроизвольныйЭД);
			КонецЕсли;
				
			КомментарийЭД = ЭД.Description.Comment;
		КонецЕсли;
		Если ЭД.Type <> Неопределено Тогда
			ТипКарточкиЭД = ЭД.Type.Name;
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ФайлТранспортнойИнф.ПолноеИмя);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
			ПолучитьТипЗначенияCML("ContainerDescription", "http://api-invoice.taxcom.ru/meta"));
		ОбъектXML.Закрыть();
		Для Каждого ДокОборот Из ЭД.DocFlow Цикл
			НомерЭДТИ = ДокОборот.Id;
			Для Каждого Документ Из ДокОборот.Documents.Document Цикл
				КодТранзакции = Документ.TransactionCode;
				КодРегламента = Документ.ReglamentCode;
				НомерЭД = ?(КодТранзакции = "MainDocumentResign", НомерЭДКарточки, НомерЭДТИ);
				
				// Определим произвольный документ по типу ЭД в карточке и по коду транзакции в мете.
				Если ТипКарточкиЭД = "Other" И КодТранзакции = "MainDocument" И ПроизвольныйЭД Тогда
					СтруктураДопДанных.Вставить("ПроизвольныйДокумент", КомментарийЭД);
				КонецЕсли;
				
				ПредставлениеДокумента = "";
				Если Документ.Files.MainImage <> Неопределено Тогда
					ПредставлениеДокумента = ПолучитьИмяФайлаДанных(Документ.Files.MainImage.Path);
				КонецЕсли;
				Если Документ.Files.MainImageSignature <> Неопределено Тогда
					ПредставленияПодписей.Очистить();
					Для Каждого Подпись Из Документ.Files.MainImageSignature Цикл 
						ПредставлениеПодписи = ПолучитьИмяФайлаДанных(Подпись.Path);
						Если НЕ ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
							// Если MainImage - пустое, значит пришел контейнер с подтверждением (подписью).
							СтруктураВложения = Новый Структура();
							СтруктураВложения.Вставить("Подписи",       ВернутьМассивПредставленийПодписей(ПредставленияПодписей));
							СтруктураВложения.Вставить("УникальныйИД",  НомерЭД);
							СтруктураВложения.Вставить("НомерЭД",       НомерЭДКарточки);
							СтруктураВложения.Вставить("КодТранзакции", КодТранзакции);
							СтруктураВложения.Вставить("КодРегламента", КодРегламента);
							СтруктураВложения.Вставить("ДопДанные",     СтруктураДопДанных);
							СтруктураВложения.Вставить("НомерЭДТИ",     НомерЭДТИ);
							ДобавитьДанныеВСоответствие(СоответствиеВозврата, ПредставлениеПодписи, СтруктураВложения);
						Иначе
							ПредставленияПодписей.Добавить(ПредставлениеПодписи);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Документ.Files.DataImage <> Неопределено Тогда
					ПодписиДопДанных.Очистить();
					Если Документ.Files.DataImageSignature <> Неопределено Тогда
						Для Каждого Подпись Из Документ.Files.DataImageSignature Цикл 
							ПодписиДопДанных.Добавить(ПолучитьИмяФайлаДанных(Подпись.Path));
						КонецЦикла;
					КонецЕсли;
					СтруктураДопДанных.Вставить("ФайлДопДанных", ПолучитьИмяФайлаДанных(Документ.Files.DataImage.Path));
					СтруктураДопДанных.Вставить("ПодписиДопДанных", ПодписиДопДанных);
				КонецЕсли;
				Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
					ДобавитьДанныеВСоответствие(СоответствиеВозврата, ПредставлениеДокумента,
						Новый Структура("Подписи, УникальныйИД, НомерЭД, КодТранзакции, КодРегламента, ДопДанные",
						ВернутьМассивПредставленийПодписей(ПредставленияПодписей), НомерЭД, НомерЭДКарточки, КодТранзакции, КодРегламента, СтруктураДопДанных));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ФайлТранспортнойИнф.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		СоответствиеВозврата.Очистить();
	КонецПопытки;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайлов)
	
	МассивВозврата = Новый Массив;
	Для Каждого ФайлДанных Из МассивФайлов Цикл
		
		СтруктураМассива = Новый Структура;
		СтруктураМассива.Вставить("ДвоичныеДанные",        Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя));
		СтруктураМассива.Вставить("ИмяФайлаБезРасширения", ФайлДанных.ИмяБезРасширения);
		СтруктураМассива.Вставить("ИмяФайла",              ФайлДанных.Имя);
		МассивВозврата.Добавить(СтруктураМассива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции)
	
	// Виды входящих ЭД и соответствующие коды транзакций:
	// ЭД       MainDocument
	// Подпись  MainDocumentResign
	// ЭД(ЭСФ)  Invoice
	// ПДПЭСФ   PostDateConfirmation
	// ИПЭСФ    ReceiveNotice
	// УУЭСФ    CorrectionNotice
	// ИПУУЭСФ  CorrectionNoticeReceiveNotice
	// ПДОЭСФ   SendConfirmation
	// ПДОИПЭСФ ReceiveNoticePostDateConfirmation
	
	Если КодТранзакции = "MainDocument" ИЛИ КодТранзакции = "Invoice"
		ИЛИ КодТранзакции = "VendorTitle" ИЛИ КодТранзакции = "CustomerTitle" Тогда
		
		ВозвращаемоеЗначение = "ЭД";
	ИначеЕсли КодТранзакции = "MainDocumentResign" Тогда
		ВозвращаемоеЗначение = "Подпись";
	Иначе
		ВозвращаемоеЗначение = "СлужебныйЭД";
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РазобратьСтрокуДаты(ПараметрРазбора)
	
	Возврат Сред(ПараметрРазбора, 7, 4) + Сред(ПараметрРазбора, 4, 2) + Сред(ПараметрРазбора, 1, 2);
	
КонецФункции

Функция СформироватьСтруктуруФайлаЭД()
	
	СтруктураФайлаЭД = Новый Структура();
	СтруктураФайлаЭД.Вставить("ВладелецЭД");
	СтруктураФайлаЭД.Вставить("Контрагент");
	СтруктураФайлаЭД.Вставить("ВидЭД");
	СтруктураФайлаЭД.Вставить("НаправлениеЭД");
	
	СтруктураФайлаЭД.Вставить("СоглашениеЭД");
	СтруктураФайлаЭД.Вставить("Организация");
	СтруктураФайлаЭД.Вставить("НомерЭД");
	СтруктураФайлаЭД.Вставить("НомерВерсииЭД");
	СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД");
	СтруктураФайлаЭД.Вставить("НомерДокументаОтправителя");
	СтруктураФайлаЭД.Вставить("ДатаДокументаОтправителя");
	
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		СтруктураФайлаЭД.Вставить("Партнер");
	КонецЕсли;
	СтруктураФайлаЭД.Вставить("СтатусЭДВладельца");
	СтруктураФайлаЭД.Вставить("ОписаниеОшибки");
	СтруктураФайлаЭД.Вставить("ТекстУточнения");
	
	// Обязательные для заполнения параметры.
	СтруктураФайлаЭД.Вставить("ОбязательныеПараметры","ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД");
	
	Возврат СтруктураФайлаЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формат обмена

Функция СформироватьКарточкуТакскомCML(ДеревоДанных, ТекстОшибки)
	
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/card}.Card";
	Попытка
		Карточка = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		АбонентОтправитель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender.Abonent");
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Id", ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.ИД"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Name",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.Наименование"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Inn", ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.ИНН"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Kpp", ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.КПП"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(АбонентОтправитель, "ContractNumber",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Отправитель.НомерДоговора"), , ТекстОшибки);
		
		Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender");
		ЗаполнитьСвойствоXDTO(Отправитель, "Abonent", АбонентОтправитель, , ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Тип")) Тогда
			АбонентПолучатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Organization");
			
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Name",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Наименование"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Type",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Тип"), , ТекстОшибки);
			ИмяСвойства = "Organization";
		Иначе
			АбонентПолучатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Abonent");
			
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Id", ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.ИД"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Name",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Наименование"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Inn", ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.ИНН"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "Kpp", ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.КПП"), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(АбонентПолучатель, "ContractNumber",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.НомерДоговора"), , ТекстОшибки);
			ИмяСвойства = "Abonent";
		КонецЕсли;
		
		Получатель  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver");
		ЗаполнитьСвойствоXDTO(Получатель, ИмяСвойства, АбонентПолучатель, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Receiver", Получатель, , ТекстОшибки);
		
		Идентификаторы = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Identifiers");
		ЗаполнитьСвойствоXDTO(Идентификаторы, "ExternalIdentifier",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Определение.ВнешнийИдентификатор"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Identifiers", Идентификаторы, , ТекстОшибки);
		
		Тип = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Type");
		ЗаполнитьСвойствоXDTO(Тип, "Name", ЗначениеРеквизитаВДереве(ДеревоДанных, "Определение.Имя"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Тип, "ResignRequired",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Определение.ТребуетсяПовторнаяПодпись"), , ТекстОшибки);
			
		Описание = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description");
		ЗаполнитьСвойствоXDTO(Описание, "Title", ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Заголовок"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Описание, "Date", ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Дата"), , ТекстОшибки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Комментарий")) Тогда
			ЗаполнитьСвойствоXDTO(Описание, "Comment", ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Комментарий"), , ТекстОшибки);
		КонецЕсли;
		
		СтрокаТаблицыДополнительныхДанных = ДеревоДанных.Строки.Найти("Описание.ДополнительныеДанные", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(СтрокаТаблицыДополнительныхДанных.Значение) Тогда
			ОписаниеДопДанные = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description.AdditionalData");
			Для Каждого СтрокаДопДанных Из СтрокаТаблицыДополнительныхДанных.Строки Цикл
				ДопДанные = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description.AdditionalData.AdditionalParameter");
				
				ЗаполнитьСвойствоXDTO(ДопДанные, "Name",
					ЗначениеРеквизитаВДереве(СтрокаДопДанных, "Описание.ДополнительныеДанные.НомерСтроки.Имя"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ДопДанные, "Value",
					ЗначениеРеквизитаВДереве(СтрокаДопДанных, "Описание.ДополнительныеДанные.НомерСтроки.Значение"), , ТекстОшибки);
				ОписаниеДопДанные.AdditionalParameter.Добавить(ДопДанные);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(Описание, "AdditionalData", ОписаниеДопДанные, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Карточка, "Type", Тип, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, , ТекстОшибки);
		
		Карточка.Проверить();
		
		ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ВыгрузитьЭДвФайл(Карточка, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование карточки такском'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		Возврат "";
	КонецПопытки;
	
КонецФункции

Функция СформироватьТранспортнуюИнформациюТакскомCML(ДеревоДанных, ТекстОшибки)
	
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/meta}.ContainerDescription";
	Попытка
		
		ОписаниеКонтейнера = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		Документооборот = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow");
		ЗаполнитьСвойствоXDTO(Документооборот, "ID", ЗначениеРеквизитаВДереве(ДеревоДанных, "ИД"), , ТекстОшибки);
		
		ДокументыСхемы  = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents");
		Документ     = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document"); 
		
		ЗаполнитьСвойствоXDTO(Документ, "TransactionCode",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.КодТранзакции"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ReglamentCode",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.КодРегламента"), , ТекстОшибки);
		
		Файлы = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files");
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ГлавныйФайл.Путь")) Тогда
			ФайлДанных = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImage");
			ИмяФайла = ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ГлавныйФайл.Имя");
			Если ЗначениеЗаполнено(ИмяФайла) Тогда
				ЗаполнитьСвойствоXDTO(ФайлДанных, "Name", ИмяФайла, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ГлавныйФайл.Путь"),
				Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Файлы, "MainImage", ФайлДанных, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаТаблицыПодписейГлавногоФайла = ДеревоДанных.Строки.Найти("Документ.ГлавныйФайлПодписи", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(СтрокаТаблицыПодписейГлавногоФайла.Значение) Тогда
			Для Каждого СтрПодпись Из СтрокаТаблицыПодписейГлавногоФайла.Строки Цикл
				Подпись = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImageSignature");
				ИмяФайла = ЗначениеРеквизитаВДереве(СтрПодпись, "Документ.ГлавныйФайлПодписи.НомерСтроки.Имя");
				Если ЗначениеЗаполнено(ИмяФайла) Тогда
					ЗаполнитьСвойствоXDTO(Подпись, "Name", ИмяФайла, , ТекстОшибки);
				КонецЕсли;
				Путь = ЗначениеРеквизитаВДереве(СтрПодпись, "Документ.ГлавныйФайлПодписи.НомерСтроки.Путь");
				ЗаполнитьСвойствоXDTO(Подпись, "Path", Путь, Истина, ТекстОшибки);
				Файлы.MainImageSignature.Добавить(Подпись);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайл.Путь")) Тогда
			ФайлДанных = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.DataImage");
			ИмяФайла = ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайл.Имя");
			Если ЗначениеЗаполнено(ИмяФайла) Тогда
				ЗаполнитьСвойствоXDTO(ФайлДанных, "Name", ИмяФайла, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайл.Путь"),
			Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Файлы, "DataImage", ФайлДанных, , ТекстОшибки);
			
			СтрокаТаблицыПодписейДополнительногоФайла = ДеревоДанных.Строки.Найти("Документ.ДополнительныйФайлПодписи", "ПолныйПуть", Истина);
			Если ЗначениеЗаполнено(СтрокаТаблицыПодписейДополнительногоФайла.Значение) Тогда
				
				Для Каждого СтрПодпись Из СтрокаТаблицыПодписейДополнительногоФайла.Строки Цикл
					Подпись = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.DataImageSignature");
					ИмяФайла = ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайлПодписи.НомерСтроки.Имя");
					Если ЗначениеЗаполнено(ИмяФайла) Тогда
						ЗаполнитьСвойствоXDTO(Подпись, "Name", ИмяФайла, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Подпись, "Path", ЗначениеРеквизитаВДереве(ДеревоДанных, "Документ.ДополнительныйФайлПодписи.НомерСтроки.Путь"),
					Истина, ТекстОшибки);
					Файлы.DataImageSignature.Добавить(Подпись);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ФайлКарточки = ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.ExternalCard");
		ЗаполнитьСвойствоXDTO(ФайлКарточки, "Path", "Card.xml", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файлы, "ExternalCard", ФайлКарточки, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "Files", Файлы, , ТекстОшибки);
		ДокументыСхемы.Document.Добавить(Документ);
		
		ЗаполнитьСвойствоXDTO(Документооборот, "Documents", ДокументыСхемы, , ТекстОшибки);
		ОписаниеКонтейнера.DocFlow.Добавить(Документооборот);
		
		ОписаниеКонтейнера.Проверить();
		
		ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ВыгрузитьЭДвФайл(ОписаниеКонтейнера, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование транспортной информации'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		Возврат "";
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Приглашения к обмену

Процедура ЗаполнитьСтрокуТаблицыКонтактов(Строка, Контакт)
	
	Строка.ИНН = Контакт.Inn;
	
	Если Контакт.Свойства().Получить("Name") <> Неопределено И ТипЗнч(Контакт.Name) = Тип("Строка") Тогда
		Строка.Наименование = Контакт.Name;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("State") <> Неопределено Тогда
		Если Контакт.State.Code = "Error" Тогда
			КодОшибки = ПреобразоватьТекстСтатуса(Контакт.State.ErrorCode);
			Строка.Состояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ошибка: %1", КодОшибки);
		Иначе
			Строка.Состояние = ПреобразоватьТекстСтатуса(Контакт.State.Code);
		КонецЕсли;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("Kpp") <> Неопределено И ТипЗнч(Контакт.Kpp) = Тип("Строка") Тогда
		Строка.КПП = Контакт.Kpp;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("EDXClientId") <> Неопределено Тогда
		Строка.Идентификатор= Контакт.EDXClientId;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыОператорыЭДО: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Работа с извещением о получении

// Формирует пакет электронных документов.
//
// Параметры:
//  ТекСтрокаПЭД  - таблица значений - перечень электронных документов для включения в пакет
//
// Возвращаемое значение:
//  КонтейнерСформирован - Булево (Истина - извещение сформировано, иначе Ложь)
//
Функция СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(ТекСтрокаПЭД, АдресЗашифрованныхДанныхНаКлиенте = Неопределено) Экспорт
	
	Возврат СформироватьЭДПрисоединенныйФайлПакетаТакском(ТекСтрокаПЭД, АдресЗашифрованныхДанныхНаКлиенте);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

// Функция выполняет отправку файлов, находящихся в каталоге "АдресКаталогаОтправки".
//
// Параметры:
//  Маркер                      - двоичные данные, маркер, полученный на клиенте
//  АдресКаталогаОтправки       - строка, полный путь к каталогу с передаваемыми файлами;
//  АдресРесурса                - строка, адрес веб-сервиса;
//  ФлагОтладки - Булево.
//
// Возвращаемое значение:
//  РезультатОтправки - Число (количество отправленных документов)
//
Функция ОтправитьЧерезОператораЭДО(Маркер, АдресКаталогаОтправки, АдресРесурса, ФлагОтладки = Ложь) Экспорт
	
	Возврат ОтправитьЧерезТакском(Маркер, АдресКаталогаОтправки, АдресРесурса, ФлагОтладки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

// Получить новые электронные документы от Такском
//
// Параметры:
//  СтруктураВозврата - структура с полями: "ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение"
//  СоотвСоглашенийИСтруктурСертификатов - Соответствие - соответствие соглашений и структур сертификатов авторизации;
//  ПолучитьВесьСписок - получить список ЭД без ограничения выборки по дате
//
Процедура ПолучитьНовыеЭДОператораЭДО(СтруктураВозврата,
									  СоотвСоглашенийИСтруктурСертификатов,
									  ПолучитьВесьСписок = Ложь) Экспорт
	
	ПолучитьНовыеЭДОператорТакском(СтруктураВозврата, СоотвСоглашенийИСтруктурСертификатов, ПолучитьВесьСписок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Приглашения к обмену

// Читает запрос приглашений от оператора ЭДО.
//
// Параметры:
//  ИмяФайла  - строка - имя файла
//  ТаблицаКонтрагентов  - таблица значений - список контрагентов
//
Процедура ПрочитатьЗапросПриглашенияОператораЭДО(ИмяФайла, ТаблицаКонтрагентов) Экспорт
	
	ПрочитатьЗапросПриглашенияТакском(ИмяФайла, ТаблицаКонтрагентов);
	
КонецПроцедуры

// Отправляет запрос приглашений оператора ЭДО.
//
// Параметры:
//  ТаблицаОбработки  - Таблица значений - таблица приглашений
//                      продолжение описания параметра
//  СтруктураДопПараметров  - структура - перечень дополнительных параметров
//
// Возвращаемое значение:
//  ИмяФайла - Строка, имя файла либо пустая
//
Функция ИсходящийЗапросПриглашенияОператораЭДО(ТаблицаОбработки, СтруктураДопПараметров) Экспорт
	
	Возврат ИсходящийЗапросПриглашенияТакском(ТаблицаОбработки, СтруктураДопПараметров);
	
КонецФункции

// Отправляет спецоператору информацию об принятии или отклонении приглашения
// 
// Возвращаемое значение - Булево (Истина - операция выполнена успешно, иначе Ложь)
//
Функция ПринятьОтклонитьКонтактЧерезОператораЭДО(Идентификатор, ПриглашениеПринято, Маркер) Экспорт
	
	Возврат ПринятьОтклонитьКонтактЧерезТакском(Идентификатор, ПриглашениеПринято, Маркер);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
// ПакетЭД             - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов,
// ПапкаДляРаспаковки  - строка - пусть к папке,
// ПараметрыШифрования - Структура, настройки шифрования, применимые к данному пакету электронных документов.
//
// Возвращаемое значение:
//  СтруктураВозврата - массив двоичных данных.
//
Функция ВернутьМассивДвоичныхДанныхПакетаОператораЭДО(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования) Экспорт

	Возврат ВернутьМассивДвоичныхДанныхПакетаТакском(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования);
	
КонецФункции

// Возвращаемое значение - Число (количество обработанных документов)
Функция ОбработатьДвоичныеДанныеПакетаОператораЭДО(
				ПакетЭД,
				ДанныеРаспаковки,
				ПапкаДляРаспаковки,
				ЕстьКриптосредствоНаКлиенте,
				СоответствиеЭДИПодписей,
				СтруктураВозврата) Экспорт
	
	Возврат ОбработатьДвоичныеДанныеПакетаТакском(
					ПакетЭД,
					ДанныеРаспаковки,
					ПапкаДляРаспаковки,
					ЕстьКриптосредствоНаКлиенте,
					СоответствиеЭДИПодписей,
					СтруктураВозврата);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки оператора ЭДО

// Формирует структуру настроек для оператора ЭДО
//
// Возвращаемое значение:
//  СтруктураНастроек   - структура настроек оператора ЭДО.
//
Функция СтруктураНастроекОператораЭДО() Экспорт
	
	Возврат СтруктураНастроекТакском();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен с оператором ЭДО

Функция МассивВладельцев(МассивЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЭДПрисоединенныеФайлы.ВладелецФайла
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)";
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	ТабРез = Запрос.Выполнить().Выгрузить();
	Возврат ТабРез.ВыгрузитьКолонку("ВладелецФайла");
	
КонецФункции

// Работа с деревом

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ОбщегоНазначенияЭД.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Процедура ДобавитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Добавить();
	НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
	НовСтрока.ПолныйПуть = ИмяРеквизита;
	НовСтрока["Уровень" + НомерУровня] = ОбщегоНазначенияЭД.НазваниеКолонки(ИмяРеквизита);
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

// Только для внутреннего использования
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина) Экспорт
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	ИначеЕсли СообщатьОбОшибке Тогда
		ТекстСообщения = Нстр("ru = 'Не найдено поле в дереве данных по полному пути <%1>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолныйПуть);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСлужебныеПоляФНС(ДеревоДанных, СтруктураЭД)
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсПрог", "1С:Предприятие 8");
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсФорм", "5.01");
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдОтпр",   СтруктураЭД.Отправитель);
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдПок",    СтруктураЭД.Получатель);
	
	Если СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		ИЛИ СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ДобавитьРеквизитыОператораЭДО(ДеревоДанных);
	Иначе // заполним данными Организации или нулевыми значениями, т.к. поля обязательны к заполнению в формате ФНС
		ДобавитьРеквизитыПустогоОператораЭДО(ДеревоДанных, СтруктураЭД.Организация);
	КонецЕсли;
	ТекДатаВремя = ТекущаяДатаСеанса();
	ВставитьЗначениеВДерево(ДеревоДанных, "ДатаДок", Формат(ТекДатаВремя, "ДФ=dd.MM.yyyy"));
	ВставитьЗначениеВДерево(ДеревоДанных, "ВремДок", Прав(СтрЗаменить("0" + Формат(ТекДатаВремя, "ДЛФ=T"), ":", "."), 8));
	ВставитьЗначениеВДерево(ДеревоДанных, "ВидЭД",   СтруктураЭД.ВидЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "КНД",     СтруктураЭД.КНД);
	ВставитьЗначениеВДерево(ДеревоДанных, "УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
	
	Если СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.СчетФактура Тогда
		Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ВставитьЗначениеВДерево(ДеревоДанных, "НаимПервДок", "Товарная накладная");
			ВставитьЗначениеВДерево(ДеревоДанных, "ОКУДПервДок", "0330212");
			ВставитьЗначениеВДерево(ДеревоДанных, "НомФорм",     "ТОРГ-12");
		ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "НаимПервДок", "Акт о выполнении работ (оказании услуг)");
		ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "НомФорм", "Корректировочный документ получатель");
		КонецЕсли;
	КонецЕсли;
	ГГГГММДД = СтрЗаменить(Формат(ТекДатаВремя, "ДФ=yyyy-MM-dd"), "-", "");
	СтруктураФайла = Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
									 СтруктураЭД.ПрефиксИдФайла,
									 СтруктураЭД.Получатель,
									 СтруктураЭД.Отправитель,
									 ГГГГММДД,
									 СтруктураЭД.УникальныйИдентификатор);
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдФайл", ЭлектронныеДокументыСлужебный.ФНСИмяФайла(СтруктураФайла));
	
КонецПроцедуры

// Проверяет заполнение обязательных реквизитов дерева
// Параметры:
//  ДеревоДанных - деревоЗначений - дерево с данными.
//  ТекстОшибки - Строка - содержит текст ошибки
//
Процедура ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки, ЭтоТаблица = Ложь, НомерСтроки = Неопределено)

	Для Каждого Строка ИЗ ДеревоДанных.Строки Цикл
		
		Если Строка.Обязательное = "Да" И Не ЗначениеЗаполнено(Строка.Значение)
										И Не ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			ПрикладноеПредставление = ЭлектронныеДокументыПовтИсп.ПрикладноеПредставлениеРеквизита(Строка.КодПредставления);
			Если Не ЗначениеЗаполнено(ПрикладноеПредставление) Тогда
				ПрикладноеПредставление = ОбщегоНазначенияЭД.НазваниеКолонки(Строка.ПолныйПуть);
			КонецЕсли;
			Если ЭтоТаблица Тогда
				ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле таблицы: ""%1."" в строке %2'");
				ТекстОшибки = ТекстОшибки
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПрикладноеПредставление, НомерСтроки)
							+ Символы.ПС;
			Иначе
				ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле: ""%1.""'");
				ТекстОшибки = ТекстОшибки
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПрикладноеПредставление)
							+ Символы.ПС;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Строка.Признак = "Таблица" И Строка.Обязательное = "Да" Тогда
			Для Каждого СтрокаТаблицы ИЗ Строка.Строки Цикл
				ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(СтрокаТаблицы, ТекстОшибки, Истина, СтрокаТаблицы.Значение);
			КонецЦикла
		ИначеЕсли Строка.Признак = "Выбор" Тогда
			ПроверяемаяСтрока = Строка.Строки.Найти(Строка.ПолныйПуть + "." + Строка.Значение, "ПолныйПуть");
			ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ПроверяемаяСтрока, ТекстОшибки);
		ИначеЕсли Строка.Признак = "Группа" И Строка.Значение = Истина И Строка.Строки.Количество() > 0 Тогда
			ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(Строка, ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьВДеревеДанныеПодписанта(ПодписантXDTO, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	
		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант") = "ИП" Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(
					ФИО,
					"Фамилия",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.Фамилия"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					ФИО,
					"Имя",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.Имя"),
					Истина,
					ТекстОшибки);
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.Отчество")) Тогда
				ЗаполнитьСвойствоXDTO(
						ФИО,
						"Отчество",
						ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.Отчество"),
						,
						ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					ИП,
					"ИННФЛ",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.ИНН"),
					Истина,
					ТекстОшибки);
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.СвидетельствоОРегистрацииИП")) Тогда
				ЗаполнитьСвойствоXDTO(
						ИП,
						"СвГосРегИП",
						ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.СвидетельствоОРегистрацииИП"),
						,
						ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПодписантXDTO, "ИП", ИП, Истина, ТекстОшибки);
			ОбъектЗаполнен = Истина;
		ИначеЕсли ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант") = "ЮЛ" Тогда
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(
					ФИО,
					"Фамилия",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Фамилия"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					ФИО,
					"Имя",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Имя"),
					Истина,
					ТекстОшибки);
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Отчество")) Тогда
				ЗаполнитьСвойствоXDTO(
						ФИО,
						"Отчество",
						ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Отчество"),
						,
						ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					ЮЛ,
					"ИННЮЛ",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.ИНН"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(
					ЮЛ,
					"Должн",
					ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Должность"),
					Истина,
					ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПодписантXDTO,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
			ОбъектЗаполнен = Истина;
		КонецЕсли;

	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДолжностноеЛицоФНС(ОтпускРазрешилXDTO, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, Префикс)
	
	ОбъектЗаполнен = Ложь;
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс)) Тогда
		
		ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(
				ФИОТип,
				"Фамилия",
				ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".Фамилия"),
				Истина,
				ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".Имя"), Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".Отчество")) Тогда
			ЗаполнитьСвойствоXDTO(ФИОТип,
					"Отчество",
					ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".Отчество"),
					,
					ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".Должность")) Тогда
			ЗаполнитьСвойствоXDTO(
					ОтпускРазрешилXDTO,
					"Должность",
					ЗначениеРеквизитаВДереве(ДеревоДанных, Префикс + ".Должность"),
					,
					ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "ФИО", ФИОТип, Истина, ТекстОшибки);
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДанныеУчастникаФНС(УчастникXDTO, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ДанныеЗаполнены = Ложь;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника")) Тогда
		
		ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		
		Если ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
			
			СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
			ИНН = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ИНН, , ТекстОшибки);
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			Фамилия = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, ТекстОшибки);
			Имя = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, ТекстОшибки);
			Отчество = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО,  , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
			Если ПространствоИменСхемы = "IAKTPRM2" Тогда
				СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", "---", , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",    СвЮЛ,  , ТекстОшибки);
			КонецЕсли;
			Наименование = Фамилия + " " + Имя + " " + Отчество;
		Иначе
			СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			Наименование = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", Наименование, , ТекстОшибки);
			ИНН = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ИНН, , ТекстОшибки);
			КПП = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
			Если ПространствоИменСхемы = "IAKTPRM2" Тогда
				СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИО,  "Фамилия", "---", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО,  "Имя",     "---", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП",   ФИО,         , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",    СвФЛ,        , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ОКПО", Ложь)) Тогда
		ЗаполнитьСвойствоXDTO(
				УчастникXDTO,
				"ОКПО",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ОКПО"),
				,
				ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидУчастника + ".Адрес", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(Адрес.Значение) Тогда
			ЗаполнитьАдрес(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы, ВидУчастника);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакт = ПолучитьОбъектТипаCML("УчастникТип.Контакт", ПространствоИменСхемы);
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Контакт.Телефон")) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "УчастникТип.Контакт", "Тлф", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Контакт.Телефон"));
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Номер телефона превышает допустимую длину %1 симв. (%2 %3).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, ВидУчастника, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД("Заполнение XDTO", ТекстСообщения);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "Тлф", Значение, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Контакт.Факс")) Тогда
		Длина = Число(ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "УчастникТип.Контакт", "Факс", ВидФасетаXDTO.МаксДлина));
		Значение = СокрЛП(Лев(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Контакт.Факс"), Длина));
		Если Длина < СтрДлина(Значение) Тогда
			ШаблонСообщения = НСтр("ru = 'Номер факса превышает допустимую длину %1 симв. (%2 %3).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина, ВидУчастника, Наименование);
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
			ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД("Заполнение XDTO", ТекстСообщения);
		Иначе
			ЗаполнитьСвойствоXDTO(Контакт, "Факс", Значение, , ТекстОшибки);
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", Контакт, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет")) Тогда
		РеквизитыБанка = "НомерСчета, НаимБанк, БИК";
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИменСхемы);
		СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИменСхемы);
		
		НомерСчета = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.НомерСчета");
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", НомерСчета, ,ТекстОшибки);
		КонецЕсли;
		
		НаимБанк = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.НаимБанк");
		БИК = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.БИК");
		Если ЗначениеЗаполнено(НаимБанк) ИЛИ ЗначениеЗаполнено(БИК) Тогда
			Если ЗначениеЗаполнено(НаимБанк) Тогда
				ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк", НаимБанк, ,ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(БИК) Тогда
				ЗаполнитьСвойствоXDTO(СвБанк, "БИК", БИК, ,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "СвБанк",   СвБанк,              , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникXDTO,        "БанкРекв", БанковскиеРеквизиты, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;

	Возврат ДанныеЗаполнены;
	
КонецФункции

Процедура ЗаполнитьАдрес(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
		
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
	СхемаСчетаФактуры = (Найти(ПространствоИменСхемы, "SFAKT") <> 0);
	СтрокаАдреса = АдресМестонахождения.Строки.Найти(
												ВидУчастника + ".Адрес." + АдресМестонахождения.Значение,
												"ПолныйПуть");
	Если АдресМестонахождения.Значение = "Структурированный" Тогда
		АдрРФ = ПолучитьОбъектТипаCML("АдресТип.АдрРФ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", СтрокаАдреса.Строки[1].Значение, СхемаСчетаФактуры, ТекстОшибки);
		РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
		Для Каждого Строка Из СтрокаАдреса.Строки Цикл
			ИмяРеквизита = ОбщегоНазначенияЭД.НазваниеКолонки(Строка.ПолныйПуть);
			Если Найти(РеквизитыАдреса, ИмяРеквизита) > 0 И ЗначениеЗаполнено(Строка.Значение) Тогда
				ЗаполнитьСвойствоXDTO(АдрРФ, ИмяРеквизита, Строка.Значение, , ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, СхемаСчетаФактуры, ТекстОшибки);
	ИначеЕсли НЕ СхемаСчетаФактуры И АдресМестонахождения.Значение = "Произвольный" Тогда
		// В схеме ТОРГ-12 и Акт, адрес в виде строки передается в элементе схемы "АдрТекст".
		ЗаполнитьСвойствоXDTO(АдресТип, "АдрТекст", СтрокаАдреса.Значение, , ТекстОшибки);
	Иначе
		// В схеме счета-фактуры, адрес в виде строки передается в элементе схемы "АдрИНО".
		АдресXDTO = ПолучитьОбъектТипаCML("АдресТип.АдрИНО", ПространствоИменСхемы);
		Для Каждого Строка Из СтрокаАдреса.Строки Цикл
			ИмяРеквизита = ОбщегоНазначенияЭД.НазваниеКолонки(Строка.ПолныйПуть);
			Если ЗначениеЗаполнено(Строка.Значение) Тогда
				Если 	  ИмяРеквизита = "КодСтраны" Тогда
					ЗаполнитьСвойствоXDTO(АдресXDTO, "КодСтр", Строка.Значение, , ТекстОшибки);
				ИначеЕсли ИмяРеквизита = "АдресСтрокой" Тогда
					ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрТекст", Строка.Значение, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьСвойствоXDTO(АдресТип, "АдрИНО", АдресXDTO, СхемаСчетаФактуры, ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, СхемаСчетаФактуры, ТекстОшибки);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыОператораЭДО(ДеревоДанных)
	
	СтруктураРеквизитов = СтруктураНастроекОператораЭДО();
	Наименование = "";
	ИНН = "";
	ИдентификаторОператора = "";
	СтруктураРеквизитов.Свойство("Наименование", Наименование);
	СтруктураРеквизитов.Свойство("ИНН", ИНН);
	СтруктураРеквизитов.Свойство("ИдентификаторОператора", ИдентификаторОператора);
	СтрокаРеквизитыОператора = ДеревоДанных.Строки.Добавить();
	СтрокаРеквизитыОператора.ПолныйПуть = "РеквизитыОператораЭДО";
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.НаимОрг", Наименование);
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИННЮЛ",   ИНН);
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИдЭДО",   ИдентификаторОператора);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыПустогоОператораЭДО(ДеревоДанных, ДанныеПоОрганизации)
	
	Наименование = НСтр("ru = 'Без оператора ЭДО'");
	ИНН = "1111111117"; // первый ИНН, отвечающий требованиям формата
	
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеПоОрганизации);
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование) Тогда
		Наименование = ДанныеЮрФизЛица.ПолноеНаименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ИНН) Тогда
		ИНН = ДанныеЮрФизЛица.ИНН;
	КонецЕсли;
	СтрокаРеквизитыОператора = ДеревоДанных.Строки.Добавить();
	СтрокаРеквизитыОператора.ПолныйПуть = "РеквизитыОператораЭДО";
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.НаимОрг", Наименование);
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИННЮЛ",   Лев(ИНН, 10));
	ВставитьЗначениеВДерево(СтрокаРеквизитыОператора, "РеквизитыОператораЭДО.ИдЭДО",   "---");
	
КонецПроцедуры

Функция НакладнаяСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("КодХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("СрокГодности");
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Штрихкод");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("СуммаСНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция СчетНаОплатуСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("СрокПлатежа");
	СтруктураПараметров.Вставить("РасчетныйСчетОрганизации");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ЗаказПоставщикуСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("Роль");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ЗаказКлиентаСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Роль");
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента");
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ПрайсЛистСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Описание");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, Валюта, ДатаФормирования, Дата, ВидЭД,
	|НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция АктВыполненныхРаботСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаДокумента");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	Структурапараметров.Вставить("НалогообложениеНДС");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика");
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента");
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ОтчетОСписанииКомиссионногоТовараСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров",  ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("НачалоПериода");
	СтруктураПараметров.Вставить("КонецПериода");
	СтруктураПараметров.Вставить("ДатаПлатежа");
	СтруктураПараметров.Вставить("НалогообложениеНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД");

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПередачаТоваровМеждуОрганизациямиСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ВозвратТоваровМеждуОрганизациямиСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
		
	Возврат СтруктураПараметров;
		
КонецФункции

Функция ПлатежноеПоручениеСтруктураПараметров()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОплаты");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("ВидПлатежа");
	СтруктураПараметров.Вставить("ПлательщикКПП");
	СтруктураПараметров.Вставить("ПолучательКПП");
	СтруктураПараметров.Вставить("Очередность");
	СтруктураПараметров.Вставить("СуммаДокумента");
	СтруктураПараметров.Вставить("ПолучательРасчСчет");
	СтруктураПараметров.Вставить("Получатель");
	СтруктураПараметров.Вставить("ПолучательНаим");
	СтруктураПараметров.Вставить("ПолучательИНН");
	СтруктураПараметров.Вставить("ПолучательБанк");
	СтруктураПараметров.Вставить("ПолучательГородБанка");
	СтруктураПараметров.Вставить("ПолучательБИКБанка");
	СтруктураПараметров.Вставить("ПолучательКоррСчет");
	СтруктураПараметров.Вставить("ПолучательБанкДляРасчетов");
	СтруктураПараметров.Вставить("ПолучательГородРЦБанка");
	СтруктураПараметров.Вставить("ПолучательБИКРЦБанка");
	СтруктураПараметров.Вставить("ПолучательКоррСчетРЦБанка");
	СтруктураПараметров.Вставить("ПлательщикРасчСчет");
	СтруктураПараметров.Вставить("ПлательщикНаим");
	СтруктураПараметров.Вставить("ПлательщикИНН");
	СтруктураПараметров.Вставить("ПлательщикБанк");
	СтруктураПараметров.Вставить("ПлательщикГородБанка");
	СтруктураПараметров.Вставить("ПлательщикБИКБанка");
	СтруктураПараметров.Вставить("ПлательщикКоррСчет");
	СтруктураПараметров.Вставить("ПлательщикБанкДляРасчетов");
	СтруктураПараметров.Вставить("ПлательщикГородРЦБанка");
	СтруктураПараметров.Вставить("ПлательщикБИКРЦБанка");
	СтруктураПараметров.Вставить("ПлательщикКоррСчетРЦБанка");
	СтруктураПараметров.Вставить("НазначениеПлатежа");
	СтруктураПараметров.Вставить("Плательщик");
	СтруктураПараметров.Вставить("НепрямыеРасчетыУПолучателя");
	СтруктураПараметров.Вставить("НепрямыеРасчетыУПлательщика");
	СтруктураПараметров.Вставить("ПеречислениеВБюджет");
	СтруктураПараметров.Вставить("ИдДокумента");
	СтруктураПараметров.Вставить("НазначениеПлатежа");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Только для внутреннего использования
Функция ПрочитатьЗапросПриглашенияТакском(ИмяФайла, ТаблицаКонтрагентов) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	ТекстСообщения = Неопределено;
	ДатаВремяЗапроса = Формат(Дата("20000101000000"), "ДФ='yyyy-MM-dd hh:mm:ss'");
	
	Попытка
		
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			ВызватьИсключение(ТекстСообщения);
			
		КонецЕсли;
		
		ДатаВремяЗапроса = ЭД.Asof;
		Если ЭД.Свойства().Получить("Contact") <> Неопределено Тогда
			
			Если ТипЗнч(ЭД.Contact) = Тип("СписокXDTO") Тогда
				
				Для Каждого Контакт Из ЭД.Contact Цикл
					
					Строка = ТаблицаКонтрагентов.Добавить();
					ЗаполнитьСтрокуТаблицыКонтактов(Строка, Контакт);
					
				КонецЦикла;
			Иначе
				
				Строка = ТаблицаКонтрагентов.Добавить();
				ЗаполнитьСтрокуТаблицыКонтактов(Строка, ЭД.Contact);
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ДатаВремяЗапроса;
	
КонецФункции

// Только для внутреннего использования
Функция ТаблицаДанныхУчастниковОбмена(Соглашение, АдресРесурса, Маркер) Экспорт
	
	ТЗ = ИнициализироватьТаблицуДанныхУчастниковОбмена();
	Если ЗначениеЗаполнено(Соглашение) И ЗначениеЗаполнено(АдресРесурса) Тогда
		ПолученыВсеЗаписи = Ложь;
		ДатаПоследнегоЗапроса = Неопределено;
		Если АдресРесурса = "GetContactListUpdates" Тогда
			ДатаПоследнегоЗапроса = Формат(ДатаПоследнегоПолученияПриглашений(Соглашение), "ДФ='yyyy-MM-dd hh:mm:ss'");
		КонецЕсли;
		Пока НЕ ПолученыВсеЗаписи Цикл
			Если АдресРесурса = "GetContactListUpdates" Тогда
				АдресРесурсаПолный = АдресРесурса + "?date=" + ДатаПоследнегоЗапроса + "&status=ContactStatus.Incoming";
			Иначе
				АдресРесурсаПолный = АдресРесурса;
			КонецЕсли;
			ФайлПриглашения = ПолучитьЧерезТакском(АдресРесурсаПолный, , Маркер);
			КолСтрокТзДоЧтения = ТЗ.Количество();
			Если ФайлПриглашения <> Неопределено Тогда
				ДатаПоследнегоЗапроса = ПрочитатьЗапросПриглашенияТакском(ФайлПриглашения, ТЗ);
			КонецЕсли;
			Если КолСтрокТзДоЧтения = ТЗ.Количество() Тогда
				ПолученыВсеЗаписи = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

// Только для внутреннего использования
Функция ИнициализироватьТаблицуДанныхУчастниковОбмена() Экспорт
	
	КС = Новый КвалификаторыСтроки(255);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Наименование",  ОписаниеТиповС);
	ТЗ.Колонки.Добавить("ИНН",           ОписаниеТиповС);
	ТЗ.Колонки.Добавить("КПП",           ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Идентификатор", ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Состояние",     ОписаниеТиповС);
	
	Возврат ТЗ;
	
КонецФункции

Функция ДатаПоследнегоПолученияПриглашений(Соглашение)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнегоПолученияПриглашений
	|ИЗ
	|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|ГДЕ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеОбИспользованииЭД";
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", Соглашение);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат ?(Результат.ДатаПоследнегоПолученияПриглашений = Дата("00000000000000"),
			Дата("20000101000000"), Результат.ДатаПоследнегоПолученияПриглашений);
	КонецЕсли;
	
	Возврат Дата("20000101000000");
	
КонецФункции

// Формирует электронный документ каталога товаров по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ТоварыКаталога - таблица значений, содержащая перечень номенклатуры,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция УдалитьСформироватьКаталогНоменклатуры(СсылкаНаОбъект, ТоварыКаталога, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.КаталогТоваров);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", СсылкаНаОбъект.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", СсылкаНаОбъект.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = УдалитьКаталогТоваровСтруктураПараметров();
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект,
																			ТоварыКаталога,
																			СтруктураЭД,
																			СтруктураПараметров);
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если УдалитьСформироватьКаталогCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с каталогом товаров
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция УдалитьСформироватьКаталогCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	Попытка
		КаталогЭО = ПолучитьОбъектТипаCML("Каталог", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		
		// Владелец.
		Владелец = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Владелец, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Товары.
		ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Каталог.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("Каталог.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(КаталогЭО, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Запись файла электронного документа.
		КаталогЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВыгрузитьЭДвФайл(КаталогЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Процедура УдалитьПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	
	// Заполняем данные о владельце каталога.
	// Контрагент
	Элемент = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда 
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя + "_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента,
		РеквизитыКонтрагента, ЭД.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);
	
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		РеквизитыПартнера = Новый Структура();
		РеквизитыПартнера.Вставить("Контрагент", Контрагент);
		ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Партнеры");
		
		ЗнДопАналитики = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем данные о товарах каталога.
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение веток схемы xsd версии 2.06

// Функция заполняет список XDTO значениями строки дерева значений, имена которых совпадают с именами элементов
// (атрибутов) списка и имеют простой тип (строка, число, ...).
//
// Параметры:
//  СтрокаДерева - строка дерева значений - строка источник данных.
//  ИмяКорневогоУзла - строка - имя корневого объекта XDTO, элементом которого является заполняемый список XDTO.
//  ИмяУзла - строка - имя списка XDTO.
//  ПространствоИменСхемы - строка - пространство имен.
//  ТекстОшибки - строка - содержит текст ошибки, возникшей при заполнении объекта.
//
// Возвращаемое значение:
//  Неопределено, ОбъектXDTO - если список не заполнен - то неопределено.
//
Функция ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(СтрокаДерева, ИмяКорневогоУзла, ИмяУзла, ПространствоИменСхемы, ТекстОшибки)
	
	УзелЗаполнен = Ложь;
	УровеньДанных = "";
	Для Каждого ТекКолонка Из СтрокаДерева.Владелец().Колонки Цикл
		ИмяКолонки = ТекКолонка.Имя;
		Если Найти(ИмяКолонки, "Уровень") > 0 И ЗначениеЗаполнено(СтрокаДерева[ИмяКолонки]) Тогда
			ТекУровень = Число(Сред(ИмяКолонки, 8));
			Если ТекУровень > 0 Тогда
				ТекУровень = ТекУровень + 2; // т.к. следующий уровень "НомерСтроки".
				УровеньДанных = "Уровень" + ТекУровень;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(УровеньДанных) Тогда
		Реквизит = ПолучитьОбъектТипаCML(ИмяКорневогоУзла, ПространствоИменСхемы);
		Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
			Узел = ПолучитьОбъектТипаCML(ИмяКорневогоУзла + "." + ИмяУзла, ПространствоИменСхемы);
			Для Каждого ТекСвойство Из Узел.Свойства() Цикл
				ЗначениеПараметра = ТекСтрока.Строки.Найти(ТекСвойство.Имя, УровеньДанных);
				Если ЭтоПростойТипЭлементаXDTO(Узел[ТекСвойство.Имя])
					И ЗначениеПараметра <> Неопределено
					И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
					Обязательное = ЗначениеЗаполнено(ТекСвойство.НижняяГраница);
					ЗаполнитьСвойствоXDTO(Узел, ТекСвойство.Имя, ЗначениеПараметра.Значение, Обязательное, ТекстОшибки);
					УзелЗаполнен = Истина;
				КонецЕсли;
			КонецЦикла;
			Реквизит[ИмяУзла].Добавить(Узел);
		КонецЦикла;
	КонецЕсли;
	Если НЕ УзелЗаполнен Тогда
		Реквизит = Неопределено;
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

Процедура СформироватьДанныеПоТоваруCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, ТекстОшибки)
	
	// Формируем ИД товара.
	Номенклатура = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Номенклатура");
	ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
	Характеристика = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Характеристика");
	ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
	Упаковка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Упаковка");
	ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
	
	ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	ЗаполнитьСвойствоXDTO(Товар, "Ид", ИДТовара, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(Товар, "Наименование",
		ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование"), , ТекстОшибки);
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод") Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод"), , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул") Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Артикул",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул"), , ТекстОшибки);
	КонецЕсли;
	
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ПространствоИменСхемы);
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод") Тогда
		ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод"), , ТекстОшибки);
	КонецЕсли;
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное") Тогда
		ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное"), , ТекстОшибки);
	КонецЕсли;
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение") Тогда
		ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение"), , ТекстОшибки);
	КонецЕсли;
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование") Тогда
		ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеКраткое",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование"), , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковНаименование") Тогда
		Пересчет = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница.Пересчет", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Пересчет, "Единица",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковНаименование"), , ТекстОшибки);
		
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент") Тогда
			ЗаполнитьСвойствоXDTO(Пересчет, "Коэффициент",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент"), , ТекстОшибки);
		КонецЕсли;
		БазоваяЕдиница.Пересчет.Добавить(Пересчет);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога")
		И Товар.Свойства().Получить("ИдКаталога") <> Неопределено Тогда
		ИдКаталога = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога");
		ЗаполнитьСвойствоXDTO(Товар, "ИдКаталога", ИдКаталога, , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора")
		И Товар.Свойства().Получить("ИдКлассификатора") <> Неопределено Тогда
		ИдКлассификатора = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора");
		ЗаполнитьСвойствоXDTO(Товар, "ИдКлассификатора", ИдКлассификатора, , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("ЦенаЗаЕдиницу") <> Неопределено Тогда
		ЦенаЗаЕдиницу = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		ЗаполнитьСвойствоXDTO(Товар, "ЦенаЗаЕдиницу", ЦенаЗаЕдиницу, , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество")
		И Товар.Свойства().Получить("Количество") <> Неопределено Тогда
		Количество = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество");
		ЗаполнитьСвойствоXDTO(Товар, "Количество", Количество, , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма")
		И Товар.Свойства().Получить("Сумма") <> Неопределено Тогда
		Сумма = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма");
		ЗаполнитьСвойствоXDTO(Товар, "Сумма", Сумма, , ТекстОшибки);
	КонецЕсли;
	
	Если Товар.Свойства().Получить("Налоги") <> Неопределено И Товар.Свойства().Получить("Налоги") <> Неопределено Тогда
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаНДС") Тогда
			СуммаНДС = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаНДС");
			Налоги = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги", ПространствоИменСхемы);
			Налог = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги.Налог", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Налог, "Наименование", "НДС", Истина, ТекстОшибки);
			УчтеноВСумме = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.НДСУчтеноВСумме");
			Если ЗначениеЗаполнено(УчтеноВСумме) Тогда
				ЗаполнитьСвойствоXDTO(Налог, "УчтеноВСумме", УчтеноВСумме, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Налог, "Сумма", СуммаНДС, Истина, ТекстОшибки);
			СтавкаНДС = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтавкаНДС");
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда
				ЗаполнитьСвойствоXDTO(Налог, "Ставка", Строка(СтавкаНДС), , ТекстОшибки);
			КонецЕсли;
			Налоги.Налог.Добавить(Налог);
			ЗаполнитьСвойствоXDTO(Товар, "Налоги", Налоги, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения")
		И Товар.Свойства().Получить("СтранаПроисхождения") <> Неопределено Тогда
		СтранаПроисхождения = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения");
		ЗаполнитьСвойствоXDTO(Товар, "СтранаПроисхождения", СтранаПроисхождения, , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД")
		И Товар.Свойства().Получить("ГТД") <> Неопределено Тогда
		ГТД = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД");
		ЗаполнитьСвойствоXDTO(Товар, "ГТД", ГТД, , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ")
		И Товар.Свойства().Получить("Единица") <> Неопределено Тогда
		КодПоОКЕИ = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		ЗаполнитьСвойствоXDTO(Товар, "Единица", КодПоОКЕИ, , ТекстОшибки);
		Коэффициент = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКоэффициент");
		Если ЗначениеЗаполнено(Коэффициент) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Коэффициент", Коэффициент, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ПространствоИменСхемы, ТекстОшибки)
	
	Если Контрагент.Свойства().Получить("Роль") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Контрагент, "Роль", ВидКонтрагента, Истина, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника")) Тогда
		
		Если ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника") = "ФЛ" Тогда
			ЗаполнитьСвойствоXDTO(Контрагент, "ПолноеНаименование",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ПолноеНаименование"),
				Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "ИНН",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ИНН"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Фамилия",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Фамилия"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Имя",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Имя"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Отчество", 
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Отчество"), , ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(Контрагент, "ОфициальноеНаименование",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.НаименованиеОрганизации"),
				Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "ИНН",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.ИНН"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "КПП",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.КПП"), , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидКонтрагента + ".Адрес", "ПолныйПуть", Истина);
		Если Адрес.Значение = Истина Тогда
			АдресТип = ПолучитьОбъектТипаCML("Адрес", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(АдресТип, "Представление", Адрес.Строки[0].Значение, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакты = ПолучитьОбъектТипаCML("Контрагент.Контакты", ПространствоИменСхемы);
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Контакт, "Тип", "Телефон рабочий", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон"), Истина, ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Контакт, "Тип", "Факс", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс"), Истина, ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(Контрагент, "Контакты", Контакты, , ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет")) Тогда
		РеквизитыБанка = "НомерСчета, НаимБанк, БИК";
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		СвБанк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		
		НомерСчета = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НомерСчета");
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", НомерСчета, Истина,ТекстОшибки);
		КонецЕсли;
		
		НаимБанк = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НаимБанк");
		БИК = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.БИК");
		Если ЗначениеЗаполнено(НаимБанк) ИЛИ ЗначениеЗаполнено(БИК) Тогда
			Если ЗначениеЗаполнено(НаимБанк) Тогда
				ЗаполнитьСвойствоXDTO(СвБанк, "Наименование", НаимБанк, ,ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(БИК) Тогда
				ЗаполнитьСвойствоXDTO(СвБанк, "БИК", БИК, ,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "Банк", СвБанк, Истина, ТекстОшибки);
		
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ПространствоИменСхемы);
		РасчетныеСчета.РасчетныйСчет.Добавить(БанковскиеРеквизиты);
		
		Если Контрагент.Свойства().Получить("РасчетныйСчет") <> Неопределено Тогда
			ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныйСчет", БанковскиеРеквизиты, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеПодписантаCML_206(ПодписантXDTO, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант") = "ИП" Тогда
		ЗаполнитьСвойствоXDTO(ПодписантXDTO, "Фамилия",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.Фамилия"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПодписантXDTO, "Имя",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.Имя"), Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.Отчество")) Тогда
			ЗаполнитьСвойствоXDTO(ПодписантXDTO, "Отчество",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ИП.Отчество"), , ТекстОшибки);
		КонецЕсли;
		ОбъектЗаполнен = Истина;
	ИначеЕсли ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант") = "ЮЛ" Тогда
		ЗаполнитьСвойствоXDTO(ПодписантXDTO, "Фамилия",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Фамилия"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПодписантXDTO, "Имя",
			ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Имя"), Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Отчество")) Тогда
			ЗаполнитьСвойствоXDTO(ПодписантXDTO, "Отчество",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Отчество"), , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Должность")) Тогда
			ЗаполнитьСвойствоXDTO(ПодписантXDTO, "Должность",
				ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ЮЛ.Должность"), , ТекстОшибки);
		КонецЕсли;
		ОбъектЗаполнен = Истина;
	КонецЕсли;

	Возврат ОбъектЗаполнен;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование контейнера


// Только для внутреннего использования
Процедура СформироватьЭДКарточкиТакском(ЭлектронныйДокумент, АдресКаталога, ТекстОшибки) Экспорт

	ДеревоКарточкиТакском = ОбщегоНазначенияЭД.ДеревоДокумента("КарточкаПередаваемыхДанныхТакском");
	
	// Готовим дерево данных для карточки пакета.
	ПодготовитьДанныеПоКарточкеТакском(ЭлектронныйДокумент, ДеревоКарточкиТакском);
	
	// Выполним проверку на заполненность обязательных полей.
	ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоКарточкиТакском, ТекстОшибки);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		Карточка = СформироватьКарточкуТакскомCML(ДеревоКарточкиТакском, ТекстОшибки);
		КопироватьФайл(Карточка, АдресКаталога + "card.xml");
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СформироватьЭДТранспортнойИнформацииТакском(ЭлектронныйДокумент, СтруктураФайловЭД, АдресКаталога, ТекстОшибки) Экспорт
	
	ДеревоТранспортнойИнформацииТакском = ОбщегоНазначенияЭД.ДеревоДокумента("ТранспортнаяИнформацияТакском");
	
	// Готовим дерево данных с транспортной информацией.
	ПодготовитьДанныеПоТранспортнойИнформацииТакском(ЭлектронныйДокумент, СтруктураФайловЭД, ДеревоТранспортнойИнформацииТакском);
	
	// Выполним проверку на заполненность обязательных полей.
	ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоТранспортнойИнформацииТакском, ТекстОшибки);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		ИмяФайлаТранспортнойИнформации = СформироватьТранспортнуюИнформациюТакскомCML(ДеревоТранспортнойИнформацииТакском, ТекстОшибки);
		КопироватьФайл(ИмяФайлаТранспортнойИнформации, АдресКаталога + "meta.xml");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоКарточкеТакском(ЭлектронныйДокумент, ДеревоКарточкиТакском)
	
	ВидЭД          = ЭлектронныйДокумент.ВидЭД;
	ПризнакПодписи = ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
	Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
		ИЛИ ПризнакПодписи Тогда
		
		Если ПризнакПодписи  Тогда
			// Подтверждение не имеет отдельной схемы ЭД, передаётся списком ЭЦП первичного ЭД.
			ВнешнийИдентификатор = ЭлектронныйДокумент.НомерЭД;
		Иначе
			ВнешнийИдентификатор = ЭлектронныйДокумент.ЭлектронныйДокументВладелец.НомерЭД;
		КонецЕсли;
		
		Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			И (ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ) Тогда
			
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.Тип", "SpecOperator");
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.Наименование", "tkc");
		КонецЕсли;
		
	Иначе
		ВнешнийИдентификатор = ЭлектронныйДокумент.НомерЭД;
	КонецЕсли;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Определение.ВнешнийИдентификатор",
		ВнешнийИдентификатор);
	
	ВидДокумента = "Other";
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		
		ВидДокумента = "Statement";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		
		ВидДокумента = "Statement";
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
			"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			
			ВидДокумента = "FormalizedStatementCustomer";
		КонецЕсли;
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ВидДокумента = "Statement";
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
			"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
		
			ВидДокумента = "FormalizedStatementVendor";
		КонецЕсли;
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		
		ВидДокумента = "Consignment";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		ВидДокумента = "Consignment";
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
			"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			
			ВидДокумента = "FormalizedConsignmentCustomer";
		КонецЕсли;
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		ВидДокумента = "Consignment";
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
			"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			
			ВидДокумента = "FormalizedConsignmentVendor";
		КонецЕсли;
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		ВидДокумента = "Invoice";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		ВидДокумента = "CorrectiveInvoice";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		ВидДокумента = "Account";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
			"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			
		ВидДокумента = "ReceiveNotification";
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,
			"ВерсияРегламентаЭДО") = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
			
		ВидДокумента = "SpecificationNotice";
	КонецЕсли;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Определение.Имя", ВидДокумента);
	
	Если НЕ ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ТребуетсяПовторнаяПодпись = Истина;
		Если ПризнакПодписи ИЛИ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
			ТребуетсяПовторнаяПодпись = Ложь;
		КонецЕсли;
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Определение.ТребуетсяПовторнаяПодпись",
		ТребуетсяПовторнаяПодпись);
	КонецЕсли;
	
	Если НЕ ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		
		Если ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			
			ДополнительныеДанные = Новый ТаблицаЗначений;
			ДополнительныеДанные.Колонки.Добавить("Имя");
			ДополнительныеДанные.Колонки.Добавить("Значение");
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Номер";
			НоваяСтрока.Значение = ?(ЗначениеЗаполнено(ЭлектронныйДокумент.НомерДокументаОтправителя),
				ЭлектронныйДокумент.НомерДокументаОтправителя, "Без номера");
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Зашифрован";
			НоваяСтрока.Значение = ЭлектронныеДокументыСлужебный.ПолучитьМассивАдресовСертификатовШифрования(
				ЭлектронныйДокумент) <> Неопределено;

			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ВерсияБЭД";
			НоваяСтрока.Значение = ОбновлениеИнформационнойБазыЭД.ВерсияБиблиотеки();
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ПрикладноеРешение";
			НоваяСтрока.Значение = Метаданные.Имя;
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ВерсияПрикладногоРешения";
			НоваяСтрока.Значение = Метаданные.Версия;
				
			ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоКарточкиТакском, ДополнительныеДанные, "Описание.ДополнительныеДанные");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанных = ЭлектронныеДокументыСлужебный.СтруктураЗначенийРеквизитов(ЭлектронныйДокумент.Организация,
		"Наименование, ИНН, КПП");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Отправитель.Наименование",
		СтруктураДанных.Наименование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Отправитель.ИНН",
		СтруктураДанных.ИНН);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Отправитель.КПП",
		СтруктураДанных.КПП);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Отправитель.НомерДоговора",
		"Договор по-умолчанию");
		
	Если ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Отправитель.ИД",
			ЭлектронныйДокумент.Отправитель);
	Иначе
		ПараметрыСоглашения = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(
			ЭлектронныйДокумент.ВладелецФайла, , , ЭлектронныйДокумент);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Отправитель.ИД",
			ПараметрыСоглашения.ИдентификаторОрганизации);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.Тип")) Тогда
		Если Не (ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
			И ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен) Тогда
			
			СтруктураДанных = ЭлектронныеДокументыСлужебный.СтруктураЗначенийРеквизитов(ЭлектронныйДокумент.Контрагент,
				"Наименование, ИНН, КПП");
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.Наименование",
				СтруктураДанных.Наименование);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.ИНН",
				СтруктураДанных.ИНН);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.КПП",
				СтруктураДанных.КПП);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.НомерДоговора",
				"Договор по-умолчанию");
			
			Если ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.ИД",
					ЭлектронныйДокумент.Получатель);
			Иначе
				ПараметрыСоглашения = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(
					ЭлектронныйДокумент.ВладелецФайла, , , ЭлектронныйДокумент);
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Получатель.ИД",
					ПараметрыСоглашения.ИдентификаторКонтрагента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Описание.Заголовок", Строка(ВидЭД));
	
	Дата = "";
	Если ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		Дата = ЭлектронныйДокумент.ДатаЭД;
	Иначе
		Дата = ?(ПризнакПодписи, ТекущаяДатаСеанса(), ЭлектронныйДокумент.ДатаСоздания);
	КонецЕсли;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Описание.Дата", Дата);
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточкиТакском, "Описание.Комментарий",
			ЭлектронныйДокумент.ВладелецФайла.Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоТранспортнойИнформацииТакском(ЭлектронныйДокумент, СтруктураФайловЭД, ДеревоТраспортнойИнформацииТакском)
	
	ВидЭД          = ЭлектронныйДокумент.ВидЭД;
	ПризнакПодписи = ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
	Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
		ИЛИ ПризнакПодписи Тогда
		
		ИДДокументооборота     = ЭлектронныйДокумент.УникальныйИД;
	Иначе
		Если ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ИДДокументооборота = ЭлектронныйДокумент.НомерЭД;
		Иначе
			// Изменим заполнение уникального идентификатора для документооборота при использовании версии регламента 20.
			Если ЭлектронныйДокумент.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
				ИДДокументооборота = ЭлектронныйДокумент.УникальныйИД;
			Иначе
				ИДДокументооборота = Строка(ЭлектронныйДокумент.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТраспортнойИнформацииТакском, "ИД", ИДДокументооборота);
	
	Если ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		КодРегламента = "Nonformalized";
		КодТранзакции = "MainDocument";
	Иначе
		КодРегламента = ПолучитьКодРегламента(ЭлектронныйДокумент);
		КодТранзакции = ПолучитьКодТранзакции(ЭлектронныйДокумент, КодРегламента, ПризнакПодписи);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТраспортнойИнформацииТакском, "ИД", ИДДокументооборота);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТраспортнойИнформацииТакском, "Документ.КодРегламента", КодРегламента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТраспортнойИнформацииТакском, "Документ.КодТранзакции", КодТранзакции);
	
	// Загрузим файл электронного документа.
	Если СтруктураФайловЭД.Свойство("ГлавныйФайл") И ЗначениеЗаполнено(СтруктураФайловЭД.ГлавныйФайл) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТраспортнойИнформацииТакском, "Документ.ГлавныйФайл.Путь",
			СтруктураФайловЭД.ГлавныйФайл);
	КонецЕсли;
	
	// Загрузим подписи электронного документа в дерево транспортной информации.
	Если СтруктураФайловЭД.Свойство("ГлавныйФайлПодписи") И СтруктураФайловЭД.ГлавныйФайлПодписи.Количество() > 0 Тогда
		ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоТраспортнойИнформацииТакском, СтруктураФайловЭД.ГлавныйФайлПодписи,
			"Документ.ГлавныйФайлПодписи");
	КонецЕсли;
	
	// Загрузим файл дополнительной информации.
	Если СтруктураФайловЭД.Свойство("ДополнительныйФайл") И ЗначениеЗаполнено(СтруктураФайловЭД.ДополнительныйФайл) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоТраспортнойИнформацииТакском, "Документ.ДополнительныйФайл.Путь",
			СтруктураФайловЭД.ДополнительныйФайл);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД)
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ДатаФормирования", СтруктураЭД.ДатаЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсияСхемы", СтруктураЭД.ВерсияСхемы);
	ВставитьЗначениеВДерево(ДеревоДанных, "Ид", СтруктураЭД.НомерЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "ВидЭД", СтруктураЭД.ВидЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	
	ВставитьЗначениеВДерево(ДеревоДанных, "Исполнитель", СтруктураЭД.Отправитель);
	
КонецПроцедуры

Функция УдалитьКаталогТоваровСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, ДатаФормирования, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Наименование, Номенклатура, БазоваяЕдиница, УпаковкаПоОКЕИ");

	Возврат СтруктураПараметров;
	
КонецФункции

Процедура СохранитьНеизвестныйПакет(ДвоичныеДанныеЭлемента, СоглашениеЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = Перечисления.СтатусыПакетовЭД.Неизвестный;
		ПакетЭД.Направление             = Перечисления.НаправленияЭД.Входящий;
		ПакетЭД.Организация             = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "Организация");
		ПакетЭД.СоглашениеЭД            = СоглашениеЭД;
		ПакетЭД.СпособОбменаЭД          = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
		ПакетЭД.Записать();
		
		УиИд = Строка(Новый УникальныйИдентификатор());
		
		ИмяФайла = "EDI_" + УиИд;
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
		ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								ПакетЭД.Ссылка,
								ИмяФайла,
								"zip",
								ТекущаяДатаСеанса(),
								ТекущаяДатаСеанса(),
								АдресВХранилище,
								,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
						+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Создание нового ПакетаЭД'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры


