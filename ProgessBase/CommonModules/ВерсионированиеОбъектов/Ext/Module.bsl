
Процедура МеханизмВерсионированияОбъектов_ПриЗаписиОбъекта(Источник, Отказ) Экспорт
	
	//начало изменений внешние файлы 
	Перем ЧислоВерсийОбъекта;
	Перем ХЭШ;
	//конец изменений внешние файлы 
	ХЭШ = "";
	
	Если ОбъектВерсионируется(Источник, ЧислоВерсийОбъекта,ХЭШ) Тогда
		
		//начало изменений внешние файлы 
			Отладка = Ложь;
		Если Отладка Тогда
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Отладка", 
	        		УровеньЖурналаРегистрации.Информация, , ,
	        		"Начало сжатия");
		КонецЕсли;		
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		//конец изменений внешние файлы 
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла); 
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписатьXML(ЗаписьXML, Источник, НазначениеТипаXML.Явное);
		ЗаписьXML.Закрыть();
		
		
		
		#Если Клиент Тогда
			//Сообщить("Клиент");
			Если глОбъектМД5 <> Неопределено Тогда
				НовыйХЭШ = глОбъектМД5.GetCheckSumFromFile(ИмяВременногоФайла);
			КонецЕсли;	
		#ИначеЕсли Сервер Тогда
			//Сообщить("Сервер");
			Попытка
				COMMD5 = Новый COMОбъект("XStandard.MD5");
				НовыйХЭШ = COMMD5.GetCheckSumFromFile(ИмяВременногоФайла);
			Исключение
			    НовыйХЭШ = "";
			КонецПопытки;
		#КонецЕсли	
		
		Если Не ПустаяСтрока(ХЭШ) Тогда
			Если ХЭШ = НовыйХЭШ Тогда
				возврат;
			КонецЕсли;	
		КонецЕсли;	
		
		//начало изменений внешние файлы
		Если ПараметрыСеанса.ПРГ_КаталогХраненияФайлов <> "" Тогда
			//отладка
			//отладка 
			Зиповать = Истина;
			ХранилищеДанных = Неопределено;
			ИмяНовФайла = ПРГ_ДопФункцииКлиентСервер.ПРГ_ВнФайлы_Версии_ПолучитьИмяФайла(Источник.Ссылка,ЧислоВерсийОбъекта+1,?(Зиповать,".zip",".xml"));
			Если Зиповать Тогда // зиповать
				ИмяВременногоФайлаЗип  = ПолучитьИмяВременногоФайла("zip");
				ЗипФайл = Новый ЗаписьZipФайла(ИмяВременногоФайлаЗип,,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный); 
				ЗипФайл.Добавить(ИмяВременногоФайла,РежимСохраненияПутейZIP.НеСохранятьПути);
				ЗипФайл.Записать();
			Иначе	
				ИмяВременногоФайлаЗип = ИмяВременногоФайла;
			КонецЕсли;	
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайлаЗип);
			ДвоичныеДанные.Записать(ИмяНовФайла);
			ХранилищеДанных = Неопределено;
			Если Зиповать Тогда
				УдалитьФайлы(ИмяВременногоФайлаЗип);
			КонецЕсли;	
			
			Если Отладка Тогда
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Отладка", 
	        		УровеньЖурналаРегистрации.Информация, , ,
	        		"Окончание сжатия");
			КонецЕсли;		
		Иначе	
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			ХранилищеДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
		КонецЕсли;
		//конец изменений внешние файлы 
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		//начало изменений внешние файлы 
		//ВерсионированиеОбъектовПривилегированный.ЗаписатьВерсиюОбъекта(Источник.Ссылка, ЧислоВерсийОбъекта, ХранилищеДанных);
		ПРГ_Привелегированный.ЗаписатьВерсиюОбъекта(Источник.Ссылка, ЧислоВерсийОбъекта, ХранилищеДанных,НовыйХЭШ);
		//конец изменений внешние файлы 
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет настройки версионирования по переданному объекту и
// и возвращает вариант версионирования. Если по объекту не настроено
// версионирование, то он версионируется в соответствии с правилами
// версионирования "по умолчанию".
//
Функция ОбъектВерсионируется(знач Источник, ЧислоВерсийОбъекта,ХЭШ="")
	
	// Проверяем, что подсистема версионирования включена
	Если глЗначениеПеременной("ИспользоватьВерсионированиеОбъектов") Тогда
		
		ВариантВерсионирования = ПолучитьВариантВерсионирования(Источник);
		
		//начало изменений внешние файлы 
		//ЧислоВерсийОбъекта = ВерсионированиеОбъектовПривилегированный.ПолучитьКоличествоВерсийОбъекта(Источник.Ссылка);
		ЧислоВерсийОбъекта = 0; ХЭШ = "";
		ПРГ_Привелегированный.ПолучитьКоличествоВерсийОбъекта(Источник.Ссылка,ЧислоВерсийОбъекта,ХЭШ);
		//конец изменений внешние файлы 
		
		ВерсионироватьОбъект = Истина;
		
		Если ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать Тогда
			ВерсионироватьОбъект = Ложь;
		ИначеЕсли ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении Тогда
			Если ЧислоВерсийОбъекта = 0 И НЕ Источник.Проведен Тогда
				ВерсионироватьОбъект = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ВерсионироватьОбъект = Ложь;
	КонецЕсли;
	
	Возврат ВерсионироватьОбъект;
	
КонецФункции

Функция ПолучитьВариантВерсионирования(Источник)
	
	ИмяОбъекта = Источник.Метаданные().Имя;
	
	НастройкаВерсионирования = РегистрыСведений.НастройкаВерсионированияОбъектов.СоздатьМенеджерЗаписи();
	НастройкаВерсионирования.ТипОбъекта = ИмяОбъекта;
	НастройкаВерсионирования.Прочитать();
	
	Если ЗначениеЗаполнено(НастройкаВерсионирования.Вариант) Тогда
		Возврат НастройкаВерсионирования.Вариант;
	Иначе
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
			Возврат Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать;
		Иначе
			Возврат ?(ДокументПроводится(Источник.Метаданные().Имя),
			          Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении,
			          Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьВсегда);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Проверяет, что документу разрешено проведение
//
Функция ДокументПроводится(знач ИмяДокумента) Экспорт
	
	Возврат Метаданные.Документы[ИмяДокумента].Проведение = 
	            Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блок функций для работы с настройками значений

// Записывает настройку версионирования по объекту в регистр сведений
//
Процедура ЗаписатьНастройкуВерсионированияПоОбъекту(Объект, ВариантВерсионирования) Экспорт
	
	ВариантМВ = РегистрыСведений.НастройкаВерсионированияОбъектов.СоздатьМенеджерЗаписи();
	ВариантМВ.ТипОбъекта = Объект;
	ВариантМВ.Вариант = ВариантВерсионирования;
	ВариантМВ.Записать();
	
КонецПроцедуры

// Получает настройку версионирования по объекту из регистра сведений
//
Функция ЗагрузитьНастройкуВерсионированияПоОбъекту(знач Объект) Экспорт
	
	ВариантМВ = РегистрыСведений.НастройкаВерсионированияОбъектов.СоздатьМенеджерЗаписи();
	ВариантМВ.ТипОбъекта = Объект;
	ВариантМВ.Прочитать();
	
	Возврат ВариантМВ.Вариант;
	
КонецФункции

