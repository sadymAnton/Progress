////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументы: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует фамилию и инициалы по переданной строке.
//
// Параметры
//  ПолноеНаименование - строка с наименованием.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы одной строкой.
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ЭлектронныеДокументыПереопределяемый.РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия, Имя, Отчество);
	Если НЕ ЗначениеЗаполнено(Фамилия) И НЕ ЗначениеЗаполнено(Имя) И НЕ ЗначениеЗаполнено(Отчество) Тогда
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ПолноеНаименование), " ");
		
		КоличествоПодстрок = ФИО.Количество();
		Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
		Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
		Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	КонецЕсли;
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "."
		+ ?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""), "");
	
КонецФункции

// Определяет, существует ли актуальный электронный документ Счет-фактура для переданного владельца
//
// Параметры
//  СсылкаНаВладельца - ДокументСсылка,- владелец электронного документа
//
// Возвращаемое значение:
//  Булево - Истина - существует актуальный электронный документ, в противном случае Ложь.
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьРабочийЭСФ(СсылкаНаВладельца);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	ЗначениеВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(НаименованиеФО);
	Возврат ЗначениеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает представление (текст либо структура) состояний электронных документов по владельцам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
// ПомещатьВСтруктуру - булево, если истина, то представления состояний электронных документов
//                      (СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника),
//                      будут помещены в структуру, для возможности последующего разбора на клиенте.
//
// Возвращаемое значение:
// Соответствие - соответствие ссылок на документы ИБ состояниям ЭД. Ключ - ссылка на документ ИБ,
//                Значение - текст (состояние ЭД), либо структура - в зависимости от параметра ПомещатьВСтруктуру.
//
Функция ПолучитьТекстСостоянияЭДПоВладельцам(МассивСсылокНаВладельцев, ПомещатьВСтруктуру = Ложь) Экспорт
		
	ТаблицаДанных = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
	Соответствие = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		Если ПомещатьВСтруктуру Тогда
			СостояниеВерсииЭД = Новый Структура("СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника");
			ЗаполнитьЗначенияСвойств(СостояниеВерсииЭД, ТекСтрока);
		Иначе
			СостояниеВерсииЭД = Строка(ТекСтрока.СостояниеВерсииЭД);
		КонецЕсли;
		Соответствие.Вставить(ТекСтрока.ВладелецЭД, СостояниеВерсииЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Получает дату выставления счет-фактуры в электронном виде.
//
// Параметры:
// СчетФактура - СсылкаНаДокумент - ссылка на счет-фактуру исходящую в прикладном решении.
//
// Возвращаемое значение:
//  ДатаВыставления - дата - дата выставления электронной счет-фактуры.
//
Функция ДатаВыставленияСчетФактуры(СчетФактура) Экспорт
	
	ДатаВыставления = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СчетФактура);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если ЗначениеЗаполнено(Результат.ЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПДПЭСФ)";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Результат.ЭлектронныйДокумент);
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		ДатаВыставления = Результат.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Возврат ДатаВыставления
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Возвращает текст запроса для электронных документов на подписи.
// Варианты - для рабочего места документов на подпись,
// или для показателя на рабочем столе (УТ 11)
//
// Параметры:
//  ДляРабочегоСтола - Булево, признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11)
//
Функция ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи(ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

	Если ДляРабочегоСтола Тогда
		ТекстПолейВыборки =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВложенныйЗапрос.ЗначениеПоказателя) КАК ЗначениеПоказателя,
		|	ВложенныйЗапрос.СертификатОтпечаток КАК Сертификат
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыНаПодпись.ЭлектронныйДокумент) КАК ЗначениеПоказателя,
		|		СертификатыНаПодпись.Сертификат.Отпечаток КАК СертификатОтпечаток";
		
		ТекстДопОтбора = "";
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
		КонецЕсли;
		ТекстЗавершенияЗапроса = ТекстДопОтбора + " СГРУППИРОВАТЬ ПО
													|		СертификатыНаПодпись.ЭлектронныйДокумент,
													|		СертификатыНаПодпись.Сертификат.Отпечаток) КАК ВложенныйЗапрос
													|
													|СГРУППИРОВАТЬ ПО
													|	ВложенныйЗапрос.СертификатОтпечаток";
		
		// Объединение запросов используем для получения выборки служебных документов (ПДО, УОУ, ИОП, ...),
		// т.к. служебные документы не попадают в РегистрСведений.СостоянияЭД.
		ТекстОбъединенияЗапросов =
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ 
		|	СУММА(ВложенныйЗапрос.ЗначениеПоказателя) КАК ЗначениеПоказателя,
		|	ВложенныйЗапрос.СертификатОтпечаток КАК Сертификат
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыНаПодпись.ЭлектронныйДокумент) КАК ЗначениеПоказателя,
		|		СертификатыНаПодпись.Сертификат.Отпечаток КАК СертификатОтпечаток";
		ТекстУпорядочивания = "";
	Иначе
		ТекстПолейВыборки =
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыНаПодпись.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СертификатыНаПодпись.Сертификат КАК Сертификат,
		|	СертификатыНаПодпись.ЭлектронныйДокумент.СуммаДокумента КАК СуммаДокумента,
		|	СертификатыНаПодпись.ЭлектронныйДокумент.ДатаДокументаОтправителя КАК ДатаДокумента,
		|	ВЫБОР
		|		КОГДА СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
		|		ТОГДА """"
		|		КОГДА СертификатыНаПодпись.ЭлектронныйДокумент.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА СертификатыНаПодпись.ЭлектронныйДокумент.НомерВерсииЭД
		|		ИНАЧЕ СертификатыНаПодпись.ЭлектронныйДокумент.ДатаФормированияЭДОтправителем
		|	КОНЕЦ КАК Версия";
		
		ТекстДопОтбора = "";
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Контрагент = &Контрагент";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = &ВидЭД";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.НаправлениеЭД = &НаправлениеЭД";
			КонецЕсли;
		КонецЕсли;
		ТекстЗавершенияЗапроса = ТекстДопОтбора;
		ТекстУпорядочивания = " УПОРЯДОЧИТЬ ПО ДатаДокумента";
		
		// Объединение запросов используем для получения выборки служебных документов (ПДО, УОУ, ИОП, ...),
		// т.к. служебные документы не попадают в РегистрСведений.СостоянияЭД.
		ТекстОбъединенияЗапросов = "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|СертификатыНаПодпись.ЭлектронныйДокумент,
		|СертификатыНаПодпись.Сертификат,
		|СертификатыНаПодпись.СуммаДокумента,
		|СертификатыНаПодпись.ДатаДокумента,
		|ВЫБОР
		|	КОГДА СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
		|	ТОГДА """"
		|	КОГДА СертификатыНаПодпись.ЭлектронныйДокумент.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	ТОГДА СертификатыНаПодпись.ЭлектронныйДокумент.НомерВерсииЭД
		|	ИНАЧЕ СертификатыНаПодпись.ЭлектронныйДокумент.ДатаФормированияЭДОтправителем
		|КОНЕЦ КАК Версия";
	КонецЕсли;
		
	ТекстЗапросаОснова =
	"	ИЗ
	|		(ВЫБРАТЬ
	|			СостоянияЭД.ЭлектронныйДокумент.СуммаДокумента КАК СуммаДокументаВладельца,
	|			СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|			СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|			СертификатыЭЦПВидыЭД.Ссылка КАК Сертификат
	|		ИЗ
	|			РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыЭД
	|				ПО СостоянияЭД.ЭлектронныйДокумент.ВидЭД = СертификатыЭЦПВидыЭД.ВидДокумента
	|					И (СостоянияЭД.ЭлектронныйДокумент.Организация = СертификатыЭЦПВидыЭД.Ссылка.Организация
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.Контрагент = СертификатыЭЦПВидыЭД.Ссылка.Организация)
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|				ПО СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД = СоглашенияОбИспользованииЭД.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭЦП
	|				ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлыЭЦП.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|				ПО СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД = СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка
	|		ГДЕ
	|			СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
	|			И СертификатыЭЦПВидыЭД.ИспользоватьДляПодписи
	|			И НЕ СертификатыЭЦПВидыЭД.Ссылка.ПометкаУдаления
	|			И НЕ СертификатыЭЦПВидыЭД.Ссылка.Отозван
	|			И (СертификатыЭЦПВидыЭД.Ссылка.Пользователь = &ТекущийПользователь
	|					ИЛИ СертификатыЭЦПВидыЭД.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|			И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|			И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|			И ВЫБОР
	|					КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|						ТОГДА СертификатыЭЦПВидыЭД.Ссылка = СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК СертификатыНаПодпись
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|				СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|				СертификатыЭЦП.Ссылка КАК Сертификат
	|			ИЗ
	|				РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭЦП
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|						ПО ЭДПрисоединенныеФайлыЭЦП.Отпечаток = СертификатыЭЦП.Отпечаток
	|					ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлыЭЦП.Ссылка
	|			ГДЕ
	|				СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)) КАК СпСертификатовИсключения
	|			ПО СертификатыНаПодпись.Сертификат = СпСертификатовИсключения.Сертификат
	|				И СертификатыНаПодпись.ЭлектронныйДокумент = СпСертификатовИсключения.ЭлектронныйДокумент
	|	ГДЕ
	|		СпСертификатовИсключения.Сертификат ЕСТЬ NULL 
	|		И (СертификатыНаПодпись.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан))";
	
	// Объединение запросов используем для получения выборки служебных документов (ПДО, УОУ, ИОП, ...),
	// т.к. служебные документы не попадают в РегистрСведений.СостоянияЭД.
	ТекстОбъединенияЗапросовОснова =
	"
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыНаПодпись.Ссылка КАК ЭлектронныйДокумент,
	|		СертификатыЭЦПВидыДокументов.Ссылка КАК Сертификат,
	|		ДокументыНаПодпись.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|		ДокументыНаПодпись.ДатаДокументаОтправителя КАК ДатаДокумента
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ДокументыНаПодпись
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|			ПО ДокументыНаПодпись.ВидЭД = СертификатыЭЦПВидыДокументов.ВидДокумента
	|			И ДокументыНаПодпись.Организация = СертификатыЭЦПВидыДокументов.Ссылка.Организация
	|	ГДЕ
	|		ДокументыНаПодпись.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|		И НЕ ДокументыНаПодпись.ПометкаУдаления
	|		И ДокументыНаПодпись.ЭлектронныйДокументВладелец.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|		И НЕ (ДокументыНаПодпись.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|			  ИЛИ ДокументыНаПодпись.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
	|		И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи) КАК СертификатыНаПодпись ГДЕ Истина";
	
	ТекстЗапроса = ТекстПолейВыборки + ТекстЗапросаОснова + ТекстЗавершенияЗапроса
		+ ТекстОбъединенияЗапросов + ТекстОбъединенияЗапросовОснова + ТекстЗавершенияЗапроса + ТекстУпорядочивания;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Передача электронных документов в ФНС

// Получает соответствие документам информационной базы и актуальных электронных документов.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  ДокументыИБ - массив(ссылка), массив ссылок на документы информационной базы;
//  УникальныйИдентификатор - уникальныйИдентификатор, признак уникальности для формы выбора документов
//
Функция ПолучитьСоответствиеДокументамИБКомплектыЭлектронныхДокументов(ДокументыИБ, УникальныйИдентификатор) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|			ТОГДА ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.Ссылка
	|		ИНАЧЕ ЭДПрисоединенныеФайлы.Ссылка
	|	КОНЕЦ КАК ПрисоединенныйФайл,
	|	ВЫБОР
	|		КОГДА НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|			ТОГДА ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ВладелецФайла
	|		ИНАЧЕ ЭДПрисоединенныеФайлы.ВладелецФайла
	|	КОНЕЦ КАК ДокументИБ
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла В(&ВладелецФайла)
	|	И СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)";
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументыИБ);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		МассивФайловЭД = Новый Массив;
		
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Результат.ПрисоединенныйФайл,
			УникальныйИдентификатор);
		
		СтруктураПараметровЭД = Новый Структура;
		СтруктураПараметровЭД.Вставить("ТипФайла", "ФайлВыгрузки");
		СтруктураПараметровЭД.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
		СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		
		МассивФайловЭД.Добавить(СтруктураПараметровЭД);
		
		МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(Результат.ПрисоединенныйФайл,
			УникальныйИдентификатор);
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			
			Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
				ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
				Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
					ИмяФайлаПодписи = ДанныеФайла.Наименование + ".p7s";
				КонецЕсли;
				
				СтруктураПараметровЭД = Новый Структура;
				СтруктураПараметровЭД.Вставить("ТипФайла", "ЭЦП");
				СтруктураПараметровЭД.Вставить("ИмяФайла", ИмяФайлаПодписи);
				СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", СтруктураПодписи.АдресПодписи);
				
				МассивФайловЭД.Добавить(СтруктураПараметровЭД);
			КонецЦикла;
		КонецЕсли;
		
		Соответствие.Вставить(Результат.ДокументИБ, МассивФайловЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "") Экспорт
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
// Параметры:
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
//    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
//    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
//    расположеной в первой строке таблицы-владельца. (подробнее см. схему ХДТО "АктТитулИсполнителя", список "ОписьРабот"
//    , вложенный список "Работа").
//
Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЭлементТЧ = (НомерСтроки <> Неопределено);
		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
		
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
			СтрокаДерева.ТЧ = ЭлементТЧ;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		Если ЭлементТЧ Тогда
			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
			Если СтрокиСписка.Количество() = 0 Тогда
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита = "Нпп";
				СтрокаДерева.ТЧ = ЭлементТЧ;
				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
			Иначе
				СтрокаДерева = СтрокиСписка[0];
			КонецЕсли;
		КонецЕсли;
		
		ДоступноСимволов = 0;
		Если ЮридическиЗначимый Тогда
			Если НомерСтроки = Неопределено Тогда
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
			Иначе
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДанныеРекурсивно(СтрокаДерева,
								 СтруктураДанных,
								 ДоступноСимволов,
								 ЮридическиЗначимый,
								 ЭлементТЧ,
								 НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

 // Процедура используется для формирования дерева доп.данных.
// Данные из полученной структуры, рекурсивно добавляет в дерево доп.данных.
//
// Параметры:
//  СтрокаДереваДопДанных - Строка дерева значений - строка дерева, в которую добавляются данные.
//  СтруктураДанных - Структура - структура с добавляемыми в дерево данными. Элементами структуры могут быть: данные с
//    простым типом, массивы значений, вложенные структуры данных.
//  ДоступноСимволов - Число - количество символов, доступных для размещения данных внутри основного файла ЭД.
//  ЮридическиЗначимый - Булево - Истина - пометка данных, которые в последствии из дерева доп.данных надо будет
//    разместить в основном файле ЭД. Ложь - данные будут помещены в файл доп.данных.
//  ЭлементТЧ - Булево - данные принадлежат строке табличной части документа ИБ.
//  НомерСтроки - Строка - номер строки табличной части документа ИБ.
//
Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
								   СтруктураДанных,
								   ДоступноСимволов,
								   ЮридическиЗначимый,
								   ЭлементТЧ,
								   НомерСтроки)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Набор";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = ЭлементТЧ;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Список";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = Истина;
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ТЗ = Элемент.Значение;
				ПоляСтруктурыТЗ = "";
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
				КонецЦикла;
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
					ДобавитьДанныеРекурсивно(СтрокаДерева, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый, Истина, ТЗ.Индекс(СтрокаТЗ));
				КонецЦикла;
			Иначе
				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
																					Элемент.Значение,
																					ДоступноСимволов);
				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
					ЮридическиЗначимый = Ложь;
				КонецЕсли;
				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					НоваяСтрока.ИмяРеквизита = "Массив";
					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
					НоваяСтрока.ТЧ = ЭлементТЧ;
					Для Каждого Значение Из Элемент.Значение Цикл
						СтрокаЗн = НоваяСтрока.Строки.Добавить();
						СтрокаЗн.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
						СтрокаЗн.ТЧ = ЭлементТЧ;
						СтрокаЗн.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
						Если ТипЗнч(Значение) = Тип("Структура") Тогда
							СтрокаЗн.ЗначениеРеквизита = "Структура";
							ДобавитьДанныеРекурсивно(СтрокаЗн, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
						Иначе
							
							СтрокаЗн.ЗначениеРеквизита = Значение;
						КонецЕсли
					КонецЦикла;
				Иначе
					НоваяСтрока.ИмяРеквизита = Элемент.Ключ;
					НоваяСтрока.ЗначениеРеквизита = Элемент.Значение;
					НоваяСтрока.ТЧ = ЭлементТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
// символов), не должна превышать количества доступных символов.
//
// Параметры:
//  СтруктураДанных - Структура - заполняемая структура.
//  Ключ - Строка - ключ добавляемого элемента.
//  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
//  ДоступноСимволов - Число - количество доступных символов результирующей строки.
//
// Возвращаемое значение:
//  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
//
Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
	
	РазмещениеВозможно = Ложь;
	
	СлужебныеСимволы = 0;
	ДлинаСтрЗначения = 0;
	
	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значение Цикл
			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
		КонецЦикла;
		
		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Элемент Из Значение Цикл
			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
			Если НЕ РазмещениеВозможно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
	Иначе // простой тип.
		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
	КонецЕсли;
	
	Если ДоступноСимволов >= СлужебныеСимволы Тогда
		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
		РазмещениеВозможно = Истина;
	КонецЕсли;
	
	Возврат РазмещениеВозможно;
	
КонецФункции

