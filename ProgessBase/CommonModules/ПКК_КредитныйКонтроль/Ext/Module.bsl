
#Если Клиент Тогда

#КонецЕсли
//начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
функция ПолучитьТипыВзаимрасчетов()
	МетаРег  = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентами;
	МассТипов = Новый Массив;
	Для каждого ТекМета Из Метаданные.Документы Цикл
		Если ТекМета.Движения.Содержит(МетаРег) Тогда
			 МассТипов.Добавить(Тип("ДокументСсылка."+ТекМета.Имя));
		КонецЕсли;	
	КонецЦикла; 
	
	
	МасДобавка =МетаРег.Реквизиты.АП_ДокументДвижения.Тип.Типы();
	Для каждого ТекЭлем  Из МасДобавка Цикл
		Если МассТипов.Найти(ТекЭлем) = Неопределено Тогда
			МассТипов.Добавить(ТекЭлем);
		КонецЕсли;	
	КонецЦикла; 
	
	возврат Новый ОписаниеТипов(МассТипов);

КонецФункции
Функция ПолучитьТаблицуПросроченнойЗадолженности(СписокКонтрагентов, ВВалютеВзаиморасчетов,Дата1,Дата2,МаксДнейПросрочено,ПоВсеКонтрагетам=Ложь,ИспДопДниЗадолженности=Ложь) Экспорт
	
	Перем ТаблИтого;
	
	ТаблИтого = Новый ТаблицаЗначений;
	ОписДаты = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблИтого.Колонки.Добавить("Дата",ОписДаты);
	ТаблИтого.Колонки.Добавить("ДатаОплаты",ОписДаты);
	ТаблИтого.Колонки.Добавить("Регистратор",ПолучитьТипыВзаимрасчетов());
	ТаблИтого.Колонки.Добавить("ДнейПросрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	ТаблИтого.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблИтого.Колонки.Добавить("Просрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	ТаблИтого.Колонки.Добавить("НачОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Приход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Расход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("КонОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Погашено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
			
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ПРГ_ДопФункцииКлиентСервер.ПолучитьТекстЗапросаДляРасчетаПДЗ(ВВалютеВзаиморасчетов);
				   
	Дата1 = НачалоДня(Дата1);
	Дата2 = КонецДня(Дата2);
	
	ПостроительЗапроса.Параметры.Вставить("Дата1", Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2", Дата2);
	ПостроительЗапроса.Параметры.Вставить("Контрагент", СписокКонтрагентов);
	Если ТипЗнч(СписокКонтрагентов) = Тип("СписокЗначений") или  
		ТипЗнч(СписокКонтрагентов) = Тип("Массив")
		Тогда
		Если ТипЗнч(СписокКонтрагентов) = Тип("Массив")Тогда	
			СписокДляОтбора  = Новый СписокЗначений;
			Для каждого ТекЭлем Из СписокКонтрагентов Цикл
		      СписокДляОтбора .Добавить(ТекЭлем);
		  КонецЦикла; 
	  	Иначе	  
		  СписокДляОтбора  = СписокКонтрагентов;
		КонецЕсли;  
		
		 Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		 Отбор .Использование = Истина;
		 Отбор .ВидСравнения = ВидСравнения.ВСписке;
		 Отбор .Значение 	 = СписокДляОтбора; 
	//{27.04.2015 Островерхий заявка №б/н 
	ИначеЕсли ТипЗнч(СписокКонтрагентов) = Тип("ТаблицаЗначений") Тогда
		
		СписокДляОтбора  = Новый СписокЗначений;
		Для каждого ТекЭлем Из СписокКонтрагентов Цикл
			СписокДляОтбора.Добавить(ТекЭлем.Контрагент);
		КонецЦикла;
		
		Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		Отбор .Использование = Истина;
		Отбор .ВидСравнения = ВидСравнения.ВСписке;
		Отбор .Значение 	 = СписокДляОтбора;
	//27.04.2015 Островерхий} 	 
	ИначеЕсли ТипЗнч(СписокКонтрагентов) = Тип("СправочникСсылка.Контрагенты") Тогда
		 Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент"); 
		 Отбор .Использование = Истина;
		 Отбор .ВидСравнения = ВидСравнения.Равно;
		 Отбор .Значение 	 = СписокКонтрагентов;  
	 Иначе
		 //начало изменений Ожиганов 20.07.2015 оптимизация выгрузки мобильной торговли 
		 Если Не ПоВсеКонтрагетам Тогда
		 	вызватьисключение "неизвестный тип";
		 КонецЕслИ;	
		 //конец изменений 
	КонецЕсли;	
	//начало изменений
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент", Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	//конец изменений
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	ТекСтрока			   =  Неопределено;
	ТекВремя               = ТекущаяДата();
	
	ТаблИтоговаяРазвернуто = Истина;
	ВыводитьВремя = Ложь;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	
	
	ПостроительЗапроса.Выполнить();	
	РезЗапроса	 = ПостроительЗапроса.Результат;
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	
	МаксДнейПросрочено = 0;
	
	Пока ВыборкаДетальная.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ИзмГруппировка = Ложь;
		Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			ТекОрганизация  = ВыборкаДетальная.Организация;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			ИзмГруппировка 		 = Истина;
		КонецЕсли;	
		
		//Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		//	ТекВалюта       = ВыборкаДетальная.Валюта;
		//	ИзмГруппировка = Истина;
		//КонецЕсли;	
		
		Если ИзмГруппировка Тогда
			ИтогКонОст 	   	   = ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			
			ИтогоРасход  	   = ВыборкаДетальная.РасходКон;
			ИтогоПриход  	   = ВыборкаДетальная.ПриходКон;
			
			ИтогоРасходНач   = ВыборкаДетальная.РасходНач;
			ИтогоПриходНач   = ВыборкаДетальная.ПриходНач;
			
			ИтогНачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
			
			ЗнакКонОст  	   = ?(ИтогКонОст > 0,1,-1);
			ЗнакНачОст  	   = ?(ИтогНачОст > 0,1,-1);
			ИзмГруппировка 	= Ложь;
			Если Не ТаблИтоговаяРазвернуто Тогда
				ТекСтрока = ТаблИтого.Добавить();
			КонецЕсли;
		КонецЕсли; 
		
		КонОст = 0;
		НачОст = 0;
		Приход = 0;
		Расход = 0;
		
		Если ЗнакКонОст = 1 Тогда
			КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		Иначе // знак -1
			КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		КонецЕсли;	  
		
		Если ЗнакНачОст = 1 Тогда
			НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
			ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		Иначе	
			НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
			ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		КонецЕсли;
		
		Если ВыборкаДетальная.Дата < Дата1 Тогда
			Приход = 0;
			Расход = 0;
		ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			Приход = ВыборкаДетальная.Приход;
			Расход = ВыборкаДетальная.Расход;
			НачОст = 0;
		КонецЕсли;	   
		
		Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
			продолжить;
		КонецЕсли;  
		
		Погашено   = 0;
		ДатаОплаты  = '00010101';
		Если Приход > 0 или НачОст > 0 Тогда
			//ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты; // №52691 исх строка			
			// ИспДопДниЗадолженности
			ДатаОплаты   =  ?(ИспДопДниЗадолженности, ВыборкаДетальная.ДатаОплаты + ВыборкаДетальная.ПРГ_ДопДниЗадолженности * (3600*24), ВыборкаДетальная.ДатаОплаты); // Шевченков №52691 20160520
			Если ДатаОплаты  = '00010101' Тогда
				ДатаОплаты = ВыборкаДетальная.Дата;
			КонецЕсли;	  
			Погашено = НачОст+Приход-КонОст;
		КонецЕсли; 
		
		ДнейПросрочено = 0;
		Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
			ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
		КонецЕсли; 
		
		Если ТаблИтоговаяРазвернуто Тогда
			НоваяСтрока 	   				  = ТаблИтого.Добавить();
			НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
			НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
			НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
			НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
		Иначе
			НоваяСтрока 					  = ТекСтрока;
		КонецЕсли;
		
		НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
		НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
		НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
		
		Если ДнейПросрочено > 0 Тогда
			НоваяСтрока.Просрочено			  = НоваяСтрока.Просрочено + КонОст;
		КонецЕсли;	
		
		МаксДнейПросрочено = Макс(ДнейПросрочено, МаксДнейПросрочено);
		
		НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
		НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
		НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
		НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
		НоваяСтрока.Погашено 		  = НоваяСтрока.Погашено + Погашено;
		
	КонецЦикла; 
	
	возврат ТаблИтого;
	// возврат ТаблИтого;
КонецФункции	
 //конец изменений 
 Функция ПолучитьПросроченнуюДебеторскуюЗадолженность(Контрагент, Дата, ВВалютеВзаиморасчетов = Ложь, ДатаНачала = Неопределено) Экспорт
	
	Перем ТаблИтого;
	//начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	Если ДатаНачала = Неопределено Тогда
		Дата1 = НачалоГода(ТекущаяДата());
	Иначе
		Дата1 = НачалоДня(ДатаНачала);
	КонецЕсли;
	Дата2 = КонецДня(Дата);
	МаксДнейПросрочено = 0;
	
	ТаблИтого = ПолучитьТаблицуПросроченнойЗадолженности(Контрагент, ВВалютеВзаиморасчетов,Дата1,Дата2,МаксДнейПросрочено); 
    Задолженность = Новый Структура;
	
	Если ТаблИтого.Количество() > 0 Тогда
		Задолженность.Вставить("Долг", ТаблИтого.Итог("КонОст"));
		Задолженность.Вставить("Просрочено", ТаблИтого.Итог("Просрочено"));
		Задолженность.Вставить("Дней", МаксДнейПросрочено);//ТаблИтого[0].ДнейПросрочено);
	Иначе
		Задолженность.Вставить("Долг", 0);
		Задолженность.Вставить("Просрочено", 0);
		Задолженность.Вставить("Дней", 0);
	КонецЕсли;
	
	Возврат Задолженность;	
	
	//конец изменений 
	
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата");
	ТаблИтого.Колонки.Добавить("ДатаОплаты");
	ТаблИтого.Колонки.Добавить("Регистратор");
	ТаблИтого.Колонки.Добавить("ДнейПросрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	ТаблИтого.Колонки.Добавить("Организация");
	ТаблИтого.Колонки.Добавить("Контрагент");
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента");
	ТаблИтого.Колонки.Добавить("Просрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	ТаблИтого.Колонки.Добавить("НачОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Приход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Расход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("КонОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Погашено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
			
	ПостроительЗапроса = Новый ПостроительЗапроса;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК ПриходКон,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК РасходКон,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПриходНач,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РасходНач,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Приход,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Расход
	               |ПОМЕСТИТЬ ТаблКонтр
	               |{ВЫБРАТЬ
	               |	Организация.*,
	               |	ДоговорКонтрагента.*,
	               |	Контрагент.*}
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	               |	И ВзаиморасчетыСКонтрагентами.Активность
	               |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	               |	И ВзаиморасчетыСКонтрагентами.Контрагент = &Контрагент
	               |{ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	               |	ВзаиморасчетыСКонтрагентами.Организация.*,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА 0
	               |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						КОНЕЦ
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |			КОНЕЦ - ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА 0
	               |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						КОНЕЦ
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ - ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Организация,
	               |	ДоговорКонтрагента,
	               |	Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	               |	КОНЕЦ КАК Дата,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	               |	КОНЕЦ КАК Регистратор,
					|ВЫБОР
					|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
					|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
					|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
					|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
					|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
					|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
					|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
					|КОНЕЦ КАК ДатаОплаты,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Приход,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Расход,
	               |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	               |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	               |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	               |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	               |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	               |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	               |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	               |	И ВзаиморасчетыСКонтрагентами.Активность
				   |	И ВзаиморасчетыСКонтрагентами.Контрагент = &Контрагент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	               |	КОНЕЦ,
					|ВЫБОР
					|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
					|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
					|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
					|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
					|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
				   |	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
				   |		ТОГДА КорректировкаДолга.АП_ДатаОплаты
				   |	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
				   |КОНЕЦ
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Контрагент,
	               |	ДоговорКонтрагента,
				   |	Дата,
	               |	ДатаОплаты,
	               |	Регистратор";
				   
	Если ВВалютеВзаиморасчетов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаВзаиморасчетов");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаУпр");
	КонецЕсли;
	
	Если ДатаНачала = Неопределено Тогда
		Дата1 = НачалоГода(ТекущаяДата());
	Иначе
		Дата1 = НачалоДня(ДатаНачала);
	КонецЕсли;
	Дата2 = КонецДня(Дата);
	
	ПостроительЗапроса.Параметры.Вставить("Дата1", Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2", Дата2);
	ПостроительЗапроса.Параметры.Вставить("Контрагент", Контрагент);
	//начало изменений
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент", Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	//конец изменений
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	ТекСтрока			   =  Неопределено;
	ТекВремя               = ТекущаяДата();
	
	ТаблИтоговаяРазвернуто = Истина;
	ВыводитьВремя = Ложь;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Выполнить();	
	РезЗапроса	 = ПостроительЗапроса.Результат;
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	
	МаксДнейПросрочено = 0;
	
	Пока ВыборкаДетальная.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ИзмГруппировка = Ложь;
		Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			ТекОрганизация  = ВыборкаДетальная.Организация;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			ИзмГруппировка 		 = Истина;
		КонецЕсли;	
		
		//Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		//	ТекВалюта       = ВыборкаДетальная.Валюта;
		//	ИзмГруппировка = Истина;
		//КонецЕсли;	
		
		Если ИзмГруппировка Тогда
			ИтогКонОст 	   	   = ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			
			ИтогоРасход  	   = ВыборкаДетальная.РасходКон;
			ИтогоПриход  	   = ВыборкаДетальная.ПриходКон;
			
			ИтогоРасходНач   = ВыборкаДетальная.РасходНач;
			ИтогоПриходНач   = ВыборкаДетальная.ПриходНач;
			
			ИтогНачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
			
			ЗнакКонОст  	   = ?(ИтогКонОст > 0,1,-1);
			ЗнакНачОст  	   = ?(ИтогНачОст > 0,1,-1);
			ИзмГруппировка 	= Ложь;
			Если Не ТаблИтоговаяРазвернуто Тогда
				ТекСтрока = ТаблИтого.Добавить();
			КонецЕсли;
		КонецЕсли; 
		
		КонОст = 0;
		НачОст = 0;
		Приход = 0;
		Расход = 0;
		
		Если ЗнакКонОст = 1 Тогда
			КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		Иначе // знак -1
			КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		КонецЕсли;	  
		
		Если ЗнакНачОст = 1 Тогда
			НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
			ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		Иначе	
			НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
			ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		КонецЕсли;
		
		Если ВыборкаДетальная.Дата < Дата1 Тогда
			Приход = 0;
			Расход = 0;
		ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			Приход = ВыборкаДетальная.Приход;
			Расход = ВыборкаДетальная.Расход;
			НачОст = 0;
		КонецЕсли;	   
		
		Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
			продолжить;
		КонецЕсли;  
		
		Погашено   = 0;
		ДатаОплаты  = '00010101';
		Если Приход > 0 или НачОст > 0 Тогда
			ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
			Если ДатаОплаты  = '00010101' Тогда
				ДатаОплаты = ВыборкаДетальная.Дата;
			КонецЕсли;	  
			Погашено = НачОст+Приход-КонОст;
		КонецЕсли; 
		
		ДнейПросрочено = 0;
		Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
			ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
		КонецЕсли; 
		
		Если ТаблИтоговаяРазвернуто Тогда
			НоваяСтрока 	   				  = ТаблИтого.Добавить();
			НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
			НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
			НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
			НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
		Иначе
			НоваяСтрока 					  = ТекСтрока;
		КонецЕсли;
		
		НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
		НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
		НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
		
		Если ДнейПросрочено > 0 Тогда
			НоваяСтрока.Просрочено			  = НоваяСтрока.Просрочено + КонОст;
		КонецЕсли;	
		
		МаксДнейПросрочено = Макс(ДнейПросрочено, МаксДнейПросрочено);
		
		НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
		НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
		НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
		НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
		НоваяСтрока.Погашено 		  = НоваяСтрока.Погашено + Погашено;
		
	КонецЦикла; 
	
	// возврат ТаблИтого;
    Задолженность = Новый Структура;
	
	Если ТаблИтого.Количество() > 0 Тогда
		Задолженность.Вставить("Долг", ТаблИтого.Итог("КонОст"));
		Задолженность.Вставить("Просрочено", ТаблИтого.Итог("Просрочено"));
		Задолженность.Вставить("Дней", МаксДнейПросрочено);//ТаблИтого[0].ДнейПросрочено);
	Иначе
		Задолженность.Вставить("Долг", 0);
		Задолженность.Вставить("Просрочено", 0);
		Задолженность.Вставить("Дней", 0);
	КонецЕсли;
	
	Возврат Задолженность;
	
КонецФункции

Функция ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(СписокКонтрагентов, Дата, ВВалютеВзаиморасчетов = Ложь, ДатаНачала = Неопределено,ПоВсеКонтрагетам=Ложь) Экспорт
	
	Перем ТаблИтого;
	//начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	
	Если ДатаНачала = Неопределено Тогда
		Дата1 = НачалоГода(ТекущаяДата());
	Иначе
		Дата1 = НачалоДня(ДатаНачала);
	КонецЕсли;
	Дата2 = КонецДня(Дата);
	МаксДнейПросрочено = 0;
	
	//начало изменений Ожиганов 20.07.2015 оптимизация выгрузки мобильной торговли 
	//ТаблИтого = ПолучитьТаблицуПросроченнойЗадолженности(СписокКонтрагентов, ВВалютеВзаиморасчетов,Дата1,Дата2,МаксДнейПросрочено); 
	ТаблИтого = ПолучитьТаблицуПросроченнойЗадолженности(СписокКонтрагентов, ВВалютеВзаиморасчетов,Дата1,Дата2,МаксДнейПросрочено,ПоВсеКонтрагетам); 
	//конец изменений 
	
	Если ТаблИтого.Количество() =0 Тогда
			ТаблИтого.Колонки.Добавить("НомерДокумента");
			ТаблИтого.Колонки.Добавить("АдресПоставки", Новый ОписаниеТипов("СправочникСсылка.АдресаПоставки"));
	//-- Spl_Апроф
	Иначе
	  Запрос=Новый Запрос("ВЫБРАТЬ
	                      |	ТаблИтого.Дата,
	                      |	ТаблИтого.ДатаОплаты,
	                      |	ТаблИтого.Регистратор,
	                      |	ТаблИтого.ДнейПросрочено,
	                      |	ТаблИтого.Организация,
	                      |	ТаблИтого.Контрагент,
	                      |	ТаблИтого.ДоговорКонтрагента,
	                      |	ТаблИтого.Просрочено,
	                      |	ТаблИтого.НачОст,
	                      |	ТаблИтого.Приход,
	                      |	ТаблИтого.Расход,
	                      |	ТаблИтого.КонОст,
	                      |	ТаблИтого.Погашено
	                      |ПОМЕСТИТЬ ТаблИтого
	                      |ИЗ
	                      |	&ТаблИтого КАК ТаблИтого
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблИтого.Дата,
	                      |	ТаблИтого.ДатаОплаты,
	                      |	ТаблИтого.Регистратор,
	                      |	ТаблИтого.ДнейПросрочено,
	                      |	ТаблИтого.Организация,
	                      |	ТаблИтого.Контрагент,
	                      |	ТаблИтого.ДоговорКонтрагента,
	                      |	ТаблИтого.Просрочено,
	                      |	ТаблИтого.НачОст,
	                      |	ТаблИтого.Приход,
	                      |	ТаблИтого.Расход,
	                      |	ТаблИтого.КонОст,
	                      |	ТаблИтого.Погашено,
	                      |	ТаблИтого.Регистратор.Номер КАК НомерДокумента,
	                      |	ВЫРАЗИТЬ(ТаблИтого.Регистратор.Грузополучатель КАК Справочник.АдресаПоставки) КАК АдресПоставки
	                      |ИЗ
	                      |	ТаблИтого КАК ТаблИтого");
						  
		Запрос.УстановитьПараметр("ТаблИтого",ТаблИтого);
		ТаблИтого = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	возврат  ТаблИтого;
	
	//конец изменений 
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата");
	//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
	ТаблИтого.Колонки.Добавить("НомерДокумента");
	ТаблИтого.Колонки.Добавить("АдресПоставки", Новый ОписаниеТипов("СправочникСсылка.АдресаПоставки"));
	//-- Spl_Апроф
	ТаблИтого.Колонки.Добавить("ДатаОплаты");
	ТаблИтого.Колонки.Добавить("Регистратор");
	ТаблИтого.Колонки.Добавить("ДнейПросрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	ТаблИтого.Колонки.Добавить("Организация");
	ТаблИтого.Колонки.Добавить("Контрагент");
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента");
	ТаблИтого.Колонки.Добавить("Просрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	ТаблИтого.Колонки.Добавить("НачОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Приход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Расход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("КонОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Погашено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
			
	ПостроительЗапроса = Новый ПостроительЗапроса;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК ПриходКон,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК РасходКон,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПриходНач,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РасходНач,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Приход,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Расход
	               |ПОМЕСТИТЬ ТаблКонтр
	               |{ВЫБРАТЬ
	               |	Организация.*,
	               |	ДоговорКонтрагента.*,
	               |	Контрагент.*}
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	               |	И ВзаиморасчетыСКонтрагентами.Активность
	               |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	               |	И ВзаиморасчетыСКонтрагентами.Контрагент В(&Контрагент)
	               |{ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	               |	ВзаиморасчетыСКонтрагентами.Организация.*,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА 0
	               |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						КОНЕЦ
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |			КОНЕЦ - ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА 0
	               |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						КОНЕЦ
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ - ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Организация,
	               |	ДоговорКонтрагента,
	               |	Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	               |	КОНЕЦ КАК Дата,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	               |	КОНЕЦ КАК Регистратор,
					|ВЫБОР
					|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
					|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
					|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
					|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
					|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
					|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
					|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
					|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
					|КОНЕЦ КАК ДатаОплаты,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Приход,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Расход,
	               |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	               |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	               |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	               |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения.Номер
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Номер
	               |	КОНЕЦ КАК НомерДокумента,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Грузополучатель
	               |	КОНЕЦ КАК АдресПоставки
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
					|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
					|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
					|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
					|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
					|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
					|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка				   
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	               |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	               |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	               |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	               |	И ВзаиморасчетыСКонтрагентами.Активность
	               |	И ВзаиморасчетыСКонтрагентами.Контрагент В(&Контрагент)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	               |	КОНЕЦ,
				   |ВЫБОР
				   |	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   |		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
				   |	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				   |		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
				   |	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
				   |		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
				   |	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
				   |		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
				   |	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
				   |		ТОГДА КорректировкаДолга.АП_ДатаОплаты
				   |	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
				   |КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения.Номер
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Номер
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Грузополучатель
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Контрагент,
	               |	ДоговорКонтрагента,
				   |	Дата,
	               |	ДатаОплаты,
	               |	Регистратор";
				   
	Если ВВалютеВзаиморасчетов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаВзаиморасчетов");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаУпр");
	КонецЕсли;
			   
	Если ДатаНачала = Неопределено Тогда
		Дата1 = НачалоГода(ТекущаяДата());
	Иначе
		Дата1 = НачалоДня(ДатаНачала);
	КонецЕсли;
	Дата2 = КонецДня(Дата);
	
	ПостроительЗапроса.Параметры.Вставить("Дата1", Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2", Дата2);
	ПостроительЗапроса.Параметры.Вставить("Контрагент", СписокКонтрагентов);
	//начало изменений
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент", Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	//конец изменений 
	
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	ТекСтрока			   =  Неопределено;
	ТекВремя               = ТекущаяДата();
	
	ТаблИтоговаяРазвернуто = Истина;
	ВыводитьВремя = Ложь;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Выполнить();	
	РезЗапроса	 = ПостроительЗапроса.Результат;
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	
	Пока ВыборкаДетальная.Следующий() Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		ИзмГруппировка = Ложь;
		Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			ТекОрганизация  = ВыборкаДетальная.Организация;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			ИзмГруппировка 		 = Истина;
		КонецЕсли;	
		
		//Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		//	ТекВалюта       = ВыборкаДетальная.Валюта;
		//	ИзмГруппировка = Истина;
		//КонецЕсли;	
		
		Если ИзмГруппировка Тогда
			ИтогКонОст 	   	   = ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			
			ИтогоРасход  	   = ВыборкаДетальная.РасходКон;
			ИтогоПриход  	   = ВыборкаДетальная.ПриходКон;
			
			ИтогоРасходНач   = ВыборкаДетальная.РасходНач;
			ИтогоПриходНач   = ВыборкаДетальная.ПриходНач;
			
			ИтогНачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
			
			ЗнакКонОст  	   = ?(ИтогКонОст > 0,1,-1);
			ЗнакНачОст  	   = ?(ИтогНачОст > 0,1,-1);
			ИзмГруппировка 	= Ложь;
			Если Не ТаблИтоговаяРазвернуто Тогда
				ТекСтрока = ТаблИтого.Добавить();
			КонецЕсли;
		КонецЕсли; 
		
		КонОст = 0;
		НачОст = 0;
		Приход = 0;
		Расход = 0;
		
		Если ЗнакКонОст = 1 Тогда
			КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		Иначе // знак -1
			КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		КонецЕсли;	  
		
		Если ЗнакНачОст = 1 Тогда
			НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
			ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		Иначе	
			НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
			ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		КонецЕсли;
		
		Если ВыборкаДетальная.Дата < Дата1 Тогда
			Приход = 0;
			Расход = 0;
		ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			Приход = ВыборкаДетальная.Приход;
			Расход = ВыборкаДетальная.Расход;
			НачОст = 0;
		КонецЕсли;	   
		
		Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
			продолжить;
		КонецЕсли;  
		
		Погашено   = 0;
		ДатаОплаты  = '00010101';
		Если Приход > 0 или НачОст > 0 Тогда
			ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
			Если ДатаОплаты  = '00010101' Тогда
				ДатаОплаты = ВыборкаДетальная.Дата;
			КонецЕсли;	  
			Погашено = НачОст+Приход-КонОст;
		КонецЕсли; 
		
		ДнейПросрочено = 0;
		Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
			ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
		КонецЕсли; 
		
		Если ТаблИтоговаяРазвернуто Тогда
			НоваяСтрока 	   				  = ТаблИтого.Добавить();
			НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
			НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
			НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
			НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
			//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
			НоваяСтрока.НомерДокумента        = ВыборкаДетальная.НомерДокумента;
			НоваяСтрока.АдресПоставки         = ВыборкаДетальная.АдресПоставки;
			//-- Spl_Апроф
		Иначе
			НоваяСтрока 					  = ТекСтрока;
		КонецЕсли;
		
		НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
		НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
		НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
		
		Если ДнейПросрочено > 0 Тогда
			НоваяСтрока.Просрочено			  = НоваяСтрока.Просрочено + КонОст;
		КонецЕсли;	  
		
		НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
		НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
		НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
		НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
		НоваяСтрока.Погашено 		  = НоваяСтрока.Погашено + Погашено;
		
	КонецЦикла; 
	
	Возврат ТаблИтого;
	//Задолженность = Новый Структура;
	//
	//Если ТаблИтого.Количество() > 0 Тогда
	//	Задолженность.Вставить("Долг", ТаблИтого[0].КонОст);
	//	Задолженность.Вставить("Просрочено", ТаблИтого[0].Просрочено);
	//	Задолженность.Вставить("Дней", ТаблИтого[0].ДнейПросрочено);
	//Иначе
	//	Задолженность.Вставить("Долг", 0);
	//	Задолженность.Вставить("Просрочено", 0);
	//	Задолженность.Вставить("Дней", 0);
	//КонецЕсли;
	
	//Возврат Задолженность;
	
КонецФункции

// Процедура заполнения реквизита "ДатаОплаты" по договору. Вызывается из заказов и счетов
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
Процедура УстановитьДатуОплатыПоДоговору(ДокОбъект, РежимВызова = "", мСтароеЗначениеДоговора = неопределено, ПРГДоговорКонтргента = Неопределено, ПРГГрузополучатель=Неопределено)Экспорт
	
	//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	Если ЗначениеЗаполнено(ПРГДоговорКонтргента) Тогда
		 ДоговорКонтрагента 	= ПРГДоговорКонтргента;
	Иначе	
	     ДоговорКонтрагента 	= ДокОбъект.ДоговорКонтрагента;
	КонецЕсли;	
	ДатаДокумента 		= ДокОбъект.Дата;
	
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	//конец изменений 
	
	//m.ionov@a-prof.ru 14.11.2014
	МетаданныеДокумента = ДокОбъект.Метаданные();
	//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	мЕстьГрузополучатель = Ложь;
	Если ЗначениеЗаполнено(ПРГГрузополучатель) Тогда
		Грузополучатель  = ПРГГрузополучатель;
		мЕстьГрузополучатель = Истина;
	Иначе
		мЕстьГрузополучатель = МетаданныеДокумента.Реквизиты.Найти("Грузополучатель") <> Неопределено;
		Если мЕстьГрузополучатель Тогда
			Грузополучатель 	 = ДокОбъект.Грузополучатель;
		Иначе
			Грузополучатель  = Справочники.АдресаПоставки.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
			Грузополучатель  = Справочники.АдресаПоставки.ПустаяСсылка();
	КонецЕсли;	
	//конец изменений 
	
	
	мЕстьДатаОтгрузки = МетаданныеДокумента.Реквизиты.Найти("ДатаОтгрузки") <> Неопределено;
	мЕстьАПДатаОплаты = МетаданныеДокумента.Реквизиты.Найти("АП_ДатаОплаты") <> Неопределено;
	Если мЕстьДатаОтгрузки И Не ДокОбъект.ДатаОтгрузки = Дата(1,1,1) Тогда
		ДатаДокумента = ДокОбъект.ДатаОтгрузки;
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	//Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
	//	Возврат;
	//ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	//	Возврат;
	//КонецЕсли;
	//конец изменений 
	//m.ionov@a-prof.ru 14.11.2014
	//Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
	//	ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
	//Иначе
	//	ЧислоДнейДоОплаты = 0;
	//КонецЕсли;
	//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	//Если мЕстьГрузополучатель И ТипЗнч(ДокОбъект.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
	Если мЕстьГрузополучатель  Тогда
	//конец изменений 	
		//начало изменений Ожиганов 16.04.2015 Транзитные дни в АП	 
		//ЧислоДнейДоОплаты = ДокОбъект.Грузополучатель.ПКК_ДопустимоеЧислоДнейЗадолженности;	
		ЧислоДнейДоОплаты = ПолучитьОстрочкуВДнях(ДоговорКонтрагента,Грузополучатель);
		//Если ЧислоДнейДоОплаты = 0 Тогда
		//	ЧислоДнейДоОплаты = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		//КонецЕсли;
		//конец изменений 
	Иначе
		Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	Если ЧислоДнейДоОплаты = 0 Тогда
		ДатаОплатыНовая = ДатаДокумента;
	//Делаем только по календаным дням	
	Иначе	
		ДатаОплатыНовая = НачалоДня(ДатаДокумента) + 86400 * ЧислоДнейДоОплаты;
		//Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
		//	ДатаОплатыНовая = НачалоДня(ДатаДокумента) + 86400 * ЧислоДнейДоОплаты;
		//Иначе
		//	ДатаОплатыНовая = ЗаполнениеДокументов.ОпределитьДату(ДатаДокумента, ЧислоДнейДоОплаты);
		//	Если ДатаОплатыНовая = Неопределено Тогда
		//		ДатаОплатыНовая = ДатаДокумента;
		//	КонецЕсли;	
		//КонецЕсли;
	КонецЕсли;
	
	Если мЕстьАПДатаОплаты Тогда
		Если ДокОбъект.АП_ДатаОплаты <> ДатаОплатыНовая Тогда
			ДокОбъект.АП_ДатаОплаты = ДатаОплатыНовая;
		КОнецЕсли;
	ИначеЕсли ДокОбъект.ДатаОплаты <> ДатаОплатыНовая Тогда
		ДокОбъект.ДатаОплаты = ДатаОплатыНовая;
	КонецЕсли;

		//m.ionov@a-prof.ru 14.11.2014
		//Дату оплаты меняем без вопросов
//#Если Клиент Тогда

//		// Проверка режима вызова процедуры
//		Если НЕ ПустаяСтрока(РежимВызова) Тогда
//			ТекстВопроса = "";
//			Если РежимВызова = "ДатаДокумента" Тогда
//				ТекстВопроса = "Изменилась дата документа.";
//			ИначеЕсли РежимВызова = "ДоговорКонтрагента" Тогда
//				Если мСтароеЗначениеДоговора<>Справочники.ДоговорыКонтрагентов.ПустаяСсылка() И 
//					мСтароеЗначениеДоговора<> ДоговорКонтрагента Тогда
//					ТекстВопроса = "Изменился договор с контрагентом.";
//				КонецЕсли;	
//			КонецЕсли;
//			Если ТекстВопроса<>"" Тогда
//				Если Вопрос(ТекстВопроса + " Пересчитать дату оплаты?", 
//					РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
//					Возврат;
//				КонецЕсли;
//			КонецЕсли;	
//		КонецЕсли;

//#КонецЕсли
		//----m.ionov@a-prof.ru---

	//	ДокОбъект.АП_ДатаОплаты = ДатаОплатыНовая;
	//КонецЕсли;

КонецПроцедуры // УстановитьДатуОплатыПоДоговору()

Функция РасчетВесаБруттоПлан(Контрагент,Бонус,НачПериод,КонПериод)Экспорт
	
	Количество = 0 ;
	ТоварныеКатегори = Новый СписокЗначений;
	ТоварныеГруппы = Новый СписокЗначений;
	Проекты = Новый СписокЗначений;
		
	Для каждого СтрокаБазыБонуса Из Бонус.ПереченьПоПлануПродаж Цикл
	
		Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
			ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
		ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
			ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
		ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
			Проекты.Добавить(СтрокаБазыБонуса.Проект);
		КонецЕсли;
	
	КонецЦикла; 
    		
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПКК_СценарийДляПолученияПлановСрезПоследних.Сценарий
	               |ИЗ
	               |	РегистрСведений.ПКК_СценарийДляПолученияПланов.СрезПоследних(&КонПериод, ) КАК ПКК_СценарийДляПолученияПлановСрезПоследних";
				   
	Запрос.УстановитьПараметр("КонПериод", КонПериод);
	
	Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Сценарий = Результат.Сценарий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		ОбщегоНазначения.Сообщение("Не задан сценарий планирования для получения данных по плану продаж");
	КонецЕсли;
					
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ПланыПродажОбороты.ППП_ВесБруттоОборот) КАК ППП_ВесБруттоОборот
		|ИЗ
		|	РегистрНакопления.ПланыПродаж.Обороты(
		|			&НачПериод,
		|			&КонПериод,
		|			,
		|			Контрагент = &Контрагент
		|				И Сценарий = &Сценарий
		|				И (ППП_ТоварнаяКатегория В (&ТоварнаяКатегория)
		|					ИЛИ ППП_Брендообъем В (&ТоварныеГруппы)
		|					ИЛИ ППП_ТоварнаяКатегория.Проект В (&Проекты))) КАК ПланыПродажОбороты";

	Запрос.УстановитьПараметр("КонПериод", КонецДня(КонПериод));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачПериод", НачПериод);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварныеКатегори);
	Запрос.УстановитьПараметр("ТоварныеГруппы", ТоварныеГруппы);
	Запрос.УстановитьПараметр("Проекты", Проекты);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Количество = ВыборкаДетальныеЗаписи.ППП_ВесБруттоОборот;
	КонецЦикла;
	
	Возврат Количество;

КонецФункции

//РасчетПоказателяРетробонусовПлан
//по заявке 47185
Функция РасчетПоказателяРетробонусовПлан(Контрагент,Бонус,НачПериод,КонПериод)Экспорт
	
	Количество = 0 ;
	ТоварныеКатегори = Новый СписокЗначений;
	ТоварныеГруппы = Новый СписокЗначений;
	Проекты = Новый СписокЗначений;
		
	Для каждого СтрокаБазыБонуса Из Бонус.ПереченьПоПлануПродаж Цикл
	
		Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
			ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
		ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
			ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
		ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
			Проекты.Добавить(СтрокаБазыБонуса.Проект);
		КонецЕсли;
	
	КонецЦикла; 
    		
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПКК_СценарийДляПолученияПлановСрезПоследних.Сценарий
	               |ИЗ
	               |	РегистрСведений.ПКК_СценарийДляПолученияПланов.СрезПоследних(&КонПериод, ) КАК ПКК_СценарийДляПолученияПлановСрезПоследних";
				   
	Запрос.УстановитьПараметр("КонПериод", КонПериод);
	
	Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Сценарий = Результат.Сценарий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		ОбщегоНазначения.Сообщение("Не задан сценарий планирования для получения данных по плану продаж");
	КонецЕсли;
					
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ПланыПродажОбороты.ППП_ВесБруттоОборот) КАК ВесБрутто,
		|	СУММА(ПланыПродажОбороты.ППП_ВесНеттоОборот) КАК ВесНетто,
		|	СУММА(ПланыПродажОбороты.ППП_СуммаПовышенияЦенОборот) КАК БазоваяВыручкаБезНДС,
		|	СУММА(ПланыПродажОбороты.ППП_СуммаПовышенияЦенОборот * (1 + ВЫБОР
		|			КОГДА ПланыПродажОбороты.Контрагент.Дивизион.РеализацияНаЭкспорт
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПланыПродажОбороты.ППП_Брендообъем.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|							ИЛИ ПланыПродажОбороты.ППП_Брендообъем.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|						ТОГДА 0.18
		|					КОГДА ПланыПродажОбороты.ППП_Брендообъем.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|							ИЛИ ПланыПродажОбороты.ППП_Брендообъем.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|						ТОГДА 0.1
		|					КОГДА ПланыПродажОбороты.ППП_Брендообъем.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|							ИЛИ ПланыПродажОбороты.ППП_Брендообъем.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|						ТОГДА 0.2
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ)) КАК БазоваяВыручкаСНДС
		|ИЗ
		|	РегистрНакопления.ПланыПродаж.Обороты(
		|			&НачПериод,
		|			&КонПериод,
		|			,
		|			Контрагент = &Контрагент
		|				И Сценарий = &Сценарий
		|				И (ППП_ТоварнаяКатегория В (&ТоварнаяКатегория)
		|					ИЛИ ППП_Брендообъем В (&ТоварныеГруппы)
		|					ИЛИ ППП_ТоварнаяКатегория.Проект В (&Проекты))) КАК ПланыПродажОбороты";

	Запрос.УстановитьПараметр("КонПериод", КонецДня(КонПериод));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачПериод", НачПериод);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварныеКатегори);
	Запрос.УстановитьПараметр("ТоварныеГруппы", ТоварныеГруппы);
	Запрос.УстановитьПараметр("Проекты", Проекты);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.ВесНетто Тогда
			Количество = ВыборкаДетальныеЗаписи.ВесНетто;	
		ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.ВесБрутто Тогда
			Количество = ВыборкаДетальныеЗаписи.ВесБрутто;
		ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.СуммаБезНДС Тогда
			Количество = ВыборкаДетальныеЗаписи.БазоваяВыручкаБезНДС;
	    ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.СуммаСНДС Тогда
			Количество = ВыборкаДетальныеЗаписи.БазоваяВыручкаСНДС;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Количество;

КонецФункции

Функция РасчетВесаБруттоФакт(Контрагент,Бонус = неопределено ,НачПериод,КонПериод,ТоварныеКатегори = неопределено ,ТоварныеГруппы = неопределено ,Проекты = неопределено )Экспорт
	
	Количество = 0 ;
		
	Если Бонус <> неопределено тогда 
		ТоварныеКатегори = Новый СписокЗначений;
		ТоварныеГруппы = Новый СписокЗначений;
		Проекты = Новый СписокЗначений;
		
		Если Бонус.ПереченьПоПлануПродаж.Количество() > 0 Тогда
			Для каждого СтрокаБазыБонуса Из Бонус.ПереченьПоПлануПродаж Цикл
				
				Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
					ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
					ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
					Проекты.Добавить(СтрокаБазыБонуса.Проект);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Для каждого СтрокаБазыБонуса Из Бонус.ПереченьПоОбъему Цикл
				
				Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
					ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
					ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
					Проекты.Добавить(СтрокаБазыБонуса.Проект);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.КоличествоОборот), 0) КАК Количество,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.КоличествоОборот * ЕдиницыИзмерения.Вес/ЕдиницыИзмерения.Коэффициент), 0) КАК Вес,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Стоимость,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот + ПродажиОбороты.НДСОборот), 0) КАК СтоимостьСНДС
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			&НачПериода,
		|			&КонПериода,
		|			,
		|			Контрагент = &Контрагент
		|				И (Номенклатура.Проект В (&Проект)
		|				ИЛИ Номенклатура.НСИ_ТоварнаяКатегория В (&ТоварнаяКатегория)
		|				ИЛИ Номенклатура.НСИ_Брендообъем В (&ЦеноваяГруппа))) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ПродажиОбороты.Номенклатура.ЕдиницаИзмеренияМест = ЕдиницыИзмерения.Ссылка";

		
		
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("КонПериода",  КонецДня(КонПериод));
	Запрос.УстановитьПараметр("НачПериода", НачПериод);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварныеКатегори);
	Запрос.УстановитьПараметр("Проект", Проекты);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", ТоварныеГруппы);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Количество = ВыборкаДетальныеЗаписи.Вес/1000;
	КонецЦикла;
	
	Возврат Количество;

КонецФункции

//РасчетПоказателяРетробонусовФакт
//по заявке 47185
Функция РасчетПоказателяРетробонусовФакт(Контрагент,Бонус = неопределено ,НачПериод,КонПериод,ТоварныеКатегори = неопределено ,ТоварныеГруппы = неопределено ,Проекты = неопределено )Экспорт
	
	Количество = 0 ;
		
	Если Бонус <> неопределено тогда 
		ТоварныеКатегори = Новый СписокЗначений;
		ТоварныеГруппы = Новый СписокЗначений;
		Проекты = Новый СписокЗначений;
		
		Если Бонус.ПереченьПоПлануПродаж.Количество() > 0 Тогда
			Для каждого СтрокаБазыБонуса Из Бонус.ПереченьПоПлануПродаж Цикл
				
				Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
					ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
					ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
					Проекты.Добавить(СтрокаБазыБонуса.Проект);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Для каждого СтрокаБазыБонуса Из Бонус.ПереченьПоОбъему Цикл
				
				Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
					ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
					ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
					Проекты.Добавить(СтрокаБазыБонуса.Проект);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.КоличествоОборот * ЕдиницыИзмерения.Вес / ЕдиницыИзмерения.Коэффициент), 0) КАК ВесБрутто,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот - ПродажиОбороты.НДСОборот), 0) КАК СтоимостьБезНДС,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК СтоимостьСНДС,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.КоличествоОборот * ЕдиницыИзмерения.ПРГ_Нетто / ЕдиницыИзмерения.Коэффициент), 0) КАК ВесНетто,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьБезСкидокОборот), 0) КАК БазоваяВыручкаСНДС,
		|	ВЫБОР
		|		КОГДА СУММА(ПродажиОбороты.СтоимостьОборот) - СУММА(ПродажиОбороты.НДСОборот) <> 0
		|			ТОГДА СУММА(ПродажиОбороты.СтоимостьБезСкидокОборот) / (100 + СУММА(ПродажиОбороты.СтоимостьОборот) / (СУММА(ПродажиОбороты.СтоимостьОборот) - СУММА(ПродажиОбороты.НДСОборот)) * 100 - 100) * 100
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК БазоваяВыручкаБезНДС,
		|	ВЫБОР
		|		КОГДА СУММА(ПродажиОбороты.СтоимостьОборот) - СУММА(ПродажиОбороты.НДСОборот) <> 0
		|			ТОГДА ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот) / (СУММА(ПродажиОбороты.СтоимостьОборот) - СУММА(ПродажиОбороты.НДСОборот)) * 100 - 100, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасчетнаяСтавкаНДС
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			&НачПериода,
		|			&КонПериода,
		|			,
		|			Контрагент = &Контрагент
		|				И (Номенклатура.Проект В (&Проект)
		|					ИЛИ Номенклатура.НСИ_ТоварнаяКатегория В (&ТоварнаяКатегория)
		|					ИЛИ Номенклатура.НСИ_Брендообъем В (&ЦеноваяГруппа))) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ПродажиОбороты.Номенклатура.ЕдиницаИзмеренияМест = ЕдиницыИзмерения.Ссылка";

		
		
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("КонПериода",  КонецДня(КонПериод));
	Запрос.УстановитьПараметр("НачПериода", НачПериод);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварныеКатегори);
	Запрос.УстановитьПараметр("Проект", Проекты);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", ТоварныеГруппы);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Если Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.ВесНетто Тогда
			Возврат	ВыборкаДетальныеЗаписи.ВесНетто;
		ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.ВесБрутто Тогда
			Возврат	ВыборкаДетальныеЗаписи.ВесБрутто;	
		ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.СуммаБезНДС Тогда
			Возврат	ВыборкаДетальныеЗаписи.БазоваяВыручкаБезНДС;
		ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.СуммаСНДС Тогда
			Возврат	ВыборкаДетальныеЗаписи.БазоваяВыручкаСНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;

КонецФункции

//РасчетПоказателяРетробонусовФакт
//по заявке 47185
Функция РасчетПоказателяРетробонусовФактОбратныхПродаж(Контрагент,Бонус = неопределено ,НачПериод,КонПериод,ТоварныеКатегори = неопределено ,ТоварныеГруппы = неопределено ,Проекты = неопределено )Экспорт
	
	Количество = 0 ;
		
	Если Бонус <> неопределено тогда 
		ТоварныеКатегори = Новый СписокЗначений;
		ТоварныеГруппы = Новый СписокЗначений;
		Проекты = Новый СписокЗначений;
		
		Если Бонус.ПереченьПоПлануПродаж.Количество() > 0 Тогда
			Для каждого СтрокаБазыБонуса Из Бонус.ПереченьПоПлануПродаж Цикл
				
				Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
					ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
					ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
					Проекты.Добавить(СтрокаБазыБонуса.Проект);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Для каждого СтрокаБазыБонуса Из Бонус.ПереченьПоОбъему Цикл
				
				Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
					ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
					ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
				ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
					Проекты.Добавить(СтрокаБазыБонуса.Проект);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ЗакупкиОбороты.КоличествоОборот * ЕдиницыИзмерения.Вес / ЕдиницыИзмерения.Коэффициент), 0) КАК ВесБрутто,
		|	ЕСТЬNULL(СУММА(ЗакупкиОбороты.СтоимостьОборот - ЗакупкиОбороты.СтоимостьОборот / 110 * 10), 0) КАК БазоваяВыручкаБезНДС,
		|	ЕСТЬNULL(СУММА(ЗакупкиОбороты.СтоимостьОборот), 0) КАК БазоваяВыручкаСНДС,
		|	ЕСТЬNULL(СУММА(ЗакупкиОбороты.КоличествоОборот * ЕдиницыИзмерения.ПРГ_Нетто / ЕдиницыИзмерения.Коэффициент), 0) КАК ВесНетто,
		|	СУММА(ЗакупкиОбороты.СтоимостьОборот) / (СУММА(ЗакупкиОбороты.СтоимостьОборот) - СУММА(ЗакупкиОбороты.СтоимостьОборот / 110 * 10)) * 100 - 100 КАК РасчетнаяСтавкаНДС
		|ИЗ
		|	РегистрНакопления.Закупки.Обороты(
		|			&НачПериода,
		|			&КонПериода,
		|			,
		|			Контрагент = &Контрагент
		|				И (Номенклатура.Проект В (&Проект)
		|					ИЛИ Номенклатура.НСИ_ТоварнаяКатегория В (&ТоварнаяКатегория)
		|					ИЛИ Номенклатура.НСИ_Брендообъем В (&ЦеноваяГруппа))) КАК ЗакупкиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ЗакупкиОбороты.Номенклатура.ЕдиницаИзмеренияМест = ЕдиницыИзмерения.Ссылка";

		
		
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("КонПериода",  КонецДня(КонПериод));
	Запрос.УстановитьПараметр("НачПериода", НачПериод);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварныеКатегори);
	Запрос.УстановитьПараметр("Проект", Проекты);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", ТоварныеГруппы);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Если Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.ВесНетто Тогда
			Возврат	ВыборкаДетальныеЗаписи.ВесНетто;
		ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.ВесБрутто Тогда
			Возврат	ВыборкаДетальныеЗаписи.ВесБрутто;	
		ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.СуммаБезНДС Тогда
			Возврат	ВыборкаДетальныеЗаписи.БазоваяВыручкаБезНДС;
		ИначеЕсли Бонус.ЕдиницаИзмеренияБазыДляРасчетаПланов = Перечисления.ПРГЕдиницыИзмеренияБазыРасчетаБонусов.СуммаСНДС Тогда
			Возврат	ВыборкаДетальныеЗаписи.БазоваяВыручкаСНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;

КонецФункции

Функция РасчетСуммаПродажФакт(График, Бонус = неопределено , НачПериод,КонПериод,ТоварныеКатегори = неопределено ,ТоварныеГруппы = неопределено ,Проекты = неопределено, Склады = неопределено ,КаналыПродаж = неопределено ,СпособыОтгрузки = неопределено, ВВалюте=Ложь) Экспорт
	
	Сумма = 0;
	
	ЗапросФильтры = Новый Запрос;
	ЗапросФильтры.Текст = 
		"ВЫБРАТЬ
		|	ПКК_ГрафикНачисленияВыплатыБонусовУслуг.ВидРасчБазы,
		|	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.Склад,
		|	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.КаналСбыта,
		|	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.СпособОтгрузки,
		|	ПКК_БонусыПереченьПоОбъему.Проект,
		|	ПКК_БонусыПереченьПоОбъему.ТоварнаяКатегория,
		|	ПКК_БонусыПереченьПоОбъему.Брендообъем
		|ИЗ
		|	РегистрСведений.ПКК_ГрафикНачисленияВыплатыБонусовУслуг КАК ПКК_ГрафикНачисленияВыплатыБонусовУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслуг.Отгрузка КАК ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка
		|		ПО ПКК_ГрафикНачисленияВыплатыБонусовУслуг.УИ = ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.УИ
		|		И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.График = ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПКК_Бонусы.ПереченьПоОбъему КАК ПКК_БонусыПереченьПоОбъему
		|		ПО ПКК_ГрафикНачисленияВыплатыБонусовУслуг.Бонус = ПКК_БонусыПереченьПоОбъему.Ссылка
		|ГДЕ
		|	ПКК_ГрафикНачисленияВыплатыБонусовУслуг.График = &Регистратор
		|	И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.ВидРасчБазы <> &ВидРасчБазы
		|	И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.ТипГрафика <> &ТипГрафика
		|	И (ПКК_ГрафикНачисленияВыплатыБонусовУслуг.НачПериод МЕЖДУ &НачПериод И &КонПериод
		|			ИЛИ ПКК_ГрафикНачисленияВыплатыБонусовУслуг.КонПериод МЕЖДУ &НачПериод И &КонПериод
		|			ИЛИ ПКК_ГрафикНачисленияВыплатыБонусовУслуг.НачПериод >= &НачПериод
		|				И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.КонПериод <= &КонПериод)
		|	И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.Бонус = &Бонус";

	ЗапросФильтры.УстановитьПараметр("ВидРасчБазы", Перечисления.ПКК_ВидРасчетнойБазы.ФиксированнаяСумма);
	ЗапросФильтры.УстановитьПараметр("КонПериод",  КонецДня(КонПериод));
	ЗапросФильтры.УстановитьПараметр("НачПериод", НачПериод);
	ЗапросФильтры.УстановитьПараметр("Регистратор", График);
	ЗапросФильтры.УстановитьПараметр("Бонус", Бонус);
	ЗапросФильтры.УстановитьПараметр("ТипГрафика", Перечисления.ПКК_ТипГрафика.Выплата);

	РезультатФильтры = ЗапросФильтры.Выполнить();
	ТаблицаФильтры = РезультатФильтры.Выгрузить();
	
	Если Бонус <> неопределено тогда  //Получаем Сумму без фильтра по бонусу
		ТоварныеКатегори = Новый СписокЗначений;
		ТоварныеГруппы = Новый СписокЗначений;
		Проекты = Новый СписокЗначений;
		Для каждого СтрокаБазыБонуса Из ТаблицаФильтры Цикл
		
			Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
				ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
			ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
				ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
			ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
				Проекты.Добавить(СтрокаБазыБонуса.Проект);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;

	Склады = Новый СписокЗначений;
	КаналыПродаж = Новый СписокЗначений;
	СпособыОтгрузки = Новый СписокЗначений;
	Для каждого СтрокаБазыБонуса Из ТаблицаФильтры Цикл
	
		Если ЗначениеЗаполнено(СтрокаБазыБонуса.Склад) Тогда
			Склады.Добавить(СтрокаБазыБонуса.Склад);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаБазыБонуса.КаналСбыта) Тогда
			КаналыПродаж.Добавить(СтрокаБазыБонуса.КаналСбыта);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаБазыБонуса.СпособОтгрузки) Тогда
			СпособыОтгрузки.Добавить(СтрокаБазыБонуса.СпособОтгрузки);
		КонецЕсли;
	
	КонецЦикла;
	
	
	Если Склады.Количество()> 0 тогда
		ФильтрСклады = "	И ДокументПродажи.Склад В (&Склады) ";
	Иначе
        ФильтрСклады = "";
	КонецЕсли;
	
	Если КаналыПродаж.Количество()> 0 тогда
		ФильтрКаналыПродаж = "	И ПРГАдресПоставки.НСИ_КаналПродаж В (&КаналыПродаж)";
	Иначе
        ФильтрКаналыПродаж = "";
	КонецЕсли;
	
	Если СпособыОтгрузки.Количество()> 0 тогда
		ФильтрСпособыОтгрузки = "	И ЗаказПокупателя.КП_УсловиеПоставки В (&СпособыОтгрузки) ";
	Иначе
        ФильтрСпособыОтгрузки = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК СтоимостьСНДС,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот - ПродажиОбороты.НДСОборот), 0) КАК Стоимость
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			&НачПериода,
		|			&КонПериода,
		|			,
		|			Контрагент = &Контрагент
		|				И (Номенклатура.Проект В (&Проект)
		|				ИЛИ Номенклатура.НСИ_ТоварнаяКатегория В (&ТоварнаяКатегория)
		|				ИЛИ Номенклатура.НСИ_Брендообъем В (&ЦеноваяГруппа))
		| " + ФильтрСклады + ФильтрКаналыПродаж + ФильтрСпособыОтгрузки + " 
        |) КАК ПродажиОбороты";
		
	Если ВВалюте Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПродажиОбороты.СтоимостьОборот","ПродажиОбороты.ПРГВалютнаяСтоимостьОборот");	
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПродажиОбороты.НДСОборот","ПродажиОбороты.ПРГНДСВВалютеОборот");
		
	КонецЕсли; 	
		
	Запрос.УстановитьПараметр("Контрагент", График.Контрагент);
	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериод));
	Запрос.УстановитьПараметр("НачПериода", началоДня(НачПериод));
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварныеКатегори);
	Запрос.УстановитьПараметр("Проект", Проекты);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", ТоварныеГруппы);
	Запрос.УстановитьПараметр("Склады", Склады);
	Запрос.УстановитьПараметр("КаналыПродаж", КаналыПродаж);
	Запрос.УстановитьПараметр("СпособыОтгрузки", СпособыОтгрузки);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если График.ВидРасчБазы = Перечисления.ПКК_ВидРасчетнойБазы.ПродажиСНДС тогда
			Сумма = ВыборкаДетальныеЗаписи.СтоимостьСНДС;
		Иначе
			Сумма = ВыборкаДетальныеЗаписи.Стоимость;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;

КонецФункции

Функция РасчетСуммаОбратныхПродажФакт(График, Бонус = неопределено , НачПериод,КонПериод,ТоварныеКатегори = неопределено ,ТоварныеГруппы = неопределено ,Проекты = неопределено, Склады = неопределено ,КаналыПродаж = неопределено ,СпособыОтгрузки = неопределено, ВВалюте=Ложь) Экспорт
	
	Сумма = 0;
	
	ЗапросФильтры = Новый Запрос;
	ЗапросФильтры.Текст = 
		"ВЫБРАТЬ
		|	ПКК_ГрафикНачисленияВыплатыБонусовУслуг.ВидРасчБазы,
		|	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.Склад,
		|	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.КаналСбыта,
		|	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.СпособОтгрузки,
		|	ПКК_БонусыПереченьПоОбъему.Проект,
		|	ПКК_БонусыПереченьПоОбъему.ТоварнаяКатегория,
		|	ПКК_БонусыПереченьПоОбъему.Брендообъем
		|ИЗ
		|	РегистрСведений.ПКК_ГрафикНачисленияВыплатыБонусовУслуг КАК ПКК_ГрафикНачисленияВыплатыБонусовУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслуг.Отгрузка КАК ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка
		|		ПО ПКК_ГрафикНачисленияВыплатыБонусовУслуг.УИ = ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.УИ
		|		И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.График = ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугОтгрузка.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПКК_Бонусы.ПереченьПоОбъему КАК ПКК_БонусыПереченьПоОбъему
		|		ПО ПКК_ГрафикНачисленияВыплатыБонусовУслуг.Бонус = ПКК_БонусыПереченьПоОбъему.Ссылка
		|ГДЕ
		|	ПКК_ГрафикНачисленияВыплатыБонусовУслуг.График = &Регистратор
		|	И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.ВидРасчБазы <> &ВидРасчБазы
		|	И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.ТипГрафика <> &ТипГрафика
		|	И (ПКК_ГрафикНачисленияВыплатыБонусовУслуг.НачПериод МЕЖДУ &НачПериод И &КонПериод
		|			ИЛИ ПКК_ГрафикНачисленияВыплатыБонусовУслуг.КонПериод МЕЖДУ &НачПериод И &КонПериод
		|			ИЛИ ПКК_ГрафикНачисленияВыплатыБонусовУслуг.НачПериод >= &НачПериод
		|				И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.КонПериод <= &КонПериод)
		|	И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.Бонус = &Бонус";

	ЗапросФильтры.УстановитьПараметр("ВидРасчБазы", Перечисления.ПКК_ВидРасчетнойБазы.ФиксированнаяСумма);
	ЗапросФильтры.УстановитьПараметр("КонПериод",  КонецДня(КонПериод));
	ЗапросФильтры.УстановитьПараметр("НачПериод", НачПериод);
	ЗапросФильтры.УстановитьПараметр("Регистратор", График);
	ЗапросФильтры.УстановитьПараметр("Бонус", Бонус);
	ЗапросФильтры.УстановитьПараметр("ТипГрафика", Перечисления.ПКК_ТипГрафика.Выплата);

	РезультатФильтры = ЗапросФильтры.Выполнить();
	ТаблицаФильтры = РезультатФильтры.Выгрузить();
	
	Если Бонус <> неопределено тогда  //Получаем Сумму без фильтра по бонусу
		ТоварныеКатегори = Новый СписокЗначений;
		ТоварныеГруппы = Новый СписокЗначений;
		Проекты = Новый СписокЗначений;
		Для каждого СтрокаБазыБонуса Из ТаблицаФильтры Цикл
		
			Если ЗначениеЗаполнено(СтрокаБазыБонуса.Брендообъем) Тогда
				ТоварныеГруппы.Добавить(СтрокаБазыБонуса.Брендообъем);
			ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.ТоварнаяКатегория) Тогда
				ТоварныеКатегори.Добавить(СтрокаБазыБонуса.ТоварнаяКатегория);
			ИначеЕсли ЗначениеЗаполнено(СтрокаБазыБонуса.Проект) Тогда
				Проекты.Добавить(СтрокаБазыБонуса.Проект);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;

	Склады = Новый СписокЗначений;
	КаналыПродаж = Новый СписокЗначений;
	СпособыОтгрузки = Новый СписокЗначений;
	Для каждого СтрокаБазыБонуса Из ТаблицаФильтры Цикл
	
		Если ЗначениеЗаполнено(СтрокаБазыБонуса.Склад) Тогда
			Склады.Добавить(СтрокаБазыБонуса.Склад);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаБазыБонуса.КаналСбыта) Тогда
			КаналыПродаж.Добавить(СтрокаБазыБонуса.КаналСбыта);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаБазыБонуса.СпособОтгрузки) Тогда
			СпособыОтгрузки.Добавить(СтрокаБазыБонуса.СпособОтгрузки);
		КонецЕсли;
	
	КонецЦикла;
	
	//
	//Если Склады.Количество()> 0 тогда
	//	ФильтрСклады = "	И ДокументПродажи.Склад В (&Склады) ";
	//Иначе
	//	ФильтрСклады = "";
	//КонецЕсли;
	//
	//Если КаналыПродаж.Количество()> 0 тогда
	//	ФильтрКаналыПродаж = "	И ПРГАдресПоставки.НСИ_КаналПродаж В (&КаналыПродаж)";
	//Иначе
	//	ФильтрКаналыПродаж = "";
	//КонецЕсли;
	//
	//Если СпособыОтгрузки.Количество()> 0 тогда
	//	ФильтрСпособыОтгрузки = "	И ЗаказПокупателя.КП_УсловиеПоставки В (&СпособыОтгрузки) ";
	//Иначе
	//	ФильтрСпособыОтгрузки = "";
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ЗакупкиОбороты.СтоимостьОборот - ЗакупкиОбороты.СтоимостьОборот / 110 * 10), 0) КАК ВыручкаГРОССБезНДС,
		|	ЕСТЬNULL(СУММА(ЗакупкиОбороты.СтоимостьОборот), 0) КАК ВыручкаГРОСССНДС,
		|	ЕСТЬNULL(СУММА((ЗакупкиОбороты.СтоимостьОборот - ЗакупкиОбороты.СтоимостьОборот / 110 * 10) / ЗакупкиОбороты.Регистратор.КурсВзаиморасчетов), 0) КАК ВыручкаГРОССБезНДСВВалюте,
		|	ЕСТЬNULL(СУММА(ЗакупкиОбороты.СтоимостьОборот / ЗакупкиОбороты.Регистратор.КурсВзаиморасчетов), 0) КАК ВыручкаГРОСССНДСВВалюте
		|ИЗ
		|	РегистрНакопления.Закупки.Обороты(
		|			&НачПериода,
		|			&КонПериода,
		|			Регистратор,
		|			Контрагент = &Контрагент
		|				И (Номенклатура.Проект В (&Проект)
		|					ИЛИ Номенклатура.НСИ_ТоварнаяКатегория В (&ТоварнаяКатегория)
		|					ИЛИ Номенклатура.НСИ_Брендообъем В (&ЦеноваяГруппа))) КАК ЗакупкиОбороты";

	Запрос.УстановитьПараметр("Контрагент", График.Контрагент);
	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериод));
	Запрос.УстановитьПараметр("НачПериода", началоДня(НачПериод));
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварныеКатегори);
	Запрос.УстановитьПараметр("Проект", Проекты);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", ТоварныеГруппы);
	//Запрос.УстановитьПараметр("Склады", Склады);
	//Запрос.УстановитьПараметр("КаналыПродаж", КаналыПродаж);
	//Запрос.УстановитьПараметр("СпособыОтгрузки", СпособыОтгрузки);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВВалюте Тогда
			
			Если График.ВидРасчБазы = Перечисления.ПКК_ВидРасчетнойБазы.ПродажиСНДС тогда
				Сумма = ВыборкаДетальныеЗаписи.ВыручкаГРОСССНДСВВалюте;
			Иначе
				Сумма = ВыборкаДетальныеЗаписи.ВыручкаГРОССБезНДСВВалюте;
			КонецЕсли;
			
		Иначе
			
			Если График.ВидРасчБазы = Перечисления.ПКК_ВидРасчетнойБазы.ПродажиСНДС тогда
				Сумма = ВыборкаДетальныеЗаписи.ВыручкаГРОСССНДС;
			Иначе
				Сумма = ВыборкаДетальныеЗаписи.ВыручкаГРОССБезНДС;
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Сумма;

КонецФункции

Функция РасчетСуммаПродажПлан(Контрагент,НачПериод,КонПериод) Экспорт //,Договор
	
	Сумма = 0 ;
	ТоварныеКатегори = Новый СписокЗначений;
	ТоварныеГруппы = Новый СписокЗначений;
	Проекты = Новый СписокЗначений;
	
	//Для каждого Строка Из Договор.НСИ_ФормаДоговора.Продукция Цикл
	//
	//	Если ЗначениеЗаполнено(Строка.Брендообъем) Тогда
	//		ТоварныеГруппы.Добавить(Строка.Брендообъем);
	//	ИначеЕсли ЗначениеЗаполнено(Строка.ТоварнаяКатегория) Тогда
	//		ТоварныеКатегори.Добавить(Строка.ТоварнаяКатегория);
	//	ИначеЕсли ЗначениеЗаполнено(Строка.Проект) Тогда
	//		Проекты.Добавить(Строка.Проект);
	//	КонецЕсли;
	//
	//КонецЦикла; 
    		
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ПКК_СценарийДляПолученияПлановСрезПоследних.Сценарий
				   |ИЗ
				   |	РегистрСведений.ПКК_СценарийДляПолученияПланов.СрезПоследних(&КонПериод, ) КАК ПКК_СценарийДляПолученияПлановСрезПоследних"; 
				   
	Запрос.УстановитьПараметр("КонПериод",  КонецДня(КонПериод));
	
	Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Сценарий = Результат.Сценарий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		ОбщегоНазначения.Сообщение("Не задан сценарий планирования для получения данных по плану продаж");
	КонецЕсли;
	
	//{10.04.2015 Островерхий заявка №б/н, письмо Чевычеловой от 09.04.2015 11:21 
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЕСТЬNULL(СУММА(ПланыПродажОбороты.СтоимостьОборот + ПланыПродажОбороты.НДСОборот),0) КАК СтоимостьОборот
	//	|ИЗ
	//	|	РегистрНакопления.ПланыПродаж.Обороты(
	//	|			&НачПериод,
	//	|			&КонПериод,
	//	|			,
	//	|			Контрагент = &Контрагент
	//	|				И Сценарий = &Сценарий) КАК ПланыПродажОбороты";
		
		//|				И (ППП_ТоварнаяКатегория В (&ТоварнаяКатегория)
		//|					ИЛИ ППП_Брендообъем В (&ТоварныеГруппы)
		//|					ИЛИ ППП_ТоварнаяКатегория.Проект В (&Проекты))) КАК ПланыПродажОбороты";

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ПланыПродажОбороты.ППП_СуммаГроссОборот <> 0
	               |					ТОГДА ПланыПродажОбороты.ППП_СуммаГроссОборот
	               |				ИНАЧЕ ПланыПродажОбороты.СтоимостьОборот
	               |			КОНЕЦ + ПланыПродажОбороты.НДСОборот), 0) КАК СтоимостьОборот
	               |ИЗ
	               |	РегистрНакопления.ПланыПродаж.Обороты(
	               |			&НачПериод,
	               |			&КонПериод,
	               |			,
	               |			Контрагент = &Контрагент
	               |				И Сценарий = &Сценарий) КАК ПланыПродажОбороты";
	//10.04.2015 Островерхий}			   
		
	Запрос.УстановитьПараметр("КонПериод",  КонецДня(КонПериод));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачПериод", НачПериод);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварныеКатегори);
	Запрос.УстановитьПараметр("ТоварныеГруппы", ТоварныеГруппы);
	Запрос.УстановитьПараметр("Проекты", Проекты);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сумма = Сумма + ВыборкаДетальныеЗаписи.СтоимостьОборот;
	КонецЦикла;
	
	Возврат Сумма;

КонецФункции

//начало изменений Ожиганов 16.04.2015 Транзитные дни в АП	 
Функция ПолучитьОстрочкуВДнях(ДоговорКонтрагента,АдресПоставки)  Экспорт 
	 Результат = 0;
	 Если ЗначениеЗаполнено(АдресПоставки) и ТипЗнч(АдресПоставки) = Тип("СправочникСсылка.АдресаПоставки") Тогда
		 Результат = АдресПоставки.ТранзитныеДни;
		 Если Результат =  0  Тогда
			 Результат = АдресПоставки.ПКК_ДопустимоеЧислоДнейЗадолженности;
			 Если Результат > 0 Тогда
				 возврат Результат;
			 КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Результат = Результат  + ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
	КонецЕсли; 
	
	возврат Результат;
КонецФункции	

Функция ПолучитьОстрочкуВСек(ДоговорКонтрагента,АдресПоставки)  Экспорт 
	 возврат ПолучитьОстрочкуВДнях(ДоговорКонтрагента,АдресПоставки)*3600*24;  
КонецФункции	
//конец изменений 

