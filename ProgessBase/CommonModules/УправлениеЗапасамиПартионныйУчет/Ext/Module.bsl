// Функция формирует соответствие организации и способа ведения партионного учета по организации.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//   Соответствие – Соответствие организации и способа ведения партионного учета по организации
//
Функция ПодготовитьСоответствиеСпособыВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.ДокументВыпуска.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|	
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> &ВыпускПродукцииПоФиксированнойСтоимости
	|";
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СпособВеденияПартионногоУчетаПоОрганизации = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(
			Выборка.Организация,
			СтруктураШапкиДокумента.мНачДата
			);
			Соответствие.Вставить(Выборка.Организация, СпособВеденияПартионногоУчетаПоОрганизации);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Соответствие;
	
КонецФункции // ПодготовитьСоответствиеСпособыВеденияПартионногоУчетаПоОрганизациям()

Функция КомиссионныйТовар(СчетУчета) Экспорт
	
	Комиссионный = Ложь;
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Комиссионный = СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);
		
	ИначеЕсли ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.Налоговый") Тогда
		Комиссионный = СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ТоварыПринятыеНаКомиссию);
	КонецЕсли; 
	
	Возврат Комиссионный;
	
КонецФункции // КомиссионныйТовар()

// Процедура считывает указанный реквизит объекта по ссылке без чтения всего объекта
//
Функция ПрочитатьРеквизитДокумента(ИмяРеквизита, ДокументСсылка)
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
		
		Если МетаданныеДокумента <> Неопределено Тогда
			
			Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита)<>Неопределено Тогда
				
				Запрос = Новый Запрос("Выбрать "+ИмяРеквизита+" Из Документ."+МетаданныеДокумента.Имя+" ГДЕ Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					Возврат Выборка[ИмяРеквизита];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям(Упр = Истина, Бух = Истина, Нал = Истина, Меж = Истина)
	СтруктраУчетнойПолитики = Новый Структура();
	
	Если Упр Тогда
		СтруктраУчетнойПолитики.Вставить("Упр",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Упр.Вставить("СпособОценкиМПЗ","УчетнаяПолитика.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Упр.Вставить("СписыватьПартииПриПроведенииДокументов","Константы.СписыватьПартииПриПроведенииДокументов");
		СтруктраУчетнойПолитики.Упр.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладам");
		СтруктраУчетнойПолитики.Упр.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Упр.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство");
		
		//Параметры специфичные для упр. учета
		СтруктраУчетнойПолитики.Упр.Вставить("СпособВеденияПартионногоУчетаПоОрганизации","НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации");
		СтруктраУчетнойПолитики.Упр.Вставить("НеВключатьНДСВСтоимостьПартий","УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий");
	КонецЕсли;
	
	Если Бух ИЛИ Нал Тогда
		//Для Бух учета
		СтруктраУчетнойПолитики.Вставить("Бух",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Бух.Вставить("СпособОценкиМПЗ",							"УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Бух.Вставить("СписыватьПартииПриПроведенииДокументов",	"Константы.СписыватьПартииПриПроведенииДокументовБух");
		СтруктраУчетнойПолитики.Бух.Вставить("ВестиПартионныйУчетПоСкладам",			"Константы.ВестиПартионныйУчетПоСкладамРегл");         
		СтруктраУчетнойПолитики.Бух.Вставить("СтратегияСписанияПоСтатусам",				"Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Бух.Вставить("УчетЗатратПоЗаказамНаПроизводство",		"УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");
		СтруктраУчетнойПолитики.Бух.Вставить("СистемаНалогообложения",					"УчетнаяПолитикаОрганизаций.СистемаНалогообложения");
		
		//Параметры специфичные для бух. учета
		СтруктраУчетнойПолитики.Бух.Вставить("МоментОпределенияНалоговойБазыНДС","УчетнаяПолитикаОрганизаций.МоментОпределенияНалоговойБазыНДС");
		
		//Для Нал учета
		СтруктраУчетнойПолитики.Вставить("Нал",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Нал.Вставить("СпособОценкиМПЗ","УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Нал.Вставить("СписыватьПартииПриПроведенииДокументов","Константы.СписыватьПартииПриПроведенииДокументовБух");
		СтруктраУчетнойПолитики.Нал.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладамРегл");
		СтруктраУчетнойПолитики.Нал.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Нал.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");
		
		//Параметры специфичные для нал. учета
		СтруктраУчетнойПолитики.Нал.Вставить("СложныйУчетНДС","УчетнаяПолитикаОрганизаций.СложныйУчетНДС");
		СтруктраУчетнойПолитики.Нал.Вставить("РозничнаяТорговляОблагаетсяЕНВД","УчетнаяПолитикаОрганизаций.РозничнаяТорговляОблагаетсяЕНВД");
		СтруктраУчетнойПолитики.Нал.Вставить("ОбъектНалогообложенияУСН","УчетнаяПолитикаОрганизаций.ОбъектНалогообложенияУСН");
		//БП12 Контрагент = "Прогресс"
		СтруктраУчетнойПолитики.Бух.Вставить("Контрагент_Прогресс","УчетнаяПолитикаОрганизаций.ПРГ_Контрагент");
		СтруктраУчетнойПолитики.Бух.Вставить("Договор_Прогресс","УчетнаяПолитикаОрганизаций.ПРГ_Договор");
		
	КонецЕсли;
	
	Если Меж Тогда
		СтруктраУчетнойПолитики.Вставить("Меж",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Меж.Вставить("СпособОценкиМПЗ","УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Меж.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладамРегл");
		СтруктраУчетнойПолитики.Меж.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Меж.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");
	КонецЕсли;
	
	Возврат СтруктраУчетнойПолитики;
КонецФункции	

// Возвращает таблицу значений с данными учетной политики для всех организаций
// Данные берутся на заданный момент времени 
//
// Параметры:
//	Момент времени, дата
//
// Возварщаемое значение: 
//	Таблица значений
//
Функция ПолучитьУчетнуюПолитику(МоментКон, Упр = Истина, Бух = Истина, Нал = Истина, Меж = Истина, Организация = Неопределено) Экспорт
	
	Если НЕ (Упр ИЛИ Бух ИЛИ Нал ИЛИ Меж) Тогда
		Возврат Новый Структура();
	КонецЕсли;	
	
	СтруктраУчетнойПолитики = ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям(Упр, Бух, Нал, Меж);
	
	ТекстЗапроса = "ВЫБРАТЬ";
	ТекстСписокТаблиц = "
	|ИЗ";
	Для Каждого ВидУчета Из СтруктраУчетнойПолитики Цикл
		Для Каждого ПараметрУчетнойПолитики Из СтруктраУчетнойПолитики[ВидУчета.Ключ] Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	" + ПараметрУчетнойПолитики.Значение + " КАК " + ПараметрУчетнойПолитики.Ключ + "_" + ВидУчета.Ключ + ",";
			
			ИмяТаблицы = Лев(ПараметрУчетнойПолитики.Значение,Найти(ПараметрУчетнойПолитики.Значение,".")-1);
			
			Если Найти(ТекстСписокТаблиц,"КАК " + ИмяТаблицы) = 0 Тогда
				//Такой таблицы еще нет
				Если ИмяТаблицы = "Константы" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	Константы КАК Константы,";
				ИначеЕсли ИмяТаблицы = "УчетнаяПолитика" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаСреза,) КАК УчетнаяПолитика,";	
				ИначеЕсли ИмяТаблицы = "УчетнаяПолитикаОрганизаций" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ДатаСреза,Организация = &Организация) КАК УчетнаяПолитикаОрганизаций,";	
				ИначеЕсли ИмяТаблицы = "НастройкаСпособовВеденияУправленческогоПартионногоУчета" Тогда
					Если ЗначениеЗаполнено(Организация) Тогда
						//Если способ ведения управленческого партионного учета не задан, то используется способ "ПоКомпанииВЦелом"
						ТекстСписокТаблиц = ТекстСписокТаблиц + "
						|(ВЫБРАТЬ ПЕРВЫЕ 1
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.Организация,
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации
						|ИЗ (
						|ВЫБРАТЬ
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.Организация,
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации
						|ИЗ
						|	РегистрСведений.НастройкаСпособовВеденияУправленческогоПартионногоУчета.СрезПоследних(&ДатаСреза,Организация = &Организация) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета
						|ОБЪЕДИНИТЬ ВСЕ
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
						|	ЗНАЧЕНИЕ(Перечисление.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом)) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета
						|УПОРЯДОЧИТЬ ПО Организация УБЫВ) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета,";	
					Иначе
						//Если организация не заполнена, то считаем что учет ведется по компании в целом
						ТекстСписокТаблиц = ТекстСписокТаблиц + "
						|	(ВЫБРАТЬ ЗНАЧЕНИЕ(Перечисление.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом) КАК СпособВеденияПартионногоУчетаПоОрганизации) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета,";	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;
	КонецЦИкла;
	
	//Удалим последнюю запятую
	ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
	ТекстСписокТаблиц = Лев(ТекстСписокТаблиц,СтрДлина(ТекстСписокТаблиц)-1);
	
	Запрос = Новый Запрос(ТекстЗапроса + ТекстСписокТаблиц); 
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Если ТипЗнч(МоментКон) = Тип("Дата") Тогда
		Запрос.УстановитьПараметр("ДатаСреза", МоментКон);
	ИначеЕсли ТипЗнч(МоментКон) = Тип("МоментВремени") Тогда
		Запрос.УстановитьПараметр("ДатаСреза", МоментКон.Дата);
	ИначеЕсли ТипЗнч(МоментКон) = Тип("Граница") Тогда
		Если ТипЗнч(МоментКон.Значение) = Тип("Дата") Тогда
			Запрос.УстановитьПараметр("ДатаСреза", МоментКон.Значение);
		ИначеЕсли ТипЗнч(МоментКон.Значение) = Тип("МоментВремени") Тогда
			Запрос.УстановитьПараметр("ДатаСреза", МоментКон.Значение.Дата);
		Иначе
			Запрос.УстановитьПараметр("ДатаСреза", '00010101');
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ДатаСреза", '00010101');
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура();
	Для Каждого ВидУчета Из СтруктраУчетнойПолитики Цикл
		Результат.Вставить(ВидУчета.Ключ, Новый Структура());
		Для Каждого ПараметрУчетнойПолитики Из СтруктраУчетнойПолитики[ВидУчета.Ключ] Цикл
			Результат[ВидУчета.Ключ].Вставить(ПараметрУчетнойПолитики.Ключ, Выборка[ПараметрУчетнойПолитики.Ключ + "_" + ВидУчета.Ключ]);
		КонецЦикла;	
	КонецЦикла;		
	
	Возврат Результат;
	
КонецФункции // ПолучитьУчетнуюПолитику()

// Читает заданные в структуре реквизиты объекта, переданного ссылкой
//
Процедура ПолучитьРеквизитыОбъекта(ДокументСсылка, СтруктураРеквизитов) Экспорт
	
	ТипДок = ТипЗнч(ДокументСсылка);
	МетаДок = Метаданные.НайтиПоТипу(ТипДок);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДок) тогда
		НазваниеТаблицы = "Справочник."+МетаДок.Имя;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипДок) тогда
		НазваниеТаблицы = "Документ."+МетаДок.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если МетаДок <> Неопределено Тогда
		
		СтрРеквизиты = "";
		Для Каждого Элемент Из СтруктураРеквизитов Цикл
			Если Элемент.Значение <> Неопределено Тогда
				Если МетаДок.Реквизиты.Найти(Элемент.Ключ) <> Неопределено Тогда
					СтрРеквизиты = СтрРеквизиты +", "+Элемент.Ключ;
				КонецЕсли;
			Иначе
				СтрРеквизиты = СтрРеквизиты +", "+Элемент.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	" + Сред(СтрРеквизиты, 2) +"
		|ИЗ
		|	"+НазваниеТаблицы+"
		|
		|ГДЕ
		|	Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает параметр учетной политики для заданной организации по заданному учету
// Перед использованием функции должна быть заполнена таблица параметров учетной политики
//
// Параметры:
//	ИмяПараметра - Строка, имя запрашиваемого параметра учетной политики,
//	Учет         - Может принимать три значения: "Упр", "Бух", "Нал", "Меж". Задает учет
//	СтруктураПараметров - структура, содержащая все общие параметры.
//
// Возвращаемое значение: 
//	Значение учетной политики
//
Функция ПолучитьПараметрУчетнойПолитикиПартионногоУчета(ИмяПараметра, Учет, СтруктураПараметров) Экспорт
	
	УчетнаяПолитика = Неопределено;
	СтрокаУчетнойПолитики = Неопределено;
	ЗначениеПараметраУчетнойПолитики = Неопределено;
	
	Если СтруктураПараметров.Свойство("УчетнаяПолитика",УчетнаяПолитика)
		И ТипЗНЧ(УчетнаяПолитика) = Тип("Структура")
		И УчетнаяПолитика.Свойство(Учет, СтрокаУчетнойПолитики)
		И СтрокаУчетнойПолитики.Свойство(ИмяПараметра,ЗначениеПараметраУчетнойПолитики) Тогда
		Возврат ЗначениеПараметраУчетнойПолитики;
	Иначе	
		//Ошибка может возникать только если в функцию передана неверно заполненная структура, содержащая учетную политику
		ОбщегоНазначения.СообщитьОбОшибке("Не задан параметр учетной политики """ +ИмяПараметра+ """ "+Учет+" учета"+"!");
		СтруктураПараметров.Вставить("Отказ", Истина);
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции // ПолучитьПараметрУчетнойПолитикиПартионногоУчета()

// Объект Описание типов с одним типом Подразделения
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Объект Описание типов с типом Подразделения
//
Функция ПолучитьОписаниеТиповПодразделения()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

// Объект Описание типов с типами - заказами
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Объект Описание типов с типом ЗаказПокупателя
//
Функция ПолучитьОписаниеТиповЗаказ()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции // ПолучитьОписаниеТиповЗаказ()

// Преобразует код операции в направление списания
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации, СтатьяЗатрат = Неопределено, СчетЗатрат = Неопределено, ИмяПланСчетов = "Хозрасчетный") Экспорт
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Если КодОперации=КодыОпераций.Реализация 
		ИЛИ КодОперации=КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации=КодыОпераций.РеализацияРозница
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателя 
		//>>0103146 Степанов б/н
		ИЛИ КодОперации=КодыОпераций.ПРГ_СторноВозвратовПокупателейМСФО
		//<<
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателяТекущийМесяц Тогда
		
		НаправлениеСписания = "СебестоимостьПродаж";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеПартийВПроизводствоОперативно Тогда
		
		НаправлениеСписания = "ПроизводственныеРасходы";
		
	ИначеЕсли КодОперации=КодыОпераций.ПередачаВПереработку
		ИЛИ КодОперации=КодыОпераций.ПередачаНаКомиссию Тогда
		
		НаправлениеСписания = "Переданные";
		
	ИначеЕсли КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации   = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации   = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации   = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации   = КодыОпераций.ВозвратОтПереработчика 
		ИЛИ КодОперации   = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации   = КодыОпераций.Комплектация 
		ИЛИ КодОперации   = КодыОпераций.ВключениеАктиваВСоставМПЗ 
		
		Тогда
		
		НаправлениеСписания = "НаСкладах";
		// is ЯннуровВФ нач 20141202
		Если НРег(ИмяПланСчетов) = "международный" Тогда 
			Если КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
			 И СчетЗатрат = ПланыСчетов.Международный.МатериалыПереданныеВПереработку Тогда 
				НаправлениеСписания = "Переданные";
			КонецЕсли;
		КонецЕсли;
		// is ЯннуровВФ нач 20141202
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы
		ИЛИ КодОперации=КодыОпераций.ПередачаОборудованияВМонтаж Тогда
		
		НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаЗатраты 
		ИЛИ КодОперации=КодыОпераций.СписаниеПартийПереданныхВПроизводство Тогда
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			
			ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
				
				НаправлениеСписания = "ОбщехозяйственныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				
				НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
				
				НаправлениеСписания = "ОбщепроизводственныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
				НаправлениеСписания = "ПроизводственныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы Тогда
				
				НаправлениеСписания = "КоммерческиеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения Тогда
				
				НаправлениеСписания = "ИздержкиОбращения";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				
				НаправлениеСписания = "Затраты";
				
			Иначе
				
				НаправлениеСписания = "";
				
			КонецЕсли;
		Иначе
			
			НаправлениеСписания = "";
			
		КонецЕсли;
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаСтроительствоОбъектовОС
		ИЛИ КодОперации=КодыОпераций.ПринятиеКУчетуОС Тогда
		
		НаправлениеСписания = "СтоимостьОСПриПринятииКУчету";
		
	ИначеЕсли КодОперации=КодыОпераций.ПринятиеКУчетуОССоСписаниемНаЗатраты Тогда
		
		НаправлениеСписания = "ЗатратыПриПринятииКУчету";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаБрак Тогда
		
		НаправлениеСписания = "БракВПроизводстве";
		
	ИначеЕсли КодОперации=КодыОпераций.ПередачаМатериаловВЭксплуатацию Тогда
		
		НаправлениеСписания = "ПартииМатериаловВЭксплуатации";
		
	Иначе 
		
		НаправлениеСписания = "";
		
	КонецЕсли;
	
	// Для регламентированного учета направление списания определяется 
	// по счету затрат если он задан
	Если (ЗначениеЗаполнено(СчетЗатрат)) 
		И ((КодОперации = КодыОпераций.СписаниеПартийВПроизводствоОперативно)
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаБрак) 
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы)
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаЗатраты)
		ИЛИ (КодОперации = КодыОпераций.СписаниеПартийПереданныхВПроизводство)) Тогда
		
		ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат, ИмяПланСчетов);
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы Тогда
			
			НаправлениеСписания = "ОбщехозяйственныеРасходы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			
			НаправлениеСписания = "ОбщепроизводственныеРасходы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы Тогда
			
			НаправлениеСписания = "КоммерческиеРасходы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения Тогда
			
			НаправлениеСписания = "ИздержкиОбращения";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			
			НаправлениеСписания = "БракВПроизводстве";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			
			НаправлениеСписания = "ПроизводственныеРасходы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			
			НаправлениеСписания = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаправлениеСписания;
	
КонецФункции // ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации)

// Возвращает строковое описание регистра-источника для заданного кода операции
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//
// Возвращаемое значение:
//	Источник списания.
//
Функция ПолучитьИсточникПоКодуОперации(КодОперации)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	Если КодОперации = КодыОпераций.Реализация
		ИЛИ КодОперации = КодыОпераций.РеализацияРозница
		ИЛИ КодОперации = КодыОпераций.ПередачаНаКомиссию 
		ИЛИ КодОперации = КодыОпераций.ВозвратПоставщику
		ИЛИ КодОперации = КодыОпераций.Комплектация
		ИЛИ КодОперации = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации = КодыОпераций.ПередачаТарыКонтрагенту
		ИЛИ КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СписаниеНаЗатраты
		ИЛИ КодОперации = КодыОпераций.СписаниеПоИнвентаризации
		ИЛИ КодОперации = КодыОпераций.СписаниеПоОрдеру
		ИЛИ КодОперации = КодыОпераций.ВключениеАктиваВСоставМПЗ 
		
		
		Тогда
		
		Возврат "НаСкладах";
	КонецЕсли;
	
	Если КодОперации = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации = КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации = КодыОпераций.ВозвратОтПереработчика
		ИЛИ КодОперации = КодыОпераций.СписаниеПартийПереданныхВПроизводство
		
		Тогда
		Возврат "Переданные";
	КонецЕсли;
	
	Возврат "НаСкладах"; // По умолчанию
	
КонецФункции // ПолучитьИсточникПоКоду()

// Общая процедура для добавления записей в набор записей с сопутствующими действиями.
// Добавляет строку в таблицу движений, инкрементирует номер последней строки,
// устанавливает признак модифицированности.
//
Функция ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров) Экспорт
	
	Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();
	
	// Увеличим счетчик движений на 1:
	СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра] = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра]+1;
	
	// Устанавливаем флаг модификации
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;
	
	Возврат Движение;
	
КонецФункции

// Создает наборы записей по регистрам управленческого учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейУпр(СтруктураПараметров)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахУпр",    РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеУпр",   РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоУпр", РегистрыНакопления.НезавершенноеПроизводство.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыУпр",                   РегистрыНакопления.Затраты.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПродажиСебестоимость",       РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтроительствоОбъектовОсновныхСредств", РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств", РегистрыНакопления.ЗатратыНаСтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтоимостьОСУпр", РегистрыНакопления.СтоимостьОС.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияОССписанныеНаЗатратыУпр", РегистрыНакопления.ОССписанныеНаЗатраты.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеУпр", РегистрыНакопления.БракВПроизводстве.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииУпр",       РегистрыНакопления.ПартииМатериаловВЭксплуатации.СоздатьНаборЗаписей());
		
		// Учет реализации принятых на комиссию товаров для отчета комитенту
		СтруктураПараметров.Вставить("ДвиженияРеализованныеТовары",            РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей());
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНаборыЗаписейУпр()

// Создает наборы записей по регистрам бухгалтерского и налогового учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейРегл(СтруктураПараметров)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахБух",   РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеБух",  РегистрыНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоБух",РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыБух",                  РегистрыНакопления.ЗатратыБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтоимостьОСБух",              РегистрыНакопления.СтоимостьОСБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияОССписанныеНаЗатратыБух", РегистрыНакопления.ОССписанныеНаЗатратыОрганизаций.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеБух", РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииБух",    РегистрыНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.СоздатьНаборЗаписей());
		//БП12 ТребованиеНакладная
		СтруктураПараметров.Вставить("ДвиженияПРГ_POS_материалы",    РегистрыНакопления.ПРГ_POS_материалы.СоздатьНаборЗаписей());
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		// Учет НДС
		СтруктураПараметров.Вставить("ДвиженияНДСПартииТоваров",            РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСНезавершенноеПроизводство",РегистрыНакопления.НДСНезавершенноеПроизводство.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСКосвенныеРасходы",         РегистрыНакопления.НДСКосвенныеРасходы.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСПредъявленный",            РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСВключенныйВСтоимость",     РегистрыНакопления.НДСВключенныйВСтоимость.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСПредъявленныйРеализация0", РегистрыНакопления.НДСПредъявленныйРеализация0.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСНачисленный",				РегистрыНакопления.НДСНачисленный.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСРеализация0",				РегистрыНакопления.НДСРеализация0.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСпоОСиНМА",					РегистрыНакопления.НДСпоОСиНМА.СоздатьНаборЗаписей());
		
		// Проводки
		СтруктураПараметров.Вставить("ДвиженияХозрасчетный",                РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
		
	КонецЕсли;
	
	// При включении НДС в стоимость отражение в налоговом учете должно производиться одновременно с отражением в бухгалтерском учете
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете Или СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахНал", РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеНал",РегистрыНакопления.ПартииТоваровПереданныеНалоговыйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоНал", РегистрыНакопления.НезавершенноеПроизводствоНалоговыйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыНал",                РегистрыНакопления.ЗатратыНалоговыйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтоимостьОСНал",            РегистрыНакопления.СтоимостьОСНалоговыйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеНал", РегистрыНакопления.БракВПроизводствеНалоговыйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииНал",  РегистрыНакопления.ПартииМатериаловВЭксплуатацииНалоговыйУчет.СоздатьНаборЗаписей());
		
		// Проводки
		СтруктураПараметров.Вставить("ДвиженияНалоговый",                 РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей());
	КонецЕсли;
	
КонецПроцедуры // СоздатьНаборыЗаписейРегл()

// Создает наборы записей по регистрам международного учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейМеж(СтруктураПараметров)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахМеж", РегистрыНакопления.ПартииТоваровНаСкладахМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеМеж",РегистрыНакопления.ПартииТоваровПереданныеМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоМеж",  РегистрыНакопления.НезавершенноеПроизводствоМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеМеж", РегистрыНакопления.БракВПроизводствеМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыМеж",  РегистрыНакопления.ЗатратыМеждународныйУчет.СоздатьНаборЗаписей());
		
		// Проводки
		СтруктураПараметров.Вставить("ДвиженияМеждународный",             РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей());
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНаборыЗаписейУпр()

// Создает наборы записей для заданных учетов.
//
Процедура СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания = Неопределено, Регистратор =Неопределено ) Экспорт
	
	СоздатьНаборыЗаписейУпр(СтруктураПараметров);
	
	СоздатьНаборыЗаписейРегл(СтруктураПараметров);
	
	СоздатьНаборыЗаписейМеж(СтруктураПараметров);
	
КонецПроцедуры

// Подготовка наборов записей по регистрам Упр учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВУправленческомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПродажиСебестоимость", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтроительствоОбъектовОсновныхСредств", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияОССписанныеНаЗатратыУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияРеализованныеТовары", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииУпр", Ложь);
	
	Если ОтражатьВУправленческомУчете Тогда
		
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Очистить();
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияЗатратыУпр.Очистить();
		СтруктураПараметров.ДвиженияЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПродажиСебестоимость.Очистить();
		СтруктураПараметров.ДвиженияПродажиСебестоимость.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредств.Очистить();
		СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Очистить();
		СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияСтоимостьОСУпр.Очистить();
		СтруктураПараметров.ДвиженияСтоимостьОСУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Очистить();
		СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Очистить();
		СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр.Отбор.Регистратор.Установить(Регистратор);
		
		// Таблицы движений:
		
		// Для партий на складах
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахУпр", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Очистить();
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		// Валюты и курсы - для пересчета
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютаДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КурсДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КратностьДокумента");
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладах", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", 0);
		КонецЕсли;
		
		
		// Для партий товаров переданных
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеУпр", СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Очистить();
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		// Валюты и курсы - для пересчета
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютаДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КурсДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КратностьДокумента");
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданные", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", 0);
		КонецЕсли;
		
		// Для товаров, переданных в производство
		СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоУпр", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоУпр.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводство", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводство", Регистратор,"РегистрНакопления",Истина));
		КонецЕсли;
		
		// Для товаров, списанных на затраты
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыУпр", СтруктураПараметров.ДвиженияЗатратыУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийЗатратыУпр.Очистить();
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("Затраты", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", 0);
		КонецЕсли;
		
		// Для МПЗ, списанных на себестоимость продаж
		СтруктураПараметров.Вставить("ТаблицаДвиженийПродажиСебестоимость", СтруктураПараметров.ДвиженияПродажиСебестоимость.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПродажиСебестоимость", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", 0);
		КонецЕсли;
		
		// Для строительства объектов ОС
		СтруктураПараметров.Вставить("ТаблицаДвиженийСтроительствоОбъектовОсновныхСредств", СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредств.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтроительствоОбъектовОсновныхСредств", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтроительствоОбъектовОсновныхСредств", Регистратор));
		Иначе 
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтроительствоОбъектовОсновныхСредств", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыНаСтроительствоОбъектовОсновныхСредств", СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыНаСтроительствоОбъектовОсновныхСредств", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыНаСтроительствоОбъектовОсновныхСредств", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыНаСтроительствоОбъектовОсновныхСредств", 0);
		КонецЕсли;
		
		// Для принятия к учету ОС
		СтруктураПараметров.Вставить("ТаблицаДвиженийОССписанныеНаЗатратыУпр", СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиОССписанныеНаЗатратыУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ОССписанныеНаЗатраты", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиОССписанныеНаЗатратыУпр", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСУпр", СтруктураПараметров.ДвиженияСтоимостьОСУпр.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтоимостьОС", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСУпр", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеУпр", СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводстве", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеУпр", 0);
		КонецЕсли;
		
		СтруктураПараметров.ДвиженияРеализованныеТовары.Очистить();
		СтруктураПараметров.ДвиженияРеализованныеТовары.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.Вставить("ТаблицаДвиженийРеализованныеТовары", СтруктураПараметров.ДвиженияРеализованныеТовары.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары.Очистить();
		СтруктураПараметров.Вставить("ТекНомерСтрокиРеализованныеТовары", 0);
		
		// Для метериалов, переданных в эксплуатацию
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатации", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииУпр", 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьНаборыЗаписейУпр()

// Подготовка наборов записей по регистрам бух и нал учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВБухгалтерскомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияХозрасчетный", Ложь);
	
	// НДС	
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров",             Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСНезавершенноеПроизводство", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСКосвенныеРасходы",          Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПредъявленный",			 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСНачисленный",				 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСРеализация0",				 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСВключенныйВСтоимость",		 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПредъявленныйРеализация0",	 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСпоОСиНМА",					 Ложь);
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияОССписанныеНаЗатратыБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииБух", Ложь);
	//БП12 Требование-накладная
	СтруктураПараметров.Вставить("ИзмененыДвиженияПРГ_POS_материалы", Ложь);
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Бухгалтерские
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Очистить();
		
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Очистить();
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияЗатратыБух.Очистить();
		СтруктураПараметров.ДвиженияЗатратыБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияСтоимостьОСБух.Очистить();
		СтруктураПараметров.ДвиженияСтоимостьОСБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияОССписанныеНаЗатратыБух.Очистить();
		СтруктураПараметров.ДвиженияОССписанныеНаЗатратыБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияБракВПроизводствеБух.Очистить();
		СтруктураПараметров.ДвиженияБракВПроизводствеБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Очистить();
		СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Отбор.Регистратор.Установить(Регистратор);
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", 0);
		КонецЕсли;
		
		
		// Таблицы значений с движениями
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахБух", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Очистить();
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеБух", СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Очистить();
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		СтруктураПараметров.ДвиженияХозрасчетный.Очистить();
		СтруктураПараметров.ДвиженияХозрасчетный.Отбор.Регистратор.Установить(Регистратор);
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладахБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахБух", 0);
		КонецЕсли;
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданныеБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеБух", 0);
		КонецЕсли;
		
		// Для МПЗ, переданных в производство
		СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоБух", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоБух.Очистить();
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоБухгалтерскийУчет", Регистратор));
			СтруктураПараметров.Вставить("НачНомерСтрокиНезавершенноеПроизводствоБух", СтруктураПараметров.ТекНомерСтрокиНезавершенноеПроизводствоБух);
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоБухгалтерскийУчет", Регистратор,"РегистрНакопления",Истина));
			СтруктураПараметров.Вставить("НачНомерСтрокиНезавершенноеПроизводствоБух", СтруктураПараметров.ТекНомерСтрокиНезавершенноеПроизводствоБух);
		КонецЕсли;
		
		// Для товаров, списанных на затраты
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыБух", СтруктураПараметров.ДвиженияЗатратыБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийЗатратыБух.Очистить();
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыБух", 0);
		КонецЕсли;
		
		// НДС
		
		СтруктураПараметров.ДвиженияНДСПартииТоваров.Очистить();
		СтруктураПараметров.ДвиженияНДСПартииТоваров.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСНезавершенноеПроизводство.Очистить();
		СтруктураПараметров.ДвиженияНДСНезавершенноеПроизводство.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Очистить();
		СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСПредъявленный.Очистить();
		СтруктураПараметров.ДвиженияНДСПредъявленный.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Очистить();
		СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Очистить();
		СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСНачисленный.Очистить();
		СтруктураПараметров.ДвиженияНДСНачисленный.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСРеализация0.Очистить();
		СтруктураПараметров.ДвиженияНДСРеализация0.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСпоОСиНМА.Очистить();
		СтруктураПараметров.ДвиженияНДСпоОСиНМА.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПартииТоваров",               СтруктураПараметров.ДвиженияНДСПартииТоваров.Выгрузить());
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("КодОперацииПартииТоваров",Новый ОписаниеТипов("ПеречислениеСсылка.КодыОперацийПартииТоваров"));
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСНезавершенноеПроизводство", СтруктураПараметров.ДвиженияНДСНезавершенноеПроизводство.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСКосвенныеРасходы",          СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПредъявленный",          СтруктураПараметров.ДвиженияНДСПредъявленный.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСВключенныйВСтоимость",          СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПредъявленныйРеализация0",          СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСНачисленный",          СтруктураПараметров.ДвиженияНДСНачисленный.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСРеализация0",          СтруктураПараметров.ДвиженияНДСРеализация0.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСпоОСиНМА",          СтруктураПараметров.ДвиженияНДСпоОСиНМА.Выгрузить());
		
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПартииТоваров", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСНезавершенноеПроизводство", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСКосвенныеРасходы", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПредъявленный", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПредъявленныйРеализация0", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСНачисленный", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСРеализация0", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСпоОСиНМА", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСВключенныйВСтоимость", 0);
		
		
		// Для принятия к учету ОС
		СтруктураПараметров.Вставить("ТаблицаДвиженийОССписанныеНаЗатратыБух", СтруктураПараметров.ДвиженияОССписанныеНаЗатратыБух.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиОССписанныеНаЗатратыБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ОССписанныеНаЗатратыОрганизаций", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиОССписанныеНаЗатратыБух", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСБух", СтруктураПараметров.ДвиженияСтоимостьОСБух.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтоимостьОСБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСБух", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеБух", СтруктураПараметров.ДвиженияБракВПроизводствеБух.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеБух", 0);
		КонецЕсли;		
		
		
		// Для метериалов, переданных в эксплуатацию
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", 0);
		КонецЕсли;
		
	КонецЕсли;
	
	ОтражатьВНалоговомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете;
	
	Если ОтражатьВБухгалтерскомУчете тогда
		// При включении НДС в стоимость отражение в налоговом учете должно производиться одновременно с отражением в бухгалтерском учете
		Если Регистратор.Метаданные().Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено тогда
			СтруктураРеквизитовДокумента = Новый Структура("ОтражатьВНалоговомУчете");
			ПолучитьРеквизитыОбъекта(Регистратор, СтруктураРеквизитовДокумента);
			ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете ИЛИ СтруктураРеквизитовДокумента.ОтражатьВНалоговомУчете;
		Иначе
			ОтражатьВНалоговомУчете = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахНал", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеНал", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоНал", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыНал", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНалоговый", Ложь);
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСНал", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеНал", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииНал", Ложь);
	
	Если ОтражатьВНалоговомУчете Тогда
		
		// Налоговые
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахНал.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеНал.Очистить();
		
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахНал.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеНал.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоНал.Очистить();
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоНал.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияЗатратыНал.Очистить();
		СтруктураПараметров.ДвиженияЗатратыНал.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияСтоимостьОСНал.Очистить();
		СтруктураПараметров.ДвиженияСтоимостьОСНал.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияБракВПроизводствеНал.Очистить();
		СтруктураПараметров.ДвиженияБракВПроизводствеНал.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииНал.Отбор.Регистратор.Установить(Регистратор);
		
		// Таблицы значений с движениями
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахНал", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахНал.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Очистить();
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеНал", СтруктураПараметров.ДвиженияПартииТоваровПереданныеНал.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Очистить();
		
		СтруктураПараметров.ДвиженияНалоговый.Очистить();
		СтруктураПараметров.ДвиженияНалоговый.Отбор.Регистратор.Установить(Регистратор);
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладахНалоговыйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахНал", 0);
		КонецЕсли;
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданныеНалоговыйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеНал", 0);
		КонецЕсли;
		
		// Для МПЗ, переданных в производство
		СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоНал", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоНал.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоНал.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоНалоговыйУчет", Регистратор));
			СтруктураПараметров.Вставить("НачНомерСтрокиНезавершенноеПроизводствоНал", СтруктураПараметров.ТекНомерСтрокиНезавершенноеПроизводствоНал);
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоНалоговыйУчет", Регистратор,"РегистрНакопления",Истина));
			СтруктураПараметров.Вставить("НачНомерСтрокиНезавершенноеПроизводствоНал", СтруктураПараметров.ТекНомерСтрокиНезавершенноеПроизводствоНал);
		КонецЕсли;
		
		// Для товаров, списанных на затраты
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыНал", СтруктураПараметров.ДвиженияЗатратыНал.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийЗатратыНал.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыНалоговыйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыНал", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСНал", СтруктураПараметров.ДвиженияСтоимостьОСНал.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтоимостьОСНалоговыйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСНал", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеНал", СтруктураПараметров.ДвиженияБракВПроизводствеНал.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеНалоговыйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеНал", 0);
		КонецЕсли;
		
		
		// Для метериалов, переданных в эксплуатацию
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииНал", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииНал.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииНал.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииНалоговыйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатациинал", 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготовка наборов записей по регистрам бух и нал учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейМеж(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВМеждународномУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахМеж", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеМеж", ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоМеж", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияМеждународный", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеМеж", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыМеж", Ложь);
	
	Если ОтражатьВМеждународномУчете Тогда
		
		// Международные
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Очистить();
		
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Очистить();
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Очистить();
		СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияЗатратыМеж.Очистить();
		СтруктураПараметров.ДвиженияЗатратыМеж.Отбор.Регистратор.Установить(Регистратор);
		
		// Таблицы значений с движениями
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахМеж", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Очистить();
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеМеж", СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Очистить();
		
		СтруктураПараметров.ДвиженияМеждународный.Очистить();
		СтруктураПараметров.ДвиженияМеждународный.Отбор.Регистратор.Установить(Регистратор);
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладахМеждународныйУчет", Регистратор));
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданныеМеждународныйУчет", Регистратор));
		
		// Для МПЗ, переданных в производство
		СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоМеж", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоМеж.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоМеждународныйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоМеждународныйУчет", Регистратор,"РегистрНакопления",Истина));
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеМеж", СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеМеждународныйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеМеж", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыМеж", СтруктураПараметров.ДвиженияЗатратыМеж.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыМеждународныйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыМеж", 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает параметры, необходимые для работы с наборами записей для заданных учетов.
//
Процедура ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи = Истина, ИзмененыДвижения = Истина) Экспорт
	
	СтруктураПараметров.Вставить("Период",         Период);
	СтруктураПараметров.Вставить("Регистратор",    Регистратор);
	
	ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	ПодготовитьНаборыЗаписейМеж(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	
	// Установим флаги модифицированности для наборов записей всех регистров, 
	// для которых документ является регистратором
	// и по которым у документа есть движения
	// для того, чтобы набор записей был перезаписан 
	// При вызове из обработки проведение по регистрам НДС модифицированность не устанавливаем
	
	ТаблицаДвиженийРегистратора = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(Регистратор);
	Для каждого СтрокаДвижения из ТаблицаДвиженийРегистратора цикл
		ПозицияТочки = Найти(СтрокаДвижения.Имя,"."); 
		ВидРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки -1);
		Если ВидРегистра = "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки+1));
		
		Если ВидРегистра = "РегистрНакопления" Тогда
			Если Найти(ИмяРегистра, "БухгалтерскийУчет") тогда
				Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете тогда 
					Продолжить;
				КонецЕсли;
				ИмяРегистра = СтрЗаменить(ИмяРегистра,"БухгалтерскийУчет","Бух");
				
			ИначеЕсли Найти(ИмяРегистра, "НалоговыйУчет") тогда
				Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете тогда 
					Продолжить;
				КонецЕсли;
				
				ИмяРегистра = СтрЗаменить(ИмяРегистра,"НалоговыйУчет","Нал");
				
			ИначеЕсли Найти(ИмяРегистра, "МеждународныйУчет") тогда
				Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете тогда 
					Продолжить;
				КонецЕсли;
				ИмяРегистра = СтрЗаменить(ИмяРегистра,"МеждународныйУчет","Меж");
				
			Иначе
				Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете тогда 
					Продолжить;
				КонецЕсли;
				ИмяРегистра = ИмяРегистра + "Упр";
			КонецЕсли;
		КонецЕсли;
		ИмяФлагаМодифицированности = "ИзмененыДвижения" + ИмяРегистра;
		Если СтруктураПараметров.Свойство(ИмяФлагаМодифицированности) тогда
			СтруктураПараметров[ИмяФлагаМодифицированности] = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьНаборыЗаписей

// Записывет набор записей в базу данных.
//
Процедура ЗаписатьДвижения(ДвиженияРегистра, ТаблицаДвиженийРегистра, Замещать, ДвижениеНДСПродукции = Ложь, ТолькоВключениеНДСВСтоимость = Неопределено)
	
	// При замещении нужно удалять записи, сформированные прошлым списанием партий (СписаниеПартий=Истина),
	// если у регистра есть реквизит СписаниеПартий, то нужно удалить строки с Истина
	// Для списания партий НДС предусмотрены еще 2 реквизита СписаниеПартийНДС и НДСПродукции
	// Движения по налоговому учету могут создаваться при проведении по бухгалтерскому учету если в документе
	// установлен флаг "Отражать в налоговом учете"
	
	ДМ = ДвиженияРегистра.Метаданные();
	ЕстьРеквизитСписаниеПартий = (ДМ.Реквизиты.Найти("СписаниеПартий") <> Неопределено);
	
	Если Замещать И ЕстьРеквизитСписаниеПартий Тогда
		
		ЕстьРеквизитСписаниеПартийНДС = (ДМ.Реквизиты.Найти("СписаниеПартийНДС") <> Неопределено);
		ЕстьРеквизитНДСПродукции = (ДМ.Реквизиты.Найти("НДСПродукции") <> Неопределено);
		
		Если ТаблицаДвиженийРегистра=Неопределено Тогда
			ТаблицаДвиженийРегистра = ДвиженияРегистра.Выгрузить();
		КонецЕсли;
		
		// Установим УБ (эксклюзивную) перед чтением набора записей
		//начало изменений Ожиганов 09.09.2015 уберем блокировку попытаемся добитьсь большей параллельности
		Если  Ложь  Тогда
		//Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")   Тогда
		//конец изменений 	
			Если Метаданные.РегистрыНакопления.Содержит(ДМ) Тогда
				ТипТаблицы = "РегистрНакопления";
			Иначе
				// Запись движений по бухгалтерскому или налоговому ПУ
				ТипТаблицы = "РегистрБухгалтерии";
			КонецЕсли;
			СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы,ИмяТаблицы"
			,ТипТаблицы
			,ДМ.Имя + ".НаборЗаписей");
			
			СтруктураЗначенийБлокировки = Новый Структура("Регистратор", ДвиженияРегистра.Отбор.Регистратор.Значение);
			
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки,СтруктураЗначенийБлокировки,, Ложь, "");
		КонецЕсли;
		
		ДвиженияРегистра.Прочитать();
		
		Инд = ДвиженияРегистра.Количество();
		Пока Инд >0 Цикл
			Инд = Инд - 1;
			Удалять = Ложь;
			Если ДвиженияРегистра[Инд].СписаниеПартий Тогда
				Удалять = Истина;
				Если ЕстьРеквизитСписаниеПартийНДС тогда
					//При проведении только по бухгалтерскому учету удаляем только движения 
					//включения НДС в стоимость сформированные в бухучете
					Если ТолькоВключениеНДСВСтоимость = Истина тогда
						Удалять = ДвиженияРегистра[Инд].СписаниеПартийНДС;
						// При проведении только по налоговому учету оставляем только движения
						// включения НДС в стоимость, сформированные бухучетом
					ИначеЕсли ТолькоВключениеНДСВСтоимость = Неопределено тогда
						Удалять = НЕ ДвиженияРегистра[Инд].СписаниеПартийНДС;
						//  если ЕстьРеквизитСписаниеПартийНДС = ложь удаляем все записи со СписаниеПартий = Истина
					Иначе
						
					КонецЕсли;
				ИначеЕсли ДвижениеНДСПродукции И ЕстьРеквизитНДСПродукции тогда
					// При расчете НДС продукции удаляем только записи НДС продукции
					Удалять = ДвиженияРегистра[Инд].НДСПродукции;
				КонецЕсли;
			КонецЕсли;
			Если Удалять тогда
				ДвиженияРегистра.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
		
		// Заполним параметр "Списание партий"
		ТаблицаДвиженийРегистра.ЗаполнитьЗначения(Истина, "СписаниеПартий");
		
		ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		
		ДвиженияРегистра.Записать(Истина);
		
	Иначе
		
		Если ТаблицаДвиженийРегистра<>Неопределено Тогда
			
			// Заполним параметр "Списание партий"
			Если ЕстьРеквизитСписаниеПартий Тогда
				ТаблицаДвиженийРегистра.ЗаполнитьЗначения(Истина, "СписаниеПартий");
			КонецЕсли;
			
			ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		КонецЕсли;
		
		ДвиженияРегистра.Записать(Замещать);
		
	КонецЕсли;
	
КонецПроцедуры//ЗаписатьДвижения

// Запись движений по упр. учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	ОтражатьВУправленческомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете;
	
	Если ОтражатьВУправленческомУчете Тогда
		
		// Управленческий учет
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПродажиСебестоимость Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПродажиСебестоимость, 
			СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыУпр, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияСтроительствоОбъектовОсновныхСредств Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредств, 
			СтруктураПараметров.ТаблицаДвиженийСтроительствоОбъектовОсновныхСредств, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыНаСтроительствоОбъектовОсновныхСредств, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияСтоимостьОСУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСУпр, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияОССписанныеНаЗатратыУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр, 
			СтруктураПараметров.ТаблицаДвиженийОССписанныеНаЗатратыУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеУпр, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр, Замещать);
			
		КонецЕсли;
		
		// Для отчета комитенту
		Если СтруктураПараметров.ИзмененыДвиженияРеализованныеТовары Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияРеализованныеТовары, 
			СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары, Замещать);
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры // ЗаписатьДвиженияДокументаУпр()

// Запись движений по бух и нал учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		
		// Бухгалтерский учет
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияХозрасчетный Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияХозрасчетный, Неопределено, Замещать, СтруктураПараметров.Свойство("ТолькоДвиженияНДС"));
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыБух, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПартииТоваров, 
			СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСНезавершенноеПроизводство Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСНезавершенноеПроизводство, 
			СтруктураПараметров.ТаблицаДвиженийНДСНезавершенноеПроизводство, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСКосвенныеРасходы Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСКосвенныеРасходы, 
			СтруктураПараметров.ТаблицаДвиженийНДСКосвенныеРасходы, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПредъявленный, 
			СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость, 
			СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0 Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0, 
			СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСНачисленный Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСНачисленный, 
			СтруктураПараметров.ТаблицаДвиженийНДСНачисленный, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСРеализация0 Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСРеализация0, 
			СтруктураПараметров.ТаблицаДвиженийНДСРеализация0, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСпоОСиНМА Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСпоОСиНМА, 
			СтруктураПараметров.ТаблицаДвиженийНДСпоОСиНМА, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияСтоимостьОСБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСБух, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияОССписанныеНаЗатратыБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияОССписанныеНаЗатратыБух, 
			СтруктураПараметров.ТаблицаДвиженийОССписанныеНаЗатратыБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеБух, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух, Замещать);
			
		КонецЕсли;
		
		//БП12 Двинем регистр POS 
		Если СтруктураПараметров.ИзмененыДвиженияПРГ_POS_материалы Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПРГ_POS_материалы, 
			СтруктураПараметров.ТаблицаДвиженийПРГ_POS_материалы, Замещать);
			
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
	КонецЕсли;
	
	ОтражатьВНалоговомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете;
	
	ТолькоВключениеНДСВСтоимость = Неопределено;
	
	Если СтруктураПараметров.Свойство("ТолькоВключениеНДСВСтоимостьНУ", ТолькоВключениеНДСВСтоимость) Тогда
		
		ОтражатьВНалоговомУчете = Истина;
		
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		
		// Налоговый учет
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахНал Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахНал, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал, Замещать, , ТолькоВключениеНДСВСтоимость);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеНал Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеНал, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал, Замещать, , ТолькоВключениеНДСВСтоимость);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоНал Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствоНал, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоНал, Замещать, , ТолькоВключениеНДСВСтоимость);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНалоговый Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНалоговый, Неопределено, Замещать, , ТолькоВключениеНДСВСтоимость);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыНал Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыНал, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыНал, Замещать, , ТолькоВключениеНДСВСтоимость);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияСтоимостьОСНал Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСНал, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСНал, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеНал Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеНал, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеНал, Замещать, , ТолькоВключениеНДСВСтоимость);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииНал Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииНал, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииНал, Замещать, , ТолькоВключениеНДСВСтоимость);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Запись движений по меж учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаМеж(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	ОтражатьВМеждународномУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете;
	
	Если ОтражатьВМеждународномУчете Тогда
		
		// Международный учет
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствомеж, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоМеж, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияМеждународный Тогда
			
			//+ДС 10.01.14 Не выполняем запись, если регистратор : СписаниеМПЗ
			Если Не ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") и Не СтруктураПараметров.Свойство("СтрокаДействия") Тогда
				СтруктураПараметров.ДвиженияМеждународный.Записать(Замещать);
			КонецЕсли;
			
			//Если есть свойство "Строка действия" и действие расчет прямых затрат по переделам, то выполняем распределение затрат на реализацию в разрезе статей затрат
			Если СтруктураПараметров.Свойство("СтрокаДействия") Тогда
				Если СтруктураПараметров.СтрокаДействия = Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетПрямыхЗатратПоПеределам	Тогда
					ДС_РасчетСебестоимостиМСФО.РаспределитьЗатратыНаРеализацию(СтруктураПараметров);
					СтруктураПараметров.ДвиженияМеждународный.Записать(Замещать);
				КонецЕсли;	
			КонецЕсли;	
			//-ДС
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж, Замещать);
			
		КонецЕсли;
		
		
		Если СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеМеж, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеМеж, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыМеж, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыМеж, Замещать);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-вход для записи движений документа в базу данных
//
Процедура ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Замещать = Истина) Экспорт
	
	// Управленческий учет
	ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать);
	
	// Бухгалтерский и налоговый учет
	ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания, Замещать);
	
	// Международный учет
	ЗаписатьДвиженияДокументаМеж(СтруктураПараметров, ТаблицаСписания, Замещать);
	
	// Запись наборов записей регистров, сформированных во внешних процедурах.
	// Используется при погашении стоимости спецодежды, спецоснастки и инвентаря.
	Если СтруктураПараметров.Свойство("НаборыЗаписейРегистров") Тогда
		УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(СтруктураПараметров.НаборыЗаписейРегистров);
	КонецЕсли;
	
КонецПроцедуры// ЗаписатьДвиженияДокумента()

// Бух

// Проверка списываемой партии по бух учету
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево
//
Функция ПроверитьПартиюНаСкладеБух(СтрокаПартии, СтрокаДокумента, СтруктураПараметров) Экспорт
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СтрокаДокумента.СчетУчетаБУ <> СтрокаПартии.СчетУчета
			И СтрокаДокумента.ПринятыеСчетУчетаБУ <> СтрокаПартии.СчетУчета Тогда 
			Возврат Ложь 
		КонецЕсли;
		
		Возврат  ПроверитьПартиюПоКачеству(СтрокаПартии, СтрокаДокумента)
		И ПроверитьПартиюПоЗаказу(СтрокаПартии, СтрокаДокумента)
		И ПроверитьПартиюПоСкладуБух(СтрокаПартии, СтрокаДокумента, СтруктураПараметров);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПроверитьПартиюНаСкладеБух()

// Проверка партии по измерению "Качество"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоКачеству(СтрокаПартии, СтрокаДокумента)
	
	КачествоНовый = Справочники.Качество.Новый;
	
	Если ЗначениеЗаполнено(СтрокаПартии.Качество) Тогда 
		
		// Если задано, какое качество списывать, проверяем
		Если ЗначениеЗаполнено(СтрокаДокумента.Качество) Тогда
			
			Если СтрокаПартии.Качество<>СтрокаДокумента.Качество Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
			// В противном случае списываем только новые
		Иначе
			
			Если СтрокаПартии.Качество <> КачествоНовый Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоКачеству()

// Проверка партии по измерению "Склад"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоСкладуБух(СтрокаПартии, СтрокаДокумента, СтруктураПараметров)
	
	// Склад, если партионный учет по складам
	//m.ionov@a-prof.ru 19.02.2014
	//Если ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров) Тогда
	Если ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров)
		ИЛИ СтрокаДокумента.СчетУчетаБУ.Забалансовый Тогда
		
		Если СтрокаПартии.Склад <> СтрокаДокумента.Склад
			И ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда // пустые склады могут остаться со времени, когда не было партионного учета по складам
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоСкладу()

// Проверка партии по измерению "Заказ"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоЗаказу(СтрокаПартии, СтрокаДокумента)
	
	Если СтрокаДокумента.СписыватьТолькоПоЗаказу Тогда
		
		Если СтрокаПартии.Заказ <> СтрокаДокумента.ЗаказПартии Тогда
			
			// Заполненные не отличаются
			Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказПартии) Тогда
				
				Возврат Ложь;
				
			Иначе
				
				// Если отличаются, то оба пустые
				Если ЗначениеЗаполнено(СтрокаПартии.Заказ) Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Можно списывать по тому же заказу или пустые
		
		Если СтрокаПартии.Заказ <> СтрокаДокумента.ЗаказПартии Тогда
			
			// Если отличаются, то в партиях только пустой
			Если ЗначениеЗаполнено(СтрокаПартии.Заказ) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоЗаказу()

// Приведение таблицы списания к требуемому виду
//
Процедура ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Упр, Бух, Нал) Экспорт
	
	// SSSS
	Если ТаблицаСписания.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено Тогда
		
		// Получим данные о признаках ведения учета по сериям, установленным для номенклатуры
		МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
		МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ВестиПартионныйУчетПоСериям
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)");
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Данные из запроса поместим в соответствие
		Соотв = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			Соотв.Вставить(Выборка.Ссылка, Выборка.ВестиПартионныйУчетПоСериям);
		КонецЦикла;
		
		// Заполним колонку "ВестиПартионныйУчетПоСериям" значениями из соответствия
		ТаблицаСписания.Колонки.Добавить("ВестиПартионныйУчетПоСериям", Новый ОписаниеТипов("Булево"));
		Для Каждого Строка Из ТаблицаСписания Цикл
			Строка.ВестиПартионныйУчетПоСериям = Соотв[Строка.Номенклатура];
		КонецЦикла;
	КонецЕсли;
	
	
	// Приведем к виду со всеми колонками
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВУправленческомУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВНалоговомУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВМеждународномУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВМеждународномУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ИсточникПоКодуОперации") <> Неопределено Тогда
		// Таблица строк получена запросом к регистру СписанныеТовары		
		СтруктураПараметров.Вставить("ЕстьНаСкладах", ТаблицаСписания.Найти("НаСкладах", "ИсточникПоКодуОперации") <> Неопределено);
		СтруктураПараметров.Вставить("ЕстьПереданные", ТаблицаСписания.Найти("Переданные", "ИсточникПоКодуОперации") <> Неопределено);
	Иначе	
		
		// Таблица строк получена из документа		
		ТаблицаСписания.Колонки.Добавить("ИсточникПоКодуОперации");
		ЕстьНаСкладах = Ложь;
		ЕстьПереданные = Ложь;		
		Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
			СтрокаСписания.ИсточникПоКодуОперации = ПолучитьИсточникПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров);
			Если Не ЕстьНаСкладах И СтрокаСписания.ИсточникПоКодуОперации = "НаСкладах" Тогда
				ЕстьНаСкладах=Истина;
			ИначеЕсли НЕ ЕстьПереданные И СтрокаСписания.ИсточникПоКодуОперации = "Переданные" Тогда
				ЕстьПереданные=Истина;
			КонецЕсли;			
			
			СтрокаСписания.ОтражатьВУправленческомУчете = Упр И СтрокаСписания.ОтражатьВУправленческомУчете;
			СтрокаСписания.ОтражатьВБухгалтерскомУчете  = Бух И СтрокаСписания.ОтражатьВБухгалтерскомУчете;
			СтрокаСписания.ОтражатьВНалоговомУчете		= Нал И СтрокаСписания.ОтражатьВНалоговомУчете;
			
			
		КонецЦикла;
		СтруктураПараметров.Вставить("ЕстьНаСкладах", ЕстьНаСкладах);
		СтруктураПараметров.Вставить("ЕстьПереданные", ЕстьПереданные);
	КонецЕсли;
	
	// is ЯннуровВФ нач 20141008
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		Если ТаблицаСписания.Колонки.Найти("ПриемникПоКодуОперации") <> Неопределено Тогда
			// Таблица строк получена запросом к регистру СписанныеТовары		
			СтруктураПараметров.Вставить("ЕстьНаСкладах", ?(СтруктураПараметров.Свойство("ЕстьНаСкладах"),СтруктураПараметров.ЕстьНаСкладах,Ложь) Или ТаблицаСписания.Найти("НаСкладах", "ПриемникПоКодуОперации") <> Неопределено);
			СтруктураПараметров.Вставить("ЕстьПереданные", ?(СтруктураПараметров.Свойство("ЕстьПереданные"),СтруктураПараметров.ЕстьПереданные,Ложь) Или ТаблицаСписания.Найти("Переданные", "ПриемникПоКодуОперации") <> Неопределено);
		Иначе	
			
			// Таблица строк получена из документа		
			ТаблицаСписания.Колонки.Добавить("ПриемникПоКодуОперации");
			ЕстьНаСкладах = Ложь;
			ЕстьПереданные = Ложь;		
			Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
				СтрокаСписания.ПриемникПоКодуОперации = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат, СтрокаСписания.КорСчетМУ, "Международный");
				Если Не ЕстьНаСкладах И СтрокаСписания.ПриемникПоКодуОперации = "НаСкладах" Тогда
					ЕстьНаСкладах=Истина;
				ИначеЕсли НЕ ЕстьПереданные И СтрокаСписания.ПриемникПоКодуОперации = "Переданные" Тогда
					ЕстьПереданные=Истина;
				КонецЕсли;			
			КонецЦикла;
			СтруктураПараметров.Вставить("ЕстьНаСкладах", ?(СтруктураПараметров.Свойство("ЕстьНаСкладах"),СтруктураПараметров.ЕстьНаСкладах,Ложь) Или ЕстьНаСкладах);
			СтруктураПараметров.Вставить("ЕстьПереданные", ?(СтруктураПараметров.Свойство("ЕстьПереданные"),СтруктураПараметров.ЕстьПереданные,Ложь) Или ЕстьПереданные);
		КонецЕсли;
	КонецЕсли;
	// is ЯннуровВФ кон 20141008
	
КонецПроцедуры //ПодготовитьТаблицуСписания

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЯ (КРЕДИТ)

// Упр учет

// Структура отбора партий по упр учету заполняется нужными значениями
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
			// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
			// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
			Если СписыватьПустыеСерии тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				// Серии не отбираются при резервировании т.к. в заказах нет серий
				Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
					И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
					
					СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруОтбораУпр()
// Упр учет

// Структура отбора партий по регл учету заполняется нужными значениями
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСтруктуруОтбораРегл(СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии)
	
	// Бух
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
			// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
			// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
			Если СписыватьПустыеСерии тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				// Серии не отбираются при резервировании т.к. в заказах нет серий
				Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
					И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
					
					СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;//Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
	
	// Нал
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
			// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
			// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
			Если СписыватьПустыеСерии тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				// Серии не отбираются при резервировании т.к. в заказах нет серий
				Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
					И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
					
					СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;//Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
	
КонецПроцедуры // ЗаполнитьСтруктуруОтбораРегл()

// Структура отбора партий по меж учету заполняется нужными значениями
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСтруктуруОтбораМеж(СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии)
	
	// Меж
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		СтруктураОтбора.Вставить("СчетУчета",                  СтрокаДокумента.СчетУчетаМУ);
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
			// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
			// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
			Если СписыватьПустыеСерии тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				// Серии не отбираются при резервировании т.к. в заказах нет серий
				Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
					И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
					СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруОтбораМеж()

// Возвращает имя соответствующего регистра для строки по упр учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Упр";
		Иначе
			ИмяРегистра = ВидРегистра + "Упр";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Возвращает имя соответствующего регистра для строки по регл учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПолучитьИмяРегистраРегл(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Бух";
		Иначе
			ИмяРегистра = ВидРегистра + "Бух";
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Нал";
		Иначе
			ИмяРегистра = ВидРегистра + "Нал";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПолучитьИмяРегистраРегл(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Возвращает имя соответствующего регистра для строки по межд учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПолучитьИмяРегистраМеж(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Меж";
		Иначе
			ИмяРегистра = ВидРегистра + "Меж";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Заполняет поля записи списания по упр учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СтатусПартии		    = СтрокаПартии.СтатусПартии;
		
		// Реквизиты
		Движение.Подразделение	        = СтрокаДокумента.Подразделение;
		
		Если РегистрУчета="Переданные" Тогда
			Движение.СтатусПередачи		= СтрокаПартии.СтатусПередачи;
		КонецЕсли;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
		// Сумма выручки и сумма НДС  - для учета НДС
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
		Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
		
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
		
		// Сумма выручки в валюте документа - для отчета комитенту
		Движение.СуммаВыручки = Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
		// Валюты и курсы - для пересчета
		Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
		Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
		Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
		
		СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
		
		// Количество поступления - для комплектации
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписанияУпр()

// Заполняет поля записи списания по регл учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписанияРегл(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный)
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СчетУчета		        = СтрокаПартии.СчетУчета;
		
		Движение.Организация	        = СтрокаДокумента.Организация;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
		// Сумма выручки и сумма НДС  - для учета НДС
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ * КоэффПоступления, 2);
		Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС * КоэффПоступления, 2);
		
		// Сумма задолженности
		Если Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику тогда
			// Для учета отклонений в стоимости при возврате поставщику
			Движение.ВалютнаяСуммаЗадолженностиБУ = Окр(Движение.Стоимость * КоэффСписанияВалютный, 2);
		Иначе
			Движение.ВалютнаяСуммаЗадолженностиБУ   = Окр(СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ * КоэффПоступления, 2);
			СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ - Движение.ВалютнаяСуммаЗадолженностиБУ;
		КонецЕсли;
		
		// СтоимостьПоступление для учета отклонений в стоимости при реализации тары
		Движение.СтоимостьПоступление = Окр(СтрокаДокумента.СтоимостьПоступлениеБУ * КоэффПоступления, 2);
		
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
		
		СтрокаДокумента.СтоимостьПоступлениеБУ = СтрокаДокумента.СтоимостьПоступлениеБУ - Движение.СтоимостьПоступление;
		
		// Количество поступления - для комплектации
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
		
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СчетУчета		        = СтрокаПартии.СчетУчета;
		
		Движение.Организация	        = СтрокаДокумента.Организация;
		
		// Ресурсы для учета постоянных и временных разниц
		Движение.ПостояннаяРазница	= Окр(СтрокаПартии.ПостояннаяРазница  * КоэффСписания,2,1);
		Движение.ВременнаяРазница	= Окр(СтрокаПартии.ВременнаяРазница   * КоэффСписания,2,1);
		
		СтрокаПартии.ПостояннаяРазница  = СтрокаПартии.ПостояннаяРазница  - Движение.ПостояннаяРазница;
		СтрокаПартии.ВременнаяРазница   = СтрокаПартии.ВременнаяРазница   - Движение.ВременнаяРазница;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
		// Сумма выручки и сумма НДС  - для учета НДС
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
		Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
		
		// СтоимостьПоступление для учета отклонений в стоимости при реализации тары
		Движение.СтоимостьПоступление = Окр(СтрокаДокумента.СтоимостьПоступлениеБУ * КоэффПоступления, 2);
		
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
		
		СтрокаДокумента.СтоимостьПоступлениеБУ = СтрокаДокумента.СтоимостьПоступлениеБУ - Движение.СтоимостьПоступление;
		
		// Количество поступления - для комплектации
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписанияРегл()

// Заполняет поля записи списания по межд учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписанияМеж(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления)
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СчетУчета  		    = СтрокаПартии.СчетУчета;
		
		// Реквизиты
		Движение.Организация	        = СтрокаДокумента.Организация;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
		// Количество поступления - для комплектации
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписанияМеж()

// Возвращает текст содержащий вид табличной части
//
Функция ТекстСтрокиДокумента(СтрокаДокумента)
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидТабличнойЧасти)Тогда
		
		ТекстСтрокиДокумента = ", табличная часть """ + Строка(СтрокаДокумента.ВидТабличнойЧасти)+"""";
		
	Иначе
		ТекстСтрокиДокумента =  " ";
		
	КонецЕсли;
	
	Возврат ТекстСтрокиДокумента;
	
КонецФункции // ТекстСтрокиДокумента()

// Сообщает о нехватке партии в управленческом учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтрокаСообщения = "Управленческий учет. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииУпр()

// Сообщает о нехватке партии в регл учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНехваткеПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтрокаСообщения = "Бухгалтерский учет. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура + " (Код: " + СокрЛП(СтрокаДокумента.Номенклатура.Код) + ")" //m.ionov@a-prof.ru 05.02.2015 - добавил код
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", счета учета " + СтрокаДокумента.СчетУчетаБУ + ", " + СтрокаДокумента.ПринятыеСчетУчетаБУ
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", счета учета " + СтрокаДокумента.СчетУчетаБУ + ", " + СтрокаДокумента.ПринятыеСчетУчетаБУ
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		СтрокаСообщения = "Налоговый учет. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", счет учета " + СтрокаДокумента.СчетУчетаНУ
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", счет учета " + СтрокаДокумента.СчетУчетаНУ
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииРегл()

// Сообщает о нехватке партии в меж учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНехваткеПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		СтрокаСообщения = "Учет по МСФО. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", счет учета " + СтрокаДокумента.СчетУчетаМУ
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", счет учета " + СтрокаДокумента.СчетУчетаМУ
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииРегл()


// Сообщает о нехватке партии в управленческом учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНеполномСписанииУказаннойПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтрокаСообщения = "Управленческий учет. ";
		
		СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");
		
		Сообщить(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииУпр()

// Сообщает о нехватке партии в регл учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНеполномСписанииУказаннойПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтрокаСообщения = "Бухгалтерский учет. ";
		
		СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС 
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");
		
		Сообщить(СтрокаСообщения);
		
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		СтрокаСообщения = "Налоговый учет. ";
		
		СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС 
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");
		
		Сообщить(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииРегл()

// Сообщает о нехватке партии в меж учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНеполномСписанииУказаннойПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		СтрокаСообщения = "Учет по МСФО. ";
		
		СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС 
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");
		
		Сообщить(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииРегл()



// Общие

// Возвращает имя соответствующего регистра для строки
//
// Параметры:
//	Нет.
//
Функция ПолучитьИмяРегистра(ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	ИмяРегистра ="";
	ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);
	ПолучитьПолучитьИмяРегистраРегл(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);
	ПолучитьПолучитьИмяРегистраМеж(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);
	
	Возврат ИмяРегистра;
	
КонецФункции // ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Отбирает в партиях строки соответствующие значениям обрабатываемой строки
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив строк
//
Функция ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаДокумента, РегистрУчета) Экспорт
	
	// Структура отбор строк партий
	СтруктураОтбора = Новый Структура;
	
	ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);
	ЗаполнитьСтруктуруОтбораРегл(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);
	ЗаполнитьСтруктуруОтбораМеж(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);
	
	МассивСтрок = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
	
	// Для регистров "ПартииТоваровНаСкладах"...
	// Если серия заполнена - попытаемся отобрать дополнительно пустые серии
	// Если серия в документе не заполнена - пустые серии уже отобраны
	// Для переданных товаров учет по сериям не ведется.
	Если РегистрУчета ="НаСкладах" тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры) тогда
			
			// Серии не отбираются при резервировании т.к. в заказах нет серий
			Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
				И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
				
				ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);
				ЗаполнитьСтруктуруОтбораРегл(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);
				ЗаполнитьСтруктуруОтбораМеж(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);
				
				МассивСтрокСПустымиСериями = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
				
				Для каждого Элемент из МассивСтрокСПустымиСериями Цикл
					МассивСтрок.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции // ОтобратьСтрокиПартий()

// Заполняет поля записи списания
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный)
	
	ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);
	ЗаполнитьПоляЗаписиСписанияРегл(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный);
	ЗаполнитьПоляЗаписиСписанияМеж(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписания()


// Списание со склада по строке
//AAA 20150621+
Процедура СписаниеПартий(СтрокаДокумента, СтруктураПараметров, РегистрУчета,ДанныеПартий = Неопределено)
//AAA 20150621-

	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// Партии для данного учета
	ИмяРегистра = ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента);
	
	// Если нет регистра, по которому списываем, тогда пропускаем
	Если ИмяРегистра="" Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистра];
	
	СтруктураИзмерений = СтруктураПараметров[ИмяРегистра + "СтруктураИзмерений"];
	ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистра + "ТаблицаОстатков"];
	
	//AAA 20150621+
	//СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
	//начало изменений Ожиганов 10.08.2015 изменения МСФО 
	//Если ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда
	Если СтрокаДокумента.ОтражатьВМеждународномУчете и ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда
	//конец изменений 	
		СтрокаДереваПартий = СтруктураПараметров["Соответствие"+ИмяРегистра].Получить(СтрокаДокумента.НомерСтрокиДокумента);
	Иначе
		СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
	КонецЕсли;
	//AAA 20150621-	
	
	
	
	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	// В строке может быть указана стоимость поступления, если затем товар будет оприходован с другой стоимостью
	СтоимостьПоступлениеОсталосьПогасить = 0;
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		СтоимостьПоступлениеОсталосьПогасить = СтрокаДокумента.СтоимостьПоступление;
	КонецЕсли;
	
	КоэффСписанияВалютный = 0;
	
	// Валютная задолженность при возврате товаров поставщику должна списываться пропорционально стоимости
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику 
		И СтрокаДокумента.СуммаЗадолженностиБУ <> 0 тогда
		КоэффСписанияВалютный = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ/СтрокаДокумента.СуммаЗадолженностиБУ;
	Иначе
	КонецЕсли;
	
	СтрокаСписанныхТоваров = Новый Структура("КоличествоПоступление",СтрокаДокумента.КоличествоПоступление);
	
	КоличествоСписанноеПоДокументуПартии = 0;
	
	Если СтрокаДереваПартий <> Неопределено Тогда
		
		Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
			
			// is ЯннуровВФ нач 20141007
			Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
				Если Не СтрокаПартииРаспределения.Расход Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// is ЯннуровВФ кон 20141007
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаДокумента.ОтражатьВНалоговомУчете 
				И СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ПринятиеКУчетуОС
				И СтрокаПартии.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ тогда
				Продолжить;
			КонецЕсли;
			
			// is ЯннуровВФ нач 20141006
			Если СтрокаДокумента.ОтражатьВМеждународномУчете 
			 И СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ПеремещениеМеждуСкладами Тогда 
				КоэффСписания = КоличествоОсталосьПогасить/СтрокаПартии.Количество;
			// is ЯннуровВФ кон 20141006
			ИначеЕсли СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) И (СтрокаПартии.ДокументОприходования = СтрокаДокумента.ДокументПартии) Тогда
				КоличествоСписанноеПоДокументуПартии = КоличествоСписанноеПоДокументуПартии + Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			КонецЕсли;	
			
			// Добавим новую строку
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
			
			// Свойства
			Движение.Период 	 = СтрокаДокумента.Период;
			Движение.Регистратор = СтрокаДокумента.Регистратор;
			Движение.Активность  = Истина;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Номенклатура = СтрокаПартии.Номенклатура;
			Движение.Организация = СтруктураПараметров.ОрганизацияУпр;
			
			// Ресурсы 
			Движение.Количество	= Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Движение.Стоимость	= Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			
			// При возврате товаров поставщику необходимо сформировать проводки на разницу между суммой строки документа 
			// и стоимостью партий, списанных по строке документа
			Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СтруктураПараметров.СтоимостьСписанияБУ = СтруктураПараметров.СтоимостьСписанияБУ + Движение.Стоимость;
			ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
				СтруктураПараметров.СтоимостьСписанияНУ = СтруктураПараметров.СтоимостьСписанияНУ + Движение.Стоимость;
			КонецЕсли; 
			
			Если Движение.Количество < КоличествоОсталосьПогасить Тогда
				КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
			Иначе
				КоэффПоступления = 1;
			КонецЕсли;
			
			// Вспомогательное поле, не являющееся ресурсом, но используемое
			// для формирования записей по переоценке принятого на комиссию.
			Движение.СтоимостьПоступление = СтоимостьПоступлениеОсталосьПогасить * КоэффПоступления;
			СтоимостьПоступлениеОсталосьПогасить = СтоимостьПоступлениеОсталосьПогасить - Движение.СтоимостьПоступление;
			
			// Реквизиты
			Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
			// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
			Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
				Если Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.Реализация Тогда 
					Движение.ДокументДвижения = СтрокаДокумента.ДокументПартии;
					// is ЯннуровВФ нач 20141112
					Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) Тогда 
						//Движение.ДокументДвиженияПериод = СтрокаДокумента.ДокументПартии.Дата;
						Если   ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО()
							 И ДанныеПартий <> Неопределено Тогда
							 
							ДанныеПартии = ДанныеПартий.Найти(СтрокаДокумента.ДокументПартии,"ДокументПартии");
							Если ДанныеПартии = Неопределено Тогда
								Движение.ДокументДвиженияПериод = СтрокаДокумента.ДокументПартии.Дата;	
							Иначе
								Движение.ДокументДвиженияПериод = ДанныеПартии.Дата;
							КонецЕсли;
						Иначе	
							Движение.ДокументДвиженияПериод = СтрокаДокумента.ДокументПартии.Дата;
						КонецЕсли;
						//AAA 20150621-
						
					Иначе
						Движение.ДокументДвиженияПериод = Неопределено;
					КонецЕсли;
					// is ЯннуровВФ кон 20141112
				КонецЕсли;
			КонецЕсли;
			// is ЯннуровВФ кон 20140731
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
			
			СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
			СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Движение.Стоимость;
			
			// Заполнение полей, специфических для учета
			ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный);
			
			ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, СтрокаПартии, СтрокаДокумента,РегистрУчета
			,"Списание", неопределено , Неопределено, СтрокаСписанныхТоваров);
		КонецЦикла;
	КонецЕсли;
	//начало изменений БП 14
	//дополним движения чтобы в проводках отражалась полностью инфа
	// is ЯннуровВФ нач 20150904 
	//Если  КоличествоОсталосьПогасить > 0 Тогда 
	Если (Не СтрокаДокумента.ОтражатьВМеждународномУчете И КоличествоОсталосьПогасить > 0)
	 Или (СтрокаДокумента.ОтражатьВМеждународномУчете И КоличествоОсталосьПогасить <> 0) Тогда 
	// is ЯннуровВФ кон 20150904 
		
		СтароеКоличествоОсталосьПогасить = КоличествоОсталосьПогасить; 
		КоличествоСписанноеПоДокументуПартии = 0;
		
		Если СтрокаДокумента.ОтражатьВНалоговомУчете 
			И СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ПринятиеКУчетуОС
			//			   И СтрокаДокумента.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ 
			тогда
		Иначе
			
			// is ЯннуровВФ нач 20141009
			Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаДокумента); 
				СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтруктураИзмерений, СтруктураИзмерений, ТаблицаОстатковПартий);
				
				ПрежнееЗначениеКоличество = СтрокаПартии.Количество;
				ПрежнееЗначениеСтоимость = СтрокаПартии.Стоимость;
				СтрокаПартии.Количество = КоличествоОсталосьПогасить;
				СтрокаПартии.Стоимость = 0;
				
				КоэффСписания = 1;
				
			Иначе
				// is ЯннуровВФ кон 20141009
				СтрокаПартии = ТаблицаОстатковПартий.Добавить();   
				СтрокаПартии.ДокументОприходования = Неопределено;
				//{14.10.2014 Островерхий  заявка №28397
				//СтрокаПартии.Заказ				 = СтрокаДокумента.ЗаказПартии;
				//СтрокаПартии.Качество				 = СтрокаДокумента.Качество;
				//14.10.2014 Островерхий}
				СтрокаПартии.Номенклатура			 = СтрокаДокумента.Номенклатура;
				СтрокаПартии.Организация			 = СтрокаДокумента.Организация;
				Если СтрокаДокумента.ВестиПартионныйУчетПоСериям Тогда
					СтрокаПартии.СерияНоменклатуры	 = СтрокаДокумента.СерияНоменклатуры;
				КонецЕсли;	
				
				//{14.10.2014 Островерхий заявка №28397
				Если НЕ РегистрУчета = "Переданные" Тогда
					СтрокаПартии.Заказ				 = СтрокаДокумента.ЗаказПартии;
					СтрокаПартии.Качество				 = СтрокаДокумента.Качество;
				КонецЕсли; 
				//14.10.2014 Островерхий}
				
				//Если СтруктураПараметров.УчетнаяПолитика.Бух.ВестиПартионныйУчетПоСкладам Тогда
				//	СтрокаПартии.Склад				 = СтрокаДокумента.Склад;
				//КонецЕсли;	
				СтрокаПартии.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
				СтрокаПартии.Стоимость   			 = 0;
				
				Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
					СтрокаПартии.СчетУчета			 = СтрокаДокумента.СчетУчетаБУ;
				ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
					СтрокаПартии.СчетУчета			 = СтрокаДокумента.СчетУчетаНУ;
					СтрокаПартии.ПостояннаяРазница     = 0;
					СтрокаПартии.ВременнаяРазница     = 0;
				ИначеЕсли СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
					СтрокаПартии.СтатусПартии		 = СтрокаДокумента.ДопустимыйСтатус1; 
				КонецЕсли;	
				СтрокаПартии.Количество 		=  КоличествоОсталосьПогасить;
				
				КоэффСписания = 1;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) И (СтрокаПартии.ДокументОприходования = СтрокаДокумента.ДокументПартии) Тогда
				КоличествоСписанноеПоДокументуПартии = КоличествоСписанноеПоДокументуПартии + Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			КонецЕсли;	
			
			// Добавим новую строку
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
			
			// Свойства
			Движение.Период 	 = СтрокаДокумента.Период;
			Движение.Регистратор = СтрокаДокумента.Регистратор;
			Движение.Активность  = Истина;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Номенклатура = СтрокаПартии.Номенклатура;
			Движение.Организация  = СтруктураПараметров.ОрганизацияУпр;
			
			// Ресурсы 
			Движение.Количество	= Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Движение.Стоимость	= 0;
			
			// При возврате товаров поставщику необходимо сформировать проводки на разницу между суммой строки документа 
			// и стоимостью партий, списанных по строке документа
			Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СтруктураПараметров.СтоимостьСписанияБУ = СтруктураПараметров.СтоимостьСписанияБУ + Движение.Стоимость;
			ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
				СтруктураПараметров.СтоимостьСписанияНУ = СтруктураПараметров.СтоимостьСписанияНУ + Движение.Стоимость;
			КонецЕсли; 
			
			Если Движение.Количество < КоличествоОсталосьПогасить Тогда
				КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
			Иначе
				КоэффПоступления = 1;
			КонецЕсли;
			
			// Вспомогательное поле, не являющееся ресурсом, но используемое
			// для формирования записей по переоценке принятого на комиссию.
			Движение.СтоимостьПоступление = СтоимостьПоступлениеОсталосьПогасить * КоэффПоступления;
			СтоимостьПоступлениеОсталосьПогасить = СтоимостьПоступлениеОсталосьПогасить - Движение.СтоимостьПоступление;
			
			// Реквизиты
			Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
			// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
			Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
				Если Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.Реализация Тогда 
					Движение.ДокументДвижения = СтрокаДокумента.ДокументПартии;
					// is ЯннуровВФ нач 20141112
					Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) Тогда 
						Движение.ДокументДвиженияПериод = СтрокаДокумента.ДокументПартии.Дата;
					Иначе
						Движение.ДокументДвиженияПериод = Неопределено;
					КонецЕсли;
					// is ЯннуровВФ кон 20141112
				КонецЕсли;
			КонецЕсли;
			// is ЯннуровВФ кон 20140731
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
			
			// is ЯннуровВФ нач 20141009
			Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
				СтрокаПартии.Количество = ПрежнееЗначениеКоличество - Движение.Количество;
				СтрокаПартии.Стоимость  = ПрежнееЗначениеСтоимость  - Движение.Стоимость;
			Иначе
			// is ЯннуровВФ кон 20141009
				СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
				СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Движение.Стоимость;
			КонецЕсли;
			
			// Заполнение полей, специфических для учета
			ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный);
			
			ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, СтрокаПартии, СтрокаДокумента,РегистрУчета
			,"Списание", неопределено , Неопределено, СтрокаСписанныхТоваров);
			КоличествоОсталосьПогасить = СтароеКоличествоОсталосьПогасить; // восстановим для вывода сообщений
			// is ЯннуровВФ нач 20141009
			Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
				//
			Иначе
			// is ЯннуровВФ кон 20141009
				ТаблицаОстатковПартий.Удалить(СтрокаПартии);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//конец изменений БП 14 
	
	// Восстановим ранее сохраненное количество поступления для движений по НДС
	СтрокаДокумента.КоличествоПоступление = СтрокаСписанныхТоваров.КоличествоПоступление;
	
	// Товара не хватило
	// is ЯннуровВФ нач 20150904 
	//Если (КоличествоОсталосьПогасить > 0) Тогда
	Если (Не СтрокаДокумента.ОтражатьВМеждународномУчете И КоличествоОсталосьПогасить > 0)
	 Или (СтрокаДокумента.ОтражатьВМеждународномУчете И КоличествоОсталосьПогасить <> 0) Тогда
	// is ЯннуровВФ кон 20150904 
		
		СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	Иначе
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) 
			И (СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику)
			И (КоличествоСписанноеПоДокументуПартии < СтрокаДокумента.Количество) Тогда
			СообщитьОНеполномСписанииУказаннойПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры // СписаниеПартий()

// Сообщение о нехватке партий
//
// Параметры:
//	Нет.
//
Процедура СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
	СообщитьОНехваткеПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
	СообщитьОНехваткеПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
КонецПроцедуры // СообщитьОНехваткеПартии()

// Сообщение о неполном списании явно указанной партии
//
// Параметры:
//	Нет.
//
Процедура СообщитьОНеполномСписанииУказаннойПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	СообщитьОНеполномСписанииУказаннойПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
	СообщитьОНеполномСписанииУказаннойПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
	СообщитьОНеполномСписанииУказаннойПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
КонецПроцедуры // СообщитьОНехваткеПартии()

Функция ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ, ПсевдонимТаблицы)
	флПоСредней = ложь;
	Если ТипЗнч(СпособОценкиМПЗ)=Тип("Строка") И ВРег(СпособОценкиМПЗ) = "ПО СРЕДНЕЙ" Тогда
		флПоСредней = истина;
	КонецЕсли;
	Если флПоСредней Тогда
		стрПолеВыборки 		= "";
		стрПолеСортировки 	= "";
	Иначе
		стрПолеВыборки 		= ПсевдонимТаблицы+".ДокументОприходования.Дата КАК ДокументОприходованияДата,";
		стрПолеСортировки 	= "ДокументОприходованияДата"+ ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",";
	КонецЕсли;
	Возврат новый Структура("ДокОприходованияДата_Выбор,ДокОприходованияДата_Сортировка",стрПолеВыборки,стрПолеСортировки);
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ,ВЫПОЛНЯЕМЫЕ ПО РЕЗУЛЬТАТУ СПИСАНИЯ

// Отражение продажи комиссионного товара
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания)
	
	МассивДокументов = Новый Массив;
	
	КодОперации = Перечисления.КодыОперацийПартииТоваров;
	
	Для Сч=1 По 2 Цикл
		
		// Первый раз движения по партиям на складах, второй - по партиям на комиссии
		Если Сч=1 Тогда
			
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Скопировать();
			СписаноИз = "НаСкладах";
			
		Иначе
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Скопировать();
			СписаноИз = "Переданные";
		КонецЕсли;
		
		// Из таблицы удалим движения, не относящиеся к продаже купленных товаров
		Инд=0;
		Пока Инд<ТаблицаСписанныхПартий.Количество() Цикл
			Строка = ТаблицаСписанныхПартий[Инд];
			
			// Товар должен быть комиссионным и списываться (операции определенных типов)
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию 
				
				И ( Строка.КодОперации = КодОперации.Реализация
				ИЛИ Строка.КодОперации = КодОперации.РеализацияРозница
				ИЛИ Строка.КодОперации = КодОперации.РеализацияКомиссия
				ИЛИ Строка.КодОперации = КодОперации.СписаниеНаЗатраты
				ИЛИ Строка.КодОперации = КодОперации.СписаниеПоИнвентаризации
				ИЛИ Строка.КодОперации = КодОперации.Комплектация
				ИЛИ Строка.КодОперации = КодОперации.ВозвратОтПокупателя
				ИЛИ Строка.КодОперации = КодОперации.ВозвратОтПокупателяТекущийМесяц
				
				)Тогда
				
				Инд = Инд+1;
				МассивДокументов.Добавить(Строка.ДокументОприходования);
			Иначе
				ТаблицаСписанныхПартий.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаСписанныхПартий.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ПолныеПрава.ПолучитьПараметрыДокументовОприходования(МассивДокументов, СтруктураПараметров.Период);
		
		СоотвДок = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоотвДок.Вставить(Выборка.Ссылка, Новый Структура("ДоговорПоставки, ВедениеВзаиморасчетов, Сделка, Ссылка, Валюта, Курс, Кратность", Выборка.ДоговорПоставки, Выборка.ВедениеВзаиморасчетов, Выборка.Сделка, Выборка.Ссылка, Выборка.Валюта, Выборка.Курс, Выборка.Кратность));
		КонецЦикла;	
		
		ДоговорПоставки        = Выборка.ДоговорПоставки;
		ВалютаДоговораПоставки = Выборка.Валюта;
		
		ВалютаУпр = Неопределено;
		КурсВалютыУпр = 0;
		КратностьВалютыУпр = 0;
		
		Для Каждого Движение Из ТаблицаСписанныхПартий Цикл
			
			ДвижениеРТ = ДобавитьДвижениеВСтруктуруПараметров("РеализованныеТовары", СтруктураПараметров);
			ДвижениеРТ.Период = СтруктураПараметров.Период;
			
			Если Движение.КодОперации = КодОперации.ВозвратОтПокупателя Тогда
				ДвижениеРТ.ВидДвижения = Движение.ВидДвижения;
				ДвижениеРТ.Количество  = -Движение.Количество;
				
			Иначе
				Если Движение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Приход;
				Иначе
					ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Расход;
				КонецЕсли;
				ДвижениеРТ.Количество = Движение.Количество;
			КонецЕсли;
			
			ДвижениеРТ.Номенклатура = Движение.Номенклатура;
			ДвижениеРТ.ХарактеристикаНоменклатуры = Движение.ХарактеристикаНоменклатуры;
			
			Если ЗначениеЗаполнено(ТаблицаСписания[0].ПоступлениеПриходныйОрдер) Тогда
				//Это корректировка ордерной партии, возмем серию из движений
				ДвижениеРТ.СерияНоменклатуры = Движение.СерияНоменклатуры;
			Иначе	
				// серия номенклатуры в реализованных товарах должна совпадать со списанными товарами
				ДвижениеРТ.СерияНоменклатуры = ТаблицаСписания[Движение.НомерСтрокиСписанныхТоваров-1].СерияНоменклатуры;
			КонецЕсли;	
			
			Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				Если ТипЗнч(ТаблицаСписания[Движение.НомерСтрокиСписанныхТоваров-1].ДокументПередачи) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ДвижениеРТ.ДатаРеализации = ТаблицаСписания[Движение.НомерСтрокиСписанныхТоваров-1].ДокументПередачи.Дата;
					ДвижениеРТ.Покупатель = СтруктураПараметров.Покупатель;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации")
				И ТипЗнч(СтруктураПараметров.Регистратор.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ДвижениеРТ.ДатаРеализации = СтруктураПараметров.Регистратор.ИсправляемыйДокументРеализации.Дата;
				ДвижениеРТ.Покупатель = СтруктураПараметров.Покупатель;
			ИначеЕсли ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ДвижениеРТ.ДатаРеализации = ТаблицаСписания[Движение.НомерСтрокиСписанныхТоваров-1].ДатаСФ;
				ДвижениеРТ.Покупатель = ТаблицаСписания[Движение.НомерСтрокиСписанныхТоваров-1].Покупатель;
			Иначе
				ДвижениеРТ.ДатаРеализации = ДвижениеРТ.Период;
				ДвижениеРТ.Покупатель = СтруктураПараметров.Покупатель;
			КонецЕсли;
			
			ДвижениеРТ.ДокументПоставки	 = Движение.ДокументОприходования;
			
			СтруктураДок = СоотвДок[Движение.ДокументОприходования];
			
			Если СтруктураДок <> Неопределено Тогда
				ДвижениеРТ.ДоговорКонтрагента = СтруктураДок.ДоговорПоставки;
				
				Если СтруктураДок.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
					ИЛИ СтруктураДок.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					
					Если ЗначениеЗаполнено(СтруктураДок.Сделка) Тогда
						ДвижениеРТ.Сделка = СтруктураДок.Сделка;
					Иначе
						ДвижениеРТ.Сделка = Неопределено;
					КонецЕсли;	
				КонецЕсли;
				
				Если Движение.СуммаВыручки<>0 Тогда
					// Пересчет выручки в валюту взаиморасчетов с комитентом
					ДвижениеРТ.Выручка = 
					МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.СуммаВыручки, 
					Движение.ВалютаДокумента, СтруктураДок.Валюта, 
					Движение.КурсДокумента, СтруктураДок.Курс, 
					Движение.КратностьДокумента, СтруктураДок.Кратность);
					
				Иначе // по стоимости принятия на комиссию
					
					Если ВалютаУпр = Неопределено Тогда
						ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
						СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
						КурсВалютыУпр = СтруктураКурсВалюты.Курс;
						КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
					КонецЕсли;
					
					ДвижениеРТ.Выручка = 
					МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.Стоимость, 
					ВалютаУпр, СтруктураДок.Валюта, 
					КурсВалютыУпр, СтруктураДок.Курс, 
					КратностьВалютыУпр, СтруктураДок.Кратность);
				КонецЕсли;
				
				Если Движение.КодОперации = КодОперации.ВозвратОтПокупателя Тогда
					ДвижениеРТ.Выручка = -ДвижениеРТ.Выручка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтрокаДокумента, СтруктураПараметров, Движение)()

// Связанные со списанием движения по упр учету
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьСвязанныеДвиженияУпр(СтрокаДокумента, СтруктураПараметров, Движение)
	
	Если СтрокаДокумента.ОтражатьвУправленческомУчете Тогда
		Если СтрокаДокумента.НеСписывать И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
			И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
			СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту) Тогда
			
			ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьСвязанныеДвиженияУпр()

Процедура ПроведениеКорректировкиРеализации(Ссылка, СтруктураПараметров, ТаблицаСписания)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	
	Отказ = Ложь;
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	
	//начало изменений Ожиганов А. 13.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	ТаблицаПоТоварам =  ДокументОбъект.ПодготовитьСвернутуюТаблицуПоТоварам(ТаблицаПоТоварам);
	//конец изменений 
	
	//m.ionov@a-prof.ru 24/03/2014
	//Прошлым периодом считаем даже корректировки прошлого месяца
	ПрошлыйПериод = Год(СтруктураШапкиДокумента.ДокументРеализацииДата) < Год(СтруктураШапкиДокумента.Дата);
	//ПрошлыйПериод = Не КонецМесяца(СтруктураШапкиДокумента.ДокументРеализацииДата) = КонецМесяца(СтруктураШапкиДокумента.Дата);
	//----- m.ionov@a-prof.ru 
	
	////Бирюков 
	//ТекущаяГраница 	  = Константы.ГраницаПроведенияДокументов.Получить();
	//ДатаКорректировки = СтруктураШапкиДокумента.ДокументРеализацииДата;
	//Если (НЕ СтруктураШапкиДокумента.ИД_Обмена = "") И (ДатаКорректировки < ТекущаяГраница) Тогда
	//	ДатаКорректировки = СтруктураШапкиДокумента.Дата;
	//	СтруктураШапкиДокумента.Вставить("ОтчетностьПодписана", Истина);
	//КонецЕсли;
	////%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	//m.ionov@a-prof.ru 24/03/2014
	//Проводки по корректировки реализации должны делается всегда такие же как в текущем периоде, но дата проводок - дата корректировки
	//За исключением проводки по взаиморасчетам и по НУ учету
	ДатаКорректировки = СтруктураШапкиДокумента.Дата;
	ПрошлыйПериодБУ = Ложь;  //Везде где проводки по БУ - вставил ПрошлыйПериодБУ
	СтруктураШапкиДокумента.Вставить("ОтчетностьПодписана", Ложь);
	ПрошлыйПериодНУ = Ложь;
	//---- m.ionov@a-prof.ru
	
	Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
		
		БУ_Тек = (НЕ ПрошлыйПериодБУ) ИЛИ (ПрошлыйПериодБУ И СтруктураШапкиДокумента.ОтчетностьПодписана);
		НУ_Тек = (НЕ ПрошлыйПериодНУ) ИЛИ СтрокаТЧ.СуммаБУ <= 0;
		
		ОтразитьВУчетеМПЗ = СтрокаТЧ.Количество <> 0;
		ТаблицаПартийБУ = Неопределено;
		ТаблицаПартийНУ = Неопределено;
		
		Если ОтразитьВУчетеМПЗ Тогда
			
			Отбор = Новый Структура("НомерСтрокиДокумента, ОтражатьВБухгалтерскомУчете", СтрокаТЧ.НомерСтроки, Истина);
			ТаблицаПартийБУ = СтруктураПараметров.ТаблицаСписанныхПартий.Скопировать(СтруктураПараметров.ТаблицаСписанныхПартий.НайтиСтроки(Отбор));
			ТаблицаПартийБУ.Колонки.Добавить("Комиссионный");
			Для Каждого СтрокаСписания Из ТаблицаПартийБУ Цикл
				СтрокаСписания.Комиссионный = (СтрокаСписания.СчетУчета = СтрокаСписания.ПринятыеСчетУчетаБУ);
				СтрокаСписания.Количество = СтрокаСписания.Движение.Количество;
				Если СтрокаСписания.ВидОперации = "Возврат" Тогда
					СтрокаСписания.СуммаВыручкиБУ 		= - СтрокаСписания.СуммаВыручкиБУ;
					СтрокаСписания.СуммаНДСВыручкиБУ 	= - СтрокаСписания.СуммаНДСВыручкиБУ;
					Если СтрокаСписания.ТипЗаписи = "Сторно" Тогда
						СтрокаСписания.Количество 			= - СтрокаСписания.Количество;
						СтрокаСписания.Стоимость 			= - СтрокаСписания.Стоимость;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Отбор = Новый Структура("НомерСтрокиДокумента, ОтражатьВНалоговомУчете", СтрокаТЧ.НомерСтроки, Истина);
			ТаблицаПартийНУ = СтруктураПараметров.ТаблицаСписанныхПартий.Скопировать(СтруктураПараметров.ТаблицаСписанныхПартий.НайтиСтроки(Отбор));
			ТаблицаПартийНУ.Колонки.Добавить("Комиссионный");
			Для Каждого СтрокаСписания Из ТаблицаПартийНУ Цикл
				СтрокаСписания.Комиссионный = (СтрокаСписания.СчетУчета = СтрокаСписания.ПринятыеСчетУчетаНУ);
				СтрокаСписания.Количество = СтрокаСписания.Движение.Количество;
				Если СтрокаСписания.ВидОперации = "Возврат" Тогда
					СтрокаСписания.СуммаВыручкиБУ 		= - СтрокаСписания.СуммаВыручкиБУ;
					СтрокаСписания.СуммаНДСВыручкиБУ 	= - СтрокаСписания.СуммаНДСВыручкиБУ;
					Если СтрокаСписания.ТипЗаписи = "Сторно" Тогда
						СтрокаСписания.Количество 			= - СтрокаСписания.Количество;
						СтрокаСписания.Стоимость 			= - СтрокаСписания.Стоимость;
						СтрокаСписания.ВременнаяРазница 	= - СтрокаСписания.ВременнаяРазница;
						СтрокаСписания.ПостояннаяРазница 	= - СтрокаСписания.ПостояннаяРазница;
					КонецЕсли;					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СтрокаТЧ.СуммаБУ <> 0 Тогда
			//Проверим, не является ли товар комиссионным
			Если Не ОтразитьВУчетеМПЗ и СтруктураШапкиДокумента.Дата >= '20140301' Тогда
				Партия = Новый Структура("СуммаСписания, Количество,СуммаБУ,НДС", 0, 0,СтрокаТЧ.СуммаБУ,СтрокаТЧ.НДС);
				ПроводкиБУ = СтруктураПараметров["ДвиженияХозрасчетный"];
				Если (НЕ БУ_Тек) Тогда
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), "БУ", Ложь, Истина, Ложь);
					Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Ложь);
					ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
					Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("БУ", ПроводкиБУ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), СтруктураШапкиДокумента.Организация, ФинРезультат);
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Ложь, Истина);					
				КонецЕсли;
				Если (БУ_Тек) Тогда
					//Коррктировка текущего периода
					//Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериодБУ, Ложь, Ложь);
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериодБУ, ПрошлыйПериод, Ложь);
					Если ПрошлыйПериод Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериодБУ, Ложь, Истина);
					КонецЕсли;
					//---------- m.ionov@a-prof.ru
					Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, ПрошлыйПериодБУ);
				КонецЕсли;
				СтруктураПараметров["ИзмененыДвиженияХозрасчетный"] = Истина;
				
				ПроводкиНУ = СтруктураПараметров["ДвиженияНалоговый"];
				Если (НЕ НУ_Тек) Тогда
					//Корректировка НУ прошлого периода с использованием счетов К
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ",  Ложь, Истина, Ложь);
					ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС - ?(ОтразитьВУчетеМПЗ, Партия.Стоимость, 0);
					Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("НУ", ПроводкиНУ, СтруктураШапкиДокумента.ДокументРеализацииДата, СтруктураШапкиДокумента.Организация, ФинРезультат);
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", Ложь, Ложь, Истина);
				КонецЕсли;
				Если (НУ_Тек) Тогда
					//m.ionov@a-prof.ru 30.05.2014
					//Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата,  "НУ", ПрошлыйПериод, Ложь, Ложь);
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", ПрошлыйПериодНУ, ПрошлыйПериод, Ложь);
					Если ПрошлыйПериод Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", ПрошлыйПериодНУ, Ложь, Истина);
					КонецЕсли;
					//---------- m.ionov@a-prof.ru
					Если НЕ БУ_Тек Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериодНУ, Ложь, Ложь);
					КонецЕсли;
				КонецЕсли;
				Если (БУ_Тек) И (НЕ НУ_Тек) Тогда
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериодНУ, Ложь, Ложь);
				КонецЕсли;
				СтруктураПараметров["ИзмененыДвиженияНалоговый"] = Истина;				
				
				продолжить;
			Иначе	
				
				ТаблицаПартийБУ = ПолучитьПартииРеализованныхТоваровДляКорректировки(СтруктураШапкиДокумента, СтрокаТЧ);
				Если ТаблицаПартийБУ.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ТаблицаПартийБУ.Колонки.Добавить("СуммаВыручкиБУ");
				ТаблицаПартийБУ.Колонки.Добавить("СуммаНДСВыручкиБУ");
				МассивКоэфф = ТаблицаПартийБУ.ВыгрузитьКолонку("Количество");
				ТаблицаПартийБУ.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.СуммаБУ, МассивКоэфф, , Ложь), 	"СуммаВыручкиБУ");
				ТаблицаПартийБУ.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДС, МассивКоэфф, , Ложь), 		"СуммаНДСВыручкиБУ");
				
				//Разное распределение товаров на собственный и комиссионный в БУ и НУ не поддерживаем
				ТаблицаПартийНУ = ТаблицаПартийБУ.Скопировать();
			конецЕсли;
		КонецЕсли;
		
		Если ТаблицаПартийБУ <> Неопределено И ТаблицаПартийБУ.Количество() > 0 Тогда
			ДополнитьТаблицуПартийДляКорректировки(ТаблицаПартийБУ, СтрокаТЧ);
			ПроводкиБУ = СтруктураПараметров["ДвиженияХозрасчетный"];
			Для Каждого Партия Из ТаблицаПартийБУ Цикл
				//Blik 020615 н 40189  
				попытка
					Если ТипЗнч(ссылка)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
						Партия.подразделениеорганизации = ПРГ_Регламентый.ПолучитьЗатратноеПодразделениеОрганизации(ссылка.подразделение);	
					КонецЕсли;
				исключение
				конецпопытки;
				//Blik 020615 к 40189

				//начало изменений
				Если Партия.Комиссионный = Null Тогда
					Партия.Комиссионный = Ложь;
				КонецЕсли;	
				//конец изменений 
				ПараметрыРасчетовСКомитентом = ?(Партия.Комиссионный, ПараметрыРасчетовСКомитентом(Партия.ДокументОприходования), Неопределено);
				Если (НЕ БУ_Тек) Тогда
					//Корректировка БУ прошлого периода с использованием счетов К
					Если ОтразитьВУчетеМПЗ Тогда
						//Бирюков для корректировок за границей ввода остатков
						//						Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.ДокументРеализацииДата, "БУ", Ложь, Истина, Ложь);
						Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиБУ, Партия, ДатаКорректировки, "БУ", Ложь, Истина, Ложь);
						//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
					КонецЕсли;
					Если Партия.Комиссионный Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, Партия, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Истина, Ложь, ПараметрыРасчетовСКомитентом);
					Иначе
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, Партия, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), "БУ", Ложь, Истина, Ложь);
						Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, Партия, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Ложь);
						ФинРезультат = Партия.СуммаБУ - Партия.НДС - ?(ОтразитьВУчетеМПЗ, Партия.Стоимость, 0);
						Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("БУ", ПроводкиБУ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), СтруктураШапкиДокумента.Организация, ФинРезультат);
					КонецЕсли;
					//Возврат корректировки со счета К
					Если ОтразитьВУчетеМПЗ Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Ложь, Истина);
					КонецЕсли;
					Если Партия.Комиссионный Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, Ложь, Истина, ПараметрыРасчетовСКомитентом);
					Иначе
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Ложь, Истина);
					КонецЕсли;
				КонецЕсли;
				Если (БУ_Тек) Тогда
					//Коррктировка текущего периода
					Если ОтразитьВУчетеМПЗ Тогда						
						Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериодБУ, Ложь, Ложь);
					КонецЕсли;
					Если Партия.Комиссионный Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, Ложь, Ложь, ПараметрыРасчетовСКомитентом);
					Иначе
						//m.ionov@a-prof.ru 24/03/2014
						//Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериодБУ, Ложь, Ложь);
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериодБУ, ПрошлыйПериод, Ложь);
						Если ПрошлыйПериод Тогда
							Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериодБУ, Ложь, Истина);
						КонецЕсли;
						//---------- m.ionov@a-prof.ru
						Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, Партия, СтруктураШапкиДокумента.Дата, ПрошлыйПериодБУ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметров["ИзмененыДвиженияХозрасчетный"] = Истина;
		КонецЕсли;
		
		Если ТаблицаПартийНУ <> Неопределено И ТаблицаПартийНУ.Количество() > 0 И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ДополнитьТаблицуПартийДляКорректировки(ТаблицаПартийНУ, СтрокаТЧ);
			ПроводкиНУ = СтруктураПараметров["ДвиженияНалоговый"];
			Для Каждого Партия Из ТаблицаПартийНУ Цикл
				//начало изменений
				Если Партия.Комиссионный = Null Тогда
					Партия.Комиссионный = Ложь;
				КонецЕсли;	
				//конец изменений 				
				Если (НЕ НУ_Тек) Тогда
					//Корректировка НУ прошлого периода с использованием счетов К
					Если ОтразитьВУчетеМПЗ Тогда
						//Бирюков для корректировок за границей ввода остатков
						//						Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ", Ложь, Истина, Ложь);
						Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиНУ, Партия, ДатаКорректировки, "НУ", Ложь, Истина, Ложь);
						//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
					КонецЕсли;
					Если НЕ Партия.Комиссионный Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ",  Ложь, Истина, Ложь);
						ФинРезультат = Партия.СуммаБУ - Партия.НДС - ?(ОтразитьВУчетеМПЗ, Партия.Стоимость, 0);
						Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("НУ", ПроводкиНУ, СтруктураШапкиДокумента.ДокументРеализацииДата, СтруктураШапкиДокумента.Организация, ФинРезультат);
					КонецЕсли;
					//Возврат корректировки со счета К
					Если ОтразитьВУчетеМПЗ Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "НУ", Ложь, Ложь, Истина);
						Если БУ_Тек Тогда
							Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
						КонецЕсли;
					КонецЕсли;
					Если НЕ Партия.Комиссионный Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "НУ", Ложь, Ложь, Истина);
					КонецЕсли;
				КонецЕсли;
				Если (НУ_Тек) Тогда
					//Коррктировка текущего периода
					Если ОтразитьВУчетеМПЗ Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "НУ", ПрошлыйПериодНУ, Ложь, Ложь);
						Если НЕ БУ_Тек Тогда
							Документы.КорректировкаРеализации.СформироватьПроводкиПоТовару(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериодНУ, Ложь, Ложь);
						КонецЕсли;
					КонецЕсли;
					Если НЕ Партия.Комиссионный Тогда
						//m.ionov@a-prof.ru 30.05.2014
						//Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата,  "НУ", ПрошлыйПериод, Ложь, Ложь);
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "НУ", ПрошлыйПериодНУ, ПрошлыйПериод, Ложь);
						//Объединили в одну проводку
						//Если ПрошлыйПериод Тогда
						//	Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "НУ", ПрошлыйПериодНУ, Ложь, Истина);
						//КонецЕсли;
						//---------- m.ionov@a-prof.ru
						Если НЕ БУ_Тек Тогда
							Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериодНУ, Ложь, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если (БУ_Тек) И (НЕ НУ_Тек) Тогда
					//Коррктировка текущего периода
					Если НЕ Партия.Комиссионный Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, Партия, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериодНУ, Ложь, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметров["ИзмененыДвиженияНалоговый"] = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПартииРеализованныхТоваровДляКорректировки(СтруктураШапкиДокумента, СтрокаТЧ)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", 				СтруктураШапкиДокумента.ДокументРеализацииСсылка);
	Запрос.УстановитьПараметр("ДатаДокументаОтгрузки", 		СтруктураШапкиДокумента.ДокументРеализацииДата);
	Запрос.УстановитьПараметр("ДатаДокумента", 				СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация", 				СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Номенклатура", 				СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
	Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
		Запрос.УстановитьПараметр("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ДокументОприходования,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета.Забалансовый КАК Комиссионный,
	|	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход) КАК Количество,
	|	СУММА(-ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(
	|			&ДатаДокументаОтгрузки,
	|			&ДатаДокумента,
	|			Регистратор,
	|			Организация = &Организация
	|				И Номенклатура = &Номенклатура
	|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|				И СерияНоменклатуры = &СерияНоменклатуры) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
	|ГДЕ
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ДокументОприходования";
	
	//m.ionov@a-prof.ru 24.03.2014
	//Добавил в запрос получение остатков
	//Возврат Запрос.Выполнить().Выгрузить();
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ДокументОприходования,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета.Забалансовый КАК Комиссионный,
		|	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоОстаток) КАК Количество,
		|	СУММА(-ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьОстаток) КАК Стоимость
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
		|			&ДатаДокумента,
		|			Организация = &Организация
		|				И Номенклатура = &Номенклатура
		|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|				И СерияНоменклатуры = &СерияНоменклатуры) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ДокументОприходования,
		|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета.Забалансовый";
		
		Результат = Запрос.Выполнить().Выгрузить();		
		
	КонецЕсли;
	
	Возврат Результат;
	//----- m.ionov@a-prof.ru
	
КонецФункции

// По документу партии определяется комитент, договор и счет расчетов с ним.
// Возвращаемое значение:
//   Структура – список параметров (комитент, договор
//	 с комитентом и счет расчетов с комитентом).
//
Функция ПараметрыРасчетовСКомитентом(Партия, Отказ = Ложь, Заголовок = "")
	
	Параметры = Новый Структура();
	Параметры.Вставить("Комитент",Справочники.Контрагенты.ПустаяСсылка());
	Параметры.Вставить("ДоговорКомиссии",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Параметры.Вставить("СчетРасчетовСКомитентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Параметры.Вставить("СчетРасчетовПоАвансамСКомитентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Параметры.Вставить("ВалютаРасчетовСКомитентом", Справочники.Валюты.ПустаяСсылка());
	
	ОрганизацияПоПартии = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Комитент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРасчетовСКонтрагентом.Организация,
	|	ДокументРасчетовСКонтрагентом.Контрагент,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента,
	|	Неопределено,
	|	Неопределено,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.Ссылка = &Партия";
	
	Запрос.УстановитьПараметр("Партия", Партия);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Параметры.Вставить("Комитент",     				РезультатЗапроса.Комитент);
		Параметры.Вставить("ДоговорКомиссии",      		РезультатЗапроса.Договор);
		Параметры.Вставить("СчетРасчетовСКомитентом",	РезультатЗапроса.СчетРасчетов);
		Параметры.Вставить("СчетРасчетовПоАвансамСКомитентом",	РезультатЗапроса.СчетАвансов);
		Параметры.Вставить("ВалютаРасчетовСКомитентом", РезультатЗапроса.ВалютаРасчетов);
		ОрганизацияПоПартии = РезультатЗапроса.Организация;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры.СчетРасчетовСКомитентом) тогда
		СчетаРасчетов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ОрганизацияПоПартии, Параметры.Комитент, Параметры.ДоговорКомиссии);
		Параметры.Вставить("СчетРасчетовСКомитентом",	СчетаРасчетов.СчетРасчетовСКомитентом);
		Если НЕ ЗначениеЗаполнено(Параметры.СчетРасчетовСКомитентом) тогда
			Если НЕ ЗначениеЗаполнено(Партия) тогда
				ОбщегоНазначения.СообщитьОбОшибке("При списании комиссионных товаров не определена партия оприходования.
				|Невозможно определить счет расчетов с комитентом.",Отказ,Заголовок);
			Иначе	
				ОбщегоНазначения.СообщитьОбОшибке("Невозможно определить счет расчетов с комитентом при списании комиссионных товаров по партии """+Строка(Партия)+"""",Отказ,Заголовок);
			КонецЕслИ;
		Иначе
			Если НЕ ЗначениеЗаполнено(Партия) тогда
				ОбщегоНазначения.СообщитьОбОшибке("При списании комиссионных товаров не определена партия оприходования.
				|Счет расчетов с комитентом определяется по общим настройкам.",,Заголовок);
			Иначе	
				ОбщегоНазначения.СообщитьОбОшибке("В партии комиссионных товаров """+Строка(Партия)+""" не указан счет учета расчетов с комитентом.
				|Счет расчетов с комитентом определяется по реквизитам партии (организация, контрагент, договор).",,Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции // ПараметрыРасчетовСКомитентом()

Процедура ДополнитьТаблицуПартийДляКорректировки(ТаблицаПартий, СтрокаТЧ)
	
	МассивКоэфф = ТаблицаПартий.ВыгрузитьКолонку("Количество");
	
	Если ТаблицаПартий.Колонки.Найти("СуммаБУ") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СуммаБУ");
		Если ТаблицаПартий.Колонки.Найти("СуммаВыручкиБУ") = Неопределено Тогда
			ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.СуммаБУ, МассивКоэфф, , Ложь), "СуммаБУ");
		Иначе
			ТаблицаПартий.ЗагрузитьКолонку(ТаблицаПартий.ВыгрузитьКолонку("СуммаВыручкиБУ"), "СуммаБУ");
		КонецЕсли;
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("НДС") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("НДС");
		Если ТаблицаПартий.Колонки.Найти("СуммаНДСВыручкиБУ") = Неопределено Тогда
			ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДС, МассивКоэфф, , Ложь), "НДС");
		Иначе
			ТаблицаПартий.ЗагрузитьКолонку(ТаблицаПартий.ВыгрузитьКолонку("СуммаНДСВыручкиБУ"),	"НДС");
		КонецЕсли;
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("СуммаВал") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СуммаВал");
		ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.СуммаВал, МассивКоэфф, , Ложь), "СуммаВал");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("НДСВал") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("НДСВал");
		ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДСВал, МассивКоэфф, , Ложь), "НДСВал");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("НДСИтоговый") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("НДСИтоговый");
		ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДСИтоговый, МассивКоэфф, , Ложь), "НДСИтоговый");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("НДСДоИзм") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("НДСДоИзм");
		ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДСДоИзм, МассивКоэфф, , Ложь), "НДСДоИзм");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("НДСДоКорр") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("НДСДоКорр");
		ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДСДоКорр, МассивКоэфф, , Ложь), "НДСДоКорр");
	КонецЕсли;
	
	Если ТаблицаПартий.Колонки.Найти("СчетДоходовБУ") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СчетДоходовБУ");
		ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СчетДоходовБУ, "СчетДоходовБУ");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("СчетДоходовНУ") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СчетДоходовНУ");
		ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СчетДоходовНУ, "СчетДоходовНУ");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("Номенклатура") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("Номенклатура");
		ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.Номенклатура, "Номенклатура");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("СубконтоБУ") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СубконтоБУ");		
	КонецЕсли;
	ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СубконтоБУ, "СубконтоБУ");
	Если ТаблицаПартий.Колонки.Найти("СубконтоНУ") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СубконтоНУ");
		ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СубконтоНУ, "СубконтоНУ");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СтавкаНДС");
		ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СтавкаНДС, "СтавкаНДС");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("СчетРасходовБУ") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СчетРасходовБУ");
		ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СчетРасходовБУ, "СчетРасходовБУ");
	КонецЕсли;
	Если ТаблицаПартий.Колонки.Найти("СчетРасходовНУ") = Неопределено Тогда
		ТаблицаПартий.Колонки.Добавить("СчетРасходовНУ");
		ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СчетРасходовНУ, "СчетРасходовНУ");
	КонецЕсли;
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////
// КОРРЕСПОНДИРУЮЩИЕ СПИСАНИЮ ДВИЖЕНИЯ (ДЕБЕТ)

//Ответственное хранение

//Процедура ОприходоватьТоварПринятыйНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Строка)

//	ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Строка);
//	ОприходоватьТоварПринятыйНаОтветственноеХранениеБух(СтрокаДокумента, СтруктураПараметров, Строка);
//	
//КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение

Процедура ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Учет = "Упр";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(Движение,Строка);
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;
	
	Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
		
		Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;
	Иначе
		
		Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка;
	КонецЕсли;
	
КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение


Процедура ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка)
	
	// Свойства из основного движения
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	
	// Свойства кор. движения
	Движение.Активность  = Истина;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
КонецПроцедуры

// Движение по себестоимости продаж
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая")
	
	Если СтрокаДокумента.ВедениеУчетаПоПроектам Тогда
		
		// Создадим таблицу значений для передачи в ОтразитьДвиженияПоПроектам
		
		ТаблицаПоТоварам = Новый ТаблицаЗначений;
		
		Для каждого Колонка ИЗ СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки Цикл
			
			ТаблицаПоТоварам.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
		КонецЦикла;
		
		Если НЕ (ТипЗнч(СтрокаДокумента.Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") 
			И СтрокаДокумента.Проект.МетодРаспределения <> Перечисления.МетодыРаспределенияПоПроектам.РегламентнымДокументом) Тогда
			
			ТаблицаПоТоварам.Колонки.Добавить("Проект");
			ТаблицаПоТоварам.ЗаполнитьЗначения(СтрокаДокумента.Проект,"Проект");
			
		КонецЕсли;
		
		ТаблицаПоТоварам.Колонки.Добавить("СтоимостьБезСкидок",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		НоваяСтрока = ТаблицаПоТоварам.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		ТаблицаДвижений = Новый ТаблицаЗначений;
		
		Для каждого Колонка ИЗ СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость.Колонки Цикл
			
			ТаблицаДвижений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
		КонецЦикла;
		
		ТаблицаДвижений.Колонки.Добавить("Заказ");
		
		ТаблицаДвижений.Колонки.Добавить("СтатусПартии");
		
		ТаблицаДвижений.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		ТаблицаДвижений.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		ТаблицаДвижений.Колонки.Добавить("НомерКорСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
		
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварам,ТаблицаДвижений,СтрокаДокумента.Проект,СтруктураПараметров.Период,"Продажи");
		
		НуженНомерКорСтроки = Истина;
		Для Каждого Движение из ТаблицаДвижений Цикл
			СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
			Если НуженНомерКорСтроки тогда
				НуженНомерКорСтроки = Ложь;
				Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи);
	
КонецПроцедуры // СписаниеНаСебестоимостьПродажУпр()

Процедура СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая")
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПродажиСебестоимость", СтруктураПараметров);
	
	Если ТипЗаписи = "Сторно" Тогда
		КоэффициентСторно = -1;
	Иначе
		КоэффициентСторно = 1;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Движение,Строка);
	
	Движение.Активность = Истина;
	
	Движение.Организация = СтруктураПараметров.ОрганизацияУпр;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		
		Движение.ЗаказПокупателя = СтрокаДокумента.ЗаказСписания;
		
	ИначеЕсли ЗначениеЗаполнено(Строка.Заказ) Тогда
		
		Движение.ЗаказПокупателя = Строка.Заказ;
		
	Иначе
		
		Движение.ЗаказПокупателя = Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта) Тогда
		
		Движение.Номенклатура = СтрокаДокумента.НоменклатураКомплекта;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаКомплекта) Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаКомплекта;
		
	КонецЕсли;	
	
	Движение.Подразделение = СтрокаДокумента.Подразделение;
	
	Если (ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта)) И (НЕ СтрокаДокумента.Количество = 0) Тогда
		Движение.Количество = КоэффициентСторно*СтрокаДокумента.КоличествоКомплекта*Строка.Количество/СтрокаДокумента.Количество;
	Иначе
		Движение.Количество = КоэффициентСторно*Строка.Количество;
	КонецЕсли;
	
	Если НЕ Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
		Движение.Стоимость  = КоэффициентСторно*Строка.Стоимость;
	Иначе
		Если ЗначениеЗаполнено(СтрокаДокумента.ВалютаДокумента) Тогда
			
			ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
			СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
			КурсВалютыУпр = СтруктураКурсВалюты.Курс;
			КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
			
			НеВключатьНДСВСтоимостьПартий = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("НеВключатьНДСВСтоимостьПартий", "Упр", СтруктураПараметров);
			НеВключатьНДСВСтоимостьПартий = ?(НеВключатьНДСВСтоимостьПартий = Неопределено, Ложь, НеВключатьНДСВСтоимостьПартий);
			Если НеВключатьНДСВСтоимостьПартий Тогда
				ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				СуммаИсключаемогоНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДСВыручкиБУ, 
				ВалютаРегл, ВалютаУпр, 
				1, КурсВалютыУпр,
				1, КратностьВалютыУпр);
			Иначе
				СуммаИсключаемогоНДС = 0;
			КонецЕсли;	
			
			Движение.Стоимость = КоэффициентСторно*
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВыручки, 
			СтрокаДокумента.ВалютаДокумента, ВалютаУпр, 
			СтрокаДокумента.КурсДокумента, КурсВалютыУпр,
			СтрокаДокумента.КратностьДокумента, КратностьВалютыУпр) - СуммаИсключаемогоНДС;
			
		Иначе	
			
			НеВключатьНДСВСтоимостьПартий = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("НеВключатьНДСВСтоимостьПартий", "Упр", СтруктураПараметров);
			НеВключатьНДСВСтоимостьПартий = ?(НеВключатьНДСВСтоимостьПартий = Неопределено, Ложь, НеВключатьНДСВСтоимостьПартий);
			Если НеВключатьНДСВСтоимостьПартий Тогда
				ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
				СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
				КурсВалютыУпр = СтруктураКурсВалюты.Курс;
				КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
				
				ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				СуммаИсключаемогоНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДСВыручкиБУ, 
				ВалютаРегл, ВалютаУпр, 
				1, КурсВалютыУпр,
				1, КратностьВалютыУпр);
			Иначе
				СуммаИсключаемогоНДС = 0;
			КонецЕсли;	
			
			Движение.Стоимость = КоэффициентСторно*Строка.СуммаВыручки - СуммаИсключаемогоНДС;
			
		КонецЕсли;	
	КонецЕсли;
	
	Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;
	
КонецПроцедуры//СформироватьДвиженияСписанияНаСебестоимостьПродажУпр()

// Склад

Процедура ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров)
	
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям тогда
		
		// Если задана новая серия или установлен флаг изменить серию - подставляем ее
		Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатурыНовая) Или СтрокаДокумента.ИзменитьСерию Тогда
			
			Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
			
		Иначе
			
			// Серия номенклатуры в движении списания есть, только если списано со склада 
			Если СписаноИз = "НаСкладах" Тогда
				
				Движение.СерияНоменклатуры	= Строка.СерияНоменклатуры;
				
			КонецЕсли;
			// При возврате товара от комиссионера или переработчика серия есть в строке документа
			Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера  
				ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПереработчика Тогда
				
				Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Движение.СерияНоменклатуры	= Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры//ЗаполнитьСериюВДвижении()

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	// Измерения
	ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.Организация 	= Строка.Организация;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		
	КонецЕсли;
	
	ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задано новое качество, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество = СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество = Справочники.Качество.Новый;
	КонецЕсли;
	
	Движение.ДокументОприходования = Строка.ДокументОприходования;
	
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества 
		Тогда
		
		Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
		
	КонецЕсли;
	
	Движение.СтатусПартии = Строка.СтатусПартии;
	
	// Новая номенклатура-для комплектации: меняется все
	// Аналогично обрабатывается включение оборудования в состав МПЗ
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура = СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		
		СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
		КонецЕсли;
		
		// Комплект(ующее) приходуется со статусом партии, указанным в документе
		// Если значение не заполнено - статус партии "купленный"
		// Статус партии "по ордеру" не меняем
		Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация 
			Или СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВключениеАктиваВСоставМПЗ 
			Тогда
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ПоОрдеру Тогда
				Движение.СтатусПартии = Строка.СтатусПартии;
			Иначе	
				Если ЗначениеЗаполнено(СтрокаДокумента.СтатусПартииНовый) тогда
					Движение.СтатусПартии = СтрокаДокумента.СтатусПартииНовый;
				Иначе
					Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Ресурсы
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Если Строка.Количество < 0 Тогда
			Движение.Количество	= -Строка.КоличествоПоступление;
		Иначе	
			Движение.Количество	= Строка.КоличествоПоступление;
		КонецЕсли;	
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость = Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
КонецПроцедуры//ПоступлениеНаСкладУпр()

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеНаСкладБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	// Измерения
	ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		
	КонецЕсли;
	
	ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задано новое качество, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество	= СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		
		Движение.Качество = Справочники.Качество.Новый;
		
	КонецЕсли;
	
	Движение.ДокументОприходования = Строка.ДокументОприходования;
	
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества 
		Тогда
		
		Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
		
	КонецЕсли;
	
	// Если счет не изменился, может быть указан только счет учета
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ) Тогда
		Движение.СчетУчета = СтрокаДокумента.КорСчетБУ;
	Иначе
		Движение.СчетУчета = СтрокаДокумента.СчетУчетаБУ;
	КонецЕсли;
	
	// Если списан принятый на комиссию товар, то он приходуется на специально указанный счет
	Если ((ТипЗНЧ(СтрокаДокумента) = Тип("СтрокаТаблицыЗначений")) И (НЕ СтрокаДокумента.Владелец().Колонки.Найти("ПринятыеСчетУчетаБУ") = Неопределено))
		ИЛИ ((ТипЗНЧ(СтрокаДокумента) = Тип("Структура")) И СтрокаДокумента.Свойство("ПринятыеСчетУчетаБУ"))	Тогда
		Если Строка.СчетУчета=СтрокаДокумента.ПринятыеСчетУчетаБУ Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетБУ) Тогда
				Движение.СчетУчета = СтрокаДокумента.ПринятыеКорСчетБУ;
			Иначе
				Движение.СчетУчета = СтрокаДокумента.ПринятыеСчетУчетаБУ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Движение.Организация = СтрокаДокумента.Организация;
	
	// Новая номенклатура-для комплектации: меняется все
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		
		СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Ресурсы
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Движение.Количество	= Строка.КоличествоПоступление;
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если ((ТипЗНЧ(СтрокаДокумента) = Тип("СтрокаТаблицыЗначений")) И (НЕ СтрокаДокумента.Владелец().Колонки.Найти("СтоимостьПоступление") = Неопределено))
		ИЛИ ((ТипЗНЧ(СтрокаДокумента) = Тип("Структура")) И СтрокаДокумента.Свойство("СтоимостьПоступление")) Тогда
		Если Строка.СтоимостьПоступление<>0 Тогда
			
			Движение.Стоимость = Строка.СтоимостьПоступление;
			
		КонецЕсли;
	КонецЕсли;	
	
	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
КонецПроцедуры//ПоступлениеНаСкладБух

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеНаСкладНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Нал";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		
	КонецЕсли;
	
	ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задана новыя качество, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество	= СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество	= Справочники.Качество.Новый;
	КонецЕсли;
	
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества 
		Тогда
		
		Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
		
	КонецЕсли;
	
	// Списание со счета 10.МЦ обрабатывается особым образом
	Если Строка.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ тогда
		Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	Иначе	
		// Если счет не изменился, может быть указан только счет учета
		Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетНУ) Тогда
			Движение.СчетУчета = СтрокаДокумента.КорСчетНУ;
		Иначе
			Движение.СчетУчета = СтрокаДокумента.СчетУчетаНУ;
		КонецЕсли;
	КонецЕсли;
	
	// Если списан принятый на комиссию товар, то он приходуется на специально указанный счет
	Если Строка.СчетУчета=СтрокаДокумента.ПринятыеСчетУчетаНУ Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетНУ) Тогда
			Движение.СчетУчета		= СтрокаДокумента.ПринятыеКорСчетНУ;
		Иначе
			Движение.СчетУчета		= СтрокаДокумента.ПринятыеСчетУчетаНУ;
		КонецЕсли;
	КонецЕсли;
	
	Движение.Организация        = СтрокаДокумента.Организация;
	
	// Новая номенклатура-для комплектации: меняется все
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		
		СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Ресурсы
	Движение.Количество	= Строка.Количество;
	
	Движение.Стоимость	= Строка.Стоимость;
	Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница;
	Движение.ВременнаяРазница	= Строка.ВременнаяРазница;
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Движение.Количество	= Строка.КоличествоПоступление;
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость = Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
КонецПроцедуры//ПоступлениеНаСкладНал

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеНаСкладМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);		
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		
	КонецЕсли;
	
	ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задана новыя качество, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество	= СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество	= Справочники.Качество.Новый;
	КонецЕсли;
	
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества 
		Тогда
		
		Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетМУ) Тогда
		Движение.СчетУчета	= СтрокаДокумента.КорСчетМУ;
	Иначе
		Движение.СчетУчета	= СтрокаДокумента.СчетУчетаМУ;
	КонецЕсли;
	
	Движение.Организация        = СтрокаДокумента.Организация;
	
	// Новая номенклатура-для комплектации: меняется все
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		
		СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Ресурсы
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Движение.Количество	= Строка.КоличествоПоступление;
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость		= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
	// is ЯннуровВФ нач 20141007
	Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда 
		ИмяРегистра = ПолучитьИмяРегистра("ПартииТоваров", "НаСкладах", СтрокаДокумента);
		Если ЗначениеЗаполнено(ИмяРегистра) Тогда 
			
			СтруктураИзмерений = СтруктураПараметров[ИмяРегистра + "СтруктураИзмерений"];
			ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистра + "ТаблицаОстатков"];
			
			ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтруктураИзмерений, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			СтрокаПартии.Количество = СтрокаПартии.Количество + Движение.Количество;
			СтрокаПартии.Стоимость = СтрокаПартии.Стоимость + Движение.Стоимость;
			
		КонецЕсли;
	КонецЕсли;
	// is ЯннуровВФ кон 20141007

КонецПроцедуры//ПоступлениеНаСкладМеж

//Процедура изменяет вид склада в движениях по партионным регистрам 
Процедура ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз)
	//m.ionov@a-prof.ru 19.02.2014
	//Если ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", Учет, СтруктураПараметров) = Истина Тогда
	Если (ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", Учет, СтруктураПараметров) = Истина)
		ИЛИ (Учет = "Бух" и (СтрокаДокумента.СчетУчетаБУ.Забалансовый ИЛИ СтрокаДокумента.КорСчетБУ.Забалансовый)) Тогда
		// Если движение по заказу на переработку, то склад может не заполняться
		ВидЗаказа = ПрочитатьРеквизитДокумента("ВидОперации", СтрокаДокумента.ЗаказСписания);
		
		Если ВидЗаказа = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			// В движении склад не заполняется в двух случаях: 
			// - либо поступление - не со склада
			// - либо поступление - со склада, но исходный склад не заполнен
			Если НЕ (СписаноИз = "НаСкладах") ИЛИ НЕ ЗначениеЗаполнено(Строка.Склад) Тогда
				Движение.Склад	= Неопределено;
				Возврат;
			КонецЕсли
		КонецЕсли;
		
		// Если задан новый склад поступления, подставляем его
		Если ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
			Движение.Склад 	= СтрокаДокумента.СкладПолучатель;
		ИначеЕсли СписаноИз = "НаСкладах" Тогда
			// Склад в движении есть, только если списано со склада
			
			Движение.Склад	= Строка.Склад;
		Иначе
			Движение.Склад 	= СтрокаДокумента.Склад;
		КонецЕсли;
	Иначе
		Движение.Склад      = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Переданные на комиссию

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.Организация 			= Строка.Организация;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Движение.СтатусПартии	    = Строка.СтатусПартии;
	Движение.СтатусПередачи		= СтрокаДокумента.СтатусПередачи;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;
	
	// Ресурсы
	Движение.Количество				= Строка.Количество;
	
	Движение.Стоимость	= Строка.Стоимость;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];
	
КонецПроцедуры

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	// Если счет не изменился, может быть указан только счет учета
	
	Если Строка.СчетУчета = СтрокаДокумента.СчетУчетаБУ Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ) Тогда
			Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;
		Иначе
			Движение.СчетУчета		= СтрокаДокумента.СчетУчетаБУ;
		КонецЕсли;
		
	ИначеЕсли Строка.СчетУчета = СтрокаДокумента.ПринятыеСчетУчетаБУ Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетБУ) Тогда
			Движение.СчетУчета		= СтрокаДокумента.ПринятыеКорСчетБУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Движение.Организация        = СтрокаДокумента.Организация;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;
	
	// Ресурсы
	Движение.Количество				= Строка.Количество;
	
	Движение.Стоимость	= Строка.Стоимость;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];
	
КонецПроцедуры

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхНал(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Нал";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	// Списание со счета 10.МЦ обрабатывается особым образом
	Если Строка.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ тогда
		Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	ИначеЕсли Строка.СчетУчета = СтрокаДокумента.СчетУчетаНУ Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетНУ) Тогда
			Движение.СчетУчета		= СтрокаДокумента.КорСчетНУ;
		Иначе
			Движение.СчетУчета		= СтрокаДокумента.СчетУчетаНУ;
		КонецЕсли;
	ИначеЕсли Строка.СчетУчета = СтрокаДокумента.ПринятыеСчетУчетаНУ Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетНУ) Тогда
			Движение.СчетУчета		= СтрокаДокумента.ПринятыеКорСчетНУ;
		КонецЕсли;
	КонецЕсли;
	
	Движение.Организация        = СтрокаДокумента.Организация;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи	= СтрокаДокумента.ДокументПередачи;
	
	// Ресурсы
	Движение.Количество				= Строка.Количество;
	
	Движение.Стоимость	= Строка.Стоимость;
	Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница;
	Движение.ВременнаяРазница	= Строка.ВременнаяРазница;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];
	
КонецПроцедуры

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхМеж(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетМУ) Тогда
		Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;
	Иначе
		Движение.СчетУчета		= СтрокаДокумента.СчетУчетаМУ;
	КонецЕсли;
	
	Движение.Организация        = СтрокаДокумента.Организация;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;
	
	// Ресурсы
	Движение.Количество				= Строка.Количество;
	
	Движение.Стоимость	= Строка.Стоимость;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];
	
	// is ЯннуровВФ нач 20150114
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) 
	 И Движение.Номенклатура <> СтрокаДокумента.НоменклатураНовая Тогда 
		Движение.Номенклатура = СтрокаДокумента.НоменклатураНовая;
	КонецЕсли;
	// is ЯннуровВФ кон 20150114
	
	// is ЯннуровВФ нач 20141202
	Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда 
	// is ЯннуровВФ кон 20141202
		ИмяРегистра = ПолучитьИмяРегистра("ПартииТоваров", "Переданные", СтрокаДокумента);
		Если ЗначениеЗаполнено(ИмяРегистра) Тогда 
			
			СтруктураИзмерений = СтруктураПараметров[ИмяРегистра + "СтруктураИзмерений"];
			ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистра + "ТаблицаОстатков"];
			
			ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтруктураИзмерений, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			СтрокаПартии.Количество = СтрокаПартии.Количество + Движение.Количество;
			СтрокаПартии.Стоимость = СтрокаПартии.Стоимость + Движение.Стоимость;
			
		КонецЕсли;
	КонецЕсли;
	// is ЯннуровВФ кон 20141007
	
КонецПроцедуры

// Списание на постоянные затраты

// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Проект = СтрокаДокумента.Проект;
	
	Если СтрокаДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		
		Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам")
			И Проект.МетодРаспределения = Перечисления.МетодыРаспределенияПоПроектам.ПриПроведенииДокументов Тогда
			
			// Создадим таблицу значений для передачи в РаспределитьЗатратыПоПроектам
			
			ТаблицаДвижений = Новый ТаблицаЗначений;
			
			Для каждого Колонка ИЗ СтруктураПараметров.ТаблицаДвиженийЗатратыУпр.Колонки Цикл
				
				ТаблицаДвижений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
				
			КонецЦикла;
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.Сумма = Строка.Стоимость;
			
			ТаблицаДвижений.Колонки.Добавить("НомерКорСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
			ТаблицаДвижений.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			
			УправлениеПроектами.РаспределитьЗатратыПоПроектам(ТаблицаДвижений,НоваяСтрока, НоваяСтрока.Сумма, СтрокаДокумента.Проект,СтруктураПараметров.Период);
			
			НуженНомерКорСтроки = Истина;
			Для Каждого Движение из ТаблицаДвижений Цикл
				Движение.Стоимость = Движение.Сумма;
				СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Движение, Движение.Проект);
				Если НуженНомерКорСтроки тогда
					НуженНомерКорСтроки = Ложь;
					Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтрокаДокумента.ВедениеУчетаПоПроектам тогда
		Проект = Неопределено;
	КонецЕсли;
	
	СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка, Проект);
	
КонецПроцедуры//СписаниеНаПостоянныеЗатратыУпр

Процедура СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка, Проект)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Проект 				= Проект;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, , СтруктураПараметров);
	
	// Ресурсы
	Движение.Сумма				    = Строка.Стоимость;
	
	ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));
	
КонецПроцедуры // СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр


// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	// Ресурсы
	Движение.Сумма	= Строка.Стоимость;
	
	// Реквизиты
	ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));
	
КонецПроцедуры // СписаниеНаПостоянныеЗатратыБух

// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыМеж(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	// Ресурсы
	Движение.Сумма	= Строка.Стоимость;
	
	// Реквизиты
	ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));
	
КонецПроцедуры // СписаниеНаПостоянныеЗатратыМеж


// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыНал(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Нал";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетНУ;
	
	// Ресурсы
	Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница;
	Движение.ВременнаяРазница	= Строка.ВременнаяРазница;
	Движение.Сумма				= Строка.Стоимость;
	
	Ошибка = Ложь;
	Попытка 
		Если СтрокаДокумента.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			Движение.ПостояннаяРазница	= Движение.ПостояннаяРазница + Строка.Стоимость;
			Движение.Сумма				= 0;
		КонецЕсли;
	Исключение
		Ошибка = Истина;
	КонецПопытки;	
	
	Если Ошибка Тогда
		Сообщить("Неправильная ааналитика по статье !!!"+СтрокаДокумента.СтатьяЗатрат);
	КонецЕсли;	
	// Реквизиты
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет];
	
КонецПроцедуры // СписаниеНаПостоянныеЗатратыНал

// Списание в производство

Процедура ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, Организация = Неопределено, СтруктураПараметров)
	
	УчетЗатратПоЗаказамНаПроизводство = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("УчетЗатратПоЗаказамНаПроизводство", Учет, СтруктураПараметров);
	
	// Заказ списания
	ЗаказСписания = Неопределено;
	Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		Если ТипЗнч(СтрокаДокумента.ЗаказСписания) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказСписания = СтрокаДокумента.ЗаказСписания;
		ИначеЕсли ТипЗнч(СтрокаДокумента.ЗаказСписания) = Тип("ДокументСсылка.ЗаказНаПроизводство") И УчетЗатратПоЗаказамНаПроизводство Тогда
			ЗаказСписания = СтрокаДокумента.ЗаказСписания;
		КонецЕсли;
	КонецЕсли;
	
	Движение.Заказ = ЗаказСписания;
	
КонецПроцедуры // ЗаполнитьЗаказВДвижении

// Поступление товаров в незавершенное производство
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеВПроизводствоУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Подразделение 			= СтрокаДокумента.Подразделение;
	Движение.НоменклатурнаяГруппа 	= СтрокаДокумента.НоменклатурнаяГруппа;
	
	Движение.СтатьяЗатрат 			= СтрокаДокумента.СтатьяЗатрат;
	
	Движение.Затрата				= Строка.Номенклатура;
	Движение.ХарактеристикаЗатраты  = Строка.ХарактеристикаНоменклатуры;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
	ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
		Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, Неопределено, СтруктураПараметров);
	
	// Ресурсы
	Движение.Количество = Строка.Количество;
	
	Движение.Стоимость	= Строка.Стоимость;
	
	// Реквизиты
	Движение.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно; 
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];
	
КонецПроцедуры // ПоступлениеВПроизводствоУпр

// Поступление товаров в незавершенное производство
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеВПроизводствоБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение 			= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета              = СтрокаДокумента.КорСчетБУ;
	
	Движение.Затрата				= Строка.Номенклатура;
	Движение.ХарактеристикаЗатраты  = Строка.ХарактеристикаНоменклатуры;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
	ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
		Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	// Ресурсы
	Движение.Количество = Строка.Количество;
	
	Движение.Стоимость = Строка.Стоимость;
	
	// Реквизиты
	Движение.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно; 
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];
	
КонецПроцедуры // ПоступлениеВПроизводствоБух

// Поступление товаров в незавершенное производство
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеВПроизводствоНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Нал";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение 			= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета              = СтрокаДокумента.КорСчетНУ;
	
	Движение.Затрата				= Строка.Номенклатура;
	Движение.ХарактеристикаЗатраты  = Строка.ХарактеристикаНоменклатуры;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
	ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
		Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	// Ресурсы
	Движение.Количество = Строка.Количество;
	
	Если СтрокаДокумента.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
		
		Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница+ Строка.Стоимость;
		Движение.Стоимость = 0;
		
	Иначе
		
		Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница;
		Движение.Стоимость	= Строка.Стоимость;
		
	КонецЕсли;
	
	Движение.ВременнаяРазница	= Строка.ВременнаяРазница;
	
	// Реквизиты
	Движение.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно; 
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];
	
КонецПроцедуры //ПоступлениеВПроизводствоНал

// Поступление товаров в незавершенное производство
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеВПроизводствоМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение			= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета				= СтрокаДокумента.КорСчетМУ;
	
	Движение.Затрата				= Строка.Номенклатура;
	Движение.ХарактеристикаЗатраты	= Строка.ХарактеристикаНоменклатуры;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
	ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
		Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	// Ресурсы
	Движение.Количество = Строка.Количество;
	
	Движение.Стоимость = Строка.Стоимость;
	
	// Реквизиты
	Движение.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];
	
КонецПроцедуры // ПоступлениеВПроизводствоМеж

// Списание на брак

Процедура ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров)
	
	// Сначала заполним свойства называющиеся так же, как в строке документа
	ЗаполнитьЗначенияСвойств(Движение,СтрокаДокумента);
	
	// Свойства с отличающимся названием
	Движение.ХарактеристикаПродукции = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
	Движение.СерияПродукции			 = СтрокаДокумента.СерияНоменклатурыНовая;
	
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	// Свойства из основного движения
	Движение.Сумма       = Строка.Стоимость;
	
	// Реквизиты
	Движение.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.СписаниеПартийВПроизводствоОперативно; 
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиБракВПроизводстве"+Учет];
	
КонецПроцедуры // ЗаполнитьОбщиеСвойстваСписанияНаБрак

// Списание на брак
//
// Параметры
//
Процедура СписаниеНаБракУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);
	
	ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров );
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, , СтруктураПараметров);
	
КонецПроцедуры // СписаниеНаБракУпр

// Списание на брак
//
// Параметры
//
Процедура СписаниеНаБракБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);
	
	ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров);
	
	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
КонецПроцедуры // СписаниеНаБракБух

// Списание на брак
//
// Параметры
//
Процедура СписаниеНаБракНал(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Нал";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);
	
	ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров);
	
	Движение.Подразделение = СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета	   = СтрокаДокумента.КорСчетНУ;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	Если СтрокаДокумента.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
		
		Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница+ Строка.Стоимость;
		Движение.Сумма = 0;
		
	Иначе
		
		Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница;
		
	КонецЕсли; 
	
	Движение.ВременнаяРазница	= Строка.ВременнаяРазница;
	
КонецПроцедуры // СписаниеНаБракНал

// Списание на брак
//
// Параметры
//
Процедура СписаниеНаБракМеж(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);
	
	ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров);
	
	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	// is ЯннуровВФ нач 20141021
	Движение.Продукция = СтрокаДокумента.Номенклатура;
	Движение.ХарактеристикаПродукции = СтрокаДокумента.ХарактеристикаНоменклатуры;
	Движение.СерияПродукции = СтрокаДокумента.СерияНоменклатуры;
	// is ЯннуровВФ кон 20141021
	
КонецПроцедуры // СписаниеНаБракМеж

// Вложения во внеоборотные активы

// Вложения в объекты внеоборотных активов 
//
// Параметры
//
Процедура ВложенияВоВнеоборотныеАктивыУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	// Движение по регистру накопления стоимости объектов строительства
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтроительствоОбъектовОсновныхСредств", СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения         = ВидДвиженияНакопления.Приход;
	
	Движение.ОбъектСтроительства = СтрокаДокумента.ОбъектСтроительства;
	
	Движение.Сумма				 = Строка.Стоимость;
	
	// Реквизиты
	//Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтроительствоОбъектовОсновныхСредств"];
	
	// Движение по регистру учета оборота затрат
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ЗатратыНаСтроительствоОбъектовОсновныхСредств", СтруктураПараметров);
	
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ОбъектСтроительства = СтрокаДокумента.ОбъектСтроительства;
	Движение.СтатьяЗатрат        = СтрокаДокумента.СтатьяЗатрат;
	
	Движение.Сумма				 = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиЗатратыНаСтроительствоОбъектовОсновныхСредств"];
	
	// Реквизиты
	
КонецПроцедуры

// Списание на амортизацию

Процедура СписаниеНаАмортизациюУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Если Учет = "Бух"
		ИЛИ Учет = "Нал" Тогда
		
		Движение.Организация  = СтрокаДокумента.Организация;
		Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		
	КонецЕсли;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];
	
КонецПроцедуры

Процедура СписаниеНаАмортизациюБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Движение.Организация  = СтрокаДокумента.Организация;
	Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];
	
КонецПроцедуры

Процедура СписаниеНаАмортизациюНал(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Нал";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Движение.Организация  = СтрокаДокумента.Организация;
	Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];
	
КонецПроцедуры

// Списание на затраты

Процедура СписаниеНаЗатратыОСУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ОССписанныеНаЗатраты"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиОССписанныеНаЗатраты"+Учет];
	
КонецПроцедуры

Процедура СписаниеНаЗатратыОСБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ОССписанныеНаЗатраты"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Движение.Организация  = СтрокаДокумента.Организация;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиОССписанныеНаЗатраты"+Учет];
	
КонецПроцедуры

// Передача материалов в эксплуатацию

Процедура ПередачаМатериаловВЭксплуатациюУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	ИмяРегистра = "ПартииМатериаловВЭксплуатации"+ "Упр";
	
	// Измерение ФизЛицо в регистрах партии материалов в эксплуатации обязательно для 
	// заполнения.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо) Тогда
		
		Возврат;
		
	КонецЕсли; 
	Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.Подразделение           = СтрокаДокумента.Подразделение;
	Движение.Номенклатура            = Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.СерияНоменклатуры       = Строка.СерияНоменклатуры;
	
	Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;
	Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;
	Движение.НазначениеИспользования = СтрокаДокумента.НазначениеИспользования;
	
	Движение.Количество = Строка.Количество;
	
	Движение.Стоимость  = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра];
	
КонецПроцедуры // ПередачаМатериаловВЭксплуатациюУпр()

Процедура ПередачаМатериаловВЭксплуатациюБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииМатериаловВЭксплуатации"+ Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, Строка);
	
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение           = СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета       		 = СтрокаДокумента.КорСчетБУ;
	
	Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;
	Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;
	Движение.НазначениеИспользования = СтрокаДокумента.НазначениеИспользования;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииМатериаловВЭксплуатации"+ Учет];
	
КонецПроцедуры // ПередачаМатериаловВЭксплуатациюБух()

Процедура ПередачаМатериаловВЭксплуатациюНал(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Нал";
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииМатериаловВЭксплуатации"+ Учет, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(Движение, Строка);
	
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение           = СтрокаДокумента.ПодразделениеОрганизации;
	
	Если Строка.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ тогда
		Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	Иначе
		Движение.СчетУчета = СтрокаДокумента.КорСчетНУ;
	КонецЕсли;
	
	Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;
	Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;
	Движение.НазначениеИспользования = СтрокаДокумента.НазначениеИспользования;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииМатериаловВЭксплуатации"+ Учет];
	
КонецПроцедуры // ПередачаМатериаловВЭксплуатациюНал()

// Общая процедура поступления: маршрутизирует алгоритм поступления
//
Процедура ВыполнитьКорДвижениеУпр(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СебестоимостьПродаж" Тогда
			СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение);			
		ИначеЕсли ПриходоватьВ = "ПроизводственныеРасходы" Тогда
			
			ПоступлениеВПроизводствоУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "БракВПроизводстве" Тогда
			
			СписаниеНаБракУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ВложенияВоВнеоборотныеАктивы" Тогда
			
			ВложенияВоВнеоборотныеАктивыУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "ОбщехозяйственныеРасходы"
			ИЛИ ПриходоватьВ = "КоммерческиеРасходы"
			ИЛИ ПриходоватьВ = "ИздержкиОбращения"
			ИЛИ ПриходоватьВ = "Затраты" Тогда
			
			СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СтоимостьОСПриПринятииКУчету" Тогда
			
			СписаниеНаАмортизациюУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ЗатратыПриПринятииКУчету" Тогда
			
			СписаниеНаЗатратыОСУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ПартииМатериаловВЭксплуатации" Тогда
			
			ПередачаМатериаловВЭксплуатациюУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Общая процедура поступления: маршрутизирует алгоритм поступления
//
Процедура ВыполнитьКорДвижениеРегл(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ПроизводственныеРасходы" Тогда
			
			ПоступлениеВПроизводствоБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "БракВПроизводстве" Тогда
			
			СписаниеНаБракБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		Если ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "ОбщехозяйственныеРасходы" 
			ИЛИ ПриходоватьВ = "КоммерческиеРасходы"
			ИЛИ ПриходоватьВ = "ИздержкиОбращения" Тогда
			
			СписаниеНаПостоянныеЗатратыБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СтоимостьОСПриПринятииКУчету" Тогда
			
			СписаниеНаАмортизациюБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
			
		ИначеЕсли ПриходоватьВ = "ПартииМатериаловВЭксплуатации" Тогда
			
			ПередачаМатериаловВЭксплуатациюБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		Если ПриходоватьВ = "ЗатратыПриПринятииКУчету" Тогда
			
			СписаниеНаЗатратыОСБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхНал(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ПроизводственныеРасходы" Тогда
			
			ПоступлениеВПроизводствоНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "БракВПроизводстве" Тогда
			
			СписаниеНаБракНал(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ПартииМатериаловВЭксплуатации" Тогда
			
			ПередачаМатериаловВЭксплуатациюНал(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СтоимостьОСПриПринятииКУчету" Тогда
			
			СписаниеНаАмортизациюНал(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "ОбщехозяйственныеРасходы" 
			ИЛИ ПриходоватьВ = "КоммерческиеРасходы"
			ИЛИ ПриходоватьВ = "ИздержкиОбращения" Тогда
			
			СписаниеНаПостоянныеЗатратыНал(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Общая процедура поступления: маршрутизирует алгоритм поступления
//
Процедура ВыполнитьКорДвижениеМеж(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхМеж(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ПроизводственныеРасходы" Тогда
			
			ПоступлениеВПроизводствоМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "БракВПроизводстве" Тогда
			
			СписаниеНаБракМеж(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		Если ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "ОбщехозяйственныеРасходы" 
			ИЛИ ПриходоватьВ = "КоммерческиеРасходы"
			ИЛИ ПриходоватьВ = "ИздержкиОбращения" Тогда
			
			СписаниеНаПостоянныеЗатратыМеж(СтрокаДокумента, СтруктураПараметров, Движение);
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Общие

////////////////////////////////////////////////////////////////////////////////
// СПЕЦИФИЧЕСКИЕ ПРОЦЕДУРЫ ДВИЖЕНИЯ ПАРТИЙ ДЛЯ ОПРЕДЕЛЕННЫХ ВИДОВ ДОКУМЕНТОВ

// Процедуры, обслуживающие возврат товара от покупателя
// Возврат товара от комиссионера обслуживается общим случаем списания партий товаров
Процедура ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение(СтруктураПараметров, ДокументПартии, СтрУчет)
	
	Запрос = Новый Запрос;
	Если СтрУчет = "Управленческий" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		|	ПартииТоваровНаСкладах.Склад КАК Склад,
		|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
		|	ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
		|	ПартииТоваровНаСкладах.Заказ КАК Заказ,
		|	ПартииТоваровНаСкладах.Качество КАК Качество,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
		|				ТОГДА ПартииТоваровНаСкладах.Количество
		|			ИНАЧЕ -ПартииТоваровНаСкладах.Количество
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
		|				ТОГДА ПартииТоваровНаСкладах.Стоимость
		|			ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|		КОНЕЦ) КАК Стоимость,
		|	ПартииТоваровНаСкладах.Организация
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	ПартииТоваровНаСкладах.КодОперации = &КодОперации
		|	И (ПартииТоваровНаСкладах.ДокументДвижения = &ДокументПартии
		|			ИЛИ ПартииТоваровНаСкладах.Регистратор = &ДокументПартии)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладах.Номенклатура,
		|	ПартииТоваровНаСкладах.Склад,
		|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладах.СерияНоменклатуры,
		|	ПартииТоваровНаСкладах.ДокументОприходования,
		|	ПартииТоваровНаСкладах.СтатусПартии,
		|	ПартииТоваровНаСкладах.Заказ,
		|	ПартииТоваровНаСкладах.Качество,
		|	ПартииТоваровНаСкладах.Организация";
		
	ИначеЕсли СтрУчет = "Бухгалтерский" тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура КАК Номенклатура,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Склад КАК Склад,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования КАК ДокументОприходования,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Заказ КАК Заказ,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Качество КАК Качество,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ВидДвижения = &ВидДвиженияПриход
		|				ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Количество
		|			ИНАЧЕ -ПартииТоваровНаСкладахБухгалтерскийУчет.Количество
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ВидДвижения = &ВидДвиженияПриход
		|				ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Стоимость
		|			ИНАЧЕ -ПартииТоваровНаСкладахБухгалтерскийУчет.Стоимость
		|		КОНЕЦ) КАК Стоимость,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.СчетУчета,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Организация
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладахБухгалтерскийУчет
		|ГДЕ
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.КодОперации = &КодОперации
		|	И (ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументДвижения = &ДокументПартии
		|			ИЛИ ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор = &ДокументПартии)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Склад,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.СерияНоменклатуры,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Заказ,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Качество,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.СчетУчета,
		|	ПартииТоваровНаСкладахБухгалтерскийУчет.Организация";
		
	Иначе
		Возврат;
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("КодОперации", Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДокументПартии", ДокументПартии);
	
	СтруктураПараметров.Вставить("ТаблицаПартийПринятыхНаОтветственноеХранение"+СтрУчет,Запрос.Выполнить().Выгрузить());
	
	
КонецПроцедуры//ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение()

// Определяет параметры возврата 
//
Процедура ПолучитьПараметрыВозвратаОтПокупателя(СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";
		ВестиПУПоСкладам  = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров);
		СтрУчет			  = "Управленческий";
		НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахБух";
		ВестиПУПоСкладам  = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров);
		СтрУчет			  = "Бухгалтерский";
		НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.СоздатьНаборЗаписей();
		
	ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахНал";
		ВестиПУПоСкладам  = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Нал", СтруктураПараметров);
		СтрУчет			  = "Налоговый";
		НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей();
		
	ИначеЕсли СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахМеж";
		ВестиПУПоСкладам  = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Меж", СтруктураПараметров);
		СтрУчет			  = "Международный";
		НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладахМеждународныйУчет.СоздатьНаборЗаписей();
		
	КонецЕсли;
	
КонецПроцедуры//ПолучитьПараметрыВозвратаОтПокупателя

// Возвращает таблицу партий товаров, которую можно оприходовать документом "Возврат товаров от покупателя"
//
Функция ПолучитьТаблицуЗаписейОснованияВозврата(СтрокаДокумента, СтруктураПараметров, ДокументПартии, НаборОснование, СтрУчет, ИмяРегистраПартии)
	
	// Партии, которые можно вернуть, получаем при первом вызове и помещаем в структуру параметров
	// Затем до конца обработки документа используем таблицы значений из структуры параметров
	ТаблицаЗаписейОснования = Неопределено;
	ТаблицыПартийВозврата = Неопределено;
	
	// В табличной части возврата от покупателя может быть указано произвольное количество документов партии
	Если СтруктураПараметров.Свойство("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата) тогда
		ТаблицаЗаписейОснования = ТаблицыПартийВозврата.Получить(ДокументПартии.УникальныйИдентификатор());
		Если ТаблицаЗаписейОснования <> Неопределено тогда
			Возврат ТаблицаЗаписейОснования;
		КонецЕсли;
	КонецЕсли;
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	
	// Если указан партиеобразующий документ, данные берутся из него
	Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
		
		// Для сообщения о нехватке партии
		
		СтруктураПараметров.Вставить("СтрокаСообщенияНеНайдено", "Не найдено поступление ");
		СтруктураПараметров.Вставить("СтрокаСообщенияДокументПартии", ", по документу партии ");
		// 
		Если ТипЗнч(ДокументПартии)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") тогда
			
			// Движения поступления выполнены с неправильной себестоимостью
			// Правильная себестоимость известна только в конце месяца после расчета себестоимости выпуска
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументВыпуска",ДокументПартии);
			Запрос.УстановитьПараметр("КодОперации",Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
			Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				ЗаполнитьЗапросВозвратПоПоступлениюУпр(Запрос);
			ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ЗаполнитьЗапросВозвратПоПоступлениюБух(Запрос);
			ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
				ЗаполнитьЗапросВозвратПоПоступлениюНал(Запрос);
			Иначе// Международный
				ЗаполнитьЗапросВозвратПоПоступлениюМеж(Запрос);
			КонецЕсли;
			
			ТаблицаЗаписейОснования = Запрос.Выполнить().Выгрузить();
			
		Иначе
			
			Если СтрокаДокумента.ОтражатьВУправленческомУчете 
				И ТипЗнч(ДокументПартии)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				Тогда
				// выберем движения документа партии по регистру "ПартииТоваров" за исключением сторнирующих движений
				ЗапросПоДокументуПартии = Новый Запрос;
				ЗапросПоДокументуПартии.Текст =  "ВЫБРАТЬ
				|	ПартииТоваровНаСкладах.Период,
				|	ПартииТоваровНаСкладах.Регистратор,
				|	ПартииТоваровНаСкладах.Организация,
				|	ПартииТоваровНаСкладах.Номенклатура,
				|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
				|	ПартииТоваровНаСкладах.СерияНоменклатуры,
				|	ПартииТоваровНаСкладах.ДокументОприходования,
				|	ПартииТоваровНаСкладах.СтатусПартии,
				|	ПартииТоваровНаСкладах.Заказ,
				|	ПартииТоваровНаСкладах.Качество,
				|	ПартииТоваровНаСкладах.Количество,
				|	ПартииТоваровНаСкладах.Стоимость
				|ИЗ
				|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
				|ГДЕ
				|	ПартииТоваровНаСкладах.СтатусПартии <> &СтатусПартии
				|	И ПартииТоваровНаСкладах.Регистратор = &Регистратор";
				
				ЗапросПоДокументуПартии.УстановитьПараметр("СтатусПартии",Перечисления.СтатусыПартийТоваров.ПоОрдеру);
				ЗапросПоДокументуПартии.УстановитьПараметр("Регистратор",ДокументПартии);
				ТаблицаЗаписейОснования = ЗапросПоДокументуПартии.Выполнить().Выгрузить();
			Иначе
				НаборОснование.Отбор.Регистратор.Установить(ДокументПартии);
				НаборОснование.Прочитать();
				ТаблицаЗаписейОснования = НаборОснование.Выгрузить();
			КонецЕсли;
		КонецЕсли;
		
		// Если указан документ списания, данные о партиях берутся из него
	Иначе
		// Для сообщения о нехватке партии
		СтруктураПараметров.Вставить("СтрокаСообщенияНеНайдено", "Не найдено ");
		СтруктураПараметров.Вставить("СтрокаСообщенияДокументПартии",  ", списанного документом ");
		
		// Движения реализации могут быть выполнены с неточной или нерассчитанной себестоимостью
		// Кроме того в управленческом учете при ордерной схеме движения реализации может выполнять поступление
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
		МассивРеализация = Новый Массив;
		МассивРеализация.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
		МассивРеализация.Добавить(КодыОпераций.Реализация);
		МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
		МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
		//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
		МассивРеализация.Добавить(КодыОпераций.ПередачаТарыЗалогСтоимость);
		//конец изменений 
		
		Запрос.УстановитьПараметр("КодыСписание",МассивРеализация);
		Запрос.УстановитьПараметр("Регистратор",ДокументПартии);
		// Возврат не может быть раньше реализации
		Запрос.УстановитьПараметр("Период",СтруктураПараметров.Период);
		
		Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
			ЗаполнитьЗапросПоВозвратуУпр(Запрос);
		ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ЗаполнитьЗапросПоВозвратуБух(Запрос);
		ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
			ЗаполнитьЗапросПоВозвратуНал(Запрос);
		Иначе// Международный
			// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
			//ЗаполнитьЗапросПоВозвратуМеж(Запрос);
			Запрос.УстановитьПараметр("Период", СтрокаДокумента.Период);
			ЗаполнитьЗапросПоВозвратуМеж(Запрос, ДокументПартии, СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж);
			// is ЯннуровВФ кон 20140731 
		КонецЕсли;
		
		ТаблицаЗаписейОснования = Запрос.Выполнить().Выгрузить();
		
		ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение(СтруктураПараметров, ДокументПартии, СтрУчет);
		
	КонецЕсли;//Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
	
	// В полученной таблице найдем партии, которые уже возвращались другими возвратами
	ТаблицаЗаписейОснования = ПодготовитьТаблицуЗаписейОснования(ТаблицаЗаписейОснования, СтруктураПараметров, ДокументПартии, СтрУчет);
	
	//m.ionov@a-prof.ru 23/03/2014
	//Для корректировок реализаций получим среднюю себестоимость
	//начало изменений Ожиганов 29.10.2015 возврат по документу продажи 
	//Если ТаблицаЗаписейОснования.Количество() = 0 И ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	//начало изменений Ожиганов 30.10.2015 возврат по документу продажи 
	// добавим получение остатков вне зависимости
	//Если ТаблицаЗаписейОснования.Количество() = 0 И (ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации")
	 //	или СтруктураПараметров.Свойство("ПРГ_ВозвратКакКорректировка")
	 //	)
	  Если (ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации")
	 	или СтруктураПараметров.Свойство("ПРГ_ВозвратКакКорректировка")
	 	)	 
	  Тогда
	  ПРГ_МассивНужнойНом  = СтруктураПараметров.Регистратор.Товары.ВыгрузитьКолонку("Номенклатура"); // переделать на получение из запроса
	  ТаблицаЗаписейОснования.Индексы.Добавить("Номенклатура"); 
	  к = 0;
	  Пока к < ПРГ_МассивНужнойНом.Количество() Цикл
		  Если ТаблицаЗаписейОснования.Найти(ПРГ_МассивНужнойНом[к],"Номенклатура") <> Неопределено Тогда
			  ПРГ_МассивНужнойНом.Удалить(к);
		  Иначе
			  к =  к + 1;
	      КонецЕслИ; 
	  КонецЦикла; 
		 
	//конец изменений 	
	Если ПРГ_МассивНужнойНом.Количество() > 0 Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОстатков",СтруктураПараметров.Период);
		Запрос.УстановитьПараметр("КодОперацииПартииТоваров",КодыОпераций.Реализация);
		Запрос.УстановитьПараметр("Регистратор",ДокументПартии);
		//Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
		Запрос.УстановитьПараметр("Номенклатура",ПРГ_МассивНужнойНом);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Подзапрос.Номенклатура,
		|	Подзапрос.ХарактеристикаНоменклатуры,
		|	Подзапрос.СерияНоменклатуры,
		|	Подзапрос.ДокументОприходования,
		|	Подзапрос.Заказ,
		|	Подзапрос.СтоимостьПоступление,
		|	Подзапрос.Качество,
		|	Подзапрос.ВестиПартионныйУчетПоСериям,
		|	Подзапрос.СчетУчета,
		|	Подзапрос.Организация,
		|	&КодОперацииПартииТоваров КАК КодОперацииПартииТоваров,
		|	&ДатаОстатков КАК Период,
		|	&Регистратор КАК Регистратор,
		|	СУММА(Подзапрос.Количество) КАК Количество,
		|	СУММА(Подзапрос.Стоимость) КАК Стоимость,
		|	СУММА(Подзапрос.ПостояннаяРазница) КАК ПостояннаяРазница,
		|	СУММА(Подзапрос.ВременнаяРазница) КАК ВременнаяРазница
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|		ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ПартииТоваровНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|		ПартииТоваровНаСкладахОстатки.ДокументОприходования КАК ДокументОприходования,
		|		ПартииТоваровНаСкладахОстатки.Заказ КАК Заказ,
		|		0 КАК СтоимостьПоступление,
		|		ПартииТоваровНаСкладахОстатки.Качество КАК Качество,
		|		ПартииТоваровНаСкладахОстатки.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
		|		ПартииТоваровНаСкладахОстатки.СчетУчета КАК СчетУчета,
		|		ПартииТоваровНаСкладахОстатки.Организация КАК Организация,
		|		ПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК Количество,
		|		ПартииТоваровНаСкладахОстатки.СтоимостьОстаток КАК Стоимость,
		|		ПартииТоваровНаСкладахОстатки.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
		|		ПартииТоваровНаСкладахОстатки.ВременнаяРазницаОстаток КАК ВременнаяРазница
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаОстатков, Номенклатура В(&Номенклатура)) КАК ПартииТоваровНаСкладахОстатки) КАК Подзапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	Подзапрос.Номенклатура,
		|	Подзапрос.ХарактеристикаНоменклатуры,
		|	Подзапрос.СерияНоменклатуры,
		|	Подзапрос.ДокументОприходования,
		|	Подзапрос.Заказ,
		|	Подзапрос.СтоимостьПоступление,
		|	Подзапрос.Качество,
		|	Подзапрос.ВестиПартионныйУчетПоСериям,
		|	Подзапрос.СчетУчета,
		|	Подзапрос.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подзапрос.Номенклатура,
		|	Подзапрос.ХарактеристикаНоменклатуры,
		|	Подзапрос.СерияНоменклатуры,
		|	Подзапрос.ДокументОприходования,
		|	Подзапрос.Заказ,
		|	Подзапрос.СтоимостьПоступление,
		|	Подзапрос.Качество,
		|	Подзапрос.ВестиПартионныйУчетПоСериям,
		|	Подзапрос.СчетУчета,
		|	Подзапрос.Организация";
		
		Если Не СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПартииТоваровНаСкладахОстатки.ПостояннаяРазницаОстаток","0");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПартииТоваровНаСкладахОстатки.ВременнаяРазницаОстаток","0");
		КонецЕсли;
		
		Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".СчетУчета",".СтатусПартии");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".ПартииТоваровНаСкладах",".ПартииТоваровНаСкладах"+СтрУчет+"Учет");
		КонецЕсли;	
		
		//начало изменений Ожиганов 30.10.2015 возврат по документу продажи 
		ВремТаблицаЗаписейОснования = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекСтрока Из ВремТаблицаЗаписейОснования Цикл
			 нс = ТаблицаЗаписейОснования.Добавить();
			 ЗаполнитьЗначенияСвойств(нс,ТекСтрока);
		КонецЦикла;	
		//начало изменений Ожиганов 30.10.2015 возврат по документу продажи 
	  конецЕсли;	
		//конец изменений 
	КонецЕсли;
	//------ m.ionov@a-prof.ru 
	
	Если НЕ СтруктураПараметров.Свойство("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата) тогда
		ТаблицыПартийВозврата = Новый Соответствие;
	КонецЕсли;
	
	ТаблицыПартийВозврата.Вставить(ДокументПартии.УникальныйИдентификатор(),ТаблицаЗаписейОснования);
	
	СтруктураПараметров.Вставить("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата);
	
	Возврат ТаблицаЗаписейОснования;
	
КонецФункции// ПолучитьТаблицуЗаписейОснованияВозврата()

Процедура ЗаполнитьЗапросПоВозвратуУпр(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Подзапрос.Номенклатура,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.СтатусПартии,
	|	Подзапрос.Заказ,
	|	СУММА(Подзапрос.Количество) КАК Количество,
	|	СУММА(Подзапрос.Стоимость) КАК Стоимость,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	|		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|		ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
	|		ПартииТоваровНаСкладах.Заказ КАК Заказ,
	|		ПартииТоваровНаСкладах.Количество КАК Количество,
	|		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
	|		0 КАК СтоимостьПоступление,
	|		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
	|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
	|		ПартииТоваровНаСкладах.Период КАК Период,
	|		ПартииТоваровНаСкладах.Качество КАК Качество,
	|		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|		ПартииТоваровНаСкладах.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|		И ПартииТоваровНаСкладах.Период < &Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Номенклатура,
	|		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|		ПартииТоваровНаСкладах.СерияНоменклатуры,
	|		ПартииТоваровНаСкладах.ДокументОприходования,
	|		ПартииТоваровНаСкладах.СтатусПартии,
	|		ПартииТоваровНаСкладах.Заказ,
	|		ПартииТоваровНаСкладах.Количество,
	|		ПартииТоваровНаСкладах.Стоимость,
	|		0,
	|		ПартииТоваровНаСкладах.КодОперации,
	|		ПартииТоваровНаСкладах.ДокументДвижения,
	|		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
	|		ПартииТоваровНаСкладах.Качество,
	|		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
	|		ПартииТоваровНаСкладах.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
	|		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.Номенклатура,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.СтатусПартии,
	|	Подзапрос.Заказ,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.Организация
	|УПОРЯДОЧИТЬ ПО
	|	Подзапрос.Номенклатура,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.СтатусПартии,
	|	Подзапрос.Заказ,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.Организация"
	
КонецПроцедуры // ЗаполнитьЗапросПоВозвратуУпр(Запрос)()

Процедура ЗаполнитьЗапросПоВозвратуБух(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Подзапрос.Номенклатура,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.Заказ,
	|	СУММА(Подзапрос.Количество) КАК Количество,
	|	СУММА(Подзапрос.Стоимость) КАК Стоимость,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.СчетУчета,
	|	Подзапрос.Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	|		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|		ПартииТоваровНаСкладах.Заказ КАК Заказ,
	|		ПартииТоваровНаСкладах.Количество КАК Количество,
	|		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
	|		0 КАК СтоимостьПоступление,
	|		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
	|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
	|		ПартииТоваровНаСкладах.Период КАК Период,
	|		ПартииТоваровНаСкладах.Качество КАК Качество,
	|		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
	|		ПартииТоваровНаСкладах.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|		И ПартииТоваровНаСкладах.Период < &Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Номенклатура,
	|		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|		ПартииТоваровНаСкладах.СерияНоменклатуры,
	|		ПартииТоваровНаСкладах.ДокументОприходования,
	|		ПартииТоваровНаСкладах.Заказ,
	|		ПартииТоваровНаСкладах.Количество,
	|		ПартииТоваровНаСкладах.Стоимость,
	|		0,
	|		ПартииТоваровНаСкладах.КодОперации,
	|		ПартииТоваровНаСкладах.ДокументДвижения,
	|		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
	|		ПартииТоваровНаСкладах.Качество,
	|		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
	|		ПартииТоваровНаСкладах.СчетУчета,
	|		ПартииТоваровНаСкладах.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
	|		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.Номенклатура,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.Заказ,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.СчетУчета,
	|	Подзапрос.Организация
	|УПОРЯДОЧИТЬ ПО
	|	Подзапрос.Номенклатура,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.Заказ,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.СчетУчета,
	|	Подзапрос.Организация"
	
КонецПроцедуры // ЗаполнитьЗапросПоВозвратуБух(Запрос)

Процедура ЗаполнитьЗапросПоВозвратуНал(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Подзапрос.Номенклатура,
	|	Подзапрос.Склад,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.Заказ,
	|	СУММА(Подзапрос.Количество) КАК Количество,
	|	СУММА(Подзапрос.Стоимость) КАК Стоимость,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.СчетУчета,
	|	Подзапрос.Организация,
	|	СУММА(Подзапрос.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(Подзапрос.ВременнаяРазница) КАК ВременнаяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	|		ПартииТоваровНаСкладах.Склад КАК Склад,
	|		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|		ПартииТоваровНаСкладах.Заказ КАК Заказ,
	|		ПартииТоваровНаСкладах.Количество КАК Количество,
	|		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
	|		0 КАК СтоимостьПоступление,
	|		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
	|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
	|		ПартииТоваровНаСкладах.Период КАК Период,
	|		ПартииТоваровНаСкладах.Качество КАК Качество,
	|		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
	|		ПартииТоваровНаСкладах.Организация КАК Организация,
	|		ПартииТоваровНаСкладах.ПостояннаяРазница КАК ПостояннаяРазница,
	|		ПартииТоваровНаСкладах.ВременнаяРазница КАК ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|		И ПартииТоваровНаСкладах.Период < &Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Номенклатура,
	|		ПартииТоваровНаСкладах.Склад,
	|		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|		ПартииТоваровНаСкладах.СерияНоменклатуры,
	|		ПартииТоваровНаСкладах.ДокументОприходования,
	|		ПартииТоваровНаСкладах.Заказ,
	|		ПартииТоваровНаСкладах.Количество,
	|		ПартииТоваровНаСкладах.Стоимость,
	|		0,
	|		ПартииТоваровНаСкладах.КодОперации,
	|		ПартииТоваровНаСкладах.ДокументДвижения,
	|		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
	|		ПартииТоваровНаСкладах.Качество,
	|		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
	|		ПартииТоваровНаСкладах.СчетУчета,
	|		ПартииТоваровНаСкладах.Организация,
	|		ПартииТоваровНаСкладах.ПостояннаяРазница,
	|		ПартииТоваровНаСкладах.ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
	|		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.Номенклатура,
	|	Подзапрос.Склад,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.Заказ,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.СчетУчета,
	|	Подзапрос.Организация
	|УПОРЯДОЧИТЬ ПО
	|	Подзапрос.Номенклатура,
	|	Подзапрос.Склад,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.Заказ,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.СчетУчета,
	|	Подзапрос.Организация"
	
КонецПроцедуры // ЗаполнитьЗапросПоВозвратуНал

Процедура ЗаполнитьЗапросПоВозвратуМеж(Запрос,
	// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
	ДокументПартии,
	ТаблицаДвиженийПартий
	// is ЯннуровВФ кон 20140731 
	)
	
	// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	Подзапрос.Номенклатура,
	//			   |	Подзапрос.ХарактеристикаНоменклатуры,
	//			   |	Подзапрос.СерияНоменклатуры,
	//			   |	Подзапрос.ДокументОприходования,
	//			   |	Подзапрос.Заказ,
	//			   |	СУММА(Подзапрос.Количество) КАК Количество,
	//			   |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
	//			   |	Подзапрос.СтоимостьПоступление,
	//			   |	Подзапрос.КодОперацииПартииТоваров,
	//			   |	Подзапрос.Регистратор,
	//			   |	Подзапрос.Период,
	//			   |	Подзапрос.Качество,
	//			   |	Подзапрос.ВестиПартионныйУчетПоСериям,
	//			   |	Подзапрос.СчетУчета,
	//			   |	Подзапрос.Организация
	//			   |ИЗ
	//			   |	(ВЫБРАТЬ
	//			   |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	//			   |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//			   |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	//			   |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	//			   |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
	//			   |		ПартииТоваровНаСкладах.Количество КАК Количество,
	//			   |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
	//			   |		0 КАК СтоимостьПоступление,
	//			   |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
	//			   |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
	//			   |		ПартииТоваровНаСкладах.Период КАК Период,
	//			   |		ПартииТоваровНаСкладах.Качество КАК Качество,
	//			   |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	//			   |		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
	//			   |		ПартииТоваровНаСкладах.Организация КАК Организация
	//			   |	ИЗ
	//			   |		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладах
	//			   |	ГДЕ
	//			   |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	//			   |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	//			   |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	//			   |		И ПартииТоваровНаСкладах.Период < &Период
	//			   |	
	//			   |	ОБЪЕДИНИТЬ ВСЕ
	//			   |	
	//			   |	ВЫБРАТЬ
	//			   |		ПартииТоваровНаСкладах.Номенклатура,
	//			   |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	//			   |		ПартииТоваровНаСкладах.СерияНоменклатуры,
	//			   |		ПартииТоваровНаСкладах.ДокументОприходования,
	//			   |		ПартииТоваровНаСкладах.Заказ,
	//			   |		ПартииТоваровНаСкладах.Количество,
	//			   |		ПартииТоваровНаСкладах.Стоимость,
	//			   |		0,
	//			   |		ПартииТоваровНаСкладах.КодОперации,
	//			   |		ПартииТоваровНаСкладах.ДокументДвижения,
	//			   |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
	//			   |		ПартииТоваровНаСкладах.Качество,
	//			   |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
	//			   |		ПартииТоваровНаСкладах.СчетУчета,
	//			   |		ПартииТоваровНаСкладах.Организация
	//			   |	ИЗ
	//			   |		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладах
	//			   |	ГДЕ
	//			   |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	//			   |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	//			   |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
	//			   |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	Подзапрос.Номенклатура,
	//			   |	Подзапрос.ХарактеристикаНоменклатуры,
	//			   |	Подзапрос.СерияНоменклатуры,
	//			   |	Подзапрос.ДокументОприходования,
	//			   |	Подзапрос.Заказ,
	//			   |	Подзапрос.СтоимостьПоступление,
	//			   |	Подзапрос.КодОперацииПартииТоваров,
	//			   |	Подзапрос.Регистратор,
	//			   |	Подзапрос.Период,
	//			   |	Подзапрос.Качество,
	//			   |	Подзапрос.ВестиПартионныйУчетПоСериям,
	//			   |	Подзапрос.СчетУчета,
	//			   |	Подзапрос.Организация"
	
	лОтбор = Новый Структура;
	лОтбор.Вставить("ДокументДвижения", ДокументПартии);
	лПартииТоваровНаСкладах = ТаблицаДвиженийПартий.Скопировать(лОтбор);
	Запрос.УстановитьПараметр("ПартииТоваровНаСкладах", лПартииТоваровНаСкладах);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровНаСкладах.ВидДвижения,
	|	ПартииТоваровНаСкладах.КодОперации,
	|	ВЫРАЗИТЬ(ПартииТоваровНаСкладах.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.КодОперации КАК КодОперации1,
	|	ПартииТоваровНаСкладах.ДокументДвижения,
	|	ПартииТоваровНаСкладах.ДокументДвиженияПериод,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|ПОМЕСТИТЬ втПартииТоваровНаСкладах
	|ИЗ
	|	&ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подзапрос.Номенклатура,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.Заказ,
	|	СУММА(Подзапрос.Количество) КАК Количество,
	|	СУММА(Подзапрос.Стоимость) КАК Стоимость,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.СчетУчета,
	|	Подзапрос.Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	|		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|		ПартииТоваровНаСкладах.Заказ КАК Заказ,
	|		ПартииТоваровНаСкладах.Количество КАК Количество,
	|		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
	|		0 КАК СтоимостьПоступление,
	|		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
	|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
	|		ПартииТоваровНаСкладах.Период КАК Период,
	|		ПартииТоваровНаСкладах.Качество КАК Качество,
	|		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
	|		ПартииТоваровНаСкладах.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|		И ПартииТоваровНаСкладах.Период < &Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Номенклатура,
	|		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|		ПартииТоваровНаСкладах.СерияНоменклатуры,
	|		ПартииТоваровНаСкладах.ДокументОприходования,
	|		ПартииТоваровНаСкладах.Заказ,
	|		ПартииТоваровНаСкладах.Количество,
	|		ПартииТоваровНаСкладах.Стоимость,
	|		0,
	|		ПартииТоваровНаСкладах.КодОперации,
	|		ПартииТоваровНаСкладах.ДокументДвижения,
	|		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
	|		ПартииТоваровНаСкладах.Качество,
	|		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
	|		ПартииТоваровНаСкладах.СчетУчета,
	|		ПартииТоваровНаСкладах.Организация
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
	|		И ПартииТоваровНаСкладах.ДокументДвиженияПериод < &Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втПартииТоваровНаСкладах.Номенклатура,
	|		втПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|		втПартииТоваровНаСкладах.СерияНоменклатуры,
	|		втПартииТоваровНаСкладах.ДокументОприходования,
	|		втПартииТоваровНаСкладах.Заказ,
	|		втПартииТоваровНаСкладах.Количество,
	|		втПартииТоваровНаСкладах.Стоимость,
	|		0,
	|		втПартииТоваровНаСкладах.КодОперации,
	|		втПартииТоваровНаСкладах.ДокументДвижения,
	|		втПартииТоваровНаСкладах.ДокументДвиженияПериод,
	|		втПартииТоваровНаСкладах.Качество,
	|		втПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
	|		втПартииТоваровНаСкладах.СчетУчета,
	|		втПартииТоваровНаСкладах.Организация
	|	ИЗ
	|		втПартииТоваровНаСкладах КАК втПартииТоваровНаСкладах
	|	ГДЕ
	|		втПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
	|		И втПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
	|		И втПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
	|		И втПартииТоваровНаСкладах.ДокументДвиженияПериод < &Период) КАК Подзапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.Номенклатура,
	|	Подзапрос.ХарактеристикаНоменклатуры,
	|	Подзапрос.СерияНоменклатуры,
	|	Подзапрос.ДокументОприходования,
	|	Подзапрос.Заказ,
	|	Подзапрос.СтоимостьПоступление,
	|	Подзапрос.КодОперацииПартииТоваров,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Период,
	|	Подзапрос.Качество,
	|	Подзапрос.ВестиПартионныйУчетПоСериям,
	|	Подзапрос.СчетУчета,
	|	Подзапрос.Организация"
	// is ЯннуровВФ кон 20140731 
	
КонецПроцедуры // ЗаполнитьЗапросПоВозвратуМеж

Процедура ЗаполнитьЗапросВозвратПоПоступлениюУпр(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыпускПродукции.Продукция КАК Номенклатура,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	|	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.СтатусПартии,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	|	ВыпускПродукции.ДокументВыпуска.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.КодОперации = &КодОперации
	|	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.СтатусПартии,
	|	ВыпускПродукции.ДокументВыпуска";
КонецПроцедуры//ЗаполнитьЗапросВозвратПоПоступлениюУпр

Процедура ЗаполнитьЗапросВозвратПоПоступлениюБух(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыпускПродукции.Продукция КАК Номенклатура,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	|	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	|	ВыпускПродукции.Заказ,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	|	ВыпускПродукции.СчетДт КАК СчетУчета,
	|	ВыпускПродукции.Подразделение.Владелец КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииБухгалтерскийУчет КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.КодОперации = &КодОперации
	|	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.СчетДт,
	|	ВыпускПродукции.Подразделение.Владелец";
КонецПроцедуры//ЗаполнитьЗапросВозвратПоПоступлениюБух

Процедура ЗаполнитьЗапросВозвратПоПоступлениюНал(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыпускПродукции.Продукция КАК Номенклатура,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	|	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	|	ВыпускПродукции.Заказ,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	|	ВыпускПродукции.СчетДт КАК СчетУчета,
	|	ВыпускПродукции.Подразделение.Владелец КАК Организация,
	|	СУММА(ВыпускПродукции.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(ВыпускПродукции.ВременнаяРазница) КАК ВременнаяРазница
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииНалоговыйУчет КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.КодОперации = &КодОперации
	|	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.СчетДт,
	|	ВыпускПродукции.Подразделение.Владелец";
КонецПроцедуры//ЗаполнитьЗапросВозвратПоПоступлениюНал

Процедура ЗаполнитьЗапросВозвратПоПоступлениюМеж(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыпускПродукции.Продукция КАК Номенклатура,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	|	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	|	ВыпускПродукции.Заказ,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	|	ВыпускПродукции.СчетДт КАК СчетУчета,
	|	ВыпускПродукции.Подразделение.Владелец КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииМеждународныйУчет КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.КодОперации = &КодОперации
	|	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.СчетДт,
	|	ВыпускПродукции.Подразделение.Владелец";
КонецПроцедуры//ЗаполнитьЗапросВозвратПоПоступлениюМеж

// Корректирует таблицу основания с учетом ранее проведенных возвратов
// Таблица основания корректируется либо по документу поступления, либо по документу реализации
// Ситуация, когда есть возвраты и по документу поступления и по документу реализации не обслуживается
//
Функция ПодготовитьТаблицуЗаписейОснования(ТаблицаЗаписейОснования, СтруктураШапкиДокумента, ДокументПартии, СтрУчет)
	
	ЗапросПоВозвратам = Новый Запрос;
	
	ЗапросПоВозвратам.Текст = "ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	|			ТОГДА -ПартииТоваровНаСкладах.Количество
	|		ИНАЧЕ ПартииТоваровНаСкладах.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	|			ТОГДА -ПартииТоваровНаСкладах.Стоимость
	|		ИНАЧЕ ПартииТоваровНаСкладах.Стоимость
	|	КОНЕЦ КАК Стоимость," +
	?(СтрУчет = "Налоговый","
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	|			ТОГДА -ПартииТоваровНаСкладах.ВременнаяРазница
	|		ИНАЧЕ ПартииТоваровНаСкладах.ВременнаяРазница
	|	КОНЕЦ КАК ВременнаяРазница,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	|			ТОГДА -ПартииТоваровНаСкладах.ПостояннаяРазница
	|		ИНАЧЕ ПартииТоваровНаСкладах.ПостояннаяРазница
	|	КОНЕЦ КАК ПостояннаяРазница,","") + "
	|	ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|			ПО СписанныеТовары.Регистратор = ПартииТоваровНаСкладах.Регистратор
	|				И (СписанныеТовары.ДокументПартии = &ДокументПартии)
	|				И СписанныеТовары.НомерСтроки = ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
	|		ПО ПартииТоваровНаСкладах.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Товары.ДокументПартии = &ДокументПартии
	|	И ВозвратТоваровОтПокупателя.МоментВремени > &МоментНач
	|	И ВозвратТоваровОтПокупателя.МоментВремени < &МоментКон";
	
	ЗапросПоВозвратам.УстановитьПараметр("ДокументПартии",ДокументПартии);
	
	СтруктураРеквизитовДокумента = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(ДокументПартии, СтруктураРеквизитовДокумента);
	МоментНач = Новый МоментВремени(СтруктураРеквизитовДокумента.Дата,ДокументПартии);
	МоментКон = Новый МоментВремени(СтруктураШапкиДокумента.Период,СтруктураШапкиДокумента.Регистратор);
	
	ЗапросПоВозвратам.УстановитьПараметр("МоментНач",МоментНач);
	ЗапросПоВозвратам.УстановитьПараметр("МоментКон",МоментКон);
	ЗапросПоВозвратам.УстановитьПараметр("ВозвратТекущегоМесяца", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц);
	
	// Изменим текст запроса, если учет отличается от управленческого
	Если СтрУчет <> "Управленческий" тогда
		ЗапросПоВозвратам.Текст = СтрЗаменить(ЗапросПоВозвратам.Текст,".ПартииТоваровНаСкладах",".ПартииТоваровНаСкладах"+СтрУчет+"Учет");
	КонецЕсли;
	
	РезультатЗапроса = ЗапросПоВозвратам.Выполнить();
	Если Не РезультатЗапроса.Пустой() тогда
		
		ТаблицаВозвратов = РезультатЗапроса.Выгрузить();
		// Уменьшим количество и стоимость в таблице основания
		Для каждого Строка Из ТаблицаЗаписейОснования цикл
			
			// Отберем строки
			СтруктураОтбора = Новый Структура;
			
			СтруктураОтбора.Вставить("Номенклатура",               Строка.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
			СтруктураОтбора.Вставить("СерияНоменклатуры", Строка.СерияНоменклатуры);
			СтруктураОтбора.Вставить("ДокументОприходования", Строка.ДокументОприходования);
			
			НайденныеСтроки = ТаблицаВозвратов.НайтиСтроки(СтруктураОтбора);
			
			// Дополнительно отберем строки с пустыми сериями 
			Если Строка.СерияНоменклатуры <> Справочники.СерииНоменклатуры.ПустаяСсылка() тогда
				
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
				
				НайденныеСтрокиСПустымиСериями = ТаблицаВозвратов.НайтиСтроки(СтруктураОтбора);
				
				Для каждого Элемент из НайденныеСтрокиСПустымиСериями Цикл
					НайденныеСтроки.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
			
			Для каждого НайденнаяСтрока из НайденныеСтроки цикл
				Строка.Количество = Строка.Количество - НайденнаяСтрока.Количество;
				Строка.Стоимость  = Строка.Стоимость - НайденнаяСтрока.Стоимость;					
				
				Если СтрУчет = "Налоговый" Тогда
					Строка.ПостояннаяРазница  = Строка.ПостояннаяРазница - НайденнаяСтрока.ПостояннаяРазница;
					Строка.ВременнаяРазница  = Строка.ВременнаяРазница - НайденнаяСтрока.ВременнаяРазница;
				КонецЕсли;	
				
				НайденнаяСтрока.Количество = 0;
				НайденнаяСтрока.Стоимость = 0;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗаписейОснования;
	
КонецФункции // ПодготовитьТаблицуЗаписейОснования

// Выполняет движения документа возврат товаров от покупателя
//
Процедура ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
	//>>010316 Степанов б/н ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания,ЭтоВозвратПредущегоМесяца=Ложь)
	ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания,ЭтоВозвратПредущегоМесяца=Ложь,ЭтоСторноВозврата)
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
	
	КачествоНовый = Справочники.Качество.Новый;
	
	// Свойства
	Движение.Период      = СтрокаДокумента.Период;
	Движение.Регистратор = СтрокаДокумента.Регистратор;
	Движение.Активность = Истина;
	
	// Возврат текущего месяца может быть с неизвестной стоимостью
	// например, если возвращается продукция
	// в этом случае он учитывается как сторно расхода 
	// и обрабатывается корректировкой стоимости списания как расход
	ВозвратТекущегоМесяца = КонецМесяца(ДокументПартии.Дата) = КонецМесяца(СтруктураПараметров.Период);
	
	//m.ionov@a-prof.ru 24/03/2014
	// Если корректировка реализации - то проводки делаем такие же как в текущем месяце
	//Отличаются только проводки по взаиморасчетам и по НУ учету
	//начало изменений Ожиганов 29.10.2015 возврат по документу продажи 
	//Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации")   Тогда
	Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации")   
	 или СтруктураПараметров.Свойство("ПРГ_ВозвратКакКорректировка")
	Тогда
	//конец изменений 
	
		ВозвратТекущегоМесяца = НЕ ЭтоВозвратПредущегоМесяца;
	КонецЕсли;
	//-------- m.ionov@a-prof.ru
	
	// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
	//Если ВозвратТекущегоМесяца тогда
	Если ВозвратТекущегоМесяца
		Или СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		// is ЯннуровВФ кон 20140731
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//>>Степанов 010316 б/н добавлено условие про сторно возврата
		Если ЭтоСторноВозврата тогда
			КоэффициентСторно    =  1;
		Иначе	
			КоэффициентСторно    = -1;
		КонецЕсли;
		ТипЗаписи = "Прямая";
	Иначе	
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Если ЭтоСторноВозврата тогда
			КоэффициентСторно    = -1;
		Иначе	
			КоэффициентСторно    = 1;
		КонецЕсли;
		//<<Степанов 010316 б/н
		ТипЗаписи = "Сторно";
	КонецЕсли;
	
	// Измерения
	Если ВестиПУПоСкладам Тогда
		
		Движение.Склад	= СтрокаДокумента.Склад;
		
		// Если задан новый склад поступления, подставляем его
		Если ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
			Движение.Склад	= СтрокаДокумента.СкладПолучатель;
			
		КонецЕсли;
		
	Иначе
		
		Движение.Склад      = Неопределено;
	КонецЕсли;
	
	Движение.Номенклатура	= СтрокаДокумента.Номенклатура;
	Движение.Организация = Строка.Организация;
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Движение.СтатусПартии = Строка.СтатусПартии;
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете тогда
		Если КомиссионныйТовар(Строка.СчетУчета) тогда
			Движение.СчетУчета   = СтрокаДокумента.ПринятыеКорСчетБУ;
		Иначе
			Движение.СчетУчета   = СтрокаДокумента.СчетУчетаБУ;
		КонецЕсли;
		Если ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ЗаполнитьКорРеквизитыВозвратаКорректировкиРеализации(
			Движение, 
			СтрокаДокумента,
			СтруктураПараметров,
			"БухгалтерскийУчет");
		КонецЕсли;
	ИначеЕсли  СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		Если КомиссионныйТовар(Строка.СчетУчета) тогда
			Движение.СчетУчета   = СтрокаДокумента.ПринятыеКорСчетНУ;
		Иначе
			Движение.СчетУчета   = СтрокаДокумента.СчетУчетаНУ;
		КонецЕсли;
		Если ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ЗаполнитьКорРеквизитыВозвратаКорректировкиРеализации(
			Движение, 
			СтрокаДокумента,
			СтруктураПараметров,
			"НалоговыйУчет");
		КонецЕсли;
		// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
	ИначеЕсли  СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Движение.СчетУчета   = СтрокаДокумента.СчетУчетаМУ;
		Если ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") 
			Или (ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") 
			И СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя) Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ЗаполнитьКорРеквизитыВозвратаКорректировкиРеализации(
			Движение, 
			СтрокаДокумента,
			СтруктураПараметров,
			"МеждународныйУчет");
		КонецЕсли;
		// is ЯннуровВФ кон 20140731 
	КонецЕсли;
	
	Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
	
	// Если партионный учет по сериям не ведется - серии в регистре "партии товаров на складах" нет
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям тогда
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Движение.Качество = СтрокаДокумента.Качество;
	
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество = КачествоНовый;
	КонецЕсли;
	
	// Ресурсы
	ПогашаемоеКоличество = Окр(Строка.Количество * КоэффСписания,3,1);
	ПогашаемаяСтоимость  = Окр(Строка.Стоимость * КоэффСписания,2,1);
	Движение.Количество  = КоэффициентСторно*ПогашаемоеКоличество;
	Движение.Стоимость   = КоэффициентСторно*ПогашаемаяСтоимость;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		Движение.ПостояннаяРазница	= КоэффициентСторно*Окр(Строка.ПостояннаяРазница * КоэффСписания,3,1);
		Движение.ВременнаяРазница	= КоэффициентСторно*Окр(Строка.ВременнаяРазница * КоэффСписания,2,1);
		
	КонецЕсли;
	
	
	// Реквизиты
	Если ВозвратТекущегоМесяца тогда
		//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
		//Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц;
		Если СтрокаДокумента.КодОперацииПартииТоваров  = Перечисления.КодыОперацийПартииТоваров.ВозвратТарыЗалогСтоимость Тогда
			Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратТарыЗалогСтоимостьТекущийМесяц;
		Иначе
			Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц;
		КонецЕсли;	
		//конец изменений 
		
	Иначе
		Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
	КонецЕсли;
	
	Если ПогашаемоеКоличество < КоличествоОсталосьПогасить Тогда
		КоэффПоступления = ПогашаемоеКоличество / КоличествоОсталосьПогасить;
	Иначе
		КоэффПоступления = 1;
	КонецЕсли;
	
	//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
	Если СтрокаДокумента.КодОперацииПартииТоваров  = Перечисления.КодыОперацийПартииТоваров.ВозвратТарыЗалогСтоимость Тогда
		Если СтрокаДокумента.ОтражатьВНалоговомУчете или СтрокаДокумента.ОтражатьВБухгалтерскомУчете  Тогда
			Движение.СтоимостьПоступление  = -1 * Окр(СтрокаДокумента.СтоимостьПоступлениеБУ * КоэффПоступления,2,1);
		Иначе	
		//здесь наверное изменения по МСФО	
		КонецЕслИ;	
	КонецЕсли;	
	//конец изменений 
	
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		// Сумма выручки в валюте документа - для отчета комитенту
		Движение.СуммаВыручки = КоэффициентСторно*Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
		// Валюты и курсы - для пересчета
		Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
		Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
		Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Или СтрокаДокумента.ОтражатьВНалоговомУчете тогда
		// Сумма выручки и сумма НДС  - для учета НДС
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
		Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
		Движение.ВалютнаяСуммаЗадолженностиБУ   = Окр(СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ*КоэффПоступления, 2);
		
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
		СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ - Движение.ВалютнаяСуммаЗадолженностиБУ;
	КонецЕсли;
	
	СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - КоэффициентСторно*Движение.СуммаВыручки;
	
	КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
	
	Строка.Количество = Строка.Количество - ПогашаемоеКоличество;
	Строка.Стоимость  = Строка.Стоимость  - ПогашаемаяСтоимость;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		Строка.ПостояннаяРазница = Строка.ПостояннаяРазница - КоэффициентСторно * Движение.ПостояннаяРазница;
		Строка.ВременнаяРазница  = Строка.ВременнаяРазница  - КоэффициентСторно * Движение.ВременнаяРазница;
		
	КонецЕсли; 
	
	// Номер строки, по которой списана партия
	// Используется при возврате товаров от покупателя, ордерной схеме поступления,
	// механизмом корректировки стоимости списания 
	Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
	
	
	// is ЯннуровВФ нач 20150126
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) Тогда 
			Движение.ДокументДвижения = СтрокаДокумента.ДокументПартии;
			Движение.ДокументДвиженияПериод = Движение.ДокументДвижения.Дата;
		КонецЕсли;
	КонецЕсли;
	// is ЯннуровВФ кон 20150126
	
	// Списание на себестоимость продаж (сторно)
	Если ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров) = "СебестоимостьПродаж" Тогда
		
		Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
			СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, Неопределено, СтрокаДокумента,Неопределено
	,"Возврат", Неопределено , ТипЗаписи);
	
	СписаниеПринятыхНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Движение, ИмяРегистраПартии);
	
	// is ЯннуровВФ нач 20141009
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		// is ЯннуровВФ нач 20141202
		Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда 
		// is ЯннуровВФ кон 20141202
			ИмяРегистраСОстатками = ПолучитьИмяРегистра("ПартииТоваров", "НаСкладах", СтрокаДокумента);
			Если ИмяРегистраСОстатками <> "" Тогда 
			
				СтруктураИзмерений = СтруктураПараметров[ИмяРегистраСОстатками + "СтруктураИзмерений"];
				ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистраСОстатками + "ТаблицаОстатков"];
				
				ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);
				СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтруктураИзмерений, СтруктураИзмерений, ТаблицаОстатковПартий);
				
				// is ЯннуровВФ нач 20141027
				Если Движение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда 
					СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
					СтрокаПартии.Стоимость = СтрокаПартии.Стоимость - Движение.Стоимость;
				Иначе
				// is ЯннуровВФ кон 20141027
					СтрокаПартии.Количество = СтрокаПартии.Количество + Движение.Количество;
					СтрокаПартии.Стоимость = СтрокаПартии.Стоимость + Движение.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
	//начало изменений Ожиганов А. 17.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	ИначеЕсли (СтрокаДокумента.ОтражатьВНалоговомУчете или СтрокаДокумента.ОтражатьВБухгалтерскомУчете) 
	   и (ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации"))
	Тогда
	   ИмяРегистраСОстатками = ПолучитьИмяРегистра("ПартииТоваров", "НаСкладах", СтрокаДокумента);
	   Если  ИмяРегистраСОстатками <> "" Тогда  
		   
				СтруктураИзмерений = Неопределено;
				ТаблицаОстатковПартий = Неопределено;
				Если СтруктураПараметров.Свойство(ИмяРегистраСОстатками + "СтруктураИзмерений",СтруктураИзмерений)
					и СтруктураПараметров.Свойство(ИмяРегистраСОстатками + "ТаблицаОстатков",ТаблицаОстатковПартий) Тогда;
					
					ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);
					СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтруктураИзмерений, СтруктураИзмерений, ТаблицаОстатковПартий);
					Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
						СтрокаПартии.ПостояннаяРазница = 0;
						СтрокаПартии.ВременнаяРазница  = 0;
					КонецЕсли;	
					Если Движение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда 
						Знак = -1;
					Иначе
						Знак = 1;
					КонецЕсли;	
					
					СтрокаПартии.Количество = СтрокаПартии.Количество + Знак * Движение.Количество;
					СтрокаПартии.Стоимость = СтрокаПартии.Стоимость   + Знак * Движение.Стоимость;
					Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
						СтрокаПартии.ПостояннаяРазница = Знак * Движение.ПостояннаяРазница + СтрокаПартии.ПостояннаяРазница ;
						СтрокаПартии.ВременнаяРазница  = Знак * Движение.ВременнаяРазница + СтрокаПартии.ВременнаяРазница;
					КонецЕсли;	
				КонецЕсли;	
	   КонецЕсли; 
	//конец изменений 
	КонецЕсли;
	// is ЯннуровВФ кон 20141009

Конецпроцедуры//ВыполнитьДвиженияВозврата

Процедура СписаниеПринятыхНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Движение, ИмяРегистраПартии)
	
	// Спишем партии, находящиеся на ответственном хранении
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтрУчет = "Бухгалтерский";
		
	ИначеЕсли СтрокаДокумента.ОтражатьВУправленческомУчете тогда
		
		СтрУчет = "Управленческий";
		
	Иначе
		Возврат;
		
	КонецЕсли; 
	
	ТаблицаПартийПринятыхНаОтветственноеХранение = Неопределено;
	
	Если СтруктураПараметров.Свойство("ТаблицаПартийПринятыхНаОтветственноеХранение"+СтрУчет,ТаблицаПартийПринятыхНаОтветственноеХранение) Тогда
		
		СтруктураИзмерений = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Заказ, Качество");
		ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);
		Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураИзмерений.Вставить("Организация",Движение.Организация);
			СтруктураИзмерений.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);
		Иначе
			СтруктураИзмерений.Вставить("Организация",Движение.Организация);
			СтруктураИзмерений.Вставить("СтатусПартии");
			Если Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
				СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;
			Иначе
				СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка;
			КонецЕсли;
		КонецЕсли; 
		
		МассивСтрок = ТаблицаПартийПринятыхНаОтветственноеХранение.НайтиСтроки(СтруктураИзмерений);
		
		КоличествоОсталосьПогасить = Движение.Количество;
		Для Каждого Строка Из МассивСтрок Цикл
			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Количество <=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,Строка);
			
			Движение.Период 		= СтрокаДокумента.Период;
			Движение.Регистратор 	= СтрокаДокумента.Регистратор;
			Движение.Активность 	= Истина;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			
			Движение.Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
			Движение.Стоимость	= Окр(Строка.Стоимость  * КоэффСписания,2,1);
			
			ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, Неопределено, СтрокаДокумента,Неопределено
			,"СписаниеПринятыхНаОтветственноеХранение", "НаСкладах", Неопределено);
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // СписаниеПринятыхНаОтветственноеХраниние()

// Поступление товаров по возврату от покупателя
//
Процедура ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров)
	
	ДокументПартии = СтрокаДокумента.ДокументПартии;
	
	// Возврат без указания документа партии обрабатывается в модуле документа
	Если НЕ ЗначениеЗаполнено(ДокументПартии) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистраПартии = Неопределено;
	СтрУчет			  = Неопределено;
	ВестиПУПоСкладам  = Неопределено;
	НаборОснование	  = Неопределено;
	
	ПолучитьПараметрыВозвратаОтПокупателя(СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование);
	
	ТаблицаЗаписейОснования = ПолучитьТаблицуЗаписейОснованияВозврата (СтрокаДокумента,
	СтруктураПараметров,
	ДокументПартии,
	НаборОснование,
	СтрУчет,
	ИмяРегистраПартии);
	
	//начало изменений Ожиганов А. 18.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации")  
		и (СтрокаДокумента.ОтражатьВНалоговомУчете или СтрокаДокумента.ОтражатьВБухгалтерскомУчете)
	Тогда
		ИмяРегистраСОстатками = ПолучитьИмяРегистра("ПартииТоваров", "НаСкладах", СтрокаДокумента);
		ТаблицаОстатковПартий = Неопределено;
		Если СтруктураПараметров.Свойство(ИмяРегистраСОстатками + "ТаблицаОстатков",ТаблицаОстатковПартий) Тогда
			Если ТаблицаОстатковПартий.Найти(СтрокаДокумента.Номенклатура,"Номенклатура") <> Неопределено Тогда
				НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаОстатковПартий, СтрокаДокумента, "НаСкладах");
				//НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");	
			Иначе
				НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");	
			КонецЕсли;	
		Иначе
			НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");	
		КонецЕсли;	
	Иначе
		НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");	
	КонецЕсли;	
	//НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");
	//конец изменений 
	
	
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
		Если КоличествоОсталосьПогасить < 0 Тогда 
			КоличествоОсталосьПогасить = -КоличествоОсталосьПогасить;
 		КонецЕсли;
	КонецЕсли;
	// is ЯннуровВФ кон 20140731
	// is ЯннуровВФ нач 20141013
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
		//
	Иначе
	// is ЯннуровВФ кон 20141013
		м = 0;
		Пока м < НайденныеСтроки.Количество() Цикл
			Если НайденныеСтроки[м].Количество <= 0 Тогда
				НайденныеСтроки.Удалить(м);
			Иначе
				м = м+1;
			КонецЕслИ;	
		КонецЦикла;	
	КонецЕсли;
	
	ЭтоВозвратПредущегоМесяца = Ложь;
	// is ЯннуровВФ нач 20141013
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
		
		//>>Степанов 020216 №48054 чтобы возвраты оценивались не по стоимости партии, а по средней стоимости в периоде корректируемой реализации
		НайденныеСтроки.Очистить();
		//<<
		// is ЯннуровВФ нач 20141027
		// На основании на начало периода
		Если НайденныеСтроки.Количество() = 0 Тогда 
			
			лЗапрос = Новый Запрос;
			лЗапрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Номенклатура,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.СчетУчета,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Организация,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Склад,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.ДокументОприходования,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.ХарактеристикаНоменклатуры,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.СерияНоменклатуры,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Заказ,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Качество,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.КоличествоОстаток КАК Количество,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.СтоимостьОстаток КАК Стоимость
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(
			|			&Период,
			|			Организация = &Организация
			|				И СчетУчета = &СчетУчета
			|				И Номенклатура = &Номенклатура
			|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
			|				И СерияНоменклатуры = &СерияНоменклатуры
			|				И Склад = &Склад
			|				И Заказ = &Заказ
			|				И Качество = &Качество) КАК ПартииТоваровНаСкладахМеждународныйУчетОстатки
			|ГДЕ
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.КоличествоОстаток <> 0";
			//>>лЗапрос.УстановитьПараметр("Период", НачалоМесяца(СтруктураПараметров.Период));
			Если НачалоМесяца(ДокументПартии.Дата)<НачалоМесяца(СтруктураПараметров.Период) тогда
				//>>30.09.2016 Степанов
				//лЗапрос.УстановитьПараметр("Период", КонецМесяца(ДокументПартии.Дата));
				лЗапрос.УстановитьПараметр("Период", Новый Граница(КонецМесяца(ДокументПартии.Дата), ВидГраницы.Включая));
				//<<30.09.2016
				лЗапрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
				лЗапрос.УстановитьПараметр("СчетУчета", СтрокаДокумента.СчетУчетаМУ);
				лЗапрос.УстановитьПараметр("Склад", СтрокаДокумента.Склад);
				лЗапрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
				лЗапрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
				лЗапрос.УстановитьПараметр("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
				лЗапрос.УстановитьПараметр("Заказ", СтрокаДокумента.Заказ);
				лЗапрос.УстановитьПараметр("Качество", СтрокаДокумента.Качество);
				лВыборка = лЗапрос.Выполнить().Выбрать();
				Если лВыборка.Следующий() Тогда 
					лНоваяСтрока = ТаблицаЗаписейОснования.Добавить();
					ЗаполнитьЗначенияСвойств(лНоваяСтрока, лВыборка);
					лНоваяСтрока.ВестиПартионныйУчетПоСериям = лНоваяСтрока.Номенклатура.ВестиПартионныйУчетПоСериям;
					лНоваяСтрока.СтоимостьПоступление = 0;
					лНоваяСтрока.КодОперацииПартииТоваров = Неопределено;
					Если лНоваяСтрока.Количество < 0 Тогда 
						лНоваяСтрока.Количество = -лНоваяСтрока.Количество;
						лНоваяСтрока.Стоимость = -лНоваяСтрока.Стоимость;
					КонецЕсли;
					Если лНоваяСтрока.Количество < КоличествоОсталосьПогасить Тогда 
						лКоэффициент = КоличествоОсталосьПогасить / лНоваяСтрока.Количество;
						лНоваяСтрока.Количество = КоличествоОсталосьПогасить;
						лНоваяСтрока.Стоимость = Окр(лНоваяСтрока.Стоимость*лКоэффициент,2);
					КонецЕсли;
					НайденныеСтроки.Добавить(лНоваяСтрока);
				КонецЕсли;
				
				// На основании последних движений
				Если НайденныеСтроки.Количество() = 0 Тогда 
					
					лЗапрос = Новый Запрос;
					лЗапрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	ПартииТоваровНаСкладахМеждународныйУчет.Период КАК Период,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Номенклатура,
					|	ПартииТоваровНаСкладахМеждународныйУчет.СчетУчета,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Организация,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Склад,
					|	ПартииТоваровНаСкладахМеждународныйУчет.ДокументОприходования,
					|	ПартииТоваровНаСкладахМеждународныйУчет.ХарактеристикаНоменклатуры,
					|	ПартииТоваровНаСкладахМеждународныйУчет.СерияНоменклатуры,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Заказ,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Качество,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Количество КАК Количество,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Стоимость КАК Стоимость
					|ИЗ
					|	РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладахМеждународныйУчет
					|ГДЕ
					|	ПартииТоваровНаСкладахМеждународныйУчет.Период < &Период
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Организация = &Организация
					|	И ПартииТоваровНаСкладахМеждународныйУчет.СчетУчета = &СчетУчета
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Номенклатура = &Номенклатура
					|	И ПартииТоваровНаСкладахМеждународныйУчет.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
					|	И ПартииТоваровНаСкладахМеждународныйУчет.СерияНоменклатуры = &СерияНоменклатуры
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Склад = &Склад
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Заказ = &Заказ
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Качество = &Качество
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Количество <> 0
					|
					|УПОРЯДОЧИТЬ ПО
					|	Период УБЫВ
					|АВТОУПОРЯДОЧИВАНИЕ";
					лЗапрос.УстановитьПараметр("Период", ДокументПартии.Дата);
					лЗапрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
					лЗапрос.УстановитьПараметр("СчетУчета", СтрокаДокумента.СчетУчетаМУ);
					лЗапрос.УстановитьПараметр("Склад", СтрокаДокумента.Склад);
					лЗапрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
					лЗапрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
					лЗапрос.УстановитьПараметр("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
					лЗапрос.УстановитьПараметр("Заказ", СтрокаДокумента.Заказ);
					лЗапрос.УстановитьПараметр("Качество", СтрокаДокумента.Качество);
					лВыборка = лЗапрос.Выполнить().Выбрать();
					Если лВыборка.Следующий() Тогда 
						лНоваяСтрока = ТаблицаЗаписейОснования.Добавить();
						ЗаполнитьЗначенияСвойств(лНоваяСтрока, лВыборка);
						лНоваяСтрока.ВестиПартионныйУчетПоСериям = лНоваяСтрока.Номенклатура.ВестиПартионныйУчетПоСериям;
						лНоваяСтрока.СтоимостьПоступление = 0;
						лНоваяСтрока.КодОперацииПартииТоваров = Неопределено;
						Если лНоваяСтрока.Количество < 0 Тогда 
							лНоваяСтрока.Количество = -лНоваяСтрока.Количество;
							лНоваяСтрока.Стоимость = -лНоваяСтрока.Стоимость;
						КонецЕсли;
						Если лНоваяСтрока.Количество < КоличествоОсталосьПогасить Тогда 
							лКоэффициент = КоличествоОсталосьПогасить / лНоваяСтрока.Количество;
							лНоваяСтрока.Количество = КоличествоОсталосьПогасить;
							лНоваяСтрока.Стоимость = Окр(лНоваяСтрока.Стоимость*лКоэффициент,2);
						КонецЕсли;
						НайденныеСтроки.Добавить(лНоваяСтрока);
					КонецЕсли;
				КонецЕсли;
			Иначе
				//это возврат текущего периода
				// is ЯннуровВФ кон 20141027
				//>>Степанов 020216 №48054 нет средней стоимости в периоде корректируемой реализации, значит возьмем среднескользящую стоимость партии
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");
				КонецЕсли;
				//<<
			КонецЕсли;	
		КонецЕсли;
		
	Иначе
		// is ЯннуровВФ кон 20141013
		
		//m.ionov@a-prof.ru 25.03.2014
		//начало изменений Ожиганов 29.10.2015 возврат по документу продажи 
		//Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если  ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") 
			или СтруктураПараметров.Свойство("ПРГ_ВозвратКакКорректировка")
		Тогда
		//конец изменений 	
			
			Если ((СтрокаДокумента.УЗ_СуммаРегл <> 0) и СтруктураПараметров.ПРГ_НовыйАлгоритм) Тогда
			    //начало изменений Ожиганов 02.11.2015 возврат по документу продажи 
				//исправим ошибку удалять будем не все,  а только по номенклатуре
				//ТаблицаЗаписейОснования.Очистить();
				//НайденныеСтроки.Очистить();
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для каждого ТекЭлем Из НайденныеСтроки Цикл
					   ТаблицаЗаписейОснования.Удалить(ТекЭлем);
					КонецЦикла; 
				Конецесли;	
				НайденныеСтроки.Очистить();
				//конец изменений 
			КонецЕсли;	
			//начало изменений 
			Если ((НайденныеСтроки.Количество() = 0)
				И (Не СтрокаДокумента.УЗ_СуммаРегл = 0)) или (СтруктураПараметров.ПРГ_НовыйАлгоритм и НайденныеСтроки.Количество() = 0)
				Тогда
				//конец изменений 	
				
				НоваяСтрока = ТаблицаЗаписейОснования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				ЭтоВозвратПредущегоМесяца = Истина;
				
				НоваяСтрока.СчетУчета = СтрокаДокумента.СчетУчетаБУ;
				НоваяСтрока.Стоимость = СтрокаДокумента.УЗ_СуммаРегл;
				
				Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
					НоваяСтрока.Стоимость = СтрокаДокумента.УЗ_СуммаНУ;
					НоваяСтрока.ПостояннаяРазница = СтрокаДокумента.УЗ_СуммаПР;
					НоваяСтрока.ВременнаяРазница  = СтрокаДокумента.УЗ_СуммаВР;
				КонецЕсли;
				
				//Документ оприходования не пишем, так как ведется учет по среднему
				
				НайденныеСтроки.Добавить();
				НайденныеСтроки[0]= НоваяСтрока;
				//= ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");
			КонецЕсли;
		КонецЕсли;
		//начало изменений
		//начало изменений Ожиганов 29.10.2015 возврат по документу продажи 
		//Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") 
			или СтруктураПараметров.Свойство("ПРГ_ВозвратКакКорректировка")
		Тогда	
		//конец изменений 	
			Если НайденныеСтроки.Количество() = 1  Тогда
				Если КоличествоОсталосьПогасить > НайденныеСтроки[0].Количество и НайденныеСтроки[0].Количество > 0 Тогда
					НайденныеСтроки[0].Количество	= КоличествоОсталосьПогасить;
					НайденныеСтроки[0].Стоимость 	= Окр(НайденныеСтроки[0].Стоимость/НайденныеСтроки[0].Количество*КоличествоОсталосьПогасить,2);
					Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
						НайденныеСтроки[0].ВременнаяРазница = Окр(НайденныеСтроки[0].ВременнаяРазница/НайденныеСтроки[0].Количество*КоличествоОсталосьПогасить,2);
						НайденныеСтроки[0].ПостояннаяРазница = Окр(НайденныеСтроки[0].ПостояннаяРазница/НайденныеСтроки[0].Количество*КоличествоОсталосьПогасить,2); 
					КонецЕсли;	
				ИначеЕсли НайденныеСтроки[0].Количество < 0 Тогда
					НайденныеСтроки[0].Количество = КоличествоОсталосьПогасить;
					НайденныеСтроки[0].СчетУчета = СтрокаДокумента.СчетУчетаБУ;
					НайденныеСтроки[0].Стоимость = СтрокаДокумента.УЗ_СуммаРегл;
					
					Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
						НайденныеСтроки[0].Стоимость = СтрокаДокумента.УЗ_СуммаНУ;
						НайденныеСтроки[0].ПостояннаяРазница = СтрокаДокумента.УЗ_СуммаПР;
						НайденныеСтроки[0].ВременнаяРазница  = СтрокаДокумента.УЗ_СуммаВР;
					КонецЕсли;
				ИначеЕсли НайденныеСтроки[0].Количество > 0 и СтрокаДокумента.УЗ_СуммаРегл > 0 Тогда
					Если НайденныеСтроки[0].Стоимость  = 0 Тогда
						НайденныеСтроки[0].Стоимость = СтрокаДокумента.УЗ_СуммаРегл;
					КонецЕсли;	
					Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
						Если НайденныеСтроки[0].Стоимость  = 0 
							и	НайденныеСтроки[0].ПостояннаяРазница = 0
							и НайденныеСтроки[0].ВременнаяРазница Тогда
							
							НайденныеСтроки[0].Стоимость = СтрокаДокумента.УЗ_СуммаНУ;
							НайденныеСтроки[0].ПостояннаяРазница = СтрокаДокумента.УЗ_СуммаПР;
							НайденныеСтроки[0].ВременнаяРазница  = СтрокаДокумента.УЗ_СуммаВР;
							
							
						КонецЕсли;	
						
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		//конец изменений 
		//----m.ionov@a-prof.ru---
	КонецЕсли;
	//>>010316 Степанов переменная для передачи в процедуру
	ЭтоСторноВозврата=Ложь;

	Для Каждого Строка Из НайденныеСтроки Цикл
		Если КоличествоОсталосьПогасить <=0 Тогда
			Прервать;
		КонецЕсли;
			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;	
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
			//начало изменений БП 04 
			ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
			ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания,ЭтоВозвратПредущегоМесяца,ЭтоСторноВозврата);
			//конец изменений БП 04 							
	КонецЦикла;
	// is ЯннуровВФ нач 20141013
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Если КоличествоОсталосьПогасить > 0 Тогда 
			СтароеКоличествоОсталосьПогасить = КоличествоОсталосьПогасить;
			Строка = ТаблицаЗаписейОснования.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаДокумента);
			Строка.Количество = КоличествоОсталосьПогасить;
			Строка.Стоимость = 0;
			КоэффСписания = 1;
			ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
										ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания,,ЭтоСторноВозврата);
			КоличествоОсталосьПогасить = СтароеКоличествоОсталосьПогасить;
		КонецЕсли;
	КонецЕсли;
	// is ЯннуровВФ кон 20141013
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
		+ СтруктураПараметров.СтрокаСообщенияНеНайдено + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
		+ СтруктураПараметров.СтрокаСообщенияДокументПартии + ДокументПартии);
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

//>>010316 Степанов б/н сторно возвратов от покупателя
Процедура СторноВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров)
	
	ДокументПартии = СтрокаДокумента.ДокументПартии;
	
	// Возврат без указания документа партии обрабатывается в модуле документа
	Если НЕ ЗначениеЗаполнено(ДокументПартии) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистраПартии = Неопределено;
	СтрУчет			  = Неопределено;
	ВестиПУПоСкладам  = Неопределено;
	НаборОснование	  = Неопределено;
	
	ПолучитьПараметрыВозвратаОтПокупателя(СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование);
	
	ТаблицаЗаписейОснования = ПолучитьТаблицуЗаписейОснованияВозврата (СтрокаДокумента,
	СтруктураПараметров,
	ДокументПартии,
	НаборОснование,
	СтрУчет,
	ИмяРегистраПартии);
	
	
	НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");
	
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	// is ЯннуровВФ нач 20140731 Возврат реализации текущего периода
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
		Если КоличествоОсталосьПогасить < 0 Тогда 
			КоличествоОсталосьПогасить = -КоличествоОсталосьПогасить;
 		КонецЕсли;
	КонецЕсли;
	// is ЯннуровВФ кон 20140731
	// is ЯннуровВФ нач 20141013
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
		//
	Иначе
	// is ЯннуровВФ кон 20141013
		м = 0;
		Пока м < НайденныеСтроки.Количество() Цикл
			Если НайденныеСтроки[м].Количество <= 0 Тогда
				НайденныеСтроки.Удалить(м);
			Иначе
				м = м+1;
			КонецЕслИ;	
		КонецЦикла;	
	КонецЕсли;
	
	ЭтоВозвратПредущегоМесяца = Ложь;
	// is ЯннуровВФ нач 20141013
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
		//>>Степанов 020216 №48054 чтобы возвраты оценивались не по стоимости партии, а по средней стоимости в периоде корректируемой реализации
		НайденныеСтроки.Очистить();
		//<<
		// is ЯннуровВФ нач 20141027
		// На основании на начало периода
		Если НайденныеСтроки.Количество() = 0 Тогда 
			
			лЗапрос = Новый Запрос;
			лЗапрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Номенклатура,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.СчетУчета,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Организация,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Склад,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.ДокументОприходования,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.ХарактеристикаНоменклатуры,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.СерияНоменклатуры,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Заказ,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.Качество,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.КоличествоОстаток КАК Количество,
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.СтоимостьОстаток КАК Стоимость
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(
			|			&Период,
			|			Организация = &Организация
			|				И СчетУчета = &СчетУчета
			|				И Номенклатура = &Номенклатура
			|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
			|				И СерияНоменклатуры = &СерияНоменклатуры
			|				И Склад = &Склад
			|				И Заказ = &Заказ
			|				И Качество = &Качество) КАК ПартииТоваровНаСкладахМеждународныйУчетОстатки
			|ГДЕ
			|	ПартииТоваровНаСкладахМеждународныйУчетОстатки.КоличествоОстаток <> 0";
			//>>лЗапрос.УстановитьПараметр("Период", НачалоМесяца(СтруктураПараметров.Период));
			Если НачалоМесяца(ДокументПартии.Дата)<НачалоМесяца(СтруктураПараметров.Период) тогда
				//>>30.09.2016 Степанов
				//лЗапрос.УстановитьПараметр("Период", КонецМесяца(ДокументПартии.Дата));
				лЗапрос.УстановитьПараметр("Период", Новый Граница(КонецМесяца(ДокументПартии.Дата), ВидГраницы.Включая));
				//<<30.09.2016
				лЗапрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
				лЗапрос.УстановитьПараметр("СчетУчета", СтрокаДокумента.СчетУчетаМУ);
				лЗапрос.УстановитьПараметр("Склад", СтрокаДокумента.Склад);
				лЗапрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
				лЗапрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
				лЗапрос.УстановитьПараметр("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
				лЗапрос.УстановитьПараметр("Заказ", СтрокаДокумента.Заказ);
				лЗапрос.УстановитьПараметр("Качество", СтрокаДокумента.Качество);
				лВыборка = лЗапрос.Выполнить().Выбрать();
				Если лВыборка.Следующий() Тогда 
					лНоваяСтрока = ТаблицаЗаписейОснования.Добавить();
					ЗаполнитьЗначенияСвойств(лНоваяСтрока, лВыборка);
					лНоваяСтрока.ВестиПартионныйУчетПоСериям = лНоваяСтрока.Номенклатура.ВестиПартионныйУчетПоСериям;
					лНоваяСтрока.СтоимостьПоступление = 0;
					лНоваяСтрока.КодОперацииПартииТоваров = Неопределено;
					Если лНоваяСтрока.Количество < 0 Тогда 
						лНоваяСтрока.Количество = -лНоваяСтрока.Количество;
						лНоваяСтрока.Стоимость = -лНоваяСтрока.Стоимость;
					КонецЕсли;
					Если лНоваяСтрока.Количество < КоличествоОсталосьПогасить Тогда 
						лКоэффициент = КоличествоОсталосьПогасить / лНоваяСтрока.Количество;
						лНоваяСтрока.Количество = КоличествоОсталосьПогасить;
						лНоваяСтрока.Стоимость = Окр(лНоваяСтрока.Стоимость*лКоэффициент,2);
					КонецЕсли;
					НайденныеСтроки.Добавить(лНоваяСтрока);
				КонецЕсли;
				
				// На основании последних движений
				Если НайденныеСтроки.Количество() = 0 Тогда 
					
					лЗапрос = Новый Запрос;
					лЗапрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	ПартииТоваровНаСкладахМеждународныйУчет.Период КАК Период,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Номенклатура,
					|	ПартииТоваровНаСкладахМеждународныйУчет.СчетУчета,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Организация,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Склад,
					|	ПартииТоваровНаСкладахМеждународныйУчет.ДокументОприходования,
					|	ПартииТоваровНаСкладахМеждународныйУчет.ХарактеристикаНоменклатуры,
					|	ПартииТоваровНаСкладахМеждународныйУчет.СерияНоменклатуры,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Заказ,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Качество,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Количество КАК Количество,
					|	ПартииТоваровНаСкладахМеждународныйУчет.Стоимость КАК Стоимость
					|ИЗ
					|	РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладахМеждународныйУчет
					|ГДЕ
					|	ПартииТоваровНаСкладахМеждународныйУчет.Период < &Период
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Организация = &Организация
					|	И ПартииТоваровНаСкладахМеждународныйУчет.СчетУчета = &СчетУчета
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Номенклатура = &Номенклатура
					|	И ПартииТоваровНаСкладахМеждународныйУчет.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
					|	И ПартииТоваровНаСкладахМеждународныйУчет.СерияНоменклатуры = &СерияНоменклатуры
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Склад = &Склад
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Заказ = &Заказ
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Качество = &Качество
					|	И ПартииТоваровНаСкладахМеждународныйУчет.Количество <> 0
					|
					|УПОРЯДОЧИТЬ ПО
					|	Период УБЫВ
					|АВТОУПОРЯДОЧИВАНИЕ";
					лЗапрос.УстановитьПараметр("Период", ДокументПартии.Дата);
					лЗапрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
					лЗапрос.УстановитьПараметр("СчетУчета", СтрокаДокумента.СчетУчетаМУ);
					лЗапрос.УстановитьПараметр("Склад", СтрокаДокумента.Склад);
					лЗапрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
					лЗапрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
					лЗапрос.УстановитьПараметр("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
					лЗапрос.УстановитьПараметр("Заказ", СтрокаДокумента.Заказ);
					лЗапрос.УстановитьПараметр("Качество", СтрокаДокумента.Качество);
					лВыборка = лЗапрос.Выполнить().Выбрать();
					Если лВыборка.Следующий() Тогда 
						лНоваяСтрока = ТаблицаЗаписейОснования.Добавить();
						ЗаполнитьЗначенияСвойств(лНоваяСтрока, лВыборка);
						лНоваяСтрока.ВестиПартионныйУчетПоСериям = лНоваяСтрока.Номенклатура.ВестиПартионныйУчетПоСериям;
						лНоваяСтрока.СтоимостьПоступление = 0;
						лНоваяСтрока.КодОперацииПартииТоваров = Неопределено;
						Если лНоваяСтрока.Количество < 0 Тогда 
							лНоваяСтрока.Количество = -лНоваяСтрока.Количество;
							лНоваяСтрока.Стоимость = -лНоваяСтрока.Стоимость;
						КонецЕсли;
						Если лНоваяСтрока.Количество < КоличествоОсталосьПогасить Тогда 
							лКоэффициент = КоличествоОсталосьПогасить / лНоваяСтрока.Количество;
							лНоваяСтрока.Количество = КоличествоОсталосьПогасить;
							лНоваяСтрока.Стоимость = Окр(лНоваяСтрока.Стоимость*лКоэффициент,2);
						КонецЕсли;
						НайденныеСтроки.Добавить(лНоваяСтрока);
					КонецЕсли;
				КонецЕсли;
			Иначе
				//это возврат текущего периода
				// is ЯннуровВФ кон 20141027
				//>>Степанов 020216 №48054 нет средней стоимости в периоде корректируемой реализации, значит возьмем среднескользящую стоимость партии
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");
				КонецЕсли;
				//<<
			КонецЕсли;	
		КонецЕсли;
	Иначе
	КонецЕсли;
	//>>010316 Степанов переменная для передачи в процедуру
	ЭтоСторноВозврата=Истина;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если КоличествоОсталосьПогасить <=0 Тогда
			Прервать;
		КонецЕсли;
		Если Строка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;	
		Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		//начало изменений БП 04 
		ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
		ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания,ЭтоВозвратПредущегоМесяца,ЭтоСторноВозврата);
		//конец изменений БП 04 							
	КонецЦикла;
	// is ЯннуровВФ нач 20141013
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Если КоличествоОсталосьПогасить > 0 Тогда 
			СтароеКоличествоОсталосьПогасить = КоличествоОсталосьПогасить;
			Строка = ТаблицаЗаписейОснования.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаДокумента);
			Строка.Количество = КоличествоОсталосьПогасить;
			Строка.Стоимость = 0;
			КоэффСписания = 1;
			ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
										ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания,,ЭтоСторноВозврата);
			КоличествоОсталосьПогасить = СтароеКоличествоОсталосьПогасить;
		КонецЕсли;
	КонецЕсли;
	// is ЯннуровВФ кон 20141013
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
		+ СтруктураПараметров.СтрокаСообщенияНеНайдено + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
		+ СтруктураПараметров.СтрокаСообщенияДокументПартии + ДокументПартии);
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
	КонецЕсли;
КонецПроцедуры	
	
// Снятие резерва по заказам покупателей при закрытии заказов
//
Процедура СнятиеРезервовПоЗаказамПокупателей(СтрокаДокумента, СтруктураПараметров)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";
		ВестиПУПоСкладам =ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров);
		СтрУчет="Управленческий";
		
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахБух";
		ВестиПУПоСкладам =ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров);
		СтрУчет="Бухгалтерский";
		
	ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахНал";
		ВестиПУПоСкладам =ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Нал", СтруктураПараметров);
		СтрУчет="Налоговый";
		
	ИначеЕсли СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахМеж";
		ВестиПУПоСкладам =ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Меж", СтруктураПараметров);
		СтрУчет="Международный";
		
	КонецЕсли;
	
	// Партии для данного учета
	ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистраПартии];
	ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистраПартии + "ТаблицаОстатков"];
	СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
	СтруктураИзмерений = СтруктураПараметров[ИмяРегистраПартии + "СтруктураИзмерений"];
	
	Если СтрокаДереваПартий <> Неопределено Тогда
		
		Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
			
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			// 1. Списание
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,СтрокаПартии);
			
			// Свойства
			Движение.Период			= СтрокаДокумента.Период;
			Движение.Регистратор	= СтрокаДокумента.Регистратор;
			Движение.Активность		= Истина;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
			
			Если СтрУчет="Управленческий" Тогда
				Движение.Организация = СтруктураПараметров.ОрганизацияУпр;
			КонецЕсли;	
			
			// Реквизиты
			// Специфические разрезы для разных видов учета
			Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				Движение.Подразделение = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
			
			СтрокаПартии.Количество = 0;
			СтрокаПартии.Стоимость  = 0;
			
			Строка   = Движение;
			
			// is ЯннуровВФ нач 20141009
			Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
				// is ЯннуровВФ нач 20141202
				Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда 
				// is ЯннуровВФ кон 20141202
					ИмяРегистраСОстатками = ПолучитьИмяРегистра("ПартииТоваров", "НаСкладах", СтрокаДокумента);
					Если ИмяРегистраСОстатками <> "" Тогда 
					
						СтруктураИзмерений = СтруктураПараметров[ИмяРегистраСОстатками + "СтруктураИзмерений"];
						ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистраСОстатками + "ТаблицаОстатков"];
						
						ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);
						СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтруктураИзмерений, СтруктураИзмерений, ТаблицаОстатковПартий);
						
						СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
						СтрокаПартии.Стоимость = СтрокаПартии.Стоимость - Движение.Стоимость;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// is ЯннуровВФ кон 20141009
			
			// 2. Поступление
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,Строка);
			
			// Свойства
			Движение.ВидДвижения  = ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.Заказ		  = Неопределено;
			
			Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистраПартии];
			
			// is ЯннуровВФ нач 20141009
			Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
				// is ЯннуровВФ нач 20141202
				Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда 
				// is ЯннуровВФ кон 20141202
					ИмяРегистраСОстатками = ПолучитьИмяРегистра("ПартииТоваров", "НаСкладах", СтрокаДокумента);
					Если ИмяРегистраСОстатками <> "" Тогда 
					
						СтруктураИзмерений = СтруктураПараметров[ИмяРегистраСОстатками + "СтруктураИзмерений"];
						ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистраСОстатками + "ТаблицаОстатков"];
						
						ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);
						СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтруктураИзмерений, СтруктураИзмерений, ТаблицаОстатковПартий);
						
						СтрокаПартии.Количество = СтрокаПартии.Количество + Движение.Количество;
						СтрокаПартии.Стоимость = СтрокаПартии.Стоимость + Движение.Стоимость;
						
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			// is ЯннуровВФ кон 20141009
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СнятиеРезервовПоЗаказамПокупателей()

Функция ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров) Экспорт
	
	ТаблицыСписанияРасходнымОрдером = Неопределено;
	ТаблицаСписанияРасходнымОрдером = Неопределено;
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		СтрУчет = "Упр";
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтрУчет = "Бух";
	ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		СтрУчет = "Нал";
	ИначеЕсли СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		СтрУчет = "Меж";
	Иначе
		// Строка документа не отражается ни в одном учете
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером) тогда
		ТаблицаСписанияРасходнымОрдером = ТаблицыСписанияРасходнымОрдером.Получить(СтрУчет);
		Если ТаблицаСписанияРасходнымОрдером <> Неопределено тогда
			Возврат ТаблицаСписанияРасходнымОрдером;
		КонецЕсли;
	КонецЕсли;
	
	// Сначала получим таблицу исходного документа
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером1"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	Регистратор=&Регистратор
	|";
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВУправленческомУчете)";
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВБухгалтерскомУчете)";
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВНалоговомУчете)";
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВМеждународномУчете)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	
	ТаблицаСписанияРасходнымОрдером=Запрос.Выполнить().Выгрузить();
	
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВМеждународномУчете, "ОтражатьВМеждународномУчете");
	
	СтруктураПараметров.Вставить("ОсновнойДокумент",СтрокаДокумента.ОсновнойДокумент);
	
	// Если записей по исх. документу нет
	Если ТаблицаСписанияРасходнымОрдером.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером2"" КАК QuieryId,
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	СУММА(Строки.Количество) КАК Количество,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|ГДЕ
	|	Строки.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Строки.ОсновнойДокумент = &ОсновнойДокумент
	|	И Строки.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад";
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВУправленческомУчете) И ");
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВБухгалтерскомУчете) И ");
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВНалоговомУчете) И ");
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВМеждународномУчете) И ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", ТаблицаСписанияРасходнымОрдером[0].Период);
	Запрос.УстановитьПараметр("ДатаКон", СтрокаДокумента.Период);
	Запрос.УстановитьПараметр("ОсновнойДокумент", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.Регистратор);
	
	ТаблицаОрдеров = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.Период, "Период");
	
	// Пересчет сумм, уже списанных другими расходными ордерами
	Для каждого СтрокаСписания Из ТаблицаСписанияРасходнымОрдером Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры, Склад",
		СтрокаСписания.Номенклатура,
		СтрокаСписания.СерияНоменклатуры,
		СтрокаСписания.ХарактеристикаНоменклатуры,
		СтрокаСписания.Склад
		);
		МассивСтрокОрдеров = ТаблицаОрдеров.НайтиСтроки(СтруктураПоиска);
		
		// Серия может быть указана в документе реализации и в ордере или только в ордере
		Если СтрокаДокумента.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)Тогда
			
			СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			МассивСтрокСПустойСерией = ТаблицаОрдеров.НайтиСтроки(СтруктураПоиска);
			
			Для каждого Элемент Из МассивСтрокСПустойСерией Цикл
				
				МассивСтрокОрдеров.Добавить(Элемент);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого СтрокаОрдера Из МассивСтрокОрдеров Цикл
			
			Если СтрокаОрдера.Количество <=0  Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			// В накладной и в ордере один и тот же товар может быть в разных строках
			Если СтрокаСписания.Количество > СтрокаОрдера.Количество Тогда
				// полностью списали количество по строке ордера
				КоэффСписания = СтрокаОрдера.Количество/СтрокаСписания.Количество;
				КоэффСписанияОрдера = 1;
			Иначе
				// полностью списали количество по строке накладной
				КоэффСписанияОрдера = СтрокаСписания.Количество/СтрокаОрдера.Количество;
				КоэффСписания = 1;
			КонецЕсли;
			
			КоличествоСписанияОрдера = Окр(КоэффСписанияОрдера * СтрокаОрдера.Количество,3);
			
			СтрокаСписания.Количество = СтрокаСписания.Количество - КоличествоСписанияОрдера;
			СтрокаОрдера.Количество   = СтрокаОрдера.Количество - КоличествоСписанияОрдера;
			
			СтрокаСписания.СуммаНДС                 = СтрокаСписания.СуммаНДС -Окр(СтрокаСписания.СуммаНДС *КоэффСписания,2);
			СтрокаСписания.СуммаЗадолженностиБУ     = СтрокаСписания.СуммаЗадолженностиБУ - Окр(КоэффСписания * СтрокаСписания.СуммаЗадолженностиБУ, 2);
			СтрокаСписания.СуммаЗадолженности       = СтрокаСписания.СуммаЗадолженности -Окр(СтрокаСписания.СуммаЗадолженности *КоэффСписания,2);
			СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ = СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ -Окр(СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ*КоэффСписания,2);
			СтрокаСписания.СтоимостьПоступление   = СтрокаСписания.СтоимостьПоступление - Окр(КоэффСписания * СтрокаСписания.СтоимостьПоступление, 2);
			СтрокаСписания.СтоимостьПоступлениеБУ = СтрокаСписания.СтоимостьПоступлениеБУ - Окр(КоэффСписания * СтрокаСписания.СтоимостьПоступлениеБУ, 2);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером) тогда
		ТаблицыСписанияРасходнымОрдером = Новый Соответствие;
	КонецЕсли;
	
	ТаблицыСписанияРасходнымОрдером.Вставить(СтрУчет,ТаблицаСписанияРасходнымОрдером);
	
	СтруктураПараметров.Вставить("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером);
	
	Возврат ТаблицаСписанияРасходнымОрдером;
	
КонецФункции // ПолучитьТаблицуСписанияРасходнымОрдером()

// Списание партий ордерного склада
// Обслуживаются документы:
// 1.Расходный ордер на товары
// 2 Приходный ордер на товары с видом операции "перемещение"
// 3 Поступление товаров и услуг в НТТ с видом операции "перемещение"
// Параметры СтрокаДокумента - 
// СтруктураПараметров - структура, хранящая основные переменные
Процедура СписаниеПартийОрдерныйСклад(СтрокаДокумента, СтруктураПараметров)
	
	// Отложенная отгрузка отражается только в бухгалтерском и управленческом учете
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары")И
		НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером И
		НЕ (СтрокаДокумента.ОтражатьВУправленческомУчете ИЛИ СтрокаДокумента.ОтражатьВБухгалтерскомУчете
		ИЛИ (СтруктураПараметров.Свойство("ОсновнойДокумент")
		И (ТипЗНЧ(СтруктураПараметров.ОсновнойДокумент) = Тип("ДокументСсылка.ПередачаТоваров"))
		И СтрокаДокумента.ОтражатьВНалоговомУчете)) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТаблицаСписанияРасходнымОрдером = ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров);
	
	// Если записей по исх. документу нет
	Если ТаблицаСписанияРасходнымОрдером = Неопределено Или ТаблицаСписанияРасходнымОрдером.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры",
	СтрокаДокумента.Номенклатура,
	СтрокаДокумента.СерияНоменклатуры,
	СтрокаДокумента.ХарактеристикаНоменклатуры
	);
	
	// В расходном ордере склад должен совпадать со складом в табличной части основного документа
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
		
		СтруктураПоиска.Вставить("Склад", СтрокаДокумента.Склад);
		
	КонецЕсли;
	
	МассивСтрокСписания = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);
	
	// Серия может быть указана в документе реализации или в ордере
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)Тогда
		
		СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
		МассивСтрокСПустойСерией = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Элемент Из МассивСтрокСПустойСерией Цикл
			
			МассивСтрокСписания.Добавить(Элемент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	Для Каждого Строка Из МассивСтрокСписания Цикл
		
		Если КоличествоОсталосьПогасить <=0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Строка.Количество <=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		// Заполнение параметров
		// Список свойств, не заполняющихся в строке ордера по строке реализации
		СписокИсключаемыхСвойств = "СерияНоменклатуры, Количество, ОсновнойДокумент, ВидТабличнойЧасти,
		|НомерСтрокиДокумента, Период, Регистратор";
		
		Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
			СписокИсключаемыхСвойств = СписокИсключаемыхСвойств +",Склад";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Строка,,СписокИсключаемыхСвойств);
		
		ПогашаемоеКоличество = Окр(КоэффСписания * Строка.Количество, 3);
		
		СтрокаДокумента.СуммаНДС               = Окр(КоэффСписания * Строка.СуммаНДС, 2);
		СтрокаДокумента.СуммаЗадолженности     = Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
		СтрокаДокумента.СуммаЗадолженностиБУ     = Окр(КоэффСписания * Строка.СуммаЗадолженностиБУ, 2);
		СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = Окр(КоэффСписания * Строка.КорВалютнаяСуммаЗадолженностиБУ, 2);
		СтрокаДокумента.СтоимостьПоступление   = Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
		СтрокаДокумента.СтоимостьПоступлениеБУ = Окр(КоэффСписания * Строка.СтоимостьПоступлениеБУ, 2);
		СтрокаДокумента.Количество = ПогашаемоеКоличество;
		
		Если НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
			И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
			СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту) Тогда
			
			СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;
			
			Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СтрокаДокумента.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение;
				
			ИначеЕсли СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				
				Для СчетчикСтатуса =1 По 4 Цикл
					Если СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
						СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;
					Иначе
						СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка;
					КонецЕсли; 
				КонецЦикла; 
				
			КонецЕсли; 
		КонецЕсли; 
		
		СписаниеПартий(СтрокаДокумента, СтруктураПараметров, "НаСкладах");
		
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
		
		Строка.Количество             = Строка.Количество - ПогашаемоеКоличество;
		Строка.СуммаНДС               = Строка.СуммаНДС - Окр(КоэффСписания * Строка.СуммаНДС, 2);
		Строка.СуммаЗадолженности     = Строка.СуммаЗадолженности - Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
		Строка.СуммаЗадолженностиБУ   = Строка.СуммаЗадолженностиБУ - Окр(КоэффСписания * Строка.СуммаЗадолженностиБУ, 2);
		
		Строка.КорВалютнаяСуммаЗадолженностиБУ = Строка.КорВалютнаяСуммаЗадолженностиБУ - Окр(КоэффСписания * Строка.КорВалютнаяСуммаЗадолженностиБУ, 2);
		Строка.СтоимостьПоступление   = Строка.СтоимостьПоступление - Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
		Строка.СтоимостьПоступлениеБУ = Строка.СтоимостьПоступлениеБУ - Окр(КоэффСписания * Строка.СтоимостьПоступлениеБУ, 2);
		
	КонецЦикла;
	
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		СтрУчет = "Упр";
		Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтрУчет = "Бух";
		ИначеЕсли СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
			СтрУчет = "Нал";
		ИначеЕсли СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
			СтрУчет = "Меж";
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + Символы.ПС
		+ "Не найдено в документе списания "+ СтрокаДокумента.ОсновнойДокумент+ " "+ КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, ""));
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
	КонецЕсли;
	
	// Теперь отметим все выполненные движения как принадлежащие документу реализации:
	СтруктураРеквизитовДокумента = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(СтрокаДокумента.ОсновнойДокумент, СтруктураРеквизитовДокумента);
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		
		// В каждой таблице движений заполним реквизиты ДокументДвижения и ДокументДвиженияПериод
		Если Лев(Элемент.Ключ,15) = "ТаблицаДвижений" Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
				Если Элемент.Значение.Колонки.Найти("ДокументДвижения")<>Неопределено Тогда
					Элемент.Значение.ЗаполнитьЗначения(СтрокаДокумента.ОсновнойДокумент, "ДокументДвижения");
				КонецЕсли;
				Если Элемент.Значение.Колонки.Найти("ДокументДвиженияПериод")<>Неопределено Тогда
					Элемент.Значение.ЗаполнитьЗначения(СтруктураРеквизитовДокумента.Дата, "ДокументДвиженияПериод");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СписаниеПартийОрдерныйСклад()

// Общие

// Возвращает таблицу документов
//
// Параметры
//ДокументСписания 
//Упр 
//Бух 
//Нал 
// Возвращаемое значение:
//   Таблица строк документа
//
Функция ПолучитьТаблицуСтрокДокументов(ДокументСписания=Неопределено, Упр = Истина, Бух = Истина, Нал = Истина) Экспорт
	
	// Общая часть запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);
	
	Запрос.УстановитьПараметр("ВозвратОтКомиссионера", Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
	Запрос.УстановитьПараметр("РеализацияКомиссия", Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	
	Запрос.УстановитьПараметр("Упр", Упр);
	Запрос.УстановитьПараметр("Бух", Бух);
	Запрос.УстановитьПараметр("Нал", Нал);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументов"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	НомерСтрокиДокумента,
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|	КОГДА
	|	КодОперацииПартииТоваров = &ВозвратОтКомиссионера
	|	ИЛИ КодОперацииПартииТоваров = &РеализацияКомиссия
	|	ИЛИ КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|	ИЛИ КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|	ТОГДА ""Переданные""
	|	ИНАЧЕ
	|	""НаСкладах""
	|	КОНЕЦ КАК ИсточникПоКодуОперации
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки";
	
	Если ДокументСписания <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст+ "
		|ГДЕ
		|	Строки.Регистратор = &ДокументСписания";
		
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВУправленческомУчете", "(ОтражатьВУправленческомУчете И &Упр) КАК ОтражатьВУправленческомУчете");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "(ОтражатьВБухгалтерскомУчете И &Бух) КАК ОтражатьВБухгалтерскомУчете");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВНалоговомУчете", "(ОтражатьВНалоговомУчете И &Нал) КАК ОтражатьВНалоговомУчете");
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции//ПолучитьТаблицуСтрокДокументов

// Добавление остатков по партионному учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация)
	
	ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон);
	
	ПолучитьОстаткиРегл(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);
	
	ПолучитьОстаткиМеж(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);
	
КонецПроцедуры // ПолучитьОстатки()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// Дополнительные движения по результату списания партий
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания)
	
	Если ТаблицаСписания.Найти(Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию, "КодОперацииПартииТоваров") <> Неопределено Тогда
		//Если используется расширенная аналитика и фирма на УСН, то погашение стоимости осуществляется не в партионном учете
		Если НЕ (СтруктураПараметров.Свойство("ИспользоватьРасширеннуюАналитику")
			И СтруктураПараметров.ИспользоватьРасширеннуюАналитику
			И УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная) Тогда
			ПроцедурыПогашенияСтоимости.ПогашениеСтоимостиПриПередачеВЭксплуатацию(СтруктураПараметров, СтруктураПараметров.ТаблицаСписанныхПартий);
		КонецЕсли;	
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьвУправленческомУчете Тогда
		ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания);
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьвБухгалтерскомУчете ИЛИ СтруктураПараметров.ЕстьСтрокиОтражатьвНалоговомУчете Тогда
		ВыполнитьДопДвиженияПоРезультатуСписанияРегл(СтруктураПараметров, ТаблицаСписания);
	КонецЕсли;	
	
	//Добавлен алгоритм формирование корр движений
	Если СтруктураПараметров.ЕстьСтрокиОтражатьвМеждународномУчете Тогда
		ВыполнитьДопДвиженияПоРезультатуСписанияМеж(СтруктураПараметров, ТаблицаСписания);
	КонецЕсли;		
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписания()

// Запускает формирование движений по результату списания партий в упр учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания)
	
	//Добавлен алгоритм формирование корр движений
	Для Каждого СтрокаСписания Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
		
		Если СтрокаСписания.ВидОперации = "Списание" Тогда
			НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат);
			ВыполнитьКорДвижениеУпр(СтрокаСписания.РегистрУчета, НаправлениеСписания , СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		КонецЕсли;	
		
		ВыполнитьСвязанныеДвиженияУпр(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		
	КонецЦикла;
	
	// Запись данных о реализованных товаррах
	ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания);
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияУпр()

// Запускает формирование движений по результату списания партий в регл учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияРегл(СтруктураПараметров, ТаблицаСписания) 
	
	//Добавлен алгоритм формирование корр движений
	Для Каждого СтрокаСписания Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
		
		Если СтрокаСписания.ВидОперации = "Списание" Тогда
			Если СтрокаСписания.ОтражатьВБухгалтерскомУчете Тогда
				ИмяПланСчетов = "Хозрасчетный";
				СчетЗатрат = СтрокаСписания.КорСчетБУ;
			ИначеЕсли СтрокаСписания.ОтражатьВНалоговомУчете Тогда
				СчетЗатрат = СтрокаСписания.КорСчетНУ;
				ИмяПланСчетов = "Налоговый";
			КонецЕсли;
			
			НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат, СчетЗатрат, ИмяПланСчетов);
			ВыполнитьКорДвижениеРегл(СтрокаСписания.РегистрУчета, НаправлениеСписания,СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
			
			Если СтрокаСписания.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию
				И СтруктураПараметров.ТаблицаСписанныхПартий.Колонки.Найти("СчетУчетаБУ") <> Неопределено
				И СтрокаСписания.СчетУчетаБУ = СтрокаСписания.КорСчетБУ
				Тогда
				ФормироватьПроводки = Ложь;
			Иначе
				ФормироватьПроводки = Истина;
			КонецЕсли;
			
			// Формирование проводок по бух учету
			Если ФормироватьПроводки Тогда
				УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СписаниеНаСчет(СтрокаСписания.РегистрУчета, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение,,НаправлениеСписания);
			КонецЕсли;
			
		ИначеЕсли СтрокаСписания.ВидОперации = "Возврат" Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СписаниеНаСчет("", СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение, СтрокаСписания.ТипЗаписи);
		ИначеЕсли СтрокаСписания.ВидОперации = "СписаниеПринятыхНаОтветственноеХранение" Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СписаниеНаСчет(СтрокаСписания.СписаноИз, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		КонецЕсли;	
		
		Если СтруктураПараметров.ФормироватьПроводкиПоСписаниюТМЦ Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ВыполнитьСвязанныеДвиженияРегл(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтруктураПараметров.СписыватьПартииНДС
		И НЕ (СтруктураПараметров.Свойство("ИспользоватьРасширеннуюАналитику")
		И СтруктураПараметров.ИспользоватьРасширеннуюАналитику
		И ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная) Тогда
		
		УчетНДС.ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания);
	КонецЕсли;	
	
	Если СтруктураПараметров.Свойство("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации")
		И ТаблицаСписания.Количество() <> 0 тогда
		
		СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизацииНазад(СтруктураПараметров, ТаблицаСписания);
		
	КонецЕсли;
	
	Если ((ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) И (НЕ СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки))
		ИЛИ ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		Если СтруктураПараметров.ФормироватьПроводкиПоСписаниюТМЦ Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеПоставщику(СтруктураПараметров);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияРегл()


// Запускает формирование движений по результату списания партий в упр учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияМеж(СтруктураПараметров, ТаблицаСписания)
	
	//Добавлен алгоритм формирование корр движений
	Для Каждого СтрокаСписания Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
		
		Если СтрокаСписания.ВидОперации = "Списание" Тогда
			// Заполнение полей, специфических для учета
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ВыполнитьСвязанныеДвиженияМеж(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
			
			// is ЯннуровВФ нач 20141003
			//НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат);
			НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат, СтрокаСписания.КорСчетМУ, "Международный");
			// is ЯннуровВФ кон 20141003
			ВыполнитьКорДвижениеМеж(СтрокаСписания.РегистрУчета, НаправлениеСписания, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
			
			// Формирование проводок по меж учету
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.СписаниеНаСчетМеж(СтрокаСписания.РегистрУчета, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		КонецЕсли;	
		
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ВыполнитьСвязанныеДвиженияМеж(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
	КонецЦикла;	
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияУпр()


/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// СтруктураПараметров - основная переменная модуля, передается в бОльшую часть процедур и функций,
// содержит бОльшую часть параметров, нужных для проведения по партиям
Процедура ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания) 
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("СпособОценкиМПЗУпр", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Упр",  СтруктураПараметров)));		
		СтруктураПараметров.Вставить("СтратегияСтатусПартииУпр",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Упр", СтруктураПараметров));
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамУпр", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров));
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		СтруктураПараметров.Вставить("СпособОценкиМПЗБух", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Бух", СтруктураПараметров)));		
		СтруктураПараметров.Вставить("СтратегияСтатусПартииБух",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Бух", СтруктураПараметров));
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамБух", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров));
		СтруктураПараметров.Вставить("СтоимостьСписанияБУ", 0);
		СтруктураПараметров.Вставить("СуммаЗадолженностиБУ", 0);
		СтруктураПараметров.Вставить("СуммаЗадолженностиБУВал", ТаблицаСписания.Итог("КорВалютнаяСуммаЗадолженностиБУ"));
		СтруктураПараметров.Вставить("СуммаЗадолженностиБУВалПоСтрокам", 0);
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете Тогда
		СтруктураПараметров.Вставить("СпособОценкиМПЗНал", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Нал", СтруктураПараметров)));		
		СтруктураПараметров.Вставить("СтратегияСтатусПартииНал",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Нал", СтруктураПараметров));
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамНал", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Нал", СтруктураПараметров));
		СтруктураПараметров.Вставить("КэшОтноситсяКДеятельностиЕНВД", Новый Соответствие);
		СтруктураПараметров.Вставить("СтоимостьСписанияНУ", 0);
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		СтруктураПараметров.Вставить("СпособОценкиМПЗМеж", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Меж", СтруктураПараметров)));		
		СтруктураПараметров.Вставить("СтратегияСтатусПартииМеж",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Меж", СтруктураПараметров));
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамМеж", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Меж", СтруктураПараметров));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КэшПоВидамСубконто", Новый Соответствие);
	
	// От значения этой константы зависит будет ли партия списана на забалансовый счет документом списания
	// при списании по ордеру
	СтруктураПараметров.Вставить("СписыватьПартииРасходнымОрдером",Константы.СписыватьПартииРасходнымОрдером.Получить());
	СтруктураПараметров.Вставить("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании",глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании"));
	
КонецПроцедуры//ДополнитьСтруктуруПараметров(СтруктураПараметров)

Функция ПодготовитьСтруктуруТаблицыСписания(СтруктураПараметров, ТаблицаСписания)
	
	ТаблицаСписанныхПартий = Новый ТаблицаЗначений();
	
	// Определение состава колонок 
	СписокКодовОпераций = Новый СписокЗначений;
	СписокКодовОпераций.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("КодОперацииПартииТоваров")));
	
	СтруктураКолонокТаблицыСписания = Новый Структура();
	СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВУправленческомУчете");
	СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВБухгалтерскомУчете");
	СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВНалоговомУчете");
	СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВМеждународномУчете");
	
	СтруктураКолонокТаблицыСписания.Вставить("НомерСтрокиДокумента");
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		ОпределитьСоставКолонокТаблицаСписанныхПартийУпр(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);
	КонецЕсли;	
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ОпределитьСоставКолонокТаблицаСписанныхПартийБух(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);
		
		Если СтруктураПараметров.СписыватьПартииНДС Тогда
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ТаблицаСписания", ТаблицаСписания);
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаСписания.СчетУчетаБУ
			|ПОМЕСТИТЬ ТаблицаСписания
			|ИЗ
			|	&ТаблицаСписания КАК ТаблицаСписания
			|ГДЕ
			|	(ТаблицаСписания.СчетУчетаБУ В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОборудованиеКУстановке))
			|			ИЛИ ТаблицаСписания.СчетУчетаБУ В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств)))";
			УчетНДС.ОпределитьСоставКолонокТаблицаСписанныхПартийНДС(СтруктураПараметров, СписокКодовОпераций, СтруктураКолонокТаблицыСписания, Запрос.Выполнить().Выгрузить()[0].Количество <> 0);
			Запрос.МенеджерВременныхТаблиц.Закрыть();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете Тогда
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ОпределитьСоставКолонокТаблицаСписанныхПартийНал(СтруктураПараметров, СписокКодовОпераций, СтруктураКолонокТаблицыСписания);
		//!!! + вызов для УСН здесь или отдельно. Возможен выбор из двух вызовов по УП
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ОпределитьСоставКолонокТаблицаСписанныхПартийМеж(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);
	КонецЕсли;	
	
	// Подготовка структуры таблицы
	КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	ПриоритетныеКолонкиТаблицыСписания = "";
	Для каждого Колонка из СтруктураКолонокТаблицыСписания Цикл
		
		ТипЗначения = Неопределено;
		
		Если не КолонкиТаблицыСписания.Найти(Колонка.Ключ) = неопределено тогда
			ТипЗначения = КолонкиТаблицыСписания.Найти(Колонка.Ключ).ТипЗначения;
			ПриоритетныеКолонкиТаблицыСписания = ПриоритетныеКолонкиТаблицыСписания + "," + Колонка.Ключ;
		Иначе
			ТипЗначения = Колонка.Значение;
		КонецЕсли;
		
		Если ТипЗначения = Неопределено Тогда
			// Тип не объявлен
		ИначеЕсли ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Разрядность = ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
			
			ТипЗначения = Новый ОписаниеТипов(ТипЗначения,,,КвалификаторЧисла);
		КонецЕсли;
		
		ТаблицаСписанныхПартий.Колонки.Добавить(Колонка.Ключ, ТипЗначения);
	КонецЦикла;
	
	Если ТаблицаСписанныхПартий.Колонки.Найти("РегистрУчета") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("РегистрУчета");
	КонецЕсли;
	Если ТаблицаСписанныхПартий.Колонки.Найти("Движение") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("Движение");
	КонецЕсли; 
	
	Если не ПустаяСтрока(ПриоритетныеКолонкиТаблицыСписания) Тогда
		ПриоритетныеКолонкиТаблицыСписания = Сред(ПриоритетныеКолонкиТаблицыСписания,2);
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("ПриоритетныеКолонкиТаблицыСписания", ПриоритетныеКолонкиТаблицыСписания);
	
	Возврат ТаблицаСписанныхПартий;
	
КонецФункции

Процедура ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, СтрокаПартии, СтрокаДокумента,РегистрУчета
	,ВидОперации, СписаноИз, ТипЗаписи, СтрокаСписанныхТоваров = Неопределено)
	
	ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаСписанныхПартий;
	НоваяСтрока = ТаблицаСписанныхПартий.Добавить();
	
	// Заполнение по строке партии
	Если НЕ СтрокаПартии = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
	КонецЕсли;	
	
	// Заполнение по строке движения, возможно изменение одного части значений
	Если НЕ Движение = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
	КонецЕсли;	
	
	// Максимальный приоритет по строке документа
	Если НЕ СтрокаДокумента = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
	КонецЕсли;	
	
	Если СтрокаСписанныхТоваров <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСписанныхТоваров);
	КонецЕсли;	
	
	НоваяСтрока.Движение = Движение;
	
	//Дополнить служебной информацией 
	ЗаполнитьЗначенияСвойств(НоваяСтрока,
	Новый структура("ВидОперации, СписаноИз, ТипЗаписи, РегистрУчета", ВидОперации, СписаноИз, ТипЗаписи, РегистрУчета));
	
КонецПроцедуры

//начало изменений БП 04
Процедура СписатьНаЗатратыНДСНЗПНаше(СтруктураПараметров,ИмяТабл,ТекСтрока,СуммаНДС,СтрокаДвижения,НалУчет)
	
	//НоваяСтрока = СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоБух.Добавить();
	НоваяСтрока = СтруктураПараметров["ТаблицаДвижений"+ИмяТабл].Добавить();
	НоваяСтрока.Активность   = Истина;
	НоваяСтрока.Период       = СтруктураПараметров.Период;
	НоваяСтрока.Организация  = СтруктураПараметров.Организация;
	НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Приход;
	Если НалУчет Тогда
		НоваяСтрока.СчетУчета    = ТекСтрока.КорСчетНУ; 
		Если ТекСтрока.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			НоваяСтрока.Стоимость	   		= 0;
			НоваяСтрока.ПостояннаяРазница	= СуммаНДС;
			СтрокаДвижения.ВидУчетаДтКт    = Перечисления.ВидыУчетаПоПБУ18.ПР; 
		Иначе
			НоваяСтрока.Стоимость	   	    = СуммаНДС;
			СтрокаДвижения.ВидУчетаДтКт    = Перечисления.ВидыУчетаПоПБУ18.НУ; 
		КонецЕсли;	
		СтрокаДвижения.КорСубконтоНУ1 = ТекСтрока.ПодразделениеОрганизации;
		СтрокаДвижения.КорСубконтоНУ2 = ТекСтрока.СтатьяЗатрат;
		
	Иначе
		СтрокаДвижения.КорСубконто1 = ТекСтрока.ПодразделениеОрганизации;
		СтрокаДвижения.КорСубконто2 = ТекСтрока.СтатьяЗатрат;
		НоваяСтрока.СчетУчета   	= ТекСтрока.КорСчетБУ; 
		НоваяСтрока.Стоимость	   	= СуммаНДС;
	КонецЕсли; 
	
	НоваяСтрока.СтатьяЗатрат    = ТекСтрока.СтатьяЗатрат;
	НоваяСтрока.Подразделение   = ТекСтрока.ПодразделениеОрганизации;
	НоваяСтрока.КодОперации     = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство;
	НоваяСтрока.СписаниеПартий  = Истина;
	СтруктураПараметров["ИзмененыДвижения"+ИмяТабл] = Истина;
	
КонецПроцедуры	

Процедура СписатьНаЗатратыНДСПостНаше(СтруктураПараметров,ИмяТабл,ТекСтрока,СуммаНДС,СтрокаДвижения,НаправлениеСписания,НалУчет)
	
	
	НоваяСтрока = СтруктураПараметров["ТаблицаДвижений"+ИмяТабл].Добавить();
	НоваяСтрока.Активность   = Истина;
	НоваяСтрока.Период       = СтруктураПараметров.Период;
	НоваяСтрока.Организация  = СтруктураПараметров.Организация;
	НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Приход;
	Если НалУчет Тогда
		НоваяСтрока.СчетУчета    = ТекСтрока.КорСчетНУ; 
		Если ТекСтрока.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			НоваяСтрока.Сумма	   		   = 0;
			НоваяСтрока.ПостояннаяРазница  = СуммаНДС;
			СтрокаДвижения.ВидУчетаДтКт    = Перечисления.ВидыУчетаПоПБУ18.ПР; 
		Иначе
			НоваяСтрока.Сумма	   		   = СуммаНДС;
			СтрокаДвижения.ВидУчетаДтКт    = Перечисления.ВидыУчетаПоПБУ18.НУ; 
		КонецЕсли;	
		Если НаправлениеСписания = "КоммерческиеРасходы" 
			или НаправлениеСписания = "ИздержкиОбращения"  
			Тогда
			СтрокаДвижения.КорСубконтоНУ2 = ТекСтрока.ПодразделениеОрганизации;
			СтрокаДвижения.КорСубконтоНУ1 = ТекСтрока.СтатьяЗатрат;
		Иначе
			СтрокаДвижения.КорСубконтоНУ1 = ТекСтрока.ПодразделениеОрганизации;
			СтрокаДвижения.КорСубконтоНУ2 = ТекСтрока.СтатьяЗатрат;
		КонецЕсли;	 
	Иначе
		Если НаправлениеСписания = "КоммерческиеРасходы" 
			или НаправлениеСписания = "ИздержкиОбращения"
			Тогда
			СтрокаДвижения.КорСубконто2 = ТекСтрока.ПодразделениеОрганизации;
			СтрокаДвижения.КорСубконто1 = ТекСтрока.СтатьяЗатрат;
		Иначе
			СтрокаДвижения.КорСубконто1 = ТекСтрока.ПодразделениеОрганизации;
			СтрокаДвижения.КорСубконто2 = ТекСтрока.СтатьяЗатрат;
		КонецЕсли;	 
		НоваяСтрока.Сумма	    			   = СуммаНДС;
		НоваяСтрока.СчетУчета    			   = ТекСтрока.КорСчетБУ;	
	КонецЕсли;		
	НоваяСтрока.СтатьяЗатрат  = ТекСтрока.СтатьяЗатрат;
	НоваяСтрока.Подразделение = ТекСтрока.ПодразделениеОрганизации;
	
	НоваяСтрока.КодОперации   						  = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
	НоваяСтрока.СписаниеПартий  					 = Истина;
	СтруктураПараметров["ИзмененыДвижения"+ИмяТабл] = Истина;
КонецПроцедуры	


Процедура ВыполнитьДопДвиженияНДСТребованиеНакладнаяНаше(СтруктураПараметров,ОбрабатываемыйДокумент,СтруктураВидовУчета)
	
	Если ТипЗнч(ОбрабатываемыйДокумент) <> Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		возврат;
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСНачисленный", Истина);
	
	ТаблицаДвижений	= Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("КорСчет"					, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный")); //!!!!!
	ТаблицаДвижений.Колонки.Добавить("КорСубконто1"); //!!!!!
	ТаблицаДвижений.Колонки.Добавить("КорСубконто2"); //!!!!!
	ТаблицаДвижений.Колонки.Добавить("КорСубконто3"); //!!!!!
	
	ТаблицаДвижений.Колонки.Добавить("КорСчетНУ"					, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый")); //!!!!!
	ТаблицаДвижений.Колонки.Добавить("КорСубконтоНУ1"); //!!!!!
	ТаблицаДвижений.Колонки.Добавить("КорСубконтоНУ2"); //!!!!!
	ТаблицаДвижений.Колонки.Добавить("КорСубконтоНУ3"); //!!!!!
	ТаблицаДвижений.Колонки.Добавить("ВидУчетаДтКт");
	
	ТаблицаДвижений.Колонки.Добавить("СчетФактура"				, Новый ОписаниеТипов("ДокументСсылка.ТребованиеНакладная")); //!!!!!
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"				, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"				, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаДвижений.Колонки.Добавить("Покупатель"				, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДвижений.Колонки.Добавить("ВидНачисления"			, Новый ОписаниеТипов("ПеречислениеСсылка.НДСВидНачисления"));
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента"		, Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДвижений.Колонки.Добавить("ИсправленныйСчетФактура"	, Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	ТаблицаДвижений.Колонки.Добавить("ДатаСобытия"				, Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("Событие"					, Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
	ТаблицаДвижений.Колонки.Добавить("СчетДоходовБУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СписаниеПартий"			, Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			);
	ТаблицаДвижений.Колонки.Добавить("ВидРегламентнойОперации"	, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	ПараметрыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
	ТаблицаДвижений.Колонки.Добавить("ПРГ_Количество"           , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	ТаблицаДвижений.Колонки.Добавить("НДС"						, Новый ОписаниеТипов("Число",,,ПараметрыЧисла));
	ТаблицаДвижений.Колонки.Добавить("НДСПР"					, Новый ОписаниеТипов("Число",,,ПараметрыЧисла));
	ТаблицаДвижений.Колонки.Добавить("СуммаБезНДС"				, Новый ОписаниеТипов("Число",,,ПараметрыЧисла));
	
	//начало изменений
	_СтавкаНДС = ОбрабатываемыйДокумент.СтавкаНДС;
	
	Если _СтавкаНДС = Перечисления.СтавкиНДС.НДС18 или _СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
		Ставка = 18;
	ИначеЕсли _СтавкаНДС = Перечисления.СтавкиНДС.НДС10 или _СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110  Тогда 
		Ставка = 10;
	Иначе 
		Ставка = 0;
	КонецЕсли;
	
	
	
	БратьСчетЗатрат = ОбрабатываемыйДокумент.ПРГ_ИспользоватьАналитикуЗатрат;
	_Покупатель 	= СтруктураПараметров.УчетнаяПолитика.Бух.Контрагент_Прогресс;
	_Договор     	= СтруктураПараметров.УчетнаяПолитика.Бух.Договор_Прогресс;
	Сч91021  	    = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02.1");
	Сч91027НУ       = ПланыСчетов.Налоговый.НайтиПоКоду("91.02.7");
	_Подразделение  = ОбрабатываемыйДокумент.ПодразделениеОрганизации;
	
	Статья91ПринятиеКналоговомуУчету =Справочники.ПрочиеДоходыИРасходы.СписаниеНДСНаРасходы.ПринятиеКналоговомуУчету;
	
	Для Каждого ТекСтрока Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
		Если Не ТекСтрока.ОтражатьВБухгалтерскомУчете Тогда
			продолжить;
		КонецЕсли;	
		
		НДС = Окр(ТекСтрока.Стоимость*Ставка/100,2,1);
		
		Если НДС = 0 Тогда
			продолжить;
		КонецЕсли;	 
		
		СтрокаДвижения =  ТаблицаДвижений.Добавить();
		
		СтрокаДвижения.СчетФактура = ОбрабатываемыйДокумент.Ссылка;
		Если Найти(ТекСтрока.СчетУчета.Код,"08") > 0 Тогда 
			СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование;
		ИначеЕсли Найти(ТекСтрока.СчетУчета.Код,"10") > 0 Тогда 
			СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
		ИначеЕсли Найти(ТекСтрока.СчетУчета.Код,"43") > 0 Тогда 
			СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
		КонецЕсли;
		
		
		
		Если БратьСчетЗатрат Тогда
			СтрокаДвижения.КорСчет 	   = ТекСтрока.КорСчетБУ;
			СтрокаДвижения.КорСчетНУ 	   = ТекСтрока.КорСчетНУ;
			НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(ТекСтрока.КодОперации, ТекСтрока.СтатьяЗатрат,ТекСтрока.КорСчетБУ);
			Если НаправлениеСписания = "ПроизводственныеРасходы" Тогда
				
				СписатьНаЗатратыНДСНЗПНаше(СтруктураПараметров,"НезавершенноеПроизводствоБух",ТекСтрока,
				НДС,СтрокаДвижения,Ложь);
				
				Если СтруктураВидовУчета.ОтражатьВНалоговомУчете Тогда
					СписатьНаЗатратыНДСНЗПНаше(СтруктураПараметров,"НезавершенноеПроизводствоНал",ТекСтрока,
					НДС,СтрокаДвижения,Истина);
				КонецЕсли;	 
				
			ИначеЕсли НаправлениеСписания = "ОбщехозяйственныеРасходы" 
				или НаправлениеСписания = "ОбщепроизводственныеРасходы" 
				или НаправлениеСписания = "КоммерческиеРасходы"
				или НаправлениеСписания = "ИздержкиОбращения"
				Тогда
				СписатьНаЗатратыНДСПостНаше(СтруктураПараметров,"ЗатратыБух",ТекСтрока,
				НДС,СтрокаДвижения,НаправлениеСписания,Ложь);
				Если СтруктураВидовУчета.ОтражатьВНалоговомУчете Тогда
					СписатьНаЗатратыНДСПостНаше(СтруктураПараметров,"ЗатратыНал",ТекСтрока,
					НДС,СтрокаДвижения,НаправлениеСписания,Истина);													
				КонецЕсли;	 
				
			ИначеЕсли НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы" 
				или НаправлениеСписания = "БракВПроизводстве" Тогда
				Сообщить("Счет не поддерживается");
			Иначе
				СтрокаДвижения.КорСубконто1 = ТекСтрока.КорСубконтоБУ1;
				СтрокаДвижения.КорСубконто2 = ТекСтрока.КорСубконтоБУ2;
				СтрокаДвижения.КорСубконто3 = ТекСтрока.КорСубконтоБУ3;
				
				СтрокаДвижения.КорСубконтоНУ1 = ТекСтрока.КорСубконтоНУ1;
				СтрокаДвижения.КорСубконтоНУ2 = ТекСтрока.КорСубконтоНУ2;
				СтрокаДвижения.КорСубконтоНУ3 = ТекСтрока.КорСубконтоНУ3;
				
			КонецЕсли;	
		Иначе
			СтрокаДвижения.КорСчет 	  	= Сч91021;
			СтрокаДвижения.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СписаниеНДСНаРасходы;
			СтрокаДвижения.КорСубконто2 = _Подразделение;
			
			СтрокаДвижения.КорСчетНУ 	   = Сч91027НУ;
			СтрокаДвижения.КорСубконтоНУ1  = Справочники.ПрочиеДоходыИРасходы.СписаниеНДСНаРасходы;
			Если Статья91ПринятиеКналоговомуУчету Тогда
				СтрокаДвижения.ВидУчетаДтКт = Перечисления.ВидыУчетаПоПБУ18.НУ; 
			Иначе
				СтрокаДвижения.ВидУчетаДтКт = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			КонецЕсли;
		КонецЕсли;	
		
		СтрокаДвижения.СтавкаНДС 	  = _СтавкаНДС;
		СтрокаДвижения.СуммаБезНДС   = ТекСтрока.Стоимость; 
		Если СтрокаДвижения.НДС = 0 Тогда
			СтрокаДвижения.НДС 		  = НДС;
		КонецЕсли;	
		
		СтрокаДвижения.Покупатель 	  = _Покупатель;
		СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
		СтрокаДвижения.СчетФактура   = ОбрабатываемыйДокумент.Ссылка;
		СтрокаДвижения.Номенклатура  = ТекСтрока.Номенклатура;
		СтрокаДвижения.ПРГ_Количество = ТекСтрока.Количество;
		
	КонецЦикла;	
	
	ТаблицаДвижений.Свернуть("КорСчет,КорСубконто1,КорСубконто2,КорСубконто3,
	|КорСчетНУ,КорСубконтоНУ1,КорСубконтоНУ2,КорСубконтоНУ3,ВидУчетаДтКт,
	|СчетФактура,ВидЦенности,Номенклатура,
	|СтавкаНДС,Покупатель,ВидНачисления,ДоговорКонтрагента,ИсправленныйСчетФактура,ДатаСобытия,Событие,СчетДоходовБУ,СчетУчетаНДС,СписаниеПартий,ВидРегламентнойОперации","НДС,СуммаБезНДС,ПРГ_Количество");
	
	_СчетКд = ПланыСчетов.Хозрасчетный.НДС;
	Для Каждого _ТекСтрока Из ТаблицаДвижений Цикл 
		
		//движения по НДС
		Движение  = СтруктураПараметров.ТаблицаДвиженийНДСНачисленный.Добавить();
		Движение.Активность = Истина;
		Движение.Период = СтруктураПараметров.Период;
		Движение.Организация   = СтруктураПараметров.Организация;
		Движение.ВидДВижения   = ВидДвиженияНакопления.Приход;
		Движение.СчетФактура   = _ТекСтрока.СчетФактура;
		Движение.СтавкаНДС	   = _ТекСтрока.СтавкаНДС;
		Движение.Покупатель    = _ТекСтрока.Покупатель;
		Движение.ВидЦенности   = _ТекСтрока.ВидЦенности;
		Движение.ВидНачисления =  Перечисления.НДСВидНачисления.НДСНачисленКУплате;
		Движение.ДоговорКонтрагента = _ТекСтрока.ДоговорКонтрагента;
		Движение.СуммаБезНДС        = _ТекСтрока.СуммаБезНДС;
		Движение.НДС                = _ТекСтрока.НДС;
		Движение.СписаниеПартий	    =  Истина;
		Движение.Номенклатура	    =  _ТекСтрока.Номенклатура;
		Движение.ПРГ_Количество     =  _ТекСтрока.ПРГ_Количество;
		СтруктураПараметров.ИзмененыДвиженияНДСНачисленный = Истина;
		
		Проводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
		Проводка.Активность = Истина;
		Проводка.Период = СтруктураПараметров.Период;
		Проводка.Организация    = СтруктураПараметров.Организация;
		Проводка.Регистратор    = ОбрабатываемыйДокумент;
		Проводка.Содержание		= "Выделен НДС";
		Проводка.Сумма 			= _ТекСтрока.НДС;
		Проводка.СчетДт 	    = _ТекСтрока.КорСчет;
		Проводка.Содержание     = "НДС";
		Проводка.СписаниеПартий = Истина;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, _ТекСтрока.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, _ТекСтрока.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, _ТекСтрока.КорСубконто3);
		
		Проводка.СчетКт = _СчетКд;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		Если СтруктураВидовУчета.ОтражатьВНалоговомУчете Тогда
			Проводка 				= СтруктураПараметров.ДвиженияНалоговый.Добавить();
			Проводка.Активность 	= Истина;
			Проводка.Организация    = СтруктураПараметров.Организация;
			Проводка.Регистратор    = ОбрабатываемыйДокумент;
			Проводка.Период			= СтруктураПараметров.Период;
			Проводка.СчетДт 		= _ТекСтрока.КорСчетНу;
			Проводка.Содержание     = "НДС";
			
			Проводка.ВидУчетаДт 	= _ТекСтрока.ВидУчетаДтКт;
			Проводка.Сумма 			= _ТекСтрока.НДС;
			Проводка.СписаниеПартий = Истина;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, _ТекСтрока.КорСубконтоНУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, _ТекСтрока.КорСубконтоНУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, _ТекСтрока.КорСубконтоНУ3);
			
			Если СтрокаДвижения.ВидУчетаДтКт = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				
				ПроводкаПоНеПринимаемымРасходам = СтруктураПараметров.ДвиженияНалоговый.Добавить();
				ПроводкаПоНеПринимаемымРасходам.Организация    = СтруктураПараметров.Организация;
				ПроводкаПоНеПринимаемымРасходам.Период         = СтруктураПараметров.Период;
				ПроводкаПоНеПринимаемымРасходам.Содержание     = "НДС не принимаемый расходы";
				ПроводкаПоНеПринимаемымРасходам.Сумма          = _ТекСтрока.НДС;
				ПроводкаПоНеПринимаемымРасходам.СписаниеПартий = Истина;
				
				
				Если Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходы Или Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ВнереализационныеРасходы) Тогда
					ПроводкаПоНеПринимаемымРасходам.СчетДТ     =   ПланыСчетов.Налоговый.ВнереализационныеРасходыНеУчитываемые;
				ИначеЕсли Проводка.СчетДт = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда Или Проводка.СчетКт = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда Тогда				
					ПроводкаПоНеПринимаемымРасходам.СчетДТ     =  ПланыСчетов.Налоговый.ВыплатыВпользуФизЛицПоП_1_48;
				Иначе
					ПроводкаПоНеПринимаемымРасходам.СчетДТ     =  ПланыСчетов.Налоговый.ДругиеВыплатыПоП_1_48;
				КонецЕсли;
				
				
			КонецЕсли;	
		КонецЕсли;	
	Конеццикла;		
КонецПроцедуры	

//конец изменений БП 04 

//AAA 20150621+
//Процедура ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, МоментКон, Останавливаться = Ложь, ПроведениеОстановлено = Ложь )
Процедура ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, МоментКон, Останавливаться = Ложь, ПроведениеОстановлено = Ложь, ДанныеПартий = Неопределено )
//AAA 20150621-	
	Организация = ТаблицаСписания[0].Организация;
	
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 		ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете")<>Неопределено);
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВМеждународномУчете")<>Неопределено);
	
	СтруктураПараметров.Вставить("Организация", Организация);
	
	ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания);
	
	СтруктураПараметров.Вставить("КодыОпераций",Перечисления.КодыОперацийПартииТоваров);
	
	Если ЗначениеЗаполнено(ТаблицаСписания[0].ОсновнойДокумент) Тогда
		
		СтруктураПараметров.Вставить("ОсновнойДокумент",ТаблицаСписания[0].ОсновнойДокумент);
		
	КонецЕсли;
	
	// Подготовка наборов записей
	ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина);
	
	СтруктураПараметров.Вставить("ТипЗначенияРегистратора", ТипЗнч(ТаблицаСписания[0].Регистратор));
	
	СтруктураПараметров.Вставить("ТаблицаСписанныхПартий",ПодготовитьСтруктуруТаблицыСписания(СтруктураПараметров, ТаблицаСписания));
	
	// Для закрытия заказов покупателей дерево остатков партий должно получаться особым способом
	Если СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") тогда
		СтруктураПараметров.Вставить("ЗакрытиеЗаказовПокупателей");
	КонецЕсли;
	
	// В некоторых случаях получать остатки не нужно
	ТребуетсяПолучитьОстатки = Истина;
	
	// Ордерная схема поступления
	Если СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		Или СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.АвансовыйОтчет") 
		Или СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки")  тогда
		
		ТребуетсяПолучитьОстатки = Ложь;
		
		// Возврат товаров от покупателя (возврат от комиссионера обрабатывается основным алгоритмом списания
		// фактически являясь частным случаем перемещения товаров)
	ИначеЕсли СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
		//ТребуетсяПолучитьОстатки = НЕ ТаблицаСписания[0].КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя;
		ТребуетсяПолучитьОстатки = НЕ ТаблицаСписания[0].КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя
		и НЕ ТаблицаСписания[0].КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратТарыЗалогСтоимость;
		//конец изменений 
		
		//начало изменений Ожиганов 29.10.2015 возврат по документу продажи 
		Если ТаблицаСписания[0].КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя 
			///и ТаблицаСписания[0].Период >='20151001'
		Тогда
			СтруктураПараметров.Вставить("ПРГ_ВозвратКакКорректировка",Истина);
		//конец изменений 
		КонецЕсли;
		//начало изменений БП 04
	ИначеЕсли СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		//начало изменений исправление косяков в случае если есть плюс и минус по количеству
		ТребуетсяПолучитьОстатки = Ложь;
		Для Каждого ПРГ_ТекСтрока Из ТаблицаСписания Цикл
			Если НЕ ПРГ_ТекСтрока.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя Тогда
				СтруктураПараметров.Вставить("ПРГ_НеучитыватьВозвраты",Истина);
				ТребуетсяПолучитьОстатки = Истина;
				прервать;
			КонецЕсли;	
		КонецЦикла;	
		//НЕ ТаблицаСписания[0].КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя;
		//конец изменений БП 04 
	КонецЕсли;
	
	Если ТребуетсяПолучитьОстатки Тогда
		
		// Добавление в структуру остатков по партионному учету
		ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);
		
	КонецЕсли;
	
	ОбрабатываемыйДокумент = Неопределено;
	
	СтруктураВидовУчета = Новый Структура("ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, ОтражатьВМеждународномУчете");
	
	СтрокаДокумента = Новый Структура;
	Для Каждого Колонка ИЗ ТаблицаСписания.Колонки Цикл
		СтрокаДокумента.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыСписания Из ТаблицаСписания Цикл
		
		ОбрабатываемыйДокумент = СтрокаТаблицыСписания.Регистратор;
		
		// Строка не обрабатывается при списании
		Если НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером И 
			( СтрокаТаблицыСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
			СтрокаТаблицыСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту)
			Тогда
			// Для документа "Реализация товаров и услуг" реализована возможность списывать партии при 
			// проведении документа, даже если вид передачи = "по ордеру"
			// В этом случае партия списывается за баланс и окончательное списание осуществляется ордером
			НеСписывать = Ложь;
		Иначе
			НеСписывать = СтрокаТаблицыСписания.НеСписывать;
		КонецЕсли;
		
		Если НеСписывать Тогда
			Продолжить;
		КонецЕсли;
		
		// Сумма НДС и сумма задолженности распределяются на строки списанных партий
		// Однако они впоследствии нужны подсистеме НДС
		СуммаНДС = СтрокаТаблицыСписания.СуммаНДС;
		СуммаЗадолженностиБУ = СтрокаТаблицыСписания.СуммаЗадолженностиБУ;
		
		// Для учета отклонений при возврате товаров поставщику требуется общая сумма задолженности БУ
		Если СтрокаТаблицыСписания.ОтражатьВБухгалтерскомУчете Тогда
			
			СтруктураПараметров.СуммаЗадолженностиБУ = СтруктураПараметров.СуммаЗадолженностиБУ + СуммаЗадолженностиБУ;
			
		КонецЕсли;
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		СтруктураПараметров.Вставить("НомерСтрокиСписанныхТоваров",СтрокаТаблицыСписания.НомерСтроки);
		
		ЗаполнитьЗначенияСвойств(СтруктураВидовУчета, СтрокаТаблицыСписания);
		
		Для Каждого КлючИЗначение ИЗ СтруктураВидовУчета Цикл
			Если КлючИЗначение.Значение Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТаблицыСписания);
				// is ЯннуровВФ нач 20141007
				Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда 
					СтрокаДокумента.Вставить("СчетУчета", СтрокаТаблицыСписания.СчетУчетаМУ);
					СтрокаДокумента.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
					Если Не СтруктураПараметров.ВестиПартионныйУчетПоСкладамМеж Тогда
						СтрокаДокумента.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
						СтрокаДокумента.Вставить("СкладПолучатель", Справочники.Склады.ПустаяСсылка());
					КонецЕсли;	
					Если Не СтрокаДокумента.ВестиПартионныйУчетПоСериям Тогда
						СтрокаДокумента.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
						СтрокаДокумента.Вставить("СерияНоменклатурыНовая", Справочники.СерииНоменклатуры.ПустаяСсылка());
					КонецЕсли;	
				КонецЕсли;
				// is ЯннуровВФ кон 20141007
				
				Шаблон = Новый Структура("ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, ОтражатьВМеждународномУчете", Ложь, Ложь, Ложь, Ложь);
				Шаблон[КлючИЗначение.Ключ] = ИСТИНА;
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, Шаблон);
				
				Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете
					И НЕ СтруктураПараметров.Свойство("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации")
					И (СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Реализация
					Или СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.РеализацияКомиссия) тогда
					
					СтруктураПараметров.Вставить("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации");
					
				КонецЕсли;
				
				// is ЯннуровВФ нач 20141008
				Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
					
					РегистрыУчетаСОстатками = Новый Массив;
					Если СтруктураПараметров.ЕстьНаСкладах Тогда 
						РегистрыУчетаСОстатками.Добавить("НаСкладах");
					КонецЕсли;
					Если СтруктураПараметров.ЕстьПереданные Тогда 
						РегистрыУчетаСОстатками.Добавить("Переданные");
					КонецЕсли;
					
					Для Каждого РегистрУчетаСОстатками Из РегистрыУчетаСОстатками Цикл 
						
						ИмяРегистраСОстатками = ПолучитьИмяРегистра("ПартииТоваров", РегистрУчетаСОстатками, СтрокаДокумента);
						Если ИмяРегистраСОстатками = "" Тогда 
							Продолжить;
						КонецЕсли;
						
						СтруктураИзмерений = СтруктураПараметров[ИмяРегистраСОстатками + "СтруктураИзмерений"];
						ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистраСОстатками + "ТаблицаОстатков"];
						ТаблицаОборотовПартий = СтруктураПараметров[ИмяРегистраСОстатками + "ТаблицаОборотов"];
						
						ЕстьОстаткиРасхода = Ложь;
						ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистраСОстатками];
						//AAA 20150621+
						//СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
						Если ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда
							Если СтруктураПараметров.Свойство("Соответствие"+ИмяРегистраСОстатками) = Ложь Тогда
								БыстрыйПоискОстатков = Новый Соответствие;
								
								Для Каждого СтрокаДерева из ДеревоПартий.Строки Цикл
									БыстрыйПоискОстатков.Вставить(СтрокаДерева.НомерСтрокиДокумента,СтрокаДерева);
								КонецЦикла;
								
								СтруктураПараметров.Вставить("Соответствие"+ИмяРегистраСОстатками,БыстрыйПоискОстатков);
							КонецЕсли;
							
							СтрокаДереваПартий = СтруктураПараметров["Соответствие"+ИмяРегистраСОстатками].Получить(СтрокаДокумента.НомерСтрокиДокумента);
						Иначе
							СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
						КонецЕсли;
						//AAA 20150621-
						
						Если СтрокаДереваПартий <> Неопределено Тогда
							Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
								СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий, ТаблицаОборотовПартий, СтрокаДокумента);
								Если СтрокаПартииРаспределения.Расход Тогда 
									ЕстьОстаткиРасхода = Истина;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если Не ЕстьОстаткиРасхода Тогда 
							ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаДокумента);
							СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтруктураИзмерений, СтруктураИзмерений, ТаблицаОстатковПартий, ТаблицаОборотовПартий, СтрокаДокумента);
							Если СтрокаДереваПартий = Неопределено Тогда 
								СтрокаДереваПартий = ДеревоПартий.Строки.Добавить();
								СтрокаДереваПартий.НомерСтрокиДокумента = СтрокаДокумента.НомерСтрокиДокумента;
							КонецЕсли;
							СтрокаПартииРаспределения = СтрокаДереваПартий.Строки.Вставить(0);
							ЗаполнитьЗначенияСвойств(СтрокаПартииРаспределения, СтрокаДокумента);
							СтрокаПартииРаспределения.Расход = Истина;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				// is ЯннуровВФ кон 20141008
				
				// Специфические случаи списания :
				
				// 1. Возврат от покупателя
				//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
				//Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя Тогда
				Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя
				или  СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратТарыЗалогСтоимость
				Тогда
				//конец изменений 	
					
					ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров);
				//>>010316 Степанов б/н 
				// 1.2 сторно возвратов от покупателей 
				ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ПРГ_СторноВозвратовПокупателейМСФО Тогда
					
					СторноВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров);
					
					// 2. Поступление товаров по ордеру: корректировка предыдущих списаний
				ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ПоступлениеПриходныйОрдер) Тогда
					
					Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
						ПоступлениеТоваровПоОрдеруУпр(СтрокаДокумента, СтруктураПараметров);
					КонецЕсли;
					
					// 3. Закрытие заказов
				ИначеЕсли ТипЗнч(СтрокаДокумента.Регистратор)=Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда
					
					СнятиеРезервовПоЗаказамПокупателей(СтрокаДокумента, СтруктураПараметров);
					
					// 4. Документ, в котором указываются данные, которых нет в документе списания:
					// - Списание партий по расходному ордеру
					// - Перемещение партий по приходному ордеру
				ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ОсновнойДокумент) Тогда
					
					СписаниеПартийОрдерныйСклад(СтрокаДокумента, СтруктураПараметров);
					
					// Общий случай списания
				Иначе
					
					// Сначала обрабатывается списание
					//AAA 20150621+
					//СписаниеПартий(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента.ИсточникПоКодуОперации);
					//начало изменений Ожиганов 10.08.2015 изменения МСФО 
					//Если ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда
					Если СтрокаДокумента.ОтражатьВМеждународномУчете 
						и ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда 
					//конец изменений 	
						СписаниеПартий(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента.ИсточникПоКодуОперации, ДанныеПартий);
					Иначе
						СписаниеПартий(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента.ИсточникПоКодуОперации);
					КонецЕсли;
					//AAA 20150621-
					
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		// Восстановим сумму НДС и сумму задолженности 
		СтрокаДокумента.СуммаНДС = СуммаНДС;
		СтрокаДокумента.СуммаЗадолженностиБУ = СуммаЗадолженностиБУ;
		
		//AAA 20150621+
		Если   ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО()
			 И СтруктураПараметров.ТаблицаСписанныхПартий.Индексы.Количество() = 0 Тогда
			 
			СтруктураПараметров.ТаблицаСписанныхПартий.Индексы.Добавить("НомерСтрокиДокумента");
		КонецЕсли;
		//AAA 20150621-
		
		ТаблицаСписанныхПартийПоТекущейСтроке = СтруктураПараметров.ТаблицаСписанныхПартий.НайтиСтроки(Новый Структура("НомерСтрокиДокумента", СтрокаДокумента.НомерСтрокиДокумента));
		Для Каждого ТекущаяСтрокаСписанныхПартий Из ТаблицаСписанныхПартийПоТекущейСтроке Цикл
			ТекущаяСтрокаСписанныхПартий.СуммаНДС = СуммаНДС;
			ТекущаяСтрокаСписанныхПартий.СуммаЗадолженностиБУ = СуммаЗадолженностиБУ;
		КонецЦикла;
		
		// is ЯннуровВФ нач 20141007
		//{11.11.2014 Островерхий заявка №33572 
		//Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда //При проведении только по УУ СтрокаДокумента не заполняется
		// is ЯннуровВФ нач 20141112 Для типа Булево функция ЗначениеЗаполнено всегда возврашает ИСТИНА
		//Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете И ЗначениеЗаполнено(СтрокаДокумента.ОтражатьВМеждународномУчете) Тогда
		Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете И СтрокаДокумента.ОтражатьВМеждународномУчете = Истина Тогда
		// is ЯннуровВФ кон 20141112
		//11.11.2014 Островерхий} 
			Для Каждого СтрокаСписания Из ТаблицаСписанныхПартийПоТекущейСтроке Цикл
				Если СтрокаСписания.ВидОперации = "Списание" Тогда
					// Заполнение полей, специфических для учета
					УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ВыполнитьСвязанныеДвиженияМеж(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
					
					// is ЯннуровВФ нач 20141003
					//НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат);
					НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат, СтрокаСписания.КорСчетМУ, "Международный");
					// is ЯннуровВФ кон 20141003
					ВыполнитьКорДвижениеМеж(СтрокаСписания.РегистрУчета, НаправлениеСписания, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
					
					// Формирование проводок по меж учету
					УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.СписаниеНаСчетМеж(СтрокаСписания.РегистрУчета, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
					
				// is ЯннуровВФ нач 20141030
				ИначеЕсли СтрокаСписания.ВидОперации = "Возврат" Тогда
				
					// Заполнение полей, специфических для учета
					УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ВыполнитьСвязанныеДвиженияМеж(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
					
					// Формирование проводок по меж учету
					УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.СписаниеНаСчетМеж(СтрокаДокумента.ИсточникПоКодуОперации, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
					
				// is ЯннуровВФ нач 20141030
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		// is ЯннуровВФ кон 20141007
		КонецЦикла; 
	
	Если СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером") тогда
		СтруктураПараметров.Удалить("ТаблицыСписанияРасходнымОрдером");
	КонецЕсли;
	
	Если Не ОбрабатываемыйДокумент = Неопределено Тогда
		
		Если ТипЗнч(ОбрабатываемыйДокумент)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			Если СтруктураПараметров.ЕстьСтрокиОтражатьвБухгалтерскомУчете Тогда
				ПроведениеКорректировкиРеализации(ОбрабатываемыйДокумент, СтруктураПараметров, ТаблицаСписания);
			КонецЕсли;
			
			Если СтруктураПараметров.ЕстьСтрокиОтражатьвУправленческомУчете Тогда
				ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания);
			КонецЕсли;
			
		Иначе
			
			//БП12
			Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.ТребованиеНакладная") Тогда 
				Если СтруктураВидовУчета.ОтражатьВБухгалтерскомУчете Тогда
					// подготовим к движению регистр учета передачи POS Контрагентам
					Если НЕ ОбрабатываемыйДокумент.Контрагент.Пустая() Тогда
						Если НЕ ОбрабатываемыйДокумент.ДоговорКонтрагента.Пустая() Тогда
							СтруктураПараметров.ДвиженияПРГ_POS_материалы.Отбор.Регистратор.Значение = ОбрабатываемыйДокумент;
							СтруктураПараметров.ДвиженияПРГ_POS_материалы.Отбор.Регистратор.Использование = Истина;
							СтруктураПараметров.Вставить("ИзмененыДвиженияПРГ_POS_материалы", Истина);
							
							ТаблицаДвижений = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Скопировать(,"Период, Активность, Организация, Номенклатура, Количество, Стоимость");
							ТаблицаДвижений.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
							ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
							Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
								СтрокаДвижения.Контрагент 		  = ОбрабатываемыйДокумент.Контрагент;
								СтрокаДвижения.ДоговорКонтрагента = ОбрабатываемыйДокумент.ДоговорКонтрагента;
							КонецЦикла;
							
							СтруктураПараметров.Вставить("ТаблицаДвиженийПРГ_POS_материалы", ТаблицаДвижений);
						КонецЕсли;
					КонецЕсли;
					
					//и по НДС
					Если ОбрабатываемыйДокумент.ВыделятьНДС Тогда 
						ВыполнитьДопДвиженияНДСТребованиеНакладнаяНаше(СтруктураПараметров,ОбрабатываемыйДокумент,СтруктураВидовУчета);
					КонецЕсли; 
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.СписаниеТоваров") Тогда 
				Если СтруктураПараметров.Период < ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости() Тогда
					Если (СтруктураВидовУчета.ОтражатьВБухгалтерскомУчете) И (НЕ ОбрабатываемыйДокумент.СчетЗатратШапка.Пустая()) Тогда
						//добавим проводку Кт 94 на указанный пользователем счет
						СтруктураПараметров.ИзмененыДвиженияХозрасчетный = Истина;
						ТаблицаПроводок = СтруктураПараметров.ДвиженияХозрасчетный.Выгрузить();
						Проводка = ТаблицаПроводок.Добавить();
						Проводка.Активность = Истина;
						Проводка.Период = СтруктураПараметров.Период;
						Проводка.Организация = СтруктураПараметров.Организация;
						Проводка.Регистратор = ОбрабатываемыйДокумент;
						//					Проводка.Содержание = "Отсторнировано";
						Проводка.Сумма  = СтруктураПараметров.ДвиженияХозрасчетный.Итог("Сумма");
						Проводка.СчетДт = ОбрабатываемыйДокумент.СчетЗатратШапка;
						Попытка
							Проводка.ВидСубконтоДт1 = Проводка.СчетДт.ВидыСубконто[0].ВидСубконто;
							Проводка.СубконтоДт1 	= ОбрабатываемыйДокумент.СубконтоШапка1;
						Исключение
						КонецПопытки;
						Попытка
							Проводка.ВидСубконтоДт2 = Проводка.СчетДт.ВидыСубконто[1].ВидСубконто;
							Проводка.СубконтоДт2 	= ОбрабатываемыйДокумент.СубконтоШапка2;
						Исключение
						КонецПопытки;
						Попытка
							Проводка.ВидСубконтоДт3 = Проводка.СчетДт.ВидыСубконто[2].ВидСубконто;
							Проводка.СубконтоДт3 	= ОбрабатываемыйДокумент.СубконтоШапка3;
						Исключение
						КонецПопытки;
						Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("94");
						СтруктураПараметров.ДвиженияХозрасчетный.Загрузить(ТаблицаПроводок);
					КонецЕсли;
					
					Если (СтруктураВидовУчета.ОтражатьВНалоговомУчете) И (НЕ ОбрабатываемыйДокумент.СчетЗатратНУШапка.Пустая()) Тогда
						//добавим проводку Кт 94 на указанный пользователем счет
						СтруктураПараметров.ИзмененыДвиженияНалоговый = Истина;
						
						ТаблицаПроводок = СтруктураПараметров.ДвиженияНалоговый.Выгрузить();
						Проводка 				= ТаблицаПроводок.Добавить();
						Проводка.Активность 	= Истина;
						Проводка.Период			= СтруктураПараметров.Период;
						Проводка.СчетДт = ОбрабатываемыйДокумент.СчетЗатратНУШапка;
						Попытка
							Проводка.ВидСубконтоДт1 = Проводка.СчетДт.ВидыСубконто[0].ВидСубконто;
							Проводка.СубконтоДт1 	= ОбрабатываемыйДокумент.СубконтоНУШапка1;
						Исключение
						КонецПопытки;
						Попытка
							Проводка.ВидСубконтоДт2 = Проводка.СчетДт.ВидыСубконто[1].ВидСубконто;
							Проводка.СубконтоДт2 	= ОбрабатываемыйДокумент.СубконтоНУШапка2;
						Исключение
						КонецПопытки;
						Попытка
							Проводка.ВидСубконтоДт3 = Проводка.СчетДт.ВидыСубконто[2].ВидСубконто;
							Проводка.СубконтоДт3 	= ОбрабатываемыйДокумент.СубконтоНУШапка3;
						Исключение
						КонецПопытки;
						Проводка.ВидУчетаДт 	= Перечисления.ВидыУчетаПоПБУ18.НУ;
						Проводка.Сумма			= СтруктураПараметров.ДвиженияНалоговый.Итог("Сумма");
						Проводка.Организация  	= СтруктураПараметров.Организация;
						
						Принимать_к_НУ = Истина;
						
						Если Проводка.ВидСубконтоДт1 = "ПрочиеДоходыИРасходы" Тогда
							Принимать_к_НУ = Проводка.СубконтоДт1.ПринятиеКналоговомуУчету;
						КонецЕсли;
						
						Если НЕ Принимать_к_НУ Тогда 
							Проводка.ВидУчетаДт 	= Перечисления.ВидыУчетаПоПБУ18.ПР;
							
							//Проводка 				= ТаблицаПроводок.Добавить();
							//Проводка.Активность 	= Истина;
							//Проводка.Период			= СтруктураПараметров.Период;
							//Проводка.СчетДт 		= ПланыСчетов.Налоговый.НайтиПоКоду("НЕ.03");
							//Проводка.ВидУчетаДт 	= Перечисления.ВидыУчетаПоПБУ18.НУ;
							//Проводка.Содержание 	= "Выделен НДС";
							//Проводка.Сумма			= СуммаНДСДокумента;
							//Проводка.Организация  	= СтруктураПараметров.Организация;
						КонецЕсли;
						Проводка.СчетКт = ПланыСчетов.Налоговый.НайтиПоКоду("94");
						СтруктураПараметров.ДвиженияНалоговый.Загрузить(ТаблицаПроводок);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
			
			// Дополнительные движения по результату списания документом определенных партий
			// is ЯннуровВФ нач 20141007
			//{11.11.2014 Островерхий заявка №33572 
			//Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
			// is ЯннуровВФ нач 20141112 Для типа Булево функция ЗначениеЗаполнено всегда возврашает ИСТИНА
			//Если ЗначениеЗаполнено(СтрокаДокумента.ОтражатьВМеждународномУчете) Тогда	
			Если  СтрокаДокумента.ОтражатьВМеждународномУчете = Истина Тогда	
			// is ЯннуровВФ кон 20141112
			//11.11.2014 Островерхий}	
				// Кор. движения делаются сразу при обработке строки
			Иначе
			// is ЯннуровВФ кон 20141007
				ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания);
			КонецЕсли;
			
		КонецЕсли;
		
		// Если задан параметр останавливаться при нехватке партий и партий не хватило - прекратим проведение
		Если Останавливаться И СтруктураПараметров.Отказ тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Проведение по партиям остановлено ",СтруктураПараметров.Отказ);
			ПроведениеОстановлено = Истина;
			Возврат;
			
		КонецЕсли;
		
		ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);
		
		#Если Клиент Тогда
			Состояние("Проведен документ " + ОбрабатываемыйДокумент);
		#КонецЕсли
	КонецЕсли;
	
	
КонецПроцедуры//ВыполнитьСписание()

// Сдвиг ГП расчетов по реализации
//
Процедура СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизацииНазад(СтруктураПараметров, ТаблицаСписания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииОрганизации.МоментВремени
	|ИЗ
	|	Последовательность.РасчетыПоРеализацииОрганизации.Границы КАК РасчетыПоРеализацииОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииОрганизации.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", ТаблицаСписания[0].Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МоментВремениДокумента = Новый МоментВремени(СтруктураПараметров.Период, СтруктураПараметров.Регистратор);
	
	Если Выборка.Следующий() Тогда
		
		// Граница переносится назад, если документ проводится задним числом
		Если МоментВремениДокумента.Сравнить(Выборка.МоментВремени) = -1 Тогда
			Последовательности.РасчетыПоРеализацииОрганизации.УстановитьГраницу(МоментВремениДокумента, Новый Структура("Организация", ТаблицаСписания[0].Организация));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры// СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизацииНазад

// 
//
Функция ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, Учет, Отбор = Неопределено, СписыватьПартииПриПроведенииДокументов = Ложь)
	
	// Границу последовательности можно сдвигать вперед только если между границей
	// и документом нет других документов в последовательности
	// Исключения - регламентные документы
	// Регламентные документы могут располагаться в последней секунде месяца
	// одновременно с другими документами и иметь момент времени меньше,
	// чем документы списания, находящиеся в той же секунде
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Последовательность.Регистратор
	|ИЗ
	|	Последовательность.ПартионныйУчет КАК Последовательность
	|ГДЕ
	|    Организация =&Организация
	|	И Последовательность.МоментВремени > &Граница
	|	И Последовательность.МоментВремени < &Документ
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска)
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров)
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг)
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ПоступлениеТоваровИзПереработки)
	|	И (НЕ Последовательность.Регистратор = &Регистратор)";
	
	Если Учет = "Упр" Тогда
		
		ГраницаМоментВремени = Последовательности.ПартионныйУчет.ПолучитьГраницу(Отбор);
		
	ИначеЕсли Учет = "Бух" ИЛИ Учет = "Нал" Тогда
		
		ГраницаМоментВремени = Последовательности.ПартионныйУчетБУ.ПолучитьГраницу(Отбор);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартионныйУчет", "ПартионныйУчетБУ");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Отбор.Организация);
	Запрос.УстановитьПараметр("Граница", ГраницаМоментВремени);
	Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);
	Запрос.УстановитьПараметр("Регистратор", ДокументМоментВремени.Ссылка);
	
	Если ГраницаМоментВремени = Неопределено ИЛИ ГраницаМоментВремени.Дата = '00010101' Тогда
		Возврат Истина;
	ИначеЕсли СписыватьПартииПриПроведенииДокументов И (ГраницаМоментВремени.Дата > ДокументМоментВремени.Дата) Тогда
		Возврат Ложь;
	Иначе	
		Возврат Запрос.Выполнить().Пустой();
	КонецЕсли;	
	
КонецФункции 

// 
//
Функция ОпределитьНаличиеПоследующихДокументовВПоследовательности(ДокументМоментВремени, Учет, Отбор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Последовательность.Регистратор
	|ИЗ
	|	Последовательность.ПартионныйУчет КАК Последовательность
	|ГДЕ
	|    Организация =&Организация
	|	И Последовательность.МоментВремени > &Документ
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска)
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров)
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг)
	|	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ПоступлениеТоваровИзПереработки)
	|	И (НЕ Последовательность.Регистратор = &Регистратор)";
	
	Если Учет = "Бух" ИЛИ Учет = "Нал" Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартионныйУчет", "ПартионныйУчетБУ");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Отбор.Организация);
	Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);
	Запрос.УстановитьПараметр("Регистратор", ДокументМоментВремени.Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПОСТУПЛЕНИЯ НЕОТФАКТУРОВАННЫХ ТОВАРОВ

Процедура ПоступлениеТоваровПоОрдеруУпр(СтрокаДокумента, СтруктураПараметров)
	
	Если НЕ СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Ссылка = СтрокаДокумента.Регистратор;
	
	ПриходныйОрдер = СтрокаДокумента.ПоступлениеПриходныйОрдер;
	
	Если Не ТипЗнч(ПриходныйОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДатаОрдера = Новый Запрос("ВЫБРАТЬ Дата ИЗ Документ.ПриходныйОрдерНаТовары ГДЕ Ссылка = &Ссылка");
	ЗапросДатаОрдера.УстановитьПараметр("Ссылка", ПриходныйОрдер);
	Выборка = ЗапросДатаОрдера.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Дата начала обработки
	ДатаНач = Выборка.Дата;
	
	// Дата конца обработки
	ДатаКон = СтрокаДокумента.Период;
	
	// Партии, поступившие по накладной
	ЗапросПартии = Новый Запрос;
	
	ЗапросПартии.УстановитьПараметр("Регистратор", Ссылка);
	ЗапросПартии.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	ЗапросПартии.УстановитьПараметр("ПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК КоличествоДляВозврата,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК СтоимостьДляВозврата,
	|	ПартииТоваровНаСкладах.Качество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
	|	И ПартииТоваровНаСкладах.СтатусПартии <> &ПоОрдеру
	|	И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Качество";
	
	ТабПартий = ЗапросПартии.Выполнить().Выгрузить();
	
	МассивНоменклатуры = ТабПартий.ВыгрузитьКолонку("Номенклатура");
	
	МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	// Пустая таблица
	ТабПартийПеред = Новый ТаблицаЗначений;
	ТабПартийПеред.Колонки.Добавить("Номенклатура");
	ТабПартийПеред.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабПартийПеред.Колонки.Добавить("ДокументОприходования");
	ТабПартийПеред.Колонки.Добавить("ДоговорКонтрагента");
	ТабПартийПеред.Колонки.Добавить("ДокументПередачи");
	ТабПартийПеред.Колонки.Добавить("СтатусПартии");
	ТабПартийПеред.Колонки.Добавить("СтатусПередачи");
	ТабПартийПеред.Колонки.Добавить("Количество");
	ТабПартийПеред.Колонки.Добавить("Стоимость");
	
	// Запрос для определения количества строк в регистре партий:
	
	Если СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр = 0 Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(ПартииТоваровНаСкладах.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	ПартииТоваровНаСкладах.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр = Выборка.НомерСтроки;
		КонецЕсли;
	КонецЕсли;	
	
	// Запрос по списанию партий ордеров:
	
	Запрос = Новый Запрос;
	
	МассивРеализация = Новый Массив;
	МассивРеализация.Добавить(КодыОпераций.Реализация);
	МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
	МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
	МассивРеализация.Добавить(КодыОпераций.ВозвратОтПокупателяТекущийМесяц);
	Запрос.УстановитьПараметр("КодыСписаниеНаСебестоимость", МассивРеализация);
	
	МассивСписаниеНаПереданные = Новый Массив;
	МассивСписаниеНаПереданные.Добавить(КодыОпераций.ПередачаНаКомиссию);
	МассивСписаниеНаПереданные.Добавить(КодыОпераций.ПередачаВПереработку);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаПереданные",МассивСписаниеНаПереданные);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаЗатраты", КодыОпераций.СписаниеНаЗатраты);
	
	МассивПеремещениеСклад= Новый Массив;
	МассивПеремещениеСклад.Добавить(КодыОпераций.ПеремещениеМеждуСкладами);
	МассивПеремещениеСклад.Добавить(КодыОпераций.ПереоценкаПринятыхНаКомиссию);
	МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаСерийИХарактеристик);
	МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаКачества);
	МассивПеремещениеСклад.Добавить(КодыОпераций.РезервированиеПодЗаказ);
	МассивПеремещениеСклад.Добавить(КодыОпераций.СнятиеРезерваПодЗаказ);
	
	Запрос.УстановитьПараметр("КодыПеремещениеСклад", МассивПеремещениеСклад);
	
	МассивСписаниеНаСклад = Новый Массив;
	МассивСписаниеНаСклад.Добавить(КодыОпераций.ВозвратОтКомиссионера);
	МассивСписаниеНаСклад.Добавить(КодыОпераций.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("КодыСписаниеНаСклад", МассивСписаниеНаСклад);
	
	Запрос.УстановитьПараметр("МассивДокументовОприходования", ПриходныйОрдер);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("КодОперацииСписаниеПоОрдеру", Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру);
	
	Запрос.УстановитьПараметр("КодыСписаниеПартийВПроизводство", КодыОпераций.СписаниеПартийВПроизводствоОперативно);
	Запрос.УстановитьПараметр("КодКомплектация", КодыОпераций.Комплектация);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Период КАК Период,
	|	Источник.Регистратор КАК Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА (НЕ Переданные.СтатусПередачи ЕСТЬ NULL )
	|			ТОГДА Переданные.СтатусПередачи	
	|		ИНАЧЕ
	|			Неопределено
	|	КОНЕЦ КАК СтатусПередачи,	
	|	ВЫБОР
	|		КОГДА (НЕ Переданные.ДокументПередачи ЕСТЬ NULL )
	|			ТОГДА Переданные.ДокументПередачи	
	|		КОГДА (НЕ МатериалыВЭксплуатации.ДокументПередачи ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.ДокументПередачи
	|		ИНАЧЕ
	|			Неопределено
	|	КОНЕЦ КАК ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации КАК КодОперацииПартииТоваровПереданные,
	|	НаСкладахПоступление.Склад КАК СкладПолучатель,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыНовая,
	|	НаСкладахПоступление.СерияНоменклатуры КАК СерияНоменклатурыНовая,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ НезавершенноеПроизводство.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА (НЕ НезавершенноеПроизводство.Подразделение ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НаСкладахПоступление.Заказ ЕСТЬ NULL )
	|			ТОГДА НаСкладахПоступление.Заказ
	|		КОГДА (НЕ НезавершенноеПроизводство.Заказ ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСписания,
	|	0 КАК СтоимостьПоступление,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество КАК КачествоНовое,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА (НЕ МатериалыВЭксплуатации.ФизЛицо ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.ФизЛицо
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА (НЕ МатериалыВЭксплуатации.НазначениеИспользования ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.НазначениеИспользования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НазначениеИспользования,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОприходованияНовый,
	|	ЕСТЬNULL(ИсточникДляКомплектации.Количество, 0) КАК КоличествоПоступление,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.ВалютаДокумента КАК ВалютаДокумента,
	|	СписанныеТовары.КурсДокумента КАК КурсДокумента,
	|	СписанныеТовары.КратностьДокумента КАК КратностьДокумента,
	|	СписанныеТовары.НоменклатураКомплекта КАК НоменклатураКомплекта,
	|	СписанныеТовары.ХарактеристикаКомплекта КАК ХарактеристикаКомплекта,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ СписанныеТовары.Количество = 0
	|			ТОГДА СписанныеТовары.КоличествоКомплекта*Источник.Количество/СписанныеТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоКомплекта,
	|	СписанныеТовары.СуммаЗадолженности КАК СуммаВыручки,	
	|	СписанныеТовары.Проект КАК Проект,
	|	ЕСТЬNULL(СписанныеТовары.ВедениеУчетаПоПроектам, ЛОЖЬ) КАК ВедениеУчетаПоПроектам	
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные КАК Переданные
	|		ПО Источник.Регистратор = Переданные.Регистратор
	|			И Источник.НомерКорСтроки = Переданные.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаПереданные))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Затраты КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор
	|			И Источник.НомерКорСтроки = Затраты.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаЗатраты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладахПоступление
	|		ПО Источник.Регистратор = НаСкладахПоступление.Регистратор
	|			И Источник.НомерКорСтроки = НаСкладахПоступление.НомерСтроки
	|			И (Источник.КодОперации В (&КодыПеремещениеСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводство КАК НезавершенноеПроизводство
	|		ПО Источник.Регистратор = НезавершенноеПроизводство.Регистратор
	|			И Источник.НомерКорСтроки = НезавершенноеПроизводство.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеПартийВПроизводство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииМатериаловВЭксплуатации КАК МатериалыВЭксплуатации
	|		ПО Источник.Регистратор = МатериалыВЭксплуатации.Регистратор
	|			И Источник.НомерКорСтроки = МатериалыВЭксплуатации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ИсточникДляКомплектации
	|		ПО Источник.Регистратор = ИсточникДляКомплектации.Регистратор
	|			И Источник.НомерКорСтроки = ИсточникДляКомплектации.НомерСтроки
	|			И (Источник.КодОперации В (&КодКомплектация))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО Источник.Регистратор = СписанныеТовары.Регистратор
	|			И (Источник.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки)
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации <> &КодОперацииСписаниеПоОрдеру
	|	И Источник.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА (НЕ Переданные.СтатусПередачи ЕСТЬ NULL )
	|			ТОГДА Переданные.СтатусПередачи	
	|		ИНАЧЕ
	|			Неопределено
	|	КОНЕЦ,	
	|	ВЫБОР
	|		КОГДА (НЕ Переданные.ДокументПередачи ЕСТЬ NULL )
	|			ТОГДА Переданные.ДокументПередачи	
	|		КОГДА (НЕ МатериалыВЭксплуатации.ДокументПередачи ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.ДокументПередачи
	|		ИНАЧЕ
	|			Неопределено
	|	КОНЕЦ,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации,
	|	НаСкладахПоступление.Склад,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры,
	|	НаСкладахПоступление.СерияНоменклатуры,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ НезавершенноеПроизводство.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА (НЕ НезавершенноеПроизводство.Подразделение ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НаСкладахПоступление.Заказ ЕСТЬ NULL )
	|			ТОГДА НаСкладахПоступление.Заказ
	|		КОГДА (НЕ НезавершенноеПроизводство.Заказ ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество,
	|	ВЫБОР
	|		КОГДА (НЕ МатериалыВЭксплуатации.ФизЛицо ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.ФизЛицо
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ МатериалыВЭксплуатации.НазначениеИспользования ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.НазначениеИспользования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИсточникДляКомплектации.Количество, 0),
	|	Источник.НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.ВалютаДокумента,
	|	СписанныеТовары.КурсДокумента,
	|	СписанныеТовары.КратностьДокумента,
	|	СписанныеТовары.НоменклатураКомплекта,
	|	СписанныеТовары.ХарактеристикаКомплекта,
	|	Источник.КодОперации,
	|	СписанныеТовары.СуммаЗадолженности,
	|	СписанныеТовары.Проект,
	|	СписанныеТовары.ВедениеУчетаПоПроектам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	НаСкладах.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	НаСкладах.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	НаСкладах.Заказ,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	Источник.КодОперации,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	NULL,
	|	NULL,
	|	Себестоимость.Подразделение,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
	|		ПО Источник.Регистратор = НаСкладах.Регистратор
	|			И Источник.НомерКорСтроки = НаСкладах.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.ДоговорКонтрагента,
	|	Источник.ДокументПередачи,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.СтатусПередачи,
	|	НаСкладах.Склад,
	|	НаСкладах.СерияНоменклатуры,
	|	НаСкладах.Заказ,
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.КодОперации,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Себестоимость.Подразделение,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Номенклатура В (&МассивНоменклатуры)
	|	И Источник.ДокументОприходования В (&МассивДокументовОприходования) И ");
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Пустые колонки для совместимости со структурой регистра СписанныеТовары
	ТаблицаЗапроса.Колонки.Добавить("СтатусПартииНовый");
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВБухгалтерскомУчете",  Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВНалоговомУчете",      Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВМеждународномУчете",  Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ВидТабличнойЧасти");
	ТаблицаЗапроса.Колонки.Добавить("ЗаказПартии");
	
	ТаблицаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");
	
	ТаблицаЗапроса.Колонки.Добавить("ИзменитьСерию", Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ИзменитьХарактеристику", Новый ОписаниеТипов("Булево"));
	
	Если ТаблицаЗапроса.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	// Таблицы остатков партий
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладах"+"Упр", ТабПартий);
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровПереданные"+"Упр", ТабПартийПеред);
	
	НачНомерНаСкладах = 0;
	Если Не СтруктураПараметров.Свойство("МинНомерСтрокиПартииТоваровНаСкладахУпр",НачНомерНаСкладах) тогда
		НачНомерНаСкладах = СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр;
		СтруктураПараметров.Вставить("МинНомерСтрокиПартииТоваровНаСкладахУпр", НачНомерНаСкладах);
	КонецЕсли;
	
	НачНомерПереданные = 0;
	Если Не СтруктураПараметров.Свойство("МинНомерСтрокиПартииТоваровПереданныеУпр",НачНомерПереданные) тогда
		НачНомерПереданные = СтруктураПараметров.ТекНомерСтрокиПартииТоваровПереданныеУпр;
		СтруктураПараметров.Вставить("МинНомерСтрокиПартииТоваровПереданныеУпр", НачНомерПереданные);
	КонецЕсли;
	
	Для Каждого ВыборкаДвижений ИЗ ТаблицаЗапроса Цикл
		
		// Сторно списания по ордеру
		Если ВыборкаДвижений.СписаноИз = "НаСкладах" Тогда
			
			СтруктураПоиска = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Заказ, Качество",
			ВыборкаДвижений.Номенклатура,
			ВыборкаДвижений.ХарактеристикаНоменклатуры,
			ВыборкаДвижений.СерияНоменклатуры,
			ВыборкаДвижений.Заказ,
			ВыборкаДвижений.Качество
			);
			Если ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров) Тогда
				СтруктураПоиска.Вставить("Склад",ВыборкаДвижений.Склад);
			КонецЕсли;
			
			НайденныеСтроки = СтруктураПараметров["ТаблицаПартииТоваровНаСкладах"+"Упр"].НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = ВыборкаДвижений.Количество;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ВыборкаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц тогда
					
					Количество = Строка.КоличествоДляВозврата;
					Стоимость  = Строка.СтоимостьДляВозврата;
					
				Иначе
					
					Количество = Строка.Количество;
					Стоимость  = Строка.Стоимость;
					
				КонецЕсли;
				
				Если Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				// Ресурсы 
				Количество	= Окр(Количество * КоэффСписания,3,1);
				Стоимость	= Окр(Стоимость  * КоэффСписания,2,1);
				
				// Сторно старого движения
				Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение, ВыборкаДвижений);
				
				Движение.Период = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Количество   = -Количество;
				Движение.Стоимость    = 0;
				
				НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат);
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("НаСкладах", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "Переданные" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр[Движение.НомерКорСтроки -1- НачНомерПереданные];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
				// Новое движение
				Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение, ВыборкаДвижений);
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				Движение.Период       = СтрокаДокумента.Период;
				
				Если НЕ ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров) Тогда
					Движение.Склад = Неопределено;
				КонецЕсли;				
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.ДокументОприходования = Строка.ДокументОприходования;
				Движение.СтатусПартии = Строка.СтатусПартии;
				
				Движение.Количество   = Количество;
				Движение.Стоимость    = Стоимость;
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Если ВыборкаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц тогда
					
					Строка.КоличествоДляВозврата = Строка.КоличествоДляВозврата - Движение.Количество;
					Строка.СтоимостьДляВозврата  = Строка.СтоимостьДляВозврата  - Движение.Стоимость;
					
				Иначе
					
					Строка.Количество = Строка.Количество - Движение.Количество;
					Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
					
				КонецЕсли;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("НаСкладах", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "Переданные" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр[Движение.НомерКорСтроки -1- НачНомерПереданные];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
					
					// Если движение привело к поступлению в партии товаров переданные - надо увеличить остаток с соответствующим статусом партии
					НоваяСтрокаПереданных = СтруктураПараметров["ТаблицаПартииТоваровПереданные"+"Упр"].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПереданных,ВыборкаДвижений);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПереданных,Движение);
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ВыборкаДвижений.СписаноИз = "Переданные" Тогда	
			
			СтруктураПоиска = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ДоговорКонтрагента, ДокументПередачи, СтатусПередачи",
			ВыборкаДвижений.Номенклатура,
			ВыборкаДвижений.ХарактеристикаНоменклатуры,
			ВыборкаДвижений.ДоговорКонтрагента,
			ВыборкаДвижений.ДокументПередачи,
			ВыборкаДвижений.СтатусПередачи,
			);
			
			СтруктураПоиска.Вставить("СтатусПередачи", ВыборкаДвижений.СтатусПередачи);
			
			НайденныеСтроки = СтруктураПараметров["ТаблицаПартииТоваровПереданные"+"Упр"].НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = ВыборкаДвижений.Количество;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				// Ресурсы 
				Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
				Стоимость	= Окр(Строка.Стоимость  * КоэффСписания,2,1);
				
				// Сторно старого движения
				Движение              = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаДвижений);
				
				Движение.Период       = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Количество   = -Количество;
				Движение.Стоимость    = 0;
				
				// Код операции партии товаров должен совпадать с кодом операции
				ВыборкаДвижений.КодОперацииПартииТоваров = ВыборкаДвижений.КодОперации;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат);
				ВыполнитьКорДвижениеУпр("Переданные",НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "НаСкладах" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр[Движение.НомерКорСтроки -1- НачНомерНаСкладах];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
				// Новое движение
				Движение              = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаДвижений);
				
				Движение.Период       = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.ДокументОприходования = Строка.ДокументОприходования;
				Движение.СтатусПартии  = Строка.СтатусПартии;
				
				Движение.Количество   = Количество;
				Движение.Стоимость    = Стоимость;
				
				// Уменьшение погашаемого количества
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Строка.Количество = Строка.Количество - Движение.Количество;
				Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("Переданные", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "НаСкладах" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр[Движение.НомерКорСтроки -1- НачНомерНаСкладах];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПоступлениеТоваровПоОрдеруУпр

Процедура СдвинутьГраницуПоследовательности(ИмяПоследовательности, ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументов)
	СдвигатьГраницу = ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументов);
	
	Если СдвигатьГраницу Тогда
		Последовательности[ИмяПоследовательности].УстановитьГраницу(ДокументМоментВремени, Отбор);
		
		Набор = Последовательности[ИмяПоследовательности].СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ДокументМоментВремени.Ссылка);
		Если ЗначениеЗаполнено(Набор.Отбор.Регистратор.Значение) ТОгда
			
			Если ДокументМоментВремени.Ссылка.Проведен Тогда
				ДокументПроведенВХронологическойПоследовательности = (НЕ СписыватьПартииПриПроведенииДокументов) ИЛИ ОпределитьНаличиеПоследующихДокументовВПоследовательности(ДокументМоментВремени, Учет, Отбор);
				
				Если ДокументПроведенВХронологическойПоследовательности Тогда
					Набор.Прочитать();
					Для Каждого ТекСтрока Из Набор Цикл
						ТекСтрока.ПроведенВХронологическойПоследовательности = Истина;
					КонецЦикла;
					Набор.Записать();
				КонецЕсли;	
			Иначе
				Набор.Записать();//Удалим не проведенный документ из таблицы регистрации в последовательности
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура УстановкаГраницыПоследовательности(ЗакрытиеЗаказовПокупателей, ТаблицаСписания, Учет, ДокументМоментВремени, КорректировкаСтоимостиСписания=Ложь, СписыватьПартииПриПроведенииДокументовУпр) Экспорт
	
	ИмяПоследовательности = "ПартионныйУчет";
	Если Учет = "Упр" тогда
		ИмяПоследовательности = ИмяПоследовательности;
	ИначеЕсли Учет = "Бух" ИЛИ Учет = "Нал" тогда
		ИмяПоследовательности = ИмяПоследовательности + "БУ";
	КонецЕсли;
	
	Если ЗакрытиеЗаказовПокупателей Тогда
		
		СписокОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
		
		//СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		Для Каждого Организация Из СписокОрганизаций Цикл
			Если Учет = "Упр" Тогда
				СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, ДокументМоментВремени);				
				Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ), Ложь);
			Иначе	
				Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", Организация, Ложь);
			КонецЕсли;	
			СдвинутьГраницуПоследовательности(ИмяПоследовательности, ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументовУпр);
		КонецЦикла;
		
	ИначеЕсли НЕ ЗакрытиеЗаказовПокупателей Тогда
		
		Если КорректировкаСтоимостиСписания Тогда
			Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", Справочники.Организации.ПустаяСсылка(), Ложь);
		Иначе	
			Если Учет = "Упр" Тогда
				СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации( ДокументМоментВремени.Ссылка.Организация, ДокументМоментВремени);				
				Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(ДокументМоментВремени.Ссылка.Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ), Ложь);
			Иначе
				Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", ДокументМоментВремени.Ссылка.Организация, Ложь);
			КонецЕсли;
		КонецЕсли;	
		
		СдвинутьГраницуПоследовательности(ИмяПоследовательности, ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументовУпр);
		
	КонецЕсли;
	
КонецПроцедуры // УстановкаГраницыПоследовательности()

// Процедура-вход для всех документов. Проводит переданный документ по учету партий товаров
//
// Параметры
//  ОбрабатываемыйДокумент - проводимый документ
//
Процедура ДвижениеПартийТоваров(ОбрабатываемыйДокумент, ТаблицаСписания = Неопределено,
	КоличествоСтрокВДокументе = 0, ЗНАЧ Упр = Истина,
	ЗНАЧ Бух = Истина, ЗНАЧ Нал = Истина,
	Останавливаться = Ложь, ПроведениеОстановлено = Ложь,
	ДокументМоментВремени = Неопределено, СписаниеВыполняетсяОбработкой = Ложь,
	СтруктураНаборовЗаписей = Неопределено,
	ФормироватьПроводки = Неопределено, СписыватьПартииНДС = Неопределено, УчетнаяПолитика = Неопределено) Экспорт
	
	СтруктураДата = Новый Структура("Дата");
	СтруктураДата.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ПолучитьРеквизитыОбъекта(ОбрабатываемыйДокумент, СтруктураДата);
	
	ИспользоватьРасширеннуюАналитику = Ложь;							
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
		И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураДата.Дата Тогда
		Если УчетнаяПолитика <> Неопределено
			И УчетнаяПолитика.Свойство("Бух")
			И УчетнаяПолитика.Бух.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			Упр = Ложь;  
			Бух = Ложь;
			ИспользоватьРасширеннуюАналитику = Истина;
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");							
	
	Если НЕ СписаниеВыполняетсяОбработкой Тогда
		Упр = Упр И ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов;
		Бух = Бух И ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух;
		Нал = Нал И ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал;
	КонецЕсли;								
	
	СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(ОбрабатываемыйДокумент.Организация, ОбрабатываемыйДокумент.Дата);
	Упр = Упр И (НЕ СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется);
	
	// Если не переданы строки документа, выбираем из базы.
	Если ТаблицаСписания = Неопределено Тогда
		
		// Таблица строк документов списания
		ТаблицаСписания = ПолучитьТаблицуСтрокДокументов(ОбрабатываемыйДокумент, Упр, Бух, Нал);
	КонецЕсли;
	УчетНДС.ДополнитьСписанныеТоварыДаннымиПоКомиссии(ОбрабатываемыйДокумент, ТаблицаСписания);
	
	Если ТаблицаСписания.Колонки.Найти("Покупатель") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	
	КоличествоСтрокВДокументе = ТаблицаСписания.Количество();
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	СтруктураПараметров.Вставить("Покупатель", 						 СтруктураДата.Контрагент);
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ", ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);
		СтруктураПараметров.Вставить("СписыватьПартииНДС", ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);
	Иначе
		СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ", Истина);
		СтруктураПараметров.Вставить("СписыватьПартииНДС", Истина);
	КонецЕсли;	
	
	Если СписаниеВыполняетсяОбработкой  Тогда
		Если НЕ ФормироватьПроводки = Неопределено ТОгда
			СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ", ФормироватьПроводки);
		КонецЕсли;
		Если НЕ СписыватьПартииНДС = Неопределено ТОгда
			СтруктураПараметров.Вставить("СписыватьПартииНДС", СписыватьПартииНДС);
		КонецЕсли;
	КонецЕсли;	
	
	Если ДокументМоментВремени = Неопределено Тогда
		ДокументМоментВремени = Новый МоментВремени(СтруктураДата.Дата, ОбрабатываемыйДокумент);
	КонецЕсли; 
	
	//начало изменений Ожиганов 10.08.2015 изменения МСФО 
	//перенеесем ниже зачем каждый раз обращаться к регистру если он не используется
	//для бу и нал
	//AAA 20150621+
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//			   |	ис_СписанныеТоварыМеждународныйУчет.ДокументПартии,
	//			   |	ис_СписанныеТоварыМеждународныйУчет.ДокументПартии.Дата КАК Дата
	//			   |ИЗ
	//			   |	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК ис_СписанныеТоварыМеждународныйУчет
	//			   |ГДЕ
	//			   |	ис_СписанныеТоварыМеждународныйУчет.Регистратор = &Регистратор";
	//Запрос.УстановитьПараметр("Регистратор", ОбрабатываемыйДокумент);
	//ДанныеПартий = Запрос.Выполнить().Выгрузить();
	//ДанныеПартий.Индексы.Добавить("ДокументПартии");
	//AAA 20150621-
	//конец изменений  
	
	Если КоличествоСтрокВДокументе > 0 Тогда
		
		СтруктураПараметров.Вставить("ТекстСообщений", "");
		//начало изменений
		СтруктураПараметров.Вставить("ПРГ_НовыйАлгоритм",СтруктураДата.Дата >= ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости());
		//конец изменений 
		
		СтруктураПараметров.Вставить("Отказ", Ложь);
		
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 		ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете")<>Неопределено);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВМеждународномУчете")<>Неопределено);
		
		Если НЕ (Упр ИЛИ Бух ИЛИ Нал ИЛИ СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете) Тогда
			Возврат;
		КонецЕсли;	
		
		//Получение учетной политики
		Если УчетнаяПолитика = Неопределено Тогда
			СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(ДокументМоментВремени, 
			СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете И Упр, 
			(СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете  И Бух) ИЛИ СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете, 
			СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете И Нал,
			СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете, ОбрабатываемыйДокумент.Организация));
			
			Если СтруктураПараметров.УчетнаяПолитика = Неопределено Тогда												
				Возврат;
			КонецЕсли;	
		Иначе
			СтруктураПараметров.Вставить("УчетнаяПолитика", УчетнаяПолитика);
		КонецЕсли;	
		
		Если СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете И Нал Тогда
			Если ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная
				И ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ОбъектНалогообложенияУСН", "Нал", СтруктураПараметров) = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда	
				//Для объекта налогообложения "Доходы" партионный налоговый учет не ведется
				СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете = Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ОбрабатываемыйДокумент.Организация) И СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете И Упр Тогда
			СпособВеденияПартионногоУчетаПоОрганизации = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособВеденияПартионногоУчетаПоОрганизации", "Упр", СтруктураПараметров);
			СтруктураПараметров.Вставить("ОрганизацияУпр", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(ОбрабатываемыйДокумент.Организация,СпособВеденияПартионногоУчетаПоОрганизации));
		Иначе
			СтруктураПараметров.Вставить("ОрганизацияУпр", ОбрабатываемыйДокумент.Организация);
		КонецЕсли;			
		
		Если СтруктураНаборовЗаписей = Неопределено Тогда
			
			// Движения - наборы записей по регистрам
			СоздатьНаборыЗаписей(СтруктураПараметров);
			
		Иначе
			
			Для каждого Элемент Из СтруктураНаборовЗаписей Цикл
				
				СтруктураПараметров.Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЦикла;
			
		КонецЕсли; 
		
		
		ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Упр, Бух, Нал);
		
		Строка0 = ТаблицаСписания[0];
		
		Если НЕ ЗначениеЗаполнено(Строка0.Регистратор) Тогда
			ТаблицаСписания.ЗаполнитьЗначения(ОбрабатываемыйДокумент, "Регистратор");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка0.Период) Тогда
			ТаблицаСписания.ЗаполнитьЗначения(СтруктураДата.Дата, "Период");
		КонецЕсли;
		
		//AAA 20150621+
		//ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, ДокументМоментВремени, Останавливаться, ПроведениеОстановлено);
		//Если ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда
		Если  ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда
			//AAA 20150621+
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						   |	ис_СписанныеТоварыМеждународныйУчет.ДокументПартии,
						   |	ис_СписанныеТоварыМеждународныйУчет.ДокументПартии.Дата КАК Дата
						   |ИЗ
						   |	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК ис_СписанныеТоварыМеждународныйУчет
						   |ГДЕ
						   |	ис_СписанныеТоварыМеждународныйУчет.Регистратор = &Регистратор";
			Запрос.УстановитьПараметр("Регистратор", ОбрабатываемыйДокумент);
			ДанныеПартий = Запрос.Выполнить().Выгрузить();
			ДанныеПартий.Индексы.Добавить("ДокументПартии");
			//AAA 20150621-
			ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, ДокументМоментВремени, Останавливаться, ПроведениеОстановлено, ДанныеПартий);
		Иначе
			ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, ДокументМоментВремени, Останавливаться, ПроведениеОстановлено);
		КонецЕсли;
		//AAA 20150621-
		
	КонецЕсли;
	
	// Сдвиг границы последовательности осуществляется только при онлайновом списании партий
	// либо из обработки проведение по партиям.
	ЗакрытиеЗаказовПокупателей = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей");
	КорректировкаСтоимостиСписания = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров");
	
	Если НЕ СписаниеВыполняетсяОбработкой Тогда
		
		Если Упр Тогда
			УстановкаГраницыПоследовательности(ЗакрытиеЗаказовПокупателей, ТаблицаСписания, "Упр", ДокументМоментВремени, КорректировкаСтоимостиСписания, ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов);
		КонецЕсли;
		
		Если Бух Или Нал Тогда
			
			УстановкаГраницыПоследовательности(ЗакрытиеЗаказовПокупателей, ТаблицаСписания, "Бух", ДокументМоментВремени, КорректировкаСтоимостиСписания, ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// is ЯннуровВФ нач 20141023
	//{11.11.2014 Островерхий заявка №33572 
	//Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда //СтруктураПараметров.Регистратор не понятно где должен был быть определен
	Если ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда 
	//11.11.2014 Островерхий}  
		СформироватьДельтуПоПроводкамМеж(СтруктураПараметров);
	КонецЕсли;
	// is ЯннуровВФ кон 20141023
	
КонецПроцедуры // ДвижениеПартийТоваров()

Функция ПолучитьСписокДокументовПоПоследовательности(ИмяПоследовательности,МоментВремениНачало, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке=1000, Организации=Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоДокументовВВыборке,"ЧГ=") + "
	|	ТаблицаПоследовательности.Период КАК Дата,
	|	ТаблицаПоследовательности.Регистратор КАК Ссылка,
	|	ТаблицаПоследовательности.Организация КАК Организация
	|ИЗ
	|	Последовательность." + ИмяПоследовательности + " КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Период <= &ДатаКон
	|	И (ТаблицаПоследовательности.Период > &Период
	|	ИЛИ ((ТаблицаПоследовательности.Период = &Период) И (ТаблицаПоследовательности.Регистратор > &Регистратор)))");
	Если ЗначениеЗаполнено(Организации) Тогда 					  
		Запрос.Текст = Запрос.Текст + "
		|	И ТаблицаПоследовательности.Организация В (&Организации)";
		Запрос.УстановитьПараметр("Организации",Организации);
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст + "						  
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПоследовательности.Период,
	|	ТаблицаПоследовательности.Регистратор";
	Запрос.УстановитьПараметр("ДатаКон",ДатаОкончания);					  
	Запрос.УстановитьПараметр("Период",МоментВремениНачало.Дата);					  
	Запрос.УстановитьПараметр("Регистратор",МоментВремениНачало.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

// СЛУЖЕБНЫЕ ФУНКЦИИ ДЛЯ СОВМЕСТИМОСТИ С БП
////////////////////////////////////////////////////////////////////////////////

// ДВИЖЕНИЯ ПО НДС
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ

// Упр

Процедура ЗаполнитьЗапросПартийНаСкладахУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, 
	|		Организация = &Организация 
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					РегистрСведений.СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары
	|				ГДЕ
	|					РегистрСведений.СписанныеТовары.Регистратор = &Ссылка) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СтатусПартии,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (ВЫБОР
	|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|							ТОГДА ВЫБОР
	|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ)
	|		И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахУпр()

Процедура ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателей(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, 
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры, Заказ) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры,
	|					СписанныеТовары.ЗаказПартии
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Заказ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|	
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахУпрДляЗакрытияЗаказовПокупателей()

Процедура ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр(Запрос, ВестиПартионныйУчетПоСкладам)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, 
	|		Организация = &Организация 
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) " + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В ( 
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СерияНоменклатуры,
	|	СтатусПартии
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|				ИЛИ СписанныеТовары.Качество = &ПустоеКачество)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|			И (ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииВозвратнаяТараОтложеннаяОтгрузка
	|				ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииКупленныйОтложеннаяОтгрузка)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО 
	|			(СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры " + ?(ВестиПартионныйУчетПоСкладам,"
	|			И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) ","")+"
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|	
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|ИТОГИ ПО
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
	Запрос.УстановитьПараметр("СтатусПартииВозвратнаяТараОтложеннаяОтгрузка", Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка);
	Запрос.УстановитьПараметр("СтатусПартииКупленныйОтложеннаяОтгрузка", Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка);
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр()

Процедура ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр(Запрос,ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, 
	|		Организация = &Организация 
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СтатусПартии,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (ВЫБОР
	|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|							ТОГДА ВЫБОР
	|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ)
	|		И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента	
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр()

Функция ПолучитьДеревоПартийНаСкладахУпр (МоментКон, СтруктураПараметров)
	
	Запрос = Новый Запрос;
	
	ОсновнойДокумент = Неопределено;
	СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);
	
	Регистратор = СтруктураПараметров.Регистратор;
	СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗУпр;
	СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииУпр;
	ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамУпр;
	
	// Для повышения быстродействия остатки партий получаются различными способами 
	Если СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей") Тогда
		ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателей(Запрос);
		
	ИначеЕсли ОсновнойДокумент <> Неопределено И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером
		И ТипЗнч(ОсновнойДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг")тогда
		// Списание расходным ордером товара реализованного и принятого на ответственное хранение (отложенная отгрузка)
		ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр(Запрос, ВестиПартионныйУчетПоСкладам);
		
	ИначеЕсли ОсновнойДокумент <> Неопределено тогда
		// Списание партий по ордерной схеме: 
		// - Списание партий по расходному ордеру
		// - Перемещение партий по приходному ордеру
		// - Перемещение партий поступлением товаров и услуг в НТТ
		// Движения реализации выполняет расходный ордер, движения перемещения выполняет приходный ордер
		ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		
	Иначе
		// Общий случай списания
		ЗаполнитьЗапросПартийНаСкладахУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		Если НЕ СтруктураПараметров.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры",
			"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
			|ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &КодРезервирование");
			Запрос.УстановитьПараметр("КодРезервирование" , СтруктураПараметров.КодыОпераций.РезервированиеПодЗаказ)
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);	
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ОрганизацияУпр);
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	
	Если  ОсновнойДокумент <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);
	Иначе
		Запрос.УстановитьПараметр("ОсновнойДокумент", Регистратор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дат", МоментКон);
	
	Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции//ПолучитьДеревоПартийНаСкладахУпр

Функция ПолучитьДеревоПартийПереданныеУпр(МоментКон, Регистратор, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СтатусПартии,
	|	ПартииТоваровПереданные.СтатусПередачи
	|
	|ПОМЕСТИТЬ ПартииТоваровПереданные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные.Остатки(
	|		&Дат,
	|		(Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары 
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ДоговорКонтрагента = Неопределено, "", "
	|		И ДоговорКонтрагента = &ДоговорКонтрагента") + ") КАК ПартииТоваровПереданные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СтатусПартии,
	|	ЗаказПередачи
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.Количество,
	|	ПартииТоваровПереданные.Стоимость,
	|	ПартииТоваровПереданные.СтатусПартии,
	|	ПартииТоваровПереданные.СтатусПередачи,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровПереданные КАК ПартииТоваровПереданные 
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СтатусПартии = &ПустойСтатус
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = &СтатусПартииПоОрдеру
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|						ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|					ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ЗаказПередачи
	|							ИЛИ ПартииТоваровПереданные.ЗаказПередачи = &ЗаказПоставщикуПустаяСсылка
	|								И СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровПереданные";
	
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);	
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

// Бух
//начало изменений
Процедура ЗаполнитьЗапросПартийНаСкладахБух(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ,ПРГ_ВключатьПроверкуПоДоговору,ПРГ_НеучитыватьВозвраты=Ложь)
	//конец изменений	
	
	/// Кунов О.В., 30.09.2014 - 32330
	Если Запрос.Параметры.Свойство("СортировкаПоДате") Тогда
		ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(Запрос.Параметры.СортировкаПоДате, "ПартииТоваровНаСкладах");
	Иначе
		ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");
	КонецЕсли;
	///
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	//начало изменений
	|	ЕСТЬNULL(Хозрасчетный.Забалансовый, ЛОЖЬ) КАК Забалансовый,
	//конец изменений
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И Номенклатура В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка "
	+?(ПРГ_НеучитыватьВозвраты," И СписанныеТовары.КодОперацииПартииТоваров <> &КодВозврата","")+"
	|СГрУППИРОВАТЬ ПО СписанныеТовары.Номенклатура)
	//условие перенесем ниже
	//+ ?(ВестиПартионныйУчетПоСкладам, "
	//|		И (Склад В (
	//|				ВЫБРАТЬ
	//|					СписанныеТовары.Склад
	//|				ИЗ
	//|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	//|				ГДЕ
	//|					СписанныеТовары.Регистратор = &Ссылка) 
	//|			ИЛИ Склад = &ПустойСклад)", "") + 
	////
	|) КАК ПартииТоваровНаСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный	
	|		ПО ПартииТоваровНаСкладах.СчетУчета = Хозрасчетный.Ссылка
	//начало изменений Ожиганов 26.09.2015 так получше будет
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Организация,
	//|	Номенклатура,
	//|	ХарактеристикаНоменклатуры
	//конец изменений 
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	"""" КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация"
	+?(ПРГ_НеучитыватьВозвраты," И СписанныеТовары.КодОперацииПартииТоваров <> &КодВозврата","")+"
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	//m.ionov@a-prof.ru 19.02.2014
	//|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)",
	" И ((ПартииТоваровНаСкладах.Забалансовый И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад))ИЛИ(НЕ ПартииТоваровНаСкладах.Забалансовый))") + "
	//m.ionov@a-prof.ru 21.02.2014
	//начало изменений 
	|"+?(ПРГ_ВключатьПроверкуПоДоговору,"И (ВЫБОР КОГДА (СписанныеТовары.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику ИЛИ СписанныеТовары.Регистратор ССЫЛКА Документ.ПеремещениеТоваров) И ПартииТоваровНаСкладах.СчетУчета.Забалансовый ТОГДА ВЫБОР КОГДА ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента =  СписанныеТовары.КорСубконтоБУ2 ИЛИ ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента = НЕОПРЕДЕЛЕНО ИЛИ СписанныеТовары.КорСубконтоБУ2 = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ ИНАЧЕ ИСТИНА КОНЕЦ)","")+" 
	//конец изменений 
	//----m.ionov@a-prof.ru---
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПартииТоваровНаСкладах.ДокументОприходования,
	//|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	//|	ПартииТоваровНаСкладах.Номенклатура,
	//|	ПартииТоваровНаСкладах.Склад,
	//|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	//|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	//|	ПартииТоваровНаСкладах.Качество,
	//|	ПартииТоваровНаСкладах.Заказ,
	//|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	//|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	//|	ПартииТоваровНаСкладах.СчетУчета,
	//|	ПартииТоваровНаСкладах.Организация
	//|	
	//|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	//|ИЗ
	//|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	//|		&Дат,
	//|		Организация = &Организация
	//|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	//|				ВЫБРАТЬ
	//|					СписанныеТовары.Номенклатура,
	//|					СписанныеТовары.ХарактеристикаНоменклатуры
	//|				ИЗ
	//|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	//|				ГДЕ
	//|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	//|		И (Склад В (
	//|				ВЫБРАТЬ
	//|					СписанныеТовары.Склад
	//|				ИЗ
	//|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	//|				ГДЕ
	//|					СписанныеТовары.Регистратор = &Ссылка) 
	//|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Организация,
	//|	Номенклатура,
	//|	ХарактеристикаНоменклатуры,
	//|	Качество,
	//|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	//|	СчетУчета,
	//|	Заказ,
	//|	СерияНоменклатуры
	//|;
	//|
	//|///////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	//|	ПартииТоваровНаСкладах.ДокументОприходования,
	//|	ПартииТоваровНаСкладах.ДокументОприходованияПредставление,
	//|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	//|	ПартииТоваровНаСкладах.Номенклатура,
	//|	ПартииТоваровНаСкладах.Склад,
	//|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	//|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	//|	ПартииТоваровНаСкладах.Качество,
	//|	ПартииТоваровНаСкладах.Заказ,
	//|	ПартииТоваровНаСкладах.Количество,
	//|	ПартииТоваровНаСкладах.Стоимость,
	//|	ПартииТоваровНаСкладах.СчетУчета,
	//|	ПартииТоваровНаСкладах.Организация,
	//|	ВЫБОР
	//|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	//|			ТОГДА 0
	//|		ИНАЧЕ 1
	//|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	//|	ВЫБОР
	//|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	//|			ТОГДА 1
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ЧислоСтатусПартии,
	//|	ВЫБОР
	//|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	//|					ТОГДА 1
	//|				ИНАЧЕ 0
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ЧислоЗаказ,
	//|	ВЫБОР
	//|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	//|					ТОГДА 0
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ЧислоДокументОприходования
	//|ИЗ
	//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	//|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	//|		ПО 
	//|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	//|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	//|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	//|			И (ВЫБОР
	//|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	//|					ТОГДА ИСТИНА
	//|				ИНАЧЕ ВЫБОР
	//|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	//|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	//|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	//|					КОНЕЦ
	//|			КОНЕЦ)
	////m.ionov@a-prof.ru 19.02.2014
	////|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	//|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", " И ((ПартииТоваровНаСкладах.СчетУчета.Забалансовый И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад))ИЛИ(НЕ ПартииТоваровНаСкладах.СчетУчета.Забалансовый))") + "
	////m.ionov@a-prof.ru 21.02.2014
	//|			И (ВЫБОР КОГДА (СписанныеТовары.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику ИЛИ СписанныеТовары.Регистратор ССЫЛКА Документ.ПеремещениеТоваров) И ПартииТоваровНаСкладах.СчетУчета.Забалансовый ТОГДА ВЫБОР КОГДА ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента =  СписанныеТовары.КорСубконтоБУ2 ИЛИ ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента = НЕОПРЕДЕЛЕНО ИЛИ СписанныеТовары.КорСубконтоБУ2 = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ ИНАЧЕ ИСТИНА КОНЕЦ) 
	////----m.ionov@a-prof.ru---
	//|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаБУ
	//|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)
	//|			И (ВЫБОР
	//|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	//|					ТОГДА ВЫБОР
	//|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	//|								ТОГДА ВЫБОР
	//|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	//|											ТОГДА ЛОЖЬ
	//|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	//|									КОНЕЦ
	//|							ИНАЧЕ ИСТИНА
	//|						КОНЕЦ
	//|				ИНАЧЕ ВЫБОР
	//|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	//|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	//|					ИНАЧЕ ИСТИНА
	//|				КОНЕЦ
	//|			КОНЕЦ)
	//|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	//|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	//|ГДЕ
	//|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ЧислоСерияНоменклатуры,
	//|	ЧислоДокументОприходования,
	//|	ЧислоЗаказ,
	//|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	//|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	//|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	//|	ПартииТоваровНаСкладах.Склад
	//|ИТОГИ ПО
	//|	НомерСтрокиДокумента
	//|;
	//|
	//|///////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахБух()

Процедура ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат, 
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры, Заказ) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры,
	|					СписанныеТовары.ЗаказПартии
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Заказ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Организация = ПартииТоваровНаСкладах.Организация
	|			И СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|	
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух()

Процедура ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиБух(Запрос, ВестиПартионныйУчетПоСкладам)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) " + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|				ИЛИ СписанныеТовары.Качество = &ПустоеКачество)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО 
	|			СписанныеТоварыОрдера.Регистратор = &Ссылка
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры " + ?(ВестиПартионныйУчетПоСкладам,"
	|			И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) ","")+"
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|	И ПартииТоваровНаСкладах.СчетУчета = &СчетУчета
	|
	|ИТОГИ ПО
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента	
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиБух

Процедура ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеБух(Запрос,ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры)В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СчетУчета,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|			ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|				И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|				И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|				И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|						ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|					ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеБух()

Функция ПолучитьДеревоПартийНаСкладахБух(МоментКон, Организация, СтруктураПараметров)
	
	Запрос = Новый Запрос;
	
	ОсновнойДокумент = Неопределено;
	СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);
	
	Регистратор = СтруктураПараметров.Регистратор;
	СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗБух;
	СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииБух;
	ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамБух;
	
	// Для повышения быстродействия остатки партий получаются различными способами в зависимости от 
	// типа документа
	Если СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей") Тогда
		ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух(Запрос);
		
	ИначеЕсли ОсновнойДокумент <> Неопределено И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером
		И ТипЗнч(ОсновнойДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг")тогда
		// Списание расходным ордером товара реализованного и принятого на ответственное хранение (отложенная отгрузка)
		ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиБух(Запрос, ВестиПартионныйУчетПоСкладам);
		
	ИначеЕсли ОсновнойДокумент <> Неопределено тогда
		// Списание партий по ордерной схеме: 
		// - Списание партий по расходному ордеру
		// - Перемещение партий по приходному ордеру
		// Движения реализации выполняет расходный ордер, движения перемещения выполняет приходный ордер
		ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеБух(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		
	Иначе
		// Общий случай списания
		//начало изменений
		/// Кунов О.В., 30.09.2014 - 32330
		/// Кунов О.В., 29.12.2014 - 34984
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И
			Регистратор.Товары.Количество() > 0 И
			Регистратор.Товары[0].Качество <> Справочники.Качество.Новый И
			Регистратор.Товары[0].Качество <> Справочники.Качество.НайтиПоНаименованию("Претензия поставщики") И // Шевченков №39464 (добавил строку)
			Регистратор.Товары[0].Качество <> Справочники.Качество.HOLD Тогда
			
			Запрос.Параметры.Вставить("СортировкаПоДате", "ЛИФО");
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
			Запрос.Параметры.Вставить("СортировкаПоДате", "ФИФО");
			
		КонецЕсли;
		///
		//начало изменений исправление косяков по корректировки реализаци
		ПРГ_НеучитыватьВозвраты = ложь;
		Если СтруктураПараметров.Свойство("ПРГ_НеучитыватьВозвраты",ПРГ_НеучитыватьВозвраты) и ПРГ_НеучитыватьВозвраты Тогда
			ЗаполнитьЗапросПартийНаСкладахБух(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ,(ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров") или  ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")),Истина);
			Запрос.УстановитьПараметр("КодВозврата",СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя);
		Иначе	
			ЗаполнитьЗапросПартийНаСкладахБух(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ,(ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров") или  ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")),Ложь);
		КонецЕсли;	
		//конец изменений
		Если НЕ СтруктураПараметров.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры",
			"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
			|ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &КодРезервирование");
			Запрос.УстановитьПараметр("КодРезервирование" , СтруктураПараметров.КодыОпераций.РезервированиеПодЗаказ)
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	
	Если  ОсновнойДокумент <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);
	Иначе
		Запрос.УстановитьПараметр("ОсновнойДокумент", Регистратор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ПолучитьДеревоПартийПереданныеБух(МоментКон, Регистратор, Организация, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СчетУчета
	|
	|ПОМЕСТИТЬ ПартииТоваровПереданные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Остатки(
	|			&Дат,
	|			(Номенклатура, ХарактеристикаНоменклатуры) В (
	|					ВЫБРАТЬ
	|						СписанныеТовары.Номенклатура,
	|						СписанныеТовары.ХарактеристикаНоменклатуры
	|					ИЗ
	|						РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|					ГДЕ
	|						СписанныеТовары.Регистратор = &Ссылка)" + ?(ДоговорКонтрагента = Неопределено, "", "
	|			И ДоговорКонтрагента = &ДоговорКонтрагента") + ") КАК ПартииТоваровПереданные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СчетУчета,
	|	ЗаказПередачи
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
//начало изменений б/н сортировка при получении остаков переданных товаров по дате документа передачи  05.09.2016 	
//	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи как ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Дата как ДокументПередачи_Дата,
//конец изменений 
	|	ПартииТоваровПереданные.ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.Количество,
	|	ПартииТоваровПереданные.Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровПереданные КАК ПартииТоваровПереданные
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|						ИЛИ ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)	
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|						ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|					ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ЗаказПередачи
	|							ИЛИ ПартииТоваровПереданные.ЗаказПередачи = &ЗаказПоставщикуПустаяСсылка
	|								И СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
//начало изменений б/н сортировка при получении остаков переданных товаров по дате документа передачи  05.09.2016 
	|  ДокументПередачи_Дата,ДокументПередачи,
//конец изменений 
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровПереданные";
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции//ПолучитьДеревоПартийПереданныеБух

// Нал

Процедура ЗаполнитьЗапросПартийНаСкладахНал(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ,ПРГ_НеучитыватьВозвраты=Ложь)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	//начало изменений
	//|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	//конец изменений
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ВременнаяРазницаОстаток  КАК ВременнаяРазница,
	|	ПартииТоваровНаСкладах.ПостояннаяРазницаОстаток КАК ПостояннаяРазница
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И Номенклатура В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка"
	+?(ПРГ_НеучитыватьВозвраты," И СписанныеТовары.КодОперацииПартииТоваров <> &КодВозврата","")+"
	| сгруппировать по СписанныеТовары.Номенклатура)
	|
	//условие перенесем ниже
	//+ ?(ВестиПартионныйУчетПоСкладам, "
	//+ ?(ВестиПартионныйУчетПоСкладам, "
	//|		И (Склад В (
	//|				ВЫБРАТЬ
	//|					СписанныеТовары.Склад
	//|				ИЗ
	//|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	//|				ГДЕ
	//|					СписанныеТовары.Регистратор = &Ссылка) 
	//|			ИЛИ Склад = &ПустойСклад)"
	//, "") + 
	|) КАК ПартииТоваровНаСкладах
	|
	//начало изменений Ожиганов 26.09.2015 так получше будет 
	//| //ИНДЕКСИРОВАТЬ ПО
	//| /	Организация,
	//|	Номенклатура,
	//|	ХарактеристикаНоменклатуры
	//конец изменений 
	//начало изменений
	//|	Качество,
	//|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	//|	СчетУчета,
	//|	Заказ,
	//|	СерияНоменклатуры
	//конец изменений
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	"""" как ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ВременнаяРазница,
	|	ПартииТоваровНаСкладах.ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация "
	+?(ПРГ_НеучитыватьВозвраты," И СписанныеТовары.КодОперацииПартииТоваров <> &КодВозврата","")+"	
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаНУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = &МатериалыВСоставеОСвНУ)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахНал()

Процедура ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейНал(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ПостояннаяРазницаОстаток,
	|	ПартииТоваровНаСкладах.ВременнаяРазницаОстаток
	|
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах 
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры, Заказ) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры,
	|					СписанныеТовары.ЗаказПартии
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Заказ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ПостояннаяРазницаОстаток,
	|	ПартииТоваровНаСкладах.ВременнаяРазницаОстаток
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Организация = ПартииТоваровНаСкладах.Организация
	|			И СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|	
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
КонецПроцедуры//ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейНал()

Процедура ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеНал(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ВременнаяРазницаОстаток  КАК ВременнаяРазница,
	|	ПартииТоваровНаСкладах.ПостояннаяРазницаОстаток КАК ПостояннаяРазница
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СчетУчета,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ВременнаяРазница,
	|	ПартииТоваровНаСкладах.ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаНУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = &МатериалыВСоставеОСвНУ)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|			ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|				И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|				И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|				И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|						ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|					ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";
	
КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеНал()

Функция ПолучитьДеревоПартийНаСкладахНал(МоментКон, Организация, СтруктураПараметров)
	
	Запрос = Новый Запрос;
	
	ОсновнойДокумент = Неопределено;
	СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);
	
	Регистратор = СтруктураПараметров.Регистратор;
	СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗНал;
	СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииНал;
	ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамНал;
	
	// Для повышения быстродействия остатки партий получаются различными способами в зависимости от 
	// типа документа
	Если СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей") Тогда
		ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейНал(Запрос);
		
	ИначеЕсли ОсновнойДокумент <> Неопределено Тогда
		
		// Списание партий по ордерной схеме: 
		// - Списание партий по расходному ордеру
		// - Перемещение партий по приходному ордеру
		// Движения реализации выполняет расходный ордер, движения перемещения выполняет приходный ордер
		ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеНал(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		
	Иначе
		// Общий случай списания
		ПРГ_НеучитыватьВозвраты = ложь;
		Если СтруктураПараметров.Свойство("ПРГ_НеучитыватьВозвраты",ПРГ_НеучитыватьВозвраты) и ПРГ_НеучитыватьВозвраты Тогда
			ЗаполнитьЗапросПартийНаСкладахНал(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ,Истина);
			Запрос.УстановитьПараметр("КодВозврата",СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя);			
		Иначе
			ЗаполнитьЗапросПартийНаСкладахНал(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ,Ложь);
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры",
			"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
			|ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &КодРезервирование");
			Запрос.УстановитьПараметр("КодРезервирование" , СтруктураПараметров.КодыОпераций.РезервированиеПодЗаказ)
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Если  ОсновнойДокумент <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);
	Иначе
		Запрос.УстановитьПараметр("ОсновнойДокумент", Регистратор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МатериалыВСоставеОСвНУ",ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ);
	
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("Новый", Справочники.Качество.Новый);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции//ПолучитьДеревоПартийНаСкладахНал

Функция ПолучитьДеревоПартийПереданныеНал(МоментКон, Регистратор, Организация, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ПартииТоваровПереданные.ВременнаяРазницаОстаток  КАК ВременнаяРазница,
	|	ПартииТоваровПереданные.ПостояннаяРазницаОстаток КАК ПостояннаяРазница
	|
	|ПОМЕСТИТЬ ПартииТоваровПереданные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеНалоговыйУчет.Остатки(
	|			&Дат,
	|			Номенклатура В (
	|					ВЫБРАТЬ
	|						СписанныеТовары.Номенклатура
	|					ИЗ
	|						РегистрСведений.СписанныеТовары КАК СписанныеТовары 
	|					ГДЕ
	|						СписанныеТовары.Регистратор = &Ссылка)" + ?(ДоговорКонтрагента = Неопределено, "", "
	|			И ДоговорКонтрагента = &ДоговорКонтрагента") + ") КАК ПартииТоваровПереданные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СчетУчета,
	|	ЗаказПередачи
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
//начало изменений б/н сортировка при получении остаков переданных товаров по дате документа передачи  05.09.2016 	
//	|	ПартииТоваровПереданные.ДокументПередачи,
   	| 	ПартииТоваровПереданные.ДокументПередачи как ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Дата как ДокументПередачи_Дата,
//конец изменений 
	|	ПартииТоваровПереданные.ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.Количество,
	|	ПартииТоваровПереданные.Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ПартииТоваровПереданные.ВременнаяРазница,
	|	ПартииТоваровПереданные.ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровПереданные КАК ПартииТоваровПереданные
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СчетУчета = СписанныеТовары.СчетУчетаНУ
	|						ИЛИ ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ)	
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|						ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|					ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ЗаказПередачи
	|							ИЛИ ПартииТоваровПереданные.ЗаказПередачи = &ЗаказПоставщикуПустаяСсылка
	|								И СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
//начало изменений б/н сортировка при получении остаков переданных товаров по дате документа передачи  05.09.2016 
	|  ДокументПередачи_Дата, ДокументПередачи,
//конец изменений 
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровПереданные";
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());
	
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции//ПолучитьДеревоПартийПереданныеНал

// Меж
Функция ПолучитьДеревоПартийНаСкладахМеж(МоментКон, Регистратор, Организация, СпособОценкиМПЗ, СтратегияСтатусПартии, ВестиПартионныйУчетПоСкладам, ОсновнойДокумент = Неопределено)
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");
	
	//>>010616 Степанов запрос оптимизирован: партии вынесены в ВТ
	Запрос = Новый Запрос;
	Запрос.Текст =
			"ВЫБРАТЬ
	        |	Товары.НоменклатураНовая КАК Номенклатура
	        |ПОМЕСТИТЬ Товары
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		СписанныеТовары.НоменклатураНовая КАК НоменклатураНовая
	        |	ИЗ
	        |		РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	        |	ГДЕ
	        |		СписанныеТовары.Регистратор = &Ссылка
	        |		И СписанныеТовары.НоменклатураНовая <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ
	        |		СписанныеТовары.Номенклатура
	        |	ИЗ
	        |		РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	        |	ГДЕ
	        |		СписанныеТовары.Регистратор = &Ссылка) КАК Товары
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	Товары.НоменклатураНовая
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПартииТоваровНаСкладахМеждународныйУчет.Номенклатура,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.СчетУчета,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.Организация,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.Склад,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.ДокументОприходования,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.ХарактеристикаНоменклатуры,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.СерияНоменклатуры,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.Заказ,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.Качество,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.КоличествоОстаток,
	        |	ПартииТоваровНаСкладахМеждународныйУчет.СтоимостьОстаток
	        |ПОМЕСТИТЬ ПартииТоваровНаСкладах
	        |ИЗ
	        |	РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(
	        |			&Дат,
	        |			Организация = &Организация
	        |				И Номенклатура В
	        |					(ВЫБРАТЬ
	        |						товары.Номенклатура
	        |					ИЗ
	        |						товары)) КАК ПартииТоваровНаСкладахМеждународныйУчет
			|;
//*****************************************************************************************************************************	
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	// is ЯннуровВФ нач 20141007
	|	ИСТИНА КАК Расход
	// is ЯннуровВФ кон 20141007
	|ИЗ
	// is ЯннуровВФ нач 20150216
	//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	// is ЯннуровВФ кон 20150216
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(
	//|		&Дат,
	//|		Организация = &Организация
	//|		    И Номенклатура В
	//|		        (ВЫБРАТЬ
	//|		            СписанныеТовары.Номенклатура
	//|		        ИЗ
	//// is ЯннуровВФ нач 20150216
	////|		            РегистрСведений.СписанныеТовары
	//|		            РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	//// is ЯннуровВФ кон 20150216
	//|		        ГДЕ
	//// is ЯннуровВФ нач 20141113
	////|		        СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	////|		И Склад В 
	////|		    (ВЫБРАТЬ
	////|		        СписанныеТовары.Склад
	////|		    ИЗ
	////|		        РегистрСведений.СписанныеТовары
	////|		    ГДЕ
	////|		        СписанныеТовары.Регистратор = &ОсновнойДокумент)", "") + ") КАК ПартииТоваровНаСкладах
	//|		        СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	| ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	// is ЯннуровВФ кон 20141113
	|		ПО ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	// is ЯннуровВФ нач 20141113
	//|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	//|					ТОГДА ИСТИНА
	//|				ИНАЧЕ ВЫБОР
	//|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	//|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	//|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	//|					КОНЕЦ
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				КОГДА СписанныеТовары.Качество <> &ПустоеКачество
	|					ТОГДА СписанныеТовары.Качество = ПартииТоваровНаСкладах.Качество
	|				ИНАЧЕ ПартииТоваровНаСкладах.Качество = &КачествоНовый
	// is ЯннуровВФ кон 20141113
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад", "") + "
	|			И ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаМУ
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	// is ЯннуровВФ нач 20141027 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ЛОЖЬ КАК Расход
	|ИЗ
	// is ЯннуровВФ нач 20150216
	//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	// is ЯннуровВФ кон 20150216
//начало изменений Ожиганов 18.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 	
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(
	//|		&Дат,
	//|		Организация = &Организация
	//|		    И Номенклатура В
	//|		        (ВЫБРАТЬ
	//|		            СписанныеТовары.Номенклатура
	//|		        ИЗ
	//// is ЯннуровВФ нач 20150216
	////|		            РегистрСведений.СписанныеТовары
	//|		            РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	//// is ЯннуровВФ кон 20150216
	//|		        ГДЕ
	//|		        	СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	| ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах	
//конец изменений 	
	|		ПО СписанныеТовары.Организация = ПартииТоваровНаСкладах.Организация
	|			И СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				КОГДА СписанныеТовары.КачествоНовое <> &ПустоеКачество
	|					ТОГДА СписанныеТовары.КачествоНовое = ПартииТоваровНаСкладах.Качество
	|				КОГДА СписанныеТовары.Качество <> &ПустоеКачество
	|					ТОГДА СписанныеТовары.Качество = ПартииТоваровНаСкладах.Качество
	|				ИНАЧЕ ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И СписанныеТовары.Склад = ПартииТоваровНаСкладах.Склад", "") + "
	|			И ВЫБОР 
	|				КОГДА СписанныеТовары.КорСчетМУ <> ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|					ТОГДА СписанныеТовары.КорСчетМУ = ПартииТоваровНаСкладах.СчетУчета
	|				ИНАЧЕ СписанныеТовары.СчетУчетаМУ = ПартииТоваровНаСкладах.СчетУчета
	|			КОНЕЦ
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатурыНовая = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	// is ЯннуровВФ кон 20141027
    |
	// is ЯннуровВФ нач 20141007 Комплектация. Приход
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ЛОЖЬ КАК Расход
	|ИЗ
	// is ЯннуровВФ нач 20150216
	//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	// is ЯннуровВФ кон 20150216
//начало изменений Ожиганов 18.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 	
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(
	//|		&Дат,
	//|		Организация = &Организация
	//|		    И Номенклатура В
	//|		        (ВЫБРАТЬ
	//|		            СписанныеТовары.НоменклатураНовая
	//|		        ИЗ
	//// is ЯннуровВФ нач 20150216
	////|		            РегистрСведений.СписанныеТовары
	//|		            РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	//// is ЯннуровВФ кон 20150216
	//|		        ГДЕ
	//|		        	СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах  
	| ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
//конец изменений 	
	|		ПО СписанныеТовары.Организация = ПартииТоваровНаСкладах.Организация
	|			И СписанныеТовары.НоменклатураНовая = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатурыНовая = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				КОГДА СписанныеТовары.КачествоНовое <> &ПустоеКачество
	|					ТОГДА СписанныеТовары.КачествоНовое = ПартииТоваровНаСкладах.Качество
	|				КОГДА СписанныеТовары.Качество <> &ПустоеКачество
	|					ТОГДА СписанныеТовары.Качество = ПартииТоваровНаСкладах.Качество
	|				ИНАЧЕ ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И СписанныеТовары.Склад = ПартииТоваровНаСкладах.Склад", "") + "
	|			И ВЫБОР 
	|				КОГДА СписанныеТовары.КорСчетМУ <> ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|					ТОГДА СписанныеТовары.КорСчетМУ = ПартииТоваровНаСкладах.СчетУчета
	|				ИНАЧЕ СписанныеТовары.СчетУчетаМУ = ПартииТоваровНаСкладах.СчетУчета
	|			КОНЕЦ
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатурыНовая = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|	И СписанныеТовары.НоменклатураНовая <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	// is ЯннуровВФ кон 20141007
	|
	|УПОРЯДОЧИТЬ ПО
	// is ЯннуровВФ нач 20141029
	|	НомерСтрокиДокумента,
	// is ЯннуровВФ кон 20141029
	// is ЯннуровВФ нач 20141007
	|	Расход УБЫВ,
	// is ЯннуровВФ кон 20141007
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";	
	
	
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	
	Если  ОсновнойДокумент <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);
	Иначе
		Запрос.УстановитьПараметр("ОсновнойДокумент", Регистратор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции//ПолучитьДеревоПартийНаСкладахМеж

Функция ПолучитьДеревоПартийПереданныеМеж(МоментКон, Регистратор, Организация, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии)
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	//>>29.09.2016 Степанов 56381	
	//|	ПартииТоваровПереданные.ДокументПередачи,
   	| 	ПартииТоваровПереданные.ДокументПередачи как ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Дата как ДокументПередачи_Дата,
	//<<29.09.2016
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ПартииТоваровПереданные.Организация,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи,
	// is ЯннуровВФ нач 20141008
	|	ИСТИНА КАК Расход
	// is ЯннуровВФ кон 20141008
	|ИЗ
	// is ЯннуровВФ нач 20150216
	//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	// is ЯннуровВФ кон 20150216
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет.Остатки(&Дат,	
	|																					Номенклатура В
	|																					    (ВЫБРАТЬ
	|																					        СписанныеТовары.Номенклатура
	|																					    ИЗ
	// is ЯннуровВФ нач 20150216
	//|																					        РегистрСведений.СписанныеТовары
	|																					        РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	// is ЯннуровВФ кон 20150216
	|																					    ГДЕ
	// is ЯннуровВФ нач 20141028
	//|																					        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" +
	//																					?(ДоговорКонтрагента = Неопределено, "", "
	//|																					 	И ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|																					        СписанныеТовары.Регистратор = &Ссылка)
	// is ЯннуровВФ кон 20141028
	|																				) КАК ПартииТоваровПереданные
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	// is ЯннуровВФ нач 20141027 Сравнение счетов БУ и МУ
	//|			И (ПартииТоваровПереданные.СчетУчета = СписанныеТовары.СчетУчетаБУ
	//|						ИЛИ ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)	
	//|			И ВЫБОР
	//|			КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	//|					ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	//|				ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ДокументПередачи.Заказ
	//|				ИНАЧЕ ИСТИНА
	//|				КОНЕЦ
	|			И СписанныеТовары.СчетУчетаМУ = ПартииТоваровПереданные.СчетУчета
	|			И СписанныеТовары.ДокументПередачи = ПартииТоваровПереданные.ДокументПередачи
	|			И СписанныеТовары.ДоговорКонтрагента = ПартииТоваровПереданные.ДоговорКонтрагента
	// is ЯннуровВФ кон 20141027
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	// is ЯннуровВФ кон 20141027
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	//>>29.09.2016 Степанов 56381	
	//|	ПартииТоваровПереданные.ДокументПередачи,
   	| 	ПартииТоваровПереданные.ДокументПередачи как ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Дата как ДокументПередачи_Дата,
	//<<29.09.2016
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ПартииТоваровПереданные.Организация,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи,
	|	ЛОЖЬ КАК Расход
	|ИЗ
	// is ЯннуровВФ нач 20150216
	//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	// is ЯннуровВФ кон 20150216
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет.Остатки(&Дат,	
	|																					Номенклатура В
	|																					    (ВЫБРАТЬ
	|																					        СписанныеТовары.Номенклатура
	|																					    ИЗ
	// is ЯннуровВФ нач 20150216
	//|																					        РегистрСведений.СписанныеТовары
	|																					        РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
	// is ЯннуровВФ кон 20150216
	|																					    ГДЕ
	|																					        СписанныеТовары.Регистратор = &Ссылка)
	|																				) КАК ПартииТоваровПереданные
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И ВЫБОР 
	|				КОГДА СписанныеТовары.КорСчетМУ <> ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|					ТОГДА СписанныеТовары.КорСчетМУ = ПартииТоваровПереданные.СчетУчета
	|				ИНАЧЕ СписанныеТовары.СчетУчетаМУ = ПартииТоваровПереданные.СчетУчета
	|			КОНЕЦ
	|			И СписанныеТовары.ДокументПередачи = ПартииТоваровПереданные.ДокументПередачи
	|			И СписанныеТовары.ДоговорКонтрагента = ПартииТоваровПереданные.ДоговорКонтрагента
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	// is ЯннуровВФ кон 20141027
	|
	|УПОРЯДОЧИТЬ ПО
	// is ЯннуровВФ нач 20141029
	|	НомерСтрокиДокумента,
	// is ЯннуровВФ кон 20141029
	// is ЯннуровВФ нач 20141007
	|	Расход УБЫВ,
	// is ЯннуровВФ кон 20141007
	|	ЧислоДокументПередачи,
	//>>29.09.2016 Степанов 56381
	|  ДокументПередачи_Дата, ДокументПередачи,
	//<<29.09.2016
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции//ПолучитьДеревоПартийПереданныеБух

// Упр

// Остатки партий на складах по упр.учету
//
// Параметры:
//	СтруктураПараметров
//	МоментКон
//
Процедура ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		
		СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахУпр", 
		ПолучитьДеревоПартийНаСкладахУпр (МоментКон,СтруктураПараметров));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийНаСкладахУпр()

Процедура ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон, ДоговорКонтрагента)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеУпр", ПолучитьДеревоПартийПереданныеУпр(МоментКон, СтруктураПараметров.Регистратор, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗУпр, СтруктураПараметров.СтратегияСтатусПартииУпр));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданные.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийПереданныхУпр()

// Регл

// Остатки партий на складах по регл.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийНаСкладахРегл(СтруктураПараметров, МоментКон, Организация)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахБух",
		ПолучитьДеревоПартийНаСкладахБух (МоментКон, Организация, СтруктураПараметров));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахБух" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахБух" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете Тогда
		
		СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахНал", 
		ПолучитьДеревоПартийНаСкладахНал( МоментКон, Организация, СтруктураПараметров));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		ТаблицаОстатковПартий.Колонки.Добавить("ПостояннаяРазница");
		ТаблицаОстатковПартий.Колонки.Добавить("ВременнаяРазница");
		
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахНал" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахНал" + "ТаблицаОстатков", ТаблицаОстатковПартий);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийНаСкладахРегл()

// Остатки партий переданных по регл.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийПереданныхРегл(СтруктураПараметров, МоментКон, Организация, ДоговорКонтрагента)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеБух", ПолучитьДеревоПартийПереданныеБух(МоментКон, СтруктураПараметров.Регистратор, Организация, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗБух, СтруктураПараметров.СтратегияСтатусПартииБух));		
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеБух" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеБух" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете Тогда
		СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеНал", ПолучитьДеревоПартийПереданныеНал(МоментКон, СтруктураПараметров.Регистратор, Организация, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗНал, СтруктураПараметров.СтратегияСтатусПартииНал));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНалоговыйУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		ТаблицаОстатковПартий.Колонки.Добавить("ПостояннаяРазница");
		ТаблицаОстатковПартий.Колонки.Добавить("ВременнаяРазница");
		
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеНал" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеНал" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийПереданныхРегл()

// Меж

// Остатки партий на складах по меж.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийНаСкладахМеж(СтруктураПараметров, МоментКон,  Организация)
	
	// Таблицы остатков партий
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		
		// is ЯннуровВФ нач 20141009
		Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда 
			лНачалоПериода = СтруктураПараметров.Регистратор.ПериодНачало;
			лОкончаниеПериода = СтруктураПараметров.Регистратор.ПериодКонец;
		Иначе
			лНачалоПериода = МоментКон;
		КонецЕсли;
		// is ЯннуровВФ кон 20141009
		
		ОсновнойДокумент = Неопределено;
		СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);
		
		СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахМеж", 
		// is ЯннуровВФ нач 20141009
			//ПолучитьДеревоПартийНаСкладахМеж (МоментКон, 
			ПолучитьДеревоПартийНаСкладахМеж(лНачалоПериода, 
		// is ЯннуровВФ кон 20141009
		СтруктураПараметров.Регистратор,
		Организация,
		СтруктураПараметров.СпособОценкиМПЗМеж,
		СтруктураПараметров.СтратегияСтатусПартииМеж,
		СтруктураПараметров.ВестиПартионныйУчетПоСкладамМеж,
		ОсновнойДокумент));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		// is ЯннуровВФ нач 20141009
		ТаблицаОстатковПартий.Колонки.Добавить("ПериодСледующихОборотов");
		// is ЯннуровВФ кон 20141009
		
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахМеж" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахМеж" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
		// is ЯннуровВФ нач 20141009
		Если лОкончаниеПериода <> Неопределено Тогда 
			лЗапрос = Новый Запрос;
			лЗапрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СписанныеТовары.Номенклатура КАК Номенклатура,
			|	СписанныеТовары.СчетУчетаМУ КАК СчетУчетаМУ
			|ПОМЕСТИТЬ втСписанныеТовары
			|ИЗ
			// is ЯннуровВФ нач 20150216
			//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
			|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
			// is ЯннуровВФ кон 20150216
			|ГДЕ
			|	СписанныеТовары.Регистратор = &Регистратор
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СписанныеТовары.Номенклатура,
			|	СписанныеТовары.КорСчетМУ
			|ИЗ
			// is ЯннуровВФ нач 20150216
			//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
			|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
			// is ЯннуровВФ кон 20150216
			|ГДЕ
			|	СписанныеТовары.Регистратор = &Регистратор
			|	И СписанныеТовары.КорСчетМУ <> ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	СчетУчетаМУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.Период КАК Период,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.Номенклатура КАК Номенклатура,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.СчетУчета,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.Организация,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.Склад,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.ДокументОприходования,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.ХарактеристикаНоменклатуры,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.СерияНоменклатуры,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.Заказ,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.Качество,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.КоличествоОборот КАК Количество,
			|	ПартииТоваровНаСкладахМеждународныйУчетОбороты.СтоимостьОборот КАК Стоимость
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Обороты(&НачалоПериода, &ОкончаниеПериода, Секунда, ) КАК ПартииТоваровНаСкладахМеждународныйУчетОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписанныеТовары КАК втСписанныеТовары
			|		ПО ПартииТоваровНаСкладахМеждународныйУчетОбороты.Номенклатура = втСписанныеТовары.Номенклатура
			|			И ПартииТоваровНаСкладахМеждународныйУчетОбороты.СчетУчета = втСписанныеТовары.СчетУчетаМУ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|АВТОУПОРЯДОЧИВАНИЕ";
			лЗапрос.УстановитьПараметр("НачалоПериода", лНачалоПериода);
			лЗапрос.УстановитьПараметр("ОкончаниеПериода", лОкончаниеПериода);
			лЗапрос.УстановитьПараметр("Регистратор", СтруктураПараметров.Регистратор);
			лТаблицаОборотовПартий = лЗапрос.Выполнить().Выгрузить();
			СтруктураПараметров.Вставить("ПартииТоваровНаСкладахМеж" + "ТаблицаОборотов", лТаблицаОборотовПартий);
		КонецЕсли;
		// is ЯннуровВФ кон 20141009
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийНаСкладахМеж()

// Остатки партий переданных по меж.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийПереданныхМеж(СтруктураПараметров, МоментКон, Организация, ДоговорКонтрагента)
	
	// Таблицы остатков партий
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		
		// is ЯннуровВФ нач 20141009
		Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда 
			лНачалоПериода = СтруктураПараметров.Регистратор.ПериодНачало;
			лОкончаниеПериода = СтруктураПараметров.Регистратор.ПериодКонец;
		Иначе
			лНачалоПериода = МоментКон;
		КонецЕсли;
		// is ЯннуровВФ кон 20141009
		
		СтруктураПараметров.Вставить ("ДеревоПартииТоваровПереданныеМеж", 
		// is ЯннуровВФ нач 20141009
			//ПолучитьДеревоПартийПереданныеМеж (МоментКон,
			ПолучитьДеревоПартийПереданныеМеж(лНачалоПериода,
		// is ЯннуровВФ нач 20141009

		СтруктураПараметров.Регистратор,
		Организация,
		ДоговорКонтрагента,
		СтруктураПараметров.СпособОценкиМПЗМеж,
		СтруктураПараметров.СтратегияСтатусПартииМеж));		
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданныеМеждународныйУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		// is ЯннуровВФ нач 20141009
		ТаблицаОстатковПартий.Колонки.Добавить("ПериодСледующихОборотов");
		// is ЯннуровВФ кон 20141009

		СтруктураПараметров.Вставить("ПартииТоваровПереданныеМеж" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеМеж" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
		// is ЯннуровВФ нач 20141009
		Если лОкончаниеПериода <> Неопределено Тогда 
			лЗапрос = Новый Запрос;
			лЗапрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СписанныеТовары.Номенклатура КАК Номенклатура,
			|	СписанныеТовары.СчетУчетаМУ КАК СчетУчетаМУ
			|ПОМЕСТИТЬ втСписанныеТовары
			|ИЗ
			// is ЯннуровВФ нач 20150216
			//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
			|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
			// is ЯннуровВФ кон 20150216
			|ГДЕ
			|	СписанныеТовары.Регистратор = &Регистратор
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СписанныеТовары.Номенклатура,
			|	СписанныеТовары.КорСчетМУ
			|ИЗ
			// is ЯннуровВФ нач 20150216
			//|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
			|	РегистрСведений.ис_СписанныеТоварыМеждународныйУчет КАК СписанныеТовары
			// is ЯннуровВФ кон 20150216
			|ГДЕ
			|	СписанныеТовары.Регистратор = &Регистратор
			|	И СписанныеТовары.КорСчетМУ <> ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	СчетУчетаМУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.Период КАК Период,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.Номенклатура КАК Номенклатура,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.СчетУчета,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.Организация,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.ДоговорКонтрагента,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.ДокументПередачи,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.ДокументОприходования,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.ХарактеристикаНоменклатуры,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.КоличествоОборот КАК Количество,
			|	ПартииТоваровПереданныеМеждународныйУчетОбороты.СтоимостьОборот КАК Стоимость
			|ИЗ
			|	РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет.Обороты(&НачалоПериода, &ОкончаниеПериода, Секунда, ) КАК ПартииТоваровПереданныеМеждународныйУчетОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписанныеТовары КАК втСписанныеТовары
			|		ПО ПартииТоваровПереданныеМеждународныйУчетОбороты.Номенклатура = втСписанныеТовары.Номенклатура
			|			И ПартииТоваровПереданныеМеждународныйУчетОбороты.СчетУчета = втСписанныеТовары.СчетУчетаМУ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|АВТОУПОРЯДОЧИВАНИЕ";
			лЗапрос.УстановитьПараметр("НачалоПериода", лНачалоПериода);
			лЗапрос.УстановитьПараметр("ОкончаниеПериода", лОкончаниеПериода);
			лЗапрос.УстановитьПараметр("Регистратор", СтруктураПараметров.Регистратор);
			лТаблицаОборотовПартий = лЗапрос.Выполнить().Выгрузить();
			СтруктураПараметров.Вставить("ПартииТоваровПереданныеМеж" + "ТаблицаОборотов", лТаблицаОборотовПартий);
		КонецЕсли;
		// is ЯннуровВФ кон 20141009

	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийПереданныхМеж()

// Получение остатков по упр. учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон)
	
	// По партионному учету остатки берутся из двух регистров
	
	Если СтруктураПараметров.ЕстьНаСкладах Тогда
		
		ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПереданные Тогда
		
		ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон,ТаблицаСписания[0].ДоговорКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиУпр()

// Получение остатков по регл. учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиРегл(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация)
	
	//// По партионному учету остатки берутся из двух регистров
	Если СтруктураПараметров.ЕстьНаСкладах Тогда
		
		ПолучитьОстаткиПартийНаСкладахРегл(СтруктураПараметров, МоментКон, Организация);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПереданные Тогда
		
		ПолучитьОстаткиПартийПереданныхРегл(СтруктураПараметров, МоментКон, Организация, ТаблицаСписания[0].ДоговорКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиРегл()

// Получение остатков по меж. учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиМеж(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация)
	
	//// По партионному учету остатки берутся из двух регистров
	Если СтруктураПараметров.ЕстьНаСкладах Тогда
		
		ПолучитьОстаткиПартийНаСкладахМеж(СтруктураПараметров, МоментКон, Организация);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПереданные Тогда
		
		ПолучитьОстаткиПартийПереданныхМеж(СтруктураПараметров, МоментКон, Организация, ТаблицаСписания[0].ДоговорКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиРегл()

Функция ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий,
	// is ЯннуровВФ нач 20141009
	ТаблицаОборотовПартий=Неопределено,
	СтрокаДокумента=Неопределено
	// is ЯннуровВФ кон 20141009
	)
	
	// is ЯннуровВФ нач 20141009
	ЕстьТаблицаОборотов = (ТаблицаОборотовПартий<>Неопределено И СтрокаДокумента<>Неопределено И ТаблицаОстатковПартий.Колонки.Найти("ПериодСледующихОборотов")<>Неопределено);
	ОбновитьОбороты = Ложь;
	// is ЯннуровВФ кон 20141009
	
	ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаПартииРаспределения);
	//AAA 20150621+
	//МассивСтрок = ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);
	Если ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда
		Если ТаблицаОстатковПартий.Количество() = 0 Тогда
			МассивСтрок = Новый Массив;	
		Иначе
			Если ТаблицаОстатковПартий.Индексы.Количество() = 0 Тогда
				СтруктураИндексов = "";
				Для Каждого ПараметрСтруктуры из СтруктураИзмерений Цикл
					Если ПустаяСтрока(СтруктураИндексов) = Ложь Тогда
						СтруктураИндексов = СтруктураИндексов + ",";
					КонецЕсли;
					
					СтруктураИндексов = СтруктураИндексов + ПараметрСтруктуры.Ключ;
				КонецЦикла;
				ТаблицаОстатковПартий.Индексы.Добавить(СтруктураИндексов);
			КонецЕсли;
			МассивСтрок = ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);
		КонецЕсли;
	Иначе
		МассивСтрок = ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);
	КонецЕсли;
	//AAA 20150621-
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТаблицы = ТаблицаОстатковПартий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПартииРаспределения);
		// is ЯннуровВФ нач 20141009
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда 
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Стоимость) Тогда 
			СтрокаТаблицы.Стоимость = 0;
		КонецЕсли;
		Если ЕстьТаблицаОборотов Тогда 
			ОбновитьОбороты = Истина;
		КонецЕсли;
		// is ЯннуровВФ кон 20141009
	Иначе
		СтрокаТаблицы = МассивСтрок[0];
		// is ЯннуровВФ нач 20141009
		Если ЕстьТаблицаОборотов Тогда 
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПериодСледующихОборотов)
			 Или СтрокаТаблицы.ПериодСледующихОборотов <= СтрокаДокумента.Период Тогда 
				ОбновитьОбороты = Истина;
			КонецЕсли;
		КонецЕсли;
		// is ЯннуровВФ кон 20141009
	КонецЕсли;
	
	// is ЯннуровВФ нач 20141009 
	Если ОбновитьОбороты Тогда 
	 	ПериодСледующихОборотов = КонецДня('39991231');
		МассивСтрокОборотов = ТаблицаОборотовПартий.НайтиСтроки(СтруктураИзмерений);
		Для Каждого СтрокаТаблицыОборотов Из МассивСтрокОборотов Цикл 
			Если СтрокаТаблицыОборотов.Период > СтрокаДокумента.Период Тогда 
			 	ПериодСледующихОборотов = СтрокаТаблицыОборотов.Период;
			 	Прервать;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодСледующихОборотов) 
			 И СтрокаТаблицыОборотов.Период < СтрокаТаблицы.ПериодСледующихОборотов Тогда 
			 	Продолжить;
			КонецЕсли;
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + СтрокаТаблицыОборотов.Количество;
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + СтрокаТаблицыОборотов.Стоимость;
		КонецЦикла;
		СтрокаТаблицы.ПериодСледующихОборотов = ПериодСледующихОборотов;
	КонецЕсли;
	// is ЯннуровВФ кон 20141009
	
	Возврат СтрокаТаблицы;
	
Конецфункции

// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ
////////////////////////////////////////////////////////////////////////////////


Процедура ВыполнитьВосстановлениеНаСервере (ДатаКонцаОбработки,
	Организация,
	ОтражатьВУправленческомУчете,
	ОтражатьВБухгалтерскомУчете,
	Останавливаться,
	МаксимальноеКоличествоДокументовВТранзакции,
	МаксимальноеКоличествоСтрокВТранзакции,
	ФормироватьПроводки) Экспорт
	
	ЗаполнениеДокументов.ВыполнитьВосстановление (ДатаКонцаОбработки,
	Организация,
	ОтражатьВУправленческомУчете,
	ОтражатьВБухгалтерскомУчете,
	Останавливаться,
	МаксимальноеКоличествоДокументовВТранзакции,
	МаксимальноеКоличествоСтрокВТранзакции,						
	ФормироватьПроводки);
	
КонецПроцедуры //ВыполнитьВосстановлениеНаСервере

Процедура ЗаписатьДокументНаСервере(ДокументСсылка, РежимЗаписи) Экспорт
	
	Попытка
		
		ДокументСсылка.ПолучитьОбъект().Записать(РежимЗаписи);
		
	Исключение
		
	КонецПопытки; 
	
КонецПроцедуры//ЗаписатьДокументНаСервере

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ УПР. УЧЕТА

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок) Экспорт
	СтруктураКолонок.Вставить("Организация");
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Склад");
	СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СтруктураКолонок.Вставить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("КодОперацииПартииТоваров");
	СтруктураКолонок.Вставить("КодОперации"); // из движений
	СтруктураКолонок.Вставить("СписаноИз");
	СтруктураКолонок.Вставить("ТипЗаписи");
	СтруктураКолонок.Вставить("ВидОперации");
	СтруктураКолонок.Вставить("СерияНоменклатуры");
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры");
	
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("НоменклатурнаяГруппа");
	СтруктураКолонок.Вставить("ИзменитьСклад");
	СтруктураКолонок.Вставить("СкладПолучатель");
	СтруктураКолонок.Вставить("СтоимостьПоступление");
	СтруктураКолонок.Вставить("КоличествоПоступление");
	СтруктураКолонок.Вставить("НоменклатураНовая");
	СтруктураКолонок.Вставить("ДокументОприходованияНовый");
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатурыНовая");
	СтруктураКолонок.Вставить("СерияНоменклатурыНовая");
	СтруктураКолонок.Вставить("КачествоНовое");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("ДокументОприходования");	
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ОсновноеСредство");
	СтруктураКолонок.Вставить("ДокументПередачи");
	СтруктураКолонок.Вставить("НазначениеИспользования");
	СтруктураКолонок.Вставить("Регистратор");
	
	СтруктураКолонок.Вставить("НеСписывать");
	СтруктураКолонок.Вставить("Продукция");
	СтруктураКолонок.Вставить("ЗаказСписания");
	
	СтруктураКолонок.Вставить("ИзменитьХарактеристику");
	СтруктураКолонок.Вставить("ИзменитьСерию");
	СтруктураКолонок.Вставить("ВестиПартионныйУчетПоСериям");
	
	СтруктураКолонок.Вставить("СуммаЗадолженностиБУ");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("НДСВключенВСтоимость");
	СтруктураКолонок.Вставить("СуммаБезНДС");
	СтруктураКолонок.Вставить("СчетУчетаНДС");
	СтруктураКолонок.Вставить("КорВалютнаяСуммаЗадолженностиБУ");
	
	
	СтруктураКолонок.Вставить("НомерСтрокиДокумента");
КонецПроцедуры	

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийУпр(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок)
	
	ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок);
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	// Колонки базовые
	
	СтруктураКолонок.Вставить("ВедениеУчетаПоПроектам");
	
	СтруктураКолонок.Вставить("НоменклатураКомплекта");
	СтруктураКолонок.Вставить("ХарактеристикаКомплекта");
	СтруктураКолонок.Вставить("КоличествоКомплекта");
	
	СтруктураКолонок.Вставить("Подразделение");
	СтруктураКолонок.Вставить("Проект");
	СтруктураКолонок.Вставить("ОбъектСтроительства");
	
	СтруктураКолонок.Вставить("ВалютаДокумента");
	СтруктураКолонок.Вставить("КурсДокумента");
	СтруктураКолонок.Вставить("КратностьДокумента");
	
	СтруктураКолонок.Вставить("СтатусПартииНовый");
	СтруктураКолонок.Вставить("СтатусПередачи");
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРИХОДНЫЕ ДВИЖЕНИЯ

Процедура ВыполнитьПриходПоРегистрамПартий(ТаблицаСтаройРегистрацииВПоследовательности, СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоОборудованию_ТаблицаПоКомплектам=Неопределено, ЗНАЧ Упр=Ложь, ЗНАЧ Бух=Ложь, ЗНАЧ Нал=Ложь) Экспорт
	Перем  КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам;
	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
		И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата Тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Упр = Ложь;  
			Бух = Ложь;
		Иначе	
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если Отказ ИЛИ НЕ (Упр ИЛИ Бух ИЛИ Нал) Тогда
		
		Возврат;
	КонецЕсли;
	
	//сохранение таблиц в копии
	Если ТаблицаПоТоварам<>неопределено Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
	КонецЕсли;
	Если ТаблицаПоТаре<>неопределено Тогда
		КопияТаблицаПоТаре	= ТаблицаПоТаре.Скопировать();
	КонецЕсли;
	Если ТаблицаПоОборудованию_ТаблицаПоКомплектам<>неопределено Тогда
		КопияТаблицаПоОборудованию_ТаблицаПоКомплектам 	= ТаблицаПоОборудованию_ТаблицаПоКомплектам.Скопировать();
	КонецЕсли;
	
	ТипРегистратора = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	Если ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, ТаблицаПоОборудованию_ТаблицаПоКомплектам, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
		КонецЕсли;	
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Если НЕ СтруктураШапкиДокумента.БезПраваПродажи Тогда
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя 
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ИзПереработки Тогда
				ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, Неопределено, Упр, Ложь, Ложь, ТаблицаСтаройРегистрацииВПоследовательности);
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, Неопределено, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ВнутреннееПеремещение Тогда
			ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
		КонецЕсли;		
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, Неопределено, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, неопределено, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, неопределено, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам,неопределено, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
			ДанныеУчетОС = ПодготовитьДанныеДляПринятияКУчетуОС(СтруктураШапкиДокумента,КопияТаблицаПоТоварам, Упр, Бух, Нал);
			ТаблицаПриходаТоваров = ДанныеУчетОС.ТаблицаОприходования;
			Если ТаблицаПриходаТоваров.Количество()>0 Тогда
				ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, ТаблицаПриходаТоваров, неопределено, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
			КонецЕсли;
			Если Нал Тогда
				СформироватьПроводкиПоРазницам_ПринятиеКУчетуОС(СтруктураШапкиДокумента, КопияТаблицаПоТоварам, ДанныеУчетОС);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВводНачальныхОстатковУСН") Тогда
		//Особенная процедура - таблицы для записи в регистры партий уже подготовлены
		ВыполнитьПриходПоРегистрамПартий_ВводНачальныхОстатковУСН(СтруктураШапкиДокумента,ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, Неопределено, КопияТаблицаПоТаре, Неопределено, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);
	Иначе
		ОбщегоНазначения.Сообщение("Не удалось сформировать движения по партиям");
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВыполнитьПриходПоРегистрамПартий_ВводНачальныхОстатковУСН(СтруктураШапкиДокумента, ТаблицаПартийНаСкладах, ТаблицаПартийПереданных, ТаблицаСтаройРегистрацииВПоследовательности)
	Если ТаблицаПартийНаСкладах.Количество()+ТаблицаПартийПереданных.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Новый Структура();
	
	//ПО ПАРТИОННОМУ УЧЕТУ УСН
	Если ТаблицаПартийНаСкладах.Количество()>0 Тогда
		Движения.Вставить("ПартииТоваровНаСкладахНалоговыйУчет",РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей());
		Движения.ПартииТоваровНаСкладахНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ПартииТоваровНаСкладахНалоговыйУчет, новый Структура("ТаблицаПартий",ТаблицаПартийНаСкладах));
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровНаСкладахНалоговыйУчет, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);	
		
	КонецЕсли;
	Если ТаблицаПартийПереданных.Количество()>0 Тогда
		Движения.Вставить("ПартииТоваровПереданныеНалоговыйУчет",РегистрыНакопления.ПартииТоваровПереданныеНалоговыйУчет.СоздатьНаборЗаписей());
		Движения.ПартииТоваровПереданныеНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ПартииТоваровПереданныеНалоговыйУчет, новый Структура("ТаблицаПартий",ТаблицаПартийПереданных));
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровПереданныеНалоговыйУчет, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);	
		
	КонецЕсли;
	
	Для Каждого ТекущееДвижение Из Движения Цикл
		Если ТекущееДвижение.Значение.Модифицированность() Тогда
			ТекущееДвижение.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦикла;	
	ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(
	СтруктураШапкиДокумента.Ссылка, 
	СтруктураШапкиДокумента.Дата, 
	СтруктураШапкиДокумента.Организация, 
	ложь, 
	ложь, 
	истина,
	ТаблицаСтаройРегистрацииВПоследовательности);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРИХОДНЫЕ ДВИЖЕНИЯ

Функция ОпределитьКодОперацииПартийТоваров(ТипДокумента, ВидОперации = Неопределено, ВидДоговора = Неопределено)
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
			Иначе
				Возврат Перечисления.КодыОперацийПартииТоваров.Поступление;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеВПереработку;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеОборудования;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
		Иначе
			Возврат Перечисления.КодыОперацийПартииТоваров.Поступление;
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда	
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера
		Иначе
			Возврат Неопределено;
		КонецЕсли;		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.Поступление;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.Оприходование;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзЭксплуатации;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика 
			И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.Поступление
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ВнутреннееПеремещение Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами;	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов")  Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.ВключениеАктиваВСоставМПЗ;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции	

// Функция создает таблицу для формирования сторнирующих движений по рег. Партии товаров на складах, в случае поступления по ордеру
//     СтруктураПараметров - дополнительные параметры, предусмотрены если ПриходныйОрдер указывается только в шапке (для документа ВозвратПереданныхТоваров)
Функция СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТабТовары, СтруктураПараметров)
	Перем мПриходныйОрдер, мСклад, мЕстьСерияНоменклатуры;
	
	СтруктураПараметров.Свойство("ПриходныйОрдер",мПриходныйОрдер);
	СтруктураПараметров.Свойство("Склад",мСклад);
	Если мПриходныйОрдер<>неопределено Тогда
		Если мПриходныйОрдер.БезПраваПродажи Тогда
			ТаблицаПартииПоОрдерам = ТабТовары.СкопироватьКолонки();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
			Возврат ТаблицаПартииПоОрдерам;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПартииПоОрдерам = ТабТовары.Скопировать();
	ТаблицаПартииПоОрдерам.Колонки[СтруктураПараметров.ИмяРеквизитаКоличество].Имя = "КоличествоСтарое";
	ТаблицаПартииПоОрдерам.Колонки.Добавить("Количество"); //у старой колонки может быть запрет на указание отрицательных чисел
	ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
	Если ТаблицаПартииПоОрдерам.Колонки.Найти("Склад") = неопределено Тогда
		ТаблицаПартииПоОрдерам.Колонки.Добавить("Склад");
	КонецЕсли;
	
	мЕстьСерияНоменклатуры = ТаблицаПартииПоОрдерам.Колонки.Найти("СерияНоменклатуры") <> неопределено;		
	Сч = 0;
	Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
		
		СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
		Если мПриходныйОрдер = неопределено Тогда
			Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
				ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Документ оприходования - приходный ордрер
		СтрокаТаблицы.ДокументОприходования = ?(мПриходныйОрдер=неопределено,СтрокаТаблицы.ДокументПолучения,мПриходныйОрдер);
		СтрокаТаблицы.Склад                 = ?(мСклад=неопределено,СтрокаТаблицы.ДокументПолучения.Склад,мСклад);
		СтрокаТаблицы.Количество            = - СтрокаТаблицы.КоличествоСтарое;
		Если НЕ ТаблицаПартииПоОрдерам.Колонки.Найти("Заказ") = Неопределено Тогда
			СтрокаТаблицы.Заказ                	= Неопределено;
		КонецЕсли;	
		
		Если мЕстьСерияНоменклатуры Тогда
			// Если партионный учет по сериям не ведется, то надо очистить серию
			Если НЕ ТаблицаПартииПоОрдерам.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено Тогда
				ВестиПартионныйУчетПоСериям = СтрокаТаблицы.ВестиПартионныйУчетПоСериям;
			Иначе
				ВестиПартионныйУчетПоСериям = СтрокаТаблицы.Номенклатура.ВестиПартионныйУчетПоСериям;
			КонецЕсли;
			Если НЕ ВестиПартионныйУчетПоСериям Тогда
				СтрокаТаблицы.СерияНоменклатуры = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаПартииПоОрдерам;
	
КонецФункции // СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам)

// По виду договора определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаПоВидуДоговора(СтруктураШапкиДокумента) 
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом ИЛИ
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции // ОпределитьСтатусПартииПриходаПоВидуДоговора()

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) Экспорт
	
	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();
	ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
			Иначе
				Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			
			Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
		Иначе
			Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")    
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") //Для данного типа документа статус присвоим "Фиктивно" - он заполнится из таблиц документа
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС")
		Тогда
		Статус = Перечисления.СтатусыПартийТоваров.Купленный;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда    
		Статус = ОпределитьСтатусПартииПриходаПоВидуДоговора(СтруктураШапкиДокумента);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда    
		Статус = Перечисления.СтатусыПартийТоваров.ПоОрдеру;		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда	
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом ИЛИ
			СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
		Иначе
			Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка() Тогда
		
		ОбщегоНазначения.Сообщение("Для документа """ +
		СтруктураШапкиДокумента.Ссылка + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
		
	КонецЕсли; 
	
	Возврат Статус;
	
КонецФункции // ОпределитьСтатусПартииПриходаУпр()

Процедура ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, ВестиПартионныйУчетПоСкладам, СпособОценкиМПЗ, СтруктураШапкиДокумента, ВидУчета,флФормированиеРазниц=ложь)
	ТипДокумента =  ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	масСтрокиДвиженийКУдалению = новый Массив;
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		Если Не флФормированиеРазниц И ВидУчета = "НалоговыйУчет" Тогда
			Если (ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт"))
				И НЕ СтрокаТЧ.СчетУчетаНУ.Количественный Тогда
				масСтрокиДвиженийКУдалению.Добавить(СтрокаДвижений);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидУчета = "УправленческийУчет" Тогда
			//Статус партии может быть указан в табличной части документа - ОприходованиеТоваров, ОприходованиеМатериаловИзПроизводства. Тогда его не надо заполнять
			Если ТаблицаТЧ.Колонки.Найти("СтатусПартии") = Неопределено Тогда  
				СтрокаДвижений.СтатусПартии          = СтатусПартии;
			КонецЕсли;
		ИначеЕсли ВидУчета = "БухгалтерскийУчет" Тогда
			СтрокаДвижений.СчетУчета   = СтрокаТЧ.СчетУчетаБУ;
		ИначеЕсли ВидУчета = "НалоговыйУчет" Тогда
			флУСН = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;
			Если флУСН Тогда
				СтрокаДвижений.СчетУчета   = СтрокаТЧ.СчетУчетаБУ;
			Иначе	
				Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
					СтрокаДвижений.СчетУчета = СтрокаТЧ.СчетНУ;
				Иначе	
					СтрокаДвижений.СчетУчета = СтрокаТЧ.СчетУчетаНУ;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		// Если партионный учет по сериям не ведется, то надо очистить серию
		Если СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
			Если НЕ ТаблицаТЧ.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено Тогда
				ВестиПартионныйУчетПоСериям = СтрокаТЧ.ВестиПартионныйУчетПоСериям;
			Иначе
				ВестиПартионныйУчетПоСериям = СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям;
			КонецЕсли;
			Если НЕ ВестиПартионныйУчетПоСериям Тогда
				СтрокаДвижений.СерияНоменклатуры = Неопределено;
			КонецЕсли;	
		КонецЕсли;
		
		//m.ionov@a-prof.ru 19.02.2014
		//Если ВестиПартионныйУчетПоСкладам Тогда
		Если ВестиПартионныйУчетПоСкладам ИЛИ (ВидУчета = "БухгалтерскийУчет" И СтрокаДвижений.СчетУчета.Забалансовый) Тогда
			Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
				Если СтрокаТЧ.ВидЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
					И СтрокаТЧ.СтатусПартии <> Перечисления.СтатусыПартийТоваров.Купленный
					И СтрокаТЧ.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.Собственные Тогда
					ПолуфабрикатыИзДавальческогоСырья = Истина;
				Иначе
					ПолуфабрикатыИзДавальческогоСырья = Ложь;
				КонецЕсли;
				Если Не ПолуфабрикатыИзДавальческогоСырья Тогда
					СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
				Иначе
					СтрокаДвижений.Склад = Неопределено;
				КонецЕсли;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
				// Для данных типов документов склад в движениях не заполняем: 
				// в документах есть индивидуальная логика распределения доп. расходов
				// по складам на основе данных партиеобразующих документов
			ИначеЕсли (НЕ СтруктураШапкиДокумента.Свойство("ВидПоступления")) ИЛИ (СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад) Тогда
				Если ТаблицаТЧ.Колонки.Найти("Склад") = Неопределено Тогда
					СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
				Иначе	
					СтрокаДвижений.Склад = СтрокаТЧ.Склад;
				КонецЕсли;	
			ИначеЕсли СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
					СтрокаДвижений.Склад = СтруктураШапкиДокумента.СкладОрдер.Склад;
				Иначе
					Если СтрокаТЧ.БезПраваПродажи Тогда
						СтрокаДвижений.Склад = СтрокаТЧ.Склад;
					Иначе	
						СтрокаДвижений.Склад = СтрокаТЧ.ДокументПолучения.Склад;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;
		
		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		Если (ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			И	(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) Тогда
			СтрокаДвижений.Заказ = СтруктураШапкиДокумента.Сделка;
		Иначе
			СтрокаДвижений.Заказ = неопределено;
			Заказ = неопределено;
			ОбособленныйУчет = ?(ТаблицаТЧ.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей") = Неопределено,NULL,СтрокаТЧ.ОбособленныйУчетТоваровПоЗаказамПокупателей);
			Если ТаблицаТЧ.Колонки.Найти("ЗаказПокупателя") <> Неопределено Тогда
				Заказ = СтрокаТЧ.ЗаказПокупателя;
			ИначеЕсли  ТаблицаТЧ.Колонки.Найти("ЗаказРезерв") <> Неопределено Тогда
				Заказ = СтрокаТЧ.ЗаказРезерв;
				
			ИначеЕсли  ТаблицаТЧ.Колонки.Найти("Заказ") <> Неопределено Тогда
				Заказ = СтрокаТЧ.Заказ;
			КонецЕсли;
			Если Заказ <> неопределено И ОбособленныйУчет=истина И ЗначениеЗаполнено(Заказ) И ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаДвижений.Заказ = Заказ;
			КонецЕсли;		
		КонецЕсли;
		
		
		Если Не СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней 
			ИЛИ ((ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))
			ИЛИ ((ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления"))
			И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))
			ИЛИ ((ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"))
			И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))
			ИЛИ ((ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт"))
			И (СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование))
			ИЛИ СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование
			ИЛИ (ТаблицаТЧ.Колонки.Найти("СтатусПартии") <> Неопределено И СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование) // оборудование всегда учитывается по документам оприходования
			Тогда 
			Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
				СтрокаДвижений.ДокументОприходования = СтрокаТЧ.ДокументОприходования;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления;
			Иначе
				СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
		Иначе
			Если ТипДокумента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
				СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
				/////Вадим 03.01.2014 9:10:43  бп 9
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
				//начало изменений Ожиганов 22.01.2016 б/н избавимся от проблем при списании по партиям 10.10 
				//СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;	
				Если СтруктураШапкиДокумента.Дата < '20160101' Тогда
					СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;	
				КонецЕсли;	
				//конец изменений 
				////ВадимКонец
			Иначе	
				СтрокаДвижений.ДокументОприходования = неопределено;
			КонецЕсли;	
		КонецЕсли;
		
		//Для данного документа КодОперации указывается в табличной части документа
		Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
			СтрокаДвижений.КодОперации = СтрокаТЧ.КодОперацииПартии;
		КонецЕсли;
		
	КонецЦикла;
	Если масСтрокиДвиженийКУдалению.Количество()>0 Тогда
		Для каждого Строка из масСтрокиДвиженийКУдалению цикл
			ТаблицаДвижений.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе()

Процедура РассчитатьСуммыДляПартионныхРегистров(СтруктураШапкиДокумента, СтруктТаблицДокумента,ТаблицыДанныхДокумента, ВидУчета, ТипДокумента)
	Если ВидУчета = "УправленческийУчет" Тогда
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
			Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
				
				Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТоварам Цикл
					СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТоварам[СтруктТаблицДокумента.ТаблицаПоТоварам.Индекс(СтрокаТаблицы)];
					
					СтрокаТД.Стоимость = СтрокаТаблицы.СуммаУпр;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; //Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
		
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") ТОгда
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
				Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТаре Цикл
					СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТаре[СтруктТаблицДокумента.ТаблицаПоТаре.Индекс(СтрокаТаблицы)];
					СтрокаТД.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаТаблицы.Сумма,
					СтруктураШапкиДокумента.ВалютаДокумента, 
					СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента, 
					СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; //Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") ТОгда
		
	ИначеЕсли ВидУчета = "БухгалтерскийУчет" ИЛИ (ВидУчета = "НалоговыйУчет" И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН)) Тогда
		
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
			Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТоварам Цикл
				СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТоварам[СтруктТаблицДокумента.ТаблицаПоТоварам.Индекс(СтрокаТаблицы)];
				Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
					СтрокаТД.Стоимость = СтрокаТаблицы.СуммаРегл;
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					СтрокаТД.Стоимость = СтрокаТаблицы.Себестоимость * СтрокаТаблицы.Количество;
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
					СтрокаТД.Стоимость = СтрокаТаблицы.Стоимость;
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
					СтрокаТД.Стоимость = СтрокаТаблицы.Сумма;
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
					Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
						СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаРаспределения + СтрокаТаблицы.ПроводкаСуммаНДС + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения;
					Иначе
						СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаРаспределения;
					КонецЕсли;
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
					ИЛИ ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
					Если ВидУчета = "БухгалтерскийУчет"	Тогда
						СтрокаТД.Стоимость = СтрокаТаблицы.СуммаБух;
					Иначе
						СтрокаТД.Стоимость = СтрокаТаблицы.СуммаНал;
					КонецЕсли;
				ИначеЕсли СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда
					СтрокаТД.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
				Иначе
					СтрокаТД.Стоимость = СтрокаТаблицы.СуммаБезНДС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; //Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
		
		// ТАРА Рассчитаем суммы перед записью в регистр
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") ТОгда
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
				Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТаре Цикл
					
					СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТаре[СтруктТаблицДокумента.ТаблицаПоТаре.Индекс(СтрокаТаблицы)];
					СтрокаТД.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаТаблицы.Сумма,
					СтруктураШапкиДокумента.ВалютаДокумента, 
					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
					СтруктураШапкиДокумента.КурсДокумента, 1);
				КонецЦикла;
			Иначе
				Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТаре Цикл
					СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТаре[СтруктТаблицДокумента.ТаблицаПоТаре.Индекс(СтрокаТаблицы)];
					СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкаСумма;
				КонецЦикла;
			КонецЕсли;  //Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		КонецЕсли;	
		
		// ОБОРУДОВАНИЕ Рассчитаем суммы перед записью в регистр
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию") Тогда
			Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоОборудованию Цикл
				СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоОборудованию[СтруктТаблицДокумента.ТаблицаПоОборудованию.Индекс(СтрокаТаблицы)];
				Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
					Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
						СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаРаспределения + СтрокаТаблицы.ПроводкаСуммаНДС + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения;
					Иначе
						СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаРаспределения;
					КонецЕсли;
				Иначе
					Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда
						СтрокаТД.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
					Иначе
						СтрокаТД.Стоимость = СтрокаТаблицы.СуммаБезНДС;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли; //Если СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию") Тогда
	КонецЕсли;	
КонецПроцедуры	

Процедура ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента,СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоКомплектам, ВидУчета);
	Если ТаблицаПоТаре<>неопределено Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре.Скопировать());
		СтруктТаблицДокумента.ТаблицаПоТаре.Колонки.КоличествоДок.Имя = "Количество";
	КонецЕсли;
	Если ВидУчета = "Упр" ТОгда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоКомплектам.Скопировать());
		
		СтруктТаблицДокумента.ТаблицаПоТаре.Колонки.Удалить("Стоимость");
		СтруктТаблицДокумента.ТаблицаПоТаре.Колонки.СуммаБезНДС.Имя = "Стоимость";
		СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.ПлюсСебестоимость.Имя = "Стоимость";
		СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.КоличествоДок.Имя = "Количество";
	Иначе
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам.Скопировать());
	КонецЕсли;	
	
	Для Каждого ТекущаяТаблица Из СтруктТаблицДокумента Цикл
		Если Найти(ТекущаяТаблица.Ключ,"Сторно")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаПоТоварамПартии = ТекущаяТаблица.Значение;
		Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамПартии.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТоварамПартии.Получить(Сч);
				Если (НЕ ТаблицаПоТоварамПартии.Колонки.Найти("ДокументПартии") = Неопределено)
					И ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
					ТаблицаПоТоварамПартии.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры	

Процедура ПодготовитьТаблицыДокументаВозвратИзЭксплуатации(СтруктураШапкиДокумента, СтруктТаблицДокумента);
	
	Для Каждого ЭлементСтруктуры Из СтруктТаблицДокумента Цикл
		
		ТекущаяТаблица = ЭлементСтруктуры.Значение;
		//начало изменений Ожиганов 04.05.2016 б/н исправление ошибок по возвратам ПР  
		Если ТекущаяТаблица.Колонки.Найти("ПРГ_ЭтоПР") <> Неопределено Тогда
			 ТекущаяТаблица.Колонки.Добавить("ВременнаяРазница",Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
			 ТекущаяТаблица.Колонки.Добавить("ПостояннаяРазница",Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
			 Для Каждого ТекСтрока Из ТекущаяТаблица Цикл
				 Если ТекСтрока.ПРГ_ЭтоПР <> Неопределено и ТекСтрока.ПРГ_ЭтоПР Тогда
					ТекСтрока.ПостояннаяРазница = ТекСтрока.Стоимость;
					ТекСтрока.ВременнаяРазница   = 0;
				Иначе
					ТекСтрока.ПостояннаяРазница = 0;
					ТекСтрока.ВременнаяРазница  = ТекСтрока.Стоимость;
				 КонецЕсли; 
				 ТекСтрока.Стоимость = 0;
			 КонецЦикла; 
		Иначе
		//конец изменений 
			ТекущаяТаблица.Колонки.Добавить("ВременнаяРазница");
			
			МассивСтоимость = ТекущаяТаблица.ВыгрузитьКолонку("Стоимость");
			ТекущаяТаблица.ЗагрузитьКолонку(МассивСтоимость, "ВременнаяРазница");
			ТекущаяТаблица.ЗаполнитьЗначения(0, "Стоимость");
		//начало изменений Ожиганов 04.05.2016 б/н исправление ошибок по возвратам ПР  			
		КонецЕсли;	
	    //конец изменений 
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицыДокументаВозвратИзЭксплуатации()

Процедура ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, ВидУчета)
	
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	СуффиксРегистра = ?(ВидУчета = "УправленческийУчет","",ВидУчета);
	Движения.Вставить("ПартииТоваровНаСкладах"+СуффиксРегистра,РегистрыНакопления["ПартииТоваровНаСкладах" + СуффиксРегистра].СоздатьНаборЗаписей());
	Движения["ПартииТоваровНаСкладах"+СуффиксРегистра].Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения["ПартииТоваровНаСкладах"+СуффиксРегистра], СтруктТаблицДокумента);
	Если ВидУчета = "УправленческийУчет" Тогда
		ВестиПартионныйУчетПоСкладам = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам;
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации));
	Иначе
		ВестиПартионныйУчетПоСкладам = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", СтруктураШапкиДокумента.Организация);	
	КонецЕсли;
	
	РассчитатьСуммыДляПартионныхРегистров(СтруктураШапкиДокумента, СтруктТаблицДокумента,ТаблицыДанныхДокумента, ВидУчета, ТипДокумента);
	
	СписокТаблицДокумента = "";
	// Заполнить недостающие поля.
	Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда												
		СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоТоварам";
		ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТоварам, 
		ТаблицыДанныхДокумента["ТаблицаПоТоварам"], 
		ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), 
		ВестиПартионныйУчетПоСкладам, 
		УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
		СтруктураШапкиДокумента, 
		ВидУчета);
	КонецЕсли;													
	Если СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию") Тогда												
		СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоОборудованию";
		ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоОборудованию, 
		ТаблицыДанныхДокумента["ТаблицаПоОборудованию"], 
		Перечисления.СтатусыПартийТоваров.Оборудование, 
		ВестиПартионныйУчетПоСкладам, 
		УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
		СтруктураШапкиДокумента, 
		ВидУчета);
	КонецЕсли;													
	Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") Тогда
		СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоТаре";
		ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТаре, 
		ТаблицыДанныхДокумента["ТаблицаПоТаре"], 
		?(ТипДокумента=Тип("ДокументСсылка.ПриходныйОрдерНаТовары"),Перечисления.СтатусыПартийТоваров.ПоОрдеру,Перечисления.СтатусыПартийТоваров.ВозвратнаяТара), 
		ВестиПартионныйУчетПоСкладам, 
		УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
		СтруктураШапкиДокумента, 
		ВидУчета);
	КонецЕсли;	
	Если ТипДокумента <> Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда	//Документ ОприходованиеМатериаловИзПроизводства содержит код операции в табличной части											
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации", КодОперацииПартииТоваров, СписокТаблицДокумента);
	КонецЕсли;
	Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ
		//начало изменений БП 02 
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
		//конец изменений БП 02
		/// Кунов О.В., 25.06.2014 - 
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ
		///
		/// Кунов О.В., 11.08.2015 - 42605
		ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") ИЛИ
		///
		ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		//для данных документов качество для товаров указывается в табличной части, его не требуется изменять.
		//Необходимо заполнить только качество для тары, если она есть
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
		КонецЕсли;
	Иначе
		//Установить качество Новый для всех таблиц
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
	КонецЕсли;
	
	// Заполнить таблицу для сторнирующих движений по партиям товаров на складах для поступления по ордеру
	Если СтруктураШапкиДокумента.Свойство("ВидПоступления")
		И (СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру)
		И (ВидУчета = "УправленческийУчет") Тогда
		СписокТаблицДокументаСторно = "";
		Для каждого Таблица из СтруктТаблицДокумента цикл
			Если Найти(Таблица.Ключ,"Сторно")>0 Тогда
				СписокТаблицДокументаСторно = СписокТаблицДокументаСторно+?(СписокТаблицДокументаСторно = "","",", ")+Таблица.Ключ
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВестиПартионныйУчетПоСкладам Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено, СписокТаблицДокументаСторно);  
		КонецЕсли;	
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ПоОрдеру, СписокТаблицДокументаСторно);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Стоимость",    0, СписокТаблицДокументаСторно);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",  Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, СписокТаблицДокументаСторно);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, СписокТаблицДокументаСторно);
		
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения["ПартииТоваровНаСкладах"+СуффиксРегистра], ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);	
	
КонецПроцедуры

Процедура ПодготовитьТаблицуТоваров_ГТДИмпорт(ТаблицаДвижений, ВидУчета)
	Если ТаблицаДвижений.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	Если ВидУчета="УправленческийУчет" Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
	КонецЕсли;	
	Инд=0;
	Пока Инд<ТаблицаДвижений.Количество() Цикл
		Если (НЕ ЗначениеЗаполнено(ТаблицаДвижений[Инд].ДокументОприходования) И ВидУчета="УправленческийУчет") ИЛИ
			НЕ ЗначениеЗаполнено(ТаблицаДвижений[Инд].Номенклатура) ИЛИ
			((ВидУчета="БухгалтерскийУчет" ИЛИ ВидУчета="НалоговыйУчет") И ТаблицаДвижений[Инд].Сумма=0) 
			Тогда
			ТаблицаДвижений.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТаблицы_ПоступлениеДопРасходов(СтруктураТаблиц, ВидУчета)
	Для каждого Таблица из СтруктураТаблиц цикл
		ТаблицаДвижений = Таблица.Значение;
		ИмяТаблицы = Таблица.Ключ;
		Если ТаблицаДвижений.Количество()=0 Тогда 
			Продолжить;
		КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		Если ВидУчета="УправленческийУчет" И ИмяТаблицы="ТаблицаПоТоварам" Тогда
			Инд=0;
			Пока Инд<ТаблицаДвижений.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(ТаблицаДвижений[Инд].ДокументОприходования) Тогда
					ТаблицаДвижений.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьПриходПоРегиструПродажиСебестоимость(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента)
	// ТОВАРЫ ПО РЕГИСТРУ ПродажиСебестоимость
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Движения.Вставить("ПродажиСебестоимость",РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
		Движения.ПродажиСебестоимость.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		НаборДвижений = Движения.ПродажиСебестоимость;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийПродажиСебестоимость = НаборДвижений.Выгрузить();
		ТаблицаДвиженийПродажиСебестоимость.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийПродажиСебестоимость.Скопировать();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка ,"ДокументОприходования");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации), "Организация");
		
		Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
			СтрокаТаблицыДвижений.Стоимость = -СтрокаТаблицыДвижений.Стоимость;
			СтрокаТаблицыДвижений.Количество = -СтрокаТаблицыДвижений.Количество;
		КонецЦикла;	
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;  //Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
КонецПроцедуры	

Процедура ВыполнитьДвиженияПБУ1802(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента,УчетнаяПолитика,КодОперацииПартииТоваров)
	//При использовании УСН движения по ПБУ18 не формируются
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ТОгда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	//Для некоторых типов документов движения по ПБУ18 не формируются:
	Если 
		//1. В документах Возврат..., ОприходованиеМатериаловИзПроизводства  приходные движения формируются 
		//  на основании расходных движений, которые 
		//	были выполнены при отражении сделки (передача в эксплуатацию, реализация, передача товаров и т.д.).
		//  За формирование данных движений отвечает логика списания партий. Здесь такие движения не формируются
		ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") 	ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") 			ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") ИЛИ
		//2.  В документах ПоступлениеТоваровИзПереработки, 
		//		ПоступлениеТоваровИУслуг с видом операции "В Переработку" разницы в оценке стоимости не возникают 
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") ИЛИ
		
		(ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И 
		СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку) ИЛИ
		//3.  Для документа ПринятиеКУчетуОС предусмотрены свои процедуры по формированию разниц - "СформироватьПроводкиПоРазницам_ПринятиеКУчетуОС"
		ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС") ИЛИ 
		//4.  Для документа ГТДИмпорт движения по разницам не формируются, если неустановлен признак РассчитатьРазницы в СтруктураШапкиДокумента
		(ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") И НЕ СтруктураШапкиДокумента.РассчитатьРазницы)
		Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьТовары = СтруктТаблицДокумента.ТаблицаПоТоварам.Количество() > 0;
	ЕстьОборудование = СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию") И СтруктТаблицДокумента.ТаблицаПоОборудованию.Количество() > 0;
	
	Если НЕ (ЕстьТовары ИЛИ ЕстьОборудование) Тогда
		Возврат;
	КонецЕсли;
	
	ПрименениеПБУ18 = СтруктураШапкиДокумента.ПоддержкаПБУ18;
	
	//Заполнение признака формирования движений затратам - необходимо только для двух типов документов
	флФормироватьДвиженияПоЗатратам = ложь;
	Если ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		флФормироватьДвиженияПоЗатратам = истина;
	КонецЕсли;
	
	//Движения не формируется, если не применяется ПБУ18 и не требуется формировать движения по затратам
	Если не (ПрименениеПБУ18 или флФормироватьДвиженияПоЗатратам) Тогда
		Возврат;
	КонецЕсли;
	
	//создадим движения-проводки НУ
	Движения.Вставить("Налоговый",РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей());
	Движения.Налоговый.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	Если флФормироватьДвиженияПоЗатратам Тогда
		Движения.Вставить("ЗатратыНалоговыйУчет",РегистрыНакопления.ЗатратыНалоговыйУчет.СоздатьНаборЗаписей());
		Движения.ЗатратыНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	
	Если ЕстьТовары Тогда
		//Формирование движений для таблицы товаров
		ЗаполнитьДвиженияПБУ1802(УчетнаяПолитика,СтруктураШапкиДокумента,Движения, СтруктТаблицДокумента.ТаблицаПоТоварам,КодОперацииПартииТоваров,ПрименениеПБУ18,флФормироватьДвиженияПоЗатратам,неопределено);
	КонецЕсли;
	Если ЕстьОборудование Тогда
		//Формирование движений для таблицы оборудования
		ЗаполнитьДвиженияПБУ1802(УчетнаяПолитика,СтруктураШапкиДокумента,Движения, СтруктТаблицДокумента.ТаблицаПоОборудованию,КодОперацииПартииТоваров,ПрименениеПБУ18,флФормироватьДвиженияПоЗатратам,Перечисления.СтатусыПартийТоваров.Оборудование);
	КонецЕсли;
	
Конецпроцедуры

Процедура ЗаполнитьПроводкиПБУ1802(СтруктураШапкиДокумента,ТаблицаТЧ,СтрокаТаблицы,СчетНУСоответствующийСчетуБУ,ВидУчетаВПроводку,Стоимость,ПроводкиНУ,флФормироватьДвиженияПоЗатратам)
	СкладВПроводку = неопределено;
	Если ТаблицаТЧ.Колонки.Найти("Склад") <> Неопределено Тогда
		СкладВПроводку = СтрокаТаблицы.Склад;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("Склад") Тогда
		СкладВПроводку = СтруктураШапкиДокумента.Склад;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("СкладОрдер") Тогда
		СкладВПроводку = СтруктураШапкиДокумента.СкладОрдер;
	КонецЕсли;	
	
	Проводка = ПроводкиНУ.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Сумма       = Стоимость;
	Проводка.Содержание  = СтрокаТаблицы.Содержание;
	Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СкладВПроводку);
	Проводка.ВидУчетаДт  = ВидУчетаВПроводку;
	Проводка.Регистратор = СтруктураШапкиДокумента.Ссылка;
	
	Проводка = ПроводкиНУ.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = СтрокаТаблицы.Содержание;
	Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СкладВПроводку);
	Если флФормироватьДвиженияПоЗатратам Тогда
		БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",    СтрокаТаблицы.ПодразделениеОрганизации);
		Если ТипЗнч(СтрокаТаблицы.СтатьяЗатратНУ) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",     СтрокаТаблицы.СтатьяЗатратНУ);
		ИначеЕсли ТипЗнч(СтрокаТаблицы.СтатьяЗатратНУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы",     СтрокаТаблицы.СтатьяЗатратНУ);
		КонецЕсли;
	КонецЕсли;
	
	Проводка.Сумма = - Стоимость;
	Проводка.ВидУчетаДт = ВидУчетаВПроводку;
	Проводка.Регистратор = СтруктураШапкиДокумента.Ссылка;
КонецПроцедуры	

Процедура ЗаполнитьДвиженияПБУ1802(УчетнаяПолитика,СтруктураШапкиДокумента,Движения, ТаблицаТЧ,КодОперацииПартииТоваров,ПоддержкаПБУ18,флФормироватьДвиженияПоЗатратам,СтатусПартии)
	
	ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	ПроводкиНУ = Движения.Налоговый;
	СодержаниеОперации = ОпределитьСодержаниеОперацииДляПБУ18(СтруктураШапкиДокумента,СтатусПартии);
	
	// по регистру партии товаров Налоговый учет	
	НаборДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТаблицаРазницы = ТаблицаТЧ.СкопироватьКолонки();
	Если ТаблицаРазницы.Колонки.Найти("ВременнаяРазница")=неопределено Тогда
		ТаблицаРазницы.Колонки.Добавить("ВременнаяРазница");
	КонецЕсли;
	Если ТаблицаРазницы.Колонки.Найти("ПостояннаяРазница")=неопределено Тогда
		ТаблицаРазницы.Колонки.Добавить("ПостояннаяРазница");
	КонецЕсли;
	//кэш для хранения счетов БУ, для которых уже получали счет НУ (в целях ускорения выполнения процедуры)
	КэшСчетов = Новый Соответствие;
	НомерСтроки = 1;
	Для Каждого СтрокаТаблицы Из ТаблицаТЧ Цикл
		ВидЗатратНУ = неопределено;
		СчетНУСоответствующийСчетуБУ = неопределено;
		
		Если флФормироватьДвиженияПоЗатратам И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатратНУ) Тогда
			Если ТипЗнч(СтрокаТаблицы.СтатьяЗатратНУ)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ВидЗатратНУ = СтрокаТаблицы.СтатьяЗатратНУ.ВидРасходовНУ;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.СтатьяЗатратНУ)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ВидЗатратНУ = СтрокаТаблицы.СтатьяЗатратНУ.ВидПрочихДоходовИРасходов;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидЗатратНУ<>неопределено Тогда
			//попытка определить счет НУ с учетом вида затрат
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ,ВидЗатратНУ", СтрокаТаблицы.СчетУчетаБУ,ВидЗатратНУ), , СтруктураШапкиДокумента.Дата);
		КонецЕсли;
		Если не ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			//попытка определить счет НУ из кеша счетов (возможно для этого СчетаБУ СчетНУ уже определили ранее)
			СчетНУСоответствующийСчетуБУ = КэшСчетов[СтрокаТаблицы.СчетУчетаБУ];
			Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ), , СтруктураШапкиДокумента.Дата);
				КэшСчетов.Вставить(СтрокаТаблицы.СчетУчетаБУ, СчетНУСоответствующийСчетуБУ);
			КонецЕсли;
		КонецЕсли;
		
		// Если соответствующий счет не найден, то разницы не рассчитаны
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
			ОбщегоНазначения.Сообщение("Не найдено соответствие для счета БУ " +  СтрокаТаблицы.СчетУчетаБУ + ", разницы между БУ и НУ не рассчитаны");
			Продолжить;
		КонецЕсли;
		//Счет НУ соответствует счету БУ - разницы не возникают
		Если СтрокаТаблицы.СчетУчетаНУ=СчетНУСоответствующийСчетуБУ ИЛИ
			СтрокаТаблицы.СчетУчетаНУ.Родитель=СчетНУСоответствующийСчетуБУ.Родитель Тогда
			Продолжить;
		КонецЕсли;
		//Определение стоимости
		Стоимость = 0;
		Если ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			Стоимость = СтрокаТаблицы.Сумма;
		ИначеЕсли ТаблицаТЧ.Колонки.Найти("СуммаБезНДС") <> Неопределено Тогда
			Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
					Стоимость = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаРаспределения + СтрокаТаблицы.ПроводкаСуммаНДС + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения;
				Иначе
					Стоимость = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаРаспределения;
				КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			Иначе
				Стоимость = СтрокаТаблицы.СуммаБезНДС;
			КонецЕсли;	
		КонецЕсли;
		Если Стоимость = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Движения по регистру ЗатратыНалоговыйУчет
		ВидУчетаВПроводку = Перечисления.ВидыУчетаПоПБУ18.ВР;
		Если флФормироватьДвиженияПоЗатратам И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатратНУ) И НЕ СтрокаТаблицы.СчетУчетаНУ.Количественный Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицы.СчетУчетаНУ, СтрокаТаблицы.СтатьяЗатратНУ, "Налоговый");
			
			Если (ТипЗнч(СтрокаТаблицы.СтатьяЗатратНУ) = Тип("СправочникСсылка.СтатьиЗатрат")
				И СтрокаТаблицы.СтатьяЗатратНУ.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
				ИЛИ (ТипЗнч(СтрокаТаблицы.СтатьяЗатратНУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
				И НЕ СтрокаТаблицы.СтатьяЗатратНУ.ПринятиеКналоговомуУчету) Тогда
				//Статья затрат - не принимаемая к НУ. Вид учета - ПР
				ВидУчетаВПроводку = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Иначе
				ВидУчетаВПроводку = Перечисления.ВидыУчетаПоПБУ18.ВР;
			КонецЕсли;
			
			Если (ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие) И (НЕ ВидУчетаВПроводку = Перечисления.ВидыУчетаПоПБУ18.ПР) Тогда
				
				ДвиженияЗатрат = Движения.ЗатратыНалоговыйУчет.Добавить();				
				ДвиженияЗатрат.Период = СтруктураШапкиДокумента.Дата;
				
				ДвиженияЗатрат.СчетУчета 		= СтрокаТаблицы.СчетУчетаНУ;
				ДвиженияЗатрат.Организация 		= СтруктураШапкиДокумента.Организация;
				ДвиженияЗатрат.СтатьяЗатрат 	= СтрокаТаблицы.СтатьяЗатратНУ;
				ДвиженияЗатрат.Подразделение 	= СтрокаТаблицы.ПодразделениеОрганизации;
				
				ДвиженияЗатрат.Сумма 			= Стоимость;
				Если ПоддержкаПБУ18 Тогда
					ДвиженияЗатрат.ВременнаяРазница =  -Стоимость;
					ДвиженияЗатрат.ПостояннаяРазница = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если не ПоддержкаПБУ18 Тогда
			Продолжить;
		КонецЕсли;
		
		//Таблица для формирования разниц в регистре ПартииТоваровНалоговыйУчет
		Если флФормироватьДвиженияПоЗатратам И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатратНУ) Тогда
			
			СтрокаТаблицыРазниц = ТаблицаРазницы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРазниц, СтрокаТаблицы);
			СтрокаТаблицыРазниц.НомерСтроки = НомерСтроки;
			СтрокаТаблицыРазниц.СчетУчетаНУ = СчетНУСоответствующийСчетуБУ;
			
			Если ВидУчетаВПроводку = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				СтрокаТаблицыРазниц.ПостояннаяРазница = Стоимость;
				СтрокаТаблицыРазниц.ВременнаяРазница = 0;
			Иначе
				СтрокаТаблицыРазниц.ВременнаяРазница = Стоимость;
				СтрокаТаблицыРазниц.ПостояннаяРазница = 0;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		Иначе
			СтрокаТаблицыРазниц = ТаблицаРазницы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРазниц, СтрокаТаблицы);
			СтрокаТаблицыРазниц.ВременнаяРазница = - Стоимость;
			СтрокаТаблицыРазниц.НомерСтроки = НомерСтроки;
			
			СтрокаТаблицыРазниц = ТаблицаРазницы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРазниц, СтрокаТаблицы);
			СтрокаТаблицыРазниц.СчетУчетаНУ = СчетНУСоответствующийСчетуБУ;
			СтрокаТаблицыРазниц.ВременнаяРазница = Стоимость;
			СтрокаТаблицыРазниц.НомерСтроки = НомерСтроки + 1;
			
			НомерСтроки = НомерСтроки + 2;
			
		КонецЕсли;
		
		//движения по проводкам НУ
		ЗаполнитьПроводкиПБУ1802(СтруктураШапкиДокумента,ТаблицаТЧ,СтрокаТаблицы,СчетНУСоответствующийСчетуБУ,ВидУчетаВПроводку,Стоимость,ПроводкиНУ,флФормироватьДвиженияПоЗатратам);
	КонецЦикла;
	
	Если ТаблицаРазницы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРазницы, ТаблицаДвижений);
	// Недостающие поля.
	Если СтатусПартии = неопределено Тогда
		СтатусПартии = ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента);
	КонецЕсли;
	
	ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(ТаблицаРазницы, 
	ТаблицаДвижений, 
	СтатусПартии, 
	глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл, 
	УчетнаяПолитика.НалоговыйУчет.СпособОценкиМПЗ, 
	СтруктураШапкиДокумента, 
	"НалоговыйУчет",истина);
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
	ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");	
	ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");	
	
	НаборДвижений.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
КонецПроцедуры

Процедура СформироватьПроводкиПоРазницам_ПринятиеКУчетуОС(СтруктураШапкиДокумента, ТаблицаПоОС, ДанныеУчетОС)
	Если не СтруктураШапкиДокумента.ПоддержкаПБУ18 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	СуммыРазниц = ДанныеУчетОС.струСуммыРазниц;
	
	//создадим движения-проводки НУ
	ПроводкиНУ=РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	ПроводкиНУ.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	Проводка = ПроводкиНУ.Добавить();
	Проводка.Период       = СтруктураШапкиДокумента.Дата;
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	Проводка.НомерЖурнала = "ОС";
	Проводка.Содержание   = "Оприходованы МПЗ";
	
	Проводка.КоличествоДт = ТаблицаПоОС.Количество();
	Проводка.Сумма = 0; 
	
	Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);
	
	Проводка = ПроводкиНУ.Добавить();
	
	Проводка.Период       = СтруктураШапкиДокумента.Дата;
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	Проводка.НомерЖурнала = "ОС";
	Проводка.Содержание   = "Оприходованы МПЗ";
	Проводка.Сумма        = СуммыРазниц.СуммаНУ + СуммыРазниц.СуммаВР;
	
	Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);
	
	Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
	
	Если СуммыРазниц.СуммаПР <> 0 Тогда
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.НомерЖурнала = "ОС";
		Проводка.Содержание   = "Оприходованы МПЗ";
		Проводка.Сумма        = СуммыРазниц.СуммаПР;
		
		Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);
		
		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
	КонецЕсли;
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.НомерЖурнала = "ОС";
		Проводка.Содержание   = "Оприходованы МПЗ";
		Проводка.Сумма        = (- СуммыРазниц.СуммаНУ - СуммыРазниц.СуммаВР) / ТаблицаПоОС.Количество();
		
		Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаНУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
		
		Если СуммыРазниц.СуммаПр <> 0 Тогда
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "ОС";
			Проводка.Содержание   = "Оприходованы МПЗ";
			Проводка.Сумма        = - СуммыРазниц.СуммаПР / ТаблицаПоОС.Количество();
			
			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
		КонецЕсли;
		
	КонецЦикла;
	ПроводкиНУ.Записать(ложь);
КонецПроцедуры

Функция ОпределитьСодержаниеОперацииДляПБУ18(СтруктураШапкиДокумента,СтатусПартии)
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат "Оприходованы ТМЦ";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование Тогда
			Возврат "Оприходованы ОС";
		Иначе
			Возврат "Оприходованы ТМЦ";
		КонецЕсли;
	ИначеЕсли	ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Возврат "Оприходованы ТМЦ";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		Возврат "Доп. расходы при поступлении товаров";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьОприходованиеПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента,УчетнаяПолитика,КодОперацииПартииТоваров)
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
		СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров И
		ЗначениеЗаполнено(СтруктураШапкиДокумента.ИнвентаризацияТоваровНаСкладе) И
		СтруктураШапкиДокумента.Свойство("СтавкаНалогаНаПрибыль") И
		СтруктураШапкиДокумента.ПоддержкаПБУ18 И
		СтруктураШапкиДокумента.Дата >= '20060101' И
		СтруктураШапкиДокумента.Дата < '20100101' Тогда
		
		КоэффициентСуммыНУ = СтруктураШапкиДокумента.СтавкаНалогаНаПрибыль;
	Иначе 
		КоэффициентСуммыНУ = 1;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладахНалоговыйУчет.
	Движения.Вставить("ПартииТоваровНаСкладахНалоговыйУчет",РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей());
	Движения.ПартииТоваровНаСкладахНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	НаборДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет;
	ТаблицаДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений);
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков Тогда
		Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТоварам Цикл
			СтрокаТД = ТаблицаДвижений[СтруктТаблицДокумента.ТаблицаПоТоварам.Индекс(СтрокаТаблицы)];
			СтрокаТД.Стоимость = СтрокаТаблицы.СуммаНУ; 
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				СтрокаТД.ПостояннаяРазница = СтрокаТаблицы.СуммаПР;
				СтрокаТД.ВременнаяРазница = СтрокаТаблицы.СуммаВР;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТоварам Цикл
			СтрокаТД = ТаблицаДвижений[СтруктТаблицДокумента.ТаблицаПоТоварам.Индекс(СтрокаТаблицы)];
			СтрокаТД.Стоимость = СтрокаТаблицы.СуммаРегл * КоэффициентСуммыНУ;
			СтрокаТД.ПостояннаяРазница = СтрокаТаблицы.СуммаРегл * (1 -КоэффициентСуммыНУ);
		КонецЦикла;
	КонецЕсли;
	
	// Недостающие поля.
	ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.Купленный, глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл, УчетнаяПолитика.НалоговыйУчет.СпособОценкиМПЗ, СтруктураШапкиДокумента, "НалоговыйУчет");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");	
	ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
	
	НаборДвижений.мПериод = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыполнитьПриход();
	
КонецПроцедуры

Процедура ВыполнитьПриходПоРегистрамНалоговогоУчетаУСН(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента)
	НаборДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	НалоговыйУчетУСН.ПоступлениеПоПартиямУСН(СтруктураШапкиДокумента, СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений, 
	Перечисления.ВидыРасходовУСН.Номенклатура);
	
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыполнитьПриход();
КонецПроцедуры	

Процедура ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоОборудованию=Неопределено, Упр=Ложь, Бух=Ложь, Нал=Ложь, ТаблицаСтаройРегистрацииВПоследовательности)
	
	Движения = Новый Структура();
	ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	// Определим код операции движений по регистру партий
	КодОперацииПартииТоваров = ОпределитьКодОперацииПартийТоваров(ТипДокумента, 
	?(СтруктураШапкиДокумента.Свойство("ВидОперации"),СтруктураШапкиДокумента.ВидОперации,Неопределено), 
	?(СтруктураШапкиДокумента.Свойство("ВидДоговора"),СтруктураШапкиДокумента.ВидДоговора,Неопределено));
	
	//Получение учетных политик
	УчетнаяПолитика = Новый Структура();
	
	// ТОВАРЫ, ТАРА И ОБОРУДОВАНИЕ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	СтруктТаблицДокумента = Новый Структура;
	Если НЕ ТаблицаПоТоварам = Неопределено И
		//Приход товаров по документу ВозвратПереданныхТоваров в данном модуле не выполняется, 
		//	может быть только сторнирование ордерных партий
		ТипДокумента <> Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",      ТаблицаПоТоварам);
	КонецЕсли;	
	
	Если НЕ ТаблицаПоОборудованию = Неопределено Тогда
		Если НЕ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда //Для документа ВозвратТоваровОтПокупателя в таблице ТаблицаПоОборудованию передается таблица по комплектам
			СтруктТаблицДокумента.Вставить("ТаблицаПоОборудованию", ТаблицаПоОборудованию);
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ТаблицаПоТаре = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",         ТаблицаПоТаре);
	КонецЕсли;	
	
	СпособВеденияПартионногоУчетаПоОрганизации = неопределено;
	Если Упр Тогда
		ПараметрыУчетнойПолитикиУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента.Дата);
		Если НЕ ЗначениеЗаполнено(ПараметрыУчетнойПолитикиУпр) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		УчетнаяПолитика.Вставить("УправленческийУчет", ПараметрыУчетнойПолитикиУпр);
		
		СпособВеденияПартионногоУчетаПоОрганизации = СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации;
		Если СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации <> Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
			// Создать таблицу для сторнирующих движений по партиям товаров на складах для поступления по ордеру
			Если СтруктураШапкиДокумента.Свойство("ВидПоступления")
				И (СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру) Тогда
				
				струПараметры = новый Структура;
				струПараметры.Вставить("ИмяРеквизитаКоличество", "Количество");
				Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
					струПараметры.Вставить("ПриходныйОрдер", СтруктураШапкиДокумента.СкладОрдер);
					струПараметры.Вставить("Склад", СтруктураШапкиДокумента.СкладОрдер.Склад);
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					струПараметры.Вставить("ИмяРеквизитаКоличество", "КоличествоДок");
				КонецЕсли;
				Если НЕ ТаблицаПоТоварам = Неопределено Тогда
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварамСторно",      СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам,струПараметры));
				КонецЕсли;
				Если НЕ ТаблицаПоТаре = Неопределено Тогда
					СтруктТаблицДокумента.Вставить("ТаблицаПоТареСторно",         СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТаре,струПараметры));
				КонецЕсли;
				Если НЕ ТаблицаПоОборудованию = Неопределено И НЕ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					СтруктТаблицДокумента.Вставить("ТаблицаПоОборудованиюСторно", СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоОборудованию, струПараметры));
				КонецЕсли;	
			КонецЕсли;
			
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, "Упр");
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
				ПодготовитьТаблицуТоваров_ГТДИмпорт(СтруктТаблицДокумента.ТаблицаПоТоварам,"УправленческийУчет");
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				ПодготовитьТаблицы_ПоступлениеДопРасходов(СтруктТаблицДокумента,"УправленческийУчет");	
			КонецЕсли;
			
			
			ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, "УправленческийУчет");
			
			//удалим из структуры таблиц таблицы Сторно, чтобы они не попали в движения по БУ и НУ
			Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварамСторно") Тогда
				СтруктТаблицДокумента.Удалить("ТаблицаПоТоварамСторно");
			КонецЕсли;
			Если СтруктТаблицДокумента.Свойство("ТаблицаПоТареСторно") Тогда
				СтруктТаблицДокумента.Удалить("ТаблицаПоТареСторно");
			КонецЕсли;
			Если СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованиюСторно") Тогда
				СтруктТаблицДокумента.Удалить("ТаблицаПоОборудованиюСторно");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если Бух ИЛИ Нал Тогда
		ПарамерыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если НЕ ЗначениеЗаполнено(ПарамерыУчетнойПолитикиРегл) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Бух Тогда
		УчетнаяПолитика.Вставить("БухгалтерскийУчет", ПарамерыУчетнойПолитикиРегл);
		
		Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, "Регл");
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			ПодготовитьТаблицы_ПоступлениеДопРасходов(СтруктТаблицДокумента,"БухгалтерскийУчет");
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			ПодготовитьТаблицуТоваров_ГТДИмпорт(СтруктТаблицДокумента.ТаблицаПоТоварам,"БухгалтерскийУчет");
		КонецЕсли;	
		
		ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, "БухгалтерскийУчет");
	КонецЕсли;
	
	Если Нал Тогда
		Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") 
			И	СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН
			И СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") Тогда
			СтруктТаблицДокумента.Удалить("ТаблицаПоТаре");//Для УСН движения по таре в налоговом учете не формируем
		КонецЕсли;	
		
		УчетнаяПолитика.Вставить("НалоговыйУчет", ПарамерыУчетнойПолитикиРегл);
		
		Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, "Регл");
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			ПодготовитьТаблицы_ПоступлениеДопРасходов(СтруктТаблицДокумента,"НалоговыйУчет");
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			ПодготовитьТаблицуТоваров_ГТДИмпорт(СтруктТаблицДокумента.ТаблицаПоТоварам,"НалоговыйУчет");
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
			ПодготовитьТаблицыДокументаВозвратИзЭксплуатации(СтруктураШапкиДокумента, СтруктТаблицДокумента);
		КонецЕсли;		
		
		Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
			ВыполнитьОприходованиеПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента,УчетнаяПолитика,КодОперацииПартииТоваров)
		Иначе	
			ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, "НалоговыйУчет");
			ВыполнитьДвиженияПБУ1802(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента,УчетнаяПолитика,КодОперацииПартииТоваров);
		КонецЕсли;
		
		//ПО ПАРТИОННОМУ УЧЕТУ УСН
		Если (НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН")) И (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН)
			И НЕ (ТипДокумента=Тип("ДокументСсылка.ПринятиеКУчетуОС") И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ) Тогда
			ВыполнитьПриходПоРегистрамНалоговогоУчетаУСН(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Если СтруктураШапкиДокумента.Свойство("ДопроведениеДокумента") Тогда
			Если СтруктураШапкиДокумента.ДопроведениеДокумента
				И СтруктураШапкиДокумента.Ссылка.ОтражатьВУправленческомУчете	Тогда
				ВыполнитьПриходПоРегиструПродажиСебестоимость(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента);
			КонецЕсли;	
		Иначе
			Если Упр Тогда
				ВыполнитьПриходПоРегиструПродажиСебестоимость(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Для Каждого ТекущееДвижение Из Движения Цикл
		Если ТекущееДвижение.Значение.Модифицированность() Тогда
			ТекущееДвижение.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦИкла;	
	ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(
	СтруктураШапкиДокумента.Ссылка, 
	СтруктураШапкиДокумента.Дата, 
	СтруктураШапкиДокумента.Организация, 
	Упр, 
	Бух, 
	Нал, 
	СпособВеденияПартионногоУчетаПоОрганизации,
	ТаблицаСтаройРегистрацииВПоследовательности);
	
	//Сдвигаем границу последовательности	
	ПараметрыСписанияПартий = глЗначениеПеременной("ПараметрыПартионногоУчета");
	ДокументМоментВремени = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	
	Если ПараметрыСписанияПартий.СписыватьПартииПриПроведенииДокументов И Упр Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(СтруктураШапкиДокумента.Организация, ДокументМоментВремени);				
		Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ), Ложь);
		СдвинутьГраницуПоследовательности("ПартионныйУчет", ДокументМоментВремени, "Упр", Отбор, Истина);	
	КонецЕсли;
	
	Если ПараметрыСписанияПартий.СписыватьПартииПриПроведенииДокументовБух И Бух Тогда
		Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", СтруктураШапкиДокумента.Организация, Ложь);
		СдвинутьГраницуПоследовательности("ПартионныйУчетБУ", ДокументМоментВремени, "Бух", Отбор, Истина);	
	КонецЕсли;	
	
КонецПроцедуры	

//ПРИХОДНЫЕ ДВИЖЕНИЯ ДОКУМЕНТ ПРИНЯТИЕ К УЧЕТУ ОС

Функция ПодготовитьДанныеДляПринятияКУчетуОС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Упр, Бух, Нал)
	ТаблицаОприходования = новый ТаблицаЗначений;
	ТаблицаОприходования.Колонки.Добавить("Номенклатура");
	ТаблицаОприходования.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаОприходования.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаОприходования.Колонки.Добавить("Склад");
	ТаблицаОприходования.Колонки.Добавить("СуммаУпр");
	ТаблицаОприходования.Колонки.Добавить("СуммаБух");
	ТаблицаОприходования.Колонки.Добавить("СуммаНал");
	ТаблицаОприходования.Колонки.Добавить("ПостояннаяРазница");
	ТаблицаОприходования.Колонки.Добавить("ВременнаяРазница");
	ТаблицаОприходования.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаОприходования.Колонки.Добавить("СчетУчетаНУ");
	ТаблицаОприходования.Колонки.Добавить("Количество");
	ТаблицаОприходования.Колонки.Добавить("НомерСтроки");
	
	струСуммыРазниц = новый Структура("СуммаНУ,СуммаВР,СуммаПР",0,0,0);
	Если Нал и СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		//получение данных о временных и постоянных разницах, уже записанных в регистр партий налогового учета
		НаборДвижений = РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет;
		НаборЗаписей = НаборДвижений.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор.Регистратор;
		Отбор.Установить(СтруктураШапкиДокумента.Ссылка);		
		
		// Установим УБ (эксклюзивную) перед чтением набора записей
		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
			СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы,ИмяТаблицы"
			,"РегистрНакопления"
			,"ПартииТоваровНаСкладахНалоговыйУчет.НаборЗаписей");
			
			СтруктураЗначенийБлокировки = Новый Структура("Регистратор", СтруктураШапкиДокумента.Ссылка);
			
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки,СтруктураЗначенийБлокировки,, Ложь, "");
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		ТаблицаПартий = НаборЗаписей.Выгрузить();
		СуммаНУ = ТаблицаПартий.Итог("Стоимость") + ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтруктураШапкиДокумента.СтоимостьНУ, 0);
		СуммаВР = ТаблицаПартий.Итог("ВременнаяРазница") +  ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтруктураШапкиДокумента.СтоимостьПР, 0);
		СуммаПР = ТаблицаПартий.Итог("ПостояннаяРазница") + ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтруктураШапкиДокумента.СтоимостьВР, 0);
		
		струСуммыРазниц.Вставить("СуммаНУ",СуммаНУ);
		струСуммыРазниц.Вставить("СуммаВР",СуммаВР);
		струСуммыРазниц.Вставить("СуммаПР",СуммаПР);
	КонецЕсли;
	
	СтрокаТаблицы 								= ТаблицаОприходования.Добавить();
	СтрокаТаблицы.НомерСтроки 					= 0;
	СтрокаТаблицы.Номенклатура 					= СтруктураШапкиДокумента.НоменклатураМПЗ;
	СтрокаТаблицы.ХарактеристикаНоменклатуры 	= СтруктураШапкиДокумента.ХарактеристикаМПЗ;
	СтрокаТаблицы.СерияНоменклатуры 			= СтруктураШапкиДокумента.СерияМПЗ;
	СтрокаТаблицы.Склад 						= СтруктураШапкиДокумента.СкладМПЗ;
	СтрокаТаблицы.Количество 					= ТаблицаПоТоварам.Количество();
	Если Упр Тогда
		СтрокаТаблицы.СуммаУпр 					= СтруктураШапкиДокумента.Стоимость;
	КонецЕсли;
	
	Если Бух тогда
		СтрокаТаблицы.СуммаБух 					= ТаблицаПоТоварам.Итог("СуммаОС_БУ");
		СтрокаТаблицы.СчетУчетаБУ 				= СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
	КонецЕсли;
	Если Нал Тогда
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			СтрокаТаблицы.СчетУчетаНУ 				= ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
			СтрокаТаблицы.СуммаНал 					= 0;
			СтрокаТаблицы.ПостояннаяРазница 		= СуммаПР;
			СтрокаТаблицы.ВременнаяРазница 			= СуммаНУ + СуммаВР;
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			СтрокаТаблицы.СчетУчетаНУ 				= СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
			СтрокаТаблицы.СуммаНал 					= 0;
			СтрокаТаблицы.ПостояннаяРазница 		= 0;
			СтрокаТаблицы.ВременнаяРазница 			= 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат новый Структура("ТаблицаОприходования, струСуммыРазниц",ТаблицаОприходования,струСуммыРазниц);
КонецФункции

//ПРОВОДКИ ПО ПОСТУПЛЕНИЮ ТМЦ

//Процедура для формирования проводок по поступлению ТМЦ для переданного документа. Вызывается из документов поступления ТМЦ
//	Готовит входные параметры для процедуры СформироватьПроводкиВсеВидыУчета исходя из типа документа
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  Отказ  								– булево – признак отказа
//  ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства
//										– ТаблицаЗначений – таблицы документа по которым необходимо сформировать проводки
//  Бух, Нал							– булево – признаки формирования проводок по БУ и НУ
Процедура СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоУслугам=неопределено, ТаблицаПоОборудованию_ТаблицаПоКомплектам=Неопределено, ТаблицаПоОбъектамСтроительства=неопределено, Бух=Ложь, Нал=Ложь) Экспорт
	Перем  КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам;
	
	Если Отказ ИЛИ НЕ (Бух ИЛИ Нал) Тогда
		Возврат;
	КонецЕсли;
	
	//сохранение таблиц в копии
	Если ТаблицаПоТоварам<>неопределено Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
	КонецЕсли;
	Если ТаблицаПоТаре<>неопределено Тогда
		Если ТипЗнч(ТаблицаПоТаре)=Тип("ТаблицаЗначений") Тогда
			КопияТаблицаПоТаре	= ТаблицаПоТаре.Скопировать();
		Иначе // может быть передана табличная часть - только для документа ВозвратПереданныхТоваров
			КопияТаблицаПоТаре	= ТаблицаПоТаре.Выгрузить();
			
		КонецЕсли;
		
	КонецЕсли;
	Если ТаблицаПоОборудованию_ТаблицаПоКомплектам<>неопределено Тогда
		КопияТаблицаПоОборудованию_ТаблицаПоКомплектам 	= ТаблицаПоОборудованию_ТаблицаПоКомплектам.Скопировать();
	КонецЕсли;
	Если ТаблицаПоУслугам<>неопределено Тогда
		КопияТаблицаПоУслугам = ТаблицаПоУслугам.Скопировать();
	КонецЕсли;
	Если ТаблицаПоОбъектамСтроительства<>неопределено Тогда
		КопияТаблицаПоОбъектамСтроительства = ТаблицаПоОбъектамСтроительства.Скопировать();
	КонецЕсли;
	
	ТипРегистратора = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	
	Если ТипРегистратора = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоУслугам, , , Бух, Нал);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
		Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
			И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата Тогда
			Возврат;
		КонецЕсли;		
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, , , , , Бух, Нал);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, , , , Бух, Нал);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, , , , , Бух, Нал);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, , , , , Бух, Нал);
		ВыполнитьОприходованиеПоРегиструБухгалтерииНалоговый(СтруктураШапкиДокумента,КопияТаблицаПоТоварам);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, , , КопияТаблицаПоОборудованию_ТаблицаПоКомплектам, , Бух, Нал);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоУслугам, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам, КопияТаблицаПоОбъектамСтроительства, Бух, Нал);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоУслугам, , , Бух, Нал);
	Иначе
		ОбщегоНазначения.Сообщение("Не удалось сформировать проводки по поступлению ТМЦ");
	КонецЕсли;
	
КонецПроцедуры

//Процедура для формирования проводок по поступлению ТМЦ. 
//	Готовит входные параметры для процедуры СформироватьПроводкиПоВидуУчета исходя из признаков отражения в учете
//	Выполняет запись заполненной структуры движений
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  Отказ  								– булево – признак отказа
//  ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства
//										– ТаблицаЗначений – таблицы документа по которым необходимо сформировать проводки
//  Бух, Нал							– булево – признаки формирования проводок по БУ и НУ
Процедура СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоУслугам=неопределено, ТаблицаПоОборудованию=Неопределено, ТаблицаПоОбъектамСтроительства = неопределено, Бух=Ложь, Нал=Ложь)
	Движения = Новый Структура();
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	СтруктТаблицДокумента = Новый Структура;
	Если НЕ ТаблицаПоТоварам = Неопределено  Тогда
		СтруктТаблицДокумента.Вставить("Товары",      ТаблицаПоТоварам);
	КонецЕсли;	
	
	Если НЕ ТаблицаПоОборудованию = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("Оборудование", ТаблицаПоОборудованию);
	КонецЕсли;
	
	Если НЕ ТаблицаПоТаре = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("Тара",         ТаблицаПоТаре);
	КонецЕсли;	
	
	Если НЕ ТаблицаПоОбъектамСтроительства = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("ОбъектыСтроительства",         ТаблицаПоОбъектамСтроительства);
	КонецЕсли;	
	
	Если НЕ ТаблицаПоУслугам = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("Услуги",         ТаблицаПоУслугам);
	КонецЕсли;	
	
	Если Бух Тогда
		СформироватьПроводкиПоВидуУчета(СтруктураШапкиДокумента, Отказ, СтруктТаблицДокумента, Движения, "БухгалтерскийУчет");
	КонецЕсли;
	Если Нал Тогда
		СформироватьПроводкиПоВидуУчета(СтруктураШапкиДокумента, Отказ, СтруктТаблицДокумента, Движения, "НалоговыйУчет");
	КонецЕсли;
	
	Для Каждого ТекущееДвижение Из Движения Цикл
		Если ТекущееДвижение.Значение.Модифицированность() Тогда
			ТекущееДвижение.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦИкла;	
	
КонецПроцедуры

//Процедура для формирования проводок по поступлению ТМЦ. 
//	Готовит входные параметры для процедуры СформироватьПроводкиПоТабличнойЧастиПоВидуУчета исходя из вида учета и таблиц документа
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  Отказ  								– булево – признак отказа
//  СтруктТаблицДокумента               – Структура – содержит таблицы документа по которым необходимо сформировать проводки
//  Движения               				– Структура – содержит коллекции движений по проводкам Бух и Нал
//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения
Процедура СформироватьПроводкиПоВидуУчета(СтруктураШапкиДокумента, Отказ, СтруктТаблицДокумента, Движения, ВидУчета)
	Перем ИмяРегистраБухгалтерии;
	ИмяРегистраБухгалтерии = ?(ВидУчета="БухгалтерскийУчет","Хозрасчетный","Налоговый");
	
	
	Движения.Вставить(ИмяРегистраБухгалтерии,РегистрыБухгалтерии[ИмяРегистраБухгалтерии].СоздатьНаборЗаписей());
	Движения[ИмяРегистраБухгалтерии].Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	Для каждого ТабЧасть из СтруктТаблицДокумента цикл
		ИмяТабЧасти = ТабЧасть.Ключ;
		ТаблицаТЧ = ТабЧасть.Значение;
		Если ТаблицаТЧ.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПараметрыПроводок = ПолучитьПараметрыПроводок(СтруктураШапкиДокумента,ИмяТабЧасти, ВидУчета);
		Если СтруктураПараметрыПроводок.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		СформироватьПроводкиПоТабличнойЧастиПоВидуУчета(Движения, СтруктураПараметрыПроводок, СтруктураШапкиДокумента, ИмяТабЧасти, ТаблицаТЧ, ВидУчета);
	КонецЦикла;
	
КонецПроцедуры

//Функция для расчета сумм в проводки. 
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  СтрокаТаблицы  						– Строка таблицы значений - Строка , на основании которой формируется проводка
//  ИмяТЧ               				– Строка – содержит имя табличной части по которой формируется проводка
// Возвращаемое значение:
//  Структура, содержащая рассчитанные суммы. Элементы структуры: 
//		Стоимость,НДС,СтоимостьВал,НДСВал - есть всегда, могут быть равными 0
//      СтоимостьНУ - появляется в некоторых случаях если стоимость нал отличается от стоимости бух
Функция РассчитатьСуммыПроводок(СтруктураШапкиДокумента, СтрокаТаблицы, ИмяТЧ)
	
	СтруктураСуммы = новый Структура("Стоимость,НДС,СтоимостьВал,НДСВал",0,0,0,0);
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	Если ИмяТЧ = "Тара" Тогда
		УЗ_ПоказыватьСуммыВРублях  = Ложь;
		СтруктураШапкиДокумента.Свойство("УЗ_ПоказыватьСуммыВРублях",УЗ_ПоказыватьСуммыВРублях);
		Если УЗ_ПоказыватьСуммыВРублях Тогда
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаВал);
		ИначеЕсли СтруктураШапкиДокумента.Дата >= '20140601'
			и СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
			и СтруктураШапкиДокумента.ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаДокумента
			Тогда
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсВзаиморасчетов* СтруктураШапкиДокумента.КратностьВзаиморасчетов);
		Иначе
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента);
		КонецЕсли;	
		
		СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.ПроводкаСумма);
		Возврат СтруктураСуммы;
	КонецЕсли;
	
	СчетУчетаБУЗабалансовый = ложь;
	Если ИмяТЧ = "Товары" и (
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.АвансовыйОтчет")
		) Тогда
		СчетУчетаБУЗабалансовый = СтрокаТаблицы.СчетУчетаБУ.Забалансовый;
	КонецЕсли;
	
	Если ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал+СтрокаТаблицы.НДСВал);
		Иначе
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал);
		КонецЕсли;
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СчетУчетаБУЗабалансовый  Тогда
			СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС);
		Иначе
			СтруктураСуммы.Вставить("Стоимость",СтрокаТаблицы.СуммаБезНДС);
		КонецЕсли;
		СтруктураСуммы.Вставить("НДС",СтрокаТаблицы.НДС);
		СтруктураСуммы.Вставить("НДСВал",СтрокаТаблицы.НДСВал);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			СтруктураСуммы.Вставить("СтоимостьВал", (СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС) / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента);
		Иначе
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента);
		КонецЕсли;
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СчетУчетаБУЗабалансовый Тогда
			СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС);
		Иначе
			СтруктураСуммы.Вставить("Стоимость",СтрокаТаблицы.ПроводкаСумма);
		КонецЕсли;
		СтруктураСуммы.Вставить("НДС",СтрокаТаблицы.ПроводкаСуммаНДС);
		СтруктураСуммы.Вставить("НДСВал",СтрокаТаблицы.ПроводкаСуммаНДС / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		//m.ionov@a-prof.ru 24.02.2014
		//Если Не СтруктураШапкиДокумента.УЗ_ПоказыватьСуммыВРублях Тогда
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал+СтрокаТаблицы.НДСВал);
		Иначе
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал);
		КонецЕсли;		
		//Иначе
		//	Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
		//   		СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал + СтрокаТаблицы.СуммаВзаиморасчетовРаспределения);
		//	Иначе
		//   		СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.СуммаВзаиморасчетовБезНДСРаспределения);
		//	КонецЕсли;		
		//КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СчетУчетаБУЗабалансовый Тогда
			СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС + СтрокаТаблицы.ПроводкаСуммаРаспределения + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения);
		Иначе
			СтруктураСуммы.Вставить("Стоимость",СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаРаспределения);
		КонецЕсли;
		СтруктураСуммы.Вставить("НДС",СтрокаТаблицы.ПроводкаСуммаНДС + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения);
		//m.ionov@a-prof.ru 24.02.2014
		Если Не СтруктураШапкиДокумента.УЗ_ПоказыватьСуммыВРублях Тогда
			СтруктураСуммы.Вставить("НДСВал",(СтрокаТаблицы.ПроводкаСуммаНДС + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения) / СтруктураШапкиДокумента.КурсВзаиморасчетов * СтруктураШапкиДокумента.КратностьВзаиморасчетов);
		Иначе
			СтруктураСуммы.Вставить("НДСВал",СтрокаТаблицы.НДСВал);
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		СтруктураСуммы.Вставить("Стоимость",- СтрокаТаблицы.Себестоимость * СтрокаТаблицы.Количество);
		СтруктураСуммы.Вставить("СтоимостьВал",- СтрокаТаблицы.Себестоимость * СтрокаТаблицы.Количество / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СчетУчетаБУЗабалансовый Тогда
			СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС);
		Иначе
			СтруктураСуммы.Вставить("Стоимость",СтрокаТаблицы.СуммаБезНДС);
		КонецЕсли;
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал+СтрокаТаблицы.НДСВал);
		Иначе
			СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал);
		КонецЕсли;
		СтруктураСуммы.Вставить("НДС",СтрокаТаблицы.НДС);
		СтруктураСуммы.Вставить("НДСВал",СтрокаТаблицы.НДСВал);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
		Если СтрокаТаблицы.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
			СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.Стоимость);
			СтруктураСуммы.Вставить("СтоимостьНУ", 0);
		КонецЕсли;
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.СтоимостьРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ", СтрокаТаблицы.СтоимостьРегл);
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.СуммаРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ", СтрокаТаблицы.СуммаНУ);
	КонецЕсли;
	
	Возврат СтруктураСуммы;
КонецФункции

//Процедура для заполнения счета в проводке. 
// Параметры
//  СтруктураПараметры  						– Структура – содержит исходные параметры формирования проводок
//  Проводка  							– запись регистра бухгалтерии – заполняемая проводка
//  флДебет               				– булево – содержит признак какой счет заполнять (дебета или кредита)
//  ИсточникШапка               		– Структура – содержит структуру шапки документа
//  ИсточникТабЧасть					- Строка табличной части - содержит строку табличной части по данным которой заполняется проводка
Процедура ЗаполнитьСчетПроводки(СтруктураПараметры, Проводка, флДебет, ИсточникШапка, ИсточникТабЧасть)
	Если флДебет Тогда
		ИмяСчета = "СчетДт";
		Если СтруктураПараметры.ИсточникДанныхДт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	Иначе
		ИмяСчета = "СчетКт";
		Если СтруктураПараметры.ИсточникДанныхКт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	КонецЕсли;
	мСчет = СтруктураПараметры[ИмяСчета];
	Если ТипЗнч(мСчет)=Тип("Строка") Тогда
		Проводка[ИмяСчета] = Источник[мСчет];   //счет получается из источника данных по имени реквизита заданного в параметрах
	Иначе
		Проводка[ИмяСчета] = мСчет; 			//значение счета задано явно в параметрах
	КонецЕсли;
КонецПроцедуры

//Процедура для заполнения аналитики в проводке. 
// Параметры
//  СтруктураПараметры  						– Структура – содержит исходные параметры формирования проводок
//  Проводка  							– запись регистра бухгалтерии – заполняемая проводка
//  флДебет               				– булево – содержит признак какой счет заполнять (дебета или кредита)
//  ИсточникШапка               		– Структура – содержит Структурактуру шапки документа
//  ИсточникТабЧасть					- Строка табличной части - содержит строку табличной части по данным которой заполняется проводка
//  СкладПроводок						- Справочник ссылка Склады - содержит склад которым нужно заполнить проводку
Процедура ЗаполнитьАналитикуПроводки(СтруктураПараметры, Проводка, флДебет, ИсточникШапка, ИсточникТабЧасть, СкладПроводок)
	Если флДебет Тогда
		ИмяСчета = "СчетДт";
		ИмяСубконто = "СубконтоДт";
		Если СтруктураПараметры.ИсточникДанныхДт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	Иначе
		ИмяСчета = "СчетКт";
		ИмяСубконто = "СубконтоКт";
		Если СтруктураПараметры.ИсточникДанныхКт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	КонецЕсли;
	Ном = 1;
	Для каждого элт из СтруктураПараметры[ИмяСубконто] цикл
		ВидСубконто = элт.Ключ;
		Если Найти(ВидСубконто,"Номер")>0 Тогда //в параметрах задан не имя, а номер субконто
			ВидСубконто = Ном;
		КонецЕсли;
		
		Если ТипЗнч(Элт.Значение)=Тип("Строка") Тогда
			Если Элт.Значение = "#Склад#" Тогда 
				ЗначениеСубконто = СкладПроводок; //значение субконто заполняется складом
			Иначе
				ЗначениеСубконто = Источник[элт.Значение]; //значение субконто заполняется значением реквизита источника
			КонецЕсли;
		Иначе
			ЗначениеСубконто = элт.Значение;
		КонецЕсли;
		Ном = Ном + 1;
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ИмяСчета], Проводка[ИмяСубконто], ВидСубконто, ЗначениеСубконто);
	КонецЦикла;
	
КонецПроцедуры

//Процедура для формирования проводок по поступлению ТМЦ. 
//	Создает проводки по указанной табличной части по переданному виду учета
// Параметры
//  Движения               				– Структура – содержит коллекции движений по проводкам Бух и Нал
//  СтруктураПараметрыПроводок               – Структура – содержит исходные параметры для формирования проводок
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  ИмяТЧ  								– Строка 	– имя табличной части для которой формируются проводки
//  ТаблицаТЧ  							– ТаблицаЗначений 	– данные табличной части для которой формируются проводки 
//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения
Процедура СформироватьПроводкиПоТабличнойЧастиПоВидуУчета(Движения, СтруктураПараметрыПроводок, СтруктураШапкиДокумента, ИмяТЧ, ТаблицаТЧ, ВидУчета)
	Перем СтруктураПараметрыПроводокСторно;
	
	Проводки = Движения[?(ВидУчета="БухгалтерскийУчет","Хозрасчетный","Налоговый")];
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") и ВидУчета="НалоговыйУчет" 
		И (НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков) Тогда
		
		Если СтруктураШапкиДокумента.Свойство("СтавкаНалогаНаПрибыль") И
			СтруктураШапкиДокумента.ПоддержкаПБУ18 И
			СтруктураШапкиДокумента.Дата >= '20060101' И
			СтруктураШапкиДокумента.Дата < '20100101' Тогда
			КоэффициентСуммыНУ = СтруктураШапкиДокумента.СтавкаНалогаНаПрибыль;
		Иначе 
			КоэффициентСуммыНУ = 1;
		КонецЕсли;
	КонецЕсли;
	
	ИспользованиеРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	ТЗРНаСчете15 = Ложь;
	Если ИспользованиеРА Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитика)
			ИЛИ УчетнаяПолитика.ВидУчетаТЗР = Перечисления.ВариантыУчетаТЗР.ОтнесениеНаОтдельныйСчет Тогда
			ТЗРНаСчете15 = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	
	ЕстьПолноеСодержание = Не (ТаблицаТЧ.Колонки.найти("Содержание") = Неопределено);
	/// Кунов О.В., 02.12.2014 - 
	ЕстьПодразделениеОрганизации = ТаблицаТЧ.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено;
	///
	
	Для каждого СтрокаТЧ из ТаблицаТЧ цикл
		//1. Проводки по поступлению ТМЦ
		Если СтруктураПараметрыПроводок.Свойство("ПриходТМЦ") Тогда
			
			Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
				Если ВидУчета = "НалоговыйУчет" И не (ЗначениеЗаполнено(СтрокаТЧ.СчетНУ) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратНУ)) Тогда
					//проводка по НУ не нужна
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
				Если ВидУчета = "БухгалтерскийУчет"
					И СтрокаТЧ.СчетУчетаБУ = СтрокаТЧ.СчетПередачиБУ
					Тогда
					Продолжить;
					
				ИначеЕсли ВидУчета = "НалоговыйУчет"
					И СтрокаТЧ.СчетУчетаНУ = СтрокаТЧ.СчетПередачиНУ
					Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") и ВидУчета="НалоговыйУчет" 
				И СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
				Продолжить;
				
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				И ВидУчета="НалоговыйУчет" 
				И ИспользованиеРА 
				И СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
				И  ИмяТЧ = "Товары" Тогда
				
				//В НУ принятые на комиссию товары не учитываем
				Продолжить;
				
			КонецЕсли;
			
			Проводка = Проводки.Добавить();
			Проводка.Период = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			СтруктураПриходТМЦ = СтруктураПараметрыПроводок.ПриходТМЦ; 
			//определим склад для заполнения проводок
			СкладПроводок = Справочники.Склады.ПустаяСсылка();
			Если ИмяТЧ<>"Услуги" И ИмяТЧ<>"ОбъектыСтроительства" Тогда
				Если СтруктураПриходТМЦ.Свойство("Склад") Тогда
					Если ТипЗнч(СтруктураПриходТМЦ.Склад.ИмяРеквСклад)=Тип("Строка") Тогда
						Если СтруктураПриходТМЦ.Склад.СкладВШапке Тогда
							СкладПроводок = СтруктураШапкиДокумента[СтруктураПриходТМЦ.Склад.ИмяРеквСклад];
						Иначе
							СкладПроводок = СтрокаТЧ[СтруктураПриходТМЦ.Склад.ИмяРеквСклад];
						КонецЕсли;
					Иначе
						СкладПроводок = СтруктураПриходТМЦ.Склад.ИмяРеквСклад;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			//Дебет
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И
				(ИмяТЧ = "Товары") И
				((ВидУчета = "БухгалтерскийУчет" И СтрокаТЧ.СчетУчетаБУ.Забалансовый) ИЛИ
				
				(ВидУчета = "НалоговыйУчет" И (НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ) ИЛИ
				СтрокаТЧ.СчетУчетаНУ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ТоварыПринятыеНаКомиссию)))
				) Тогда
				//счет дебета не заполняется
			ИначеЕсли ТЗРНаСчете15 И ИмяТЧ = "Товары"  
				И ТипДокумента <> Тип("ДокументСсылка.ОприходованиеТоваров") 
				И ТипДокумента <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
				И (ТипДокумента <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				ИЛИ (СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
				И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))Тогда
				//Для вычисления счета учета 15 заполним счет проводки как обычно
				ЗаполнитьСчетПроводки(СтруктураПриходТМЦ, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ);
				Если ВидУчета = "БухгалтерскийУчет" Тогда
					Проводка.СчетДт = УправлениеЗапасамиРасширеннаяАналитика.ОпределитьСубсчетСчета15(Проводка.СчетДт); 
				Иначе
					Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов")
						ИЛИ ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
						//Доп. расходы по налоговому учету включаем в стоимость - не меняем заполненный счет проводки на субсчет счета 15
						ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
					Иначе  
						Проводка.СчетДт = УправлениеЗапасамиРасширеннаяАналитика.ОпределитьСубсчетСчета15(Проводка.СчетДт); 
					КонецЕсли;	
				КонецЕсли;	
			Иначе
				ЗаполнитьСчетПроводки(СтруктураПриходТМЦ, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ);
				ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
			КонецЕсли;
			//Количество Дт
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И ИмяТЧ = "Тара" Тогда
				Проводка.КоличествоДт            = БухгалтерскийУчет.КоличествоВПроводку(Проводка.СчетДт, СтрокаТЧ.КоличествоДок);
			ИначеЕсли ИмяТЧ<>"Услуги" Тогда
				Проводка.КоличествоДт            = БухгалтерскийУчет.КоличествоВПроводку(Проводка.СчетДт, СтрокаТЧ.Количество);
			КонецЕсли;
			
			//Заполнение контрагента если счет учета - забалансовый
			флСчетУчетаЗабалансовый = ложь;
			Если Проводка.СчетДт.Забалансовый Тогда
				Если ВидУчета = "БухгалтерскийУчет"
					И УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда				
					ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ, Справочники.Склады.ПустаяСсылка());//При использовании расширенной аналитики склад на забалансовых счетах не заполняется
				КонецЕсли;	
				
				флСчетУчетаЗабалансовый = истина;
				
				//Для БУ аналитика Контрагенты используется на многих ЗБ-счетах, для НУ - только на 004
				Если ВидУчета = "БухгалтерскийУчет" ИЛИ 
					(ВидУчета = "НалоговыйУчет" 
					И ЗначениеЗаполнено(Проводка.СчетДт) 
					И Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ТоварыПринятыеНаКомиссию) 
					И ИмяТЧ = "Товары")  Тогда
					
					Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
						ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
						ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
						БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
						БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТЧ.Поставщик);
						
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			//Кредит
			
			//Заполнение счета и аналитики кредита
			Если ВидУчета = "БухгалтерскийУчет"
				И ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
				//давальческие материалы - особая логика заполнения счетов в проводке
				//Если счет Дт забалансовый, кор счет тоже должен быть забалансовый
				ЗаполнитьСчетПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ);
				ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
			ИначеЕсли ВидУчета = "БухгалтерскийУчет" И флСчетУчетаЗабалансовый Тогда
				//счет и аналитика кредита не заполняется
			ИначеЕсли ВидУчета = "НалоговыйУчет" И
				ЗначениеЗаполнено(Проводка.СчетДт) И
				Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ТоварыПринятыеНаКомиссию) 
				И ИмяТЧ = "Товары"  Тогда
				// При оприхованиии комиссионного товара в НУ в проводке
				// счет кредита не заполняется
			Иначе
				ЗаполнитьСчетПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ);
				ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
			КонецЕсли;
			
			//Заполнение контрагента в аналитике кредита при возврате товаров на забалансовый счет
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				И ИмяТЧ = "Товары"
				И Проводка.СчетКт.Забалансовый  Тогда
				флСчетУчетаЗабалансовый = истина;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			КонецЕсли;	
			
			//Количество Кт
			Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
				Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И ИмяТЧ = "Товары" Тогда
					Проводка.КоличествоКт = БухгалтерскийУчет.КоличествоВПроводку(Проводка.СчетКт, - СтрокаТЧ.Количество);
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") ИЛИ
					ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
					Проводка.КоличествоКт = БухгалтерскийУчет.КоличествоВПроводку(Проводка.СчетКт, СтрокаТЧ.Количество);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураСуммыВПроводки = РассчитатьСуммыПроводок(СтруктураШапкиДокумента, СтрокаТЧ, ИмяТЧ);
			
			Если ВидУчета = "НалоговыйУчет" И СтруктураСуммыВПроводки.Свойство("СтоимостьНУ") Тогда
				Проводка.Сумма = СтруктураСуммыВПроводки.СтоимостьНУ;
			Иначе	
				Проводка.Сумма = СтруктураСуммыВПроводки.Стоимость;
			КонецЕсли;
			
			Если ВидУчета = "БухгалтерскийУчет" И Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента[СтруктураПриходТМЦ.ВалютаКт];
				Проводка.ВалютнаяСуммаКт = СтруктураСуммыВПроводки.СтоимостьВал;
			КонецЕсли;
			Проводка.Содержание = ?(ЕстьПолноеСодержание И Не СтрокаТЧ.Содержание = Неопределено, СтрокаТЧ.Содержание, СтруктураПриходТМЦ.СодержаниеПроводки); 
			Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;
			
			//частные случаи
			Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
				ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
				ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				//- заполнение аналитики по поступлению услуг
				Если ИмяТЧ = "Услуги" Тогда
					
					Проводка.Содержание = СтрокаТЧ.Содержание;   					
					ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(Проводка.СчетДт,?(ВидУчета = "НалоговыйУчет","Налоговый","Хозрасчетный"));
					Если ПроизводственныеРасходы Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаТЧ.ПодразделениеОрганизации);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
					Иначе
						Если ВидУчета = "БухгалтерскийУчет" Тогда
							ИмяКолонкиСубконто = "Субконто";
						Иначе
							ИмяКолонкиСубконто = "СубконтоНУ";
						КонецЕсли;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ[ИмяКолонкиСубконто+"1"]);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ[ИмяКолонкиСубконто+"2"]);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ[ИмяКолонкиСубконто+"3"]); // Шевченков, исходная строка, просто закомментировал
						//// <- Шевченков
						//Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.02.3") Тогда
						//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ПРГ_Претензия);
						//Иначе
						//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ[ИмяКолонкиСубконто+"3"]);
						//КонецЕсли;						
						//// ->
					КонецЕсли;
				КонецЕсли;
				
				Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе
					И ИспользованиеРА	Тогда
					//При использовании РА проводка по счету 004.1 делается по пустому складу
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Справочники.Склады.ПустаяСсылка());
				КонецЕсли;	
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
				Если ВидУчета = "БухгалтерскийУчет" Тогда
					УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(Проводка, СтрокаТЧ, СтруктураШапкиДокумента, "Хозрасчетный", "Дт");
					ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СтатьяЗатрат, "Хозрасчетный");
				Иначе
					УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(Проводка, СтрокаТЧ, СтруктураШапкиДокумента, "Налоговый", "Дт");
					ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТЧ.СчетЗатратНУ, СтрокаТЧ.СтатьяЗатрат, "Налоговый");
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы
					И ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
					
					Проводка.Сумма  = - Проводка.Сумма;
					Проводка.КоличествоКт = - Проводка.КоличествоКт;
				Иначе
					//дебет и кредит меняются местами
					масСубконто = новый Соответствие;
					Для каждого элт из Проводка.СубконтоДт цикл
						масСубконто.Вставить(элт.Ключ, элт.Значение);
					КонецЦикла;
					
					СтруктураДебет = новый Структура("Счет, Субконто, Количество", Проводка.СчетДт, масСубконто, Проводка.КоличествоДт);
					Проводка.СчетДт = Проводка.СчетКт;
					Проводка.КоличествоДт = Проводка.КоличествоКт;
					Проводка.СубконтоДт.Очистить();
					Для каждого элт из Проводка.СубконтоКт цикл
						Проводка.СубконтоДт.Вставить(элт.Ключ, Элт.Значение);
					КонецЦикла;
					
					Проводка.СчетКт = СтруктураДебет.Счет;
					Проводка.КоличествоКт = СтруктураДебет.Количество;
					Проводка.СубконтоКт.Очистить();
					Для каждого элт из СтруктураДебет.Субконто цикл
						Проводка.СубконтоКт.Вставить(элт.Ключ, Элт.Значение);
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				Проводка.КоличествоДт = 0;
				Если ВидУчета = "НалоговыйУчет" Тогда
					БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",    СтрокаТЧ.ПодразделениеОрганизации);
					Если ТипЗнч(СтрокаТЧ.СтатьяЗатратНУ) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",     СтрокаТЧ.СтатьяЗатратНУ);
					КонецЕсли;
					
					Если  ТипЗнч(СтрокаТЧ.СтатьяЗатратНУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
						БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы",     СтрокаТЧ.СтатьяЗатратНУ);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") И ВидУчета = "НалоговыйУчет" И (НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков) Тогда
				Проводка.Сумма = СтруктураСуммыВПроводки.Стоимость * КоэффициентСуммыНУ;
			КонецЕсли;
			Если ВидУчета = "НалоговыйУчет" Тогда
				НалоговыйУчет.ВидУчетаПоПБУ18(Проводка,,СтруктураШапкиДокумента.ПоддержкаПБУ18);
			КонецЕсли;
		КонецЕсли;
		
		//1.1 Формирование проводки по переносу ПР для документа ПоступлениеДопРасходов со счета затрат на счет учета ТМЦ
		Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
			И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата
			И ВидУчета = "НалоговыйУчет"	
			И ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов")
			И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			
			СчетУчетаНУСоответствующийБУ =  РасширеннаяАналитикаУчета.ПолучитьСчетУчетаНУ(СтрокаТЧ.СчетУчетаБУ);
			
			Если СчетУчетаНУСоответствующийБУ.Родитель <> СтрокаТЧ.СчетУчетаНУ.Родитель Тогда
				
				Если Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР	Тогда
					
					СтараяПроводка = Проводка;
					
					Проводка = Проводки.Добавить();
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					
					СчетУчетаНУСоответствующийБУ =  РасширеннаяАналитикаУчета.ПолучитьСчетУчетаНУ(СтрокаТЧ.СчетУчетаБУ);
					
					Проводка.СчетДт = СчетУчетаНУСоответствующийБУ;
					Проводка.СчетКт = СтараяПроводка.СчетДт;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",        СтрокаТЧ.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",        СтрокаТЧ.Склад);
					
					Для Каждого ТекущийВидСубконто Из СтараяПроводка.СчетДт.ВидыСубконто Цикл
						Проводка.СубконтоКт.Вставить(ТекущийВидСубконто.ВидСубконто, СтараяПроводка.СубконтоДт[ТекущийВидСубконто.ВидСубконто])
					КонецЦикла;	
					
					Проводка.Сумма = СтараяПроводка.Сумма;
					Проводка.Содержание = ?(ЕстьПолноеСодержание И Не СтрокаТЧ.Содержание = Неопределено, СтрокаТЧ.Содержание, СтруктураПриходТМЦ.СодержаниеПроводки); 
					Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;
				ИначеЕсли Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда	
					//Проводки по ВР
					ВидУчетаВПроводку = Перечисления.ВидыУчетаПоПБУ18.ВР;
					ЗаполнитьПроводкиПБУ1802(СтруктураШапкиДокумента,ТаблицаТЧ,СтрокаТЧ,СчетУчетаНУСоответствующийБУ,ВидУчетаВПроводку,Проводка.Сумма,Проводки,Истина);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		//2. Выделение НДС !!!!!
		Если СтруктураПараметрыПроводок.Свойство("ВыделениеНДС") И СтруктураСуммыВПроводки.НДС > 0 И (НЕ флСчетУчетаЗабалансовый) Тогда
			Проводка = Проводки.Добавить();
			Проводка.Период = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			СтруктураВыделениеНДС = СтруктураПараметрыПроводок.ВыделениеНДС;
			//счет учета НДС всегда в таб части, а аналитика м.б. в шапке. Поэтому для заполнения счета в оба параметра передадим ТЧ
			ЗаполнитьСчетПроводки(СтруктураВыделениеНДС, Проводка, истина, СтрокаТЧ, СтрокаТЧ);
			ЗаполнитьАналитикуПроводки(СтруктураВыделениеНДС, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
			
			ЗаполнитьСчетПроводки(СтруктураВыделениеНДС, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ);
			ЗаполнитьАналитикуПроводки(СтруктураВыделениеНДС, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
			
			Проводка.Сумма = СтруктураСуммыВПроводки.НДС;
			Если ВидУчета = "БухгалтерскийУчет" И Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента[СтруктураВыделениеНДС.ВалютаКт];
				Проводка.ВалютнаяСуммаКт = СтруктураСуммыВПроводки.НДСВал;
			КонецЕсли;
			Проводка.Содержание = ?(ЕстьПолноеСодержание И Не СтрокаТЧ.Содержание = Неопределено, СтрокаТЧ.Содержание, СтруктураПриходТМЦ.СодержаниеПроводки); 
			Проводка.НомерЖурнала = СтруктураВыделениеНДС.НомерЖурнала;
			
			//БП12 Бирюков 270 НК
			Если СтруктураВыделениеНДС.ЕстьНК_270 Тогда 
				Если СтруктураШапкиДокумента.Свойство("СУчетом270НК") Тогда
					ЕстьНК_270 = СтруктураШапкиДокумента.СУчетом270НК;
				Иначе
					Если ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
						Если ИмяТЧ = "Услуги" Тогда
							ИмяТабЧасти = "Прочее";
						ИначеЕсли ИмяТЧ = "Тара" Тогда
							ИмяТабЧасти = "ВозвратнаяТара";
						Иначе
							ИмяТабЧасти = ИмяТЧ;
						КонецЕсли;   
					Иначе
						ИмяТабЧасти = ИмяТЧ;
					КонецЕсли;   
					ТабЧасть = СтруктураШапкиДокумента.Ссылка[ИмяТабЧасти];
					СтрокаТабЧасти = ТабЧасть.Получить(СтрокаТЧ.НомерСтроки-1);
					ЕстьНК_270 = СтрокаТабЧасти.СУчетом270НК;
				КонецЕсли;
				
				Если ЕстьНК_270 Тогда 
					Проводка = Проводки.Добавить();
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					
					СтруктураНДС = Новый Структура;
					СтруктураНДС.Вставить("СодержаниеПроводки", "Списание НДС");
					//СтруктураНДС.Вставить("ИсточникДанныхДТ", СтруктураВыделениеНДС.ИсточникДанныхДТ);
					//СтруктураНДС.Вставить("ИсточникДанныхКТ", СтруктураВыделениеНДС.ИсточникДанныхКТ);
					СтруктураНДС.Вставить("ИсточникДанныхДТ", "Ш");
					СтруктураНДС.Вставить("ИсточникДанныхКТ", СтруктураВыделениеНДС.ИсточникДанныхДТ);
					СтруктураНДС.Вставить("СчетДт", ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02.1"));
					СтруктураНДС.Вставить("СчетКт", "СчетУчетаНДС");
					СтруктураНДС.Вставить("ВалютаДт", СтруктураВыделениеНДС.ВалютаКт);
					СтруктураНДС.Вставить("НомерЖурнала", СтруктураВыделениеНДС.НомерЖурнала);
					СтруктураНДС.Вставить("СубконтоДт", Новый Структура);
					СтруктураНДС.Вставить("СубконтоКт", Новый Структура);
					
					АналитикаКт = Новый Структура;
					Для Каждого Субконто ИЗ СтруктураВыделениеНДС.СубконтоДт Цикл
						АналитикаКт.Вставить(Субконто.Ключ,Субконто.Значение);
					КонецЦикла;
					СтруктураНДС.СубконтоКт.Очистить();
					СтруктураНДС.Вставить("СубконтоКт", АналитикаКт);
					СтруктураНДС.СубконтоДт.Вставить("ПрочиеДоходыИРасходы",Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("Списание НДС на расходы",Истина));
					
					/// Кунов О.В., 02.12.2014 - 
					ПодразделениеОрганизации = СтруктураШапкиДокумента.Ссылка.ПодразделениеОрганизации;
					Если Не ЗначениеЗаполнено(ПодразделениеОрганизации) И ЕстьПодразделениеОрганизации Тогда
						ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
					КонецЕсли;
					СтруктураНДС.СубконтоДт.Вставить("ПодразделениеОрганизации", ПодразделениеОрганизации);
					///
					
					флДебет  = Истина;
					флКредит = Ложь;
					//счет учета НДС всегда в таб части, а аналитика м.б. в шапке. Поэтому для заполнения счета в оба параметра передадим ТЧ
					ЗаполнитьСчетПроводки(СтруктураНДС, Проводка, флДебет, СтрокаТЧ, СтрокаТЧ);
					ЗаполнитьАналитикуПроводки(СтруктураНДС, Проводка, флДебет, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
					
					ЗаполнитьСчетПроводки(СтруктураНДС, Проводка, флКредит, СтрокаТЧ, СтрокаТЧ);
					Если ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
						ЗаполнитьАналитикуПроводки(СтруктураНДС, Проводка, флКредит, СтрокаТЧ, СтрокаТЧ, СкладПроводок);
					Иначе
						ЗаполнитьАналитикуПроводки(СтруктураНДС, Проводка, флКредит, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
					КонецЕсли;
					
					Проводка.Сумма = СтруктураСуммыВПроводки.НДС;
					Если ВидУчета = "БухгалтерскийУчет" И Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента[СтруктураНДС.ВалютаКт];
						Проводка.ВалютнаяСуммаКт = СтруктураСуммыВПроводки.НДСВал;
					КонецЕсли;
					Проводка.Содержание 	= СтруктураНДС.СодержаниеПроводки; 
					Проводка.НомерЖурнала 	= СтруктураНДС.НомерЖурнала;
				КонецЕсли;
			КонецЕсли;
			//Бирюков КИ 270 НК
		КонецЕсли;
		
		//3. Проводки по налоговому агенту
		Если НЕ СтруктураПараметрыПроводок.Свойство("НДСНалоговыйАгент") Тогда
			Продолжить;
		КонецЕсли;
		Проводка = Проводки.Добавить();
		Проводка.Период = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		СтруктураНДСНалоговыйАгент = СтруктураПараметрыПроводок.НДСНалоговыйАгент; 
		ЗаполнитьСчетПроводки(СтруктураНДСНалоговыйАгент, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ);
		ЗаполнитьАналитикуПроводки(СтруктураНДСНалоговыйАгент, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
		
		ЗаполнитьСчетПроводки(СтруктураНДСНалоговыйАгент, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ);
		ЗаполнитьАналитикуПроводки(СтруктураНДСНалоговыйАгент, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
		
		Проводка.Сумма = СтруктураСуммыВПроводки.НДС;
		Если ВидУчета = "БухгалтерскийУчет" И Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента[СтруктураНДСНалоговыйАгент.ВалютаДт];
			Проводка.ВалютнаяСуммаДт = СтруктураСуммыВПроводки.НДСВал;
		КонецЕсли;
		Проводка.Содержание = СтруктураНДСНалоговыйАгент.СодержаниеПроводки;
		Проводка.НомерЖурнала = СтруктураНДСНалоговыйАгент.НомерЖурнала;
		
	Конеццикла;
	
КонецПроцедуры

//Функция для получения структуры исходных параметров для формирования проводок. 
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  ИмяТабЧасти               			– Строка – содержит имя табличной части по которой формируется проводка
//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения
// Возвращаемое значение:
//  Структура, содержащая исходные параметры формирования проводок. Элементы структуры: 
//		ПриходТМЦ 				- Структура параметров для формирования проводок по поступлению ТМЦ
//			Элементы структуры:
//				СодержаниеПроводки, НомерЖурнала - строки для заполнения соответствующих реквизитов проводок
//				СчетДт - строка, имя реквизита для заполнения счета дебета
//				Склад - структура, содержит данные для извлечения склада: СкладВШапке (булево), ИмяРеквСклад (строка)
//				СчетКт - строка, имя реквизита для заполнения счета дебета. МОжет также содержать явную ссылку на счет
//				ВалютаКт - строка, имя реквизита для заполнения валюты
//				СубконтоДт - структура, содержит данные для заполнения аналитики дебета: 
//						Ключ - строка, может содержать 
//							1) вид субконто (напр. "Номенклатура") 
//							2) номер субконто (тогда будет "Номер1" или "Номер2")
//						Значение может содержать 
//							1) строка: имя реквизита - источник данных для заполнения субконто 
//							2) ключевая строка "#Склад" - признак того что в это субконто нужно заполнить склад.
//								Склад в этом случае определяется так, как описано в элементе структуры Склад
//							3) конкретное значение для заполнения аналитики
//				СубконтоКт - структура, содержит данные для заполнения аналитики кредита. Содержимое аналогично СубкотноДт 
//				ИсточникДанныхДт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики дебета:
//					"Ш" - из шапки (по структуре шапки документа), "ТЧ" - из табличной части (по данным таблицы документа)
//				ИсточникДанныхКт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики кредита:
//					"Ш" - из шапки (по структуре шапки документа), "ТЧ" - из табличной части (по данным таблицы документа)
//
//      ВыделениеНДС 			- Структура параметров для формирования проводок по выделению НДС
//			Элементы структуры:
//				СодержаниеПроводки, НомерЖурнала - строки для заполнения соответствующих реквизитов проводок
//				СчетДт - строка, имя реквизита для заполнения счета дебета
//				СчетКт - строка, имя реквизита для заполнения счета дебета. МОжет также содержать явную ссылку на счет
//				ВалютаКт - строка, имя реквизита для заполнения валюты
//				СубконтоДт - структура, содержит данные для заполнения аналитики дебета (подробнее см. выше) 
//				СубконтоКт - структура, содержит данные для заполнения аналитики кредита (подробнее см. выше) 
//				ИсточникДанныхДт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики дебета (подробнее см. выше)
//				ИсточникДанныхКт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики кредита (подробнее см. выше)
//
//		НДСНалоговыйАгент  		- Структура параметров для формирования проводок по НДС налогового агента
//			Элементы структуры:  аналогично элементу структуры ВыделениеНДС
Функция ПолучитьПараметрыПроводок(СтруктураШапкиДокумента,ИмяТабЧасти, ВидУчета)
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	СуффиксУчета = ?(ВидУчета="БухгалтерскийУчет","БУ","НУ");
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтруктураПараметрыПроводок = новый Структура;
	
	Если ВидУчета = "НалоговыйУчет" И ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
			Тогда
			//не нужно формировать проводки - возвращаем пустую структуру
			Возврат СтруктураПараметрыПроводок;
		КонецЕсли;	
	КонецЕсли;
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ИмяТабЧасти = "Услуги" И НЕ
			(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
			или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
			или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) Тогда
			//не нужно формировать проводки - возвращаем пустую структуру
			Возврат СтруктураПараметрыПроводок;
			
		КонецЕсли;
	КонецЕсли;
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") И 
		ИмяТабЧасти = "Услуги" И СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
		//не нужно формировать проводки - возвращаем пустую структуру
		Возврат СтруктураПараметрыПроводок;
	КонецЕсли;
	
	Если  ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
		Если ИмяТабЧасти = "Товары" И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			//не нужно формировать проводки - возвращаем пустую структуру
			Возврат СтруктураПараметрыПроводок;
		КонецЕсли;
	КонецЕсли;
	
	//параметры проводок по приходу ТМЦ
	СтруктураПриходТМЦ = новый Структура;
	СтруктураАналитикаКт = новый Структура;
	Если ИмяТабЧасти = "Оборудование" Тогда
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки",?(ВидУчета = "НалоговыйУчет","Оприходованы ОС","Затраты на приобретение ОС"));
		СтруктураПриходТМЦ.Вставить("НомерЖурнала","ОС");
	ИначеЕсли ИмяТабЧасти = "ОбъектыСтроительства" Тогда
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки",?(ВидУчета = "НалоговыйУчет","Оприходованы ТМЦ","Затраты на приобретение объектов строительства"));
		СтруктураПриходТМЦ.Вставить("НомерЖурнала","");
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Прочие поступления");
		СтруктураПриходТМЦ.Вставить("НомерЖурнала","");
	Иначе	
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Оприходованы ТМЦ");  
		СтруктураПриходТМЦ.Вставить("НомерЖурнала","");
	КонецЕсли;
	СтруктураПриходТМЦ.Вставить("СчетДт","СчетУчета"+СуффиксУчета);
	СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",истина,"Склад"));
	
	СтруктураАналитикаДт = новый Структура;
	Если ИмяТабЧасти = "ОбъектыСтроительства" Тогда
		СтруктураАналитикаДт.Вставить("ОбъектыСтроительства","ОбъектСтроительства");
		СтруктураАналитикаДт.Вставить("СтатьиЗатрат","СтатьяЗатрат");
		СтруктураАналитикаДт.Вставить("СпособыСтроительства","СпособСтроительства");
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		СтруктураПриходТМЦ.Вставить("СчетДт","СчетЗатрат"+?(ВидУчета="БухгалтерскийУчет","","НУ"));
		//субконто зависит от статьи затрат в ТЧ, поэтому параметры здесь не заполняем
		
		/////Вадим 10.01.2014 16:18:51  бп 9
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
		//начало изменений не должно быть прямой проводки Дт 94 Кт 10.11
		//Если СтруктураШапкиДокумента.видОперации=Перечисления.ПРГ_ВидыОперацийВозвратМатериаловИзЭксплуатации.ЗаСчетВиновногоЛица Тогда //blik  310314 н
		//	СтруктураАналитикаДт.Вставить("РаботникиОрганизации","РаботникиОрганизации");
		//	СтруктураАналитикаДт.Вставить("ПРГ_ВидыТМЦ","ПРГ_ВидыТМЦ");
		//Иначе        //blik  310314 к
		//	СтруктураАналитикаДт.Вставить("Номенклатура","НовыйМатериал");
		//	СтруктураАналитикаДт.Вставить("Склады","#Склад#");
		//КонецЕсли;  //blik  310314 
		СтруктураАналитикаДт.Вставить("Номенклатура","НовыйМатериал");
		СтруктураАналитикаДт.Вставить("Склады","#Склад#");
		//конец изменений  
		////ВадимКонец
	Иначе		
		СтруктураАналитикаДт.Вставить("Номенклатура","Номенклатура");
		СтруктураАналитикаДт.Вставить("Склады","#Склад#");
	КонецЕсли;	
	ИсточникДанныхКредит = "Ш";
	ИсточникДанныхДебет = "ТЧ";
	
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		
		Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,?(СтруктураШапкиДокумента.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад,"Склад","ПриходныйОрдерСклад")));
		КонецЕсли;
		
		Если ВидУчета="БухгалтерскийУчет" Тогда
			Если ИмяТабЧасти = "Тара"	Тогда
				СтруктураПриходТМЦ.Вставить("СчетКт","СчетУчетаРасчетовПоТаре");
			Иначе
				СтруктураПриходТМЦ.Вставить("СчетКт","СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
			
			СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
			СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
			
			// <- Шевченков
			Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.02.3") Тогда
				СтруктураАналитикаКт.Вставить("ПРГ_Претензии","ПРГ_Претензия");
			КонецЕсли;
			// ->
			
			СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаВзаиморасчетов");
			
		Иначе
			СтруктураПриходТМЦ.Вставить("СчетКт",ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
			СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
			СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
			СтруктураАналитикаКт.Вставить("УсловияПоступленияИВыбытия",Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			
		КонецЕсли;
		
		//m.ionov@a-prof.ru 20.02.2014
		Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтруктураШапкиДокумента.УЗ_НесколькоСФ Тогда
			ИсточникДанныхКредит = "ТЧ";
		КонецЕсли;
		//----m.ionov@a-prof.ru---
	ИначеЕсли  ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИсточникДанныхКредит = "ТЧ";
		
		СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,"Склад"));
		СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаДокумента");
		
		Если ИмяТабЧасти = "Товары" Тогда
			СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Возврат товаров от покупателя");
			СтруктураПриходТМЦ.Вставить("СчетДт", "СчетРасходов"+СуффиксУчета);
			СтруктураАналитикаДт = новый Структура("Номер1","Субконто"+СуффиксУчета);
			
			СтруктураПриходТМЦ.Вставить("СчетКт", "СчетУчета"+СуффиксУчета);
			СтруктураАналитикаКт.Вставить("Номенклатура","Номенклатура");
			СтруктураАналитикаКт.Вставить("Склады","#Склад#");
		ИначеЕсли ИмяТабЧасти = "Тара" Тогда
			ИсточникДанныхКредит = "Ш";
			СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Возврат тары от покупателя");
			Если ВидУчета="БухгалтерскийУчет" Тогда
				СтруктураПриходТМЦ.Вставить("СчетКт","СчетУчетаРасчетовПоТаре");
				СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
				СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
				
			Иначе
				СтруктураПриходТМЦ.Вставить("СчетКт",ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
				СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
				СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
				СтруктураАналитикаКт.Вставить("УсловияПоступленияИВыбытия",Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли  ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаДокумента");
		
		Если ИмяТабЧасти = "Товары" ИЛИ ИмяТабЧасти = "Тара" Тогда
			СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,?(СтруктураШапкиДокумента.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад,"СкладПроводок","ПриходныйОрдерСклад")));
		КонецЕсли;
		Если ВидУчета="БухгалтерскийУчет" Тогда
			Если ИмяТабЧасти = "Товары" или ИмяТабЧасти = "Услуги" Тогда
				СтруктураПриходТМЦ.Вставить("СчетКт", ?(СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета,ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами,ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал));
				СтруктураАналитикаКт.Вставить("РаботникиОрганизации","ФизЛицо");
			ИначеЕсли ИмяТабЧасти = "Тара" Тогда
				СтруктураПриходТМЦ.Вставить("СчетКт", "СчетУчетаТары");
				СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
				СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
				ИсточникДанныхКредит = "ТЧ";
			КонецЕсли;
		Иначе
			СтруктураПриходТМЦ.Вставить("СчетКт", ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
			СтруктураАналитикаКт.Вставить("УсловияПоступленияИВыбытия",Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			СтруктураАналитикаКт.Вставить("Контрагенты","Поставщик");
			Если ИмяТабЧасти = "Тара" Тогда
				СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
			КонецЕсли;
			ИсточникДанныхКредит = "ТЧ";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Оприходованы материалы");
		СтруктураПриходТМЦ.Вставить("СчетДт","СчетЗатрат"+?(ВидУчета="БухгалтерскийУчет","","НУ"));
		СтруктураПриходТМЦ.Вставить("СчетКт","Счет"+?(ВидУчета="БухгалтерскийУчет","","НУ"));
		СтруктураАналитикаКт.Вставить("Номенклатура","Номенклатура");
		СтруктураАналитикаКт.Вставить("Склады","#Склад#");
		Если ВидУчета="БухгалтерскийУчет" Тогда
			СтруктураАналитикаДт.Вставить("Контрагенты","Контрагент");
			СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
		КонецЕсли;
		ИсточникДанныхКредит = "ТЧ";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
		СтруктураПриходТМЦ.Вставить("СчетДт","СчетДт"+?(ВидУчета="БухгалтерскийУчет","","НУ"));
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Возврат материалов из эксплуатации");
		СтруктураПриходТМЦ.Вставить("СчетКт", "СчетПередачи"+СуффиксУчета);
		СтруктураАналитикаКт.Вставить("Номенклатура","Номенклатура");
		///вадим, требуется для отражения склада по кредиту в документе. спорный вопрос. надо обдумать, но при передаче в 
		///эксплуатацию склад указывается. по логике и в возрате должен.
		СтруктураАналитикаКт.Вставить("Склады","#Склад#");
		///ВадимКонец
		ИсточникДанныхКредит = "ТЧ";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Доп. расходы при поступлении товаров");
		СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,"Склад"));
		
		Если ВидУчета="БухгалтерскийУчет" Тогда
			СтруктураПриходТМЦ.Вставить("СчетКт","СчетУчетаРасчетовСКонтрагентом");
			СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
			СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
		Иначе
			СтруктураПриходТМЦ.Вставить("СчетКт",ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
			СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
			СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
			СтруктураАналитикаКт.Вставить("УсловияПоступленияИВыбытия",Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
		КонецЕсли;
		СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаВзаиморасчетов");
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		СуффиксСубк = ?(ВидУчета="БухгалтерскийУчет","","НУ");
		СтруктураПриходТМЦ.Вставить("СчетКт","КоррСчет"+СуффиксСубк);
		СтруктураАналитикаКт.Вставить("Номер1","Субконто"+СуффиксСубк+"1");
		СтруктураАналитикаКт.Вставить("Номер2","Субконто"+СуффиксСубк+"2");
		СтруктураАналитикаКт.Вставить("Номер3","Субконто"+СуффиксСубк+"3");
	КонецЕсли;
	СтруктураПриходТМЦ.Вставить("СубконтоДт",СтруктураАналитикаДт);
	СтруктураПриходТМЦ.Вставить("СубконтоКт",СтруктураАналитикаКт);
	СтруктураПриходТМЦ.Вставить("ИсточникДанныхДт",ИсточникДанныхДебет);
	СтруктураПриходТМЦ.Вставить("ИсточникДанныхКт",ИсточникДанныхКредит);
	
	СтруктураПараметрыПроводок.Вставить("ПриходТМЦ", СтруктураПриходТМЦ);
	
	Если ВидУчета="БухгалтерскийУчет" Тогда
		
		//параметры проводок по выделению НДС
		Если (ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")) И
			ИмяТабЧасти <> "Тара" Тогда
			
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС Тогда
				
				СтруктураНДС = новый Структура;
				СтруктураАналитикаДт = новый Структура;
				СтруктураАналитикаКт = новый Структура;
				
				СтруктураНДС.Вставить("СчетДт","СчетУчетаНДС");
				СтруктураНДС.Вставить("СодержаниеПроводки","Выделен НДС");  
				
				Если ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					СтруктураАналитикаДт.Вставить("Контрагенты","Поставщик");
					СтруктураАналитикаДт.Вставить("СФПолученные","СчетФактура");
					СтруктураНДС.Вставить("ИсточникДанныхДт","ТЧ");
					//m.ionov@a-prof.ru 20.02.2014
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтруктураШапкиДокумента.УЗ_НесколькоСФ Тогда
					СтруктураАналитикаДт.Вставить("Контрагенты","Контрагент");
					СтруктураАналитикаДт.Вставить("Договоры","ДоговорКонтрагента");
					СтруктураАналитикаДт.Вставить("СФПолученные","СчетФактура");
					СтруктураНДС.Вставить("ИсточникДанныхДт","ТЧ");
					//----m.ionov@a-prof.ru---
				Иначе
					СтруктураАналитикаДт.Вставить("Контрагенты","Контрагент");
					СтруктураАналитикаДт.Вставить("СФПолученные","Ссылка");
					СтруктураНДС.Вставить("ИсточникДанныхДт","Ш");
				КонецЕсли;	
				СтруктураНДС.Вставить("СубконтоДт",СтруктураАналитикаДт);
				
				Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") И СтруктураШапкиДокумента.УчетАгентскогоНДС 
					И СтруктураШапкиДокумента.Свойство("НалоговыйАгентПоОплате") И СтруктураШапкиДокумента.НалоговыйАгентПоОплате 
					И УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтруктураШапкиДокумента.ВидАгентскогоДоговора) Тогда
					СтруктураНДС.Вставить("СчетКт",ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
					СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
					СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
					СтруктураНДС.Вставить("СубконтоКт",СтруктураАналитикаКт);
					СтруктураНДС.Вставить("НомерЖурнала","");
					СтруктураНДС.Вставить("ИсточникДанныхКт","Ш");
					//m.ionov@a-prof.ru 20.02.2014
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтруктураШапкиДокумента.УЗ_НесколькоСФ Тогда
					СтруктураНДС.Вставить("СчетКт",СтруктураПриходТМЦ.СчетКт);
					СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
					СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
					СтруктураАналитикаКт.Вставить("СФПолученные","СчетФактура");
					СтруктураНДС.Вставить("СубконтоКт",СтруктураАналитикаКт);
					СтруктураНДС.Вставить("ВалютаКт",СтруктураПриходТМЦ.ВалютаКт);
					СтруктураНДС.Вставить("НомерЖурнала","");
					
					СтруктураНДС.Вставить("ИсточникДанныхКт","ТЧ");
					//----m.ionov@a-prof.ru---
				Иначе
					СтруктураНДС.Вставить("СчетКт",СтруктураПриходТМЦ.СчетКт);
					СтруктураНДС.Вставить("СубконтоКт",СтруктураПриходТМЦ.СубконтоКт);
					СтруктураНДС.Вставить("ВалютаКт",СтруктураПриходТМЦ.ВалютаКт);
					СтруктураНДС.Вставить("НомерЖурнала","");
					СтруктураНДС.Вставить("ИсточникДанныхКт",СтруктураПриходТМЦ.ИсточникДанныхКт);
				КонецЕсли;
				
				СтруктураПараметрыПроводок.Вставить("ВыделениеНДС", СтруктураНДС);
			КонецЕсли;	
			
			//Параметры проводок по выделению НДС налогового агента
			Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") И СтруктураШапкиДокумента.УчетАгентскогоНДС 
				И ((Не (СтруктураШапкиДокумента.Свойство("НалоговыйАгентПоОплате") И СтруктураШапкиДокумента.НалоговыйАгентПоОплате)
				Или (СтруктураШапкиДокумента.Свойство("ВидАгентскогоДоговора") И Не УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтруктураШапкиДокумента.ВидАгентскогоДоговора)))) Тогда
				
				СтруктураНДСНалоговыйАгент = новый Структура;
				СтруктураНДСНалоговыйАгент.Вставить("СодержаниеПроводки","Начислен НДС в качестве налогового агента");
				СтруктураНДСНалоговыйАгент.Вставить("СчетДт",СтруктураПриходТМЦ.СчетКт);
				СтруктураНДСНалоговыйАгент.Вставить("СубконтоДт",СтруктураПриходТМЦ.СубконтоКт);
				СтруктураНДСНалоговыйАгент.Вставить("ВалютаДт",СтруктураПриходТМЦ.ВалютаКт);
				СтруктураНДСНалоговыйАгент.Вставить("ИсточникДанныхДт",СтруктураПриходТМЦ.ИсточникДанныхКт);
				Если СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					СтруктураНДСНалоговыйАгент.Вставить("СчетКт",ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
					СтруктураАналитикаКт = Новый Структура("Контрагенты, Договоры", "Контрагент", "ДоговорКонтрагента");
					СтруктураНДСНалоговыйАгент.Вставить("СубконтоКт",СтруктураАналитикаКт);
					СтруктураНДСНалоговыйАгент.Вставить("НомерЖурнала","");
					СтруктураНДСНалоговыйАгент.Вставить("ИсточникДанныхКт","Ш");
				Иначе
					СтруктураНДСНалоговыйАгент.Вставить("СчетКт",ПланыСчетов.Хозрасчетный.НДС);
					СтруктураАналитикаКт = новый Структура("ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);
					СтруктураНДСНалоговыйАгент.Вставить("СубконтоКт",СтруктураАналитикаКт);
					СтруктураНДСНалоговыйАгент.Вставить("НомерЖурнала","");
					СтруктураНДСНалоговыйАгент.Вставить("ИсточникДанныхКт","Ш");
				КонецЕсли;
				СтруктураПараметрыПроводок.Вставить("НДСНалоговыйАгент", СтруктураНДСНалоговыйАгент);
			КонецЕсли;		
		КонецЕсли;
		//БП12 Определим есть ли применение 270 НК
		Если НЕ СтруктураНДС = Неопределено Тогда 
			ЕстьНК_270 = СтруктураШапкиДокумента.Свойство("СУчетом270НК");
			Если НЕ ЕстьНК_270 Тогда 
				//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
				//Если ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				//	Если ИмяТабЧасти = "Услуги" Тогда
				//		ИмяТЧ = "Прочее";
				//	ИначеЕсли ИмяТабЧасти = "Тара" Тогда
				//		ИмяТЧ = "ВозвратнаяТара";
				//	Иначе
				//		ИмяТЧ = ИмяТабЧасти;
				//	КонецЕсли;   
				//Иначе
				//	ИмяТЧ = ИмяТабЧасти;
				//КонецЕсли;   
				//ЕстьНК_270 = НЕ СтруктураШапкиДокумента.Ссылка.ПолучитьОбъект().Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("СУчетом270НК") = Неопределено;
				
				Если (ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
					и (ИмяТабЧасти = "Услуги" или ИмяТабЧасти = "Товары" или ИмяТабЧасти = "Прочее")) 
				 или 
				 (ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
					и (ИмяТабЧасти = "Услуги" или ИмяТабЧасти = "Товары")) 				 
				Тогда
					ЕстьНК_270 = Истина;
				Иначе
					ЕстьНК_270 = Ложь;
				КонецЕсли;	
				//конец изменений 
			КонецЕсли;
			
			СтруктураНДС.Вставить("ЕстьНК_270",ЕстьНК_270);
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%
	КонецЕсли;	
	Возврат СтруктураПараметрыПроводок;
КонецФункции

Процедура ВыполнитьОприходованиеПоРегиструБухгалтерииНалоговый(СтруктураШапкиДокумента,ТаблицаПоТоварам)
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
		СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров И
		ЗначениеЗаполнено(СтруктураШапкиДокумента.ИнвентаризацияТоваровНаСкладе) И
		СтруктураШапкиДокумента.Свойство("СтавкаНалогаНаПрибыль") И
		СтруктураШапкиДокумента.ПоддержкаПБУ18 И
		СтруктураШапкиДокумента.Дата >= '20060101' И
		СтруктураШапкиДокумента.Дата < '20100101' Тогда
		КоэффициентСуммыНУ = СтруктураШапкиДокумента.СтавкаНалогаНаПрибыль;
	Иначе 
		КоэффициентСуммыНУ = 1;
	КонецЕсли;
	
	//Проводки по разницам в НУ
	Если не СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;
	Если не (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков ИЛИ КоэффициентСуммыНУ<>1) Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиНУ = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	ПроводкиНУ.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам цикл
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков Тогда
			// временная разница
			Если СтрокаТаблицы.СуммаВР <> 0 Тогда
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаТаблицы.СуммаВР;
				Проводка.Содержание   = "Ввод остатков";
				
				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНУ;
				Проводка.СубконтоДт.Номенклатура = СтрокаТаблицы.Номенклатура;
				Если НЕ (Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады ,"ВидСубконто") = Неопределено) Тогда
					Проводка.СубконтоДт.Склады   = СтруктураШапкиДокумента.Склад;
				КонецЕсли;
				Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
				Проводка.СчетКт = СтруктураШапкиДокумента.КоррСчетНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
			КонецЕсли;
			// постоянная разница
			Если СтрокаТаблицы.СуммаПР <> 0 Тогда
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаТаблицы.СуммаПР;
				Проводка.Содержание   = "Ввод остатков";
				
				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНУ;
				Проводка.СубконтоДт.Номенклатура = СтрокаТаблицы.Номенклатура;
				Если НЕ (Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады ,"ВидСубконто") = Неопределено) Тогда
					Проводка.СубконтоДт.Склады   = СтруктураШапкиДокумента.Склад;
				КонецЕсли;
				Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
				Проводка.СчетКт = СтруктураШапкиДокумента.КоррСчетНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
			КонецЕсли;
		ИначеЕсли КоэффициентСуммыНУ<>1 Тогда     //Если ВводНачальныхОстатков Тогда
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.СуммаРегл * (1 - КоэффициентСуммыНУ);
			Проводка.Содержание = ?(ТаблицаПоТоварам.Колонки.найти("Содержание") = Неопределено, "", СтрокаТаблицы.Содержание); 
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНУ;
			Проводка.СубконтоДт.Номенклатура = СтрокаТаблицы.Номенклатура;
			Если НЕ (Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады ,"ВидСубконто") = Неопределено) Тогда
				Проводка.СубконтоДт.Склады   = СтруктураШапкиДокумента.Склад;
			КонецЕсли;
			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.СчетКт = СтруктураШапкиДокумента.КоррСчетНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
			
		КонецЕсли; //Если ВводНачальныхОстатков Тогда
	КонецЦикла;
	ПроводкиНУ.Записать(ложь);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО НДС

// Отражение включения НДС в стоимость, исключения НДС из стоимости партии товаров по результатам проведения по партионному учету НДС
// Включение - исключение НДС из стоимости отражается в регистре - приемнике
//
Процедура ВключениеИсключениеНДСВСтоимостьПартииТоваров(СтрокаДокумента, СтруктураПараметров, СтруктураШапкиДокумента, ВключитьВСтоимость, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, ОтражатьПоПартиям = Истина) Экспорт
	
	Если Не ОтражатьПоПартиям Тогда
		Возврат;
	КонецЕсли;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Если СтруктураПараметров.Свойство("ТолькоДвиженияНДС") тогда
		// При формировании движений только по НДС данные по партиям БУ/НУ не корректируются
		Возврат;
	ИначеЕсли  СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаБрак
		Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаЗатраты
		Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПартийВПроизводствоОперативно тогда
		
		Если НЕ УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаДокумента.КорСчетБУ, "Хозрасчетный") Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
		КонецЕсли;
		
		Если НЕ УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаДокумента.КорСчетНУ, "Налоговый") Тогда
			ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ПеремещениеМеждуСкладами 
		Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаБрак
		Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаЗатраты
		Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПартийВПроизводствоОперативно
		Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Комплектация
		Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВключениеНДСВСтоимость
		тогда
		
		СтараяСтоимость = СтрокаДокумента.Стоимость;
		СтароеКоличество = СтрокаДокумента.Количество;
		
		СтрокаДокумента.Стоимость = СтрокаДокумента.НДС;
		СтрокаДокумента.Количество = 0;
		СписаноИз = "НаСкладах";
		
		Если ОтражатьВНалоговомУчете Тогда
			Счета003 = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
			Если Счета003 = СтрокаДокумента.СчетУчетаБУ ИЛИ Счета003 = СтрокаДокумента.ПринятыеСчетУчетаБУ Тогда
				ОтражатьВНалоговомУчете = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Если проведение по партиям выполняется только по бухгалтерскому учету - нужно переписать только движения
		// включения НДС в стоимость в налоговом учете
		ТолькоВключениеНДСВСтоимостьНУ = ОтражатьВНалоговомУчете и НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете;
		СтруктураПараметров.Вставить("ТолькоВключениеНДСВСтоимостьНУ", ТолькоВключениеНДСВСтоимостьНУ);
		
		Если СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ПеремещениеМеждуСкладами 
			Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВключениеНДСВСтоимость 
			Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Комплектация тогда
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				ПоступлениеНаСкладБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);
				Движение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух[СтрокаДокумента.НомерКорСтроки -1];
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете тогда
				
				ПоступлениеНаСкладНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);
				ДвижениеНал = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал[СтрокаДокумента.НомерКорСтроки -1];
			КонецЕсли;
			
		ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаБрак тогда
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				СписаниеНаБракБух(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);
				Движение = СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеБух[СтрокаДокумента.НомерКорСтроки-1];
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете тогда
				СписаниеНаБракНал(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);
				ДвижениеНал = СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеНал[СтрокаДокумента.НомерКорСтроки -1];
			КонецЕсли;
			
		ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПартийВПроизводствоОперативно тогда
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				ПоступлениеВПроизводствоБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);
				НачНомер = СтруктураПараметров.НачНомерСтрокиНезавершенноеПроизводствоБух;
				Движение = СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоБух[СтрокаДокумента.НомерКорСтроки -1 - НачНомер];
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете тогда
				НачНомер = СтруктураПараметров.НачНомерСтрокиНезавершенноеПроизводствоНал;
				ПоступлениеВПроизводствоНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);
				ДвижениеНал = СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоНал[СтрокаДокумента.НомерКорСтроки -1 - НачНомер];
			КонецЕсли;
			
		ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаЗатраты тогда
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				СписаниеНаПостоянныеЗатратыБух(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);
				Движение = СтруктураПараметров.ТаблицаДвиженийЗатратыБух[СтрокаДокумента.НомерКорСтроки-1];
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете тогда
				СписаниеНаПостоянныеЗатратыНал(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);
				ДвижениеНал = СтруктураПараметров.ТаблицаДвиженийЗатратыНал[СтрокаДокумента.НомерКорСтроки -1];
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения создаются в налоговом учете при проведении по бухгалтерскому учету и не должны 
		// затираться при проведении по налоговому учету
		// Для этого установим признак "СписаниеПартийНДС"
		Если ОтражатьВНалоговомУчете тогда
			ДвижениеНал.СписаниеПартийНДС = Истина;
		КонецЕсли;
		
		СтрокаДокумента.Стоимость = СтараяСтоимость;
		СтрокаДокумента.Количество = СтароеКоличество;
		
	КонецЕсли;
	
КонецПроцедуры //ВключениеИсключениеНДСВСтоимостьПартииТоваров

////////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ ДОП РАСХОДОВ НА ПРИОБРЕТЕНИЕ

// Упр

// Распределение за период доп расходов на поступление товаров
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки, СтОтборОстатков = Неопределено, Документ=Неопределено, ДатаДокумента=Неопределено) Экспорт
	
	// Остатки нераспределенных доп.расходов
	Если ТипЗнч(СтОтборОстатков) = Тип("Структура") Тогда
		ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки, СтОтборОстатков);
	Иначе
		ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки);
	КонецЕсли;
	
	// Поступление партий
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	СУММА(Парт.Количество) КАК Количество,
	//|	СУММА(Парт.Стоимость) КАК Стоимость,
	|	Парт.Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Парт
	|
	|ГДЕ
	|	Парт.КодОперации В(&СписокКодыОперации) И
	|	Парт.ВидДвижения = &ВидДвижения И
	|	Парт.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Парт.Номенклатура В(&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	Парт.Регистратор");
	
	
	СписокКодыОперации = Новый Массив;
	СписокКодыОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаВосстановления);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонцаОбработки);
	Запрос.УстановитьПараметр("СписокКодыОперации", СписокКодыОперации);
	Запрос.УстановитьПараметр("Номенклатура", ТабОстатков.ВыгрузитьКолонку("Номенклатура"));
	
	ТабПоступлений = Запрос.Выполнить().Выгрузить();
	ТабПоступлений.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаОстатка Из ТабОстатков Цикл
		
		НайдСтроки = ТабПоступлений.НайтиСтроки(Новый Структура(
		"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", 
		СтрокаОстатка.Номенклатура, 
		СтрокаОстатка.ХарактеристикаНоменклатуры,
		СтрокаОстатка.СерияНоменклатуры));
		
		// База распределения - количество
		ВсегоКоличество = 0;
		Для Каждого Строка Из НайдСтроки Цикл
			ВсегоКоличество = ВсегоКоличество + Строка.Количество;
		КонецЦикла;
		
		СуммаРаспределить  = СтрокаОстатка.Сумма;
		КоличествоосталосьПогасить = ВсегоКоличество;
		
		Для Каждого Строка Из НайдСтроки Цикл
			
			Если НЕ (КоличествоосталосьПогасить > 0) Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = 1;
			Иначе
				КоэффСписания = Строка.Количество/КоличествоосталосьПогасить;
			КонецЕсли;
			
			Строка.Стоимость = СуммаРаспределить * КоэффСписания;
			
			КоличествоосталосьПогасить = КоличествоосталосьПогасить - Строка.Количество;
			
			СуммаРаспределить = СуммаРаспределить - Строка.Стоимость;
		КонецЦикла;
		
	КонецЦикла;
	
	// Запись в регистр
	Если Документ<>Неопределено Тогда
		
		// Партии
		НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");
		
		НаборЗаписей.мПериод = ДатаДокумента;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		
		НаборЗаписей.ВыполнитьПриход();
		
		НаборЗаписей.Записать();
		
		// Доп расходы
		НаборЗаписей = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		// Стоимостью является сумма
		ТабПоступлений.Колонки.Стоимость.Имя = "Сумма";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);
		
		НаборЗаписей.мПериод = ДатаДокумента;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		
		НаборЗаписей.ВыполнитьРасход();
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	
КонецПроцедуры // ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки)

// Функция определяет признак ведения суммового учета по складам на конкретном счете учета.
//
Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт
	
	УчетПоСкладам = Ложь;
	
	СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");
	
	Если СтрокаВидаСубконто <> Неопределено Тогда
		УчетПоСкладам = СтрокаВидаСубконто.Суммовой;
	КонецЕсли;
	
	Возврат УчетПоСкладам;
	
КонецФункции // ВедетсяСуммовойУчетПоСкладам()

// Функция применяется при необходимости получить сведения о параметрах партионного учета.
//
// Параметры:
// нет.
//
// Возвращаемое значение - структура, содержащая константы относящиеся к параметрам партионного учета. 
//
Функция ПолучитьПараметрыПартионногоУчета() Экспорт
	
	СтруктураПараметровПартионногоУчета = Новый Структура();
	СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументов",Константы.СписыватьПартииПриПроведенииДокументов.Получить());
	СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументовБух",Константы.СписыватьПартииПриПроведенииДокументовБух.Получить());
	СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииНДСПриПроведенииДокументов",СтруктураПараметровПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);
	СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументовНал",СтруктураПараметровПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);
	СтруктураПараметровПартионногоУчета.Вставить("СтратегияСписанияПартийТоваровПоСтатусам",Константы.СтратегияСписанияПартийТоваровПоСтатусам.Получить());
	СтруктураПараметровПартионногоУчета.Вставить("ВестиПартионныйУчетПоСкладам",Константы.ВестиПартионныйУчетПоСкладам.Получить());
	СтруктураПараметровПартионногоУчета.Вставить("ВестиПартионныйУчетПоСкладамРегл",Константы.ВестиПартионныйУчетПоСкладамРегл.Получить());
	
	Возврат СтруктураПараметровПартионногоУчета;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ В ПОСЛЕДОВАТЕЛЬНОСТЯХ

Процедура СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации = Неопределено) Экспорт
	Для Каждого ТекущееСтароеСостояние Из ТаблицаСтаройРегистрацииВПоследовательности Цикл
		Если Дата > ТекущееСтароеСостояние.Период  //Дата документа при перепроведении увеличилась
			ИЛИ ТаблицаПоследовательностейДляРегистрации = Неопределено //Отмена проведения документа
			ИЛИ ТаблицаПоследовательностейДляРегистрации.НайтиСтроки(Новый Структура("ИмяПоследовательности, Организация", ТекущееСтароеСостояние.ИмяПоследовательности, ТекущееСтароеСостояние.Организация)).Количество() = 0//Изменились организация или признаки отражения в учете
			Тогда
			//Состояние изменилось, нужно передвинуть границу последовательности на старое состояние
			ОтборГраницы = Новый Структура("Организация, ПроведенВХронологическойПоследовательности",ТекущееСтароеСостояние.Организация, Ложь);
			СтараяГраница = Последовательности[ТекущееСтароеСостояние.ИмяПоследовательности].ПолучитьГраницу(ОтборГраницы);
			Если СтараяГраница.Сравнить(Новый МоментВремени(ТекущееСтароеСостояние.Период, Ссылка)) = 1 Тогда
				Последовательности[ТекущееСтароеСостояние.ИмяПоследовательности].УстановитьГраницу(ТекущееСтароеСостояние.Период,ОтборГраницы);
			КонецЕсли;
		КонецЕсли;
	КонецЦИкла;
КонецПроцедуры	

Процедура ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(Ссылка, Дата, Организация = Неопределено, Упр=Ложь, Бух = Ложь, Нал = Ложь, СпособВеденияПартионногоУчетаПоОрганизации=Неопределено,ТаблицаСтаройРегистрацииВПоследовательности = Неопределено) Экспорт
	
	ТаблицаПоследовательностейДляРегистрации = Новый ТаблицаЗначений();
	ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("ИмяПоследовательности");
	ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("Организация");
	
	
	Если Упр Тогда
		
		Если СпособВеденияПартионногоУчетаПоОрганизации = Неопределено Тогда
			СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, Дата);
		Иначе
			СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = СпособВеденияПартионногоУчетаПоОрганизации;
		КонецЕсли;	
		
		Если СпособВеденияПартионногоУчетаПоОрганизацииДляУУ <> Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
			НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();
			НоваяСтрока.ИмяПоследовательности = "ПартионныйУчет";
			НоваяСтрока.Организация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		КонецЕсли;
	КонецЕсли;	
	
	Если Бух ИЛИ Нал Тогда
		НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();
		НоваяСтрока.ИмяПоследовательности = "ПартионныйУчетБУ";
		НоваяСтрока.Организация = Организация;
	КонецЕсли;	
	
	
	Если ТаблицаСтаройРегистрацииВПоследовательности <> Неопределено
		И ТаблицаСтаройРегистрацииВПоследовательности.Количество() > 0 Тогда
		//Документ перепроводиться и уже был зарегистрирован в последовательности ранее  
		СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации);
	КонецЕсли;
	
	Для Каждого ТекущееСостояние Из ТаблицаПоследовательностейДляРегистрации Цикл
		//В таблице значений может быть только по одной строке на каждую последовательность
		НаборЗаписейПоследовательности = Последовательности[ТекущееСостояние.ИмяПоследовательности].СоздатьНаборЗаписей();
		НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(Ссылка);
		НоваяЗапись = НаборЗаписейПоследовательности.Добавить();
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Организация = ТекущееСостояние.Организация;
		НоваяЗапись.Регистратор = Ссылка;
		НаборЗаписейПоследовательности.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УдалитьРегистрациюДокументаВПоследовательностяхНаСервере(ДокументСсылка, ПроверятьДвижения,ТаблицаСтаройРегистрацииВПоследовательности)Экспорт
	// получение списка последовательностей в которых зарегистрирован документ
	Если ПроверятьДвижения Тогда
		ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументСсылка);
		Для Каждого СтрокаТаблицыРегистрацииВПоследовательности Из ТаблицаРегистраций Цикл
			НаборЗаписейРегистрацииВПоследовательности = Последовательности[СтрокаТаблицыРегистрацииВПоследовательности.Имя].СоздатьНаборЗаписей();  
			НаборЗаписейРегистрацииВПоследовательности.Отбор.Регистратор.Установить(ДокументСсылка);
			Если СтрокаТаблицыРегистрацииВПоследовательности.Имя = "ПартионныйУчет"  
				ИЛИ СтрокаТаблицыРегистрацииВПоследовательности.Имя = "ПартионныйУчетБУ" Тогда
				НаборЗаписейРегистрацииВПоследовательности.Прочитать();
				Для Каждого ЗаписьВПоследовательности Из НаборЗаписейРегистрацииВПоследовательности Цикл
					НоваяЗаписьРегистрации = ТаблицаСтаройРегистрацииВПоследовательности.Добавить();
					НоваяЗаписьРегистрации.ИмяПоследовательности = СтрокаТаблицыРегистрацииВПоследовательности.Имя;
					НоваяЗаписьРегистрации.Организация = ЗаписьВПоследовательности.Организация;
					НоваяЗаписьРегистрации.Период = ЗаписьВПоследовательности.Период;
				КонецЦикла;	
				НаборЗаписейРегистрацииВПоследовательности.Очистить();
			КонецЕсли;	
			НаборЗаписейРегистрацииВПоследовательности.Записать();
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры//УдалитьРегистрациюДокументаВПоследовательностях

Функция ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументСсылка)
	ТекстЗапроса = "";	
	
	КоллекцияПоследовательностей = Метаданные.Последовательности;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Для Каждого Последовательность ИЗ КоллекцияПоследовательностей Цикл
		Если Последовательность.Документы.Содержит(МетаданныеДокумента) Тогда
			// в запросе получаем имена последовательностей, в которых документ зарегистрирован
			ТекстЗапроса = ТекстЗапроса + "
			|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ """ + Последовательность.Имя 
			+  """ КАК Имя ИЗ " + Последовательность.ПолноеИмя()  
			+ " ГДЕ Регистратор = &Регистратор";
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаЗапроса;
	КонецЕсли;	
	
КонецФункции//ОпределитьНаличиеРегистрацииДокументаВПоследовательности

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "ПАРТИИ ТОВАРОВ НА СКЛАДАХ"

// Процедура формирует движения по регистру "Партии товаров на складах".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	КодОперацииПартииТоваров - ПеречислениеСсылка.КодыОперацийПартииТоваров - Код операции
//	Количество - Число - Количество номенклатуры
//	Стоимость - Число - Учетная стоимость выпуска
//	ПостояннаяРазница - Число - Учетная стоимость выпуска в части постоянной разницы
//	ВременнаяРазница - Число - Учетная стоимость выпуска в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейПартииТоваровНаСкладах - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Партии товаров на складах".
//
Процедура СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодОперацииПартииТоваров,
	Количество,
	Стоимость,
	ПостояннаяРазница,
	ВременнаяРазница,
	ВидОтраженияВУчете,
	НаборЗаписейПартииТоваровНаСкладах
	) Экспорт
	
	Если Количество = 0 
		И Стоимость = 0
		И ПостояннаяРазница = 0
		И ВременнаяРазница = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	// Давальческое сырье не отражается в движениях регистра по налоговому учету.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
		И СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку
		Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Партии товаров на складах" должны быть заполнены измерения:
	//	- Номенклатура,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Склад - заполняется, если ведется суммовой учет по складам
	//		склад не заполняется для продукции, выпущенной из давальческого сырья (при указании заказа покупателя: переработка),
	//	- ХарактеристикаНоменклатуры,
	//	- СерияНоменклатуры - заполняется, если ведется партионный учет по сериям,
	//	- ДокументОприходования - заполняется, если не используется способ списания МПЗ "По средней",
	//	- СтатусПартии - заполняется только при отражении документа в управленческом учете,
	//	- Заказ - заполняется, если в заказе покупателя указан договор с установленным флажком "Вести учет товаров по заказам покупателей"
	//		или если указан заказ покупателя: переработка.
	//	- Качество.
	//
	// В движениях должны быть заполнены реквизиты:
	//	- КодОперации - записывается код операции "Выпуск по операции стоимость",
	//	- ДокументДвижения - документ, движения которого корректируются по фактической стоимости.
	
	// Сформируем движение по регистру "Партии товаров на складах".
	НоваяСтрока = НаборЗаписейПартииТоваровНаСкладах.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	Если Не СтрокаВыборки.ВестиПартионныйУчетПоСериям Тогда
		НоваяСтрока.СерияНоменклатуры = Неопределено;
	КонецЕсли;
	
	// Заполнение заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		ОрганизацияУпр = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
		);
		НоваяСтрока.Организация = ОрганизацияУпр;
		
		Если КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру Тогда
			НоваяСтрока.ДокументОприходования = СтрокаВыборки.ПриходныйОрдер;
			
		ИначеЕсли Не СтруктураШапкиДокумента.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
			
		КонецЕсли;
		
		Если КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру Тогда
			НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.ПоОрдеру;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаВыборки.СтатусПартии) Тогда
			НоваяСтрока.СтатусПартии = СтрокаВыборки.СтатусПартии;
			
		Иначе
			НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			
		КонецЕсли;
		
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам
			И (Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваРасч
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваФикс
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад)
			Тогда
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл
			И (Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваРасч
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваФикс
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад)
			Тогда
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
			
			Если Не СтруктураШапкиДокумента.СпособОценкиМПЗБух = Перечисления.СпособыОценки.ПоСредней Тогда
				НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
			КонецЕсли; 
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДтНУ;
				Если Не СтруктураШапкиДокумента.СпособОценкиМПЗБух = Перечисления.СпособыОценки.ПоСредней Тогда
					НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
				КонецЕсли; 
				
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
				Если Не СтруктураШапкиДокумента.СпособОценкиМПЗБух = Перечисления.СпособыОценки.ПоСредней Тогда
					НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
		ИЛИ СтрокаВыборки.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказРезерв;
	Иначе
		НоваяСтрока.Заказ = Неопределено;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = КодОперацииПартииТоваров;
	НоваяСтрока.ДокументДвижения = СтрокаВыборки.ДокументВыпуска;
	НоваяСтрока.СписаниеПартий = Истина;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Стоимость = Стоимость;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
		И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
	КонецЕсли;
	
КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах()


Процедура ПолныйДействие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

// is ЯннуровВФ 20141023
Процедура СформироватьДельтуПоПроводкамМеж(СтруктураПараметров)
	
	лМаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	
	лПроводки = Новый ТаблицаЗначений;
	лПроводки.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	лПроводки.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	лПроводки.Колонки.Добавить("СчетДт", Новый ОписаниеТипов("ПланСчетовСсылка.Международный"));
	Для лНомерСубконто=1 По лМаксКоличествоСубконто Цикл 
		лПроводки.Колонки.Добавить("СубконтоДт"+лНомерСубконто);
	КонецЦикла;
	лПроводки.Колонки.Добавить("ВалютаДт");
	лПроводки.Колонки.Добавить("ВалютнаяСуммаДт", Новый ОписаниеТипов("Число"));
	лПроводки.Колонки.Добавить("КоличествоДт", Новый ОписаниеТипов("Число"));
	лПроводки.Колонки.Добавить("СчетКт", Новый ОписаниеТипов("ПланСчетовСсылка.Международный"));
	Для лНомерСубконто=1 По лМаксКоличествоСубконто Цикл 
		лПроводки.Колонки.Добавить("СубконтоКт"+лНомерСубконто);
	КонецЦикла;
	лПроводки.Колонки.Добавить("ВалютаКт");
	лПроводки.Колонки.Добавить("ВалютнаяСуммаКт", Новый ОписаниеТипов("Число"));
	лПроводки.Колонки.Добавить("КоличествоКт", Новый ОписаниеТипов("Число"));
	
	лИзмерения = "СчетДт,ВалютаДт,СчетКт,ВалютаКт";
	Для лНомерСубконто=1 По лМаксКоличествоСубконто Цикл 
		лИзмерения = лИзмерения + ",СубконтоДт"+лНомерСубконто;
		лИзмерения = лИзмерения + ",СубконтоКт"+лНомерСубконто;
	КонецЦикла;
	лИзмеренияСПериодом = "Период, " + лИзмерения;
	лРесурсы = "Сумма, ВалютнаяСуммаДт, КоличествоДт, ВалютнаяСуммаКт, КоличествоКт";
	
	// Выгрузить в плоскую форму представления
	Для Каждого лПроводка Из СтруктураПараметров.ДвиженияМеждународный Цикл 
		лСтрокаПроводки = лПроводки.Добавить();
		ЗаполнитьЗначенияСвойств(лСтрокаПроводки, лПроводка);
		Для Каждого лВидСубконто Из лПроводка.СчетДт.ВидыСубконто Цикл 
			лСтрокаПроводки["СубконтоДт"+лВидСубконто.НомерСтроки] = лВидСубконто.ВидСубконто.ТипЗначения.ПривестиЗначение(лПроводка.СубконтоДт[лВидСубконто.ВидСубконто]);
		КонецЦикла;
		Для Каждого лВидСубконто Из лПроводка.СчетКт.ВидыСубконто Цикл 
			лСтрокаПроводки["СубконтоКт"+лВидСубконто.НомерСтроки] = лВидСубконто.ВидСубконто.ТипЗначения.ПривестиЗначение(лПроводка.СубконтоКт[лВидСубконто.ВидСубконто]);
		КонецЦикла;
		// Очистка складов
		Для лНомерСубконто=1 По лМаксКоличествоСубконто Цикл 
			Если ТипЗнч(лСтрокаПроводки["СубконтоДт"+лНомерСубконто]) = Тип("СправочникСсылка.Склады") Тогда 
				лСтрокаПроводки["СубконтоДт"+лНомерСубконто] = Справочники.Склады.ПустаяСсылка();;
			КонецЕсли;
			Если ТипЗнч(лСтрокаПроводки["СубконтоКт"+лНомерСубконто]) = Тип("СправочникСсылка.Склады") Тогда 
				лСтрокаПроводки["СубконтоКт"+лНомерСубконто] = Справочники.Склады.ПустаяСсылка();;
			КонецЕсли;
		КонецЦикла;
		// Для валютных счетов установка пустой валюты вместо неопределено 
		Если лСтрокаПроводки.СчетДт.Валютный
		 И лСтрокаПроводки.ВалютаДт = Неопределено Тогда 
			лСтрокаПроводки.ВалютаДт = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		Если лСтрокаПроводки.СчетКт.Валютный
		 И лСтрокаПроводки.ВалютаКт = Неопределено Тогда 
			лСтрокаПроводки.ВалютаКт = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		// Для 91.* очистка подразделения
		Если лСтрокаПроводки.СчетДт = ПланыСчетов.Международный.ПрочиеВнереализационныеДоходыИРасходы
		 Или лСтрокаПроводки.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Международный.ПрочиеВнереализационныеДоходыИРасходы) Тогда 
			лСтрокаПроводки.СубконтоДт2 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		Если лСтрокаПроводки.СчетКт = ПланыСчетов.Международный.ПрочиеВнереализационныеДоходыИРасходы
		 Или лСтрокаПроводки.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Международный.ПрочиеВнереализационныеДоходыИРасходы) Тогда 
			лСтрокаПроводки.СубконтоКт2 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	// Свертка по измерениям
	лПроводки.Свернуть(лИзмеренияСПериодом, лРесурсы);
	
	лСчета = лПроводки.Скопировать(, "СчетДт, СчетКт");
	лСчета.Свернуть("СчетДт, СчетКт");
	
	лНаборЗаписейПроводок = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
	лНаборЗаписейПроводок.Отбор.Регистратор.Установить(СтруктураПараметров.Регистратор); 
	
	// Корректировка проводок кроме корректировки стоимости
	
	лМассивРесурсов = Новый Массив;
	лМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(лРесурсы);
	Для Каждого лЗначение Из лМассив Цикл 
		лМассивРесурсов.Добавить(СокрЛП(лЗначение));
	КонецЦикла;
	
	лЗапрос = Новый Запрос;
	лЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Счета.СчетДт КАК СчетДт,
	|	Счета.СчетКт КАК СчетКт
	|ПОМЕСТИТЬ втСчета
	|ИЗ
	|	&Счета КАК Счета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт,
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МеждународныйДвиженияССубконто.Период,
	|	СУММА(МеждународныйДвиженияССубконто.Сумма) КАК Сумма,
	|	МеждународныйДвиженияССубконто.СчетДт,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютаДт, НЕОПРЕДЕЛЕНО) КАК ВалютаДт,
	|	СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютнаяСуммаДт, 0)) КАК ВалютнаяСуммаДт,
	|	СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.КоличествоДт, 0)) КАК КоличествоДт,
	|	МеждународныйДвиженияССубконто.СчетКт,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютаКт, НЕОПРЕДЕЛЕНО) КАК ВалютаКт,
	|	СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютнаяСуммаКт, 0)) КАК ВалютнаяСуммаКт,
	|	СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.КоличествоКт, 0)) КАК КоличествоКт,
	|	0 КАК КоэффициентРаспределения,
	|	0 КАК НовоеЗначениеСумма,
	|	0 КАК НовоеЗначениеВалютнаяСуммаДт,
	|	0 КАК НовоеЗначениеКоличествоДт,
	|	0 КАК НовоеЗначениеВалютнаяСуммаКт,
	|	0 КАК НовоеЗначениеКоличествоКт
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			Организация = &Организация
	|				И Регистратор ССЫЛКА Документ.ПереносПроводокМеждународный
	|				И НЕ ПервичныйДокумент ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
	|				И Активность = ИСТИНА
	|				И (СчетДт, СчетКт) В
	|					(ВЫБРАТЬ
	|						втСчета.СчетДт,
	|						втСчета.СчетКт
	|					ИЗ
	|						втСчета КАК втСчета)
	//|				И НЕ(СчетКт В ИЕРАРХИИ (&Счет10)
	//|						И (СчетДт В ИЕРАРХИИ (&Счет60)
	//|							ИЛИ СчетДт В ИЕРАРХИИ (&Счет76))),
	|			,
	|			) КАК МеждународныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	МеждународныйДвиженияССубконто.Период,
	|	МеждународныйДвиженияССубконто.СчетДт,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютаДт, НЕОПРЕДЕЛЕНО),
	|	МеждународныйДвиженияССубконто.СчетКт,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютаКт, НЕОПРЕДЕЛЕНО)";
	лЗапрос.УстановитьПараметр("Счета", лСчета);
	лЗапрос.УстановитьПараметр("Организация", СтруктураПараметров.Регистратор.Организация);
	лЗапрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.Регистратор.ПериодНачало);
	лЗапрос.УстановитьПараметр("ОкончаниеПериода", СтруктураПараметров.Регистратор.ПериодКонец);
	//>>Степанов 290116 №48350
	//лЗапрос.УстановитьПараметр("Счет10", ПланыСчетов.Международный.СырьеИМатериалы);
	//лЗапрос.УстановитьПараметр("Счет60", ПланыСчетов.Международный.РасчетыСПоставщикамиИПодрядчикамиТекущие);
	//лЗапрос.УстановитьПараметр("Счет76", ПланыСчетов.Международный._РасчетыСРазнымиДебиторамиИКредиторами);
	//<<
	лСтарыеПроводки = лЗапрос.Выполнить().Выгрузить();
	лСтарыеПроводки.Индексы.Добавить(лИзмеренияСПериодом);
	
	//AAA 20150621+
	Если ис_МеждународныйУчет.ИспользоватьНовыйРежимТрансляцииВМСФО() Тогда
		лСтарыеПроводки.Индексы.Добавить("Период,СчетДт,ВалютаДт,СчетКт,ВалютаКт,СубконтоДт1,СубконтоКт1,СубконтоДт3,СубконтоКт3");
		лСтарыеПроводки.Индексы.Добавить("Период,СчетДт,ВалютаДт,СчетКт,ВалютаКт,СубконтоДт1,СубконтоКт1,СубконтоДт2,СубконтоДт3,СубконтоКт3");
		лСтарыеПроводки.Индексы.Добавить("Период,СчетДт,ВалютаДт,СчетКт,ВалютаКт,СубконтоДт1,СубконтоКт1,СубконтоКт2,СубконтоДт3,СубконтоКт3");
	КонецЕсли;
	//AAA 20150621-
	// Формирование проводок с дельтой
	Для Каждого лСтрокаПроводки Из лПроводки Цикл 
		
		лОтбор = Новый Структура(лИзмеренияСПериодом);
		ЗаполнитьЗначенияСвойств(лОтбор, лСтрокаПроводки);
		Для лНомерСубконто=1 По лМаксКоличествоСубконто Цикл 
			Если ТипЗнч(лСтрокаПроводки["СубконтоДт"+лНомерСубконто]) = Тип("СправочникСсылка.Склады") Тогда 
				лОтбор.Удалить("СубконтоДт"+лНомерСубконто);
			КонецЕсли;
			Если ТипЗнч(лСтрокаПроводки["СубконтоКт"+лНомерСубконто]) = Тип("СправочникСсылка.Склады") Тогда 
				лОтбор.Удалить("СубконтоКт"+лНомерСубконто);
			КонецЕсли;
		КонецЦикла;
		// is ЯннуровВФ нач 20141113
		// Для 91.* очистка подразделения
		Если лСтрокаПроводки.СчетДт = ПланыСчетов.Международный.ПрочиеВнереализационныеДоходыИРасходы
		 Или лСтрокаПроводки.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Международный.ПрочиеВнереализационныеДоходыИРасходы) Тогда 
			лОтбор.Удалить("СубконтоДт2");
		КонецЕсли;
		Если лСтрокаПроводки.СчетКт = ПланыСчетов.Международный.ПрочиеВнереализационныеДоходыИРасходы
		 Или лСтрокаПроводки.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Международный.ПрочиеВнереализационныеДоходыИРасходы) Тогда 
			лОтбор.Удалить("СубконтоКт2");
		КонецЕсли;
		// is ЯннуровВФ кон 20141113
		лОтбор.Удалить("ВалютаДт");
		лОтбор.Удалить("ВалютаКт");
		лСтрокиСтарыхПроводок = лСтарыеПроводки.НайтиСтроки(лОтбор);
		лКоличествоСтрок = лСтрокиСтарыхПроводок.Количество();
		
		Если лКоличествоСтрок > 0 Тогда 
			// Определение ресурса базы
			Если лПроводка.СчетКт.Количественный Тогда 
				лРесурсБазы = "КоличествоКт";
			ИначеЕсли лПроводка.СчетДт.Количественный Тогда 
				лРесурсБазы = "КоличествоДт";
			Иначе
				лРесурсБазы = "Сумма";
			КонецЕсли;
			// Вычисление базы ресурса
			лБаза = 0;
			Для Каждого лСтрокаСтаройПроводки Из лСтрокиСтарыхПроводок Цикл 
				лБаза = лБаза + лСтрокаСтаройПроводки[лРесурсБазы];
			КонецЦикла;
			Если лБаза <> 0 Тогда 
				Для Каждого лСтрокаСтаройПроводки Из лСтрокиСтарыхПроводок Цикл 
					лСтрокаСтаройПроводки.КоэффициентРаспределения = лСтрокаСтаройПроводки[лРесурсБазы] / лБаза;
				КонецЦикла;
			Иначе
				лКоэффициент = 1 / лКоличествоСтрок;
				Для Каждого лРесурс Из лМассивРесурсов Цикл 
					лСтрокаСтаройПроводки.КоэффициентРаспределения = лКоэффициент;
				КонецЦикла;
			КонецЕсли;
			// Расчет новых значений
			Для Каждого лРесурс Из лМассивРесурсов Цикл 
				Если Найти(лРесурс, "Сумма") > 0 Тогда 
					лЗнаковОкругления = 2;
				Иначе
					лЗнаковОкругления = 3;
				КонецЕсли;
				// Вычисление дельты ресурса
				лСтароеЗначениеРесурса = 0;
				Для Каждого лСтрокаСтаройПроводки Из лСтрокиСтарыхПроводок Цикл 
					лСтароеЗначениеРесурса = лСтароеЗначениеРесурса + лСтрокаСтаройПроводки[лРесурс];
				КонецЦикла;
				лДельтаРесурса = лСтрокаПроводки[лРесурс] - лСтароеЗначениеРесурса;
				// Распределение дельты ресурса
				лОстатокДельтыРесурса = лДельтаРесурса;
				Для Каждого лСтрокаСтаройПроводки Из лСтрокиСтарыхПроводок Цикл 
					лЗначениеДельты = Окр(лДельтаРесурса*лСтрокаСтаройПроводки.КоэффициентРаспределения, лЗнаковОкругления);
					лСтрокаСтаройПроводки["НовоеЗначение"+лРесурс] = лСтрокаСтаройПроводки[лРесурс] + лЗначениеДельты;
					лОстатокДельтыРесурса = лОстатокДельтыРесурса - лЗначениеДельты;
				КонецЦикла;
				Если лОстатокДельтыРесурса <> 0 Тогда 
					лСтрокаСтаройПроводки = лСтрокиСтарыхПроводок[лКоличествоСтрок-1];
					лСтрокаСтаройПроводки["НовоеЗначение"+лРесурс] = лСтрокаСтаройПроводки["НовоеЗначение"+лРесурс] + лОстатокДельтыРесурса;
				КонецЕсли;
			КонецЦикла;
			
			//Для Каждого лРесурс Из лМассивРесурсов Цикл 
			//	лРесурс = СокрЛП(лРесурс);
			//	Если Найти(лРесурс, "Сумма") > 0 Тогда 
			//		лЗнаковОкругления = 2;
			//	Иначе
			//		лЗнаковОкругления = 3;
			//	КонецЕсли;
			//	// Вычисление дельты ресурса
			//	лБазаРесурса = 0;
			//	Для Каждого лСтрокаСтаройПроводки Из лСтрокиСтарыхПроводок Цикл 
			//		лЗначениеРесурса = лСтрокаСтаройПроводки[лРесурс];
			//		лБазаРесурса = лБазаРесурса + лЗначениеРесурса;
			//		лСтрокаСтаройПроводки["НовоеЗначение"+лРесурс] = лЗначениеРесурса;
			//	КонецЦикла;
			//	лДельтаРесурса = лСтрокаПроводки[лРесурс] - лБазаРесурса;
			//	Если лДельтаРесурса = 0 Тогда 
			//		Продолжить;
			//	КонецЕсли;
			//	// Распределение дельты ресурса
			//	лОстатокДельтыРесурса = лДельтаРесурса;
			//	Если лБазаРесурса <> 0 Тогда 
			//		Для лНомерСтроки=1 По лКоличествоСтрок Цикл 
			//			лСтрокаСтаройПроводки = лСтрокиСтарыхПроводок[лНомерСтроки-1];
			//			лЗначениеРесурса = лСтрокаСтаройПроводки[лРесурс];
			//			лКоэффициент = лЗначениеРесурса / лБазаРесурса;
			//			лЗначениеДельты = Окр(лДельтаРесурса*лКоэффициент, лЗнаковОкругления);
			//			лСтрокаСтаройПроводки["НовоеЗначение"+лРесурс] = лСтрокаСтаройПроводки[лРесурс] + лЗначениеДельты;
			//			лОстатокДельтыРесурса = лОстатокДельтыРесурса - лЗначениеДельты;
			//		КонецЦикла;
			//	Иначе
			//		лКоэффициент = 1 / лКоличествоСтрок;
			//		лЗначениеДельты = Окр(лДельтаРесурса*лКоэффициент, лЗнаковОкругления);
			//		Для Каждого лСтрокаСтаройПроводки Из лСтрокиСтарыхПроводок Цикл 
			//			лСтрокаСтаройПроводки["НовоеЗначение"+лРесурс] = лСтрокаСтаройПроводки[лРесурс] + лЗначениеДельты;
			//			лОстатокДельтыРесурса = лОстатокДельтыРесурса - лЗначениеДельты;
			//		КонецЦикла;
			//	КонецЕсли;
			//	Если лОстатокДельтыРесурса <> 0 Тогда 
			//		лСтрокаСтаройПроводки = лСтрокиСтарыхПроводок[лКоличествоСтрок-1];
			//		лСтрокаСтаройПроводки["НовоеЗначение"+лРесурс] = лСтрокаСтаройПроводки["НовоеЗначение"+лРесурс] + лОстатокДельтыРесурса;
			//	КонецЕсли;
			//КонецЦикла;
				
			// Формирование проводок
			Для Каждого лСтрокаСтаройПроводки Из лСтрокиСтарыхПроводок Цикл 
				
				Если лСтрокаСтаройПроводки.НовоеЗначениеСумма = лСтрокаСтаройПроводки.Сумма
					И лСтрокаСтаройПроводки.НовоеЗначениеКоличествоДт = лСтрокаСтаройПроводки.КоличествоДт
					И лСтрокаСтаройПроводки.НовоеЗначениеКоличествоКт = лСтрокаСтаройПроводки.КоличествоКт
					И лСтрокаСтаройПроводки.НовоеЗначениеВалютнаяСуммаДт = лСтрокаСтаройПроводки.ВалютнаяСуммаДт
					И лСтрокаСтаройПроводки.НовоеЗначениеВалютнаяСуммаКт = лСтрокаСтаройПроводки.ВалютнаяСуммаКт Тогда 
					// Все совпало
					Продолжить;
				Иначе
					//>>Степанов 240216 №48350
					Если (лСтрокаСтаройПроводки.НовоеЗначениеСумма = лСтрокаСтаройПроводки.Сумма)
						И (лСтрокаСтаройПроводки.НовоеЗначениеВалютнаяСуммаДт - лСтрокаСтаройПроводки.ВалютнаяСуммаДт) <> 0
						И (лСтрокаСтаройПроводки.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Международный.РасчетыСПоставщикамиИПодрядчикамиТекущие) ИЛИ
						лСтрокаСтаройПроводки.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Международный._РасчетыСРазнымиДебиторамиИКредиторами)) тогда
						Продолжить;
					КонецЕсли;
					//<<
				КонецЕсли;
				
				лПроводка = лНаборЗаписейПроводок.Добавить();
				лПроводка.Период = лСтрокаСтаройПроводки.Период;
				лПроводка.Организация = СтруктураПараметров.Регистратор.Организация;
				лПроводка.Сумма = лСтрокаСтаройПроводки.НовоеЗначениеСумма - лСтрокаСтаройПроводки.Сумма;
				лПроводка.Содержание = "Корректировка проводок при списании МПЗ";
				// Дт
				лПроводка.СчетДт = лСтрокаСтаройПроводки.СчетДт;
				Для лНомерСубконто=1 По лПроводка.СчетДт.ВидыСубконто.Количество() Цикл 
					БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетДт, лПроводка.СубконтоДт, лНомерСубконто, лСтрокаСтаройПроводки["СубконтоДт"+лНомерСубконто]);
				КонецЦикла;
				Если лПроводка.СчетДт.Валютный Тогда 
					лПроводка.ВалютаДт = лСтрокаСтаройПроводки.ВалютаДт;
					лПроводка.ВалютнаяСуммаДт = лСтрокаСтаройПроводки.НовоеЗначениеВалютнаяСуммаДт - лСтрокаСтаройПроводки.ВалютнаяСуммаДт;
				КонецЕсли;
				Если лПроводка.СчетДт.Количественный Тогда 
					лПроводка.КоличествоДт = лСтрокаСтаройПроводки.НовоеЗначениеКоличествоДт - лСтрокаСтаройПроводки.КоличествоДт;
				КонецЕсли;
				// Кт
				лПроводка.СчетКт = лСтрокаСтаройПроводки.СчетКт;
				Для лНомерСубконто=1 По лПроводка.СчетКт.ВидыСубконто.Количество() Цикл 
					БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетКт, лПроводка.СубконтоКт, лНомерСубконто, лСтрокаСтаройПроводки["СубконтоКт"+лНомерСубконто]);
				КонецЦикла;
				Если лПроводка.СчетКт.Валютный Тогда 
					лПроводка.ВалютаКт = лСтрокаСтаройПроводки.ВалютаКт;
					лПроводка.ВалютнаяСуммаКт = лСтрокаСтаройПроводки.НовоеЗначениеВалютнаяСуммаКт - лСтрокаСтаройПроводки.ВалютнаяСуммаКт;
				КонецЕсли;
				Если лПроводка.СчетКт.Количественный Тогда 
					лПроводка.КоличествоКт = лСтрокаСтаройПроводки.НовоеЗначениеКоличествоКт - лСтрокаСтаройПроводки.КоличествоКт;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			//лПроводка = лНаборЗаписейПроводок.Добавить();
			//лПроводка.Период = лСтрокаПроводки.Период;
			//лПроводка.Организация = СтруктураПараметров.Регистратор.Организация;
			//лПроводка.Сумма = лСтрокаПроводки.Сумма;
			//лПроводка.Содержание = "Корректировка проводок при списание МПЗ";
			//// Дт
			//лПроводка.СчетДт = лСтрокаПроводки.СчетДт;
			//Для лНомерСубконто=1 По лПроводка.СчетДт.ВидыСубконто.Количество() Цикл 
			//	БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетДт, лПроводка.СубконтоДт, лНомерСубконто, лСтрокаПроводки["СубконтоДт"+лНомерСубконто]);
			//КонецЦикла;
			//Если лПроводка.СчетДт.Валютный Тогда 
			//	лПроводка.ВалютаДт = лСтрокаПроводки.ВалютаДт;
			//	лПроводка.ВалютнаяСуммаДт = лСтрокаПроводки.ВалютнаяСуммаДт;
			//КонецЕсли;
			//Если лПроводка.СчетДт.Количественный Тогда 
			//	лПроводка.КоличествоДт = лСтрокаПроводки.КоличествоДт;
			//КонецЕсли;
			//// Кт
			//лПроводка.СчетКт = лСтрокаПроводки.СчетКт;
			//Для лНомерСубконто=1 По лПроводка.СчетКт.ВидыСубконто.Количество() Цикл 
			//	БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетКт, лПроводка.СубконтоКт, лНомерСубконто, лСтрокаПроводки["СубконтоКт"+лНомерСубконто]);
			//КонецЦикла;
			//Если лПроводка.СчетКт.Валютный Тогда 
			//	лПроводка.ВалютаКт = лСтрокаПроводки.ВалютаКт;
			//	лПроводка.ВалютнаяСуммаКт = лСтрокаПроводки.ВалютнаяСуммаКт;
			//КонецЕсли;
			//Если лПроводка.СчетКт.Количественный Тогда 
			//	лПроводка.КоличествоКт = лСтрокаПроводки.КоличествоКт;
			//КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Корректировка проводок корректировки стоимости
	
	лСчетаПартий = Новый Массив;
	лСчетаПартий.Добавить(ПланыСчетов.Международный._ОборудованиеКУстановке);
	лСчетаПартий.Добавить(ПланыСчетов.Международный.ПриобретениеИСтроительствоОС);
	лСчетаПартий.Добавить(ПланыСчетов.Международный.СырьеИМатериалы);
	лСчетаПартий.Добавить(ПланыСчетов.Международный._ПолуфабрикатыСобственногоПроизводства);
	лСчетаПартий.Добавить(ПланыСчетов.Международный._Товары);
	лСчетаПартий.Добавить(ПланыСчетов.Международный.ГотоваяПродукцияЗаВычетомПереоценки);
	
	лЗапрос = Новый Запрос;
	
	//>>201115 Степанов б/н в запрос добавлено условие 
	//|					ИЛИ Регистратор ССЫЛКА Документ.ПереносПроводокМеждународный
	//|						И ПервичныйДокумент ССЫЛКА Документ.КорректировкаЗаписейРегистров
	//|						И (СчетКт В ИЕРАРХИИ (&СчетаПартий)
	//|								И КоличествоКт = 0
	//|							ИЛИ СчетДт В ИЕРАРХИИ (&СчетаПартий)
	//|								И КоличествоДт = 0))
	//<<
	
	лЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МеждународныйДвиженияССубконто.Период,
	|	СУММА(МеждународныйДвиженияССубконто.Сумма) КАК Сумма,
	|	МеждународныйДвиженияССубконто.СчетДт,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютаДт, НЕОПРЕДЕЛЕНО) КАК ВалютаДт,
	|	СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютнаяСуммаДт, 0)) КАК ВалютнаяСуммаДт,
	|	СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.КоличествоДт, 0)) КАК КоличествоДт,
	|	МеждународныйДвиженияССубконто.СчетКт,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютаКт, НЕОПРЕДЕЛЕНО) КАК ВалютаКт,
	|	СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютнаяСуммаКт, 0)) КАК ВалютнаяСуммаКт,
	|	СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.КоличествоКт, 0)) КАК КоличествоКт
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			Организация = &Организация
	|				И (СчетДт В ИЕРАРХИИ (&СчетаПартий)
	|					ИЛИ СчетКт В ИЕРАРХИИ (&СчетаПартий))
	|				И (Регистратор ССЫЛКА Документ.ПереносПроводокМеждународный
	|						И ПервичныйДокумент ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
	|					ИЛИ Регистратор ССЫЛКА Документ.СписаниеМПЗМеждународный
	|						И Содержание = ""Корректировка проводок по корректировке стоимости при списание МПЗ""
	|					ИЛИ Регистратор ССЫЛКА Документ.ПереносПроводокМеждународный
	|						И ПервичныйДокумент ССЫЛКА Документ.КорректировкаЗаписейРегистров
	|						И (СчетКт В ИЕРАРХИИ (&СчетаПартий)
	|							И КоличествоКт = 0))
	|				И Активность = ИСТИНА,
	|			,
	|			) КАК МеждународныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	МеждународныйДвиженияССубконто.Период,
	|	МеждународныйДвиженияССубконто.СчетДт,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютаДт, НЕОПРЕДЕЛЕНО),
	|	МеждународныйДвиженияССубконто.СчетКт,
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютаКт, НЕОПРЕДЕЛЕНО)
	|
	|ИМЕЮЩИЕ
	|	(СУММА(МеждународныйДвиженияССубконто.Сумма) <> 0
	|		ИЛИ СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютнаяСуммаДт, 0)) <> 0
	|		ИЛИ СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.КоличествоДт, 0)) <> 0
	|		ИЛИ СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.ВалютнаяСуммаКт, 0)) <> 0
	|		ИЛИ СУММА(ЕСТЬNULL(МеждународныйДвиженияССубконто.КоличествоКт, 0)) <> 0)";
	лЗапрос.УстановитьПараметр("СчетаПартий", лСчетаПартий);
	лЗапрос.УстановитьПараметр("Организация", СтруктураПараметров.Регистратор.Организация);
	лЗапрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.Регистратор.ПериодНачало);
	лЗапрос.УстановитьПараметр("ОкончаниеПериода", СтруктураПараметров.Регистратор.ПериодКонец);
	лВыборкаКорректировки = лЗапрос.Выполнить().Выбрать();
	Пока лВыборкаКорректировки.Следующий() Цикл 
		
		лПроводка = лНаборЗаписейПроводок.Добавить();
		лПроводка.Период = лВыборкаКорректировки.Период;
		лПроводка.Организация = СтруктураПараметров.Регистратор.Организация;
		лПроводка.Сумма = -лВыборкаКорректировки.Сумма;
		лПроводка.Содержание = "Корректировка проводок по корректировке стоимости при списание МПЗ";
		// Дт
		лПроводка.СчетДт = лВыборкаКорректировки.СчетДт;
		Для лНомерСубконто=1 По лПроводка.СчетДт.ВидыСубконто.Количество() Цикл 
			БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетДт, лПроводка.СубконтоДт, лНомерСубконто, лВыборкаКорректировки["СубконтоДт"+лНомерСубконто]);
		КонецЦикла;
		Если лПроводка.СчетДт.Валютный Тогда 
			лПроводка.ВалютаДт = лВыборкаКорректировки.ВалютаДт;
			лПроводка.ВалютнаяСуммаДт = -лВыборкаКорректировки.ВалютнаяСуммаДт;
		КонецЕсли;
		Если лПроводка.СчетДт.Количественный Тогда 
			лПроводка.КоличествоДт = -лВыборкаКорректировки.КоличествоДт;
		КонецЕсли;
		// Кт
		лПроводка.СчетКт = лВыборкаКорректировки.СчетКт;
		Для лНомерСубконто=1 По лПроводка.СчетКт.ВидыСубконто.Количество() Цикл 
			БухгалтерскийУчет.УстановитьСубконто(лПроводка.СчетКт, лПроводка.СубконтоКт, лНомерСубконто, лВыборкаКорректировки["СубконтоКт"+лНомерСубконто]);
		КонецЦикла;
		Если лПроводка.СчетКт.Валютный Тогда 
			лПроводка.ВалютаКт = лВыборкаКорректировки.ВалютаКт;
			лПроводка.ВалютнаяСуммаКт = -лВыборкаКорректировки.ВалютнаяСуммаКт;
		КонецЕсли;
		Если лПроводка.СчетКт.Количественный Тогда 
			лПроводка.КоличествоКт = -лВыборкаКорректировки.КоличествоКт;
		КонецЕсли;
	
	КонецЦикла;
	
	// Запись
	лНаборЗаписейПроводок.Записать(Ложь);
		
КонецПроцедуры
