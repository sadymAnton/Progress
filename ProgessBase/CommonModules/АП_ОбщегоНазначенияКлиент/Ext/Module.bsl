
Процедура УправлениеВидимостьюЭлементовФормы(ЭлементФормы, Видимость = Истина, ИзменятьВидимость = Истина) Экспорт

	ЭлементФормы.Видимость 			= Видимость;
	ЭлементФормы.ИзменятьВидимость 	= ИзменятьВидимость;	
	
КонецПроцедуры

Процедура УправлениеДостуностьюЭлементовФормы(ЭлементФормы, Достуность = Истина) Экспорт

	ЭлементФормы.Достуность 		= Достуность;

КонецПроцедуры

//Устанавливает всем элементам формы статус только просмотр = истина
Процедура ЗаблокироватьФорму(Форма, ИсключительноПросмотр = Истина, ИсключенныеПоля = "Код;Номер;Разделитель;Панель;") Экспорт
	
	Для Каждого ТекЭл Из Форма.ЭлементыФормы Цикл
		Если Найти(ИсключенныеПоля, ТекЭл.Имя+";")>0 ИЛИ ТекЭл.Имя = "ОсновныеДействияФормы" Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Если ТипЗнч(ТекЭл) = Тип("Флажок") Тогда
				ТекЭл.Доступность = НЕ ИсключительноПросмотр;
			ИначеЕсли ТипЗнч(ТекЭл) = Тип("КоманднаяПанель") Тогда
				Для Каждого Кнопка Из ТекЭл.Кнопки Цикл
					Кнопка.Доступность = НЕ ИсключительноПросмотр;
					
					Если НЕ Кнопка.Кнопки = Неопределено Тогда
						
						Для каждого влКнопка Из Кнопка.Кнопки Цикл	
							Если НЕ Найти(влКнопка.Имя, "ДвиженияДокументаПоРегистрам") = 0 ИЛИ НЕ Найти(влКнопка.Имя, "СтруктураПодчиненностиДокумента") = 0 Тогда
								Продолжить;							
							КонецЕсли; 							
						    влКнопка.Доступность = НЕ ИсключительноПросмотр;
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
				//ТекЭл.Доступность = НЕ ИсключительноПросмотр;
			ИначеЕсли ТипЗнч(ТекЭл) = Тип("Переключатель") Тогда
				ТекЭл.Доступность = НЕ ИсключительноПросмотр;
			ИначеЕсли ТипЗнч(ТекЭл) = Тип("Надпись") Тогда
				ТекЭл.Доступность = НЕ ИсключительноПросмотр; 
			ИначеЕсли ТипЗнч(ТекЭл) = Тип("Разделитель") Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(ТекЭл) = Тип("Панель") Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(ТекЭл) = Тип("Кнопка") Тогда
				ТекЭл.Доступность = НЕ ИсключительноПросмотр;
			Иначе
				ТекЭл.ТолькоПросмотр = ИсключительноПросмотр;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучимСписокРолейПользователя(мПользователь = Неопределено) Экспорт

	Если мПользователь = Неопределено Тогда	
		мПользователь = глЗначениеПеременной("глТекущийПользователь");			
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.АП_РолиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(мПользователь);
	
	НаборЗаписей.Прочитать();
	
	СписокРолей = Новый СписокЗначений;
	
	Для каждого Строка Из НаборЗаписей Цикл	
		СписокРолей.Добавить(Строка.РольПользователя);	
	КонецЦикла; 
	
	НаборЗаписей = Неопределено;
	
	Возврат СписокРолей;

КонецФункции // ()

Функция ЕстьРольПользователя(мПользователь = Неопределено, мРольПользователя = Неопределено) Экспорт

	Если мПользователь = Неопределено Тогда	
		мПользователь = глЗначениеПеременной("глТекущийПользователь");			
	КонецЕсли;
	
	Если мРольПользователя = Неопределено Тогда	
		мРольПользователя = Справочники.АП_РолиПользователей.ОбщиеДоступ;			
	КонецЕсли;	
	
	СписокРолей = ПолучимСписокРолейПользователя(мПользователь);
	
	Если НЕ СписокРолей.НайтиПоЗначению(мРольПользователя) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокРолей = Неопределено;
	
	Возврат Ложь;

КонецФункции // ()

Функция ОграничиватьВыборСтатусаДокументаПользователю(мДокументОбъект, мСтатусДокумента, мПользователь = Неопределено) Экспорт
	
	Если мПользователь = Неопределено Тогда	
		мПользователь = глЗначениеПеременной("глТекущийПользователь");			
	КонецЕсли;

	СписокРолей = ПолучимСписокРолейПользователя(мПользователь);
	
	Если СписокРолей.НайтиПоЗначению(Справочники.АП_РолиПользователей.ОбщиеДоступ) = Неопределено Тогда
		
		//Общий доступ не нужно назначать пользователю - статусы с общим доступом доступны всем кому доступен документ
		СписокРолей.Добавить(Справочники.АП_РолиПользователей.ОбщиеДоступ);
	КонецЕсли;
	
	мМетаданныеОбъекта = СокрЛП(мДокументОбъект.Метаданные().Имя);
	
	//НаборЗаписей = РегистрыСведений.АП_СтатусыИРолиПользователей.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(мМетаданныеОбъекта);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АП_СтатусыИРолиПользователей.СтатусДокумента,
	               |	АП_СтатусыИРолиПользователей.Порядок КАК Порядок
	               |ИЗ
	               |	РегистрСведений.АП_СтатусыИРолиПользователей КАК АП_СтатусыИРолиПользователей
	               |ГДЕ
	               |	АП_СтатусыИРолиПользователей.Объект = &Объект
	               |	И АП_СтатусыИРолиПользователей.РольПользователя В (&РольПользователя)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	Запрос.УстановитьПараметр("Объект", мМетаданныеОбъекта);
	
	СписокСтатусов = Новый СписокЗначений;
	//СписокСтатусов.Добавить(мСтатусДокумента);
	
	СписокСтатусовВозможные = Новый СписокЗначений;
	
	Если ТипЗнч(мДокументОбъект) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		
		Если мСтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт Тогда
			
			//СписокСтатусовВозможные.Добавить(Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт);
			СписокСтатусовВозможные.Добавить(Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад);
			
		КонецЕсли;
	//начало изменений б/ добавления ограничений доставка до ж/д станции 
	ИначеЕсли ТипЗнч(мДокументОбъект) = Тип("ДокументОбъект.ПТЛ_ПланДоставки") Тогда
	
		Если мДокументОбъект.ПРГ_ИспользоватьОбменСТендернойПлощадкой  Тогда 
			Если мДокументОбъект.ПРГ_ИспользоватьОграниченияПоЖд и мДокументОбъект.ПРГ_ДоставкаДоЖДСтанции Тогда 
					СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Новый);
					СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен);
			Иначе
					 Если мСтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Новый Тогда
							СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Новый);
						    СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен);
						ИначеЕсли мСтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен Тогда
							//начало изменений Ожиганов А. б/н добавим возможность изменить на статус новый 16.11.2016 
							СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Новый);
							//конец изменений 
							СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Тендер);
					  ИначеЕсли мСтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Тендер Тогда 
							  СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Готов);
					  ИначеЕсли мСтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Готов Тогда 
							  СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Готов);
					  Иначе
							  СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Новый);
							  СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен);
					  КонецЕсли; 
			КонецЕсли;
		Иначе
				СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Новый);
				СписокСтатусовВозможные.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен);
		КонецЕсли;	
	//конец изменений 
	ИначеЕсли ТипЗнч(мДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		//Обработаем статусы согласования бухгалтерией
		Если ТипЗнч(мСтатусДокумента) = Тип("ПеречислениеСсылка.КП_СогласованиеБухгалтерией") Тогда
			Бухгалтер = АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии);
			Если мДокументОбъект.КП_АвтоматическийСтатусСогласованияБухгалтерией и Не Бухгалтер Тогда
				СписокСтатусовВозможные.Добавить(мДокументОбъект.КП_СогласованиеБухгалтерией);
			КонецЕсли;
			
			Если Не Бухгалтер и мДокументОбъект.Ссылка.КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании Тогда
				СписокСтатусовВозможные.Добавить(Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании);
			ИначеЕсли мДокументОбъект.Ссылка.КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании Тогда
				//Значит бухгалтер
				СписокСтатусовВозможные.Добавить(Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании);
				СписокСтатусовВозможные.Добавить(Перечисления.КП_СогласованиеБухгалтерией.Согласовано);
				СписокСтатусовВозможные.Добавить(Перечисления.КП_СогласованиеБухгалтерией.НеСогласован);
			КонецЕсли;
			
			Если Не Бухгалтер и мДокументОбъект.КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеСогласован Тогда
				СписокСтатусовВозможные.Добавить(мДокументОбъект.КП_СогласованиеБухгалтерией);
			КонецЕсли;
		КонецЕсли;
		
		//Обработаем статусы согласования ОКК
		Если ТипЗнч(мСтатусДокумента) = Тип("ПеречислениеСсылка.ПКК_СогласованиеКредитныйКонтролем") Тогда
			ОКК = АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникКредитногоКонтроля);
			Если мДокументОбъект.ПКК_АвтоматическийСтатусСогласованияОКК и Не ОКК Тогда
				СписокСтатусовВозможные.Добавить(мДокументОбъект.ПКК_СогласованиеКредитнымКонтролем);
			КонецЕсли;
			
			Если Не ОКК и мДокументОбъект.Ссылка.ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании Тогда
				СписокСтатусовВозможные.Добавить(Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании);
			ИначеЕсли мДокументОбъект.Ссылка.ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании Тогда
				//Значит ОКК
				СписокСтатусовВозможные.Добавить(Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании);
				СписокСтатусовВозможные.Добавить(Перечисления.ПКК_СогласованиеКредитныйКонтролем.Согласовано);
				СписокСтатусовВозможные.Добавить(Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеСогласован);
			КонецЕсли;
			
			Если Не ОКК и мДокументОбъект.ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеСогласован Тогда
				СписокСтатусовВозможные.Добавить(мДокументОбъект.ПКК_СогласованиеКредитнымКонтролем);
			КонецЕсли;
		КонецЕсли;
	//m_ionov@mail.ru 05.09.2016
	ИначеЕсли ТипЗнч(мДокументОбъект) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда	
		Если Не мДокументОбъект.Проведен Тогда
			СписокСтатусовВозможные.Добавить(Перечисления.УЗ_СтатусыЗаказовПоставщикам.Новый);
		ИначеЕсли мСтатусДокумента = Перечисления.УЗ_СтатусыЗаказовПоставщикам.ПереданВСистему Тогда
			СписокСтатусовВозможные.Добавить(Перечисления.УЗ_СтатусыЗаказовПоставщикам.Отменен);
		КонецЕсли;
		//------- m_ionov@mail.ru -------
	КонецЕсли;
	
	Если Не СписокРолей.НайтиПоЗначению(Справочники.АП_РолиПользователей.Администратор) = Неопределено Тогда
		//Администратору разрешаем все статусы
		Запрос.Текст = "ВЫБРАТЬ
		               |	АП_СтатусыИРолиПользователей.СтатусДокумента,
		               |	АП_СтатусыИРолиПользователей.Порядок КАК Порядок
		               |ИЗ
		               |	РегистрСведений.АП_СтатусыИРолиПользователей КАК АП_СтатусыИРолиПользователей
		               |ГДЕ
		               |	АП_СтатусыИРолиПользователей.Объект = &Объект
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Порядок";
		НаборЗаписей = Запрос.Выполнить().Выгрузить();
		
		Для каждого Строка Из НаборЗаписей Цикл
			Если НЕ ТипЗнч(мСтатусДокумента) = ТипЗнч(Строка.СтатусДокумента) Тогда
				Продолжить;			
			КонецЕсли; 
			
			Если НЕ СписокСтатусовВозможные.НайтиПоЗначению(Строка.СтатусДокумента) = Неопределено ИЛИ СписокСтатусовВозможные.Количество() = 0 Тогда
				
				Если СписокСтатусов.НайтиПоЗначению(Строка.СтатусДокумента) = Неопределено Тогда
					
					СписокСтатусов.Добавить(Строка.СтатусДокумента);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	Иначе
		
		//Для каждого Строка Из СписокРолей Цикл
			
			//НаборЗаписей.Отбор.РольПользователя.Установить(Строка.Значение);
			
			//НаборЗаписей.Прочитать();	
			
			Запрос.УстановитьПараметр("РольПользователя", СписокРолей);
			НаборЗаписей = Запрос.Выполнить().Выгрузить();
			
			Для каждого Строка Из НаборЗаписей Цикл
				Если НЕ ТипЗнч(мСтатусДокумента) = ТипЗнч(Строка.СтатусДокумента) Тогда
					Продолжить;			
				КонецЕсли; 
				
				Если НЕ СписокСтатусовВозможные.НайтиПоЗначению(Строка.СтатусДокумента) = Неопределено ИЛИ СписокСтатусовВозможные.Количество() = 0 Тогда
					
					Если СписокСтатусов.НайтиПоЗначению(Строка.СтатусДокумента) = Неопределено Тогда
						
						СписокСтатусов.Добавить(Строка.СтатусДокумента);
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла; 		
			
		//КонецЦикла;
	КонецЕсли;
	
	//Blik 120417  63714 н
	Если ТипЗнч(мДокументОбъект) = Тип("ДокументОбъект.ПТЛ_ЗаданиеНаПеревозку") Тогда
		Если Не РольДоступна("ПолныеПрава") и ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("ЗапрещенДоступНаСтатусВыполненоВЗаданииНаперевозку") Тогда
			СтатусВыполено = СписокСтатусов.НайтиПоЗначению(Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Выполнено);
			Если не СтатусВыполено = Неопределено Тогда
				    СписокСтатусов.Удалить(СтатусВыполено);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	//Blik 120417  63714 к
		
	Если СписокСтатусов.НайтиПоЗначению(мСтатусДокумента) = Неопределено Тогда
				
		СписокСтатусов.Вставить(0, мСтатусДокумента);
	КонецЕсли;

	
	//Если СписокСтатусов.Количество() < 1 Тогда 
	//   ОбщегоНазначения.СообщитьОбОшибке("Статусы документов не настроены, обратитесь к администратору системы");
	//КонецЕсли; 

	НаборЗаписей = Неопределено;
	
	Возврат СписокСтатусов;	

КонецФункции // ()

Процедура ПроверкаБлокировкиФормыДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПР_Претензия") Тогда
		
		СписокСтатусов = ОграничиватьВыборСтатусаДокументаПользователю(ДокументОбъект, ДокументОбъект.СтатусДокумента);
		
		ФормаДокумента.ЭлементыФормы.СтатусДокумента.Доступность = (СписокСтатусов.Количество() > 1);
		
		ФормаДокумента.ЭлементыФормы.ПровереноБухгалтерией.Доступность = ЕстьРольПользователя(,Справочники.АП_РолиПользователей.СотрудникБухгалтерии);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		
		СписокСтатусов = ОграничиватьВыборСтатусаДокументаПользователю(ДокументОбъект, ДокументОбъект.СтатусДокумента);
		
		ФормаДокумента.ЭлементыФормы.СтатусДокумента.Доступность = (СписокСтатусов.Количество() > 1);
		
	КонецЕсли; 	

КонецПроцедуры

Функция ЕстьРегионИсключение(СтрокаРегион,СтрокаГород)
	
	ИсключенияДляМР = Новый Массив;
	ИсключенияДляМР.Добавить("зеленоград");
	Для Каждого СтрИсключение Из ИсключенияДляМР Цикл
		
		Проверяем = НРег(СокрЛП(СтрокаГород));
		Если Найти(Проверяем,СтрИсключение)>0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ГородаИсключения = Новый Массив;
	ГородаИсключения.Добавить("санкт-петербург");
	ГородаИсключения.Добавить("москва");
	Для Каждого СтрИсключение Из ГородаИсключения Цикл
		
		Проверяем = НРег(СокрЛП(СтрокаРегион));
		Если Найти(Проверяем,СтрИсключение)>0 Тогда 
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СоздатьГородДоставки(АдресДоставки) Экспорт

	Если ПустаяСтрока(АдресДоставки) Тогда
		Возврат Справочники.НСИ_Города.ПустаяСсылка();
	КонецЕсли;
	
	мРегион   = "";
	мГород    = "";
	мРайон 	  = "";
	мНасПункт = "";
	
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресДоставки);
	Если ТипЗнч(СтруктураАдреса) = Тип("Структура") Тогда
		
		СтруктураАдреса.Свойство("Регион", мРегион);			
		СтруктураАдреса.Свойство("Район", мРайон);
		СтруктураАдреса.Свойство("Город", мГород);
		СтруктураАдреса.Свойство("НаселенныйПункт", мНасПункт);
		
		Если ЕстьРегионИсключение(мРегион,мГород) Тогда 
			мГород = мРегион;
		КонецЕсли;
		
		Если Не ПустаяСтрока(мНасПункт) И ПустаяСтрока(мГород) Тогда
			мГород = мНасПункт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(мГород) или ПустаяСтрока(мРегион) Тогда
		#Если Клиент Тогда 
			Сообщить("Не верно задан адрес доставки");	
		#КонецЕсли
	Иначе	
		//Создадим адрес доставки
		СтрокаРегион  = УправлениеКонтактнойИнформацией.ОбрезатьСокращение(мРегион);
		СтрокаРайон  = УправлениеКонтактнойИнформацией.ОбрезатьСокращение(мРайон);
		Если ПустаяСтрока(мНасПункт) Тогда
			СтрокаГород  = УправлениеКонтактнойИнформацией.ОбрезатьСокращение(мГород);
		Иначе
			СтрокаГород  = УправлениеКонтактнойИнформацией.ОбрезатьСокращение(мНасПункт);
		КонецЕсли;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	АдресныйКлассификатор.КодРегионаВКоде КАК КодРегиона,
		//|	АдресныйКлассификатор.Код КАК КодАдресногоЭлемента
		//|ИЗ
		//|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		//|ГДЕ
		//|	АдресныйКлассификатор.Наименование = &Наименование
		//|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 1";
		//	
		//Запрос.УстановитьПараметр("Наименование", ИмяРегиона);
		//	
		//Результат = Запрос.Выполнить();
		//Выборка = Результат.Выбрать();
		//Выборка.Следующий();

		КодАдресногоЭлемента = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НСИ_Города.Ссылка
		|ИЗ
		|	Справочник.НСИ_Города КАК НСИ_Города
		|ГДЕ
		|	НСИ_Города.Наименование = &Наименование
		|	И НСИ_Города.СтрокаРегион = &Регион
		|	И НСИ_Города.СтрокаРайон = &Район
		|	И НСИ_Города.КодАдресногоЭлемента = &КодАдресногоЭлемента";
		
		//Запрос.УстановитьПараметр("Наименование", СтрокаГород);
		Запрос.УстановитьПараметр("Наименование", мГород);
		Запрос.УстановитьПараметр("Регион", мРегион);
		Запрос.УстановитьПараметр("Район", мРайон);
		Запрос.УстановитьПараметр("КодАдресногоЭлемента", КодАдресногоЭлемента);
				
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			мСпрГород = Выборка.Ссылка;	
		Иначе
			мСпрГород = Справочники.НСИ_Города.ПустаяСсылка();
		КонецЕсли;
		
		Если Не мСпрГород.Пустая() Тогда 
			Возврат мСпрГород;
		Иначе
			
			//Права на создание городов, районов и областей только у логистики
			Если Не ПравоДоступа("Добавление", Метаданные.Справочники.НСИ_Города) Тогда
				ОбщегоНазначения.Сообщение("У Вас нет прав на создание справочника Города", СтатусСообщения.Информация);
				Возврат Справочники.НСИ_Города.ПустаяСсылка();
			КонецЕсли;
						
			Города = Справочники.НСИ_Города.СоздатьЭлемент();
			Города.Наименование = мГород;
			
			Города.СтрокаРегион = мРегион;
			Города.СтрокаРайон = СтрокаРайон;
			
			Города.КодАдресногоЭлемента = КодАдресногоЭлемента;
			
			Города.Записать();
			
			Возврат Города.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Справочники.НСИ_Города.ПустаяСсылка();

КонецФункции

Функция ПолучитьИтоговыйВес(ТабВеса) Экспорт
	
	Для Каждого СтрокаВеса Из ТабВеса Цикл
		
		Если СтрокаВеса.КоличествоМест = 0 Тогда
			СтрокаВеса.КоличествоМест = СтрокаВеса.Количество;
			СтрокаВеса.ЕдиницаИзмеренияМест = СтрокаВеса.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабВеса.ЕдиницаИзмеренияМест,
		|	ТабВеса.КоличествоМест,
		|	ТабВеса.Количество
		|ПОМЕСТИТЬ ТабВеса
		|ИЗ
		|	&ТабВеса КАК ТабВеса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Итоги.ВесНетто) / 1000 КАК ВесНетто,
		|	СУММА(Итоги.ВесБрутто) / 1000 КАК ВесБрутто,
		|	СУММА(Итоги.Объем) / 1000 КАК Объем,
		|	СУММА(Итоги.Количество) / 1000 КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕдиницыИзмерения.ПРГ_Нетто * ТабВеса.КоличествоМест КАК ВесНетто,
		|		ЕдиницыИзмерения.Вес * ТабВеса.КоличествоМест КАК ВесБрутто,
		|		ЕдиницыИзмерения.Объем * ТабВеса.КоличествоМест КАК Объем,
		|		ТабВеса.Количество КАК Количество
		|	ИЗ
		|		ТабВеса КАК ТабВеса
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|			ПО ТабВеса.ЕдиницаИзмеренияМест = ЕдиницыИзмерения.Ссылка) КАК Итоги
		|ГДЕ
		|	Итоги.ВесНетто + Итоги.ВесБрутто > 0";

	//Запрос.Текст = "
	//	|ВЫБРАТЬ
	//	|	ТабВеса.ЕдиницаИзмеренияМест,
	//	|	Табвеса.ЕдиницаИзмерения,
	//	|	ТабВеса.КоличествоМест,
	//	| 	ТабВеса.Количество,
	//	|	Табвеса.Номенклатура
	//	|ПОМЕСТИТЬ ТабВеса
	//	|ИЗ
	//	|	&ТабВеса КАК ТабВеса
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СУММА(Итоги.ВесНетто) КАК ВесНетто,
	//	|	СУММА(Итоги.ВесБрутто) КАК ВесБрутто,
	//	|	СУММА(Итоги.Объем)/1000000 КАК Объем
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		(спрНоменклатура.ЕдиницаДляРассчетаВесовыхПоказателей.Вес / спрНоменклатура.ЕдиницаДляРассчетаВесовыхПоказателей.Коэффициент) * ТабВеса.Количество КАК ВесНетто,
	//	|		(спрНоменклатура.ЕдиницаДляРассчетаВесовыхПоказателей.ВесБрутто / спрНоменклатура.ЕдиницаДляРассчетаВесовыхПоказателей.Коэффициент) * ТабВеса.Количество КАК ВесБрутто,
	//	|		(спрНоменклатура.ЕдиницаДляРассчетаВесовыхПоказателей.Объем / спрНоменклатура.ЕдиницаДляРассчетаВесовыхПоказателей.Коэффициент) * ТабВеса.Количество КАК Объем		
	//	|	ИЗ
	//	|		ТабВеса КАК ТабВеса
	//	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура как спрНоменклатура		
	//	|	по табВеса.Номенклатура = спрНоменклатура.Ссылка) КАК Итоги
	//	|ГДЕ
	//	|	Итоги.ВесНетто + Итоги.ВесБрутто > 0";
	
	Запрос.УстановитьПараметр("ТабВеса",ТабВеса);
	Результат = Запрос.Выполнить();

	ВыборкаВеса = Результат.Выбрать();

	СтруктураВесов = Новый Структура;
	
	Если ВыборкаВеса.Следующий() Тогда 
		СтруктураВесов.Вставить("ВесНетто", ВыборкаВеса.ВесНетто);	
		СтруктураВесов.Вставить("ВесБрутто", ВыборкаВеса.ВесБрутто);	
		СтруктураВесов.Вставить("Объем", ВыборкаВеса.Объем);
		СтруктураВесов.Вставить("Количество", ВыборкаВеса.Количество);
	Иначе
		СтруктураВесов.Вставить("ВесНетто", 0);	
		СтруктураВесов.Вставить("ВесБрутто", 0);	
		СтруктураВесов.Вставить("Объем", 0);
		СтруктураВесов.Вставить("Количество", 0);
	КонецЕсли;
	
	Возврат СтруктураВесов;
КонецФункции

Функция ПолучитьВесаДляСтроки(ИмяКолонкиКоличество, ДанныеСтроки) Экспорт
	//Возврачает в кг и литрах
	
	СтруктураВесов = Новый Структура;
	
	//СтруктураВесов.Вставить("ВесНетто", ДанныеСтроки[ИмяКолонкиКоличество] * ДанныеСтроки.ЕдиницаИзмерения.ПРГ_Нетто);	
	//СтруктураВесов.Вставить("ВесБрутто", ДанныеСтроки[ИмяКолонкиКоличество] * ДанныеСтроки.ЕдиницаИзмерения.Вес);	
	//СтруктураВесов.Вставить("Объем", ДанныеСтроки[ИмяКолонкиКоличество] * ДанныеСтроки.ЕдиницаИзмерения.Объем);
	
	ЕдМест = ДанныеСтроки.Номенклатура.ЕдиницаИзмеренияМест;
	
	Если Не ЕдМест.Коэффициент = 0 Тогда 	
		СтруктураВесов.Вставить("ВесНетто", ДанныеСтроки[ИмяКолонкиКоличество] * (ЕдМест.ПРГ_Нетто / ЕдМест.Коэффициент));	
		СтруктураВесов.Вставить("ВесБрутто", ДанныеСтроки[ИмяКолонкиКоличество] * (ЕдМест.Вес / ЕдМест.Коэффициент));	
		СтруктураВесов.Вставить("Объем", ДанныеСтроки[ИмяКолонкиКоличество] * (ЕдМест.Объем / ЕдМест.Коэффициент));
	Иначе
		СтруктураВесов.Вставить("ВесНетто", 0);
		СтруктураВесов.Вставить("ВесБрутто", 0);
		СтруктураВесов.Вставить("Объем", 0);
	КонецЕсли; 
	
	Возврат СтруктураВесов;
	
КонецФункции

Процедура ОткрытьИсториюСтатусов(Ссылка, Элемент, Форма) Экспорт
	ИсторияСтатусов = Обработки.АП_ИсторияСтатусовДокументов.Создать();
	ИсторияСтатусов.Документ = Ссылка;
	ИсторияСтатусов.ПолучитьФорму(,Форма).Открыть();
КонецПроцедуры


Процедура ПроверитьНаКратностьВВода(ТекущаяСтрока, ЗадаватьВопрос = Истина, мСообщитьОбОшибке = Ложь,КоэффЗадан=Ложь,ЗначениеКоэфф=0) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмеренияМест) Тогда
		ТекущаяСтрока.Количество = 0;
		ОбщегоНазначения.СообщитьОбОшибке("Не указана единица мест", Истина);
	КонецЕсли;
	
	Если ТекущаяСтрока.Коэффициент = 0 Тогда
		ТекущаяСтрока.Количество = 0;
		ОбщегоНазначения.СообщитьОбОшибке("Не указан Коэффициент", Истина);
	КонецЕсли;
	
	Если ТекущаяСтрока.КП_КонтрольКратности Тогда
		//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
		//КратностьУпаковки = ТекущаяСтрока.ЕдиницаИзмеренияМест.Коэффициент;
		//{21.09.2015 Островерхий заявка №б/н 
		//КратностьУпаковки = ?(КоэффЗадан, ЗначениеКоэфф, ТекущаяСтрока.ЕдиницаИзмеренияМест.Коэффициент); 
		КратностьУпаковки = ?(КоэффЗадан, ЗначениеКоэфф, ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ТекущаяСтрока.ЕдиницаИзмеренияМест,"Коэффициент"));
		//21.09.2015 Островерхий} 
		//конец изменений 
		
		КратностьУпаковки = ?(КратностьУпаковки = 0, 1, КратностьУпаковки);	
		Кво = ТекущаяСтрока.Количество;
		Кво = Окр(ТекущаяСтрока.Количество*ТекущаяСтрока.Коэффициент/КратностьУпаковки,0)*КратностьУпаковки/ТекущаяСтрока.Коэффициент;
		Если Не Кво = ТекущаяСтрока.Количество Тогда
			Если Не ЗадаватьВопрос Тогда
				ТекущаяСтрока.КП_КонтрольКратности = Ложь;	
				
				//++ Spl_Апроф 28.01.2015 (k.russkih@a-prof.ru)
				Если мСообщитьОбОшибке Тогда				
					ОбщегоНазначения.СообщитьОбОшибке("Количество в строке №"+ СокрЛП(ТекущаяСтрока.НомерСтроки) +" не кратно упаковке");					
				КонецЕсли;
				
			//{18.10.2017 Островерхий заявка №б/н 
			//ИначеЕсли Вопрос("Количество не кратно упаковке, снять контроль кратности?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			#Если Клиент Тогда
			ИначеЕсли Вопрос("Количество не кратно упаковке, снять контроль кратности?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			#КонецЕсли
			//18.10.2017 Островерхий} 
				ТекущаяСтрока.КП_КонтрольКратности = Ложь;
			Иначе
				ТекущаяСтрока.Количество = Кво;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
		//КратностьУпаковки = ТекущаяСтрока.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент;
		//{21.09.2015 Островерхий заявка №б/н 
		//КратностьУпаковки = ?(КоэффЗадан, ЗначениеКоэфф, ТекущаяСтрока.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент); 
		КратностьУпаковки = ?(КоэффЗадан, ЗначениеКоэфф, ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ТекущаяСтрока.Номенклатура,"ЕдиницаИзмеренияМест.Коэффициент"));
		//21.09.2015 Островерхий} 
		//конец изменений 
		КратностьУпаковки = ?(КратностьУпаковки = 0, 1, КратностьУпаковки);	
		Кво = ТекущаяСтрока.Количество;
		Кво = ЦЕЛ(ТекущаяСтрока.Количество*ТекущаяСтрока.Коэффициент/КратностьУпаковки)*КратностьУпаковки/ТекущаяСтрока.Коэффициент;
		Если Кво = ТекущаяСтрока.Количество Тогда
			ТекущаяСтрока.КП_КонтрольКратности = Истина;
		Иначе
			//++ Spl_Апроф 28.01.2015 (k.russkih@a-prof.ru)
			Если мСообщитьОбОшибке Тогда				
				ОбщегоНазначения.СообщитьОбОшибке("Количество в строке №"+ СокрЛП(ТекущаяСтрока.НомерСтроки) +" не кратно упаковке");					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает выбор адреса доставки из формы списка адресного классификатора
Процедура ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ДокументОбъект, РеквзитПолучатель, РеквизитАдрес) Экспорт
	
	Перем Получатель;
	
	СтандартнаяОбработка = Ложь;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если  МетаданныеДокумента.Реквизиты.Найти(РеквзитПолучатель) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект[РеквзитПолучатель]) Тогда
		Получатель = ДокументОбъект[РеквзитПолучатель];
	Иначе
		Если ДокументОбъект.Контрагент.Пустая() Тогда
			//{18.10.2017 Островерхий заявка №б/н 
			//ВвестиЗначение(ДокументОбъект.Контрагент, "Выберите контрагента");
			#Если Клиент Тогда
				ВвестиЗначение(ДокументОбъект.Контрагент, "Выберите контрагента");	
			#КонецЕсли  
			//18.10.2017 Островерхий}
		КонецЕсли;
		Получатель = ДокументОбъект.Контрагент;
	КонецЕсли;

	Если ЗначениеЗаполнено(Получатель) Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.мВозвратДанныхКонтактнойИнформации = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Получатель;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		СтруктураАдреса = ФормаВыбора.ОткрытьМодально();

		// Устанавливаем адрес доставки и его комментарий
		Если СтруктураАдреса <> Неопределено Тогда
			
			ДокументОбъект[РеквизитАдрес] = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(СтруктураАдреса);
			
			Если  МетаданныеДокумента.Реквизиты.Найти("ДополнениеКАдресуДоставки") <> Неопределено И РеквизитАдрес = "АдресДоставки" Тогда
				// Пустое дополнение к адресу меняем на непустое без дополнительных вопросов аользователю
				ИзменятьДополнениеКАдресуДоставки = НЕ ЗначениеЗаполнено(ДокументОбъект.ДополнениеКАдресуДоставки) 
				ИЛИ (ДокументОбъект.ДополнениеКАдресуДоставки = СтруктураАдреса.Комментарий);
				// спросим пользователя о необходимости изменить дополнение к адресу доставки
				Если НЕ ИзменятьДополнениеКАдресуДоставки Тогда
					//{18.10.2017 Островерхий заявка №б/н 
					#Если Клиент Тогда
					
						Ответ = Вопрос("Дополнение к адресу доставки отличается от текущего значения в документе. Поменять дополнение к адресу доставки?", 
						РежимДиалогаВопрос.ДаНет, , , "Изменение дополнения к адресу доставки");
						
						ИзменятьДополнениеКАдресуДоставки = (Ответ = КодВозвратаДиалога.Да);	
					
					#КонецЕсли  
					//18.10.2017 Островерхий} 
						
				КонецЕсли;
				
				// Изменяем дополнение к адресу доставки при необходимости
				Если ИзменятьДополнениеКАдресуДоставки Тогда
					ДокументОбъект.ДополнениеКАдресуДоставки = СтруктураАдреса.Комментарий;
				КонецЕсли;	
			КонецЕсли;
						
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры
 
Функция ПолучимНастройкиПечатнойФормы(мСсылка, мКонтрагент, мПечатнаяФорма, ОтборПоТСД = Истина, мКомплектТСД = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АП_НастройкиПечатныхФорм.НастройкаПечатнойФормы КАК НастройкаПечатнойФормы
	               |ИЗ
	               |	РегистрСведений.АП_НастройкиПечатныхФорм КАК АП_НастройкиПечатныхФорм
	               |ГДЕ
	               |	АП_НастройкиПечатныхФорм.Объект = &Объект
	               |	И АП_НастройкиПечатныхФорм.ПечатнаяФорма = &ПечатнаяФорма
				   |	//ДопОтборПоТСД
				   |";
				   
	Запрос.УстановитьПараметр("Объект", мКонтрагент);
	Запрос.УстановитьПараметр("ПечатнаяФорма", мПечатнаяФорма);
	
	Если ОтборПоТСД Тогда
		
		Если Не мКомплектТСД = Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборПоТСД", " И АП_НастройкиПечатныхФорм.ТСД В (&ТСД)"); 
			Запрос.УстановитьПараметр("ТСД", мКомплектТСД);
				
		Иначе
			Если ТипЗнч(мСсылка) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборПоТСД", " И АП_НастройкиПечатныхФорм.ТСД = &ТСД"); 
				Запрос.УстановитьПараметр("ТСД", мСсылка.КомплектТСД);
				
			ИначеЕсли ТипЗнч(мСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(мСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда 
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборПоТСД", " И АП_НастройкиПечатныхФорм.ТСД = &ТСД"); 
				Запрос.УстановитьПараметр("ТСД", мСсылка.СП_ЗаданиеНаПодбор.КомплектТСД);
				
			ИначеЕсли ТипЗнч(мСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
				
				Если НЕ мСсылка.ДокументыОснования.Количество() = 0 Тогда
					
					Если ТипЗнч(мСсылка.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборПоТСД", " И АП_НастройкиПечатныхФорм.ТСД = &ТСД"); 
						Запрос.УстановитьПараметр("ТСД", мСсылка.ДокументыОснования[0].ДокументОснование.СП_ЗаданиеНаПодбор.КомплектТСД);
						
					КонецЕсли;				
					
				КонецЕсли;  
				
			ИначеЕсли ТипЗнч(мСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
				
				мЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(мСсылка);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборПоТСД", " И АП_НастройкиПечатныхФорм.ТСД = &ТСД"); 
				Запрос.УстановитьПараметр("ТСД", мЗаданиеНаПодбор.КомплектТСД);
				
			ИначеЕсли ТипЗнч(мСсылка) = Тип("ДокументСсылка.ПТЛ_ЗаданиеНаПеревозку") Тогда 
				
				//мЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(мСсылка);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборПоТСД", " И АП_НастройкиПечатныхФорм.ТСД = &ТСД"); 
				Запрос.УстановитьПараметр("ТСД", мСсылка.ЗаданиеНаПодбор.КомплектТСД);
				
			ИначеЕсли ТипЗнч(мСсылка) = Тип("ДокументСсылка.ПТЛ_ПланДоставки") Тогда
				
				мЗапрос = Новый Запрос;
				мЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор.Получатель КАК Получатель,
				|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор.КомплектТСД КАК ТСД
				|ИЗ
				|	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
				|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = ПТЛ_ПланДоставкиМаршруты.Ссылка
				|			И ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки = ПТЛ_ПланДоставкиМаршруты.КлючСтроки
				|ГДЕ
				|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка И ПТЛ_ПланДоставкиЗаданияНаПеревозку.Исключено = Ложь
				//|	И ПТЛ_ПланДоставкиМаршруты.Рейс = &Рейс";
				|";
				мЗапрос.УстановитьПараметр("Ссылка", мСсылка);
				
				Результат = мЗапрос.Выполнить().Выгрузить();
				
				//СписокПолучателей = Результат.ВыгрузитьКолонку("Получатель");
				ФильтрТСД = Результат.ВыгрузитьКолонку("ТСД");
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборПоТСД", " И АП_НастройкиПечатныхФорм.ТСД В (&ТСД)"); 
				Запрос.УстановитьПараметр("ТСД", ФильтрТСД);
				
			КонецЕсли; 		
			
		КонецЕсли;		
	
	КонецЕсли;  
	
	Результат = Запрос.Выполнить().Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока Результат.Следующий() Цикл		
		МассивПараметров.Добавить(Результат.НастройкаПечатнойФормы);		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции // ()
 
Функция ТребуетсяЗаданиеНаПеревозку(АЗаказ) Экспорт
	//начало изменений Ожиганов 17.07.2015 немного оптимизируем 
	
	//конец изменений 
	Если (ТипЗнч(АЗаказ) = Тип("ДокументОбъект.ВнутреннийЗаказ") ИЛИ ТипЗнч(АЗаказ) = Тип("ДокументСсылка.ВнутреннийЗаказ")) Тогда
		//начало изменений Ожиганов 20.07.2015 избавимвся от лишней перезаписи  
		Заказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(АЗаказ,Новый Структура("КП_УсловиеПоставки"));
		//конец изменений 
		Если Заказ.КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	//начало изменений Ожиганов 20.07.2015 избавимвся от лишней перезаписи  
	Заказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(АЗаказ,Новый Структура("КП_УсловиеПоставки,КП_ВидЗаказаПокупателя"));
	//конец изменений 
	Если Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя
		ИЛИ Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка
		//{01.04.2015 Островерхий заявка №36501 
		ИЛИ Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСимов 
		//01.04.2015 Островерхий}
		Тогда
		Возврат Ложь;
		
	ИначеЕсли (Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСотруднику
		ИЛИ Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ПредставительскиеРасходы
		ИЛИ Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.АнализыЛаборатории) 
		И Заказ.КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
		
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ТребуетсяЗаданиеНаПодбор(АЗаказ) Экспорт
	//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
	Заказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(АЗаказ,Новый Структура("КП_ВидЗаказаПокупателя"));
	Если Заказ = Неопределено тогда возврат Истина; конецесли;
	//конец изменений  
	Если Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя
		ИЛИ Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка 
		//{01.04.2015 Островерхий заявка №36501 
		ИЛИ Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСимов 
		//01.04.2015 Островерхий} 
		Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

//Поиск дубликатов строк с заданными параметрами
//Обратывается при записи
//л_Метаданные = "Документ.ФБ_ПланПеревозки.ЗаданияНаПеревозку"; //указываем Таблицу, синтаксис как в запросе
//л_МассивРеквизитовТЧ = Новый Массив;
//л_МассивРеквизитовТЧ.Добавить("Задание");
Функция АП_ПроверкаДубликатовСтрок_ТолькоСсылки(ф_Метаданные, МассивРеквизитовТЧ, Объект) Экспорт
	
    //Находим имя ТЧ документа
	ИмяТЧ = Прав(ф_Метаданные, СтрДлина(ф_Метаданные) - Найти(ф_Метаданные, "."));
	ИмяТЧ = Прав(ИмяТЧ, СтрДлина(ИмяТЧ) - Найти(ИмяТЧ, "."));
	
	//Состояние флага не изменится, если повторов не будет найдено
	п_Ошибка = Ложь;
	
	//Формируем запрос: повтор определяется в случае двухкратного и более вхождения строки в ТЧ документа
	ТекстЗапросаОсн = "ВЫБРАТЬ ";
	ТекстЗапросаВлож = "ВЫБРАТЬ ";
	ТекстГруппировокВлож = "	СГРУППИРОВАТЬ ПО ";
	Для сч = 0 По МассивРеквизитовТЧ.Количество()-1 Цикл
		ТекстЗапросаОсн = ТекстЗапросаОсн + "
									|	ВложенныйЗапрос." + МассивРеквизитовТЧ[сч] + ", ";
		ТекстЗапросаВлож = ТекстЗапросаВлож + "
									|		Таблица." + МассивРеквизитовТЧ[сч] + " КАК " + МассивРеквизитовТЧ[сч] + ", ";
		ТекстГруппировокВлож = ТекстГруппировокВлож + "
									|	Таблица." + МассивРеквизитовТЧ[сч] + ", ";
	КонецЦикла;
	ТекстГруппировокВлож = Лев(ТекстГруппировокВлож, СтрДлина(ТекстГруппировокВлож)-2);
	
	ТекстЗапросаВлож = ТекстЗапросаВлож + "
	               |		КОЛИЧЕСТВО(Таблица.НомерСтроки) КАК КоличествоДубликатов,
	               |		МАКСИМУМ(Таблица.НомерСтроки) КАК НомерСтроки
	               |	ИЗ
	               |		" + ф_Метаданные + " КАК Таблица
	               |	ГДЕ
	               |		Таблица.Ссылка = &Объект";
	ТекстЗапроса = ТекстЗапросаОсн + "
								|	ВложенныйЗапрос.КоличествоДубликатов,
								|	ВложенныйЗапрос.НомерСтроки
								|ИЗ
								|	(" + ТекстЗапросаВлож + "
								|" + ТекстГруппировокВлож + ") КАК ВложенныйЗапрос
								|ГДЕ
								|	ВложенныйЗапрос.КоличествоДубликатов > 1
								|УПОРЯДОЧИТЬ ПО
								|	ВложенныйЗапрос.НомерСтроки";
								
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Объект", Объект);
	РезЗапроса = Запрос.Выполнить();
	Выборка = РезЗапроса.Выбрать();
	
	//Если дубликатов не найдено, то выборка пустая
	Если Выборка.Количество() > 0 Тогда
		п_Ошибка = истина;
		ОбщегоНазначения.СообщитьОбОшибке("В табличной части """ + СокрЛП(ИмяТЧ) + """ имеются дубликаты строк: ");
		//Выводим дубликаты строк
		Пока Выборка.Следующий() Цикл
			п_ТекстОшибки = "Строка: " + СокрЛП(Выборка.НомерСтроки) + "
			|	";
			Для сч = 0 По МассивРеквизитовТЧ.Количество()-1 Цикл
				п_ТекстОшибки = п_ТекстОшибки + " " +  МассивРеквизитовТЧ[сч] + ": """ + СокрЛП(Выборка[сч]) + """.";
			КонецЦикла;
			п_ТекстОшибки = п_ТекстОшибки + "
							|";
			Сообщить(п_ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат п_Ошибка;
	
Конецфункции

//начало изменений Ожиганов 22.07.2015 оптимизация выгрузки мобильной торговли
Функция ПолучитьСтруктуруВесовИКолВоДляЗаданияНаПеревозку(ТекДок) Экспорт 
	Результат  =  Новый Структура("КоличествоМестПлан,ВесБруттоПлан,ОбъемПлан,ВесПлан,ВесФакт,
		|КоличествоМестФакт,ВесБруттоФакт,ОбъемФакт,КоличествоМестФакт,КоличествоПаллетоМестФакт,КоличествоПаллетоМестПлан",0,0,0,0,0,0,0,0,0,0,0);

	Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
		ТекстЗапроса =	"ВЫБРАТЬ
		                   	|	ЕСТЬNULL(СП_ЗаданиеНаПодбор.Заказ.КП_КоличествоПаллетоМест, 0) КАК КоличествоПаллетоМестПлан,
		                   	|	СП_ЗаданиеНаПодбор.Ссылка,
		                   	|	СП_ЗаданиеНаПодбор.КоличествоПаллетоМест КАК КоличествоПаллетоМестФакт
		                   	|ПОМЕСТИТЬ ПалетоМест
		                   	|ИЗ
		                   	|	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
		                   	|ГДЕ
		                   	|	СП_ЗаданиеНаПодбор.Ссылка = &Ссылка
		                   	|;
		                   	|
		                   	|////////////////////////////////////////////////////////////////////////////////
		                   	|ВЫБРАТЬ
		                   	|	ЕСТЬNULL(СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМест), 0) КАК КоличествоМестПлан,
		                   	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		                   	|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		                   	|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес * СП_ЗаданиеНаПодборТовары.КоличествоМест
		                   	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Вес * СП_ЗаданиеНаПодборТовары.Количество
		                   	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоПлан,
		                   	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		                   	|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		                   	|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоМест
		                   	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.Количество
		                   	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесПлан,
		                   	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		                   	|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		                   	|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем * СП_ЗаданиеНаПодборТовары.КоличествоМест
		                   	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Объем * СП_ЗаданиеНаПодборТовары.Количество
		                   	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемПлан,
		                   	|	ЕСТЬNULL(СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМестФакт), 0) КАК КоличествоМестФакт,
		                   	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		                   	|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		                   	|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		                   	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Вес * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		                   	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоФакт,
		                   	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		                   	|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		                   	|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		                   	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Объем * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		                   	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемФакт,
		                   	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		                   	|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		                   	|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		                   	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		                   	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесФакт,
		                   	|	ЕСТЬNULL(МИНИМУМ(ПланПалетоМест.КоличествоПаллетоМестПлан), 0) КАК КоличествоПаллетоМестПлан,
		                   	|	ЕСТЬNULL(МИНИМУМ(ПланПалетоМест.КоличествоПаллетоМестФакт), 0) КАК КоличествоПаллетоМестФакт
		                   	|ИЗ
		                   	|	ПалетоМест КАК ПланПалетоМест
		                   	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
		                   	|		ПО ПланПалетоМест.Ссылка = СП_ЗаданиеНаПодборТовары.Ссылка
		                   	|ГДЕ
		                   	|	СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка";
	ИначеЕсли ТипЗнч(ТекДок) = Тип("ДокументСсылка.ВнутреннийЗаказ") 
		или ТипЗнч(ТекДок) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		     
		ТекстЗапроса  =   "ВЫБРАТЬ
                            |	ЕСТЬNULL(СУММА(ЗаказТовары.КоличествоМест), 0) КАК КоличествоМестПлан,
                            |	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
                            |					КОГДА ЗаказТовары.КоличествоМест <> 0
                            |						ТОГДА ЗаказТовары.ЕдиницаИзмеренияМест.Вес * ЗаказТовары.КоличествоМест
                            |					ИНАЧЕ ЗаказТовары.ЕдиницаИзмерения.Вес * ЗаказТовары.Количество
                            |				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоПлан,
                            |	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
                            |					КОГДА ЗаказТовары.КоличествоМест <> 0
                            |						ТОГДА ЗаказТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * ЗаказТовары.КоличествоМест
                            |					ИНАЧЕ ЗаказТовары.ЕдиницаИзмерения.ПРГ_Нетто * ЗаказТовары.Количество
                            |				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесПлан,
                            |	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
                            |					КОГДА ЗаказТовары.КоличествоМест <> 0
                            |						ТОГДА ЗаказТовары.ЕдиницаИзмеренияМест.Объем * ЗаказТовары.КоличествоМест
                            |					ИНАЧЕ ЗаказТовары.ЕдиницаИзмерения.Объем * ЗаказТовары.Количество
                            |				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемПлан,
                            |	ЕСТЬNULL(МИНИМУМ(ЗаказТовары.Ссылка.КП_КоличествоПаллетоМест), 0) КАК КоличествоПаллетоМестПлан,
                            |	ЕСТЬNULL(СУММА(ЗаказТовары.КоличествоМест), 0) КАК КоличествоМестФакт,
                            |	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
                            |					КОГДА ЗаказТовары.КоличествоМест <> 0
                            |						ТОГДА ЗаказТовары.ЕдиницаИзмеренияМест.Вес * ЗаказТовары.КоличествоМест
                            |					ИНАЧЕ ЗаказТовары.ЕдиницаИзмерения.Вес * ЗаказТовары.Количество
                            |				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоФакт,
                            |	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
                            |					КОГДА ЗаказТовары.КоличествоМест <> 0
                            |						ТОГДА ЗаказТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * ЗаказТовары.КоличествоМест
                            |					ИНАЧЕ ЗаказТовары.ЕдиницаИзмерения.ПРГ_Нетто * ЗаказТовары.Количество
                            |				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесФакт,
                            |	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
                            |					КОГДА ЗаказТовары.КоличествоМест <> 0
                            |						ТОГДА ЗаказТовары.ЕдиницаИзмеренияМест.Объем * ЗаказТовары.КоличествоМест
                            |					ИНАЧЕ ЗаказТовары.ЕдиницаИзмерения.Объем * ЗаказТовары.Количество
                            |				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемФакт,
                            |	ЕСТЬNULL(МИНИМУМ(ЗаказТовары.Ссылка.КП_КоличествоПаллетоМест), 0) КАК КоличествоПаллетоМестФакт
                            |ИЗ
                            |	Документ."+ТекДок.Метаданные().Имя+".Товары КАК ЗаказТовары
                            |ГДЕ
                            |	ЗаказТовары.Ссылка = &Ссылка";
		Иначе 
		ВызватьИсключение "не поддерживается определение весов для "+ТекДок; 					
	КонецЕсли;		
						
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",ТекДок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		 ЗаполнитьЗначенияСвойств(Результат,Выборка);
	КонецЕсли;	
	
	возврат Результат;
	
КонецФункции	

//Blik 261016 57270 н
Функция ПолучитьСтруктуруВесовИКолВоДляЗаказаПоставщика(ТекДок,ДатаОтгрузки,ДатаДоставки) Экспорт 
	Результат  =  Новый Структура("КоличествоМестПлан,ВесБруттоПлан,ОбъемПлан,ВесПлан,ВесФакт,
		|КоличествоМестФакт,ВесБруттоФакт,ОбъемФакт,КоличествоМестФакт,КоличествоПаллетоМестФакт,КоличествоПаллетоМестПлан",0,0,0,0,0,0,0,0,0,0,0);

	Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ТекстЗапроса =	"ВЫБРАТЬ
					  	|	ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.КоличествоМест), 0) КАК КоличествоМестПлан,
					  	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
					  	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
					  	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Вес * ЗаказПоставщикуТовары.КоличествоМест
					  	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.Вес * ЗаказПоставщикуТовары.Количество
					  	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоПлан,
					  	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
					  	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
					  	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * ЗаказПоставщикуТовары.КоличествоМест
					  	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.ПРГ_Нетто * ЗаказПоставщикуТовары.Количество
					  	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесПлан,
					  	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
					  	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
					  	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Объем * ЗаказПоставщикуТовары.КоличествоМест
					  	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.Объем * ЗаказПоставщикуТовары.Количество
					  	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемПлан,
					  	|	ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.Коэффициент / ЗаказПоставщикуТовары.Номенклатура.НСИ_ЕдиницаИзмеренияПаллет.Коэффициент), 0) КАК КоличествоПаллетоМестПлан,
					  	|	ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.КоличествоМест), 0) КАК КоличествоМестФакт,
					  	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
					  	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
					  	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Вес * ЗаказПоставщикуТовары.КоличествоМест
					  	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.Вес * ЗаказПоставщикуТовары.Количество
					  	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоФакт,
					  	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
					  	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
					  	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * ЗаказПоставщикуТовары.КоличествоМест
					  	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.ПРГ_Нетто * ЗаказПоставщикуТовары.Количество
					  	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесФакт,
					  	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
					  	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
					  	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Объем * ЗаказПоставщикуТовары.КоличествоМест
					  	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.Объем * ЗаказПоставщикуТовары.Количество
					  	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемФакт,
					  	|	ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.Коэффициент / ЗаказПоставщикуТовары.Номенклатура.НСИ_ЕдиницаИзмеренияПаллет.Коэффициент), 0) КАК КоличествоПаллетоМестФакт
					  	|ИЗ
					  	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
					  	|ГДЕ
					  	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
					  	|	И КОНЕЦПЕРИОДА(ЗаказПоставщикуТовары.ТП_ДатаОтгрузкитч, ДЕНЬ) = КОНЕЦПЕРИОДА(&ТП_ДатаОтгрузки, ДЕНЬ)
					  	|	И КОНЕЦПЕРИОДА(ЗаказПоставщикуТовары.ДатаПоставки, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаПоставки, ДЕНЬ)";
      	Иначе 
		ВызватьИсключение "не поддерживается определение весов для "+ТекДок; 					
	КонецЕсли;		
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",ТекДок);
	Запрос.УстановитьПараметр("ТП_ДатаОтгрузки",ДатаОтгрузки);
	Запрос.УстановитьПараметр("ДатаПоставки",ДатаДоставки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		 ЗаполнитьЗначенияСвойств(Результат,Выборка);
	КонецЕсли;	
	
	возврат Результат;
	
КонецФункции
Функция ПолучитьСтруктуруВесовИКолВоДляЗаказаПоставщикаСоставЗадания(ССылкаНаЗадание) Экспорт 
	Результат  =  Новый Структура("КоличествоМестПлан,ВесБруттоПлан,ОбъемПлан,ВесПлан,ВесФакт,
	|КоличествоМестФакт,ВесБруттоФакт,ОбъемФакт,КоличествоМестФакт,КоличествоПаллетоМестФакт,КоличествоПаллетоМестПлан",0,0,0,0,0,0,0,0,0,0,0);
	
	Если ТипЗнч(ССылкаНаЗадание.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		//факта пока нет
		ТекстЗапроса =	"ВЫБРАТЬ
		              	|	0 КАК КоличествоМестПлан,
		              	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПТЛ_ЗаданиеНаПеревозку.ТП_ВесБрутто, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоПлан,
		              	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПТЛ_ЗаданиеНаПеревозку.ТП_ВесНетто, 0) КАК ЧИСЛО(15, 3)) КАК ВесПлан,
		              	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПТЛ_ЗаданиеНаПеревозку.ТП_Объем, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемПлан,
		              	|	ЕСТЬNULL(ПТЛ_ЗаданиеНаПеревозку.ТП_КоличествоПалеттоМест, 0) КАК КоличествоПаллетоМестПлан,
		              	|	0 КАК КоличествоМестФакт,
		              	|	0 КАК ВесБруттоФакт,
		              	|	0 КАК ВесФакт,
		              	|	0 КАК ОбъемФакт,
		              	|	0 КАК КоличествоПаллетоМестФакт
		              	|ИЗ
		              	|	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
		              	|ГДЕ
		              	|	ПТЛ_ЗаданиеНаПеревозку.Ссылка = &Ссылка";
	Иначе 
		ВызватьИсключение "не поддерживается определение весов для "+ССылкаНаЗадание; 					
	КонецЕсли;		
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",ССылкаНаЗадание);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат,Выборка);
	КонецЕсли;	
	
	возврат Результат;
	
КонецФункции

Функция ПолучитьТабВесовИКолВоДляЗаданияНаПеревозкуПоЗакПост(ТекДок,ДатаОтгрузки,ДатаДоставки) Экспорт 

	Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		//фактические значения нужно определить как заполнять
		ТекстЗапроса =	"ВЫБРАТЬ
		              	|	ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.КоличествоМест), 0) КАК КоличествоМестПлан,
		              	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		              	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
		              	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Вес * ЗаказПоставщикуТовары.КоличествоМест
		              	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.Вес * ЗаказПоставщикуТовары.Количество
		              	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоПлан,
		              	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		              	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
		              	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * ЗаказПоставщикуТовары.КоличествоМест
		              	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.ПРГ_Нетто * ЗаказПоставщикуТовары.Количество
		              	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесПлан,
		              	|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		              	|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
		              	|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Объем * ЗаказПоставщикуТовары.КоличествоМест
		              	|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.Объем * ЗаказПоставщикуТовары.Количество
		              	|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемПлан,
		              	|	ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.Коэффициент / ЗаказПоставщикуТовары.Номенклатура.НСИ_ЕдиницаИзмеренияПаллет.Коэффициент), 0) КАК КоличествоПаллетоМестПлан,
						//|	ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.КоличествоМест), 0) КАК КоличествоМестФакт,
						//|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
						//|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
						//|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Вес * ЗаказПоставщикуТовары.КоличествоМест
						//|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.Вес * ЗаказПоставщикуТовары.Количество
						//|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоФакт,
						//|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
						//|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
						//|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Объем * ЗаказПоставщикуТовары.КоличествоМест
						//|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.Объем * ЗаказПоставщикуТовары.Количество
						//|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемФакт,
						//|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
						//|					КОГДА ЗаказПоставщикуТовары.КоличествоМест <> 0
						//|						ТОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * ЗаказПоставщикуТовары.КоличествоМест
						//|					ИНАЧЕ ЗаказПоставщикуТовары.ЕдиницаИзмерения.ПРГ_Нетто * ЗаказПоставщикуТовары.Количество
						//|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесФакт,
						|	0 КАК КоличествоМестФакт,
		              	|	0 КАК ВесБруттоФакт,
		              	|	0 КАК ОбъемФакт,
		                |	0 КАК ВесФакт,
		              	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
		              	|	ЗаказПоставщикуТовары.Коэффициент,
		              	|	ЗаказПоставщикуТовары.Номенклатура,
		              	|	ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.Количество), 0) КАК Количество,
		              	|	0 КАК КоличествоФакт,
						|   ЕСТЬNULL(СУММА(ЗаказПоставщикуТовары.ТП_КоличествоПалеттоМест),0) КАК Паллет
		              	|ИЗ
		              	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		              	|ГДЕ
		              	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
		              	|	И КОНЕЦПЕРИОДА(ЗаказПоставщикуТовары.ТП_ДатаОтгрузкитч, ДЕНЬ) = КОНЕЦПЕРИОДА(&ТП_ДатаОтгрузки, ДЕНЬ)
		              	|	И КОНЕЦПЕРИОДА(ЗаказПоставщикуТовары.ДатаПоставки, ДЕНЬ) = КОНЕЦПЕРИОДА(&ДатаПоставки, ДЕНЬ)
		              	|
		              	|СГРУППИРОВАТЬ ПО
		              	|	ЗаказПоставщикуТовары.Номенклатура,
		              	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
		              	|	ЗаказПоставщикуТовары.НомерСтроки,
		              	|	ЗаказПоставщикуТовары.Коэффициент
		              	|
		              	|УПОРЯДОЧИТЬ ПО
		              	|	ЗаказПоставщикуТовары.НомерСтроки";
	Иначе
		возврат Новый ТаблицаЗначений;					
	КонецЕсли;		
						
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",ТекДок);
	Запрос.УстановитьПараметр("ТП_ДатаОтгрузки",ДатаОтгрузки);
	Запрос.УстановитьПараметр("ДатаПоставки",ДатаДоставки);

	возврат Запрос.Выполнить().выгрузить();
	
КонецФункции
//Blik 261016 57270 к

Функция ПолучитьТабВесовИКолВоДляЗаданияНаПеревозку(ТекДок) Экспорт 

	Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
		ТекстЗапроса =	"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМест), 0) КАК КоличествоМестПлан,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Вес * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоПлан,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесПлан,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Объем * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемПлан,
		|	ЕСТЬNULL(СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМестФакт), 0) КАК КоличествоМестФакт,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Вес * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоФакт,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Объем * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемФакт,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесФакт,
		|	СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения,
		|	СП_ЗаданиеНаПодборТовары.Коэффициент,
		|	СП_ЗаданиеНаПодборТовары.Номенклатура,
		|	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.Количество, 0) КАК Количество,
		|	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.КоличествоФакт, 0) КАК КоличествоФакт
		|ИЗ
		|	Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
		|ГДЕ
		|	СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СП_ЗаданиеНаПодборТовары.Номенклатура,
		|	СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения,
		|	СП_ЗаданиеНаПодборТовары.НомерСтроки,
		|	СП_ЗаданиеНаПодборТовары.Коэффициент,
		|	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.Количество, 0),
		|	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.КоличествоФакт, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СП_ЗаданиеНаПодборТовары.НомерСтроки";
		//Blik 150817 65458 н
	ИначеЕсли ТипЗнч(ТекДок) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		 ТекстЗапроса =	"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМест), 0) КАК КоличествоМестПлан,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Вес * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоПлан,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесПлан,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Объем * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемПлан,
		//|	ЕСТЬNULL(СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМестФакт), 0) КАК КоличествоМестФакт,
		//|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		//|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		//|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		//|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Вес * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		//|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоФакт,
		//|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		//|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		//|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		//|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Объем * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		//|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемФакт,
		//|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		//|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМестФакт <> 0
		//|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоМестФакт
		//|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоФакт
		//|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесФакт,
		|	ЕСТЬNULL(СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМест), 0) КАК КоличествоМестФакт,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Вес * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесБруттоФакт,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Объем * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ОбъемФакт,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест <> 0
		|						ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоМест
		|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.Количество
		|				КОНЕЦ) / 1000, 0) КАК ЧИСЛО(15, 3)) КАК ВесФакт,
		|	СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения,
		|	СП_ЗаданиеНаПодборТовары.Коэффициент,
		|	СП_ЗаданиеНаПодборТовары.Номенклатура,
		|	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.Количество, 0) КАК Количество,
		|	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.Количество, 0) КАК КоличествоФакт
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК СП_ЗаданиеНаПодборТовары
		|ГДЕ
		|	СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СП_ЗаданиеНаПодборТовары.Номенклатура,
		|	СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения,
		|	СП_ЗаданиеНаПодборТовары.НомерСтроки,
		|	СП_ЗаданиеНаПодборТовары.Коэффициент,
		|	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.Количество, 0),
		|	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.Количество, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СП_ЗаданиеНаПодборТовары.НомерСтроки";
		//Blik 150817 65458 к
	Иначе
		возврат Новый ТаблицаЗначений;					
	КонецЕсли;		
						
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",ТекДок);
	
	возврат Запрос.Выполнить().выгрузить();
	
КонецФункции	


