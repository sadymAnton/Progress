
//Функция получает типы регламентных документов, которые дожны быть созданы для переданой точки маршрута бизнес-процесса (регламентной операции)
//	Если точка маршрута не передана, получаются типы документов для всех регламентных операций
//Параметры: ТочкаМаршрута - ссылка на точку маршрута бизнес-процесса
//Возвращаемое значение: Массив (если точка маршрута передана) либо Таблица значений (если точка маршрута не передана)
Функция ПолучитьСписокТиповДокументов(ТочкаМаршрута = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыРегламентныхОпераций.ТипДокумента,
	|	ДокументыРегламентныхОпераций.ТочкаМаршрута
	|ИЗ
	|	РегистрСведений.ДокументыРегламентныхОпераций КАК ДокументыРегламентныхОпераций
	|ГДЕ
	|	ДокументыРегламентныхОпераций.ТипДокумента <> """"";
	
	Если ТочкаМаршрута <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДокументыРегламентныхОпераций.ТочкаМаршрута = &ТочкаМаршрута";
		Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ТочкаМаршрута <> Неопределено Тогда
		Возврат Результат.ВыгрузитьКолонку("ТипДокумента");
	Иначе	
		Возврат Результат;
	КонецЕсли;
КонецФункции

//Функция получает таблицу документов, созданных в рамках выполнения регламентной операции
//Параметры: БизнесПроцесс	- процесс закрытия месяца,
//	СписокТиповДокументов	- типы документов которые должны быть созданы в рамках регламентной операции
//	ТочкаМаршрута 			- ссылка на точку маршрута бизнес-процесса
//Возвращаемое значение - ТаблицаЗначений, содержащая документы и их ключевые реквизиты (признаки отражения в учетах, признак проведения и т.д.)
Функция ЗаполнитьТаблицуСуществующихДокументов(БизнесПроцесс, СписокТиповДокументов, ТочкаМаршрута) Экспорт
	ТекстЗапроса = "";
	//Определяем, для какого бизнес-процесса была создана задача
	ГлавныйБизнесПроцесс = ОпределитьГлавныйБизнесПроцесс(БизнесПроцесс);
	СтруктураПризнаковОтраженияВУчете = новый Структура("ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете",ГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете,ГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете,ГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете);
	Для каждого ТипДокумента Из СписокТиповДокументов Цикл
		Если ТипДокумента = "" Тогда
			Продолжить;
		КонецЕсли;
		
		МетаРеквизитыДок = Метаданные.Документы[ТипДокумента].Реквизиты;
		
		ЕстьРеквизитОрганизация 		= МетаРеквизитыДок.Найти("Организация") 					<> Неопределено;
		ЕстьРеквизитОтветственный 		= МетаРеквизитыДок.Найти("Ответственный") 					<> Неопределено;
		ЕстьРеквизитБУ 					= МетаРеквизитыДок.Найти("ОтражатьВБухгалтерскомУчете") 	<> Неопределено;
		ЕстьРеквизитНУ 					= МетаРеквизитыДок.Найти("ОтражатьВНалоговомУчете") 		<> Неопределено;
		ЕстьРеквизитУУ 					= МетаРеквизитыДок.Найти("ОтражатьВУправленческомУчете") 	<> Неопределено;
		ЕстьРеквизитПериодРегистрации 	= МетаРеквизитыДок.Найти("ПериодРегистрации") 				<> Неопределено;
		
		ПериодичностьДокумента = ОпределитьПериодичностьДокумента(ТипДокумента);

		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","ВЫБРАТЬ РАЗРЕШЕННЫЕ","
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|") + "
		|	Док.Ссылка 																					КАК Документ,
		|	Док.ПометкаУдаления 																		КАК ПометкаУдаления,
		|	Док.Проведен 																				КАК Проведен
		|	, ПРЕДСТАВЛЕНИЕ(Док.Ссылка) 																КАК ДокументПредставление
		|	, """ + ТипДокумента + """ 																	КАК ТипДокумента
		|	, " + ?(ЕстьРеквизитОрганизация,	"Док.Организация","&ПустаяОрганизация") + " 			КАК Организация
		|	, " + ?(ЕстьРеквизитОрганизация,	"ПРЕДСТАВЛЕНИЕ(Док.Организация)","""""") + " 			КАК ОрганизацияПредставление
		|	, " + ?(ЕстьРеквизитОтветственный,	"Док.Ответственный",	"&ПустойОтветственный") + "		КАК Ответственный
		|	, " + ?(ЕстьРеквизитОтветственный,	"ПРЕДСТАВЛЕНИЕ(Док.Ответственный)","""""") + " 			КАК ОтветственныйПредставление
		|	, " + ?(ЕстьРеквизитБУ,				"Док.ОтражатьВБухгалтерскомУчете","ЛОЖЬ") + " 			КАК ОтражатьВБухгалтерскомУчете
		|	, " + ?(ЕстьРеквизитНУ,				"Док.ОтражатьВНалоговомУчете","ЛОЖЬ") + " 				КАК ОтражатьВНалоговомУчете
		|	, " + ?(ЕстьРеквизитУУ,				"Док.ОтражатьВУправленческомУчете","ЛОЖЬ") + " 			КАК ОтражатьВУправленческомУчете
		|
		|ИЗ Документ."+ТипДокумента + " КАК Док
		|ГДЕ  "+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеПериодРегистрации(ЕстьРеквизитПериодРегистрации,
																				"Док",
																				"&ЗакрытиеМесяцаПериодРегистрации",
																				ПериодичностьДокумента)+"
		| " + БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОрганизация(ЕстьРеквизитОрганизация,
																				"Док",
																				"&ЗакрытиеМесяцаОрганизация",
																				Истина)+"
		| "+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОтражениеВУчете(Новый Структура("УУ,БУ,НУ",ЕстьРеквизитУУ,ЕстьРеквизитБУ,ЕстьРеквизитНУ), 
																				СтруктураПризнаковОтраженияВУчете,
																				"Док", 
																				ТочкаМаршрута, 
																				ГлавныйБизнесПроцесс.ПериодРегистрации) + "
		| "+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеФормированиеЗаписейКнигиПродажПокупокСтавка0("Док", ТочкаМаршрута);
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаПериодРегистрации", 	ГлавныйБизнесПроцесс.ПериодРегистрации);
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаОрганизация", 			ГлавныйБизнесПроцесс.Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", 					Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойОтветственный", 				Справочники.Пользователи.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции

//Функция получает строку: дополнение к запросу с условием по периоду регистрации
//Параметры:
//		ЕстьРеквизитПериодРегистрации 	- булево, признак наличия реквизита "ПериодРегистрации"
//		ПсевдонимТаблицы 				- строка, псеводним таблицы в запросе
//		ИмяПараметраСравнения 			- строка, параметр запроса с которым происходит сравнение реквизита
//		Периодичность 					- строка, периодичность к которой следует привести параметр сравнения и период регистрации
//Возвращаемое значение - строка, дополнение к запросу содержащее текст условия по периоду регистрации документа
Функция СформироватьУсловиеПериодРегистрации(ЕстьРеквизитПериодРегистрации,ПсевдонимТаблицы,ИмяПараметраСравнения,Периодичность="Месяц") Экспорт
	ТекстУсловия = "";
	Если ЕстьРеквизитПериодРегистрации Тогда
		ТекстУсловия = ТекстУсловия + ПсевдонимТаблицы+".ПериодРегистрации";
	Иначе
		ТекстУсловия = ТекстУсловия + ПсевдонимТаблицы+".Дата";
	КонецЕсли;
	ТекстУсловия = "НАЧАЛОПЕРИОДА("+ТекстУсловия+", "+Периодичность+") = НАЧАЛОПЕРИОДА("+ИмяПараметраСравнения+", "+Периодичность+")";
	Возврат ТекстУсловия;
КонецФункции

//Функция получает строку: дополнение к запросу с условием по организации
//Параметры:
//		ЕстьРеквизитОрганизация 	- булево, признак наличия реквизита "Организация"
//		ПсевдонимТаблицы 			- строка, псеводним таблицы в запросе
//		ИмяПараметраСравнения 		- строка, параметр запроса с которым происходит сравнение реквизита
//		УчитыватьПустую 			- булево, признак того что условие должно включать проверку пустой организации
//Возвращаемое значение - строка, дополнение к запросу содержащее текст условия по организации документа
Функция СформироватьУсловиеОрганизация(ЕстьРеквизитОрганизация,ПсевдонимТаблицы,ИмяПараметраСравнения,УчитыватьПустую) Экспорт
	Если НЕ ЕстьРеквизитОрганизация Тогда
		Возврат "";
	КонецЕсли;
	РеквизитОрганизация = ПсевдонимТаблицы+".Организация";
	ТекстУсловия = " И ("+РеквизитОрганизация+" = "+ИмяПараметраСравнения;
	Если УчитыватьПустую Тогда
		ТекстУсловия = ТекстУсловия + " ИЛИ "+РеквизитОрганизация+" = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
	Иначе
		ТекстУсловия = ТекстУсловия + ")";
	КонецЕсли;
	
	Возврат ТекстУсловия;
КонецФункции

//Функция получает строку: дополнение к запросу с условием по признакам отражения в учете
//Параметры:
//		ЕстьРеквизитыОтраженияВУчетах 		- структура, содержит признаки наличия реквизитов отражения в учетах (УУ, БУ, НУ)
//		ЗначенияПризнаковОтраженияВУчетах 	- структура, искомые признаки отражения в учетах, с которыми происходит сравнение
//		ПсевдонимТаблицы 					- строка, псеводним таблицы в запросе
//		ТочкаМаршрута 						- ссылка на точку маршрута бизнес-процесса
//		ПериодРегистрации 					- период, за который выполняется бизнес-процесс
//Возвращаемое значение - строка, дополнение к запросу содержащее текст условия по признакам отражения в учете документа
Функция СформироватьУсловиеОтражениеВУчете(ЕстьРеквизитыОтраженияВУчетах,ЗначенияПризнаковОтраженияВУчетах, ПсевдонимТаблицы, ТочкаМаршрута, ПериодРегистрации) Экспорт
	ТекстЗапросаУсловие = "";
	текЗначенияПризнаковОтраженияВУчетах = СкорректироватьОтражениеВУчете(ЗначенияПризнаковОтраженияВУчетах, ТочкаМаршрута, ПериодРегистрации);
	
	Если ЕстьРеквизитыОтраженияВУчетах.УУ Тогда
		Если текЗначенияПризнаковОтраженияВУчетах.ОтражатьВУправленческомУчете Тогда
			ТекстЗапросаУсловие = ПсевдонимТаблицы + ".ОтражатьВУправленческомУчете";
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитыОтраженияВУчетах.БУ Тогда
		Если текЗначенияПризнаковОтраженияВУчетах.ОтражатьВБухгалтерскомУчете Тогда
			ТекстЗапросаУсловие = ТекстЗапросаУсловие + ?(ТекстЗапросаУсловие <> "", " ИЛИ ", "") + ПсевдонимТаблицы + ".ОтражатьВБухгалтерскомУчете";
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитыОтраженияВУчетах.НУ Тогда
		Если текЗначенияПризнаковОтраженияВУчетах.ОтражатьВНалоговомУчете Тогда
			ТекстЗапросаУсловие = ТекстЗапросаУсловие + ?(ТекстЗапросаУсловие <> "", " ИЛИ ", "") + ПсевдонимТаблицы + ".ОтражатьВНалоговомУчете";
		КонецЕсли;
	КонецЕсли;
	Если ТекстЗапросаУсловие <> "" Тогда
		Возврат " И (" + ТекстЗапросаУсловие + ")";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция формирует дополнительное условие к запросу для документов "Формирование книги продаж" и "Формирование книги покупок"
// по использованию ставки НДС 0%
//
// Параметры
// ПсевдонимТаблицы  - Строка, псевдоним основной таблицы запроса,
//						в которую возвращаются ссылки на созданные ранее документ
// ТочкаМаршрута  - ссылка на точку маршрута бизнес-процесса, для которой создана задача
//
// Возвращаемое значение:
// Строка   - дополнение к тексту запроса с условием
//
Функция СформироватьУсловиеФормированиеЗаписейКнигиПродажПокупокСтавка0(ПсевдонимТаблицы, ТочкаМаршрута) Экспорт
	
	ТекстЗапросаУсловие = "";
	
	Если ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПокупок" Тогда
		ТекстЗапросаУсловие = ПсевдонимТаблицы + ".ПредъявленНДСКВычету0 = ЛОЖЬ"
	ИначеЕсли ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПокупокПоСтавке0" Тогда
		ТекстЗапросаУсловие = ПсевдонимТаблицы + ".ПредъявленНДСКВычету0 = ИСТИНА"
	ИначеЕсли ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПродаж" Тогда
		ТекстЗапросаУсловие = ПсевдонимТаблицы + ".Реализация0 = ЛОЖЬ"
	ИначеЕсли ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПродажПоСтавке0" Тогда
		ТекстЗапросаУсловие = ПсевдонимТаблицы + ".Реализация0 = ИСТИНА"
	КонецЕсли;
	
	Если ТекстЗапросаУсловие <> "" Тогда
		Возврат " И (" + ТекстЗапросаУсловие + ")";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции //СформироватьУсловиеФормированиеЗаписейКнигиПродажПокупокСтавка0()

//Функция корректирует значения признаков отражения в учете, применяемых для конкретной точки маршрута, с учетом специфики:
//	1) Расширенная аналитика учета затрат - при расчете себестоимости по регл. учету не используется признак отражения в НУ
//	2) В точке маршрута "Расчет себестоимости УУ" в документе не должны быть установлены признаки БУ и НУ
//	3) В точке маршрута "Расчет себестоимости регл" в документе не дожен быть установлен признак УУ
Функция СкорректироватьОтражениеВУчете(ЗначенияПризнаковОтраженияВУчетах, ТочкаМаршрута, ПериодРегистрации) Экспорт
	НовыеЗначенияПризнаковОтраженияВУчетах = Новый Структура;
	//копируем структуру, переданную в параметрах
	Для каждого ТекущееЗначение из ЗначенияПризнаковОтраженияВУчетах цикл
		НовыеЗначенияПризнаковОтраженияВУчетах.Вставить(ТекущееЗначение.Ключ, ТекущееЗначение.Значение);
	конецЦикла;
	Если НЕ ЗначениеЗаполнено(ТочкаМаршрута) Тогда
		Возврат НовыеЗначенияПризнаковОтраженияВУчетах;
	КонецЕсли;
	
	ИмяТочкиМаршрута = НРег(ТочкаМаршрута.Имя);
	Если ИмяТочкиМаршрута = НРег("РассчитатьСебестоимость") Тогда
		//не проверяем признак НУ и БУ
		НовыеЗначенияПризнаковОтраженияВУчетах.Вставить("ОтражатьВБухгалтерскомУчете",	Ложь);
		НовыеЗначенияПризнаковОтраженияВУчетах.Вставить("ОтражатьВНалоговомУчете",		Ложь);
	ИначеЕсли ИмяТочкиМаршрута = НРег("РассчитатьСебестоимостьРегл") Тогда
		//не проверяем признаки УУ 
		НовыеЗначенияПризнаковОтраженияВУчетах.Вставить("ОтражатьВУправленческомУчете",	Ложь);
		//Если используется расширенная аналитика - не проверяем признак НУ
		Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") И 
			глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ПериодРегистрации Тогда

			НовыеЗначенияПризнаковОтраженияВУчетах.Вставить("ОтражатьВНалоговомУчете",	Ложь);
		КонецЕсли;	
	КонецЕсли;
	Возврат НовыеЗначенияПризнаковОтраженияВУчетах;
КонецФункции

//Функция возвращает массив наименований регламентных операций, недоступных при текущих настройках параметров учета
//Вызывается из формы настройки закрытия месяца и из формы процедуры закрытия месяца
//Параметры:
//	ДатаАнализа (в зависимости от места вызова дата начала действия настройки / закрываемый период)
//	Организация, для которой выполняется закрытие  месяца (заполняется только при вызове из формы процедуры закрытия месяца)
//	ВариантНастройки - вариант настройки закрытия месяца (0 - общий, 1 - УСН Доходы, 2 - УСН доходы минус расходы)
//	Данные отбираются 
//1) из макета "МакетНастроекПоУмолчанию" по значению колонки "Расширенная аналитика"
//2) на основе анализа использования механизма отложенного проведения
//3) индивидуальный код для случая УСН Доходы
Функция ЗаполнитьМассивНедоступныхРегламентныхОпераций(ДатаАнализа, Организация = Неопределено, ВариантНастройки = 0) Экспорт
	МассивОпераций = Новый Массив;
	Макет = Справочники.НастройкиЗакрытияМесяца.ПолучитьМакет("МакетНастроекПоУмолчанию");
	ОбластьСписокНастроек = Макет.Области.Найти("Список");
	Если ОбластьСписокНастроек <> Неопределено Тогда
		ОбластьСписокНастроек = Макет.ПолучитьОбласть("Список");
	КонецЕсли;
	ИспользуетсяРА = Ложь;	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") И
		глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДатаАнализа Тогда
		ИспользуетсяРА = Истина;
	КонецЕсли;
	Для Сч = 1 по ОбластьСписокНастроек.ВысотаТаблицы Цикл
		РеглОперация = СокрЛП(ОбластьСписокНастроек.Область(Сч,1,Сч,1).Текст);
		//Особый случай: регламентная операция "Проведение по партиям" в режиме "УСН (доходы - расходы)" нужна независимо от применения РА
		Если ВариантНастройки = 2 И НРег(РеглОперация) = НРег("ПровестиПоПартиям") Тогда
			Продолжить;
		КонецЕсли;
		
		//Если значение в ячейке = 0, значит операция не доступна в режиме РА
		//Если значение в ячейке = 2, значит операция доступна ТОЛЬКО в режиме РА
		ПризнакДоступности = Число(СокрЛП(ОбластьСписокНастроек.Область(Сч,5,Сч,5).Текст));
		Если (ИспользуетсяРА И ПризнакДоступности = 0) ИЛИ
			(НЕ ИспользуетсяРА И ПризнакДоступности = 2) Тогда
			МассивОпераций.Добавить(НРег(РеглОперация));
		КонецЕсли;
	КонецЦикла;
		
	флИспользуетсяОтложенноеПроведение = Ложь;
	Если Организация = Неопределено Тогда
		ЗапросОрганизации = новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Ссылка 
		|ИЗ Справочник.Организации
		|");
		Выборка = ЗапросОрганизации.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			ДатаНачалаДействияОтложенногоПроведения = ОтложенноеПроведениеДокументов.ПолучитьДатуНачалаОтложенногоПроведения(Выборка.Ссылка);
			//Если организация не указана - вызов происходит из формы настройки. В этом случае параметр ДатаАнализа не имеет смысла сравнивать
			//	с датой начала действия отложенного проведения
			флИспользуетсяОтложенноеПроведение = ЗначениеЗаполнено(ДатаНачалаДействияОтложенногоПроведения);
			Если флИспользуетсяОтложенноеПроведение Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДатаНачалаДействияОтложенногоПроведения = ОтложенноеПроведениеДокументов.ПолучитьДатуНачалаОтложенногоПроведения(Организация);
		//Для конкретной организации анализируем дополнительно ДатаАнализа, т.к. в данном случае это дата закрываемого периода
		флИспользуетсяОтложенноеПроведение = ЗначениеЗаполнено(ДатаНачалаДействияОтложенногоПроведения) И ДатаНачалаДействияОтложенногоПроведения <= ДатаАнализа;
	КонецЕсли;
	Если НЕ флИспользуетсяОтложенноеПроведение Тогда
		МассивОпераций.Добавить(НРег("ВыполнитьДопроведение"));
	КонецЕсли;
	//Режим "УСН Доходы"
	Если ВариантНастройки = 1 Тогда
		МассивОпераций.Добавить(НРег("РассчитатьНДС"));
		МассивОпераций.Добавить(НРег("РассчитатьНалогНаПрибыль"));
		МассивОпераций.Добавить(НРег("ВыполнитьРегламентныеОперацииПоНУ"));
	КонецЕсли;
	
	Возврат МассивОпераций;
КонецФункции

#Если Клиент Тогда
	
//Процедура обновляет карту маршрута: устанавливает цвет фона, выделяет отключенные и недоступные регл операции, выделяет регл операции назначенные текущему пользователю	
//Параметры:
//	КартаМаршрута 							- карта маршрута бизнес-процесса
//	РегламентныеОперации 					- табличная часть РегламентныеОперации справочника НастройкиЗакрытияМесяца или бизнес-процесса ЗакрытиеМесяца
//	МассивНедоступныхРегламентныхОпераций 	- массив регламентных операций, недоступных для выполнения
//	ГруппыТекущегоПользователя 				- массив из ссылок на справочник ГруппыПользователей, группы в которые входит текущий пользователь
//	ТекущийПользователь 					- ссылка на справочник Пользователи (текущий пользователь)
Процедура ОбновитьКартуМаршрута(КартаМаршрута, РегламентныеОперации, МассивНедоступныхРегламентныхОпераций, ГруппыТекущегоПользователя, ТекущийПользователь) Экспорт
	
	ЦветИсключаемогоДействия 		= Новый Цвет(200, 200, 200); 	//серый
	ЦветТекстаНедоступнойОперации 	= Новый Цвет(51,51,51);   		//черный цвет
	ЖирнаяЛиния = Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
	Для каждого ТочкаРО из КартаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(ТочкаРО) <> Тип("ЭлементГрафическойСхемыДействие") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = РегламентныеОперации.Найти(ТочкаРО.Значение, "РегламентнаяОперация");
		Если СтрокаТЧ = Неопределено Тогда
			//Такого не должно быть - все точки маршрута должны содержаться среди регламентных операций
			Продолжить;
		КонецЕсли;
		Если МассивНедоступныхРегламентныхОпераций.Количество() > 0 Тогда
			//Проверяем входит ли регламентная операция в массив недоступных
			Если БизнесПроцессЗакрытиеМесяца.РегламентнаяОперацияНедоступна(ТочкаРО.Значение, МассивНедоступныхРегламентныхОпераций) Тогда
				//Отключим использование недоступной регламентной операции
				Если СтрокаТЧ.Использовать Тогда
					СтрокаТЧ.Использовать = Ложь;
				КонецЕсли;
				//Выделим недоступную операцию на схеме особым образом
				ТочкаРО.Пояснение 		= "не выполняется";
				ТочкаРО.ЦветТекста 		= ЦветТекстаНедоступнойОперации;
				ТочкаРО.ПрозрачныйФон 	= Истина;

				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТЧ.Использовать Тогда
			//Прописываем ответственного за регл операцию на схеме
			ТочкаРО.Пояснение = СокрЛП(СтрокаТЧ.Ответственный);
			//Проверяем - это регл операция текущего пользователя?
			флНашаОперация = Ложь;
			Если ТипЗнч(СтрокаТЧ.Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				Если ГруппыТекущегоПользователя.НайтиПоЗначению(СтрокаТЧ.Ответственный) <> Неопределено Тогда
					флНашаОперация = Истина;
				КонецЕсли;
			ИначеЕсли СтрокаТЧ.Ответственный = ТекущийПользователь Тогда
				флНашаОперация = Истина;
			КонецЕсли;
			//Если операция назначена текущему пользователю, элемент схемы обводится жирной рамкой
			Если флНашаОперация Тогда
				ТочкаРО.Рамка = ЖирнаяЛиния;
			КонецЕсли;
		Иначе
			//Для неиспользуемой регламентной операции меняем цвет фона
			ТочкаРО.ЦветФона = ЦветИсключаемогоДействия;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецЕсли

//Функция объединяет точки маршрута переданных бизнес-процессов в один массив
//	масОбрабатываемыеБизнесПроцессы - массив, содержащий идентификаторы обрабатываемых бизнес-процессов
Функция ПолучитьТочкиМаршрутаЗакрытияМесяцаИРасчетаНДС(масОбрабатываемыеБизнесПроцессы) Экспорт

	ТочкиМаршрута = Новый Массив;
	Для Каждого ИмяБизнесПроцесса ИЗ масОбрабатываемыеБизнесПроцессы Цикл
		Для Каждого ТочкаМаршрута Из БизнесПроцессы[ИмяБизнесПроцесса].ТочкиМаршрута Цикл
			Если ТочкаМаршрута.Вид <> ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
				Продолжить;
			КонецЕсли;
			ТочкиМаршрута.Добавить(ТочкаМаршрута);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТочкиМаршрута;
	
КонецФункции //ПолучитьВсеТочкиМаршрута()

//Процедура заполняет реквизиты создаваемых задач
//Вызывается из обработчиков "ПриСозданииЗадач" бизнес-процессов ЗакрытиеМесяца и РасчетНДС
//Параметры:
//    БизнесПроцессСсылка 			- ссылка на бизнес-процесс
//    ТочкаМаршрутаБизнесПроцесса 	- ссылка на точку маршрута, для которой создаются задачи
//    ФормируемыеЗадачи 			- массив формируемых задач
//	  Отказ 						- булево, признак отказа
Процедура ПриСозданииЗадачБизнесПроцессов(БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ) Экспорт
	
	ТочкаРО 			= ФормируемыеЗадачи[0].ТочкаМаршрута;
	
	Если ТочкаРО.Вид	<> ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
		Возврат;
	КонецЕсли;
	
	//Если применяется бизнес-процесс "УСН", при старте основного бизнес-процесса ЗакрытиеМесяца задачи создаваться не должны
	Если ИспользоватьБизнесПроцессУСН(БизнесПроцессСсылка) И 
		ТипЗнч(ТочкаМаршрутаБизнесПроцесса) = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.ЗакрытиеМесяца") Тогда
		ФормируемыеЗадачи.Очистить();
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентныеОперации.РегламентнаяОперация КАК РегламентнаяОперация,
	|	РегламентныеОперации.Ответственный,
	|	РегламентныеОперации.Использовать
	|ИЗ
	|	БизнесПроцесс.ЗакрытиеМесяца.РегламентныеОперации КАК РегламентныеОперации
	|ГДЕ РегламентныеОперации.Ссылка = &текСсылка И РегламентныеОперации.РегламентнаяОперация = &РеглОперация
	|";
				
	ЗапросДействия 			= Новый Запрос;
	ЗапросДействия.Текст 	= ТекстЗапроса;
	
	ЗапросДействия.УстановитьПараметр("РеглОперация", ТочкаРО);
	ЗапросДействия.УстановитьПараметр("ТекСсылка", БизнесПроцессСсылка);

	Выборка = ЗапросДействия.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда   //В выборке будет только один элемент
		Если Выборка.Использовать Тогда
			ОбъектЗадача = ФормируемыеЗадачи[0];

			ТипОтветственного = ТипЗнч(Выборка.ответственный);
			ОбъектЗадача.Пользователь 			= ?(ТипОтветственного=Тип("СправочникСсылка.Пользователи"),Выборка.Ответственный,Неопределено);
			ОбъектЗадача.ГруппаПользователей 	= ?(ТипОтветственного=Тип("СправочникСсылка.ГруппыПользователей"),Выборка.Ответственный,Неопределено);
		Иначе
			ФормируемыеЗадачи.Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Функция определяет главный бизнес-процесс 
//
Функция ОпределитьГлавныйБизнесПроцесс(БизнесПроцессСсылка) Экспорт
	Если БизнесПроцессСсылка = Неопределено Тогда
		Возврат БизнесПроцессы.ЗакрытиеМесяца.ПустаяСсылка();
	КонецЕсли;
	
	//Определяем, для какого бизнес-процесса была создана задача
	ВедущаяЗадача = БизнесПроцессСсылка.ВедущаяЗадача;
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		ГлавныйБизнесПроцесс = ВедущаяЗадача.БизнесПроцесс;
		Если Не ЗначениеЗаполнено(ГлавныйБизнесПроцесс) Тогда
			ГлавныйБизнесПроцесс = БизнесПроцессы.ЗакрытиеМесяца.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцессСсылка) = Тип("БизнесПроцессСсылка.ЗакрытиеМесяцаУСНДоходыМинусРасходы")	Тогда
		ГлавныйБизнесПроцесс = БизнесПроцессСсылка.ОсновнойБизнесПроцесс;
	Иначе
		ГлавныйБизнесПроцесс = БизнесПроцессСсылка;
	КонецЕсли;
	
	Возврат ГлавныйБизнесПроцесс;
КонецФункции //ОпределитьГлавныйБизнесПроцесс()

//Функция определяет бизнес-процесс РасчетНДС, подчиненный бизнес-процессу ЗакрытиеМесяца
//
Функция ПолучитьПодчиненныйБизнесПроцессРасчетНДС(БизнесПроцессСсылка) Экспорт
	Если БизнесПроцессСсылка.Пустая() Тогда
		Возврат БизнесПроцессы.РасчетНДС.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетНДС.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.РасчетНДС КАК РасчетНДС
	|ГДЕ
	|	РасчетНДС.ВедущаяЗадача.БизнесПроцесс = &ВедущийБизнесПроцесс";
	
	Запрос.УстановитьПараметр("ВедущийБизнесПроцесс", БизнесПроцессСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат БизнесПроцессы.РасчетНДС.ПустаяСсылка();
	КонецЕсли;

КонецФункции

//Функция определяет бизнес-процесс ЗакрытиеМесяцаУСНДоходыМинусРасходы, подчиненный бизнес-процессу ЗакрытиеМесяца
//
Функция ПолучитьПодчиненныйБизнесПроцессЗакрытиеМесяцаУСН(БизнесПроцессСсылка) Экспорт
	Если БизнесПроцессСсылка.Пустая() Тогда
		Возврат БизнесПроцессы.ЗакрытиеМесяцаУСНДоходыМинусРасходы.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗакрытиеМесяцаУСН.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.ЗакрытиеМесяцаУСНДоходыМинусРасходы КАК ЗакрытиеМесяцаУСН
	|ГДЕ
	|	ЗакрытиеМесяцаУСН.ОсновнойБизнесПроцесс = &ВедущийБизнесПроцесс";
	
	Запрос.УстановитьПараметр("ВедущийБизнесПроцесс", БизнесПроцессСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат БизнесПроцессы.ЗакрытиеМесяцаУСНДоходыМинусРасходы.ПустаяСсылка();
	КонецЕсли;

КонецФункции

//Функция определяет, завершен ли бизнес-процесс
//
Функция БизнесПроцессЗавершен(БизнесПроцессСсылка) Экспорт
	Если БизнесПроцессСсылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ИспользоватьБизнесПроцессУСН(БизнесПроцессСсылка) Тогда
		Возврат ПолучитьПодчиненныйБизнесПроцессЗакрытиеМесяцаУСН(БизнесПроцессСсылка).Завершен;
	Иначе
		Возврат БизнесПроцессСсылка.Завершен;
	КонецЕсли;
КонецФункции

//Функция определяет, необходимо ли для переданного бизнес процесса или настройки закрытия месяца использовать схему 
//	бизнес процесса ЗакрытиеМесяцаУСНДоходыМинусРасходы
Функция ИспользоватьБизнесПроцессУСН(БизнесПроцесс = Неопределено, НастройкаЗакрытияМесяца = Неопределено) Экспорт
	Если НастройкаЗакрытияМесяца <> Неопределено Тогда
		Возврат (НастройкаЗакрытияМесяца.ВариантНастройки = 2);
	ИначеЕсли БизнесПроцесс <> Неопределено Тогда
		Возврат (БизнесПроцесс.НастройкаЗакрытияМесяца.ВариантНастройки = 2);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Функция определяет, с точностью до какой периодичности заполняется реквизит ПериодРегистрации в регламентном документе
//
Функция ОпределитьПериодичностьДокумента(ТипДокумента) Экспорт
	Если НРег(ТипДокумента) = НРег("НачислениеНДСПоСМРХозспособом") ИЛИ 
		НРег(ТипДокумента) = НРег("РегламентныеОперацииНалоговогоУчетаПоУСН") Тогда
		Возврат "Квартал";
	КонецЕсли;
	Возврат "Месяц";
КонецФункции

//Функция определяет, является ли регл. операция недоступной
//	Признак недоступности - вхождение в массив недоступных регламентных операций
Функция РегламентнаяОперацияНедоступна(РеглОперация, МассивНедоступныхРегламентныхОпераций) Экспорт
	Возврат МассивНедоступныхРегламентныхОпераций.Найти(НРег(РеглОперация.Имя)) <> Неопределено;
КонецФункции


