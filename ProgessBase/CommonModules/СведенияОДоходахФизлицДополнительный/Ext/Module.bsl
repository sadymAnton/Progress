////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры, функции

Процедура ВставитьКнопкуВПодменю(НомерКнопки, КнопкаПодменю, ИмяКнопки, ТипКнопки, ТекстКнопки = "", Действие = Неопределено) Экспорт 
	
	КнопкаПодменю.Кнопки.Вставить(НомерКнопки, ИмяКнопки, ТипКнопки, ТекстКнопки, Действие);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции объекта

// Загружает форматы наборов записей файла сведений о доходах физлиц из заданного табличного документа
Функция ЗагрузитьФорматФайлаСведений(Знач МакетФормата, ЭтотОбъект) Экспорт
	
	ФорматФайла = Новый Структура("НаборыЗаписей");
	
	ФорматФайла.НаборыЗаписей = Новый Структура;
	
	ОбластьФорматФайла = МакетФормата.ПолучитьОбласть("ФорматФайла");
	
	Для НСтр = 1 По ОбластьФорматФайла.ВысотаТаблицы Цикл
		
		// тип данных хранится во 2 колонке
		ТипДанных =  СокрЛП(ОбластьФорматФайла.Область(НСтр, 2).Текст);
		
		Если ТипДанных = "НаборЗаписей" Тогда
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьФорматФайла.Область(НСтр, 3).Текст);
			ФорматНабораЗаписей = ЭтотОбъект.ЗагрузитьФорматНабораЗаписей(МакетФормата, ИмяНабора);
			ФорматФайла.НаборыЗаписей.Вставить(ИмяНабора, ФорматНабораЗаписей);
		
		КонецЕсли; 
		
	КонецЦикла;

   	Возврат ФорматФайла;
	
КонецФункции // ()
////////////////////////////////////////////////////////////////////////////////

// ПРОЦЕДУРЫ ЧТЕНИЯ ФАЙЛА СВЕДЕНИЙ О ДОХОДАХ ФИЗЛИЦ ЗА 2003 ГОД

// Выполняет чтение набора записей из файл сведений
// Процедура выполняет последовательное чтение строк файла, инкрементируя счетчик прочитанных строк ТекущаяСтрокаФайла.
// Каждая строка файла - запись данных.
Функция ПрочитатьНаборЗаписейИзФайла(НаборЗаписей, Файл, ТекущаяСтрокаФайла) Экспорт

	// Каждая запись может быть записана в файле сведений максимум 1 раз, но может быть и не записана.
	// В любом случае записи в файле должны быть записаны последовательно.
	
	// Построим из структуры-набора массив имен записей для индексного обращения 
	МассивИменЗаписейНабора = Новый Массив;
	Для Каждого Запись Из НаборЗаписей Цикл
		МассивИменЗаписейНабора.Добавить(Запись.Ключ);
	КонецЦикла; 
	
	ПоследнийИндексЗаписиНабора = НаборЗаписей.Количество()-1;
	ИндексТекущейЗаписиНабора = 0;
	
	Пока Истина Цикл
		
		// Прочитаем очередную запись файла
		ТекущаяСтрокаФайла = ТекущаяСтрокаФайла + 1; 
		СтрокаФайла = Файл.ПолучитьСтроку(ТекущаяСтрокаФайла);
		
		Если СтрокаФайла = "@@@" Тогда// разделитель - признак окончания набора записей
			Возврат истина;
		КонецЕсли;  
		
		// Выделим из строки файла имя записи и сами данные
		ПозицияРазделителя = Найти(СтрокаФайла,":");
		ИмяЗаписиФайла = Лев(СтрокаФайла, ПозицияРазделителя - 1);
		СтрДанные = Сред(СтрокаФайла, ПозицияРазделителя + 1);
		
		// Попытаемся найти для имени записи файла соответствие в наборе записей
		Нашли = Ложь;
		Пока Не Нашли Цикл
			Если (ИмяЗаписиФайла = МассивИменЗаписейНабора[ИндексТекущейЗаписиНабора])	тогда
				Нашли = Истина;
			КонецЕсли;	
			Если ИндексТекущейЗаписиНабора = ПоследнийИндексЗаписиНабора Тогда
				Прервать;
			Иначе	
				ИндексТекущейЗаписиНабора = ИндексТекущейЗаписиНабора  + 1;
			КонецЕсли; 
		КонецЦикла; 
		
		Если (НЕ Нашли) Тогда
			Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла +" указано неверное имя записи """ + ИмяЗаписиФайла + """!");
			Возврат Ложь;	
		КонецЕсли; 
		
		ДанныеЗаписи = НаборЗаписей[ИмяЗаписиФайла];
		
		Если ДанныеЗаписи.ТипДанных = "СТРУКТУРА" Тогда
			
			// В файле значения структуры перечисляются через запятую
			ВсегоПолей =  ДанныеЗаписи.Поля.Количество();
			НомерПоля = 0;
			Для Каждого Поле из ДанныеЗаписи.Поля Цикл
				
				НомерПоля = НомерПоля + 1;
				
				// выделим из строки данных строковое представление очередного поля
				Если НомерПоля < ВсегоПолей Тогда
					ПозицияРазделителя = Найти(СтрДанные, ",");
					СтрЗначениеПоля = Лев(СтрДанные, ПозицияРазделителя - 1);
					СтрДанные = Сред(СтрДанные, ПозицияРазделителя + 1);
				Иначе
					СтрЗначениеПоля = СтрДанные;
				КонецЕсли; 
				
				// Преобразуем значение 
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					Попытка
						ЗначениеПоля = Число(СтрЗначениеПоля);
					Исключение
						Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла + " для поля '" + Поле.ИмяПоля +"' записи '" + ИмяЗаписиФайла + "' ожидается числовое значение!");
						Возврат Ложь;
					КонецПопытки;	
				Иначе// Строка (других типов не бывает)
					ЗначениеПоля  = СтрЗначениеПоля;	
				КонецЕсли; 
				
				ДанныеЗаписи.Значение[Поле.ИмяПоля] = ЗначениеПоля;
			КонецЦикла;	

		ИначеЕсли ДанныеЗаписи.ТипДанных = "ТАБЛИЦА" Тогда
			
			// Строки таблицы отделены символом ";"
			КонецТаблицы = Ложь;
			Пока НЕ КонецТаблицы Цикл
				
				// Добавим новую строку в таблицу значений для хранения считанных данных
				СтрокаТаблицы = ДанныеЗаписи.Значение.Добавить();
				
				// Выделим представление строки данных
				ПозицияРазделителя = Найти(СтрДанные, ";");
				Если ПозицияРазделителя <> 0 Тогда
					СтрДанныеСтроки = Лев(СтрДанные, ПозицияРазделителя - 1);
					СтрДанные = Сред(СтрДанные, ПозицияРазделителя + 1);
				Иначе
					СтрДанныеСтроки = СтрДанные;
					КонецТаблицы = Истина;
				КонецЕсли; 
				
				// В файле значения колонок строки таблицы перечисляются через запятую
				ВсегоПолей =  ДанныеЗаписи.Поля.Количество();
				НомерПоля = 0;
				Для Каждого Поле из ДанныеЗаписи.Поля Цикл
					
					НомерПоля = НомерПоля + 1;
					
					// выделим из строки данных строковое представление очередного поля
					Если НомерПоля < ВсегоПолей Тогда
						ПозицияРазделителя = Найти(СтрДанныеСтроки, ",");
						СтрЗначениеПоля = Лев(СтрДанныеСтроки, ПозицияРазделителя - 1);
						СтрДанныеСтроки = Сред(СтрДанныеСтроки, ПозицияРазделителя + 1);
					Иначе
						СтрЗначениеПоля = СтрДанныеСтроки;
					КонецЕсли; 
					
					// все значения типа "Число"
					Попытка
						ЗначениеПоля = Число(СтрЗначениеПоля);
					Исключение
						Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла + " для поля '" + Поле.ИмяПоля +"' записи '" + ИмяЗаписиФайла + "' ожидается числовое значение!");
						Возврат Ложь;
					КонецПопытки;	
					
					СтрокаТаблицы[Поле.ИмяПоля] =  ЗначениеПоля
				КонецЦикла;
			КонецЦикла; 
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ЧИСЛО" ТОГДА
			
			Попытка
				ДанныеЗаписи.Значение = Число(СтрДанные);
			Исключение
				Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла + " ожидается числовое значение!");
				Возврат Ложь;
			КонецПопытки;	
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "КОНСТАНТА" ТОГДА	
			
			ДанныеЗаписи.Значение = СтрДанные;		
			
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ДАТА" ТОГДА	
			
			Попытка
				// в файле дата представляется в формате дд.ММ.гггг
				ДанныеЗаписи.Значение = Дата(Сред(СтрДанные,7,4), Сред(СтрДанные,4,2), Лев(СтрДанные,2));
			Исключение
				Сообщить("Неверный формат файла. В строке № " + ТекущаяСтрокаФайла + " ожидается представление даты в формате 'дд.ММ.гггг'!");
				Возврат Ложь;
			КонецПопытки;	
			
		Иначе// Строка
			
			ДанныеЗаписи.Значение = СтрДанные;		
			
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Истина;
КонецФункции

// Выполняет очистку данных набора записей
Процедура ОчиститьДанныеНабораЗаписей(НаборЗаписей) Экспорт
	
	// Для каждой записи набора
	Для каждого Запись Из НаборЗаписей Цикл
		
		ИмяЗаписи = Запись.Ключ;
		ДанныеЗаписи = Запись.Значение;
		
		Если ДанныеЗаписи.ТипДанных = "СТРУКТУРА" Тогда
			// Перечислим значения структуры через запятую
			Для Каждого Поле из ДанныеЗаписи.Поля Цикл
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ДанныеЗаписи.Значение[Поле.ИмяПоля] = 0; 	
				Иначе// Строка (других типов не бывает)
					ДанныеЗаписи.Значение[Поле.ИмяПоля] = ""; 	
				КонецЕсли; 
			КонецЦикла;	
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ТАБЛИЦА" Тогда
			ДанныеЗаписи.Значение.Очистить(); 	
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ЧИСЛО" ТОГДА
			ДанныеЗаписи.Значение = 0; 	
		ИначеЕсли ДанныеЗаписи.ТипДанных = "КОНСТАНТА" ТОГДА	
			// ничего не делаем
		ИначеЕсли ДанныеЗаписи.ТипДанных = "ДАТА" ТОГДА	
			ДанныеЗаписи.Значение = Дата('00010101'); 	
		Иначе// Строка
			ДанныеЗаписи.Значение = ""; 	
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы документа

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура ОпределитьДействующиеСтавкиНалога(НалоговыйПериод, ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	Если НалоговыйПериод > 2007 Тогда
		ЭлементыФормы.РаботникиОрганизации.Колонки.Ставка.ЭлементУправления.ДоступныеЗначения.Очистить();
	Иначе
		СписокСтавок = Новый СписокЗначений;
		СписокСтавок.Добавить(Перечисления.НДФЛСтавки.Ставка09);
		СписокСтавок.Добавить(Перечисления.НДФЛСтавки.Ставка13);
		СписокСтавок.Добавить(Перечисления.НДФЛСтавки.Ставка30);
		СписокСтавок.Добавить(Перечисления.НДФЛСтавки.Ставка35);
		ЭлементыФормы.РаботникиОрганизации.Колонки.Ставка.ЭлементУправления.ДоступныеЗначения = СписокСтавок;
	КонецЕсли;

КонецПроцедуры

#КонецЕсли