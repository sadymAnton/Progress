
Процедура ВыполнитьОбменДаннымиДляНастройкиОбмена(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиОбменаДанными.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбмена, Ложь);
			
КонецПроцедуры

Процедура ВыполнитьОтложенныеДвиженияДляНастройкиОбмена(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиОбменаДанными.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	ПроцедурыОбменаДанными.ВыполнитьОтложенныеДвиженияПоНастройкеОбмена(НастройкаОбмена);
			
КонецПроцедуры

Процедура ОбновлениеИндексаПолнотекстовогоПоиска() Экспорт
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		Если НЕ ПолнотекстовыйПоиск.ИндексАктуален() Тогда
			Попытка	
				ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
				УровеньЖурналаРегистрации.Информация, , ,
				"Начато регламентное индексирование порции");
				
				ПолнотекстовыйПоиск.ОбновитьИндекс(Ложь, Истина);
				
				ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
				УровеньЖурналаРегистрации.Информация, , ,
				"Закончено регламентное  индексирование порции");
			Исключение
				ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				"Во время регламентного обновления индекса произошла неизвестная ошибка: " + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура СлияниеИндексаПолнотекстовогоПоиска() Экспорт
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		Попытка	
			ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Начато регламентное слияние индексов");
				
			ПолнотекстовыйПоиск.ОбновитьИндекс(Истина);
				
			ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Закончено регламентное слияние индексов");
		Исключение
			ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Во время регламентного слияния индекса произошла неизвестная ошибка: " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчетИтоговРегистров() Экспорт
		
	НаДату = НачалоМесяца(ТекущаяДата())-1;	
	ПересчетРегистров(РегистрыНакопления, НаДату, Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
	ПересчетРегистров(РегистрыБухгалтерии, НаДату);	
	
	//начало изменений Ожиганов 06.04.2016 б/н вставим пересчет текущих итогов для некоторых регистров,
	//т.к. образуется много записей с 0 ресурсами по измерениям
	ПРГ_ПересчетТекущихИтогов("ЗаказыПокупателей");
	ПРГ_ПересчетТекущихИтогов("ВнутренниеЗаказы");
	ПРГ_ПересчетТекущихИтогов("ТоварыВРезервеНаСкладах");
	ПРГ_ПересчетТекущихИтогов("ТоварыКПолучениюНаСклады");
	//конец изменений 

КонецПроцедуры

Процедура ПересчетРегистров(МенеджерРегистров, НаДату, ОграничениеПоВидуРегистра = Неопределено)
	
	Для Каждого МенеджерРегистра ИЗ МенеджерРегистров Цикл
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерРегистра));
		
		Если ОграничениеПоВидуРегистра <> Неопределено И МетаданныеРегистра.ВидРегистра <> ОграничениеПоВидуРегистра Тогда
			Продолжить;
		КонецЕсли;
		ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату)
	
	Если МенеджерРегистра.ПолучитьПериодРассчитанныхИтогов()<НаДату Тогда
		МенеджерРегистра.УстановитьПериодРассчитанныхИтогов(НаДату);
	Иначе
		МенеджерРегистра.ПересчитатьИтоги();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеЭлектронныхСообщений() Экспорт
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.АвтоПолучениеОтправкаСообщений";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	УчетныеЗаписиДляПроверки = Новый Массив;
	Пока Выборка.Следующий() Цикл
		УчетныеЗаписиДляПроверки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ТекстОшибок = "";
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(Неопределено, Справочники.Пользователи.ПустаяСсылка(),УчетныеЗаписиДляПроверки,,, Истина, Ложь, ТекстОшибок);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗаписьЖурналаРегистрации("Получение электронных сообщений", 
			УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ЭлектронноеПисьмо, ,
			"Получение электронных сообщений выполнено успешно");
	Иначе
		ЗаписьЖурналаРегистрации("Получение электронных сообщений", 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЭлектронноеПисьмо, ,
			"Получение электронных сообщений выполнено с ошибками:" + Символы.ПС + ТекстОшибок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиДляНастройкиАвтоматическогоОбменаДанными(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиВыполненияОбмена.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(НастройкаОбмена, Ложь);
	
КонецПроцедуры

Процедура РасчетСебестоимости(Настройка) Экспорт
	
	// Убедимся, что ссылка соответствует существующему объекту
	Попытка
		ОбъектНастройки = Настройка.ПолучитьОбъект();
	Исключение
		ВызватьИсключение "Ошибка при получении настройки, связанной с регламентным заданием: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Проверим, что по настройке включено автоматическое формирование
	Если НЕ Настройка.ФормироватьДокументыАвтоматически Тогда
		ОбщегоНазначения.Сообщение("Для настройки, связанной с регламентным заданием, автоматическое формирование документов отключено");
		Возврат;
	КонецЕсли;
	
	// Заблокируем объект настройки
	ОбъектНастройки.Заблокировать();
	
	СтруктураПараметров = Новый Структура("Организация, НастройкаЗакрытияМесяца, ВидОтраженияВУчете, Задержка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ОбъектНастройки);
	
	СтруктураПараметров.Вставить("ВыполняемыеДействия", ОбъектНастройки.ВыполняемыеДействия.Выгрузить());
	
	УправлениеЗапасамиРасширеннаяАналитика.РасчитатьСебестоимость(СтруктураПараметров);
	
	ОбъектНастройки.Разблокировать();
	
КонецПроцедуры

Процедура РасчетЦеныНоменклатурыРеглЗадание(Настройка) Экспорт
	
	РасчетЦеныНоменклатуры(Настройка, Ложь);
	
КонецПроцедуры	

Процедура РасчетЦеныНоменклатуры(Настройка, ВызываетсяИзФормыНастройки = Ложь) Экспорт
	
	// Убедимся, что ссылка соответствует существующему объекту
	Попытка
		ОбъектНастройки = Настройка.ПолучитьОбъект();
	Исключение
		ВызватьИсключение "Ошибка при получении настройки, связанной с регламентным заданием: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Проверим, что по настройке включено автоматическое формирование
	Если НЕ ВызываетсяИзФормыНастройки
	 И НЕ Настройка.ФормироватьДокументыАвтоматически Тогда
		ОбщегоНазначения.Сообщение("Для настройки, связанной с регламентным заданием, автоматическое формирование документов отключено");
		Возврат;
	КонецЕсли;
	
	// Заблокируем объект настройки
	Если НЕ ВызываетсяИзФормыНастройки Тогда
		ОбъектНастройки.Заблокировать();
	КонецЕсли;	
	
	СтруктураПараметров = Новый Структура("ТипЦен, СоздаватьНовыйДокумент, ВидОтраженияВУчете, ПорядокФормированияЦены, НастройкаРасчетаСебестоимости");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ОбъектНастройки);
	
	Если СтруктураПараметров.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СхемаКомпоновкиДанных = ОбъектНастройки.ПолучитьМакет("НастройкаРасчетаУпрУчет"); 
	Иначе
		СхемаКомпоновкиДанных = ОбъектНастройки.ПолучитьМакет("НастройкаРасчетаРеглУчет"); 
	КонецЕсли;	
	
	НастройкиКомпоновщика = ОбъектНастройки.НастройкиКомпоновщика.Получить();
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика);
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.РасчетЦеныНоменклатуры.Запрос);
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	
	Для Каждого ОписаниеПараметраЗапроса Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(
			ОписаниеПараметраЗапроса.Имя,
			МакетКомпоновкиДанных.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;
	
	УправлениеЗапасамиРасширеннаяАналитика.РасчитатьЦенуНоменклатуры(СтруктураПараметров, Запрос.Текст, Запрос.Параметры);
	
	Если НЕ ВызываетсяИзФормыНастройки Тогда
		ОбъектНастройки.Разблокировать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДопроведениеДокументов(Настройка) Экспорт
	// Убедимся, что ссылка соответствует существующему объекту
	Попытка
		ОбъектНастройки = Настройка.ПолучитьОбъект();
	Исключение
		ВызватьИсключение "Ошибка при получении настройки допроведения, связанной с регламентным заданием: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Проверим, что по настройке включено автоматическое допроведение
	Если НЕ Настройка.ФормироватьДокументыАвтоматически Тогда
		ОбщегоНазначения.Сообщение("Для настройки допроведения, связанной с регламентным заданием, автоматическое допроведение отключено");
		Возврат;
	КонецЕсли;
	
	// Если указан запуск по числам месяца, проверим наступило ли время выполнения регламентного задания
	Если Настройка.НомерДняНачалоЗапуска <> 0 И Настройка.НомерДняКонецЗапуска <> 0 Тогда
		флНеобходимЗапуск = Ложь;
		Если Настройка.НомерДняНачалоЗапуска <= Настройка.НомерДняКонецЗапуска Тогда
			//Интервал запуска в пределах одного месяца (например с 20-го по 25-е)
			СегодняшнийДень = День(ТекущаяДата());
			Если Настройка.НомерДняНачалоЗапуска <= СегодняшнийДень И Настройка.НомерДняКонецЗапуска >= СегодняшнийДень Тогда
				флНеобходимЗапуск = Истина;
			КонецЕсли;
		Иначе
			//Интервал запуска в разных месяцах, например с 25-го по 5-е
			НачалоТекущегоМесяца = НачалоМесяца(ТекущаяДата());
			Если 
				ТекущаяДата() > НачалоТекущегоМесяца + 60*60*24 * Настройка.НомерДняНачалоЗапуска	// текущая дата в периоде с 25-го по конец месяца
				ИЛИ ТекущаяДата() < НачалоТекущегоМесяца + 60*60*24 * Настройка.НомерДняКонецЗапуска  // текущая дата в периоде с начала месяца по 5-е
				Тогда
				флНеобходимЗапуск = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НЕ флНеобходимЗапуск Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Заблокируем объект настройки
	ОбъектНастройки.Заблокировать();
	
	ПериодДопроведения 		= ОтложенноеПроведениеДокументов.ОпределитьПериодДопроведения(Настройка);
	НачалоИнтервалаДопроведения 	= ПериодДопроведения.НачалоИнтервала;
	КонецИнтервалаДопроведения 	= ПериодДопроведения.КонецИнтервала;
	
	//Определим список организаций
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Организация,
	|	ДатаНачалаДействия КАК ДатаНачалаОтложенногоПроведения
	|ИЗ
	|	РегистрСведений.НастройкаОтложенногоПроведения
	|ГДЕ НастройкаДопроведенияДокументов = &ТекНастройка
	|УПОРЯДОЧИТЬ ПО Организация";
	Запрос.УстановитьПараметр("ТекНастройка", Настройка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.Сообщение("Настройка допроведения не назначена ни одной организации");
		Возврат;
	КонецЕсли;
	ТаблицаОрганизаций = РезультатЗапроса.Выгрузить();
	ПараметрыДопроведения = Новый Структура("ДопроводитьВсеДокументы, 
							|ДатаНачала, ДатаОкончания", 
							Настройка.ДопроводитьВсеДокументы, НачалоДня(НачалоИнтервалаДопроведения), 
							КонецДня(КонецИнтервалаДопроведения));

	ОтложенноеПроведениеДокументов.ВыполнитьДопроведениеДокументовПоСпискуОрганизаций(ТаблицаОрганизаций, ПараметрыДопроведения);

	ОбъектНастройки.Разблокировать();
КонецПроцедуры

Процедура ОбновлениеАгрегатов() Экспорт
	Для Каждого ТекущийРегистр Из Метаданные.РегистрыНакопления Цикл
		Если ТекущийРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			Если РегистрыНакопления[ТекущийРегистр.Имя].ПолучитьРежимАгрегатов()
			  И РегистрыНакопления[ТекущийРегистр.Имя].ПолучитьИспользованиеАгрегатов() Тогда
			  	РегистрыНакопления[ТекущийРегистр.Имя].ОбновитьАгрегаты();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПерестроениеАгрегатов() Экспорт
	Для Каждого ТекущийРегистр Из Метаданные.РегистрыНакопления Цикл
		Если ТекущийРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			Если РегистрыНакопления[ТекущийРегистр.Имя].ПолучитьРежимАгрегатов()
			  И РегистрыНакопления[ТекущийРегистр.Имя].ПолучитьИспользованиеАгрегатов() Тогда
			  	РегистрыНакопления[ТекущийРегистр.Имя].ПерестроитьИспользованиеАгрегатов();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Метод регламентного задания РегламентноеФормированиеДокументовПоНДС
//
// Параметры
//  Настройка - ссылка на элемент справочника НастройкиФормированияДокументовПоНДС 
//
Процедура РегламентноеФормированиеДокументовПоНДС(Настройка) Экспорт
	
	// Убедимся, что ссылка соответствует существующему объекту
	Попытка
		ОбъектНастройки = Настройка.ПолучитьОбъект();
	Исключение
		ВызватьИсключение "Ошибка при получении настройки, связанной с регламентным заданием: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Проверим, что по настройке включено автоматическое формирование
	Если НЕ Настройка.ФормироватьДокументыАвтоматически Тогда
		ОбщегоНазначения.Сообщение("Для настройки, связанной с регламентным заданием, автоматическое формирование документов отключено");
		Возврат;
	КонецЕсли;
	
	// Заблокируем объект настройки
	ОбъектНастройки.Заблокировать();
	
	СтруктураПараметров = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ОбъектНастройки);
	СтруктураПараметров.Дата = НачалоМесяца(ТекущаяДата()) - 1; // Документы формируются за прошлый налоговый период (квартал)
	
	УчетНДСФормированиеДвижений.СформироватьРегламентныеДокументыПоНДС(СтруктураПараметров);
	
	ОбъектНастройки.Разблокировать();
	
КонецПроцедуры

// Веснина 2015.07.07 +
//проведение трансляций проводок из РСБУ в МСФО
Процедура ВыполнитьТрансяциюПроводокРСБУМСФО()  Экспорт 
	
	//проверка наличия запросов со статусом К исполнению
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	is_ЗапросыНаПроведениеТрансляцииПроводок.Ссылка
	               |ИЗ
	               |	Справочник.is_ЗапросыНаПроведениеТрансляцииПроводок КАК is_ЗапросыНаПроведениеТрансляцииПроводок
	               |ГДЕ
	               |	НЕ is_ЗапросыНаПроведениеТрансляцииПроводок.ПометкаУдаления
	               |	И is_ЗапросыНаПроведениеТрансляцииПроводок.СтатусЗапроса ПОДОБНО &СтатусЗапроса
	               |	И is_ЗапросыНаПроведениеТрансляцииПроводок.ДатаСтартаЗапроса <= &ДатаСтартаЗапроса";
				   
				   
   Запрос.УстановитьПараметр("СтатусЗапроса", "К исполнению");
   Запрос.УстановитьПараметр("ДатаСтартаЗапроса", ТекущаяДатаСеанса());
   
   ТаблицаЗапросов = Запрос.Выполнить().Выгрузить();
   
   Если ТаблицаЗапросов.Количество() = 0 Тогда 
	   Возврат;
   Иначе 
	   //запуск фонового задания
	   МассивФоновыхЗаданий = Новый Массив;
	   Для Каждого СтрокаЗапрос Из ТаблицаЗапросов Цикл 
		   //обрабатывает элемент справочника Запрос трансляции
		   КоличествоПроводок 	= 0;
		   КоличествоПартий 	= 0; 			   
		   КоличествоЗатрат 	= 0;
		   КоличествоМПЗ 		= 0;

		   ЗапросТрансляции = СтрокаЗапрос.Ссылка;
		   ТЧ_Трансляции = ЗапросТрансляции.СписокТрансляции.Выгрузить();
		   
		   ОперацияПереносПроводок 	= ТЧ_Трансляции.Найти("Перенос проводок МСФО","ОперацияТрансляции");
		   ОперацияПереносПартий 	= ТЧ_Трансляции.Найти("Перенос партий","ОперацияТрансляции");
		   ОперацияПереносЗатрат 	= ТЧ_Трансляции.Найти("Перенос затрат","ОперацияТрансляции");
		   ОперацияСписаниеМПЗ 		= ТЧ_Трансляции.Найти("Списание МПЗ","ОперацияТрансляции");
		   
		   Если ОперацияПереносПроводок.Выполнять Тогда 
		   		КоличествоПроводок = ЗапросТрансляции.ТаблицаПараметровПереноса.Выгрузить().Количество();
			   МассивФоновыхЗаданий = СформироватьПереносПроводок(ЗапросТрансляции, МассивФоновыхЗаданий);
			   //фоновые задания - параллельно
			   //ДождатьсяЗавершенияВыполненияЗаданийЗаписатьОшибки (МассивФоновыхЗаданий,
			   // 											   Новый Структура("ТекстСообщения,Прогресс","Выполняются запросы трансляции проводок",0),
			   // 											   МассивФоновыхЗаданий.Количество(), 
			   // 											   ЗапросТрансляции, Неопределено );
		   КонецЕсли;
		   
		   МассивФоновыхЗаданий = Новый Массив;
		   Если ОперацияПереносПартий.Выполнять Тогда 
			   КоличествоПартий = ЗапросТрансляции.ТаблицаПараметровПереносаЗатрат.Выгрузить().Количество(); 			   
			   МассивФоновыхЗаданий = СформироватьПереносПартий(ЗапросТрансляции, МассивФоновыхЗаданий);
			   //последовательно
		   КонецЕсли;
		   
		   МассивФоновыхЗаданий = Новый Массив;
		   Если ОперацияПереносЗатрат.Выполнять Тогда 
			   КоличествоЗатрат = ЗапросТрансляции.ТаблицаПараметровПереносаЗатрат.Выгрузить().Количество();
			   МассивФоновыхЗаданий = СформироватьПереносЗатрат(ЗапросТрансляции, МассивФоновыхЗаданий);
			   //последовательно
		   КонецЕсли;

			МассивФоновыхЗаданий = Новый Массив;
			Если ОперацияСписаниеМПЗ.Выполнять Тогда
				КоличествоМПЗ = ЗапросТрансляции.ТаблицаПараметровПереносаЗатрат.Выгрузить().Количество();
				МассивФоновыхЗаданий = СфорироватьСписаниеМПЗ(ЗапросТрансляции, МассивФоновыхЗаданий);
				//последовательно
			КонецЕсли;
		   
			//изменение статуса запроса
			КоличествоЗаписейРегистре = КоличествоЗатрат + КоличествоМПЗ + КоличествоПартий + КоличествоПроводок;
			НаборЗаписейПротокола = РегистрыСведений.is_ПротоколРаботыТрансляцииПроводок.СоздатьНаборЗаписей();
			НаборЗаписейПротокола.Отбор.Запрос.Установить(ЗапросТрансляции) ;
			НаборЗаписейПротокола.Прочитать();
			
			ЗапросОбъект = ЗапросТрансляции.ПолучитьОбъект();
			ЗапросОбъект.СтатусЗапроса = "Исполнен";
			Если НЕ КоличествоЗаписейРегистре = НаборЗаписейПротокола.Количество() Тогда 
				//ошибки
				ЗапросОбъект.ВыполненоСОшибкой = Истина;
			КонецЕсли;
			Попытка
				ЗапросОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	   
	   //рассылка электронных писем  
	   РазослатьПисьма(ТаблицаЗапросов);
	   
   КонецЕсли;
	   
КонецПроцедуры

Процедура РазослатьПисьма(ТаблицаЗапросов)
	
	Для Каждого СтрокаЗапрос из ТаблицаЗапросов Цикл 
		   ЗапросТрансляции = СтрокаЗапрос.Ссылка;
		   ТЧ_Майл = ЗапросТрансляции.АдресаЭлПочты.Выгрузить(); 
		   Если НЕ ТЧ_Майл.Количество() = 0 тогда
			   Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
			   Письмо.ГруппаУчетнойЗаписи = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
			   Письмо.Тема 				= "Результаты трансляции проводок";
			   Письмо.ТекстПисьма 		= "Тестовая рассылка";
			   Письмо.СтатусПисьма 		= Перечисления.СтатусыПисем.Исходящее;
			   Письмо.Дата            	= ТекущаяДата();
			   Письмо.ДатаОтправления 	= ТекущаяДата();
			   Письмо.ДатаТранспорта  	= ТекущаяДата();
			   
			   Для Каждого СтрокаМайл Из ТЧ_Майл Цикл 
				   
				   СтрокаТЧ = Письмо.КомуТЧ.Добавить();
				   СтрокаТЧ.АдресЭлектроннойПочты = СтрокаМайл.ЭлАдрес;
				   
				   Если НЕ ПустаяСтрока(СтрокаМайл.ЭлАдрес) Тогда
					   Письмо.Кому = СтрокаМайл.ЭлАдрес + "," + " ";
				   КонецЕсли;
			   КонецЦикла;
			   Письмо.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			   Письмо.Комментарий	= "Результаты трансляции проводок";
			   Письмо.ОтправительИмя = Строка(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
			   Попытка
				   Письмо.Записать();
				   Письмо.ОтправитьПисьмо();
			   Исключение
				   Сообщить(ОписаниеОшибки());
			   КонецПопытки;
		   КонецЕсли;
	   КонецЦикла;

КонецПроцедуры

Функция  СформироватьПереносПроводок(ЗапросТрансляции, МассивФоновыхЗаданий)
	
	
	Организация = ЗапросТрансляции.Организация;
	ТаблицаПараметровПереноса = ЗапросТрансляции.ТаблицаПараметровПереноса.Выгрузить();
	
			
	Для Сеанс = 0 по ТаблицаПараметровПереноса.Количество()-1 Цикл
		МассивПараметровЗадания = Новый Массив;
		МассивПараметровЗадания.Добавить(ТаблицаПараметровПереноса[Сеанс].Начало);
		МассивПараметровЗадания.Добавить(ТаблицаПараметровПереноса[Сеанс].Окончание);
		МассивПараметровЗадания.Добавить(Организация);
		
		ПериодКонец = ТаблицаПараметровПереноса[Сеанс].Окончание;
        ДатаНачалаОперации = ТекущаяДата(); //для записи в РСВ Протокол 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПереносПроводокМеждународный.Ссылка,
		               |	ПереносПроводокМеждународный.Дата,
		               |	ПереносПроводокМеждународный.Ответственный
		               |ИЗ
		               |	Документ.ПереносПроводокМеждународный КАК ПереносПроводокМеждународный
		               |ГДЕ
		               |	ПереносПроводокМеждународный.ПериодНачало = &ПериодНачало
		               |	И ПереносПроводокМеждународный.ПериодКонец = &ПериодКонец
		               |	И ПереносПроводокМеждународный.Организация = &Организация
		               |	И НЕ ПереносПроводокМеждународный.ПометкаУдаления";
		Запрос.УстановитьПараметр("ПериодНачало", ТаблицаПараметровПереноса[Сеанс].Начало);
		Запрос.УстановитьПараметр("ПериодКонец", ТаблицаПараметровПереноса[Сеанс].Окончание);
		Запрос.УстановитьПараметр("Организация", Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			МассивОшибок = Новый ТаблицаЗначений;
			МассивОшибок.Колонки.Добавить("Текст");
			СтрокаОшибок = МассивОшибок.Добавить();
			СтрокаОшибок.Текст = "Уже есть сформированный документ за период";
			ЗаписатьОшибкиВПротокол(МассивОшибок, ТекущаяДата() ,  "ис_МеждународныйУчетСервер.ВыполнитьПереносПроводокВЦикле" ,ЗапросТрансляции, Выборка.Ссылка);
			Продолжить;
		Иначе
			ДокОбъект = Документы.ПереносПроводокМеждународный.СоздатьДокумент();
			ДокОбъект.Дата = КонецДня(ПериодКонец);
			ДокОбъект.Организация = Организация;
			ДокОбъект.ПериодНачало = ТаблицаПараметровПереноса[Сеанс].Начало;
			ДокОбъект.ПериодКонец  = КонецДня(ТаблицаПараметровПереноса[Сеанс].Окончание);
			ДокОбъект.Ответственный = ЗапросТрансляции.Ответственный;
			ДокОбъект.Записать();
			
			ДокСсылка = ДокОбъект.Ссылка;
		КонецЕсли;
		
		МассивПараметровЗадания.Добавить(ДокСсылка);
		МассивПараметровЗадания.Добавить(ЛОЖЬ);
		//МассивПараметровЗадания.Добавить(Истина);
		
		ФоновоеЗадание = ис_МеждународныйУчетСервер.ЗапуститьФоновоеЗадание("ис_МеждународныйУчетСервер.ВыполнитьПереносПроводокВЦикле",
		МассивПараметровЗадания);
		
		МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
		   ДождатьсяЗавершенияВыполненияЗаданийЗаписатьОшибки (МассивФоновыхЗаданий,
    											   Новый Структура("ТекстСообщения,Прогресс","Выполняются запросы трансляции проводок",0),
    											   МассивФоновыхЗаданий.Количество(), 
    											   ЗапросТрансляции,  
												   ДокСсылка);
		
	КонецЦикла;
	
	Возврат МассивФоновыхЗаданий;
	
КонецФункции

Процедура ДождатьсяЗавершенияВыполненияЗаданий(МассивФоновыхЗаданий,
	ПараметрыСостояния,
	ИсходноеКоличествоФоновыхЗаданий=Неопределено)
	ИсходноеВремя = ТекущаяДата();
	
	Пока МассивФоновыхЗаданий.Количество() > 0 Цикл
		Если ИсходноеВремя <= ТекущаяДата() Тогда 
			Если ИсходноеКоличествоФоновыхЗаданий=Неопределено Тогда
				//начало изменений Ожиганов 07.10.2015 б/н исправление ошибки при серверных вызовах 
				//Состояние(ПараметрыСостояния.ТекстСообщения + ": "+ПараметрыСостояния.Прогресс+"%/100%");
				#Если Клиент Тогда
				Состояние(ПараметрыСостояния.ТекстСообщения + ": "+ПараметрыСостояния.Прогресс+"%/100%"); 
				#КонецЕсли
				//конец изменений 
			Иначе
				Шаг = ИсходноеКоличествоФоновыхЗаданий / 100;
				
				//начало изменений Ожиганов 07.10.2015 б/н исправление ошибки при серверных вызовах 
				//Состояние(ПараметрыСостояния.ТекстСообщения + ": "+(100-Цел(Шаг*МассивФоновыхЗаданий.Количество()))+"%/100%");
				#Если Клиент Тогда
					Состояние(ПараметрыСостояния.ТекстСообщения + ": "+(100-Цел(Шаг*МассивФоновыхЗаданий.Количество()))+"%/100%");
				#КонецЕсли
				//конец изменений 
			КонецЕсли;
			
			ФоновоеЗаданиеВыполняется = ис_МеждународныйУчетСервер.ФоновоеЗаданиеВыполняется(МассивФоновыхЗаданий[0]);
			ИсходноеВремя = ТекущаяДата()+ 120;
			Если НЕ ФоновоеЗаданиеВыполняется Тогда
				МассивФоновыхЗаданий.Удалить(0);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ДождатьсяЗавершенияВыполненияЗаданийЗаписатьОшибки(МассивФоновыхЗаданий,
	ПараметрыСостояния,
	ИсходноеКоличествоФоновыхЗаданий=Неопределено,
	ЗапросТрансляции,
	Объект)
	ИсходноеВремя = ТекущаяДата();
	
	Пока МассивФоновыхЗаданий.Количество() > 0 Цикл
		ДатаНачалаОперации = ТекущаяДата();
		Если ИсходноеВремя <= ТекущаяДата() Тогда 
			Если ИсходноеКоличествоФоновыхЗаданий=Неопределено Тогда
				//начало изменений Ожиганов 07.10.2015 б/н исправление ошибки при серверных вызовах 
				//Состояние(ПараметрыСостояния.ТекстСообщения + ": "+ПараметрыСостояния.Прогресс+"%/100%");
				#Если Клиент Тогда
					Состояние(ПараметрыСостояния.ТекстСообщения + ": "+ПараметрыСостояния.Прогресс+"%/100%"); 	
				#КонецЕсли
				//конец изменений 
			Иначе
				Шаг = ИсходноеКоличествоФоновыхЗаданий / 100;
				
				//начало изменений Ожиганов 07.10.2015 б/н исправление ошибки при серверных вызовах 
				//Состояние(ПараметрыСостояния.ТекстСообщения + ": "+(100-Цел(Шаг*МассивФоновыхЗаданий.Количество()))+"%/100%");
				#Если Клиент Тогда
					Состояние(ПараметрыСостояния.ТекстСообщения + ": "+(100-Цел(Шаг*МассивФоновыхЗаданий.Количество()))+"%/100%"); 
				#КонецЕсли
				//конец изменений 
				
			КонецЕсли;
			
			ФоновоеЗаданиеВыполняется = ис_МеждународныйУчетСервер.ФоновоеЗаданиеВыполняется(МассивФоновыхЗаданий[0]);
			ИсходноеВремя = ТекущаяДата()+ 120;
			Если НЕ ФоновоеЗаданиеВыполняется Тогда
				МассивОшибок = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(МассивФоновыхЗаданий[0]).Получитьсообщенияпользователю();
				ЗаписатьОшибкиВПротокол(МассивОшибок, ДатаНачалаОперации,  ФоновыеЗадания.НайтиПоУникальномуИдентификатору(МассивФоновыхЗаданий[0]).ИмяМетода,ЗапросТрансляции, Объект);
				//ЗаписатьОшибкиВПротокол();
				МассивФоновыхЗаданий.Удалить(0);
				ИсходноеВремя = ТекущаяДата();
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьОшибкиВПротокол(МассивОшибок,ДатаНачалаОперации, ОперацияТрансляции, ЗапросТрансляции, Объект)
	
	ДатаОкончанияОперации 	= ТекущаяДата();
		РСВ_Протокол 			= РегистрыСведений.is_ПротоколРаботыТрансляцииПроводок.СоздатьНаборЗаписей();
		Если  МассивОшибок = Неопределено тогда
			//делаем одну запись
			РСВ_НовыйПротокол = РСВ_Протокол.Добавить();
			РСВ_НовыйПротокол.Активность			= Истина;
			РСВ_НовыйПротокол.Запрос 				= ЗапросТрансляции;
			РСВ_НовыйПротокол.ОперацияТрансляции 	= Сред(ОперацияТрансляции, 37);
			РСВ_НовыйПротокол.ДатаНачалаОперации 	= ДатаНачалаОперации;
			РСВ_НовыйПротокол.ДатаОкончанияОперации = ДатаОкончанияОперации;
			РСВ_НовыйПротокол.НомерСообщения		= 1;
			РСВ_НовыйПротокол.Сообщение				= "Операция прошла без ошибок";
			РСВ_НовыйПротокол.Объект				= Объект;
		Иначе 
			Счетчик = 1;
			Для Каждого Ошибка из МассивОшибок Цикл 
				РСВ_НовыйПротокол = РСВ_Протокол.Добавить();
				РСВ_НовыйПротокол.Активность			= Истина;
				РСВ_НовыйПротокол.Запрос 				= ЗапросТрансляции;
				РСВ_НовыйПротокол.ОперацияТрансляции 	= Сред(ОперацияТрансляции, 37);
				РСВ_НовыйПротокол.ДатаНачалаОперации 	= ДатаНачалаОперации;
				РСВ_НовыйПротокол.ДатаОкончанияОперации = ДатаОкончанияОперации;
				РСВ_НовыйПротокол.Объект				= Объект;
				РСВ_НовыйПротокол.Сообщение				= "" + Счетчик + ")" + Ошибка.Текст;
				РСВ_НовыйПротокол.НомерСообщения		= Счетчик;
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЕсли;
		Попытка
			РСВ_Протокол.Записать(Ложь);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

КонецПроцедуры

Функция СформироватьПереносПартий(ЗапросТрансляции, МассивФоновыхЗаданий)
	
	Организация = ЗапросТрансляции.Организация;
	ТаблицаПараметровПереноса = ЗапросТрансляции.ТаблицаПараметровПереносаЗатрат.Выгрузить();
		
	Для Сеанс = 0 по ТаблицаПараметровПереноса.Количество()-1 Цикл
		МассивПараметровЗадания = Новый Массив;
		МассивПараметровЗадания.Добавить(ТаблицаПараметровПереноса[Сеанс].Начало);
		МассивПараметровЗадания.Добавить(ТаблицаПараметровПереноса[Сеанс].Окончание);
		МассивПараметровЗадания.Добавить(Организация);
		МассивПараметровЗадания.Добавить(ЗапросТрансляции);
		
		ПериодНачало 	= ТаблицаПараметровПереноса[Сеанс].Начало;	
		ПериодКонец 	= ТаблицаПараметровПереноса[Сеанс].Окончание;
		
		//Проверка операция переноса за выбранный период
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереносПартийМеждународный.Ссылка
		|ИЗ
		|	Документ.ПереносПартийМеждународный КАК ПереносПартийМеждународный
		|ГДЕ
		|	ПереносПартийМеждународный.ПериодНачало = &ДатаНачала 
		|	И ПереносПартийМеждународный.ПериодКонец =  &ДатаОкончания
		|	И ПереносПартийМеждународный.Проведен = ИСТИНА
		|	И ПереносПартийМеждународный.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ДатаНачала", ПериодНачало);
		Запрос.УстановитьПараметр("ДатаОкончания", ПериодКонец);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			МассивОшибок = Новый ТаблицаЗначений;
			МассивОшибок.Колонки.Добавить("Текст");
			СтрокаОшибок = МассивОшибок.Добавить();
			СтрокаОшибок.Текст = "Уже есть сформированный документ за период";
			ЗаписатьОшибкиВПротокол(МассивОшибок, ТекущаяДата() ,  "ис_МеждународныйУчетСервер.ВыполнитьПереносПартий" ,ЗапросТрансляции, Выборка.Ссылка);
            Продолжить;
		Иначе
			ДокОбъект = Документы.ПереносПартийМеждународный.СоздатьДокумент();
			ДокОбъект.Дата = КонецДня(ПериодКонец);
			ДокОбъект.Организация = Организация;
			ДокОбъект.ПериодНачало = ТаблицаПараметровПереноса[Сеанс].Начало;
			ДокОбъект.ПериодКонец  = КонецДня(ТаблицаПараметровПереноса[Сеанс].Окончание);
			ДокОбъект.Ответственный = ЗапросТрансляции.Ответственный;
			ДокОбъект.Записать();
			
			ДокСсылка = ДокОбъект.Ссылка;
		КонецЕсли;
		
		МассивПараметровЗадания.Добавить(ДокСсылка);
		МассивПараметровЗадания.Добавить(ЛОЖЬ);
		МассивПараметровЗадания.Добавить(ЛОЖЬ);

		
		ФоновоеЗадание = ис_МеждународныйУчетСервер.ЗапуститьФоновоеЗадание("ис_МеждународныйУчетСервер.ВыполнитьПереносПартий",
		МассивПараметровЗадания);
		
		МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
	   ДождатьсяЗавершенияВыполненияЗаданийЗаписатьОшибки (МассивФоновыхЗаданий,
												   Новый Структура("ТекстСообщения,Прогресс","Выполняются запросы трансляции проводок",0),
												   МассивФоновыхЗаданий.Количество(), 
												   ЗапросТрансляции,
												   ДокСсылка);

			КонецЦикла;
	
	Возврат МассивФоновыхЗаданий;
			

КонецФункции

Функция СформироватьПереносЗатрат(ЗапросТрансляции, МассивФоновыхЗаданий)
	
	Организация = ЗапросТрансляции.Организация;
	ТаблицаПараметровПереноса = ЗапросТрансляции.ТаблицаПараметровПереносаЗатрат.Выгрузить();

	
	Для Сеанс = 0 по ТаблицаПараметровПереноса.Количество()-1 Цикл
		МассивПараметровЗадания = Новый Массив;
		МассивПараметровЗадания.Добавить(ТаблицаПараметровПереноса[Сеанс].Начало);
		МассивПараметровЗадания.Добавить(ТаблицаПараметровПереноса[Сеанс].Окончание);
		МассивПараметровЗадания.Добавить(Организация);
		МассивПараметровЗадания.Добавить(ЗапросТрансляции);
		
		ПериодНачало 	= ТаблицаПараметровПереноса[Сеанс].Начало;	
		ПериодКонец 	= ТаблицаПараметровПереноса[Сеанс].Окончание;
		
		//Проверка операция переноса за выбранный период
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереносЗатратНаПроизводствоМеждународный.Ссылка
		|ИЗ
		|	Документ.ПереносЗатратНаПроизводствоМеждународный КАК ПереносЗатратНаПроизводствоМеждународный
		|ГДЕ
		|	(ПереносЗатратНаПроизводствоМеждународный.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ПереносЗатратНаПроизводствоМеждународный.ПериодКонец МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ПереносЗатратНаПроизводствоМеждународный.ПериодНачало < &ДатаНачала
		|				И ПереносЗатратНаПроизводствоМеждународный.ПериодКонец > &ДатаНачала
		|			ИЛИ ПереносЗатратНаПроизводствоМеждународный.ПериодНачало < &ДатаОкончания
		|				И ПереносЗатратНаПроизводствоМеждународный.ПериодКонец > &ДатаОкончания)
		|	И ПереносЗатратНаПроизводствоМеждународный.Проведен = ИСТИНА
		|	И ПереносЗатратНаПроизводствоМеждународный.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ДатаНачала", ПериодНачало);
		Запрос.УстановитьПараметр("ДатаОкончания", ПериодКонец);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		

		Если Выборка.Следующий() Тогда
			МассивОшибок = Новый ТаблицаЗначений;
			МассивОшибок.Колонки.Добавить("Текст");
			СтрокаОшибок = МассивОшибок.Добавить();
			СтрокаОшибок.Текст = "Уже есть сформированный документ за период";
			ЗаписатьОшибкиВПротокол(МассивОшибок, ТекущаяДата() ,  "ис_МеждународныйУчетСервер.ВыполнитьПереносЗатратПоПроводкам" ,ЗапросТрансляции, Выборка.Ссылка);
			Продолжить;
		Иначе
			ДокОбъект = Документы.ПереносЗатратНаПроизводствоМеждународный.СоздатьДокумент();
			ДокОбъект.Дата = КонецДня(ПериодКонец);
			ДокОбъект.Организация = Организация;
			ДокОбъект.ПериодНачало = ТаблицаПараметровПереноса[Сеанс].Начало;
			ДокОбъект.ПериодКонец  = КонецДня(ТаблицаПараметровПереноса[Сеанс].Окончание);
			ДокОбъект.Ответственный = ЗапросТрансляции.Ответственный;
			ДокОбъект.Записать();
			
			ДокСсылка = ДокОбъект.Ссылка;
		КонецЕсли;
		
		МассивПараметровЗадания.Добавить(ДокСсылка);
		МассивПараметровЗадания.Добавить(ЛОЖЬ);
		МассивПараметровЗадания.Добавить(ЛОЖЬ);
		
		ФоновоеЗадание = ис_МеждународныйУчетСервер.ЗапуститьФоновоеЗадание("ис_МеждународныйУчетСервер.ВыполнитьПереносЗатратПоПроводкам",
		МассивПараметровЗадания);
		
		МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
	   ДождатьсяЗавершенияВыполненияЗаданийЗаписатьОшибки (МассивФоновыхЗаданий,
												   Новый Структура("ТекстСообщения,Прогресс","Выполняются запросы трансляции проводок",0),
												   МассивФоновыхЗаданий.Количество(),
												   ЗапросТрансляции,
												   ДокСсылка);

			КонецЦикла;

	Возврат МассивФоновыхЗаданий;	
КонецФункции

Функция СфорироватьСписаниеМПЗ(ЗапросТрансляции, МассивФоновыхЗаданий)
	Организация = ЗапросТрансляции.Организация;
	ТаблицаПараметровПереноса = ЗапросТрансляции.ТаблицаПараметровПереносаЗатрат.Выгрузить();
		
	Для Сеанс = 0 по ТаблицаПараметровПереноса.Количество()-1 Цикл
		МассивПараметровЗадания = Новый Массив;
		МассивПараметровЗадания.Добавить(ТаблицаПараметровПереноса[Сеанс].Начало);
		МассивПараметровЗадания.Добавить(ТаблицаПараметровПереноса[Сеанс].Окончание);
		МассивПараметровЗадания.Добавить(Организация);
		МассивПараметровЗадания.Добавить(ЗапросТрансляции);
		
		ПериодНачало 	= ТаблицаПараметровПереноса[Сеанс].Начало;	
		ПериодКонец 	= ТаблицаПараметровПереноса[Сеанс].Окончание;
		
		//Проверка операция переноса за выбранный период
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписаниеМПЗМеждународный.Ссылка
		|ИЗ
		|	Документ.СписаниеМПЗМеждународный КАК СписаниеМПЗМеждународный
		|ГДЕ
		|	(СписаниеМПЗМеждународный.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ СписаниеМПЗМеждународный.ПериодКонец МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ СписаниеМПЗМеждународный.ПериодНачало < &ДатаНачала
		|				И СписаниеМПЗМеждународный.ПериодКонец > &ДатаНачала
		|			ИЛИ СписаниеМПЗМеждународный.ПериодНачало < &ДатаОкончания
		|				И СписаниеМПЗМеждународный.ПериодКонец > &ДатаОкончания)
		|	И СписаниеМПЗМеждународный.Проведен = ИСТИНА
		|	И СписаниеМПЗМеждународный.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ДатаНачала", ПериодНачало);
		Запрос.УстановитьПараметр("ДатаОкончания", ПериодКонец);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();		

		Если Выборка.Следующий() Тогда
			МассивОшибок = Новый ТаблицаЗначений;
			МассивОшибок.Колонки.Добавить("Текст");
			СтрокаОшибок = МассивОшибок.Добавить();
			СтрокаОшибок.Текст = "Уже есть сформированный документ за период";
			ЗаписатьОшибкиВПротокол(МассивОшибок, ТекущаяДата() ,  "ис_МеждународныйУчетСервер.ВыполнитьСписаниеМПЗ" ,ЗапросТрансляции, Выборка.Ссылка);
			Продолжить;
		Иначе
			ДокОбъект = Документы.СписаниеМПЗМеждународный.СоздатьДокумент();
			ДокОбъект.Дата = КонецДня(ПериодКонец);
			ДокОбъект.Организация = Организация;
			ДокОбъект.ПериодНачало = ТаблицаПараметровПереноса[Сеанс].Начало;
			ДокОбъект.ПериодКонец  = КонецДня(ТаблицаПараметровПереноса[Сеанс].Окончание);
			ДокОбъект.Ответственный = ЗапросТрансляции.Ответственный;
			ДокОбъект.Записать();
			
			ДокСсылка = ДокОбъект.Ссылка;
		КонецЕсли;
		
		МассивПараметровЗадания.Добавить(ДокСсылка);
		МассивПараметровЗадания.Добавить(ЛОЖЬ);
		
		ФоновоеЗадание = ис_МеждународныйУчетСервер.ЗапуститьФоновоеЗадание("ис_МеждународныйУчетСервер.ВыполнитьСписаниеМПЗ",
		МассивПараметровЗадания);
		
		МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
		
		ДождатьсяЗавершенияВыполненияЗаданийЗаписатьОшибки (МассивФоновыхЗаданий,
		Новый Структура("ТекстСообщения,Прогресс","Выполняются запросы трансляции проводок",0),
		МассивФоновыхЗаданий.Количество(),
		ЗапросТрансляции,
		ДокСсылка);
		
	КонецЦикла;
	
	
	Возврат МассивФоновыхЗаданий;	
КонецФункции

// Веснина 2015.07.07 -

//начало изменений Ожиганов 06.04.2016 б/н вставим пересчет текущих итогов для некоторых регистров,
//т.к. образуется много записей с 0 ресурсами по измерениям
// <Описание процедуры>
//
// Параметры
//  <ИмяРегистраНакопления>  - строка, имя регистра
//
Процедура ПРГ_ПересчетТекущихИтогов(ИмяРегистраНакопления)

	МенРег = РегистрыНакопления[ИмяРегистраНакопления];
	МетаРег = Метаданные.РегистрыНакопления[ИмяРегистраНакопления];
	Если  МетаРег.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Если МенРег.ПолучитьИспользованиеТекущихИтогов() Тогда
			Попытка
				МенРег.ПересчитатьТекущиеИтоги();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки()+Символы.ПС+" регистр."+ИмяРегистраНакопления);
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры // ПРГ_ПересчетОперИтогов()
 

//конец изменений


//>>200516 Степанов б/н перепроведение незакрытых 
Процедура ПересчетДвиженийПоОтменеСкидок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры,
	|	ОтменаСкидокНоменклатурыДокументы.Ссылка КАК ОтменаСкидокНоменклатуры
	|ПОМЕСТИТЬ ВТ_ОтмененныеПриказы
	|ИЗ
	|	Документ.ОтменаСкидокНоменклатуры.Документы КАК ОтменаСкидокНоменклатурыДокументы
	|ГДЕ
	|	ОтменаСкидокНоменклатурыДокументы.Ссылка.Проведен
	|	И ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки <> &ПЦ_ОграниченияСкидкиПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
	|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток
	|ПОМЕСТИТЬ ВТ_НезакрытыеОстатки
	|ИЗ
	|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
	|			,
	|			УстановкаСкидокНоменклатуры В
	|				(ВЫБРАТЬ
	|					ВТ_ОтмененныеПриказы.УстановкаСкидокНоменклатуры
	|				ИЗ
	|					ВТ_ОтмененныеПриказы КАК ВТ_ОтмененныеПриказы)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
	|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) <> 0
	|		ИЛИ СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_НезакрытыеОстатки.УстановкаСкидокНоменклатуры
	|ПОМЕСТИТЬ ВТ_ОтмененныеПриказыСОстатками
	|ИЗ
	|	ВТ_НезакрытыеОстатки КАК ВТ_НезакрытыеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтмененныеПриказы.ОтменаСкидокНоменклатуры,
	|	ВТ_ОтмененныеПриказыСОстатками.УстановкаСкидокНоменклатуры
	|ИЗ
	|	ВТ_ОтмененныеПриказыСОстатками КАК ВТ_ОтмененныеПриказыСОстатками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтмененныеПриказы КАК ВТ_ОтмененныеПриказы
	|		ПО ВТ_ОтмененныеПриказыСОстатками.УстановкаСкидокНоменклатуры = ВТ_ОтмененныеПриказы.УстановкаСкидокНоменклатуры";
	
	Запрос.УстановитьПараметр("ПЦ_ОграниченияСкидкиПериод",Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Рез.Свернуть("ОтменаСкидокНоменклатуры");
	Для Каждого ТекСтрока Из Рез Цикл
		ОтменаОбъект = ТекСтрока.ОтменаСкидокНоменклатуры.ПолучитьОбъект();
		ОтменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;	
	
КонецПроцедуры
