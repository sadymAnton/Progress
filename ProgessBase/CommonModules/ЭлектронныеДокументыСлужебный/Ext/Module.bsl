////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - объект - владелец присоединенного файла,
//  Отказ           - булево - признак отказа от записи,
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа,
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ЭлектронныеДокументыВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	// Пометим на удаление (снимем пометку) электронные документы, связанные с владельцем.
	Если НЕ Источник.ЭтоНовый() Тогда
		ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
		Если Источник.ПометкаУдаления <> ИсточникСсылкаПометкаУдаления Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Источник.Ссылка);
		КонецЕсли;
	Иначе
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	// ЭД делаем только когда есть действующее соглашение об обмене.
	Если (НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение)
		И НЕ ТипИсточника = Тип("ДокументОбъект.ПакетЭД") Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДействующееСоглашение(ПараметрыЭД) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПроверитьМодификациюОбъектаДляОбменаЭД(Источник);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - объект - владелец присоединенного файла,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ЭлектронныеДокументыВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовыйОбъект") Тогда
		РедактированиеРазрешено = Истина;
		ЭлектронныеДокументыПереопределяемый.ПроверитьВозможностьРедактированияОбъекта(Источник.Ссылка, РедактированиеРазрешено);
		Если НЕ РедактированиеРазрешено Тогда
			ТекстСообщения = НСтр("ru='Существует актуальный электронный документ. Запрещено редактирование ключевых реквизитов документа.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение электронных документов

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.НаправлениеЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВидЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВладелецФайла)
		ИЛИ ТипЗнч(Источник.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) ИЛИ Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
	Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		 И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
	Если Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
	 ИЛИ Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеВерсииЭД = Неопределено;
	
	Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД") Тогда
		СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка);
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
		
		СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
		СтруктураТекВерсииЭД  = ПолучитьСтруктуруВерсииЭД(Источник.ВладелецФайла);
		Если СледСостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(Источник.Ссылка)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получает выборку элементов справочника ЭДПрисоединенныеФайлы по отбору
//
// Параметры:
//  Параметры - Структура, Ключ - название реквизита отбора, Значение - значение отбора
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ 
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Выполняет регламентное задание по получению
// новых электронных документов.
//
// Параметры:
//  ОписаниеОшибки - строка, описание ошибки, в случае ее возникновения в ходе получения документов.
//
Процедура РегламентноеПолучениеНовыхЭД() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"), УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное задание по получению новых эл.документов.'"));
		
	МассивСтруктурСертификатов = Новый Массив;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
		
	НачатьТранзакцию();
	Попытка
		СтМассивовСтруктурСертификатов = Новый Структура("МассивСтруктурСертификатовСервер", МассивСтруктурСертификатов);
		СоотвСоглашений = ЭлектронныеДокументыСлужебныйВызовСервера.СоотвСоглашенийИСтруктурСертификатовДляАвторизацииСервер(
																							,
																							СтМассивовСтруктурСертификатов);
		НовыеДокументы = ПолучитьНовыеЭД(СоотвСоглашений);
		КоличествоПакетов = НовыеДокументы.МассивВозврата.Количество();
		Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
			Если СтруктураРаспаковки.Распаковывать Тогда
				РаспаковатьПакетЭДНаСервере(СтруктураРаспаковки.ПакетЭД);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Текст = НСтр("ru = 'Закончено регламентное задание. Получено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"), УровеньЖурналаРегистрации.Информация, , , Текст);
		
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'Во время регламентного получения новых эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке
// электронных документов.
//
Процедура РегламентнаяОтправкаОформленныхЭД() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"), УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное задание по отправке оформленных эл.документов.'"));
		
	МассивСтруктурСертификатов = Новый Массив;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
		
	Попытка
		СтМассивовСтруктурСертификатов = Новый Структура("МассивСтруктурСертификатовСервер", МассивСтруктурСертификатов);
		СоотвСоглашений = ЭлектронныеДокументыСлужебныйВызовСервера.СоотвСоглашенийИСтруктурСертификатовДляАвторизацииСервер(
																							,
																							СтМассивовСтруктурСертификатов);
		КоличествоПакетов = ОтправкаСформированныхЭД(СоотвСоглашений);
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"),
			УровеньЖурналаРегистрации.Информация, , , Текст);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

// Только для внутреннего использования
Процедура СохранитьВместеСПоследнейЭЦП(ПрисоединенныйФайл,
										ДанныеФайла,

										АдресКаталога,
										СоответствиеФайлЭД) Экспорт
	
	ПолноеИмяФайла = АдресКаталога + СтрЗаменить(ДанныеФайла.ИмяФайла, "..",".");
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		КоличествоПодписей = МассивСтруктурПодписей.Количество();
		Для Сч = 1 По КоличествоПодписей - 1 Цикл
			МассивСтруктурПодписей.Удалить(0);
		КонецЦикла;
		СохранитьПодписи(
				ПрисоединенныйФайл,
				ПолноеИмяФайла,
				МассивСтруктурПодписей,
				АдресКаталога,
				СоответствиеФайлЭД,
				Истина);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СохранитьВместеСЭЦП(ПрисоединенныйФайл,
								ДанныеФайла,
								АдресКаталога,
								СоответствиеФайлЭД,
								ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет действительность подписи, без учета списка отозванных сертификатов.
// В случае ошибки генерирует исключение
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ДвоичныеДанныеФайла   - двоичные данные файла
//  ДвоичныеДанныеПодписи - двоичные данные подписи
//
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодписьДокумента Из ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи Цикл
		ДвоичныеДанныеПодписи = ПодписьДокумента.Подпись.Получить();
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Сертификаты электронных документов

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивСтруктурСертификатов - массив - массив структур сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  СоглашениеЭД - справочник-ссылка - ссылка на соглашение об обмене ЭД через оператора ЭДО, список сертификатов
//    которого требуется.
//
// Возвращаемое значение - таблица значений.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, СоглашениеЭД = Неопределено) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	ЗапросПоСертификатам = Новый Запрос;
	Если ЗначениеЗаполнено(СоглашениеЭД)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "СпособОбменаЭД") = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка,
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|		ПО СоглашенияЭДСертификаты.Сертификат = СертификатыЭЦП.Ссылка
		|ГДЕ
		|	СоглашенияЭДСертификаты.Ссылка = &СоглашениеОбИспользованииЭД" + " И";
		ЗапросПоСертификатам.УстановитьПараметр("СоглашениеОбИспользованииЭД", СоглашениеЭД);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка,
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|ГДЕ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|	НЕ СертификатыЭЦП.Отозван
		|	И НЕ СертификатыЭЦП.ПометкаУдаления
		|	И (СертификатыЭЦП.Пользователь = &ТекущийПользователь
		|			ИЛИ СертификатыЭЦП.Пользователь = &ПустойПользователь)
		|	И (СертификатыЭЦП.Отпечаток В (&МассивОтпечатков)
		|			ИЛИ НЕ СертификатыЭЦП.Идентификатор = """")";
	
	ЗапросПоСертификатам.Текст = ТекстЗапроса;
	
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", ПользователиСервер.АвторизованныйПользователь());
	ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",    МассивОтпечатков);
	
	Возврат ЗапросПоСертификатам.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивСтруктурСертификатов - массив - массив структур сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  СоглашениеЭД - справочник-ссылка - ссылка на соглашение об обмене ЭД через оператора ЭДО, список сертификатов
//    которого требуется.
//
// Возвращаемое значение - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, СоглашениеЭД = Неопределено) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, СоглашениеЭД);
	Для Каждого ТекЭл Из МассивСтруктурСертификатов Цикл
		Если ТаблицаДоступныхСертификатов.Найти(ТекЭл.Отпечаток, "Отпечаток") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивСтруктурДоступныхСертификатов.Добавить(ТекЭл);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

// Возвращает пароль к переданному сертификату,
// если он был сохранен в базе
//
// Параметры
//  Сертификат  - элемент справочника СертификатыЭЦП
Функция СохраненныйПарольКСертификату(Сертификат) Экспорт
	
	ПарольКСертификату = Неопределено;
	Если ЗначениеЗаполнено(Сертификат) И Сертификат.ЗапомнитьПарольКСертификату Тогда
		ПарольКСертификату = Сертификат.ПарольПользователя;
	КонецЕсли;
	
	Возврат ПарольКСертификату;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Только для внутреннего использования
Функция ОпределитьЭлектронныйДокумент(УникальныйИД, НаправлениеЭД = Неопределено, ВидЭД = Неопределено, ТипЭлементаВерсииЭД = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Если НаправлениеЭД <> Неопределено Тогда
		Текст = Текст + "
		|И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
	КонецЕсли;
	Если ВидЭД <> Неопределено Тогда
		Текст = Текст + "
		|И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД";
	КонецЕсли;
	Если ТипЭлементаВерсииЭД <> Неопределено Тогда
		Текст = Текст + "
		|И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("УникальныйИД",        УникальныйИД);
	Запрос.УстановитьПараметр("НаправлениеЭД",       НаправлениеЭД);
	Запрос.УстановитьПараметр("ВидЭД",               ВидЭД);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД КАК СтатусЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НомерВерсииЭД) КАК НомерВерсииЭД
	|ПОМЕСТИТЬ МаксВерсия
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И ЭДПрисоединенныеФайлы.НомерВерсииЭД В
	|			(ВЫБРАТЬ
	|				МаксВерсия.НомерВерсииЭД
	|			ИЗ
	|				МаксВерсия)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоРегистру = Результат[0].Выбрать();
	Если ВыборкаПоРегистру.Следующий() Тогда
		НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
		СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
		СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
		СтатусЭД          = ВыборкаПоРегистру.СтатусЭД;
	Иначе
		НомерВерсииЭД     = 0;
		СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		СтатусЭД          = Перечисления.СтатусыЭД.ПустаяСсылка();
	КонецЕсли;
	
	Если НомерВерсииЭД = 0 Тогда
		ВыборкаПоСправочнику = Результат[2].Выбрать();
		Если ВыборкаПоСправочнику.Количество() > 0 Тогда
			ВыборкаПоСправочнику.Следующий();
			НомерВерсииЭД    = ВыборкаПоСправочнику.НомерВерсииЭД;
			СсылкаНаДокумент = ВыборкаПоСправочнику.Ссылка;
			СтатусЭД         = ВыборкаПоСправочнику.СтатусЭД;
		КонецЕсли;
	КонецЕсли;
	СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
	СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
	СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
	СтруктураВерсииЭД.Вставить("СтатусЭД",          СтатусЭД);

	Возврат СтруктураВерсииЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь) Экспорт
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца.Ссылка);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

// Только для внутреннего использования
Функция ПолучитьFTPСоединение(Соглашение, ЭтоТест = Ложь) Экспорт
	
	Если ЭтоТест Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка установки FTP соединения.
			|%1'");
	Иначе
		ШаблонСообщения = "%1";
	КонецЕсли;
		
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера);
	Если НастройкаПроксиСервера.Количество() > 0 Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
			Прокси.Пароль = НастройкаПроксиСервера["Пароль"];
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ПараметрыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение,
		"АдресСервера, ПользовательFTP, ПарольFTP, ПортFTP, ПассивноеСоединениеFTP, РесурсВходящихДокументов, РесурсИсходящихДокументов");
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыСоглашения.АдресСервера,
											ПараметрыСоглашения.ПортFTP,
											ПараметрыСоглашения.ПользовательFTP,
											ПараметрыСоглашения.ПарольFTP,
											Прокси,
											ПараметрыСоглашения.ПассивноеСоединениеFTP);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
			|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("121");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭтоТест Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат FTPСоединение;
	
КонецФункции

// Только для внутреннего использования
Процедура ПодготовитьПутьFTP(Путь) Экспорт
	Путь = СтрЗаменить(Путь, "\", "/");
	Если ЗначениеЗаполнено(Путь) Тогда
		Если НЕ Лев(Путь, 1) = "/" Тогда
			Путь = "/" + Путь;
		КонецЕсли;
		Если НЕ Прав(Путь, 1) = "/" Тогда
			Путь = Путь + "/";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура используется для проведения тестирования настроек соглашения
//
// Параметры:
//  Соглашение - СправочникСсылка.Соглашение - тестируемое соглашение.
//
Процедура ТестСвязиОбменаЧерезFTP(Соглашение) Экспорт
	
	FTPСоединение = ПолучитьFTPСоединение(Соглашение, Истина);
	
	Если FTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Тест. Проверка каталога исходящих документов.
							|%1'");
	
	ПараметрыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение,
																	  "РесурсВходящихДокументов, РесурсИсходящихДокументов");
	ТекстОшибки = "";
	КаталогИсх = ПараметрыСоглашения.РесурсИсходящихДокументов;
	Попытка
		ПодготовитьПутьFTP(КаталогИсх);
		FTPСоединение.УстановитьТекущийКаталог(КаталогИсх);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогИсх, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка записи и чтения файлов в каталоге исходящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ШаблонСообщения = НСтр("ru = 'Тест. Проверка каталога входящих документов.
		|%1'");
	КаталогВх  = ПараметрыСоглашения.РесурсВходящихДокументов;
	
	Попытка
		ПодготовитьПутьFTP(КаталогВх);
		FTPСоединение.УстановитьТекущийКаталог(КаталогВх);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогВх, Истина, ТекстОшибки);
	КонецПопытки;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка записи и чтения файлов в каталоге входящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СоздатьКаталогиFTP(FTPСоединение, ПолныйПуть, ЭтоТест = Ложь, ТекстОшибки = Неопределено) Экспорт
	
	ПолныйПуть = СтрЗаменить(ПолныйПуть, "\", "/");
	МассивКаталогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйПуть, "/", Истина);
	ТекущийПуть = "/";
	FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
	Для Каждого Элемент ИЗ МассивКаталогов Цикл
		
		мКаталог = Новый Массив;
		
		НайтиФайлыВКаталогеFTP(FTPСоединение, Элемент, Неопределено, Истина, ТекстОшибки, мКаталог);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если мКаталог.Количество() = 1 Тогда 
			Если мКаталог[0].ЭтоФайл() Тогда 
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("122");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			СоздаватьКаталог = Ложь;
		Иначе
			СоздаватьКаталог = Истина;
		КонецЕсли;

		Если СоздаватьКаталог Тогда
			Попытка
				FTPСоединение.СоздатьКаталог(Элемент);
				ТекущийПуть = ТекущийПуть + Элемент + "/";
			Исключение
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("123");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецПопытки
		КонецЕсли;
		
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
		Исключение
			ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("124");
			Если НЕ ЭтоТест Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаписатьФайлНаFTP(FTPСоединение,
							Источник,
							ИмяВыходногоФайла,
							ЭтоТест = Ложь,
							РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Записать(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("127");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пакетов электронных документов

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивЭД - Массив ссылок на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - булево, признак, что документы подписаны ЭЦП.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("Соглашение");
	ТЗ_ПЭД.Колонки.Добавить("АдресРесурса");
	ТЗ_ПЭД.Колонки.Добавить("ТребуетсяШифрованиеНаКлиенте");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		ДокументНеПодписан = ЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
						 ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						 ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан;
			
		Если (ПризнакПодписи И ДокументНеПодписан) ИЛИ НЕ УстановленныеПодписиВалидны(ЭД)
			ИЛИ (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД.СоглашениеЭД, "СпособОбменаЭД") = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
				 И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД.СоглашениеЭД, "ПрограммаБанка") = Перечисления.ПрограммыБанка.СбербанкОнлайн) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ЭД.ВладелецФайла, , , ЭД);
		Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ПЭД = НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения);
			НоваяСтрока                     = ПЭД.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.ЭлектронныйДокумент = ЭД;
			НоваяСтрока.ОбъектВладелец      = ЭД.ВладелецФайла;
			ПЭД.Записать();
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'формирование пакета ЭД'"),
																						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД",          ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурса", ТекСтрока.АдресРесурса);
		СтруктураПЭД.Вставить("ТребуетсяШифрованиеНаКлиенте", Ложь);
		Если ТекСтрока.ТребуетсяШифрованиеНаКлиенте = Истина Тогда
			СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте = Истина;
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ ТекСтрока.Соглашение.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия20 Тогда
			
			Если ЭлектронныеДокументыВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(ТекСтрока.ПЭД) Тогда
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				Для Каждого ЭД Из ТекСтрока.ПЭД.ЭлектронныеДокументы Цикл
					ЭДвМассиве = МассивПодготовленныхКОтправкеЭД.Найти(ЭД.ЭлектронныйДокумент);
					Если ЭДвМассиве <> Неопределено Тогда
						МассивПодготовленныхКОтправкеЭД.Удалить(ЭДвМассиве);
					КонецЕсли;
				КонецЦикла;
				ПЭД = ТекСтрока.ПЭД.ПолучитьОбъект();
				ПЭД.СтатусПакета    = Перечисления.СтатусыПакетовЭД.Отменен;
				ПЭД.ПометкаУдаления = Истина;
				ПЭД.Записать();
			КонецЕсли;
		ИначеЕсли ТекСтрока.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			СформироватьЭДПрисоединенныйФайлПакетаБанка(ТекСтрока.ПЭД);
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		Иначе
			СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		ПакетЭД.СоглашениеЭД            = СтруктураПараметров.Соглашение;
		ПакетЭД.СпособОбменаЭД          = СтруктураПараметров.СпособОбменаЭД;
		
		ПакетЭД.ВерсияФорматаПакета     = СтруктураПараметров.ВерсияФорматаПакета;
		ПакетЭД.ДанныеЗашифрованы       = СтруктураПараметров.Зашифрован;
		
		ПакетЭД.АдресРесурсаКонтрагента = СтруктураПараметров.АдресОтправителя;
		ПакетЭД.АдресРесурсаОрганизации = СтруктураПараметров.АдресПолучателя;
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание нового ПакетаЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД;
	
КонецФункции

// Только для внутреннего использования
Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресЗипКонтейнера) Экспорт
	
	// Так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресЗипКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресЗипКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
												Конверт,
												Файл.ИмяБезРасширения,
												СтрЗаменить(Файл.Расширение,".", ""),
												ТекущаяДатаСеанса(),
												ТекущаяДатаСеанса(),
												АдресВоВременномХранилище,
												Неопределено,
												,
												Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		Если ТипЗнч(Документ.ОбъектВладелец)=Тип("ДокументСсылка.ПроизвольныйЭД")
			И (НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен
			ИЛИ НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен) Тогда
			
			Объект = Документ.ОбъектВладелец.ПолучитьОбъект();
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, Документ.ОбъектВладелец);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, Документ.ОбъектВладелец);
				КонецЕсли;
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, Документ.ОбъектВладелец);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, Документ.ОбъектВладелец);
				КонецЕсли;
			КонецЕсли;
			Объект.Записать();
		КонецЕсли;
		
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция НемедленнаяОтправкаЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НЕ Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Функция определяет настройки обмена ЭД
// по источнику - документу базы данных или по ЭД
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(
				Источник,
				ВыводитьСообщения = Истина,
				ПараметрыСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено) Экспорт

	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник, , ЭД.ВидЭД);
		
		Если ЗначениеЗаполнено(ЭД.СоглашениеЭД) Тогда
			ПараметрыЭД.СоглашениеЭД = ЭД.СоглашениеЭД;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
			ПараметрыЭД.Контрагент = ЭД.Контрагент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			ПараметрыЭД.Организация = ЭД.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			ПараметрыЭД.ВидЭД = ЭД.ВидЭД;
		КонецЕсли;
		
		ПараметрыЭД.Вставить("УстановленныеПодписи", ЭД.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток"));
			
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, ПараметрыСертификатов);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			ПараметрыЭД.Удалить("ИмяРеквизитаКонтрагента");
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры
//  ИДОрганизации – строка с ИД Отправителя,
//  ИДКонтрагента - строка с ИД получателя
//
// Возвращаемое значение:
//  Структуру параметров с настройками обмена
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОрганизации, ИДКонтрагента, ТолькоСОператоромЭДО = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаЭД.Организация,
	|	НастройкиОбменаЭД.Контрагент,
	|	НастройкиОбменаЭД.Ссылка КАК Основание,
	|	НастройкиОбменаЭД.РесурсИсходящихДокументов,
	|	НастройкиОбменаЭД.РесурсВходящихДокументов,
	|	ВЫБОР
	|		КОГДА НастройкиОбменаЭД.ЭтоИнтеркампани
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиОбменаЭД
	|ГДЕ
	|	НастройкиОбменаЭД.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|	И НастройкиОбменаЭД.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|	И НЕ НастройкиОбменаЭД.ПометкаУдаления
	|	И НастройкиОбменаЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ &ТолькоСОператоромЭДО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашениеЧерезОЭДО.Ссылка.Организация,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник,
	|	СоглашениеЧерезОЭДО.Ссылка,
	|	NULL,
	|	NULL,
	|	1
	|ИЗ
	|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
	|		ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
	|ГДЕ
	|	СоглашениеЧерезОЭДО.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашениеЧерезОЭДО.Ссылка.ПометкаУдаления
	|	И УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор = &ИдентификаторКонтрагента
	|	И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И СоглашениеЧерезОЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|	И СоглашениеЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДКонтрагента);
	Запрос.УстановитьПараметр("ТолькоСОператоромЭДО", 	  ТолькоСОператоромЭДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Получатель",       ИДОрганизации);
		СтруктураВозврата.Вставить("Отправитель",      ИДКонтрагента);
		СтруктураВозврата.Вставить("Организация",      Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",       Выборка.Контрагент);
		СтруктураВозврата.Вставить("Основание",        Выборка.Основание);
		СтруктураВозврата.Вставить("АдресОтправителя", Выборка.РесурсИсходящихДокументов);
		СтруктураВозврата.Вставить("АдресПолучателя",  Выборка.РесурсВходящихДокументов);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(СоглашениеЧерезОЭДО, Участник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашениеЧерезОЭДО.Ссылка.Организация КАК Организация,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник КАК Контрагент,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор КАК ИдентификаторКонтрагента,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.ФорматФайловОбменаЭД,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Статус,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.ДатаИзмененияСтатуса,
	|	СоглашениеЧерезОЭДО.ИдентификаторОрганизации
	|ИЗ
	|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
	|		ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
	|ГДЕ
	|	СоглашениеЧерезОЭДО.Ссылка = &СоглашениеЧерезОЭДО
	|	И УчастникиОбменовЭДЧерезОператоровЭДО.Участник = &Участник
	|	И СоглашениеЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)";
	Запрос.УстановитьПараметр("СоглашениеЧерезОЭДО", СоглашениеЧерезОЭДО);
	Запрос.УстановитьПараметр("Участник", Участник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента,
		|ФорматФайловОбменаЭД, Статус, ДатаИзмененияСтатуса");
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Вставить("Организация",              Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",               Выборка.Контрагент);
		СтруктураВозврата.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
		СтруктураВозврата.Вставить("ИдентификаторКонтрагента", Выборка.ИдентификаторКонтрагента);
		СтруктураВозврата.Вставить("ФорматФайловОбменаЭД",     Выборка.ФорматФайловОбменаЭД);
		СтруктураВозврата.Вставить("Статус",                   Выборка.Статус);
		СтруктураВозврата.Вставить("ДатаИзмененияСтатуса",     Выборка.ДатаИзмененияСтатуса);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОбработатьПодтвержденияДокументов(АдресКаталога, СоответствиеФайлПараметры, ПакетЭДОбъект) Экспорт
	
	МассивВозврата = Новый Массив;
	
	// Попытаемся получить настройки криптографии.
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Попытка
			НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии .ТипПровайдераЭЦП;
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			Возврат МассивВозврата;
		КонецПопытки;
	Иначе
		Возврат МассивВозврата;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			ФайлыПодписи = НайтиФайлы(АдресКаталога, ЭлементСоответствие.Ключ);
			Если ФайлыПодписи.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписи[0].ПолноеИмя);
			
			ЭлектронныйДокумент = ОпределитьЭлектронныйДокумент(ЭлементСоответствие.Значение.УникальныйИД, НаправлениеИскомогоДокумента);
			Если ЕстьТакаяПодпись(ДвоичныеДанныеПодписи , ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
			
			СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
			Если СертификатыПодписи.Количество() <> 0 Тогда
				Сертификат = СертификатыПодписи[0];
				ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ЭлектронныйДокумент, ДвоичныеДанныеПодписи,
					Base64Строка(Сертификат.Отпечаток), ТекущаяДатаСеанса(), "", ЭлементСоответствие.Ключ,
					ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект), Сертификат.Выгрузить());
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			
			Попытка
				НачатьТранзакцию();
				СтруктураПараметров = Новый Структура;
				ДопустимыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭлектронныйДокумент);
				СтруктураПараметров.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
					НСтр("ru = 'получение подтверждения ЭД'"), ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ЭлектронныйДокумент.ВладелецФайла;
			МассивВозврата.Добавить(ЭлектронныйДокумент.ВладелецФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Получает текстовое представление электронного документа.
//
// Параметры:
//  СсылкаНаЭД - Ссылка на электронный документ, текстовое представление которого необходимо получить.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Версия = СсылкаНаЭД.НомерВерсииЭД;
	Если СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И ЗначениеЗаполнено(СсылкаНаЭД.ДатаФормированияЭДОтправителем) Тогда
		Версия = СсылкаНаЭД.ДатаФормированияЭДОтправителем;
	ИначеЕсли СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И ЗначениеЗаполнено(СсылкаНаЭД.ДатаСоздания) Тогда
		Версия = СсылкаНаЭД.ДатаСоздания;
	КонецЕсли;
	ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
	ТекстДаты = ?(ЗначениеЗаполнено(СсылкаНаЭД.ДатаДокументаОтправителя),
		" от " + Формат(СсылкаНаЭД.ДатаДокументаОтправителя, "ДЛФ=D"), "");
	
	Если СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		Представление = "" + СсылкаНаЭД.ВидЭД + ТекстДаты + ТекстВерсии;
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Представление = "" + СсылкаНаЭД.ТипЭлементаВерсииЭД + ТекстДаты;
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		  ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Представление = "" + СсылкаНаЭД.ВидЭД + " № " + СсылкаНаЭД.НомерДокументаОтправителя + ТекстДаты;
		
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		Представление = "" + СсылкаНаЭД.ВидЭД+" от " + Формат(СсылкаНаЭД.ДатаСоздания,"ДЛФ=D");
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		Представление = "" + СсылкаНаЭД;
	Иначе
		Представление = "" + СсылкаНаЭД.ВидЭД + " № " + СсылкаНаЭД.НомерДокументаОтправителя + ТекстДаты + ТекстВерсии;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Определяет состояние версии электронного документа на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если СсылкаНаЭД = Неопределено Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭД.СоглашениеЭД) Тогда
		
		ТекущийСтатус = СсылкаНаЭД.СтатусЭД;
		
		НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
		
		Если ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненБанком
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ЭЦПНеВерна
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаРеквизитов
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтказанАБС
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаЭкспорта Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Выгружен
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.Картотека2
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.Приостановлен Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
			ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
				Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					И НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка;
				Иначе
					ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				КонецЕсли;
		ИначеЕсли НастройкиОбмена <> Неопределено Тогда
			
			МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
			
			Если МассивСтатусов.Количество() > 0 Тогда
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				Если ИндексТекущегоСтатуса = Неопределено Тогда
				ИначеЕсли ИндексТекущегоСтатуса + 1 = МассивСтатусов.Количество() Тогда
					ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
				Иначе
					СледующийСтатус = МассивСтатусов[ИндексТекущегоСтатуса + 1];
					Если СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаУтверждении;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Подписан
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
						И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД.СоглашениеЭД,"СпособОбменаЭД") = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПереданОператору Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Доставлен
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение 
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.Исполнен
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПринятАБС Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет, все ли установленные на ЭД подписи являются валидными
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция УстановленныеПодписиВалидны(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &Ссылка
	|	И НЕ ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна";
	Запрос.УстановитьПараметр("Ссылка", ЭД.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() > 0 Тогда
		ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
		|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Только для внутреннего использования
Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Неопределено;
	
	Если СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ВозвращаемоеЗначение = СтруктураПараметровДокумента.ВладелецЭД;
	ИначеЕсли СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ЭДВладелецСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтруктураПараметровДокумента.ИдЭДВладельца));
		Если ЭДВладелецСсылка.ПолучитьОбъект() <> Неопределено Тогда
			СтруктураПараметровДокумента.Вставить("ЭлектронныйДокументВладелец", ЭДВладелецСсылка);
			ВозвращаемоеЗначение = ЭДВладелецСсылка.ВладелецФайла;
		КонецЕсли;
	Иначе
		ПозПодстроки = Найти(СтруктураПараметровДокумента.НомерЭД, "##") - 1;
		Если ПозПодстроки > 0 Тогда
			ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, ПозПодстроки);
		Иначе
			ЭлектронныйНомерДокумента = СтруктураПараметровДокумента.НомерЭД;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронныйНомерДокумента) Тогда
			ЗапросДокументовОснований = Новый Запрос;
			ЗапросДокументовОснований.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	(НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД)
			|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
			|	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
			|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
			|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
			ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД", СтруктураПараметровДокумента.НаправлениеЭД);
			ЗапросДокументовОснований.УстановитьПараметр("Параметр",      ЭлектронныйНомерДокумента + "%");
			ЗапросДокументовОснований.УстановитьПараметр("ВидЭД",         СтруктураПараметровДокумента.ВидЭД);
			
			НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выбрать();
			Если НайденныеДокументы.Следующий() Тогда
				ВозвращаемоеЗначение = НайденныеДокументы.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет возможно ли без ошибки извлечь файлы из архива
// Проверяется максимальная длина полного имени файла в 255 символов
// 
// Параметры:
//  ZipЧтение - ЧтениеZIPФайла - открытий zip архив
//  ПапкаРаспаковки - папка, в которую будут извлечены данные
//  ИмяСоздаваемогоФайла - имя файла, который не может быть извлечен
//
// Возвращаемое значение:
//  Булево 
//
Функция ВозможноИзвлечьФайлы(ZipЧтение, ПапкаРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(ПапкаРаспаковки);
	
	Для Каждого Элемент Из ZipЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Только для внутреннего использования
Функция ОтправкаСформированныхЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	Результат = 0;
	// Создадим и заполним документы ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты,
																				СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет получение новых электронных документов
// на основе заведенных соглашений об обмене.
//
Функция ПолучитьНовыеЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура("ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение",
		Новый Массив, Неопределено, Ложь);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоглашениеОбИспользованииЭД.РесурсВходящихДокументов,
	|	СоглашениеОбИспользованииЭД.СпособОбменаЭД,
	|	СоглашениеОбИспользованииЭД.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашениеОбИспользованииЭД.ПометкаУдаления
	|	И СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашениеОбИспользованииЭД.ЭтоТиповое
	|	И НЕ СоглашениеОбИспользованииЭД.ЭтоИнтеркампани";
	
	РесурсыДляПроверки = Запрос.Выполнить().Выгрузить();
	
	ОтборЭП = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	МассивРесурсовЭП = РесурсыДляПроверки.НайтиСтроки(ОтборЭП);
	
	Для Каждого СтрокаРесурсовЭП Из МассивРесурсовЭП Цикл
		Если ПустаяСтрока(СтрокаРесурсовЭП.РесурсВходящихДокументов) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьЭП = СтрокаРесурсовЭП.РесурсВходящихДокументов;
		НаборСообщений = Новый Массив();
		Попытка
			НаборСообщений = ЭлектроннаяПочта.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьЭП);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при получении сообщения с сервера электронной почты.
			|%1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
			ТекстСообщения = НСтр("ru = 'Ошибка при получении новых эл.документов.
			|(подробности см. в Журнале регистрации).'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Получение новых эл.документов'"), ТекстОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			СтруктураПараметров = Новый Структура;
			Если НЕ НеобходимоПолучить(Сообщение, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") Тогда
				ОбработатьПодтверждениеПолучения(Сообщение);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметров.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
				ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, Лев(ЭлементВложенийПисьма.Ключ,
					СтрДлина(ЭлементВложенийПисьма.Ключ) -4), Прав(ЭлементВложенийПисьма.Ключ, 3), ТекущаяДатаСеанса(),
					ТекущаяДатаСеанса(), АдресВХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				
				МассивВозврата.Добавить(ПрисоединенныйФайл);
			КонецЦикла;
			ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, УчетнаяЗаписьЭП, Сообщение.Отправитель,
				Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			ПарольКСертификату = СохраненныйПарольКСертификату(СтруктураПараметров.Соглашение.СертификатОрганизацииДляРасшифровки);
			
			СтруктураШифрования = Новый Структура;
			СтруктураШифрования.Вставить("ПарольДоступа", ПарольКСертификату);
			СтруктураШифрования.Вставить("Зашифрован",    СтруктураПараметров.Зашифрован);
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			СтруктураРаспаковки.Вставить("ПакетЭД",             ПакетЭД.Ссылка);
			РаспаковыватьПакет = НЕ СтруктураПараметров.Зашифрован
								 ИЛИ (СтруктураПараметров.Зашифрован И ПарольКСертификату <> Неопределено);
			СтруктураРаспаковки.Вставить("Распаковывать", РаспаковыватьПакет);
			Если РаспаковыватьПакет Тогда
				ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка,
																											   ,
																											   СтруктураШифрования);
				СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
			КонецЕсли;
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;
	
	ОтборКаталог = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсовКаталоги = РесурсыДляПроверки.НайтиСтроки(ОтборКаталог);
	Для Каждого СтрокаРесурсовКаталог Из МассивРесурсовКаталоги Цикл
		КаталогСФайлами = СтрокаРесурсовКаталог.РесурсВходящихДокументов;
		МассивИменФайлов = Новый Массив;
		МассивФайлов = НайтиФайлы(КаталогСФайлами, "*");
		Для Каждого ЭлементФайл Из МассивФайлов Цикл
			Если ЭлементФайл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлы(ЭлементФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметров.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, Лев(ЭлементФайл.Имя,
				СтрДлина(ЭлементФайл.Имя) -4), Прав(ЭлементФайл.Имя, 3), ТекущаяДатаСеанса(), ТекущаяДатаСеанса(),
				АдресВХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
			МассивВозврата.Добавить(ПрисоединенныйФайл);
			ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, СтрокаРесурсовКаталог, СтруктураПараметров.АдресОтправителя,
				Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			УдалитьФайлы(ЭлементФайл.ПолноеИмя);
			
			ПарольКСертификату = СохраненныйПарольКСертификату(СтруктураПараметров.Соглашение.СертификатОрганизацииДляРасшифровки);
			
			СтруктураШифрования = Новый Структура;
			СтруктураШифрования.Вставить("ПарольДоступа", ПарольКСертификату);
			СтруктураШифрования.Вставить("Зашифрован",    СтруктураПараметров.Зашифрован);
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД",             ПакетЭД.Ссылка);
			СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			РаспаковыватьПакет = НЕ СтруктураПараметров.Зашифрован
								 ИЛИ (СтруктураПараметров.Зашифрован И ПарольКСертификату <> Неопределено);
			СтруктураРаспаковки.Вставить("Распаковывать", РаспаковыватьПакет);
			Если РаспаковыватьПакет Тогда
				ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка,
																											   ,
																											   СтруктураШифрования);
				СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);

			КонецЕсли;
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;
	
	ОтборFTP = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезFTP);
	МассивРесурсовFTP = РесурсыДляПроверки.НайтиСтроки(ОтборFTP);
	Для Каждого СтрокаРесурсовFTP Из МассивРесурсовFTP Цикл
		Соглашение = СтрокаРесурсовFTP.Соглашение;
		FTPСоединение = ПолучитьFTPСоединение(Соглашение);
		Если FTPСоединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КаталогВхДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "РесурсВходящихДокументов");
		
		МассивИменФайлов = Новый Массив;
		МассивФайловFTP = Новый Массив;
		ТекстОшибки = "";
		ПодготовитьПутьFTP(КаталогВхДокументов);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(КаталогВхДокументов); 
		Исключение
			Продолжить;
		КонецПопытки;
		НайтиФайлыВКаталогеFTP(FTPСоединение, КаталогВхДокументов, "*", Ложь, ТекстОшибки, МассивФайловFTP);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ФайлFTP Из МассивФайловFTP Цикл
			Если ФайлFTP.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмяФайла = РабочийКаталог() + ФайлFTP.Имя;
			ПолучитьФайлСFTP(FTPСоединение, ФайлFTP.ПолноеИмя, ПолноеИмяФайла, , ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			ЭлементФайл = Новый Файл(ПолноеИмяФайла);
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлы(ЭлементФайл.ПолноеИмя);
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметров.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезFTP);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка,
																  Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4),
																  Прав(ЭлементФайл.Имя, 3),
																  ТекущаяДатаСеанса(),
																  ТекущаяДатаСеанса(),
																  АдресВХранилище,
																  ,
																  ,
																  Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
			МассивВозврата.Добавить(ПрисоединенныйФайл);
			ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, СтрокаРесурсовFTP, СтруктураПараметров.АдресОтправителя,
				Перечисления.СпособыОбменаЭД.ЧерезFTP);
			УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
			
			ПарольКСертификату = СохраненныйПарольКСертификату(СтруктураПараметров.Соглашение.СертификатОрганизацииДляРасшифровки);
			
			СтруктураШифрования = Новый Структура;
			СтруктураШифрования.Вставить("ПарольДоступа", ПарольКСертификату);
			СтруктураШифрования.Вставить("Зашифрован",    СтруктураПараметров.Зашифрован);
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД",             ПакетЭД.Ссылка);
			СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			РаспаковыватьПакет = НЕ СтруктураПараметров.Зашифрован
								 ИЛИ (СтруктураПараметров.Зашифрован И ПарольКСертификату <> Неопределено);
			СтруктураРаспаковки.Вставить("Распаковывать", РаспаковыватьПакет);
			Если РаспаковыватьПакет Тогда
				ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка,
																											   ,
																											   СтруктураШифрования);
				СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
			КонецЕсли;
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;

	СтруктураВозврата.МассивВозврата = МассивВозврата;
	
	ОтборСпецОператоров = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	МассивРесурсовСпецОператоров = РесурсыДляПроверки.НайтиСтроки(ОтборСпецОператоров);
	
	Если МассивРесурсовСпецОператоров.Количество() > 0 Тогда
		ЭлектронныеДокументыВнутренний.ПолучитьНовыеЭДОператораЭДО(СтруктураВозврата, СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
// Возвращаемое значение:
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//  настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//  Контрагент, СоглашениеЭД или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.ПроизвольныйЭД")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПроизвольныйЭД") Тогда
		
		ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПараметрыЭД.НаправлениеЭД = Источник.Направление;
		ПараметрыЭД.Контрагент    = Источник.Контрагент;
		ПараметрыЭД.Организация   = Источник.Организация;
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		Если Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.ЗапросВыписки;
		Иначе
			ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.КаталогТоваров;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД  = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.СоглашениеЭД   = Источник.Ссылка;
		Если НЕ Источник.ЭтоИнтеркампани
			И (Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
				ИЛИ Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
				ИЛИ Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
				ИЛИ Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP) Тогда
				
			ПараметрыЭД.Контрагент  = Источник.Контрагент;
			ПараметрыЭД.Организация = Источник.Организация;
		КонецЕсли;
	Иначе
		ПараметрыЭД.ВидЭД = ВидЭД;
		ЭлектронныеДокументыПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы,
//
// Параметры:
//  ДобавленныйФайл - Ссылка на элемент справочника с электронным документом,
//  СтруктураЭД - Структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПоверятьОбязательныеРеквизиты Тогда
		ТекстОшибки = "";
		СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД, СоглашениеЭД");
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Значение = Неопределено;
			Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Текст = НСтр("ru = 'Значение параметра <%1> не заполнено!'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Не передан обязательный параметр <%1>!'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка заполнения доп.свойств электронного документа!
			|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
	
	ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
	
	Если СтруктураЭД.Свойство("Контрагент") Тогда
		ФайлОбъект.Контрагент = СтруктураЭД.Контрагент;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ВидЭД") Тогда
		ФайлОбъект.ВидЭД = СтруктураЭД.ВидЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
		ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
	КонецЕсли;
		
	Если СтруктураЭД.Свойство("НомерЭД") Тогда 
		ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
		ФайлОбъект.СоглашениеЭД = СтруктураЭД.СоглашениеЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Организация") Тогда
		ФайлОбъект.Организация = СтруктураЭД.Организация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Автор") Тогда
		ФайлОбъект.Автор = СтруктураЭД.Автор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Ответственный") Тогда
		ФайлОбъект.Ответственный = СтруктураЭД.Ответственный;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда
		ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
		СтруктураЭД.Вставить(
				"СуммаДокумента",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.ЭлектронныйДокументВладелец, "СуммаДокумента"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.Ответственный) Тогда
		ФайлОбъект.Ответственный = ПользователиСервер.АвторизованныйПользователь();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерВерсииЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = СтруктураЭД.НомерВерсииЭД;
	ИначеЕсли СтруктураЭД.Свойство("ВладелецЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = НомерВерсииЭДПоВладельцу(СтруктураЭД.ВладелецЭД);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
		ФайлОбъект.ПолучательЭД = СтруктураЭД.Получатель;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда
		ФайлОбъект.ОтправительЭД = СтруктураЭД.Отправитель;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерДокументаОтправителя") Тогда
		ФайлОбъект.НомерДокументаОтправителя = СтруктураЭД.НомерДокументаОтправителя;
	КонецЕсли;
	Если СтруктураЭД.Свойство("ДатаДокументаОтправителя") Тогда
		ФайлОбъект.ДатаДокументаОтправителя = СтруктураЭД.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СтатусЭД") Тогда
		ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
		ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
	Иначе
		Если ФайлОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ ФайлОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован;
			ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
		Иначе
			ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.Получен;
			ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
		ФайлОбъект.ДополнительныеСвойства.Вставить("СоглашениеЭД", СтруктураЭД.СоглашениеЭД);
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
		ФайлОбъект.ТипЭлементаВерсииЭД = СтруктураЭД.ТипЭлементаВерсииЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИД") Тогда
		ФайлОбъект.УникальныйИД = СтруктураЭД.УникальныйИД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИДВнешний") Тогда
		ФайлОбъект.УникальныйИДВнешний = СтруктураЭД.УникальныйИДВнешний;
	КонецЕсли;

	Если СтруктураЭД.Свойство("ТекстУточнения") Тогда
		ФайлОбъект.ПричинаОтклонения = СтруктураЭД.ТекстУточнения;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем") Тогда
		ФайлОбъект.ДатаФормированияЭДОтправителем = СтруктураЭД.ДатаФормированияЭДОтправителем;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ВерсияРегламентаЭДО") Тогда
		ФайлОбъект.ВерсияРегламентаЭДО = СтруктураЭД.ВерсияРегламентаЭДО;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПричинаОтклонения") Тогда
		ФайлОбъект.ПричинаОтклонения = СтруктураЭД.ПричинаОтклонения;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПодписанныеДанные") Тогда
		ХранилищеПодписанныхДанных = Новый ХранилищеЗначения(СтруктураЭД.ПодписанныеДанные);
		ФайлОбъект.ПодписанныеДанные = ХранилищеПодписанныхДанных;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СуммаДокумента") И ЗначениеЗаполнено(СтруктураЭД.СуммаДокумента) Тогда
		ФайлОбъект.СуммаДокумента = СтруктураЭД.СуммаДокумента;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДополнительнаяИнформация") Тогда
		ФайлОбъект.ДополнительнаяИнформация = СтруктураЭД.ДополнительнаяИнформация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Изменил") Тогда
		ФайлОбъект.Изменил = СтруктураЭД.Изменил;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Наименование") Тогда
		ФайлОбъект.Наименование = СтруктураЭД.Наименование;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Расширение") Тогда
		ФайлОбъект.Расширение = СтруктураЭД.Расширение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаМодификацииУниверсальная") Тогда
		ФайлОбъект.ДатаМодификацииУниверсальная = СтруктураЭД.ДатаМодификацииУниверсальная;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаСоздания") Тогда
		ФайлОбъект.ДатаСоздания = СтруктураЭД.ДатаСоздания;
	КонецЕсли;
	
		Если СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
		ФайлОбъект.ДатаИзмененияСтатусаЭД = СтруктураЭД.ДатаИзмененияСтатусаЭД;
	КонецЕсли;
	
	ФайлОбъект.Записать();
	
	Если ФайлОбъект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ВладелецЭД = ФайлОбъект.ВладелецФайла.ПолучитьОбъект();
		ВладелецЭД.СтатусДокумента = ФайлОбъект.СтатусЭД;
		ВладелецЭД.Записать();
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Только для внутреннего использования
Процедура ЗаписатьОшибкуПоЭД(ВидОперации, ТекстОшибки) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'Выполнение операции: %1.'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВидОперации);
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	
КонецПроцедуры

// Возвращает текстовое представление заголовка события по подсистеме.
//
Функция ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обмен ЭД.'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ПолучитьСтруктуруФайла(Строка) Экспорт
	
	ИмяФайла = КорректноеИмяФайла(Строка, Истина);
	Файл = Новый Файл(ИмяФайла);
	
	Возврат Новый Структура("ИмяБезРасширения, Расширение", Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение, ".",""));
	
КонецФункции

// Только для внутреннего использования
Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

// Только для внутреннего использования
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ЭлектронныеДокументыПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сообщения пользователю

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник) Экспорт
	
	Если НЕ ЭлектронныеДокументыПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыПереопределяемый.ЕстьПравоНастройкиПараметровЭД() Тогда
		ШаблонСообщения = Нстр("ru = 'Обработка %1.
									 |Операция не выполнена!
									 |Введите действующее ""Соглашение об использовании электронных документов"" с реквизитами:'");
	Иначе
		ШаблонСообщения = Нстр("ru = 'Обработка %1.
									 |Операция не выполнена!
									 |Необходимо ввести действующее ""Соглашение об использовании электронных документов"" с реквизитами:'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	ЭтоСчетФактураВыданный = Ложь;
	Если ПараметрыЭД.Свойство("ЭтоСчетФактураВыданный") И ЗначениеЗаполнено(ПараметрыЭД.ЭтоСчетФактураВыданный) Тогда
		ЭтоСчетФактураВыданный = ПараметрыЭД.ЭтоСчетФактураВыданный;
	КонецЕсли;
		
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("НаправлениеЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 5;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") И ЭтоСчетФактураВыданный Тогда
			Порядок = 0.5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			Если ЭтоСчетФактураВыданный Тогда
				Если НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") Тогда
					СтрокаПараметров.Ключ = "Способ обмена";
					СтрокаПараметров.Значение = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
				ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
					СтрокаПараметров.Ключ = "Участник";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
				Если ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Банк";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				Если ТекПараметр.Ключ = "Организация" Тогда
					СтрокаПараметров.Ключ = "Организация-отправитель";
				ИначеЕсли ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Организация-получатель";
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Только для внутреннего использования
Процедура ОтправитьПакетЧерезРесурсБанка(Настройки, Данные, Результат) Экспорт

	Соединение = ПолучитьСоединение(Настройки);
	
	ЗаголовокЗапроса = "";
	ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, "Accept" , "*/*");
	ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, "User-Agent" , "1C+Enterprise/8.2");
	ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса,
															 "Content-Type" ,
															 "application/xml; charset=UTF-8");
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	Соединение.ОтправитьДляОбработки(Данные,Настройки.Ресурс,ИмяФайлаРезультата,ЗаголовокЗапроса);
	УдалитьФайлы(Данные);
	ФайлРезультата = Новый ТекстовыйДокумент;
	ФайлРезультата.Прочитать(ИмяФайлаРезультата,КодировкаТекста.UTF8);
	УдалитьФайлы(ИмяФайлаРезультата);
	Результат = ФайлРезультата.ПолучитьТекст();
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьСоединение(Настройки) Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	ОпределитьПараметрыСайта(Настройки.Адрес, ЗащищенноеСоединение, Адрес, Протокол);
	
	Соединение = Новый HTTPСоединение(Адрес, , , , , ЗащищенноеСоединение);
	
	Возврат Соединение;

КонецФункции

// Только для внутреннего использования
Функция ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ОтветБанка);
		
	URI = "urn:x-obml:1.0";
	Message = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "CMSDETACHED"));
	Имя = ""; Номер = 75; 
	Попытка
		НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	Исключение
		ТекстСообщения = НСтр("ru='Невозможно проверить ЭЦП полученных данных банка.
			|Для проверки ЭЦП используйте компьютеры с настроенной криптографией!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат неопределено;
	КонецПопытки;

	Если ЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Попытка
			ЭлектроннаяЦифроваяПодпись.ПроверитьПодпись(МенеджерКриптографии, Message.data.__content, Message.signature[0]);
		Исключение
			ШаблонСообщения = НСтр("ru = ' %1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																					 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'Получение данных из банка'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	СодержимоеФайла = Новый Соответствие;
	СодержимоеФайла.Вставить("Данные", Message.data.__content); 
	СодержимоеФайла.Вставить("Подпись", Message.signature[0]);
	СодержимоеФайла.Вставить("Сертификаты", МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Message.signature[0]));
	
	Возврат СодержимоеФайла;

КонецФункции

// Только для внутреннего использования
Процедура ОбработатьОтветБанка(ДанныеОтвета, ЭД) Экспорт
	
	ФайлДанных = ПолучитьИмяВременногоФайла();
	Сообщение = ДанныеОтвета.Получить("Данные");
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, СоглашениеЭД, ВидЭД");
			
	ВидЭД = РеквизитыЭД.ВидЭД;
	Попытка
		НачатьТранзакцию();
		Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			Сообщение.Записать(ФайлДанных);
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ФайлДанных);
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "success" Тогда
					ЧтениеXML.Прочитать();
					ЧтениеXML.Прочитать();
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("УникальныйИДВнешний", ЧтениеXML.Значение);
					СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Доставлен);
					ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
					Прервать;
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "error" Тогда
					ЧтениеXML.Прочитать();
					ЧтениеXML.Прочитать();
					КодОшибки = ЧтениеXML.Значение;
					ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке(КодОшибки);
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
					СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОтклоненБанком);
					ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
				КонецЕсли;
			КонецЦикла;
			ЧтениеXML.Закрыть();
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
			АдресФайла = ПоместитьВоВременноеХранилище(Сообщение);
			НаименованиеЗапроса = ЭД.Наименование;
			ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
									РеквизитыЭД.СоглашениеЭД,
									СтрЗаменить(НаименованиеЗапроса, "Запрос выписки", "Выписка банка за период "),
									"xml",
									ТекущаяДатаСеанса(),
									ТекущаяДатаСеанса(),
									АдресФайла,
									,
									,
									Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			Подпись = ДанныеОтвета.Получить("Подпись");
			СертификатыПодписи = ДанныеОтвета.Получить("Сертификаты");
			Для Каждого Сертификат Из СертификатыПодписи Цикл
				ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ДобавленныйФайл, 
								Подпись,
								Base64Строка(Сертификат.Отпечаток),
								ТекущаяДатаСеанса(),
								"",
								,
								ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
								Сертификат.Выгрузить());
			КонецЦикла;
			
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.СоглашениеЭД, "Контрагент");
			Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(Контрагент, РеквизитыЭД.СоглашениеЭД);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Автор",                       ПользователиСервер.АвторизованныйПользователь());
			СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
			СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметров.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ВыпискаБанка);
			СтруктураПараметров.Вставить("Ответственный",               Ответственный);
			СтруктураПараметров.Вставить("Организация",                 РеквизитыЭД.Организация);
			СтруктураПараметров.Вставить("СоглашениеЭД",                РеквизитыЭД.СоглашениеЭД);
			СтруктураПараметров.Вставить("Контрагент",                  Контрагент);
			СтруктураПараметров.Вставить("ДатаДокументаОтправителя",    ТекущаяДатаСеанса());
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ЭД);
			СтруктураПараметров.Вставить("ВладелецЭД",                  РеквизитыЭД.СоглашениеЭД);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ДобавленныйФайл, Истина);
			ОпределитьИсполненныеПлатежныеПоручения(ДобавленныйФайл);

		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УдалитьФайлы(ФайлДанных);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ПапкаДляРаспаковки =  РабочийКаталог("Proc", ЭД.УникальныйИдентификатор());
				
				Попытка
					ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если НЕ ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
						ТекстОшибки, ТекстСообщения);
					Возврат Неопределено;
				КонецПопытки;

				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ФайлДанных = Новый Файл(ИмяФайла);
				
				ФайлыАрхива = Новый Массив;
				ФайлыАрхива.Добавить(ФайлДанных);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
																								 ЭД.НаправлениеЭД,
																								 ЭД.УникальныйИдентификатор());
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ПолучитьПредставлениеЭД(ЭД.Ссылка);
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
				СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
				ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				Прервать; // должен быть только один файл данных
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПереченьВременныхФайлов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Только для внутреннего использования
Функция НастройкиОбменаЭД(СсылкаНаЭД) Экспорт
	
	НастройкиОбмена = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			РеквизитыЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаЭД);
		Иначе
			РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД,
				"ВидЭД, НаправлениеЭД, СоглашениеЭД, ВерсияРегламентаЭДО");
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыЭД) Тогда
			РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.СоглашениеЭД,
				"СпособОбменаЭД, СертификатыПодписейОрганизации, ПрограммаБанка");
				
			ИспользуетсяНесколькоПодписей = Ложь;
			Если ЗначениеЗаполнено(РеквизитыСоглашения.СертификатыПодписейОрганизации) Тогда
				ИспользуетсяНесколькоПодписей = РеквизитыСоглашения.СертификатыПодписейОрганизации.Выгрузить().Количество() > 1;
			КонецЕсли;
			НастройкиОбмена = Новый Структура;
			НастройкиОбмена.Вставить("СпособОбмена",          РеквизитыСоглашения.СпособОбменаЭД);
			НастройкиОбмена.Вставить("ПрограммаБанка",        РеквизитыСоглашения.ПрограммаБанка);
			НастройкиОбмена.Вставить("Направление",           РеквизитыЭД.НаправлениеЭД);
			НастройкиОбмена.Вставить("ВидЭД",                 РеквизитыЭД.ВидЭД);
			НастройкиОбмена.Вставить("ИспользоватьПодпись",   Истина);
			НастройкиОбмена.Вставить("ИспользоватьКвитанции", Ложь);
			НастройкиОбмена.Вставить("ИспользуетсяНесколькоПодписей", ИспользуетсяНесколькоПодписей);
			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО",   РеквизитыЭД.ВерсияРегламентаЭДО);
			
			Если НастройкиОбмена.СпособОбмена <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				ЗапросПоНастройкам = Новый Запрос;
				ЗапросПоНастройкам.УстановитьПараметр("СоглашениеЭД",    РеквизитыЭД.СоглашениеЭД);
				ЗапросПоНастройкам.УстановитьПараметр("НаправлениеЭД",   РеквизитыЭД.НаправлениеЭД);
				ЗапросПоНастройкам.УстановитьПараметр("ВидЭД",           РеквизитыЭД.ВидЭД);
				ЗапросПоНастройкам.УстановитьПараметр("ИспользуетсяЭЦП",
					ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи"));
				
				ЗапросПоНастройкам.Текст =
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА &ИспользуетсяЭЦП
				|			ТОГДА Соглашение.ИспользоватьПодпись
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ИспользоватьПодпись,
				|	Соглашение.ИспользоватьКвитанции
				|ИЗ
				|	(ВЫБРАТЬ
				|		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
				|		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ИспользоватьКвитанции,
				|		ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий) КАК НаправлениеЭД
				|	ИЗ
				|		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
				|	ГДЕ
				|		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
				|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &СоглашениеЭД
				|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
				|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
				|		ВЫБОР
				|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
				|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
				|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
				|		КОНЕЦ
				|	ИЗ
				|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|	ГДЕ
				|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
				|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
				|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать) КАК Соглашение
				|ГДЕ
				|	Соглашение.НаправлениеЭД = &НаправлениеЭД";
				
				Результат = ЗапросПоНастройкам.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда
					ТЗ = Результат.Выгрузить();
					ЗаполнитьЗначенияСвойств(НастройкиОбмена, ТЗ[0]);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Только для внутреннего использования
Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ДопДанные)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Только для внутреннего использования
Процедура СохранитьФайлыДопДанныхЭД(ПрисоединенныйФайл, ИмяКаталога, СтруктураФайловЭД) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		Выборка = ВыборкаДопДанныеЭД(ПрисоединенныйФайл);

		Если Выборка.Следующий() Тогда
			Файл = Новый Файл(ИмяКаталога);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Выборка.Ссылка);
			ИмяПолучаемогоФайла = СтрЗаменить(ДанныеФайла.ИмяФайла, "..", ".");
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		
			СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяПолучаемогоФайла);
			
			// Необходимо предусмотреть заполнение подписей для дополнительного файла в дереве транспортной информации.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет представление электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//  СтруктураПараметров: НомерВладельца, ДатаВладельца, ВерсияЭД.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров) Экспорт
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = "_" + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = "_" + Формат(ЗначениеСвойства, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И ВидЭД <> Перечисления.ВидыЭД.ПлатежноеПоручение И ВидЭД <> Перечисления.ВидыЭД.Квитанция
		И ВидЭД <> Перечисления.ВидыЭД.ЗапросВыписки И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = ' (версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ  ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		ТекстВидЭД = "СФ";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		ТекстВидЭД = "ТОРГ-12";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		ТекстВидЭД = "Акт";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ТекстВидЭД = "Акт на передачу прав";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		ТекстВидЭД = "Счет";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		ТекстВидЭД = "ЗаказТовара";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		ТекстВидЭД = "ОтветНаЗаказ";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		ТекстВидЭД = "ПрайсЛист";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ТекстВидЭД = НСтр("ru = 'КаталогТоваров'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		ТекстВидЭД = "ОтчетОПродажахКомиссионногоТовара";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		ТекстВидЭД = "ОтчетОСписанииКомиссионногоТовара";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = "ПередачаИнт";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = "ВозвратИнт";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ТекстВидЭД = "Извещение о получении";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
		ТекстВидЭД = "Подтверждение";
		ТипЭД = "";
		Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД) Тогда
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			 ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " даты получения";
			Иначе
				ТекстВидЭД = ТекстВидЭД + " даты отправки";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ТекстВидЭД = "Уведомление об уточнении";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		ТекстВидЭД = "Платежное поручение";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
		ТекстВидЭД = "Квитанция";
	КонецЕсли;
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

// Определяет представление электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//  СтруктураПараметров: НомерВладельца, ДатаВладельца, ВерсияЭД.
//
Функция ТранслитПредставлениеЭД(ВидЭД, СтруктураПараметров) Экспорт
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = " " + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = " " + Формат(ЗначениеСвойства, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И ВидЭД <> Перечисления.ВидыЭД.ПлатежноеПоручение И ВидЭД <> Перечисления.ВидыЭД.Квитанция
		И ВидЭД <> Перечисления.ВидыЭД.ЗапросВыписки И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = ' (ver. %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ  ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		ТекстВидЭД = "SF";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		ТекстВидЭД = "TORG-12";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
		ТекстВидЭД = "TORG-12 (titul %1)";
		ТекстВерсии = СтрЗаменить(ТекстВерсии, "%1", ?(ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец, "prodavca", "pokupatelya"));
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ТекстВидЭД = "Soglashenie ob izmenenii stoimosti (%1)";
		ТекстВерсии = СтрЗаменить(ТекстВерсии, "%1", ?(ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель, "otpravitel", "pokupatel"));
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		ТекстВидЭД = "Akt";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ТекстВидЭД = "Akt na peredachu prav";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		ТекстВидЭД = "Akt (titul %1)";
		ТекстВерсии = СтрЗаменить(ТекстВерсии, "%1", ?(ВидЭД = Перечисления.ВидыЭД.АктИсполнитель, "ispolnitelya", "zakazchika"));
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		ТекстВидЭД = "Schet";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		ТекстВидЭД = "Zakaz tovara";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		ТекстВидЭД = "Otvet na zakaz";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		ТекстВидЭД = "Prays-list";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ТекстВидЭД = "Katalog tovarov";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		ТекстВидЭД = "Otchet o prodazhah komissionnogo tovara";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		ТекстВидЭД = "Otchet o spisanii komissionnogo tovara";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = "Peredacha interkampani";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = "Vozvrat interkampani";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ТекстВидЭД = "Izveschenie o poluchenii";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
		ТекстВидЭД = "Podtverzhdenie";
		ТипЭД = "";
		Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД) Тогда
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			 ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " dati polucheniya";
			Иначе
				ТекстВидЭД = ТекстВидЭД + " dati otpravki";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ТекстВидЭД = "Uvedomlenie ob utochnenii";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		ТекстВидЭД = "Platezhnoe poruchenie";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
		ТекстВидЭД = "Kvitanciya";
	КонецЕсли;
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

// Функция предназначена для проверки имени файла на наличие некорректных символов
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции"
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла
//  ФлУдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки
// Возвращаемое значение:
//  Строка - имя файла
//
Функция КорректноеИмяФайла(Знач СтрИмяФайла, ФлУдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Результат = Истина;
	
	Для Сч = 1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			Если ФлУдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Только для внутреннего использования
Функция МассивСпособовОбменаЭД(ФлагПрямогоОбмена = Истина) Экспорт
	
	СпособыОЭД = Новый Массив;
	Если ФлагПрямогоОбмена Тогда
		СпособыОЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Иначе
		СпособыОЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	КонецЕсли;
	
	Возврат СпособыОЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ЭтоПрямойОбменЭД(СпособОбменаЭД) Экспорт
	
	ФлагПрямогоОбменаЭД = Истина;
	СпособыПрямогоОЭД = МассивСпособовОбменаЭД(Истина);
	Если СпособыПрямогоОЭД.Найти(СпособОбменаЭД) = Неопределено Тогда
		ФлагПрямогоОбменаЭД = Ложь;
	КонецЕсли;
	
	Возврат ФлагПрямогоОбменаЭД;
	
КонецФункции

// Только для внутреннего использования
Функция РабочийКаталог(Знач ВидОбработки = "", КлючУникальности = "") Экспорт
	
	Подкаталог = "";
	Если ЗначениеЗаполнено(ВидОбработки) Тогда
		Подкаталог = КорректноеИмяФайла(ВидОбработки, Истина) + "\";
	КонецЕсли;
	ИмяКаталога = ЭлектронныеДокументыСлужебныйВызовСервера.ТекущийКаталогВременныхФайлов() + Подкаталог
					+ КлючУникальности + "\";
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		УдалитьФайлы(КаталогНаДиске, "*");
	Иначе
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	УдалитьЛишнийСлэшВПути(ИмяКаталога);
	
	Возврат ИмяКаталога;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД) Экспорт
	
	ТекущийСтатус = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			ТекущийСтатус = СсылкаНаЭД.СтатусДокумента;
		Иначе
			ТекущийСтатус = СсылкаНаЭД.СтатусЭД;
		КонецЕсли;
		
		Если НовыйСтатус = Перечисления.СтатусыЭД.Отклонен ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			ТекущийСтатус = НовыйСтатус;
		Иначе
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			
			Если НастройкиОбмена <> Неопределено Тогда
			
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
				Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
					Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
						ТекущийСтатус = НовыйСтатус;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Только для внутреннего использования
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
		
		Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
				
			ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.НеОтправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
					
					// Изменяется набор статусов ЭД в зависимости от использования версии регламента.
					Если НастройкиОбмена.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
						
						Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
							
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
					Иначе
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
				
					Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.КорректировочныйСчетФактура
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользуетсяНесколькоПодписей Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					Если НЕ НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					Если НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Принят);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПринятАБС);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Исполнен);
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.НеОтправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользоватьПодпись Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					Если НастройкиОбмена.ИспользоватьКвитанции Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
					Если НастройкиОбмена.ИспользоватьПодпись
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			
		ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
			
			Если НЕ (НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.Подтверждение
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка) Тогда
					
				Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
					
					Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
					Иначе
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.КорректировочныйСчетФактура
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					Иначе
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						Если НастройкиОбмена.ИспользоватьПодпись
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
								Если НастройкиОбмена.ИспользоватьКвитанции Тогда
									МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
								КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Интеркампани Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

// Только для внутреннего использования
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока Найти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из клиентского модуля, удаляет папку,
// созданную на сервере и переданную на клиент в качестве параметра.
// 
// Параметры:
// Папка - строка, путь к временной папке на сервере.
//
Процедура УдалитьПапкуНаСервере(Папка) Экспорт
	
	Если ЗначениеЗаполнено(Папка) Тогда
		
		Файл = Новый Файл(Папка);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Папка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки обмена электронными документами по структуре параметров.
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, ПараметрыСертификатов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД)
		И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		ФлагИспользованияЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
		Запрос.УстановитьПараметр("ВидЭД",         ВидЭД);
		Запрос.УстановитьПараметр("Контрагент",    Контрагент);
		Запрос.УстановитьПараметр("Пользователь",  ПользователиСервер.АвторизованныйПользователь());
		СоглашениеЭД = "";
		Организация = "";
		Если СтруктураПараметров.Свойство("СоглашениеЭД", СоглашениеЭД) И ЗначениеЗаполнено(СоглашениеЭД) Тогда
			Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
			Запрос.Текст = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстНастроекОбменаПоСоглашению();
			
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				Партнер = "";
				СтруктураПараметров.Свойство("Партнер", Партнер);
				Запрос.УстановитьПараметр("Партнер", Партнер);
			КонецЕсли;
			
			Запрос.Текст = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстЗапросаНастроекОбменаСПриоритетами();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ТЗ = РезультатЗапроса[2].Выгрузить();
			ТЗСертификатовНеобходимыхПодписей = РезультатЗапроса[3].Выгрузить();
	
			Если НЕ ТЗ.Количество()=0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если ФлагИспользованияЭЦП И ПараметрыСертификатов <> Неопределено Тогда
					МассивОтпечатковСертификатов = ВернутьМассивОтпечатковСтруктуры(ПараметрыСертификатов);
					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если СтрокаТЗ.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
								НайденПодходящийСертификат = Ложь;
								ПараметрыОтбора = Новый Структура("Соглашение, Отпечаток", 
																  СтрокаТЗ.СоглашениеЭД, 
																  СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток);
								МассивСтрок = ТЗСертификатовНеобходимыхПодписей.НайтиСтроки(ПараметрыОтбора);
								Для Каждого Элемент ИЗ МассивСтрок Цикл
									Если (МассивОтпечатковСертификатов.Найти(Элемент.Отпечаток) <> Неопределено
										  ИЛИ ТекущаяНастройка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн)
										И СтруктураПараметров.УстановленныеПодписи.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) = Неопределено Тогда 
											ТекущаяНастройка = СтрокаТЗ;
											НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
											НайденПодходящийСертификат = Истина;
											Прервать;
									КонецЕсли
								КонецЦикла;
								Если НайденПодходящийСертификат Тогда
									Прервать;
								КонецЕсли;
							ИначеЕсли ПараметрыСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
					
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если ФлагИспользованияЭЦП Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция СтруктураЗначенийРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	СтруктураДанных = "";
	ЭлектронныеДокументыПереопределяемый.ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Функция формирует электронные документы и помещает их в справочник присоединенных файлов
//
// Параметры:
//  МассивОбъектов - массив ссылок на объекты, к которым надо создать электронный документ;
//  СоответствиеПараметров - соответствие, содержащая настройки обмена ЭД для объектов.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхФайлов = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена);
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
													ВладелецЭД,
													Файл.ИмяБезРасширения,
													СтрЗаменить(Файл.Расширение, ".", ""),
													ВремяСозданияЭД,
													ВремяСозданияЭД,
													АдресФайла,
													Неопределено,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД));
													
		Если (СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
				ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки
				ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросНочнойВыписки)
			И СтруктураОбмена.СтруктураЭД.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			
					Дайджест = ЭлектронныеДокументыСлужебныйВызовСервера.Дайджест(
										ПолноеИмяФайла,
										СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
					СтруктураОбмена.СтруктураЭД.Вставить("ПодписанныеДанные", Base64Значение(Дайджест));
					
		КонецЕсли;
			
		УдалитьФайлы(Файл.Путь);
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл)
			ИЛИ (СтруктураОбмена.Свойство("ПолноеИмяДопФайла")
			И НЕ СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл))Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", Строка(ДобавленныйФайл.УникальныйИдентификатор()));
				
		Если СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		 ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
		Иначе
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		УстановитьСсылкуДляВладельцаВРегистреСостояний(ВладелецЭД, ДобавленныйФайл);
		МассивСформированныхФайлов.Добавить(ДобавленныйФайл);
		
	КонецЦикла;
	
	Возврат МассивСформированныхФайлов;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена) Экспорт
	
	// Формируем ЭД в формате xml, в случае если это:
	// - торг-12 в формате ФНС;
	// - Акт в формате ФНС;
	// - торг-12 в старом формате;
	// - обмен через оператора ЭДО счетом-фактурой.
	Если (СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение)
		ИЛИ СтруктураОбмена.СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		И (СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		   ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		   ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12)
		ИЛИ СтруктураОбмена.СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиОбменовЭД.ФорматФайловОбменаЭД КАК ФорматФайла
		|ИЗ
		|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭД
		|ГДЕ
		|	УчастникиОбменовЭД.Участник = &Участник
		|	И УчастникиОбменовЭД.СоглашениеОбИспользованииЭД = &СоглашениеЭД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДФорматыФайловОбмена.ФорматФайла
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ФорматыФайловОбмена КАК СоглашенияОбИспользованииЭДФорматыФайловОбмена
		|ГДЕ
		|	СоглашенияОбИспользованииЭДФорматыФайловОбмена.Ссылка.Ссылка = &СоглашениеЭД
		|	И СоглашенияОбИспользованииЭДФорматыФайловОбмена.Использовать
		|	И НЕ СоглашенияОбИспользованииЭДФорматыФайловОбмена.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)";
		Запрос.УстановитьПараметр("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
		Запрос.УстановитьПараметр("Участник",     СтруктураОбмена.СтруктураЭД.Контрагент);
		
		ИспользуемыеФорматы = Запрос.Выполнить().Выгрузить();
		
		Если СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			И ИспользуемыеФорматы.Найти(Перечисления.ФорматыФайловОбменаЭД.PDF, "ФорматФайла") = Неопределено Тогда
			НоваяСтр = ИспользуемыеФорматы.Добавить();
			НоваяСтр.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.PDF;
		КонецЕсли;
		
		МассивФайловДляОтправки = Новый Массив;
		
		Для Каждого ИспользуемаяСтрока Из ИспользуемыеФорматы Цикл
			Если ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.XML
				ИЛИ ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат Тогда
				
				ИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
			Иначе
				
				ИмяФайла = СформироватьДопДокумент(СтруктураОбмена, ИспользуемаяСтрока.ФорматФайла);
			КонецЕсли;
			МассивФайловДляОтправки.Добавить(ИмяФайла);
		КонецЦикла;
		ПолноеИмяФайла = СформироватьЗипАрхивФайлов(СтруктураОбмена.ПолноеИмяФайла, МассивФайловДляОтправки);
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
// 
// НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
// Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https", "ftp"
// 
Функция СформироватьПрокси(Протокол) Экспорт
	
	НастройкаПроксиСервера = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера);
	Если НастройкаПроксиСервера.Количество() > 0 Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Только для внутреннего использования
Процедура ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, Имя, Значение) Экспорт

	ЗаголовокЗапроса = ЗаголовокЗапроса + Имя + ": "+ Значение + Символы.ВК + Символы.ПС;

КонецПроцедуры // Добавитьпараметр()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Только для внутреннего использования
Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт, МассивСтруктурДанных = Неопределено) Экспорт
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	ЭтоПроизвольныйДокумент = ЭтоПакетПроизвольногоЭД(ПодготовленныеДокументы);
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = РабочийКаталог("Send", Конверт.Ссылка.УникальныйИдентификатор());
	УдалитьФайлы(АдресКаталога, "*");
	Для Каждого СтрокаЭД Из Конверт.ЭлектронныеДокументы Цикл
		ДокументНаОтправку = СтрокаЭД.ЭлектронныйДокумент;
		
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ДокументНаОтправку);
		
		// Шифрование ЭД
		Если Конверт.ДанныеЗашифрованы Тогда
			Если МассивСтруктурДанных <> Неопределено Тогда // шифрование произведено на клиенте
				Для Каждого ЭлементДанных ИЗ МассивСтруктурДанных Цикл
					Если ЭлементДанных.ЭлектронныйДокумент = СтрокаЭД.ЭлектронныйДокумент Тогда
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ЭлементДанных.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
					Конецесли;
				КонецЦикла;
			Иначе
				ПараметрыШифрования = ПолучитьМассивАдресовСертификатовШифрования(ДокументНаОтправку);
				Если ПараметрыШифрования <> Неопределено Тогда
					Попытка
						НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
						ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
						ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
						ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
						
						МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
						МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
						МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
						МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
					Исключение
						ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						УдалитьФайлы(АдресКаталога, "*");
						Возврат ;
					КонецПопытки;
					
					МассивСертификатов = Новый Массив;
					Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
						
						ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
						Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
						МассивСертификатов.Добавить(Сертификат);
					КонецЦикла;
					
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку) Тогда
			СохранитьВместеСПоследнейЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			СохранитьВместеСЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	ЗипКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ЗипКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
	
	Для Каждого Файл Из Файлы Цикл
		ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений    = ПолучитьСоответствиеФайловИПодписей(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(
									Конверт,
									СоответствиеВложений,
									СоответствиеФайлЭД,
									ЭтоПроизвольныйДокумент);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога + "packageDescription.xml");
	ЗипКонтейнер.Добавить(АдресКаталога + "packageDescription.xml");
	
	ЗипКонтейнер.Записать();
	
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
	УдалитьФайлы(АдресКаталога);
	
КонецПроцедуры

Функция РаспаковатьПакетЭДНаСервере(ПакетЭД, ПараметрыШифрования = "")
	
	МассивВозврата = Новый Массив;
	ПапкаДляРаспаковки = РабочийКаталог("Ext",  ПакетЭД.Ссылка.УникальныйИдентификатор());
	
	ДанныеРаспаковки  = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД,
																									ПапкаДляРаспаковки,
																									ПараметрыШифрования);
	// Если это был произвольный ЭД.
	Если ДанныеРаспаковки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	ВыполнятьАвторизациюНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
	НемедленнаяОтправкаЭД = НемедленнаяОтправкаЭД();
	СтРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "СоглашениеЭД, СпособОбменаЭД");
	Если ВыполнятьКриптооперацииНаСервере
		ИЛИ СтРеквизитов.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		И ВыполнятьАвторизациюНаСервере Тогда
		МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
		МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
		Попытка
			НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		Исключение
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
	Иначе
		МенеджерКриптографии = Неопределено;
	КонецЕсли;
	
	Если МассивДвоичныхДанных.Количество() = 0 Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьПодтвержденияДокументовНаСервере(ДанныеРаспаковки.СоответствиеФайлПараметры,
																							 ПакетЭД,
																							 ПапкаДляРаспаковки);
	КонецЕсли;
	
	Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
		Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
			
		// Обработать пришедшие извещения от оператора.
		// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
		МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
																				СтруктураДанных.ИмяФайла,
																				ПапкаДляРаспаковки,
																				СтруктураДанных.ДвоичныеДанные,
																				ДанныеРаспаковки.СоответствиеФайлПараметры,
																				Истина);
		
		Если МассивСтруктурПодписей <> Неопределено Тогда
			ФлагОшибки = Ложь;
			Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
				Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда
					Попытка 
						ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла, СтруктураПодписи.ДвоичныеДанныеПодписи);
					Исключение
						ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("114");
						ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка подписи'"),
																									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																									ТекстСообщения);
						ФлагОшибки = Истина;
						Прервать;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Если ФлагОшибки Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
																				ПакетЭД,
																				МассивСтруктурПодписей,
																				СтруктураДанных,
																				ДанныеРаспаковки.СоответствиеФайлПараметры,
																				ПапкаДляРаспаковки);
		КонецЦикла;
	КонецЕсли;
	
	ЕстьОшибкаРаспаковки=Ложь;
	МассивЭДДляИзвещенийОПолучении = Новый Массив;
	Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
		СтруктураШифрования = НайтиСтруктуруВПараметрах(СтруктураДанных.ИмяФайлаБезРасширения, ПараметрыШифрования);
		// Если есть шифрование прекращаем обработку, расшифровка проходит на клиенте
		Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда
			Прервать;
		КонецЕсли;
		
		ДанныеРаспаковки.Свойство("ПапкаДляРаспаковки", ПапкаДляРаспаковки);
		
		ТипДанных = Неопределено;
		ЕстьТипДанных = ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных);
		Если ЕстьТипДанных И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
			СоответствиеЭДИПодписей = Новый Соответствие;
			СтруктураВозврата =       Новый Структура;
			КоличествоОбработанныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
																								ПакетЭД,
																								ДанныеРаспаковки,
																								ПапкаДляРаспаковки,
																								Неопределено,
																								СоответствиеЭДИПодписей,
																								СтруктураВозврата);
			МассивДобавленныхФайлов             = СтруктураВозврата.МассивДобавленныхФайлов;
			МассивДобавленныхФайловДляИзвещений = СтруктураВозврата.МассивДобавленныхФайловДляИзвещений;
			Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") И МассивДобавленныхФайлов.Количество() > 0
				И НЕ ВыполнятьКриптооперацииНаСервере
				И НЕ МенеджерКриптографии = Неопределено Тогда
				
					Если СоответствиеЭДИПодписей.Количество()>0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ТекущаяДатаСеанса(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;
			
			// Получили данные от оператора ЭДО
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				Для Каждого ДобавленныйФайл Из МассивДобавленныхФайловДляИзвещений Цикл
					МассивЭДДляИзвещенийОПолучении.Добавить(ДобавленныйФайл);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
																					СтруктураДанных.ИмяФайла,
																					ПапкаДляРаспаковки,
																					СтруктураДанных.ДвоичныеДанные,
																					ДанныеРаспаковки.СоответствиеФайлПараметры);
				
			МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
																					ПакетЭД,
																					МассивСтруктурПодписей,
																					СтруктураДанных,
																					ДанныеРаспаковки.СоответствиеФайлПараметры,
																					ПапкаДляРаспаковки,
																					ЕстьОшибкаРаспаковки);
			Если МассивДобавленныхФайлов.Количество() > 0 Тогда
				Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
					МассивЭДДляИзвещенийОПолучении.Добавить(ДобавленныйФайл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьОшибкаРаспаковки Тогда
			ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЭДДляИзвещенийОПолучении.Количество() > 0 Тогда
		СтруктураСоответствий = Неопределено;
		ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении;
		Если МенеджерКриптографии <> Неопределено
			И ДанныеРаспаковки.СоответствиеФайлПараметры.Получить("ЭтоПроизвольныйЭД") = Неопределено
			И СтРеквизитов.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И (ВыполнятьАвторизациюНаСервере И НемедленнаяОтправкаЭД
			ИЛИ ВыполнятьКриптооперацииНаСервере) Тогда
				СтруктураСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатовПоМассивуЭД(
																				МассивЭДДляИзвещенийОПолучении,
																				,
																				ВидЭД,
																				ВыполнятьКриптооперацииНаСервере,
																				ВыполнятьАвторизациюНаСервере И НемедленнаяОтправкаЭД);
		КонецЕсли;
		Если СтРеквизитов.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда																	
			ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияСоСлужебнымиЭД(МассивЭДДляИзвещенийОПолучении,
																					  ВидЭД,
																					  СтруктураСоответствий);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкаРаспаковки Тогда
		Возврат (Новый массив);
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД, Перечисления.СтатусыПакетовЭД.Распакован);
	УдалитьФайлы(ПапкаДляРаспаковки);

	Возврат МассивВозврата;
	
КонецФункции

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета
	|	И НЕ(ПакетЭД.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|				И ПакетЭД.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн))";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПакетПроизвольногоЭД(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл
		Если ТипЗнч(Документ.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД")
			И Документ.ВладелецФайла.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если Найти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сертификатами ЭЦП

Процедура СохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,

							МассивСтруктурПодписей,
							АдресКаталога,
							СоответствиеФайлЭД,
							БезИсходногоФайла = Ложь,
							ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	
	Если НЕ БезИсходногоФайла Тогда
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭЦП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ФайлСсылка.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ФайлСсылка.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(Файл.Имя, СтруктураПараметровЭД);
		Иначе
			// СоответствиеФайлЭД - структура файлов ЭД.
			НоваяСтрока = СоответствиеФайлЭД.ГлавныйФайлПодписи.Добавить();
			НоваяСтрока.Имя = "";
			НоваяСтрока.Путь = Файл.Имя
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		ДвоичныеДанныеПодписи.Записать(ПолныйПутьПодписи);
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеФайловИПодписей(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						ЭтоПроизвольныйЭД = Неопределено,
						СоответствиеФайлЭД = Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = СтрЗаменить(ДанныеФайла.ИмяФайла, "..", ".");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла, СтруктураПараметровЭД);
		Иначе
			СоответствиеФайлЭД.Вставить("ГлавныйФайл", ДанныеФайла.ИмяФайла);
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроизвольныйЭД = Истина Тогда
		
		ИмяФайла      = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога + ИмяФайла + ".zip";
		ИмяАрхива     = ИмяФайла + ".zip";
		
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭЦП.zip";
			ИмяАрхива     = ИмяФайла + "ЭЦП.zip";
		КонецЕсли;
		
		ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);
		ЗипКонтейнер.Добавить(ИмяКаталога + ИмяПолучаемогоФайла );
		
		ЗипКонтейнер.Записать();
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			УдалитьФайлы(ИмяКаталога + ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ИмяАрхива, СтруктураПараметровЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Добавление объектов в присоединенные файлы

Процедура СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И НЕ ДопПараметры.Свойство("БыстрыйОбмен") Тогда
			НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Иначе
			НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
			Продолжить
		КонецЕсли;
		
		Если НастройкиОбменаЭД.СоглашениеЭД.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		КонецЕсли;

		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12 Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьНакладнуюПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьТорг12ФНСПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьКорДокументПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗаказТовара Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрайсЛист Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПрайсПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И НастройкиОбменаЭД.ВерсияФормата = "CML 2.06" Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьКаталогНоменклатуры(НастройкиОбменаЭД, ДопПараметры);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И (НастройкиОбменаЭД.ВерсияФормата = "CML 4.02"
			ИЛИ Не ЗначениеЗаполнено(НастройкиОбменаЭД.ВерсияФормата)) Тогда
			
			ТоварыКаталога = "";
			ДопПараметры.Свойство("ТоварыКаталога", ТоварыКаталога);
			СписокТоваровКаталога = ПолучитьИзВременногоХранилища(ТоварыКаталога);
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьКаталогНоменклатуры(ОбъектДляВыгрузки,
				СписокТоваровКаталога, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАктВыполненныхРаботПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктИсполнитель Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАкт501ФНСПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(
				ОбъектДляВыгрузки, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(
				ОбъектДляВыгрузки, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПередачуТоваровМеждуОрганизациями(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьВозвратТоваровМеждуОрганизациями(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактура
			ИЛИ ТекЭлемент.Ключ = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьСчетФактуру(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПлатежноеПоручение(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАктНаПередачуПрав(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
			ВерсияРегламентаЭДО = "";
			Если НЕ НастройкиОбменаЭД.Свойство("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО)
				ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламентаЭДО) Тогда
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
			КонецЕсли;
			СтруктураВозврата.СтруктураЭД.Вставить("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО);
			
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДопДокумент(СтруктураОбмена, ОписаниеФормата)
	
	ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(СтруктураОбмена.ПолноеИмяФайла,
																					 СтруктураОбмена.СтруктураЭД.НаправлениеЭД);
	СтруктураОбработкиДопФайла = ОпределитьТипСохраненияПоПеречислению(ОписаниеФормата);
	ФайлИсходногоДокумента = Новый Файл(СтруктураОбмена.ПолноеИмяФайла);
	ИмяИсходногоДокумента = ФайлИсходногоДокумента.ИмяБезРасширения;
	ФайлСохранения = ФайлИсходногоДокумента.Путь + ИмяИсходногоДокумента +"."
		+ СтруктураОбработкиДопФайла.ПредставлениеРасширения;
	
	ТабличныйДокумент.Записать(ФайлСохранения,СтруктураОбработкиДопФайла.ПредставлениеТипаСохранения);
	
	Возврат ФайлСохранения;
	
КонецФункции

Функция ОпределитьТипСохраненияПоПеречислению(ТипСохранения)
	
	СтруктураВозврата = Новый Структура("ПредставлениеРасширения, ПредставлениеТипаСохранения");
	Если ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.DOCX Тогда
		СтруктураВозврата.ПредставлениеРасширения = "docx";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.DOCX;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.HTML Тогда
		СтруктураВозврата.ПредставлениеРасширения = "html";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.HTML;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.XLS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "xls";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.MXL Тогда
		СтруктураВозврата.ПредставлениеРасширения = "mxl";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.MXL;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.ODS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "ods";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.ODS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.PDF Тогда
		СтруктураВозврата.ПредставлениеРасширения = "pdf";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.PDF;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьЗипАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлЗипАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьЗип = Новый ЗаписьZIPФайла(ФайлЗипАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьЗип.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьЗип.Записать();
		Возврат ФайлЗипАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка сообщений

Функция СоздатьТекстОписиЭД(Конверт, СоответствиеВложений, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент)
	
	РеквизитыКонверта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт, "Отправитель, Получатель");
	ЦентрОбменаЭД =    РеквизитыКонверта.Отправитель;
	УчастникОбменаЭД = РеквизитыКонверта.Получатель;
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьХМЛ.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьХМЛ.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Текст произвольного документа
	Если ЭтоПроизвольныйДокумент Тогда 
		Текст = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент.ВладелецФайла.Текст;
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Текст");
		ЗаписьХМЛ.ЗаписатьТекст(Текст);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
	// Шифрование по документам
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьХМЛ.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Зашифрован");
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьТекст("Да");
		Иначе
			ЗаписьХМЛ.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьХМЛ.ЗаписатьТекст(Вложение.Ключ);
		
		СтруктураПараметровЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		НомерЭД = ""; УникальныйИД = "";
		Если СтруктураПараметровЭД.Свойство("НомерЭД", НомерЭД) И ЗначениеЗаполнено(НомерЭД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьХМЛ.ЗаписатьТекст(НомерЭД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		Если СтруктураПараметровЭД.Свойство("УникальныйИД", УникальныйИД) И ЗначениеЗаполнено(УникальныйИД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("УникальныйИД");
			ЗаписьХМЛ.ЗаписатьТекст(УникальныйИД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьХМЛ.ЗаписатьТекст(Подпись);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение почты

Процедура ОбработатьПодтверждениеПолучения(Сообщение, ЭтоФайл = Ложь)
	
	Если ЭтоФайл Тогда
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(Сообщение.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
			КонецЕсли;
			Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
			КонецЕсли;
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		
		Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
			И ДатаПолучения <> Дата('00010101') Тогда
			ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
		КонецЕсли;
		УдалитьФайлы(Сообщение.ПолноеИмя);
	Иначе
		Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") > 0 Тогда
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеПодтверждения = Вложение.Значение;
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
				ДвоичныеДанныеПодтверждения.Записать(ИмяФайла);
				
				ЧтениеХМЛ = Новый ЧтениеXML;
				ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
				Пока ЧтениеХМЛ.Прочитать() Цикл
					Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
					КонецЕсли;
					Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
					И ДатаПолучения <> Дата('00010101') Тогда
					
					ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПодтверждениеПоПакету(ПакетЭД, РесурсОтправителя, АдресОтправителя, ТипОтправки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла",ПакетЭД));
	Если ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Тогда
		Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			Если НЕ ПакетЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
				ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
				СоответствиеВложений = Новый Соответствие;
				СоответствиеВложений.Вставить(ФайлХМЛ.Имя, Новый ДвоичныеДанные(ФайлХМЛ.ПолноеИмя));
				ПараметрыОтправки = Новый Структура("Кому, Тема, Тело, Вложения, Пароль", АдресОтправителя,
					"Подтверждение получения пакета электронных документов: " + ИмяПакетаЭД, , СоответствиеВложений, РесурсОтправителя.Пароль);
				Попытка
					РаботаСПочтовымиСообщениями.ОтправитьСообщение(РесурсОтправителя, ПараметрыОтправки);
				Исключение
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты.
									|%1'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
					ТекстСообщения = НСтр("ru = 'Ошибка при отправке эл.документов.
											|(подробности см. в Журнале регистрации).'");
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Отправка эл.документов'"),
																								ТекстОшибки,
																								ТекстСообщения);
				КонецПопытки;
				УдалитьФайлы(ФайлХМЛ);
			КонецЕсли;
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "СоглашениеЭД");
			FTPСоединение = ПолучитьFTPСоединение(Соглашение);
			Если FTPСоединение = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			КаталогИсхДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "РесурсИсходящихДокументов");
			ПодготовитьПутьFTP(КаталогИсхДокументов);
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			ТекстОшибки = "";
			Попытка
				FTPСоединение.УстановитьТекущийКаталог(КаталогИсхДокументов);
			Исключение
				СоздатьКаталогиFTP(FTPСоединение, КаталогИсхДокументов, , ТекстОшибки);
			КонецПопытки;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Возврат;
			КонецЕсли;
			ЗаписатьФайлНаFTP(FTPСоединение, ФайлХМЛ.ПолноеИмя, ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		Иначе
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			АдресКаталога = АдресОтправителя + ?(Прав(АдресОтправителя,1) <> "\", "\", "");
			КопироватьФайл(ФайлХМЛ.ПолноеИмя, АдресКаталога + ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД)
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	// Корневой элемент
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подтверждение");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ЭлектронныйДокумент");
	ЗаписьХМЛ.ЗаписатьТекст(ИмяПакетаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаПолучения");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат Новый Файл(ИмяФайла);
	
КонецФункции

Функция НеобходимоПолучить(Сообщение, СтруктураПараметров)
	
	Если Сообщение.Вложения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() = 1 Тогда 
	
		Если Найти(Сообщение.Тема, "Подтверждение") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Найти(Сообщение.Тема, "Обмен эл.документами:") Тогда
			
			Для Каждого Вложение ИЗ Сообщение.Вложения Цикл
				ДвоичныеДанныеВложения = Вложение.Значение;
			КонецЦикла;
		
			Результат = НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеВложения, Вложение.Ключ, СтруктураПараметров);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанные, ИмяФайла, СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим из файла вложений идентификаторы отправителя и получателя
	// и сохраним файл на диск
	ИмяВременногоФайлаЗИП = ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = РабочийКаталог("Input", КлючУникальности);
	
	Попытка
		ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
			ТекстОшибки, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;

	РаспакованныеФайлы = НайтиФайлы(ПапкаДляРаспаковки, "*");
	
	ФайлИнформации      = Неопределено;
	ФайлКарточки        = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	Для Каждого ТекФайл Из РаспакованныеФайлы Цикл
		Если Найти(ТекФайл.Имя, "packageDescription") > 0 Тогда
			ФайлИнформации = ТекФайл;
			Прервать;
		ИначеЕсли Найти(ТекФайл.Имя, "card") > 0 Тогда
			ФайлКарточки = ТекФайл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия10;
	Если НЕ ФайлИнформации = Неопределено Тогда
		// Определим в этом файле строку с отправителем и получателем
		// и признак шифрования и попытаемся найти соглашение
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		Зашифрован = Ложь;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Отправитель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДОтправителя = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Зашифрован ИЛИ Булево(ЧтениеХМЛ.Значение);
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Получатель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДПолучателя = ЧтениеХМЛ.Значение;
			КонецЕсли;
				
		КонецЦикла;
		
		ЧтениеХМЛ.Закрыть();
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
	КонецЕсли;
	
	Если НЕ ФайлКарточки = Неопределено Тогда
		
		ИДПолучателя  = Неопределено;
		ИДОтправителя = Неопределено;
		ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия20;
		
		ОбъектXML = Новый ЧтениеXML;
		СтруктураЗначений = Новый Структура;
		
		Попытка
			ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
			ОбъектXML.Закрыть();
			ИДОтправителя = ЭД.Sender.Abonent.ID;
			ИДПолучателя  = ЭД.Receiver.Abonent.ID;
			Если ЭД.Description <> Неопределено Тогда
				Если ЭД.Description.AdditionalData <> Неопределено
					И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
					
					Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
						Если Свойство.Name = "Зашифрован" Тогда
							Зашифрован = Булево(Свойство.Value);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
		Исключение
			ОбъектXML.Закрыть();
			
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	Если (ФайлИнформации = Неопределено И ФайлКарточки = Неопределено)
		ИЛИ НастройкиСоглашения = Неопределено Тогда // не нашли файл с описанием или нет обмена
		
		УдалитьФайлы(ИмяВременногоФайлаЗИП);
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверим, что такого транспортного пакета от этого отправителя еще не было
	ИмяПакета = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	
	ЗапросПрисоединенногоФайла = Новый Запрос;
	ЗапросПрисоединенногоФайла.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПрисоединенныйФайл
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Направление = &Направление
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Получатель ПОДОБНО &Получатель
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Отправитель ПОДОБНО &Отправитель
	|	И ЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Направление",  Перечисления.НаправленияЭД.Входящий);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Получатель",   ИДПолучателя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Отправитель",  ИДОтправителя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Наименование", ИмяПакета);
	
	РезультатПустой = ЗапросПрисоединенногоФайла.Выполнить().Пустой();
	
	УдалитьФайлы(ИмяВременногоФайлаЗИП);
	УдалитьФайлы(ПапкаДляРаспаковки);
	
	Если РезультатПустой Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("Соглашение",          НастройкиСоглашения.Основание);
		СтруктураПараметров.Вставить("АдресОтправителя",    НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",     НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Зашифрован",          Зашифрован);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьПодтверждаемыйПакетЭД(ПредставлениеПакета)
	
	СтрокаИдентификатора = СтрЗаменить(ПредставлениеПакета, "EDI_", "");
	Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора);
	ДокументПакет = Документы.ПакетЭД.ПолучитьСсылку(Идентификатор);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументПакет) Тогда
		ДокументПакет = Неопределено;
	КонецЕсли;
	
	Возврат ДокументПакет;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

// Обновляет статусы электронных документов.
//
// Параметры: 
//  МассивДокументов - массив ссылок на электронные документы, состояние которых надо обновить,
//  ПризнакПодписи - булево, признак того, что документы подписаны ЭЦП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
		Если (ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
			И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			ИЛИ ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НачатьТранзакцию();
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
			
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокумент);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
			
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'подготовка к отправке ЭД'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл) Экспорт
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла, , , ПрисоединенныйФайл);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения)
		ИЛИ ПараметрыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьСрокДействияСертификата(СертификатОрганизацииШифрования);
	
	ДвоичныеДанныеСертификата            = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ФайлСертификата.Получить();
		
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

Функция НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		ИЛИ ПараметрыСоглашения.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия20
		ИЛИ ПараметрыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
		// Через ОЭДО и банк пакеты формируем с одним вложенным ЭД.
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = ТЗ_ПЭД.Найти(ПараметрыСоглашения.СоглашениеЭД, "Соглашение");
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		
		ДанныеЗашифрованы = Ложь;
		ТребуетсяШифрованиеНаКлиенте = Ложь;
		СертификатШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования.Получить();
		Если ЗначениеЗаполнено(СертификатШифрования)
			И НЕ ПараметрыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			ДанныеЗашифрованы = Истина;
			
			СертификатКриптографии = Новый СертификатКриптографии(СертификатШифрования);
			СертификатШифрования   = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
				СертификатКриптографии.Субъект);
					
			Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
				ТребуетсяШифрованиеНаКлиенте = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ПЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПЭД.Дата                    = ТекущаяДатаСеанса();
		ПЭД.Отправитель             = ПараметрыСоглашения.ИдентификаторОрганизации;
		ПЭД.Получатель              = ПараметрыСоглашения.ИдентификаторКонтрагента;
		
		ПЭД.СтатусПакета            = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
		ПЭД.Направление             = Перечисления.НаправленияЭД.Исходящий;
		ПЭД.ДанныеЗашифрованы       = ДанныеЗашифрованы;
		ПЭД.СертификатШифрования    = СертификатШифрования;
		ПЭД.ВерсияФорматаПакета     = ПараметрыСоглашения.ВерсияФорматаПакета;
		
		ПЭД.СпособОбменаЭД          = ПараметрыСоглашения.СпособОбменаЭД;
		ПЭД.АдресРесурсаКонтрагента = ПараметрыСоглашения.РесурсИсходящихДокументов;
		ПЭД.АдресРесурсаОрганизации = ПараметрыСоглашения.РесурсВходящихДокументов;
		ПЭД.СоглашениеЭД            = ПараметрыСоглашения.СоглашениеЭД;
		ПЭД.Контрагент              = ПараметрыСоглашения.Контрагент;
		ПЭД.Организация             = ПараметрыСоглашения.Организация;
		ПЭД.Записать();
		
		НовСтрока                              = ТЗ_ПЭД.Добавить();
		НовСтрока.ПЭД                          = ПЭД.Ссылка;
		НовСтрока.Соглашение                   = ПараметрыСоглашения.СоглашениеЭД;
		НовСтрока.АдресРесурса                 = ПараметрыСоглашения.РесурсИсходящихДокументов;
		НовСтрока.ТребуетсяШифрованиеНаКлиенте = ТребуетсяШифрованиеНаКлиенте;
		
	Иначе
		ПЭД = НайденнаяСтрока.ПЭД.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ПЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтруктуруВПараметрах(ИмяПоиска, ПараметрыШифрования)
	
	Если ТипЗнч(ПараметрыШифрования) = Тип("Массив") Тогда
		Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
			Если СокрЛП(ИмяПоиска) = СокрЛП(СтруктураШифрования.Документ) Тогда
				ВозвращаемыйПараметр = СтруктураШифрования;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрыШифрования) = Тип("Структура") Тогда
		ВозвращаемыйПараметр = ПараметрыШифрования;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

// Только для внутреннего использования
Функция ВернутьМассивОтпечатковСтруктуры(СтруктураСертификатов) Экспорт
	
	МассивВозврата = Новый Массив;
	Для Каждого СтруктураКлиентскогоСертификата Из СтруктураСертификатов Цикл
		МассивВозврата.Добавить(СтруктураКлиентскогоСертификата.Отпечаток);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Процедура ЗаписатьДатуПолучения(ЭД, ДатаИзменения)
	
	ТекСтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СтатусЭД");
	
	Попытка
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты получения ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ЭД, ДатаИзменения)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, ВидЭД, СоглашениеЭД");
	ТекСтатусЭД = РеквизитыЭД.СтатусЭД;
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.СоглашениеЭД, "СпособОбменаЭД");
	
	Попытка
		
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ЭД);
				
			Иначе
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты отправки ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",         Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ПараметрыЭД.Вставить("Партнер",          Неопределено);
	КонецЕсли;
	

	Возврат ПараметрыЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Версии электронных документов

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсии
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсии;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функционал клиент банка

Процедура СформироватьЭДПрисоединенныйФайлПакетаБанка(Конверт)
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт.Соглашение,"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов");
	Настройки = Новый Структура("Адрес", РеквизитыСоглашения.АдресСервера);
	
	ЭД = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент;
	
	Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0","CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
		
	Для Каждого СтрокаПодписи ИЗ ЭД.ЭлектронныеЦифровыеПодписи Цикл
		Message.signature.Добавить(СтрокаПодписи.Подпись.Получить());
	КонецЦикла;
	
	ПутьКФайлуОтправки = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьКФайлуОтправки);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись,Message,"signed",URI,,НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
				
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД");

	Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсИсходящихДокументов);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсВходящихДокументов);
	КонецЕсли;
		
	ПоместитьПакетЭДВКонверт(Конверт, ПутьКФайлуОтправки);
	
	УдалитьФайлы(ПутьКФайлуОтправки);
	
КонецПроцедуры

Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол)
	
	АдресСайта = СокрЛП(АдресСайта);
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта, 8);
		ЗащищенноеСоединение = ложь;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол = "https";
		Адрес = Сред(АдресСайта, 9);
		ЗащищенноеСоединение = истина;
	КонецЕсли;
			
КонецПроцедуры

Процедура ОпределитьИсполненныеПлатежныеПоручения(ЭДВыписка)
	
	Если НЕ УстановленныеПодписиВалидны(ЭДВыписка) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВнешнихИдентификаторов = ЭлектронныеДокументыВнутренний.ПолучитьМассивИдентификаторовВыпискиБанка(ЭДВыписка);
	
	Если МассивВнешнихИдентификаторов.Количество()>0 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний В (&МассивИдентификаторов)
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
		|	И ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД";
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивВнешнихИдентификаторов);
		Запрос.УстановитьПараметр("СоглашениеЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВыписка, "СоглашениеЭД"));
		ТабЭД = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаЭД ИЗ ТабЭД Цикл
			СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Исполнен);
			ИзменитьПоСсылкеПрисоединенныйФайл(СтрокаЭД.Ссылка, СтруктураПараметров, Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураПараметров.Свойство("ИдентификаторДопФайла", УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
													ВладелецЭД,
													Файл.ИмяБезРасширения,
													СтрЗаменить(Файл.Расширение, ".", ""),
													ВремяСозданияЭД,
													ВремяСозданияЭД,
													АдресФайла,
													Неопределено,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД));
		
		УдалитьФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
			ВспомогательнаяСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомогательнаяСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомогательнаяСтруктура.Вставить("СоглашениеЭД", СтруктураПараметров.СтруктураЭД.СоглашениеЭД);
			ВспомогательнаяСтруктура.Вставить("НомерЭД",      СтруктураПараметров.СтруктураЭД.НомерЭД);
			ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураПараметров.УникальныйИдентификатор);
			ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомогательнаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

Функция ПреобразоватьДатуВКаноническийВид(ИскомаяДата)
	
	Если ТипЗнч(ИскомаяДата) = Тип("Дата") Тогда
		
		ДатаКаноническогоВида = Формат(Год(ИскомаяДата),"ЧГ=0") + Формат(Месяц(ИскомаяДата), "ЧЦ=2; ЧВН=")
			+ Формат(День(ИскомаяДата), "ЧЦ=2; ЧВН=") + Формат(Час(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=")
			+ Формат(Минута(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		ДатаКаноническогоВида = ИскомаяДата;
	КонецЕсли;
	
	Возврат ДатаКаноническогоВида;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

Процедура ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТестоваяСтрока = "Тестовая строка 1С: Предприятие";
	ТекстовыйДокумент.УстановитьТекст(ТестоваяСтрока);
	ТекстовыйДокумент.Записать(ВремФайл);
	ФайлТест = Новый Файл(ВремФайл);
		
	ЗаписатьФайлНаFTP(FTPСоединение, ВремФайл, ФайлТест.Имя, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлПолучатель = ПолучитьИмяВременногоФайла();
	
	ПолучитьФайлСFTP(FTPСоединение, ФайлТест.Имя, ФайлПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
		
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПолучатель);
	СтрокаРезультата = ТекстовыйДокумент.ПолучитьТекст();
	Если НЕ СтрокаРезультата = ТестоваяСтрока Тогда
		ШаблонСообщения = НСтр("ru = '%1 %2.'");
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("126");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстСообщения,
			FTPСоединение.ТекущийКаталог());
		Возврат;
	КонецЕсли;
	
	УдалитьФайлFTP(FTPСоединение, ФайлТест.Имя, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура ПолучитьФайлСFTP(FTPСоединение, Источник, ИмяВыходногоФайла, ЭтоТест = Ложь, РезультатТеста = Неопределено)
	
	Попытка
		FTPСоединение.Получить(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("128");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;

	
КонецПроцедуры

Процедура НайтиФайлыВКаталогеFTP(FTPСоединение, Путь, Маска, ЭтоТест, РезультатТеста, МассивФайлов)
	
	Попытка
		Если Маска = Неопределено Тогда
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь);
		Иначе
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь, Маска);
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("125");
		
		Если НЕ ЭтоТест = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьФайлFTP(FTPСоединение, Путь, РезультатТеста = Неопределено, ЭтоТест = Ложь)
		
	Попытка
		FTPСоединение.Удалить(Путь);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("129");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

Процедура ПроверитьМодификациюОбъектаДляОбменаЭД(Источник, ПризнакИзменения = Ложь)
	
	Если ПризнакИзменения ИЛИ Источник.ЭтоНовый() Тогда
		ЗарегистрироватьОбъект = Истина;
	Иначе
		ЗарегистрироватьОбъект = НадоЗарегистрироватьОбъект(Источник, Источник.Метаданные());
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьОбъект", ЗарегистрироватьОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с журналом регистрации

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
		ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
		НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
		
		МенеджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
		МенеджерЗаписи.НомерЗаписи        = НомерЗаписи;
		МенеджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
		МенеджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
		МенеджерЗаписи.Дата               = Формат(СсылкаНаЭД.ДатаИзмененияСтатусаЭД, "ДЛФ=");
		МенеджерЗаписи.Пользователь       = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение модифицированности объекта, аналогичные подсистеме обмена данными

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
												   ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
												   СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

Функция НадоЗарегистрироватьОбъект(Источник, ОбъектМетаданных)
	
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();	
	ТаблицаРеквизитовРегистрации = ЭлектронныеДокументыПовтИсп.ПолучитьТаблицуКлючевыхРеквизитовОбъекта(ИмяОбъекта);
	
	Если ТаблицаРеквизитовРегистрации.Количество() = 0 Тогда
		
		// Если перечень реквизитов не задан, то считаем, что объект модифицирован всегда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации ИЗ ТаблицаРеквизитовРегистрации Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицыРеквизитовРегистрации);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дошли до конца, то объект не изменился по реквизитам регистрации;
	// Регистрация не нужна
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
		
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
	+ " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1, Таблица2 - таблицы значений, реквизиты, которые надо проверить на совпадение,
//  РеквизитыОбъекта   - строка, содержит реквизиты, перечисленные через запятую,
//  ДопПараметры       - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Реквизиты шапки";
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРекв.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРекв.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Табличная часть <" + ИмяТабличнойЧасти + ">";
			НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРекв.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

